// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 157 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1898 0 1
  44: PPUSH
  45: CALL 5905 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1898 0 1
  56: PPUSH
  57: CALL 10483 0 1
// Multiplayer_Start ;
  61: CALL 3928 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4040 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: PUSH
 134: LD_OWVAR 48
 138: NOT
 139: AND
 140: IFFALSE 156
 142: GO 144
 144: DISABLE
// begin enable ;
 145: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 146: LD_ADDR_OWVAR 47
 150: PUSH
 151: CALL 4841 0 0
 155: ST_TO_ADDR
// end ; end_of_file
 156: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 157: LD_INT 0
 159: PPUSH
 160: PPUSH
 161: PPUSH
 162: PPUSH
 163: PPUSH
// mpGameType := GameTypeCoop ;
 164: LD_ADDR_EXP 30
 168: PUSH
 169: LD_INT 4
 171: ST_TO_ADDR
// multi_settings_counter := 6 ;
 172: LD_ADDR_EXP 18
 176: PUSH
 177: LD_INT 6
 179: ST_TO_ADDR
// multi_settings := [ ] ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: EMPTY
 186: ST_TO_ADDR
// if Multiplayer then
 187: LD_OWVAR 4
 191: IFFALSE 371
// begin your_side := mp_player_side ;
 193: LD_ADDR_OWVAR 2
 197: PUSH
 198: LD_OWVAR 7
 202: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 203: LD_ADDR_EXP 6
 207: PUSH
 208: LD_OWVAR 6
 212: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 213: LD_ADDR_EXP 7
 217: PUSH
 218: LD_OWVAR 17
 222: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 223: LD_ADDR_EXP 8
 227: PUSH
 228: LD_OWVAR 15
 232: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 233: LD_ADDR_EXP 9
 237: PUSH
 238: LD_OWVAR 16
 242: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 243: LD_ADDR_EXP 10
 247: PUSH
 248: EMPTY
 249: PUSH
 250: EMPTY
 251: LIST
 252: ST_TO_ADDR
// for i in mp_teams do
 253: LD_ADDR_VAR 0 2
 257: PUSH
 258: LD_OWVAR 12
 262: PUSH
 263: FOR_IN
 264: IFFALSE 307
// if i then
 266: LD_VAR 0 2
 270: IFFALSE 305
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_EXP 10
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: LD_EXP 10
 289: PUSH
 290: LD_INT 1
 292: ARRAY
 293: PUSH
 294: LD_VAR 0 2
 298: UNION
 299: PPUSH
 300: CALL_OW 1
 304: ST_TO_ADDR
 305: GO 263
 307: POP
 308: POP
// for i := 1 to multi_settings_counter do
 309: LD_ADDR_VAR 0 2
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_EXP 18
 323: PUSH
 324: FOR_TO
 325: IFFALSE 367
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_EXP 17
 336: PPUSH
 337: LD_EXP 17
 341: PUSH
 342: LD_INT 1
 344: PLUS
 345: PPUSH
 346: LD_VAR 0 2
 350: PPUSH
 351: CALL_OW 426
 355: PUSH
 356: LD_INT 1
 358: PLUS
 359: PPUSH
 360: CALL_OW 1
 364: ST_TO_ADDR
 365: GO 324
 367: POP
 368: POP
// end else
 369: GO 557
// begin your_side := 3 ;
 371: LD_ADDR_OWVAR 2
 375: PUSH
 376: LD_INT 3
 378: ST_TO_ADDR
// multi_gametype := 1 ;
 379: LD_ADDR_EXP 6
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 387: LD_ADDR_EXP 7
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: LD_INT 0
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: LD_INT 3
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 0
 412: PUSH
 413: LD_INT 0
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 426: LD_ADDR_EXP 8
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: LD_INT 0
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 465: LD_ADDR_EXP 9
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 3
 481: PUSH
 482: LD_INT 3
 484: PUSH
 485: LD_INT 0
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 0
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: LD_INT 4
 514: PUSH
 515: LD_INT 5
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 526: LD_ADDR_EXP 17
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 4
 536: PUSH
 537: LD_INT 4
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 3
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 557: LD_ADDR_EXP 31
 561: PUSH
 562: LD_EXP 7
 566: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 567: LD_ADDR_EXP 11
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 0
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 0
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 606: LD_ADDR_EXP 14
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: LD_INT 0
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: LD_INT 0
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 645: LD_ADDR_EXP 25
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: LD_INT 0
 655: PUSH
 656: LD_INT 0
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: LD_INT 0
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: LD_INT 0
 670: PUSH
 671: LD_INT 0
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// multi_teamgame := true ;
 684: LD_ADDR_EXP 15
 688: PUSH
 689: LD_INT 1
 691: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: EMPTY
 701: LIST
 702: ST_TO_ADDR
// multi_custom_commanders := true ;
 703: LD_ADDR_EXP 16
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// multi_commanders := [ ] ;
 711: LD_ADDR_EXP 24
 715: PUSH
 716: EMPTY
 717: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 718: LD_ADDR_EXP 27
 722: PUSH
 723: EMPTY
 724: ST_TO_ADDR
// multi_players_amount := 0 ;
 725: LD_ADDR_EXP 26
 729: PUSH
 730: LD_INT 0
 732: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 733: LD_ADDR_EXP 12
 737: PUSH
 738: LD_INT 8
 740: PUSH
 741: LD_INT 9
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 10
 750: PUSH
 751: LD_INT 11
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: PUSH
 758: LD_INT 12
 760: PUSH
 761: LD_INT 13
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 773: LD_ADDR_EXP 29
 777: PUSH
 778: LD_INT 0
 780: PUSH
 781: LD_INT 14
 783: PPUSH
 784: LD_INT 0
 786: PPUSH
 787: CALL 69530 0 2
 791: PUSH
 792: LD_STRING kagan
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 31
 802: PUSH
 803: LD_INT 67
 805: PUSH
 806: LD_INT 102
 808: PUSH
 809: LD_INT 3
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 31
 823: PUSH
 824: LD_INT 73
 826: PUSH
 827: LD_INT 103
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 29
 844: PUSH
 845: LD_INT 78
 847: PUSH
 848: LD_INT 112
 850: PUSH
 851: LD_INT 3
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 15
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL 69530 0 2
 882: PUSH
 883: LD_STRING beria
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 31
 893: PUSH
 894: LD_INT 102
 896: PUSH
 897: LD_INT 86
 899: PUSH
 900: LD_INT 2
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 31
 914: PUSH
 915: LD_INT 98
 917: PUSH
 918: LD_INT 96
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 2
 935: PUSH
 936: LD_INT 115
 938: PUSH
 939: LD_INT 104
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 0
 962: PUSH
 963: LD_INT 16
 965: PPUSH
 966: LD_INT 3
 968: PPUSH
 969: CALL 69530 0 2
 973: PUSH
 974: LD_STRING kirov
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 31
 984: PUSH
 985: LD_INT 169
 987: PUSH
 988: LD_INT 101
 990: PUSH
 991: LD_INT 4
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_INT 31
1005: PUSH
1006: LD_INT 175
1008: PUSH
1009: LD_INT 123
1011: PUSH
1012: LD_INT 5
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 4
1026: PUSH
1027: LD_INT 166
1029: PUSH
1030: LD_INT 115
1032: PUSH
1033: LD_INT 5
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: LD_INT 152
1050: PUSH
1051: LD_INT 98
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: ST_TO_ADDR
// for i := 1 to 8 do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_INT 8
1090: PUSH
1091: FOR_TO
1092: IFFALSE 1421
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1094: LD_VAR 0 2
1098: PPUSH
1099: CALL_OW 530
1103: IFFALSE 1261
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1105: LD_ADDR_EXP 11
1109: PUSH
1110: LD_EXP 11
1114: PPUSH
1115: LD_VAR 0 2
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: CALL_OW 1
1127: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1128: LD_ADDR_EXP 9
1132: PUSH
1133: LD_EXP 9
1137: PPUSH
1138: LD_VAR 0 2
1142: PPUSH
1143: LD_INT 0
1145: PPUSH
1146: CALL_OW 1
1150: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1151: LD_ADDR_EXP 7
1155: PUSH
1156: LD_EXP 7
1160: PPUSH
1161: LD_VAR 0 2
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: CALL_OW 1
1173: ST_TO_ADDR
// for j = 1 to multi_teams do
1174: LD_ADDR_VAR 0 3
1178: PUSH
1179: DOUBLE
1180: LD_INT 1
1182: DEC
1183: ST_TO_ADDR
1184: LD_EXP 10
1188: PUSH
1189: FOR_TO
1190: IFFALSE 1259
// begin if i in multi_teams [ j ] then
1192: LD_VAR 0 2
1196: PUSH
1197: LD_EXP 10
1201: PUSH
1202: LD_VAR 0 3
1206: ARRAY
1207: IN
1208: IFFALSE 1257
// begin tmp := multi_teams [ j ] diff i ;
1210: LD_ADDR_VAR 0 5
1214: PUSH
1215: LD_EXP 10
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PUSH
1226: LD_VAR 0 2
1230: DIFF
1231: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1232: LD_ADDR_EXP 10
1236: PUSH
1237: LD_EXP 10
1241: PPUSH
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_VAR 0 5
1251: PPUSH
1252: CALL_OW 1
1256: ST_TO_ADDR
// end ; end ;
1257: GO 1189
1259: POP
1260: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1261: LD_EXP 9
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PUSH
1272: LD_EXP 9
1276: PUSH
1277: LD_VAR 0 2
1281: ARRAY
1282: PUSH
1283: LD_EXP 13
1287: IN
1288: NOT
1289: AND
1290: IFFALSE 1331
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1292: LD_ADDR_EXP 9
1296: PUSH
1297: LD_EXP 9
1301: PPUSH
1302: LD_VAR 0 2
1306: PPUSH
1307: LD_EXP 13
1311: PUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_EXP 13
1319: PPUSH
1320: CALL_OW 12
1324: ARRAY
1325: PPUSH
1326: CALL_OW 1
1330: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1331: LD_EXP 9
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: NOT
1342: PUSH
1343: LD_EXP 7
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: NOT
1354: AND
1355: PUSH
1356: LD_EXP 11
1360: PUSH
1361: LD_VAR 0 2
1365: ARRAY
1366: NOT
1367: AND
1368: IFFALSE 1393
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1370: LD_ADDR_EXP 14
1374: PUSH
1375: LD_EXP 14
1379: PPUSH
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 1
1387: PPUSH
1388: CALL_OW 1
1392: ST_TO_ADDR
// if multi_sides [ i ] then
1393: LD_EXP 7
1397: PUSH
1398: LD_VAR 0 2
1402: ARRAY
1403: IFFALSE 1419
// multi_players_amount := multi_players_amount + 1 ;
1405: LD_ADDR_EXP 26
1409: PUSH
1410: LD_EXP 26
1414: PUSH
1415: LD_INT 1
1417: PLUS
1418: ST_TO_ADDR
// end ;
1419: GO 1091
1421: POP
1422: POP
// for i in multi_teams do
1423: LD_ADDR_VAR 0 2
1427: PUSH
1428: LD_EXP 10
1432: PUSH
1433: FOR_IN
1434: IFFALSE 1542
// begin for j = 2 to i do
1436: LD_ADDR_VAR 0 3
1440: PUSH
1441: DOUBLE
1442: LD_INT 2
1444: DEC
1445: ST_TO_ADDR
1446: LD_VAR 0 2
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1538
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1454: LD_VAR 0 2
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PPUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 1
1472: ARRAY
1473: PPUSH
1474: CALL_OW 343
// for x = 1 to j - 1 do
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 3
1492: PUSH
1493: LD_INT 1
1495: MINUS
1496: PUSH
1497: FOR_TO
1498: IFFALSE 1534
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1500: LD_VAR 0 2
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PPUSH
1511: LD_VAR 0 2
1515: PUSH
1516: LD_VAR 0 4
1520: ARRAY
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 80
1532: GO 1497
1534: POP
1535: POP
// end ;
1536: GO 1451
1538: POP
1539: POP
// end ;
1540: GO 1433
1542: POP
1543: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1544: LD_ADDR_OWVAR 67
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 2
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_EXP 17
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ARRAY
1572: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1573: LD_ADDR_EXP 19
1577: PUSH
1578: LD_INT 6
1580: PUSH
1581: LD_INT 7
1583: PUSH
1584: LD_INT 8
1586: PUSH
1587: LD_INT 9
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_EXP 17
1600: PUSH
1601: LD_INT 2
1603: ARRAY
1604: ARRAY
1605: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1606: LD_ADDR_EXP 20
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 3
1616: PUSH
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_EXP 17
1633: PUSH
1634: LD_INT 3
1636: ARRAY
1637: ARRAY
1638: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1639: LD_ADDR_EXP 21
1643: PUSH
1644: LD_INT 3000
1646: PUSH
1647: LD_INT 1120
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 5000
1656: PUSH
1657: LD_INT 770
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 6000
1666: PUSH
1667: LD_INT 490
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 8000
1676: PUSH
1677: LD_INT 420
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_EXP 17
1694: PUSH
1695: LD_INT 4
1697: ARRAY
1698: ARRAY
1699: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1700: LD_ADDR_EXP 22
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_EXP 17
1723: PUSH
1724: LD_INT 5
1726: ARRAY
1727: ARRAY
1728: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 17
1752: PUSH
1753: LD_INT 6
1755: ARRAY
1756: ARRAY
1757: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1758: LD_ADDR_EXP 28
1762: PUSH
1763: LD_INT 10500
1765: PUSH
1766: LD_INT 31500
1768: PUSH
1769: LD_INT 52500
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_OWVAR 67
1781: ARRAY
1782: ST_TO_ADDR
// if multi_extra_oil then
1783: LD_EXP 22
1787: IFFALSE 1848
// begin if multi_extra_oil = 1 then
1789: LD_EXP 22
1793: PUSH
1794: LD_INT 1
1796: EQUAL
1797: IFFALSE 1812
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 130
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1812: LD_EXP 22
1816: PUSH
1817: LD_INT 2
1819: EQUAL
1820: IFFALSE 1848
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1822: LD_INT 109
1824: PPUSH
1825: LD_INT 130
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1835: LD_INT 150
1837: PPUSH
1838: LD_INT 112
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1848: LD_OWVAR 67
1852: PUSH
1853: LD_INT 1
1855: GREATER
1856: IFFALSE 1893
// for i := 2 to 8 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 2
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 8
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1891
// SetTech ( tech_advmet , i , state_disabled ) ;
1874: LD_INT 34
1876: PPUSH
1877: LD_VAR 0 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 322
1889: GO 1871
1891: POP
1892: POP
// end ;
1893: LD_VAR 0 1
1897: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1898: LD_INT 0
1900: PPUSH
1901: PPUSH
// if not multi_sides [ preferSide ] then
1902: LD_EXP 7
1906: PUSH
1907: LD_VAR 0 1
1911: ARRAY
1912: NOT
1913: IFFALSE 1927
// begin result := preferSide ;
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: LD_VAR 0 1
1924: ST_TO_ADDR
// exit ;
1925: GO 1974
// end ; for i := 1 to 8 do
1927: LD_ADDR_VAR 0 3
1931: PUSH
1932: DOUBLE
1933: LD_INT 1
1935: DEC
1936: ST_TO_ADDR
1937: LD_INT 8
1939: PUSH
1940: FOR_TO
1941: IFFALSE 1972
// if not multi_sides [ i ] then
1943: LD_EXP 7
1947: PUSH
1948: LD_VAR 0 3
1952: ARRAY
1953: NOT
1954: IFFALSE 1970
// begin result := i ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: LD_VAR 0 3
1965: ST_TO_ADDR
// exit ;
1966: POP
1967: POP
1968: GO 1974
// end ;
1970: GO 1940
1972: POP
1973: POP
// end ;
1974: LD_VAR 0 2
1978: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1979: LD_INT 0
1981: PPUSH
// uc_side := side ;
1982: LD_ADDR_OWVAR 20
1986: PUSH
1987: LD_VAR 0 1
1991: ST_TO_ADDR
// uc_nation := nation_russian ;
1992: LD_ADDR_OWVAR 21
1996: PUSH
1997: LD_INT 3
1999: ST_TO_ADDR
// hc_importance := 100 ;
2000: LD_ADDR_OWVAR 32
2004: PUSH
2005: LD_INT 100
2007: ST_TO_ADDR
// hc_class := class_soldier ;
2008: LD_ADDR_OWVAR 28
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// if num = 1 then
2016: LD_VAR 0 2
2020: PUSH
2021: LD_INT 1
2023: EQUAL
2024: IFFALSE 2087
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2026: LD_INT 1
2028: PPUSH
2029: LD_EXP 20
2033: PPUSH
2034: CALL_OW 381
// hc_gallery := ru ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING ru
2045: ST_TO_ADDR
// hc_face_number := 10 ;
2046: LD_ADDR_OWVAR 34
2050: PUSH
2051: LD_INT 10
2053: ST_TO_ADDR
// hc_name := Popov ;
2054: LD_ADDR_OWVAR 26
2058: PUSH
2059: LD_STRING Popov
2061: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2062: LD_ADDR_OWVAR 29
2066: PUSH
2067: LD_INT 10
2069: PUSH
2070: LD_INT 10
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: ST_TO_ADDR
// result := CreateHuman ;
2077: LD_ADDR_VAR 0 3
2081: PUSH
2082: CALL_OW 44
2086: ST_TO_ADDR
// end ; if num = 2 then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_INT 2
2094: EQUAL
2095: IFFALSE 2166
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2097: LD_INT 1
2099: PPUSH
2100: LD_EXP 20
2104: PPUSH
2105: CALL_OW 383
// hc_class := class_mechanic ;
2109: LD_ADDR_OWVAR 28
2113: PUSH
2114: LD_INT 3
2116: ST_TO_ADDR
// hc_gallery := ru ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING ru
2124: ST_TO_ADDR
// hc_face_number := 1 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// hc_name := Burlak ;
2133: LD_ADDR_OWVAR 26
2137: PUSH
2138: LD_STRING Burlak
2140: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2141: LD_ADDR_OWVAR 29
2145: PUSH
2146: LD_INT 10
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: ST_TO_ADDR
// result := CreateHuman ;
2156: LD_ADDR_VAR 0 3
2160: PUSH
2161: CALL_OW 44
2165: ST_TO_ADDR
// end ; if num = 3 then
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 3
2173: EQUAL
2174: IFFALSE 2237
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2176: LD_INT 1
2178: PPUSH
2179: LD_EXP 20
2183: PPUSH
2184: CALL_OW 381
// hc_gallery := ru ;
2188: LD_ADDR_OWVAR 33
2192: PUSH
2193: LD_STRING ru
2195: ST_TO_ADDR
// hc_face_number := 8 ;
2196: LD_ADDR_OWVAR 34
2200: PUSH
2201: LD_INT 8
2203: ST_TO_ADDR
// hc_name := Kurin ;
2204: LD_ADDR_OWVAR 26
2208: PUSH
2209: LD_STRING Kurin
2211: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2212: LD_ADDR_OWVAR 29
2216: PUSH
2217: LD_INT 12
2219: PUSH
2220: LD_INT 11
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: ST_TO_ADDR
// result := CreateHuman ;
2227: LD_ADDR_VAR 0 3
2231: PUSH
2232: CALL_OW 44
2236: ST_TO_ADDR
// end ; end ;
2237: LD_VAR 0 3
2241: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2242: LD_INT 0
2244: PPUSH
2245: PPUSH
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// for i := 1 to 8 do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_INT 1
2262: DEC
2263: ST_TO_ADDR
2264: LD_INT 8
2266: PUSH
2267: FOR_TO
2268: IFFALSE 3597
// begin if not multi_sides [ i ] then
2270: LD_EXP 7
2274: PUSH
2275: LD_VAR 0 2
2279: ARRAY
2280: NOT
2281: IFFALSE 2285
// continue ;
2283: GO 2267
// if multi_buildings [ multi_sides [ i ] ] then
2285: LD_EXP 29
2289: PUSH
2290: LD_EXP 7
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: ARRAY
2301: IFFALSE 2614
// begin uc_side := i ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_VAR 0 2
2312: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2313: LD_ADDR_OWVAR 21
2317: PUSH
2318: LD_EXP 9
2322: PUSH
2323: LD_VAR 0 2
2327: ARRAY
2328: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2329: LD_ADDR_VAR 0 3
2333: PUSH
2334: LD_EXP 29
2338: PUSH
2339: LD_EXP 7
2343: PUSH
2344: LD_VAR 0 2
2348: ARRAY
2349: ARRAY
2350: PUSH
2351: FOR_IN
2352: IFFALSE 2612
// begin if j [ 1 ] = b_oil_mine then
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PUSH
2363: LD_INT 29
2365: EQUAL
2366: IFFALSE 2403
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 2
2375: ARRAY
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: LD_VAR 0 3
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 2
2398: PPUSH
2399: CALL_OW 441
// bc_type := j [ 1 ] ;
2403: LD_ADDR_OWVAR 42
2407: PUSH
2408: LD_VAR 0 3
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: ST_TO_ADDR
// bc_level := 2 ;
2417: LD_ADDR_OWVAR 43
2421: PUSH
2422: LD_INT 2
2424: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PUSH
2434: LD_INT 6
2436: EQUAL
2437: IFFALSE 2455
// begin bc_kind1 := b_lab_basic ;
2439: LD_ADDR_OWVAR 44
2443: PUSH
2444: LD_INT 9
2446: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2447: LD_ADDR_OWVAR 45
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2455: LD_ADDR_VAR 0 4
2459: PUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PUSH
2469: LD_INT 1
2471: ARRAY
2472: PPUSH
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 2
2480: ARRAY
2481: PUSH
2482: LD_INT 2
2484: ARRAY
2485: PPUSH
2486: LD_VAR 0 3
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_INT 3
2497: ARRAY
2498: PPUSH
2499: CALL_OW 47
2503: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: ARRAY
2512: PUSH
2513: LD_INT 0
2515: EQUAL
2516: IFFALSE 2610
// begin SetBName ( b , j [ 3 ] ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 3
2530: ARRAY
2531: PPUSH
2532: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2536: LD_VAR 0 4
2540: PPUSH
2541: CALL_OW 274
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: LD_INT 320
2551: PUSH
2552: LD_INT 240
2554: PUSH
2555: LD_INT 150
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PPUSH
2569: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2573: LD_VAR 0 4
2577: PPUSH
2578: CALL_OW 274
2582: PPUSH
2583: LD_INT 2
2585: PPUSH
2586: LD_INT 160
2588: PUSH
2589: LD_INT 130
2591: PUSH
2592: LD_INT 100
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_OWVAR 67
2604: ARRAY
2605: PPUSH
2606: CALL_OW 277
// end ; end ;
2610: GO 2351
2612: POP
2613: POP
// end ; if multi_custom_commanders then
2614: LD_EXP 16
2618: IFFALSE 2828
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2620: LD_ADDR_VAR 0 6
2624: PUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_EXP 7
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PPUSH
2641: CALL 1979 0 2
2645: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2646: LD_ADDR_EXP 24
2650: PUSH
2651: LD_EXP 24
2655: PPUSH
2656: LD_EXP 24
2660: PUSH
2661: LD_INT 1
2663: PLUS
2664: PPUSH
2665: LD_VAR 0 6
2669: PPUSH
2670: CALL_OW 2
2674: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 257
2684: PUSH
2685: LD_INT 3
2687: EQUAL
2688: IFFALSE 2793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2690: LD_INT 22
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: LD_INT 51
2701: PPUSH
2702: LD_INT 100
2704: PPUSH
2705: CALL 32114 0 5
// veh := CreateVehicle ;
2709: LD_ADDR_VAR 0 7
2713: PUSH
2714: CALL_OW 45
2718: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2719: LD_VAR 0 7
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 100
2729: PUSH
2730: LD_INT 20
2732: PUSH
2733: LD_OWVAR 67
2737: MUL
2738: MINUS
2739: PPUSH
2740: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2744: LD_VAR 0 7
2748: PPUSH
2749: LD_EXP 12
2753: PUSH
2754: LD_EXP 7
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: ARRAY
2765: PUSH
2766: LD_INT 2
2768: ARRAY
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2777: LD_VAR 0 6
2781: PPUSH
2782: LD_VAR 0 7
2786: PPUSH
2787: CALL_OW 52
// end else
2791: GO 2826
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2793: LD_VAR 0 6
2797: PPUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_EXP 7
2807: PUSH
2808: LD_VAR 0 2
2812: ARRAY
2813: ARRAY
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// end else
2826: GO 3039
// begin uc_side := i ;
2828: LD_ADDR_OWVAR 20
2832: PUSH
2833: LD_VAR 0 2
2837: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2838: LD_ADDR_OWVAR 21
2842: PUSH
2843: LD_EXP 9
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: ST_TO_ADDR
// hc_importance := 100 ;
2854: LD_ADDR_OWVAR 32
2858: PUSH
2859: LD_INT 100
2861: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2862: LD_INT 0
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_EXP 20
2872: PPUSH
2873: CALL_OW 380
// if multiplayer then
2877: LD_OWVAR 4
2881: IFFALSE 2939
// begin hc_name := mp_sides_players_names [ i ] ;
2883: LD_ADDR_OWVAR 26
2887: PUSH
2888: LD_OWVAR 19
2892: PUSH
2893: LD_VAR 0 2
2897: ARRAY
2898: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2899: LD_ADDR_OWVAR 33
2903: PUSH
2904: LD_STRING MULTIAVATARS
2906: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2907: LD_ADDR_OWVAR 34
2911: PUSH
2912: LD_VAR 0 2
2916: PPUSH
2917: CALL_OW 525
2921: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2922: LD_ADDR_OWVAR 27
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: CALL_OW 526
2936: ST_TO_ADDR
// end else
2937: GO 2971
// begin hc_gallery :=  ;
2939: LD_ADDR_OWVAR 33
2943: PUSH
2944: LD_STRING 
2946: ST_TO_ADDR
// hc_name :=  ;
2947: LD_ADDR_OWVAR 26
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2955: LD_ADDR_OWVAR 27
2959: PUSH
2960: LD_INT 1
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: CALL_OW 12
2970: ST_TO_ADDR
// end ; un := CreateHuman ;
2971: LD_ADDR_VAR 0 6
2975: PUSH
2976: CALL_OW 44
2980: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2981: LD_VAR 0 6
2985: PPUSH
2986: LD_EXP 12
2990: PUSH
2991: LD_EXP 7
2995: PUSH
2996: LD_VAR 0 2
3000: ARRAY
3001: ARRAY
3002: PUSH
3003: LD_INT 1
3005: ARRAY
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3014: LD_ADDR_EXP 24
3018: PUSH
3019: LD_EXP 24
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ; InitHc ;
3039: CALL_OW 19
// InitUc ;
3043: CALL_OW 18
// uc_side := i ;
3047: LD_ADDR_OWVAR 20
3051: PUSH
3052: LD_VAR 0 2
3056: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3057: LD_ADDR_OWVAR 21
3061: PUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_VAR 0 2
3071: ARRAY
3072: ST_TO_ADDR
// hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_name :=  ;
3081: LD_ADDR_OWVAR 26
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_importance := 0 ;
3089: LD_ADDR_OWVAR 32
3093: PUSH
3094: LD_INT 0
3096: ST_TO_ADDR
// cl := 1 ;
3097: LD_ADDR_VAR 0 5
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3105: LD_ADDR_VAR 0 3
3109: PUSH
3110: DOUBLE
3111: LD_INT 2
3113: DEC
3114: ST_TO_ADDR
3115: LD_EXP 19
3119: PUSH
3120: FOR_TO
3121: IFFALSE 3593
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3123: LD_VAR 0 3
3127: PUSH
3128: LD_INT 1
3130: MINUS
3131: PUSH
3132: LD_EXP 19
3136: PUSH
3137: LD_INT 1
3139: MINUS
3140: PUSH
3141: LD_INT 4
3143: DIVREAL
3144: MOD
3145: PUSH
3146: LD_INT 0
3148: EQUAL
3149: IFFALSE 3165
// cl := cl + 1 ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_VAR 0 5
3160: PUSH
3161: LD_INT 1
3163: PLUS
3164: ST_TO_ADDR
// if cl > 4 then
3165: LD_VAR 0 5
3169: PUSH
3170: LD_INT 4
3172: GREATER
3173: IFFALSE 3183
// cl := 1 ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_INT 1
3182: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_VAR 0 5
3190: PPUSH
3191: LD_EXP 20
3195: PPUSH
3196: CALL_OW 380
// un := CreateHuman ;
3200: LD_ADDR_VAR 0 6
3204: PUSH
3205: CALL_OW 44
3209: ST_TO_ADDR
// if j > copy then
3210: LD_VAR 0 3
3214: PUSH
3215: LD_VAR 0 9
3219: GREATER
3220: IFFALSE 3249
// copy := Replace ( copy , j , un ) else
3222: LD_ADDR_VAR 0 9
3226: PUSH
3227: LD_VAR 0 9
3231: PPUSH
3232: LD_VAR 0 3
3236: PPUSH
3237: LD_VAR 0 6
3241: PPUSH
3242: CALL_OW 1
3246: ST_TO_ADDR
3247: GO 3331
// begin CopySkills ( copy [ j ] , un ) ;
3249: LD_VAR 0 9
3253: PUSH
3254: LD_VAR 0 3
3258: ARRAY
3259: PPUSH
3260: LD_VAR 0 6
3264: PPUSH
3265: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3269: LD_VAR 0 6
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_VAR 0 9
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PPUSH
3288: LD_INT 2
3290: PPUSH
3291: CALL_OW 260
3295: PPUSH
3296: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3300: LD_VAR 0 6
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_VAR 0 9
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: CALL_OW 260
3326: PPUSH
3327: CALL_OW 239
// end ; if multi_pos_area then
3331: LD_EXP 12
3335: IFFALSE 3591
// begin if GetClass ( un ) = 3 then
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 257
3346: PUSH
3347: LD_INT 3
3349: EQUAL
3350: IFFALSE 3447
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3352: LD_INT 21
3354: PPUSH
3355: LD_INT 1
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 43
3363: PUSH
3364: LD_INT 42
3366: PUSH
3367: LD_INT 42
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: LD_OWVAR 67
3379: ARRAY
3380: PPUSH
3381: LD_INT 80
3383: PPUSH
3384: CALL 32114 0 5
// veh := CreateVehicle ;
3388: LD_ADDR_VAR 0 7
3392: PUSH
3393: CALL_OW 45
3397: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3398: LD_VAR 0 7
3402: PPUSH
3403: LD_EXP 12
3407: PUSH
3408: LD_EXP 7
3412: PUSH
3413: LD_VAR 0 2
3417: ARRAY
3418: ARRAY
3419: PUSH
3420: LD_INT 2
3422: ARRAY
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3431: LD_VAR 0 6
3435: PPUSH
3436: LD_VAR 0 7
3440: PPUSH
3441: CALL_OW 52
// continue ;
3445: GO 3120
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3447: LD_ADDR_VAR 0 8
3451: PUSH
3452: LD_INT 22
3454: PUSH
3455: LD_VAR 0 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 30
3466: PUSH
3467: LD_INT 31
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 58
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3490: LD_VAR 0 6
3494: PPUSH
3495: CALL_OW 257
3499: PUSH
3500: LD_INT 1
3502: EQUAL
3503: PUSH
3504: LD_VAR 0 8
3508: AND
3509: IFFALSE 3558
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3511: LD_VAR 0 6
3515: PPUSH
3516: LD_VAR 0 8
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: CALL_OW 254
3529: PUSH
3530: LD_INT 3
3532: MINUS
3533: PPUSH
3534: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3538: LD_VAR 0 6
3542: PPUSH
3543: LD_VAR 0 8
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// continue ;
3556: GO 3120
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3558: LD_VAR 0 6
3562: PPUSH
3563: LD_EXP 12
3567: PUSH
3568: LD_EXP 7
3572: PUSH
3573: LD_VAR 0 2
3577: ARRAY
3578: ARRAY
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: PPUSH
3584: LD_INT 0
3586: PPUSH
3587: CALL_OW 49
// end ; end ;
3591: GO 3120
3593: POP
3594: POP
// end ;
3595: GO 2267
3597: POP
3598: POP
// end ;
3599: LD_VAR 0 1
3603: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3604: LD_INT 0
3606: PPUSH
3607: PPUSH
3608: PPUSH
3609: PPUSH
3610: PPUSH
// if not multi_support then
3611: LD_EXP 23
3615: NOT
3616: IFFALSE 3620
// exit ;
3618: GO 3923
// result := [ ] ;
3620: LD_ADDR_VAR 0 1
3624: PUSH
3625: EMPTY
3626: ST_TO_ADDR
// for i := 1 to 8 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 8
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3921
// begin result := Replace ( result , i , [ ] ) ;
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: LD_VAR 0 2
3657: PPUSH
3658: EMPTY
3659: PPUSH
3660: CALL_OW 1
3664: ST_TO_ADDR
// if multi_sides [ i ] then
3665: LD_EXP 7
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: IFFALSE 3919
// begin tmp := [ ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: EMPTY
3683: ST_TO_ADDR
// if multi_support = 1 then
3684: LD_EXP 23
3688: PUSH
3689: LD_INT 1
3691: EQUAL
3692: IFFALSE 3789
// begin uc_side := i ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_VAR 0 2
3703: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3704: LD_ADDR_OWVAR 21
3708: PUSH
3709: LD_EXP 9
3713: PUSH
3714: LD_VAR 0 2
3718: ARRAY
3719: ST_TO_ADDR
// for j := 1 to 3 do
3720: LD_ADDR_VAR 0 3
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: FOR_TO
3734: IFFALSE 3787
// begin InitHC_All ( ) ;
3736: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 4
3748: PPUSH
3749: CALL_OW 12
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: LD_INT 4
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3769: LD_ADDR_VAR 0 5
3773: PUSH
3774: LD_VAR 0 5
3778: PUSH
3779: CALL_OW 44
3783: ADD
3784: ST_TO_ADDR
// end ;
3785: GO 3733
3787: POP
3788: POP
// end ; if multi_support = 2 then
3789: LD_EXP 23
3793: PUSH
3794: LD_INT 2
3796: EQUAL
3797: IFFALSE 3894
// begin uc_side := i ;
3799: LD_ADDR_OWVAR 20
3803: PUSH
3804: LD_VAR 0 2
3808: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3809: LD_ADDR_OWVAR 21
3813: PUSH
3814: LD_EXP 9
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: ST_TO_ADDR
// for j := 1 to 5 do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: DOUBLE
3831: LD_INT 1
3833: DEC
3834: ST_TO_ADDR
3835: LD_INT 5
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3892
// begin InitHC_All ( ) ;
3841: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3845: LD_INT 0
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 4
3853: PPUSH
3854: CALL_OW 12
3858: PPUSH
3859: LD_INT 2
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: CALL_OW 12
3869: PPUSH
3870: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3874: LD_ADDR_VAR 0 5
3878: PUSH
3879: LD_VAR 0 5
3883: PUSH
3884: CALL_OW 44
3888: ADD
3889: ST_TO_ADDR
// end ;
3890: GO 3838
3892: POP
3893: POP
// end ; result := Replace ( result , i , tmp ) ;
3894: LD_ADDR_VAR 0 1
3898: PUSH
3899: LD_VAR 0 1
3903: PPUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_VAR 0 5
3913: PPUSH
3914: CALL_OW 1
3918: ST_TO_ADDR
// end ; end ;
3919: GO 3640
3921: POP
3922: POP
// end ;
3923: LD_VAR 0 1
3927: RET
// export function Multiplayer_Start ( ) ; begin
3928: LD_INT 0
3930: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3931: CALL 2242 0 0
// Multiplayer_InitPointSystem ( ) ;
3935: CALL 4930 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3939: LD_INT 20
3941: PPUSH
3942: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3946: LD_INT 150
3948: PPUSH
3949: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3953: LD_INT 5
3955: PPUSH
3956: CALL 5106 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3960: LD_INT 40
3962: NEG
3963: PPUSH
3964: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3968: LD_INT 200
3970: PPUSH
3971: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3975: LD_INT 2
3977: PPUSH
3978: CALL 5106 0 1
// if multi_support then
3982: LD_EXP 23
3986: IFFALSE 3998
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3988: LD_ADDR_EXP 27
3992: PUSH
3993: CALL 3604 0 0
3997: ST_TO_ADDR
// if multi_sides [ your_side ] then
3998: LD_EXP 7
4002: PUSH
4003: LD_OWVAR 2
4007: ARRAY
4008: IFFALSE 4035
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4010: LD_INT 22
4012: PUSH
4013: LD_OWVAR 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PPUSH
4022: CALL_OW 69
4026: PUSH
4027: LD_INT 1
4029: ARRAY
4030: PPUSH
4031: CALL_OW 87
// end ;
4035: LD_VAR 0 1
4039: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
4044: PPUSH
4045: PPUSH
4046: PPUSH
4047: PPUSH
4048: PPUSH
// tmp := [ ] ;
4049: LD_ADDR_VAR 0 6
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to 8 do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 8
4068: PUSH
4069: FOR_TO
4070: IFFALSE 4106
// if multi_sides [ i ] then
4072: LD_EXP 7
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: IFFALSE 4104
// tmp := Join ( tmp , i ) ;
4084: LD_ADDR_VAR 0 6
4088: PUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: LD_VAR 0 2
4098: PPUSH
4099: CALL 64985 0 2
4103: ST_TO_ADDR
4104: GO 4069
4106: POP
4107: POP
// repeat wait ( 0 0$1 ) ;
4108: LD_INT 35
4110: PPUSH
4111: CALL_OW 67
// if tick = 10 10$00 then
4115: LD_OWVAR 1
4119: PUSH
4120: LD_INT 21000
4122: EQUAL
4123: IFFALSE 4294
// begin for i := 1 to 8 do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 8
4137: PUSH
4138: FOR_TO
4139: IFFALSE 4292
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4141: LD_EXP 7
4145: PUSH
4146: LD_VAR 0 2
4150: ARRAY
4151: PUSH
4152: LD_EXP 25
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: NOT
4163: AND
4164: IFFALSE 4290
// begin uc_side := i ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_VAR 0 2
4175: ST_TO_ADDR
// uc_nation := nation_russian ;
4176: LD_ADDR_OWVAR 21
4180: PUSH
4181: LD_INT 3
4183: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4184: LD_INT 22
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 44
4198: PUSH
4199: LD_INT 42
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_OWVAR 67
4211: ARRAY
4212: PPUSH
4213: LD_INT 30
4215: PPUSH
4216: CALL 32114 0 5
// veh := CreateVehicle ;
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: CALL_OW 45
4229: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4230: LD_VAR 0 7
4234: PPUSH
4235: LD_INT 32
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 5
4250: PUSH
4251: LD_OWVAR 67
4255: MINUS
4256: PPUSH
4257: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4261: CALL_OW 44
4265: PPUSH
4266: LD_VAR 0 7
4270: PPUSH
4271: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4275: LD_VAR 0 7
4279: PPUSH
4280: LD_INT 158
4282: PPUSH
4283: LD_INT 106
4285: PPUSH
4286: CALL_OW 111
// end ; end ;
4290: GO 4138
4292: POP
4293: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4294: LD_OWVAR 1
4298: PUSH
4299: LD_EXP 28
4303: GREATER
4304: PUSH
4305: LD_EXP 23
4309: AND
4310: IFFALSE 4498
// begin if tick mod 2 2$00 = 0 then
4312: LD_OWVAR 1
4316: PUSH
4317: LD_INT 4200
4319: MOD
4320: PUSH
4321: LD_INT 0
4323: EQUAL
4324: IFFALSE 4498
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 6
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: LD_VAR 0 6
4343: PPUSH
4344: CALL 29376 0 1
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL 31654 0 4
4356: ST_TO_ADDR
// for s := 1 to tmp do
4357: LD_ADDR_VAR 0 5
4361: PUSH
4362: DOUBLE
4363: LD_INT 1
4365: DEC
4366: ST_TO_ADDR
4367: LD_VAR 0 6
4371: PUSH
4372: FOR_TO
4373: IFFALSE 4496
// begin i := tmp [ s ] ;
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: LD_VAR 0 6
4384: PUSH
4385: LD_VAR 0 5
4389: ARRAY
4390: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4391: LD_EXP 7
4395: PUSH
4396: LD_VAR 0 2
4400: ARRAY
4401: PUSH
4402: LD_EXP 25
4406: PUSH
4407: LD_VAR 0 2
4411: ARRAY
4412: NOT
4413: AND
4414: PUSH
4415: LD_EXP 27
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: AND
4426: IFFALSE 4494
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4428: LD_EXP 27
4432: PUSH
4433: LD_VAR 0 2
4437: ARRAY
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: PPUSH
4443: LD_INT 7
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4453: LD_ADDR_EXP 27
4457: PUSH
4458: LD_EXP 27
4462: PPUSH
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 27
4472: PUSH
4473: LD_VAR 0 2
4477: ARRAY
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL_OW 3
4486: PPUSH
4487: CALL_OW 1
4491: ST_TO_ADDR
// break ;
4492: GO 4496
// end ; end ;
4494: GO 4372
4496: POP
4497: POP
// end ; end ; if not multi_custom_commanders then
4498: LD_EXP 16
4502: NOT
4503: IFFALSE 4616
// begin for i := 1 to 8 do
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_INT 8
4517: PUSH
4518: FOR_TO
4519: IFFALSE 4590
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4521: LD_INT 22
4523: PUSH
4524: LD_VAR 0 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: PUSH
4538: LD_INT 0
4540: EQUAL
4541: PUSH
4542: LD_EXP 25
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: NOT
4553: AND
4554: IFFALSE 4588
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4556: LD_ADDR_EXP 25
4560: PUSH
4561: LD_EXP 25
4565: PPUSH
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 1
4578: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 5176 0 1
// end ; end ;
4588: GO 4518
4590: POP
4591: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4592: LD_EXP 25
4596: PPUSH
4597: CALL 29376 0 1
4601: PUSH
4602: LD_EXP 7
4606: PPUSH
4607: CALL 29376 0 1
4611: EQUAL
4612: IFFALSE 4616
// break ;
4614: GO 4636
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4616: CALL 4750 0 0
4620: NOT
4621: PUSH
4622: LD_EXP 2
4626: AND
4627: PUSH
4628: LD_EXP 24
4632: NOT
4633: OR
4634: IFFALSE 4108
// game := false ;
4636: LD_ADDR_EXP 2
4640: PUSH
4641: LD_INT 0
4643: ST_TO_ADDR
// for i := 1 to 8 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 8
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4694
// begin if multi_sides [ i ] then
4660: LD_EXP 7
4664: PUSH
4665: LD_VAR 0 2
4669: ARRAY
4670: IFFALSE 4692
// SetMultiScore ( i , multi_points [ i ] ) ;
4672: LD_VAR 0 2
4676: PPUSH
4677: LD_EXP 32
4681: PUSH
4682: LD_VAR 0 2
4686: ARRAY
4687: PPUSH
4688: CALL_OW 506
// end ;
4692: GO 4657
4694: POP
4695: POP
// if multi_loosers [ your_side ] then
4696: LD_EXP 25
4700: PUSH
4701: LD_OWVAR 2
4705: ARRAY
4706: IFFALSE 4729
// begin if Multiplayer then
4708: LD_OWVAR 4
4712: IFFALSE 4720
// YouLostInMultiplayer else
4714: CALL_OW 107
4718: GO 4727
// YouLost (  ) ;
4720: LD_STRING 
4722: PPUSH
4723: CALL_OW 104
// end else
4727: GO 4745
// begin if Multiplayer then
4729: LD_OWVAR 4
4733: IFFALSE 4741
// YouWinInMultiplayer else
4735: CALL_OW 106
4739: GO 4745
// YouWin ;
4741: CALL_OW 103
// end ; end ;
4745: LD_VAR 0 1
4749: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4750: LD_INT 0
4752: PPUSH
4753: PPUSH
// result := false ;
4754: LD_ADDR_VAR 0 1
4758: PUSH
4759: LD_INT 0
4761: ST_TO_ADDR
// for side in botSides do
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: LD_EXP 3
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4834
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4775: LD_ADDR_VAR 0 1
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_VAR 0 2
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 50
4804: PUSH
4805: EMPTY
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PPUSH
4813: CALL_OW 69
4817: PUSH
4818: LD_INT 0
4820: GREATER
4821: ST_TO_ADDR
// if result then
4822: LD_VAR 0 1
4826: IFFALSE 4832
// exit ;
4828: POP
4829: POP
4830: GO 4836
// end ;
4832: GO 4772
4834: POP
4835: POP
// end ;
4836: LD_VAR 0 1
4840: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4841: LD_INT 0
4843: PPUSH
4844: PPUSH
// result := [ ] ;
4845: LD_ADDR_VAR 0 1
4849: PUSH
4850: EMPTY
4851: ST_TO_ADDR
// for i := 1 to 8 do
4852: LD_ADDR_VAR 0 2
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_INT 8
4864: PUSH
4865: FOR_TO
4866: IFFALSE 4923
// begin if multi_sides [ i ] then
4868: LD_EXP 7
4872: PUSH
4873: LD_VAR 0 2
4877: ARRAY
4878: IFFALSE 4921
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 1
4889: PUSH
4890: LD_STRING #coop-points
4892: PUSH
4893: LD_VAR 0 2
4897: PUSH
4898: LD_VAR 0 2
4902: PUSH
4903: LD_EXP 32
4907: PUSH
4908: LD_VAR 0 2
4912: ARRAY
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: ADD
4920: ST_TO_ADDR
// end ; end ;
4921: GO 4865
4923: POP
4924: POP
// end ;
4925: LD_VAR 0 1
4929: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4930: LD_INT 0
4932: PPUSH
4933: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4934: LD_ADDR_EXP 32
4938: PUSH
4939: LD_INT 0
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: LD_INT 0
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: LD_INT 0
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4973: LD_ADDR_EXP 33
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// end ;
4980: LD_VAR 0 1
4984: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4985: LD_INT 0
4987: PPUSH
// if not multi_points or not side or side > 8 then
4988: LD_EXP 32
4992: NOT
4993: PUSH
4994: LD_VAR 0 1
4998: NOT
4999: OR
5000: PUSH
5001: LD_VAR 0 1
5005: PUSH
5006: LD_INT 8
5008: GREATER
5009: OR
5010: IFFALSE 5014
// exit ;
5012: GO 5051
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5014: LD_ADDR_EXP 32
5018: PUSH
5019: LD_EXP 32
5023: PPUSH
5024: LD_VAR 0 1
5028: PPUSH
5029: LD_EXP 32
5033: PUSH
5034: LD_VAR 0 1
5038: ARRAY
5039: PUSH
5040: LD_VAR 0 2
5044: PLUS
5045: PPUSH
5046: CALL_OW 1
5050: ST_TO_ADDR
// end ;
5051: LD_VAR 0 3
5055: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5056: LD_INT 0
5058: PPUSH
// if not multi_points or not side or side > 8 then
5059: LD_EXP 32
5063: NOT
5064: PUSH
5065: LD_VAR 0 1
5069: NOT
5070: OR
5071: PUSH
5072: LD_VAR 0 1
5076: PUSH
5077: LD_INT 8
5079: GREATER
5080: OR
5081: IFFALSE 5085
// exit ;
5083: GO 5101
// result := multi_points [ side ] ;
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_EXP 32
5094: PUSH
5095: LD_VAR 0 1
5099: ARRAY
5100: ST_TO_ADDR
// end ;
5101: LD_VAR 0 2
5105: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5106: LD_INT 0
5108: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5109: LD_ADDR_EXP 33
5113: PUSH
5114: LD_EXP 33
5118: PPUSH
5119: LD_EXP 33
5123: PUSH
5124: LD_INT 1
5126: PLUS
5127: PPUSH
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 1
5137: ST_TO_ADDR
// end ;
5138: LD_VAR 0 2
5142: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5143: LD_INT 0
5145: PPUSH
// if not id then
5146: LD_VAR 0 1
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5171
// result := multi_points_conditions [ id ] ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_EXP 33
5164: PUSH
5165: LD_VAR 0 1
5169: ARRAY
5170: ST_TO_ADDR
// end ;
5171: LD_VAR 0 2
5175: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// players := [ ] ;
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: EMPTY
5189: ST_TO_ADDR
// for i = 1 to 8 do
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 8
5202: PUSH
5203: FOR_TO
5204: IFFALSE 5263
// begin if i = side then
5206: LD_VAR 0 4
5210: PUSH
5211: LD_VAR 0 1
5215: EQUAL
5216: IFFALSE 5220
// continue ;
5218: GO 5203
// if multi_sides [ i ] and not multi_loosers [ i ] then
5220: LD_EXP 7
5224: PUSH
5225: LD_VAR 0 4
5229: ARRAY
5230: PUSH
5231: LD_EXP 25
5235: PUSH
5236: LD_VAR 0 4
5240: ARRAY
5241: NOT
5242: AND
5243: IFFALSE 5261
// players := players ^ i ;
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_VAR 0 3
5254: PUSH
5255: LD_VAR 0 4
5259: ADD
5260: ST_TO_ADDR
// end ;
5261: GO 5203
5263: POP
5264: POP
// if not players then
5265: LD_VAR 0 3
5269: NOT
5270: IFFALSE 5274
// exit ;
5272: GO 5541
// if players = 1 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 1
5281: EQUAL
5282: IFFALSE 5343
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_VAR 0 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 51
5303: PUSH
5304: EMPTY
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 69
5315: PUSH
5316: FOR_IN
5317: IFFALSE 5339
// SetSide ( i , players [ 1 ] ) ;
5319: LD_VAR 0 4
5323: PPUSH
5324: LD_VAR 0 3
5328: PUSH
5329: LD_INT 1
5331: ARRAY
5332: PPUSH
5333: CALL_OW 235
5337: GO 5316
5339: POP
5340: POP
// end else
5341: GO 5541
// begin j := 1 ;
5343: LD_ADDR_VAR 0 5
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5351: LD_ADDR_VAR 0 4
5355: PUSH
5356: LD_INT 22
5358: PUSH
5359: LD_VAR 0 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 51
5383: PUSH
5384: EMPTY
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 21
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 69
5414: PUSH
5415: FOR_IN
5416: IFFALSE 5539
// begin SetSide ( i , players [ j ] ) ;
5418: LD_VAR 0 4
5422: PPUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 5
5432: ARRAY
5433: PPUSH
5434: CALL_OW 235
// if IsDrivenBy ( i ) then
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 311
5447: IFFALSE 5474
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5449: LD_VAR 0 4
5453: PPUSH
5454: CALL_OW 311
5458: PPUSH
5459: LD_VAR 0 3
5463: PUSH
5464: LD_VAR 0 5
5468: ARRAY
5469: PPUSH
5470: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5474: LD_VAR 0 4
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 247
5488: PUSH
5489: LD_INT 3
5491: EQUAL
5492: IFFALSE 5503
// ComExitBuilding ( i ) ;
5494: LD_VAR 0 4
5498: PPUSH
5499: CALL_OW 122
// j := j + 1 ;
5503: LD_ADDR_VAR 0 5
5507: PUSH
5508: LD_VAR 0 5
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: ST_TO_ADDR
// if j > players then
5517: LD_VAR 0 5
5521: PUSH
5522: LD_VAR 0 3
5526: GREATER
5527: IFFALSE 5537
// j := 1 ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_INT 1
5536: ST_TO_ADDR
// end ;
5537: GO 5415
5539: POP
5540: POP
// end ; end ;
5541: LD_VAR 0 2
5545: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
// i := 3 ;
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 10
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 120
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 101
5586: PUSH
5587: LD_INT 8
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 27
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5610: LD_INT 4
5612: PPUSH
5613: LD_INT 5
5615: PPUSH
5616: LD_VAR 0 3
5620: PUSH
5621: LD_VAR 0 2
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 3
5635: PUSH
5636: LD_VAR 0 2
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: LD_INT 0
5648: PPUSH
5649: CALL_OW 58
// end ;
5653: LD_VAR 0 1
5657: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5658: LD_INT 0
5660: PPUSH
// if not side or side > 8 then
5661: LD_VAR 0 1
5665: NOT
5666: PUSH
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 8
5674: GREATER
5675: OR
5676: IFFALSE 5680
// exit ;
5678: GO 5697
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5680: LD_VAR 0 1
5684: PPUSH
5685: LD_INT 6
5687: PPUSH
5688: CALL 5143 0 1
5692: PPUSH
5693: CALL 4985 0 2
// end ;
5697: LD_VAR 0 2
5701: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5702: LD_INT 0
5704: PPUSH
// if not side or side > 8 then
5705: LD_VAR 0 1
5709: NOT
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 8
5718: GREATER
5719: OR
5720: IFFALSE 5724
// exit ;
5722: GO 5741
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5724: LD_VAR 0 1
5728: PPUSH
5729: LD_INT 4
5731: PPUSH
5732: CALL 5143 0 1
5736: PPUSH
5737: CALL 4985 0 2
// end ;
5741: LD_VAR 0 2
5745: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5746: LD_INT 0
5748: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5749: LD_VAR 0 1
5753: NOT
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_INT 8
5762: GREATER
5763: OR
5764: PUSH
5765: LD_VAR 0 2
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 6
5775: PUSH
5776: LD_INT 36
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: IN
5788: NOT
5789: OR
5790: IFFALSE 5794
// exit ;
5792: GO 5811
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 3
5801: PPUSH
5802: CALL 5143 0 1
5806: PPUSH
5807: CALL 4985 0 2
// end ;
5811: LD_VAR 0 3
5815: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
// if not un then
5820: LD_VAR 0 1
5824: NOT
5825: IFFALSE 5829
// exit ;
5827: GO 5875
// if not points then
5829: LD_VAR 0 3
5833: NOT
5834: IFFALSE 5851
// gained_points := Multiplayer_GetCondition ( 1 ) else
5836: LD_ADDR_VAR 0 5
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL 5143 0 1
5848: ST_TO_ADDR
5849: GO 5861
// gained_points := points ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 3
5860: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_VAR 0 5
5870: PPUSH
5871: CALL 4985 0 2
5875: LD_VAR 0 4
5879: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5880: LD_INT 0
5882: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5883: LD_VAR 0 1
5887: PPUSH
5888: LD_INT 2
5890: PPUSH
5891: CALL 5143 0 1
5895: PPUSH
5896: CALL 4985 0 2
// end ; end_of_file
5900: LD_VAR 0 2
5904: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5916: LD_ADDR_EXP 35
5920: PUSH
5921: LD_VAR 0 1
5925: PPUSH
5926: LD_INT 1
5928: PPUSH
5929: LD_INT 1
5931: PPUSH
5932: CALL 27337 0 3
5936: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5937: LD_ADDR_EXP 36
5941: PUSH
5942: LD_INT 4
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 5
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: LD_INT 4
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 2
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: LD_INT 4
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 1
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: ST_TO_ADDR
// amBuildings := [ ] ;
6039: LD_ADDR_EXP 37
6043: PUSH
6044: EMPTY
6045: ST_TO_ADDR
// amVehicles := [ ] ;
6046: LD_ADDR_EXP 38
6050: PUSH
6051: EMPTY
6052: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6053: LD_ADDR_EXP 39
6057: PUSH
6058: EMPTY
6059: ST_TO_ADDR
// amDrivers := [ ] ;
6060: LD_ADDR_EXP 40
6064: PUSH
6065: EMPTY
6066: ST_TO_ADDR
// amVehiclesCounter := 2 ;
6067: LD_ADDR_EXP 41
6071: PUSH
6072: LD_INT 2
6074: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6075: LD_ADDR_EXP 44
6079: PUSH
6080: LD_INT 6
6082: PUSH
6083: LD_INT 8
6085: PUSH
6086: LD_INT 10
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: LD_OWVAR 67
6098: ARRAY
6099: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6100: LD_ADDR_VAR 0 8
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 4
6110: PUSH
6111: LD_INT 5
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_OWVAR 67
6123: ARRAY
6124: ST_TO_ADDR
// uc_side := side ;
6125: LD_ADDR_OWVAR 20
6129: PUSH
6130: LD_VAR 0 1
6134: ST_TO_ADDR
// uc_nation := nation_american ;
6135: LD_ADDR_OWVAR 21
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// hc_gallery := us ;
6143: LD_ADDR_OWVAR 33
6147: PUSH
6148: LD_STRING us
6150: ST_TO_ADDR
// hc_face_number := 19 ;
6151: LD_ADDR_OWVAR 34
6155: PUSH
6156: LD_INT 19
6158: ST_TO_ADDR
// hc_importance := 100 ;
6159: LD_ADDR_OWVAR 32
6163: PUSH
6164: LD_INT 100
6166: ST_TO_ADDR
// hc_name := Sikorski ;
6167: LD_ADDR_OWVAR 26
6171: PUSH
6172: LD_STRING Sikorski
6174: ST_TO_ADDR
// hc_sex := sex_male ;
6175: LD_ADDR_OWVAR 27
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6183: LD_ADDR_OWVAR 31
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: LD_INT 3
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6206: LD_ADDR_OWVAR 29
6210: PUSH
6211: LD_INT 10
6213: PUSH
6214: LD_INT 11
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// Sikorski := CreateHuman ;
6221: LD_ADDR_EXP 34
6225: PUSH
6226: CALL_OW 44
6230: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6231: LD_EXP 34
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 52
// InitHC_All ( ) ;
6243: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6247: LD_ADDR_EXP 42
6251: PUSH
6252: LD_INT 1
6254: PPUSH
6255: LD_INT 3
6257: PPUSH
6258: LD_STRING 
6260: PPUSH
6261: LD_VAR 0 8
6265: PPUSH
6266: LD_INT 800
6268: PUSH
6269: LD_INT 120
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: PPUSH
6280: LD_INT 10
6282: PUSH
6283: LD_INT 11
6285: PUSH
6286: LD_INT 12
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: PUSH
6294: LD_OWVAR 67
6298: ARRAY
6299: PUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 3
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL 35935 0 6
6319: ST_TO_ADDR
// amForceTmp := [ ] ;
6320: LD_ADDR_EXP 43
6324: PUSH
6325: EMPTY
6326: ST_TO_ADDR
// if Difficulty = 3 then
6327: LD_OWVAR 67
6331: PUSH
6332: LD_INT 3
6334: EQUAL
6335: IFFALSE 6366
// begin bc_type := b_breastwork ;
6337: LD_ADDR_OWVAR 42
6341: PUSH
6342: LD_INT 31
6344: ST_TO_ADDR
// bc_level := 7 ;
6345: LD_ADDR_OWVAR 43
6349: PUSH
6350: LD_INT 7
6352: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6353: LD_INT 79
6355: PPUSH
6356: LD_INT 72
6358: PPUSH
6359: LD_INT 5
6361: PPUSH
6362: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: LD_INT 22
6373: PUSH
6374: LD_VAR 0 1
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 30
6385: PUSH
6386: LD_INT 31
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: LD_INT 95
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 58
6412: PUSH
6413: EMPTY
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: PUSH
6427: FOR_IN
6428: IFFALSE 6557
// begin d := GetDir ( i ) ;
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 254
6444: ST_TO_ADDR
// if d < 3 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 3
6452: LESS
6453: IFFALSE 6471
// d := d + 3 else
6455: LD_ADDR_VAR 0 4
6459: PUSH
6460: LD_VAR 0 4
6464: PUSH
6465: LD_INT 3
6467: PLUS
6468: ST_TO_ADDR
6469: GO 6485
// d := d - 3 ;
6471: LD_ADDR_VAR 0 4
6475: PUSH
6476: LD_VAR 0 4
6480: PUSH
6481: LD_INT 3
6483: MINUS
6484: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 381
// un := CreateHuman ;
6497: LD_ADDR_VAR 0 6
6501: PUSH
6502: CALL_OW 44
6506: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6507: LD_ADDR_EXP 43
6511: PUSH
6512: LD_EXP 43
6516: PPUSH
6517: LD_VAR 0 6
6521: PPUSH
6522: CALL 64985 0 2
6526: ST_TO_ADDR
// SetDir ( un , d ) ;
6527: LD_VAR 0 6
6531: PPUSH
6532: LD_VAR 0 4
6536: PPUSH
6537: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6541: LD_VAR 0 6
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 52
// end ;
6555: GO 6427
6557: POP
6558: POP
// for i := 1 to 3 do
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_INT 3
6571: PUSH
6572: FOR_TO
6573: IFFALSE 6634
// begin PrepareEngineer ( false , skill ) ;
6575: LD_INT 0
6577: PPUSH
6578: LD_VAR 0 8
6582: PPUSH
6583: CALL_OW 382
// un := CreateHuman ;
6587: LD_ADDR_VAR 0 6
6591: PUSH
6592: CALL_OW 44
6596: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6597: LD_VAR 0 6
6601: PPUSH
6602: LD_INT 29
6604: PPUSH
6605: LD_INT 0
6607: PPUSH
6608: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6612: LD_ADDR_EXP 43
6616: PUSH
6617: LD_EXP 43
6621: PPUSH
6622: LD_VAR 0 6
6626: PPUSH
6627: CALL 64985 0 2
6631: ST_TO_ADDR
// end ;
6632: GO 6572
6634: POP
6635: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: LD_VAR 0 1
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 21
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PPUSH
6667: CALL_OW 69
6671: PUSH
6672: FOR_IN
6673: IFFALSE 6706
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: LD_OWVAR 67
6698: ARRAY
6699: PPUSH
6700: CALL_OW 241
6704: GO 6672
6706: POP
6707: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_VAR 0 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 32
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6786
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6747: LD_VAR 0 3
6751: PPUSH
6752: LD_INT 5
6754: PUSH
6755: LD_INT 4
6757: PUSH
6758: LD_INT 5
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: PUSH
6766: LD_VAR 0 3
6770: PUSH
6771: LD_INT 3
6773: MOD
6774: PUSH
6775: LD_INT 1
6777: PLUS
6778: ARRAY
6779: PPUSH
6780: CALL_OW 431
6784: GO 6744
6786: POP
6787: POP
// end ;
6788: LD_VAR 0 2
6792: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6793: LD_INT 0
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
6801: PPUSH
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
// enable ;
6822: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6823: LD_ADDR_VAR 0 11
6827: PUSH
6828: LD_INT 81
6830: PUSH
6831: LD_VAR 0 1
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: ST_TO_ADDR
// if tmp then
6845: LD_VAR 0 11
6849: IFFALSE 6870
// enemySide := GetSide ( tmp [ 1 ] ) ;
6851: LD_ADDR_VAR 0 35
6855: PUSH
6856: LD_VAR 0 11
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: CALL_OW 255
6869: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
6870: LD_ADDR_VAR 0 23
6874: PUSH
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 81
6882: PUSH
6883: LD_VAR 0 1
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 70
6896: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6897: LD_ADDR_VAR 0 24
6901: PUSH
6902: LD_VAR 0 5
6906: PPUSH
6907: LD_INT 81
6909: PUSH
6910: LD_VAR 0 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 70
6923: ST_TO_ADDR
// vehicles := amVehicles ;
6924: LD_ADDR_VAR 0 27
6928: PUSH
6929: LD_EXP 38
6933: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6934: LD_ADDR_VAR 0 33
6938: PUSH
6939: LD_VAR 0 3
6943: PPUSH
6944: LD_INT 22
6946: PUSH
6947: LD_VAR 0 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: LD_INT 30
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 30
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 70
6992: ST_TO_ADDR
// if depot then
6993: LD_VAR 0 33
6997: IFFALSE 7013
// depot := depot [ 1 ] ;
6999: LD_ADDR_VAR 0 33
7003: PUSH
7004: LD_VAR 0 33
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: ST_TO_ADDR
// if amTech then
7013: LD_EXP 35
7017: IFFALSE 7176
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7019: LD_ADDR_VAR 0 13
7023: PUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_INT 22
7031: PUSH
7032: LD_VAR 0 1
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 50
7043: PUSH
7044: EMPTY
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 30
7062: PUSH
7063: LD_INT 7
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 70
7095: ST_TO_ADDR
// if lab then
7096: LD_VAR 0 13
7100: IFFALSE 7176
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7102: LD_VAR 0 13
7106: PUSH
7107: LD_INT 1
7109: ARRAY
7110: PPUSH
7111: CALL_OW 461
7115: PUSH
7116: LD_INT 2
7118: EQUAL
7119: IFFALSE 7176
// begin for i in amTech do
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: FOR_IN
7132: IFFALSE 7174
// if CanBeResearched ( lab [ 1 ] , i ) then
7134: LD_VAR 0 13
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_VAR 0 10
7147: PPUSH
7148: CALL_OW 430
7152: IFFALSE 7172
// begin AddComResearch ( lab [ 1 ] , i ) ;
7154: LD_VAR 0 13
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 10
7167: PPUSH
7168: CALL_OW 184
// end ;
7172: GO 7131
7174: POP
7175: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7176: LD_ADDR_VAR 0 30
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 50
7210: PUSH
7211: EMPTY
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 70
7223: ST_TO_ADDR
// if fac then
7224: LD_VAR 0 30
7228: IFFALSE 7563
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7230: LD_VAR 0 30
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PPUSH
7239: CALL_OW 461
7243: PUSH
7244: LD_INT 2
7246: EQUAL
7247: IFFALSE 7563
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7249: LD_ADDR_VAR 0 31
7253: PUSH
7254: LD_VAR 0 3
7258: PPUSH
7259: LD_INT 2
7261: PUSH
7262: LD_INT 30
7264: PUSH
7265: LD_INT 32
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 30
7274: PUSH
7275: LD_INT 33
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 35
7289: PUSH
7290: LD_INT 0
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 70
7305: ST_TO_ADDR
// if emptyTowers then
7306: LD_VAR 0 31
7310: IFFALSE 7360
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7312: LD_ADDR_VAR 0 32
7316: PUSH
7317: LD_VAR 0 31
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: PPUSH
7326: LD_VAR 0 3
7330: PPUSH
7331: CALL 37621 0 2
7335: ST_TO_ADDR
// if weapon then
7336: LD_VAR 0 32
7340: IFFALSE 7360
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7342: LD_VAR 0 31
7346: PUSH
7347: LD_INT 1
7349: ARRAY
7350: PPUSH
7351: LD_VAR 0 32
7355: PPUSH
7356: CALL_OW 148
// end ; if amConstructList then
7360: LD_EXP 36
7364: IFFALSE 7563
// for i := 1 to Count ( amConstructList ) do
7366: LD_ADDR_VAR 0 10
7370: PUSH
7371: DOUBLE
7372: LD_INT 1
7374: DEC
7375: ST_TO_ADDR
7376: LD_EXP 36
7380: PPUSH
7381: CALL 29376 0 1
7385: PUSH
7386: FOR_TO
7387: IFFALSE 7561
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7389: LD_VAR 0 30
7393: PUSH
7394: LD_INT 1
7396: ARRAY
7397: PPUSH
7398: LD_EXP 36
7402: PUSH
7403: LD_VAR 0 10
7407: ARRAY
7408: PUSH
7409: LD_INT 1
7411: ARRAY
7412: PPUSH
7413: LD_EXP 36
7417: PUSH
7418: LD_VAR 0 10
7422: ARRAY
7423: PUSH
7424: LD_INT 2
7426: ARRAY
7427: PPUSH
7428: LD_EXP 36
7432: PUSH
7433: LD_VAR 0 10
7437: ARRAY
7438: PUSH
7439: LD_INT 3
7441: ARRAY
7442: PPUSH
7443: LD_EXP 36
7447: PUSH
7448: LD_VAR 0 10
7452: ARRAY
7453: PUSH
7454: LD_INT 4
7456: ARRAY
7457: PPUSH
7458: CALL_OW 448
7462: IFFALSE 7559
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7464: LD_VAR 0 30
7468: PUSH
7469: LD_INT 1
7471: ARRAY
7472: PPUSH
7473: LD_EXP 36
7477: PUSH
7478: LD_VAR 0 10
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: LD_EXP 36
7492: PUSH
7493: LD_VAR 0 10
7497: ARRAY
7498: PUSH
7499: LD_INT 2
7501: ARRAY
7502: PPUSH
7503: LD_EXP 36
7507: PUSH
7508: LD_VAR 0 10
7512: ARRAY
7513: PUSH
7514: LD_INT 3
7516: ARRAY
7517: PPUSH
7518: LD_EXP 36
7522: PUSH
7523: LD_VAR 0 10
7527: ARRAY
7528: PUSH
7529: LD_INT 4
7531: ARRAY
7532: PPUSH
7533: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7537: LD_ADDR_EXP 36
7541: PUSH
7542: LD_EXP 36
7546: PPUSH
7547: LD_VAR 0 10
7551: PPUSH
7552: CALL_OW 3
7556: ST_TO_ADDR
// break ;
7557: GO 7561
// end ; end ;
7559: GO 7386
7561: POP
7562: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7563: LD_ADDR_VAR 0 11
7567: PUSH
7568: LD_VAR 0 3
7572: PPUSH
7573: LD_INT 22
7575: PUSH
7576: LD_VAR 0 1
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 21
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 3
7597: PUSH
7598: LD_INT 57
7600: PUSH
7601: EMPTY
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: LD_INT 24
7613: PUSH
7614: LD_INT 1000
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 70
7635: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7636: LD_ADDR_VAR 0 18
7640: PUSH
7641: LD_VAR 0 3
7645: PPUSH
7646: CALL_OW 435
7650: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7651: LD_ADDR_VAR 0 15
7655: PUSH
7656: LD_VAR 0 6
7660: PPUSH
7661: LD_INT 25
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 50
7673: PUSH
7674: EMPTY
7675: LIST
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 72
7685: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7686: LD_VAR 0 15
7690: PPUSH
7691: LD_INT 3
7693: PUSH
7694: LD_INT 120
7696: PUSH
7697: LD_INT 7
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 54
7713: PUSH
7714: EMPTY
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 72
7729: PUSH
7730: LD_VAR 0 30
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PPUSH
7739: CALL_OW 302
7743: AND
7744: IFFALSE 7803
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7746: LD_VAR 0 15
7750: PPUSH
7751: LD_INT 3
7753: PUSH
7754: LD_INT 120
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 3
7770: PUSH
7771: LD_INT 54
7773: PUSH
7774: EMPTY
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: PPUSH
7790: LD_VAR 0 30
7794: PUSH
7795: LD_INT 1
7797: ARRAY
7798: PPUSH
7799: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7803: LD_ADDR_VAR 0 19
7807: PUSH
7808: LD_VAR 0 6
7812: PPUSH
7813: LD_INT 25
7815: PUSH
7816: LD_INT 4
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 50
7825: PUSH
7826: EMPTY
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 72
7837: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7838: LD_ADDR_VAR 0 13
7842: PUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: LD_INT 2
7850: PUSH
7851: LD_INT 30
7853: PUSH
7854: LD_INT 6
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 30
7863: PUSH
7864: LD_INT 7
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 30
7873: PUSH
7874: LD_INT 8
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 70
7891: ST_TO_ADDR
// if sci then
7892: LD_VAR 0 19
7896: IFFALSE 8057
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7898: LD_ADDR_VAR 0 21
7902: PUSH
7903: LD_VAR 0 6
7907: PPUSH
7908: LD_INT 95
7910: PUSH
7911: LD_VAR 0 3
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 120
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 72
7938: ST_TO_ADDR
// if hurtUnits then
7939: LD_VAR 0 21
7943: IFFALSE 8004
// begin for i in sci do
7945: LD_ADDR_VAR 0 10
7949: PUSH
7950: LD_VAR 0 19
7954: PUSH
7955: FOR_IN
7956: IFFALSE 8000
// if IsInUnit ( i ) then
7958: LD_VAR 0 10
7962: PPUSH
7963: CALL_OW 310
7967: IFFALSE 7980
// ComExitBuilding ( i ) else
7969: LD_VAR 0 10
7973: PPUSH
7974: CALL_OW 122
7978: GO 7998
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7980: LD_VAR 0 10
7984: PPUSH
7985: LD_VAR 0 21
7989: PUSH
7990: LD_INT 1
7992: ARRAY
7993: PPUSH
7994: CALL_OW 128
7998: GO 7955
8000: POP
8001: POP
// end else
8002: GO 8057
// if lab then
8004: LD_VAR 0 13
8008: IFFALSE 8057
// begin for i in sci do
8010: LD_ADDR_VAR 0 10
8014: PUSH
8015: LD_VAR 0 19
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8055
// if not IsInUnit ( i ) then
8023: LD_VAR 0 10
8027: PPUSH
8028: CALL_OW 310
8032: NOT
8033: IFFALSE 8053
// ComEnterUnit ( i , lab [ 1 ] ) ;
8035: LD_VAR 0 10
8039: PPUSH
8040: LD_VAR 0 13
8044: PUSH
8045: LD_INT 1
8047: ARRAY
8048: PPUSH
8049: CALL_OW 120
8053: GO 8020
8055: POP
8056: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8057: LD_ADDR_VAR 0 14
8061: PUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: LD_INT 25
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PPUSH
8077: CALL_OW 72
8081: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8082: LD_ADDR_VAR 0 34
8086: PUSH
8087: LD_EXP 37
8091: ST_TO_ADDR
// if eng then
8092: LD_VAR 0 14
8096: IFFALSE 8930
// begin for i in eng do
8098: LD_ADDR_VAR 0 10
8102: PUSH
8103: LD_VAR 0 14
8107: PUSH
8108: FOR_IN
8109: IFFALSE 8928
// begin tag := GetTag ( i ) ;
8111: LD_ADDR_VAR 0 16
8115: PUSH
8116: LD_VAR 0 10
8120: PPUSH
8121: CALL_OW 110
8125: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8126: LD_VAR 0 10
8130: PPUSH
8131: LD_VAR 0 5
8135: PPUSH
8136: CALL_OW 308
8140: IFFALSE 8171
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8142: LD_VAR 0 10
8146: PPUSH
8147: LD_VAR 0 8
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PPUSH
8156: LD_VAR 0 8
8160: PUSH
8161: LD_INT 2
8163: ARRAY
8164: PPUSH
8165: CALL_OW 111
// continue ;
8169: GO 8108
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8171: LD_VAR 0 10
8175: PPUSH
8176: CALL_OW 256
8180: PUSH
8181: LD_INT 800
8183: LESS
8184: PUSH
8185: LD_VAR 0 16
8189: PUSH
8190: LD_INT 1
8192: NONEQUAL
8193: AND
8194: IFFALSE 8244
// begin SetTag ( i , tHeal ) ;
8196: LD_VAR 0 10
8200: PPUSH
8201: LD_INT 1
8203: PPUSH
8204: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8208: LD_VAR 0 10
8212: PPUSH
8213: LD_VAR 0 7
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 7
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 111
// AddComHold ( i ) ;
8235: LD_VAR 0 10
8239: PPUSH
8240: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8244: LD_VAR 0 16
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PPUSH
8258: CALL_OW 256
8262: PUSH
8263: LD_INT 1000
8265: EQUAL
8266: AND
8267: IFFALSE 8281
// SetTag ( i , 0 ) ;
8269: LD_VAR 0 10
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 109
// if not tag then
8281: LD_VAR 0 16
8285: NOT
8286: IFFALSE 8453
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8288: LD_ADDR_VAR 0 12
8292: PUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_INT 57
8300: PUSH
8301: EMPTY
8302: LIST
8303: PPUSH
8304: CALL_OW 70
8308: ST_TO_ADDR
// if undone then
8309: LD_VAR 0 12
8313: IFFALSE 8335
// begin ComComplete ( i , undone [ 1 ] ) ;
8315: LD_VAR 0 10
8319: PPUSH
8320: LD_VAR 0 12
8324: PUSH
8325: LD_INT 1
8327: ARRAY
8328: PPUSH
8329: CALL 35474 0 2
// continue ;
8333: GO 8108
// end ; if cr or tmp or buildingsToBuild then
8335: LD_VAR 0 18
8339: PUSH
8340: LD_VAR 0 11
8344: OR
8345: PUSH
8346: LD_VAR 0 34
8350: OR
8351: IFFALSE 8427
// begin if IsInUnit ( i ) then
8353: LD_VAR 0 10
8357: PPUSH
8358: CALL_OW 310
8362: IFFALSE 8373
// ComExitBuilding ( i ) ;
8364: LD_VAR 0 10
8368: PPUSH
8369: CALL_OW 122
// if tmp then
8373: LD_VAR 0 11
8377: IFFALSE 8393
// SetTag ( i , tRepair ) else
8379: LD_VAR 0 10
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: CALL_OW 109
8391: GO 8425
// if cr then
8393: LD_VAR 0 18
8397: IFFALSE 8413
// SetTag ( i , tCrates ) else
8399: LD_VAR 0 10
8403: PPUSH
8404: LD_INT 2
8406: PPUSH
8407: CALL_OW 109
8411: GO 8425
// SetTag ( i , tBuild ) ;
8413: LD_VAR 0 10
8417: PPUSH
8418: LD_INT 5
8420: PPUSH
8421: CALL_OW 109
// end else
8425: GO 8453
// if not IsInUnit ( i ) then
8427: LD_VAR 0 10
8431: PPUSH
8432: CALL_OW 310
8436: NOT
8437: IFFALSE 8453
// ComEnterUnit ( i , depot ) ;
8439: LD_VAR 0 10
8443: PPUSH
8444: LD_VAR 0 33
8448: PPUSH
8449: CALL_OW 120
// end ; if tag = tRepair then
8453: LD_VAR 0 16
8457: PUSH
8458: LD_INT 3
8460: EQUAL
8461: IFFALSE 8567
// begin if IsInUnit ( i ) then
8463: LD_VAR 0 10
8467: PPUSH
8468: CALL_OW 310
8472: IFFALSE 8485
// begin ComExitBuilding ( i ) ;
8474: LD_VAR 0 10
8478: PPUSH
8479: CALL_OW 122
// continue ;
8483: GO 8108
// end ; if not tmp then
8485: LD_VAR 0 11
8489: NOT
8490: IFFALSE 8506
// begin SetTag ( i , 0 ) ;
8492: LD_VAR 0 10
8496: PPUSH
8497: LD_INT 0
8499: PPUSH
8500: CALL_OW 109
// continue ;
8504: GO 8108
// end ; if not HasTask ( i ) then
8506: LD_VAR 0 10
8510: PPUSH
8511: CALL_OW 314
8515: NOT
8516: IFFALSE 8536
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8518: LD_VAR 0 10
8522: PPUSH
8523: LD_VAR 0 11
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: CALL_OW 130
// if not IsInarea ( i , area ) then
8536: LD_VAR 0 10
8540: PPUSH
8541: LD_VAR 0 3
8545: PPUSH
8546: CALL_OW 308
8550: NOT
8551: IFFALSE 8567
// ComMoveToarea ( i , area ) ;
8553: LD_VAR 0 10
8557: PPUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: CALL_OW 113
// end ; if tag = tBuild then
8567: LD_VAR 0 16
8571: PUSH
8572: LD_INT 5
8574: EQUAL
8575: IFFALSE 8781
// begin if IsInUnit ( i ) then
8577: LD_VAR 0 10
8581: PPUSH
8582: CALL_OW 310
8586: IFFALSE 8599
// begin ComExitBuilding ( i ) ;
8588: LD_VAR 0 10
8592: PPUSH
8593: CALL_OW 122
// continue ;
8597: GO 8108
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8599: LD_VAR 0 34
8603: NOT
8604: PUSH
8605: LD_VAR 0 23
8609: OR
8610: PUSH
8611: LD_VAR 0 24
8615: OR
8616: IFFALSE 8634
// begin SetTag ( i , 0 ) ;
8618: LD_VAR 0 10
8622: PPUSH
8623: LD_INT 0
8625: PPUSH
8626: CALL_OW 109
// continue ;
8630: GO 8108
// end else
8632: GO 8673
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8634: LD_VAR 0 33
8638: PPUSH
8639: LD_VAR 0 34
8643: PUSH
8644: LD_INT 1
8646: ARRAY
8647: PUSH
8648: LD_INT 1
8650: ARRAY
8651: PPUSH
8652: CALL 68914 0 2
8656: NOT
8657: IFFALSE 8673
// begin SetTag ( i , 0 ) ;
8659: LD_VAR 0 10
8663: PPUSH
8664: LD_INT 0
8666: PPUSH
8667: CALL_OW 109
// continue ;
8671: GO 8108
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8673: LD_ADDR_VAR 0 12
8677: PUSH
8678: LD_VAR 0 3
8682: PPUSH
8683: LD_INT 57
8685: PUSH
8686: EMPTY
8687: LIST
8688: PPUSH
8689: CALL_OW 70
8693: ST_TO_ADDR
// if undone then
8694: LD_VAR 0 12
8698: IFFALSE 8720
// begin ComComplete ( i , undone [ 1 ] ) ;
8700: LD_VAR 0 10
8704: PPUSH
8705: LD_VAR 0 12
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: CALL 35474 0 2
// continue ;
8718: GO 8108
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8720: LD_VAR 0 10
8724: PPUSH
8725: LD_VAR 0 34
8729: PUSH
8730: LD_INT 1
8732: ARRAY
8733: PUSH
8734: LD_INT 1
8736: ARRAY
8737: PPUSH
8738: LD_VAR 0 34
8742: PUSH
8743: LD_INT 1
8745: ARRAY
8746: PUSH
8747: LD_INT 2
8749: ARRAY
8750: PPUSH
8751: LD_VAR 0 34
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PUSH
8760: LD_INT 3
8762: ARRAY
8763: PPUSH
8764: LD_VAR 0 34
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PUSH
8773: LD_INT 4
8775: ARRAY
8776: PPUSH
8777: CALL_OW 145
// end ; if tag = tCrates then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_INT 2
8788: EQUAL
8789: IFFALSE 8926
// begin if IsInUnit ( i ) then
8791: LD_VAR 0 10
8795: PPUSH
8796: CALL_OW 310
8800: IFFALSE 8813
// begin ComExitBuilding ( i ) ;
8802: LD_VAR 0 10
8806: PPUSH
8807: CALL_OW 122
// continue ;
8811: GO 8108
// end ; if not cr then
8813: LD_VAR 0 18
8817: NOT
8818: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8820: LD_VAR 0 10
8824: PPUSH
8825: LD_INT 0
8827: PPUSH
8828: CALL_OW 109
// continue ;
8832: GO 8108
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8834: LD_VAR 0 10
8838: PPUSH
8839: CALL_OW 314
8843: NOT
8844: PUSH
8845: LD_INT 81
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 92
8859: PUSH
8860: LD_VAR 0 18
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PUSH
8869: LD_VAR 0 18
8873: PUSH
8874: LD_INT 2
8876: ARRAY
8877: PUSH
8878: LD_INT 12
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PPUSH
8891: CALL_OW 69
8895: NOT
8896: AND
8897: IFFALSE 8926
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8899: LD_VAR 0 10
8903: PPUSH
8904: LD_VAR 0 18
8908: PUSH
8909: LD_INT 1
8911: ARRAY
8912: PPUSH
8913: LD_VAR 0 18
8917: PUSH
8918: LD_INT 2
8920: ARRAY
8921: PPUSH
8922: CALL_OW 117
// end ; end ;
8926: GO 8108
8928: POP
8929: POP
// end ; if vehicles then
8930: LD_VAR 0 27
8934: IFFALSE 9734
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8936: LD_ADDR_VAR 0 27
8940: PUSH
8941: LD_VAR 0 27
8945: PPUSH
8946: LD_INT 3
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: LD_INT 34
8954: PUSH
8955: LD_INT 13
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: LD_INT 34
8964: PUSH
8965: LD_INT 12
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 50
8983: PUSH
8984: EMPTY
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 72
8995: ST_TO_ADDR
// if vehicles then
8996: LD_VAR 0 27
9000: IFFALSE 9734
// begin for i in vehicles do
9002: LD_ADDR_VAR 0 10
9006: PUSH
9007: LD_VAR 0 27
9011: PUSH
9012: FOR_IN
9013: IFFALSE 9732
// begin tag := GetTag ( i ) ;
9015: LD_ADDR_VAR 0 16
9019: PUSH
9020: LD_VAR 0 10
9024: PPUSH
9025: CALL_OW 110
9029: ST_TO_ADDR
// if not tag then
9030: LD_VAR 0 16
9034: NOT
9035: IFFALSE 9181
// begin if GetControl ( i ) = control_manual then
9037: LD_VAR 0 10
9041: PPUSH
9042: CALL_OW 263
9046: PUSH
9047: LD_INT 1
9049: EQUAL
9050: IFFALSE 9167
// begin drivers := amDrivers ;
9052: LD_ADDR_VAR 0 25
9056: PUSH
9057: LD_EXP 40
9061: ST_TO_ADDR
// if not drivers then
9062: LD_VAR 0 25
9066: NOT
9067: IFFALSE 9147
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9069: LD_ADDR_VAR 0 25
9073: PUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_INT 3
9081: PUSH
9082: LD_INT 120
9084: PUSH
9085: LD_INT 7
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 72
9100: ST_TO_ADDR
// if drivers then
9101: LD_VAR 0 25
9105: IFFALSE 9147
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9107: LD_VAR 0 25
9111: PUSH
9112: LD_INT 1
9114: ARRAY
9115: PPUSH
9116: LD_INT 7
9118: PPUSH
9119: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9123: LD_ADDR_EXP 40
9127: PUSH
9128: LD_EXP 40
9132: PPUSH
9133: LD_VAR 0 25
9137: PUSH
9138: LD_INT 1
9140: ARRAY
9141: PPUSH
9142: CALL 64985 0 2
9146: ST_TO_ADDR
// end ; end ; if drivers then
9147: LD_VAR 0 25
9151: IFFALSE 9165
// SetTag ( i , tBusy ) ;
9153: LD_VAR 0 10
9157: PPUSH
9158: LD_INT 8
9160: PPUSH
9161: CALL_OW 109
// continue ;
9165: GO 9012
// end ; SetTag ( i , tBusy ) ;
9167: LD_VAR 0 10
9171: PPUSH
9172: LD_INT 8
9174: PPUSH
9175: CALL_OW 109
// end else
9179: GO 9730
// if tag = tBusy then
9181: LD_VAR 0 16
9185: PUSH
9186: LD_INT 8
9188: EQUAL
9189: IFFALSE 9401
// begin if GetLives ( i ) = 1000 then
9191: LD_VAR 0 10
9195: PPUSH
9196: CALL_OW 256
9200: PUSH
9201: LD_INT 1000
9203: EQUAL
9204: IFFALSE 9399
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9206: LD_VAR 0 10
9210: PPUSH
9211: CALL_OW 263
9215: PUSH
9216: LD_INT 1
9218: EQUAL
9219: PUSH
9220: LD_VAR 0 10
9224: PPUSH
9225: CALL_OW 311
9229: NOT
9230: AND
9231: IFFALSE 9387
// begin drivers := amDrivers ;
9233: LD_ADDR_VAR 0 25
9237: PUSH
9238: LD_EXP 40
9242: ST_TO_ADDR
// if not drivers then
9243: LD_VAR 0 25
9247: NOT
9248: IFFALSE 9264
// begin SetTag ( i , 0 ) ;
9250: LD_VAR 0 10
9254: PPUSH
9255: LD_INT 0
9257: PPUSH
9258: CALL_OW 109
// continue ;
9262: GO 9012
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9264: LD_VAR 0 25
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: PPUSH
9273: CALL_OW 310
9277: PUSH
9278: LD_VAR 0 25
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: CALL 62589 0 1
9291: NOT
9292: AND
9293: IFFALSE 9308
// ComExitBuilding ( drivers [ 1 ] ) ;
9295: LD_VAR 0 25
9299: PUSH
9300: LD_INT 1
9302: ARRAY
9303: PPUSH
9304: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9308: LD_VAR 0 27
9312: PPUSH
9313: LD_INT 120
9315: PUSH
9316: LD_INT 3
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 72
9327: PUSH
9328: LD_VAR 0 25
9332: PUSH
9333: LD_INT 1
9335: ARRAY
9336: PPUSH
9337: CALL_OW 314
9341: NOT
9342: AND
9343: PUSH
9344: LD_VAR 0 27
9348: PPUSH
9349: LD_INT 120
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL_OW 72
9363: NOT
9364: OR
9365: IFFALSE 9385
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9367: LD_VAR 0 25
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: LD_VAR 0 10
9380: PPUSH
9381: CALL_OW 120
// continue ;
9385: GO 9012
// end ; SetTag ( i , tAttack ) ;
9387: LD_VAR 0 10
9391: PPUSH
9392: LD_INT 13
9394: PPUSH
9395: CALL_OW 109
// end ; end else
9399: GO 9730
// if tag = tAttack then
9401: LD_VAR 0 16
9405: PUSH
9406: LD_INT 13
9408: EQUAL
9409: IFFALSE 9589
// begin enemy := enemyInBase ;
9411: LD_ADDR_VAR 0 22
9415: PUSH
9416: LD_VAR 0 23
9420: ST_TO_ADDR
// if not enemy then
9421: LD_VAR 0 22
9425: NOT
9426: IFFALSE 9438
// enemy := enemyOuterBase ;
9428: LD_ADDR_VAR 0 22
9432: PUSH
9433: LD_VAR 0 24
9437: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9438: LD_VAR 0 22
9442: NOT
9443: PUSH
9444: LD_VAR 0 10
9448: PPUSH
9449: LD_VAR 0 8
9453: PUSH
9454: LD_INT 1
9456: ARRAY
9457: PPUSH
9458: LD_VAR 0 8
9462: PUSH
9463: LD_INT 2
9465: ARRAY
9466: PPUSH
9467: CALL_OW 297
9471: PUSH
9472: LD_INT 10
9474: GREATER
9475: AND
9476: IFFALSE 9507
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9478: LD_VAR 0 10
9482: PPUSH
9483: LD_VAR 0 8
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 8
9496: PUSH
9497: LD_INT 2
9499: ARRAY
9500: PPUSH
9501: CALL_OW 111
// continue ;
9505: GO 9012
// end ; if GetLives ( i ) < 650 then
9507: LD_VAR 0 10
9511: PPUSH
9512: CALL_OW 256
9516: PUSH
9517: LD_INT 650
9519: LESS
9520: IFFALSE 9563
// begin SetTag ( i , tVehRepair ) ;
9522: LD_VAR 0 10
9526: PPUSH
9527: LD_INT 9
9529: PPUSH
9530: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9534: LD_VAR 0 10
9538: PPUSH
9539: LD_VAR 0 8
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: LD_VAR 0 8
9552: PUSH
9553: LD_INT 2
9555: ARRAY
9556: PPUSH
9557: CALL_OW 111
// continue ;
9561: GO 9012
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9563: LD_VAR 0 10
9567: PPUSH
9568: LD_VAR 0 22
9572: PPUSH
9573: LD_VAR 0 10
9577: PPUSH
9578: CALL_OW 74
9582: PPUSH
9583: CALL_OW 115
// end else
9587: GO 9730
// if tag = tVehRepair then
9589: LD_VAR 0 16
9593: PUSH
9594: LD_INT 9
9596: EQUAL
9597: IFFALSE 9730
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9599: LD_VAR 0 10
9603: PPUSH
9604: LD_VAR 0 8
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 8
9617: PUSH
9618: LD_INT 2
9620: ARRAY
9621: PPUSH
9622: CALL_OW 297
9626: PUSH
9627: LD_INT 10
9629: GREATER
9630: IFFALSE 9661
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9632: LD_VAR 0 10
9636: PPUSH
9637: LD_VAR 0 8
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: LD_VAR 0 8
9650: PUSH
9651: LD_INT 2
9653: ARRAY
9654: PPUSH
9655: CALL_OW 111
// continue ;
9659: GO 9012
// end ; if GetLives ( i ) = 1000 then
9661: LD_VAR 0 10
9665: PPUSH
9666: CALL_OW 256
9670: PUSH
9671: LD_INT 1000
9673: EQUAL
9674: IFFALSE 9690
// begin SetTag ( i , tBusy ) ;
9676: LD_VAR 0 10
9680: PPUSH
9681: LD_INT 8
9683: PPUSH
9684: CALL_OW 109
// continue ;
9688: GO 9012
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9690: LD_VAR 0 10
9694: PPUSH
9695: CALL_OW 263
9699: PUSH
9700: LD_INT 1
9702: EQUAL
9703: PUSH
9704: LD_VAR 0 10
9708: PPUSH
9709: CALL_OW 311
9713: AND
9714: IFFALSE 9730
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9716: LD_VAR 0 10
9720: PPUSH
9721: CALL_OW 311
9725: PPUSH
9726: CALL 66685 0 1
// end ; end ;
9730: GO 9012
9732: POP
9733: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9734: LD_ADDR_VAR 0 20
9738: PUSH
9739: LD_VAR 0 6
9743: PPUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 25
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 25
9759: PUSH
9760: LD_INT 8
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 25
9769: PUSH
9770: LD_INT 5
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 25
9779: PUSH
9780: LD_INT 9
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 50
9796: PUSH
9797: EMPTY
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 72
9808: ST_TO_ADDR
// if sol then
9809: LD_VAR 0 20
9813: IFFALSE 10321
// begin if enemyInBase then
9815: LD_VAR 0 23
9819: IFFALSE 9998
// begin for i in sol do
9821: LD_ADDR_VAR 0 10
9825: PUSH
9826: LD_VAR 0 20
9830: PUSH
9831: FOR_IN
9832: IFFALSE 9994
// begin tw := IsInUnit ( i ) ;
9834: LD_ADDR_VAR 0 17
9838: PUSH
9839: LD_VAR 0 10
9843: PPUSH
9844: CALL_OW 310
9848: ST_TO_ADDR
// if tw then
9849: LD_VAR 0 17
9853: IFFALSE 9936
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9855: LD_VAR 0 17
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: LD_VAR 0 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 101
9874: PUSH
9875: LD_VAR 0 35
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 32
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 30
9899: PUSH
9900: LD_INT 31
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 69
9921: IN
9922: NOT
9923: IFFALSE 9934
// ComExitBuilding ( i ) ;
9925: LD_VAR 0 10
9929: PPUSH
9930: CALL_OW 122
// end else
9934: GO 9992
// if IsInarea ( i , area ) then
9936: LD_VAR 0 10
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: CALL_OW 308
9950: IFFALSE 9978
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9952: LD_VAR 0 10
9956: PPUSH
9957: LD_VAR 0 23
9961: PPUSH
9962: LD_VAR 0 10
9966: PPUSH
9967: CALL_OW 74
9971: PPUSH
9972: CALL_OW 115
9976: GO 9992
// ComMoveToarea ( i , area ) ;
9978: LD_VAR 0 10
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: CALL_OW 113
// end ;
9992: GO 9831
9994: POP
9995: POP
// end else
9996: GO 10321
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9998: LD_ADDR_VAR 0 29
10002: PUSH
10003: LD_VAR 0 3
10007: PPUSH
10008: LD_INT 3
10010: PUSH
10011: LD_INT 62
10013: PUSH
10014: EMPTY
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 30
10026: PUSH
10027: LD_INT 32
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 30
10036: PUSH
10037: LD_INT 4
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 30
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 30
10056: PUSH
10057: LD_INT 31
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 70
10079: ST_TO_ADDR
// if empty then
10080: LD_VAR 0 29
10084: IFFALSE 10101
// empty := ReverseArray ( empty ) ;
10086: LD_ADDR_VAR 0 29
10090: PUSH
10091: LD_VAR 0 29
10095: PPUSH
10096: CALL 60252 0 1
10100: ST_TO_ADDR
// for i in sol do
10101: LD_ADDR_VAR 0 10
10105: PUSH
10106: LD_VAR 0 20
10110: PUSH
10111: FOR_IN
10112: IFFALSE 10319
// begin tag := GetTag ( i ) ;
10114: LD_ADDR_VAR 0 16
10118: PUSH
10119: LD_VAR 0 10
10123: PPUSH
10124: CALL_OW 110
10128: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10129: LD_VAR 0 10
10133: PPUSH
10134: CALL_OW 256
10138: PUSH
10139: LD_INT 1000
10141: LESS
10142: PUSH
10143: LD_VAR 0 16
10147: PUSH
10148: LD_INT 1
10150: NONEQUAL
10151: AND
10152: IFFALSE 10204
// begin SetTag ( i , tHeal ) ;
10154: LD_VAR 0 10
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10166: LD_VAR 0 10
10170: PPUSH
10171: LD_VAR 0 7
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: LD_VAR 0 7
10184: PUSH
10185: LD_INT 2
10187: ARRAY
10188: PPUSH
10189: CALL_OW 111
// AddComHold ( i ) ;
10193: LD_VAR 0 10
10197: PPUSH
10198: CALL_OW 200
// continue ;
10202: GO 10111
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10204: LD_VAR 0 10
10208: PPUSH
10209: CALL_OW 256
10213: PUSH
10214: LD_INT 1000
10216: EQUAL
10217: PUSH
10218: LD_VAR 0 16
10222: PUSH
10223: LD_INT 1
10225: EQUAL
10226: AND
10227: IFFALSE 10243
// begin SetTag ( i , 0 ) ;
10229: LD_VAR 0 10
10233: PPUSH
10234: LD_INT 0
10236: PPUSH
10237: CALL_OW 109
// continue ;
10241: GO 10111
// end ; if HasTask ( i ) then
10243: LD_VAR 0 10
10247: PPUSH
10248: CALL_OW 314
10252: IFFALSE 10256
// continue ;
10254: GO 10111
// if not IsInUnit ( i ) and not tag and empty then
10256: LD_VAR 0 10
10260: PPUSH
10261: CALL_OW 310
10265: NOT
10266: PUSH
10267: LD_VAR 0 16
10271: NOT
10272: AND
10273: PUSH
10274: LD_VAR 0 29
10278: AND
10279: IFFALSE 10317
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10281: LD_VAR 0 10
10285: PPUSH
10286: LD_VAR 0 29
10290: PUSH
10291: LD_INT 1
10293: ARRAY
10294: PPUSH
10295: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10299: LD_ADDR_VAR 0 29
10303: PUSH
10304: LD_VAR 0 29
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 3
10316: ST_TO_ADDR
// end ; end ;
10317: GO 10111
10319: POP
10320: POP
// end ; end ; end ;
10321: LD_VAR 0 9
10325: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10326: LD_EXP 42
10330: PPUSH
10331: LD_INT 50
10333: PUSH
10334: EMPTY
10335: LIST
10336: PPUSH
10337: CALL_OW 72
10341: IFFALSE 10397
10343: GO 10345
10345: DISABLE
// begin enable ;
10346: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10347: LD_EXP 3
10351: PUSH
10352: LD_INT 1
10354: ARRAY
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: LD_INT 3
10361: PPUSH
10362: LD_INT 33
10364: PPUSH
10365: LD_INT 4
10367: PPUSH
10368: LD_EXP 42
10372: PPUSH
10373: LD_INT 27
10375: PUSH
10376: LD_INT 33
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 17
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL 6793 0 8
// end ;
10397: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 302
10405: PUSH
10406: LD_EXP 36
10410: NOT
10411: AND
10412: IFFALSE 10482
10414: GO 10416
10416: DISABLE
// begin enable ;
10417: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10418: LD_ADDR_EXP 36
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 5
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 3
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: LD_INT 4
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 4
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: LD_INT 6
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// end ; end_of_file
10482: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10483: LD_INT 0
10485: PPUSH
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
10491: PPUSH
10492: PPUSH
10493: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10494: LD_ADDR_EXP 45
10498: PUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL 27337 0 3
10514: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10515: LD_ADDR_EXP 46
10519: PUSH
10520: LD_INT 13
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: LD_INT 27
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 13
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 13
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: LD_INT 26
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 13
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: LD_INT 1
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 13
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: LD_INT 27
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: ST_TO_ADDR
// arBuildings := [ ] ;
10617: LD_ADDR_EXP 47
10621: PUSH
10622: EMPTY
10623: ST_TO_ADDR
// arVehicles := [ ] ;
10624: LD_ADDR_EXP 48
10628: PUSH
10629: EMPTY
10630: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10631: LD_ADDR_EXP 49
10635: PUSH
10636: EMPTY
10637: ST_TO_ADDR
// arDrivers := [ ] ;
10638: LD_ADDR_EXP 50
10642: PUSH
10643: EMPTY
10644: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10645: LD_ADDR_EXP 52
10649: PUSH
10650: LD_INT 2
10652: ST_TO_ADDR
// arMinesList := [ ] ;
10653: LD_ADDR_EXP 53
10657: PUSH
10658: EMPTY
10659: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10660: LD_ADDR_EXP 51
10664: PUSH
10665: LD_INT 8
10667: PUSH
10668: LD_INT 11
10670: PUSH
10671: LD_INT 12
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: LD_OWVAR 67
10683: ARRAY
10684: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 24
10692: PPUSH
10693: CALL 69930 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10697: LD_INT 23
10699: PPUSH
10700: LD_INT 7
10702: PUSH
10703: LD_INT 9
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: LD_OWVAR 67
10718: ARRAY
10719: PPUSH
10720: CALL 11285 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10724: LD_ADDR_VAR 0 8
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: LD_INT 5
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_OWVAR 67
10747: ARRAY
10748: ST_TO_ADDR
// uc_side := side ;
10749: LD_ADDR_OWVAR 20
10753: PUSH
10754: LD_VAR 0 1
10758: ST_TO_ADDR
// uc_nation := 2 ;
10759: LD_ADDR_OWVAR 21
10763: PUSH
10764: LD_INT 2
10766: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10767: LD_ADDR_EXP 54
10771: PUSH
10772: LD_INT 32
10774: PPUSH
10775: LD_INT 5
10777: PPUSH
10778: LD_STRING 
10780: PPUSH
10781: LD_VAR 0 8
10785: PPUSH
10786: LD_INT 800
10788: PUSH
10789: LD_INT 120
10791: PUSH
10792: LD_INT 0
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: LD_INT 10
10802: PUSH
10803: LD_INT 11
10805: PUSH
10806: LD_INT 12
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_OWVAR 67
10818: ARRAY
10819: PUSH
10820: LD_INT 4
10822: PUSH
10823: LD_INT 6
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL 35935 0 6
10839: ST_TO_ADDR
// arForceTmp := [ ] ;
10840: LD_ADDR_EXP 55
10844: PUSH
10845: EMPTY
10846: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10847: LD_ADDR_VAR 0 3
10851: PUSH
10852: LD_INT 22
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: LD_INT 31
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 3
10876: PUSH
10877: LD_INT 95
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 58
10893: PUSH
10894: EMPTY
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: PUSH
10908: FOR_IN
10909: IFFALSE 11038
// begin d := GetDir ( i ) ;
10911: LD_ADDR_VAR 0 4
10915: PUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: CALL_OW 254
10925: ST_TO_ADDR
// if d < 3 then
10926: LD_VAR 0 4
10930: PUSH
10931: LD_INT 3
10933: LESS
10934: IFFALSE 10952
// d := d + 3 else
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: LD_INT 3
10948: PLUS
10949: ST_TO_ADDR
10950: GO 10966
// d := d - 3 ;
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_VAR 0 4
10961: PUSH
10962: LD_INT 3
10964: MINUS
10965: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10966: LD_INT 0
10968: PPUSH
10969: LD_VAR 0 8
10973: PPUSH
10974: CALL_OW 381
// un := CreateHuman ;
10978: LD_ADDR_VAR 0 6
10982: PUSH
10983: CALL_OW 44
10987: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10988: LD_ADDR_EXP 55
10992: PUSH
10993: LD_EXP 55
10997: PPUSH
10998: LD_VAR 0 6
11002: PPUSH
11003: CALL 64985 0 2
11007: ST_TO_ADDR
// SetDir ( un , d ) ;
11008: LD_VAR 0 6
11012: PPUSH
11013: LD_VAR 0 4
11017: PPUSH
11018: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11022: LD_VAR 0 6
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: CALL_OW 52
// end ;
11036: GO 10908
11038: POP
11039: POP
// for i := 1 to Difficulty do
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_OWVAR 67
11054: PUSH
11055: FOR_TO
11056: IFFALSE 11122
// begin PrepareSoldier ( false , skill ) ;
11058: LD_INT 0
11060: PPUSH
11061: LD_VAR 0 8
11065: PPUSH
11066: CALL_OW 381
// un := CreateHuman ;
11070: LD_ADDR_VAR 0 6
11074: PUSH
11075: CALL_OW 44
11079: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11080: LD_ADDR_EXP 55
11084: PUSH
11085: LD_EXP 55
11089: PPUSH
11090: LD_VAR 0 6
11094: PPUSH
11095: CALL 64985 0 2
11099: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11100: LD_VAR 0 6
11104: PPUSH
11105: LD_INT 215
11107: PPUSH
11108: LD_INT 102
11110: PPUSH
11111: CALL_OW 428
11115: PPUSH
11116: CALL_OW 52
// end ;
11120: GO 11055
11122: POP
11123: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_VAR 0 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 69
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11194
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 3
11170: PUSH
11171: LD_INT 5
11173: PUSH
11174: LD_INT 7
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: PUSH
11182: LD_OWVAR 67
11186: ARRAY
11187: PPUSH
11188: CALL_OW 241
11192: GO 11160
11194: POP
11195: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_VAR 0 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 30
11215: PUSH
11216: LD_INT 32
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: PUSH
11232: FOR_IN
11233: IFFALSE 11278
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11235: LD_VAR 0 3
11239: PPUSH
11240: LD_INT 27
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 24
11248: PUSH
11249: LD_INT 27
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 4
11265: MOD
11266: PUSH
11267: LD_INT 1
11269: PLUS
11270: ARRAY
11271: PPUSH
11272: CALL_OW 431
11276: GO 11232
11278: POP
11279: POP
// end ;
11280: LD_VAR 0 2
11284: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11291: LD_ADDR_VAR 0 5
11295: PUSH
11296: LD_VAR 0 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 517
11308: ST_TO_ADDR
// if not tmp then
11309: LD_VAR 0 5
11313: NOT
11314: IFFALSE 11318
// exit ;
11316: GO 11560
// for i := 1 to n do
11318: LD_ADDR_VAR 0 4
11322: PUSH
11323: DOUBLE
11324: LD_INT 1
11326: DEC
11327: ST_TO_ADDR
11328: LD_VAR 0 2
11332: PUSH
11333: FOR_TO
11334: IFFALSE 11558
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11336: LD_ADDR_VAR 0 6
11340: PUSH
11341: LD_INT 1
11343: PPUSH
11344: LD_VAR 0 5
11348: PUSH
11349: LD_INT 1
11351: ARRAY
11352: PPUSH
11353: CALL_OW 12
11357: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11358: LD_VAR 0 5
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PUSH
11367: LD_VAR 0 6
11371: ARRAY
11372: PPUSH
11373: LD_VAR 0 5
11377: PUSH
11378: LD_INT 2
11380: ARRAY
11381: PUSH
11382: LD_VAR 0 6
11386: ARRAY
11387: PPUSH
11388: LD_EXP 3
11392: PUSH
11393: LD_INT 2
11395: ARRAY
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11404: LD_ADDR_EXP 53
11408: PUSH
11409: LD_EXP 53
11413: PPUSH
11414: LD_EXP 53
11418: PUSH
11419: LD_INT 1
11421: PLUS
11422: PPUSH
11423: LD_VAR 0 5
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PUSH
11432: LD_VAR 0 6
11436: ARRAY
11437: PPUSH
11438: CALL_OW 2
11442: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11443: LD_ADDR_EXP 53
11447: PUSH
11448: LD_EXP 53
11452: PPUSH
11453: LD_EXP 53
11457: PUSH
11458: LD_INT 1
11460: PLUS
11461: PPUSH
11462: LD_VAR 0 5
11466: PUSH
11467: LD_INT 2
11469: ARRAY
11470: PUSH
11471: LD_VAR 0 6
11475: ARRAY
11476: PPUSH
11477: CALL_OW 2
11481: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11482: LD_ADDR_VAR 0 5
11486: PUSH
11487: LD_VAR 0 5
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_VAR 0 5
11499: PUSH
11500: LD_INT 1
11502: ARRAY
11503: PPUSH
11504: LD_VAR 0 6
11508: PPUSH
11509: CALL_OW 3
11513: PPUSH
11514: CALL_OW 1
11518: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11519: LD_ADDR_VAR 0 5
11523: PUSH
11524: LD_VAR 0 5
11528: PPUSH
11529: LD_INT 2
11531: PPUSH
11532: LD_VAR 0 5
11536: PUSH
11537: LD_INT 2
11539: ARRAY
11540: PPUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: CALL_OW 3
11550: PPUSH
11551: CALL_OW 1
11555: ST_TO_ADDR
// end ;
11556: GO 11333
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 3
11564: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// enable ;
11594: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11595: LD_ADDR_VAR 0 10
11599: PUSH
11600: LD_INT 81
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PPUSH
11612: CALL_OW 69
11616: ST_TO_ADDR
// if tmp then
11617: LD_VAR 0 10
11621: IFFALSE 11642
// enemySide := GetSide ( tmp [ 1 ] ) ;
11623: LD_ADDR_VAR 0 34
11627: PUSH
11628: LD_VAR 0 10
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: CALL_OW 255
11641: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11642: LD_ADDR_VAR 0 22
11646: PUSH
11647: LD_VAR 0 3
11651: PPUSH
11652: LD_INT 81
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11669: LD_ADDR_VAR 0 23
11673: PUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: LD_INT 81
11681: PUSH
11682: LD_VAR 0 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: ST_TO_ADDR
// vehicles := arVehicles ;
11696: LD_ADDR_VAR 0 26
11700: PUSH
11701: LD_EXP 48
11705: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11706: LD_ADDR_VAR 0 32
11710: PUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 22
11718: PUSH
11719: LD_VAR 0 1
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 30
11733: PUSH
11734: LD_INT 0
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 30
11743: PUSH
11744: LD_INT 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL_OW 70
11764: ST_TO_ADDR
// if depot then
11765: LD_VAR 0 32
11769: IFFALSE 11785
// depot := depot [ 1 ] ;
11771: LD_ADDR_VAR 0 32
11775: PUSH
11776: LD_VAR 0 32
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: ST_TO_ADDR
// if arTech then
11785: LD_EXP 45
11789: IFFALSE 11948
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11791: LD_ADDR_VAR 0 12
11795: PUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 22
11803: PUSH
11804: LD_VAR 0 1
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 50
11815: PUSH
11816: EMPTY
11817: LIST
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 30
11824: PUSH
11825: LD_INT 6
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 30
11834: PUSH
11835: LD_INT 7
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 30
11844: PUSH
11845: LD_INT 8
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 70
11867: ST_TO_ADDR
// if lab then
11868: LD_VAR 0 12
11872: IFFALSE 11948
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11874: LD_VAR 0 12
11878: PUSH
11879: LD_INT 1
11881: ARRAY
11882: PPUSH
11883: CALL_OW 461
11887: PUSH
11888: LD_INT 2
11890: EQUAL
11891: IFFALSE 11948
// begin for i in arTech do
11893: LD_ADDR_VAR 0 9
11897: PUSH
11898: LD_EXP 45
11902: PUSH
11903: FOR_IN
11904: IFFALSE 11946
// if CanBeResearched ( lab [ 1 ] , i ) then
11906: LD_VAR 0 12
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: LD_VAR 0 9
11919: PPUSH
11920: CALL_OW 430
11924: IFFALSE 11944
// begin AddComResearch ( lab [ 1 ] , i ) ;
11926: LD_VAR 0 12
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PPUSH
11935: LD_VAR 0 9
11939: PPUSH
11940: CALL_OW 184
// end ;
11944: GO 11903
11946: POP
11947: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11948: LD_ADDR_VAR 0 29
11952: PUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 22
11960: PUSH
11961: LD_VAR 0 1
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 3
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 50
11982: PUSH
11983: EMPTY
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 70
11995: ST_TO_ADDR
// if fac then
11996: LD_VAR 0 29
12000: IFFALSE 12335
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12002: LD_VAR 0 29
12006: PUSH
12007: LD_INT 1
12009: ARRAY
12010: PPUSH
12011: CALL_OW 461
12015: PUSH
12016: LD_INT 2
12018: EQUAL
12019: IFFALSE 12335
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12021: LD_ADDR_VAR 0 30
12025: PUSH
12026: LD_VAR 0 3
12030: PPUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 30
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 33
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 35
12061: PUSH
12062: LD_INT 0
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 70
12077: ST_TO_ADDR
// if emptyTowers then
12078: LD_VAR 0 30
12082: IFFALSE 12132
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12084: LD_ADDR_VAR 0 31
12088: PUSH
12089: LD_VAR 0 30
12093: PUSH
12094: LD_INT 1
12096: ARRAY
12097: PPUSH
12098: LD_VAR 0 3
12102: PPUSH
12103: CALL 37621 0 2
12107: ST_TO_ADDR
// if weapon then
12108: LD_VAR 0 31
12112: IFFALSE 12132
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12114: LD_VAR 0 30
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_VAR 0 31
12127: PPUSH
12128: CALL_OW 148
// end ; if arConstructList then
12132: LD_EXP 46
12136: IFFALSE 12335
// for i := 1 to Count ( arConstructList ) do
12138: LD_ADDR_VAR 0 9
12142: PUSH
12143: DOUBLE
12144: LD_INT 1
12146: DEC
12147: ST_TO_ADDR
12148: LD_EXP 46
12152: PPUSH
12153: CALL 29376 0 1
12157: PUSH
12158: FOR_TO
12159: IFFALSE 12333
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12161: LD_VAR 0 29
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: LD_EXP 46
12174: PUSH
12175: LD_VAR 0 9
12179: ARRAY
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: PPUSH
12185: LD_EXP 46
12189: PUSH
12190: LD_VAR 0 9
12194: ARRAY
12195: PUSH
12196: LD_INT 2
12198: ARRAY
12199: PPUSH
12200: LD_EXP 46
12204: PUSH
12205: LD_VAR 0 9
12209: ARRAY
12210: PUSH
12211: LD_INT 3
12213: ARRAY
12214: PPUSH
12215: LD_EXP 46
12219: PUSH
12220: LD_VAR 0 9
12224: ARRAY
12225: PUSH
12226: LD_INT 4
12228: ARRAY
12229: PPUSH
12230: CALL_OW 448
12234: IFFALSE 12331
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12236: LD_VAR 0 29
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: LD_EXP 46
12249: PUSH
12250: LD_VAR 0 9
12254: ARRAY
12255: PUSH
12256: LD_INT 1
12258: ARRAY
12259: PPUSH
12260: LD_EXP 46
12264: PUSH
12265: LD_VAR 0 9
12269: ARRAY
12270: PUSH
12271: LD_INT 2
12273: ARRAY
12274: PPUSH
12275: LD_EXP 46
12279: PUSH
12280: LD_VAR 0 9
12284: ARRAY
12285: PUSH
12286: LD_INT 3
12288: ARRAY
12289: PPUSH
12290: LD_EXP 46
12294: PUSH
12295: LD_VAR 0 9
12299: ARRAY
12300: PUSH
12301: LD_INT 4
12303: ARRAY
12304: PPUSH
12305: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12309: LD_ADDR_EXP 46
12313: PUSH
12314: LD_EXP 46
12318: PPUSH
12319: LD_VAR 0 9
12323: PPUSH
12324: CALL_OW 3
12328: ST_TO_ADDR
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12158
12333: POP
12334: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12335: LD_ADDR_VAR 0 10
12339: PUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 22
12347: PUSH
12348: LD_VAR 0 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 3
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: LD_INT 57
12372: PUSH
12373: EMPTY
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: LD_INT 24
12385: PUSH
12386: LD_INT 1000
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PPUSH
12403: CALL_OW 70
12407: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12408: LD_ADDR_VAR 0 17
12412: PUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL_OW 435
12422: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12423: LD_ADDR_VAR 0 14
12427: PUSH
12428: LD_VAR 0 5
12432: PPUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 3
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 50
12445: PUSH
12446: EMPTY
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12458: LD_VAR 0 14
12462: PPUSH
12463: LD_INT 3
12465: PUSH
12466: LD_INT 120
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 3
12482: PUSH
12483: LD_INT 54
12485: PUSH
12486: EMPTY
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 72
12501: PUSH
12502: LD_VAR 0 29
12506: PUSH
12507: LD_INT 1
12509: ARRAY
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: IFFALSE 12575
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12518: LD_VAR 0 14
12522: PPUSH
12523: LD_INT 3
12525: PUSH
12526: LD_INT 120
12528: PUSH
12529: LD_INT 7
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: LD_INT 54
12545: PUSH
12546: EMPTY
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 72
12561: PPUSH
12562: LD_VAR 0 29
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12575: LD_ADDR_VAR 0 18
12579: PUSH
12580: LD_VAR 0 5
12584: PPUSH
12585: LD_INT 25
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 50
12597: PUSH
12598: EMPTY
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 72
12609: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12610: LD_ADDR_VAR 0 12
12614: PUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 30
12625: PUSH
12626: LD_INT 6
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 30
12635: PUSH
12636: LD_INT 7
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 8
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 70
12663: ST_TO_ADDR
// if sci then
12664: LD_VAR 0 18
12668: IFFALSE 12829
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12670: LD_ADDR_VAR 0 20
12674: PUSH
12675: LD_VAR 0 5
12679: PPUSH
12680: LD_INT 95
12682: PUSH
12683: LD_VAR 0 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 120
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 72
12710: ST_TO_ADDR
// if hurtUnits then
12711: LD_VAR 0 20
12715: IFFALSE 12776
// begin for i in sci do
12717: LD_ADDR_VAR 0 9
12721: PUSH
12722: LD_VAR 0 18
12726: PUSH
12727: FOR_IN
12728: IFFALSE 12772
// if IsInUnit ( i ) then
12730: LD_VAR 0 9
12734: PPUSH
12735: CALL_OW 310
12739: IFFALSE 12752
// ComExitBuilding ( i ) else
12741: LD_VAR 0 9
12745: PPUSH
12746: CALL_OW 122
12750: GO 12770
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12752: LD_VAR 0 9
12756: PPUSH
12757: LD_VAR 0 20
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PPUSH
12766: CALL_OW 128
12770: GO 12727
12772: POP
12773: POP
// end else
12774: GO 12829
// if lab then
12776: LD_VAR 0 12
12780: IFFALSE 12829
// begin for i in sci do
12782: LD_ADDR_VAR 0 9
12786: PUSH
12787: LD_VAR 0 18
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12827
// if not IsInUnit ( i ) then
12795: LD_VAR 0 9
12799: PPUSH
12800: CALL_OW 310
12804: NOT
12805: IFFALSE 12825
// ComEnterUnit ( i , lab [ 1 ] ) ;
12807: LD_VAR 0 9
12811: PPUSH
12812: LD_VAR 0 12
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PPUSH
12821: CALL_OW 120
12825: GO 12792
12827: POP
12828: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12829: LD_ADDR_VAR 0 13
12833: PUSH
12834: LD_VAR 0 5
12838: PPUSH
12839: LD_INT 25
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 72
12853: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12854: LD_ADDR_VAR 0 33
12858: PUSH
12859: LD_EXP 47
12863: ST_TO_ADDR
// if eng then
12864: LD_VAR 0 13
12868: IFFALSE 13702
// begin for i in eng do
12870: LD_ADDR_VAR 0 9
12874: PUSH
12875: LD_VAR 0 13
12879: PUSH
12880: FOR_IN
12881: IFFALSE 13700
// begin tag := GetTag ( i ) ;
12883: LD_ADDR_VAR 0 15
12887: PUSH
12888: LD_VAR 0 9
12892: PPUSH
12893: CALL_OW 110
12897: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12898: LD_VAR 0 9
12902: PPUSH
12903: LD_VAR 0 4
12907: PPUSH
12908: CALL_OW 308
12912: IFFALSE 12943
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12914: LD_VAR 0 9
12918: PPUSH
12919: LD_VAR 0 7
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: LD_VAR 0 7
12932: PUSH
12933: LD_INT 2
12935: ARRAY
12936: PPUSH
12937: CALL_OW 111
// continue ;
12941: GO 12880
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12943: LD_VAR 0 9
12947: PPUSH
12948: CALL_OW 256
12952: PUSH
12953: LD_INT 800
12955: LESS
12956: PUSH
12957: LD_VAR 0 15
12961: PUSH
12962: LD_INT 1
12964: NONEQUAL
12965: AND
12966: IFFALSE 13016
// begin SetTag ( i , tHeal ) ;
12968: LD_VAR 0 9
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12980: LD_VAR 0 9
12984: PPUSH
12985: LD_VAR 0 6
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_VAR 0 6
12998: PUSH
12999: LD_INT 2
13001: ARRAY
13002: PPUSH
13003: CALL_OW 111
// AddComHold ( i ) ;
13007: LD_VAR 0 9
13011: PPUSH
13012: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13016: LD_VAR 0 15
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: PUSH
13025: LD_VAR 0 9
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: EQUAL
13038: AND
13039: IFFALSE 13053
// SetTag ( i , 0 ) ;
13041: LD_VAR 0 9
13045: PPUSH
13046: LD_INT 0
13048: PPUSH
13049: CALL_OW 109
// if not tag then
13053: LD_VAR 0 15
13057: NOT
13058: IFFALSE 13225
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13060: LD_ADDR_VAR 0 11
13064: PUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 57
13072: PUSH
13073: EMPTY
13074: LIST
13075: PPUSH
13076: CALL_OW 70
13080: ST_TO_ADDR
// if undone then
13081: LD_VAR 0 11
13085: IFFALSE 13107
// begin ComComplete ( i , undone [ 1 ] ) ;
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_VAR 0 11
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL 35474 0 2
// continue ;
13105: GO 12880
// end ; if cr or tmp or buildingsToBuild then
13107: LD_VAR 0 17
13111: PUSH
13112: LD_VAR 0 10
13116: OR
13117: PUSH
13118: LD_VAR 0 33
13122: OR
13123: IFFALSE 13199
// begin if IsInUnit ( i ) then
13125: LD_VAR 0 9
13129: PPUSH
13130: CALL_OW 310
13134: IFFALSE 13145
// ComExitBuilding ( i ) ;
13136: LD_VAR 0 9
13140: PPUSH
13141: CALL_OW 122
// if tmp then
13145: LD_VAR 0 10
13149: IFFALSE 13165
// SetTag ( i , tRepair ) else
13151: LD_VAR 0 9
13155: PPUSH
13156: LD_INT 3
13158: PPUSH
13159: CALL_OW 109
13163: GO 13197
// if cr then
13165: LD_VAR 0 17
13169: IFFALSE 13185
// SetTag ( i , tCrates ) else
13171: LD_VAR 0 9
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 109
13183: GO 13197
// SetTag ( i , tBuild ) ;
13185: LD_VAR 0 9
13189: PPUSH
13190: LD_INT 5
13192: PPUSH
13193: CALL_OW 109
// end else
13197: GO 13225
// if not IsInUnit ( i ) then
13199: LD_VAR 0 9
13203: PPUSH
13204: CALL_OW 310
13208: NOT
13209: IFFALSE 13225
// ComEnterUnit ( i , depot ) ;
13211: LD_VAR 0 9
13215: PPUSH
13216: LD_VAR 0 32
13220: PPUSH
13221: CALL_OW 120
// end ; if tag = tRepair then
13225: LD_VAR 0 15
13229: PUSH
13230: LD_INT 3
13232: EQUAL
13233: IFFALSE 13339
// begin if IsInUnit ( i ) then
13235: LD_VAR 0 9
13239: PPUSH
13240: CALL_OW 310
13244: IFFALSE 13257
// begin ComExitBuilding ( i ) ;
13246: LD_VAR 0 9
13250: PPUSH
13251: CALL_OW 122
// continue ;
13255: GO 12880
// end ; if not tmp then
13257: LD_VAR 0 10
13261: NOT
13262: IFFALSE 13278
// begin SetTag ( i , 0 ) ;
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 109
// continue ;
13276: GO 12880
// end ; if not HasTask ( i ) then
13278: LD_VAR 0 9
13282: PPUSH
13283: CALL_OW 314
13287: NOT
13288: IFFALSE 13308
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13290: LD_VAR 0 9
13294: PPUSH
13295: LD_VAR 0 10
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: CALL_OW 130
// if not IsInArea ( i , area ) then
13308: LD_VAR 0 9
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: CALL_OW 308
13322: NOT
13323: IFFALSE 13339
// ComMoveToArea ( i , area ) ;
13325: LD_VAR 0 9
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: CALL_OW 113
// end ; if tag = tBuild then
13339: LD_VAR 0 15
13343: PUSH
13344: LD_INT 5
13346: EQUAL
13347: IFFALSE 13553
// begin if IsInUnit ( i ) then
13349: LD_VAR 0 9
13353: PPUSH
13354: CALL_OW 310
13358: IFFALSE 13371
// begin ComExitBuilding ( i ) ;
13360: LD_VAR 0 9
13364: PPUSH
13365: CALL_OW 122
// continue ;
13369: GO 12880
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13371: LD_VAR 0 33
13375: NOT
13376: PUSH
13377: LD_VAR 0 22
13381: OR
13382: PUSH
13383: LD_VAR 0 23
13387: OR
13388: IFFALSE 13406
// begin SetTag ( i , 0 ) ;
13390: LD_VAR 0 9
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 109
// continue ;
13402: GO 12880
// end else
13404: GO 13445
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13406: LD_VAR 0 32
13410: PPUSH
13411: LD_VAR 0 33
13415: PUSH
13416: LD_INT 1
13418: ARRAY
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: CALL 68914 0 2
13428: NOT
13429: IFFALSE 13445
// begin SetTag ( i , 0 ) ;
13431: LD_VAR 0 9
13435: PPUSH
13436: LD_INT 0
13438: PPUSH
13439: CALL_OW 109
// continue ;
13443: GO 12880
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13445: LD_ADDR_VAR 0 11
13449: PUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 57
13457: PUSH
13458: EMPTY
13459: LIST
13460: PPUSH
13461: CALL_OW 70
13465: ST_TO_ADDR
// if undone then
13466: LD_VAR 0 11
13470: IFFALSE 13492
// begin ComComplete ( i , undone [ 1 ] ) ;
13472: LD_VAR 0 9
13476: PPUSH
13477: LD_VAR 0 11
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: CALL 35474 0 2
// continue ;
13490: GO 12880
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13492: LD_VAR 0 9
13496: PPUSH
13497: LD_VAR 0 33
13501: PUSH
13502: LD_INT 1
13504: ARRAY
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_VAR 0 33
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: LD_VAR 0 33
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PUSH
13532: LD_INT 3
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 33
13540: PUSH
13541: LD_INT 1
13543: ARRAY
13544: PUSH
13545: LD_INT 4
13547: ARRAY
13548: PPUSH
13549: CALL_OW 145
// end ; if tag = tCrates then
13553: LD_VAR 0 15
13557: PUSH
13558: LD_INT 2
13560: EQUAL
13561: IFFALSE 13698
// begin if IsInUnit ( i ) then
13563: LD_VAR 0 9
13567: PPUSH
13568: CALL_OW 310
13572: IFFALSE 13585
// begin ComExitBuilding ( i ) ;
13574: LD_VAR 0 9
13578: PPUSH
13579: CALL_OW 122
// continue ;
13583: GO 12880
// end ; if not cr then
13585: LD_VAR 0 17
13589: NOT
13590: IFFALSE 13606
// begin SetTag ( i , 0 ) ;
13592: LD_VAR 0 9
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 109
// continue ;
13604: GO 12880
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13606: LD_VAR 0 9
13610: PPUSH
13611: CALL_OW 314
13615: NOT
13616: PUSH
13617: LD_INT 81
13619: PUSH
13620: LD_VAR 0 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 92
13631: PUSH
13632: LD_VAR 0 17
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PUSH
13641: LD_VAR 0 17
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PUSH
13650: LD_INT 12
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: NOT
13668: AND
13669: IFFALSE 13698
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13671: LD_VAR 0 9
13675: PPUSH
13676: LD_VAR 0 17
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: LD_VAR 0 17
13689: PUSH
13690: LD_INT 2
13692: ARRAY
13693: PPUSH
13694: CALL_OW 117
// end ; end ;
13698: GO 12880
13700: POP
13701: POP
// end ; if vehicles then
13702: LD_VAR 0 26
13706: IFFALSE 14506
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13708: LD_ADDR_VAR 0 26
13712: PUSH
13713: LD_VAR 0 26
13717: PPUSH
13718: LD_INT 3
13720: PUSH
13721: LD_INT 2
13723: PUSH
13724: LD_INT 34
13726: PUSH
13727: LD_INT 88
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 34
13736: PUSH
13737: LD_INT 32
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 50
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: ST_TO_ADDR
// if vehicles then
13768: LD_VAR 0 26
13772: IFFALSE 14506
// begin for i in vehicles do
13774: LD_ADDR_VAR 0 9
13778: PUSH
13779: LD_VAR 0 26
13783: PUSH
13784: FOR_IN
13785: IFFALSE 14504
// begin tag := GetTag ( i ) ;
13787: LD_ADDR_VAR 0 15
13791: PUSH
13792: LD_VAR 0 9
13796: PPUSH
13797: CALL_OW 110
13801: ST_TO_ADDR
// if not tag then
13802: LD_VAR 0 15
13806: NOT
13807: IFFALSE 13953
// begin if GetControl ( i ) = control_manual then
13809: LD_VAR 0 9
13813: PPUSH
13814: CALL_OW 263
13818: PUSH
13819: LD_INT 1
13821: EQUAL
13822: IFFALSE 13939
// begin drivers := arDrivers ;
13824: LD_ADDR_VAR 0 24
13828: PUSH
13829: LD_EXP 50
13833: ST_TO_ADDR
// if not drivers then
13834: LD_VAR 0 24
13838: NOT
13839: IFFALSE 13919
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13841: LD_ADDR_VAR 0 24
13845: PUSH
13846: LD_VAR 0 14
13850: PPUSH
13851: LD_INT 3
13853: PUSH
13854: LD_INT 120
13856: PUSH
13857: LD_INT 7
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 72
13872: ST_TO_ADDR
// if drivers then
13873: LD_VAR 0 24
13877: IFFALSE 13919
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13879: LD_VAR 0 24
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: LD_INT 7
13890: PPUSH
13891: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13895: LD_ADDR_EXP 50
13899: PUSH
13900: LD_EXP 50
13904: PPUSH
13905: LD_VAR 0 24
13909: PUSH
13910: LD_INT 1
13912: ARRAY
13913: PPUSH
13914: CALL 64985 0 2
13918: ST_TO_ADDR
// end ; end ; if drivers then
13919: LD_VAR 0 24
13923: IFFALSE 13937
// SetTag ( i , tBusy ) ;
13925: LD_VAR 0 9
13929: PPUSH
13930: LD_INT 8
13932: PPUSH
13933: CALL_OW 109
// continue ;
13937: GO 13784
// end ; SetTag ( i , tBusy ) ;
13939: LD_VAR 0 9
13943: PPUSH
13944: LD_INT 8
13946: PPUSH
13947: CALL_OW 109
// end else
13951: GO 14502
// if tag = tBusy then
13953: LD_VAR 0 15
13957: PUSH
13958: LD_INT 8
13960: EQUAL
13961: IFFALSE 14173
// begin if GetLives ( i ) = 1000 then
13963: LD_VAR 0 9
13967: PPUSH
13968: CALL_OW 256
13972: PUSH
13973: LD_INT 1000
13975: EQUAL
13976: IFFALSE 14171
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13978: LD_VAR 0 9
13982: PPUSH
13983: CALL_OW 263
13987: PUSH
13988: LD_INT 1
13990: EQUAL
13991: PUSH
13992: LD_VAR 0 9
13996: PPUSH
13997: CALL_OW 311
14001: NOT
14002: AND
14003: IFFALSE 14159
// begin drivers := arDrivers ;
14005: LD_ADDR_VAR 0 24
14009: PUSH
14010: LD_EXP 50
14014: ST_TO_ADDR
// if not drivers then
14015: LD_VAR 0 24
14019: NOT
14020: IFFALSE 14036
// begin SetTag ( i , 0 ) ;
14022: LD_VAR 0 9
14026: PPUSH
14027: LD_INT 0
14029: PPUSH
14030: CALL_OW 109
// continue ;
14034: GO 13784
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14036: LD_VAR 0 24
14040: PUSH
14041: LD_INT 1
14043: ARRAY
14044: PPUSH
14045: CALL_OW 310
14049: PUSH
14050: LD_VAR 0 24
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: CALL 62589 0 1
14063: NOT
14064: AND
14065: IFFALSE 14080
// ComExitBuilding ( drivers [ 1 ] ) ;
14067: LD_VAR 0 24
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PPUSH
14076: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14080: LD_VAR 0 26
14084: PPUSH
14085: LD_INT 120
14087: PUSH
14088: LD_INT 3
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 72
14099: PUSH
14100: LD_VAR 0 24
14104: PUSH
14105: LD_INT 1
14107: ARRAY
14108: PPUSH
14109: CALL_OW 314
14113: NOT
14114: AND
14115: PUSH
14116: LD_VAR 0 26
14120: PPUSH
14121: LD_INT 120
14123: PUSH
14124: LD_INT 3
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 72
14135: NOT
14136: OR
14137: IFFALSE 14157
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14139: LD_VAR 0 24
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 9
14152: PPUSH
14153: CALL_OW 120
// continue ;
14157: GO 13784
// end ; SetTag ( i , tAttack ) ;
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_INT 13
14166: PPUSH
14167: CALL_OW 109
// end ; end else
14171: GO 14502
// if tag = tAttack then
14173: LD_VAR 0 15
14177: PUSH
14178: LD_INT 13
14180: EQUAL
14181: IFFALSE 14361
// begin enemy := enemyInBase ;
14183: LD_ADDR_VAR 0 21
14187: PUSH
14188: LD_VAR 0 22
14192: ST_TO_ADDR
// if not enemy then
14193: LD_VAR 0 21
14197: NOT
14198: IFFALSE 14210
// enemy := enemyOuterBase ;
14200: LD_ADDR_VAR 0 21
14204: PUSH
14205: LD_VAR 0 23
14209: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14210: LD_VAR 0 21
14214: NOT
14215: PUSH
14216: LD_VAR 0 9
14220: PPUSH
14221: LD_VAR 0 7
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PPUSH
14230: LD_VAR 0 7
14234: PUSH
14235: LD_INT 2
14237: ARRAY
14238: PPUSH
14239: CALL_OW 297
14243: PUSH
14244: LD_INT 10
14246: GREATER
14247: AND
14248: IFFALSE 14279
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14250: LD_VAR 0 9
14254: PPUSH
14255: LD_VAR 0 7
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 7
14268: PUSH
14269: LD_INT 2
14271: ARRAY
14272: PPUSH
14273: CALL_OW 111
// continue ;
14277: GO 13784
// end ; if GetLives ( i ) < 650 then
14279: LD_VAR 0 9
14283: PPUSH
14284: CALL_OW 256
14288: PUSH
14289: LD_INT 650
14291: LESS
14292: IFFALSE 14335
// begin SetTag ( i , tVehRepair ) ;
14294: LD_VAR 0 9
14298: PPUSH
14299: LD_INT 9
14301: PPUSH
14302: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14306: LD_VAR 0 9
14310: PPUSH
14311: LD_VAR 0 7
14315: PUSH
14316: LD_INT 1
14318: ARRAY
14319: PPUSH
14320: LD_VAR 0 7
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: PPUSH
14329: CALL_OW 111
// continue ;
14333: GO 13784
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14335: LD_VAR 0 9
14339: PPUSH
14340: LD_VAR 0 21
14344: PPUSH
14345: LD_VAR 0 9
14349: PPUSH
14350: CALL_OW 74
14354: PPUSH
14355: CALL_OW 115
// end else
14359: GO 14502
// if tag = tVehRepair then
14361: LD_VAR 0 15
14365: PUSH
14366: LD_INT 9
14368: EQUAL
14369: IFFALSE 14502
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14371: LD_VAR 0 9
14375: PPUSH
14376: LD_VAR 0 7
14380: PUSH
14381: LD_INT 1
14383: ARRAY
14384: PPUSH
14385: LD_VAR 0 7
14389: PUSH
14390: LD_INT 2
14392: ARRAY
14393: PPUSH
14394: CALL_OW 297
14398: PUSH
14399: LD_INT 10
14401: GREATER
14402: IFFALSE 14433
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14404: LD_VAR 0 9
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_INT 1
14416: ARRAY
14417: PPUSH
14418: LD_VAR 0 7
14422: PUSH
14423: LD_INT 2
14425: ARRAY
14426: PPUSH
14427: CALL_OW 111
// continue ;
14431: GO 13784
// end ; if GetLives ( i ) = 1000 then
14433: LD_VAR 0 9
14437: PPUSH
14438: CALL_OW 256
14442: PUSH
14443: LD_INT 1000
14445: EQUAL
14446: IFFALSE 14462
// begin SetTag ( i , tBusy ) ;
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_INT 8
14455: PPUSH
14456: CALL_OW 109
// continue ;
14460: GO 13784
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14462: LD_VAR 0 9
14466: PPUSH
14467: CALL_OW 263
14471: PUSH
14472: LD_INT 1
14474: EQUAL
14475: PUSH
14476: LD_VAR 0 9
14480: PPUSH
14481: CALL_OW 311
14485: AND
14486: IFFALSE 14502
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14488: LD_VAR 0 9
14492: PPUSH
14493: CALL_OW 311
14497: PPUSH
14498: CALL 66685 0 1
// end ; end ;
14502: GO 13784
14504: POP
14505: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14506: LD_ADDR_VAR 0 19
14510: PUSH
14511: LD_VAR 0 5
14515: PPUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 25
14531: PUSH
14532: LD_INT 8
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 25
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 25
14551: PUSH
14552: LD_INT 9
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 50
14568: PUSH
14569: EMPTY
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 72
14580: ST_TO_ADDR
// if sol then
14581: LD_VAR 0 19
14585: IFFALSE 15093
// begin if enemyInBase then
14587: LD_VAR 0 22
14591: IFFALSE 14770
// begin for i in sol do
14593: LD_ADDR_VAR 0 9
14597: PUSH
14598: LD_VAR 0 19
14602: PUSH
14603: FOR_IN
14604: IFFALSE 14766
// begin tw := IsInUnit ( i ) ;
14606: LD_ADDR_VAR 0 16
14610: PUSH
14611: LD_VAR 0 9
14615: PPUSH
14616: CALL_OW 310
14620: ST_TO_ADDR
// if tw then
14621: LD_VAR 0 16
14625: IFFALSE 14708
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14627: LD_VAR 0 16
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_VAR 0 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 101
14646: PUSH
14647: LD_VAR 0 34
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: LD_INT 30
14661: PUSH
14662: LD_INT 32
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 30
14671: PUSH
14672: LD_INT 31
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: PPUSH
14689: CALL_OW 69
14693: IN
14694: NOT
14695: IFFALSE 14706
// ComExitBuilding ( i ) ;
14697: LD_VAR 0 9
14701: PPUSH
14702: CALL_OW 122
// end else
14706: GO 14764
// if IsInArea ( i , area ) then
14708: LD_VAR 0 9
14712: PPUSH
14713: LD_VAR 0 3
14717: PPUSH
14718: CALL_OW 308
14722: IFFALSE 14750
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14724: LD_VAR 0 9
14728: PPUSH
14729: LD_VAR 0 22
14733: PPUSH
14734: LD_VAR 0 9
14738: PPUSH
14739: CALL_OW 74
14743: PPUSH
14744: CALL_OW 115
14748: GO 14764
// ComMoveToArea ( i , area ) ;
14750: LD_VAR 0 9
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL_OW 113
// end ;
14764: GO 14603
14766: POP
14767: POP
// end else
14768: GO 15093
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14770: LD_ADDR_VAR 0 28
14774: PUSH
14775: LD_VAR 0 3
14779: PPUSH
14780: LD_INT 3
14782: PUSH
14783: LD_INT 62
14785: PUSH
14786: EMPTY
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: LD_INT 30
14798: PUSH
14799: LD_INT 32
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 30
14808: PUSH
14809: LD_INT 4
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 30
14818: PUSH
14819: LD_INT 5
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 31
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 70
14851: ST_TO_ADDR
// if empty then
14852: LD_VAR 0 28
14856: IFFALSE 14873
// empty := ReverseArray ( empty ) ;
14858: LD_ADDR_VAR 0 28
14862: PUSH
14863: LD_VAR 0 28
14867: PPUSH
14868: CALL 60252 0 1
14872: ST_TO_ADDR
// for i in sol do
14873: LD_ADDR_VAR 0 9
14877: PUSH
14878: LD_VAR 0 19
14882: PUSH
14883: FOR_IN
14884: IFFALSE 15091
// begin tag := GetTag ( i ) ;
14886: LD_ADDR_VAR 0 15
14890: PUSH
14891: LD_VAR 0 9
14895: PPUSH
14896: CALL_OW 110
14900: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14901: LD_VAR 0 9
14905: PPUSH
14906: CALL_OW 256
14910: PUSH
14911: LD_INT 1000
14913: LESS
14914: PUSH
14915: LD_VAR 0 15
14919: PUSH
14920: LD_INT 1
14922: NONEQUAL
14923: AND
14924: IFFALSE 14976
// begin SetTag ( i , tHeal ) ;
14926: LD_VAR 0 9
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14938: LD_VAR 0 9
14942: PPUSH
14943: LD_VAR 0 6
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: PPUSH
14952: LD_VAR 0 6
14956: PUSH
14957: LD_INT 2
14959: ARRAY
14960: PPUSH
14961: CALL_OW 111
// AddComHold ( i ) ;
14965: LD_VAR 0 9
14969: PPUSH
14970: CALL_OW 200
// continue ;
14974: GO 14883
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14976: LD_VAR 0 9
14980: PPUSH
14981: CALL_OW 256
14985: PUSH
14986: LD_INT 1000
14988: EQUAL
14989: PUSH
14990: LD_VAR 0 15
14994: PUSH
14995: LD_INT 1
14997: EQUAL
14998: AND
14999: IFFALSE 15015
// begin SetTag ( i , 0 ) ;
15001: LD_VAR 0 9
15005: PPUSH
15006: LD_INT 0
15008: PPUSH
15009: CALL_OW 109
// continue ;
15013: GO 14883
// end ; if HasTask ( i ) then
15015: LD_VAR 0 9
15019: PPUSH
15020: CALL_OW 314
15024: IFFALSE 15028
// continue ;
15026: GO 14883
// if not IsInUnit ( i ) and not tag and empty then
15028: LD_VAR 0 9
15032: PPUSH
15033: CALL_OW 310
15037: NOT
15038: PUSH
15039: LD_VAR 0 15
15043: NOT
15044: AND
15045: PUSH
15046: LD_VAR 0 28
15050: AND
15051: IFFALSE 15089
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15053: LD_VAR 0 9
15057: PPUSH
15058: LD_VAR 0 28
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PPUSH
15067: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15071: LD_ADDR_VAR 0 28
15075: PUSH
15076: LD_VAR 0 28
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 3
15088: ST_TO_ADDR
// end ; end ;
15089: GO 14883
15091: POP
15092: POP
// end ; end ; end ;
15093: LD_VAR 0 8
15097: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15098: LD_EXP 54
15102: PPUSH
15103: LD_INT 50
15105: PUSH
15106: EMPTY
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: IFFALSE 15166
15115: GO 15117
15117: DISABLE
// begin enable ;
15118: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15119: LD_EXP 3
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: PPUSH
15128: LD_INT 2
15130: PPUSH
15131: LD_INT 5
15133: PPUSH
15134: LD_INT 6
15136: PPUSH
15137: LD_EXP 54
15141: PPUSH
15142: LD_INT 210
15144: PUSH
15145: LD_INT 43
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: LD_INT 194
15154: PUSH
15155: LD_INT 28
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PPUSH
15162: CALL 11565 0 7
// end ;
15166: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15167: LD_EXP 53
15171: IFFALSE 15391
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
15180: PPUSH
// begin enable ;
15181: ENABLE
// p := 1 ;
15182: LD_ADDR_VAR 0 2
15186: PUSH
15187: LD_INT 1
15189: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15190: LD_ADDR_VAR 0 1
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_EXP 53
15204: PPUSH
15205: CALL 29376 0 1
15209: PUSH
15210: LD_INT 2
15212: DIV
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15389
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_EXP 53
15226: PUSH
15227: LD_VAR 0 2
15231: ARRAY
15232: PPUSH
15233: LD_EXP 53
15237: PUSH
15238: LD_VAR 0 2
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: ARRAY
15247: PPUSH
15248: CALL_OW 428
15252: ST_TO_ADDR
// if tmp then
15253: LD_VAR 0 3
15257: IFFALSE 15373
// if GetSide ( tmp ) <> botSides [ 2 ] then
15259: LD_VAR 0 3
15263: PPUSH
15264: CALL_OW 255
15268: PUSH
15269: LD_EXP 3
15273: PUSH
15274: LD_INT 2
15276: ARRAY
15277: NONEQUAL
15278: IFFALSE 15373
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15280: LD_EXP 53
15284: PUSH
15285: LD_VAR 0 2
15289: ARRAY
15290: PPUSH
15291: LD_EXP 53
15295: PUSH
15296: LD_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: PLUS
15304: ARRAY
15305: PPUSH
15306: LD_EXP 3
15310: PUSH
15311: LD_INT 2
15313: ARRAY
15314: PPUSH
15315: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15319: LD_ADDR_EXP 53
15323: PUSH
15324: LD_EXP 53
15328: PPUSH
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL_OW 3
15338: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15339: LD_ADDR_EXP 53
15343: PUSH
15344: LD_EXP 53
15348: PPUSH
15349: LD_VAR 0 2
15353: PPUSH
15354: CALL_OW 3
15358: ST_TO_ADDR
// p := p - 2 ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_VAR 0 2
15368: PUSH
15369: LD_INT 2
15371: MINUS
15372: ST_TO_ADDR
// end ; p := p + 2 ;
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_VAR 0 2
15382: PUSH
15383: LD_INT 2
15385: PLUS
15386: ST_TO_ADDR
// end ;
15387: GO 15214
15389: POP
15390: POP
// end ;
15391: PPOPN 3
15393: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15394: LD_INT 32
15396: PPUSH
15397: CALL_OW 302
15401: PUSH
15402: LD_EXP 46
15406: NOT
15407: AND
15408: IFFALSE 15478
15410: GO 15412
15412: DISABLE
// begin enable ;
15413: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15414: LD_ADDR_EXP 46
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: LD_INT 27
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 14
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 1
15445: PUSH
15446: LD_INT 26
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 14
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: LD_INT 27
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: ST_TO_ADDR
// end ; end_of_file
15478: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 255
15488: PUSH
15489: LD_EXP 3
15493: IN
15494: NOT
15495: IFFALSE 15499
// exit ;
15497: GO 15556
// if not un in [ Sikorski ] then
15499: LD_VAR 0 1
15503: PUSH
15504: LD_EXP 34
15508: PUSH
15509: EMPTY
15510: LIST
15511: IN
15512: NOT
15513: IFFALSE 15534
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_INT 0
15527: PPUSH
15528: CALL 5816 0 3
15532: GO 15556
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: LD_INT 5
15546: PPUSH
15547: CALL 5143 0 1
15551: PPUSH
15552: CALL 5816 0 3
// end ;
15556: PPOPN 3
15558: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15559: LD_INT 0
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL 21826 0 1
// side := GetSide ( un ) ;
15580: LD_ADDR_VAR 0 3
15584: PUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 255
15594: ST_TO_ADDR
// if multi_sides [ side ] then
15595: LD_EXP 7
15599: PUSH
15600: LD_VAR 0 3
15604: ARRAY
15605: IFFALSE 15631
// if GetType ( un ) = unit_human then
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 247
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: IFFALSE 15631
// MultiplayerEvent_HumanLost ( side ) ;
15622: LD_VAR 0 3
15626: PPUSH
15627: CALL 5702 0 1
// if side in botSides then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_EXP 3
15640: IN
15641: IFFALSE 16768
// begin if side = botSides [ 1 ] then
15643: LD_VAR 0 3
15647: PUSH
15648: LD_EXP 3
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: EQUAL
15657: IFFALSE 16198
// begin if un in amForce then
15659: LD_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: IN
15669: IFFALSE 15687
// amForce := amForce diff un ;
15671: LD_ADDR_EXP 42
15675: PUSH
15676: LD_EXP 42
15680: PUSH
15681: LD_VAR 0 1
15685: DIFF
15686: ST_TO_ADDR
// if un in amAttackersVeh then
15687: LD_VAR 0 1
15691: PUSH
15692: LD_EXP 59
15696: IN
15697: IFFALSE 15715
// amAttackersVeh := amAttackersVeh diff un ;
15699: LD_ADDR_EXP 59
15703: PUSH
15704: LD_EXP 59
15708: PUSH
15709: LD_VAR 0 1
15713: DIFF
15714: ST_TO_ADDR
// if un in amAttackersInf then
15715: LD_VAR 0 1
15719: PUSH
15720: LD_EXP 58
15724: IN
15725: IFFALSE 15743
// amAttackersInf := amAttackersInf diff un ;
15727: LD_ADDR_EXP 58
15731: PUSH
15732: LD_EXP 58
15736: PUSH
15737: LD_VAR 0 1
15741: DIFF
15742: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15743: LD_VAR 0 1
15747: PPUSH
15748: CALL_OW 257
15752: PUSH
15753: LD_INT 3
15755: EQUAL
15756: PUSH
15757: LD_EXP 44
15761: AND
15762: IFFALSE 15903
// begin if not IsOk ( amDep ) then
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 302
15771: NOT
15772: IFFALSE 15776
// exit ;
15774: GO 16869
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15776: LD_ADDR_EXP 44
15780: PUSH
15781: LD_EXP 44
15785: PPUSH
15786: CALL 66368 0 1
15790: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15791: LD_ADDR_OWVAR 20
15795: PUSH
15796: LD_EXP 3
15800: PUSH
15801: LD_INT 1
15803: ARRAY
15804: ST_TO_ADDR
// uc_nation := nation_american ;
15805: LD_ADDR_OWVAR 21
15809: PUSH
15810: LD_INT 1
15812: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15813: LD_INT 0
15815: PPUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: LD_OWVAR 67
15834: ARRAY
15835: PPUSH
15836: CALL_OW 383
// un := CreateHuman ;
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: CALL_OW 44
15849: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15850: LD_VAR 0 1
15854: PPUSH
15855: LD_INT 52
15857: PPUSH
15858: LD_INT 2
15860: PPUSH
15861: LD_INT 0
15863: PPUSH
15864: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 23
15875: PPUSH
15876: LD_INT 19
15878: PPUSH
15879: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15883: LD_ADDR_EXP 42
15887: PUSH
15888: LD_EXP 42
15892: PPUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL 64985 0 2
15902: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 247
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: IFFALSE 16059
// begin btype := GetBType ( un ) ;
15918: LD_ADDR_VAR 0 11
15922: PUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 266
15932: ST_TO_ADDR
// if btype = b_barracks then
15933: LD_VAR 0 11
15937: PUSH
15938: LD_INT 5
15940: EQUAL
15941: IFFALSE 15951
// btype := b_armoury ;
15943: LD_ADDR_VAR 0 11
15947: PUSH
15948: LD_INT 4
15950: ST_TO_ADDR
// if btype = b_factory then
15951: LD_VAR 0 11
15955: PUSH
15956: LD_INT 3
15958: EQUAL
15959: IFFALSE 15969
// btype := b_workshop ;
15961: LD_ADDR_VAR 0 11
15965: PUSH
15966: LD_INT 2
15968: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15969: LD_VAR 0 11
15973: PUSH
15974: LD_INT 8
15976: PUSH
15977: LD_INT 7
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: IN
15984: IFFALSE 15994
// btype := b_lab ;
15986: LD_ADDR_VAR 0 11
15990: PUSH
15991: LD_INT 6
15993: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15994: LD_ADDR_EXP 37
15998: PUSH
15999: LD_EXP 37
16003: PPUSH
16004: LD_EXP 37
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: PPUSH
16013: LD_VAR 0 11
16017: PUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 250
16027: PUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 251
16037: PUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 254
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: PPUSH
16054: CALL_OW 1
16058: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 247
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: IFFALSE 16198
// begin chassis := GetChassis ( un ) ;
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 265
16088: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 262
16103: ST_TO_ADDR
// control := GetControl ( un ) ;
16104: LD_ADDR_VAR 0 7
16108: PUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 263
16118: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16119: LD_ADDR_VAR 0 8
16123: PUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 264
16133: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16134: LD_ADDR_VAR 0 9
16138: PUSH
16139: LD_VAR 0 10
16143: PPUSH
16144: LD_VAR 0 5
16148: PPUSH
16149: LD_VAR 0 6
16153: PPUSH
16154: LD_VAR 0 7
16158: PPUSH
16159: LD_VAR 0 8
16163: PPUSH
16164: CALL 29734 0 5
16168: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16169: LD_ADDR_EXP 36
16173: PUSH
16174: LD_EXP 36
16178: PPUSH
16179: LD_EXP 36
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: PPUSH
16188: LD_VAR 0 9
16192: PPUSH
16193: CALL_OW 1
16197: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16198: LD_VAR 0 3
16202: PUSH
16203: LD_EXP 3
16207: PUSH
16208: LD_INT 2
16210: ARRAY
16211: EQUAL
16212: IFFALSE 16768
// begin if un in arForce then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_EXP 54
16223: IN
16224: IFFALSE 16242
// arForce := arForce diff un ;
16226: LD_ADDR_EXP 54
16230: PUSH
16231: LD_EXP 54
16235: PUSH
16236: LD_VAR 0 1
16240: DIFF
16241: ST_TO_ADDR
// if un in arAttackersVeh then
16242: LD_VAR 0 1
16246: PUSH
16247: LD_EXP 57
16251: IN
16252: IFFALSE 16270
// arAttackersVeh := arAttackersVeh diff un ;
16254: LD_ADDR_EXP 57
16258: PUSH
16259: LD_EXP 57
16263: PUSH
16264: LD_VAR 0 1
16268: DIFF
16269: ST_TO_ADDR
// if un in arAttackersInf then
16270: LD_VAR 0 1
16274: PUSH
16275: LD_EXP 56
16279: IN
16280: IFFALSE 16298
// arAttackersInf := arAttackersInf diff un ;
16282: LD_ADDR_EXP 56
16286: PUSH
16287: LD_EXP 56
16291: PUSH
16292: LD_VAR 0 1
16296: DIFF
16297: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 257
16307: PUSH
16308: LD_INT 3
16310: EQUAL
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 110
16321: PUSH
16322: LD_INT 999
16324: LESS
16325: AND
16326: PUSH
16327: LD_EXP 51
16331: AND
16332: IFFALSE 16473
// begin if not IsOk ( arDep ) then
16334: LD_INT 32
16336: PPUSH
16337: CALL_OW 302
16341: NOT
16342: IFFALSE 16346
// exit ;
16344: GO 16869
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16346: LD_ADDR_EXP 51
16350: PUSH
16351: LD_EXP 51
16355: PPUSH
16356: CALL 66368 0 1
16360: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16361: LD_ADDR_OWVAR 20
16365: PUSH
16366: LD_EXP 3
16370: PUSH
16371: LD_INT 2
16373: ARRAY
16374: ST_TO_ADDR
// uc_nation := nation_arabian ;
16375: LD_ADDR_OWVAR 21
16379: PUSH
16380: LD_INT 2
16382: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16383: LD_INT 0
16385: PPUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 3
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_OWVAR 67
16404: ARRAY
16405: PPUSH
16406: CALL_OW 383
// un := CreateHuman ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: CALL_OW 44
16419: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 178
16427: PPUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 204
16445: PPUSH
16446: LD_INT 35
16448: PPUSH
16449: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16453: LD_ADDR_EXP 54
16457: PUSH
16458: LD_EXP 54
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL 64985 0 2
16472: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 247
16482: PUSH
16483: LD_INT 3
16485: EQUAL
16486: IFFALSE 16629
// begin btype := GetBType ( un ) ;
16488: LD_ADDR_VAR 0 11
16492: PUSH
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 266
16502: ST_TO_ADDR
// if btype = b_barracks then
16503: LD_VAR 0 11
16507: PUSH
16508: LD_INT 5
16510: EQUAL
16511: IFFALSE 16521
// btype := b_armoury ;
16513: LD_ADDR_VAR 0 11
16517: PUSH
16518: LD_INT 4
16520: ST_TO_ADDR
// if btype = b_factory then
16521: LD_VAR 0 11
16525: PUSH
16526: LD_INT 3
16528: EQUAL
16529: IFFALSE 16539
// btype := b_workshop ;
16531: LD_ADDR_VAR 0 11
16535: PUSH
16536: LD_INT 2
16538: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16539: LD_VAR 0 11
16543: PUSH
16544: LD_INT 8
16546: PUSH
16547: LD_INT 7
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: IN
16554: IFFALSE 16564
// btype := b_lab ;
16556: LD_ADDR_VAR 0 11
16560: PUSH
16561: LD_INT 6
16563: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16564: LD_ADDR_EXP 47
16568: PUSH
16569: LD_EXP 47
16573: PPUSH
16574: LD_EXP 47
16578: PUSH
16579: LD_INT 1
16581: PLUS
16582: PPUSH
16583: LD_VAR 0 11
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 250
16597: PUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 251
16607: PUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 254
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 1
16628: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 247
16638: PUSH
16639: LD_INT 2
16641: EQUAL
16642: IFFALSE 16768
// begin chassis := GetChassis ( un ) ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 265
16658: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16659: LD_ADDR_VAR 0 6
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 262
16673: ST_TO_ADDR
// control := GetControl ( un ) ;
16674: LD_ADDR_VAR 0 7
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 263
16688: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16689: LD_ADDR_VAR 0 8
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 264
16703: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16704: LD_ADDR_VAR 0 9
16708: PUSH
16709: LD_VAR 0 10
16713: PPUSH
16714: LD_VAR 0 5
16718: PPUSH
16719: LD_VAR 0 6
16723: PPUSH
16724: LD_VAR 0 7
16728: PPUSH
16729: LD_VAR 0 8
16733: PPUSH
16734: CALL 29734 0 5
16738: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16739: LD_ADDR_EXP 46
16743: PUSH
16744: LD_EXP 46
16748: PPUSH
16749: LD_EXP 46
16753: PUSH
16754: LD_INT 1
16756: PLUS
16757: PPUSH
16758: LD_VAR 0 9
16762: PPUSH
16763: CALL_OW 1
16767: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
16768: LD_EXP 24
16772: PUSH
16773: LD_EXP 16
16777: AND
16778: PUSH
16779: LD_EXP 25
16783: PUSH
16784: LD_VAR 0 3
16788: ARRAY
16789: NOT
16790: AND
16791: IFFALSE 16869
// if un in multi_commanders then
16793: LD_VAR 0 1
16797: PUSH
16798: LD_EXP 24
16802: IN
16803: IFFALSE 16869
// begin if side = your_side then
16805: LD_VAR 0 3
16809: PUSH
16810: LD_OWVAR 2
16814: EQUAL
16815: IFFALSE 16821
// Multiplayer_Loose_Message ;
16817: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16821: LD_ADDR_EXP 25
16825: PUSH
16826: LD_EXP 25
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 1
16843: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16844: LD_ADDR_EXP 24
16848: PUSH
16849: LD_EXP 24
16853: PUSH
16854: LD_VAR 0 1
16858: DIFF
16859: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16860: LD_VAR 0 3
16864: PPUSH
16865: CALL 5176 0 1
// end ; end ;
16869: PPOPN 11
16871: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
16872: LD_INT 0
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
// begin side := GetSide ( building ) ;
16878: LD_ADDR_VAR 0 4
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 255
16892: ST_TO_ADDR
// if multi_sides [ side ] then
16893: LD_EXP 7
16897: PUSH
16898: LD_VAR 0 4
16902: ARRAY
16903: IFFALSE 16924
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
16905: LD_VAR 0 4
16909: PPUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 266
16919: PPUSH
16920: CALL 5746 0 2
// if side = botSides [ 1 ] then
16924: LD_VAR 0 4
16928: PUSH
16929: LD_EXP 3
16933: PUSH
16934: LD_INT 1
16936: ARRAY
16937: EQUAL
16938: IFFALSE 17022
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16940: LD_ADDR_EXP 37
16944: PUSH
16945: LD_EXP 37
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 3
16957: ST_TO_ADDR
// btype := GetBType ( building ) ;
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: LD_VAR 0 1
16967: PPUSH
16968: CALL_OW 266
16972: ST_TO_ADDR
// case btype of b_workshop :
16973: LD_VAR 0 5
16977: PUSH
16978: LD_INT 2
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 16998
16986: POP
// ComUpgrade ( building ) ; b_lab :
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL_OW 146
16996: GO 17022
16998: LD_INT 6
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17021
17006: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 10
17014: PPUSH
17015: CALL_OW 207
// end ; end ;
17019: GO 17022
17021: POP
// end ; if side = botSides [ 2 ] then
17022: LD_VAR 0 4
17026: PUSH
17027: LD_EXP 3
17031: PUSH
17032: LD_INT 2
17034: ARRAY
17035: EQUAL
17036: IFFALSE 17132
// begin arBuildings := Delete ( arBuildings , 1 ) ;
17038: LD_ADDR_EXP 47
17042: PUSH
17043: LD_EXP 47
17047: PPUSH
17048: LD_INT 1
17050: PPUSH
17051: CALL_OW 3
17055: ST_TO_ADDR
// btype := GetBType ( building ) ;
17056: LD_ADDR_VAR 0 5
17060: PUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: ST_TO_ADDR
// case btype of b_workshop :
17071: LD_VAR 0 5
17075: PUSH
17076: LD_INT 2
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17096
17084: POP
// ComUpgrade ( building ) ; b_lab :
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 146
17094: GO 17132
17096: LD_INT 6
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17131
17104: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17105: LD_VAR 0 1
17109: PPUSH
17110: LD_INT 10
17112: PPUSH
17113: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
17117: LD_VAR 0 1
17121: PPUSH
17122: LD_INT 15
17124: PPUSH
17125: CALL_OW 207
// end ; end ;
17129: GO 17132
17131: POP
// end ; end ;
17132: PPOPN 5
17134: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
17135: LD_VAR 0 2
17139: PPUSH
17140: CALL_OW 255
17144: PUSH
17145: LD_EXP 3
17149: IN
17150: NOT
17151: IFFALSE 17155
// exit ;
17153: GO 17318
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17155: LD_VAR 0 2
17159: PUSH
17160: LD_EXP 55
17164: IN
17165: PUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 266
17175: PUSH
17176: LD_INT 31
17178: EQUAL
17179: AND
17180: IFFALSE 17204
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17182: LD_VAR 0 2
17186: PPUSH
17187: LD_INT 215
17189: PPUSH
17190: LD_INT 102
17192: PPUSH
17193: CALL_OW 428
17197: PPUSH
17198: CALL_OW 120
// exit ;
17202: GO 17318
// end ; if HexInfo ( 44 , 78 ) then
17204: LD_INT 44
17206: PPUSH
17207: LD_INT 78
17209: PPUSH
17210: CALL_OW 428
17214: IFFALSE 17253
// begin ComMoveXY ( unit , 26 , 40 ) ;
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_INT 26
17223: PPUSH
17224: LD_INT 40
17226: PPUSH
17227: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17231: LD_ADDR_EXP 42
17235: PUSH
17236: LD_EXP 42
17240: PPUSH
17241: LD_VAR 0 2
17245: PPUSH
17246: CALL 64985 0 2
17250: ST_TO_ADDR
// exit ;
17251: GO 17318
// end ; if GetX ( building ) > 71 then
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 250
17262: PUSH
17263: LD_INT 71
17265: GREATER
17266: IFFALSE 17318
// begin ComMoveXY ( unit , 69 , 39 ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_INT 69
17275: PPUSH
17276: LD_INT 39
17278: PPUSH
17279: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_INT 26
17290: PPUSH
17291: LD_INT 40
17293: PPUSH
17294: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17298: LD_ADDR_EXP 42
17302: PUSH
17303: LD_EXP 42
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL 64985 0 2
17317: ST_TO_ADDR
// end ; end ;
17318: PPOPN 2
17320: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17321: LD_INT 0
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17329: LD_VAR 0 1
17333: PPUSH
17334: LD_VAR 0 2
17338: PPUSH
17339: CALL 21884 0 2
// side := GetSide ( vehicle ) ;
17343: LD_ADDR_VAR 0 4
17347: PUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 255
17357: ST_TO_ADDR
// if multi_sides [ side ] then
17358: LD_EXP 7
17362: PUSH
17363: LD_VAR 0 4
17367: ARRAY
17368: IFFALSE 17379
// MultiplayerEvent_Produced ( side ) ;
17370: LD_VAR 0 4
17374: PPUSH
17375: CALL 5658 0 1
// if side = botSides [ 1 ] then
17379: LD_VAR 0 4
17383: PUSH
17384: LD_EXP 3
17388: PUSH
17389: LD_INT 1
17391: ARRAY
17392: EQUAL
17393: IFFALSE 17529
// begin driver := IsDrivenBy ( vehicle ) ;
17395: LD_ADDR_VAR 0 8
17399: PUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 311
17409: ST_TO_ADDR
// if driver then
17410: LD_VAR 0 8
17414: IFFALSE 17448
// begin SetTag ( driver , tMech ) ;
17416: LD_VAR 0 8
17420: PPUSH
17421: LD_INT 7
17423: PPUSH
17424: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17428: LD_ADDR_EXP 40
17432: PUSH
17433: LD_EXP 40
17437: PPUSH
17438: LD_VAR 0 8
17442: PPUSH
17443: CALL 64985 0 2
17447: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17448: LD_EXP 41
17452: PUSH
17453: LD_EXP 38
17457: PPUSH
17458: CALL 29376 0 1
17462: GREATER
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 266
17473: PUSH
17474: LD_INT 12
17476: PUSH
17477: LD_INT 13
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: IN
17484: OR
17485: IFFALSE 17509
// amVehicles := Join ( amVehicles , vehicle ) else
17487: LD_ADDR_EXP 38
17491: PUSH
17492: LD_EXP 38
17496: PPUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL 64985 0 2
17506: ST_TO_ADDR
17507: GO 17529
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17509: LD_ADDR_EXP 39
17513: PUSH
17514: LD_EXP 39
17518: PPUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL 64985 0 2
17528: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17529: LD_VAR 0 4
17533: PUSH
17534: LD_EXP 3
17538: PUSH
17539: LD_INT 2
17541: ARRAY
17542: EQUAL
17543: IFFALSE 17679
// begin driver := IsDrivenBy ( vehicle ) ;
17545: LD_ADDR_VAR 0 8
17549: PUSH
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 311
17559: ST_TO_ADDR
// if driver then
17560: LD_VAR 0 8
17564: IFFALSE 17598
// begin SetTag ( driver , tMech ) ;
17566: LD_VAR 0 8
17570: PPUSH
17571: LD_INT 7
17573: PPUSH
17574: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17578: LD_ADDR_EXP 50
17582: PUSH
17583: LD_EXP 50
17587: PPUSH
17588: LD_VAR 0 8
17592: PPUSH
17593: CALL 64985 0 2
17597: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17598: LD_EXP 52
17602: PUSH
17603: LD_EXP 48
17607: PPUSH
17608: CALL 29376 0 1
17612: GREATER
17613: PUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 266
17623: PUSH
17624: LD_INT 32
17626: PUSH
17627: LD_INT 88
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: IN
17634: OR
17635: IFFALSE 17659
// arVehicles := Join ( arVehicles , vehicle ) else
17637: LD_ADDR_EXP 48
17641: PUSH
17642: LD_EXP 48
17646: PPUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL 64985 0 2
17656: ST_TO_ADDR
17657: GO 17679
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17659: LD_ADDR_EXP 49
17663: PUSH
17664: LD_EXP 49
17668: PPUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL 64985 0 2
17678: ST_TO_ADDR
// end ; end ;
17679: PPOPN 8
17681: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 110
17691: PUSH
17692: LD_INT 7
17694: EQUAL
17695: IFFALSE 17709
// SetTag ( driver , 0 ) ;
17697: LD_VAR 0 1
17701: PPUSH
17702: LD_INT 0
17704: PPUSH
17705: CALL_OW 109
// end ;
17709: PPOPN 4
17711: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL_OW 255
17721: PUSH
17722: LD_EXP 3
17726: PUSH
17727: LD_INT 1
17729: ARRAY
17730: EQUAL
17731: IFFALSE 17761
// if tech in amTech then
17733: LD_VAR 0 1
17737: PUSH
17738: LD_EXP 35
17742: IN
17743: IFFALSE 17761
// amTech := amTech diff tech ;
17745: LD_ADDR_EXP 35
17749: PUSH
17750: LD_EXP 35
17754: PUSH
17755: LD_VAR 0 1
17759: DIFF
17760: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17761: LD_VAR 0 2
17765: PPUSH
17766: CALL_OW 255
17770: PUSH
17771: LD_EXP 3
17775: PUSH
17776: LD_INT 2
17778: ARRAY
17779: EQUAL
17780: IFFALSE 17810
// if tech in arTech then
17782: LD_VAR 0 1
17786: PUSH
17787: LD_EXP 45
17791: IN
17792: IFFALSE 17810
// arTech := arTech diff tech ;
17794: LD_ADDR_EXP 45
17798: PUSH
17799: LD_EXP 45
17803: PUSH
17804: LD_VAR 0 1
17808: DIFF
17809: ST_TO_ADDR
// end ; end_of_file
17810: PPOPN 2
17812: END
// every 10 10$00 trigger IsOk ( amDep ) do
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 302
17820: IFFALSE 17833
17822: GO 17824
17824: DISABLE
// activeAmerAttacks := true ;
17825: LD_ADDR_EXP 5
17829: PUSH
17830: LD_INT 1
17832: ST_TO_ADDR
17833: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17834: LD_INT 32
17836: PPUSH
17837: CALL_OW 302
17841: PUSH
17842: LD_INT 32
17844: PPUSH
17845: CALL_OW 255
17849: PUSH
17850: LD_EXP 3
17854: PUSH
17855: LD_INT 2
17857: ARRAY
17858: EQUAL
17859: AND
17860: IFFALSE 17897
17862: GO 17864
17864: DISABLE
// begin activeArabAttacks := true ;
17865: LD_ADDR_EXP 4
17869: PUSH
17870: LD_INT 1
17872: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
17873: LD_INT 73500
17875: PUSH
17876: LD_INT 2100
17878: PUSH
17879: LD_OWVAR 67
17883: MUL
17884: MINUS
17885: PPUSH
17886: CALL_OW 67
// ArabAttack ( 0 ) ;
17890: LD_INT 0
17892: PPUSH
17893: CALL 17954 0 1
// end ;
17897: END
// every 19 19$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17898: LD_INT 1
17900: PPUSH
17901: CALL_OW 302
17905: PUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 255
17913: PUSH
17914: LD_EXP 3
17918: PUSH
17919: LD_INT 1
17921: ARRAY
17922: EQUAL
17923: AND
17924: IFFALSE 17953
17926: GO 17928
17928: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
17929: LD_INT 10500
17931: PUSH
17932: LD_INT 2100
17934: PUSH
17935: LD_OWVAR 67
17939: MUL
17940: MINUS
17941: PPUSH
17942: CALL_OW 67
// AmericanAttack ( 0 ) ;
17946: LD_INT 0
17948: PPUSH
17949: CALL 19975 0 1
// end ;
17953: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17954: LD_INT 0
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
// uc_side := botSides [ 2 ] ;
17961: LD_ADDR_OWVAR 20
17965: PUSH
17966: LD_EXP 3
17970: PUSH
17971: LD_INT 2
17973: ARRAY
17974: ST_TO_ADDR
// uc_nation := nation_arabian ;
17975: LD_ADDR_OWVAR 21
17979: PUSH
17980: LD_INT 2
17982: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_INT 3
17990: PUSH
17991: LD_INT 4
17993: PUSH
17994: LD_INT 5
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: LD_OWVAR 67
18006: ARRAY
18007: ST_TO_ADDR
// arAttackersInf := [ ] ;
18008: LD_ADDR_EXP 56
18012: PUSH
18013: EMPTY
18014: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18015: LD_ADDR_EXP 57
18019: PUSH
18020: EMPTY
18021: ST_TO_ADDR
// InitHC_All ( ) ;
18022: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: DOUBLE
18032: LD_INT 1
18034: DEC
18035: ST_TO_ADDR
18036: LD_INT 3
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: LD_OWVAR 67
18054: ARRAY
18055: PUSH
18056: LD_VAR 0 1
18060: PLUS
18061: PUSH
18062: FOR_TO
18063: IFFALSE 18165
// begin PrepareSoldier ( false , skill ) ;
18065: LD_INT 0
18067: PPUSH
18068: LD_VAR 0 4
18072: PPUSH
18073: CALL_OW 381
// un := CreateHuman ;
18077: LD_ADDR_VAR 0 5
18081: PUSH
18082: CALL_OW 44
18086: ST_TO_ADDR
// if i mod 2 = 0 then
18087: LD_VAR 0 3
18091: PUSH
18092: LD_INT 2
18094: MOD
18095: PUSH
18096: LD_INT 0
18098: EQUAL
18099: IFFALSE 18113
// SetClass ( un , class_mortar ) ;
18101: LD_VAR 0 5
18105: PPUSH
18106: LD_INT 8
18108: PPUSH
18109: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
18113: LD_VAR 0 5
18117: PPUSH
18118: LD_INT 25
18120: PPUSH
18121: LD_INT 0
18123: PPUSH
18124: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
18128: LD_ADDR_EXP 56
18132: PUSH
18133: LD_EXP 56
18137: PPUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: CALL 64985 0 2
18147: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18148: LD_VAR 0 5
18152: PPUSH
18153: LD_INT 230
18155: PPUSH
18156: LD_INT 143
18158: PPUSH
18159: CALL_OW 114
// end ;
18163: GO 18062
18165: POP
18166: POP
// for i := 1 to 3 + v do
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: DOUBLE
18173: LD_INT 1
18175: DEC
18176: ST_TO_ADDR
18177: LD_INT 3
18179: PUSH
18180: LD_VAR 0 1
18184: PLUS
18185: PUSH
18186: FOR_TO
18187: IFFALSE 18351
// begin PrepareMechanic ( false , skill ) ;
18189: LD_INT 0
18191: PPUSH
18192: LD_VAR 0 4
18196: PPUSH
18197: CALL_OW 383
// un := CreateHuman ;
18201: LD_ADDR_VAR 0 5
18205: PUSH
18206: CALL_OW 44
18210: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18211: LD_VAR 0 5
18215: PPUSH
18216: LD_INT 999
18218: PPUSH
18219: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18223: LD_INT 14
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: LD_INT 27
18234: PUSH
18235: LD_INT 25
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_INT 2
18249: MOD
18250: PUSH
18251: LD_INT 1
18253: PLUS
18254: ARRAY
18255: PPUSH
18256: LD_INT 80
18258: PPUSH
18259: CALL 32114 0 5
// veh := CreateVehicle ;
18263: LD_ADDR_VAR 0 6
18267: PUSH
18268: CALL_OW 45
18272: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18273: LD_VAR 0 6
18277: PPUSH
18278: LD_INT 5
18280: PPUSH
18281: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18285: LD_VAR 0 6
18289: PPUSH
18290: LD_INT 26
18292: PPUSH
18293: LD_INT 0
18295: PPUSH
18296: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18300: LD_VAR 0 5
18304: PPUSH
18305: LD_VAR 0 6
18309: PPUSH
18310: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18314: LD_VAR 0 5
18318: PPUSH
18319: LD_INT 236
18321: PPUSH
18322: LD_INT 127
18324: PPUSH
18325: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18329: LD_ADDR_EXP 57
18333: PUSH
18334: LD_EXP 57
18338: PPUSH
18339: LD_VAR 0 6
18343: PPUSH
18344: CALL 64985 0 2
18348: ST_TO_ADDR
// end ;
18349: GO 18186
18351: POP
18352: POP
// wait ( 0 0$2 ) ;
18353: LD_INT 70
18355: PPUSH
18356: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: DOUBLE
18366: LD_INT 1
18368: DEC
18369: ST_TO_ADDR
18370: LD_INT 1
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: PUSH
18384: LD_OWVAR 67
18388: ARRAY
18389: PUSH
18390: FOR_TO
18391: IFFALSE 18534
// begin PrepareMechanic ( false , skill ) ;
18393: LD_INT 0
18395: PPUSH
18396: LD_VAR 0 4
18400: PPUSH
18401: CALL_OW 383
// un := CreateHuman ;
18405: LD_ADDR_VAR 0 5
18409: PUSH
18410: CALL_OW 44
18414: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18415: LD_VAR 0 5
18419: PPUSH
18420: LD_INT 999
18422: PPUSH
18423: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18427: LD_INT 14
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_INT 26
18438: PPUSH
18439: LD_INT 80
18441: PPUSH
18442: CALL 32114 0 5
// veh := CreateVehicle ;
18446: LD_ADDR_VAR 0 6
18450: PUSH
18451: CALL_OW 45
18455: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18456: LD_VAR 0 6
18460: PPUSH
18461: LD_INT 5
18463: PPUSH
18464: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18468: LD_VAR 0 6
18472: PPUSH
18473: LD_INT 26
18475: PPUSH
18476: LD_INT 0
18478: PPUSH
18479: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18483: LD_VAR 0 5
18487: PPUSH
18488: LD_VAR 0 6
18492: PPUSH
18493: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18497: LD_VAR 0 5
18501: PPUSH
18502: LD_INT 236
18504: PPUSH
18505: LD_INT 127
18507: PPUSH
18508: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18512: LD_ADDR_EXP 57
18516: PUSH
18517: LD_EXP 57
18521: PPUSH
18522: LD_VAR 0 6
18526: PPUSH
18527: CALL 64985 0 2
18531: ST_TO_ADDR
// end ;
18532: GO 18390
18534: POP
18535: POP
// wait ( 0 0$2 ) ;
18536: LD_INT 70
18538: PPUSH
18539: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: DOUBLE
18549: LD_INT 1
18551: DEC
18552: ST_TO_ADDR
18553: LD_INT 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: PUSH
18567: LD_OWVAR 67
18571: ARRAY
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18748
// begin PrepareMechanic ( false , skill ) ;
18576: LD_INT 0
18578: PPUSH
18579: LD_VAR 0 4
18583: PPUSH
18584: CALL_OW 383
// un := CreateHuman ;
18588: LD_ADDR_VAR 0 5
18592: PUSH
18593: CALL_OW 44
18597: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18598: LD_VAR 0 5
18602: PPUSH
18603: LD_INT 999
18605: PPUSH
18606: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18610: LD_INT 14
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: LD_INT 28
18621: PPUSH
18622: LD_INT 80
18624: PPUSH
18625: CALL 32114 0 5
// veh := CreateVehicle ;
18629: LD_ADDR_VAR 0 6
18633: PUSH
18634: CALL_OW 45
18638: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18639: LD_VAR 0 6
18643: PPUSH
18644: LD_INT 4
18646: PPUSH
18647: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18651: LD_VAR 0 6
18655: PPUSH
18656: LD_INT 26
18658: PPUSH
18659: LD_INT 0
18661: PPUSH
18662: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18666: LD_VAR 0 5
18670: PPUSH
18671: LD_VAR 0 6
18675: PPUSH
18676: CALL_OW 52
// if i mod 2 = 0 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 2
18687: MOD
18688: PUSH
18689: LD_INT 0
18691: EQUAL
18692: IFFALSE 18711
// ComMoveXY ( un , 136 , 61 ) else
18694: LD_VAR 0 5
18698: PPUSH
18699: LD_INT 136
18701: PPUSH
18702: LD_INT 61
18704: PPUSH
18705: CALL_OW 111
18709: GO 18726
// ComMoveXY ( un , 137 , 41 ) ;
18711: LD_VAR 0 5
18715: PPUSH
18716: LD_INT 137
18718: PPUSH
18719: LD_INT 41
18721: PPUSH
18722: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18726: LD_ADDR_EXP 57
18730: PUSH
18731: LD_EXP 57
18735: PPUSH
18736: LD_VAR 0 6
18740: PPUSH
18741: CALL 64985 0 2
18745: ST_TO_ADDR
// end ;
18746: GO 18573
18748: POP
18749: POP
// end ;
18750: LD_VAR 0 2
18754: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18755: LD_EXP 56
18759: IFFALSE 19130
18761: GO 18763
18763: DISABLE
18764: LD_INT 0
18766: PPUSH
18767: PPUSH
18768: PPUSH
18769: PPUSH
// begin enable ;
18770: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18771: LD_ADDR_VAR 0 2
18775: PUSH
18776: LD_EXP 56
18780: PPUSH
18781: LD_INT 50
18783: PUSH
18784: EMPTY
18785: LIST
18786: PPUSH
18787: CALL_OW 72
18791: ST_TO_ADDR
// arAttackersInf := [ ] ;
18792: LD_ADDR_EXP 56
18796: PUSH
18797: EMPTY
18798: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_INT 173
18806: PPUSH
18807: LD_INT 139
18809: PPUSH
18810: CALL_OW 111
// wait ( 0 0$10 ) ;
18814: LD_INT 350
18816: PPUSH
18817: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18821: LD_ADDR_VAR 0 1
18825: PUSH
18826: LD_VAR 0 2
18830: PPUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PPUSH
18841: CALL_OW 72
18845: PUSH
18846: FOR_IN
18847: IFFALSE 18978
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_INT 81
18856: PUSH
18857: LD_EXP 3
18861: PUSH
18862: LD_INT 2
18864: ARRAY
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: LD_INT 120
18875: PUSH
18876: LD_INT 11
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 21
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: PPUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 74
18934: ST_TO_ADDR
// if not nearest then
18935: LD_VAR 0 3
18939: NOT
18940: IFFALSE 18944
// break ;
18942: GO 18978
// SetTag ( nearest , tMined ) ;
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 11
18951: PPUSH
18952: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_INT 0
18963: PPUSH
18964: LD_INT 0
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: CALL_OW 192
// end ;
18976: GO 18846
18978: POP
18979: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18980: LD_ADDR_VAR 0 2
18984: PUSH
18985: LD_VAR 0 2
18989: PPUSH
18990: LD_INT 50
18992: PUSH
18993: EMPTY
18994: LIST
18995: PPUSH
18996: CALL_OW 72
19000: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
19001: LD_VAR 0 2
19005: PPUSH
19006: LD_INT 155
19008: PPUSH
19009: LD_INT 119
19011: PPUSH
19012: CALL_OW 171
// repeat wait ( 0 0$3 ) ;
19016: LD_INT 105
19018: PPUSH
19019: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_VAR 0 2
19032: PPUSH
19033: LD_INT 50
19035: PUSH
19036: EMPTY
19037: LIST
19038: PPUSH
19039: CALL_OW 72
19043: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19044: LD_ADDR_VAR 0 4
19048: PUSH
19049: LD_INT 81
19051: PUSH
19052: LD_EXP 3
19056: PUSH
19057: LD_INT 2
19059: ARRAY
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: ST_TO_ADDR
// for i in tmp do
19070: LD_ADDR_VAR 0 1
19074: PUSH
19075: LD_VAR 0 2
19079: PUSH
19080: FOR_IN
19081: IFFALSE 19121
// if not HasTask ( i ) then
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 314
19092: NOT
19093: IFFALSE 19119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) until not tmp ;
19095: LD_VAR 0 1
19099: PPUSH
19100: LD_VAR 0 4
19104: PPUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 74
19114: PPUSH
19115: CALL_OW 115
19119: GO 19080
19121: POP
19122: POP
19123: LD_VAR 0 2
19127: NOT
19128: IFFALSE 19016
// end ;
19130: PPOPN 4
19132: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19133: LD_EXP 57
19137: IFFALSE 19249
19139: GO 19141
19141: DISABLE
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
// begin enable ;
19146: ENABLE
// tmp := arAttackersVeh ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_EXP 57
19156: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19157: LD_ADDR_EXP 57
19161: PUSH
19162: EMPTY
19163: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19164: LD_INT 70
19166: PPUSH
19167: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19171: LD_ADDR_VAR 0 2
19175: PUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: LD_INT 50
19183: PUSH
19184: EMPTY
19185: LIST
19186: PPUSH
19187: CALL_OW 72
19191: ST_TO_ADDR
// for i in tmp do
19192: LD_ADDR_VAR 0 1
19196: PUSH
19197: LD_VAR 0 2
19201: PUSH
19202: FOR_IN
19203: IFFALSE 19240
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 207
19212: PUSH
19213: LD_INT 125
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 185
19222: PUSH
19223: LD_INT 114
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL 67595 0 2
19238: GO 19202
19240: POP
19241: POP
19242: LD_VAR 0 2
19246: NOT
19247: IFFALSE 19164
// end ;
19249: PPOPN 2
19251: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19252: LD_EXP 49
19256: PUSH
19257: LD_EXP 4
19261: AND
19262: IFFALSE 19852
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin enable ;
19272: ENABLE
// if not arVehiclesAtttackers then
19273: LD_EXP 49
19277: NOT
19278: IFFALSE 19282
// exit ;
19280: GO 19852
// for i in arVehiclesAtttackers do
19282: LD_ADDR_VAR 0 1
19286: PUSH
19287: LD_EXP 49
19291: PUSH
19292: FOR_IN
19293: IFFALSE 19850
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19295: LD_VAR 0 1
19299: PPUSH
19300: CALL_OW 302
19304: NOT
19305: PUSH
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 255
19315: PUSH
19316: LD_EXP 3
19320: PUSH
19321: LD_INT 2
19323: ARRAY
19324: NONEQUAL
19325: OR
19326: IFFALSE 19346
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19328: LD_ADDR_EXP 49
19332: PUSH
19333: LD_EXP 49
19337: PUSH
19338: LD_VAR 0 1
19342: DIFF
19343: ST_TO_ADDR
// continue ;
19344: GO 19292
// end ; if GetTag ( i ) = 300 then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 110
19355: PUSH
19356: LD_INT 300
19358: EQUAL
19359: IFFALSE 19474
// begin if GetFuel ( i ) < 50 then
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 261
19370: PUSH
19371: LD_INT 50
19373: LESS
19374: IFFALSE 19433
// begin ComMoveXY ( i , 198 , 28 ) ;
19376: LD_VAR 0 1
19380: PPUSH
19381: LD_INT 198
19383: PPUSH
19384: LD_INT 28
19386: PPUSH
19387: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19391: LD_INT 35
19393: PPUSH
19394: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_INT 198
19405: PPUSH
19406: LD_INT 28
19408: PPUSH
19409: CALL_OW 297
19413: PUSH
19414: LD_INT 4
19416: LESS
19417: IFFALSE 19391
// SetFuel ( i , 100 ) ;
19419: LD_VAR 0 1
19423: PPUSH
19424: LD_INT 100
19426: PPUSH
19427: CALL_OW 240
// end else
19431: GO 19474
// if not IsInArea ( i , arParkingArea ) then
19433: LD_VAR 0 1
19437: PPUSH
19438: LD_INT 28
19440: PPUSH
19441: CALL_OW 308
19445: NOT
19446: IFFALSE 19462
// ComMoveToArea ( i , arParkingArea ) else
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 28
19455: PPUSH
19456: CALL_OW 113
19460: GO 19474
// SetTag ( i , 301 ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_INT 301
19469: PPUSH
19470: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 110
19483: PUSH
19484: LD_INT 301
19486: EQUAL
19487: IFFALSE 19629
// begin if GetLives ( i ) < 1000 then
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 256
19498: PUSH
19499: LD_INT 1000
19501: LESS
19502: IFFALSE 19606
// begin if not IsDrivenBy ( i ) then
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 311
19513: NOT
19514: IFFALSE 19518
// continue ;
19516: GO 19292
// mech := IsDrivenBy ( i ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 311
19532: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19533: LD_VAR 0 2
19537: PPUSH
19538: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19542: LD_VAR 0 2
19546: PPUSH
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19556: LD_INT 35
19558: PPUSH
19559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 256
19572: PUSH
19573: LD_INT 1000
19575: EQUAL
19576: IFFALSE 19556
// SetLives ( mech , 1000 ) ;
19578: LD_VAR 0 2
19582: PPUSH
19583: LD_INT 1000
19585: PPUSH
19586: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 120
// end else
19604: GO 19629
// if IsDrivenBy ( i ) then
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 311
19615: IFFALSE 19629
// SetTag ( i , 0 ) ;
19617: LD_VAR 0 1
19621: PPUSH
19622: LD_INT 0
19624: PPUSH
19625: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 110
19638: PUSH
19639: LD_INT 300
19641: LESS
19642: IFFALSE 19848
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
19644: LD_ADDR_VAR 0 3
19648: PUSH
19649: LD_INT 5
19651: PPUSH
19652: LD_INT 81
19654: PUSH
19655: LD_EXP 3
19659: PUSH
19660: LD_INT 2
19662: ARRAY
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PPUSH
19668: CALL_OW 70
19672: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 256
19682: PUSH
19683: LD_INT 650
19685: LESS
19686: IFFALSE 19711
// begin ComStop ( i ) ;
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 141
// SetTag ( i , 300 ) ;
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_INT 300
19704: PPUSH
19705: CALL_OW 109
// continue ;
19709: GO 19292
// end ; if enemy then
19711: LD_VAR 0 3
19715: IFFALSE 19755
// begin if not HasTask ( i ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 314
19726: NOT
19727: IFFALSE 19753
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19729: LD_VAR 0 1
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 74
19748: PPUSH
19749: CALL_OW 115
// end else
19753: GO 19848
// if arVehiclesAtttackers then
19755: LD_EXP 49
19759: IFFALSE 19848
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: LD_INT 81
19768: PUSH
19769: LD_EXP 3
19773: PUSH
19774: LD_INT 2
19776: ARRAY
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PPUSH
19782: CALL_OW 69
19786: ST_TO_ADDR
// if enemy then
19787: LD_VAR 0 3
19791: IFFALSE 19848
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 215
19800: PUSH
19801: LD_INT 88
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 197
19810: PUSH
19811: LD_INT 90
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 178
19820: PUSH
19821: LD_INT 90
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 169
19830: PUSH
19831: LD_INT 104
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PPUSH
19844: CALL 67595 0 2
// end ; end ; end ;
19848: GO 19292
19850: POP
19851: POP
// end ;
19852: PPOPN 3
19854: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19855: LD_INT 22
19857: PUSH
19858: LD_EXP 3
19862: PUSH
19863: LD_INT 2
19865: ARRAY
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 32
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 69
19889: IFFALSE 19972
19891: GO 19893
19893: DISABLE
19894: LD_INT 0
19896: PPUSH
// begin enable ;
19897: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19898: LD_ADDR_VAR 0 1
19902: PUSH
19903: LD_INT 22
19905: PUSH
19906: LD_EXP 3
19910: PUSH
19911: LD_INT 2
19913: ARRAY
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 32
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: PUSH
19938: FOR_IN
19939: IFFALSE 19970
// if GetFuel ( i ) < 3 then
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 261
19950: PUSH
19951: LD_INT 3
19953: LESS
19954: IFFALSE 19968
// SetFuel ( i , 3 ) ;
19956: LD_VAR 0 1
19960: PPUSH
19961: LD_INT 3
19963: PPUSH
19964: CALL_OW 240
19968: GO 19938
19970: POP
19971: POP
// end ;
19972: PPOPN 1
19974: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// uc_side := botSides [ 1 ] ;
19982: LD_ADDR_OWVAR 20
19986: PUSH
19987: LD_EXP 3
19991: PUSH
19992: LD_INT 1
19994: ARRAY
19995: ST_TO_ADDR
// uc_nation := nation_american ;
19996: LD_ADDR_OWVAR 21
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 4
20014: PUSH
20015: LD_INT 5
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: PUSH
20023: LD_OWVAR 67
20027: ARRAY
20028: ST_TO_ADDR
// amAttackersInf := [ ] ;
20029: LD_ADDR_EXP 58
20033: PUSH
20034: EMPTY
20035: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20036: LD_ADDR_EXP 59
20040: PUSH
20041: EMPTY
20042: ST_TO_ADDR
// InitHC_All ( ) ;
20043: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: DOUBLE
20053: LD_INT 1
20055: DEC
20056: ST_TO_ADDR
20057: LD_INT 2
20059: PUSH
20060: LD_INT 3
20062: PUSH
20063: LD_INT 4
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: PUSH
20071: LD_OWVAR 67
20075: ARRAY
20076: PUSH
20077: LD_VAR 0 1
20081: PLUS
20082: PUSH
20083: FOR_TO
20084: IFFALSE 20160
// begin PrepareSoldier ( false , skill ) ;
20086: LD_INT 0
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: CALL_OW 381
// un := CreateHuman ;
20098: LD_ADDR_VAR 0 5
20102: PUSH
20103: CALL_OW 44
20107: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
20108: LD_VAR 0 5
20112: PPUSH
20113: LD_INT 30
20115: PPUSH
20116: LD_INT 0
20118: PPUSH
20119: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
20123: LD_ADDR_EXP 58
20127: PUSH
20128: LD_EXP 58
20132: PPUSH
20133: LD_VAR 0 5
20137: PPUSH
20138: CALL 64985 0 2
20142: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
20143: LD_VAR 0 5
20147: PPUSH
20148: LD_INT 110
20150: PPUSH
20151: LD_INT 129
20153: PPUSH
20154: CALL_OW 114
// end ;
20158: GO 20083
20160: POP
20161: POP
// for i := 1 to 2 + v do
20162: LD_ADDR_VAR 0 3
20166: PUSH
20167: DOUBLE
20168: LD_INT 1
20170: DEC
20171: ST_TO_ADDR
20172: LD_INT 2
20174: PUSH
20175: LD_VAR 0 1
20179: PLUS
20180: PUSH
20181: FOR_TO
20182: IFFALSE 20350
// begin PrepareMechanic ( false , skill ) ;
20184: LD_INT 0
20186: PPUSH
20187: LD_VAR 0 4
20191: PPUSH
20192: CALL_OW 383
// un := CreateHuman ;
20196: LD_ADDR_VAR 0 5
20200: PUSH
20201: CALL_OW 44
20205: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20206: LD_VAR 0 5
20210: PPUSH
20211: LD_INT 999
20213: PPUSH
20214: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20218: LD_INT 3
20220: PPUSH
20221: LD_INT 1
20223: PPUSH
20224: LD_INT 1
20226: PPUSH
20227: LD_INT 3
20229: PUSH
20230: LD_INT 5
20232: PUSH
20233: LD_INT 4
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 3
20248: MOD
20249: PUSH
20250: LD_INT 1
20252: PLUS
20253: ARRAY
20254: PPUSH
20255: LD_INT 80
20257: PPUSH
20258: CALL 32114 0 5
// veh := CreateVehicle ;
20262: LD_ADDR_VAR 0 6
20266: PUSH
20267: CALL_OW 45
20271: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20272: LD_VAR 0 6
20276: PPUSH
20277: LD_INT 0
20279: PPUSH
20280: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20284: LD_VAR 0 6
20288: PPUSH
20289: LD_INT 31
20291: PPUSH
20292: LD_INT 0
20294: PPUSH
20295: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20299: LD_VAR 0 5
20303: PPUSH
20304: LD_VAR 0 6
20308: PPUSH
20309: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20313: LD_VAR 0 5
20317: PPUSH
20318: LD_INT 96
20320: PPUSH
20321: LD_INT 137
20323: PPUSH
20324: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20328: LD_ADDR_EXP 59
20332: PUSH
20333: LD_EXP 59
20337: PPUSH
20338: LD_VAR 0 6
20342: PPUSH
20343: CALL 64985 0 2
20347: ST_TO_ADDR
// end ;
20348: GO 20181
20350: POP
20351: POP
// end ;
20352: LD_VAR 0 2
20356: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20357: LD_EXP 59
20361: IFFALSE 20497
20363: GO 20365
20365: DISABLE
20366: LD_INT 0
20368: PPUSH
20369: PPUSH
// begin enable ;
20370: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_EXP 59
20380: PUSH
20381: LD_EXP 58
20385: UNION
20386: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20387: LD_ADDR_EXP 57
20391: PUSH
20392: EMPTY
20393: ST_TO_ADDR
// amAttackersInf := [ ] ;
20394: LD_ADDR_EXP 58
20398: PUSH
20399: EMPTY
20400: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20401: LD_INT 70
20403: PPUSH
20404: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: LD_INT 50
20420: PUSH
20421: EMPTY
20422: LIST
20423: PPUSH
20424: CALL_OW 72
20428: ST_TO_ADDR
// for i in tmp do
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: LD_VAR 0 2
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20488
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20442: LD_VAR 0 1
20446: PPUSH
20447: LD_INT 96
20449: PUSH
20450: LD_INT 145
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 99
20459: PUSH
20460: LD_INT 130
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 87
20469: PUSH
20470: LD_INT 103
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: PPUSH
20482: CALL 67595 0 2
20486: GO 20439
20488: POP
20489: POP
20490: LD_VAR 0 2
20494: NOT
20495: IFFALSE 20401
// end ;
20497: PPOPN 2
20499: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20500: LD_EXP 39
20504: PUSH
20505: LD_EXP 5
20509: AND
20510: IFFALSE 21089
20512: GO 20514
20514: DISABLE
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
20519: PPUSH
// begin enable ;
20520: ENABLE
// if not amVehiclesAtttackers then
20521: LD_EXP 39
20525: NOT
20526: IFFALSE 20530
// exit ;
20528: GO 21089
// for i in amVehiclesAtttackers do
20530: LD_ADDR_VAR 0 1
20534: PUSH
20535: LD_EXP 39
20539: PUSH
20540: FOR_IN
20541: IFFALSE 21087
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 302
20552: NOT
20553: PUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 255
20563: PUSH
20564: LD_EXP 3
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: NONEQUAL
20573: OR
20574: IFFALSE 20594
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20576: LD_ADDR_EXP 39
20580: PUSH
20581: LD_EXP 39
20585: PUSH
20586: LD_VAR 0 1
20590: DIFF
20591: ST_TO_ADDR
// continue ;
20592: GO 20540
// end ; if GetTag ( i ) = 300 then
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 300
20606: EQUAL
20607: IFFALSE 20722
// begin if GetFuel ( i ) < 50 then
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 261
20618: PUSH
20619: LD_INT 50
20621: LESS
20622: IFFALSE 20681
// begin ComMoveXY ( i , 24 , 36 ) ;
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 24
20631: PPUSH
20632: LD_INT 36
20634: PPUSH
20635: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
20646: LD_VAR 0 1
20650: PPUSH
20651: LD_INT 24
20653: PPUSH
20654: LD_INT 36
20656: PPUSH
20657: CALL_OW 297
20661: PUSH
20662: LD_INT 4
20664: LESS
20665: IFFALSE 20639
// SetFuel ( i , 100 ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 100
20674: PPUSH
20675: CALL_OW 240
// end else
20679: GO 20722
// if not IsInArea ( i , amParkingArea ) then
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_INT 27
20688: PPUSH
20689: CALL_OW 308
20693: NOT
20694: IFFALSE 20710
// ComMoveToArea ( i , amParkingArea ) else
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_INT 27
20703: PPUSH
20704: CALL_OW 113
20708: GO 20722
// SetTag ( i , 301 ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_INT 301
20717: PPUSH
20718: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 110
20731: PUSH
20732: LD_INT 301
20734: EQUAL
20735: IFFALSE 20877
// begin if GetLives ( i ) < 1000 then
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 256
20746: PUSH
20747: LD_INT 1000
20749: LESS
20750: IFFALSE 20854
// begin if not IsDrivenBy ( i ) then
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 311
20761: NOT
20762: IFFALSE 20766
// continue ;
20764: GO 20540
// mech := IsDrivenBy ( i ) ;
20766: LD_ADDR_VAR 0 2
20770: PUSH
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 311
20780: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20781: LD_VAR 0 2
20785: PPUSH
20786: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20804: LD_INT 35
20806: PPUSH
20807: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 256
20820: PUSH
20821: LD_INT 1000
20823: EQUAL
20824: IFFALSE 20804
// SetLives ( mech , 1000 ) ;
20826: LD_VAR 0 2
20830: PPUSH
20831: LD_INT 1000
20833: PPUSH
20834: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20838: LD_VAR 0 2
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 120
// end else
20852: GO 20877
// if IsDrivenBy ( i ) then
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 311
20863: IFFALSE 20877
// SetTag ( i , 0 ) ;
20865: LD_VAR 0 1
20869: PPUSH
20870: LD_INT 0
20872: PPUSH
20873: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 110
20886: PUSH
20887: LD_INT 300
20889: LESS
20890: IFFALSE 21085
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_INT 3
20899: PPUSH
20900: LD_INT 81
20902: PUSH
20903: LD_EXP 3
20907: PUSH
20908: LD_INT 1
20910: ARRAY
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 70
20920: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 256
20930: PUSH
20931: LD_INT 650
20933: LESS
20934: IFFALSE 20959
// begin ComStop ( i ) ;
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 141
// SetTag ( i , 300 ) ;
20945: LD_VAR 0 1
20949: PPUSH
20950: LD_INT 300
20952: PPUSH
20953: CALL_OW 109
// continue ;
20957: GO 20540
// end ; if enemy then
20959: LD_VAR 0 3
20963: IFFALSE 21003
// begin if not HasTask ( i ) then
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 314
20974: NOT
20975: IFFALSE 21001
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20977: LD_VAR 0 1
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 74
20996: PPUSH
20997: CALL_OW 115
// end else
21001: GO 21085
// if amVehiclesAtttackers then
21003: LD_EXP 39
21007: IFFALSE 21085
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
21009: LD_ADDR_VAR 0 3
21013: PUSH
21014: LD_INT 81
21016: PUSH
21017: LD_EXP 3
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: ST_TO_ADDR
// if enemy then
21035: LD_VAR 0 3
21039: IFFALSE 21085
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 49
21048: PUSH
21049: LD_INT 43
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 63
21058: PUSH
21059: LD_INT 56
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 72
21068: PUSH
21069: LD_INT 67
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL 67595 0 2
// end ; end ; end ;
21085: GO 20540
21087: POP
21088: POP
// end ;
21089: PPOPN 3
21091: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21092: LD_INT 22
21094: PUSH
21095: LD_EXP 3
21099: PUSH
21100: LD_INT 1
21102: ARRAY
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 32
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: IFFALSE 21209
21128: GO 21130
21130: DISABLE
21131: LD_INT 0
21133: PPUSH
// begin enable ;
21134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21135: LD_ADDR_VAR 0 1
21139: PUSH
21140: LD_INT 22
21142: PUSH
21143: LD_EXP 3
21147: PUSH
21148: LD_INT 1
21150: ARRAY
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 32
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 69
21174: PUSH
21175: FOR_IN
21176: IFFALSE 21207
// if GetFuel ( i ) < 3 then
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 261
21187: PUSH
21188: LD_INT 3
21190: LESS
21191: IFFALSE 21205
// SetFuel ( i , 3 ) ;
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_INT 3
21200: PPUSH
21201: CALL_OW 240
21205: GO 21175
21207: POP
21208: POP
// end ; end_of_file
21209: PPOPN 1
21211: END
// every 0 0$20 trigger game do
21212: LD_EXP 2
21216: IFFALSE 21265
21218: GO 21220
21220: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21221: LD_INT 20
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_INT 21
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 5
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PPUSH
21243: LD_EXP 21
21247: PUSH
21248: LD_INT 2
21250: ARRAY
21251: PPUSH
21252: LD_EXP 21
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PPUSH
21261: CALL 21266 0 3
21265: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
21271: PPUSH
// if not areas then
21272: LD_VAR 0 1
21276: NOT
21277: IFFALSE 21281
// exit ;
21279: GO 21658
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21281: LD_ADDR_VAR 0 7
21285: PUSH
21286: LD_INT 17
21288: PUSH
21289: LD_INT 18
21291: PUSH
21292: LD_INT 19
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
// x := 5 ;
21300: LD_ADDR_VAR 0 6
21304: PUSH
21305: LD_INT 5
21307: ST_TO_ADDR
// repeat wait ( time ) ;
21308: LD_VAR 0 2
21312: PPUSH
21313: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21317: LD_OWVAR 1
21321: PUSH
21322: LD_INT 37800
21324: PUSH
21325: LD_INT 31500
21327: PUSH
21328: LD_INT 25200
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: PUSH
21336: LD_OWVAR 67
21340: ARRAY
21341: LESS
21342: IFFALSE 21481
// begin for i := 1 to multi_sides do
21344: LD_ADDR_VAR 0 5
21348: PUSH
21349: DOUBLE
21350: LD_INT 1
21352: DEC
21353: ST_TO_ADDR
21354: LD_EXP 7
21358: PUSH
21359: FOR_TO
21360: IFFALSE 21472
// if multi_sides [ i ] then
21362: LD_EXP 7
21366: PUSH
21367: LD_VAR 0 5
21371: ARRAY
21372: IFFALSE 21470
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21374: LD_VAR 0 7
21378: PUSH
21379: LD_EXP 7
21383: PUSH
21384: LD_VAR 0 5
21388: ARRAY
21389: ARRAY
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 287
21398: PUSH
21399: LD_INT 32
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 23
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: PUSH
21413: LD_OWVAR 67
21417: ARRAY
21418: LESS
21419: IFFALSE 21470
// begin amount := amount - ( x * 10 ) ;
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_VAR 0 3
21430: PUSH
21431: LD_VAR 0 6
21435: PUSH
21436: LD_INT 10
21438: MUL
21439: MINUS
21440: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21441: LD_VAR 0 6
21445: PPUSH
21446: LD_VAR 0 7
21450: PUSH
21451: LD_EXP 7
21455: PUSH
21456: LD_VAR 0 5
21460: ARRAY
21461: ARRAY
21462: PPUSH
21463: LD_INT 1
21465: PPUSH
21466: CALL_OW 55
// end ; end ;
21470: GO 21359
21472: POP
21473: POP
// wait ( 0 0$2 ) ;
21474: LD_INT 70
21476: PPUSH
21477: CALL_OW 67
// end ; for i in areas do
21481: LD_ADDR_VAR 0 5
21485: PUSH
21486: LD_VAR 0 1
21490: PUSH
21491: FOR_IN
21492: IFFALSE 21575
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 287
21506: PUSH
21507: LD_INT 25
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 20
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: PUSH
21521: LD_OWVAR 67
21525: ARRAY
21526: LESS
21527: IFFALSE 21573
// begin wait ( 0 0$5 ) ;
21529: LD_INT 175
21531: PPUSH
21532: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21536: LD_VAR 0 6
21540: PPUSH
21541: LD_VAR 0 5
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_VAR 0 3
21562: PUSH
21563: LD_VAR 0 6
21567: PUSH
21568: LD_INT 10
21570: MUL
21571: MINUS
21572: ST_TO_ADDR
// end ; end ;
21573: GO 21491
21575: POP
21576: POP
// time := time + 0 0$2 ;
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_VAR 0 2
21586: PUSH
21587: LD_INT 70
21589: PLUS
21590: ST_TO_ADDR
// x := x - 1 ;
21591: LD_ADDR_VAR 0 6
21595: PUSH
21596: LD_VAR 0 6
21600: PUSH
21601: LD_INT 1
21603: MINUS
21604: ST_TO_ADDR
// if x = 0 then
21605: LD_VAR 0 6
21609: PUSH
21610: LD_INT 0
21612: EQUAL
21613: IFFALSE 21623
// x := 5 ;
21615: LD_ADDR_VAR 0 6
21619: PUSH
21620: LD_INT 5
21622: ST_TO_ADDR
// if time > 2 2$00 then
21623: LD_VAR 0 2
21627: PUSH
21628: LD_INT 4200
21630: GREATER
21631: IFFALSE 21641
// time := 0 0$30 ;
21633: LD_ADDR_VAR 0 2
21637: PUSH
21638: LD_INT 1050
21640: ST_TO_ADDR
// until not game or amount <= 0 ;
21641: LD_EXP 2
21645: NOT
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 0
21654: LESSEQUAL
21655: OR
21656: IFFALSE 21308
// end ; end_of_file
21658: LD_VAR 0 4
21662: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21663: LD_VAR 0 1
21667: PUSH
21668: LD_INT 200
21670: DOUBLE
21671: GREATEREQUAL
21672: IFFALSE 21680
21674: LD_INT 299
21676: DOUBLE
21677: LESSEQUAL
21678: IFTRUE 21682
21680: GO 21714
21682: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: LD_VAR 0 4
21702: PPUSH
21703: LD_VAR 0 5
21707: PPUSH
21708: CALL 22491 0 5
21712: GO 21791
21714: LD_INT 300
21716: DOUBLE
21717: GREATEREQUAL
21718: IFFALSE 21726
21720: LD_INT 399
21722: DOUBLE
21723: LESSEQUAL
21724: IFTRUE 21728
21726: GO 21790
21728: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21729: LD_VAR 0 1
21733: PPUSH
21734: LD_VAR 0 2
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: LD_VAR 0 5
21753: PPUSH
21754: LD_VAR 0 6
21758: PPUSH
21759: LD_VAR 0 7
21763: PPUSH
21764: LD_VAR 0 8
21768: PPUSH
21769: LD_VAR 0 9
21773: PPUSH
21774: LD_VAR 0 10
21778: PPUSH
21779: LD_VAR 0 11
21783: PPUSH
21784: CALL 70723 0 11
21788: GO 21791
21790: POP
// end ;
21791: PPOPN 11
21793: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21794: LD_VAR 0 1
21798: PPUSH
21799: LD_VAR 0 2
21803: PPUSH
21804: LD_VAR 0 3
21808: PPUSH
21809: LD_VAR 0 4
21813: PPUSH
21814: LD_VAR 0 5
21818: PPUSH
21819: CALL 21876 0 5
// end ; end_of_file
21823: PPOPN 5
21825: END
// export function SOS_UnitDestroyed ( un ) ; begin
21826: LD_INT 0
21828: PPUSH
// ComRadiation ( un ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL 22895 0 1
// end ;
21838: LD_VAR 0 2
21842: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21843: LD_INT 0
21845: PPUSH
// ComRadiation ( un ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL 22895 0 1
// end ;
21855: LD_VAR 0 2
21859: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21860: LD_INT 0
21862: PPUSH
// end ;
21863: LD_VAR 0 4
21867: RET
// export function SOS_Command ( cmd ) ; begin
21868: LD_INT 0
21870: PPUSH
// end ;
21871: LD_VAR 0 2
21875: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21876: LD_INT 0
21878: PPUSH
// end ;
21879: LD_VAR 0 6
21883: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
21884: LD_INT 0
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
// if not vehicle or not factory then
21890: LD_VAR 0 1
21894: NOT
21895: PUSH
21896: LD_VAR 0 2
21900: NOT
21901: OR
21902: IFFALSE 21906
// exit ;
21904: GO 22486
// if not factoryWaypoints then
21906: LD_EXP 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22486
// for i := 1 to Count ( factoryWaypoints ) do
21915: LD_ADDR_VAR 0 4
21919: PUSH
21920: DOUBLE
21921: LD_INT 1
21923: DEC
21924: ST_TO_ADDR
21925: LD_EXP 70
21929: PPUSH
21930: CALL 29376 0 1
21934: PUSH
21935: FOR_TO
21936: IFFALSE 22484
// if factoryWaypoints [ i ] [ 2 ] = factory then
21938: LD_EXP 70
21942: PUSH
21943: LD_VAR 0 4
21947: ARRAY
21948: PUSH
21949: LD_INT 2
21951: ARRAY
21952: PUSH
21953: LD_VAR 0 2
21957: EQUAL
21958: IFFALSE 22482
// begin if GetControl ( vehicle ) = control_manual then
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 263
21969: PUSH
21970: LD_INT 1
21972: EQUAL
21973: IFFALSE 22335
// begin driver := IsDrivenBy ( vehicle ) ;
21975: LD_ADDR_VAR 0 5
21979: PUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 311
21989: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21990: LD_VAR 0 5
21994: PUSH
21995: LD_EXP 71
21999: IN
22000: PUSH
22001: LD_VAR 0 1
22005: PUSH
22006: LD_EXP 71
22010: IN
22011: OR
22012: IFFALSE 22018
// exit ;
22014: POP
22015: POP
22016: GO 22486
// if not HasTask ( driver ) then
22018: LD_VAR 0 5
22022: PPUSH
22023: CALL_OW 314
22027: NOT
22028: IFFALSE 22333
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22030: LD_ADDR_EXP 71
22034: PUSH
22035: LD_EXP 71
22039: PPUSH
22040: LD_VAR 0 5
22044: PPUSH
22045: CALL 64985 0 2
22049: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22050: LD_ADDR_EXP 71
22054: PUSH
22055: LD_EXP 71
22059: PPUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL 64985 0 2
22069: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22070: LD_ADDR_VAR 0 6
22074: PUSH
22075: LD_EXP 70
22079: PUSH
22080: LD_VAR 0 4
22084: ARRAY
22085: PUSH
22086: LD_INT 3
22088: ARRAY
22089: PPUSH
22090: LD_EXP 70
22094: PUSH
22095: LD_VAR 0 4
22099: ARRAY
22100: PUSH
22101: LD_INT 4
22103: ARRAY
22104: PPUSH
22105: CALL_OW 428
22109: ST_TO_ADDR
// if hex then
22110: LD_VAR 0 6
22114: IFFALSE 22132
// ComMoveUnit ( driver , hex ) else
22116: LD_VAR 0 5
22120: PPUSH
22121: LD_VAR 0 6
22125: PPUSH
22126: CALL_OW 112
22130: GO 22216
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_EXP 70
22141: PUSH
22142: LD_VAR 0 4
22146: ARRAY
22147: PUSH
22148: LD_INT 3
22150: ARRAY
22151: PPUSH
22152: LD_EXP 70
22156: PUSH
22157: LD_VAR 0 4
22161: ARRAY
22162: PUSH
22163: LD_INT 4
22165: ARRAY
22166: PPUSH
22167: CALL_OW 297
22171: PUSH
22172: LD_INT 0
22174: GREATER
22175: IFFALSE 22216
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22177: LD_VAR 0 5
22181: PPUSH
22182: LD_EXP 70
22186: PUSH
22187: LD_VAR 0 4
22191: ARRAY
22192: PUSH
22193: LD_INT 3
22195: ARRAY
22196: PPUSH
22197: LD_EXP 70
22201: PUSH
22202: LD_VAR 0 4
22206: ARRAY
22207: PUSH
22208: LD_INT 4
22210: ARRAY
22211: PPUSH
22212: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22216: LD_VAR 0 5
22220: PPUSH
22221: CALL_OW 181
// if Multiplayer then
22225: LD_OWVAR 4
22229: IFFALSE 22278
// begin repeat wait ( 10 ) ;
22231: LD_INT 10
22233: PPUSH
22234: CALL_OW 67
// until not IsInUnit ( driver ) ;
22238: LD_VAR 0 5
22242: PPUSH
22243: CALL_OW 310
22247: NOT
22248: IFFALSE 22231
// if not HasTask ( driver ) then
22250: LD_VAR 0 5
22254: PPUSH
22255: CALL_OW 314
22259: NOT
22260: IFFALSE 22276
// ComEnterUnit ( driver , factory ) ;
22262: LD_VAR 0 5
22266: PPUSH
22267: LD_VAR 0 2
22271: PPUSH
22272: CALL_OW 120
// end else
22276: GO 22292
// AddComEnterUnit ( driver , factory ) ;
22278: LD_VAR 0 5
22282: PPUSH
22283: LD_VAR 0 2
22287: PPUSH
22288: CALL_OW 180
// wait ( 0 0$1 ) ;
22292: LD_INT 35
22294: PPUSH
22295: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22299: LD_ADDR_EXP 71
22303: PUSH
22304: LD_EXP 71
22308: PUSH
22309: LD_VAR 0 5
22313: DIFF
22314: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22315: LD_ADDR_EXP 71
22319: PUSH
22320: LD_EXP 71
22324: PUSH
22325: LD_VAR 0 1
22329: DIFF
22330: ST_TO_ADDR
// break ;
22331: GO 22484
// end ; end else
22333: GO 22482
// if GetControl ( vehicle ) = control_remote then
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 263
22344: PUSH
22345: LD_INT 2
22347: EQUAL
22348: IFFALSE 22434
// begin wait ( 0 0$2 ) ;
22350: LD_INT 70
22352: PPUSH
22353: CALL_OW 67
// repeat wait ( 10 ) ;
22357: LD_INT 10
22359: PPUSH
22360: CALL_OW 67
// Connect ( vehicle ) ;
22364: LD_VAR 0 1
22368: PPUSH
22369: CALL 35582 0 1
// until IsControledBy ( vehicle ) ;
22373: LD_VAR 0 1
22377: PPUSH
22378: CALL_OW 312
22382: IFFALSE 22357
// wait ( 10 ) ;
22384: LD_INT 10
22386: PPUSH
22387: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22391: LD_VAR 0 1
22395: PPUSH
22396: LD_EXP 70
22400: PUSH
22401: LD_VAR 0 4
22405: ARRAY
22406: PUSH
22407: LD_INT 3
22409: ARRAY
22410: PPUSH
22411: LD_EXP 70
22415: PUSH
22416: LD_VAR 0 4
22420: ARRAY
22421: PUSH
22422: LD_INT 4
22424: ARRAY
22425: PPUSH
22426: CALL_OW 111
// break ;
22430: GO 22484
// end else
22432: GO 22482
// begin wait ( 0 0$3 ) ;
22434: LD_INT 105
22436: PPUSH
22437: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22441: LD_VAR 0 1
22445: PPUSH
22446: LD_EXP 70
22450: PUSH
22451: LD_VAR 0 4
22455: ARRAY
22456: PUSH
22457: LD_INT 3
22459: ARRAY
22460: PPUSH
22461: LD_EXP 70
22465: PUSH
22466: LD_VAR 0 4
22470: ARRAY
22471: PUSH
22472: LD_INT 4
22474: ARRAY
22475: PPUSH
22476: CALL_OW 111
// break ;
22480: GO 22484
// end ; end ;
22482: GO 21935
22484: POP
22485: POP
// end ;
22486: LD_VAR 0 3
22490: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22491: LD_INT 0
22493: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22494: LD_VAR 0 1
22498: PUSH
22499: LD_INT 250
22501: EQUAL
22502: PUSH
22503: LD_VAR 0 2
22507: PPUSH
22508: CALL_OW 264
22512: PUSH
22513: LD_INT 81
22515: EQUAL
22516: AND
22517: IFFALSE 22538
// MinerPlaceMine ( unit , x , y ) ;
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_VAR 0 4
22528: PPUSH
22529: LD_VAR 0 5
22533: PPUSH
22534: CALL 25630 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22538: LD_VAR 0 1
22542: PUSH
22543: LD_INT 251
22545: EQUAL
22546: PUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL_OW 264
22556: PUSH
22557: LD_INT 81
22559: EQUAL
22560: AND
22561: IFFALSE 22582
// MinerDetonateMine ( unit , x , y ) ;
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_VAR 0 4
22572: PPUSH
22573: LD_VAR 0 5
22577: PPUSH
22578: CALL 25905 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22582: LD_VAR 0 1
22586: PUSH
22587: LD_INT 252
22589: EQUAL
22590: PUSH
22591: LD_VAR 0 2
22595: PPUSH
22596: CALL_OW 264
22600: PUSH
22601: LD_INT 81
22603: EQUAL
22604: AND
22605: IFFALSE 22626
// MinerCreateMinefield ( unit , x , y ) ;
22607: LD_VAR 0 2
22611: PPUSH
22612: LD_VAR 0 4
22616: PPUSH
22617: LD_VAR 0 5
22621: PPUSH
22622: CALL 26322 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22626: LD_VAR 0 1
22630: PUSH
22631: LD_INT 253
22633: EQUAL
22634: PUSH
22635: LD_VAR 0 2
22639: PPUSH
22640: CALL_OW 257
22644: PUSH
22645: LD_INT 5
22647: EQUAL
22648: AND
22649: IFFALSE 22670
// ComBinocular ( unit , x , y ) ;
22651: LD_VAR 0 2
22655: PPUSH
22656: LD_VAR 0 4
22660: PPUSH
22661: LD_VAR 0 5
22665: PPUSH
22666: CALL 26691 0 3
// if selectedUnit then
22670: LD_VAR 0 3
22674: IFFALSE 22730
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22676: LD_VAR 0 1
22680: PUSH
22681: LD_INT 254
22683: EQUAL
22684: PUSH
22685: LD_VAR 0 2
22689: PPUSH
22690: CALL_OW 264
22694: PUSH
22695: LD_INT 99
22697: EQUAL
22698: AND
22699: PUSH
22700: LD_VAR 0 3
22704: PPUSH
22705: CALL_OW 263
22709: PUSH
22710: LD_INT 3
22712: EQUAL
22713: AND
22714: IFFALSE 22730
// HackDestroyVehicle ( unit , selectedUnit ) ;
22716: LD_VAR 0 2
22720: PPUSH
22721: LD_VAR 0 3
22725: PPUSH
22726: CALL 24994 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22730: LD_VAR 0 1
22734: PUSH
22735: LD_INT 255
22737: EQUAL
22738: PUSH
22739: LD_VAR 0 2
22743: PPUSH
22744: CALL_OW 264
22748: PUSH
22749: LD_INT 14
22751: PUSH
22752: LD_INT 53
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: IN
22759: AND
22760: PUSH
22761: LD_VAR 0 4
22765: PPUSH
22766: LD_VAR 0 5
22770: PPUSH
22771: CALL_OW 488
22775: AND
22776: IFFALSE 22800
// CutTreeXYR ( unit , x , y , 12 ) ;
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_VAR 0 4
22787: PPUSH
22788: LD_VAR 0 5
22792: PPUSH
22793: LD_INT 12
22795: PPUSH
22796: CALL 22991 0 4
// if cmd = 256 then
22800: LD_VAR 0 1
22804: PUSH
22805: LD_INT 256
22807: EQUAL
22808: IFFALSE 22829
// SetFactoryWaypoint ( unit , x , y ) ;
22810: LD_VAR 0 2
22814: PPUSH
22815: LD_VAR 0 4
22819: PPUSH
22820: LD_VAR 0 5
22824: PPUSH
22825: CALL 70731 0 3
// if cmd = 257 then
22829: LD_VAR 0 1
22833: PUSH
22834: LD_INT 257
22836: EQUAL
22837: IFFALSE 22858
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22839: LD_VAR 0 2
22843: PPUSH
22844: LD_VAR 0 4
22848: PPUSH
22849: LD_VAR 0 5
22853: PPUSH
22854: CALL 71221 0 3
// if cmd = 258 then
22858: LD_VAR 0 1
22862: PUSH
22863: LD_INT 258
22865: EQUAL
22866: IFFALSE 22890
// BurnTreeXYR ( unit , x , y , 8 ) ;
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 4
22877: PPUSH
22878: LD_VAR 0 5
22882: PPUSH
22883: LD_INT 8
22885: PPUSH
22886: CALL 23385 0 4
// end ;
22890: LD_VAR 0 6
22894: RET
// export function ComRadiation ( un ) ; var eff ; begin
22895: LD_INT 0
22897: PPUSH
22898: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 264
22908: PUSH
22909: LD_INT 91
22911: NONEQUAL
22912: IFFALSE 22916
// exit ;
22914: GO 22986
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22916: LD_INT 68
22918: PPUSH
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL_OW 255
22928: PPUSH
22929: CALL_OW 321
22933: PUSH
22934: LD_INT 2
22936: EQUAL
22937: IFFALSE 22949
// eff := 50 else
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_INT 50
22946: ST_TO_ADDR
22947: GO 22957
// eff := 25 ;
22949: LD_ADDR_VAR 0 3
22953: PUSH
22954: LD_INT 25
22956: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 250
22966: PPUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 251
22976: PPUSH
22977: LD_VAR 0 3
22981: PPUSH
22982: CALL_OW 495
// end ;
22986: LD_VAR 0 2
22990: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22991: LD_INT 0
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23002: LD_VAR 0 1
23006: PPUSH
23007: CALL_OW 302
23011: NOT
23012: PUSH
23013: LD_VAR 0 2
23017: PPUSH
23018: LD_VAR 0 3
23022: PPUSH
23023: CALL_OW 488
23027: NOT
23028: OR
23029: PUSH
23030: LD_VAR 0 4
23034: NOT
23035: OR
23036: IFFALSE 23040
// exit ;
23038: GO 23380
// list := [ ] ;
23040: LD_ADDR_VAR 0 13
23044: PUSH
23045: EMPTY
23046: ST_TO_ADDR
// if x - r < 0 then
23047: LD_VAR 0 2
23051: PUSH
23052: LD_VAR 0 4
23056: MINUS
23057: PUSH
23058: LD_INT 0
23060: LESS
23061: IFFALSE 23073
// min_x := 0 else
23063: LD_ADDR_VAR 0 7
23067: PUSH
23068: LD_INT 0
23070: ST_TO_ADDR
23071: GO 23089
// min_x := x - r ;
23073: LD_ADDR_VAR 0 7
23077: PUSH
23078: LD_VAR 0 2
23082: PUSH
23083: LD_VAR 0 4
23087: MINUS
23088: ST_TO_ADDR
// if y - r < 0 then
23089: LD_VAR 0 3
23093: PUSH
23094: LD_VAR 0 4
23098: MINUS
23099: PUSH
23100: LD_INT 0
23102: LESS
23103: IFFALSE 23115
// min_y := 0 else
23105: LD_ADDR_VAR 0 8
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
23113: GO 23131
// min_y := y - r ;
23115: LD_ADDR_VAR 0 8
23119: PUSH
23120: LD_VAR 0 3
23124: PUSH
23125: LD_VAR 0 4
23129: MINUS
23130: ST_TO_ADDR
// max_x := x + r ;
23131: LD_ADDR_VAR 0 9
23135: PUSH
23136: LD_VAR 0 2
23140: PUSH
23141: LD_VAR 0 4
23145: PLUS
23146: ST_TO_ADDR
// max_y := y + r ;
23147: LD_ADDR_VAR 0 10
23151: PUSH
23152: LD_VAR 0 3
23156: PUSH
23157: LD_VAR 0 4
23161: PLUS
23162: ST_TO_ADDR
// for _x = min_x to max_x do
23163: LD_ADDR_VAR 0 11
23167: PUSH
23168: DOUBLE
23169: LD_VAR 0 7
23173: DEC
23174: ST_TO_ADDR
23175: LD_VAR 0 9
23179: PUSH
23180: FOR_TO
23181: IFFALSE 23298
// for _y = min_y to max_y do
23183: LD_ADDR_VAR 0 12
23187: PUSH
23188: DOUBLE
23189: LD_VAR 0 8
23193: DEC
23194: ST_TO_ADDR
23195: LD_VAR 0 10
23199: PUSH
23200: FOR_TO
23201: IFFALSE 23294
// begin if not ValidHex ( _x , _y ) then
23203: LD_VAR 0 11
23207: PPUSH
23208: LD_VAR 0 12
23212: PPUSH
23213: CALL_OW 488
23217: NOT
23218: IFFALSE 23222
// continue ;
23220: GO 23200
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23222: LD_VAR 0 11
23226: PPUSH
23227: LD_VAR 0 12
23231: PPUSH
23232: CALL_OW 351
23236: PUSH
23237: LD_VAR 0 11
23241: PPUSH
23242: LD_VAR 0 12
23246: PPUSH
23247: CALL_OW 554
23251: AND
23252: IFFALSE 23292
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23254: LD_ADDR_VAR 0 13
23258: PUSH
23259: LD_VAR 0 13
23263: PPUSH
23264: LD_VAR 0 13
23268: PUSH
23269: LD_INT 1
23271: PLUS
23272: PPUSH
23273: LD_VAR 0 11
23277: PUSH
23278: LD_VAR 0 12
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 2
23291: ST_TO_ADDR
// end ;
23292: GO 23200
23294: POP
23295: POP
23296: GO 23180
23298: POP
23299: POP
// if not list then
23300: LD_VAR 0 13
23304: NOT
23305: IFFALSE 23309
// exit ;
23307: GO 23380
// for i in list do
23309: LD_ADDR_VAR 0 6
23313: PUSH
23314: LD_VAR 0 13
23318: PUSH
23319: FOR_IN
23320: IFFALSE 23378
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23322: LD_VAR 0 1
23326: PPUSH
23327: LD_STRING M
23329: PUSH
23330: LD_VAR 0 6
23334: PUSH
23335: LD_INT 1
23337: ARRAY
23338: PUSH
23339: LD_VAR 0 6
23343: PUSH
23344: LD_INT 2
23346: ARRAY
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: PPUSH
23372: CALL_OW 447
23376: GO 23319
23378: POP
23379: POP
// end ;
23380: LD_VAR 0 5
23384: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23385: LD_INT 0
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 302
23406: NOT
23407: PUSH
23408: LD_VAR 0 2
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: CALL_OW 488
23422: NOT
23423: OR
23424: PUSH
23425: LD_VAR 0 4
23429: NOT
23430: OR
23431: IFFALSE 23435
// exit ;
23433: GO 23948
// list := [ ] ;
23435: LD_ADDR_VAR 0 13
23439: PUSH
23440: EMPTY
23441: ST_TO_ADDR
// if x - r < 0 then
23442: LD_VAR 0 2
23446: PUSH
23447: LD_VAR 0 4
23451: MINUS
23452: PUSH
23453: LD_INT 0
23455: LESS
23456: IFFALSE 23468
// min_x := 0 else
23458: LD_ADDR_VAR 0 7
23462: PUSH
23463: LD_INT 0
23465: ST_TO_ADDR
23466: GO 23484
// min_x := x - r ;
23468: LD_ADDR_VAR 0 7
23472: PUSH
23473: LD_VAR 0 2
23477: PUSH
23478: LD_VAR 0 4
23482: MINUS
23483: ST_TO_ADDR
// if y - r < 0 then
23484: LD_VAR 0 3
23488: PUSH
23489: LD_VAR 0 4
23493: MINUS
23494: PUSH
23495: LD_INT 0
23497: LESS
23498: IFFALSE 23510
// min_y := 0 else
23500: LD_ADDR_VAR 0 8
23504: PUSH
23505: LD_INT 0
23507: ST_TO_ADDR
23508: GO 23526
// min_y := y - r ;
23510: LD_ADDR_VAR 0 8
23514: PUSH
23515: LD_VAR 0 3
23519: PUSH
23520: LD_VAR 0 4
23524: MINUS
23525: ST_TO_ADDR
// max_x := x + r ;
23526: LD_ADDR_VAR 0 9
23530: PUSH
23531: LD_VAR 0 2
23535: PUSH
23536: LD_VAR 0 4
23540: PLUS
23541: ST_TO_ADDR
// max_y := y + r ;
23542: LD_ADDR_VAR 0 10
23546: PUSH
23547: LD_VAR 0 3
23551: PUSH
23552: LD_VAR 0 4
23556: PLUS
23557: ST_TO_ADDR
// for _x = min_x to max_x do
23558: LD_ADDR_VAR 0 11
23562: PUSH
23563: DOUBLE
23564: LD_VAR 0 7
23568: DEC
23569: ST_TO_ADDR
23570: LD_VAR 0 9
23574: PUSH
23575: FOR_TO
23576: IFFALSE 23693
// for _y = min_y to max_y do
23578: LD_ADDR_VAR 0 12
23582: PUSH
23583: DOUBLE
23584: LD_VAR 0 8
23588: DEC
23589: ST_TO_ADDR
23590: LD_VAR 0 10
23594: PUSH
23595: FOR_TO
23596: IFFALSE 23689
// begin if not ValidHex ( _x , _y ) then
23598: LD_VAR 0 11
23602: PPUSH
23603: LD_VAR 0 12
23607: PPUSH
23608: CALL_OW 488
23612: NOT
23613: IFFALSE 23617
// continue ;
23615: GO 23595
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23617: LD_VAR 0 11
23621: PPUSH
23622: LD_VAR 0 12
23626: PPUSH
23627: CALL_OW 351
23631: PUSH
23632: LD_VAR 0 11
23636: PPUSH
23637: LD_VAR 0 12
23641: PPUSH
23642: CALL_OW 554
23646: AND
23647: IFFALSE 23687
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23649: LD_ADDR_VAR 0 13
23653: PUSH
23654: LD_VAR 0 13
23658: PPUSH
23659: LD_VAR 0 13
23663: PUSH
23664: LD_INT 1
23666: PLUS
23667: PPUSH
23668: LD_VAR 0 11
23672: PUSH
23673: LD_VAR 0 12
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 2
23686: ST_TO_ADDR
// end ;
23687: GO 23595
23689: POP
23690: POP
23691: GO 23575
23693: POP
23694: POP
// if not list then
23695: LD_VAR 0 13
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23948
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23704: LD_ADDR_VAR 0 13
23708: PUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: LD_VAR 0 13
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: LD_INT 1
23724: PPUSH
23725: CALL 32724 0 4
23729: ST_TO_ADDR
// ComStop ( flame ) ;
23730: LD_VAR 0 1
23734: PPUSH
23735: CALL_OW 141
// for i in list do
23739: LD_ADDR_VAR 0 6
23743: PUSH
23744: LD_VAR 0 13
23748: PUSH
23749: FOR_IN
23750: IFFALSE 23781
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23752: LD_VAR 0 1
23756: PPUSH
23757: LD_VAR 0 6
23761: PUSH
23762: LD_INT 1
23764: ARRAY
23765: PPUSH
23766: LD_VAR 0 6
23770: PUSH
23771: LD_INT 2
23773: ARRAY
23774: PPUSH
23775: CALL_OW 176
23779: GO 23749
23781: POP
23782: POP
// repeat wait ( 0 0$1 ) ;
23783: LD_INT 35
23785: PPUSH
23786: CALL_OW 67
// task := GetTaskList ( flame ) ;
23790: LD_ADDR_VAR 0 14
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 437
23804: ST_TO_ADDR
// if not task then
23805: LD_VAR 0 14
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23948
// if task [ 1 ] [ 1 ] <> | then
23814: LD_VAR 0 14
23818: PUSH
23819: LD_INT 1
23821: ARRAY
23822: PUSH
23823: LD_INT 1
23825: ARRAY
23826: PUSH
23827: LD_STRING |
23829: NONEQUAL
23830: IFFALSE 23834
// exit ;
23832: GO 23948
// _x := task [ 1 ] [ 2 ] ;
23834: LD_ADDR_VAR 0 11
23838: PUSH
23839: LD_VAR 0 14
23843: PUSH
23844: LD_INT 1
23846: ARRAY
23847: PUSH
23848: LD_INT 2
23850: ARRAY
23851: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23852: LD_ADDR_VAR 0 12
23856: PUSH
23857: LD_VAR 0 14
23861: PUSH
23862: LD_INT 1
23864: ARRAY
23865: PUSH
23866: LD_INT 3
23868: ARRAY
23869: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23870: LD_VAR 0 11
23874: PPUSH
23875: LD_VAR 0 12
23879: PPUSH
23880: CALL_OW 351
23884: NOT
23885: PUSH
23886: LD_VAR 0 11
23890: PPUSH
23891: LD_VAR 0 12
23895: PPUSH
23896: CALL_OW 554
23900: NOT
23901: OR
23902: IFFALSE 23936
// begin task := Delete ( task , 1 ) ;
23904: LD_ADDR_VAR 0 14
23908: PUSH
23909: LD_VAR 0 14
23913: PPUSH
23914: LD_INT 1
23916: PPUSH
23917: CALL_OW 3
23921: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_VAR 0 14
23931: PPUSH
23932: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 314
23945: NOT
23946: IFFALSE 23783
// end ;
23948: LD_VAR 0 5
23952: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23953: LD_EXP 60
23957: NOT
23958: IFFALSE 24008
23960: GO 23962
23962: DISABLE
// begin initHack := true ;
23963: LD_ADDR_EXP 60
23967: PUSH
23968: LD_INT 1
23970: ST_TO_ADDR
// hackTanks := [ ] ;
23971: LD_ADDR_EXP 61
23975: PUSH
23976: EMPTY
23977: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23978: LD_ADDR_EXP 62
23982: PUSH
23983: EMPTY
23984: ST_TO_ADDR
// hackLimit := 3 ;
23985: LD_ADDR_EXP 63
23989: PUSH
23990: LD_INT 3
23992: ST_TO_ADDR
// hackDist := 12 ;
23993: LD_ADDR_EXP 64
23997: PUSH
23998: LD_INT 12
24000: ST_TO_ADDR
// hackCounter := [ ] ;
24001: LD_ADDR_EXP 65
24005: PUSH
24006: EMPTY
24007: ST_TO_ADDR
// end ;
24008: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24009: LD_EXP 60
24013: PUSH
24014: LD_INT 34
24016: PUSH
24017: LD_INT 99
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL_OW 69
24028: AND
24029: IFFALSE 24282
24031: GO 24033
24033: DISABLE
24034: LD_INT 0
24036: PPUSH
24037: PPUSH
// begin enable ;
24038: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24039: LD_ADDR_VAR 0 1
24043: PUSH
24044: LD_INT 34
24046: PUSH
24047: LD_INT 99
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24280
// begin if not i in hackTanks then
24062: LD_VAR 0 1
24066: PUSH
24067: LD_EXP 61
24071: IN
24072: NOT
24073: IFFALSE 24156
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24075: LD_ADDR_EXP 61
24079: PUSH
24080: LD_EXP 61
24084: PPUSH
24085: LD_EXP 61
24089: PUSH
24090: LD_INT 1
24092: PLUS
24093: PPUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL_OW 1
24103: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24104: LD_ADDR_EXP 62
24108: PUSH
24109: LD_EXP 62
24113: PPUSH
24114: LD_EXP 62
24118: PUSH
24119: LD_INT 1
24121: PLUS
24122: PPUSH
24123: EMPTY
24124: PPUSH
24125: CALL_OW 1
24129: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24130: LD_ADDR_EXP 65
24134: PUSH
24135: LD_EXP 65
24139: PPUSH
24140: LD_EXP 65
24144: PUSH
24145: LD_INT 1
24147: PLUS
24148: PPUSH
24149: EMPTY
24150: PPUSH
24151: CALL_OW 1
24155: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 302
24165: NOT
24166: IFFALSE 24179
// begin HackUnlinkAll ( i ) ;
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL 24285 0 1
// continue ;
24177: GO 24059
// end ; HackCheckCapturedStatus ( i ) ;
24179: LD_VAR 0 1
24183: PPUSH
24184: CALL 24728 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24188: LD_ADDR_VAR 0 2
24192: PUSH
24193: LD_INT 81
24195: PUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL_OW 255
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 33
24212: PUSH
24213: LD_INT 3
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 91
24222: PUSH
24223: LD_VAR 0 1
24227: PUSH
24228: LD_EXP 64
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 50
24240: PUSH
24241: EMPTY
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: PPUSH
24250: CALL_OW 69
24254: ST_TO_ADDR
// if not tmp then
24255: LD_VAR 0 2
24259: NOT
24260: IFFALSE 24264
// continue ;
24262: GO 24059
// HackLink ( i , tmp ) ;
24264: LD_VAR 0 1
24268: PPUSH
24269: LD_VAR 0 2
24273: PPUSH
24274: CALL 24421 0 2
// end ;
24278: GO 24059
24280: POP
24281: POP
// end ;
24282: PPOPN 2
24284: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24285: LD_INT 0
24287: PPUSH
24288: PPUSH
24289: PPUSH
// if not hack in hackTanks then
24290: LD_VAR 0 1
24294: PUSH
24295: LD_EXP 61
24299: IN
24300: NOT
24301: IFFALSE 24305
// exit ;
24303: GO 24416
// index := GetElementIndex ( hackTanks , hack ) ;
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: LD_EXP 61
24314: PPUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL 32021 0 2
24324: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24325: LD_EXP 62
24329: PUSH
24330: LD_VAR 0 4
24334: ARRAY
24335: IFFALSE 24416
// begin for i in hackTanksCaptured [ index ] do
24337: LD_ADDR_VAR 0 3
24341: PUSH
24342: LD_EXP 62
24346: PUSH
24347: LD_VAR 0 4
24351: ARRAY
24352: PUSH
24353: FOR_IN
24354: IFFALSE 24380
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24356: LD_VAR 0 3
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: LD_VAR 0 3
24369: PUSH
24370: LD_INT 2
24372: ARRAY
24373: PPUSH
24374: CALL_OW 235
24378: GO 24353
24380: POP
24381: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24382: LD_ADDR_EXP 62
24386: PUSH
24387: LD_EXP 62
24391: PPUSH
24392: LD_VAR 0 4
24396: PPUSH
24397: EMPTY
24398: PPUSH
24399: CALL_OW 1
24403: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24404: LD_VAR 0 1
24408: PPUSH
24409: LD_INT 0
24411: PPUSH
24412: CALL_OW 505
// end ; end ;
24416: LD_VAR 0 2
24420: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24421: LD_INT 0
24423: PPUSH
24424: PPUSH
24425: PPUSH
// if not hack in hackTanks or not vehicles then
24426: LD_VAR 0 1
24430: PUSH
24431: LD_EXP 61
24435: IN
24436: NOT
24437: PUSH
24438: LD_VAR 0 2
24442: NOT
24443: OR
24444: IFFALSE 24448
// exit ;
24446: GO 24723
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24448: LD_ADDR_VAR 0 2
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: LD_VAR 0 2
24462: PPUSH
24463: LD_INT 1
24465: PPUSH
24466: LD_INT 1
24468: PPUSH
24469: CALL 32671 0 4
24473: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24474: LD_ADDR_VAR 0 5
24478: PUSH
24479: LD_EXP 61
24483: PPUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL 32021 0 2
24493: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24494: LD_EXP 62
24498: PUSH
24499: LD_VAR 0 5
24503: ARRAY
24504: PUSH
24505: LD_EXP 63
24509: LESS
24510: IFFALSE 24699
// begin for i := 1 to vehicles do
24512: LD_ADDR_VAR 0 4
24516: PUSH
24517: DOUBLE
24518: LD_INT 1
24520: DEC
24521: ST_TO_ADDR
24522: LD_VAR 0 2
24526: PUSH
24527: FOR_TO
24528: IFFALSE 24697
// begin if hackTanksCaptured [ index ] = hackLimit then
24530: LD_EXP 62
24534: PUSH
24535: LD_VAR 0 5
24539: ARRAY
24540: PUSH
24541: LD_EXP 63
24545: EQUAL
24546: IFFALSE 24550
// break ;
24548: GO 24697
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24550: LD_ADDR_EXP 65
24554: PUSH
24555: LD_EXP 65
24559: PPUSH
24560: LD_VAR 0 5
24564: PPUSH
24565: LD_EXP 65
24569: PUSH
24570: LD_VAR 0 5
24574: ARRAY
24575: PUSH
24576: LD_INT 1
24578: PLUS
24579: PPUSH
24580: CALL_OW 1
24584: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24585: LD_ADDR_EXP 62
24589: PUSH
24590: LD_EXP 62
24594: PPUSH
24595: LD_VAR 0 5
24599: PUSH
24600: LD_EXP 62
24604: PUSH
24605: LD_VAR 0 5
24609: ARRAY
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PPUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_VAR 0 4
24628: ARRAY
24629: PUSH
24630: LD_VAR 0 2
24634: PUSH
24635: LD_VAR 0 4
24639: ARRAY
24640: PPUSH
24641: CALL_OW 255
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PPUSH
24650: CALL 32236 0 3
24654: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24655: LD_VAR 0 2
24659: PUSH
24660: LD_VAR 0 4
24664: ARRAY
24665: PPUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: PPUSH
24676: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24680: LD_VAR 0 2
24684: PUSH
24685: LD_VAR 0 4
24689: ARRAY
24690: PPUSH
24691: CALL_OW 141
// end ;
24695: GO 24527
24697: POP
24698: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24699: LD_VAR 0 1
24703: PPUSH
24704: LD_EXP 62
24708: PUSH
24709: LD_VAR 0 5
24713: ARRAY
24714: PUSH
24715: LD_INT 0
24717: PLUS
24718: PPUSH
24719: CALL_OW 505
// end ;
24723: LD_VAR 0 3
24727: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24728: LD_INT 0
24730: PPUSH
24731: PPUSH
24732: PPUSH
24733: PPUSH
// if not hack in hackTanks then
24734: LD_VAR 0 1
24738: PUSH
24739: LD_EXP 61
24743: IN
24744: NOT
24745: IFFALSE 24749
// exit ;
24747: GO 24989
// index := GetElementIndex ( hackTanks , hack ) ;
24749: LD_ADDR_VAR 0 4
24753: PUSH
24754: LD_EXP 61
24758: PPUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL 32021 0 2
24768: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: DOUBLE
24775: LD_EXP 62
24779: PUSH
24780: LD_VAR 0 4
24784: ARRAY
24785: INC
24786: ST_TO_ADDR
24787: LD_INT 1
24789: PUSH
24790: FOR_DOWNTO
24791: IFFALSE 24963
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24793: LD_ADDR_VAR 0 5
24797: PUSH
24798: LD_EXP 62
24802: PUSH
24803: LD_VAR 0 4
24807: ARRAY
24808: PUSH
24809: LD_VAR 0 3
24813: ARRAY
24814: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24815: LD_VAR 0 5
24819: PUSH
24820: LD_INT 1
24822: ARRAY
24823: PPUSH
24824: CALL_OW 302
24828: NOT
24829: PUSH
24830: LD_VAR 0 5
24834: PUSH
24835: LD_INT 1
24837: ARRAY
24838: PPUSH
24839: CALL_OW 255
24843: PUSH
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 255
24853: NONEQUAL
24854: OR
24855: IFFALSE 24961
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24857: LD_VAR 0 5
24861: PUSH
24862: LD_INT 1
24864: ARRAY
24865: PPUSH
24866: CALL_OW 305
24870: PUSH
24871: LD_VAR 0 5
24875: PUSH
24876: LD_INT 1
24878: ARRAY
24879: PPUSH
24880: CALL_OW 255
24884: PUSH
24885: LD_VAR 0 1
24889: PPUSH
24890: CALL_OW 255
24894: EQUAL
24895: AND
24896: IFFALSE 24920
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24898: LD_VAR 0 5
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: PPUSH
24907: LD_VAR 0 5
24911: PUSH
24912: LD_INT 2
24914: ARRAY
24915: PPUSH
24916: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24920: LD_ADDR_EXP 62
24924: PUSH
24925: LD_EXP 62
24929: PPUSH
24930: LD_VAR 0 4
24934: PPUSH
24935: LD_EXP 62
24939: PUSH
24940: LD_VAR 0 4
24944: ARRAY
24945: PPUSH
24946: LD_VAR 0 3
24950: PPUSH
24951: CALL_OW 3
24955: PPUSH
24956: CALL_OW 1
24960: ST_TO_ADDR
// end ; end ;
24961: GO 24790
24963: POP
24964: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_EXP 62
24974: PUSH
24975: LD_VAR 0 4
24979: ARRAY
24980: PUSH
24981: LD_INT 0
24983: PLUS
24984: PPUSH
24985: CALL_OW 505
// end ;
24989: LD_VAR 0 2
24993: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24994: LD_INT 0
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
// if not hack in hackTanks then
25000: LD_VAR 0 1
25004: PUSH
25005: LD_EXP 61
25009: IN
25010: NOT
25011: IFFALSE 25015
// exit ;
25013: GO 25100
// index := GetElementIndex ( hackTanks , hack ) ;
25015: LD_ADDR_VAR 0 5
25019: PUSH
25020: LD_EXP 61
25024: PPUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL 32021 0 2
25034: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: DOUBLE
25041: LD_INT 1
25043: DEC
25044: ST_TO_ADDR
25045: LD_EXP 62
25049: PUSH
25050: LD_VAR 0 5
25054: ARRAY
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25098
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25059: LD_EXP 62
25063: PUSH
25064: LD_VAR 0 5
25068: ARRAY
25069: PUSH
25070: LD_VAR 0 4
25074: ARRAY
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PUSH
25080: LD_VAR 0 2
25084: EQUAL
25085: IFFALSE 25096
// KillUnit ( vehicle ) ;
25087: LD_VAR 0 2
25091: PPUSH
25092: CALL_OW 66
25096: GO 25056
25098: POP
25099: POP
// end ;
25100: LD_VAR 0 3
25104: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25105: LD_EXP 66
25109: NOT
25110: IFFALSE 25145
25112: GO 25114
25114: DISABLE
// begin initMiner := true ;
25115: LD_ADDR_EXP 66
25119: PUSH
25120: LD_INT 1
25122: ST_TO_ADDR
// minersList := [ ] ;
25123: LD_ADDR_EXP 67
25127: PUSH
25128: EMPTY
25129: ST_TO_ADDR
// minerMinesList := [ ] ;
25130: LD_ADDR_EXP 68
25134: PUSH
25135: EMPTY
25136: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25137: LD_ADDR_EXP 69
25141: PUSH
25142: LD_INT 5
25144: ST_TO_ADDR
// end ;
25145: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25146: LD_EXP 66
25150: PUSH
25151: LD_INT 34
25153: PUSH
25154: LD_INT 81
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PPUSH
25161: CALL_OW 69
25165: AND
25166: IFFALSE 25627
25168: GO 25170
25170: DISABLE
25171: LD_INT 0
25173: PPUSH
25174: PPUSH
25175: PPUSH
25176: PPUSH
// begin enable ;
25177: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25178: LD_ADDR_VAR 0 1
25182: PUSH
25183: LD_INT 34
25185: PUSH
25186: LD_INT 81
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 69
25197: PUSH
25198: FOR_IN
25199: IFFALSE 25271
// begin if not i in minersList then
25201: LD_VAR 0 1
25205: PUSH
25206: LD_EXP 67
25210: IN
25211: NOT
25212: IFFALSE 25269
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25214: LD_ADDR_EXP 67
25218: PUSH
25219: LD_EXP 67
25223: PPUSH
25224: LD_EXP 67
25228: PUSH
25229: LD_INT 1
25231: PLUS
25232: PPUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 1
25242: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25243: LD_ADDR_EXP 68
25247: PUSH
25248: LD_EXP 68
25252: PPUSH
25253: LD_EXP 68
25257: PUSH
25258: LD_INT 1
25260: PLUS
25261: PPUSH
25262: EMPTY
25263: PPUSH
25264: CALL_OW 1
25268: ST_TO_ADDR
// end end ;
25269: GO 25198
25271: POP
25272: POP
// for i := minerMinesList downto 1 do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: DOUBLE
25279: LD_EXP 68
25283: INC
25284: ST_TO_ADDR
25285: LD_INT 1
25287: PUSH
25288: FOR_DOWNTO
25289: IFFALSE 25625
// begin if IsLive ( minersList [ i ] ) then
25291: LD_EXP 67
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: CALL_OW 300
25306: IFFALSE 25334
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25308: LD_EXP 67
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: PPUSH
25319: LD_EXP 68
25323: PUSH
25324: LD_VAR 0 1
25328: ARRAY
25329: PPUSH
25330: CALL_OW 505
// if not minerMinesList [ i ] then
25334: LD_EXP 68
25338: PUSH
25339: LD_VAR 0 1
25343: ARRAY
25344: NOT
25345: IFFALSE 25349
// continue ;
25347: GO 25288
// for j := minerMinesList [ i ] downto 1 do
25349: LD_ADDR_VAR 0 2
25353: PUSH
25354: DOUBLE
25355: LD_EXP 68
25359: PUSH
25360: LD_VAR 0 1
25364: ARRAY
25365: INC
25366: ST_TO_ADDR
25367: LD_INT 1
25369: PUSH
25370: FOR_DOWNTO
25371: IFFALSE 25621
// begin side := GetSide ( minersList [ i ] ) ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_EXP 67
25382: PUSH
25383: LD_VAR 0 1
25387: ARRAY
25388: PPUSH
25389: CALL_OW 255
25393: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25394: LD_ADDR_VAR 0 4
25398: PUSH
25399: LD_EXP 68
25403: PUSH
25404: LD_VAR 0 1
25408: ARRAY
25409: PUSH
25410: LD_VAR 0 2
25414: ARRAY
25415: PUSH
25416: LD_INT 1
25418: ARRAY
25419: PPUSH
25420: LD_EXP 68
25424: PUSH
25425: LD_VAR 0 1
25429: ARRAY
25430: PUSH
25431: LD_VAR 0 2
25435: ARRAY
25436: PUSH
25437: LD_INT 2
25439: ARRAY
25440: PPUSH
25441: CALL_OW 428
25445: ST_TO_ADDR
// if not tmp then
25446: LD_VAR 0 4
25450: NOT
25451: IFFALSE 25455
// continue ;
25453: GO 25370
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25455: LD_VAR 0 4
25459: PUSH
25460: LD_INT 81
25462: PUSH
25463: LD_VAR 0 3
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: IN
25477: PUSH
25478: LD_EXP 68
25482: PUSH
25483: LD_VAR 0 1
25487: ARRAY
25488: PUSH
25489: LD_VAR 0 2
25493: ARRAY
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: PPUSH
25499: LD_EXP 68
25503: PUSH
25504: LD_VAR 0 1
25508: ARRAY
25509: PUSH
25510: LD_VAR 0 2
25514: ARRAY
25515: PUSH
25516: LD_INT 2
25518: ARRAY
25519: PPUSH
25520: CALL_OW 458
25524: AND
25525: IFFALSE 25619
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25527: LD_EXP 68
25531: PUSH
25532: LD_VAR 0 1
25536: ARRAY
25537: PUSH
25538: LD_VAR 0 2
25542: ARRAY
25543: PUSH
25544: LD_INT 1
25546: ARRAY
25547: PPUSH
25548: LD_EXP 68
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PUSH
25559: LD_VAR 0 2
25563: ARRAY
25564: PUSH
25565: LD_INT 2
25567: ARRAY
25568: PPUSH
25569: LD_VAR 0 3
25573: PPUSH
25574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25578: LD_ADDR_EXP 68
25582: PUSH
25583: LD_EXP 68
25587: PPUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_EXP 68
25597: PUSH
25598: LD_VAR 0 1
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 2
25608: PPUSH
25609: CALL_OW 3
25613: PPUSH
25614: CALL_OW 1
25618: ST_TO_ADDR
// end ; end ;
25619: GO 25370
25621: POP
25622: POP
// end ;
25623: GO 25288
25625: POP
25626: POP
// end ;
25627: PPOPN 4
25629: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25630: LD_INT 0
25632: PPUSH
25633: PPUSH
// result := false ;
25634: LD_ADDR_VAR 0 4
25638: PUSH
25639: LD_INT 0
25641: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL_OW 264
25651: PUSH
25652: LD_INT 81
25654: EQUAL
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 25900
// index := GetElementIndex ( minersList , unit ) ;
25660: LD_ADDR_VAR 0 5
25664: PUSH
25665: LD_EXP 67
25669: PPUSH
25670: LD_VAR 0 1
25674: PPUSH
25675: CALL 32021 0 2
25679: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25680: LD_EXP 68
25684: PUSH
25685: LD_VAR 0 5
25689: ARRAY
25690: PUSH
25691: LD_EXP 69
25695: GREATEREQUAL
25696: IFFALSE 25700
// exit ;
25698: GO 25900
// ComMoveXY ( unit , x , y ) ;
25700: LD_VAR 0 1
25704: PPUSH
25705: LD_VAR 0 2
25709: PPUSH
25710: LD_VAR 0 3
25714: PPUSH
25715: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25719: LD_INT 35
25721: PPUSH
25722: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25726: LD_VAR 0 1
25730: PPUSH
25731: LD_VAR 0 2
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: CALL 63782 0 3
25745: NOT
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 314
25756: AND
25757: IFFALSE 25761
// exit ;
25759: GO 25900
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25761: LD_VAR 0 2
25765: PPUSH
25766: LD_VAR 0 3
25770: PPUSH
25771: CALL_OW 428
25775: PUSH
25776: LD_VAR 0 1
25780: EQUAL
25781: PUSH
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 314
25791: NOT
25792: AND
25793: IFFALSE 25719
// PlaySoundXY ( x , y , PlantMine ) ;
25795: LD_VAR 0 2
25799: PPUSH
25800: LD_VAR 0 3
25804: PPUSH
25805: LD_STRING PlantMine
25807: PPUSH
25808: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25812: LD_VAR 0 2
25816: PPUSH
25817: LD_VAR 0 3
25821: PPUSH
25822: LD_VAR 0 1
25826: PPUSH
25827: CALL_OW 255
25831: PPUSH
25832: LD_INT 0
25834: PPUSH
25835: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25839: LD_ADDR_EXP 68
25843: PUSH
25844: LD_EXP 68
25848: PPUSH
25849: LD_VAR 0 5
25853: PUSH
25854: LD_EXP 68
25858: PUSH
25859: LD_VAR 0 5
25863: ARRAY
25864: PUSH
25865: LD_INT 1
25867: PLUS
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PPUSH
25873: LD_VAR 0 2
25877: PUSH
25878: LD_VAR 0 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL 32236 0 3
25891: ST_TO_ADDR
// result := true ;
25892: LD_ADDR_VAR 0 4
25896: PUSH
25897: LD_INT 1
25899: ST_TO_ADDR
// end ;
25900: LD_VAR 0 4
25904: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25905: LD_INT 0
25907: PPUSH
25908: PPUSH
25909: PPUSH
// if not unit in minersList then
25910: LD_VAR 0 1
25914: PUSH
25915: LD_EXP 67
25919: IN
25920: NOT
25921: IFFALSE 25925
// exit ;
25923: GO 26317
// index := GetElementIndex ( minersList , unit ) ;
25925: LD_ADDR_VAR 0 6
25929: PUSH
25930: LD_EXP 67
25934: PPUSH
25935: LD_VAR 0 1
25939: PPUSH
25940: CALL 32021 0 2
25944: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25945: LD_ADDR_VAR 0 5
25949: PUSH
25950: DOUBLE
25951: LD_EXP 68
25955: PUSH
25956: LD_VAR 0 6
25960: ARRAY
25961: INC
25962: ST_TO_ADDR
25963: LD_INT 1
25965: PUSH
25966: FOR_DOWNTO
25967: IFFALSE 26128
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25969: LD_EXP 68
25973: PUSH
25974: LD_VAR 0 6
25978: ARRAY
25979: PUSH
25980: LD_VAR 0 5
25984: ARRAY
25985: PUSH
25986: LD_INT 1
25988: ARRAY
25989: PUSH
25990: LD_VAR 0 2
25994: EQUAL
25995: PUSH
25996: LD_EXP 68
26000: PUSH
26001: LD_VAR 0 6
26005: ARRAY
26006: PUSH
26007: LD_VAR 0 5
26011: ARRAY
26012: PUSH
26013: LD_INT 2
26015: ARRAY
26016: PUSH
26017: LD_VAR 0 3
26021: EQUAL
26022: AND
26023: IFFALSE 26126
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26025: LD_EXP 68
26029: PUSH
26030: LD_VAR 0 6
26034: ARRAY
26035: PUSH
26036: LD_VAR 0 5
26040: ARRAY
26041: PUSH
26042: LD_INT 1
26044: ARRAY
26045: PPUSH
26046: LD_EXP 68
26050: PUSH
26051: LD_VAR 0 6
26055: ARRAY
26056: PUSH
26057: LD_VAR 0 5
26061: ARRAY
26062: PUSH
26063: LD_INT 2
26065: ARRAY
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 255
26076: PPUSH
26077: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26081: LD_ADDR_EXP 68
26085: PUSH
26086: LD_EXP 68
26090: PPUSH
26091: LD_VAR 0 6
26095: PPUSH
26096: LD_EXP 68
26100: PUSH
26101: LD_VAR 0 6
26105: ARRAY
26106: PPUSH
26107: LD_VAR 0 5
26111: PPUSH
26112: CALL_OW 3
26116: PPUSH
26117: CALL_OW 1
26121: ST_TO_ADDR
// exit ;
26122: POP
26123: POP
26124: GO 26317
// end ; end ;
26126: GO 25966
26128: POP
26129: POP
// for i := minerMinesList [ index ] downto 1 do
26130: LD_ADDR_VAR 0 5
26134: PUSH
26135: DOUBLE
26136: LD_EXP 68
26140: PUSH
26141: LD_VAR 0 6
26145: ARRAY
26146: INC
26147: ST_TO_ADDR
26148: LD_INT 1
26150: PUSH
26151: FOR_DOWNTO
26152: IFFALSE 26315
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26154: LD_EXP 68
26158: PUSH
26159: LD_VAR 0 6
26163: ARRAY
26164: PUSH
26165: LD_VAR 0 5
26169: ARRAY
26170: PUSH
26171: LD_INT 1
26173: ARRAY
26174: PPUSH
26175: LD_EXP 68
26179: PUSH
26180: LD_VAR 0 6
26184: ARRAY
26185: PUSH
26186: LD_VAR 0 5
26190: ARRAY
26191: PUSH
26192: LD_INT 2
26194: ARRAY
26195: PPUSH
26196: LD_VAR 0 2
26200: PPUSH
26201: LD_VAR 0 3
26205: PPUSH
26206: CALL_OW 298
26210: PUSH
26211: LD_INT 6
26213: LESS
26214: IFFALSE 26313
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26216: LD_EXP 68
26220: PUSH
26221: LD_VAR 0 6
26225: ARRAY
26226: PUSH
26227: LD_VAR 0 5
26231: ARRAY
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PPUSH
26237: LD_EXP 68
26241: PUSH
26242: LD_VAR 0 6
26246: ARRAY
26247: PUSH
26248: LD_VAR 0 5
26252: ARRAY
26253: PUSH
26254: LD_INT 2
26256: ARRAY
26257: PPUSH
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 255
26267: PPUSH
26268: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26272: LD_ADDR_EXP 68
26276: PUSH
26277: LD_EXP 68
26281: PPUSH
26282: LD_VAR 0 6
26286: PPUSH
26287: LD_EXP 68
26291: PUSH
26292: LD_VAR 0 6
26296: ARRAY
26297: PPUSH
26298: LD_VAR 0 5
26302: PPUSH
26303: CALL_OW 3
26307: PPUSH
26308: CALL_OW 1
26312: ST_TO_ADDR
// end ; end ;
26313: GO 26151
26315: POP
26316: POP
// end ;
26317: LD_VAR 0 4
26321: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26322: LD_INT 0
26324: PPUSH
26325: PPUSH
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
26330: PPUSH
26331: PPUSH
26332: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26333: LD_VAR 0 1
26337: PPUSH
26338: CALL_OW 264
26342: PUSH
26343: LD_INT 81
26345: EQUAL
26346: NOT
26347: PUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_EXP 67
26357: IN
26358: NOT
26359: OR
26360: IFFALSE 26364
// exit ;
26362: GO 26686
// index := GetElementIndex ( minersList , unit ) ;
26364: LD_ADDR_VAR 0 6
26368: PUSH
26369: LD_EXP 67
26373: PPUSH
26374: LD_VAR 0 1
26378: PPUSH
26379: CALL 32021 0 2
26383: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26384: LD_ADDR_VAR 0 8
26388: PUSH
26389: LD_EXP 69
26393: PUSH
26394: LD_EXP 68
26398: PUSH
26399: LD_VAR 0 6
26403: ARRAY
26404: MINUS
26405: ST_TO_ADDR
// if not minesFreeAmount then
26406: LD_VAR 0 8
26410: NOT
26411: IFFALSE 26415
// exit ;
26413: GO 26686
// tmp := [ ] ;
26415: LD_ADDR_VAR 0 7
26419: PUSH
26420: EMPTY
26421: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: DOUBLE
26428: LD_INT 1
26430: DEC
26431: ST_TO_ADDR
26432: LD_VAR 0 8
26436: PUSH
26437: FOR_TO
26438: IFFALSE 26633
// begin _d := rand ( 0 , 5 ) ;
26440: LD_ADDR_VAR 0 11
26444: PUSH
26445: LD_INT 0
26447: PPUSH
26448: LD_INT 5
26450: PPUSH
26451: CALL_OW 12
26455: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26456: LD_ADDR_VAR 0 12
26460: PUSH
26461: LD_INT 2
26463: PPUSH
26464: LD_INT 6
26466: PPUSH
26467: CALL_OW 12
26471: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26472: LD_ADDR_VAR 0 9
26476: PUSH
26477: LD_VAR 0 2
26481: PPUSH
26482: LD_VAR 0 11
26486: PPUSH
26487: LD_VAR 0 12
26491: PPUSH
26492: CALL_OW 272
26496: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 3
26506: PPUSH
26507: LD_VAR 0 11
26511: PPUSH
26512: LD_VAR 0 12
26516: PPUSH
26517: CALL_OW 273
26521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26522: LD_VAR 0 9
26526: PPUSH
26527: LD_VAR 0 10
26531: PPUSH
26532: CALL_OW 488
26536: PUSH
26537: LD_VAR 0 9
26541: PUSH
26542: LD_VAR 0 10
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_VAR 0 7
26555: IN
26556: NOT
26557: AND
26558: PUSH
26559: LD_VAR 0 9
26563: PPUSH
26564: LD_VAR 0 10
26568: PPUSH
26569: CALL_OW 458
26573: NOT
26574: AND
26575: IFFALSE 26617
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26577: LD_ADDR_VAR 0 7
26581: PUSH
26582: LD_VAR 0 7
26586: PPUSH
26587: LD_VAR 0 7
26591: PUSH
26592: LD_INT 1
26594: PLUS
26595: PPUSH
26596: LD_VAR 0 9
26600: PUSH
26601: LD_VAR 0 10
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 1
26614: ST_TO_ADDR
26615: GO 26631
// i := i - 1 ;
26617: LD_ADDR_VAR 0 5
26621: PUSH
26622: LD_VAR 0 5
26626: PUSH
26627: LD_INT 1
26629: MINUS
26630: ST_TO_ADDR
// end ;
26631: GO 26437
26633: POP
26634: POP
// for i in tmp do
26635: LD_ADDR_VAR 0 5
26639: PUSH
26640: LD_VAR 0 7
26644: PUSH
26645: FOR_IN
26646: IFFALSE 26684
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26648: LD_VAR 0 1
26652: PPUSH
26653: LD_VAR 0 5
26657: PUSH
26658: LD_INT 1
26660: ARRAY
26661: PPUSH
26662: LD_VAR 0 5
26666: PUSH
26667: LD_INT 2
26669: ARRAY
26670: PPUSH
26671: CALL 25630 0 3
26675: NOT
26676: IFFALSE 26682
// exit ;
26678: POP
26679: POP
26680: GO 26686
26682: GO 26645
26684: POP
26685: POP
// end ;
26686: LD_VAR 0 4
26690: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
// if GetClass ( unit ) <> class_sniper then
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 257
26711: PUSH
26712: LD_INT 5
26714: NONEQUAL
26715: IFFALSE 26719
// exit ;
26717: GO 27185
// dist := 8 ;
26719: LD_ADDR_VAR 0 5
26723: PUSH
26724: LD_INT 8
26726: ST_TO_ADDR
// viewRange := 12 ;
26727: LD_ADDR_VAR 0 8
26731: PUSH
26732: LD_INT 12
26734: ST_TO_ADDR
// side := GetSide ( unit ) ;
26735: LD_ADDR_VAR 0 6
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 255
26749: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26750: LD_INT 61
26752: PPUSH
26753: LD_VAR 0 6
26757: PPUSH
26758: CALL_OW 321
26762: PUSH
26763: LD_INT 2
26765: EQUAL
26766: IFFALSE 26776
// viewRange := 16 ;
26768: LD_ADDR_VAR 0 8
26772: PUSH
26773: LD_INT 16
26775: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26776: LD_VAR 0 1
26780: PPUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: LD_VAR 0 3
26790: PPUSH
26791: CALL_OW 297
26795: PUSH
26796: LD_VAR 0 5
26800: GREATER
26801: IFFALSE 26880
// begin ComMoveXY ( unit , x , y ) ;
26803: LD_VAR 0 1
26807: PPUSH
26808: LD_VAR 0 2
26812: PPUSH
26813: LD_VAR 0 3
26817: PPUSH
26818: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26822: LD_INT 35
26824: PPUSH
26825: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_VAR 0 3
26843: PPUSH
26844: CALL 63782 0 3
26848: NOT
26849: IFFALSE 26853
// exit ;
26851: GO 27185
// until GetDistUnitXY ( unit , x , y ) < dist ;
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_VAR 0 2
26862: PPUSH
26863: LD_VAR 0 3
26867: PPUSH
26868: CALL_OW 297
26872: PUSH
26873: LD_VAR 0 5
26877: LESS
26878: IFFALSE 26822
// end ; ComTurnXY ( unit , x , y ) ;
26880: LD_VAR 0 1
26884: PPUSH
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_VAR 0 3
26894: PPUSH
26895: CALL_OW 118
// repeat if Multiplayer then
26899: LD_OWVAR 4
26903: IFFALSE 26914
// wait ( 35 ) else
26905: LD_INT 35
26907: PPUSH
26908: CALL_OW 67
26912: GO 26921
// wait ( 5 ) ;
26914: LD_INT 5
26916: PPUSH
26917: CALL_OW 67
// _d := GetDir ( unit ) ;
26921: LD_ADDR_VAR 0 11
26925: PUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 254
26935: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26936: LD_ADDR_VAR 0 7
26940: PUSH
26941: LD_VAR 0 1
26945: PPUSH
26946: CALL_OW 250
26950: PPUSH
26951: LD_VAR 0 1
26955: PPUSH
26956: CALL_OW 251
26960: PPUSH
26961: LD_VAR 0 2
26965: PPUSH
26966: LD_VAR 0 3
26970: PPUSH
26971: CALL 66390 0 4
26975: ST_TO_ADDR
// until dir = _d ;
26976: LD_VAR 0 7
26980: PUSH
26981: LD_VAR 0 11
26985: EQUAL
26986: IFFALSE 26899
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26988: LD_ADDR_VAR 0 9
26992: PUSH
26993: LD_VAR 0 1
26997: PPUSH
26998: CALL_OW 250
27002: PPUSH
27003: LD_VAR 0 7
27007: PPUSH
27008: LD_VAR 0 5
27012: PPUSH
27013: CALL_OW 272
27017: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27018: LD_ADDR_VAR 0 10
27022: PUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 251
27032: PPUSH
27033: LD_VAR 0 7
27037: PPUSH
27038: LD_VAR 0 5
27042: PPUSH
27043: CALL_OW 273
27047: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27048: LD_VAR 0 9
27052: PPUSH
27053: LD_VAR 0 10
27057: PPUSH
27058: CALL_OW 488
27062: NOT
27063: IFFALSE 27067
// exit ;
27065: GO 27185
// ComAnimCustom ( unit , 1 ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_INT 1
27074: PPUSH
27075: CALL_OW 592
// p := 0 ;
27079: LD_ADDR_VAR 0 12
27083: PUSH
27084: LD_INT 0
27086: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27087: LD_VAR 0 9
27091: PPUSH
27092: LD_VAR 0 10
27096: PPUSH
27097: LD_VAR 0 6
27101: PPUSH
27102: LD_VAR 0 8
27106: PPUSH
27107: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27111: LD_INT 35
27113: PPUSH
27114: CALL_OW 67
// p := Inc ( p ) ;
27118: LD_ADDR_VAR 0 12
27122: PUSH
27123: LD_VAR 0 12
27127: PPUSH
27128: CALL 66346 0 1
27132: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27133: LD_VAR 0 12
27137: PUSH
27138: LD_INT 3
27140: EQUAL
27141: PUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 302
27151: NOT
27152: OR
27153: PUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 301
27163: OR
27164: IFFALSE 27111
// RemoveSeeing ( _x , _y , side ) ;
27166: LD_VAR 0 9
27170: PPUSH
27171: LD_VAR 0 10
27175: PPUSH
27176: LD_VAR 0 6
27180: PPUSH
27181: CALL_OW 331
// end ; end_of_file
27185: LD_VAR 0 4
27189: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27190: LD_INT 0
27192: PPUSH
27193: PPUSH
// if exist_mode then
27194: LD_VAR 0 2
27198: IFFALSE 27244
// begin unit := CreateCharacter ( prefix & ident ) ;
27200: LD_ADDR_VAR 0 5
27204: PUSH
27205: LD_VAR 0 3
27209: PUSH
27210: LD_VAR 0 1
27214: STR
27215: PPUSH
27216: CALL_OW 34
27220: ST_TO_ADDR
// if unit then
27221: LD_VAR 0 5
27225: IFFALSE 27242
// DeleteCharacters ( prefix & ident ) ;
27227: LD_VAR 0 3
27231: PUSH
27232: LD_VAR 0 1
27236: STR
27237: PPUSH
27238: CALL_OW 40
// end else
27242: GO 27259
// unit := NewCharacter ( ident ) ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 25
27258: ST_TO_ADDR
// result := unit ;
27259: LD_ADDR_VAR 0 4
27263: PUSH
27264: LD_VAR 0 5
27268: ST_TO_ADDR
// end ;
27269: LD_VAR 0 4
27273: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
// if exist_mode then
27278: LD_VAR 0 2
27282: IFFALSE 27307
// unit := CreateCharacter ( prefix & ident ) else
27284: LD_ADDR_VAR 0 5
27288: PUSH
27289: LD_VAR 0 3
27293: PUSH
27294: LD_VAR 0 1
27298: STR
27299: PPUSH
27300: CALL_OW 34
27304: ST_TO_ADDR
27305: GO 27322
// unit := NewCharacter ( ident ) ;
27307: LD_ADDR_VAR 0 5
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 25
27321: ST_TO_ADDR
// result := unit ;
27322: LD_ADDR_VAR 0 4
27326: PUSH
27327: LD_VAR 0 5
27331: ST_TO_ADDR
// end ;
27332: LD_VAR 0 4
27336: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27337: LD_INT 0
27339: PPUSH
27340: PPUSH
// if not side or not nation then
27341: LD_VAR 0 1
27345: NOT
27346: PUSH
27347: LD_VAR 0 2
27351: NOT
27352: OR
27353: IFFALSE 27357
// exit ;
27355: GO 28125
// case nation of nation_american :
27357: LD_VAR 0 2
27361: PUSH
27362: LD_INT 1
27364: DOUBLE
27365: EQUAL
27366: IFTRUE 27370
27368: GO 27584
27370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27371: LD_ADDR_VAR 0 4
27375: PUSH
27376: LD_INT 35
27378: PUSH
27379: LD_INT 45
27381: PUSH
27382: LD_INT 46
27384: PUSH
27385: LD_INT 47
27387: PUSH
27388: LD_INT 82
27390: PUSH
27391: LD_INT 83
27393: PUSH
27394: LD_INT 84
27396: PUSH
27397: LD_INT 85
27399: PUSH
27400: LD_INT 86
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: LD_INT 6
27411: PUSH
27412: LD_INT 15
27414: PUSH
27415: LD_INT 16
27417: PUSH
27418: LD_INT 7
27420: PUSH
27421: LD_INT 12
27423: PUSH
27424: LD_INT 13
27426: PUSH
27427: LD_INT 10
27429: PUSH
27430: LD_INT 14
27432: PUSH
27433: LD_INT 20
27435: PUSH
27436: LD_INT 21
27438: PUSH
27439: LD_INT 22
27441: PUSH
27442: LD_INT 25
27444: PUSH
27445: LD_INT 32
27447: PUSH
27448: LD_INT 27
27450: PUSH
27451: LD_INT 36
27453: PUSH
27454: LD_INT 69
27456: PUSH
27457: LD_INT 39
27459: PUSH
27460: LD_INT 34
27462: PUSH
27463: LD_INT 40
27465: PUSH
27466: LD_INT 48
27468: PUSH
27469: LD_INT 49
27471: PUSH
27472: LD_INT 50
27474: PUSH
27475: LD_INT 51
27477: PUSH
27478: LD_INT 52
27480: PUSH
27481: LD_INT 53
27483: PUSH
27484: LD_INT 54
27486: PUSH
27487: LD_INT 55
27489: PUSH
27490: LD_INT 56
27492: PUSH
27493: LD_INT 57
27495: PUSH
27496: LD_INT 58
27498: PUSH
27499: LD_INT 59
27501: PUSH
27502: LD_INT 60
27504: PUSH
27505: LD_INT 61
27507: PUSH
27508: LD_INT 62
27510: PUSH
27511: LD_INT 80
27513: PUSH
27514: LD_INT 82
27516: PUSH
27517: LD_INT 83
27519: PUSH
27520: LD_INT 84
27522: PUSH
27523: LD_INT 85
27525: PUSH
27526: LD_INT 86
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 28049
27584: LD_INT 2
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27818
27592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27593: LD_ADDR_VAR 0 4
27597: PUSH
27598: LD_INT 35
27600: PUSH
27601: LD_INT 45
27603: PUSH
27604: LD_INT 46
27606: PUSH
27607: LD_INT 47
27609: PUSH
27610: LD_INT 82
27612: PUSH
27613: LD_INT 83
27615: PUSH
27616: LD_INT 84
27618: PUSH
27619: LD_INT 85
27621: PUSH
27622: LD_INT 87
27624: PUSH
27625: LD_INT 70
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 11
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 5
27642: PUSH
27643: LD_INT 6
27645: PUSH
27646: LD_INT 15
27648: PUSH
27649: LD_INT 18
27651: PUSH
27652: LD_INT 7
27654: PUSH
27655: LD_INT 17
27657: PUSH
27658: LD_INT 8
27660: PUSH
27661: LD_INT 20
27663: PUSH
27664: LD_INT 21
27666: PUSH
27667: LD_INT 22
27669: PUSH
27670: LD_INT 72
27672: PUSH
27673: LD_INT 26
27675: PUSH
27676: LD_INT 69
27678: PUSH
27679: LD_INT 39
27681: PUSH
27682: LD_INT 40
27684: PUSH
27685: LD_INT 41
27687: PUSH
27688: LD_INT 42
27690: PUSH
27691: LD_INT 43
27693: PUSH
27694: LD_INT 48
27696: PUSH
27697: LD_INT 49
27699: PUSH
27700: LD_INT 50
27702: PUSH
27703: LD_INT 51
27705: PUSH
27706: LD_INT 52
27708: PUSH
27709: LD_INT 53
27711: PUSH
27712: LD_INT 54
27714: PUSH
27715: LD_INT 55
27717: PUSH
27718: LD_INT 56
27720: PUSH
27721: LD_INT 60
27723: PUSH
27724: LD_INT 61
27726: PUSH
27727: LD_INT 62
27729: PUSH
27730: LD_INT 66
27732: PUSH
27733: LD_INT 67
27735: PUSH
27736: LD_INT 68
27738: PUSH
27739: LD_INT 81
27741: PUSH
27742: LD_INT 82
27744: PUSH
27745: LD_INT 83
27747: PUSH
27748: LD_INT 84
27750: PUSH
27751: LD_INT 85
27753: PUSH
27754: LD_INT 87
27756: PUSH
27757: LD_INT 88
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
27816: GO 28049
27818: LD_INT 3
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 28048
27826: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27827: LD_ADDR_VAR 0 4
27831: PUSH
27832: LD_INT 46
27834: PUSH
27835: LD_INT 47
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 82
27846: PUSH
27847: LD_INT 83
27849: PUSH
27850: LD_INT 84
27852: PUSH
27853: LD_INT 85
27855: PUSH
27856: LD_INT 86
27858: PUSH
27859: LD_INT 11
27861: PUSH
27862: LD_INT 9
27864: PUSH
27865: LD_INT 20
27867: PUSH
27868: LD_INT 19
27870: PUSH
27871: LD_INT 21
27873: PUSH
27874: LD_INT 24
27876: PUSH
27877: LD_INT 22
27879: PUSH
27880: LD_INT 25
27882: PUSH
27883: LD_INT 28
27885: PUSH
27886: LD_INT 29
27888: PUSH
27889: LD_INT 30
27891: PUSH
27892: LD_INT 31
27894: PUSH
27895: LD_INT 37
27897: PUSH
27898: LD_INT 38
27900: PUSH
27901: LD_INT 32
27903: PUSH
27904: LD_INT 27
27906: PUSH
27907: LD_INT 33
27909: PUSH
27910: LD_INT 69
27912: PUSH
27913: LD_INT 39
27915: PUSH
27916: LD_INT 34
27918: PUSH
27919: LD_INT 40
27921: PUSH
27922: LD_INT 71
27924: PUSH
27925: LD_INT 23
27927: PUSH
27928: LD_INT 44
27930: PUSH
27931: LD_INT 48
27933: PUSH
27934: LD_INT 49
27936: PUSH
27937: LD_INT 50
27939: PUSH
27940: LD_INT 51
27942: PUSH
27943: LD_INT 52
27945: PUSH
27946: LD_INT 53
27948: PUSH
27949: LD_INT 54
27951: PUSH
27952: LD_INT 55
27954: PUSH
27955: LD_INT 56
27957: PUSH
27958: LD_INT 57
27960: PUSH
27961: LD_INT 58
27963: PUSH
27964: LD_INT 59
27966: PUSH
27967: LD_INT 63
27969: PUSH
27970: LD_INT 64
27972: PUSH
27973: LD_INT 65
27975: PUSH
27976: LD_INT 82
27978: PUSH
27979: LD_INT 83
27981: PUSH
27982: LD_INT 84
27984: PUSH
27985: LD_INT 85
27987: PUSH
27988: LD_INT 86
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28049
28048: POP
// if state > - 1 and state < 3 then
28049: LD_VAR 0 3
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: GREATER
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_INT 3
28066: LESS
28067: AND
28068: IFFALSE 28125
// for i in result do
28070: LD_ADDR_VAR 0 5
28074: PUSH
28075: LD_VAR 0 4
28079: PUSH
28080: FOR_IN
28081: IFFALSE 28123
// if GetTech ( i , side ) <> state then
28083: LD_VAR 0 5
28087: PPUSH
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 321
28097: PUSH
28098: LD_VAR 0 3
28102: NONEQUAL
28103: IFFALSE 28121
// result := result diff i ;
28105: LD_ADDR_VAR 0 4
28109: PUSH
28110: LD_VAR 0 4
28114: PUSH
28115: LD_VAR 0 5
28119: DIFF
28120: ST_TO_ADDR
28121: GO 28080
28123: POP
28124: POP
// end ;
28125: LD_VAR 0 4
28129: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28130: LD_INT 0
28132: PPUSH
28133: PPUSH
28134: PPUSH
// result := true ;
28135: LD_ADDR_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28143: LD_ADDR_VAR 0 5
28147: PUSH
28148: LD_VAR 0 2
28152: PPUSH
28153: CALL_OW 480
28157: ST_TO_ADDR
// if not tmp then
28158: LD_VAR 0 5
28162: NOT
28163: IFFALSE 28167
// exit ;
28165: GO 28216
// for i in tmp do
28167: LD_ADDR_VAR 0 4
28171: PUSH
28172: LD_VAR 0 5
28176: PUSH
28177: FOR_IN
28178: IFFALSE 28214
// if GetTech ( i , side ) <> state_researched then
28180: LD_VAR 0 4
28184: PPUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 321
28194: PUSH
28195: LD_INT 2
28197: NONEQUAL
28198: IFFALSE 28212
// begin result := false ;
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 0
28207: ST_TO_ADDR
// exit ;
28208: POP
28209: POP
28210: GO 28216
// end ;
28212: GO 28177
28214: POP
28215: POP
// end ;
28216: LD_VAR 0 3
28220: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
28225: PPUSH
28226: PPUSH
28227: PPUSH
28228: PPUSH
28229: PPUSH
28230: PPUSH
28231: PPUSH
28232: PPUSH
28233: PPUSH
28234: PPUSH
28235: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28236: LD_VAR 0 1
28240: NOT
28241: PUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 257
28251: PUSH
28252: LD_INT 9
28254: NONEQUAL
28255: OR
28256: IFFALSE 28260
// exit ;
28258: GO 28833
// side := GetSide ( unit ) ;
28260: LD_ADDR_VAR 0 9
28264: PUSH
28265: LD_VAR 0 1
28269: PPUSH
28270: CALL_OW 255
28274: ST_TO_ADDR
// tech_space := tech_spacanom ;
28275: LD_ADDR_VAR 0 12
28279: PUSH
28280: LD_INT 29
28282: ST_TO_ADDR
// tech_time := tech_taurad ;
28283: LD_ADDR_VAR 0 13
28287: PUSH
28288: LD_INT 28
28290: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28291: LD_ADDR_VAR 0 11
28295: PUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL_OW 310
28305: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28306: LD_VAR 0 11
28310: PPUSH
28311: CALL_OW 247
28315: PUSH
28316: LD_INT 2
28318: EQUAL
28319: IFFALSE 28323
// exit ;
28321: GO 28833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28323: LD_ADDR_VAR 0 8
28327: PUSH
28328: LD_INT 81
28330: PUSH
28331: LD_VAR 0 9
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 3
28342: PUSH
28343: LD_INT 21
28345: PUSH
28346: LD_INT 3
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 8
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28833
// if in_unit then
28375: LD_VAR 0 11
28379: IFFALSE 28403
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28381: LD_ADDR_VAR 0 10
28385: PUSH
28386: LD_VAR 0 8
28390: PPUSH
28391: LD_VAR 0 11
28395: PPUSH
28396: CALL_OW 74
28400: ST_TO_ADDR
28401: GO 28423
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28403: LD_ADDR_VAR 0 10
28407: PUSH
28408: LD_VAR 0 8
28412: PPUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 74
28422: ST_TO_ADDR
// if not enemy then
28423: LD_VAR 0 10
28427: NOT
28428: IFFALSE 28432
// exit ;
28430: GO 28833
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28432: LD_VAR 0 11
28436: PUSH
28437: LD_VAR 0 11
28441: PPUSH
28442: LD_VAR 0 10
28446: PPUSH
28447: CALL_OW 296
28451: PUSH
28452: LD_INT 13
28454: GREATER
28455: AND
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_VAR 0 10
28466: PPUSH
28467: CALL_OW 296
28471: PUSH
28472: LD_INT 12
28474: GREATER
28475: OR
28476: IFFALSE 28480
// exit ;
28478: GO 28833
// missile := [ 1 ] ;
28480: LD_ADDR_VAR 0 14
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28491: LD_VAR 0 9
28495: PPUSH
28496: LD_VAR 0 12
28500: PPUSH
28501: CALL_OW 325
28505: IFFALSE 28534
// missile := Replace ( missile , missile + 1 , 2 ) ;
28507: LD_ADDR_VAR 0 14
28511: PUSH
28512: LD_VAR 0 14
28516: PPUSH
28517: LD_VAR 0 14
28521: PUSH
28522: LD_INT 1
28524: PLUS
28525: PPUSH
28526: LD_INT 2
28528: PPUSH
28529: CALL_OW 1
28533: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28534: LD_VAR 0 9
28538: PPUSH
28539: LD_VAR 0 13
28543: PPUSH
28544: CALL_OW 325
28548: PUSH
28549: LD_VAR 0 10
28553: PPUSH
28554: CALL_OW 255
28558: PPUSH
28559: LD_VAR 0 13
28563: PPUSH
28564: CALL_OW 325
28568: NOT
28569: AND
28570: IFFALSE 28599
// missile := Replace ( missile , missile + 1 , 3 ) ;
28572: LD_ADDR_VAR 0 14
28576: PUSH
28577: LD_VAR 0 14
28581: PPUSH
28582: LD_VAR 0 14
28586: PUSH
28587: LD_INT 1
28589: PLUS
28590: PPUSH
28591: LD_INT 3
28593: PPUSH
28594: CALL_OW 1
28598: ST_TO_ADDR
// if missile < 2 then
28599: LD_VAR 0 14
28603: PUSH
28604: LD_INT 2
28606: LESS
28607: IFFALSE 28611
// exit ;
28609: GO 28833
// x := GetX ( enemy ) ;
28611: LD_ADDR_VAR 0 4
28615: PUSH
28616: LD_VAR 0 10
28620: PPUSH
28621: CALL_OW 250
28625: ST_TO_ADDR
// y := GetY ( enemy ) ;
28626: LD_ADDR_VAR 0 5
28630: PUSH
28631: LD_VAR 0 10
28635: PPUSH
28636: CALL_OW 251
28640: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28641: LD_ADDR_VAR 0 6
28645: PUSH
28646: LD_VAR 0 4
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PPUSH
28655: LD_INT 1
28657: PPUSH
28658: CALL_OW 12
28662: PLUS
28663: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28664: LD_ADDR_VAR 0 7
28668: PUSH
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PPUSH
28678: LD_INT 1
28680: PPUSH
28681: CALL_OW 12
28685: PLUS
28686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28687: LD_VAR 0 6
28691: PPUSH
28692: LD_VAR 0 7
28696: PPUSH
28697: CALL_OW 488
28701: NOT
28702: IFFALSE 28724
// begin _x := x ;
28704: LD_ADDR_VAR 0 6
28708: PUSH
28709: LD_VAR 0 4
28713: ST_TO_ADDR
// _y := y ;
28714: LD_ADDR_VAR 0 7
28718: PUSH
28719: LD_VAR 0 5
28723: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28724: LD_ADDR_VAR 0 3
28728: PUSH
28729: LD_INT 1
28731: PPUSH
28732: LD_VAR 0 14
28736: PPUSH
28737: CALL_OW 12
28741: ST_TO_ADDR
// case i of 1 :
28742: LD_VAR 0 3
28746: PUSH
28747: LD_INT 1
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28772
28755: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28756: LD_VAR 0 1
28760: PPUSH
28761: LD_VAR 0 10
28765: PPUSH
28766: CALL_OW 115
28770: GO 28833
28772: LD_INT 2
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28802
28780: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28781: LD_VAR 0 1
28785: PPUSH
28786: LD_VAR 0 6
28790: PPUSH
28791: LD_VAR 0 7
28795: PPUSH
28796: CALL_OW 153
28800: GO 28833
28802: LD_INT 3
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28832
28810: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28811: LD_VAR 0 1
28815: PPUSH
28816: LD_VAR 0 6
28820: PPUSH
28821: LD_VAR 0 7
28825: PPUSH
28826: CALL_OW 154
28830: GO 28833
28832: POP
// end ;
28833: LD_VAR 0 2
28837: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28838: LD_INT 0
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
28844: PPUSH
28845: PPUSH
// if not unit or not building then
28846: LD_VAR 0 1
28850: NOT
28851: PUSH
28852: LD_VAR 0 2
28856: NOT
28857: OR
28858: IFFALSE 28862
// exit ;
28860: GO 29020
// x := GetX ( building ) ;
28862: LD_ADDR_VAR 0 5
28866: PUSH
28867: LD_VAR 0 2
28871: PPUSH
28872: CALL_OW 250
28876: ST_TO_ADDR
// y := GetY ( building ) ;
28877: LD_ADDR_VAR 0 6
28881: PUSH
28882: LD_VAR 0 2
28886: PPUSH
28887: CALL_OW 251
28891: ST_TO_ADDR
// for i = 0 to 5 do
28892: LD_ADDR_VAR 0 4
28896: PUSH
28897: DOUBLE
28898: LD_INT 0
28900: DEC
28901: ST_TO_ADDR
28902: LD_INT 5
28904: PUSH
28905: FOR_TO
28906: IFFALSE 29018
// begin _x := ShiftX ( x , i , 3 ) ;
28908: LD_ADDR_VAR 0 7
28912: PUSH
28913: LD_VAR 0 5
28917: PPUSH
28918: LD_VAR 0 4
28922: PPUSH
28923: LD_INT 3
28925: PPUSH
28926: CALL_OW 272
28930: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28931: LD_ADDR_VAR 0 8
28935: PUSH
28936: LD_VAR 0 6
28940: PPUSH
28941: LD_VAR 0 4
28945: PPUSH
28946: LD_INT 3
28948: PPUSH
28949: CALL_OW 273
28953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28954: LD_VAR 0 7
28958: PPUSH
28959: LD_VAR 0 8
28963: PPUSH
28964: CALL_OW 488
28968: NOT
28969: IFFALSE 28973
// continue ;
28971: GO 28905
// if HexInfo ( _x , _y ) = 0 then
28973: LD_VAR 0 7
28977: PPUSH
28978: LD_VAR 0 8
28982: PPUSH
28983: CALL_OW 428
28987: PUSH
28988: LD_INT 0
28990: EQUAL
28991: IFFALSE 29016
// begin ComMoveXY ( unit , _x , _y ) ;
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_VAR 0 7
29002: PPUSH
29003: LD_VAR 0 8
29007: PPUSH
29008: CALL_OW 111
// exit ;
29012: POP
29013: POP
29014: GO 29020
// end ; end ;
29016: GO 28905
29018: POP
29019: POP
// end ;
29020: LD_VAR 0 3
29024: RET
// export function ScanBase ( side , base_area ) ; begin
29025: LD_INT 0
29027: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: LD_INT 81
29040: PUSH
29041: LD_VAR 0 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 70
29054: ST_TO_ADDR
// end ;
29055: LD_VAR 0 3
29059: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29060: LD_INT 0
29062: PPUSH
29063: PPUSH
29064: PPUSH
29065: PPUSH
// result := false ;
29066: LD_ADDR_VAR 0 2
29070: PUSH
29071: LD_INT 0
29073: ST_TO_ADDR
// side := GetSide ( unit ) ;
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_VAR 0 1
29083: PPUSH
29084: CALL_OW 255
29088: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29089: LD_ADDR_VAR 0 4
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 248
29103: ST_TO_ADDR
// case nat of 1 :
29104: LD_VAR 0 4
29108: PUSH
29109: LD_INT 1
29111: DOUBLE
29112: EQUAL
29113: IFTRUE 29117
29115: GO 29128
29117: POP
// tech := tech_lassight ; 2 :
29118: LD_ADDR_VAR 0 5
29122: PUSH
29123: LD_INT 12
29125: ST_TO_ADDR
29126: GO 29167
29128: LD_INT 2
29130: DOUBLE
29131: EQUAL
29132: IFTRUE 29136
29134: GO 29147
29136: POP
// tech := tech_mortar ; 3 :
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_INT 41
29144: ST_TO_ADDR
29145: GO 29167
29147: LD_INT 3
29149: DOUBLE
29150: EQUAL
29151: IFTRUE 29155
29153: GO 29166
29155: POP
// tech := tech_bazooka ; end ;
29156: LD_ADDR_VAR 0 5
29160: PUSH
29161: LD_INT 44
29163: ST_TO_ADDR
29164: GO 29167
29166: POP
// if Researched ( side , tech ) then
29167: LD_VAR 0 3
29171: PPUSH
29172: LD_VAR 0 5
29176: PPUSH
29177: CALL_OW 325
29181: IFFALSE 29208
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29183: LD_ADDR_VAR 0 2
29187: PUSH
29188: LD_INT 5
29190: PUSH
29191: LD_INT 8
29193: PUSH
29194: LD_INT 9
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: PUSH
29202: LD_VAR 0 4
29206: ARRAY
29207: ST_TO_ADDR
// end ;
29208: LD_VAR 0 2
29212: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29213: LD_INT 0
29215: PPUSH
29216: PPUSH
29217: PPUSH
// if not mines then
29218: LD_VAR 0 2
29222: NOT
29223: IFFALSE 29227
// exit ;
29225: GO 29371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29227: LD_ADDR_VAR 0 5
29231: PUSH
29232: LD_INT 81
29234: PUSH
29235: LD_VAR 0 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 3
29246: PUSH
29247: LD_INT 21
29249: PUSH
29250: LD_INT 3
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PPUSH
29265: CALL_OW 69
29269: ST_TO_ADDR
// for i in mines do
29270: LD_ADDR_VAR 0 4
29274: PUSH
29275: LD_VAR 0 2
29279: PUSH
29280: FOR_IN
29281: IFFALSE 29369
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29283: LD_VAR 0 4
29287: PUSH
29288: LD_INT 1
29290: ARRAY
29291: PPUSH
29292: LD_VAR 0 4
29296: PUSH
29297: LD_INT 2
29299: ARRAY
29300: PPUSH
29301: CALL_OW 458
29305: NOT
29306: IFFALSE 29310
// continue ;
29308: GO 29280
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29310: LD_VAR 0 4
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: PPUSH
29319: LD_VAR 0 4
29323: PUSH
29324: LD_INT 2
29326: ARRAY
29327: PPUSH
29328: CALL_OW 428
29332: PUSH
29333: LD_VAR 0 5
29337: IN
29338: IFFALSE 29367
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29340: LD_VAR 0 4
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: LD_VAR 0 4
29353: PUSH
29354: LD_INT 2
29356: ARRAY
29357: PPUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL_OW 456
// end ;
29367: GO 29280
29369: POP
29370: POP
// end ;
29371: LD_VAR 0 3
29375: RET
// export function Count ( array ) ; begin
29376: LD_INT 0
29378: PPUSH
// result := array + 0 ;
29379: LD_ADDR_VAR 0 2
29383: PUSH
29384: LD_VAR 0 1
29388: PUSH
29389: LD_INT 0
29391: PLUS
29392: ST_TO_ADDR
// end ;
29393: LD_VAR 0 2
29397: RET
// export function IsEmpty ( building ) ; begin
29398: LD_INT 0
29400: PPUSH
// if not building then
29401: LD_VAR 0 1
29405: NOT
29406: IFFALSE 29410
// exit ;
29408: GO 29453
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29410: LD_ADDR_VAR 0 2
29414: PUSH
29415: LD_VAR 0 1
29419: PUSH
29420: LD_INT 22
29422: PUSH
29423: LD_VAR 0 1
29427: PPUSH
29428: CALL_OW 255
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 58
29439: PUSH
29440: EMPTY
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: IN
29452: ST_TO_ADDR
// end ;
29453: LD_VAR 0 2
29457: RET
// export function IsNotFull ( building ) ; var places ; begin
29458: LD_INT 0
29460: PPUSH
29461: PPUSH
// if not building then
29462: LD_VAR 0 1
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29499
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 62
29486: PUSH
29487: EMPTY
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PPUSH
29494: CALL_OW 72
29498: ST_TO_ADDR
// end ;
29499: LD_VAR 0 2
29503: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
// tmp := [ ] ;
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: EMPTY
29516: ST_TO_ADDR
// list := [ ] ;
29517: LD_ADDR_VAR 0 5
29521: PUSH
29522: EMPTY
29523: ST_TO_ADDR
// for i = 16 to 25 do
29524: LD_ADDR_VAR 0 4
29528: PUSH
29529: DOUBLE
29530: LD_INT 16
29532: DEC
29533: ST_TO_ADDR
29534: LD_INT 25
29536: PUSH
29537: FOR_TO
29538: IFFALSE 29611
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: LD_INT 22
29552: PUSH
29553: LD_VAR 0 1
29557: PPUSH
29558: CALL_OW 255
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 91
29569: PUSH
29570: LD_VAR 0 1
29574: PUSH
29575: LD_INT 6
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 30
29585: PUSH
29586: LD_VAR 0 4
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ADD
29608: ST_TO_ADDR
29609: GO 29537
29611: POP
29612: POP
// for i = 1 to tmp do
29613: LD_ADDR_VAR 0 4
29617: PUSH
29618: DOUBLE
29619: LD_INT 1
29621: DEC
29622: ST_TO_ADDR
29623: LD_VAR 0 3
29627: PUSH
29628: FOR_TO
29629: IFFALSE 29717
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_VAR 0 5
29640: PUSH
29641: LD_VAR 0 3
29645: PUSH
29646: LD_VAR 0 4
29650: ARRAY
29651: PPUSH
29652: CALL_OW 266
29656: PUSH
29657: LD_VAR 0 3
29661: PUSH
29662: LD_VAR 0 4
29666: ARRAY
29667: PPUSH
29668: CALL_OW 250
29672: PUSH
29673: LD_VAR 0 3
29677: PUSH
29678: LD_VAR 0 4
29682: ARRAY
29683: PPUSH
29684: CALL_OW 251
29688: PUSH
29689: LD_VAR 0 3
29693: PUSH
29694: LD_VAR 0 4
29698: ARRAY
29699: PPUSH
29700: CALL_OW 254
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: ADD
29714: ST_TO_ADDR
29715: GO 29628
29717: POP
29718: POP
// result := list ;
29719: LD_ADDR_VAR 0 2
29723: PUSH
29724: LD_VAR 0 5
29728: ST_TO_ADDR
// end ;
29729: LD_VAR 0 2
29733: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29734: LD_INT 0
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
// if not factory then
29743: LD_VAR 0 1
29747: NOT
29748: IFFALSE 29752
// exit ;
29750: GO 30345
// if control = control_apeman then
29752: LD_VAR 0 4
29756: PUSH
29757: LD_INT 5
29759: EQUAL
29760: IFFALSE 29869
// begin tmp := UnitsInside ( factory ) ;
29762: LD_ADDR_VAR 0 8
29766: PUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 313
29776: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29777: LD_VAR 0 8
29781: PPUSH
29782: LD_INT 25
29784: PUSH
29785: LD_INT 12
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PPUSH
29792: CALL_OW 72
29796: NOT
29797: IFFALSE 29807
// control := control_manual ;
29799: LD_ADDR_VAR 0 4
29803: PUSH
29804: LD_INT 1
29806: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29807: LD_ADDR_VAR 0 8
29811: PUSH
29812: LD_VAR 0 1
29816: PPUSH
29817: CALL 29504 0 1
29821: ST_TO_ADDR
// if tmp then
29822: LD_VAR 0 8
29826: IFFALSE 29869
// begin for i in tmp do
29828: LD_ADDR_VAR 0 7
29832: PUSH
29833: LD_VAR 0 8
29837: PUSH
29838: FOR_IN
29839: IFFALSE 29867
// if i [ 1 ] = b_ext_radio then
29841: LD_VAR 0 7
29845: PUSH
29846: LD_INT 1
29848: ARRAY
29849: PUSH
29850: LD_INT 22
29852: EQUAL
29853: IFFALSE 29865
// begin control := control_remote ;
29855: LD_ADDR_VAR 0 4
29859: PUSH
29860: LD_INT 2
29862: ST_TO_ADDR
// break ;
29863: GO 29867
// end ;
29865: GO 29838
29867: POP
29868: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: LD_VAR 0 3
29883: PPUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: LD_VAR 0 5
29893: PPUSH
29894: CALL_OW 448
29898: IFFALSE 29933
// begin result := [ chassis , engine , control , weapon ] ;
29900: LD_ADDR_VAR 0 6
29904: PUSH
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 3
29914: PUSH
29915: LD_VAR 0 4
29919: PUSH
29920: LD_VAR 0 5
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: ST_TO_ADDR
// exit ;
29931: GO 30345
// end ; _chassis := AvailableChassisList ( factory ) ;
29933: LD_ADDR_VAR 0 9
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 475
29947: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29948: LD_ADDR_VAR 0 11
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 476
29962: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29963: LD_ADDR_VAR 0 12
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 477
29977: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29978: LD_ADDR_VAR 0 10
29982: PUSH
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL_OW 478
29992: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29993: LD_VAR 0 9
29997: NOT
29998: PUSH
29999: LD_VAR 0 11
30003: NOT
30004: OR
30005: PUSH
30006: LD_VAR 0 12
30010: NOT
30011: OR
30012: PUSH
30013: LD_VAR 0 10
30017: NOT
30018: OR
30019: IFFALSE 30054
// begin result := [ chassis , engine , control , weapon ] ;
30021: LD_ADDR_VAR 0 6
30025: PUSH
30026: LD_VAR 0 2
30030: PUSH
30031: LD_VAR 0 3
30035: PUSH
30036: LD_VAR 0 4
30040: PUSH
30041: LD_VAR 0 5
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// exit ;
30052: GO 30345
// end ; if not chassis in _chassis then
30054: LD_VAR 0 2
30058: PUSH
30059: LD_VAR 0 9
30063: IN
30064: NOT
30065: IFFALSE 30091
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30067: LD_ADDR_VAR 0 2
30071: PUSH
30072: LD_VAR 0 9
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 9
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL 30350 0 2
30105: NOT
30106: IFFALSE 30165
// repeat engine := _engine [ 1 ] ;
30108: LD_ADDR_VAR 0 3
30112: PUSH
30113: LD_VAR 0 11
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30122: LD_ADDR_VAR 0 11
30126: PUSH
30127: LD_VAR 0 11
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 3
30139: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30140: LD_VAR 0 2
30144: PPUSH
30145: LD_VAR 0 3
30149: PPUSH
30150: CALL 30350 0 2
30154: PUSH
30155: LD_VAR 0 11
30159: PUSH
30160: EMPTY
30161: EQUAL
30162: OR
30163: IFFALSE 30108
// if not control in _control then
30165: LD_VAR 0 4
30169: PUSH
30170: LD_VAR 0 12
30174: IN
30175: NOT
30176: IFFALSE 30202
// control := _control [ rand ( 1 , _control ) ] ;
30178: LD_ADDR_VAR 0 4
30182: PUSH
30183: LD_VAR 0 12
30187: PUSH
30188: LD_INT 1
30190: PPUSH
30191: LD_VAR 0 12
30195: PPUSH
30196: CALL_OW 12
30200: ARRAY
30201: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_VAR 0 5
30211: PPUSH
30212: CALL 30570 0 2
30216: NOT
30217: IFFALSE 30276
// repeat weapon := _weapon [ 1 ] ;
30219: LD_ADDR_VAR 0 5
30223: PUSH
30224: LD_VAR 0 10
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30233: LD_ADDR_VAR 0 10
30237: PUSH
30238: LD_VAR 0 10
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: CALL_OW 3
30250: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30251: LD_VAR 0 2
30255: PPUSH
30256: LD_VAR 0 5
30260: PPUSH
30261: CALL 30570 0 2
30265: PUSH
30266: LD_VAR 0 10
30270: PUSH
30271: EMPTY
30272: EQUAL
30273: OR
30274: IFFALSE 30219
// result := [ ] ;
30276: LD_ADDR_VAR 0 6
30280: PUSH
30281: EMPTY
30282: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30283: LD_VAR 0 1
30287: PPUSH
30288: LD_VAR 0 2
30292: PPUSH
30293: LD_VAR 0 3
30297: PPUSH
30298: LD_VAR 0 4
30302: PPUSH
30303: LD_VAR 0 5
30307: PPUSH
30308: CALL_OW 448
30312: IFFALSE 30345
// result := [ chassis , engine , control , weapon ] ;
30314: LD_ADDR_VAR 0 6
30318: PUSH
30319: LD_VAR 0 2
30323: PUSH
30324: LD_VAR 0 3
30328: PUSH
30329: LD_VAR 0 4
30333: PUSH
30334: LD_VAR 0 5
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: ST_TO_ADDR
// end ;
30345: LD_VAR 0 6
30349: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30350: LD_INT 0
30352: PPUSH
// if not chassis or not engine then
30353: LD_VAR 0 1
30357: NOT
30358: PUSH
30359: LD_VAR 0 2
30363: NOT
30364: OR
30365: IFFALSE 30369
// exit ;
30367: GO 30565
// case engine of engine_solar :
30369: LD_VAR 0 2
30373: PUSH
30374: LD_INT 2
30376: DOUBLE
30377: EQUAL
30378: IFTRUE 30382
30380: GO 30420
30382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30383: LD_ADDR_VAR 0 3
30387: PUSH
30388: LD_INT 11
30390: PUSH
30391: LD_INT 12
30393: PUSH
30394: LD_INT 13
30396: PUSH
30397: LD_INT 14
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: ST_TO_ADDR
30418: GO 30549
30420: LD_INT 1
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30490
30428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_INT 11
30436: PUSH
30437: LD_INT 12
30439: PUSH
30440: LD_INT 13
30442: PUSH
30443: LD_INT 14
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 4
30457: PUSH
30458: LD_INT 5
30460: PUSH
30461: LD_INT 21
30463: PUSH
30464: LD_INT 23
30466: PUSH
30467: LD_INT 22
30469: PUSH
30470: LD_INT 24
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
30488: GO 30549
30490: LD_INT 3
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30548
30498: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30499: LD_ADDR_VAR 0 3
30503: PUSH
30504: LD_INT 13
30506: PUSH
30507: LD_INT 14
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 4
30518: PUSH
30519: LD_INT 5
30521: PUSH
30522: LD_INT 21
30524: PUSH
30525: LD_INT 22
30527: PUSH
30528: LD_INT 23
30530: PUSH
30531: LD_INT 24
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
30546: GO 30549
30548: POP
// result := ( chassis in result ) ;
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_VAR 0 1
30558: PUSH
30559: LD_VAR 0 3
30563: IN
30564: ST_TO_ADDR
// end ;
30565: LD_VAR 0 3
30569: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30570: LD_INT 0
30572: PPUSH
// if not chassis or not weapon then
30573: LD_VAR 0 1
30577: NOT
30578: PUSH
30579: LD_VAR 0 2
30583: NOT
30584: OR
30585: IFFALSE 30589
// exit ;
30587: GO 31649
// case weapon of us_machine_gun :
30589: LD_VAR 0 2
30593: PUSH
30594: LD_INT 2
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30632
30602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30603: LD_ADDR_VAR 0 3
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: ST_TO_ADDR
30630: GO 31633
30632: LD_INT 3
30634: DOUBLE
30635: EQUAL
30636: IFTRUE 30640
30638: GO 30670
30640: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 3
30654: PUSH
30655: LD_INT 4
30657: PUSH
30658: LD_INT 5
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
30668: GO 31633
30670: LD_INT 11
30672: DOUBLE
30673: EQUAL
30674: IFTRUE 30678
30676: GO 30708
30678: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: LD_INT 3
30692: PUSH
30693: LD_INT 4
30695: PUSH
30696: LD_INT 5
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
30706: GO 31633
30708: LD_INT 4
30710: DOUBLE
30711: EQUAL
30712: IFTRUE 30716
30714: GO 30742
30716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 4
30730: PUSH
30731: LD_INT 5
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
30740: GO 31633
30742: LD_INT 5
30744: DOUBLE
30745: EQUAL
30746: IFTRUE 30750
30748: GO 30776
30750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30751: LD_ADDR_VAR 0 3
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: LD_INT 4
30764: PUSH
30765: LD_INT 5
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: ST_TO_ADDR
30774: GO 31633
30776: LD_INT 9
30778: DOUBLE
30779: EQUAL
30780: IFTRUE 30784
30782: GO 30810
30784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: LD_INT 4
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
30808: GO 31633
30810: LD_INT 7
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30844
30818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 3
30829: PUSH
30830: LD_INT 4
30832: PUSH
30833: LD_INT 5
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: ST_TO_ADDR
30842: GO 31633
30844: LD_INT 12
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30878
30852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30853: LD_ADDR_VAR 0 3
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 3
30863: PUSH
30864: LD_INT 4
30866: PUSH
30867: LD_INT 5
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: ST_TO_ADDR
30876: GO 31633
30878: LD_INT 13
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30912
30886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
30910: GO 31633
30912: LD_INT 14
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30938
30920: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: LD_INT 5
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: ST_TO_ADDR
30936: GO 31633
30938: LD_INT 6
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30946
30944: GO 30964
30946: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_INT 4
30954: PUSH
30955: LD_INT 5
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: ST_TO_ADDR
30962: GO 31633
30964: LD_INT 10
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 30990
30972: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: LD_INT 5
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: ST_TO_ADDR
30988: GO 31633
30990: LD_INT 22
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31024
30998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_INT 11
31006: PUSH
31007: LD_INT 12
31009: PUSH
31010: LD_INT 13
31012: PUSH
31013: LD_INT 14
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31633
31024: LD_INT 23
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31058
31032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31033: LD_ADDR_VAR 0 3
31037: PUSH
31038: LD_INT 11
31040: PUSH
31041: LD_INT 12
31043: PUSH
31044: LD_INT 13
31046: PUSH
31047: LD_INT 14
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31633
31058: LD_INT 24
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31092
31066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31067: LD_ADDR_VAR 0 3
31071: PUSH
31072: LD_INT 11
31074: PUSH
31075: LD_INT 12
31077: PUSH
31078: LD_INT 13
31080: PUSH
31081: LD_INT 14
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: ST_TO_ADDR
31090: GO 31633
31092: LD_INT 30
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31126
31100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: LD_INT 11
31108: PUSH
31109: LD_INT 12
31111: PUSH
31112: LD_INT 13
31114: PUSH
31115: LD_INT 14
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
31124: GO 31633
31126: LD_INT 25
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31152
31134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_INT 13
31142: PUSH
31143: LD_INT 14
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: ST_TO_ADDR
31150: GO 31633
31152: LD_INT 27
31154: DOUBLE
31155: EQUAL
31156: IFTRUE 31160
31158: GO 31178
31160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_INT 13
31168: PUSH
31169: LD_INT 14
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: ST_TO_ADDR
31176: GO 31633
31178: LD_INT 92
31180: DOUBLE
31181: EQUAL
31182: IFTRUE 31186
31184: GO 31212
31186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31187: LD_ADDR_VAR 0 3
31191: PUSH
31192: LD_INT 11
31194: PUSH
31195: LD_INT 12
31197: PUSH
31198: LD_INT 13
31200: PUSH
31201: LD_INT 14
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
31210: GO 31633
31212: LD_INT 28
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 31238
31220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_INT 13
31228: PUSH
31229: LD_INT 14
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: ST_TO_ADDR
31236: GO 31633
31238: LD_INT 29
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31264
31246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_INT 13
31254: PUSH
31255: LD_INT 14
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 31633
31264: LD_INT 31
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31290
31272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 13
31280: PUSH
31281: LD_INT 14
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: ST_TO_ADDR
31288: GO 31633
31290: LD_INT 26
31292: DOUBLE
31293: EQUAL
31294: IFTRUE 31298
31296: GO 31316
31298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_INT 13
31306: PUSH
31307: LD_INT 14
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: ST_TO_ADDR
31314: GO 31633
31316: LD_INT 42
31318: DOUBLE
31319: EQUAL
31320: IFTRUE 31324
31322: GO 31350
31324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31325: LD_ADDR_VAR 0 3
31329: PUSH
31330: LD_INT 21
31332: PUSH
31333: LD_INT 22
31335: PUSH
31336: LD_INT 23
31338: PUSH
31339: LD_INT 24
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
31348: GO 31633
31350: LD_INT 43
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31384
31358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31359: LD_ADDR_VAR 0 3
31363: PUSH
31364: LD_INT 21
31366: PUSH
31367: LD_INT 22
31369: PUSH
31370: LD_INT 23
31372: PUSH
31373: LD_INT 24
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
31382: GO 31633
31384: LD_INT 44
31386: DOUBLE
31387: EQUAL
31388: IFTRUE 31392
31390: GO 31418
31392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_INT 21
31400: PUSH
31401: LD_INT 22
31403: PUSH
31404: LD_INT 23
31406: PUSH
31407: LD_INT 24
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
31416: GO 31633
31418: LD_INT 45
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31452
31426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31427: LD_ADDR_VAR 0 3
31431: PUSH
31432: LD_INT 21
31434: PUSH
31435: LD_INT 22
31437: PUSH
31438: LD_INT 23
31440: PUSH
31441: LD_INT 24
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 31633
31452: LD_INT 49
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31486
31460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_INT 21
31468: PUSH
31469: LD_INT 22
31471: PUSH
31472: LD_INT 23
31474: PUSH
31475: LD_INT 24
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: ST_TO_ADDR
31484: GO 31633
31486: LD_INT 51
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31520
31494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_INT 21
31502: PUSH
31503: LD_INT 22
31505: PUSH
31506: LD_INT 23
31508: PUSH
31509: LD_INT 24
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: ST_TO_ADDR
31518: GO 31633
31520: LD_INT 52
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31554
31528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: LD_INT 21
31536: PUSH
31537: LD_INT 22
31539: PUSH
31540: LD_INT 23
31542: PUSH
31543: LD_INT 24
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: ST_TO_ADDR
31552: GO 31633
31554: LD_INT 53
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31580
31562: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_INT 23
31570: PUSH
31571: LD_INT 24
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: ST_TO_ADDR
31578: GO 31633
31580: LD_INT 46
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31606
31588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31589: LD_ADDR_VAR 0 3
31593: PUSH
31594: LD_INT 23
31596: PUSH
31597: LD_INT 24
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: ST_TO_ADDR
31604: GO 31633
31606: LD_INT 47
31608: DOUBLE
31609: EQUAL
31610: IFTRUE 31614
31612: GO 31632
31614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_INT 23
31622: PUSH
31623: LD_INT 24
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: ST_TO_ADDR
31630: GO 31633
31632: POP
// result := ( chassis in result ) ;
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_VAR 0 1
31642: PUSH
31643: LD_VAR 0 3
31647: IN
31648: ST_TO_ADDR
// end ;
31649: LD_VAR 0 3
31653: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
// result := array ;
31663: LD_ADDR_VAR 0 5
31667: PUSH
31668: LD_VAR 0 1
31672: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31673: LD_VAR 0 1
31677: NOT
31678: PUSH
31679: LD_VAR 0 2
31683: NOT
31684: OR
31685: PUSH
31686: LD_VAR 0 3
31690: NOT
31691: OR
31692: PUSH
31693: LD_VAR 0 2
31697: PUSH
31698: LD_VAR 0 1
31702: GREATER
31703: OR
31704: PUSH
31705: LD_VAR 0 3
31709: PUSH
31710: LD_VAR 0 1
31714: GREATER
31715: OR
31716: IFFALSE 31720
// exit ;
31718: GO 32016
// if direction then
31720: LD_VAR 0 4
31724: IFFALSE 31788
// begin d := 1 ;
31726: LD_ADDR_VAR 0 9
31730: PUSH
31731: LD_INT 1
31733: ST_TO_ADDR
// if i_from > i_to then
31734: LD_VAR 0 2
31738: PUSH
31739: LD_VAR 0 3
31743: GREATER
31744: IFFALSE 31770
// length := ( array - i_from ) + i_to else
31746: LD_ADDR_VAR 0 11
31750: PUSH
31751: LD_VAR 0 1
31755: PUSH
31756: LD_VAR 0 2
31760: MINUS
31761: PUSH
31762: LD_VAR 0 3
31766: PLUS
31767: ST_TO_ADDR
31768: GO 31786
// length := i_to - i_from ;
31770: LD_ADDR_VAR 0 11
31774: PUSH
31775: LD_VAR 0 3
31779: PUSH
31780: LD_VAR 0 2
31784: MINUS
31785: ST_TO_ADDR
// end else
31786: GO 31849
// begin d := - 1 ;
31788: LD_ADDR_VAR 0 9
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: ST_TO_ADDR
// if i_from > i_to then
31797: LD_VAR 0 2
31801: PUSH
31802: LD_VAR 0 3
31806: GREATER
31807: IFFALSE 31827
// length := i_from - i_to else
31809: LD_ADDR_VAR 0 11
31813: PUSH
31814: LD_VAR 0 2
31818: PUSH
31819: LD_VAR 0 3
31823: MINUS
31824: ST_TO_ADDR
31825: GO 31849
// length := ( array - i_to ) + i_from ;
31827: LD_ADDR_VAR 0 11
31831: PUSH
31832: LD_VAR 0 1
31836: PUSH
31837: LD_VAR 0 3
31841: MINUS
31842: PUSH
31843: LD_VAR 0 2
31847: PLUS
31848: ST_TO_ADDR
// end ; if not length then
31849: LD_VAR 0 11
31853: NOT
31854: IFFALSE 31858
// exit ;
31856: GO 32016
// tmp := array ;
31858: LD_ADDR_VAR 0 10
31862: PUSH
31863: LD_VAR 0 1
31867: ST_TO_ADDR
// for i = 1 to length do
31868: LD_ADDR_VAR 0 6
31872: PUSH
31873: DOUBLE
31874: LD_INT 1
31876: DEC
31877: ST_TO_ADDR
31878: LD_VAR 0 11
31882: PUSH
31883: FOR_TO
31884: IFFALSE 32004
// begin for j = 1 to array do
31886: LD_ADDR_VAR 0 7
31890: PUSH
31891: DOUBLE
31892: LD_INT 1
31894: DEC
31895: ST_TO_ADDR
31896: LD_VAR 0 1
31900: PUSH
31901: FOR_TO
31902: IFFALSE 31990
// begin k := j + d ;
31904: LD_ADDR_VAR 0 8
31908: PUSH
31909: LD_VAR 0 7
31913: PUSH
31914: LD_VAR 0 9
31918: PLUS
31919: ST_TO_ADDR
// if k > array then
31920: LD_VAR 0 8
31924: PUSH
31925: LD_VAR 0 1
31929: GREATER
31930: IFFALSE 31940
// k := 1 ;
31932: LD_ADDR_VAR 0 8
31936: PUSH
31937: LD_INT 1
31939: ST_TO_ADDR
// if not k then
31940: LD_VAR 0 8
31944: NOT
31945: IFFALSE 31957
// k := array ;
31947: LD_ADDR_VAR 0 8
31951: PUSH
31952: LD_VAR 0 1
31956: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31957: LD_ADDR_VAR 0 10
31961: PUSH
31962: LD_VAR 0 10
31966: PPUSH
31967: LD_VAR 0 8
31971: PPUSH
31972: LD_VAR 0 1
31976: PUSH
31977: LD_VAR 0 7
31981: ARRAY
31982: PPUSH
31983: CALL_OW 1
31987: ST_TO_ADDR
// end ;
31988: GO 31901
31990: POP
31991: POP
// array := tmp ;
31992: LD_ADDR_VAR 0 1
31996: PUSH
31997: LD_VAR 0 10
32001: ST_TO_ADDR
// end ;
32002: GO 31883
32004: POP
32005: POP
// result := array ;
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: LD_VAR 0 1
32015: ST_TO_ADDR
// end ;
32016: LD_VAR 0 5
32020: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
// result := 0 ;
32025: LD_ADDR_VAR 0 3
32029: PUSH
32030: LD_INT 0
32032: ST_TO_ADDR
// if not array or not value in array then
32033: LD_VAR 0 1
32037: NOT
32038: PUSH
32039: LD_VAR 0 2
32043: PUSH
32044: LD_VAR 0 1
32048: IN
32049: NOT
32050: OR
32051: IFFALSE 32055
// exit ;
32053: GO 32109
// for i = 1 to array do
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: DOUBLE
32061: LD_INT 1
32063: DEC
32064: ST_TO_ADDR
32065: LD_VAR 0 1
32069: PUSH
32070: FOR_TO
32071: IFFALSE 32107
// if value = array [ i ] then
32073: LD_VAR 0 2
32077: PUSH
32078: LD_VAR 0 1
32082: PUSH
32083: LD_VAR 0 4
32087: ARRAY
32088: EQUAL
32089: IFFALSE 32105
// begin result := i ;
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_VAR 0 4
32100: ST_TO_ADDR
// exit ;
32101: POP
32102: POP
32103: GO 32109
// end ;
32105: GO 32070
32107: POP
32108: POP
// end ;
32109: LD_VAR 0 3
32113: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32114: LD_INT 0
32116: PPUSH
// vc_chassis := chassis ;
32117: LD_ADDR_OWVAR 37
32121: PUSH
32122: LD_VAR 0 1
32126: ST_TO_ADDR
// vc_engine := engine ;
32127: LD_ADDR_OWVAR 39
32131: PUSH
32132: LD_VAR 0 2
32136: ST_TO_ADDR
// vc_control := control ;
32137: LD_ADDR_OWVAR 38
32141: PUSH
32142: LD_VAR 0 3
32146: ST_TO_ADDR
// vc_weapon := weapon ;
32147: LD_ADDR_OWVAR 40
32151: PUSH
32152: LD_VAR 0 4
32156: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32157: LD_ADDR_OWVAR 41
32161: PUSH
32162: LD_VAR 0 5
32166: ST_TO_ADDR
// end ;
32167: LD_VAR 0 6
32171: RET
// export function WantPlant ( unit ) ; var task ; begin
32172: LD_INT 0
32174: PPUSH
32175: PPUSH
// result := false ;
32176: LD_ADDR_VAR 0 2
32180: PUSH
32181: LD_INT 0
32183: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 437
32198: ST_TO_ADDR
// if task then
32199: LD_VAR 0 3
32203: IFFALSE 32231
// if task [ 1 ] [ 1 ] = p then
32205: LD_VAR 0 3
32209: PUSH
32210: LD_INT 1
32212: ARRAY
32213: PUSH
32214: LD_INT 1
32216: ARRAY
32217: PUSH
32218: LD_STRING p
32220: EQUAL
32221: IFFALSE 32231
// result := true ;
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_INT 1
32230: ST_TO_ADDR
// end ;
32231: LD_VAR 0 2
32235: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
// if pos < 1 then
32242: LD_VAR 0 2
32246: PUSH
32247: LD_INT 1
32249: LESS
32250: IFFALSE 32254
// exit ;
32252: GO 32557
// if pos = 1 then
32254: LD_VAR 0 2
32258: PUSH
32259: LD_INT 1
32261: EQUAL
32262: IFFALSE 32295
// result := Replace ( arr , pos [ 1 ] , value ) else
32264: LD_ADDR_VAR 0 4
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: LD_VAR 0 2
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PPUSH
32283: LD_VAR 0 3
32287: PPUSH
32288: CALL_OW 1
32292: ST_TO_ADDR
32293: GO 32557
// begin tmp := arr ;
32295: LD_ADDR_VAR 0 6
32299: PUSH
32300: LD_VAR 0 1
32304: ST_TO_ADDR
// s_arr := [ tmp ] ;
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: LD_VAR 0 6
32314: PUSH
32315: EMPTY
32316: LIST
32317: ST_TO_ADDR
// for i = 1 to pos - 1 do
32318: LD_ADDR_VAR 0 5
32322: PUSH
32323: DOUBLE
32324: LD_INT 1
32326: DEC
32327: ST_TO_ADDR
32328: LD_VAR 0 2
32332: PUSH
32333: LD_INT 1
32335: MINUS
32336: PUSH
32337: FOR_TO
32338: IFFALSE 32383
// begin tmp := tmp [ pos [ i ] ] ;
32340: LD_ADDR_VAR 0 6
32344: PUSH
32345: LD_VAR 0 6
32349: PUSH
32350: LD_VAR 0 2
32354: PUSH
32355: LD_VAR 0 5
32359: ARRAY
32360: ARRAY
32361: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32362: LD_ADDR_VAR 0 7
32366: PUSH
32367: LD_VAR 0 7
32371: PUSH
32372: LD_VAR 0 6
32376: PUSH
32377: EMPTY
32378: LIST
32379: ADD
32380: ST_TO_ADDR
// end ;
32381: GO 32337
32383: POP
32384: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 6
32394: PPUSH
32395: LD_VAR 0 2
32399: PUSH
32400: LD_VAR 0 2
32404: ARRAY
32405: PPUSH
32406: LD_VAR 0 3
32410: PPUSH
32411: CALL_OW 1
32415: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32416: LD_ADDR_VAR 0 7
32420: PUSH
32421: LD_VAR 0 7
32425: PPUSH
32426: LD_VAR 0 7
32430: PPUSH
32431: LD_VAR 0 6
32435: PPUSH
32436: CALL_OW 1
32440: ST_TO_ADDR
// for i = s_arr downto 2 do
32441: LD_ADDR_VAR 0 5
32445: PUSH
32446: DOUBLE
32447: LD_VAR 0 7
32451: INC
32452: ST_TO_ADDR
32453: LD_INT 2
32455: PUSH
32456: FOR_DOWNTO
32457: IFFALSE 32541
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32459: LD_ADDR_VAR 0 6
32463: PUSH
32464: LD_VAR 0 7
32468: PUSH
32469: LD_VAR 0 5
32473: PUSH
32474: LD_INT 1
32476: MINUS
32477: ARRAY
32478: PPUSH
32479: LD_VAR 0 2
32483: PUSH
32484: LD_VAR 0 5
32488: PUSH
32489: LD_INT 1
32491: MINUS
32492: ARRAY
32493: PPUSH
32494: LD_VAR 0 7
32498: PUSH
32499: LD_VAR 0 5
32503: ARRAY
32504: PPUSH
32505: CALL_OW 1
32509: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32510: LD_ADDR_VAR 0 7
32514: PUSH
32515: LD_VAR 0 7
32519: PPUSH
32520: LD_VAR 0 5
32524: PUSH
32525: LD_INT 1
32527: MINUS
32528: PPUSH
32529: LD_VAR 0 6
32533: PPUSH
32534: CALL_OW 1
32538: ST_TO_ADDR
// end ;
32539: GO 32456
32541: POP
32542: POP
// result := s_arr [ 1 ] ;
32543: LD_ADDR_VAR 0 4
32547: PUSH
32548: LD_VAR 0 7
32552: PUSH
32553: LD_INT 1
32555: ARRAY
32556: ST_TO_ADDR
// end ; end ;
32557: LD_VAR 0 4
32561: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32562: LD_INT 0
32564: PPUSH
32565: PPUSH
// if not list then
32566: LD_VAR 0 1
32570: NOT
32571: IFFALSE 32575
// exit ;
32573: GO 32666
// i := list [ pos1 ] ;
32575: LD_ADDR_VAR 0 5
32579: PUSH
32580: LD_VAR 0 1
32584: PUSH
32585: LD_VAR 0 2
32589: ARRAY
32590: ST_TO_ADDR
// if not i then
32591: LD_VAR 0 5
32595: NOT
32596: IFFALSE 32600
// exit ;
32598: GO 32666
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32600: LD_ADDR_VAR 0 1
32604: PUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: LD_VAR 0 1
32619: PUSH
32620: LD_VAR 0 3
32624: ARRAY
32625: PPUSH
32626: CALL_OW 1
32630: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32631: LD_ADDR_VAR 0 1
32635: PUSH
32636: LD_VAR 0 1
32640: PPUSH
32641: LD_VAR 0 3
32645: PPUSH
32646: LD_VAR 0 5
32650: PPUSH
32651: CALL_OW 1
32655: ST_TO_ADDR
// result := list ;
32656: LD_ADDR_VAR 0 4
32660: PUSH
32661: LD_VAR 0 1
32665: ST_TO_ADDR
// end ;
32666: LD_VAR 0 4
32670: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32671: LD_INT 0
32673: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32674: LD_ADDR_VAR 0 5
32678: PUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 250
32688: PPUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 251
32698: PPUSH
32699: LD_VAR 0 2
32703: PPUSH
32704: LD_VAR 0 3
32708: PPUSH
32709: LD_VAR 0 4
32713: PPUSH
32714: CALL 33092 0 5
32718: ST_TO_ADDR
// end ;
32719: LD_VAR 0 5
32723: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32724: LD_INT 0
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
// if not list or not unit then
32730: LD_VAR 0 2
32734: NOT
32735: PUSH
32736: LD_VAR 0 1
32740: NOT
32741: OR
32742: IFFALSE 32746
// exit ;
32744: GO 33087
// result := [ ] ;
32746: LD_ADDR_VAR 0 5
32750: PUSH
32751: EMPTY
32752: ST_TO_ADDR
// for i in list do
32753: LD_ADDR_VAR 0 6
32757: PUSH
32758: LD_VAR 0 2
32762: PUSH
32763: FOR_IN
32764: IFFALSE 32982
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32766: LD_ADDR_VAR 0 8
32770: PUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: LD_VAR 0 6
32780: PUSH
32781: LD_INT 1
32783: ARRAY
32784: PPUSH
32785: LD_VAR 0 6
32789: PUSH
32790: LD_INT 2
32792: ARRAY
32793: PPUSH
32794: CALL_OW 297
32798: ST_TO_ADDR
// if not Count ( result ) then
32799: LD_VAR 0 5
32803: PPUSH
32804: CALL 29376 0 1
32808: NOT
32809: IFFALSE 32842
// begin result := Join ( result , [ i , tmp ] ) ;
32811: LD_ADDR_VAR 0 5
32815: PUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: LD_VAR 0 6
32825: PUSH
32826: LD_VAR 0 8
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PPUSH
32835: CALL 64985 0 2
32839: ST_TO_ADDR
// continue ;
32840: GO 32763
// end ; if result [ result ] [ 2 ] <= tmp then
32842: LD_VAR 0 5
32846: PUSH
32847: LD_VAR 0 5
32851: ARRAY
32852: PUSH
32853: LD_INT 2
32855: ARRAY
32856: PUSH
32857: LD_VAR 0 8
32861: LESSEQUAL
32862: IFFALSE 32895
// result := Join ( result , [ i , tmp ] ) else
32864: LD_ADDR_VAR 0 5
32868: PUSH
32869: LD_VAR 0 5
32873: PPUSH
32874: LD_VAR 0 6
32878: PUSH
32879: LD_VAR 0 8
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PPUSH
32888: CALL 64985 0 2
32892: ST_TO_ADDR
32893: GO 32980
// begin for j := 1 to Count ( result ) do
32895: LD_ADDR_VAR 0 7
32899: PUSH
32900: DOUBLE
32901: LD_INT 1
32903: DEC
32904: ST_TO_ADDR
32905: LD_VAR 0 5
32909: PPUSH
32910: CALL 29376 0 1
32914: PUSH
32915: FOR_TO
32916: IFFALSE 32978
// begin if tmp < result [ j ] [ 2 ] then
32918: LD_VAR 0 8
32922: PUSH
32923: LD_VAR 0 5
32927: PUSH
32928: LD_VAR 0 7
32932: ARRAY
32933: PUSH
32934: LD_INT 2
32936: ARRAY
32937: LESS
32938: IFFALSE 32976
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32940: LD_ADDR_VAR 0 5
32944: PUSH
32945: LD_VAR 0 5
32949: PPUSH
32950: LD_VAR 0 7
32954: PPUSH
32955: LD_VAR 0 6
32959: PUSH
32960: LD_VAR 0 8
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PPUSH
32969: CALL_OW 2
32973: ST_TO_ADDR
// break ;
32974: GO 32978
// end ; end ;
32976: GO 32915
32978: POP
32979: POP
// end ; end ;
32980: GO 32763
32982: POP
32983: POP
// if result and not asc then
32984: LD_VAR 0 5
32988: PUSH
32989: LD_VAR 0 3
32993: NOT
32994: AND
32995: IFFALSE 33012
// result := ReverseArray ( result ) ;
32997: LD_ADDR_VAR 0 5
33001: PUSH
33002: LD_VAR 0 5
33006: PPUSH
33007: CALL 60252 0 1
33011: ST_TO_ADDR
// tmp := [ ] ;
33012: LD_ADDR_VAR 0 8
33016: PUSH
33017: EMPTY
33018: ST_TO_ADDR
// if mode then
33019: LD_VAR 0 4
33023: IFFALSE 33087
// begin for i := 1 to result do
33025: LD_ADDR_VAR 0 6
33029: PUSH
33030: DOUBLE
33031: LD_INT 1
33033: DEC
33034: ST_TO_ADDR
33035: LD_VAR 0 5
33039: PUSH
33040: FOR_TO
33041: IFFALSE 33075
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33043: LD_ADDR_VAR 0 8
33047: PUSH
33048: LD_VAR 0 8
33052: PPUSH
33053: LD_VAR 0 5
33057: PUSH
33058: LD_VAR 0 6
33062: ARRAY
33063: PUSH
33064: LD_INT 1
33066: ARRAY
33067: PPUSH
33068: CALL 64985 0 2
33072: ST_TO_ADDR
33073: GO 33040
33075: POP
33076: POP
// result := tmp ;
33077: LD_ADDR_VAR 0 5
33081: PUSH
33082: LD_VAR 0 8
33086: ST_TO_ADDR
// end ; end ;
33087: LD_VAR 0 5
33091: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33092: LD_INT 0
33094: PPUSH
33095: PPUSH
33096: PPUSH
33097: PPUSH
// if not list then
33098: LD_VAR 0 3
33102: NOT
33103: IFFALSE 33107
// exit ;
33105: GO 33495
// result := [ ] ;
33107: LD_ADDR_VAR 0 6
33111: PUSH
33112: EMPTY
33113: ST_TO_ADDR
// for i in list do
33114: LD_ADDR_VAR 0 7
33118: PUSH
33119: LD_VAR 0 3
33123: PUSH
33124: FOR_IN
33125: IFFALSE 33327
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33127: LD_ADDR_VAR 0 9
33131: PUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_VAR 0 2
33146: PPUSH
33147: CALL_OW 297
33151: ST_TO_ADDR
// if not result then
33152: LD_VAR 0 6
33156: NOT
33157: IFFALSE 33183
// result := [ [ i , tmp ] ] else
33159: LD_ADDR_VAR 0 6
33163: PUSH
33164: LD_VAR 0 7
33168: PUSH
33169: LD_VAR 0 9
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: EMPTY
33179: LIST
33180: ST_TO_ADDR
33181: GO 33325
// begin if result [ result ] [ 2 ] <= tmp then
33183: LD_VAR 0 6
33187: PUSH
33188: LD_VAR 0 6
33192: ARRAY
33193: PUSH
33194: LD_INT 2
33196: ARRAY
33197: PUSH
33198: LD_VAR 0 9
33202: LESSEQUAL
33203: IFFALSE 33245
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33205: LD_ADDR_VAR 0 6
33209: PUSH
33210: LD_VAR 0 6
33214: PPUSH
33215: LD_VAR 0 6
33219: PUSH
33220: LD_INT 1
33222: PLUS
33223: PPUSH
33224: LD_VAR 0 7
33228: PUSH
33229: LD_VAR 0 9
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PPUSH
33238: CALL_OW 2
33242: ST_TO_ADDR
33243: GO 33325
// for j := 1 to result do
33245: LD_ADDR_VAR 0 8
33249: PUSH
33250: DOUBLE
33251: LD_INT 1
33253: DEC
33254: ST_TO_ADDR
33255: LD_VAR 0 6
33259: PUSH
33260: FOR_TO
33261: IFFALSE 33323
// begin if tmp < result [ j ] [ 2 ] then
33263: LD_VAR 0 9
33267: PUSH
33268: LD_VAR 0 6
33272: PUSH
33273: LD_VAR 0 8
33277: ARRAY
33278: PUSH
33279: LD_INT 2
33281: ARRAY
33282: LESS
33283: IFFALSE 33321
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33285: LD_ADDR_VAR 0 6
33289: PUSH
33290: LD_VAR 0 6
33294: PPUSH
33295: LD_VAR 0 8
33299: PPUSH
33300: LD_VAR 0 7
33304: PUSH
33305: LD_VAR 0 9
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 2
33318: ST_TO_ADDR
// break ;
33319: GO 33323
// end ; end ;
33321: GO 33260
33323: POP
33324: POP
// end ; end ;
33325: GO 33124
33327: POP
33328: POP
// if result and not asc then
33329: LD_VAR 0 6
33333: PUSH
33334: LD_VAR 0 4
33338: NOT
33339: AND
33340: IFFALSE 33415
// begin tmp := result ;
33342: LD_ADDR_VAR 0 9
33346: PUSH
33347: LD_VAR 0 6
33351: ST_TO_ADDR
// for i = tmp downto 1 do
33352: LD_ADDR_VAR 0 7
33356: PUSH
33357: DOUBLE
33358: LD_VAR 0 9
33362: INC
33363: ST_TO_ADDR
33364: LD_INT 1
33366: PUSH
33367: FOR_DOWNTO
33368: IFFALSE 33413
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33370: LD_ADDR_VAR 0 6
33374: PUSH
33375: LD_VAR 0 6
33379: PPUSH
33380: LD_VAR 0 9
33384: PUSH
33385: LD_VAR 0 7
33389: MINUS
33390: PUSH
33391: LD_INT 1
33393: PLUS
33394: PPUSH
33395: LD_VAR 0 9
33399: PUSH
33400: LD_VAR 0 7
33404: ARRAY
33405: PPUSH
33406: CALL_OW 1
33410: ST_TO_ADDR
33411: GO 33367
33413: POP
33414: POP
// end ; tmp := [ ] ;
33415: LD_ADDR_VAR 0 9
33419: PUSH
33420: EMPTY
33421: ST_TO_ADDR
// if mode then
33422: LD_VAR 0 5
33426: IFFALSE 33495
// begin for i = 1 to result do
33428: LD_ADDR_VAR 0 7
33432: PUSH
33433: DOUBLE
33434: LD_INT 1
33436: DEC
33437: ST_TO_ADDR
33438: LD_VAR 0 6
33442: PUSH
33443: FOR_TO
33444: IFFALSE 33483
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33446: LD_ADDR_VAR 0 9
33450: PUSH
33451: LD_VAR 0 9
33455: PPUSH
33456: LD_VAR 0 7
33460: PPUSH
33461: LD_VAR 0 6
33465: PUSH
33466: LD_VAR 0 7
33470: ARRAY
33471: PUSH
33472: LD_INT 1
33474: ARRAY
33475: PPUSH
33476: CALL_OW 1
33480: ST_TO_ADDR
33481: GO 33443
33483: POP
33484: POP
// result := tmp ;
33485: LD_ADDR_VAR 0 6
33489: PUSH
33490: LD_VAR 0 9
33494: ST_TO_ADDR
// end ; end ;
33495: LD_VAR 0 6
33499: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33500: LD_INT 0
33502: PPUSH
33503: PPUSH
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33508: LD_ADDR_VAR 0 5
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
// if not x or not y then
33530: LD_VAR 0 2
33534: NOT
33535: PUSH
33536: LD_VAR 0 3
33540: NOT
33541: OR
33542: IFFALSE 33546
// exit ;
33544: GO 35196
// if not range then
33546: LD_VAR 0 4
33550: NOT
33551: IFFALSE 33561
// range := 10 ;
33553: LD_ADDR_VAR 0 4
33557: PUSH
33558: LD_INT 10
33560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33561: LD_ADDR_VAR 0 8
33565: PUSH
33566: LD_INT 81
33568: PUSH
33569: LD_VAR 0 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 92
33580: PUSH
33581: LD_VAR 0 2
33585: PUSH
33586: LD_VAR 0 3
33590: PUSH
33591: LD_VAR 0 4
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: LD_INT 21
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: PPUSH
33624: CALL_OW 69
33628: ST_TO_ADDR
// if not tmp then
33629: LD_VAR 0 8
33633: NOT
33634: IFFALSE 33638
// exit ;
33636: GO 35196
// for i in tmp do
33638: LD_ADDR_VAR 0 6
33642: PUSH
33643: LD_VAR 0 8
33647: PUSH
33648: FOR_IN
33649: IFFALSE 35171
// begin points := [ 0 , 0 , 0 ] ;
33651: LD_ADDR_VAR 0 9
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
// bpoints := 1 ;
33670: LD_ADDR_VAR 0 10
33674: PUSH
33675: LD_INT 1
33677: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33678: LD_VAR 0 6
33682: PPUSH
33683: CALL_OW 247
33687: PUSH
33688: LD_INT 1
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 34274
33696: POP
// begin if GetClass ( i ) = 1 then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 257
33706: PUSH
33707: LD_INT 1
33709: EQUAL
33710: IFFALSE 33731
// points := [ 10 , 5 , 3 ] ;
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: LD_INT 10
33719: PUSH
33720: LD_INT 5
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33731: LD_VAR 0 6
33735: PPUSH
33736: CALL_OW 257
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 4
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: LIST
33754: IN
33755: IFFALSE 33776
// points := [ 3 , 2 , 1 ] ;
33757: LD_ADDR_VAR 0 9
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 2
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33776: LD_VAR 0 6
33780: PPUSH
33781: CALL_OW 257
33785: PUSH
33786: LD_INT 5
33788: EQUAL
33789: IFFALSE 33810
// points := [ 130 , 5 , 2 ] ;
33791: LD_ADDR_VAR 0 9
33795: PUSH
33796: LD_INT 130
33798: PUSH
33799: LD_INT 5
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33810: LD_VAR 0 6
33814: PPUSH
33815: CALL_OW 257
33819: PUSH
33820: LD_INT 8
33822: EQUAL
33823: IFFALSE 33844
// points := [ 35 , 35 , 30 ] ;
33825: LD_ADDR_VAR 0 9
33829: PUSH
33830: LD_INT 35
33832: PUSH
33833: LD_INT 35
33835: PUSH
33836: LD_INT 30
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33844: LD_VAR 0 6
33848: PPUSH
33849: CALL_OW 257
33853: PUSH
33854: LD_INT 9
33856: EQUAL
33857: IFFALSE 33878
// points := [ 20 , 55 , 40 ] ;
33859: LD_ADDR_VAR 0 9
33863: PUSH
33864: LD_INT 20
33866: PUSH
33867: LD_INT 55
33869: PUSH
33870: LD_INT 40
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33878: LD_VAR 0 6
33882: PPUSH
33883: CALL_OW 257
33887: PUSH
33888: LD_INT 12
33890: PUSH
33891: LD_INT 16
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: IN
33898: IFFALSE 33919
// points := [ 5 , 3 , 2 ] ;
33900: LD_ADDR_VAR 0 9
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33919: LD_VAR 0 6
33923: PPUSH
33924: CALL_OW 257
33928: PUSH
33929: LD_INT 17
33931: EQUAL
33932: IFFALSE 33953
// points := [ 100 , 50 , 75 ] ;
33934: LD_ADDR_VAR 0 9
33938: PUSH
33939: LD_INT 100
33941: PUSH
33942: LD_INT 50
33944: PUSH
33945: LD_INT 75
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33953: LD_VAR 0 6
33957: PPUSH
33958: CALL_OW 257
33962: PUSH
33963: LD_INT 15
33965: EQUAL
33966: IFFALSE 33987
// points := [ 10 , 5 , 3 ] ;
33968: LD_ADDR_VAR 0 9
33972: PUSH
33973: LD_INT 10
33975: PUSH
33976: LD_INT 5
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33987: LD_VAR 0 6
33991: PPUSH
33992: CALL_OW 257
33996: PUSH
33997: LD_INT 14
33999: EQUAL
34000: IFFALSE 34021
// points := [ 10 , 0 , 0 ] ;
34002: LD_ADDR_VAR 0 9
34006: PUSH
34007: LD_INT 10
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34021: LD_VAR 0 6
34025: PPUSH
34026: CALL_OW 257
34030: PUSH
34031: LD_INT 11
34033: EQUAL
34034: IFFALSE 34055
// points := [ 30 , 10 , 5 ] ;
34036: LD_ADDR_VAR 0 9
34040: PUSH
34041: LD_INT 30
34043: PUSH
34044: LD_INT 10
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_INT 5
34062: PPUSH
34063: CALL_OW 321
34067: PUSH
34068: LD_INT 2
34070: EQUAL
34071: IFFALSE 34088
// bpoints := bpoints * 1.8 ;
34073: LD_ADDR_VAR 0 10
34077: PUSH
34078: LD_VAR 0 10
34082: PUSH
34083: LD_REAL  1.80000000000000E+0000
34086: MUL
34087: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34088: LD_VAR 0 6
34092: PPUSH
34093: CALL_OW 257
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 4
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: IN
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: LD_INT 51
34124: PPUSH
34125: CALL_OW 321
34129: PUSH
34130: LD_INT 2
34132: EQUAL
34133: AND
34134: IFFALSE 34151
// bpoints := bpoints * 1.2 ;
34136: LD_ADDR_VAR 0 10
34140: PUSH
34141: LD_VAR 0 10
34145: PUSH
34146: LD_REAL  1.20000000000000E+0000
34149: MUL
34150: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34151: LD_VAR 0 6
34155: PPUSH
34156: CALL_OW 257
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: LD_INT 7
34166: PUSH
34167: LD_INT 9
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: IN
34175: PUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: LD_INT 52
34183: PPUSH
34184: CALL_OW 321
34188: PUSH
34189: LD_INT 2
34191: EQUAL
34192: AND
34193: IFFALSE 34210
// bpoints := bpoints * 1.5 ;
34195: LD_ADDR_VAR 0 10
34199: PUSH
34200: LD_VAR 0 10
34204: PUSH
34205: LD_REAL  1.50000000000000E+0000
34208: MUL
34209: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34210: LD_VAR 0 1
34214: PPUSH
34215: LD_INT 66
34217: PPUSH
34218: CALL_OW 321
34222: PUSH
34223: LD_INT 2
34225: EQUAL
34226: IFFALSE 34243
// bpoints := bpoints * 1.1 ;
34228: LD_ADDR_VAR 0 10
34232: PUSH
34233: LD_VAR 0 10
34237: PUSH
34238: LD_REAL  1.10000000000000E+0000
34241: MUL
34242: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34243: LD_ADDR_VAR 0 10
34247: PUSH
34248: LD_VAR 0 10
34252: PUSH
34253: LD_VAR 0 6
34257: PPUSH
34258: LD_INT 1
34260: PPUSH
34261: CALL_OW 259
34265: PUSH
34266: LD_REAL  1.15000000000000E+0000
34269: MUL
34270: MUL
34271: ST_TO_ADDR
// end ; unit_vehicle :
34272: GO 35100
34274: LD_INT 2
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 35088
34282: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34283: LD_VAR 0 6
34287: PPUSH
34288: CALL_OW 264
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 42
34298: PUSH
34299: LD_INT 24
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: IN
34307: IFFALSE 34328
// points := [ 25 , 5 , 3 ] ;
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_INT 25
34316: PUSH
34317: LD_INT 5
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34328: LD_VAR 0 6
34332: PPUSH
34333: CALL_OW 264
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: LD_INT 43
34343: PUSH
34344: LD_INT 25
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: IN
34352: IFFALSE 34373
// points := [ 40 , 15 , 5 ] ;
34354: LD_ADDR_VAR 0 9
34358: PUSH
34359: LD_INT 40
34361: PUSH
34362: LD_INT 15
34364: PUSH
34365: LD_INT 5
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34373: LD_VAR 0 6
34377: PPUSH
34378: CALL_OW 264
34382: PUSH
34383: LD_INT 3
34385: PUSH
34386: LD_INT 23
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 7 , 25 , 8 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 7
34402: PUSH
34403: LD_INT 25
34405: PUSH
34406: LD_INT 8
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 5
34426: PUSH
34427: LD_INT 27
34429: PUSH
34430: LD_INT 44
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: IN
34438: IFFALSE 34459
// points := [ 14 , 50 , 16 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 14
34447: PUSH
34448: LD_INT 50
34450: PUSH
34451: LD_INT 16
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 264
34468: PUSH
34469: LD_INT 6
34471: PUSH
34472: LD_INT 46
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: IN
34479: IFFALSE 34500
// points := [ 32 , 120 , 70 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 32
34488: PUSH
34489: LD_INT 120
34491: PUSH
34492: LD_INT 70
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 264
34509: PUSH
34510: LD_INT 7
34512: PUSH
34513: LD_INT 28
34515: PUSH
34516: LD_INT 45
34518: PUSH
34519: LD_INT 92
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: IN
34528: IFFALSE 34549
// points := [ 35 , 20 , 45 ] ;
34530: LD_ADDR_VAR 0 9
34534: PUSH
34535: LD_INT 35
34537: PUSH
34538: LD_INT 20
34540: PUSH
34541: LD_INT 45
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34549: LD_VAR 0 6
34553: PPUSH
34554: CALL_OW 264
34558: PUSH
34559: LD_INT 47
34561: PUSH
34562: EMPTY
34563: LIST
34564: IN
34565: IFFALSE 34586
// points := [ 67 , 45 , 75 ] ;
34567: LD_ADDR_VAR 0 9
34571: PUSH
34572: LD_INT 67
34574: PUSH
34575: LD_INT 45
34577: PUSH
34578: LD_INT 75
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34586: LD_VAR 0 6
34590: PPUSH
34591: CALL_OW 264
34595: PUSH
34596: LD_INT 26
34598: PUSH
34599: EMPTY
34600: LIST
34601: IN
34602: IFFALSE 34623
// points := [ 120 , 30 , 80 ] ;
34604: LD_ADDR_VAR 0 9
34608: PUSH
34609: LD_INT 120
34611: PUSH
34612: LD_INT 30
34614: PUSH
34615: LD_INT 80
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34623: LD_VAR 0 6
34627: PPUSH
34628: CALL_OW 264
34632: PUSH
34633: LD_INT 22
34635: PUSH
34636: EMPTY
34637: LIST
34638: IN
34639: IFFALSE 34660
// points := [ 40 , 1 , 1 ] ;
34641: LD_ADDR_VAR 0 9
34645: PUSH
34646: LD_INT 40
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34660: LD_VAR 0 6
34664: PPUSH
34665: CALL_OW 264
34669: PUSH
34670: LD_INT 29
34672: PUSH
34673: EMPTY
34674: LIST
34675: IN
34676: IFFALSE 34697
// points := [ 70 , 200 , 400 ] ;
34678: LD_ADDR_VAR 0 9
34682: PUSH
34683: LD_INT 70
34685: PUSH
34686: LD_INT 200
34688: PUSH
34689: LD_INT 400
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34697: LD_VAR 0 6
34701: PPUSH
34702: CALL_OW 264
34706: PUSH
34707: LD_INT 14
34709: PUSH
34710: LD_INT 53
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: IN
34717: IFFALSE 34738
// points := [ 40 , 10 , 20 ] ;
34719: LD_ADDR_VAR 0 9
34723: PUSH
34724: LD_INT 40
34726: PUSH
34727: LD_INT 10
34729: PUSH
34730: LD_INT 20
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34738: LD_VAR 0 6
34742: PPUSH
34743: CALL_OW 264
34747: PUSH
34748: LD_INT 9
34750: PUSH
34751: EMPTY
34752: LIST
34753: IN
34754: IFFALSE 34775
// points := [ 5 , 70 , 20 ] ;
34756: LD_ADDR_VAR 0 9
34760: PUSH
34761: LD_INT 5
34763: PUSH
34764: LD_INT 70
34766: PUSH
34767: LD_INT 20
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34775: LD_VAR 0 6
34779: PPUSH
34780: CALL_OW 264
34784: PUSH
34785: LD_INT 10
34787: PUSH
34788: EMPTY
34789: LIST
34790: IN
34791: IFFALSE 34812
// points := [ 35 , 110 , 70 ] ;
34793: LD_ADDR_VAR 0 9
34797: PUSH
34798: LD_INT 35
34800: PUSH
34801: LD_INT 110
34803: PUSH
34804: LD_INT 70
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34812: LD_VAR 0 6
34816: PPUSH
34817: CALL_OW 265
34821: PUSH
34822: LD_INT 25
34824: EQUAL
34825: IFFALSE 34846
// points := [ 80 , 65 , 100 ] ;
34827: LD_ADDR_VAR 0 9
34831: PUSH
34832: LD_INT 80
34834: PUSH
34835: LD_INT 65
34837: PUSH
34838: LD_INT 100
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34846: LD_VAR 0 6
34850: PPUSH
34851: CALL_OW 263
34855: PUSH
34856: LD_INT 1
34858: EQUAL
34859: IFFALSE 34894
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34861: LD_ADDR_VAR 0 10
34865: PUSH
34866: LD_VAR 0 10
34870: PUSH
34871: LD_VAR 0 6
34875: PPUSH
34876: CALL_OW 311
34880: PPUSH
34881: LD_INT 3
34883: PPUSH
34884: CALL_OW 259
34888: PUSH
34889: LD_INT 4
34891: MUL
34892: MUL
34893: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34894: LD_VAR 0 6
34898: PPUSH
34899: CALL_OW 263
34903: PUSH
34904: LD_INT 2
34906: EQUAL
34907: IFFALSE 34958
// begin j := IsControledBy ( i ) ;
34909: LD_ADDR_VAR 0 7
34913: PUSH
34914: LD_VAR 0 6
34918: PPUSH
34919: CALL_OW 312
34923: ST_TO_ADDR
// if j then
34924: LD_VAR 0 7
34928: IFFALSE 34958
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34930: LD_ADDR_VAR 0 10
34934: PUSH
34935: LD_VAR 0 10
34939: PUSH
34940: LD_VAR 0 7
34944: PPUSH
34945: LD_INT 3
34947: PPUSH
34948: CALL_OW 259
34952: PUSH
34953: LD_INT 3
34955: MUL
34956: MUL
34957: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34958: LD_VAR 0 6
34962: PPUSH
34963: CALL_OW 264
34967: PUSH
34968: LD_INT 5
34970: PUSH
34971: LD_INT 6
34973: PUSH
34974: LD_INT 46
34976: PUSH
34977: LD_INT 44
34979: PUSH
34980: LD_INT 47
34982: PUSH
34983: LD_INT 45
34985: PUSH
34986: LD_INT 28
34988: PUSH
34989: LD_INT 7
34991: PUSH
34992: LD_INT 27
34994: PUSH
34995: LD_INT 29
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: IN
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: LD_INT 52
35018: PPUSH
35019: CALL_OW 321
35023: PUSH
35024: LD_INT 2
35026: EQUAL
35027: AND
35028: IFFALSE 35045
// bpoints := bpoints * 1.2 ;
35030: LD_ADDR_VAR 0 10
35034: PUSH
35035: LD_VAR 0 10
35039: PUSH
35040: LD_REAL  1.20000000000000E+0000
35043: MUL
35044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35045: LD_VAR 0 6
35049: PPUSH
35050: CALL_OW 264
35054: PUSH
35055: LD_INT 6
35057: PUSH
35058: LD_INT 46
35060: PUSH
35061: LD_INT 47
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: IN
35069: IFFALSE 35086
// bpoints := bpoints * 1.2 ;
35071: LD_ADDR_VAR 0 10
35075: PUSH
35076: LD_VAR 0 10
35080: PUSH
35081: LD_REAL  1.20000000000000E+0000
35084: MUL
35085: ST_TO_ADDR
// end ; unit_building :
35086: GO 35100
35088: LD_INT 3
35090: DOUBLE
35091: EQUAL
35092: IFTRUE 35096
35094: GO 35099
35096: POP
// ; end ;
35097: GO 35100
35099: POP
// for j = 1 to 3 do
35100: LD_ADDR_VAR 0 7
35104: PUSH
35105: DOUBLE
35106: LD_INT 1
35108: DEC
35109: ST_TO_ADDR
35110: LD_INT 3
35112: PUSH
35113: FOR_TO
35114: IFFALSE 35167
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35116: LD_ADDR_VAR 0 5
35120: PUSH
35121: LD_VAR 0 5
35125: PPUSH
35126: LD_VAR 0 7
35130: PPUSH
35131: LD_VAR 0 5
35135: PUSH
35136: LD_VAR 0 7
35140: ARRAY
35141: PUSH
35142: LD_VAR 0 9
35146: PUSH
35147: LD_VAR 0 7
35151: ARRAY
35152: PUSH
35153: LD_VAR 0 10
35157: MUL
35158: PLUS
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
35165: GO 35113
35167: POP
35168: POP
// end ;
35169: GO 33648
35171: POP
35172: POP
// result := Replace ( result , 4 , tmp ) ;
35173: LD_ADDR_VAR 0 5
35177: PUSH
35178: LD_VAR 0 5
35182: PPUSH
35183: LD_INT 4
35185: PPUSH
35186: LD_VAR 0 8
35190: PPUSH
35191: CALL_OW 1
35195: ST_TO_ADDR
// end ;
35196: LD_VAR 0 5
35200: RET
// export function DangerAtRange ( unit , range ) ; begin
35201: LD_INT 0
35203: PPUSH
// if not unit then
35204: LD_VAR 0 1
35208: NOT
35209: IFFALSE 35213
// exit ;
35211: GO 35258
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35213: LD_ADDR_VAR 0 3
35217: PUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 255
35227: PPUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 250
35237: PPUSH
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 251
35247: PPUSH
35248: LD_VAR 0 2
35252: PPUSH
35253: CALL 33500 0 4
35257: ST_TO_ADDR
// end ;
35258: LD_VAR 0 3
35262: RET
// export function DangerInArea ( side , area ) ; begin
35263: LD_INT 0
35265: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_VAR 0 2
35275: PPUSH
35276: LD_INT 81
35278: PUSH
35279: LD_VAR 0 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PPUSH
35288: CALL_OW 70
35292: ST_TO_ADDR
// end ;
35293: LD_VAR 0 3
35297: RET
// export function IsExtension ( b ) ; begin
35298: LD_INT 0
35300: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35301: LD_ADDR_VAR 0 2
35305: PUSH
35306: LD_VAR 0 1
35310: PUSH
35311: LD_INT 23
35313: PUSH
35314: LD_INT 20
35316: PUSH
35317: LD_INT 22
35319: PUSH
35320: LD_INT 17
35322: PUSH
35323: LD_INT 24
35325: PUSH
35326: LD_INT 21
35328: PUSH
35329: LD_INT 19
35331: PUSH
35332: LD_INT 16
35334: PUSH
35335: LD_INT 25
35337: PUSH
35338: LD_INT 18
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: IN
35353: ST_TO_ADDR
// end ;
35354: LD_VAR 0 2
35358: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
35363: PPUSH
// result := [ ] ;
35364: LD_ADDR_VAR 0 4
35368: PUSH
35369: EMPTY
35370: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35371: LD_ADDR_VAR 0 5
35375: PUSH
35376: LD_VAR 0 2
35380: PPUSH
35381: LD_INT 21
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PPUSH
35391: CALL_OW 70
35395: ST_TO_ADDR
// if not tmp then
35396: LD_VAR 0 5
35400: NOT
35401: IFFALSE 35405
// exit ;
35403: GO 35469
// if checkLink then
35405: LD_VAR 0 3
35409: IFFALSE 35459
// begin for i in tmp do
35411: LD_ADDR_VAR 0 6
35415: PUSH
35416: LD_VAR 0 5
35420: PUSH
35421: FOR_IN
35422: IFFALSE 35457
// if GetBase ( i ) <> base then
35424: LD_VAR 0 6
35428: PPUSH
35429: CALL_OW 274
35433: PUSH
35434: LD_VAR 0 1
35438: NONEQUAL
35439: IFFALSE 35455
// ComLinkToBase ( base , i ) ;
35441: LD_VAR 0 1
35445: PPUSH
35446: LD_VAR 0 6
35450: PPUSH
35451: CALL_OW 169
35455: GO 35421
35457: POP
35458: POP
// end ; result := tmp ;
35459: LD_ADDR_VAR 0 4
35463: PUSH
35464: LD_VAR 0 5
35468: ST_TO_ADDR
// end ;
35469: LD_VAR 0 4
35473: RET
// export function ComComplete ( units , b ) ; var i ; begin
35474: LD_INT 0
35476: PPUSH
35477: PPUSH
// if not units then
35478: LD_VAR 0 1
35482: NOT
35483: IFFALSE 35487
// exit ;
35485: GO 35577
// for i in units do
35487: LD_ADDR_VAR 0 4
35491: PUSH
35492: LD_VAR 0 1
35496: PUSH
35497: FOR_IN
35498: IFFALSE 35575
// if BuildingStatus ( b ) = bs_build then
35500: LD_VAR 0 2
35504: PPUSH
35505: CALL_OW 461
35509: PUSH
35510: LD_INT 1
35512: EQUAL
35513: IFFALSE 35573
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35515: LD_VAR 0 4
35519: PPUSH
35520: LD_STRING h
35522: PUSH
35523: LD_VAR 0 2
35527: PPUSH
35528: CALL_OW 250
35532: PUSH
35533: LD_VAR 0 2
35537: PPUSH
35538: CALL_OW 251
35542: PUSH
35543: LD_VAR 0 2
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: PUSH
35566: EMPTY
35567: LIST
35568: PPUSH
35569: CALL_OW 446
35573: GO 35497
35575: POP
35576: POP
// end ;
35577: LD_VAR 0 3
35581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35582: LD_INT 0
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35590: LD_VAR 0 1
35594: NOT
35595: PUSH
35596: LD_VAR 0 1
35600: PPUSH
35601: CALL_OW 263
35605: PUSH
35606: LD_INT 2
35608: NONEQUAL
35609: OR
35610: IFFALSE 35614
// exit ;
35612: GO 35930
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35614: LD_ADDR_VAR 0 6
35618: PUSH
35619: LD_INT 22
35621: PUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 255
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 30
35641: PUSH
35642: LD_INT 36
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 34
35651: PUSH
35652: LD_INT 31
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PPUSH
35668: CALL_OW 69
35672: ST_TO_ADDR
// if not tmp then
35673: LD_VAR 0 6
35677: NOT
35678: IFFALSE 35682
// exit ;
35680: GO 35930
// result := [ ] ;
35682: LD_ADDR_VAR 0 2
35686: PUSH
35687: EMPTY
35688: ST_TO_ADDR
// for i in tmp do
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_VAR 0 6
35698: PUSH
35699: FOR_IN
35700: IFFALSE 35771
// begin t := UnitsInside ( i ) ;
35702: LD_ADDR_VAR 0 4
35706: PUSH
35707: LD_VAR 0 3
35711: PPUSH
35712: CALL_OW 313
35716: ST_TO_ADDR
// if t then
35717: LD_VAR 0 4
35721: IFFALSE 35769
// for j in t do
35723: LD_ADDR_VAR 0 7
35727: PUSH
35728: LD_VAR 0 4
35732: PUSH
35733: FOR_IN
35734: IFFALSE 35767
// result := Replace ( result , result + 1 , j ) ;
35736: LD_ADDR_VAR 0 2
35740: PUSH
35741: LD_VAR 0 2
35745: PPUSH
35746: LD_VAR 0 2
35750: PUSH
35751: LD_INT 1
35753: PLUS
35754: PPUSH
35755: LD_VAR 0 7
35759: PPUSH
35760: CALL_OW 1
35764: ST_TO_ADDR
35765: GO 35733
35767: POP
35768: POP
// end ;
35769: GO 35699
35771: POP
35772: POP
// if not result then
35773: LD_VAR 0 2
35777: NOT
35778: IFFALSE 35782
// exit ;
35780: GO 35930
// mech := result [ 1 ] ;
35782: LD_ADDR_VAR 0 5
35786: PUSH
35787: LD_VAR 0 2
35791: PUSH
35792: LD_INT 1
35794: ARRAY
35795: ST_TO_ADDR
// if result > 1 then
35796: LD_VAR 0 2
35800: PUSH
35801: LD_INT 1
35803: GREATER
35804: IFFALSE 35916
// begin for i = 2 to result do
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: DOUBLE
35812: LD_INT 2
35814: DEC
35815: ST_TO_ADDR
35816: LD_VAR 0 2
35820: PUSH
35821: FOR_TO
35822: IFFALSE 35914
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35824: LD_ADDR_VAR 0 4
35828: PUSH
35829: LD_VAR 0 2
35833: PUSH
35834: LD_VAR 0 3
35838: ARRAY
35839: PPUSH
35840: LD_INT 3
35842: PPUSH
35843: CALL_OW 259
35847: PUSH
35848: LD_VAR 0 2
35852: PUSH
35853: LD_VAR 0 3
35857: ARRAY
35858: PPUSH
35859: CALL_OW 432
35863: MINUS
35864: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35865: LD_VAR 0 4
35869: PUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: LD_INT 3
35877: PPUSH
35878: CALL_OW 259
35882: PUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: CALL_OW 432
35892: MINUS
35893: GREATEREQUAL
35894: IFFALSE 35912
// mech := result [ i ] ;
35896: LD_ADDR_VAR 0 5
35900: PUSH
35901: LD_VAR 0 2
35905: PUSH
35906: LD_VAR 0 3
35910: ARRAY
35911: ST_TO_ADDR
// end ;
35912: GO 35821
35914: POP
35915: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35916: LD_VAR 0 1
35920: PPUSH
35921: LD_VAR 0 5
35925: PPUSH
35926: CALL_OW 135
// end ;
35930: LD_VAR 0 2
35934: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35935: LD_INT 0
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
35942: PPUSH
35943: PPUSH
35944: PPUSH
35945: PPUSH
35946: PPUSH
35947: PPUSH
35948: PPUSH
35949: PPUSH
// result := [ ] ;
35950: LD_ADDR_VAR 0 7
35954: PUSH
35955: EMPTY
35956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35957: LD_VAR 0 1
35961: PPUSH
35962: CALL_OW 266
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: IN
35977: NOT
35978: IFFALSE 35982
// exit ;
35980: GO 37616
// if name then
35982: LD_VAR 0 3
35986: IFFALSE 36002
// SetBName ( base_dep , name ) ;
35988: LD_VAR 0 1
35992: PPUSH
35993: LD_VAR 0 3
35997: PPUSH
35998: CALL_OW 500
// base := GetBase ( base_dep ) ;
36002: LD_ADDR_VAR 0 15
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 274
36016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36017: LD_ADDR_VAR 0 16
36021: PUSH
36022: LD_VAR 0 1
36026: PPUSH
36027: CALL_OW 255
36031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36032: LD_ADDR_VAR 0 17
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 248
36046: ST_TO_ADDR
// if sources then
36047: LD_VAR 0 5
36051: IFFALSE 36098
// for i = 1 to 3 do
36053: LD_ADDR_VAR 0 8
36057: PUSH
36058: DOUBLE
36059: LD_INT 1
36061: DEC
36062: ST_TO_ADDR
36063: LD_INT 3
36065: PUSH
36066: FOR_TO
36067: IFFALSE 36096
// AddResourceType ( base , i , sources [ i ] ) ;
36069: LD_VAR 0 15
36073: PPUSH
36074: LD_VAR 0 8
36078: PPUSH
36079: LD_VAR 0 5
36083: PUSH
36084: LD_VAR 0 8
36088: ARRAY
36089: PPUSH
36090: CALL_OW 276
36094: GO 36066
36096: POP
36097: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36098: LD_ADDR_VAR 0 18
36102: PUSH
36103: LD_VAR 0 15
36107: PPUSH
36108: LD_VAR 0 2
36112: PPUSH
36113: LD_INT 1
36115: PPUSH
36116: CALL 35359 0 3
36120: ST_TO_ADDR
// InitHc ;
36121: CALL_OW 19
// InitUc ;
36125: CALL_OW 18
// uc_side := side ;
36129: LD_ADDR_OWVAR 20
36133: PUSH
36134: LD_VAR 0 16
36138: ST_TO_ADDR
// uc_nation := nation ;
36139: LD_ADDR_OWVAR 21
36143: PUSH
36144: LD_VAR 0 17
36148: ST_TO_ADDR
// if buildings then
36149: LD_VAR 0 18
36153: IFFALSE 37475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36155: LD_ADDR_VAR 0 19
36159: PUSH
36160: LD_VAR 0 18
36164: PPUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 30
36170: PUSH
36171: LD_INT 29
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 30
36180: PUSH
36181: LD_INT 30
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: PPUSH
36193: CALL_OW 72
36197: ST_TO_ADDR
// if tmp then
36198: LD_VAR 0 19
36202: IFFALSE 36250
// for i in tmp do
36204: LD_ADDR_VAR 0 8
36208: PUSH
36209: LD_VAR 0 19
36213: PUSH
36214: FOR_IN
36215: IFFALSE 36248
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36217: LD_VAR 0 8
36221: PPUSH
36222: CALL_OW 250
36226: PPUSH
36227: LD_VAR 0 8
36231: PPUSH
36232: CALL_OW 251
36236: PPUSH
36237: LD_VAR 0 16
36241: PPUSH
36242: CALL_OW 441
36246: GO 36214
36248: POP
36249: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36250: LD_VAR 0 18
36254: PPUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 30
36260: PUSH
36261: LD_INT 32
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 30
36270: PUSH
36271: LD_INT 33
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: PPUSH
36283: CALL_OW 72
36287: IFFALSE 36375
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36289: LD_ADDR_VAR 0 8
36293: PUSH
36294: LD_VAR 0 18
36298: PPUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 30
36304: PUSH
36305: LD_INT 32
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 30
36314: PUSH
36315: LD_INT 33
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PPUSH
36327: CALL_OW 72
36331: PUSH
36332: FOR_IN
36333: IFFALSE 36373
// begin if not GetBWeapon ( i ) then
36335: LD_VAR 0 8
36339: PPUSH
36340: CALL_OW 269
36344: NOT
36345: IFFALSE 36371
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_VAR 0 8
36356: PPUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL 37621 0 2
36366: PPUSH
36367: CALL_OW 431
// end ;
36371: GO 36332
36373: POP
36374: POP
// end ; for i = 1 to personel do
36375: LD_ADDR_VAR 0 8
36379: PUSH
36380: DOUBLE
36381: LD_INT 1
36383: DEC
36384: ST_TO_ADDR
36385: LD_VAR 0 6
36389: PUSH
36390: FOR_TO
36391: IFFALSE 37455
// begin if i > 4 then
36393: LD_VAR 0 8
36397: PUSH
36398: LD_INT 4
36400: GREATER
36401: IFFALSE 36405
// break ;
36403: GO 37455
// case i of 1 :
36405: LD_VAR 0 8
36409: PUSH
36410: LD_INT 1
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36498
36418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36419: LD_ADDR_VAR 0 12
36423: PUSH
36424: LD_VAR 0 18
36428: PPUSH
36429: LD_INT 22
36431: PUSH
36432: LD_VAR 0 16
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 58
36443: PUSH
36444: EMPTY
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: LD_INT 30
36452: PUSH
36453: LD_INT 32
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 30
36462: PUSH
36463: LD_INT 4
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 30
36472: PUSH
36473: LD_INT 5
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: PPUSH
36491: CALL_OW 72
36495: ST_TO_ADDR
36496: GO 36720
36498: LD_INT 2
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36506
36504: GO 36568
36506: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36507: LD_ADDR_VAR 0 12
36511: PUSH
36512: LD_VAR 0 18
36516: PPUSH
36517: LD_INT 22
36519: PUSH
36520: LD_VAR 0 16
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 30
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PPUSH
36561: CALL_OW 72
36565: ST_TO_ADDR
36566: GO 36720
36568: LD_INT 3
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36576
36574: GO 36638
36576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36577: LD_ADDR_VAR 0 12
36581: PUSH
36582: LD_VAR 0 18
36586: PPUSH
36587: LD_INT 22
36589: PUSH
36590: LD_VAR 0 16
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 30
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 30
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PPUSH
36631: CALL_OW 72
36635: ST_TO_ADDR
36636: GO 36720
36638: LD_INT 4
36640: DOUBLE
36641: EQUAL
36642: IFTRUE 36646
36644: GO 36719
36646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36647: LD_ADDR_VAR 0 12
36651: PUSH
36652: LD_VAR 0 18
36656: PPUSH
36657: LD_INT 22
36659: PUSH
36660: LD_VAR 0 16
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 30
36674: PUSH
36675: LD_INT 6
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 30
36684: PUSH
36685: LD_INT 7
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 30
36694: PUSH
36695: LD_INT 8
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PPUSH
36712: CALL_OW 72
36716: ST_TO_ADDR
36717: GO 36720
36719: POP
// if i = 1 then
36720: LD_VAR 0 8
36724: PUSH
36725: LD_INT 1
36727: EQUAL
36728: IFFALSE 36839
// begin tmp := [ ] ;
36730: LD_ADDR_VAR 0 19
36734: PUSH
36735: EMPTY
36736: ST_TO_ADDR
// for j in f do
36737: LD_ADDR_VAR 0 9
36741: PUSH
36742: LD_VAR 0 12
36746: PUSH
36747: FOR_IN
36748: IFFALSE 36821
// if GetBType ( j ) = b_bunker then
36750: LD_VAR 0 9
36754: PPUSH
36755: CALL_OW 266
36759: PUSH
36760: LD_INT 32
36762: EQUAL
36763: IFFALSE 36790
// tmp := Insert ( tmp , 1 , j ) else
36765: LD_ADDR_VAR 0 19
36769: PUSH
36770: LD_VAR 0 19
36774: PPUSH
36775: LD_INT 1
36777: PPUSH
36778: LD_VAR 0 9
36782: PPUSH
36783: CALL_OW 2
36787: ST_TO_ADDR
36788: GO 36819
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36790: LD_ADDR_VAR 0 19
36794: PUSH
36795: LD_VAR 0 19
36799: PPUSH
36800: LD_VAR 0 19
36804: PUSH
36805: LD_INT 1
36807: PLUS
36808: PPUSH
36809: LD_VAR 0 9
36813: PPUSH
36814: CALL_OW 2
36818: ST_TO_ADDR
36819: GO 36747
36821: POP
36822: POP
// if tmp then
36823: LD_VAR 0 19
36827: IFFALSE 36839
// f := tmp ;
36829: LD_ADDR_VAR 0 12
36833: PUSH
36834: LD_VAR 0 19
36838: ST_TO_ADDR
// end ; x := personel [ i ] ;
36839: LD_ADDR_VAR 0 13
36843: PUSH
36844: LD_VAR 0 6
36848: PUSH
36849: LD_VAR 0 8
36853: ARRAY
36854: ST_TO_ADDR
// if x = - 1 then
36855: LD_VAR 0 13
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: EQUAL
36864: IFFALSE 37073
// begin for j in f do
36866: LD_ADDR_VAR 0 9
36870: PUSH
36871: LD_VAR 0 12
36875: PUSH
36876: FOR_IN
36877: IFFALSE 37069
// repeat InitHc ;
36879: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36883: LD_VAR 0 9
36887: PPUSH
36888: CALL_OW 266
36892: PUSH
36893: LD_INT 5
36895: EQUAL
36896: IFFALSE 36966
// begin if UnitsInside ( j ) < 3 then
36898: LD_VAR 0 9
36902: PPUSH
36903: CALL_OW 313
36907: PUSH
36908: LD_INT 3
36910: LESS
36911: IFFALSE 36947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36913: LD_INT 0
36915: PPUSH
36916: LD_INT 5
36918: PUSH
36919: LD_INT 8
36921: PUSH
36922: LD_INT 9
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: LD_VAR 0 17
36934: ARRAY
36935: PPUSH
36936: LD_VAR 0 4
36940: PPUSH
36941: CALL_OW 380
36945: GO 36964
// PrepareHuman ( false , i , skill ) ;
36947: LD_INT 0
36949: PPUSH
36950: LD_VAR 0 8
36954: PPUSH
36955: LD_VAR 0 4
36959: PPUSH
36960: CALL_OW 380
// end else
36964: GO 36983
// PrepareHuman ( false , i , skill ) ;
36966: LD_INT 0
36968: PPUSH
36969: LD_VAR 0 8
36973: PPUSH
36974: LD_VAR 0 4
36978: PPUSH
36979: CALL_OW 380
// un := CreateHuman ;
36983: LD_ADDR_VAR 0 14
36987: PUSH
36988: CALL_OW 44
36992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36993: LD_ADDR_VAR 0 7
36997: PUSH
36998: LD_VAR 0 7
37002: PPUSH
37003: LD_INT 1
37005: PPUSH
37006: LD_VAR 0 14
37010: PPUSH
37011: CALL_OW 2
37015: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37016: LD_VAR 0 14
37020: PPUSH
37021: LD_VAR 0 9
37025: PPUSH
37026: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37030: LD_VAR 0 9
37034: PPUSH
37035: CALL_OW 313
37039: PUSH
37040: LD_INT 6
37042: EQUAL
37043: PUSH
37044: LD_VAR 0 9
37048: PPUSH
37049: CALL_OW 266
37053: PUSH
37054: LD_INT 32
37056: PUSH
37057: LD_INT 31
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: IN
37064: OR
37065: IFFALSE 36879
37067: GO 36876
37069: POP
37070: POP
// end else
37071: GO 37453
// for j = 1 to x do
37073: LD_ADDR_VAR 0 9
37077: PUSH
37078: DOUBLE
37079: LD_INT 1
37081: DEC
37082: ST_TO_ADDR
37083: LD_VAR 0 13
37087: PUSH
37088: FOR_TO
37089: IFFALSE 37451
// begin InitHc ;
37091: CALL_OW 19
// if not f then
37095: LD_VAR 0 12
37099: NOT
37100: IFFALSE 37189
// begin PrepareHuman ( false , i , skill ) ;
37102: LD_INT 0
37104: PPUSH
37105: LD_VAR 0 8
37109: PPUSH
37110: LD_VAR 0 4
37114: PPUSH
37115: CALL_OW 380
// un := CreateHuman ;
37119: LD_ADDR_VAR 0 14
37123: PUSH
37124: CALL_OW 44
37128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37129: LD_ADDR_VAR 0 7
37133: PUSH
37134: LD_VAR 0 7
37138: PPUSH
37139: LD_INT 1
37141: PPUSH
37142: LD_VAR 0 14
37146: PPUSH
37147: CALL_OW 2
37151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37152: LD_VAR 0 14
37156: PPUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 250
37166: PPUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 251
37176: PPUSH
37177: LD_INT 10
37179: PPUSH
37180: LD_INT 0
37182: PPUSH
37183: CALL_OW 50
// continue ;
37187: GO 37088
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37189: LD_VAR 0 12
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: CALL_OW 313
37202: PUSH
37203: LD_VAR 0 12
37207: PUSH
37208: LD_INT 1
37210: ARRAY
37211: PPUSH
37212: CALL_OW 266
37216: PUSH
37217: LD_INT 32
37219: PUSH
37220: LD_INT 31
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: IN
37227: AND
37228: PUSH
37229: LD_VAR 0 12
37233: PUSH
37234: LD_INT 1
37236: ARRAY
37237: PPUSH
37238: CALL_OW 313
37242: PUSH
37243: LD_INT 6
37245: EQUAL
37246: OR
37247: IFFALSE 37267
// f := Delete ( f , 1 ) ;
37249: LD_ADDR_VAR 0 12
37253: PUSH
37254: LD_VAR 0 12
37258: PPUSH
37259: LD_INT 1
37261: PPUSH
37262: CALL_OW 3
37266: ST_TO_ADDR
// if not f then
37267: LD_VAR 0 12
37271: NOT
37272: IFFALSE 37290
// begin x := x + 2 ;
37274: LD_ADDR_VAR 0 13
37278: PUSH
37279: LD_VAR 0 13
37283: PUSH
37284: LD_INT 2
37286: PLUS
37287: ST_TO_ADDR
// continue ;
37288: GO 37088
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37290: LD_VAR 0 12
37294: PUSH
37295: LD_INT 1
37297: ARRAY
37298: PPUSH
37299: CALL_OW 266
37303: PUSH
37304: LD_INT 5
37306: EQUAL
37307: IFFALSE 37381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37309: LD_VAR 0 12
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: CALL_OW 313
37322: PUSH
37323: LD_INT 3
37325: LESS
37326: IFFALSE 37362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37328: LD_INT 0
37330: PPUSH
37331: LD_INT 5
37333: PUSH
37334: LD_INT 8
37336: PUSH
37337: LD_INT 9
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: LD_VAR 0 17
37349: ARRAY
37350: PPUSH
37351: LD_VAR 0 4
37355: PPUSH
37356: CALL_OW 380
37360: GO 37379
// PrepareHuman ( false , i , skill ) ;
37362: LD_INT 0
37364: PPUSH
37365: LD_VAR 0 8
37369: PPUSH
37370: LD_VAR 0 4
37374: PPUSH
37375: CALL_OW 380
// end else
37379: GO 37398
// PrepareHuman ( false , i , skill ) ;
37381: LD_INT 0
37383: PPUSH
37384: LD_VAR 0 8
37388: PPUSH
37389: LD_VAR 0 4
37393: PPUSH
37394: CALL_OW 380
// un := CreateHuman ;
37398: LD_ADDR_VAR 0 14
37402: PUSH
37403: CALL_OW 44
37407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37408: LD_ADDR_VAR 0 7
37412: PUSH
37413: LD_VAR 0 7
37417: PPUSH
37418: LD_INT 1
37420: PPUSH
37421: LD_VAR 0 14
37425: PPUSH
37426: CALL_OW 2
37430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37431: LD_VAR 0 14
37435: PPUSH
37436: LD_VAR 0 12
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PPUSH
37445: CALL_OW 52
// end ;
37449: GO 37088
37451: POP
37452: POP
// end ;
37453: GO 36390
37455: POP
37456: POP
// result := result ^ buildings ;
37457: LD_ADDR_VAR 0 7
37461: PUSH
37462: LD_VAR 0 7
37466: PUSH
37467: LD_VAR 0 18
37471: ADD
37472: ST_TO_ADDR
// end else
37473: GO 37616
// begin for i = 1 to personel do
37475: LD_ADDR_VAR 0 8
37479: PUSH
37480: DOUBLE
37481: LD_INT 1
37483: DEC
37484: ST_TO_ADDR
37485: LD_VAR 0 6
37489: PUSH
37490: FOR_TO
37491: IFFALSE 37614
// begin if i > 4 then
37493: LD_VAR 0 8
37497: PUSH
37498: LD_INT 4
37500: GREATER
37501: IFFALSE 37505
// break ;
37503: GO 37614
// x := personel [ i ] ;
37505: LD_ADDR_VAR 0 13
37509: PUSH
37510: LD_VAR 0 6
37514: PUSH
37515: LD_VAR 0 8
37519: ARRAY
37520: ST_TO_ADDR
// if x = - 1 then
37521: LD_VAR 0 13
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: EQUAL
37530: IFFALSE 37534
// continue ;
37532: GO 37490
// PrepareHuman ( false , i , skill ) ;
37534: LD_INT 0
37536: PPUSH
37537: LD_VAR 0 8
37541: PPUSH
37542: LD_VAR 0 4
37546: PPUSH
37547: CALL_OW 380
// un := CreateHuman ;
37551: LD_ADDR_VAR 0 14
37555: PUSH
37556: CALL_OW 44
37560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37561: LD_VAR 0 14
37565: PPUSH
37566: LD_VAR 0 1
37570: PPUSH
37571: CALL_OW 250
37575: PPUSH
37576: LD_VAR 0 1
37580: PPUSH
37581: CALL_OW 251
37585: PPUSH
37586: LD_INT 10
37588: PPUSH
37589: LD_INT 0
37591: PPUSH
37592: CALL_OW 50
// result := result ^ un ;
37596: LD_ADDR_VAR 0 7
37600: PUSH
37601: LD_VAR 0 7
37605: PUSH
37606: LD_VAR 0 14
37610: ADD
37611: ST_TO_ADDR
// end ;
37612: GO 37490
37614: POP
37615: POP
// end ; end ;
37616: LD_VAR 0 7
37620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37621: LD_INT 0
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
// result := false ;
37639: LD_ADDR_VAR 0 3
37643: PUSH
37644: LD_INT 0
37646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37647: LD_VAR 0 1
37651: NOT
37652: PUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 266
37662: PUSH
37663: LD_INT 32
37665: PUSH
37666: LD_INT 33
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: IN
37673: NOT
37674: OR
37675: IFFALSE 37679
// exit ;
37677: GO 38788
// nat := GetNation ( tower ) ;
37679: LD_ADDR_VAR 0 12
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 248
37693: ST_TO_ADDR
// side := GetSide ( tower ) ;
37694: LD_ADDR_VAR 0 16
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 255
37708: ST_TO_ADDR
// x := GetX ( tower ) ;
37709: LD_ADDR_VAR 0 10
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 250
37723: ST_TO_ADDR
// y := GetY ( tower ) ;
37724: LD_ADDR_VAR 0 11
37728: PUSH
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 251
37738: ST_TO_ADDR
// if not x or not y then
37739: LD_VAR 0 10
37743: NOT
37744: PUSH
37745: LD_VAR 0 11
37749: NOT
37750: OR
37751: IFFALSE 37755
// exit ;
37753: GO 38788
// weapon := 0 ;
37755: LD_ADDR_VAR 0 18
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// fac_list := [ ] ;
37763: LD_ADDR_VAR 0 17
37767: PUSH
37768: EMPTY
37769: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37770: LD_ADDR_VAR 0 6
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 274
37784: PPUSH
37785: LD_VAR 0 2
37789: PPUSH
37790: LD_INT 0
37792: PPUSH
37793: CALL 35359 0 3
37797: PPUSH
37798: LD_INT 30
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PPUSH
37808: CALL_OW 72
37812: ST_TO_ADDR
// if not factories then
37813: LD_VAR 0 6
37817: NOT
37818: IFFALSE 37822
// exit ;
37820: GO 38788
// for i in factories do
37822: LD_ADDR_VAR 0 8
37826: PUSH
37827: LD_VAR 0 6
37831: PUSH
37832: FOR_IN
37833: IFFALSE 37858
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37835: LD_ADDR_VAR 0 17
37839: PUSH
37840: LD_VAR 0 17
37844: PUSH
37845: LD_VAR 0 8
37849: PPUSH
37850: CALL_OW 478
37854: UNION
37855: ST_TO_ADDR
37856: GO 37832
37858: POP
37859: POP
// if not fac_list then
37860: LD_VAR 0 17
37864: NOT
37865: IFFALSE 37869
// exit ;
37867: GO 38788
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37869: LD_ADDR_VAR 0 5
37873: PUSH
37874: LD_INT 4
37876: PUSH
37877: LD_INT 5
37879: PUSH
37880: LD_INT 9
37882: PUSH
37883: LD_INT 10
37885: PUSH
37886: LD_INT 6
37888: PUSH
37889: LD_INT 7
37891: PUSH
37892: LD_INT 11
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 27
37906: PUSH
37907: LD_INT 28
37909: PUSH
37910: LD_INT 26
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 43
37924: PUSH
37925: LD_INT 44
37927: PUSH
37928: LD_INT 46
37930: PUSH
37931: LD_INT 45
37933: PUSH
37934: LD_INT 47
37936: PUSH
37937: LD_INT 49
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PUSH
37953: LD_VAR 0 12
37957: ARRAY
37958: ST_TO_ADDR
// list := list isect fac_list ;
37959: LD_ADDR_VAR 0 5
37963: PUSH
37964: LD_VAR 0 5
37968: PUSH
37969: LD_VAR 0 17
37973: ISECT
37974: ST_TO_ADDR
// if not list then
37975: LD_VAR 0 5
37979: NOT
37980: IFFALSE 37984
// exit ;
37982: GO 38788
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37984: LD_VAR 0 12
37988: PUSH
37989: LD_INT 3
37991: EQUAL
37992: PUSH
37993: LD_INT 49
37995: PUSH
37996: LD_VAR 0 5
38000: IN
38001: AND
38002: PUSH
38003: LD_INT 31
38005: PPUSH
38006: LD_VAR 0 16
38010: PPUSH
38011: CALL_OW 321
38015: PUSH
38016: LD_INT 2
38018: EQUAL
38019: AND
38020: IFFALSE 38080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38022: LD_INT 22
38024: PUSH
38025: LD_VAR 0 16
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 35
38036: PUSH
38037: LD_INT 49
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 91
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: LD_INT 10
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: PPUSH
38065: CALL_OW 69
38069: NOT
38070: IFFALSE 38080
// weapon := ru_time_lapser ;
38072: LD_ADDR_VAR 0 18
38076: PUSH
38077: LD_INT 49
38079: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38080: LD_VAR 0 12
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: IN
38095: PUSH
38096: LD_INT 11
38098: PUSH
38099: LD_VAR 0 5
38103: IN
38104: PUSH
38105: LD_INT 30
38107: PUSH
38108: LD_VAR 0 5
38112: IN
38113: OR
38114: AND
38115: PUSH
38116: LD_INT 6
38118: PPUSH
38119: LD_VAR 0 16
38123: PPUSH
38124: CALL_OW 321
38128: PUSH
38129: LD_INT 2
38131: EQUAL
38132: AND
38133: IFFALSE 38298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38135: LD_INT 22
38137: PUSH
38138: LD_VAR 0 16
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 35
38152: PUSH
38153: LD_INT 11
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 35
38162: PUSH
38163: LD_INT 30
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 91
38177: PUSH
38178: LD_VAR 0 1
38182: PUSH
38183: LD_INT 18
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 69
38200: NOT
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: LD_VAR 0 16
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 30
38219: PUSH
38220: LD_INT 32
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 33
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 91
38244: PUSH
38245: LD_VAR 0 1
38249: PUSH
38250: LD_INT 12
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: PPUSH
38266: CALL_OW 69
38270: PUSH
38271: LD_INT 2
38273: GREATER
38274: AND
38275: IFFALSE 38298
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38277: LD_ADDR_VAR 0 18
38281: PUSH
38282: LD_INT 11
38284: PUSH
38285: LD_INT 30
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_VAR 0 12
38296: ARRAY
38297: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38298: LD_VAR 0 18
38302: NOT
38303: PUSH
38304: LD_INT 40
38306: PPUSH
38307: LD_VAR 0 16
38311: PPUSH
38312: CALL_OW 321
38316: PUSH
38317: LD_INT 2
38319: EQUAL
38320: AND
38321: PUSH
38322: LD_INT 7
38324: PUSH
38325: LD_VAR 0 5
38329: IN
38330: PUSH
38331: LD_INT 28
38333: PUSH
38334: LD_VAR 0 5
38338: IN
38339: OR
38340: PUSH
38341: LD_INT 45
38343: PUSH
38344: LD_VAR 0 5
38348: IN
38349: OR
38350: AND
38351: IFFALSE 38605
// begin hex := GetHexInfo ( x , y ) ;
38353: LD_ADDR_VAR 0 4
38357: PUSH
38358: LD_VAR 0 10
38362: PPUSH
38363: LD_VAR 0 11
38367: PPUSH
38368: CALL_OW 546
38372: ST_TO_ADDR
// if hex [ 1 ] then
38373: LD_VAR 0 4
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: IFFALSE 38385
// exit ;
38383: GO 38788
// height := hex [ 2 ] ;
38385: LD_ADDR_VAR 0 15
38389: PUSH
38390: LD_VAR 0 4
38394: PUSH
38395: LD_INT 2
38397: ARRAY
38398: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38399: LD_ADDR_VAR 0 14
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: LD_INT 5
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// for i in tmp do
38422: LD_ADDR_VAR 0 8
38426: PUSH
38427: LD_VAR 0 14
38431: PUSH
38432: FOR_IN
38433: IFFALSE 38603
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38435: LD_ADDR_VAR 0 9
38439: PUSH
38440: LD_VAR 0 10
38444: PPUSH
38445: LD_VAR 0 8
38449: PPUSH
38450: LD_INT 5
38452: PPUSH
38453: CALL_OW 272
38457: PUSH
38458: LD_VAR 0 11
38462: PPUSH
38463: LD_VAR 0 8
38467: PPUSH
38468: LD_INT 5
38470: PPUSH
38471: CALL_OW 273
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38480: LD_VAR 0 9
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PPUSH
38489: LD_VAR 0 9
38493: PUSH
38494: LD_INT 2
38496: ARRAY
38497: PPUSH
38498: CALL_OW 488
38502: IFFALSE 38601
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: LD_VAR 0 9
38513: PUSH
38514: LD_INT 1
38516: ARRAY
38517: PPUSH
38518: LD_VAR 0 9
38522: PUSH
38523: LD_INT 2
38525: ARRAY
38526: PPUSH
38527: CALL_OW 546
38531: ST_TO_ADDR
// if hex [ 1 ] then
38532: LD_VAR 0 4
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: IFFALSE 38544
// continue ;
38542: GO 38432
// h := hex [ 2 ] ;
38544: LD_ADDR_VAR 0 13
38548: PUSH
38549: LD_VAR 0 4
38553: PUSH
38554: LD_INT 2
38556: ARRAY
38557: ST_TO_ADDR
// if h + 7 < height then
38558: LD_VAR 0 13
38562: PUSH
38563: LD_INT 7
38565: PLUS
38566: PUSH
38567: LD_VAR 0 15
38571: LESS
38572: IFFALSE 38601
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38574: LD_ADDR_VAR 0 18
38578: PUSH
38579: LD_INT 7
38581: PUSH
38582: LD_INT 28
38584: PUSH
38585: LD_INT 45
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: LD_VAR 0 12
38597: ARRAY
38598: ST_TO_ADDR
// break ;
38599: GO 38603
// end ; end ; end ;
38601: GO 38432
38603: POP
38604: POP
// end ; if not weapon then
38605: LD_VAR 0 18
38609: NOT
38610: IFFALSE 38670
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38612: LD_ADDR_VAR 0 5
38616: PUSH
38617: LD_VAR 0 5
38621: PUSH
38622: LD_INT 11
38624: PUSH
38625: LD_INT 30
38627: PUSH
38628: LD_INT 49
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: DIFF
38636: ST_TO_ADDR
// if not list then
38637: LD_VAR 0 5
38641: NOT
38642: IFFALSE 38646
// exit ;
38644: GO 38788
// weapon := list [ rand ( 1 , list ) ] ;
38646: LD_ADDR_VAR 0 18
38650: PUSH
38651: LD_VAR 0 5
38655: PUSH
38656: LD_INT 1
38658: PPUSH
38659: LD_VAR 0 5
38663: PPUSH
38664: CALL_OW 12
38668: ARRAY
38669: ST_TO_ADDR
// end ; if weapon then
38670: LD_VAR 0 18
38674: IFFALSE 38788
// begin tmp := CostOfWeapon ( weapon ) ;
38676: LD_ADDR_VAR 0 14
38680: PUSH
38681: LD_VAR 0 18
38685: PPUSH
38686: CALL_OW 451
38690: ST_TO_ADDR
// j := GetBase ( tower ) ;
38691: LD_ADDR_VAR 0 9
38695: PUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 274
38705: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38706: LD_VAR 0 9
38710: PPUSH
38711: LD_INT 1
38713: PPUSH
38714: CALL_OW 275
38718: PUSH
38719: LD_VAR 0 14
38723: PUSH
38724: LD_INT 1
38726: ARRAY
38727: GREATEREQUAL
38728: PUSH
38729: LD_VAR 0 9
38733: PPUSH
38734: LD_INT 2
38736: PPUSH
38737: CALL_OW 275
38741: PUSH
38742: LD_VAR 0 14
38746: PUSH
38747: LD_INT 2
38749: ARRAY
38750: GREATEREQUAL
38751: AND
38752: PUSH
38753: LD_VAR 0 9
38757: PPUSH
38758: LD_INT 3
38760: PPUSH
38761: CALL_OW 275
38765: PUSH
38766: LD_VAR 0 14
38770: PUSH
38771: LD_INT 3
38773: ARRAY
38774: GREATEREQUAL
38775: AND
38776: IFFALSE 38788
// result := weapon ;
38778: LD_ADDR_VAR 0 3
38782: PUSH
38783: LD_VAR 0 18
38787: ST_TO_ADDR
// end ; end ;
38788: LD_VAR 0 3
38792: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38793: LD_INT 0
38795: PPUSH
38796: PPUSH
// result := true ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 1
38804: ST_TO_ADDR
// if array1 = array2 then
38805: LD_VAR 0 1
38809: PUSH
38810: LD_VAR 0 2
38814: EQUAL
38815: IFFALSE 38875
// begin for i = 1 to array1 do
38817: LD_ADDR_VAR 0 4
38821: PUSH
38822: DOUBLE
38823: LD_INT 1
38825: DEC
38826: ST_TO_ADDR
38827: LD_VAR 0 1
38831: PUSH
38832: FOR_TO
38833: IFFALSE 38871
// if array1 [ i ] <> array2 [ i ] then
38835: LD_VAR 0 1
38839: PUSH
38840: LD_VAR 0 4
38844: ARRAY
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_VAR 0 4
38855: ARRAY
38856: NONEQUAL
38857: IFFALSE 38869
// begin result := false ;
38859: LD_ADDR_VAR 0 3
38863: PUSH
38864: LD_INT 0
38866: ST_TO_ADDR
// break ;
38867: GO 38871
// end ;
38869: GO 38832
38871: POP
38872: POP
// end else
38873: GO 38883
// result := false ;
38875: LD_ADDR_VAR 0 3
38879: PUSH
38880: LD_INT 0
38882: ST_TO_ADDR
// end ;
38883: LD_VAR 0 3
38887: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38888: LD_INT 0
38890: PPUSH
38891: PPUSH
// if not array1 or not array2 then
38892: LD_VAR 0 1
38896: NOT
38897: PUSH
38898: LD_VAR 0 2
38902: NOT
38903: OR
38904: IFFALSE 38908
// exit ;
38906: GO 38972
// result := true ;
38908: LD_ADDR_VAR 0 3
38912: PUSH
38913: LD_INT 1
38915: ST_TO_ADDR
// for i = 1 to array1 do
38916: LD_ADDR_VAR 0 4
38920: PUSH
38921: DOUBLE
38922: LD_INT 1
38924: DEC
38925: ST_TO_ADDR
38926: LD_VAR 0 1
38930: PUSH
38931: FOR_TO
38932: IFFALSE 38970
// if array1 [ i ] <> array2 [ i ] then
38934: LD_VAR 0 1
38938: PUSH
38939: LD_VAR 0 4
38943: ARRAY
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_VAR 0 4
38954: ARRAY
38955: NONEQUAL
38956: IFFALSE 38968
// begin result := false ;
38958: LD_ADDR_VAR 0 3
38962: PUSH
38963: LD_INT 0
38965: ST_TO_ADDR
// break ;
38966: GO 38970
// end ;
38968: GO 38931
38970: POP
38971: POP
// end ;
38972: LD_VAR 0 3
38976: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38977: LD_INT 0
38979: PPUSH
38980: PPUSH
38981: PPUSH
// pom := GetBase ( fac ) ;
38982: LD_ADDR_VAR 0 5
38986: PUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 274
38996: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38997: LD_ADDR_VAR 0 4
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 1
39009: ARRAY
39010: PPUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 2
39018: ARRAY
39019: PPUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 3
39027: ARRAY
39028: PPUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 4
39036: ARRAY
39037: PPUSH
39038: CALL_OW 449
39042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_VAR 0 5
39052: PPUSH
39053: LD_INT 1
39055: PPUSH
39056: CALL_OW 275
39060: PUSH
39061: LD_VAR 0 4
39065: PUSH
39066: LD_INT 1
39068: ARRAY
39069: GREATEREQUAL
39070: PUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: LD_INT 2
39078: PPUSH
39079: CALL_OW 275
39083: PUSH
39084: LD_VAR 0 4
39088: PUSH
39089: LD_INT 2
39091: ARRAY
39092: GREATEREQUAL
39093: AND
39094: PUSH
39095: LD_VAR 0 5
39099: PPUSH
39100: LD_INT 3
39102: PPUSH
39103: CALL_OW 275
39107: PUSH
39108: LD_VAR 0 4
39112: PUSH
39113: LD_INT 3
39115: ARRAY
39116: GREATEREQUAL
39117: AND
39118: ST_TO_ADDR
// end ;
39119: LD_VAR 0 3
39123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39124: LD_INT 0
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
// pom := GetBase ( building ) ;
39130: LD_ADDR_VAR 0 3
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL_OW 274
39144: ST_TO_ADDR
// if not pom then
39145: LD_VAR 0 3
39149: NOT
39150: IFFALSE 39154
// exit ;
39152: GO 39324
// btype := GetBType ( building ) ;
39154: LD_ADDR_VAR 0 5
39158: PUSH
39159: LD_VAR 0 1
39163: PPUSH
39164: CALL_OW 266
39168: ST_TO_ADDR
// if btype = b_armoury then
39169: LD_VAR 0 5
39173: PUSH
39174: LD_INT 4
39176: EQUAL
39177: IFFALSE 39187
// btype := b_barracks ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_INT 5
39186: ST_TO_ADDR
// if btype = b_depot then
39187: LD_VAR 0 5
39191: PUSH
39192: LD_INT 0
39194: EQUAL
39195: IFFALSE 39205
// btype := b_warehouse ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_INT 1
39204: ST_TO_ADDR
// if btype = b_workshop then
39205: LD_VAR 0 5
39209: PUSH
39210: LD_INT 2
39212: EQUAL
39213: IFFALSE 39223
// btype := b_factory ;
39215: LD_ADDR_VAR 0 5
39219: PUSH
39220: LD_INT 3
39222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39223: LD_ADDR_VAR 0 4
39227: PUSH
39228: LD_VAR 0 5
39232: PPUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 248
39242: PPUSH
39243: CALL_OW 450
39247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39248: LD_ADDR_VAR 0 2
39252: PUSH
39253: LD_VAR 0 3
39257: PPUSH
39258: LD_INT 1
39260: PPUSH
39261: CALL_OW 275
39265: PUSH
39266: LD_VAR 0 4
39270: PUSH
39271: LD_INT 1
39273: ARRAY
39274: GREATEREQUAL
39275: PUSH
39276: LD_VAR 0 3
39280: PPUSH
39281: LD_INT 2
39283: PPUSH
39284: CALL_OW 275
39288: PUSH
39289: LD_VAR 0 4
39293: PUSH
39294: LD_INT 2
39296: ARRAY
39297: GREATEREQUAL
39298: AND
39299: PUSH
39300: LD_VAR 0 3
39304: PPUSH
39305: LD_INT 3
39307: PPUSH
39308: CALL_OW 275
39312: PUSH
39313: LD_VAR 0 4
39317: PUSH
39318: LD_INT 3
39320: ARRAY
39321: GREATEREQUAL
39322: AND
39323: ST_TO_ADDR
// end ;
39324: LD_VAR 0 2
39328: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39329: LD_INT 0
39331: PPUSH
39332: PPUSH
39333: PPUSH
// pom := GetBase ( building ) ;
39334: LD_ADDR_VAR 0 4
39338: PUSH
39339: LD_VAR 0 1
39343: PPUSH
39344: CALL_OW 274
39348: ST_TO_ADDR
// if not pom then
39349: LD_VAR 0 4
39353: NOT
39354: IFFALSE 39358
// exit ;
39356: GO 39459
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39358: LD_ADDR_VAR 0 5
39362: PUSH
39363: LD_VAR 0 2
39367: PPUSH
39368: LD_VAR 0 1
39372: PPUSH
39373: CALL_OW 248
39377: PPUSH
39378: CALL_OW 450
39382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: LD_VAR 0 4
39392: PPUSH
39393: LD_INT 1
39395: PPUSH
39396: CALL_OW 275
39400: PUSH
39401: LD_VAR 0 5
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: GREATEREQUAL
39410: PUSH
39411: LD_VAR 0 4
39415: PPUSH
39416: LD_INT 2
39418: PPUSH
39419: CALL_OW 275
39423: PUSH
39424: LD_VAR 0 5
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: GREATEREQUAL
39433: AND
39434: PUSH
39435: LD_VAR 0 4
39439: PPUSH
39440: LD_INT 3
39442: PPUSH
39443: CALL_OW 275
39447: PUSH
39448: LD_VAR 0 5
39452: PUSH
39453: LD_INT 3
39455: ARRAY
39456: GREATEREQUAL
39457: AND
39458: ST_TO_ADDR
// end ;
39459: LD_VAR 0 3
39463: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39464: LD_INT 0
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
// result := false ;
39477: LD_ADDR_VAR 0 8
39481: PUSH
39482: LD_INT 0
39484: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39485: LD_VAR 0 5
39489: NOT
39490: PUSH
39491: LD_VAR 0 1
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 2
39502: NOT
39503: OR
39504: PUSH
39505: LD_VAR 0 3
39509: NOT
39510: OR
39511: IFFALSE 39515
// exit ;
39513: GO 40329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39515: LD_ADDR_VAR 0 14
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: LD_VAR 0 3
39534: PPUSH
39535: LD_VAR 0 4
39539: PPUSH
39540: LD_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: PPUSH
39549: CALL_OW 248
39553: PPUSH
39554: LD_INT 0
39556: PPUSH
39557: CALL 41582 0 6
39561: ST_TO_ADDR
// if not hexes then
39562: LD_VAR 0 14
39566: NOT
39567: IFFALSE 39571
// exit ;
39569: GO 40329
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39571: LD_ADDR_VAR 0 17
39575: PUSH
39576: LD_VAR 0 5
39580: PPUSH
39581: LD_INT 22
39583: PUSH
39584: LD_VAR 0 13
39588: PPUSH
39589: CALL_OW 255
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 30
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 30
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PPUSH
39630: CALL_OW 72
39634: ST_TO_ADDR
// for i = 1 to hexes do
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: DOUBLE
39641: LD_INT 1
39643: DEC
39644: ST_TO_ADDR
39645: LD_VAR 0 14
39649: PUSH
39650: FOR_TO
39651: IFFALSE 40327
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39653: LD_ADDR_VAR 0 13
39657: PUSH
39658: LD_VAR 0 14
39662: PUSH
39663: LD_VAR 0 9
39667: ARRAY
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PPUSH
39673: LD_VAR 0 14
39677: PUSH
39678: LD_VAR 0 9
39682: ARRAY
39683: PUSH
39684: LD_INT 2
39686: ARRAY
39687: PPUSH
39688: CALL_OW 428
39692: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39693: LD_VAR 0 14
39697: PUSH
39698: LD_VAR 0 9
39702: ARRAY
39703: PUSH
39704: LD_INT 1
39706: ARRAY
39707: PPUSH
39708: LD_VAR 0 14
39712: PUSH
39713: LD_VAR 0 9
39717: ARRAY
39718: PUSH
39719: LD_INT 2
39721: ARRAY
39722: PPUSH
39723: CALL_OW 351
39727: PUSH
39728: LD_VAR 0 14
39732: PUSH
39733: LD_VAR 0 9
39737: ARRAY
39738: PUSH
39739: LD_INT 1
39741: ARRAY
39742: PPUSH
39743: LD_VAR 0 14
39747: PUSH
39748: LD_VAR 0 9
39752: ARRAY
39753: PUSH
39754: LD_INT 2
39756: ARRAY
39757: PPUSH
39758: CALL_OW 488
39762: NOT
39763: OR
39764: PUSH
39765: LD_VAR 0 13
39769: PPUSH
39770: CALL_OW 247
39774: PUSH
39775: LD_INT 3
39777: EQUAL
39778: OR
39779: IFFALSE 39785
// exit ;
39781: POP
39782: POP
39783: GO 40329
// if not tmp then
39785: LD_VAR 0 13
39789: NOT
39790: IFFALSE 39794
// continue ;
39792: GO 39650
// result := true ;
39794: LD_ADDR_VAR 0 8
39798: PUSH
39799: LD_INT 1
39801: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39802: LD_VAR 0 6
39806: PUSH
39807: LD_VAR 0 13
39811: PPUSH
39812: CALL_OW 247
39816: PUSH
39817: LD_INT 2
39819: EQUAL
39820: AND
39821: PUSH
39822: LD_VAR 0 13
39826: PPUSH
39827: CALL_OW 263
39831: PUSH
39832: LD_INT 1
39834: EQUAL
39835: AND
39836: IFFALSE 40000
// begin if IsDrivenBy ( tmp ) then
39838: LD_VAR 0 13
39842: PPUSH
39843: CALL_OW 311
39847: IFFALSE 39851
// continue ;
39849: GO 39650
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39851: LD_VAR 0 6
39855: PPUSH
39856: LD_INT 3
39858: PUSH
39859: LD_INT 60
39861: PUSH
39862: EMPTY
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: LD_INT 55
39874: PUSH
39875: EMPTY
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PPUSH
39886: CALL_OW 72
39890: IFFALSE 39998
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39892: LD_ADDR_VAR 0 18
39896: PUSH
39897: LD_VAR 0 6
39901: PPUSH
39902: LD_INT 3
39904: PUSH
39905: LD_INT 60
39907: PUSH
39908: EMPTY
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 55
39920: PUSH
39921: EMPTY
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PPUSH
39932: CALL_OW 72
39936: PUSH
39937: LD_INT 1
39939: ARRAY
39940: ST_TO_ADDR
// if IsInUnit ( driver ) then
39941: LD_VAR 0 18
39945: PPUSH
39946: CALL_OW 310
39950: IFFALSE 39961
// ComExit ( driver ) ;
39952: LD_VAR 0 18
39956: PPUSH
39957: CALL 65383 0 1
// AddComEnterUnit ( driver , tmp ) ;
39961: LD_VAR 0 18
39965: PPUSH
39966: LD_VAR 0 13
39970: PPUSH
39971: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39975: LD_VAR 0 18
39979: PPUSH
39980: LD_VAR 0 7
39984: PPUSH
39985: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39989: LD_VAR 0 18
39993: PPUSH
39994: CALL_OW 181
// end ; continue ;
39998: GO 39650
// end ; if not cleaners or not tmp in cleaners then
40000: LD_VAR 0 6
40004: NOT
40005: PUSH
40006: LD_VAR 0 13
40010: PUSH
40011: LD_VAR 0 6
40015: IN
40016: NOT
40017: OR
40018: IFFALSE 40325
// begin if dep then
40020: LD_VAR 0 17
40024: IFFALSE 40160
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40026: LD_ADDR_VAR 0 16
40030: PUSH
40031: LD_VAR 0 17
40035: PUSH
40036: LD_INT 1
40038: ARRAY
40039: PPUSH
40040: CALL_OW 250
40044: PPUSH
40045: LD_VAR 0 17
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: PPUSH
40054: CALL_OW 254
40058: PPUSH
40059: LD_INT 5
40061: PPUSH
40062: CALL_OW 272
40066: PUSH
40067: LD_VAR 0 17
40071: PUSH
40072: LD_INT 1
40074: ARRAY
40075: PPUSH
40076: CALL_OW 251
40080: PPUSH
40081: LD_VAR 0 17
40085: PUSH
40086: LD_INT 1
40088: ARRAY
40089: PPUSH
40090: CALL_OW 254
40094: PPUSH
40095: LD_INT 5
40097: PPUSH
40098: CALL_OW 273
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40107: LD_VAR 0 16
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PPUSH
40116: LD_VAR 0 16
40120: PUSH
40121: LD_INT 2
40123: ARRAY
40124: PPUSH
40125: CALL_OW 488
40129: IFFALSE 40160
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40131: LD_VAR 0 13
40135: PPUSH
40136: LD_VAR 0 16
40140: PUSH
40141: LD_INT 1
40143: ARRAY
40144: PPUSH
40145: LD_VAR 0 16
40149: PUSH
40150: LD_INT 2
40152: ARRAY
40153: PPUSH
40154: CALL_OW 111
// continue ;
40158: GO 39650
// end ; end ; r := GetDir ( tmp ) ;
40160: LD_ADDR_VAR 0 15
40164: PUSH
40165: LD_VAR 0 13
40169: PPUSH
40170: CALL_OW 254
40174: ST_TO_ADDR
// if r = 5 then
40175: LD_VAR 0 15
40179: PUSH
40180: LD_INT 5
40182: EQUAL
40183: IFFALSE 40193
// r := 0 ;
40185: LD_ADDR_VAR 0 15
40189: PUSH
40190: LD_INT 0
40192: ST_TO_ADDR
// for j = r to 5 do
40193: LD_ADDR_VAR 0 10
40197: PUSH
40198: DOUBLE
40199: LD_VAR 0 15
40203: DEC
40204: ST_TO_ADDR
40205: LD_INT 5
40207: PUSH
40208: FOR_TO
40209: IFFALSE 40323
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40211: LD_ADDR_VAR 0 11
40215: PUSH
40216: LD_VAR 0 13
40220: PPUSH
40221: CALL_OW 250
40225: PPUSH
40226: LD_VAR 0 10
40230: PPUSH
40231: LD_INT 2
40233: PPUSH
40234: CALL_OW 272
40238: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40239: LD_ADDR_VAR 0 12
40243: PUSH
40244: LD_VAR 0 13
40248: PPUSH
40249: CALL_OW 251
40253: PPUSH
40254: LD_VAR 0 10
40258: PPUSH
40259: LD_INT 2
40261: PPUSH
40262: CALL_OW 273
40266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40267: LD_VAR 0 11
40271: PPUSH
40272: LD_VAR 0 12
40276: PPUSH
40277: CALL_OW 488
40281: PUSH
40282: LD_VAR 0 11
40286: PPUSH
40287: LD_VAR 0 12
40291: PPUSH
40292: CALL_OW 428
40296: NOT
40297: AND
40298: IFFALSE 40321
// begin ComMoveXY ( tmp , _x , _y ) ;
40300: LD_VAR 0 13
40304: PPUSH
40305: LD_VAR 0 11
40309: PPUSH
40310: LD_VAR 0 12
40314: PPUSH
40315: CALL_OW 111
// break ;
40319: GO 40323
// end ; end ;
40321: GO 40208
40323: POP
40324: POP
// end ; end ;
40325: GO 39650
40327: POP
40328: POP
// end ;
40329: LD_VAR 0 8
40333: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40334: LD_INT 0
40336: PPUSH
// result := true ;
40337: LD_ADDR_VAR 0 3
40341: PUSH
40342: LD_INT 1
40344: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40345: LD_VAR 0 2
40349: PUSH
40350: LD_INT 24
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40364
40356: LD_INT 33
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40364
40362: GO 40389
40364: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40365: LD_ADDR_VAR 0 3
40369: PUSH
40370: LD_INT 32
40372: PPUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: CALL_OW 321
40382: PUSH
40383: LD_INT 2
40385: EQUAL
40386: ST_TO_ADDR
40387: GO 40705
40389: LD_INT 20
40391: DOUBLE
40392: EQUAL
40393: IFTRUE 40397
40395: GO 40422
40397: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40398: LD_ADDR_VAR 0 3
40402: PUSH
40403: LD_INT 6
40405: PPUSH
40406: LD_VAR 0 1
40410: PPUSH
40411: CALL_OW 321
40415: PUSH
40416: LD_INT 2
40418: EQUAL
40419: ST_TO_ADDR
40420: GO 40705
40422: LD_INT 22
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40436
40428: LD_INT 36
40430: DOUBLE
40431: EQUAL
40432: IFTRUE 40436
40434: GO 40461
40436: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: LD_INT 15
40444: PPUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL_OW 321
40454: PUSH
40455: LD_INT 2
40457: EQUAL
40458: ST_TO_ADDR
40459: GO 40705
40461: LD_INT 30
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40469
40467: GO 40494
40469: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_INT 20
40477: PPUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: CALL_OW 321
40487: PUSH
40488: LD_INT 2
40490: EQUAL
40491: ST_TO_ADDR
40492: GO 40705
40494: LD_INT 28
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40508
40500: LD_INT 21
40502: DOUBLE
40503: EQUAL
40504: IFTRUE 40508
40506: GO 40533
40508: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_INT 21
40516: PPUSH
40517: LD_VAR 0 1
40521: PPUSH
40522: CALL_OW 321
40526: PUSH
40527: LD_INT 2
40529: EQUAL
40530: ST_TO_ADDR
40531: GO 40705
40533: LD_INT 16
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40566
40541: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40542: LD_ADDR_VAR 0 3
40546: PUSH
40547: LD_INT 84
40549: PPUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 321
40559: PUSH
40560: LD_INT 2
40562: EQUAL
40563: ST_TO_ADDR
40564: GO 40705
40566: LD_INT 19
40568: DOUBLE
40569: EQUAL
40570: IFTRUE 40580
40572: LD_INT 23
40574: DOUBLE
40575: EQUAL
40576: IFTRUE 40580
40578: GO 40605
40580: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40581: LD_ADDR_VAR 0 3
40585: PUSH
40586: LD_INT 83
40588: PPUSH
40589: LD_VAR 0 1
40593: PPUSH
40594: CALL_OW 321
40598: PUSH
40599: LD_INT 2
40601: EQUAL
40602: ST_TO_ADDR
40603: GO 40705
40605: LD_INT 17
40607: DOUBLE
40608: EQUAL
40609: IFTRUE 40613
40611: GO 40638
40613: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40614: LD_ADDR_VAR 0 3
40618: PUSH
40619: LD_INT 39
40621: PPUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 321
40631: PUSH
40632: LD_INT 2
40634: EQUAL
40635: ST_TO_ADDR
40636: GO 40705
40638: LD_INT 18
40640: DOUBLE
40641: EQUAL
40642: IFTRUE 40646
40644: GO 40671
40646: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40647: LD_ADDR_VAR 0 3
40651: PUSH
40652: LD_INT 40
40654: PPUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 321
40664: PUSH
40665: LD_INT 2
40667: EQUAL
40668: ST_TO_ADDR
40669: GO 40705
40671: LD_INT 27
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40704
40679: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_INT 35
40687: PPUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 321
40697: PUSH
40698: LD_INT 2
40700: EQUAL
40701: ST_TO_ADDR
40702: GO 40705
40704: POP
// end ;
40705: LD_VAR 0 3
40709: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
// result := false ;
40723: LD_ADDR_VAR 0 6
40727: PUSH
40728: LD_INT 0
40730: ST_TO_ADDR
// if btype = b_depot then
40731: LD_VAR 0 2
40735: PUSH
40736: LD_INT 0
40738: EQUAL
40739: IFFALSE 40751
// begin result := true ;
40741: LD_ADDR_VAR 0 6
40745: PUSH
40746: LD_INT 1
40748: ST_TO_ADDR
// exit ;
40749: GO 41577
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40751: LD_VAR 0 1
40755: NOT
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 266
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: IN
40777: NOT
40778: OR
40779: PUSH
40780: LD_VAR 0 2
40784: NOT
40785: OR
40786: PUSH
40787: LD_VAR 0 5
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 3
40803: PUSH
40804: LD_INT 4
40806: PUSH
40807: LD_INT 5
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: IN
40818: NOT
40819: OR
40820: PUSH
40821: LD_VAR 0 3
40825: PPUSH
40826: LD_VAR 0 4
40830: PPUSH
40831: CALL_OW 488
40835: NOT
40836: OR
40837: IFFALSE 40841
// exit ;
40839: GO 41577
// side := GetSide ( depot ) ;
40841: LD_ADDR_VAR 0 9
40845: PUSH
40846: LD_VAR 0 1
40850: PPUSH
40851: CALL_OW 255
40855: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40856: LD_VAR 0 9
40860: PPUSH
40861: LD_VAR 0 2
40865: PPUSH
40866: CALL 40334 0 2
40870: NOT
40871: IFFALSE 40875
// exit ;
40873: GO 41577
// pom := GetBase ( depot ) ;
40875: LD_ADDR_VAR 0 10
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 274
40889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40890: LD_ADDR_VAR 0 11
40894: PUSH
40895: LD_VAR 0 2
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 248
40909: PPUSH
40910: CALL_OW 450
40914: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40915: LD_VAR 0 10
40919: PPUSH
40920: LD_INT 1
40922: PPUSH
40923: CALL_OW 275
40927: PUSH
40928: LD_VAR 0 11
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: GREATEREQUAL
40937: PUSH
40938: LD_VAR 0 10
40942: PPUSH
40943: LD_INT 2
40945: PPUSH
40946: CALL_OW 275
40950: PUSH
40951: LD_VAR 0 11
40955: PUSH
40956: LD_INT 2
40958: ARRAY
40959: GREATEREQUAL
40960: AND
40961: PUSH
40962: LD_VAR 0 10
40966: PPUSH
40967: LD_INT 3
40969: PPUSH
40970: CALL_OW 275
40974: PUSH
40975: LD_VAR 0 11
40979: PUSH
40980: LD_INT 3
40982: ARRAY
40983: GREATEREQUAL
40984: AND
40985: NOT
40986: IFFALSE 40990
// exit ;
40988: GO 41577
// if GetBType ( depot ) = b_depot then
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL_OW 266
40999: PUSH
41000: LD_INT 0
41002: EQUAL
41003: IFFALSE 41015
// dist := 28 else
41005: LD_ADDR_VAR 0 14
41009: PUSH
41010: LD_INT 28
41012: ST_TO_ADDR
41013: GO 41023
// dist := 36 ;
41015: LD_ADDR_VAR 0 14
41019: PUSH
41020: LD_INT 36
41022: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41023: LD_VAR 0 1
41027: PPUSH
41028: LD_VAR 0 3
41032: PPUSH
41033: LD_VAR 0 4
41037: PPUSH
41038: CALL_OW 297
41042: PUSH
41043: LD_VAR 0 14
41047: GREATER
41048: IFFALSE 41052
// exit ;
41050: GO 41577
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41052: LD_ADDR_VAR 0 12
41056: PUSH
41057: LD_VAR 0 2
41061: PPUSH
41062: LD_VAR 0 3
41066: PPUSH
41067: LD_VAR 0 4
41071: PPUSH
41072: LD_VAR 0 5
41076: PPUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 248
41086: PPUSH
41087: LD_INT 0
41089: PPUSH
41090: CALL 41582 0 6
41094: ST_TO_ADDR
// if not hexes then
41095: LD_VAR 0 12
41099: NOT
41100: IFFALSE 41104
// exit ;
41102: GO 41577
// hex := GetHexInfo ( x , y ) ;
41104: LD_ADDR_VAR 0 15
41108: PUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: LD_VAR 0 4
41118: PPUSH
41119: CALL_OW 546
41123: ST_TO_ADDR
// if hex [ 1 ] then
41124: LD_VAR 0 15
41128: PUSH
41129: LD_INT 1
41131: ARRAY
41132: IFFALSE 41136
// exit ;
41134: GO 41577
// height := hex [ 2 ] ;
41136: LD_ADDR_VAR 0 13
41140: PUSH
41141: LD_VAR 0 15
41145: PUSH
41146: LD_INT 2
41148: ARRAY
41149: ST_TO_ADDR
// for i = 1 to hexes do
41150: LD_ADDR_VAR 0 7
41154: PUSH
41155: DOUBLE
41156: LD_INT 1
41158: DEC
41159: ST_TO_ADDR
41160: LD_VAR 0 12
41164: PUSH
41165: FOR_TO
41166: IFFALSE 41496
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41168: LD_VAR 0 12
41172: PUSH
41173: LD_VAR 0 7
41177: ARRAY
41178: PUSH
41179: LD_INT 1
41181: ARRAY
41182: PPUSH
41183: LD_VAR 0 12
41187: PUSH
41188: LD_VAR 0 7
41192: ARRAY
41193: PUSH
41194: LD_INT 2
41196: ARRAY
41197: PPUSH
41198: CALL_OW 488
41202: NOT
41203: PUSH
41204: LD_VAR 0 12
41208: PUSH
41209: LD_VAR 0 7
41213: ARRAY
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: PPUSH
41219: LD_VAR 0 12
41223: PUSH
41224: LD_VAR 0 7
41228: ARRAY
41229: PUSH
41230: LD_INT 2
41232: ARRAY
41233: PPUSH
41234: CALL_OW 428
41238: PUSH
41239: LD_INT 0
41241: GREATER
41242: OR
41243: PUSH
41244: LD_VAR 0 12
41248: PUSH
41249: LD_VAR 0 7
41253: ARRAY
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PPUSH
41259: LD_VAR 0 12
41263: PUSH
41264: LD_VAR 0 7
41268: ARRAY
41269: PUSH
41270: LD_INT 2
41272: ARRAY
41273: PPUSH
41274: CALL_OW 351
41278: OR
41279: IFFALSE 41285
// exit ;
41281: POP
41282: POP
41283: GO 41577
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41285: LD_ADDR_VAR 0 8
41289: PUSH
41290: LD_VAR 0 12
41294: PUSH
41295: LD_VAR 0 7
41299: ARRAY
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PPUSH
41305: LD_VAR 0 12
41309: PUSH
41310: LD_VAR 0 7
41314: ARRAY
41315: PUSH
41316: LD_INT 2
41318: ARRAY
41319: PPUSH
41320: CALL_OW 546
41324: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41325: LD_VAR 0 8
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: PUSH
41334: LD_VAR 0 8
41338: PUSH
41339: LD_INT 2
41341: ARRAY
41342: PUSH
41343: LD_VAR 0 13
41347: PUSH
41348: LD_INT 2
41350: PLUS
41351: GREATER
41352: OR
41353: PUSH
41354: LD_VAR 0 8
41358: PUSH
41359: LD_INT 2
41361: ARRAY
41362: PUSH
41363: LD_VAR 0 13
41367: PUSH
41368: LD_INT 2
41370: MINUS
41371: LESS
41372: OR
41373: PUSH
41374: LD_VAR 0 8
41378: PUSH
41379: LD_INT 3
41381: ARRAY
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 8
41388: PUSH
41389: LD_INT 9
41391: PUSH
41392: LD_INT 10
41394: PUSH
41395: LD_INT 11
41397: PUSH
41398: LD_INT 12
41400: PUSH
41401: LD_INT 13
41403: PUSH
41404: LD_INT 16
41406: PUSH
41407: LD_INT 17
41409: PUSH
41410: LD_INT 18
41412: PUSH
41413: LD_INT 19
41415: PUSH
41416: LD_INT 20
41418: PUSH
41419: LD_INT 21
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: IN
41437: NOT
41438: OR
41439: PUSH
41440: LD_VAR 0 8
41444: PUSH
41445: LD_INT 5
41447: ARRAY
41448: NOT
41449: OR
41450: PUSH
41451: LD_VAR 0 8
41455: PUSH
41456: LD_INT 6
41458: ARRAY
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 7
41468: PUSH
41469: LD_INT 9
41471: PUSH
41472: LD_INT 10
41474: PUSH
41475: LD_INT 11
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: IN
41486: NOT
41487: OR
41488: IFFALSE 41494
// exit ;
41490: POP
41491: POP
41492: GO 41577
// end ;
41494: GO 41165
41496: POP
41497: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41498: LD_VAR 0 9
41502: PPUSH
41503: LD_VAR 0 3
41507: PPUSH
41508: LD_VAR 0 4
41512: PPUSH
41513: LD_INT 20
41515: PPUSH
41516: CALL 33500 0 4
41520: PUSH
41521: LD_INT 4
41523: ARRAY
41524: IFFALSE 41528
// exit ;
41526: GO 41577
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41528: LD_VAR 0 2
41532: PUSH
41533: LD_INT 29
41535: PUSH
41536: LD_INT 30
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: IN
41543: PUSH
41544: LD_VAR 0 3
41548: PPUSH
41549: LD_VAR 0 4
41553: PPUSH
41554: LD_VAR 0 9
41558: PPUSH
41559: CALL_OW 440
41563: NOT
41564: AND
41565: IFFALSE 41569
// exit ;
41567: GO 41577
// result := true ;
41569: LD_ADDR_VAR 0 6
41573: PUSH
41574: LD_INT 1
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 6
41581: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
// result = [ ] ;
41642: LD_ADDR_VAR 0 7
41646: PUSH
41647: EMPTY
41648: ST_TO_ADDR
// temp_list = [ ] ;
41649: LD_ADDR_VAR 0 9
41653: PUSH
41654: EMPTY
41655: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41656: LD_VAR 0 4
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: LD_INT 4
41675: PUSH
41676: LD_INT 5
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: IN
41687: NOT
41688: PUSH
41689: LD_VAR 0 1
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: IN
41704: PUSH
41705: LD_VAR 0 5
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: IN
41724: NOT
41725: AND
41726: OR
41727: IFFALSE 41731
// exit ;
41729: GO 60122
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41731: LD_VAR 0 1
41735: PUSH
41736: LD_INT 6
41738: PUSH
41739: LD_INT 7
41741: PUSH
41742: LD_INT 8
41744: PUSH
41745: LD_INT 13
41747: PUSH
41748: LD_INT 12
41750: PUSH
41751: LD_INT 15
41753: PUSH
41754: LD_INT 11
41756: PUSH
41757: LD_INT 14
41759: PUSH
41760: LD_INT 10
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: IN
41774: IFFALSE 41784
// btype = b_lab ;
41776: LD_ADDR_VAR 0 1
41780: PUSH
41781: LD_INT 6
41783: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41784: LD_VAR 0 6
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: IN
41803: NOT
41804: PUSH
41805: LD_VAR 0 1
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: LD_INT 6
41824: PUSH
41825: LD_INT 36
41827: PUSH
41828: LD_INT 4
41830: PUSH
41831: LD_INT 5
41833: PUSH
41834: LD_INT 31
41836: PUSH
41837: LD_INT 32
41839: PUSH
41840: LD_INT 33
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: IN
41856: NOT
41857: PUSH
41858: LD_VAR 0 6
41862: PUSH
41863: LD_INT 1
41865: EQUAL
41866: AND
41867: OR
41868: PUSH
41869: LD_VAR 0 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: IN
41884: NOT
41885: PUSH
41886: LD_VAR 0 6
41890: PUSH
41891: LD_INT 2
41893: EQUAL
41894: AND
41895: OR
41896: IFFALSE 41906
// mode = 0 ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_INT 0
41905: ST_TO_ADDR
// case mode of 0 :
41906: LD_VAR 0 6
41910: PUSH
41911: LD_INT 0
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 53372
41919: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41920: LD_ADDR_VAR 0 11
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42113: LD_ADDR_VAR 0 12
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42309: LD_ADDR_VAR 0 13
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: NEG
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42508: LD_ADDR_VAR 0 14
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42704: LD_ADDR_VAR 0 15
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42897: LD_ADDR_VAR 0 16
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 3
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43090: LD_ADDR_VAR 0 17
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43320: LD_ADDR_VAR 0 18
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43550: LD_ADDR_VAR 0 19
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43780: LD_ADDR_VAR 0 20
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44010: LD_ADDR_VAR 0 21
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44240: LD_ADDR_VAR 0 22
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44470: LD_ADDR_VAR 0 23
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44750: LD_ADDR_VAR 0 24
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45026: LD_ADDR_VAR 0 25
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 3
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45300: LD_ADDR_VAR 0 26
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45576: LD_ADDR_VAR 0 27
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 2
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45856: LD_ADDR_VAR 0 28
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46138: LD_ADDR_VAR 0 29
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46417: LD_ADDR_VAR 0 30
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46695: LD_ADDR_VAR 0 31
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46973: LD_ADDR_VAR 0 32
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 3
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47251: LD_ADDR_VAR 0 33
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 3
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47530: LD_ADDR_VAR 0 34
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 3
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47810: LD_ADDR_VAR 0 35
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47922: LD_ADDR_VAR 0 36
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48034: LD_ADDR_VAR 0 37
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48146: LD_ADDR_VAR 0 38
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48258: LD_ADDR_VAR 0 39
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48370: LD_ADDR_VAR 0 40
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48482: LD_ADDR_VAR 0 41
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: NEG
48792: PUSH
48793: LD_INT 3
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48832: LD_ADDR_VAR 0 42
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 2
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49182: LD_ADDR_VAR 0 43
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49530: LD_ADDR_VAR 0 44
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49880: LD_ADDR_VAR 0 45
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50230: LD_ADDR_VAR 0 46
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50578: LD_ADDR_VAR 0 47
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50729: LD_ADDR_VAR 0 48
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50876: LD_ADDR_VAR 0 49
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51020: LD_ADDR_VAR 0 50
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51164: LD_ADDR_VAR 0 51
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51311: LD_ADDR_VAR 0 52
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51462: LD_ADDR_VAR 0 53
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51692: LD_ADDR_VAR 0 54
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51922: LD_ADDR_VAR 0 55
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52152: LD_ADDR_VAR 0 56
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52382: LD_ADDR_VAR 0 57
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52612: LD_ADDR_VAR 0 58
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52842: LD_ADDR_VAR 0 59
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52930: LD_ADDR_VAR 0 60
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53018: LD_ADDR_VAR 0 61
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53106: LD_ADDR_VAR 0 62
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53194: LD_ADDR_VAR 0 63
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 64
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// end ; 1 :
53370: GO 59267
53372: LD_INT 1
53374: DOUBLE
53375: EQUAL
53376: IFTRUE 53380
53378: GO 56003
53380: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53381: LD_ADDR_VAR 0 11
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 3
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53425: LD_ADDR_VAR 0 12
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53466: LD_ADDR_VAR 0 13
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53506: LD_ADDR_VAR 0 14
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53547: LD_ADDR_VAR 0 15
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53591: LD_ADDR_VAR 0 16
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53637: LD_ADDR_VAR 0 17
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53681: LD_ADDR_VAR 0 18
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53722: LD_ADDR_VAR 0 19
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53762: LD_ADDR_VAR 0 20
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53803: LD_ADDR_VAR 0 21
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53847: LD_ADDR_VAR 0 22
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53893: LD_ADDR_VAR 0 23
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53937: LD_ADDR_VAR 0 24
53941: PUSH
53942: LD_INT 3
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53978: LD_ADDR_VAR 0 25
53982: PUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 4
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54018: LD_ADDR_VAR 0 26
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 4
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54059: LD_ADDR_VAR 0 27
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 4
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54103: LD_ADDR_VAR 0 28
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 4
54134: NEG
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54149: LD_ADDR_VAR 0 29
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 3
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 4
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 5
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 5
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 4
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 6
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 6
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 5
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54304: LD_ADDR_VAR 0 30
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 3
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 4
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 5
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 5
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 5
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 6
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 6
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54447: LD_ADDR_VAR 0 31
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 4
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: LD_INT 4
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 4
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 5
54514: PUSH
54515: LD_INT 4
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 5
54524: PUSH
54525: LD_INT 5
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 4
54534: PUSH
54535: LD_INT 5
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 6
54544: PUSH
54545: LD_INT 5
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 6
54554: PUSH
54555: LD_INT 6
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 5
54564: PUSH
54565: LD_INT 6
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54586: LD_ADDR_VAR 0 32
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 4
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: LD_INT 5
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 5
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 6
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 6
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 5
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54729: LD_ADDR_VAR 0 33
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 4
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 4
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 5
54815: NEG
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 5
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 6
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 6
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54884: LD_ADDR_VAR 0 34
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 3
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 4
54951: NEG
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: NEG
54964: PUSH
54965: LD_INT 5
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 5
54975: NEG
54976: PUSH
54977: LD_INT 4
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 5
54987: NEG
54988: PUSH
54989: LD_INT 5
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 5
54999: NEG
55000: PUSH
55001: LD_INT 6
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 6
55011: NEG
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 6
55023: NEG
55024: PUSH
55025: LD_INT 6
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55047: LD_ADDR_VAR 0 41
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55091: LD_ADDR_VAR 0 42
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55132: LD_ADDR_VAR 0 43
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55172: LD_ADDR_VAR 0 44
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 3
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55213: LD_ADDR_VAR 0 45
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55257: LD_ADDR_VAR 0 46
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55303: LD_ADDR_VAR 0 47
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55336: LD_ADDR_VAR 0 48
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55367: LD_ADDR_VAR 0 49
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55396: LD_ADDR_VAR 0 50
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55425: LD_ADDR_VAR 0 51
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55456: LD_ADDR_VAR 0 52
55460: PUSH
55461: LD_INT 3
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55489: LD_ADDR_VAR 0 53
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 3
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55533: LD_ADDR_VAR 0 54
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55574: LD_ADDR_VAR 0 55
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55614: LD_ADDR_VAR 0 56
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55655: LD_ADDR_VAR 0 57
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55699: LD_ADDR_VAR 0 58
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: NEG
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55745: LD_ADDR_VAR 0 59
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55789: LD_ADDR_VAR 0 60
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55830: LD_ADDR_VAR 0 61
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55870: LD_ADDR_VAR 0 62
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55911: LD_ADDR_VAR 0 63
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55955: LD_ADDR_VAR 0 64
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// end ; 2 :
56001: GO 59267
56003: LD_INT 2
56005: DOUBLE
56006: EQUAL
56007: IFTRUE 56011
56009: GO 59266
56011: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56012: LD_ADDR_VAR 0 29
56016: PUSH
56017: LD_INT 4
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 5
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 5
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 4
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 4
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: LD_INT 4
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 2
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 4
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: LD_INT 4
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 5
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 5
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 5
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 4
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: NEG
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 4
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 5
56469: NEG
56470: PUSH
56471: LD_INT 5
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 5
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 5
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56550: LD_ADDR_VAR 0 30
56554: PUSH
56555: LD_INT 4
56557: PUSH
56558: LD_INT 4
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: LD_INT 5
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: LD_INT 5
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 4
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: LD_INT 5
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 4
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 4
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: LD_INT 4
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 4
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 4
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 5
56796: NEG
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 5
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 5
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: LD_INT 4
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 3
56890: NEG
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 4
56902: NEG
56903: PUSH
56904: LD_INT 3
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 4
56914: NEG
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 4
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 4
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 5
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 5
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57097: LD_ADDR_VAR 0 31
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 3
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 4
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 5
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 5
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 4
57253: NEG
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 4
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 4
57299: NEG
57300: PUSH
57301: LD_INT 4
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 4
57311: NEG
57312: PUSH
57313: LD_INT 5
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: LD_INT 4
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 5
57359: NEG
57360: PUSH
57361: LD_INT 4
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 5
57371: NEG
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 3
57383: NEG
57384: PUSH
57385: LD_INT 5
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: NEG
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 4
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 4
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 5
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 5
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 5
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57647: LD_ADDR_VAR 0 32
57651: PUSH
57652: LD_INT 4
57654: NEG
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 4
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 4
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 5
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 5
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 4
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 4
57828: NEG
57829: PUSH
57830: LD_INT 4
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 4
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 4
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 5
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 4
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 5
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 3
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 4
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 4
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: LD_INT 5
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 5
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 3
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 5
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: LD_INT 5
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58194: LD_ADDR_VAR 0 33
58198: PUSH
58199: LD_INT 4
58201: NEG
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 4
58213: NEG
58214: PUSH
58215: LD_INT 5
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 4
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 5
58261: NEG
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: LD_INT 5
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 5
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 5
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 4
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 4
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 4
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 5
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 2
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 5
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: LD_INT 3
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: LD_INT 4
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 4
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 4
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 4
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 5
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: LD_INT 5
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58732: LD_ADDR_VAR 0 34
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 5
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 5
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 5
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 4
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: LD_INT 4
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: LD_INT 5
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: LD_INT 5
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 4
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 5
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: LD_INT 5
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 3
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 4
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 4
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 4
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 4
59117: NEG
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 5
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 5
59196: NEG
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: ST_TO_ADDR
// end ; end ;
59264: GO 59267
59266: POP
// case btype of b_depot , b_warehouse :
59267: LD_VAR 0 1
59271: PUSH
59272: LD_INT 0
59274: DOUBLE
59275: EQUAL
59276: IFTRUE 59286
59278: LD_INT 1
59280: DOUBLE
59281: EQUAL
59282: IFTRUE 59286
59284: GO 59487
59286: POP
// case nation of nation_american :
59287: LD_VAR 0 5
59291: PUSH
59292: LD_INT 1
59294: DOUBLE
59295: EQUAL
59296: IFTRUE 59300
59298: GO 59356
59300: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59301: LD_ADDR_VAR 0 9
59305: PUSH
59306: LD_VAR 0 11
59310: PUSH
59311: LD_VAR 0 12
59315: PUSH
59316: LD_VAR 0 13
59320: PUSH
59321: LD_VAR 0 14
59325: PUSH
59326: LD_VAR 0 15
59330: PUSH
59331: LD_VAR 0 16
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: LD_VAR 0 4
59348: PUSH
59349: LD_INT 1
59351: PLUS
59352: ARRAY
59353: ST_TO_ADDR
59354: GO 59485
59356: LD_INT 2
59358: DOUBLE
59359: EQUAL
59360: IFTRUE 59364
59362: GO 59420
59364: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59365: LD_ADDR_VAR 0 9
59369: PUSH
59370: LD_VAR 0 17
59374: PUSH
59375: LD_VAR 0 18
59379: PUSH
59380: LD_VAR 0 19
59384: PUSH
59385: LD_VAR 0 20
59389: PUSH
59390: LD_VAR 0 21
59394: PUSH
59395: LD_VAR 0 22
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: PUSH
59408: LD_VAR 0 4
59412: PUSH
59413: LD_INT 1
59415: PLUS
59416: ARRAY
59417: ST_TO_ADDR
59418: GO 59485
59420: LD_INT 3
59422: DOUBLE
59423: EQUAL
59424: IFTRUE 59428
59426: GO 59484
59428: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59429: LD_ADDR_VAR 0 9
59433: PUSH
59434: LD_VAR 0 23
59438: PUSH
59439: LD_VAR 0 24
59443: PUSH
59444: LD_VAR 0 25
59448: PUSH
59449: LD_VAR 0 26
59453: PUSH
59454: LD_VAR 0 27
59458: PUSH
59459: LD_VAR 0 28
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: PUSH
59472: LD_VAR 0 4
59476: PUSH
59477: LD_INT 1
59479: PLUS
59480: ARRAY
59481: ST_TO_ADDR
59482: GO 59485
59484: POP
59485: GO 60040
59487: LD_INT 2
59489: DOUBLE
59490: EQUAL
59491: IFTRUE 59501
59493: LD_INT 3
59495: DOUBLE
59496: EQUAL
59497: IFTRUE 59501
59499: GO 59557
59501: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59502: LD_ADDR_VAR 0 9
59506: PUSH
59507: LD_VAR 0 29
59511: PUSH
59512: LD_VAR 0 30
59516: PUSH
59517: LD_VAR 0 31
59521: PUSH
59522: LD_VAR 0 32
59526: PUSH
59527: LD_VAR 0 33
59531: PUSH
59532: LD_VAR 0 34
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: PUSH
59545: LD_VAR 0 4
59549: PUSH
59550: LD_INT 1
59552: PLUS
59553: ARRAY
59554: ST_TO_ADDR
59555: GO 60040
59557: LD_INT 16
59559: DOUBLE
59560: EQUAL
59561: IFTRUE 59619
59563: LD_INT 17
59565: DOUBLE
59566: EQUAL
59567: IFTRUE 59619
59569: LD_INT 18
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59619
59575: LD_INT 19
59577: DOUBLE
59578: EQUAL
59579: IFTRUE 59619
59581: LD_INT 22
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59619
59587: LD_INT 20
59589: DOUBLE
59590: EQUAL
59591: IFTRUE 59619
59593: LD_INT 21
59595: DOUBLE
59596: EQUAL
59597: IFTRUE 59619
59599: LD_INT 23
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59619
59605: LD_INT 24
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59619
59611: LD_INT 25
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59619
59617: GO 59675
59619: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59620: LD_ADDR_VAR 0 9
59624: PUSH
59625: LD_VAR 0 35
59629: PUSH
59630: LD_VAR 0 36
59634: PUSH
59635: LD_VAR 0 37
59639: PUSH
59640: LD_VAR 0 38
59644: PUSH
59645: LD_VAR 0 39
59649: PUSH
59650: LD_VAR 0 40
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: PUSH
59663: LD_VAR 0 4
59667: PUSH
59668: LD_INT 1
59670: PLUS
59671: ARRAY
59672: ST_TO_ADDR
59673: GO 60040
59675: LD_INT 6
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59731
59681: LD_INT 7
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59731
59687: LD_INT 8
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59731
59693: LD_INT 13
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59731
59699: LD_INT 12
59701: DOUBLE
59702: EQUAL
59703: IFTRUE 59731
59705: LD_INT 15
59707: DOUBLE
59708: EQUAL
59709: IFTRUE 59731
59711: LD_INT 11
59713: DOUBLE
59714: EQUAL
59715: IFTRUE 59731
59717: LD_INT 14
59719: DOUBLE
59720: EQUAL
59721: IFTRUE 59731
59723: LD_INT 10
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59731
59729: GO 59787
59731: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59732: LD_ADDR_VAR 0 9
59736: PUSH
59737: LD_VAR 0 41
59741: PUSH
59742: LD_VAR 0 42
59746: PUSH
59747: LD_VAR 0 43
59751: PUSH
59752: LD_VAR 0 44
59756: PUSH
59757: LD_VAR 0 45
59761: PUSH
59762: LD_VAR 0 46
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: PUSH
59775: LD_VAR 0 4
59779: PUSH
59780: LD_INT 1
59782: PLUS
59783: ARRAY
59784: ST_TO_ADDR
59785: GO 60040
59787: LD_INT 36
59789: DOUBLE
59790: EQUAL
59791: IFTRUE 59795
59793: GO 59851
59795: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59796: LD_ADDR_VAR 0 9
59800: PUSH
59801: LD_VAR 0 47
59805: PUSH
59806: LD_VAR 0 48
59810: PUSH
59811: LD_VAR 0 49
59815: PUSH
59816: LD_VAR 0 50
59820: PUSH
59821: LD_VAR 0 51
59825: PUSH
59826: LD_VAR 0 52
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: PUSH
59839: LD_VAR 0 4
59843: PUSH
59844: LD_INT 1
59846: PLUS
59847: ARRAY
59848: ST_TO_ADDR
59849: GO 60040
59851: LD_INT 4
59853: DOUBLE
59854: EQUAL
59855: IFTRUE 59877
59857: LD_INT 5
59859: DOUBLE
59860: EQUAL
59861: IFTRUE 59877
59863: LD_INT 34
59865: DOUBLE
59866: EQUAL
59867: IFTRUE 59877
59869: LD_INT 37
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59877
59875: GO 59933
59877: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59878: LD_ADDR_VAR 0 9
59882: PUSH
59883: LD_VAR 0 53
59887: PUSH
59888: LD_VAR 0 54
59892: PUSH
59893: LD_VAR 0 55
59897: PUSH
59898: LD_VAR 0 56
59902: PUSH
59903: LD_VAR 0 57
59907: PUSH
59908: LD_VAR 0 58
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: LD_VAR 0 4
59925: PUSH
59926: LD_INT 1
59928: PLUS
59929: ARRAY
59930: ST_TO_ADDR
59931: GO 60040
59933: LD_INT 31
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59983
59939: LD_INT 32
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 59983
59945: LD_INT 33
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59983
59951: LD_INT 27
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 59983
59957: LD_INT 26
59959: DOUBLE
59960: EQUAL
59961: IFTRUE 59983
59963: LD_INT 28
59965: DOUBLE
59966: EQUAL
59967: IFTRUE 59983
59969: LD_INT 29
59971: DOUBLE
59972: EQUAL
59973: IFTRUE 59983
59975: LD_INT 30
59977: DOUBLE
59978: EQUAL
59979: IFTRUE 59983
59981: GO 60039
59983: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59984: LD_ADDR_VAR 0 9
59988: PUSH
59989: LD_VAR 0 59
59993: PUSH
59994: LD_VAR 0 60
59998: PUSH
59999: LD_VAR 0 61
60003: PUSH
60004: LD_VAR 0 62
60008: PUSH
60009: LD_VAR 0 63
60013: PUSH
60014: LD_VAR 0 64
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: PUSH
60027: LD_VAR 0 4
60031: PUSH
60032: LD_INT 1
60034: PLUS
60035: ARRAY
60036: ST_TO_ADDR
60037: GO 60040
60039: POP
// temp_list2 = [ ] ;
60040: LD_ADDR_VAR 0 10
60044: PUSH
60045: EMPTY
60046: ST_TO_ADDR
// for i in temp_list do
60047: LD_ADDR_VAR 0 8
60051: PUSH
60052: LD_VAR 0 9
60056: PUSH
60057: FOR_IN
60058: IFFALSE 60110
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60060: LD_ADDR_VAR 0 10
60064: PUSH
60065: LD_VAR 0 10
60069: PUSH
60070: LD_VAR 0 8
60074: PUSH
60075: LD_INT 1
60077: ARRAY
60078: PUSH
60079: LD_VAR 0 2
60083: PLUS
60084: PUSH
60085: LD_VAR 0 8
60089: PUSH
60090: LD_INT 2
60092: ARRAY
60093: PUSH
60094: LD_VAR 0 3
60098: PLUS
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: EMPTY
60105: LIST
60106: ADD
60107: ST_TO_ADDR
60108: GO 60057
60110: POP
60111: POP
// result = temp_list2 ;
60112: LD_ADDR_VAR 0 7
60116: PUSH
60117: LD_VAR 0 10
60121: ST_TO_ADDR
// end ;
60122: LD_VAR 0 7
60126: RET
// export function EnemyInRange ( unit , dist ) ; begin
60127: LD_INT 0
60129: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60130: LD_ADDR_VAR 0 3
60134: PUSH
60135: LD_VAR 0 1
60139: PPUSH
60140: CALL_OW 255
60144: PPUSH
60145: LD_VAR 0 1
60149: PPUSH
60150: CALL_OW 250
60154: PPUSH
60155: LD_VAR 0 1
60159: PPUSH
60160: CALL_OW 251
60164: PPUSH
60165: LD_VAR 0 2
60169: PPUSH
60170: CALL 33500 0 4
60174: PUSH
60175: LD_INT 4
60177: ARRAY
60178: ST_TO_ADDR
// end ;
60179: LD_VAR 0 3
60183: RET
// export function PlayerSeeMe ( unit ) ; begin
60184: LD_INT 0
60186: PPUSH
// result := See ( your_side , unit ) ;
60187: LD_ADDR_VAR 0 2
60191: PUSH
60192: LD_OWVAR 2
60196: PPUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: CALL_OW 292
60206: ST_TO_ADDR
// end ;
60207: LD_VAR 0 2
60211: RET
// export function ReverseDir ( unit ) ; begin
60212: LD_INT 0
60214: PPUSH
// if not unit then
60215: LD_VAR 0 1
60219: NOT
60220: IFFALSE 60224
// exit ;
60222: GO 60247
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60224: LD_ADDR_VAR 0 2
60228: PUSH
60229: LD_VAR 0 1
60233: PPUSH
60234: CALL_OW 254
60238: PUSH
60239: LD_INT 3
60241: PLUS
60242: PUSH
60243: LD_INT 6
60245: MOD
60246: ST_TO_ADDR
// end ;
60247: LD_VAR 0 2
60251: RET
// export function ReverseArray ( array ) ; var i ; begin
60252: LD_INT 0
60254: PPUSH
60255: PPUSH
// if not array then
60256: LD_VAR 0 1
60260: NOT
60261: IFFALSE 60265
// exit ;
60263: GO 60320
// result := [ ] ;
60265: LD_ADDR_VAR 0 2
60269: PUSH
60270: EMPTY
60271: ST_TO_ADDR
// for i := array downto 1 do
60272: LD_ADDR_VAR 0 3
60276: PUSH
60277: DOUBLE
60278: LD_VAR 0 1
60282: INC
60283: ST_TO_ADDR
60284: LD_INT 1
60286: PUSH
60287: FOR_DOWNTO
60288: IFFALSE 60318
// result := Join ( result , array [ i ] ) ;
60290: LD_ADDR_VAR 0 2
60294: PUSH
60295: LD_VAR 0 2
60299: PPUSH
60300: LD_VAR 0 1
60304: PUSH
60305: LD_VAR 0 3
60309: ARRAY
60310: PPUSH
60311: CALL 64985 0 2
60315: ST_TO_ADDR
60316: GO 60287
60318: POP
60319: POP
// end ;
60320: LD_VAR 0 2
60324: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60325: LD_INT 0
60327: PPUSH
60328: PPUSH
60329: PPUSH
60330: PPUSH
60331: PPUSH
60332: PPUSH
// if not unit or not hexes then
60333: LD_VAR 0 1
60337: NOT
60338: PUSH
60339: LD_VAR 0 2
60343: NOT
60344: OR
60345: IFFALSE 60349
// exit ;
60347: GO 60472
// dist := 9999 ;
60349: LD_ADDR_VAR 0 5
60353: PUSH
60354: LD_INT 9999
60356: ST_TO_ADDR
// for i = 1 to hexes do
60357: LD_ADDR_VAR 0 4
60361: PUSH
60362: DOUBLE
60363: LD_INT 1
60365: DEC
60366: ST_TO_ADDR
60367: LD_VAR 0 2
60371: PUSH
60372: FOR_TO
60373: IFFALSE 60460
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60375: LD_ADDR_VAR 0 6
60379: PUSH
60380: LD_VAR 0 1
60384: PPUSH
60385: LD_VAR 0 2
60389: PUSH
60390: LD_VAR 0 4
60394: ARRAY
60395: PUSH
60396: LD_INT 1
60398: ARRAY
60399: PPUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_VAR 0 4
60409: ARRAY
60410: PUSH
60411: LD_INT 2
60413: ARRAY
60414: PPUSH
60415: CALL_OW 297
60419: ST_TO_ADDR
// if tdist < dist then
60420: LD_VAR 0 6
60424: PUSH
60425: LD_VAR 0 5
60429: LESS
60430: IFFALSE 60458
// begin hex := hexes [ i ] ;
60432: LD_ADDR_VAR 0 8
60436: PUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_VAR 0 4
60446: ARRAY
60447: ST_TO_ADDR
// dist := tdist ;
60448: LD_ADDR_VAR 0 5
60452: PUSH
60453: LD_VAR 0 6
60457: ST_TO_ADDR
// end ; end ;
60458: GO 60372
60460: POP
60461: POP
// result := hex ;
60462: LD_ADDR_VAR 0 3
60466: PUSH
60467: LD_VAR 0 8
60471: ST_TO_ADDR
// end ;
60472: LD_VAR 0 3
60476: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60477: LD_INT 0
60479: PPUSH
60480: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60481: LD_VAR 0 1
60485: NOT
60486: PUSH
60487: LD_VAR 0 1
60491: PUSH
60492: LD_INT 21
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 23
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PPUSH
60516: CALL_OW 69
60520: IN
60521: NOT
60522: OR
60523: IFFALSE 60527
// exit ;
60525: GO 60574
// for i = 1 to 3 do
60527: LD_ADDR_VAR 0 3
60531: PUSH
60532: DOUBLE
60533: LD_INT 1
60535: DEC
60536: ST_TO_ADDR
60537: LD_INT 3
60539: PUSH
60540: FOR_TO
60541: IFFALSE 60572
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 250
60552: PPUSH
60553: LD_VAR 0 1
60557: PPUSH
60558: CALL_OW 251
60562: PPUSH
60563: LD_INT 1
60565: PPUSH
60566: CALL_OW 453
60570: GO 60540
60572: POP
60573: POP
// end ;
60574: LD_VAR 0 2
60578: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60579: LD_INT 0
60581: PPUSH
60582: PPUSH
60583: PPUSH
60584: PPUSH
60585: PPUSH
60586: PPUSH
// if not unit or not enemy_unit then
60587: LD_VAR 0 1
60591: NOT
60592: PUSH
60593: LD_VAR 0 2
60597: NOT
60598: OR
60599: IFFALSE 60603
// exit ;
60601: GO 61070
// if GetLives ( i ) < 250 then
60603: LD_VAR 0 4
60607: PPUSH
60608: CALL_OW 256
60612: PUSH
60613: LD_INT 250
60615: LESS
60616: IFFALSE 60629
// begin ComAutodestruct ( i ) ;
60618: LD_VAR 0 4
60622: PPUSH
60623: CALL 60477 0 1
// exit ;
60627: GO 61070
// end ; x := GetX ( enemy_unit ) ;
60629: LD_ADDR_VAR 0 7
60633: PUSH
60634: LD_VAR 0 2
60638: PPUSH
60639: CALL_OW 250
60643: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60644: LD_ADDR_VAR 0 8
60648: PUSH
60649: LD_VAR 0 2
60653: PPUSH
60654: CALL_OW 251
60658: ST_TO_ADDR
// if not x or not y then
60659: LD_VAR 0 7
60663: NOT
60664: PUSH
60665: LD_VAR 0 8
60669: NOT
60670: OR
60671: IFFALSE 60675
// exit ;
60673: GO 61070
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60675: LD_ADDR_VAR 0 6
60679: PUSH
60680: LD_VAR 0 7
60684: PPUSH
60685: LD_INT 0
60687: PPUSH
60688: LD_INT 4
60690: PPUSH
60691: CALL_OW 272
60695: PUSH
60696: LD_VAR 0 8
60700: PPUSH
60701: LD_INT 0
60703: PPUSH
60704: LD_INT 4
60706: PPUSH
60707: CALL_OW 273
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_VAR 0 7
60720: PPUSH
60721: LD_INT 1
60723: PPUSH
60724: LD_INT 4
60726: PPUSH
60727: CALL_OW 272
60731: PUSH
60732: LD_VAR 0 8
60736: PPUSH
60737: LD_INT 1
60739: PPUSH
60740: LD_INT 4
60742: PPUSH
60743: CALL_OW 273
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_VAR 0 7
60756: PPUSH
60757: LD_INT 2
60759: PPUSH
60760: LD_INT 4
60762: PPUSH
60763: CALL_OW 272
60767: PUSH
60768: LD_VAR 0 8
60772: PPUSH
60773: LD_INT 2
60775: PPUSH
60776: LD_INT 4
60778: PPUSH
60779: CALL_OW 273
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_VAR 0 7
60792: PPUSH
60793: LD_INT 3
60795: PPUSH
60796: LD_INT 4
60798: PPUSH
60799: CALL_OW 272
60803: PUSH
60804: LD_VAR 0 8
60808: PPUSH
60809: LD_INT 3
60811: PPUSH
60812: LD_INT 4
60814: PPUSH
60815: CALL_OW 273
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_VAR 0 7
60828: PPUSH
60829: LD_INT 4
60831: PPUSH
60832: LD_INT 4
60834: PPUSH
60835: CALL_OW 272
60839: PUSH
60840: LD_VAR 0 8
60844: PPUSH
60845: LD_INT 4
60847: PPUSH
60848: LD_INT 4
60850: PPUSH
60851: CALL_OW 273
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_VAR 0 7
60864: PPUSH
60865: LD_INT 5
60867: PPUSH
60868: LD_INT 4
60870: PPUSH
60871: CALL_OW 272
60875: PUSH
60876: LD_VAR 0 8
60880: PPUSH
60881: LD_INT 5
60883: PPUSH
60884: LD_INT 4
60886: PPUSH
60887: CALL_OW 273
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: ST_TO_ADDR
// for i = tmp downto 1 do
60904: LD_ADDR_VAR 0 4
60908: PUSH
60909: DOUBLE
60910: LD_VAR 0 6
60914: INC
60915: ST_TO_ADDR
60916: LD_INT 1
60918: PUSH
60919: FOR_DOWNTO
60920: IFFALSE 61021
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60922: LD_VAR 0 6
60926: PUSH
60927: LD_VAR 0 4
60931: ARRAY
60932: PUSH
60933: LD_INT 1
60935: ARRAY
60936: PPUSH
60937: LD_VAR 0 6
60941: PUSH
60942: LD_VAR 0 4
60946: ARRAY
60947: PUSH
60948: LD_INT 2
60950: ARRAY
60951: PPUSH
60952: CALL_OW 488
60956: NOT
60957: PUSH
60958: LD_VAR 0 6
60962: PUSH
60963: LD_VAR 0 4
60967: ARRAY
60968: PUSH
60969: LD_INT 1
60971: ARRAY
60972: PPUSH
60973: LD_VAR 0 6
60977: PUSH
60978: LD_VAR 0 4
60982: ARRAY
60983: PUSH
60984: LD_INT 2
60986: ARRAY
60987: PPUSH
60988: CALL_OW 428
60992: PUSH
60993: LD_INT 0
60995: NONEQUAL
60996: OR
60997: IFFALSE 61019
// tmp := Delete ( tmp , i ) ;
60999: LD_ADDR_VAR 0 6
61003: PUSH
61004: LD_VAR 0 6
61008: PPUSH
61009: LD_VAR 0 4
61013: PPUSH
61014: CALL_OW 3
61018: ST_TO_ADDR
61019: GO 60919
61021: POP
61022: POP
// j := GetClosestHex ( unit , tmp ) ;
61023: LD_ADDR_VAR 0 5
61027: PUSH
61028: LD_VAR 0 1
61032: PPUSH
61033: LD_VAR 0 6
61037: PPUSH
61038: CALL 60325 0 2
61042: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61043: LD_VAR 0 1
61047: PPUSH
61048: LD_VAR 0 5
61052: PUSH
61053: LD_INT 1
61055: ARRAY
61056: PPUSH
61057: LD_VAR 0 5
61061: PUSH
61062: LD_INT 2
61064: ARRAY
61065: PPUSH
61066: CALL_OW 111
// end ;
61070: LD_VAR 0 3
61074: RET
// export function PrepareApemanSoldier ( ) ; begin
61075: LD_INT 0
61077: PPUSH
// uc_nation := 0 ;
61078: LD_ADDR_OWVAR 21
61082: PUSH
61083: LD_INT 0
61085: ST_TO_ADDR
// hc_sex := sex_male ;
61086: LD_ADDR_OWVAR 27
61090: PUSH
61091: LD_INT 1
61093: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61094: LD_ADDR_OWVAR 28
61098: PUSH
61099: LD_INT 15
61101: ST_TO_ADDR
// hc_gallery :=  ;
61102: LD_ADDR_OWVAR 33
61106: PUSH
61107: LD_STRING 
61109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61110: LD_ADDR_OWVAR 31
61114: PUSH
61115: LD_INT 0
61117: PPUSH
61118: LD_INT 3
61120: PPUSH
61121: CALL_OW 12
61125: PUSH
61126: LD_INT 0
61128: PPUSH
61129: LD_INT 3
61131: PPUSH
61132: CALL_OW 12
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// end ;
61149: LD_VAR 0 1
61153: RET
// export function PrepareApemanEngineer ( ) ; begin
61154: LD_INT 0
61156: PPUSH
// uc_nation := 0 ;
61157: LD_ADDR_OWVAR 21
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// hc_sex := sex_male ;
61165: LD_ADDR_OWVAR 27
61169: PUSH
61170: LD_INT 1
61172: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61173: LD_ADDR_OWVAR 28
61177: PUSH
61178: LD_INT 16
61180: ST_TO_ADDR
// hc_gallery :=  ;
61181: LD_ADDR_OWVAR 33
61185: PUSH
61186: LD_STRING 
61188: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61189: LD_ADDR_OWVAR 31
61193: PUSH
61194: LD_INT 0
61196: PPUSH
61197: LD_INT 3
61199: PPUSH
61200: CALL_OW 12
61204: PUSH
61205: LD_INT 0
61207: PPUSH
61208: LD_INT 3
61210: PPUSH
61211: CALL_OW 12
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: ST_TO_ADDR
// end ;
61228: LD_VAR 0 1
61232: RET
// export function PrepareApeman ( agressivity ) ; begin
61233: LD_INT 0
61235: PPUSH
// uc_side := 0 ;
61236: LD_ADDR_OWVAR 20
61240: PUSH
61241: LD_INT 0
61243: ST_TO_ADDR
// uc_nation := 0 ;
61244: LD_ADDR_OWVAR 21
61248: PUSH
61249: LD_INT 0
61251: ST_TO_ADDR
// hc_sex := sex_male ;
61252: LD_ADDR_OWVAR 27
61256: PUSH
61257: LD_INT 1
61259: ST_TO_ADDR
// hc_class := class_apeman ;
61260: LD_ADDR_OWVAR 28
61264: PUSH
61265: LD_INT 12
61267: ST_TO_ADDR
// hc_gallery :=  ;
61268: LD_ADDR_OWVAR 33
61272: PUSH
61273: LD_STRING 
61275: ST_TO_ADDR
// if agressivity = 0 then
61276: LD_VAR 0 1
61280: PUSH
61281: LD_INT 0
61283: EQUAL
61284: IFFALSE 61296
// hc_agressivity := 0 else
61286: LD_ADDR_OWVAR 35
61290: PUSH
61291: LD_INT 0
61293: ST_TO_ADDR
61294: GO 61317
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61296: LD_ADDR_OWVAR 35
61300: PUSH
61301: LD_VAR 0 1
61305: NEG
61306: PPUSH
61307: LD_VAR 0 1
61311: PPUSH
61312: CALL_OW 12
61316: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61317: LD_ADDR_OWVAR 31
61321: PUSH
61322: LD_INT 0
61324: PPUSH
61325: LD_INT 3
61327: PPUSH
61328: CALL_OW 12
61332: PUSH
61333: LD_INT 0
61335: PPUSH
61336: LD_INT 3
61338: PPUSH
61339: CALL_OW 12
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// end ;
61356: LD_VAR 0 2
61360: RET
// export function PrepareTiger ( agressivity ) ; begin
61361: LD_INT 0
61363: PPUSH
// uc_side := 0 ;
61364: LD_ADDR_OWVAR 20
61368: PUSH
61369: LD_INT 0
61371: ST_TO_ADDR
// uc_nation := 0 ;
61372: LD_ADDR_OWVAR 21
61376: PUSH
61377: LD_INT 0
61379: ST_TO_ADDR
// hc_class := class_tiger ;
61380: LD_ADDR_OWVAR 28
61384: PUSH
61385: LD_INT 14
61387: ST_TO_ADDR
// hc_gallery :=  ;
61388: LD_ADDR_OWVAR 33
61392: PUSH
61393: LD_STRING 
61395: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61396: LD_ADDR_OWVAR 35
61400: PUSH
61401: LD_VAR 0 1
61405: NEG
61406: PPUSH
61407: LD_VAR 0 1
61411: PPUSH
61412: CALL_OW 12
61416: ST_TO_ADDR
// end ;
61417: LD_VAR 0 2
61421: RET
// export function PrepareEnchidna ( ) ; begin
61422: LD_INT 0
61424: PPUSH
// uc_side := 0 ;
61425: LD_ADDR_OWVAR 20
61429: PUSH
61430: LD_INT 0
61432: ST_TO_ADDR
// uc_nation := 0 ;
61433: LD_ADDR_OWVAR 21
61437: PUSH
61438: LD_INT 0
61440: ST_TO_ADDR
// hc_class := class_baggie ;
61441: LD_ADDR_OWVAR 28
61445: PUSH
61446: LD_INT 13
61448: ST_TO_ADDR
// hc_gallery :=  ;
61449: LD_ADDR_OWVAR 33
61453: PUSH
61454: LD_STRING 
61456: ST_TO_ADDR
// end ;
61457: LD_VAR 0 1
61461: RET
// export function PrepareFrog ( ) ; begin
61462: LD_INT 0
61464: PPUSH
// uc_side := 0 ;
61465: LD_ADDR_OWVAR 20
61469: PUSH
61470: LD_INT 0
61472: ST_TO_ADDR
// uc_nation := 0 ;
61473: LD_ADDR_OWVAR 21
61477: PUSH
61478: LD_INT 0
61480: ST_TO_ADDR
// hc_class := class_frog ;
61481: LD_ADDR_OWVAR 28
61485: PUSH
61486: LD_INT 19
61488: ST_TO_ADDR
// hc_gallery :=  ;
61489: LD_ADDR_OWVAR 33
61493: PUSH
61494: LD_STRING 
61496: ST_TO_ADDR
// end ;
61497: LD_VAR 0 1
61501: RET
// export function PrepareFish ( ) ; begin
61502: LD_INT 0
61504: PPUSH
// uc_side := 0 ;
61505: LD_ADDR_OWVAR 20
61509: PUSH
61510: LD_INT 0
61512: ST_TO_ADDR
// uc_nation := 0 ;
61513: LD_ADDR_OWVAR 21
61517: PUSH
61518: LD_INT 0
61520: ST_TO_ADDR
// hc_class := class_fish ;
61521: LD_ADDR_OWVAR 28
61525: PUSH
61526: LD_INT 20
61528: ST_TO_ADDR
// hc_gallery :=  ;
61529: LD_ADDR_OWVAR 33
61533: PUSH
61534: LD_STRING 
61536: ST_TO_ADDR
// end ;
61537: LD_VAR 0 1
61541: RET
// export function PrepareBird ( ) ; begin
61542: LD_INT 0
61544: PPUSH
// uc_side := 0 ;
61545: LD_ADDR_OWVAR 20
61549: PUSH
61550: LD_INT 0
61552: ST_TO_ADDR
// uc_nation := 0 ;
61553: LD_ADDR_OWVAR 21
61557: PUSH
61558: LD_INT 0
61560: ST_TO_ADDR
// hc_class := class_phororhacos ;
61561: LD_ADDR_OWVAR 28
61565: PUSH
61566: LD_INT 18
61568: ST_TO_ADDR
// hc_gallery :=  ;
61569: LD_ADDR_OWVAR 33
61573: PUSH
61574: LD_STRING 
61576: ST_TO_ADDR
// end ;
61577: LD_VAR 0 1
61581: RET
// export function PrepareHorse ( ) ; begin
61582: LD_INT 0
61584: PPUSH
// uc_side := 0 ;
61585: LD_ADDR_OWVAR 20
61589: PUSH
61590: LD_INT 0
61592: ST_TO_ADDR
// uc_nation := 0 ;
61593: LD_ADDR_OWVAR 21
61597: PUSH
61598: LD_INT 0
61600: ST_TO_ADDR
// hc_class := class_horse ;
61601: LD_ADDR_OWVAR 28
61605: PUSH
61606: LD_INT 21
61608: ST_TO_ADDR
// hc_gallery :=  ;
61609: LD_ADDR_OWVAR 33
61613: PUSH
61614: LD_STRING 
61616: ST_TO_ADDR
// end ;
61617: LD_VAR 0 1
61621: RET
// export function PrepareMastodont ( ) ; begin
61622: LD_INT 0
61624: PPUSH
// uc_side := 0 ;
61625: LD_ADDR_OWVAR 20
61629: PUSH
61630: LD_INT 0
61632: ST_TO_ADDR
// uc_nation := 0 ;
61633: LD_ADDR_OWVAR 21
61637: PUSH
61638: LD_INT 0
61640: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61641: LD_ADDR_OWVAR 37
61645: PUSH
61646: LD_INT 31
61648: ST_TO_ADDR
// vc_control := control_rider ;
61649: LD_ADDR_OWVAR 38
61653: PUSH
61654: LD_INT 4
61656: ST_TO_ADDR
// end ;
61657: LD_VAR 0 1
61661: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61662: LD_INT 0
61664: PPUSH
61665: PPUSH
61666: PPUSH
// uc_side = 0 ;
61667: LD_ADDR_OWVAR 20
61671: PUSH
61672: LD_INT 0
61674: ST_TO_ADDR
// uc_nation = 0 ;
61675: LD_ADDR_OWVAR 21
61679: PUSH
61680: LD_INT 0
61682: ST_TO_ADDR
// InitHc_All ( ) ;
61683: CALL_OW 584
// InitVc ;
61687: CALL_OW 20
// if mastodonts then
61691: LD_VAR 0 6
61695: IFFALSE 61762
// for i = 1 to mastodonts do
61697: LD_ADDR_VAR 0 11
61701: PUSH
61702: DOUBLE
61703: LD_INT 1
61705: DEC
61706: ST_TO_ADDR
61707: LD_VAR 0 6
61711: PUSH
61712: FOR_TO
61713: IFFALSE 61760
// begin vc_chassis := 31 ;
61715: LD_ADDR_OWVAR 37
61719: PUSH
61720: LD_INT 31
61722: ST_TO_ADDR
// vc_control := control_rider ;
61723: LD_ADDR_OWVAR 38
61727: PUSH
61728: LD_INT 4
61730: ST_TO_ADDR
// animal := CreateVehicle ;
61731: LD_ADDR_VAR 0 12
61735: PUSH
61736: CALL_OW 45
61740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61741: LD_VAR 0 12
61745: PPUSH
61746: LD_VAR 0 8
61750: PPUSH
61751: LD_INT 0
61753: PPUSH
61754: CALL 63890 0 3
// end ;
61758: GO 61712
61760: POP
61761: POP
// if horses then
61762: LD_VAR 0 5
61766: IFFALSE 61833
// for i = 1 to horses do
61768: LD_ADDR_VAR 0 11
61772: PUSH
61773: DOUBLE
61774: LD_INT 1
61776: DEC
61777: ST_TO_ADDR
61778: LD_VAR 0 5
61782: PUSH
61783: FOR_TO
61784: IFFALSE 61831
// begin hc_class := 21 ;
61786: LD_ADDR_OWVAR 28
61790: PUSH
61791: LD_INT 21
61793: ST_TO_ADDR
// hc_gallery :=  ;
61794: LD_ADDR_OWVAR 33
61798: PUSH
61799: LD_STRING 
61801: ST_TO_ADDR
// animal := CreateHuman ;
61802: LD_ADDR_VAR 0 12
61806: PUSH
61807: CALL_OW 44
61811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61812: LD_VAR 0 12
61816: PPUSH
61817: LD_VAR 0 8
61821: PPUSH
61822: LD_INT 0
61824: PPUSH
61825: CALL 63890 0 3
// end ;
61829: GO 61783
61831: POP
61832: POP
// if birds then
61833: LD_VAR 0 1
61837: IFFALSE 61904
// for i = 1 to birds do
61839: LD_ADDR_VAR 0 11
61843: PUSH
61844: DOUBLE
61845: LD_INT 1
61847: DEC
61848: ST_TO_ADDR
61849: LD_VAR 0 1
61853: PUSH
61854: FOR_TO
61855: IFFALSE 61902
// begin hc_class := 18 ;
61857: LD_ADDR_OWVAR 28
61861: PUSH
61862: LD_INT 18
61864: ST_TO_ADDR
// hc_gallery =  ;
61865: LD_ADDR_OWVAR 33
61869: PUSH
61870: LD_STRING 
61872: ST_TO_ADDR
// animal := CreateHuman ;
61873: LD_ADDR_VAR 0 12
61877: PUSH
61878: CALL_OW 44
61882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61883: LD_VAR 0 12
61887: PPUSH
61888: LD_VAR 0 8
61892: PPUSH
61893: LD_INT 0
61895: PPUSH
61896: CALL 63890 0 3
// end ;
61900: GO 61854
61902: POP
61903: POP
// if tigers then
61904: LD_VAR 0 2
61908: IFFALSE 61992
// for i = 1 to tigers do
61910: LD_ADDR_VAR 0 11
61914: PUSH
61915: DOUBLE
61916: LD_INT 1
61918: DEC
61919: ST_TO_ADDR
61920: LD_VAR 0 2
61924: PUSH
61925: FOR_TO
61926: IFFALSE 61990
// begin hc_class = class_tiger ;
61928: LD_ADDR_OWVAR 28
61932: PUSH
61933: LD_INT 14
61935: ST_TO_ADDR
// hc_gallery =  ;
61936: LD_ADDR_OWVAR 33
61940: PUSH
61941: LD_STRING 
61943: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61944: LD_ADDR_OWVAR 35
61948: PUSH
61949: LD_INT 7
61951: NEG
61952: PPUSH
61953: LD_INT 7
61955: PPUSH
61956: CALL_OW 12
61960: ST_TO_ADDR
// animal := CreateHuman ;
61961: LD_ADDR_VAR 0 12
61965: PUSH
61966: CALL_OW 44
61970: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61971: LD_VAR 0 12
61975: PPUSH
61976: LD_VAR 0 8
61980: PPUSH
61981: LD_INT 0
61983: PPUSH
61984: CALL 63890 0 3
// end ;
61988: GO 61925
61990: POP
61991: POP
// if apemans then
61992: LD_VAR 0 3
61996: IFFALSE 62119
// for i = 1 to apemans do
61998: LD_ADDR_VAR 0 11
62002: PUSH
62003: DOUBLE
62004: LD_INT 1
62006: DEC
62007: ST_TO_ADDR
62008: LD_VAR 0 3
62012: PUSH
62013: FOR_TO
62014: IFFALSE 62117
// begin hc_class = class_apeman ;
62016: LD_ADDR_OWVAR 28
62020: PUSH
62021: LD_INT 12
62023: ST_TO_ADDR
// hc_gallery =  ;
62024: LD_ADDR_OWVAR 33
62028: PUSH
62029: LD_STRING 
62031: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62032: LD_ADDR_OWVAR 35
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PPUSH
62041: LD_INT 2
62043: PPUSH
62044: CALL_OW 12
62048: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62049: LD_ADDR_OWVAR 31
62053: PUSH
62054: LD_INT 1
62056: PPUSH
62057: LD_INT 3
62059: PPUSH
62060: CALL_OW 12
62064: PUSH
62065: LD_INT 1
62067: PPUSH
62068: LD_INT 3
62070: PPUSH
62071: CALL_OW 12
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// animal := CreateHuman ;
62088: LD_ADDR_VAR 0 12
62092: PUSH
62093: CALL_OW 44
62097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62098: LD_VAR 0 12
62102: PPUSH
62103: LD_VAR 0 8
62107: PPUSH
62108: LD_INT 0
62110: PPUSH
62111: CALL 63890 0 3
// end ;
62115: GO 62013
62117: POP
62118: POP
// if enchidnas then
62119: LD_VAR 0 4
62123: IFFALSE 62190
// for i = 1 to enchidnas do
62125: LD_ADDR_VAR 0 11
62129: PUSH
62130: DOUBLE
62131: LD_INT 1
62133: DEC
62134: ST_TO_ADDR
62135: LD_VAR 0 4
62139: PUSH
62140: FOR_TO
62141: IFFALSE 62188
// begin hc_class = 13 ;
62143: LD_ADDR_OWVAR 28
62147: PUSH
62148: LD_INT 13
62150: ST_TO_ADDR
// hc_gallery =  ;
62151: LD_ADDR_OWVAR 33
62155: PUSH
62156: LD_STRING 
62158: ST_TO_ADDR
// animal := CreateHuman ;
62159: LD_ADDR_VAR 0 12
62163: PUSH
62164: CALL_OW 44
62168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62169: LD_VAR 0 12
62173: PPUSH
62174: LD_VAR 0 8
62178: PPUSH
62179: LD_INT 0
62181: PPUSH
62182: CALL 63890 0 3
// end ;
62186: GO 62140
62188: POP
62189: POP
// if fishes then
62190: LD_VAR 0 7
62194: IFFALSE 62261
// for i = 1 to fishes do
62196: LD_ADDR_VAR 0 11
62200: PUSH
62201: DOUBLE
62202: LD_INT 1
62204: DEC
62205: ST_TO_ADDR
62206: LD_VAR 0 7
62210: PUSH
62211: FOR_TO
62212: IFFALSE 62259
// begin hc_class = 20 ;
62214: LD_ADDR_OWVAR 28
62218: PUSH
62219: LD_INT 20
62221: ST_TO_ADDR
// hc_gallery =  ;
62222: LD_ADDR_OWVAR 33
62226: PUSH
62227: LD_STRING 
62229: ST_TO_ADDR
// animal := CreateHuman ;
62230: LD_ADDR_VAR 0 12
62234: PUSH
62235: CALL_OW 44
62239: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62240: LD_VAR 0 12
62244: PPUSH
62245: LD_VAR 0 9
62249: PPUSH
62250: LD_INT 0
62252: PPUSH
62253: CALL 63890 0 3
// end ;
62257: GO 62211
62259: POP
62260: POP
// end ;
62261: LD_VAR 0 10
62265: RET
// export function WantHeal ( sci , unit ) ; begin
62266: LD_INT 0
62268: PPUSH
// if GetTaskList ( sci ) > 0 then
62269: LD_VAR 0 1
62273: PPUSH
62274: CALL_OW 437
62278: PUSH
62279: LD_INT 0
62281: GREATER
62282: IFFALSE 62352
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62284: LD_VAR 0 1
62288: PPUSH
62289: CALL_OW 437
62293: PUSH
62294: LD_INT 1
62296: ARRAY
62297: PUSH
62298: LD_INT 1
62300: ARRAY
62301: PUSH
62302: LD_STRING l
62304: EQUAL
62305: PUSH
62306: LD_VAR 0 1
62310: PPUSH
62311: CALL_OW 437
62315: PUSH
62316: LD_INT 1
62318: ARRAY
62319: PUSH
62320: LD_INT 4
62322: ARRAY
62323: PUSH
62324: LD_VAR 0 2
62328: EQUAL
62329: AND
62330: IFFALSE 62342
// result := true else
62332: LD_ADDR_VAR 0 3
62336: PUSH
62337: LD_INT 1
62339: ST_TO_ADDR
62340: GO 62350
// result := false ;
62342: LD_ADDR_VAR 0 3
62346: PUSH
62347: LD_INT 0
62349: ST_TO_ADDR
// end else
62350: GO 62360
// result := false ;
62352: LD_ADDR_VAR 0 3
62356: PUSH
62357: LD_INT 0
62359: ST_TO_ADDR
// end ;
62360: LD_VAR 0 3
62364: RET
// export function HealTarget ( sci ) ; begin
62365: LD_INT 0
62367: PPUSH
// if not sci then
62368: LD_VAR 0 1
62372: NOT
62373: IFFALSE 62377
// exit ;
62375: GO 62442
// result := 0 ;
62377: LD_ADDR_VAR 0 2
62381: PUSH
62382: LD_INT 0
62384: ST_TO_ADDR
// if GetTaskList ( sci ) then
62385: LD_VAR 0 1
62389: PPUSH
62390: CALL_OW 437
62394: IFFALSE 62442
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62396: LD_VAR 0 1
62400: PPUSH
62401: CALL_OW 437
62405: PUSH
62406: LD_INT 1
62408: ARRAY
62409: PUSH
62410: LD_INT 1
62412: ARRAY
62413: PUSH
62414: LD_STRING l
62416: EQUAL
62417: IFFALSE 62442
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_VAR 0 1
62428: PPUSH
62429: CALL_OW 437
62433: PUSH
62434: LD_INT 1
62436: ARRAY
62437: PUSH
62438: LD_INT 4
62440: ARRAY
62441: ST_TO_ADDR
// end ;
62442: LD_VAR 0 2
62446: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62447: LD_INT 0
62449: PPUSH
62450: PPUSH
62451: PPUSH
62452: PPUSH
// if not base_units then
62453: LD_VAR 0 1
62457: NOT
62458: IFFALSE 62462
// exit ;
62460: GO 62549
// result := false ;
62462: LD_ADDR_VAR 0 2
62466: PUSH
62467: LD_INT 0
62469: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62470: LD_ADDR_VAR 0 5
62474: PUSH
62475: LD_VAR 0 1
62479: PPUSH
62480: LD_INT 21
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PPUSH
62490: CALL_OW 72
62494: ST_TO_ADDR
// if not tmp then
62495: LD_VAR 0 5
62499: NOT
62500: IFFALSE 62504
// exit ;
62502: GO 62549
// for i in tmp do
62504: LD_ADDR_VAR 0 3
62508: PUSH
62509: LD_VAR 0 5
62513: PUSH
62514: FOR_IN
62515: IFFALSE 62547
// begin result := EnemyInRange ( i , 22 ) ;
62517: LD_ADDR_VAR 0 2
62521: PUSH
62522: LD_VAR 0 3
62526: PPUSH
62527: LD_INT 22
62529: PPUSH
62530: CALL 60127 0 2
62534: ST_TO_ADDR
// if result then
62535: LD_VAR 0 2
62539: IFFALSE 62545
// exit ;
62541: POP
62542: POP
62543: GO 62549
// end ;
62545: GO 62514
62547: POP
62548: POP
// end ;
62549: LD_VAR 0 2
62553: RET
// export function FilterByTag ( units , tag ) ; begin
62554: LD_INT 0
62556: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62557: LD_ADDR_VAR 0 3
62561: PUSH
62562: LD_VAR 0 1
62566: PPUSH
62567: LD_INT 120
62569: PUSH
62570: LD_VAR 0 2
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PPUSH
62579: CALL_OW 72
62583: ST_TO_ADDR
// end ;
62584: LD_VAR 0 3
62588: RET
// export function IsDriver ( un ) ; begin
62589: LD_INT 0
62591: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_VAR 0 1
62601: PUSH
62602: LD_INT 55
62604: PUSH
62605: EMPTY
62606: LIST
62607: PPUSH
62608: CALL_OW 69
62612: IN
62613: ST_TO_ADDR
// end ;
62614: LD_VAR 0 2
62618: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62619: LD_INT 0
62621: PPUSH
62622: PPUSH
// list := [ ] ;
62623: LD_ADDR_VAR 0 5
62627: PUSH
62628: EMPTY
62629: ST_TO_ADDR
// case d of 0 :
62630: LD_VAR 0 3
62634: PUSH
62635: LD_INT 0
62637: DOUBLE
62638: EQUAL
62639: IFTRUE 62643
62641: GO 62776
62643: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62644: LD_ADDR_VAR 0 5
62648: PUSH
62649: LD_VAR 0 1
62653: PUSH
62654: LD_INT 4
62656: MINUS
62657: PUSH
62658: LD_VAR 0 2
62662: PUSH
62663: LD_INT 4
62665: MINUS
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 1
62679: PUSH
62680: LD_INT 3
62682: MINUS
62683: PUSH
62684: LD_VAR 0 2
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: LD_VAR 0 1
62701: PUSH
62702: LD_INT 4
62704: PLUS
62705: PUSH
62706: LD_VAR 0 2
62710: PUSH
62711: LD_INT 4
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: LD_VAR 0 1
62723: PUSH
62724: LD_INT 3
62726: PLUS
62727: PUSH
62728: LD_VAR 0 2
62732: PUSH
62733: LD_INT 3
62735: PLUS
62736: PUSH
62737: LD_INT 5
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: PUSH
62745: LD_VAR 0 1
62749: PUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 4
62757: PLUS
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: ST_TO_ADDR
// end ; 1 :
62774: GO 63474
62776: LD_INT 1
62778: DOUBLE
62779: EQUAL
62780: IFTRUE 62784
62782: GO 62917
62784: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62785: LD_ADDR_VAR 0 5
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: LD_VAR 0 2
62799: PUSH
62800: LD_INT 4
62802: MINUS
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: PUSH
62812: LD_VAR 0 1
62816: PUSH
62817: LD_INT 3
62819: MINUS
62820: PUSH
62821: LD_VAR 0 2
62825: PUSH
62826: LD_INT 3
62828: MINUS
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: PUSH
62838: LD_VAR 0 1
62842: PUSH
62843: LD_INT 4
62845: MINUS
62846: PUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_VAR 0 1
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: LD_INT 3
62872: PLUS
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 4
62889: PLUS
62890: PUSH
62891: LD_VAR 0 2
62895: PUSH
62896: LD_INT 4
62898: PLUS
62899: PUSH
62900: LD_INT 5
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// end ; 2 :
62915: GO 63474
62917: LD_INT 2
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62925
62923: GO 63054
62925: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62926: LD_ADDR_VAR 0 5
62930: PUSH
62931: LD_VAR 0 1
62935: PUSH
62936: LD_VAR 0 2
62940: PUSH
62941: LD_INT 3
62943: MINUS
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: PUSH
62953: LD_VAR 0 1
62957: PUSH
62958: LD_INT 4
62960: PLUS
62961: PUSH
62962: LD_VAR 0 2
62966: PUSH
62967: LD_INT 4
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: PUSH
62975: LD_VAR 0 1
62979: PUSH
62980: LD_VAR 0 2
62984: PUSH
62985: LD_INT 4
62987: PLUS
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: PUSH
62997: LD_VAR 0 1
63001: PUSH
63002: LD_INT 3
63004: MINUS
63005: PUSH
63006: LD_VAR 0 2
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: PUSH
63019: LD_VAR 0 1
63023: PUSH
63024: LD_INT 4
63026: MINUS
63027: PUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_INT 4
63035: MINUS
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: ST_TO_ADDR
// end ; 3 :
63052: GO 63474
63054: LD_INT 3
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63062
63060: GO 63195
63062: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: LD_VAR 0 1
63072: PUSH
63073: LD_INT 3
63075: PLUS
63076: PUSH
63077: LD_VAR 0 2
63081: PUSH
63082: LD_INT 4
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 1
63094: PUSH
63095: LD_INT 4
63097: PLUS
63098: PUSH
63099: LD_VAR 0 2
63103: PUSH
63104: LD_INT 4
63106: PLUS
63107: PUSH
63108: LD_INT 5
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PUSH
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 4
63123: MINUS
63124: PUSH
63125: LD_VAR 0 2
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: PUSH
63138: LD_VAR 0 1
63142: PUSH
63143: LD_VAR 0 2
63147: PUSH
63148: LD_INT 4
63150: MINUS
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: PUSH
63160: LD_VAR 0 1
63164: PUSH
63165: LD_INT 3
63167: MINUS
63168: PUSH
63169: LD_VAR 0 2
63173: PUSH
63174: LD_INT 3
63176: MINUS
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: ST_TO_ADDR
// end ; 4 :
63193: GO 63474
63195: LD_INT 4
63197: DOUBLE
63198: EQUAL
63199: IFTRUE 63203
63201: GO 63336
63203: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63204: LD_ADDR_VAR 0 5
63208: PUSH
63209: LD_VAR 0 1
63213: PUSH
63214: LD_VAR 0 2
63218: PUSH
63219: LD_INT 4
63221: PLUS
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: PUSH
63231: LD_VAR 0 1
63235: PUSH
63236: LD_INT 3
63238: PLUS
63239: PUSH
63240: LD_VAR 0 2
63244: PUSH
63245: LD_INT 3
63247: PLUS
63248: PUSH
63249: LD_INT 5
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: PUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_INT 4
63264: PLUS
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 4
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: PUSH
63279: LD_VAR 0 1
63283: PUSH
63284: LD_VAR 0 2
63288: PUSH
63289: LD_INT 3
63291: MINUS
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: PUSH
63301: LD_VAR 0 1
63305: PUSH
63306: LD_INT 4
63308: MINUS
63309: PUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_INT 4
63317: MINUS
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: ST_TO_ADDR
// end ; 5 :
63334: GO 63474
63336: LD_INT 5
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63344
63342: GO 63473
63344: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63345: LD_ADDR_VAR 0 5
63349: PUSH
63350: LD_VAR 0 1
63354: PUSH
63355: LD_INT 4
63357: MINUS
63358: PUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: LD_VAR 0 2
63381: PUSH
63382: LD_INT 4
63384: MINUS
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: LIST
63393: PUSH
63394: LD_VAR 0 1
63398: PUSH
63399: LD_INT 4
63401: PLUS
63402: PUSH
63403: LD_VAR 0 2
63407: PUSH
63408: LD_INT 4
63410: PLUS
63411: PUSH
63412: LD_INT 5
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: PUSH
63420: LD_VAR 0 1
63424: PUSH
63425: LD_INT 3
63427: PLUS
63428: PUSH
63429: LD_VAR 0 2
63433: PUSH
63434: LD_INT 4
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: PUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_VAR 0 2
63451: PUSH
63452: LD_INT 3
63454: PLUS
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// end ; end ;
63471: GO 63474
63473: POP
// result := list ;
63474: LD_ADDR_VAR 0 4
63478: PUSH
63479: LD_VAR 0 5
63483: ST_TO_ADDR
// end ;
63484: LD_VAR 0 4
63488: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63489: LD_INT 0
63491: PPUSH
63492: PPUSH
63493: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63494: LD_VAR 0 1
63498: NOT
63499: PUSH
63500: LD_VAR 0 2
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: LD_INT 3
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: IN
63523: NOT
63524: OR
63525: IFFALSE 63529
// exit ;
63527: GO 63612
// tmp := [ ] ;
63529: LD_ADDR_VAR 0 5
63533: PUSH
63534: EMPTY
63535: ST_TO_ADDR
// for i in units do
63536: LD_ADDR_VAR 0 4
63540: PUSH
63541: LD_VAR 0 1
63545: PUSH
63546: FOR_IN
63547: IFFALSE 63581
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63549: LD_ADDR_VAR 0 5
63553: PUSH
63554: LD_VAR 0 5
63558: PPUSH
63559: LD_VAR 0 4
63563: PPUSH
63564: LD_VAR 0 2
63568: PPUSH
63569: CALL_OW 259
63573: PPUSH
63574: CALL 64985 0 2
63578: ST_TO_ADDR
63579: GO 63546
63581: POP
63582: POP
// if not tmp then
63583: LD_VAR 0 5
63587: NOT
63588: IFFALSE 63592
// exit ;
63590: GO 63612
// result := SortListByListDesc ( units , tmp ) ;
63592: LD_ADDR_VAR 0 3
63596: PUSH
63597: LD_VAR 0 1
63601: PPUSH
63602: LD_VAR 0 5
63606: PPUSH
63607: CALL_OW 77
63611: ST_TO_ADDR
// end ;
63612: LD_VAR 0 3
63616: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63617: LD_INT 0
63619: PPUSH
63620: PPUSH
63621: PPUSH
// result := false ;
63622: LD_ADDR_VAR 0 3
63626: PUSH
63627: LD_INT 0
63629: ST_TO_ADDR
// if not building then
63630: LD_VAR 0 2
63634: NOT
63635: IFFALSE 63639
// exit ;
63637: GO 63777
// x := GetX ( building ) ;
63639: LD_ADDR_VAR 0 4
63643: PUSH
63644: LD_VAR 0 2
63648: PPUSH
63649: CALL_OW 250
63653: ST_TO_ADDR
// y := GetY ( building ) ;
63654: LD_ADDR_VAR 0 5
63658: PUSH
63659: LD_VAR 0 2
63663: PPUSH
63664: CALL_OW 251
63668: ST_TO_ADDR
// if not x or not y then
63669: LD_VAR 0 4
63673: NOT
63674: PUSH
63675: LD_VAR 0 5
63679: NOT
63680: OR
63681: IFFALSE 63685
// exit ;
63683: GO 63777
// if GetTaskList ( unit ) then
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 437
63694: IFFALSE 63777
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63696: LD_STRING e
63698: PUSH
63699: LD_VAR 0 1
63703: PPUSH
63704: CALL_OW 437
63708: PUSH
63709: LD_INT 1
63711: ARRAY
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: EQUAL
63717: PUSH
63718: LD_VAR 0 4
63722: PUSH
63723: LD_VAR 0 1
63727: PPUSH
63728: CALL_OW 437
63732: PUSH
63733: LD_INT 1
63735: ARRAY
63736: PUSH
63737: LD_INT 2
63739: ARRAY
63740: EQUAL
63741: AND
63742: PUSH
63743: LD_VAR 0 5
63747: PUSH
63748: LD_VAR 0 1
63752: PPUSH
63753: CALL_OW 437
63757: PUSH
63758: LD_INT 1
63760: ARRAY
63761: PUSH
63762: LD_INT 3
63764: ARRAY
63765: EQUAL
63766: AND
63767: IFFALSE 63777
// result := true end ;
63769: LD_ADDR_VAR 0 3
63773: PUSH
63774: LD_INT 1
63776: ST_TO_ADDR
// end ;
63777: LD_VAR 0 3
63781: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63782: LD_INT 0
63784: PPUSH
// result := false ;
63785: LD_ADDR_VAR 0 4
63789: PUSH
63790: LD_INT 0
63792: ST_TO_ADDR
// if GetTaskList ( unit ) then
63793: LD_VAR 0 1
63797: PPUSH
63798: CALL_OW 437
63802: IFFALSE 63885
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63804: LD_STRING M
63806: PUSH
63807: LD_VAR 0 1
63811: PPUSH
63812: CALL_OW 437
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: PUSH
63821: LD_INT 1
63823: ARRAY
63824: EQUAL
63825: PUSH
63826: LD_VAR 0 2
63830: PUSH
63831: LD_VAR 0 1
63835: PPUSH
63836: CALL_OW 437
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PUSH
63845: LD_INT 2
63847: ARRAY
63848: EQUAL
63849: AND
63850: PUSH
63851: LD_VAR 0 3
63855: PUSH
63856: LD_VAR 0 1
63860: PPUSH
63861: CALL_OW 437
63865: PUSH
63866: LD_INT 1
63868: ARRAY
63869: PUSH
63870: LD_INT 3
63872: ARRAY
63873: EQUAL
63874: AND
63875: IFFALSE 63885
// result := true ;
63877: LD_ADDR_VAR 0 4
63881: PUSH
63882: LD_INT 1
63884: ST_TO_ADDR
// end ; end ;
63885: LD_VAR 0 4
63889: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63890: LD_INT 0
63892: PPUSH
63893: PPUSH
63894: PPUSH
63895: PPUSH
// if not unit or not area then
63896: LD_VAR 0 1
63900: NOT
63901: PUSH
63902: LD_VAR 0 2
63906: NOT
63907: OR
63908: IFFALSE 63912
// exit ;
63910: GO 64088
// tmp := AreaToList ( area , i ) ;
63912: LD_ADDR_VAR 0 6
63916: PUSH
63917: LD_VAR 0 2
63921: PPUSH
63922: LD_VAR 0 5
63926: PPUSH
63927: CALL_OW 517
63931: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63932: LD_ADDR_VAR 0 5
63936: PUSH
63937: DOUBLE
63938: LD_INT 1
63940: DEC
63941: ST_TO_ADDR
63942: LD_VAR 0 6
63946: PUSH
63947: LD_INT 1
63949: ARRAY
63950: PUSH
63951: FOR_TO
63952: IFFALSE 64086
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63954: LD_ADDR_VAR 0 7
63958: PUSH
63959: LD_VAR 0 6
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PUSH
63968: LD_VAR 0 5
63972: ARRAY
63973: PUSH
63974: LD_VAR 0 6
63978: PUSH
63979: LD_INT 2
63981: ARRAY
63982: PUSH
63983: LD_VAR 0 5
63987: ARRAY
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63993: LD_INT 92
63995: PUSH
63996: LD_VAR 0 7
64000: PUSH
64001: LD_INT 1
64003: ARRAY
64004: PUSH
64005: LD_VAR 0 7
64009: PUSH
64010: LD_INT 2
64012: ARRAY
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: PPUSH
64023: CALL_OW 69
64027: PUSH
64028: LD_INT 0
64030: EQUAL
64031: IFFALSE 64084
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 7
64042: PUSH
64043: LD_INT 1
64045: ARRAY
64046: PPUSH
64047: LD_VAR 0 7
64051: PUSH
64052: LD_INT 2
64054: ARRAY
64055: PPUSH
64056: LD_VAR 0 3
64060: PPUSH
64061: CALL_OW 48
// result := IsPlaced ( unit ) ;
64065: LD_ADDR_VAR 0 4
64069: PUSH
64070: LD_VAR 0 1
64074: PPUSH
64075: CALL_OW 305
64079: ST_TO_ADDR
// exit ;
64080: POP
64081: POP
64082: GO 64088
// end ; end ;
64084: GO 63951
64086: POP
64087: POP
// end ;
64088: LD_VAR 0 4
64092: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64093: LD_INT 0
64095: PPUSH
64096: PPUSH
64097: PPUSH
// if not side or side > 8 then
64098: LD_VAR 0 1
64102: NOT
64103: PUSH
64104: LD_VAR 0 1
64108: PUSH
64109: LD_INT 8
64111: GREATER
64112: OR
64113: IFFALSE 64117
// exit ;
64115: GO 64304
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64117: LD_ADDR_VAR 0 4
64121: PUSH
64122: LD_INT 22
64124: PUSH
64125: LD_VAR 0 1
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 21
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PPUSH
64148: CALL_OW 69
64152: ST_TO_ADDR
// if not tmp then
64153: LD_VAR 0 4
64157: NOT
64158: IFFALSE 64162
// exit ;
64160: GO 64304
// enable_addtolog := true ;
64162: LD_ADDR_OWVAR 81
64166: PUSH
64167: LD_INT 1
64169: ST_TO_ADDR
// AddToLog ( [ ) ;
64170: LD_STRING [
64172: PPUSH
64173: CALL_OW 561
// for i in tmp do
64177: LD_ADDR_VAR 0 3
64181: PUSH
64182: LD_VAR 0 4
64186: PUSH
64187: FOR_IN
64188: IFFALSE 64295
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64190: LD_STRING [
64192: PUSH
64193: LD_VAR 0 3
64197: PPUSH
64198: CALL_OW 266
64202: STR
64203: PUSH
64204: LD_STRING , 
64206: STR
64207: PUSH
64208: LD_VAR 0 3
64212: PPUSH
64213: CALL_OW 250
64217: STR
64218: PUSH
64219: LD_STRING , 
64221: STR
64222: PUSH
64223: LD_VAR 0 3
64227: PPUSH
64228: CALL_OW 251
64232: STR
64233: PUSH
64234: LD_STRING , 
64236: STR
64237: PUSH
64238: LD_VAR 0 3
64242: PPUSH
64243: CALL_OW 254
64247: STR
64248: PUSH
64249: LD_STRING , 
64251: STR
64252: PUSH
64253: LD_VAR 0 3
64257: PPUSH
64258: LD_INT 1
64260: PPUSH
64261: CALL_OW 268
64265: STR
64266: PUSH
64267: LD_STRING , 
64269: STR
64270: PUSH
64271: LD_VAR 0 3
64275: PPUSH
64276: LD_INT 2
64278: PPUSH
64279: CALL_OW 268
64283: STR
64284: PUSH
64285: LD_STRING ],
64287: STR
64288: PPUSH
64289: CALL_OW 561
// end ;
64293: GO 64187
64295: POP
64296: POP
// AddToLog ( ]; ) ;
64297: LD_STRING ];
64299: PPUSH
64300: CALL_OW 561
// end ;
64304: LD_VAR 0 2
64308: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64309: LD_INT 0
64311: PPUSH
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
// if not area or not rate or not max then
64316: LD_VAR 0 1
64320: NOT
64321: PUSH
64322: LD_VAR 0 2
64326: NOT
64327: OR
64328: PUSH
64329: LD_VAR 0 4
64333: NOT
64334: OR
64335: IFFALSE 64339
// exit ;
64337: GO 64528
// while 1 do
64339: LD_INT 1
64341: IFFALSE 64528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64343: LD_ADDR_VAR 0 9
64347: PUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: LD_INT 1
64355: PPUSH
64356: CALL_OW 287
64360: PUSH
64361: LD_INT 10
64363: MUL
64364: ST_TO_ADDR
// r := rate / 10 ;
64365: LD_ADDR_VAR 0 7
64369: PUSH
64370: LD_VAR 0 2
64374: PUSH
64375: LD_INT 10
64377: DIVREAL
64378: ST_TO_ADDR
// time := 1 1$00 ;
64379: LD_ADDR_VAR 0 8
64383: PUSH
64384: LD_INT 2100
64386: ST_TO_ADDR
// if amount < min then
64387: LD_VAR 0 9
64391: PUSH
64392: LD_VAR 0 3
64396: LESS
64397: IFFALSE 64415
// r := r * 2 else
64399: LD_ADDR_VAR 0 7
64403: PUSH
64404: LD_VAR 0 7
64408: PUSH
64409: LD_INT 2
64411: MUL
64412: ST_TO_ADDR
64413: GO 64441
// if amount > max then
64415: LD_VAR 0 9
64419: PUSH
64420: LD_VAR 0 4
64424: GREATER
64425: IFFALSE 64441
// r := r / 2 ;
64427: LD_ADDR_VAR 0 7
64431: PUSH
64432: LD_VAR 0 7
64436: PUSH
64437: LD_INT 2
64439: DIVREAL
64440: ST_TO_ADDR
// time := time / r ;
64441: LD_ADDR_VAR 0 8
64445: PUSH
64446: LD_VAR 0 8
64450: PUSH
64451: LD_VAR 0 7
64455: DIVREAL
64456: ST_TO_ADDR
// if time < 0 then
64457: LD_VAR 0 8
64461: PUSH
64462: LD_INT 0
64464: LESS
64465: IFFALSE 64482
// time := time * - 1 ;
64467: LD_ADDR_VAR 0 8
64471: PUSH
64472: LD_VAR 0 8
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: MUL
64481: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64482: LD_VAR 0 8
64486: PUSH
64487: LD_INT 35
64489: PPUSH
64490: LD_INT 875
64492: PPUSH
64493: CALL_OW 12
64497: PLUS
64498: PPUSH
64499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64503: LD_INT 1
64505: PPUSH
64506: LD_INT 5
64508: PPUSH
64509: CALL_OW 12
64513: PPUSH
64514: LD_VAR 0 1
64518: PPUSH
64519: LD_INT 1
64521: PPUSH
64522: CALL_OW 55
// end ;
64526: GO 64339
// end ;
64528: LD_VAR 0 5
64532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64533: LD_INT 0
64535: PPUSH
64536: PPUSH
64537: PPUSH
64538: PPUSH
64539: PPUSH
64540: PPUSH
64541: PPUSH
64542: PPUSH
// if not turrets or not factories then
64543: LD_VAR 0 1
64547: NOT
64548: PUSH
64549: LD_VAR 0 2
64553: NOT
64554: OR
64555: IFFALSE 64559
// exit ;
64557: GO 64866
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64559: LD_ADDR_VAR 0 10
64563: PUSH
64564: LD_INT 5
64566: PUSH
64567: LD_INT 6
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: LD_INT 4
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 5
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 24
64601: PUSH
64602: LD_INT 25
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 23
64611: PUSH
64612: LD_INT 27
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 42
64625: PUSH
64626: LD_INT 43
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 44
64635: PUSH
64636: LD_INT 46
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 45
64645: PUSH
64646: LD_INT 47
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: LIST
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// result := [ ] ;
64663: LD_ADDR_VAR 0 3
64667: PUSH
64668: EMPTY
64669: ST_TO_ADDR
// for i in turrets do
64670: LD_ADDR_VAR 0 4
64674: PUSH
64675: LD_VAR 0 1
64679: PUSH
64680: FOR_IN
64681: IFFALSE 64864
// begin nat := GetNation ( i ) ;
64683: LD_ADDR_VAR 0 7
64687: PUSH
64688: LD_VAR 0 4
64692: PPUSH
64693: CALL_OW 248
64697: ST_TO_ADDR
// weapon := 0 ;
64698: LD_ADDR_VAR 0 8
64702: PUSH
64703: LD_INT 0
64705: ST_TO_ADDR
// if not nat then
64706: LD_VAR 0 7
64710: NOT
64711: IFFALSE 64715
// continue ;
64713: GO 64680
// for j in list [ nat ] do
64715: LD_ADDR_VAR 0 5
64719: PUSH
64720: LD_VAR 0 10
64724: PUSH
64725: LD_VAR 0 7
64729: ARRAY
64730: PUSH
64731: FOR_IN
64732: IFFALSE 64773
// if GetBWeapon ( i ) = j [ 1 ] then
64734: LD_VAR 0 4
64738: PPUSH
64739: CALL_OW 269
64743: PUSH
64744: LD_VAR 0 5
64748: PUSH
64749: LD_INT 1
64751: ARRAY
64752: EQUAL
64753: IFFALSE 64771
// begin weapon := j [ 2 ] ;
64755: LD_ADDR_VAR 0 8
64759: PUSH
64760: LD_VAR 0 5
64764: PUSH
64765: LD_INT 2
64767: ARRAY
64768: ST_TO_ADDR
// break ;
64769: GO 64773
// end ;
64771: GO 64731
64773: POP
64774: POP
// if not weapon then
64775: LD_VAR 0 8
64779: NOT
64780: IFFALSE 64784
// continue ;
64782: GO 64680
// for k in factories do
64784: LD_ADDR_VAR 0 6
64788: PUSH
64789: LD_VAR 0 2
64793: PUSH
64794: FOR_IN
64795: IFFALSE 64860
// begin weapons := AvailableWeaponList ( k ) ;
64797: LD_ADDR_VAR 0 9
64801: PUSH
64802: LD_VAR 0 6
64806: PPUSH
64807: CALL_OW 478
64811: ST_TO_ADDR
// if not weapons then
64812: LD_VAR 0 9
64816: NOT
64817: IFFALSE 64821
// continue ;
64819: GO 64794
// if weapon in weapons then
64821: LD_VAR 0 8
64825: PUSH
64826: LD_VAR 0 9
64830: IN
64831: IFFALSE 64858
// begin result := [ i , weapon ] ;
64833: LD_ADDR_VAR 0 3
64837: PUSH
64838: LD_VAR 0 4
64842: PUSH
64843: LD_VAR 0 8
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: ST_TO_ADDR
// exit ;
64852: POP
64853: POP
64854: POP
64855: POP
64856: GO 64866
// end ; end ;
64858: GO 64794
64860: POP
64861: POP
// end ;
64862: GO 64680
64864: POP
64865: POP
// end ;
64866: LD_VAR 0 3
64870: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64871: LD_INT 0
64873: PPUSH
// if not side or side > 8 then
64874: LD_VAR 0 3
64878: NOT
64879: PUSH
64880: LD_VAR 0 3
64884: PUSH
64885: LD_INT 8
64887: GREATER
64888: OR
64889: IFFALSE 64893
// exit ;
64891: GO 64952
// if not range then
64893: LD_VAR 0 4
64897: NOT
64898: IFFALSE 64909
// range := - 12 ;
64900: LD_ADDR_VAR 0 4
64904: PUSH
64905: LD_INT 12
64907: NEG
64908: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64909: LD_VAR 0 1
64913: PPUSH
64914: LD_VAR 0 2
64918: PPUSH
64919: LD_VAR 0 3
64923: PPUSH
64924: LD_VAR 0 4
64928: PPUSH
64929: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64933: LD_VAR 0 1
64937: PPUSH
64938: LD_VAR 0 2
64942: PPUSH
64943: LD_VAR 0 3
64947: PPUSH
64948: CALL_OW 331
// end ;
64952: LD_VAR 0 5
64956: RET
// export function Video ( mode ) ; begin
64957: LD_INT 0
64959: PPUSH
// ingame_video = mode ;
64960: LD_ADDR_OWVAR 52
64964: PUSH
64965: LD_VAR 0 1
64969: ST_TO_ADDR
// interface_hidden = mode ;
64970: LD_ADDR_OWVAR 54
64974: PUSH
64975: LD_VAR 0 1
64979: ST_TO_ADDR
// end ;
64980: LD_VAR 0 2
64984: RET
// export function Join ( array , element ) ; begin
64985: LD_INT 0
64987: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64988: LD_ADDR_VAR 0 3
64992: PUSH
64993: LD_VAR 0 1
64997: PPUSH
64998: LD_VAR 0 1
65002: PUSH
65003: LD_INT 1
65005: PLUS
65006: PPUSH
65007: LD_VAR 0 2
65011: PPUSH
65012: CALL_OW 1
65016: ST_TO_ADDR
// end ;
65017: LD_VAR 0 3
65021: RET
// export function JoinUnion ( array , element ) ; begin
65022: LD_INT 0
65024: PPUSH
// result := array union element ;
65025: LD_ADDR_VAR 0 3
65029: PUSH
65030: LD_VAR 0 1
65034: PUSH
65035: LD_VAR 0 2
65039: UNION
65040: ST_TO_ADDR
// end ;
65041: LD_VAR 0 3
65045: RET
// export function GetBehemoths ( side ) ; begin
65046: LD_INT 0
65048: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65049: LD_ADDR_VAR 0 2
65053: PUSH
65054: LD_INT 22
65056: PUSH
65057: LD_VAR 0 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 31
65068: PUSH
65069: LD_INT 25
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PPUSH
65080: CALL_OW 69
65084: ST_TO_ADDR
// end ;
65085: LD_VAR 0 2
65089: RET
// export function Shuffle ( array ) ; var i , index ; begin
65090: LD_INT 0
65092: PPUSH
65093: PPUSH
65094: PPUSH
// result := [ ] ;
65095: LD_ADDR_VAR 0 2
65099: PUSH
65100: EMPTY
65101: ST_TO_ADDR
// if not array then
65102: LD_VAR 0 1
65106: NOT
65107: IFFALSE 65111
// exit ;
65109: GO 65210
// Randomize ;
65111: CALL_OW 10
// for i = array downto 1 do
65115: LD_ADDR_VAR 0 3
65119: PUSH
65120: DOUBLE
65121: LD_VAR 0 1
65125: INC
65126: ST_TO_ADDR
65127: LD_INT 1
65129: PUSH
65130: FOR_DOWNTO
65131: IFFALSE 65208
// begin index := rand ( 1 , array ) ;
65133: LD_ADDR_VAR 0 4
65137: PUSH
65138: LD_INT 1
65140: PPUSH
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 12
65150: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65151: LD_ADDR_VAR 0 2
65155: PUSH
65156: LD_VAR 0 2
65160: PPUSH
65161: LD_VAR 0 2
65165: PUSH
65166: LD_INT 1
65168: PLUS
65169: PPUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_VAR 0 4
65179: ARRAY
65180: PPUSH
65181: CALL_OW 2
65185: ST_TO_ADDR
// array := Delete ( array , index ) ;
65186: LD_ADDR_VAR 0 1
65190: PUSH
65191: LD_VAR 0 1
65195: PPUSH
65196: LD_VAR 0 4
65200: PPUSH
65201: CALL_OW 3
65205: ST_TO_ADDR
// end ;
65206: GO 65130
65208: POP
65209: POP
// end ;
65210: LD_VAR 0 2
65214: RET
// export function GetBaseMaterials ( base ) ; begin
65215: LD_INT 0
65217: PPUSH
// result := [ 0 , 0 , 0 ] ;
65218: LD_ADDR_VAR 0 2
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// if not base then
65237: LD_VAR 0 1
65241: NOT
65242: IFFALSE 65246
// exit ;
65244: GO 65295
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65246: LD_ADDR_VAR 0 2
65250: PUSH
65251: LD_VAR 0 1
65255: PPUSH
65256: LD_INT 1
65258: PPUSH
65259: CALL_OW 275
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: LD_INT 2
65271: PPUSH
65272: CALL_OW 275
65276: PUSH
65277: LD_VAR 0 1
65281: PPUSH
65282: LD_INT 3
65284: PPUSH
65285: CALL_OW 275
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// end ;
65295: LD_VAR 0 2
65299: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65300: LD_INT 0
65302: PPUSH
65303: PPUSH
// result := array ;
65304: LD_ADDR_VAR 0 3
65308: PUSH
65309: LD_VAR 0 1
65313: ST_TO_ADDR
// if size >= result then
65314: LD_VAR 0 2
65318: PUSH
65319: LD_VAR 0 3
65323: GREATEREQUAL
65324: IFFALSE 65328
// exit ;
65326: GO 65378
// if size then
65328: LD_VAR 0 2
65332: IFFALSE 65378
// for i := array downto size do
65334: LD_ADDR_VAR 0 4
65338: PUSH
65339: DOUBLE
65340: LD_VAR 0 1
65344: INC
65345: ST_TO_ADDR
65346: LD_VAR 0 2
65350: PUSH
65351: FOR_DOWNTO
65352: IFFALSE 65376
// result := Delete ( result , result ) ;
65354: LD_ADDR_VAR 0 3
65358: PUSH
65359: LD_VAR 0 3
65363: PPUSH
65364: LD_VAR 0 3
65368: PPUSH
65369: CALL_OW 3
65373: ST_TO_ADDR
65374: GO 65351
65376: POP
65377: POP
// end ;
65378: LD_VAR 0 3
65382: RET
// export function ComExit ( unit ) ; var tmp ; begin
65383: LD_INT 0
65385: PPUSH
65386: PPUSH
// if not IsInUnit ( unit ) then
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 310
65396: NOT
65397: IFFALSE 65401
// exit ;
65399: GO 65461
// tmp := IsInUnit ( unit ) ;
65401: LD_ADDR_VAR 0 3
65405: PUSH
65406: LD_VAR 0 1
65410: PPUSH
65411: CALL_OW 310
65415: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65416: LD_VAR 0 3
65420: PPUSH
65421: CALL_OW 247
65425: PUSH
65426: LD_INT 2
65428: EQUAL
65429: IFFALSE 65442
// ComExitVehicle ( unit ) else
65431: LD_VAR 0 1
65435: PPUSH
65436: CALL_OW 121
65440: GO 65451
// ComExitBuilding ( unit ) ;
65442: LD_VAR 0 1
65446: PPUSH
65447: CALL_OW 122
// result := tmp ;
65451: LD_ADDR_VAR 0 2
65455: PUSH
65456: LD_VAR 0 3
65460: ST_TO_ADDR
// end ;
65461: LD_VAR 0 2
65465: RET
// export function ComExitAll ( units ) ; var i ; begin
65466: LD_INT 0
65468: PPUSH
65469: PPUSH
// if not units then
65470: LD_VAR 0 1
65474: NOT
65475: IFFALSE 65479
// exit ;
65477: GO 65505
// for i in units do
65479: LD_ADDR_VAR 0 3
65483: PUSH
65484: LD_VAR 0 1
65488: PUSH
65489: FOR_IN
65490: IFFALSE 65503
// ComExit ( i ) ;
65492: LD_VAR 0 3
65496: PPUSH
65497: CALL 65383 0 1
65501: GO 65489
65503: POP
65504: POP
// end ;
65505: LD_VAR 0 2
65509: RET
// export function ResetHc ; begin
65510: LD_INT 0
65512: PPUSH
// InitHc ;
65513: CALL_OW 19
// hc_importance := 0 ;
65517: LD_ADDR_OWVAR 32
65521: PUSH
65522: LD_INT 0
65524: ST_TO_ADDR
// end ;
65525: LD_VAR 0 1
65529: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65530: LD_INT 0
65532: PPUSH
65533: PPUSH
65534: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65535: LD_ADDR_VAR 0 6
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_VAR 0 3
65549: PLUS
65550: PUSH
65551: LD_INT 2
65553: DIV
65554: ST_TO_ADDR
// if _x < 0 then
65555: LD_VAR 0 6
65559: PUSH
65560: LD_INT 0
65562: LESS
65563: IFFALSE 65580
// _x := _x * - 1 ;
65565: LD_ADDR_VAR 0 6
65569: PUSH
65570: LD_VAR 0 6
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: MUL
65579: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65580: LD_ADDR_VAR 0 7
65584: PUSH
65585: LD_VAR 0 2
65589: PUSH
65590: LD_VAR 0 4
65594: PLUS
65595: PUSH
65596: LD_INT 2
65598: DIV
65599: ST_TO_ADDR
// if _y < 0 then
65600: LD_VAR 0 7
65604: PUSH
65605: LD_INT 0
65607: LESS
65608: IFFALSE 65625
// _y := _y * - 1 ;
65610: LD_ADDR_VAR 0 7
65614: PUSH
65615: LD_VAR 0 7
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: MUL
65624: ST_TO_ADDR
// result := [ _x , _y ] ;
65625: LD_ADDR_VAR 0 5
65629: PUSH
65630: LD_VAR 0 6
65634: PUSH
65635: LD_VAR 0 7
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: ST_TO_ADDR
// end ;
65644: LD_VAR 0 5
65648: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// task := GetTaskList ( unit ) ;
65655: LD_ADDR_VAR 0 7
65659: PUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL_OW 437
65669: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65670: LD_VAR 0 7
65674: NOT
65675: PUSH
65676: LD_VAR 0 1
65680: PPUSH
65681: LD_VAR 0 2
65685: PPUSH
65686: CALL_OW 308
65690: NOT
65691: AND
65692: IFFALSE 65696
// exit ;
65694: GO 65814
// if IsInArea ( unit , area ) then
65696: LD_VAR 0 1
65700: PPUSH
65701: LD_VAR 0 2
65705: PPUSH
65706: CALL_OW 308
65710: IFFALSE 65728
// begin ComMoveToArea ( unit , goAway ) ;
65712: LD_VAR 0 1
65716: PPUSH
65717: LD_VAR 0 3
65721: PPUSH
65722: CALL_OW 113
// exit ;
65726: GO 65814
// end ; if task [ 1 ] [ 1 ] <> M then
65728: LD_VAR 0 7
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PUSH
65737: LD_INT 1
65739: ARRAY
65740: PUSH
65741: LD_STRING M
65743: NONEQUAL
65744: IFFALSE 65748
// exit ;
65746: GO 65814
// x := task [ 1 ] [ 2 ] ;
65748: LD_ADDR_VAR 0 5
65752: PUSH
65753: LD_VAR 0 7
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PUSH
65762: LD_INT 2
65764: ARRAY
65765: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65766: LD_ADDR_VAR 0 6
65770: PUSH
65771: LD_VAR 0 7
65775: PUSH
65776: LD_INT 1
65778: ARRAY
65779: PUSH
65780: LD_INT 3
65782: ARRAY
65783: ST_TO_ADDR
// if InArea ( x , y , area ) then
65784: LD_VAR 0 5
65788: PPUSH
65789: LD_VAR 0 6
65793: PPUSH
65794: LD_VAR 0 2
65798: PPUSH
65799: CALL_OW 309
65803: IFFALSE 65814
// ComStop ( unit ) ;
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 141
// end ;
65814: LD_VAR 0 4
65818: RET
// export function Abs ( value ) ; begin
65819: LD_INT 0
65821: PPUSH
// result := value ;
65822: LD_ADDR_VAR 0 2
65826: PUSH
65827: LD_VAR 0 1
65831: ST_TO_ADDR
// if value < 0 then
65832: LD_VAR 0 1
65836: PUSH
65837: LD_INT 0
65839: LESS
65840: IFFALSE 65857
// result := value * - 1 ;
65842: LD_ADDR_VAR 0 2
65846: PUSH
65847: LD_VAR 0 1
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: MUL
65856: ST_TO_ADDR
// end ;
65857: LD_VAR 0 2
65861: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65862: LD_INT 0
65864: PPUSH
65865: PPUSH
65866: PPUSH
65867: PPUSH
65868: PPUSH
65869: PPUSH
65870: PPUSH
65871: PPUSH
// if not unit or not building then
65872: LD_VAR 0 1
65876: NOT
65877: PUSH
65878: LD_VAR 0 2
65882: NOT
65883: OR
65884: IFFALSE 65888
// exit ;
65886: GO 66114
// x := GetX ( building ) ;
65888: LD_ADDR_VAR 0 4
65892: PUSH
65893: LD_VAR 0 2
65897: PPUSH
65898: CALL_OW 250
65902: ST_TO_ADDR
// y := GetY ( building ) ;
65903: LD_ADDR_VAR 0 6
65907: PUSH
65908: LD_VAR 0 2
65912: PPUSH
65913: CALL_OW 251
65917: ST_TO_ADDR
// d := GetDir ( building ) ;
65918: LD_ADDR_VAR 0 8
65922: PUSH
65923: LD_VAR 0 2
65927: PPUSH
65928: CALL_OW 254
65932: ST_TO_ADDR
// r := 4 ;
65933: LD_ADDR_VAR 0 9
65937: PUSH
65938: LD_INT 4
65940: ST_TO_ADDR
// for i := 1 to 5 do
65941: LD_ADDR_VAR 0 10
65945: PUSH
65946: DOUBLE
65947: LD_INT 1
65949: DEC
65950: ST_TO_ADDR
65951: LD_INT 5
65953: PUSH
65954: FOR_TO
65955: IFFALSE 66112
// begin _x := ShiftX ( x , d , r + i ) ;
65957: LD_ADDR_VAR 0 5
65961: PUSH
65962: LD_VAR 0 4
65966: PPUSH
65967: LD_VAR 0 8
65971: PPUSH
65972: LD_VAR 0 9
65976: PUSH
65977: LD_VAR 0 10
65981: PLUS
65982: PPUSH
65983: CALL_OW 272
65987: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65988: LD_ADDR_VAR 0 7
65992: PUSH
65993: LD_VAR 0 6
65997: PPUSH
65998: LD_VAR 0 8
66002: PPUSH
66003: LD_VAR 0 9
66007: PUSH
66008: LD_VAR 0 10
66012: PLUS
66013: PPUSH
66014: CALL_OW 273
66018: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66019: LD_VAR 0 5
66023: PPUSH
66024: LD_VAR 0 7
66028: PPUSH
66029: CALL_OW 488
66033: PUSH
66034: LD_VAR 0 5
66038: PPUSH
66039: LD_VAR 0 7
66043: PPUSH
66044: CALL_OW 428
66048: PPUSH
66049: CALL_OW 247
66053: PUSH
66054: LD_INT 3
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: IN
66064: NOT
66065: AND
66066: IFFALSE 66110
// begin ComMoveXY ( unit , _x , _y ) ;
66068: LD_VAR 0 1
66072: PPUSH
66073: LD_VAR 0 5
66077: PPUSH
66078: LD_VAR 0 7
66082: PPUSH
66083: CALL_OW 111
// result := [ _x , _y ] ;
66087: LD_ADDR_VAR 0 3
66091: PUSH
66092: LD_VAR 0 5
66096: PUSH
66097: LD_VAR 0 7
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: ST_TO_ADDR
// exit ;
66106: POP
66107: POP
66108: GO 66114
// end ; end ;
66110: GO 65954
66112: POP
66113: POP
// end ;
66114: LD_VAR 0 3
66118: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
// result := 0 ;
66124: LD_ADDR_VAR 0 3
66128: PUSH
66129: LD_INT 0
66131: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 0
66139: LESS
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: LD_INT 8
66148: GREATER
66149: OR
66150: PUSH
66151: LD_VAR 0 2
66155: PUSH
66156: LD_INT 0
66158: LESS
66159: OR
66160: PUSH
66161: LD_VAR 0 2
66165: PUSH
66166: LD_INT 8
66168: GREATER
66169: OR
66170: IFFALSE 66174
// exit ;
66172: GO 66249
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66174: LD_ADDR_VAR 0 4
66178: PUSH
66179: LD_INT 22
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PPUSH
66191: CALL_OW 69
66195: PUSH
66196: FOR_IN
66197: IFFALSE 66247
// begin un := UnitShoot ( i ) ;
66199: LD_ADDR_VAR 0 5
66203: PUSH
66204: LD_VAR 0 4
66208: PPUSH
66209: CALL_OW 504
66213: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66214: LD_VAR 0 5
66218: PPUSH
66219: CALL_OW 255
66223: PUSH
66224: LD_VAR 0 1
66228: EQUAL
66229: IFFALSE 66245
// begin result := un ;
66231: LD_ADDR_VAR 0 3
66235: PUSH
66236: LD_VAR 0 5
66240: ST_TO_ADDR
// exit ;
66241: POP
66242: POP
66243: GO 66249
// end ; end ;
66245: GO 66196
66247: POP
66248: POP
// end ;
66249: LD_VAR 0 3
66253: RET
// export function GetCargoBay ( units ) ; begin
66254: LD_INT 0
66256: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66257: LD_ADDR_VAR 0 2
66261: PUSH
66262: LD_VAR 0 1
66266: PPUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 34
66272: PUSH
66273: LD_INT 12
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 34
66282: PUSH
66283: LD_INT 51
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 34
66292: PUSH
66293: LD_INT 32
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 34
66302: PUSH
66303: LD_INT 89
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: PPUSH
66317: CALL_OW 72
66321: ST_TO_ADDR
// end ;
66322: LD_VAR 0 2
66326: RET
// export function Negate ( value ) ; begin
66327: LD_INT 0
66329: PPUSH
// result := not value ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 1
66339: NOT
66340: ST_TO_ADDR
// end ;
66341: LD_VAR 0 2
66345: RET
// export function Inc ( value ) ; begin
66346: LD_INT 0
66348: PPUSH
// result := value + 1 ;
66349: LD_ADDR_VAR 0 2
66353: PUSH
66354: LD_VAR 0 1
66358: PUSH
66359: LD_INT 1
66361: PLUS
66362: ST_TO_ADDR
// end ;
66363: LD_VAR 0 2
66367: RET
// export function Dec ( value ) ; begin
66368: LD_INT 0
66370: PPUSH
// result := value - 1 ;
66371: LD_ADDR_VAR 0 2
66375: PUSH
66376: LD_VAR 0 1
66380: PUSH
66381: LD_INT 1
66383: MINUS
66384: ST_TO_ADDR
// end ;
66385: LD_VAR 0 2
66389: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
66399: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66400: LD_VAR 0 1
66404: PPUSH
66405: LD_VAR 0 2
66409: PPUSH
66410: CALL_OW 488
66414: NOT
66415: PUSH
66416: LD_VAR 0 3
66420: PPUSH
66421: LD_VAR 0 4
66425: PPUSH
66426: CALL_OW 488
66430: NOT
66431: OR
66432: IFFALSE 66445
// begin result := - 1 ;
66434: LD_ADDR_VAR 0 5
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: ST_TO_ADDR
// exit ;
66443: GO 66680
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66445: LD_ADDR_VAR 0 12
66449: PUSH
66450: LD_VAR 0 1
66454: PPUSH
66455: LD_VAR 0 2
66459: PPUSH
66460: LD_VAR 0 3
66464: PPUSH
66465: LD_VAR 0 4
66469: PPUSH
66470: CALL 65530 0 4
66474: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66475: LD_ADDR_VAR 0 11
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: LD_VAR 0 2
66489: PPUSH
66490: LD_VAR 0 12
66494: PUSH
66495: LD_INT 1
66497: ARRAY
66498: PPUSH
66499: LD_VAR 0 12
66503: PUSH
66504: LD_INT 2
66506: ARRAY
66507: PPUSH
66508: CALL_OW 298
66512: ST_TO_ADDR
// distance := 9999 ;
66513: LD_ADDR_VAR 0 10
66517: PUSH
66518: LD_INT 9999
66520: ST_TO_ADDR
// for i := 0 to 5 do
66521: LD_ADDR_VAR 0 6
66525: PUSH
66526: DOUBLE
66527: LD_INT 0
66529: DEC
66530: ST_TO_ADDR
66531: LD_INT 5
66533: PUSH
66534: FOR_TO
66535: IFFALSE 66678
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66537: LD_ADDR_VAR 0 7
66541: PUSH
66542: LD_VAR 0 1
66546: PPUSH
66547: LD_VAR 0 6
66551: PPUSH
66552: LD_VAR 0 11
66556: PPUSH
66557: CALL_OW 272
66561: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66562: LD_ADDR_VAR 0 8
66566: PUSH
66567: LD_VAR 0 2
66571: PPUSH
66572: LD_VAR 0 6
66576: PPUSH
66577: LD_VAR 0 11
66581: PPUSH
66582: CALL_OW 273
66586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66587: LD_VAR 0 7
66591: PPUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: CALL_OW 488
66601: NOT
66602: IFFALSE 66606
// continue ;
66604: GO 66534
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66606: LD_ADDR_VAR 0 9
66610: PUSH
66611: LD_VAR 0 12
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PPUSH
66620: LD_VAR 0 12
66624: PUSH
66625: LD_INT 2
66627: ARRAY
66628: PPUSH
66629: LD_VAR 0 7
66633: PPUSH
66634: LD_VAR 0 8
66638: PPUSH
66639: CALL_OW 298
66643: ST_TO_ADDR
// if tmp < distance then
66644: LD_VAR 0 9
66648: PUSH
66649: LD_VAR 0 10
66653: LESS
66654: IFFALSE 66676
// begin result := i ;
66656: LD_ADDR_VAR 0 5
66660: PUSH
66661: LD_VAR 0 6
66665: ST_TO_ADDR
// distance := tmp ;
66666: LD_ADDR_VAR 0 10
66670: PUSH
66671: LD_VAR 0 9
66675: ST_TO_ADDR
// end ; end ;
66676: GO 66534
66678: POP
66679: POP
// end ;
66680: LD_VAR 0 5
66684: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66685: LD_INT 0
66687: PPUSH
66688: PPUSH
// if not driver or not IsInUnit ( driver ) then
66689: LD_VAR 0 1
66693: NOT
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 310
66704: NOT
66705: OR
66706: IFFALSE 66710
// exit ;
66708: GO 66800
// vehicle := IsInUnit ( driver ) ;
66710: LD_ADDR_VAR 0 3
66714: PUSH
66715: LD_VAR 0 1
66719: PPUSH
66720: CALL_OW 310
66724: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66725: LD_VAR 0 1
66729: PPUSH
66730: LD_STRING \
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_STRING E
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_VAR 0 3
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PPUSH
66796: CALL_OW 446
// end ;
66800: LD_VAR 0 2
66804: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66805: LD_INT 0
66807: PPUSH
66808: PPUSH
// if not driver or not IsInUnit ( driver ) then
66809: LD_VAR 0 1
66813: NOT
66814: PUSH
66815: LD_VAR 0 1
66819: PPUSH
66820: CALL_OW 310
66824: NOT
66825: OR
66826: IFFALSE 66830
// exit ;
66828: GO 66920
// vehicle := IsInUnit ( driver ) ;
66830: LD_ADDR_VAR 0 3
66834: PUSH
66835: LD_VAR 0 1
66839: PPUSH
66840: CALL_OW 310
66844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66845: LD_VAR 0 1
66849: PPUSH
66850: LD_STRING \
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: PUSH
66880: LD_STRING E
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: LD_VAR 0 3
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PPUSH
66916: CALL_OW 447
// end ;
66920: LD_VAR 0 2
66924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66925: LD_INT 0
66927: PPUSH
66928: PPUSH
66929: PPUSH
// tmp := [ ] ;
66930: LD_ADDR_VAR 0 5
66934: PUSH
66935: EMPTY
66936: ST_TO_ADDR
// for i in units do
66937: LD_ADDR_VAR 0 4
66941: PUSH
66942: LD_VAR 0 1
66946: PUSH
66947: FOR_IN
66948: IFFALSE 66986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66950: LD_ADDR_VAR 0 5
66954: PUSH
66955: LD_VAR 0 5
66959: PPUSH
66960: LD_VAR 0 5
66964: PUSH
66965: LD_INT 1
66967: PLUS
66968: PPUSH
66969: LD_VAR 0 4
66973: PPUSH
66974: CALL_OW 256
66978: PPUSH
66979: CALL_OW 2
66983: ST_TO_ADDR
66984: GO 66947
66986: POP
66987: POP
// if not tmp then
66988: LD_VAR 0 5
66992: NOT
66993: IFFALSE 66997
// exit ;
66995: GO 67045
// if asc then
66997: LD_VAR 0 2
67001: IFFALSE 67025
// result := SortListByListAsc ( units , tmp ) else
67003: LD_ADDR_VAR 0 3
67007: PUSH
67008: LD_VAR 0 1
67012: PPUSH
67013: LD_VAR 0 5
67017: PPUSH
67018: CALL_OW 76
67022: ST_TO_ADDR
67023: GO 67045
// result := SortListByListDesc ( units , tmp ) ;
67025: LD_ADDR_VAR 0 3
67029: PUSH
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_VAR 0 5
67039: PPUSH
67040: CALL_OW 77
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 3
67049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
// task := GetTaskList ( mech ) ;
67054: LD_ADDR_VAR 0 4
67058: PUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 437
67068: ST_TO_ADDR
// if not task then
67069: LD_VAR 0 4
67073: NOT
67074: IFFALSE 67078
// exit ;
67076: GO 67120
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_VAR 0 4
67087: PUSH
67088: LD_INT 1
67090: ARRAY
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PUSH
67096: LD_STRING r
67098: EQUAL
67099: PUSH
67100: LD_VAR 0 4
67104: PUSH
67105: LD_INT 1
67107: ARRAY
67108: PUSH
67109: LD_INT 4
67111: ARRAY
67112: PUSH
67113: LD_VAR 0 2
67117: EQUAL
67118: AND
67119: ST_TO_ADDR
// end ;
67120: LD_VAR 0 3
67124: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67125: LD_INT 0
67127: PPUSH
// SetDir ( unit , d ) ;
67128: LD_VAR 0 1
67132: PPUSH
67133: LD_VAR 0 4
67137: PPUSH
67138: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67142: LD_ADDR_VAR 0 6
67146: PUSH
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_VAR 0 2
67156: PPUSH
67157: LD_VAR 0 3
67161: PPUSH
67162: LD_VAR 0 5
67166: PPUSH
67167: CALL_OW 48
67171: ST_TO_ADDR
// end ;
67172: LD_VAR 0 6
67176: RET
// export function ToNaturalNumber ( number ) ; begin
67177: LD_INT 0
67179: PPUSH
// result := number div 1 ;
67180: LD_ADDR_VAR 0 2
67184: PUSH
67185: LD_VAR 0 1
67189: PUSH
67190: LD_INT 1
67192: DIV
67193: ST_TO_ADDR
// if number < 0 then
67194: LD_VAR 0 1
67198: PUSH
67199: LD_INT 0
67201: LESS
67202: IFFALSE 67212
// result := 0 ;
67204: LD_ADDR_VAR 0 2
67208: PUSH
67209: LD_INT 0
67211: ST_TO_ADDR
// end ;
67212: LD_VAR 0 2
67216: RET
// export function SortByClass ( units , class ) ; var un ; begin
67217: LD_INT 0
67219: PPUSH
67220: PPUSH
// if not units or not class then
67221: LD_VAR 0 1
67225: NOT
67226: PUSH
67227: LD_VAR 0 2
67231: NOT
67232: OR
67233: IFFALSE 67237
// exit ;
67235: GO 67332
// result := [ ] ;
67237: LD_ADDR_VAR 0 3
67241: PUSH
67242: EMPTY
67243: ST_TO_ADDR
// for un in units do
67244: LD_ADDR_VAR 0 4
67248: PUSH
67249: LD_VAR 0 1
67253: PUSH
67254: FOR_IN
67255: IFFALSE 67330
// if GetClass ( un ) = class then
67257: LD_VAR 0 4
67261: PPUSH
67262: CALL_OW 257
67266: PUSH
67267: LD_VAR 0 2
67271: EQUAL
67272: IFFALSE 67299
// result := Insert ( result , 1 , un ) else
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 3
67283: PPUSH
67284: LD_INT 1
67286: PPUSH
67287: LD_VAR 0 4
67291: PPUSH
67292: CALL_OW 2
67296: ST_TO_ADDR
67297: GO 67328
// result := Replace ( result , result + 1 , un ) ;
67299: LD_ADDR_VAR 0 3
67303: PUSH
67304: LD_VAR 0 3
67308: PPUSH
67309: LD_VAR 0 3
67313: PUSH
67314: LD_INT 1
67316: PLUS
67317: PPUSH
67318: LD_VAR 0 4
67322: PPUSH
67323: CALL_OW 1
67327: ST_TO_ADDR
67328: GO 67254
67330: POP
67331: POP
// end ;
67332: LD_VAR 0 3
67336: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67337: LD_INT 0
67339: PPUSH
67340: PPUSH
67341: PPUSH
67342: PPUSH
67343: PPUSH
67344: PPUSH
67345: PPUSH
// result := [ ] ;
67346: LD_ADDR_VAR 0 4
67350: PUSH
67351: EMPTY
67352: ST_TO_ADDR
// if x - r < 0 then
67353: LD_VAR 0 1
67357: PUSH
67358: LD_VAR 0 3
67362: MINUS
67363: PUSH
67364: LD_INT 0
67366: LESS
67367: IFFALSE 67379
// min_x := 0 else
67369: LD_ADDR_VAR 0 8
67373: PUSH
67374: LD_INT 0
67376: ST_TO_ADDR
67377: GO 67395
// min_x := x - r ;
67379: LD_ADDR_VAR 0 8
67383: PUSH
67384: LD_VAR 0 1
67388: PUSH
67389: LD_VAR 0 3
67393: MINUS
67394: ST_TO_ADDR
// if y - r < 0 then
67395: LD_VAR 0 2
67399: PUSH
67400: LD_VAR 0 3
67404: MINUS
67405: PUSH
67406: LD_INT 0
67408: LESS
67409: IFFALSE 67421
// min_y := 0 else
67411: LD_ADDR_VAR 0 7
67415: PUSH
67416: LD_INT 0
67418: ST_TO_ADDR
67419: GO 67437
// min_y := y - r ;
67421: LD_ADDR_VAR 0 7
67425: PUSH
67426: LD_VAR 0 2
67430: PUSH
67431: LD_VAR 0 3
67435: MINUS
67436: ST_TO_ADDR
// max_x := x + r ;
67437: LD_ADDR_VAR 0 9
67441: PUSH
67442: LD_VAR 0 1
67446: PUSH
67447: LD_VAR 0 3
67451: PLUS
67452: ST_TO_ADDR
// max_y := y + r ;
67453: LD_ADDR_VAR 0 10
67457: PUSH
67458: LD_VAR 0 2
67462: PUSH
67463: LD_VAR 0 3
67467: PLUS
67468: ST_TO_ADDR
// for _x = min_x to max_x do
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: DOUBLE
67475: LD_VAR 0 8
67479: DEC
67480: ST_TO_ADDR
67481: LD_VAR 0 9
67485: PUSH
67486: FOR_TO
67487: IFFALSE 67588
// for _y = min_y to max_y do
67489: LD_ADDR_VAR 0 6
67493: PUSH
67494: DOUBLE
67495: LD_VAR 0 7
67499: DEC
67500: ST_TO_ADDR
67501: LD_VAR 0 10
67505: PUSH
67506: FOR_TO
67507: IFFALSE 67584
// begin if not ValidHex ( _x , _y ) then
67509: LD_VAR 0 5
67513: PPUSH
67514: LD_VAR 0 6
67518: PPUSH
67519: CALL_OW 488
67523: NOT
67524: IFFALSE 67528
// continue ;
67526: GO 67506
// if GetResourceTypeXY ( _x , _y ) then
67528: LD_VAR 0 5
67532: PPUSH
67533: LD_VAR 0 6
67537: PPUSH
67538: CALL_OW 283
67542: IFFALSE 67582
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67544: LD_ADDR_VAR 0 4
67548: PUSH
67549: LD_VAR 0 4
67553: PPUSH
67554: LD_VAR 0 4
67558: PUSH
67559: LD_INT 1
67561: PLUS
67562: PPUSH
67563: LD_VAR 0 5
67567: PUSH
67568: LD_VAR 0 6
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PPUSH
67577: CALL_OW 1
67581: ST_TO_ADDR
// end ;
67582: GO 67506
67584: POP
67585: POP
67586: GO 67486
67588: POP
67589: POP
// end ;
67590: LD_VAR 0 4
67594: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67595: LD_INT 0
67597: PPUSH
67598: PPUSH
67599: PPUSH
67600: PPUSH
67601: PPUSH
67602: PPUSH
67603: PPUSH
67604: PPUSH
// if not units then
67605: LD_VAR 0 1
67609: NOT
67610: IFFALSE 67614
// exit ;
67612: GO 68142
// result := UnitFilter ( units , [ f_ok ] ) ;
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_VAR 0 1
67623: PPUSH
67624: LD_INT 50
67626: PUSH
67627: EMPTY
67628: LIST
67629: PPUSH
67630: CALL_OW 72
67634: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67635: LD_ADDR_VAR 0 8
67639: PUSH
67640: LD_VAR 0 1
67644: PUSH
67645: LD_INT 1
67647: ARRAY
67648: PPUSH
67649: CALL_OW 255
67653: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67654: LD_ADDR_VAR 0 10
67658: PUSH
67659: LD_INT 29
67661: PUSH
67662: LD_INT 91
67664: PUSH
67665: LD_INT 49
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: LIST
67672: ST_TO_ADDR
// if not result then
67673: LD_VAR 0 3
67677: NOT
67678: IFFALSE 67682
// exit ;
67680: GO 68142
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67682: LD_ADDR_VAR 0 5
67686: PUSH
67687: LD_INT 81
67689: PUSH
67690: LD_VAR 0 8
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PPUSH
67699: CALL_OW 69
67703: ST_TO_ADDR
// for i in result do
67704: LD_ADDR_VAR 0 4
67708: PUSH
67709: LD_VAR 0 3
67713: PUSH
67714: FOR_IN
67715: IFFALSE 68140
// begin tag := GetTag ( i ) + 1 ;
67717: LD_ADDR_VAR 0 9
67721: PUSH
67722: LD_VAR 0 4
67726: PPUSH
67727: CALL_OW 110
67731: PUSH
67732: LD_INT 1
67734: PLUS
67735: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67736: LD_ADDR_VAR 0 7
67740: PUSH
67741: LD_VAR 0 4
67745: PPUSH
67746: CALL_OW 250
67750: PPUSH
67751: LD_VAR 0 4
67755: PPUSH
67756: CALL_OW 251
67760: PPUSH
67761: LD_INT 4
67763: PPUSH
67764: CALL 67337 0 3
67768: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67769: LD_VAR 0 4
67773: PPUSH
67774: CALL_OW 247
67778: PUSH
67779: LD_INT 2
67781: EQUAL
67782: PUSH
67783: LD_VAR 0 7
67787: PUSH
67788: LD_INT 2
67790: GREATER
67791: AND
67792: PUSH
67793: LD_VAR 0 4
67797: PPUSH
67798: CALL_OW 264
67802: PUSH
67803: LD_VAR 0 10
67807: IN
67808: NOT
67809: AND
67810: IFFALSE 67849
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67812: LD_VAR 0 4
67816: PPUSH
67817: LD_VAR 0 7
67821: PUSH
67822: LD_INT 1
67824: ARRAY
67825: PUSH
67826: LD_INT 1
67828: ARRAY
67829: PPUSH
67830: LD_VAR 0 7
67834: PUSH
67835: LD_INT 1
67837: ARRAY
67838: PUSH
67839: LD_INT 2
67841: ARRAY
67842: PPUSH
67843: CALL_OW 116
67847: GO 68138
// if path > tag then
67849: LD_VAR 0 2
67853: PUSH
67854: LD_VAR 0 9
67858: GREATER
67859: IFFALSE 68067
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67861: LD_ADDR_VAR 0 6
67865: PUSH
67866: LD_VAR 0 5
67870: PPUSH
67871: LD_INT 91
67873: PUSH
67874: LD_VAR 0 4
67878: PUSH
67879: LD_INT 8
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: PPUSH
67887: CALL_OW 72
67891: ST_TO_ADDR
// if nearEnemy then
67892: LD_VAR 0 6
67896: IFFALSE 67965
// begin if GetWeapon ( i ) = ru_time_lapser then
67898: LD_VAR 0 4
67902: PPUSH
67903: CALL_OW 264
67907: PUSH
67908: LD_INT 49
67910: EQUAL
67911: IFFALSE 67939
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67913: LD_VAR 0 4
67917: PPUSH
67918: LD_VAR 0 6
67922: PPUSH
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 74
67932: PPUSH
67933: CALL_OW 112
67937: GO 67963
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67939: LD_VAR 0 4
67943: PPUSH
67944: LD_VAR 0 6
67948: PPUSH
67949: LD_VAR 0 4
67953: PPUSH
67954: CALL_OW 74
67958: PPUSH
67959: CALL 69213 0 2
// end else
67963: GO 68065
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67965: LD_VAR 0 4
67969: PPUSH
67970: LD_VAR 0 2
67974: PUSH
67975: LD_VAR 0 9
67979: ARRAY
67980: PUSH
67981: LD_INT 1
67983: ARRAY
67984: PPUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_VAR 0 9
67994: ARRAY
67995: PUSH
67996: LD_INT 2
67998: ARRAY
67999: PPUSH
68000: CALL_OW 297
68004: PUSH
68005: LD_INT 6
68007: GREATER
68008: IFFALSE 68051
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68010: LD_VAR 0 4
68014: PPUSH
68015: LD_VAR 0 2
68019: PUSH
68020: LD_VAR 0 9
68024: ARRAY
68025: PUSH
68026: LD_INT 1
68028: ARRAY
68029: PPUSH
68030: LD_VAR 0 2
68034: PUSH
68035: LD_VAR 0 9
68039: ARRAY
68040: PUSH
68041: LD_INT 2
68043: ARRAY
68044: PPUSH
68045: CALL_OW 114
68049: GO 68065
// SetTag ( i , tag ) ;
68051: LD_VAR 0 4
68055: PPUSH
68056: LD_VAR 0 9
68060: PPUSH
68061: CALL_OW 109
// end else
68065: GO 68138
// if enemy then
68067: LD_VAR 0 5
68071: IFFALSE 68138
// begin if GetWeapon ( i ) = ru_time_lapser then
68073: LD_VAR 0 4
68077: PPUSH
68078: CALL_OW 264
68082: PUSH
68083: LD_INT 49
68085: EQUAL
68086: IFFALSE 68114
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68088: LD_VAR 0 4
68092: PPUSH
68093: LD_VAR 0 5
68097: PPUSH
68098: LD_VAR 0 4
68102: PPUSH
68103: CALL_OW 74
68107: PPUSH
68108: CALL_OW 112
68112: GO 68138
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68114: LD_VAR 0 4
68118: PPUSH
68119: LD_VAR 0 5
68123: PPUSH
68124: LD_VAR 0 4
68128: PPUSH
68129: CALL_OW 74
68133: PPUSH
68134: CALL 69213 0 2
// end ; end ;
68138: GO 67714
68140: POP
68141: POP
// end ;
68142: LD_VAR 0 3
68146: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68147: LD_INT 0
68149: PPUSH
68150: PPUSH
68151: PPUSH
// if not unit or IsInUnit ( unit ) then
68152: LD_VAR 0 1
68156: NOT
68157: PUSH
68158: LD_VAR 0 1
68162: PPUSH
68163: CALL_OW 310
68167: OR
68168: IFFALSE 68172
// exit ;
68170: GO 68263
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68172: LD_ADDR_VAR 0 4
68176: PUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL_OW 250
68186: PPUSH
68187: LD_VAR 0 2
68191: PPUSH
68192: LD_INT 1
68194: PPUSH
68195: CALL_OW 272
68199: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68200: LD_ADDR_VAR 0 5
68204: PUSH
68205: LD_VAR 0 1
68209: PPUSH
68210: CALL_OW 251
68214: PPUSH
68215: LD_VAR 0 2
68219: PPUSH
68220: LD_INT 1
68222: PPUSH
68223: CALL_OW 273
68227: ST_TO_ADDR
// if ValidHex ( x , y ) then
68228: LD_VAR 0 4
68232: PPUSH
68233: LD_VAR 0 5
68237: PPUSH
68238: CALL_OW 488
68242: IFFALSE 68263
// ComTurnXY ( unit , x , y ) ;
68244: LD_VAR 0 1
68248: PPUSH
68249: LD_VAR 0 4
68253: PPUSH
68254: LD_VAR 0 5
68258: PPUSH
68259: CALL_OW 118
// end ;
68263: LD_VAR 0 3
68267: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68268: LD_INT 0
68270: PPUSH
68271: PPUSH
// result := false ;
68272: LD_ADDR_VAR 0 3
68276: PUSH
68277: LD_INT 0
68279: ST_TO_ADDR
// if not units then
68280: LD_VAR 0 2
68284: NOT
68285: IFFALSE 68289
// exit ;
68287: GO 68334
// for i in units do
68289: LD_ADDR_VAR 0 4
68293: PUSH
68294: LD_VAR 0 2
68298: PUSH
68299: FOR_IN
68300: IFFALSE 68332
// if See ( side , i ) then
68302: LD_VAR 0 1
68306: PPUSH
68307: LD_VAR 0 4
68311: PPUSH
68312: CALL_OW 292
68316: IFFALSE 68330
// begin result := true ;
68318: LD_ADDR_VAR 0 3
68322: PUSH
68323: LD_INT 1
68325: ST_TO_ADDR
// exit ;
68326: POP
68327: POP
68328: GO 68334
// end ;
68330: GO 68299
68332: POP
68333: POP
// end ;
68334: LD_VAR 0 3
68338: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68339: LD_INT 0
68341: PPUSH
68342: PPUSH
68343: PPUSH
68344: PPUSH
// if not unit or not points then
68345: LD_VAR 0 1
68349: NOT
68350: PUSH
68351: LD_VAR 0 2
68355: NOT
68356: OR
68357: IFFALSE 68361
// exit ;
68359: GO 68451
// dist := 99999 ;
68361: LD_ADDR_VAR 0 5
68365: PUSH
68366: LD_INT 99999
68368: ST_TO_ADDR
// for i in points do
68369: LD_ADDR_VAR 0 4
68373: PUSH
68374: LD_VAR 0 2
68378: PUSH
68379: FOR_IN
68380: IFFALSE 68449
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68382: LD_ADDR_VAR 0 6
68386: PUSH
68387: LD_VAR 0 1
68391: PPUSH
68392: LD_VAR 0 4
68396: PUSH
68397: LD_INT 1
68399: ARRAY
68400: PPUSH
68401: LD_VAR 0 4
68405: PUSH
68406: LD_INT 2
68408: ARRAY
68409: PPUSH
68410: CALL_OW 297
68414: ST_TO_ADDR
// if tmpDist < dist then
68415: LD_VAR 0 6
68419: PUSH
68420: LD_VAR 0 5
68424: LESS
68425: IFFALSE 68447
// begin result := i ;
68427: LD_ADDR_VAR 0 3
68431: PUSH
68432: LD_VAR 0 4
68436: ST_TO_ADDR
// dist := tmpDist ;
68437: LD_ADDR_VAR 0 5
68441: PUSH
68442: LD_VAR 0 6
68446: ST_TO_ADDR
// end ; end ;
68447: GO 68379
68449: POP
68450: POP
// end ;
68451: LD_VAR 0 3
68455: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68456: LD_INT 0
68458: PPUSH
// uc_side := side ;
68459: LD_ADDR_OWVAR 20
68463: PUSH
68464: LD_VAR 0 1
68468: ST_TO_ADDR
// uc_nation := 3 ;
68469: LD_ADDR_OWVAR 21
68473: PUSH
68474: LD_INT 3
68476: ST_TO_ADDR
// vc_chassis := 25 ;
68477: LD_ADDR_OWVAR 37
68481: PUSH
68482: LD_INT 25
68484: ST_TO_ADDR
// vc_engine := engine_siberite ;
68485: LD_ADDR_OWVAR 39
68489: PUSH
68490: LD_INT 3
68492: ST_TO_ADDR
// vc_control := control_computer ;
68493: LD_ADDR_OWVAR 38
68497: PUSH
68498: LD_INT 3
68500: ST_TO_ADDR
// vc_weapon := 59 ;
68501: LD_ADDR_OWVAR 40
68505: PUSH
68506: LD_INT 59
68508: ST_TO_ADDR
// result := CreateVehicle ;
68509: LD_ADDR_VAR 0 5
68513: PUSH
68514: CALL_OW 45
68518: ST_TO_ADDR
// SetDir ( result , d ) ;
68519: LD_VAR 0 5
68523: PPUSH
68524: LD_VAR 0 4
68528: PPUSH
68529: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68533: LD_VAR 0 5
68537: PPUSH
68538: LD_VAR 0 2
68542: PPUSH
68543: LD_VAR 0 3
68547: PPUSH
68548: LD_INT 0
68550: PPUSH
68551: CALL_OW 48
// end ;
68555: LD_VAR 0 5
68559: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68560: LD_INT 0
68562: PPUSH
68563: PPUSH
68564: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68565: LD_ADDR_VAR 0 2
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68588: LD_VAR 0 1
68592: NOT
68593: PUSH
68594: LD_VAR 0 1
68598: PPUSH
68599: CALL_OW 264
68603: PUSH
68604: LD_INT 12
68606: PUSH
68607: LD_INT 51
68609: PUSH
68610: LD_INT 32
68612: PUSH
68613: LD_INT 89
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: IN
68622: NOT
68623: OR
68624: IFFALSE 68628
// exit ;
68626: GO 68726
// for i := 1 to 3 do
68628: LD_ADDR_VAR 0 3
68632: PUSH
68633: DOUBLE
68634: LD_INT 1
68636: DEC
68637: ST_TO_ADDR
68638: LD_INT 3
68640: PUSH
68641: FOR_TO
68642: IFFALSE 68724
// begin tmp := GetCargo ( cargo , i ) ;
68644: LD_ADDR_VAR 0 4
68648: PUSH
68649: LD_VAR 0 1
68653: PPUSH
68654: LD_VAR 0 3
68658: PPUSH
68659: CALL_OW 289
68663: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68664: LD_ADDR_VAR 0 2
68668: PUSH
68669: LD_VAR 0 2
68673: PPUSH
68674: LD_VAR 0 3
68678: PPUSH
68679: LD_VAR 0 4
68683: PPUSH
68684: CALL_OW 1
68688: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68689: LD_ADDR_VAR 0 2
68693: PUSH
68694: LD_VAR 0 2
68698: PPUSH
68699: LD_INT 4
68701: PPUSH
68702: LD_VAR 0 2
68706: PUSH
68707: LD_INT 4
68709: ARRAY
68710: PUSH
68711: LD_VAR 0 4
68715: PLUS
68716: PPUSH
68717: CALL_OW 1
68721: ST_TO_ADDR
// end ;
68722: GO 68641
68724: POP
68725: POP
// end ;
68726: LD_VAR 0 2
68730: RET
// export function Length ( array ) ; begin
68731: LD_INT 0
68733: PPUSH
// result := array + 0 ;
68734: LD_ADDR_VAR 0 2
68738: PUSH
68739: LD_VAR 0 1
68743: PUSH
68744: LD_INT 0
68746: PLUS
68747: ST_TO_ADDR
// end ;
68748: LD_VAR 0 2
68752: RET
// export function PrepareArray ( array ) ; begin
68753: LD_INT 0
68755: PPUSH
// result := array diff 0 ;
68756: LD_ADDR_VAR 0 2
68760: PUSH
68761: LD_VAR 0 1
68765: PUSH
68766: LD_INT 0
68768: DIFF
68769: ST_TO_ADDR
// if not result [ 1 ] then
68770: LD_VAR 0 2
68774: PUSH
68775: LD_INT 1
68777: ARRAY
68778: NOT
68779: IFFALSE 68799
// result := Delete ( result , 1 ) ;
68781: LD_ADDR_VAR 0 2
68785: PUSH
68786: LD_VAR 0 2
68790: PPUSH
68791: LD_INT 1
68793: PPUSH
68794: CALL_OW 3
68798: ST_TO_ADDR
// end ;
68799: LD_VAR 0 2
68803: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68804: LD_INT 0
68806: PPUSH
68807: PPUSH
68808: PPUSH
68809: PPUSH
// sibRocketRange := 25 ;
68810: LD_ADDR_VAR 0 6
68814: PUSH
68815: LD_INT 25
68817: ST_TO_ADDR
// result := false ;
68818: LD_ADDR_VAR 0 4
68822: PUSH
68823: LD_INT 0
68825: ST_TO_ADDR
// for i := 0 to 5 do
68826: LD_ADDR_VAR 0 5
68830: PUSH
68831: DOUBLE
68832: LD_INT 0
68834: DEC
68835: ST_TO_ADDR
68836: LD_INT 5
68838: PUSH
68839: FOR_TO
68840: IFFALSE 68907
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68842: LD_VAR 0 1
68846: PPUSH
68847: LD_VAR 0 5
68851: PPUSH
68852: LD_VAR 0 6
68856: PPUSH
68857: CALL_OW 272
68861: PPUSH
68862: LD_VAR 0 2
68866: PPUSH
68867: LD_VAR 0 5
68871: PPUSH
68872: LD_VAR 0 6
68876: PPUSH
68877: CALL_OW 273
68881: PPUSH
68882: LD_VAR 0 3
68886: PPUSH
68887: CALL_OW 309
68891: IFFALSE 68905
// begin result := true ;
68893: LD_ADDR_VAR 0 4
68897: PUSH
68898: LD_INT 1
68900: ST_TO_ADDR
// exit ;
68901: POP
68902: POP
68903: GO 68909
// end ;
68905: GO 68839
68907: POP
68908: POP
// end ;
68909: LD_VAR 0 4
68913: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68914: LD_INT 0
68916: PPUSH
68917: PPUSH
68918: PPUSH
// if btype = b_depot then
68919: LD_VAR 0 2
68923: PUSH
68924: LD_INT 0
68926: EQUAL
68927: IFFALSE 68939
// begin result := true ;
68929: LD_ADDR_VAR 0 3
68933: PUSH
68934: LD_INT 1
68936: ST_TO_ADDR
// exit ;
68937: GO 69055
// end ; pom := GetBase ( depot ) ;
68939: LD_ADDR_VAR 0 4
68943: PUSH
68944: LD_VAR 0 1
68948: PPUSH
68949: CALL_OW 274
68953: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68954: LD_ADDR_VAR 0 5
68958: PUSH
68959: LD_VAR 0 2
68963: PPUSH
68964: LD_VAR 0 1
68968: PPUSH
68969: CALL_OW 248
68973: PPUSH
68974: CALL_OW 450
68978: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68979: LD_ADDR_VAR 0 3
68983: PUSH
68984: LD_VAR 0 4
68988: PPUSH
68989: LD_INT 1
68991: PPUSH
68992: CALL_OW 275
68996: PUSH
68997: LD_VAR 0 5
69001: PUSH
69002: LD_INT 1
69004: ARRAY
69005: GREATEREQUAL
69006: PUSH
69007: LD_VAR 0 4
69011: PPUSH
69012: LD_INT 2
69014: PPUSH
69015: CALL_OW 275
69019: PUSH
69020: LD_VAR 0 5
69024: PUSH
69025: LD_INT 2
69027: ARRAY
69028: GREATEREQUAL
69029: AND
69030: PUSH
69031: LD_VAR 0 4
69035: PPUSH
69036: LD_INT 3
69038: PPUSH
69039: CALL_OW 275
69043: PUSH
69044: LD_VAR 0 5
69048: PUSH
69049: LD_INT 3
69051: ARRAY
69052: GREATEREQUAL
69053: AND
69054: ST_TO_ADDR
// end ;
69055: LD_VAR 0 3
69059: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69060: LD_INT 0
69062: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69063: LD_VAR 0 1
69067: PPUSH
69068: LD_VAR 0 2
69072: PPUSH
69073: LD_INT 0
69075: PPUSH
69076: LD_INT 0
69078: PPUSH
69079: LD_INT 1
69081: PPUSH
69082: LD_INT 0
69084: PPUSH
69085: CALL_OW 587
// end ;
69089: LD_VAR 0 3
69093: RET
// export function CenterOnNow ( unit ) ; begin
69094: LD_INT 0
69096: PPUSH
// result := IsInUnit ( unit ) ;
69097: LD_ADDR_VAR 0 2
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: CALL_OW 310
69111: ST_TO_ADDR
// if not result then
69112: LD_VAR 0 2
69116: NOT
69117: IFFALSE 69129
// result := unit ;
69119: LD_ADDR_VAR 0 2
69123: PUSH
69124: LD_VAR 0 1
69128: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69129: LD_VAR 0 1
69133: PPUSH
69134: CALL_OW 87
// end ;
69138: LD_VAR 0 2
69142: RET
// export function ComMoveHex ( unit , hex ) ; begin
69143: LD_INT 0
69145: PPUSH
// if not hex then
69146: LD_VAR 0 2
69150: NOT
69151: IFFALSE 69155
// exit ;
69153: GO 69208
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69155: LD_VAR 0 2
69159: PUSH
69160: LD_INT 1
69162: ARRAY
69163: PPUSH
69164: LD_VAR 0 2
69168: PUSH
69169: LD_INT 2
69171: ARRAY
69172: PPUSH
69173: CALL_OW 428
69177: IFFALSE 69181
// exit ;
69179: GO 69208
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69181: LD_VAR 0 1
69185: PPUSH
69186: LD_VAR 0 2
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: PPUSH
69195: LD_VAR 0 2
69199: PUSH
69200: LD_INT 2
69202: ARRAY
69203: PPUSH
69204: CALL_OW 111
// end ;
69208: LD_VAR 0 3
69212: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69213: LD_INT 0
69215: PPUSH
69216: PPUSH
69217: PPUSH
// if not unit or not enemy then
69218: LD_VAR 0 1
69222: NOT
69223: PUSH
69224: LD_VAR 0 2
69228: NOT
69229: OR
69230: IFFALSE 69234
// exit ;
69232: GO 69358
// x := GetX ( enemy ) ;
69234: LD_ADDR_VAR 0 4
69238: PUSH
69239: LD_VAR 0 2
69243: PPUSH
69244: CALL_OW 250
69248: ST_TO_ADDR
// y := GetY ( enemy ) ;
69249: LD_ADDR_VAR 0 5
69253: PUSH
69254: LD_VAR 0 2
69258: PPUSH
69259: CALL_OW 251
69263: ST_TO_ADDR
// if ValidHex ( x , y ) then
69264: LD_VAR 0 4
69268: PPUSH
69269: LD_VAR 0 5
69273: PPUSH
69274: CALL_OW 488
69278: IFFALSE 69358
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69280: LD_VAR 0 2
69284: PPUSH
69285: CALL_OW 247
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: LD_INT 2
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: IN
69300: PUSH
69301: LD_VAR 0 1
69305: PPUSH
69306: CALL_OW 255
69310: PPUSH
69311: LD_VAR 0 2
69315: PPUSH
69316: CALL_OW 292
69320: OR
69321: IFFALSE 69339
// ComAttackUnit ( unit , enemy ) else
69323: LD_VAR 0 1
69327: PPUSH
69328: LD_VAR 0 2
69332: PPUSH
69333: CALL_OW 115
69337: GO 69358
// ComAgressiveMove ( unit , x , y ) ;
69339: LD_VAR 0 1
69343: PPUSH
69344: LD_VAR 0 4
69348: PPUSH
69349: LD_VAR 0 5
69353: PPUSH
69354: CALL_OW 114
// end ;
69358: LD_VAR 0 3
69362: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69363: LD_INT 0
69365: PPUSH
69366: PPUSH
69367: PPUSH
// list := AreaToList ( area , 0 ) ;
69368: LD_ADDR_VAR 0 5
69372: PUSH
69373: LD_VAR 0 1
69377: PPUSH
69378: LD_INT 0
69380: PPUSH
69381: CALL_OW 517
69385: ST_TO_ADDR
// if not list then
69386: LD_VAR 0 5
69390: NOT
69391: IFFALSE 69395
// exit ;
69393: GO 69525
// if all then
69395: LD_VAR 0 2
69399: IFFALSE 69487
// begin for i := 1 to list [ 1 ] do
69401: LD_ADDR_VAR 0 4
69405: PUSH
69406: DOUBLE
69407: LD_INT 1
69409: DEC
69410: ST_TO_ADDR
69411: LD_VAR 0 5
69415: PUSH
69416: LD_INT 1
69418: ARRAY
69419: PUSH
69420: FOR_TO
69421: IFFALSE 69483
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69423: LD_ADDR_VAR 0 3
69427: PUSH
69428: LD_VAR 0 3
69432: PPUSH
69433: LD_VAR 0 3
69437: PUSH
69438: LD_INT 1
69440: PLUS
69441: PPUSH
69442: LD_VAR 0 5
69446: PUSH
69447: LD_INT 1
69449: ARRAY
69450: PUSH
69451: LD_VAR 0 4
69455: ARRAY
69456: PUSH
69457: LD_VAR 0 5
69461: PUSH
69462: LD_INT 2
69464: ARRAY
69465: PUSH
69466: LD_VAR 0 4
69470: ARRAY
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PPUSH
69476: CALL_OW 1
69480: ST_TO_ADDR
69481: GO 69420
69483: POP
69484: POP
// exit ;
69485: GO 69525
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69487: LD_ADDR_VAR 0 3
69491: PUSH
69492: LD_VAR 0 5
69496: PUSH
69497: LD_INT 1
69499: ARRAY
69500: PUSH
69501: LD_INT 1
69503: ARRAY
69504: PUSH
69505: LD_VAR 0 5
69509: PUSH
69510: LD_INT 2
69512: ARRAY
69513: PUSH
69514: LD_INT 1
69516: ARRAY
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: ST_TO_ADDR
// end ;
69525: LD_VAR 0 3
69529: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69530: LD_INT 0
69532: PPUSH
69533: PPUSH
// list := AreaToList ( area , 0 ) ;
69534: LD_ADDR_VAR 0 4
69538: PUSH
69539: LD_VAR 0 1
69543: PPUSH
69544: LD_INT 0
69546: PPUSH
69547: CALL_OW 517
69551: ST_TO_ADDR
// if not list then
69552: LD_VAR 0 4
69556: NOT
69557: IFFALSE 69561
// exit ;
69559: GO 69602
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69561: LD_ADDR_VAR 0 3
69565: PUSH
69566: LD_VAR 0 4
69570: PUSH
69571: LD_INT 1
69573: ARRAY
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: PUSH
69579: LD_VAR 0 4
69583: PUSH
69584: LD_INT 2
69586: ARRAY
69587: PUSH
69588: LD_INT 1
69590: ARRAY
69591: PUSH
69592: LD_VAR 0 2
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// end ;
69602: LD_VAR 0 3
69606: RET
// export function First ( array ) ; begin
69607: LD_INT 0
69609: PPUSH
// if not array then
69610: LD_VAR 0 1
69614: NOT
69615: IFFALSE 69619
// exit ;
69617: GO 69633
// result := array [ 1 ] ;
69619: LD_ADDR_VAR 0 2
69623: PUSH
69624: LD_VAR 0 1
69628: PUSH
69629: LD_INT 1
69631: ARRAY
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 2
69637: RET
// export function Last ( array ) ; begin
69638: LD_INT 0
69640: PPUSH
// if not array then
69641: LD_VAR 0 1
69645: NOT
69646: IFFALSE 69650
// exit ;
69648: GO 69666
// result := array [ array ] ;
69650: LD_ADDR_VAR 0 2
69654: PUSH
69655: LD_VAR 0 1
69659: PUSH
69660: LD_VAR 0 1
69664: ARRAY
69665: ST_TO_ADDR
// end ;
69666: LD_VAR 0 2
69670: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69671: LD_INT 0
69673: PPUSH
69674: PPUSH
// result := [ ] ;
69675: LD_ADDR_VAR 0 5
69679: PUSH
69680: EMPTY
69681: ST_TO_ADDR
// if not array then
69682: LD_VAR 0 1
69686: NOT
69687: IFFALSE 69691
// exit ;
69689: GO 69803
// for i := 1 to array do
69691: LD_ADDR_VAR 0 6
69695: PUSH
69696: DOUBLE
69697: LD_INT 1
69699: DEC
69700: ST_TO_ADDR
69701: LD_VAR 0 1
69705: PUSH
69706: FOR_TO
69707: IFFALSE 69801
// if array [ i ] [ index ] = value then
69709: LD_VAR 0 1
69713: PUSH
69714: LD_VAR 0 6
69718: ARRAY
69719: PUSH
69720: LD_VAR 0 2
69724: ARRAY
69725: PUSH
69726: LD_VAR 0 3
69730: EQUAL
69731: IFFALSE 69799
// begin if indexColumn then
69733: LD_VAR 0 4
69737: IFFALSE 69773
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69739: LD_ADDR_VAR 0 5
69743: PUSH
69744: LD_VAR 0 5
69748: PPUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_VAR 0 6
69758: ARRAY
69759: PUSH
69760: LD_VAR 0 4
69764: ARRAY
69765: PPUSH
69766: CALL 64985 0 2
69770: ST_TO_ADDR
69771: GO 69799
// result := Join ( result , array [ i ] ) ;
69773: LD_ADDR_VAR 0 5
69777: PUSH
69778: LD_VAR 0 5
69782: PPUSH
69783: LD_VAR 0 1
69787: PUSH
69788: LD_VAR 0 6
69792: ARRAY
69793: PPUSH
69794: CALL 64985 0 2
69798: ST_TO_ADDR
// end ;
69799: GO 69706
69801: POP
69802: POP
// end ;
69803: LD_VAR 0 5
69807: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69808: LD_INT 0
69810: PPUSH
// if not vehicles or not parkingPoint then
69811: LD_VAR 0 1
69815: NOT
69816: PUSH
69817: LD_VAR 0 2
69821: NOT
69822: OR
69823: IFFALSE 69827
// exit ;
69825: GO 69925
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69827: LD_ADDR_VAR 0 1
69831: PUSH
69832: LD_VAR 0 1
69836: PPUSH
69837: LD_INT 50
69839: PUSH
69840: EMPTY
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: PUSH
69846: LD_INT 92
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: PUSH
69858: LD_VAR 0 2
69862: PUSH
69863: LD_INT 2
69865: ARRAY
69866: PUSH
69867: LD_INT 8
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PPUSH
69884: CALL_OW 72
69888: ST_TO_ADDR
// if not vehicles then
69889: LD_VAR 0 1
69893: NOT
69894: IFFALSE 69898
// exit ;
69896: GO 69925
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69898: LD_VAR 0 1
69902: PPUSH
69903: LD_VAR 0 2
69907: PUSH
69908: LD_INT 1
69910: ARRAY
69911: PPUSH
69912: LD_VAR 0 2
69916: PUSH
69917: LD_INT 2
69919: ARRAY
69920: PPUSH
69921: CALL_OW 111
// end ;
69925: LD_VAR 0 3
69929: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69930: LD_INT 0
69932: PPUSH
69933: PPUSH
69934: PPUSH
// if not side or not area then
69935: LD_VAR 0 1
69939: NOT
69940: PUSH
69941: LD_VAR 0 2
69945: NOT
69946: OR
69947: IFFALSE 69951
// exit ;
69949: GO 70070
// tmp := AreaToList ( area , 0 ) ;
69951: LD_ADDR_VAR 0 5
69955: PUSH
69956: LD_VAR 0 2
69960: PPUSH
69961: LD_INT 0
69963: PPUSH
69964: CALL_OW 517
69968: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69969: LD_ADDR_VAR 0 4
69973: PUSH
69974: DOUBLE
69975: LD_INT 1
69977: DEC
69978: ST_TO_ADDR
69979: LD_VAR 0 5
69983: PUSH
69984: LD_INT 1
69986: ARRAY
69987: PUSH
69988: FOR_TO
69989: IFFALSE 70068
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69991: LD_VAR 0 5
69995: PUSH
69996: LD_INT 1
69998: ARRAY
69999: PUSH
70000: LD_VAR 0 4
70004: ARRAY
70005: PPUSH
70006: LD_VAR 0 5
70010: PUSH
70011: LD_INT 2
70013: ARRAY
70014: PUSH
70015: LD_VAR 0 4
70019: ARRAY
70020: PPUSH
70021: CALL_OW 351
70025: IFFALSE 70066
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70027: LD_VAR 0 5
70031: PUSH
70032: LD_INT 1
70034: ARRAY
70035: PUSH
70036: LD_VAR 0 4
70040: ARRAY
70041: PPUSH
70042: LD_VAR 0 5
70046: PUSH
70047: LD_INT 2
70049: ARRAY
70050: PUSH
70051: LD_VAR 0 4
70055: ARRAY
70056: PPUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: CALL_OW 244
// end ;
70066: GO 69988
70068: POP
70069: POP
// end ; end_of_file
70070: LD_VAR 0 3
70074: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
70075: PPOPN 6
70077: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
70078: LD_EXP 30
70082: PUSH
70083: LD_INT 4
70085: EQUAL
70086: IFFALSE 70122
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70088: LD_STRING setGameDifficulty(
70090: PUSH
70091: LD_OWVAR 67
70095: STR
70096: PUSH
70097: LD_STRING )
70099: STR
70100: PPUSH
70101: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
70105: LD_STRING displayDifficulty(
70107: PUSH
70108: LD_OWVAR 67
70112: STR
70113: PUSH
70114: LD_STRING )
70116: STR
70117: PPUSH
70118: CALL_OW 559
// end ; SOS_MapStart ( ) ;
70122: CALL 70151 0 0
// end ; end_of_file
70126: PPOPN 1
70128: END
// every 0 0$1 do
70129: GO 70131
70131: DISABLE
// begin enable ;
70132: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70133: LD_STRING updateTimer(
70135: PUSH
70136: LD_OWVAR 1
70140: STR
70141: PUSH
70142: LD_STRING );
70144: STR
70145: PPUSH
70146: CALL_OW 559
// end ;
70150: END
// export function SOS_MapStart ( ) ; begin
70151: LD_INT 0
70153: PPUSH
// UpdateFactoryWaypoints ( ) ;
70154: CALL 71079 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70158: CALL 71331 0 0
// ParseMultiDataToLua ( ) ;
70162: CALL 71478 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
70166: LD_STRING setSpecLogoNumber(
70168: PUSH
70169: LD_INT 2
70171: STR
70172: PUSH
70173: LD_STRING ,
70175: STR
70176: PUSH
70177: LD_INT 1
70179: STR
70180: PUSH
70181: LD_STRING )
70183: STR
70184: PPUSH
70185: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
70189: LD_STRING setSpecLogoNumber(
70191: PUSH
70192: LD_INT 3
70194: STR
70195: PUSH
70196: LD_STRING ,
70198: STR
70199: PUSH
70200: LD_INT 2
70202: STR
70203: PUSH
70204: LD_STRING )
70206: STR
70207: PPUSH
70208: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
70212: LD_STRING setSpecLogoNumber(
70214: PUSH
70215: LD_INT 4
70217: STR
70218: PUSH
70219: LD_STRING ,
70221: STR
70222: PUSH
70223: LD_INT 3
70225: STR
70226: PUSH
70227: LD_STRING )
70229: STR
70230: PPUSH
70231: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
70235: LD_STRING setSpecLogoNumber(
70237: PUSH
70238: LD_INT 5
70240: STR
70241: PUSH
70242: LD_STRING ,
70244: STR
70245: PUSH
70246: LD_INT 4
70248: STR
70249: PUSH
70250: LD_STRING )
70252: STR
70253: PPUSH
70254: CALL_OW 559
// end ;
70258: LD_VAR 0 1
70262: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
70263: LD_INT 0
70265: PPUSH
70266: PPUSH
70267: PPUSH
70268: PPUSH
70269: PPUSH
70270: PPUSH
70271: PPUSH
70272: PPUSH
70273: PPUSH
// for i := 1 to 8 do
70274: LD_ADDR_VAR 0 2
70278: PUSH
70279: DOUBLE
70280: LD_INT 1
70282: DEC
70283: ST_TO_ADDR
70284: LD_INT 8
70286: PUSH
70287: FOR_TO
70288: IFFALSE 70673
// begin if mpSidePositions [ i ] then
70290: LD_EXP 31
70294: PUSH
70295: LD_VAR 0 2
70299: ARRAY
70300: IFFALSE 70671
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
70302: LD_ADDR_VAR 0 7
70306: PUSH
70307: LD_INT 22
70309: PUSH
70310: LD_VAR 0 2
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 21
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PPUSH
70333: CALL_OW 69
70337: PPUSH
70338: CALL 29376 0 1
70342: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70343: LD_ADDR_VAR 0 9
70347: PUSH
70348: LD_INT 22
70350: PUSH
70351: LD_VAR 0 2
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 30
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 30
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: LIST
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PPUSH
70392: CALL_OW 69
70396: ST_TO_ADDR
// crates := 0 ;
70397: LD_ADDR_VAR 0 4
70401: PUSH
70402: LD_INT 0
70404: ST_TO_ADDR
// oil := 0 ;
70405: LD_ADDR_VAR 0 5
70409: PUSH
70410: LD_INT 0
70412: ST_TO_ADDR
// sib := 0 ;
70413: LD_ADDR_VAR 0 6
70417: PUSH
70418: LD_INT 0
70420: ST_TO_ADDR
// if bases then
70421: LD_VAR 0 9
70425: IFFALSE 70531
// begin for j in bases do
70427: LD_ADDR_VAR 0 3
70431: PUSH
70432: LD_VAR 0 9
70436: PUSH
70437: FOR_IN
70438: IFFALSE 70529
// begin base := GetBase ( j ) ;
70440: LD_ADDR_VAR 0 8
70444: PUSH
70445: LD_VAR 0 3
70449: PPUSH
70450: CALL_OW 274
70454: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
70455: LD_ADDR_VAR 0 4
70459: PUSH
70460: LD_VAR 0 4
70464: PUSH
70465: LD_VAR 0 8
70469: PPUSH
70470: LD_INT 1
70472: PPUSH
70473: CALL_OW 275
70477: PLUS
70478: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
70479: LD_ADDR_VAR 0 5
70483: PUSH
70484: LD_VAR 0 5
70488: PUSH
70489: LD_VAR 0 8
70493: PPUSH
70494: LD_INT 2
70496: PPUSH
70497: CALL_OW 275
70501: PLUS
70502: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
70503: LD_ADDR_VAR 0 6
70507: PUSH
70508: LD_VAR 0 6
70512: PUSH
70513: LD_VAR 0 8
70517: PPUSH
70518: LD_INT 3
70520: PPUSH
70521: CALL_OW 275
70525: PLUS
70526: ST_TO_ADDR
// end ;
70527: GO 70437
70529: POP
70530: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
70531: LD_STRING setSpecText(
70533: PUSH
70534: LD_VAR 0 2
70538: STR
70539: PUSH
70540: LD_STRING ,
70542: STR
70543: PUSH
70544: LD_INT 2
70546: STR
70547: PUSH
70548: LD_STRING ,
70550: STR
70551: PUSH
70552: LD_VAR 0 4
70556: STR
70557: PUSH
70558: LD_STRING )
70560: STR
70561: PPUSH
70562: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
70566: LD_STRING setSpecText(
70568: PUSH
70569: LD_VAR 0 2
70573: STR
70574: PUSH
70575: LD_STRING ,
70577: STR
70578: PUSH
70579: LD_INT 3
70581: STR
70582: PUSH
70583: LD_STRING ,
70585: STR
70586: PUSH
70587: LD_VAR 0 5
70591: STR
70592: PUSH
70593: LD_STRING )
70595: STR
70596: PPUSH
70597: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
70601: LD_STRING setSpecText(
70603: PUSH
70604: LD_VAR 0 2
70608: STR
70609: PUSH
70610: LD_STRING ,
70612: STR
70613: PUSH
70614: LD_INT 4
70616: STR
70617: PUSH
70618: LD_STRING ,
70620: STR
70621: PUSH
70622: LD_VAR 0 6
70626: STR
70627: PUSH
70628: LD_STRING )
70630: STR
70631: PPUSH
70632: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
70636: LD_STRING setSpecText(
70638: PUSH
70639: LD_VAR 0 2
70643: STR
70644: PUSH
70645: LD_STRING ,
70647: STR
70648: PUSH
70649: LD_INT 5
70651: STR
70652: PUSH
70653: LD_STRING ,
70655: STR
70656: PUSH
70657: LD_VAR 0 7
70661: STR
70662: PUSH
70663: LD_STRING )
70665: STR
70666: PPUSH
70667: CALL_OW 559
// end ; end ;
70671: GO 70287
70673: POP
70674: POP
// end ;
70675: LD_VAR 0 1
70679: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
70680: LD_INT 2
70682: PUSH
70683: LD_INT 30
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 30
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: LIST
70707: PPUSH
70708: CALL_OW 69
70712: IFFALSE 70722
70714: GO 70716
70716: DISABLE
// begin enable ;
70717: ENABLE
// UpdateSpectatorBar ;
70718: CALL 70263 0 0
// end ;
70722: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70723: LD_INT 0
70725: PPUSH
// end ;
70726: LD_VAR 0 12
70730: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
70731: LD_INT 0
70733: PPUSH
70734: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
70735: LD_VAR 0 1
70739: NOT
70740: PUSH
70741: LD_VAR 0 2
70745: PPUSH
70746: LD_VAR 0 3
70750: PPUSH
70751: CALL_OW 488
70755: NOT
70756: OR
70757: PUSH
70758: LD_VAR 0 1
70762: PPUSH
70763: CALL_OW 266
70767: PUSH
70768: LD_INT 3
70770: NONEQUAL
70771: PUSH
70772: LD_VAR 0 1
70776: PPUSH
70777: CALL_OW 247
70781: PUSH
70782: LD_INT 1
70784: EQUAL
70785: NOT
70786: AND
70787: OR
70788: IFFALSE 70792
// exit ;
70790: GO 71074
// if GetType ( factory ) = unit_human then
70792: LD_VAR 0 1
70796: PPUSH
70797: CALL_OW 247
70801: PUSH
70802: LD_INT 1
70804: EQUAL
70805: IFFALSE 70822
// factory := IsInUnit ( factory ) ;
70807: LD_ADDR_VAR 0 1
70811: PUSH
70812: LD_VAR 0 1
70816: PPUSH
70817: CALL_OW 310
70821: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
70822: LD_VAR 0 1
70826: PPUSH
70827: CALL_OW 266
70831: PUSH
70832: LD_INT 3
70834: NONEQUAL
70835: IFFALSE 70839
// exit ;
70837: GO 71074
// for i := 1 to Count ( factoryWaypoints ) do
70839: LD_ADDR_VAR 0 5
70843: PUSH
70844: DOUBLE
70845: LD_INT 1
70847: DEC
70848: ST_TO_ADDR
70849: LD_EXP 70
70853: PPUSH
70854: CALL 29376 0 1
70858: PUSH
70859: FOR_TO
70860: IFFALSE 71022
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
70862: LD_VAR 0 2
70866: PPUSH
70867: LD_VAR 0 3
70871: PPUSH
70872: CALL_OW 428
70876: PUSH
70877: LD_EXP 70
70881: PUSH
70882: LD_VAR 0 5
70886: ARRAY
70887: PUSH
70888: LD_INT 2
70890: ARRAY
70891: EQUAL
70892: IFFALSE 70924
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70894: LD_ADDR_EXP 70
70898: PUSH
70899: LD_EXP 70
70903: PPUSH
70904: LD_VAR 0 5
70908: PPUSH
70909: CALL_OW 3
70913: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70914: CALL 71079 0 0
// exit ;
70918: POP
70919: POP
70920: GO 71074
// end else
70922: GO 71020
// if factory = factoryWaypoints [ i ] [ 2 ] then
70924: LD_VAR 0 1
70928: PUSH
70929: LD_EXP 70
70933: PUSH
70934: LD_VAR 0 5
70938: ARRAY
70939: PUSH
70940: LD_INT 2
70942: ARRAY
70943: EQUAL
70944: IFFALSE 71020
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70946: LD_ADDR_EXP 70
70950: PUSH
70951: LD_EXP 70
70955: PPUSH
70956: LD_VAR 0 5
70960: PPUSH
70961: CALL_OW 3
70965: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70966: LD_ADDR_EXP 70
70970: PUSH
70971: LD_EXP 70
70975: PPUSH
70976: LD_VAR 0 1
70980: PPUSH
70981: CALL_OW 255
70985: PUSH
70986: LD_VAR 0 1
70990: PUSH
70991: LD_VAR 0 2
70995: PUSH
70996: LD_VAR 0 3
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: PPUSH
71007: CALL 64985 0 2
71011: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71012: CALL 71079 0 0
// exit ;
71016: POP
71017: POP
71018: GO 71074
// end ; end ;
71020: GO 70859
71022: POP
71023: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
71024: LD_ADDR_EXP 70
71028: PUSH
71029: LD_EXP 70
71033: PPUSH
71034: LD_VAR 0 1
71038: PPUSH
71039: CALL_OW 255
71043: PUSH
71044: LD_VAR 0 1
71048: PUSH
71049: LD_VAR 0 2
71053: PUSH
71054: LD_VAR 0 3
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: PPUSH
71065: CALL 64985 0 2
71069: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71070: CALL 71079 0 0
// end ;
71074: LD_VAR 0 4
71078: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
71079: LD_INT 0
71081: PPUSH
71082: PPUSH
71083: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
71084: LD_STRING resetFactoryWaypoint();
71086: PPUSH
71087: CALL_OW 559
// if factoryWaypoints then
71091: LD_EXP 70
71095: IFFALSE 71216
// begin list := factoryWaypoints ;
71097: LD_ADDR_VAR 0 3
71101: PUSH
71102: LD_EXP 70
71106: ST_TO_ADDR
// for i := 1 to list do
71107: LD_ADDR_VAR 0 2
71111: PUSH
71112: DOUBLE
71113: LD_INT 1
71115: DEC
71116: ST_TO_ADDR
71117: LD_VAR 0 3
71121: PUSH
71122: FOR_TO
71123: IFFALSE 71214
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71125: LD_STRING setFactoryWaypointXY(
71127: PUSH
71128: LD_VAR 0 3
71132: PUSH
71133: LD_VAR 0 2
71137: ARRAY
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: STR
71143: PUSH
71144: LD_STRING ,
71146: STR
71147: PUSH
71148: LD_VAR 0 3
71152: PUSH
71153: LD_VAR 0 2
71157: ARRAY
71158: PUSH
71159: LD_INT 2
71161: ARRAY
71162: STR
71163: PUSH
71164: LD_STRING ,
71166: STR
71167: PUSH
71168: LD_VAR 0 3
71172: PUSH
71173: LD_VAR 0 2
71177: ARRAY
71178: PUSH
71179: LD_INT 3
71181: ARRAY
71182: STR
71183: PUSH
71184: LD_STRING ,
71186: STR
71187: PUSH
71188: LD_VAR 0 3
71192: PUSH
71193: LD_VAR 0 2
71197: ARRAY
71198: PUSH
71199: LD_INT 4
71201: ARRAY
71202: STR
71203: PUSH
71204: LD_STRING )
71206: STR
71207: PPUSH
71208: CALL_OW 559
71212: GO 71122
71214: POP
71215: POP
// end ; end ;
71216: LD_VAR 0 1
71220: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
71221: LD_INT 0
71223: PPUSH
// if HexInfo ( x , y ) = warehouse then
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_VAR 0 3
71233: PPUSH
71234: CALL_OW 428
71238: PUSH
71239: LD_VAR 0 1
71243: EQUAL
71244: IFFALSE 71271
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
71246: LD_ADDR_EXP 72
71250: PUSH
71251: LD_EXP 72
71255: PPUSH
71256: LD_VAR 0 1
71260: PPUSH
71261: LD_INT 0
71263: PPUSH
71264: CALL_OW 1
71268: ST_TO_ADDR
71269: GO 71322
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
71271: LD_ADDR_EXP 72
71275: PUSH
71276: LD_EXP 72
71280: PPUSH
71281: LD_VAR 0 1
71285: PPUSH
71286: LD_VAR 0 1
71290: PPUSH
71291: CALL_OW 255
71295: PUSH
71296: LD_VAR 0 1
71300: PUSH
71301: LD_VAR 0 2
71305: PUSH
71306: LD_VAR 0 3
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: PPUSH
71317: CALL_OW 1
71321: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
71322: CALL 71331 0 0
// end ;
71326: LD_VAR 0 4
71330: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
71331: LD_INT 0
71333: PPUSH
71334: PPUSH
71335: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
71336: LD_STRING resetWarehouseGatheringPoints();
71338: PPUSH
71339: CALL_OW 559
// if warehouseGatheringPoints then
71343: LD_EXP 72
71347: IFFALSE 71473
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
71349: LD_ADDR_VAR 0 3
71353: PUSH
71354: LD_EXP 72
71358: PPUSH
71359: CALL 68753 0 1
71363: ST_TO_ADDR
// for i := 1 to list do
71364: LD_ADDR_VAR 0 2
71368: PUSH
71369: DOUBLE
71370: LD_INT 1
71372: DEC
71373: ST_TO_ADDR
71374: LD_VAR 0 3
71378: PUSH
71379: FOR_TO
71380: IFFALSE 71471
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71382: LD_STRING setWarehouseGatheringPointXY(
71384: PUSH
71385: LD_VAR 0 3
71389: PUSH
71390: LD_VAR 0 2
71394: ARRAY
71395: PUSH
71396: LD_INT 1
71398: ARRAY
71399: STR
71400: PUSH
71401: LD_STRING ,
71403: STR
71404: PUSH
71405: LD_VAR 0 3
71409: PUSH
71410: LD_VAR 0 2
71414: ARRAY
71415: PUSH
71416: LD_INT 2
71418: ARRAY
71419: STR
71420: PUSH
71421: LD_STRING ,
71423: STR
71424: PUSH
71425: LD_VAR 0 3
71429: PUSH
71430: LD_VAR 0 2
71434: ARRAY
71435: PUSH
71436: LD_INT 3
71438: ARRAY
71439: STR
71440: PUSH
71441: LD_STRING ,
71443: STR
71444: PUSH
71445: LD_VAR 0 3
71449: PUSH
71450: LD_VAR 0 2
71454: ARRAY
71455: PUSH
71456: LD_INT 4
71458: ARRAY
71459: STR
71460: PUSH
71461: LD_STRING )
71463: STR
71464: PPUSH
71465: CALL_OW 559
71469: GO 71379
71471: POP
71472: POP
// end ; end ;
71473: LD_VAR 0 1
71477: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
71478: LD_INT 0
71480: PPUSH
71481: PPUSH
// if not mpSidePositions then
71482: LD_EXP 31
71486: NOT
71487: IFFALSE 71491
// exit ;
71489: GO 71562
// result :=  ;
71491: LD_ADDR_VAR 0 1
71495: PUSH
71496: LD_STRING 
71498: ST_TO_ADDR
// for i := 1 to 8 do
71499: LD_ADDR_VAR 0 2
71503: PUSH
71504: DOUBLE
71505: LD_INT 1
71507: DEC
71508: ST_TO_ADDR
71509: LD_INT 8
71511: PUSH
71512: FOR_TO
71513: IFFALSE 71543
// begin result := result & mpSidePositions [ i ] & ; ;
71515: LD_ADDR_VAR 0 1
71519: PUSH
71520: LD_VAR 0 1
71524: PUSH
71525: LD_EXP 31
71529: PUSH
71530: LD_VAR 0 2
71534: ARRAY
71535: STR
71536: PUSH
71537: LD_STRING ;
71539: STR
71540: ST_TO_ADDR
// end ;
71541: GO 71512
71543: POP
71544: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
71545: LD_STRING setMultiplayerRealPosition("
71547: PUSH
71548: LD_VAR 0 1
71552: STR
71553: PUSH
71554: LD_STRING ");
71556: STR
71557: PPUSH
71558: CALL_OW 559
// end ;
71562: LD_VAR 0 1
71566: RET
