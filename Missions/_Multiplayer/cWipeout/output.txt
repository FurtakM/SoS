// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 157 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1898 0 1
  44: PPUSH
  45: CALL 5905 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1898 0 1
  56: PPUSH
  57: CALL 10483 0 1
// Multiplayer_Start ;
  61: CALL 3928 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4040 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: PUSH
 134: LD_OWVAR 48
 138: NOT
 139: AND
 140: IFFALSE 156
 142: GO 144
 144: DISABLE
// begin enable ;
 145: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 146: LD_ADDR_OWVAR 47
 150: PUSH
 151: CALL 4841 0 0
 155: ST_TO_ADDR
// end ; end_of_file
 156: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 157: LD_INT 0
 159: PPUSH
 160: PPUSH
 161: PPUSH
 162: PPUSH
 163: PPUSH
// mpGameType := GameTypeCoop ;
 164: LD_ADDR_EXP 30
 168: PUSH
 169: LD_INT 4
 171: ST_TO_ADDR
// multi_settings_counter := 6 ;
 172: LD_ADDR_EXP 18
 176: PUSH
 177: LD_INT 6
 179: ST_TO_ADDR
// multi_settings := [ ] ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: EMPTY
 186: ST_TO_ADDR
// if Multiplayer then
 187: LD_OWVAR 4
 191: IFFALSE 371
// begin your_side := mp_player_side ;
 193: LD_ADDR_OWVAR 2
 197: PUSH
 198: LD_OWVAR 7
 202: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 203: LD_ADDR_EXP 6
 207: PUSH
 208: LD_OWVAR 6
 212: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 213: LD_ADDR_EXP 7
 217: PUSH
 218: LD_OWVAR 17
 222: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 223: LD_ADDR_EXP 8
 227: PUSH
 228: LD_OWVAR 15
 232: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 233: LD_ADDR_EXP 9
 237: PUSH
 238: LD_OWVAR 16
 242: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 243: LD_ADDR_EXP 10
 247: PUSH
 248: EMPTY
 249: PUSH
 250: EMPTY
 251: LIST
 252: ST_TO_ADDR
// for i in mp_teams do
 253: LD_ADDR_VAR 0 2
 257: PUSH
 258: LD_OWVAR 12
 262: PUSH
 263: FOR_IN
 264: IFFALSE 307
// if i then
 266: LD_VAR 0 2
 270: IFFALSE 305
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_EXP 10
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: LD_EXP 10
 289: PUSH
 290: LD_INT 1
 292: ARRAY
 293: PUSH
 294: LD_VAR 0 2
 298: UNION
 299: PPUSH
 300: CALL_OW 1
 304: ST_TO_ADDR
 305: GO 263
 307: POP
 308: POP
// for i := 1 to multi_settings_counter do
 309: LD_ADDR_VAR 0 2
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_EXP 18
 323: PUSH
 324: FOR_TO
 325: IFFALSE 367
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_EXP 17
 336: PPUSH
 337: LD_EXP 17
 341: PUSH
 342: LD_INT 1
 344: PLUS
 345: PPUSH
 346: LD_VAR 0 2
 350: PPUSH
 351: CALL_OW 426
 355: PUSH
 356: LD_INT 1
 358: PLUS
 359: PPUSH
 360: CALL_OW 1
 364: ST_TO_ADDR
 365: GO 324
 367: POP
 368: POP
// end else
 369: GO 557
// begin your_side := 3 ;
 371: LD_ADDR_OWVAR 2
 375: PUSH
 376: LD_INT 3
 378: ST_TO_ADDR
// multi_gametype := 1 ;
 379: LD_ADDR_EXP 6
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 387: LD_ADDR_EXP 7
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: LD_INT 0
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: LD_INT 2
 403: PUSH
 404: LD_INT 3
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 0
 412: PUSH
 413: LD_INT 0
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 426: LD_ADDR_EXP 8
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: LD_INT 0
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 465: LD_ADDR_EXP 9
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 3
 481: PUSH
 482: LD_INT 3
 484: PUSH
 485: LD_INT 0
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 0
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: LD_INT 4
 514: PUSH
 515: LD_INT 5
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 526: LD_ADDR_EXP 17
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 4
 536: PUSH
 537: LD_INT 4
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 3
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 557: LD_ADDR_EXP 31
 561: PUSH
 562: LD_EXP 7
 566: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 567: LD_ADDR_EXP 11
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: LD_INT 0
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 0
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 606: LD_ADDR_EXP 14
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: LD_INT 0
 622: PUSH
 623: LD_INT 0
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: LD_INT 0
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 645: LD_ADDR_EXP 25
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: LD_INT 0
 655: PUSH
 656: LD_INT 0
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: LD_INT 0
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: LD_INT 0
 670: PUSH
 671: LD_INT 0
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// multi_teamgame := true ;
 684: LD_ADDR_EXP 15
 688: PUSH
 689: LD_INT 1
 691: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: EMPTY
 701: LIST
 702: ST_TO_ADDR
// multi_custom_commanders := true ;
 703: LD_ADDR_EXP 16
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// multi_commanders := [ ] ;
 711: LD_ADDR_EXP 24
 715: PUSH
 716: EMPTY
 717: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 718: LD_ADDR_EXP 27
 722: PUSH
 723: EMPTY
 724: ST_TO_ADDR
// multi_players_amount := 0 ;
 725: LD_ADDR_EXP 26
 729: PUSH
 730: LD_INT 0
 732: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 733: LD_ADDR_EXP 12
 737: PUSH
 738: LD_INT 8
 740: PUSH
 741: LD_INT 9
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 10
 750: PUSH
 751: LD_INT 11
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: PUSH
 758: LD_INT 12
 760: PUSH
 761: LD_INT 13
 763: PUSH
 764: EMPTY
 765: LIST
 766: LIST
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 773: LD_ADDR_EXP 29
 777: PUSH
 778: LD_INT 0
 780: PUSH
 781: LD_INT 14
 783: PPUSH
 784: LD_INT 0
 786: PPUSH
 787: CALL 69500 0 2
 791: PUSH
 792: LD_STRING kagan
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 31
 802: PUSH
 803: LD_INT 67
 805: PUSH
 806: LD_INT 102
 808: PUSH
 809: LD_INT 3
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 31
 823: PUSH
 824: LD_INT 73
 826: PUSH
 827: LD_INT 103
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 29
 844: PUSH
 845: LD_INT 78
 847: PUSH
 848: LD_INT 112
 850: PUSH
 851: LD_INT 3
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 15
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL 69500 0 2
 882: PUSH
 883: LD_STRING beria
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 31
 893: PUSH
 894: LD_INT 102
 896: PUSH
 897: LD_INT 86
 899: PUSH
 900: LD_INT 2
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 31
 914: PUSH
 915: LD_INT 98
 917: PUSH
 918: LD_INT 96
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 2
 935: PUSH
 936: LD_INT 115
 938: PUSH
 939: LD_INT 104
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 0
 962: PUSH
 963: LD_INT 16
 965: PPUSH
 966: LD_INT 3
 968: PPUSH
 969: CALL 69500 0 2
 973: PUSH
 974: LD_STRING kirov
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 31
 984: PUSH
 985: LD_INT 169
 987: PUSH
 988: LD_INT 101
 990: PUSH
 991: LD_INT 4
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_INT 31
1005: PUSH
1006: LD_INT 175
1008: PUSH
1009: LD_INT 123
1011: PUSH
1012: LD_INT 5
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 4
1026: PUSH
1027: LD_INT 166
1029: PUSH
1030: LD_INT 115
1032: PUSH
1033: LD_INT 5
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: LD_INT 152
1050: PUSH
1051: LD_INT 98
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: ST_TO_ADDR
// for i := 1 to 8 do
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: DOUBLE
1084: LD_INT 1
1086: DEC
1087: ST_TO_ADDR
1088: LD_INT 8
1090: PUSH
1091: FOR_TO
1092: IFFALSE 1421
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1094: LD_VAR 0 2
1098: PPUSH
1099: CALL_OW 530
1103: IFFALSE 1261
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1105: LD_ADDR_EXP 11
1109: PUSH
1110: LD_EXP 11
1114: PPUSH
1115: LD_VAR 0 2
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: CALL_OW 1
1127: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1128: LD_ADDR_EXP 9
1132: PUSH
1133: LD_EXP 9
1137: PPUSH
1138: LD_VAR 0 2
1142: PPUSH
1143: LD_INT 0
1145: PPUSH
1146: CALL_OW 1
1150: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1151: LD_ADDR_EXP 7
1155: PUSH
1156: LD_EXP 7
1160: PPUSH
1161: LD_VAR 0 2
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: CALL_OW 1
1173: ST_TO_ADDR
// for j = 1 to multi_teams do
1174: LD_ADDR_VAR 0 3
1178: PUSH
1179: DOUBLE
1180: LD_INT 1
1182: DEC
1183: ST_TO_ADDR
1184: LD_EXP 10
1188: PUSH
1189: FOR_TO
1190: IFFALSE 1259
// begin if i in multi_teams [ j ] then
1192: LD_VAR 0 2
1196: PUSH
1197: LD_EXP 10
1201: PUSH
1202: LD_VAR 0 3
1206: ARRAY
1207: IN
1208: IFFALSE 1257
// begin tmp := multi_teams [ j ] diff i ;
1210: LD_ADDR_VAR 0 5
1214: PUSH
1215: LD_EXP 10
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PUSH
1226: LD_VAR 0 2
1230: DIFF
1231: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1232: LD_ADDR_EXP 10
1236: PUSH
1237: LD_EXP 10
1241: PPUSH
1242: LD_VAR 0 3
1246: PPUSH
1247: LD_VAR 0 5
1251: PPUSH
1252: CALL_OW 1
1256: ST_TO_ADDR
// end ; end ;
1257: GO 1189
1259: POP
1260: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1261: LD_EXP 9
1265: PUSH
1266: LD_VAR 0 2
1270: ARRAY
1271: PUSH
1272: LD_EXP 9
1276: PUSH
1277: LD_VAR 0 2
1281: ARRAY
1282: PUSH
1283: LD_EXP 13
1287: IN
1288: NOT
1289: AND
1290: IFFALSE 1331
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1292: LD_ADDR_EXP 9
1296: PUSH
1297: LD_EXP 9
1301: PPUSH
1302: LD_VAR 0 2
1306: PPUSH
1307: LD_EXP 13
1311: PUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_EXP 13
1319: PPUSH
1320: CALL_OW 12
1324: ARRAY
1325: PPUSH
1326: CALL_OW 1
1330: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1331: LD_EXP 9
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: NOT
1342: PUSH
1343: LD_EXP 7
1347: PUSH
1348: LD_VAR 0 2
1352: ARRAY
1353: NOT
1354: AND
1355: PUSH
1356: LD_EXP 11
1360: PUSH
1361: LD_VAR 0 2
1365: ARRAY
1366: NOT
1367: AND
1368: IFFALSE 1393
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1370: LD_ADDR_EXP 14
1374: PUSH
1375: LD_EXP 14
1379: PPUSH
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 1
1387: PPUSH
1388: CALL_OW 1
1392: ST_TO_ADDR
// if multi_sides [ i ] then
1393: LD_EXP 7
1397: PUSH
1398: LD_VAR 0 2
1402: ARRAY
1403: IFFALSE 1419
// multi_players_amount := multi_players_amount + 1 ;
1405: LD_ADDR_EXP 26
1409: PUSH
1410: LD_EXP 26
1414: PUSH
1415: LD_INT 1
1417: PLUS
1418: ST_TO_ADDR
// end ;
1419: GO 1091
1421: POP
1422: POP
// for i in multi_teams do
1423: LD_ADDR_VAR 0 2
1427: PUSH
1428: LD_EXP 10
1432: PUSH
1433: FOR_IN
1434: IFFALSE 1542
// begin for j = 2 to i do
1436: LD_ADDR_VAR 0 3
1440: PUSH
1441: DOUBLE
1442: LD_INT 2
1444: DEC
1445: ST_TO_ADDR
1446: LD_VAR 0 2
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1538
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1454: LD_VAR 0 2
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PPUSH
1465: LD_VAR 0 2
1469: PUSH
1470: LD_INT 1
1472: ARRAY
1473: PPUSH
1474: CALL_OW 343
// for x = 1 to j - 1 do
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: DOUBLE
1484: LD_INT 1
1486: DEC
1487: ST_TO_ADDR
1488: LD_VAR 0 3
1492: PUSH
1493: LD_INT 1
1495: MINUS
1496: PUSH
1497: FOR_TO
1498: IFFALSE 1534
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1500: LD_VAR 0 2
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PPUSH
1511: LD_VAR 0 2
1515: PUSH
1516: LD_VAR 0 4
1520: ARRAY
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 80
1532: GO 1497
1534: POP
1535: POP
// end ;
1536: GO 1451
1538: POP
1539: POP
// end ;
1540: GO 1433
1542: POP
1543: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1544: LD_ADDR_OWVAR 67
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 2
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_EXP 17
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ARRAY
1572: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1573: LD_ADDR_EXP 19
1577: PUSH
1578: LD_INT 6
1580: PUSH
1581: LD_INT 7
1583: PUSH
1584: LD_INT 8
1586: PUSH
1587: LD_INT 9
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_EXP 17
1600: PUSH
1601: LD_INT 2
1603: ARRAY
1604: ARRAY
1605: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1606: LD_ADDR_EXP 20
1610: PUSH
1611: LD_INT 2
1613: PUSH
1614: LD_INT 3
1616: PUSH
1617: LD_INT 4
1619: PUSH
1620: LD_INT 5
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_EXP 17
1633: PUSH
1634: LD_INT 3
1636: ARRAY
1637: ARRAY
1638: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1639: LD_ADDR_EXP 21
1643: PUSH
1644: LD_INT 3000
1646: PUSH
1647: LD_INT 1120
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 5000
1656: PUSH
1657: LD_INT 770
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 6000
1666: PUSH
1667: LD_INT 490
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 8000
1676: PUSH
1677: LD_INT 420
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_EXP 17
1694: PUSH
1695: LD_INT 4
1697: ARRAY
1698: ARRAY
1699: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1700: LD_ADDR_EXP 22
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_EXP 17
1723: PUSH
1724: LD_INT 5
1726: ARRAY
1727: ARRAY
1728: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1729: LD_ADDR_EXP 23
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 17
1752: PUSH
1753: LD_INT 6
1755: ARRAY
1756: ARRAY
1757: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1758: LD_ADDR_EXP 28
1762: PUSH
1763: LD_INT 10500
1765: PUSH
1766: LD_INT 31500
1768: PUSH
1769: LD_INT 52500
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: LD_OWVAR 67
1781: ARRAY
1782: ST_TO_ADDR
// if multi_extra_oil then
1783: LD_EXP 22
1787: IFFALSE 1848
// begin if multi_extra_oil = 1 then
1789: LD_EXP 22
1793: PUSH
1794: LD_INT 1
1796: EQUAL
1797: IFFALSE 1812
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1799: LD_INT 109
1801: PPUSH
1802: LD_INT 130
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1812: LD_EXP 22
1816: PUSH
1817: LD_INT 2
1819: EQUAL
1820: IFFALSE 1848
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1822: LD_INT 109
1824: PPUSH
1825: LD_INT 130
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1835: LD_INT 150
1837: PPUSH
1838: LD_INT 112
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1848: LD_OWVAR 67
1852: PUSH
1853: LD_INT 1
1855: GREATER
1856: IFFALSE 1893
// for i := 2 to 8 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 2
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 8
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1891
// SetTech ( tech_advmet , i , state_disabled ) ;
1874: LD_INT 34
1876: PPUSH
1877: LD_VAR 0 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 322
1889: GO 1871
1891: POP
1892: POP
// end ;
1893: LD_VAR 0 1
1897: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1898: LD_INT 0
1900: PPUSH
1901: PPUSH
// if not multi_sides [ preferSide ] then
1902: LD_EXP 7
1906: PUSH
1907: LD_VAR 0 1
1911: ARRAY
1912: NOT
1913: IFFALSE 1927
// begin result := preferSide ;
1915: LD_ADDR_VAR 0 2
1919: PUSH
1920: LD_VAR 0 1
1924: ST_TO_ADDR
// exit ;
1925: GO 1974
// end ; for i := 1 to 8 do
1927: LD_ADDR_VAR 0 3
1931: PUSH
1932: DOUBLE
1933: LD_INT 1
1935: DEC
1936: ST_TO_ADDR
1937: LD_INT 8
1939: PUSH
1940: FOR_TO
1941: IFFALSE 1972
// if not multi_sides [ i ] then
1943: LD_EXP 7
1947: PUSH
1948: LD_VAR 0 3
1952: ARRAY
1953: NOT
1954: IFFALSE 1970
// begin result := i ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: LD_VAR 0 3
1965: ST_TO_ADDR
// exit ;
1966: POP
1967: POP
1968: GO 1974
// end ;
1970: GO 1940
1972: POP
1973: POP
// end ;
1974: LD_VAR 0 2
1978: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1979: LD_INT 0
1981: PPUSH
// uc_side := side ;
1982: LD_ADDR_OWVAR 20
1986: PUSH
1987: LD_VAR 0 1
1991: ST_TO_ADDR
// uc_nation := nation_russian ;
1992: LD_ADDR_OWVAR 21
1996: PUSH
1997: LD_INT 3
1999: ST_TO_ADDR
// hc_importance := 100 ;
2000: LD_ADDR_OWVAR 32
2004: PUSH
2005: LD_INT 100
2007: ST_TO_ADDR
// hc_class := class_soldier ;
2008: LD_ADDR_OWVAR 28
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// if num = 1 then
2016: LD_VAR 0 2
2020: PUSH
2021: LD_INT 1
2023: EQUAL
2024: IFFALSE 2087
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2026: LD_INT 1
2028: PPUSH
2029: LD_EXP 20
2033: PPUSH
2034: CALL_OW 381
// hc_gallery := ru ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING ru
2045: ST_TO_ADDR
// hc_face_number := 10 ;
2046: LD_ADDR_OWVAR 34
2050: PUSH
2051: LD_INT 10
2053: ST_TO_ADDR
// hc_name := Popov ;
2054: LD_ADDR_OWVAR 26
2058: PUSH
2059: LD_STRING Popov
2061: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2062: LD_ADDR_OWVAR 29
2066: PUSH
2067: LD_INT 10
2069: PUSH
2070: LD_INT 10
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: ST_TO_ADDR
// result := CreateHuman ;
2077: LD_ADDR_VAR 0 3
2081: PUSH
2082: CALL_OW 44
2086: ST_TO_ADDR
// end ; if num = 2 then
2087: LD_VAR 0 2
2091: PUSH
2092: LD_INT 2
2094: EQUAL
2095: IFFALSE 2166
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2097: LD_INT 1
2099: PPUSH
2100: LD_EXP 20
2104: PPUSH
2105: CALL_OW 383
// hc_class := class_mechanic ;
2109: LD_ADDR_OWVAR 28
2113: PUSH
2114: LD_INT 3
2116: ST_TO_ADDR
// hc_gallery := ru ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING ru
2124: ST_TO_ADDR
// hc_face_number := 1 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// hc_name := Burlak ;
2133: LD_ADDR_OWVAR 26
2137: PUSH
2138: LD_STRING Burlak
2140: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2141: LD_ADDR_OWVAR 29
2145: PUSH
2146: LD_INT 10
2148: PUSH
2149: LD_INT 11
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: ST_TO_ADDR
// result := CreateHuman ;
2156: LD_ADDR_VAR 0 3
2160: PUSH
2161: CALL_OW 44
2165: ST_TO_ADDR
// end ; if num = 3 then
2166: LD_VAR 0 2
2170: PUSH
2171: LD_INT 3
2173: EQUAL
2174: IFFALSE 2237
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2176: LD_INT 1
2178: PPUSH
2179: LD_EXP 20
2183: PPUSH
2184: CALL_OW 381
// hc_gallery := ru ;
2188: LD_ADDR_OWVAR 33
2192: PUSH
2193: LD_STRING ru
2195: ST_TO_ADDR
// hc_face_number := 8 ;
2196: LD_ADDR_OWVAR 34
2200: PUSH
2201: LD_INT 8
2203: ST_TO_ADDR
// hc_name := Kurin ;
2204: LD_ADDR_OWVAR 26
2208: PUSH
2209: LD_STRING Kurin
2211: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2212: LD_ADDR_OWVAR 29
2216: PUSH
2217: LD_INT 12
2219: PUSH
2220: LD_INT 11
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: ST_TO_ADDR
// result := CreateHuman ;
2227: LD_ADDR_VAR 0 3
2231: PUSH
2232: CALL_OW 44
2236: ST_TO_ADDR
// end ; end ;
2237: LD_VAR 0 3
2241: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2242: LD_INT 0
2244: PPUSH
2245: PPUSH
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// for i := 1 to 8 do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_INT 1
2262: DEC
2263: ST_TO_ADDR
2264: LD_INT 8
2266: PUSH
2267: FOR_TO
2268: IFFALSE 3597
// begin if not multi_sides [ i ] then
2270: LD_EXP 7
2274: PUSH
2275: LD_VAR 0 2
2279: ARRAY
2280: NOT
2281: IFFALSE 2285
// continue ;
2283: GO 2267
// if multi_buildings [ multi_sides [ i ] ] then
2285: LD_EXP 29
2289: PUSH
2290: LD_EXP 7
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: ARRAY
2301: IFFALSE 2614
// begin uc_side := i ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_VAR 0 2
2312: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2313: LD_ADDR_OWVAR 21
2317: PUSH
2318: LD_EXP 9
2322: PUSH
2323: LD_VAR 0 2
2327: ARRAY
2328: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2329: LD_ADDR_VAR 0 3
2333: PUSH
2334: LD_EXP 29
2338: PUSH
2339: LD_EXP 7
2343: PUSH
2344: LD_VAR 0 2
2348: ARRAY
2349: ARRAY
2350: PUSH
2351: FOR_IN
2352: IFFALSE 2612
// begin if j [ 1 ] = b_oil_mine then
2354: LD_VAR 0 3
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PUSH
2363: LD_INT 29
2365: EQUAL
2366: IFFALSE 2403
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 2
2375: ARRAY
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: LD_VAR 0 3
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PUSH
2390: LD_INT 2
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 2
2398: PPUSH
2399: CALL_OW 441
// bc_type := j [ 1 ] ;
2403: LD_ADDR_OWVAR 42
2407: PUSH
2408: LD_VAR 0 3
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: ST_TO_ADDR
// bc_level := 2 ;
2417: LD_ADDR_OWVAR 43
2421: PUSH
2422: LD_INT 2
2424: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2425: LD_VAR 0 3
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PUSH
2434: LD_INT 6
2436: EQUAL
2437: IFFALSE 2455
// begin bc_kind1 := b_lab_basic ;
2439: LD_ADDR_OWVAR 44
2443: PUSH
2444: LD_INT 9
2446: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2447: LD_ADDR_OWVAR 45
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2455: LD_ADDR_VAR 0 4
2459: PUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PUSH
2469: LD_INT 1
2471: ARRAY
2472: PPUSH
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 2
2480: ARRAY
2481: PUSH
2482: LD_INT 2
2484: ARRAY
2485: PPUSH
2486: LD_VAR 0 3
2490: PUSH
2491: LD_INT 2
2493: ARRAY
2494: PUSH
2495: LD_INT 3
2497: ARRAY
2498: PPUSH
2499: CALL_OW 47
2503: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 1
2511: ARRAY
2512: PUSH
2513: LD_INT 0
2515: EQUAL
2516: IFFALSE 2610
// begin SetBName ( b , j [ 3 ] ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 3
2530: ARRAY
2531: PPUSH
2532: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2536: LD_VAR 0 4
2540: PPUSH
2541: CALL_OW 274
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: LD_INT 320
2551: PUSH
2552: LD_INT 240
2554: PUSH
2555: LD_INT 150
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PPUSH
2569: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2573: LD_VAR 0 4
2577: PPUSH
2578: CALL_OW 274
2582: PPUSH
2583: LD_INT 2
2585: PPUSH
2586: LD_INT 160
2588: PUSH
2589: LD_INT 130
2591: PUSH
2592: LD_INT 100
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_OWVAR 67
2604: ARRAY
2605: PPUSH
2606: CALL_OW 277
// end ; end ;
2610: GO 2351
2612: POP
2613: POP
// end ; if multi_custom_commanders then
2614: LD_EXP 16
2618: IFFALSE 2828
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2620: LD_ADDR_VAR 0 6
2624: PUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_EXP 7
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PPUSH
2641: CALL 1979 0 2
2645: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2646: LD_ADDR_EXP 24
2650: PUSH
2651: LD_EXP 24
2655: PPUSH
2656: LD_EXP 24
2660: PUSH
2661: LD_INT 1
2663: PLUS
2664: PPUSH
2665: LD_VAR 0 6
2669: PPUSH
2670: CALL_OW 2
2674: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2675: LD_VAR 0 6
2679: PPUSH
2680: CALL_OW 257
2684: PUSH
2685: LD_INT 3
2687: EQUAL
2688: IFFALSE 2793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2690: LD_INT 22
2692: PPUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_INT 1
2698: PPUSH
2699: LD_INT 51
2701: PPUSH
2702: LD_INT 100
2704: PPUSH
2705: CALL 32084 0 5
// veh := CreateVehicle ;
2709: LD_ADDR_VAR 0 7
2713: PUSH
2714: CALL_OW 45
2718: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2719: LD_VAR 0 7
2723: PPUSH
2724: LD_INT 2
2726: PPUSH
2727: LD_INT 100
2729: PUSH
2730: LD_INT 20
2732: PUSH
2733: LD_OWVAR 67
2737: MUL
2738: MINUS
2739: PPUSH
2740: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2744: LD_VAR 0 7
2748: PPUSH
2749: LD_EXP 12
2753: PUSH
2754: LD_EXP 7
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: ARRAY
2765: PUSH
2766: LD_INT 2
2768: ARRAY
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2777: LD_VAR 0 6
2781: PPUSH
2782: LD_VAR 0 7
2786: PPUSH
2787: CALL_OW 52
// end else
2791: GO 2826
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2793: LD_VAR 0 6
2797: PPUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_EXP 7
2807: PUSH
2808: LD_VAR 0 2
2812: ARRAY
2813: ARRAY
2814: PUSH
2815: LD_INT 1
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// end else
2826: GO 3039
// begin uc_side := i ;
2828: LD_ADDR_OWVAR 20
2832: PUSH
2833: LD_VAR 0 2
2837: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2838: LD_ADDR_OWVAR 21
2842: PUSH
2843: LD_EXP 9
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: ST_TO_ADDR
// hc_importance := 100 ;
2854: LD_ADDR_OWVAR 32
2858: PUSH
2859: LD_INT 100
2861: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2862: LD_INT 0
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_EXP 20
2872: PPUSH
2873: CALL_OW 380
// if multiplayer then
2877: LD_OWVAR 4
2881: IFFALSE 2939
// begin hc_name := mp_sides_players_names [ i ] ;
2883: LD_ADDR_OWVAR 26
2887: PUSH
2888: LD_OWVAR 19
2892: PUSH
2893: LD_VAR 0 2
2897: ARRAY
2898: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2899: LD_ADDR_OWVAR 33
2903: PUSH
2904: LD_STRING MULTIAVATARS
2906: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2907: LD_ADDR_OWVAR 34
2911: PUSH
2912: LD_VAR 0 2
2916: PPUSH
2917: CALL_OW 525
2921: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2922: LD_ADDR_OWVAR 27
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: CALL_OW 526
2936: ST_TO_ADDR
// end else
2937: GO 2971
// begin hc_gallery :=  ;
2939: LD_ADDR_OWVAR 33
2943: PUSH
2944: LD_STRING 
2946: ST_TO_ADDR
// hc_name :=  ;
2947: LD_ADDR_OWVAR 26
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2955: LD_ADDR_OWVAR 27
2959: PUSH
2960: LD_INT 1
2962: PPUSH
2963: LD_INT 2
2965: PPUSH
2966: CALL_OW 12
2970: ST_TO_ADDR
// end ; un := CreateHuman ;
2971: LD_ADDR_VAR 0 6
2975: PUSH
2976: CALL_OW 44
2980: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2981: LD_VAR 0 6
2985: PPUSH
2986: LD_EXP 12
2990: PUSH
2991: LD_EXP 7
2995: PUSH
2996: LD_VAR 0 2
3000: ARRAY
3001: ARRAY
3002: PUSH
3003: LD_INT 1
3005: ARRAY
3006: PPUSH
3007: LD_INT 0
3009: PPUSH
3010: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3014: LD_ADDR_EXP 24
3018: PUSH
3019: LD_EXP 24
3023: PPUSH
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_VAR 0 6
3033: PPUSH
3034: CALL_OW 1
3038: ST_TO_ADDR
// end ; InitHc ;
3039: CALL_OW 19
// InitUc ;
3043: CALL_OW 18
// uc_side := i ;
3047: LD_ADDR_OWVAR 20
3051: PUSH
3052: LD_VAR 0 2
3056: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3057: LD_ADDR_OWVAR 21
3061: PUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_VAR 0 2
3071: ARRAY
3072: ST_TO_ADDR
// hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_name :=  ;
3081: LD_ADDR_OWVAR 26
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_importance := 0 ;
3089: LD_ADDR_OWVAR 32
3093: PUSH
3094: LD_INT 0
3096: ST_TO_ADDR
// cl := 1 ;
3097: LD_ADDR_VAR 0 5
3101: PUSH
3102: LD_INT 1
3104: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3105: LD_ADDR_VAR 0 3
3109: PUSH
3110: DOUBLE
3111: LD_INT 2
3113: DEC
3114: ST_TO_ADDR
3115: LD_EXP 19
3119: PUSH
3120: FOR_TO
3121: IFFALSE 3593
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3123: LD_VAR 0 3
3127: PUSH
3128: LD_INT 1
3130: MINUS
3131: PUSH
3132: LD_EXP 19
3136: PUSH
3137: LD_INT 1
3139: MINUS
3140: PUSH
3141: LD_INT 4
3143: DIVREAL
3144: MOD
3145: PUSH
3146: LD_INT 0
3148: EQUAL
3149: IFFALSE 3165
// cl := cl + 1 ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_VAR 0 5
3160: PUSH
3161: LD_INT 1
3163: PLUS
3164: ST_TO_ADDR
// if cl > 4 then
3165: LD_VAR 0 5
3169: PUSH
3170: LD_INT 4
3172: GREATER
3173: IFFALSE 3183
// cl := 1 ;
3175: LD_ADDR_VAR 0 5
3179: PUSH
3180: LD_INT 1
3182: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_VAR 0 5
3190: PPUSH
3191: LD_EXP 20
3195: PPUSH
3196: CALL_OW 380
// un := CreateHuman ;
3200: LD_ADDR_VAR 0 6
3204: PUSH
3205: CALL_OW 44
3209: ST_TO_ADDR
// if j > copy then
3210: LD_VAR 0 3
3214: PUSH
3215: LD_VAR 0 9
3219: GREATER
3220: IFFALSE 3249
// copy := Replace ( copy , j , un ) else
3222: LD_ADDR_VAR 0 9
3226: PUSH
3227: LD_VAR 0 9
3231: PPUSH
3232: LD_VAR 0 3
3236: PPUSH
3237: LD_VAR 0 6
3241: PPUSH
3242: CALL_OW 1
3246: ST_TO_ADDR
3247: GO 3331
// begin CopySkills ( copy [ j ] , un ) ;
3249: LD_VAR 0 9
3253: PUSH
3254: LD_VAR 0 3
3258: ARRAY
3259: PPUSH
3260: LD_VAR 0 6
3264: PPUSH
3265: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3269: LD_VAR 0 6
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_VAR 0 9
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PPUSH
3288: LD_INT 2
3290: PPUSH
3291: CALL_OW 260
3295: PPUSH
3296: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3300: LD_VAR 0 6
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_VAR 0 9
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: CALL_OW 260
3326: PPUSH
3327: CALL_OW 239
// end ; if multi_pos_area then
3331: LD_EXP 12
3335: IFFALSE 3591
// begin if GetClass ( un ) = 3 then
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 257
3346: PUSH
3347: LD_INT 3
3349: EQUAL
3350: IFFALSE 3447
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3352: LD_INT 21
3354: PPUSH
3355: LD_INT 1
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 43
3363: PUSH
3364: LD_INT 42
3366: PUSH
3367: LD_INT 42
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: LD_OWVAR 67
3379: ARRAY
3380: PPUSH
3381: LD_INT 80
3383: PPUSH
3384: CALL 32084 0 5
// veh := CreateVehicle ;
3388: LD_ADDR_VAR 0 7
3392: PUSH
3393: CALL_OW 45
3397: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3398: LD_VAR 0 7
3402: PPUSH
3403: LD_EXP 12
3407: PUSH
3408: LD_EXP 7
3412: PUSH
3413: LD_VAR 0 2
3417: ARRAY
3418: ARRAY
3419: PUSH
3420: LD_INT 2
3422: ARRAY
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3431: LD_VAR 0 6
3435: PPUSH
3436: LD_VAR 0 7
3440: PPUSH
3441: CALL_OW 52
// continue ;
3445: GO 3120
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3447: LD_ADDR_VAR 0 8
3451: PUSH
3452: LD_INT 22
3454: PUSH
3455: LD_VAR 0 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 30
3466: PUSH
3467: LD_INT 31
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 58
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3490: LD_VAR 0 6
3494: PPUSH
3495: CALL_OW 257
3499: PUSH
3500: LD_INT 1
3502: EQUAL
3503: PUSH
3504: LD_VAR 0 8
3508: AND
3509: IFFALSE 3558
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3511: LD_VAR 0 6
3515: PPUSH
3516: LD_VAR 0 8
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: CALL_OW 254
3529: PUSH
3530: LD_INT 3
3532: MINUS
3533: PPUSH
3534: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3538: LD_VAR 0 6
3542: PPUSH
3543: LD_VAR 0 8
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// continue ;
3556: GO 3120
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3558: LD_VAR 0 6
3562: PPUSH
3563: LD_EXP 12
3567: PUSH
3568: LD_EXP 7
3572: PUSH
3573: LD_VAR 0 2
3577: ARRAY
3578: ARRAY
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: PPUSH
3584: LD_INT 0
3586: PPUSH
3587: CALL_OW 49
// end ; end ;
3591: GO 3120
3593: POP
3594: POP
// end ;
3595: GO 2267
3597: POP
3598: POP
// end ;
3599: LD_VAR 0 1
3603: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3604: LD_INT 0
3606: PPUSH
3607: PPUSH
3608: PPUSH
3609: PPUSH
3610: PPUSH
// if not multi_support then
3611: LD_EXP 23
3615: NOT
3616: IFFALSE 3620
// exit ;
3618: GO 3923
// result := [ ] ;
3620: LD_ADDR_VAR 0 1
3624: PUSH
3625: EMPTY
3626: ST_TO_ADDR
// for i := 1 to 8 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 8
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3921
// begin result := Replace ( result , i , [ ] ) ;
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: LD_VAR 0 2
3657: PPUSH
3658: EMPTY
3659: PPUSH
3660: CALL_OW 1
3664: ST_TO_ADDR
// if multi_sides [ i ] then
3665: LD_EXP 7
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: IFFALSE 3919
// begin tmp := [ ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: EMPTY
3683: ST_TO_ADDR
// if multi_support = 1 then
3684: LD_EXP 23
3688: PUSH
3689: LD_INT 1
3691: EQUAL
3692: IFFALSE 3789
// begin uc_side := i ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_VAR 0 2
3703: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3704: LD_ADDR_OWVAR 21
3708: PUSH
3709: LD_EXP 9
3713: PUSH
3714: LD_VAR 0 2
3718: ARRAY
3719: ST_TO_ADDR
// for j := 1 to 3 do
3720: LD_ADDR_VAR 0 3
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_INT 3
3732: PUSH
3733: FOR_TO
3734: IFFALSE 3787
// begin InitHC_All ( ) ;
3736: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 4
3748: PPUSH
3749: CALL_OW 12
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: LD_INT 4
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3769: LD_ADDR_VAR 0 5
3773: PUSH
3774: LD_VAR 0 5
3778: PUSH
3779: CALL_OW 44
3783: ADD
3784: ST_TO_ADDR
// end ;
3785: GO 3733
3787: POP
3788: POP
// end ; if multi_support = 2 then
3789: LD_EXP 23
3793: PUSH
3794: LD_INT 2
3796: EQUAL
3797: IFFALSE 3894
// begin uc_side := i ;
3799: LD_ADDR_OWVAR 20
3803: PUSH
3804: LD_VAR 0 2
3808: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3809: LD_ADDR_OWVAR 21
3813: PUSH
3814: LD_EXP 9
3818: PUSH
3819: LD_VAR 0 2
3823: ARRAY
3824: ST_TO_ADDR
// for j := 1 to 5 do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: DOUBLE
3831: LD_INT 1
3833: DEC
3834: ST_TO_ADDR
3835: LD_INT 5
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3892
// begin InitHC_All ( ) ;
3841: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3845: LD_INT 0
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 4
3853: PPUSH
3854: CALL_OW 12
3858: PPUSH
3859: LD_INT 2
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: CALL_OW 12
3869: PPUSH
3870: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3874: LD_ADDR_VAR 0 5
3878: PUSH
3879: LD_VAR 0 5
3883: PUSH
3884: CALL_OW 44
3888: ADD
3889: ST_TO_ADDR
// end ;
3890: GO 3838
3892: POP
3893: POP
// end ; result := Replace ( result , i , tmp ) ;
3894: LD_ADDR_VAR 0 1
3898: PUSH
3899: LD_VAR 0 1
3903: PPUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_VAR 0 5
3913: PPUSH
3914: CALL_OW 1
3918: ST_TO_ADDR
// end ; end ;
3919: GO 3640
3921: POP
3922: POP
// end ;
3923: LD_VAR 0 1
3927: RET
// export function Multiplayer_Start ( ) ; begin
3928: LD_INT 0
3930: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3931: CALL 2242 0 0
// Multiplayer_InitPointSystem ( ) ;
3935: CALL 4930 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3939: LD_INT 20
3941: PPUSH
3942: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3946: LD_INT 150
3948: PPUSH
3949: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3953: LD_INT 5
3955: PPUSH
3956: CALL 5106 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3960: LD_INT 40
3962: NEG
3963: PPUSH
3964: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3968: LD_INT 200
3970: PPUSH
3971: CALL 5106 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3975: LD_INT 2
3977: PPUSH
3978: CALL 5106 0 1
// if multi_support then
3982: LD_EXP 23
3986: IFFALSE 3998
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3988: LD_ADDR_EXP 27
3992: PUSH
3993: CALL 3604 0 0
3997: ST_TO_ADDR
// if multi_sides [ your_side ] then
3998: LD_EXP 7
4002: PUSH
4003: LD_OWVAR 2
4007: ARRAY
4008: IFFALSE 4035
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4010: LD_INT 22
4012: PUSH
4013: LD_OWVAR 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PPUSH
4022: CALL_OW 69
4026: PUSH
4027: LD_INT 1
4029: ARRAY
4030: PPUSH
4031: CALL_OW 87
// end ;
4035: LD_VAR 0 1
4039: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
4044: PPUSH
4045: PPUSH
4046: PPUSH
4047: PPUSH
4048: PPUSH
// tmp := [ ] ;
4049: LD_ADDR_VAR 0 6
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to 8 do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 8
4068: PUSH
4069: FOR_TO
4070: IFFALSE 4106
// if multi_sides [ i ] then
4072: LD_EXP 7
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: IFFALSE 4104
// tmp := Join ( tmp , i ) ;
4084: LD_ADDR_VAR 0 6
4088: PUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: LD_VAR 0 2
4098: PPUSH
4099: CALL 64955 0 2
4103: ST_TO_ADDR
4104: GO 4069
4106: POP
4107: POP
// repeat wait ( 0 0$1 ) ;
4108: LD_INT 35
4110: PPUSH
4111: CALL_OW 67
// if tick = 10 10$00 then
4115: LD_OWVAR 1
4119: PUSH
4120: LD_INT 21000
4122: EQUAL
4123: IFFALSE 4294
// begin for i := 1 to 8 do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 8
4137: PUSH
4138: FOR_TO
4139: IFFALSE 4292
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4141: LD_EXP 7
4145: PUSH
4146: LD_VAR 0 2
4150: ARRAY
4151: PUSH
4152: LD_EXP 25
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: NOT
4163: AND
4164: IFFALSE 4290
// begin uc_side := i ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_VAR 0 2
4175: ST_TO_ADDR
// uc_nation := nation_russian ;
4176: LD_ADDR_OWVAR 21
4180: PUSH
4181: LD_INT 3
4183: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4184: LD_INT 22
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 44
4198: PUSH
4199: LD_INT 42
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_OWVAR 67
4211: ARRAY
4212: PPUSH
4213: LD_INT 30
4215: PPUSH
4216: CALL 32084 0 5
// veh := CreateVehicle ;
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: CALL_OW 45
4229: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4230: LD_VAR 0 7
4234: PPUSH
4235: LD_INT 32
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 5
4250: PUSH
4251: LD_OWVAR 67
4255: MINUS
4256: PPUSH
4257: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4261: CALL_OW 44
4265: PPUSH
4266: LD_VAR 0 7
4270: PPUSH
4271: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4275: LD_VAR 0 7
4279: PPUSH
4280: LD_INT 158
4282: PPUSH
4283: LD_INT 106
4285: PPUSH
4286: CALL_OW 111
// end ; end ;
4290: GO 4138
4292: POP
4293: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4294: LD_OWVAR 1
4298: PUSH
4299: LD_EXP 28
4303: GREATER
4304: PUSH
4305: LD_EXP 23
4309: AND
4310: IFFALSE 4498
// begin if tick mod 2 2$00 = 0 then
4312: LD_OWVAR 1
4316: PUSH
4317: LD_INT 4200
4319: MOD
4320: PUSH
4321: LD_INT 0
4323: EQUAL
4324: IFFALSE 4498
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 6
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: LD_VAR 0 6
4343: PPUSH
4344: CALL 29346 0 1
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL 31624 0 4
4356: ST_TO_ADDR
// for s := 1 to tmp do
4357: LD_ADDR_VAR 0 5
4361: PUSH
4362: DOUBLE
4363: LD_INT 1
4365: DEC
4366: ST_TO_ADDR
4367: LD_VAR 0 6
4371: PUSH
4372: FOR_TO
4373: IFFALSE 4496
// begin i := tmp [ s ] ;
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: LD_VAR 0 6
4384: PUSH
4385: LD_VAR 0 5
4389: ARRAY
4390: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4391: LD_EXP 7
4395: PUSH
4396: LD_VAR 0 2
4400: ARRAY
4401: PUSH
4402: LD_EXP 25
4406: PUSH
4407: LD_VAR 0 2
4411: ARRAY
4412: NOT
4413: AND
4414: PUSH
4415: LD_EXP 27
4419: PUSH
4420: LD_VAR 0 2
4424: ARRAY
4425: AND
4426: IFFALSE 4494
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4428: LD_EXP 27
4432: PUSH
4433: LD_VAR 0 2
4437: ARRAY
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: PPUSH
4443: LD_INT 7
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4453: LD_ADDR_EXP 27
4457: PUSH
4458: LD_EXP 27
4462: PPUSH
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 27
4472: PUSH
4473: LD_VAR 0 2
4477: ARRAY
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL_OW 3
4486: PPUSH
4487: CALL_OW 1
4491: ST_TO_ADDR
// break ;
4492: GO 4496
// end ; end ;
4494: GO 4372
4496: POP
4497: POP
// end ; end ; if not multi_custom_commanders then
4498: LD_EXP 16
4502: NOT
4503: IFFALSE 4616
// begin for i := 1 to 8 do
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_INT 8
4517: PUSH
4518: FOR_TO
4519: IFFALSE 4590
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4521: LD_INT 22
4523: PUSH
4524: LD_VAR 0 2
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: PUSH
4538: LD_INT 0
4540: EQUAL
4541: PUSH
4542: LD_EXP 25
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: NOT
4553: AND
4554: IFFALSE 4588
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4556: LD_ADDR_EXP 25
4560: PUSH
4561: LD_EXP 25
4565: PPUSH
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 1
4578: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL 5176 0 1
// end ; end ;
4588: GO 4518
4590: POP
4591: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4592: LD_EXP 25
4596: PPUSH
4597: CALL 29346 0 1
4601: PUSH
4602: LD_EXP 7
4606: PPUSH
4607: CALL 29346 0 1
4611: EQUAL
4612: IFFALSE 4616
// break ;
4614: GO 4636
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4616: CALL 4750 0 0
4620: NOT
4621: PUSH
4622: LD_EXP 2
4626: AND
4627: PUSH
4628: LD_EXP 24
4632: NOT
4633: OR
4634: IFFALSE 4108
// game := false ;
4636: LD_ADDR_EXP 2
4640: PUSH
4641: LD_INT 0
4643: ST_TO_ADDR
// for i := 1 to 8 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 8
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4694
// begin if multi_sides [ i ] then
4660: LD_EXP 7
4664: PUSH
4665: LD_VAR 0 2
4669: ARRAY
4670: IFFALSE 4692
// SetMultiScore ( i , multi_points [ i ] ) ;
4672: LD_VAR 0 2
4676: PPUSH
4677: LD_EXP 32
4681: PUSH
4682: LD_VAR 0 2
4686: ARRAY
4687: PPUSH
4688: CALL_OW 506
// end ;
4692: GO 4657
4694: POP
4695: POP
// if multi_loosers [ your_side ] then
4696: LD_EXP 25
4700: PUSH
4701: LD_OWVAR 2
4705: ARRAY
4706: IFFALSE 4729
// begin if Multiplayer then
4708: LD_OWVAR 4
4712: IFFALSE 4720
// YouLostInMultiplayer else
4714: CALL_OW 107
4718: GO 4727
// YouLost (  ) ;
4720: LD_STRING 
4722: PPUSH
4723: CALL_OW 104
// end else
4727: GO 4745
// begin if Multiplayer then
4729: LD_OWVAR 4
4733: IFFALSE 4741
// YouWinInMultiplayer else
4735: CALL_OW 106
4739: GO 4745
// YouWin ;
4741: CALL_OW 103
// end ; end ;
4745: LD_VAR 0 1
4749: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4750: LD_INT 0
4752: PPUSH
4753: PPUSH
// result := false ;
4754: LD_ADDR_VAR 0 1
4758: PUSH
4759: LD_INT 0
4761: ST_TO_ADDR
// for side in botSides do
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: LD_EXP 3
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4834
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4775: LD_ADDR_VAR 0 1
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_VAR 0 2
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 50
4804: PUSH
4805: EMPTY
4806: LIST
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: PPUSH
4813: CALL_OW 69
4817: PUSH
4818: LD_INT 0
4820: GREATER
4821: ST_TO_ADDR
// if result then
4822: LD_VAR 0 1
4826: IFFALSE 4832
// exit ;
4828: POP
4829: POP
4830: GO 4836
// end ;
4832: GO 4772
4834: POP
4835: POP
// end ;
4836: LD_VAR 0 1
4840: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4841: LD_INT 0
4843: PPUSH
4844: PPUSH
// result := [ ] ;
4845: LD_ADDR_VAR 0 1
4849: PUSH
4850: EMPTY
4851: ST_TO_ADDR
// for i := 1 to 8 do
4852: LD_ADDR_VAR 0 2
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_INT 8
4864: PUSH
4865: FOR_TO
4866: IFFALSE 4923
// begin if multi_sides [ i ] then
4868: LD_EXP 7
4872: PUSH
4873: LD_VAR 0 2
4877: ARRAY
4878: IFFALSE 4921
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_VAR 0 1
4889: PUSH
4890: LD_STRING #coop-points
4892: PUSH
4893: LD_VAR 0 2
4897: PUSH
4898: LD_VAR 0 2
4902: PUSH
4903: LD_EXP 32
4907: PUSH
4908: LD_VAR 0 2
4912: ARRAY
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: ADD
4920: ST_TO_ADDR
// end ; end ;
4921: GO 4865
4923: POP
4924: POP
// end ;
4925: LD_VAR 0 1
4929: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4930: LD_INT 0
4932: PPUSH
4933: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4934: LD_ADDR_EXP 32
4938: PUSH
4939: LD_INT 0
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: LD_INT 0
4947: PUSH
4948: LD_INT 0
4950: PUSH
4951: LD_INT 0
4953: PUSH
4954: LD_INT 0
4956: PUSH
4957: LD_INT 0
4959: PUSH
4960: LD_INT 0
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4973: LD_ADDR_EXP 33
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// end ;
4980: LD_VAR 0 1
4984: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4985: LD_INT 0
4987: PPUSH
// if not multi_points or not side or side > 8 then
4988: LD_EXP 32
4992: NOT
4993: PUSH
4994: LD_VAR 0 1
4998: NOT
4999: OR
5000: PUSH
5001: LD_VAR 0 1
5005: PUSH
5006: LD_INT 8
5008: GREATER
5009: OR
5010: IFFALSE 5014
// exit ;
5012: GO 5051
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5014: LD_ADDR_EXP 32
5018: PUSH
5019: LD_EXP 32
5023: PPUSH
5024: LD_VAR 0 1
5028: PPUSH
5029: LD_EXP 32
5033: PUSH
5034: LD_VAR 0 1
5038: ARRAY
5039: PUSH
5040: LD_VAR 0 2
5044: PLUS
5045: PPUSH
5046: CALL_OW 1
5050: ST_TO_ADDR
// end ;
5051: LD_VAR 0 3
5055: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5056: LD_INT 0
5058: PPUSH
// if not multi_points or not side or side > 8 then
5059: LD_EXP 32
5063: NOT
5064: PUSH
5065: LD_VAR 0 1
5069: NOT
5070: OR
5071: PUSH
5072: LD_VAR 0 1
5076: PUSH
5077: LD_INT 8
5079: GREATER
5080: OR
5081: IFFALSE 5085
// exit ;
5083: GO 5101
// result := multi_points [ side ] ;
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_EXP 32
5094: PUSH
5095: LD_VAR 0 1
5099: ARRAY
5100: ST_TO_ADDR
// end ;
5101: LD_VAR 0 2
5105: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5106: LD_INT 0
5108: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5109: LD_ADDR_EXP 33
5113: PUSH
5114: LD_EXP 33
5118: PPUSH
5119: LD_EXP 33
5123: PUSH
5124: LD_INT 1
5126: PLUS
5127: PPUSH
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 1
5137: ST_TO_ADDR
// end ;
5138: LD_VAR 0 2
5142: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5143: LD_INT 0
5145: PPUSH
// if not id then
5146: LD_VAR 0 1
5150: NOT
5151: IFFALSE 5155
// exit ;
5153: GO 5171
// result := multi_points_conditions [ id ] ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_EXP 33
5164: PUSH
5165: LD_VAR 0 1
5169: ARRAY
5170: ST_TO_ADDR
// end ;
5171: LD_VAR 0 2
5175: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5176: LD_INT 0
5178: PPUSH
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// players := [ ] ;
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: EMPTY
5189: ST_TO_ADDR
// for i = 1 to 8 do
5190: LD_ADDR_VAR 0 4
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 8
5202: PUSH
5203: FOR_TO
5204: IFFALSE 5263
// begin if i = side then
5206: LD_VAR 0 4
5210: PUSH
5211: LD_VAR 0 1
5215: EQUAL
5216: IFFALSE 5220
// continue ;
5218: GO 5203
// if multi_sides [ i ] and not multi_loosers [ i ] then
5220: LD_EXP 7
5224: PUSH
5225: LD_VAR 0 4
5229: ARRAY
5230: PUSH
5231: LD_EXP 25
5235: PUSH
5236: LD_VAR 0 4
5240: ARRAY
5241: NOT
5242: AND
5243: IFFALSE 5261
// players := players ^ i ;
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_VAR 0 3
5254: PUSH
5255: LD_VAR 0 4
5259: ADD
5260: ST_TO_ADDR
// end ;
5261: GO 5203
5263: POP
5264: POP
// if not players then
5265: LD_VAR 0 3
5269: NOT
5270: IFFALSE 5274
// exit ;
5272: GO 5541
// if players = 1 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 1
5281: EQUAL
5282: IFFALSE 5343
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5284: LD_ADDR_VAR 0 4
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_VAR 0 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 51
5303: PUSH
5304: EMPTY
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 69
5315: PUSH
5316: FOR_IN
5317: IFFALSE 5339
// SetSide ( i , players [ 1 ] ) ;
5319: LD_VAR 0 4
5323: PPUSH
5324: LD_VAR 0 3
5328: PUSH
5329: LD_INT 1
5331: ARRAY
5332: PPUSH
5333: CALL_OW 235
5337: GO 5316
5339: POP
5340: POP
// end else
5341: GO 5541
// begin j := 1 ;
5343: LD_ADDR_VAR 0 5
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5351: LD_ADDR_VAR 0 4
5355: PUSH
5356: LD_INT 22
5358: PUSH
5359: LD_VAR 0 1
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 51
5383: PUSH
5384: EMPTY
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: PUSH
5391: LD_INT 21
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 69
5414: PUSH
5415: FOR_IN
5416: IFFALSE 5539
// begin SetSide ( i , players [ j ] ) ;
5418: LD_VAR 0 4
5422: PPUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 5
5432: ARRAY
5433: PPUSH
5434: CALL_OW 235
// if IsDrivenBy ( i ) then
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 311
5447: IFFALSE 5474
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5449: LD_VAR 0 4
5453: PPUSH
5454: CALL_OW 311
5458: PPUSH
5459: LD_VAR 0 3
5463: PUSH
5464: LD_VAR 0 5
5468: ARRAY
5469: PPUSH
5470: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5474: LD_VAR 0 4
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 247
5488: PUSH
5489: LD_INT 3
5491: EQUAL
5492: IFFALSE 5503
// ComExitBuilding ( i ) ;
5494: LD_VAR 0 4
5498: PPUSH
5499: CALL_OW 122
// j := j + 1 ;
5503: LD_ADDR_VAR 0 5
5507: PUSH
5508: LD_VAR 0 5
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: ST_TO_ADDR
// if j > players then
5517: LD_VAR 0 5
5521: PUSH
5522: LD_VAR 0 3
5526: GREATER
5527: IFFALSE 5537
// j := 1 ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_INT 1
5536: ST_TO_ADDR
// end ;
5537: GO 5415
5539: POP
5540: POP
// end ; end ;
5541: LD_VAR 0 2
5545: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
// i := 3 ;
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: LD_INT 3
5558: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: LD_INT 5
5566: PUSH
5567: LD_INT 10
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 120
5576: PUSH
5577: LD_INT 2
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 101
5586: PUSH
5587: LD_INT 8
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 27
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5610: LD_INT 4
5612: PPUSH
5613: LD_INT 5
5615: PPUSH
5616: LD_VAR 0 3
5620: PUSH
5621: LD_VAR 0 2
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 3
5635: PUSH
5636: LD_VAR 0 2
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: LD_INT 0
5648: PPUSH
5649: CALL_OW 58
// end ;
5653: LD_VAR 0 1
5657: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5658: LD_INT 0
5660: PPUSH
// if not side or side > 8 then
5661: LD_VAR 0 1
5665: NOT
5666: PUSH
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 8
5674: GREATER
5675: OR
5676: IFFALSE 5680
// exit ;
5678: GO 5697
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5680: LD_VAR 0 1
5684: PPUSH
5685: LD_INT 6
5687: PPUSH
5688: CALL 5143 0 1
5692: PPUSH
5693: CALL 4985 0 2
// end ;
5697: LD_VAR 0 2
5701: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5702: LD_INT 0
5704: PPUSH
// if not side or side > 8 then
5705: LD_VAR 0 1
5709: NOT
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 8
5718: GREATER
5719: OR
5720: IFFALSE 5724
// exit ;
5722: GO 5741
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5724: LD_VAR 0 1
5728: PPUSH
5729: LD_INT 4
5731: PPUSH
5732: CALL 5143 0 1
5736: PPUSH
5737: CALL 4985 0 2
// end ;
5741: LD_VAR 0 2
5745: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5746: LD_INT 0
5748: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5749: LD_VAR 0 1
5753: NOT
5754: PUSH
5755: LD_VAR 0 1
5759: PUSH
5760: LD_INT 8
5762: GREATER
5763: OR
5764: PUSH
5765: LD_VAR 0 2
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 6
5775: PUSH
5776: LD_INT 36
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: IN
5788: NOT
5789: OR
5790: IFFALSE 5794
// exit ;
5792: GO 5811
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 3
5801: PPUSH
5802: CALL 5143 0 1
5806: PPUSH
5807: CALL 4985 0 2
// end ;
5811: LD_VAR 0 3
5815: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
// if not un then
5820: LD_VAR 0 1
5824: NOT
5825: IFFALSE 5829
// exit ;
5827: GO 5875
// if not points then
5829: LD_VAR 0 3
5833: NOT
5834: IFFALSE 5851
// gained_points := Multiplayer_GetCondition ( 1 ) else
5836: LD_ADDR_VAR 0 5
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL 5143 0 1
5848: ST_TO_ADDR
5849: GO 5861
// gained_points := points ;
5851: LD_ADDR_VAR 0 5
5855: PUSH
5856: LD_VAR 0 3
5860: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_VAR 0 5
5870: PPUSH
5871: CALL 4985 0 2
5875: LD_VAR 0 4
5879: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5880: LD_INT 0
5882: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5883: LD_VAR 0 1
5887: PPUSH
5888: LD_INT 2
5890: PPUSH
5891: CALL 5143 0 1
5895: PPUSH
5896: CALL 4985 0 2
// end ; end_of_file
5900: LD_VAR 0 2
5904: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5916: LD_ADDR_EXP 35
5920: PUSH
5921: LD_VAR 0 1
5925: PPUSH
5926: LD_INT 1
5928: PPUSH
5929: LD_INT 1
5931: PPUSH
5932: CALL 27307 0 3
5936: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5937: LD_ADDR_EXP 36
5941: PUSH
5942: LD_INT 4
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 6
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 5
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: LD_INT 4
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 2
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: LD_INT 4
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 1
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: ST_TO_ADDR
// amBuildings := [ ] ;
6039: LD_ADDR_EXP 37
6043: PUSH
6044: EMPTY
6045: ST_TO_ADDR
// amVehicles := [ ] ;
6046: LD_ADDR_EXP 38
6050: PUSH
6051: EMPTY
6052: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6053: LD_ADDR_EXP 39
6057: PUSH
6058: EMPTY
6059: ST_TO_ADDR
// amDrivers := [ ] ;
6060: LD_ADDR_EXP 40
6064: PUSH
6065: EMPTY
6066: ST_TO_ADDR
// amVehiclesCounter := 2 ;
6067: LD_ADDR_EXP 41
6071: PUSH
6072: LD_INT 2
6074: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6075: LD_ADDR_EXP 44
6079: PUSH
6080: LD_INT 6
6082: PUSH
6083: LD_INT 8
6085: PUSH
6086: LD_INT 10
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: LD_OWVAR 67
6098: ARRAY
6099: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6100: LD_ADDR_VAR 0 8
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 4
6110: PUSH
6111: LD_INT 5
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_OWVAR 67
6123: ARRAY
6124: ST_TO_ADDR
// uc_side := side ;
6125: LD_ADDR_OWVAR 20
6129: PUSH
6130: LD_VAR 0 1
6134: ST_TO_ADDR
// uc_nation := nation_american ;
6135: LD_ADDR_OWVAR 21
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// hc_gallery := us ;
6143: LD_ADDR_OWVAR 33
6147: PUSH
6148: LD_STRING us
6150: ST_TO_ADDR
// hc_face_number := 19 ;
6151: LD_ADDR_OWVAR 34
6155: PUSH
6156: LD_INT 19
6158: ST_TO_ADDR
// hc_importance := 100 ;
6159: LD_ADDR_OWVAR 32
6163: PUSH
6164: LD_INT 100
6166: ST_TO_ADDR
// hc_name := Sikorski ;
6167: LD_ADDR_OWVAR 26
6171: PUSH
6172: LD_STRING Sikorski
6174: ST_TO_ADDR
// hc_sex := sex_male ;
6175: LD_ADDR_OWVAR 27
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6183: LD_ADDR_OWVAR 31
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: LD_INT 3
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6206: LD_ADDR_OWVAR 29
6210: PUSH
6211: LD_INT 10
6213: PUSH
6214: LD_INT 11
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// Sikorski := CreateHuman ;
6221: LD_ADDR_EXP 34
6225: PUSH
6226: CALL_OW 44
6230: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6231: LD_EXP 34
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 52
// InitHC_All ( ) ;
6243: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6247: LD_ADDR_EXP 42
6251: PUSH
6252: LD_INT 1
6254: PPUSH
6255: LD_INT 3
6257: PPUSH
6258: LD_STRING 
6260: PPUSH
6261: LD_VAR 0 8
6265: PPUSH
6266: LD_INT 800
6268: PUSH
6269: LD_INT 120
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: PPUSH
6280: LD_INT 10
6282: PUSH
6283: LD_INT 11
6285: PUSH
6286: LD_INT 12
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: PUSH
6294: LD_OWVAR 67
6298: ARRAY
6299: PUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 3
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL 35905 0 6
6319: ST_TO_ADDR
// amForceTmp := [ ] ;
6320: LD_ADDR_EXP 43
6324: PUSH
6325: EMPTY
6326: ST_TO_ADDR
// if Difficulty = 3 then
6327: LD_OWVAR 67
6331: PUSH
6332: LD_INT 3
6334: EQUAL
6335: IFFALSE 6366
// begin bc_type := b_breastwork ;
6337: LD_ADDR_OWVAR 42
6341: PUSH
6342: LD_INT 31
6344: ST_TO_ADDR
// bc_level := 7 ;
6345: LD_ADDR_OWVAR 43
6349: PUSH
6350: LD_INT 7
6352: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6353: LD_INT 79
6355: PPUSH
6356: LD_INT 72
6358: PPUSH
6359: LD_INT 5
6361: PPUSH
6362: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: LD_INT 22
6373: PUSH
6374: LD_VAR 0 1
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 30
6385: PUSH
6386: LD_INT 31
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: LD_INT 95
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 58
6412: PUSH
6413: EMPTY
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: PUSH
6427: FOR_IN
6428: IFFALSE 6557
// begin d := GetDir ( i ) ;
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 254
6444: ST_TO_ADDR
// if d < 3 then
6445: LD_VAR 0 4
6449: PUSH
6450: LD_INT 3
6452: LESS
6453: IFFALSE 6471
// d := d + 3 else
6455: LD_ADDR_VAR 0 4
6459: PUSH
6460: LD_VAR 0 4
6464: PUSH
6465: LD_INT 3
6467: PLUS
6468: ST_TO_ADDR
6469: GO 6485
// d := d - 3 ;
6471: LD_ADDR_VAR 0 4
6475: PUSH
6476: LD_VAR 0 4
6480: PUSH
6481: LD_INT 3
6483: MINUS
6484: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 381
// un := CreateHuman ;
6497: LD_ADDR_VAR 0 6
6501: PUSH
6502: CALL_OW 44
6506: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6507: LD_ADDR_EXP 43
6511: PUSH
6512: LD_EXP 43
6516: PPUSH
6517: LD_VAR 0 6
6521: PPUSH
6522: CALL 64955 0 2
6526: ST_TO_ADDR
// SetDir ( un , d ) ;
6527: LD_VAR 0 6
6531: PPUSH
6532: LD_VAR 0 4
6536: PPUSH
6537: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6541: LD_VAR 0 6
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 52
// end ;
6555: GO 6427
6557: POP
6558: POP
// for i := 1 to 3 do
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: DOUBLE
6565: LD_INT 1
6567: DEC
6568: ST_TO_ADDR
6569: LD_INT 3
6571: PUSH
6572: FOR_TO
6573: IFFALSE 6634
// begin PrepareEngineer ( false , skill ) ;
6575: LD_INT 0
6577: PPUSH
6578: LD_VAR 0 8
6582: PPUSH
6583: CALL_OW 382
// un := CreateHuman ;
6587: LD_ADDR_VAR 0 6
6591: PUSH
6592: CALL_OW 44
6596: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6597: LD_VAR 0 6
6601: PPUSH
6602: LD_INT 29
6604: PPUSH
6605: LD_INT 0
6607: PPUSH
6608: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6612: LD_ADDR_EXP 43
6616: PUSH
6617: LD_EXP 43
6621: PPUSH
6622: LD_VAR 0 6
6626: PPUSH
6627: CALL 64955 0 2
6631: ST_TO_ADDR
// end ;
6632: GO 6572
6634: POP
6635: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: LD_VAR 0 1
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 21
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PPUSH
6667: CALL_OW 69
6671: PUSH
6672: FOR_IN
6673: IFFALSE 6706
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: LD_OWVAR 67
6698: ARRAY
6699: PPUSH
6700: CALL_OW 241
6704: GO 6672
6706: POP
6707: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_VAR 0 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 32
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6786
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6747: LD_VAR 0 3
6751: PPUSH
6752: LD_INT 5
6754: PUSH
6755: LD_INT 4
6757: PUSH
6758: LD_INT 5
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: PUSH
6766: LD_VAR 0 3
6770: PUSH
6771: LD_INT 3
6773: MOD
6774: PUSH
6775: LD_INT 1
6777: PLUS
6778: ARRAY
6779: PPUSH
6780: CALL_OW 431
6784: GO 6744
6786: POP
6787: POP
// end ;
6788: LD_VAR 0 2
6792: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6793: LD_INT 0
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
6801: PPUSH
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
// enable ;
6822: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6823: LD_ADDR_VAR 0 11
6827: PUSH
6828: LD_INT 81
6830: PUSH
6831: LD_VAR 0 1
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: ST_TO_ADDR
// if tmp then
6845: LD_VAR 0 11
6849: IFFALSE 6870
// enemySide := GetSide ( tmp [ 1 ] ) ;
6851: LD_ADDR_VAR 0 35
6855: PUSH
6856: LD_VAR 0 11
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: CALL_OW 255
6869: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
6870: LD_ADDR_VAR 0 23
6874: PUSH
6875: LD_VAR 0 4
6879: PPUSH
6880: LD_INT 81
6882: PUSH
6883: LD_VAR 0 1
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 70
6896: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6897: LD_ADDR_VAR 0 24
6901: PUSH
6902: LD_VAR 0 5
6906: PPUSH
6907: LD_INT 81
6909: PUSH
6910: LD_VAR 0 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 70
6923: ST_TO_ADDR
// vehicles := amVehicles ;
6924: LD_ADDR_VAR 0 27
6928: PUSH
6929: LD_EXP 38
6933: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6934: LD_ADDR_VAR 0 33
6938: PUSH
6939: LD_VAR 0 3
6943: PPUSH
6944: LD_INT 22
6946: PUSH
6947: LD_VAR 0 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: LD_INT 30
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 30
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PPUSH
6988: CALL_OW 70
6992: ST_TO_ADDR
// if depot then
6993: LD_VAR 0 33
6997: IFFALSE 7013
// depot := depot [ 1 ] ;
6999: LD_ADDR_VAR 0 33
7003: PUSH
7004: LD_VAR 0 33
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: ST_TO_ADDR
// if amTech then
7013: LD_EXP 35
7017: IFFALSE 7176
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7019: LD_ADDR_VAR 0 13
7023: PUSH
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_INT 22
7031: PUSH
7032: LD_VAR 0 1
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 50
7043: PUSH
7044: EMPTY
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 6
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 30
7062: PUSH
7063: LD_INT 7
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 8
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PPUSH
7091: CALL_OW 70
7095: ST_TO_ADDR
// if lab then
7096: LD_VAR 0 13
7100: IFFALSE 7176
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7102: LD_VAR 0 13
7106: PUSH
7107: LD_INT 1
7109: ARRAY
7110: PPUSH
7111: CALL_OW 461
7115: PUSH
7116: LD_INT 2
7118: EQUAL
7119: IFFALSE 7176
// begin for i in amTech do
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: FOR_IN
7132: IFFALSE 7174
// if CanBeResearched ( lab [ 1 ] , i ) then
7134: LD_VAR 0 13
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_VAR 0 10
7147: PPUSH
7148: CALL_OW 430
7152: IFFALSE 7172
// begin AddComResearch ( lab [ 1 ] , i ) ;
7154: LD_VAR 0 13
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 10
7167: PPUSH
7168: CALL_OW 184
// end ;
7172: GO 7131
7174: POP
7175: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7176: LD_ADDR_VAR 0 30
7180: PUSH
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 50
7210: PUSH
7211: EMPTY
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 70
7223: ST_TO_ADDR
// if fac then
7224: LD_VAR 0 30
7228: IFFALSE 7563
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7230: LD_VAR 0 30
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PPUSH
7239: CALL_OW 461
7243: PUSH
7244: LD_INT 2
7246: EQUAL
7247: IFFALSE 7563
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7249: LD_ADDR_VAR 0 31
7253: PUSH
7254: LD_VAR 0 3
7258: PPUSH
7259: LD_INT 2
7261: PUSH
7262: LD_INT 30
7264: PUSH
7265: LD_INT 32
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 30
7274: PUSH
7275: LD_INT 33
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 35
7289: PUSH
7290: LD_INT 0
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 70
7305: ST_TO_ADDR
// if emptyTowers then
7306: LD_VAR 0 31
7310: IFFALSE 7360
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7312: LD_ADDR_VAR 0 32
7316: PUSH
7317: LD_VAR 0 31
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: PPUSH
7326: LD_VAR 0 3
7330: PPUSH
7331: CALL 37591 0 2
7335: ST_TO_ADDR
// if weapon then
7336: LD_VAR 0 32
7340: IFFALSE 7360
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7342: LD_VAR 0 31
7346: PUSH
7347: LD_INT 1
7349: ARRAY
7350: PPUSH
7351: LD_VAR 0 32
7355: PPUSH
7356: CALL_OW 148
// end ; if amConstructList then
7360: LD_EXP 36
7364: IFFALSE 7563
// for i := 1 to Count ( amConstructList ) do
7366: LD_ADDR_VAR 0 10
7370: PUSH
7371: DOUBLE
7372: LD_INT 1
7374: DEC
7375: ST_TO_ADDR
7376: LD_EXP 36
7380: PPUSH
7381: CALL 29346 0 1
7385: PUSH
7386: FOR_TO
7387: IFFALSE 7561
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7389: LD_VAR 0 30
7393: PUSH
7394: LD_INT 1
7396: ARRAY
7397: PPUSH
7398: LD_EXP 36
7402: PUSH
7403: LD_VAR 0 10
7407: ARRAY
7408: PUSH
7409: LD_INT 1
7411: ARRAY
7412: PPUSH
7413: LD_EXP 36
7417: PUSH
7418: LD_VAR 0 10
7422: ARRAY
7423: PUSH
7424: LD_INT 2
7426: ARRAY
7427: PPUSH
7428: LD_EXP 36
7432: PUSH
7433: LD_VAR 0 10
7437: ARRAY
7438: PUSH
7439: LD_INT 3
7441: ARRAY
7442: PPUSH
7443: LD_EXP 36
7447: PUSH
7448: LD_VAR 0 10
7452: ARRAY
7453: PUSH
7454: LD_INT 4
7456: ARRAY
7457: PPUSH
7458: CALL_OW 448
7462: IFFALSE 7559
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7464: LD_VAR 0 30
7468: PUSH
7469: LD_INT 1
7471: ARRAY
7472: PPUSH
7473: LD_EXP 36
7477: PUSH
7478: LD_VAR 0 10
7482: ARRAY
7483: PUSH
7484: LD_INT 1
7486: ARRAY
7487: PPUSH
7488: LD_EXP 36
7492: PUSH
7493: LD_VAR 0 10
7497: ARRAY
7498: PUSH
7499: LD_INT 2
7501: ARRAY
7502: PPUSH
7503: LD_EXP 36
7507: PUSH
7508: LD_VAR 0 10
7512: ARRAY
7513: PUSH
7514: LD_INT 3
7516: ARRAY
7517: PPUSH
7518: LD_EXP 36
7522: PUSH
7523: LD_VAR 0 10
7527: ARRAY
7528: PUSH
7529: LD_INT 4
7531: ARRAY
7532: PPUSH
7533: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7537: LD_ADDR_EXP 36
7541: PUSH
7542: LD_EXP 36
7546: PPUSH
7547: LD_VAR 0 10
7551: PPUSH
7552: CALL_OW 3
7556: ST_TO_ADDR
// break ;
7557: GO 7561
// end ; end ;
7559: GO 7386
7561: POP
7562: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7563: LD_ADDR_VAR 0 11
7567: PUSH
7568: LD_VAR 0 3
7572: PPUSH
7573: LD_INT 22
7575: PUSH
7576: LD_VAR 0 1
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 21
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 3
7597: PUSH
7598: LD_INT 57
7600: PUSH
7601: EMPTY
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: LD_INT 24
7613: PUSH
7614: LD_INT 1000
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 70
7635: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7636: LD_ADDR_VAR 0 18
7640: PUSH
7641: LD_VAR 0 3
7645: PPUSH
7646: CALL_OW 435
7650: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7651: LD_ADDR_VAR 0 15
7655: PUSH
7656: LD_VAR 0 6
7660: PPUSH
7661: LD_INT 25
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 50
7673: PUSH
7674: EMPTY
7675: LIST
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 72
7685: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7686: LD_VAR 0 15
7690: PPUSH
7691: LD_INT 3
7693: PUSH
7694: LD_INT 120
7696: PUSH
7697: LD_INT 7
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 3
7710: PUSH
7711: LD_INT 54
7713: PUSH
7714: EMPTY
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 72
7729: PUSH
7730: LD_VAR 0 30
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: PPUSH
7739: CALL_OW 302
7743: AND
7744: IFFALSE 7803
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7746: LD_VAR 0 15
7750: PPUSH
7751: LD_INT 3
7753: PUSH
7754: LD_INT 120
7756: PUSH
7757: LD_INT 7
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 3
7770: PUSH
7771: LD_INT 54
7773: PUSH
7774: EMPTY
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: PPUSH
7790: LD_VAR 0 30
7794: PUSH
7795: LD_INT 1
7797: ARRAY
7798: PPUSH
7799: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7803: LD_ADDR_VAR 0 19
7807: PUSH
7808: LD_VAR 0 6
7812: PPUSH
7813: LD_INT 25
7815: PUSH
7816: LD_INT 4
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 50
7825: PUSH
7826: EMPTY
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 72
7837: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7838: LD_ADDR_VAR 0 13
7842: PUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: LD_INT 2
7850: PUSH
7851: LD_INT 30
7853: PUSH
7854: LD_INT 6
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 30
7863: PUSH
7864: LD_INT 7
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 30
7873: PUSH
7874: LD_INT 8
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: PPUSH
7887: CALL_OW 70
7891: ST_TO_ADDR
// if sci then
7892: LD_VAR 0 19
7896: IFFALSE 8057
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7898: LD_ADDR_VAR 0 21
7902: PUSH
7903: LD_VAR 0 6
7907: PPUSH
7908: LD_INT 95
7910: PUSH
7911: LD_VAR 0 3
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 120
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PPUSH
7934: CALL_OW 72
7938: ST_TO_ADDR
// if hurtUnits then
7939: LD_VAR 0 21
7943: IFFALSE 8004
// begin for i in sci do
7945: LD_ADDR_VAR 0 10
7949: PUSH
7950: LD_VAR 0 19
7954: PUSH
7955: FOR_IN
7956: IFFALSE 8000
// if IsInUnit ( i ) then
7958: LD_VAR 0 10
7962: PPUSH
7963: CALL_OW 310
7967: IFFALSE 7980
// ComExitBuilding ( i ) else
7969: LD_VAR 0 10
7973: PPUSH
7974: CALL_OW 122
7978: GO 7998
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7980: LD_VAR 0 10
7984: PPUSH
7985: LD_VAR 0 21
7989: PUSH
7990: LD_INT 1
7992: ARRAY
7993: PPUSH
7994: CALL_OW 128
7998: GO 7955
8000: POP
8001: POP
// end else
8002: GO 8057
// if lab then
8004: LD_VAR 0 13
8008: IFFALSE 8057
// begin for i in sci do
8010: LD_ADDR_VAR 0 10
8014: PUSH
8015: LD_VAR 0 19
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8055
// if not IsInUnit ( i ) then
8023: LD_VAR 0 10
8027: PPUSH
8028: CALL_OW 310
8032: NOT
8033: IFFALSE 8053
// ComEnterUnit ( i , lab [ 1 ] ) ;
8035: LD_VAR 0 10
8039: PPUSH
8040: LD_VAR 0 13
8044: PUSH
8045: LD_INT 1
8047: ARRAY
8048: PPUSH
8049: CALL_OW 120
8053: GO 8020
8055: POP
8056: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8057: LD_ADDR_VAR 0 14
8061: PUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: LD_INT 25
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PPUSH
8077: CALL_OW 72
8081: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8082: LD_ADDR_VAR 0 34
8086: PUSH
8087: LD_EXP 37
8091: ST_TO_ADDR
// if eng then
8092: LD_VAR 0 14
8096: IFFALSE 8930
// begin for i in eng do
8098: LD_ADDR_VAR 0 10
8102: PUSH
8103: LD_VAR 0 14
8107: PUSH
8108: FOR_IN
8109: IFFALSE 8928
// begin tag := GetTag ( i ) ;
8111: LD_ADDR_VAR 0 16
8115: PUSH
8116: LD_VAR 0 10
8120: PPUSH
8121: CALL_OW 110
8125: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8126: LD_VAR 0 10
8130: PPUSH
8131: LD_VAR 0 5
8135: PPUSH
8136: CALL_OW 308
8140: IFFALSE 8171
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8142: LD_VAR 0 10
8146: PPUSH
8147: LD_VAR 0 8
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PPUSH
8156: LD_VAR 0 8
8160: PUSH
8161: LD_INT 2
8163: ARRAY
8164: PPUSH
8165: CALL_OW 111
// continue ;
8169: GO 8108
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8171: LD_VAR 0 10
8175: PPUSH
8176: CALL_OW 256
8180: PUSH
8181: LD_INT 800
8183: LESS
8184: PUSH
8185: LD_VAR 0 16
8189: PUSH
8190: LD_INT 1
8192: NONEQUAL
8193: AND
8194: IFFALSE 8244
// begin SetTag ( i , tHeal ) ;
8196: LD_VAR 0 10
8200: PPUSH
8201: LD_INT 1
8203: PPUSH
8204: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8208: LD_VAR 0 10
8212: PPUSH
8213: LD_VAR 0 7
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 7
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 111
// AddComHold ( i ) ;
8235: LD_VAR 0 10
8239: PPUSH
8240: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8244: LD_VAR 0 16
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: PUSH
8253: LD_VAR 0 10
8257: PPUSH
8258: CALL_OW 256
8262: PUSH
8263: LD_INT 1000
8265: EQUAL
8266: AND
8267: IFFALSE 8281
// SetTag ( i , 0 ) ;
8269: LD_VAR 0 10
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 109
// if not tag then
8281: LD_VAR 0 16
8285: NOT
8286: IFFALSE 8453
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8288: LD_ADDR_VAR 0 12
8292: PUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_INT 57
8300: PUSH
8301: EMPTY
8302: LIST
8303: PPUSH
8304: CALL_OW 70
8308: ST_TO_ADDR
// if undone then
8309: LD_VAR 0 12
8313: IFFALSE 8335
// begin ComComplete ( i , undone [ 1 ] ) ;
8315: LD_VAR 0 10
8319: PPUSH
8320: LD_VAR 0 12
8324: PUSH
8325: LD_INT 1
8327: ARRAY
8328: PPUSH
8329: CALL 35444 0 2
// continue ;
8333: GO 8108
// end ; if cr or tmp or buildingsToBuild then
8335: LD_VAR 0 18
8339: PUSH
8340: LD_VAR 0 11
8344: OR
8345: PUSH
8346: LD_VAR 0 34
8350: OR
8351: IFFALSE 8427
// begin if IsInUnit ( i ) then
8353: LD_VAR 0 10
8357: PPUSH
8358: CALL_OW 310
8362: IFFALSE 8373
// ComExitBuilding ( i ) ;
8364: LD_VAR 0 10
8368: PPUSH
8369: CALL_OW 122
// if tmp then
8373: LD_VAR 0 11
8377: IFFALSE 8393
// SetTag ( i , tRepair ) else
8379: LD_VAR 0 10
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: CALL_OW 109
8391: GO 8425
// if cr then
8393: LD_VAR 0 18
8397: IFFALSE 8413
// SetTag ( i , tCrates ) else
8399: LD_VAR 0 10
8403: PPUSH
8404: LD_INT 2
8406: PPUSH
8407: CALL_OW 109
8411: GO 8425
// SetTag ( i , tBuild ) ;
8413: LD_VAR 0 10
8417: PPUSH
8418: LD_INT 5
8420: PPUSH
8421: CALL_OW 109
// end else
8425: GO 8453
// if not IsInUnit ( i ) then
8427: LD_VAR 0 10
8431: PPUSH
8432: CALL_OW 310
8436: NOT
8437: IFFALSE 8453
// ComEnterUnit ( i , depot ) ;
8439: LD_VAR 0 10
8443: PPUSH
8444: LD_VAR 0 33
8448: PPUSH
8449: CALL_OW 120
// end ; if tag = tRepair then
8453: LD_VAR 0 16
8457: PUSH
8458: LD_INT 3
8460: EQUAL
8461: IFFALSE 8567
// begin if IsInUnit ( i ) then
8463: LD_VAR 0 10
8467: PPUSH
8468: CALL_OW 310
8472: IFFALSE 8485
// begin ComExitBuilding ( i ) ;
8474: LD_VAR 0 10
8478: PPUSH
8479: CALL_OW 122
// continue ;
8483: GO 8108
// end ; if not tmp then
8485: LD_VAR 0 11
8489: NOT
8490: IFFALSE 8506
// begin SetTag ( i , 0 ) ;
8492: LD_VAR 0 10
8496: PPUSH
8497: LD_INT 0
8499: PPUSH
8500: CALL_OW 109
// continue ;
8504: GO 8108
// end ; if not HasTask ( i ) then
8506: LD_VAR 0 10
8510: PPUSH
8511: CALL_OW 314
8515: NOT
8516: IFFALSE 8536
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8518: LD_VAR 0 10
8522: PPUSH
8523: LD_VAR 0 11
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: CALL_OW 130
// if not IsInarea ( i , area ) then
8536: LD_VAR 0 10
8540: PPUSH
8541: LD_VAR 0 3
8545: PPUSH
8546: CALL_OW 308
8550: NOT
8551: IFFALSE 8567
// ComMoveToarea ( i , area ) ;
8553: LD_VAR 0 10
8557: PPUSH
8558: LD_VAR 0 3
8562: PPUSH
8563: CALL_OW 113
// end ; if tag = tBuild then
8567: LD_VAR 0 16
8571: PUSH
8572: LD_INT 5
8574: EQUAL
8575: IFFALSE 8781
// begin if IsInUnit ( i ) then
8577: LD_VAR 0 10
8581: PPUSH
8582: CALL_OW 310
8586: IFFALSE 8599
// begin ComExitBuilding ( i ) ;
8588: LD_VAR 0 10
8592: PPUSH
8593: CALL_OW 122
// continue ;
8597: GO 8108
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8599: LD_VAR 0 34
8603: NOT
8604: PUSH
8605: LD_VAR 0 23
8609: OR
8610: PUSH
8611: LD_VAR 0 24
8615: OR
8616: IFFALSE 8634
// begin SetTag ( i , 0 ) ;
8618: LD_VAR 0 10
8622: PPUSH
8623: LD_INT 0
8625: PPUSH
8626: CALL_OW 109
// continue ;
8630: GO 8108
// end else
8632: GO 8673
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8634: LD_VAR 0 33
8638: PPUSH
8639: LD_VAR 0 34
8643: PUSH
8644: LD_INT 1
8646: ARRAY
8647: PUSH
8648: LD_INT 1
8650: ARRAY
8651: PPUSH
8652: CALL 68884 0 2
8656: NOT
8657: IFFALSE 8673
// begin SetTag ( i , 0 ) ;
8659: LD_VAR 0 10
8663: PPUSH
8664: LD_INT 0
8666: PPUSH
8667: CALL_OW 109
// continue ;
8671: GO 8108
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8673: LD_ADDR_VAR 0 12
8677: PUSH
8678: LD_VAR 0 3
8682: PPUSH
8683: LD_INT 57
8685: PUSH
8686: EMPTY
8687: LIST
8688: PPUSH
8689: CALL_OW 70
8693: ST_TO_ADDR
// if undone then
8694: LD_VAR 0 12
8698: IFFALSE 8720
// begin ComComplete ( i , undone [ 1 ] ) ;
8700: LD_VAR 0 10
8704: PPUSH
8705: LD_VAR 0 12
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: CALL 35444 0 2
// continue ;
8718: GO 8108
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8720: LD_VAR 0 10
8724: PPUSH
8725: LD_VAR 0 34
8729: PUSH
8730: LD_INT 1
8732: ARRAY
8733: PUSH
8734: LD_INT 1
8736: ARRAY
8737: PPUSH
8738: LD_VAR 0 34
8742: PUSH
8743: LD_INT 1
8745: ARRAY
8746: PUSH
8747: LD_INT 2
8749: ARRAY
8750: PPUSH
8751: LD_VAR 0 34
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PUSH
8760: LD_INT 3
8762: ARRAY
8763: PPUSH
8764: LD_VAR 0 34
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PUSH
8773: LD_INT 4
8775: ARRAY
8776: PPUSH
8777: CALL_OW 145
// end ; if tag = tCrates then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_INT 2
8788: EQUAL
8789: IFFALSE 8926
// begin if IsInUnit ( i ) then
8791: LD_VAR 0 10
8795: PPUSH
8796: CALL_OW 310
8800: IFFALSE 8813
// begin ComExitBuilding ( i ) ;
8802: LD_VAR 0 10
8806: PPUSH
8807: CALL_OW 122
// continue ;
8811: GO 8108
// end ; if not cr then
8813: LD_VAR 0 18
8817: NOT
8818: IFFALSE 8834
// begin SetTag ( i , 0 ) ;
8820: LD_VAR 0 10
8824: PPUSH
8825: LD_INT 0
8827: PPUSH
8828: CALL_OW 109
// continue ;
8832: GO 8108
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8834: LD_VAR 0 10
8838: PPUSH
8839: CALL_OW 314
8843: NOT
8844: PUSH
8845: LD_INT 81
8847: PUSH
8848: LD_VAR 0 1
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 92
8859: PUSH
8860: LD_VAR 0 18
8864: PUSH
8865: LD_INT 1
8867: ARRAY
8868: PUSH
8869: LD_VAR 0 18
8873: PUSH
8874: LD_INT 2
8876: ARRAY
8877: PUSH
8878: LD_INT 12
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PPUSH
8891: CALL_OW 69
8895: NOT
8896: AND
8897: IFFALSE 8926
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8899: LD_VAR 0 10
8903: PPUSH
8904: LD_VAR 0 18
8908: PUSH
8909: LD_INT 1
8911: ARRAY
8912: PPUSH
8913: LD_VAR 0 18
8917: PUSH
8918: LD_INT 2
8920: ARRAY
8921: PPUSH
8922: CALL_OW 117
// end ; end ;
8926: GO 8108
8928: POP
8929: POP
// end ; if vehicles then
8930: LD_VAR 0 27
8934: IFFALSE 9734
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8936: LD_ADDR_VAR 0 27
8940: PUSH
8941: LD_VAR 0 27
8945: PPUSH
8946: LD_INT 3
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: LD_INT 34
8954: PUSH
8955: LD_INT 13
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: LD_INT 34
8964: PUSH
8965: LD_INT 12
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 50
8983: PUSH
8984: EMPTY
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 72
8995: ST_TO_ADDR
// if vehicles then
8996: LD_VAR 0 27
9000: IFFALSE 9734
// begin for i in vehicles do
9002: LD_ADDR_VAR 0 10
9006: PUSH
9007: LD_VAR 0 27
9011: PUSH
9012: FOR_IN
9013: IFFALSE 9732
// begin tag := GetTag ( i ) ;
9015: LD_ADDR_VAR 0 16
9019: PUSH
9020: LD_VAR 0 10
9024: PPUSH
9025: CALL_OW 110
9029: ST_TO_ADDR
// if not tag then
9030: LD_VAR 0 16
9034: NOT
9035: IFFALSE 9181
// begin if GetControl ( i ) = control_manual then
9037: LD_VAR 0 10
9041: PPUSH
9042: CALL_OW 263
9046: PUSH
9047: LD_INT 1
9049: EQUAL
9050: IFFALSE 9167
// begin drivers := amDrivers ;
9052: LD_ADDR_VAR 0 25
9056: PUSH
9057: LD_EXP 40
9061: ST_TO_ADDR
// if not drivers then
9062: LD_VAR 0 25
9066: NOT
9067: IFFALSE 9147
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9069: LD_ADDR_VAR 0 25
9073: PUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_INT 3
9081: PUSH
9082: LD_INT 120
9084: PUSH
9085: LD_INT 7
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 72
9100: ST_TO_ADDR
// if drivers then
9101: LD_VAR 0 25
9105: IFFALSE 9147
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9107: LD_VAR 0 25
9111: PUSH
9112: LD_INT 1
9114: ARRAY
9115: PPUSH
9116: LD_INT 7
9118: PPUSH
9119: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9123: LD_ADDR_EXP 40
9127: PUSH
9128: LD_EXP 40
9132: PPUSH
9133: LD_VAR 0 25
9137: PUSH
9138: LD_INT 1
9140: ARRAY
9141: PPUSH
9142: CALL 64955 0 2
9146: ST_TO_ADDR
// end ; end ; if drivers then
9147: LD_VAR 0 25
9151: IFFALSE 9165
// SetTag ( i , tBusy ) ;
9153: LD_VAR 0 10
9157: PPUSH
9158: LD_INT 8
9160: PPUSH
9161: CALL_OW 109
// continue ;
9165: GO 9012
// end ; SetTag ( i , tBusy ) ;
9167: LD_VAR 0 10
9171: PPUSH
9172: LD_INT 8
9174: PPUSH
9175: CALL_OW 109
// end else
9179: GO 9730
// if tag = tBusy then
9181: LD_VAR 0 16
9185: PUSH
9186: LD_INT 8
9188: EQUAL
9189: IFFALSE 9401
// begin if GetLives ( i ) = 1000 then
9191: LD_VAR 0 10
9195: PPUSH
9196: CALL_OW 256
9200: PUSH
9201: LD_INT 1000
9203: EQUAL
9204: IFFALSE 9399
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9206: LD_VAR 0 10
9210: PPUSH
9211: CALL_OW 263
9215: PUSH
9216: LD_INT 1
9218: EQUAL
9219: PUSH
9220: LD_VAR 0 10
9224: PPUSH
9225: CALL_OW 311
9229: NOT
9230: AND
9231: IFFALSE 9387
// begin drivers := amDrivers ;
9233: LD_ADDR_VAR 0 25
9237: PUSH
9238: LD_EXP 40
9242: ST_TO_ADDR
// if not drivers then
9243: LD_VAR 0 25
9247: NOT
9248: IFFALSE 9264
// begin SetTag ( i , 0 ) ;
9250: LD_VAR 0 10
9254: PPUSH
9255: LD_INT 0
9257: PPUSH
9258: CALL_OW 109
// continue ;
9262: GO 9012
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9264: LD_VAR 0 25
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: PPUSH
9273: CALL_OW 310
9277: PUSH
9278: LD_VAR 0 25
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: CALL 62559 0 1
9291: NOT
9292: AND
9293: IFFALSE 9308
// ComExitBuilding ( drivers [ 1 ] ) ;
9295: LD_VAR 0 25
9299: PUSH
9300: LD_INT 1
9302: ARRAY
9303: PPUSH
9304: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9308: LD_VAR 0 27
9312: PPUSH
9313: LD_INT 120
9315: PUSH
9316: LD_INT 3
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 72
9327: PUSH
9328: LD_VAR 0 25
9332: PUSH
9333: LD_INT 1
9335: ARRAY
9336: PPUSH
9337: CALL_OW 314
9341: NOT
9342: AND
9343: PUSH
9344: LD_VAR 0 27
9348: PPUSH
9349: LD_INT 120
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL_OW 72
9363: NOT
9364: OR
9365: IFFALSE 9385
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9367: LD_VAR 0 25
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: LD_VAR 0 10
9380: PPUSH
9381: CALL_OW 120
// continue ;
9385: GO 9012
// end ; SetTag ( i , tAttack ) ;
9387: LD_VAR 0 10
9391: PPUSH
9392: LD_INT 13
9394: PPUSH
9395: CALL_OW 109
// end ; end else
9399: GO 9730
// if tag = tAttack then
9401: LD_VAR 0 16
9405: PUSH
9406: LD_INT 13
9408: EQUAL
9409: IFFALSE 9589
// begin enemy := enemyInBase ;
9411: LD_ADDR_VAR 0 22
9415: PUSH
9416: LD_VAR 0 23
9420: ST_TO_ADDR
// if not enemy then
9421: LD_VAR 0 22
9425: NOT
9426: IFFALSE 9438
// enemy := enemyOuterBase ;
9428: LD_ADDR_VAR 0 22
9432: PUSH
9433: LD_VAR 0 24
9437: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9438: LD_VAR 0 22
9442: NOT
9443: PUSH
9444: LD_VAR 0 10
9448: PPUSH
9449: LD_VAR 0 8
9453: PUSH
9454: LD_INT 1
9456: ARRAY
9457: PPUSH
9458: LD_VAR 0 8
9462: PUSH
9463: LD_INT 2
9465: ARRAY
9466: PPUSH
9467: CALL_OW 297
9471: PUSH
9472: LD_INT 10
9474: GREATER
9475: AND
9476: IFFALSE 9507
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9478: LD_VAR 0 10
9482: PPUSH
9483: LD_VAR 0 8
9487: PUSH
9488: LD_INT 1
9490: ARRAY
9491: PPUSH
9492: LD_VAR 0 8
9496: PUSH
9497: LD_INT 2
9499: ARRAY
9500: PPUSH
9501: CALL_OW 111
// continue ;
9505: GO 9012
// end ; if GetLives ( i ) < 650 then
9507: LD_VAR 0 10
9511: PPUSH
9512: CALL_OW 256
9516: PUSH
9517: LD_INT 650
9519: LESS
9520: IFFALSE 9563
// begin SetTag ( i , tVehRepair ) ;
9522: LD_VAR 0 10
9526: PPUSH
9527: LD_INT 9
9529: PPUSH
9530: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9534: LD_VAR 0 10
9538: PPUSH
9539: LD_VAR 0 8
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: LD_VAR 0 8
9552: PUSH
9553: LD_INT 2
9555: ARRAY
9556: PPUSH
9557: CALL_OW 111
// continue ;
9561: GO 9012
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9563: LD_VAR 0 10
9567: PPUSH
9568: LD_VAR 0 22
9572: PPUSH
9573: LD_VAR 0 10
9577: PPUSH
9578: CALL_OW 74
9582: PPUSH
9583: CALL_OW 115
// end else
9587: GO 9730
// if tag = tVehRepair then
9589: LD_VAR 0 16
9593: PUSH
9594: LD_INT 9
9596: EQUAL
9597: IFFALSE 9730
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9599: LD_VAR 0 10
9603: PPUSH
9604: LD_VAR 0 8
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 8
9617: PUSH
9618: LD_INT 2
9620: ARRAY
9621: PPUSH
9622: CALL_OW 297
9626: PUSH
9627: LD_INT 10
9629: GREATER
9630: IFFALSE 9661
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9632: LD_VAR 0 10
9636: PPUSH
9637: LD_VAR 0 8
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: LD_VAR 0 8
9650: PUSH
9651: LD_INT 2
9653: ARRAY
9654: PPUSH
9655: CALL_OW 111
// continue ;
9659: GO 9012
// end ; if GetLives ( i ) = 1000 then
9661: LD_VAR 0 10
9665: PPUSH
9666: CALL_OW 256
9670: PUSH
9671: LD_INT 1000
9673: EQUAL
9674: IFFALSE 9690
// begin SetTag ( i , tBusy ) ;
9676: LD_VAR 0 10
9680: PPUSH
9681: LD_INT 8
9683: PPUSH
9684: CALL_OW 109
// continue ;
9688: GO 9012
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9690: LD_VAR 0 10
9694: PPUSH
9695: CALL_OW 263
9699: PUSH
9700: LD_INT 1
9702: EQUAL
9703: PUSH
9704: LD_VAR 0 10
9708: PPUSH
9709: CALL_OW 311
9713: AND
9714: IFFALSE 9730
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9716: LD_VAR 0 10
9720: PPUSH
9721: CALL_OW 311
9725: PPUSH
9726: CALL 66655 0 1
// end ; end ;
9730: GO 9012
9732: POP
9733: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9734: LD_ADDR_VAR 0 20
9738: PUSH
9739: LD_VAR 0 6
9743: PPUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 25
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 25
9759: PUSH
9760: LD_INT 8
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 25
9769: PUSH
9770: LD_INT 5
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 25
9779: PUSH
9780: LD_INT 9
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 50
9796: PUSH
9797: EMPTY
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 72
9808: ST_TO_ADDR
// if sol then
9809: LD_VAR 0 20
9813: IFFALSE 10321
// begin if enemyInBase then
9815: LD_VAR 0 23
9819: IFFALSE 9998
// begin for i in sol do
9821: LD_ADDR_VAR 0 10
9825: PUSH
9826: LD_VAR 0 20
9830: PUSH
9831: FOR_IN
9832: IFFALSE 9994
// begin tw := IsInUnit ( i ) ;
9834: LD_ADDR_VAR 0 17
9838: PUSH
9839: LD_VAR 0 10
9843: PPUSH
9844: CALL_OW 310
9848: ST_TO_ADDR
// if tw then
9849: LD_VAR 0 17
9853: IFFALSE 9936
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9855: LD_VAR 0 17
9859: PUSH
9860: LD_INT 22
9862: PUSH
9863: LD_VAR 0 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 101
9874: PUSH
9875: LD_VAR 0 35
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 32
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 30
9899: PUSH
9900: LD_INT 31
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 69
9921: IN
9922: NOT
9923: IFFALSE 9934
// ComExitBuilding ( i ) ;
9925: LD_VAR 0 10
9929: PPUSH
9930: CALL_OW 122
// end else
9934: GO 9992
// if IsInarea ( i , area ) then
9936: LD_VAR 0 10
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: CALL_OW 308
9950: IFFALSE 9978
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9952: LD_VAR 0 10
9956: PPUSH
9957: LD_VAR 0 23
9961: PPUSH
9962: LD_VAR 0 10
9966: PPUSH
9967: CALL_OW 74
9971: PPUSH
9972: CALL_OW 115
9976: GO 9992
// ComMoveToarea ( i , area ) ;
9978: LD_VAR 0 10
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: CALL_OW 113
// end ;
9992: GO 9831
9994: POP
9995: POP
// end else
9996: GO 10321
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9998: LD_ADDR_VAR 0 29
10002: PUSH
10003: LD_VAR 0 3
10007: PPUSH
10008: LD_INT 3
10010: PUSH
10011: LD_INT 62
10013: PUSH
10014: EMPTY
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 30
10026: PUSH
10027: LD_INT 32
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 30
10036: PUSH
10037: LD_INT 4
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 30
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 30
10056: PUSH
10057: LD_INT 31
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 70
10079: ST_TO_ADDR
// if empty then
10080: LD_VAR 0 29
10084: IFFALSE 10101
// empty := ReverseArray ( empty ) ;
10086: LD_ADDR_VAR 0 29
10090: PUSH
10091: LD_VAR 0 29
10095: PPUSH
10096: CALL 60222 0 1
10100: ST_TO_ADDR
// for i in sol do
10101: LD_ADDR_VAR 0 10
10105: PUSH
10106: LD_VAR 0 20
10110: PUSH
10111: FOR_IN
10112: IFFALSE 10319
// begin tag := GetTag ( i ) ;
10114: LD_ADDR_VAR 0 16
10118: PUSH
10119: LD_VAR 0 10
10123: PPUSH
10124: CALL_OW 110
10128: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10129: LD_VAR 0 10
10133: PPUSH
10134: CALL_OW 256
10138: PUSH
10139: LD_INT 1000
10141: LESS
10142: PUSH
10143: LD_VAR 0 16
10147: PUSH
10148: LD_INT 1
10150: NONEQUAL
10151: AND
10152: IFFALSE 10204
// begin SetTag ( i , tHeal ) ;
10154: LD_VAR 0 10
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10166: LD_VAR 0 10
10170: PPUSH
10171: LD_VAR 0 7
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: LD_VAR 0 7
10184: PUSH
10185: LD_INT 2
10187: ARRAY
10188: PPUSH
10189: CALL_OW 111
// AddComHold ( i ) ;
10193: LD_VAR 0 10
10197: PPUSH
10198: CALL_OW 200
// continue ;
10202: GO 10111
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10204: LD_VAR 0 10
10208: PPUSH
10209: CALL_OW 256
10213: PUSH
10214: LD_INT 1000
10216: EQUAL
10217: PUSH
10218: LD_VAR 0 16
10222: PUSH
10223: LD_INT 1
10225: EQUAL
10226: AND
10227: IFFALSE 10243
// begin SetTag ( i , 0 ) ;
10229: LD_VAR 0 10
10233: PPUSH
10234: LD_INT 0
10236: PPUSH
10237: CALL_OW 109
// continue ;
10241: GO 10111
// end ; if HasTask ( i ) then
10243: LD_VAR 0 10
10247: PPUSH
10248: CALL_OW 314
10252: IFFALSE 10256
// continue ;
10254: GO 10111
// if not IsInUnit ( i ) and not tag and empty then
10256: LD_VAR 0 10
10260: PPUSH
10261: CALL_OW 310
10265: NOT
10266: PUSH
10267: LD_VAR 0 16
10271: NOT
10272: AND
10273: PUSH
10274: LD_VAR 0 29
10278: AND
10279: IFFALSE 10317
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10281: LD_VAR 0 10
10285: PPUSH
10286: LD_VAR 0 29
10290: PUSH
10291: LD_INT 1
10293: ARRAY
10294: PPUSH
10295: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10299: LD_ADDR_VAR 0 29
10303: PUSH
10304: LD_VAR 0 29
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 3
10316: ST_TO_ADDR
// end ; end ;
10317: GO 10111
10319: POP
10320: POP
// end ; end ; end ;
10321: LD_VAR 0 9
10325: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10326: LD_EXP 42
10330: PPUSH
10331: LD_INT 50
10333: PUSH
10334: EMPTY
10335: LIST
10336: PPUSH
10337: CALL_OW 72
10341: IFFALSE 10397
10343: GO 10345
10345: DISABLE
// begin enable ;
10346: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10347: LD_EXP 3
10351: PUSH
10352: LD_INT 1
10354: ARRAY
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: LD_INT 3
10361: PPUSH
10362: LD_INT 33
10364: PPUSH
10365: LD_INT 4
10367: PPUSH
10368: LD_EXP 42
10372: PPUSH
10373: LD_INT 27
10375: PUSH
10376: LD_INT 33
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 17
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL 6793 0 8
// end ;
10397: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 302
10405: PUSH
10406: LD_EXP 36
10410: NOT
10411: AND
10412: IFFALSE 10482
10414: GO 10416
10416: DISABLE
// begin enable ;
10417: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10418: LD_ADDR_EXP 36
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 5
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 3
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: LD_INT 4
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 4
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: LD_INT 6
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: ST_TO_ADDR
// end ; end_of_file
10482: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10483: LD_INT 0
10485: PPUSH
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
10491: PPUSH
10492: PPUSH
10493: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10494: LD_ADDR_EXP 45
10498: PUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL 27307 0 3
10514: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10515: LD_ADDR_EXP 46
10519: PUSH
10520: LD_INT 13
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: LD_INT 27
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 13
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 27
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 13
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: LD_INT 26
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 13
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: LD_INT 1
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 13
10594: PUSH
10595: LD_INT 1
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: LD_INT 27
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: ST_TO_ADDR
// arBuildings := [ ] ;
10617: LD_ADDR_EXP 47
10621: PUSH
10622: EMPTY
10623: ST_TO_ADDR
// arVehicles := [ ] ;
10624: LD_ADDR_EXP 48
10628: PUSH
10629: EMPTY
10630: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10631: LD_ADDR_EXP 49
10635: PUSH
10636: EMPTY
10637: ST_TO_ADDR
// arDrivers := [ ] ;
10638: LD_ADDR_EXP 50
10642: PUSH
10643: EMPTY
10644: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10645: LD_ADDR_EXP 52
10649: PUSH
10650: LD_INT 2
10652: ST_TO_ADDR
// arMinesList := [ ] ;
10653: LD_ADDR_EXP 53
10657: PUSH
10658: EMPTY
10659: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10660: LD_ADDR_EXP 51
10664: PUSH
10665: LD_INT 8
10667: PUSH
10668: LD_INT 11
10670: PUSH
10671: LD_INT 12
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: LD_OWVAR 67
10683: ARRAY
10684: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 24
10692: PPUSH
10693: CALL 69900 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10697: LD_INT 23
10699: PPUSH
10700: LD_INT 7
10702: PUSH
10703: LD_INT 9
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: LD_OWVAR 67
10718: ARRAY
10719: PPUSH
10720: CALL 11285 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10724: LD_ADDR_VAR 0 8
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: LD_INT 4
10734: PUSH
10735: LD_INT 5
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_OWVAR 67
10747: ARRAY
10748: ST_TO_ADDR
// uc_side := side ;
10749: LD_ADDR_OWVAR 20
10753: PUSH
10754: LD_VAR 0 1
10758: ST_TO_ADDR
// uc_nation := 2 ;
10759: LD_ADDR_OWVAR 21
10763: PUSH
10764: LD_INT 2
10766: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10767: LD_ADDR_EXP 54
10771: PUSH
10772: LD_INT 32
10774: PPUSH
10775: LD_INT 5
10777: PPUSH
10778: LD_STRING 
10780: PPUSH
10781: LD_VAR 0 8
10785: PPUSH
10786: LD_INT 800
10788: PUSH
10789: LD_INT 120
10791: PUSH
10792: LD_INT 0
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: LD_INT 10
10802: PUSH
10803: LD_INT 11
10805: PUSH
10806: LD_INT 12
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_OWVAR 67
10818: ARRAY
10819: PUSH
10820: LD_INT 4
10822: PUSH
10823: LD_INT 6
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL 35905 0 6
10839: ST_TO_ADDR
// arForceTmp := [ ] ;
10840: LD_ADDR_EXP 55
10844: PUSH
10845: EMPTY
10846: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10847: LD_ADDR_VAR 0 3
10851: PUSH
10852: LD_INT 22
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: LD_INT 31
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 3
10876: PUSH
10877: LD_INT 95
10879: PUSH
10880: LD_INT 5
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 58
10893: PUSH
10894: EMPTY
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: PUSH
10908: FOR_IN
10909: IFFALSE 11038
// begin d := GetDir ( i ) ;
10911: LD_ADDR_VAR 0 4
10915: PUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: CALL_OW 254
10925: ST_TO_ADDR
// if d < 3 then
10926: LD_VAR 0 4
10930: PUSH
10931: LD_INT 3
10933: LESS
10934: IFFALSE 10952
// d := d + 3 else
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: LD_INT 3
10948: PLUS
10949: ST_TO_ADDR
10950: GO 10966
// d := d - 3 ;
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_VAR 0 4
10961: PUSH
10962: LD_INT 3
10964: MINUS
10965: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10966: LD_INT 0
10968: PPUSH
10969: LD_VAR 0 8
10973: PPUSH
10974: CALL_OW 381
// un := CreateHuman ;
10978: LD_ADDR_VAR 0 6
10982: PUSH
10983: CALL_OW 44
10987: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10988: LD_ADDR_EXP 55
10992: PUSH
10993: LD_EXP 55
10997: PPUSH
10998: LD_VAR 0 6
11002: PPUSH
11003: CALL 64955 0 2
11007: ST_TO_ADDR
// SetDir ( un , d ) ;
11008: LD_VAR 0 6
11012: PPUSH
11013: LD_VAR 0 4
11017: PPUSH
11018: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11022: LD_VAR 0 6
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: CALL_OW 52
// end ;
11036: GO 10908
11038: POP
11039: POP
// for i := 1 to Difficulty do
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_OWVAR 67
11054: PUSH
11055: FOR_TO
11056: IFFALSE 11122
// begin PrepareSoldier ( false , skill ) ;
11058: LD_INT 0
11060: PPUSH
11061: LD_VAR 0 8
11065: PPUSH
11066: CALL_OW 381
// un := CreateHuman ;
11070: LD_ADDR_VAR 0 6
11074: PUSH
11075: CALL_OW 44
11079: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11080: LD_ADDR_EXP 55
11084: PUSH
11085: LD_EXP 55
11089: PPUSH
11090: LD_VAR 0 6
11094: PPUSH
11095: CALL 64955 0 2
11099: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11100: LD_VAR 0 6
11104: PPUSH
11105: LD_INT 215
11107: PPUSH
11108: LD_INT 102
11110: PPUSH
11111: CALL_OW 428
11115: PPUSH
11116: CALL_OW 52
// end ;
11120: GO 11055
11122: POP
11123: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_VAR 0 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 69
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11194
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 3
11170: PUSH
11171: LD_INT 5
11173: PUSH
11174: LD_INT 7
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: PUSH
11182: LD_OWVAR 67
11186: ARRAY
11187: PPUSH
11188: CALL_OW 241
11192: GO 11160
11194: POP
11195: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_VAR 0 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 30
11215: PUSH
11216: LD_INT 32
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: PUSH
11232: FOR_IN
11233: IFFALSE 11278
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11235: LD_VAR 0 3
11239: PPUSH
11240: LD_INT 27
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 24
11248: PUSH
11249: LD_INT 27
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 4
11265: MOD
11266: PUSH
11267: LD_INT 1
11269: PLUS
11270: ARRAY
11271: PPUSH
11272: CALL_OW 431
11276: GO 11232
11278: POP
11279: POP
// end ;
11280: LD_VAR 0 2
11284: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11291: LD_ADDR_VAR 0 5
11295: PUSH
11296: LD_VAR 0 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 517
11308: ST_TO_ADDR
// if not tmp then
11309: LD_VAR 0 5
11313: NOT
11314: IFFALSE 11318
// exit ;
11316: GO 11560
// for i := 1 to n do
11318: LD_ADDR_VAR 0 4
11322: PUSH
11323: DOUBLE
11324: LD_INT 1
11326: DEC
11327: ST_TO_ADDR
11328: LD_VAR 0 2
11332: PUSH
11333: FOR_TO
11334: IFFALSE 11558
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11336: LD_ADDR_VAR 0 6
11340: PUSH
11341: LD_INT 1
11343: PPUSH
11344: LD_VAR 0 5
11348: PUSH
11349: LD_INT 1
11351: ARRAY
11352: PPUSH
11353: CALL_OW 12
11357: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11358: LD_VAR 0 5
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PUSH
11367: LD_VAR 0 6
11371: ARRAY
11372: PPUSH
11373: LD_VAR 0 5
11377: PUSH
11378: LD_INT 2
11380: ARRAY
11381: PUSH
11382: LD_VAR 0 6
11386: ARRAY
11387: PPUSH
11388: LD_EXP 3
11392: PUSH
11393: LD_INT 2
11395: ARRAY
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11404: LD_ADDR_EXP 53
11408: PUSH
11409: LD_EXP 53
11413: PPUSH
11414: LD_EXP 53
11418: PUSH
11419: LD_INT 1
11421: PLUS
11422: PPUSH
11423: LD_VAR 0 5
11427: PUSH
11428: LD_INT 1
11430: ARRAY
11431: PUSH
11432: LD_VAR 0 6
11436: ARRAY
11437: PPUSH
11438: CALL_OW 2
11442: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11443: LD_ADDR_EXP 53
11447: PUSH
11448: LD_EXP 53
11452: PPUSH
11453: LD_EXP 53
11457: PUSH
11458: LD_INT 1
11460: PLUS
11461: PPUSH
11462: LD_VAR 0 5
11466: PUSH
11467: LD_INT 2
11469: ARRAY
11470: PUSH
11471: LD_VAR 0 6
11475: ARRAY
11476: PPUSH
11477: CALL_OW 2
11481: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11482: LD_ADDR_VAR 0 5
11486: PUSH
11487: LD_VAR 0 5
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_VAR 0 5
11499: PUSH
11500: LD_INT 1
11502: ARRAY
11503: PPUSH
11504: LD_VAR 0 6
11508: PPUSH
11509: CALL_OW 3
11513: PPUSH
11514: CALL_OW 1
11518: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11519: LD_ADDR_VAR 0 5
11523: PUSH
11524: LD_VAR 0 5
11528: PPUSH
11529: LD_INT 2
11531: PPUSH
11532: LD_VAR 0 5
11536: PUSH
11537: LD_INT 2
11539: ARRAY
11540: PPUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: CALL_OW 3
11550: PPUSH
11551: CALL_OW 1
11555: ST_TO_ADDR
// end ;
11556: GO 11333
11558: POP
11559: POP
// end ;
11560: LD_VAR 0 3
11564: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11565: LD_INT 0
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// enable ;
11594: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11595: LD_ADDR_VAR 0 10
11599: PUSH
11600: LD_INT 81
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PPUSH
11612: CALL_OW 69
11616: ST_TO_ADDR
// if tmp then
11617: LD_VAR 0 10
11621: IFFALSE 11642
// enemySide := GetSide ( tmp [ 1 ] ) ;
11623: LD_ADDR_VAR 0 34
11627: PUSH
11628: LD_VAR 0 10
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: CALL_OW 255
11641: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11642: LD_ADDR_VAR 0 22
11646: PUSH
11647: LD_VAR 0 3
11651: PPUSH
11652: LD_INT 81
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 70
11668: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11669: LD_ADDR_VAR 0 23
11673: PUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: LD_INT 81
11681: PUSH
11682: LD_VAR 0 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: ST_TO_ADDR
// vehicles := arVehicles ;
11696: LD_ADDR_VAR 0 26
11700: PUSH
11701: LD_EXP 48
11705: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11706: LD_ADDR_VAR 0 32
11710: PUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 22
11718: PUSH
11719: LD_VAR 0 1
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 30
11733: PUSH
11734: LD_INT 0
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 30
11743: PUSH
11744: LD_INT 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL_OW 70
11764: ST_TO_ADDR
// if depot then
11765: LD_VAR 0 32
11769: IFFALSE 11785
// depot := depot [ 1 ] ;
11771: LD_ADDR_VAR 0 32
11775: PUSH
11776: LD_VAR 0 32
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: ST_TO_ADDR
// if arTech then
11785: LD_EXP 45
11789: IFFALSE 11948
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11791: LD_ADDR_VAR 0 12
11795: PUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 22
11803: PUSH
11804: LD_VAR 0 1
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 50
11815: PUSH
11816: EMPTY
11817: LIST
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 30
11824: PUSH
11825: LD_INT 6
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 30
11834: PUSH
11835: LD_INT 7
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 30
11844: PUSH
11845: LD_INT 8
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 70
11867: ST_TO_ADDR
// if lab then
11868: LD_VAR 0 12
11872: IFFALSE 11948
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11874: LD_VAR 0 12
11878: PUSH
11879: LD_INT 1
11881: ARRAY
11882: PPUSH
11883: CALL_OW 461
11887: PUSH
11888: LD_INT 2
11890: EQUAL
11891: IFFALSE 11948
// begin for i in arTech do
11893: LD_ADDR_VAR 0 9
11897: PUSH
11898: LD_EXP 45
11902: PUSH
11903: FOR_IN
11904: IFFALSE 11946
// if CanBeResearched ( lab [ 1 ] , i ) then
11906: LD_VAR 0 12
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: LD_VAR 0 9
11919: PPUSH
11920: CALL_OW 430
11924: IFFALSE 11944
// begin AddComResearch ( lab [ 1 ] , i ) ;
11926: LD_VAR 0 12
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PPUSH
11935: LD_VAR 0 9
11939: PPUSH
11940: CALL_OW 184
// end ;
11944: GO 11903
11946: POP
11947: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11948: LD_ADDR_VAR 0 29
11952: PUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 22
11960: PUSH
11961: LD_VAR 0 1
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 3
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 50
11982: PUSH
11983: EMPTY
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 70
11995: ST_TO_ADDR
// if fac then
11996: LD_VAR 0 29
12000: IFFALSE 12335
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12002: LD_VAR 0 29
12006: PUSH
12007: LD_INT 1
12009: ARRAY
12010: PPUSH
12011: CALL_OW 461
12015: PUSH
12016: LD_INT 2
12018: EQUAL
12019: IFFALSE 12335
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12021: LD_ADDR_VAR 0 30
12025: PUSH
12026: LD_VAR 0 3
12030: PPUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 30
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 33
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 35
12061: PUSH
12062: LD_INT 0
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 70
12077: ST_TO_ADDR
// if emptyTowers then
12078: LD_VAR 0 30
12082: IFFALSE 12132
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12084: LD_ADDR_VAR 0 31
12088: PUSH
12089: LD_VAR 0 30
12093: PUSH
12094: LD_INT 1
12096: ARRAY
12097: PPUSH
12098: LD_VAR 0 3
12102: PPUSH
12103: CALL 37591 0 2
12107: ST_TO_ADDR
// if weapon then
12108: LD_VAR 0 31
12112: IFFALSE 12132
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12114: LD_VAR 0 30
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_VAR 0 31
12127: PPUSH
12128: CALL_OW 148
// end ; if arConstructList then
12132: LD_EXP 46
12136: IFFALSE 12335
// for i := 1 to Count ( arConstructList ) do
12138: LD_ADDR_VAR 0 9
12142: PUSH
12143: DOUBLE
12144: LD_INT 1
12146: DEC
12147: ST_TO_ADDR
12148: LD_EXP 46
12152: PPUSH
12153: CALL 29346 0 1
12157: PUSH
12158: FOR_TO
12159: IFFALSE 12333
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12161: LD_VAR 0 29
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: LD_EXP 46
12174: PUSH
12175: LD_VAR 0 9
12179: ARRAY
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: PPUSH
12185: LD_EXP 46
12189: PUSH
12190: LD_VAR 0 9
12194: ARRAY
12195: PUSH
12196: LD_INT 2
12198: ARRAY
12199: PPUSH
12200: LD_EXP 46
12204: PUSH
12205: LD_VAR 0 9
12209: ARRAY
12210: PUSH
12211: LD_INT 3
12213: ARRAY
12214: PPUSH
12215: LD_EXP 46
12219: PUSH
12220: LD_VAR 0 9
12224: ARRAY
12225: PUSH
12226: LD_INT 4
12228: ARRAY
12229: PPUSH
12230: CALL_OW 448
12234: IFFALSE 12331
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12236: LD_VAR 0 29
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: LD_EXP 46
12249: PUSH
12250: LD_VAR 0 9
12254: ARRAY
12255: PUSH
12256: LD_INT 1
12258: ARRAY
12259: PPUSH
12260: LD_EXP 46
12264: PUSH
12265: LD_VAR 0 9
12269: ARRAY
12270: PUSH
12271: LD_INT 2
12273: ARRAY
12274: PPUSH
12275: LD_EXP 46
12279: PUSH
12280: LD_VAR 0 9
12284: ARRAY
12285: PUSH
12286: LD_INT 3
12288: ARRAY
12289: PPUSH
12290: LD_EXP 46
12294: PUSH
12295: LD_VAR 0 9
12299: ARRAY
12300: PUSH
12301: LD_INT 4
12303: ARRAY
12304: PPUSH
12305: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12309: LD_ADDR_EXP 46
12313: PUSH
12314: LD_EXP 46
12318: PPUSH
12319: LD_VAR 0 9
12323: PPUSH
12324: CALL_OW 3
12328: ST_TO_ADDR
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12158
12333: POP
12334: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12335: LD_ADDR_VAR 0 10
12339: PUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 22
12347: PUSH
12348: LD_VAR 0 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 3
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 3
12369: PUSH
12370: LD_INT 57
12372: PUSH
12373: EMPTY
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: LD_INT 24
12385: PUSH
12386: LD_INT 1000
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PPUSH
12403: CALL_OW 70
12407: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12408: LD_ADDR_VAR 0 17
12412: PUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: CALL_OW 435
12422: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12423: LD_ADDR_VAR 0 14
12427: PUSH
12428: LD_VAR 0 5
12432: PPUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 3
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 50
12445: PUSH
12446: EMPTY
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12458: LD_VAR 0 14
12462: PPUSH
12463: LD_INT 3
12465: PUSH
12466: LD_INT 120
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 3
12482: PUSH
12483: LD_INT 54
12485: PUSH
12486: EMPTY
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 72
12501: PUSH
12502: LD_VAR 0 29
12506: PUSH
12507: LD_INT 1
12509: ARRAY
12510: PPUSH
12511: CALL_OW 302
12515: AND
12516: IFFALSE 12575
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12518: LD_VAR 0 14
12522: PPUSH
12523: LD_INT 3
12525: PUSH
12526: LD_INT 120
12528: PUSH
12529: LD_INT 7
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: LD_INT 54
12545: PUSH
12546: EMPTY
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 72
12561: PPUSH
12562: LD_VAR 0 29
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12575: LD_ADDR_VAR 0 18
12579: PUSH
12580: LD_VAR 0 5
12584: PPUSH
12585: LD_INT 25
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 50
12597: PUSH
12598: EMPTY
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 72
12609: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12610: LD_ADDR_VAR 0 12
12614: PUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 30
12625: PUSH
12626: LD_INT 6
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 30
12635: PUSH
12636: LD_INT 7
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 30
12645: PUSH
12646: LD_INT 8
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 70
12663: ST_TO_ADDR
// if sci then
12664: LD_VAR 0 18
12668: IFFALSE 12829
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12670: LD_ADDR_VAR 0 20
12674: PUSH
12675: LD_VAR 0 5
12679: PPUSH
12680: LD_INT 95
12682: PUSH
12683: LD_VAR 0 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 120
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 72
12710: ST_TO_ADDR
// if hurtUnits then
12711: LD_VAR 0 20
12715: IFFALSE 12776
// begin for i in sci do
12717: LD_ADDR_VAR 0 9
12721: PUSH
12722: LD_VAR 0 18
12726: PUSH
12727: FOR_IN
12728: IFFALSE 12772
// if IsInUnit ( i ) then
12730: LD_VAR 0 9
12734: PPUSH
12735: CALL_OW 310
12739: IFFALSE 12752
// ComExitBuilding ( i ) else
12741: LD_VAR 0 9
12745: PPUSH
12746: CALL_OW 122
12750: GO 12770
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12752: LD_VAR 0 9
12756: PPUSH
12757: LD_VAR 0 20
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PPUSH
12766: CALL_OW 128
12770: GO 12727
12772: POP
12773: POP
// end else
12774: GO 12829
// if lab then
12776: LD_VAR 0 12
12780: IFFALSE 12829
// begin for i in sci do
12782: LD_ADDR_VAR 0 9
12786: PUSH
12787: LD_VAR 0 18
12791: PUSH
12792: FOR_IN
12793: IFFALSE 12827
// if not IsInUnit ( i ) then
12795: LD_VAR 0 9
12799: PPUSH
12800: CALL_OW 310
12804: NOT
12805: IFFALSE 12825
// ComEnterUnit ( i , lab [ 1 ] ) ;
12807: LD_VAR 0 9
12811: PPUSH
12812: LD_VAR 0 12
12816: PUSH
12817: LD_INT 1
12819: ARRAY
12820: PPUSH
12821: CALL_OW 120
12825: GO 12792
12827: POP
12828: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12829: LD_ADDR_VAR 0 13
12833: PUSH
12834: LD_VAR 0 5
12838: PPUSH
12839: LD_INT 25
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 72
12853: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12854: LD_ADDR_VAR 0 33
12858: PUSH
12859: LD_EXP 47
12863: ST_TO_ADDR
// if eng then
12864: LD_VAR 0 13
12868: IFFALSE 13702
// begin for i in eng do
12870: LD_ADDR_VAR 0 9
12874: PUSH
12875: LD_VAR 0 13
12879: PUSH
12880: FOR_IN
12881: IFFALSE 13700
// begin tag := GetTag ( i ) ;
12883: LD_ADDR_VAR 0 15
12887: PUSH
12888: LD_VAR 0 9
12892: PPUSH
12893: CALL_OW 110
12897: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12898: LD_VAR 0 9
12902: PPUSH
12903: LD_VAR 0 4
12907: PPUSH
12908: CALL_OW 308
12912: IFFALSE 12943
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12914: LD_VAR 0 9
12918: PPUSH
12919: LD_VAR 0 7
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: LD_VAR 0 7
12932: PUSH
12933: LD_INT 2
12935: ARRAY
12936: PPUSH
12937: CALL_OW 111
// continue ;
12941: GO 12880
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12943: LD_VAR 0 9
12947: PPUSH
12948: CALL_OW 256
12952: PUSH
12953: LD_INT 800
12955: LESS
12956: PUSH
12957: LD_VAR 0 15
12961: PUSH
12962: LD_INT 1
12964: NONEQUAL
12965: AND
12966: IFFALSE 13016
// begin SetTag ( i , tHeal ) ;
12968: LD_VAR 0 9
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12980: LD_VAR 0 9
12984: PPUSH
12985: LD_VAR 0 6
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_VAR 0 6
12998: PUSH
12999: LD_INT 2
13001: ARRAY
13002: PPUSH
13003: CALL_OW 111
// AddComHold ( i ) ;
13007: LD_VAR 0 9
13011: PPUSH
13012: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13016: LD_VAR 0 15
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: PUSH
13025: LD_VAR 0 9
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: EQUAL
13038: AND
13039: IFFALSE 13053
// SetTag ( i , 0 ) ;
13041: LD_VAR 0 9
13045: PPUSH
13046: LD_INT 0
13048: PPUSH
13049: CALL_OW 109
// if not tag then
13053: LD_VAR 0 15
13057: NOT
13058: IFFALSE 13225
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13060: LD_ADDR_VAR 0 11
13064: PUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 57
13072: PUSH
13073: EMPTY
13074: LIST
13075: PPUSH
13076: CALL_OW 70
13080: ST_TO_ADDR
// if undone then
13081: LD_VAR 0 11
13085: IFFALSE 13107
// begin ComComplete ( i , undone [ 1 ] ) ;
13087: LD_VAR 0 9
13091: PPUSH
13092: LD_VAR 0 11
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL 35444 0 2
// continue ;
13105: GO 12880
// end ; if cr or tmp or buildingsToBuild then
13107: LD_VAR 0 17
13111: PUSH
13112: LD_VAR 0 10
13116: OR
13117: PUSH
13118: LD_VAR 0 33
13122: OR
13123: IFFALSE 13199
// begin if IsInUnit ( i ) then
13125: LD_VAR 0 9
13129: PPUSH
13130: CALL_OW 310
13134: IFFALSE 13145
// ComExitBuilding ( i ) ;
13136: LD_VAR 0 9
13140: PPUSH
13141: CALL_OW 122
// if tmp then
13145: LD_VAR 0 10
13149: IFFALSE 13165
// SetTag ( i , tRepair ) else
13151: LD_VAR 0 9
13155: PPUSH
13156: LD_INT 3
13158: PPUSH
13159: CALL_OW 109
13163: GO 13197
// if cr then
13165: LD_VAR 0 17
13169: IFFALSE 13185
// SetTag ( i , tCrates ) else
13171: LD_VAR 0 9
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 109
13183: GO 13197
// SetTag ( i , tBuild ) ;
13185: LD_VAR 0 9
13189: PPUSH
13190: LD_INT 5
13192: PPUSH
13193: CALL_OW 109
// end else
13197: GO 13225
// if not IsInUnit ( i ) then
13199: LD_VAR 0 9
13203: PPUSH
13204: CALL_OW 310
13208: NOT
13209: IFFALSE 13225
// ComEnterUnit ( i , depot ) ;
13211: LD_VAR 0 9
13215: PPUSH
13216: LD_VAR 0 32
13220: PPUSH
13221: CALL_OW 120
// end ; if tag = tRepair then
13225: LD_VAR 0 15
13229: PUSH
13230: LD_INT 3
13232: EQUAL
13233: IFFALSE 13339
// begin if IsInUnit ( i ) then
13235: LD_VAR 0 9
13239: PPUSH
13240: CALL_OW 310
13244: IFFALSE 13257
// begin ComExitBuilding ( i ) ;
13246: LD_VAR 0 9
13250: PPUSH
13251: CALL_OW 122
// continue ;
13255: GO 12880
// end ; if not tmp then
13257: LD_VAR 0 10
13261: NOT
13262: IFFALSE 13278
// begin SetTag ( i , 0 ) ;
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 109
// continue ;
13276: GO 12880
// end ; if not HasTask ( i ) then
13278: LD_VAR 0 9
13282: PPUSH
13283: CALL_OW 314
13287: NOT
13288: IFFALSE 13308
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13290: LD_VAR 0 9
13294: PPUSH
13295: LD_VAR 0 10
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: CALL_OW 130
// if not IsInArea ( i , area ) then
13308: LD_VAR 0 9
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: CALL_OW 308
13322: NOT
13323: IFFALSE 13339
// ComMoveToArea ( i , area ) ;
13325: LD_VAR 0 9
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: CALL_OW 113
// end ; if tag = tBuild then
13339: LD_VAR 0 15
13343: PUSH
13344: LD_INT 5
13346: EQUAL
13347: IFFALSE 13553
// begin if IsInUnit ( i ) then
13349: LD_VAR 0 9
13353: PPUSH
13354: CALL_OW 310
13358: IFFALSE 13371
// begin ComExitBuilding ( i ) ;
13360: LD_VAR 0 9
13364: PPUSH
13365: CALL_OW 122
// continue ;
13369: GO 12880
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13371: LD_VAR 0 33
13375: NOT
13376: PUSH
13377: LD_VAR 0 22
13381: OR
13382: PUSH
13383: LD_VAR 0 23
13387: OR
13388: IFFALSE 13406
// begin SetTag ( i , 0 ) ;
13390: LD_VAR 0 9
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 109
// continue ;
13402: GO 12880
// end else
13404: GO 13445
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13406: LD_VAR 0 32
13410: PPUSH
13411: LD_VAR 0 33
13415: PUSH
13416: LD_INT 1
13418: ARRAY
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: CALL 68884 0 2
13428: NOT
13429: IFFALSE 13445
// begin SetTag ( i , 0 ) ;
13431: LD_VAR 0 9
13435: PPUSH
13436: LD_INT 0
13438: PPUSH
13439: CALL_OW 109
// continue ;
13443: GO 12880
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13445: LD_ADDR_VAR 0 11
13449: PUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 57
13457: PUSH
13458: EMPTY
13459: LIST
13460: PPUSH
13461: CALL_OW 70
13465: ST_TO_ADDR
// if undone then
13466: LD_VAR 0 11
13470: IFFALSE 13492
// begin ComComplete ( i , undone [ 1 ] ) ;
13472: LD_VAR 0 9
13476: PPUSH
13477: LD_VAR 0 11
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: CALL 35444 0 2
// continue ;
13490: GO 12880
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13492: LD_VAR 0 9
13496: PPUSH
13497: LD_VAR 0 33
13501: PUSH
13502: LD_INT 1
13504: ARRAY
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_VAR 0 33
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: LD_VAR 0 33
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PUSH
13532: LD_INT 3
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 33
13540: PUSH
13541: LD_INT 1
13543: ARRAY
13544: PUSH
13545: LD_INT 4
13547: ARRAY
13548: PPUSH
13549: CALL_OW 145
// end ; if tag = tCrates then
13553: LD_VAR 0 15
13557: PUSH
13558: LD_INT 2
13560: EQUAL
13561: IFFALSE 13698
// begin if IsInUnit ( i ) then
13563: LD_VAR 0 9
13567: PPUSH
13568: CALL_OW 310
13572: IFFALSE 13585
// begin ComExitBuilding ( i ) ;
13574: LD_VAR 0 9
13578: PPUSH
13579: CALL_OW 122
// continue ;
13583: GO 12880
// end ; if not cr then
13585: LD_VAR 0 17
13589: NOT
13590: IFFALSE 13606
// begin SetTag ( i , 0 ) ;
13592: LD_VAR 0 9
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL_OW 109
// continue ;
13604: GO 12880
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13606: LD_VAR 0 9
13610: PPUSH
13611: CALL_OW 314
13615: NOT
13616: PUSH
13617: LD_INT 81
13619: PUSH
13620: LD_VAR 0 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 92
13631: PUSH
13632: LD_VAR 0 17
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PUSH
13641: LD_VAR 0 17
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PUSH
13650: LD_INT 12
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: NOT
13668: AND
13669: IFFALSE 13698
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13671: LD_VAR 0 9
13675: PPUSH
13676: LD_VAR 0 17
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: LD_VAR 0 17
13689: PUSH
13690: LD_INT 2
13692: ARRAY
13693: PPUSH
13694: CALL_OW 117
// end ; end ;
13698: GO 12880
13700: POP
13701: POP
// end ; if vehicles then
13702: LD_VAR 0 26
13706: IFFALSE 14506
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13708: LD_ADDR_VAR 0 26
13712: PUSH
13713: LD_VAR 0 26
13717: PPUSH
13718: LD_INT 3
13720: PUSH
13721: LD_INT 2
13723: PUSH
13724: LD_INT 34
13726: PUSH
13727: LD_INT 88
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 34
13736: PUSH
13737: LD_INT 32
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 50
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: ST_TO_ADDR
// if vehicles then
13768: LD_VAR 0 26
13772: IFFALSE 14506
// begin for i in vehicles do
13774: LD_ADDR_VAR 0 9
13778: PUSH
13779: LD_VAR 0 26
13783: PUSH
13784: FOR_IN
13785: IFFALSE 14504
// begin tag := GetTag ( i ) ;
13787: LD_ADDR_VAR 0 15
13791: PUSH
13792: LD_VAR 0 9
13796: PPUSH
13797: CALL_OW 110
13801: ST_TO_ADDR
// if not tag then
13802: LD_VAR 0 15
13806: NOT
13807: IFFALSE 13953
// begin if GetControl ( i ) = control_manual then
13809: LD_VAR 0 9
13813: PPUSH
13814: CALL_OW 263
13818: PUSH
13819: LD_INT 1
13821: EQUAL
13822: IFFALSE 13939
// begin drivers := arDrivers ;
13824: LD_ADDR_VAR 0 24
13828: PUSH
13829: LD_EXP 50
13833: ST_TO_ADDR
// if not drivers then
13834: LD_VAR 0 24
13838: NOT
13839: IFFALSE 13919
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13841: LD_ADDR_VAR 0 24
13845: PUSH
13846: LD_VAR 0 14
13850: PPUSH
13851: LD_INT 3
13853: PUSH
13854: LD_INT 120
13856: PUSH
13857: LD_INT 7
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 72
13872: ST_TO_ADDR
// if drivers then
13873: LD_VAR 0 24
13877: IFFALSE 13919
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13879: LD_VAR 0 24
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: LD_INT 7
13890: PPUSH
13891: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13895: LD_ADDR_EXP 50
13899: PUSH
13900: LD_EXP 50
13904: PPUSH
13905: LD_VAR 0 24
13909: PUSH
13910: LD_INT 1
13912: ARRAY
13913: PPUSH
13914: CALL 64955 0 2
13918: ST_TO_ADDR
// end ; end ; if drivers then
13919: LD_VAR 0 24
13923: IFFALSE 13937
// SetTag ( i , tBusy ) ;
13925: LD_VAR 0 9
13929: PPUSH
13930: LD_INT 8
13932: PPUSH
13933: CALL_OW 109
// continue ;
13937: GO 13784
// end ; SetTag ( i , tBusy ) ;
13939: LD_VAR 0 9
13943: PPUSH
13944: LD_INT 8
13946: PPUSH
13947: CALL_OW 109
// end else
13951: GO 14502
// if tag = tBusy then
13953: LD_VAR 0 15
13957: PUSH
13958: LD_INT 8
13960: EQUAL
13961: IFFALSE 14173
// begin if GetLives ( i ) = 1000 then
13963: LD_VAR 0 9
13967: PPUSH
13968: CALL_OW 256
13972: PUSH
13973: LD_INT 1000
13975: EQUAL
13976: IFFALSE 14171
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13978: LD_VAR 0 9
13982: PPUSH
13983: CALL_OW 263
13987: PUSH
13988: LD_INT 1
13990: EQUAL
13991: PUSH
13992: LD_VAR 0 9
13996: PPUSH
13997: CALL_OW 311
14001: NOT
14002: AND
14003: IFFALSE 14159
// begin drivers := arDrivers ;
14005: LD_ADDR_VAR 0 24
14009: PUSH
14010: LD_EXP 50
14014: ST_TO_ADDR
// if not drivers then
14015: LD_VAR 0 24
14019: NOT
14020: IFFALSE 14036
// begin SetTag ( i , 0 ) ;
14022: LD_VAR 0 9
14026: PPUSH
14027: LD_INT 0
14029: PPUSH
14030: CALL_OW 109
// continue ;
14034: GO 13784
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14036: LD_VAR 0 24
14040: PUSH
14041: LD_INT 1
14043: ARRAY
14044: PPUSH
14045: CALL_OW 310
14049: PUSH
14050: LD_VAR 0 24
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: CALL 62559 0 1
14063: NOT
14064: AND
14065: IFFALSE 14080
// ComExitBuilding ( drivers [ 1 ] ) ;
14067: LD_VAR 0 24
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PPUSH
14076: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14080: LD_VAR 0 26
14084: PPUSH
14085: LD_INT 120
14087: PUSH
14088: LD_INT 3
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 72
14099: PUSH
14100: LD_VAR 0 24
14104: PUSH
14105: LD_INT 1
14107: ARRAY
14108: PPUSH
14109: CALL_OW 314
14113: NOT
14114: AND
14115: PUSH
14116: LD_VAR 0 26
14120: PPUSH
14121: LD_INT 120
14123: PUSH
14124: LD_INT 3
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 72
14135: NOT
14136: OR
14137: IFFALSE 14157
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14139: LD_VAR 0 24
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 9
14152: PPUSH
14153: CALL_OW 120
// continue ;
14157: GO 13784
// end ; SetTag ( i , tAttack ) ;
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_INT 13
14166: PPUSH
14167: CALL_OW 109
// end ; end else
14171: GO 14502
// if tag = tAttack then
14173: LD_VAR 0 15
14177: PUSH
14178: LD_INT 13
14180: EQUAL
14181: IFFALSE 14361
// begin enemy := enemyInBase ;
14183: LD_ADDR_VAR 0 21
14187: PUSH
14188: LD_VAR 0 22
14192: ST_TO_ADDR
// if not enemy then
14193: LD_VAR 0 21
14197: NOT
14198: IFFALSE 14210
// enemy := enemyOuterBase ;
14200: LD_ADDR_VAR 0 21
14204: PUSH
14205: LD_VAR 0 23
14209: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14210: LD_VAR 0 21
14214: NOT
14215: PUSH
14216: LD_VAR 0 9
14220: PPUSH
14221: LD_VAR 0 7
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PPUSH
14230: LD_VAR 0 7
14234: PUSH
14235: LD_INT 2
14237: ARRAY
14238: PPUSH
14239: CALL_OW 297
14243: PUSH
14244: LD_INT 10
14246: GREATER
14247: AND
14248: IFFALSE 14279
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14250: LD_VAR 0 9
14254: PPUSH
14255: LD_VAR 0 7
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 7
14268: PUSH
14269: LD_INT 2
14271: ARRAY
14272: PPUSH
14273: CALL_OW 111
// continue ;
14277: GO 13784
// end ; if GetLives ( i ) < 650 then
14279: LD_VAR 0 9
14283: PPUSH
14284: CALL_OW 256
14288: PUSH
14289: LD_INT 650
14291: LESS
14292: IFFALSE 14335
// begin SetTag ( i , tVehRepair ) ;
14294: LD_VAR 0 9
14298: PPUSH
14299: LD_INT 9
14301: PPUSH
14302: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14306: LD_VAR 0 9
14310: PPUSH
14311: LD_VAR 0 7
14315: PUSH
14316: LD_INT 1
14318: ARRAY
14319: PPUSH
14320: LD_VAR 0 7
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: PPUSH
14329: CALL_OW 111
// continue ;
14333: GO 13784
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14335: LD_VAR 0 9
14339: PPUSH
14340: LD_VAR 0 21
14344: PPUSH
14345: LD_VAR 0 9
14349: PPUSH
14350: CALL_OW 74
14354: PPUSH
14355: CALL_OW 115
// end else
14359: GO 14502
// if tag = tVehRepair then
14361: LD_VAR 0 15
14365: PUSH
14366: LD_INT 9
14368: EQUAL
14369: IFFALSE 14502
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14371: LD_VAR 0 9
14375: PPUSH
14376: LD_VAR 0 7
14380: PUSH
14381: LD_INT 1
14383: ARRAY
14384: PPUSH
14385: LD_VAR 0 7
14389: PUSH
14390: LD_INT 2
14392: ARRAY
14393: PPUSH
14394: CALL_OW 297
14398: PUSH
14399: LD_INT 10
14401: GREATER
14402: IFFALSE 14433
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14404: LD_VAR 0 9
14408: PPUSH
14409: LD_VAR 0 7
14413: PUSH
14414: LD_INT 1
14416: ARRAY
14417: PPUSH
14418: LD_VAR 0 7
14422: PUSH
14423: LD_INT 2
14425: ARRAY
14426: PPUSH
14427: CALL_OW 111
// continue ;
14431: GO 13784
// end ; if GetLives ( i ) = 1000 then
14433: LD_VAR 0 9
14437: PPUSH
14438: CALL_OW 256
14442: PUSH
14443: LD_INT 1000
14445: EQUAL
14446: IFFALSE 14462
// begin SetTag ( i , tBusy ) ;
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_INT 8
14455: PPUSH
14456: CALL_OW 109
// continue ;
14460: GO 13784
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14462: LD_VAR 0 9
14466: PPUSH
14467: CALL_OW 263
14471: PUSH
14472: LD_INT 1
14474: EQUAL
14475: PUSH
14476: LD_VAR 0 9
14480: PPUSH
14481: CALL_OW 311
14485: AND
14486: IFFALSE 14502
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14488: LD_VAR 0 9
14492: PPUSH
14493: CALL_OW 311
14497: PPUSH
14498: CALL 66655 0 1
// end ; end ;
14502: GO 13784
14504: POP
14505: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14506: LD_ADDR_VAR 0 19
14510: PUSH
14511: LD_VAR 0 5
14515: PPUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 25
14531: PUSH
14532: LD_INT 8
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 25
14541: PUSH
14542: LD_INT 5
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 25
14551: PUSH
14552: LD_INT 9
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 50
14568: PUSH
14569: EMPTY
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 72
14580: ST_TO_ADDR
// if sol then
14581: LD_VAR 0 19
14585: IFFALSE 15093
// begin if enemyInBase then
14587: LD_VAR 0 22
14591: IFFALSE 14770
// begin for i in sol do
14593: LD_ADDR_VAR 0 9
14597: PUSH
14598: LD_VAR 0 19
14602: PUSH
14603: FOR_IN
14604: IFFALSE 14766
// begin tw := IsInUnit ( i ) ;
14606: LD_ADDR_VAR 0 16
14610: PUSH
14611: LD_VAR 0 9
14615: PPUSH
14616: CALL_OW 310
14620: ST_TO_ADDR
// if tw then
14621: LD_VAR 0 16
14625: IFFALSE 14708
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14627: LD_VAR 0 16
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_VAR 0 1
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 101
14646: PUSH
14647: LD_VAR 0 34
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: LD_INT 30
14661: PUSH
14662: LD_INT 32
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 30
14671: PUSH
14672: LD_INT 31
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: PPUSH
14689: CALL_OW 69
14693: IN
14694: NOT
14695: IFFALSE 14706
// ComExitBuilding ( i ) ;
14697: LD_VAR 0 9
14701: PPUSH
14702: CALL_OW 122
// end else
14706: GO 14764
// if IsInArea ( i , area ) then
14708: LD_VAR 0 9
14712: PPUSH
14713: LD_VAR 0 3
14717: PPUSH
14718: CALL_OW 308
14722: IFFALSE 14750
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14724: LD_VAR 0 9
14728: PPUSH
14729: LD_VAR 0 22
14733: PPUSH
14734: LD_VAR 0 9
14738: PPUSH
14739: CALL_OW 74
14743: PPUSH
14744: CALL_OW 115
14748: GO 14764
// ComMoveToArea ( i , area ) ;
14750: LD_VAR 0 9
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL_OW 113
// end ;
14764: GO 14603
14766: POP
14767: POP
// end else
14768: GO 15093
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14770: LD_ADDR_VAR 0 28
14774: PUSH
14775: LD_VAR 0 3
14779: PPUSH
14780: LD_INT 3
14782: PUSH
14783: LD_INT 62
14785: PUSH
14786: EMPTY
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: LD_INT 30
14798: PUSH
14799: LD_INT 32
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 30
14808: PUSH
14809: LD_INT 4
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 30
14818: PUSH
14819: LD_INT 5
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 31
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 70
14851: ST_TO_ADDR
// if empty then
14852: LD_VAR 0 28
14856: IFFALSE 14873
// empty := ReverseArray ( empty ) ;
14858: LD_ADDR_VAR 0 28
14862: PUSH
14863: LD_VAR 0 28
14867: PPUSH
14868: CALL 60222 0 1
14872: ST_TO_ADDR
// for i in sol do
14873: LD_ADDR_VAR 0 9
14877: PUSH
14878: LD_VAR 0 19
14882: PUSH
14883: FOR_IN
14884: IFFALSE 15091
// begin tag := GetTag ( i ) ;
14886: LD_ADDR_VAR 0 15
14890: PUSH
14891: LD_VAR 0 9
14895: PPUSH
14896: CALL_OW 110
14900: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14901: LD_VAR 0 9
14905: PPUSH
14906: CALL_OW 256
14910: PUSH
14911: LD_INT 1000
14913: LESS
14914: PUSH
14915: LD_VAR 0 15
14919: PUSH
14920: LD_INT 1
14922: NONEQUAL
14923: AND
14924: IFFALSE 14976
// begin SetTag ( i , tHeal ) ;
14926: LD_VAR 0 9
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14938: LD_VAR 0 9
14942: PPUSH
14943: LD_VAR 0 6
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: PPUSH
14952: LD_VAR 0 6
14956: PUSH
14957: LD_INT 2
14959: ARRAY
14960: PPUSH
14961: CALL_OW 111
// AddComHold ( i ) ;
14965: LD_VAR 0 9
14969: PPUSH
14970: CALL_OW 200
// continue ;
14974: GO 14883
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14976: LD_VAR 0 9
14980: PPUSH
14981: CALL_OW 256
14985: PUSH
14986: LD_INT 1000
14988: EQUAL
14989: PUSH
14990: LD_VAR 0 15
14994: PUSH
14995: LD_INT 1
14997: EQUAL
14998: AND
14999: IFFALSE 15015
// begin SetTag ( i , 0 ) ;
15001: LD_VAR 0 9
15005: PPUSH
15006: LD_INT 0
15008: PPUSH
15009: CALL_OW 109
// continue ;
15013: GO 14883
// end ; if HasTask ( i ) then
15015: LD_VAR 0 9
15019: PPUSH
15020: CALL_OW 314
15024: IFFALSE 15028
// continue ;
15026: GO 14883
// if not IsInUnit ( i ) and not tag and empty then
15028: LD_VAR 0 9
15032: PPUSH
15033: CALL_OW 310
15037: NOT
15038: PUSH
15039: LD_VAR 0 15
15043: NOT
15044: AND
15045: PUSH
15046: LD_VAR 0 28
15050: AND
15051: IFFALSE 15089
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15053: LD_VAR 0 9
15057: PPUSH
15058: LD_VAR 0 28
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PPUSH
15067: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15071: LD_ADDR_VAR 0 28
15075: PUSH
15076: LD_VAR 0 28
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 3
15088: ST_TO_ADDR
// end ; end ;
15089: GO 14883
15091: POP
15092: POP
// end ; end ; end ;
15093: LD_VAR 0 8
15097: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15098: LD_EXP 54
15102: PPUSH
15103: LD_INT 50
15105: PUSH
15106: EMPTY
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: IFFALSE 15166
15115: GO 15117
15117: DISABLE
// begin enable ;
15118: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15119: LD_EXP 3
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: PPUSH
15128: LD_INT 2
15130: PPUSH
15131: LD_INT 5
15133: PPUSH
15134: LD_INT 6
15136: PPUSH
15137: LD_EXP 54
15141: PPUSH
15142: LD_INT 210
15144: PUSH
15145: LD_INT 43
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: LD_INT 194
15154: PUSH
15155: LD_INT 28
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PPUSH
15162: CALL 11565 0 7
// end ;
15166: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15167: LD_EXP 53
15171: IFFALSE 15391
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
15180: PPUSH
// begin enable ;
15181: ENABLE
// p := 1 ;
15182: LD_ADDR_VAR 0 2
15186: PUSH
15187: LD_INT 1
15189: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15190: LD_ADDR_VAR 0 1
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_EXP 53
15204: PPUSH
15205: CALL 29346 0 1
15209: PUSH
15210: LD_INT 2
15212: DIV
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15389
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_EXP 53
15226: PUSH
15227: LD_VAR 0 2
15231: ARRAY
15232: PPUSH
15233: LD_EXP 53
15237: PUSH
15238: LD_VAR 0 2
15242: PUSH
15243: LD_INT 1
15245: PLUS
15246: ARRAY
15247: PPUSH
15248: CALL_OW 428
15252: ST_TO_ADDR
// if tmp then
15253: LD_VAR 0 3
15257: IFFALSE 15373
// if GetSide ( tmp ) <> botSides [ 2 ] then
15259: LD_VAR 0 3
15263: PPUSH
15264: CALL_OW 255
15268: PUSH
15269: LD_EXP 3
15273: PUSH
15274: LD_INT 2
15276: ARRAY
15277: NONEQUAL
15278: IFFALSE 15373
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15280: LD_EXP 53
15284: PUSH
15285: LD_VAR 0 2
15289: ARRAY
15290: PPUSH
15291: LD_EXP 53
15295: PUSH
15296: LD_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: PLUS
15304: ARRAY
15305: PPUSH
15306: LD_EXP 3
15310: PUSH
15311: LD_INT 2
15313: ARRAY
15314: PPUSH
15315: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15319: LD_ADDR_EXP 53
15323: PUSH
15324: LD_EXP 53
15328: PPUSH
15329: LD_VAR 0 2
15333: PPUSH
15334: CALL_OW 3
15338: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15339: LD_ADDR_EXP 53
15343: PUSH
15344: LD_EXP 53
15348: PPUSH
15349: LD_VAR 0 2
15353: PPUSH
15354: CALL_OW 3
15358: ST_TO_ADDR
// p := p - 2 ;
15359: LD_ADDR_VAR 0 2
15363: PUSH
15364: LD_VAR 0 2
15368: PUSH
15369: LD_INT 2
15371: MINUS
15372: ST_TO_ADDR
// end ; p := p + 2 ;
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_VAR 0 2
15382: PUSH
15383: LD_INT 2
15385: PLUS
15386: ST_TO_ADDR
// end ;
15387: GO 15214
15389: POP
15390: POP
// end ;
15391: PPOPN 3
15393: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15394: LD_INT 32
15396: PPUSH
15397: CALL_OW 302
15401: PUSH
15402: LD_EXP 46
15406: NOT
15407: AND
15408: IFFALSE 15478
15410: GO 15412
15412: DISABLE
// begin enable ;
15413: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15414: LD_ADDR_EXP 46
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: LD_INT 27
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 14
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 1
15445: PUSH
15446: LD_INT 26
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 14
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: LD_INT 27
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: ST_TO_ADDR
// end ; end_of_file
15478: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 255
15488: PUSH
15489: LD_EXP 3
15493: IN
15494: NOT
15495: IFFALSE 15499
// exit ;
15497: GO 15556
// if not un in [ Sikorski ] then
15499: LD_VAR 0 1
15503: PUSH
15504: LD_EXP 34
15508: PUSH
15509: EMPTY
15510: LIST
15511: IN
15512: NOT
15513: IFFALSE 15534
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_INT 0
15527: PPUSH
15528: CALL 5816 0 3
15532: GO 15556
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: LD_INT 5
15546: PPUSH
15547: CALL 5143 0 1
15551: PPUSH
15552: CALL 5816 0 3
// end ;
15556: PPOPN 3
15558: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15559: LD_INT 0
15561: PPUSH
15562: PPUSH
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL 21826 0 1
// side := GetSide ( un ) ;
15580: LD_ADDR_VAR 0 3
15584: PUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 255
15594: ST_TO_ADDR
// if multi_sides [ side ] then
15595: LD_EXP 7
15599: PUSH
15600: LD_VAR 0 3
15604: ARRAY
15605: IFFALSE 15631
// if GetType ( un ) = unit_human then
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 247
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: IFFALSE 15631
// MultiplayerEvent_HumanLost ( side ) ;
15622: LD_VAR 0 3
15626: PPUSH
15627: CALL 5702 0 1
// if side in botSides then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_EXP 3
15640: IN
15641: IFFALSE 16768
// begin if side = botSides [ 1 ] then
15643: LD_VAR 0 3
15647: PUSH
15648: LD_EXP 3
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: EQUAL
15657: IFFALSE 16198
// begin if un in amForce then
15659: LD_VAR 0 1
15663: PUSH
15664: LD_EXP 42
15668: IN
15669: IFFALSE 15687
// amForce := amForce diff un ;
15671: LD_ADDR_EXP 42
15675: PUSH
15676: LD_EXP 42
15680: PUSH
15681: LD_VAR 0 1
15685: DIFF
15686: ST_TO_ADDR
// if un in amAttackersVeh then
15687: LD_VAR 0 1
15691: PUSH
15692: LD_EXP 59
15696: IN
15697: IFFALSE 15715
// amAttackersVeh := amAttackersVeh diff un ;
15699: LD_ADDR_EXP 59
15703: PUSH
15704: LD_EXP 59
15708: PUSH
15709: LD_VAR 0 1
15713: DIFF
15714: ST_TO_ADDR
// if un in amAttackersInf then
15715: LD_VAR 0 1
15719: PUSH
15720: LD_EXP 58
15724: IN
15725: IFFALSE 15743
// amAttackersInf := amAttackersInf diff un ;
15727: LD_ADDR_EXP 58
15731: PUSH
15732: LD_EXP 58
15736: PUSH
15737: LD_VAR 0 1
15741: DIFF
15742: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15743: LD_VAR 0 1
15747: PPUSH
15748: CALL_OW 257
15752: PUSH
15753: LD_INT 3
15755: EQUAL
15756: PUSH
15757: LD_EXP 44
15761: AND
15762: IFFALSE 15903
// begin if not IsOk ( amDep ) then
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 302
15771: NOT
15772: IFFALSE 15776
// exit ;
15774: GO 16869
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15776: LD_ADDR_EXP 44
15780: PUSH
15781: LD_EXP 44
15785: PPUSH
15786: CALL 66338 0 1
15790: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15791: LD_ADDR_OWVAR 20
15795: PUSH
15796: LD_EXP 3
15800: PUSH
15801: LD_INT 1
15803: ARRAY
15804: ST_TO_ADDR
// uc_nation := nation_american ;
15805: LD_ADDR_OWVAR 21
15809: PUSH
15810: LD_INT 1
15812: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15813: LD_INT 0
15815: PPUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: LD_INT 3
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: PUSH
15830: LD_OWVAR 67
15834: ARRAY
15835: PPUSH
15836: CALL_OW 383
// un := CreateHuman ;
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: CALL_OW 44
15849: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15850: LD_VAR 0 1
15854: PPUSH
15855: LD_INT 52
15857: PPUSH
15858: LD_INT 2
15860: PPUSH
15861: LD_INT 0
15863: PPUSH
15864: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 23
15875: PPUSH
15876: LD_INT 19
15878: PPUSH
15879: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15883: LD_ADDR_EXP 42
15887: PUSH
15888: LD_EXP 42
15892: PPUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL 64955 0 2
15902: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 247
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: IFFALSE 16059
// begin btype := GetBType ( un ) ;
15918: LD_ADDR_VAR 0 11
15922: PUSH
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 266
15932: ST_TO_ADDR
// if btype = b_barracks then
15933: LD_VAR 0 11
15937: PUSH
15938: LD_INT 5
15940: EQUAL
15941: IFFALSE 15951
// btype := b_armoury ;
15943: LD_ADDR_VAR 0 11
15947: PUSH
15948: LD_INT 4
15950: ST_TO_ADDR
// if btype = b_factory then
15951: LD_VAR 0 11
15955: PUSH
15956: LD_INT 3
15958: EQUAL
15959: IFFALSE 15969
// btype := b_workshop ;
15961: LD_ADDR_VAR 0 11
15965: PUSH
15966: LD_INT 2
15968: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15969: LD_VAR 0 11
15973: PUSH
15974: LD_INT 8
15976: PUSH
15977: LD_INT 7
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: IN
15984: IFFALSE 15994
// btype := b_lab ;
15986: LD_ADDR_VAR 0 11
15990: PUSH
15991: LD_INT 6
15993: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15994: LD_ADDR_EXP 37
15998: PUSH
15999: LD_EXP 37
16003: PPUSH
16004: LD_EXP 37
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: PPUSH
16013: LD_VAR 0 11
16017: PUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 250
16027: PUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 251
16037: PUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 254
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: PPUSH
16054: CALL_OW 1
16058: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16059: LD_VAR 0 1
16063: PPUSH
16064: CALL_OW 247
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: IFFALSE 16198
// begin chassis := GetChassis ( un ) ;
16074: LD_ADDR_VAR 0 5
16078: PUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 265
16088: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16089: LD_ADDR_VAR 0 6
16093: PUSH
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 262
16103: ST_TO_ADDR
// control := GetControl ( un ) ;
16104: LD_ADDR_VAR 0 7
16108: PUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 263
16118: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16119: LD_ADDR_VAR 0 8
16123: PUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 264
16133: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16134: LD_ADDR_VAR 0 9
16138: PUSH
16139: LD_VAR 0 10
16143: PPUSH
16144: LD_VAR 0 5
16148: PPUSH
16149: LD_VAR 0 6
16153: PPUSH
16154: LD_VAR 0 7
16158: PPUSH
16159: LD_VAR 0 8
16163: PPUSH
16164: CALL 29704 0 5
16168: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16169: LD_ADDR_EXP 36
16173: PUSH
16174: LD_EXP 36
16178: PPUSH
16179: LD_EXP 36
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: PPUSH
16188: LD_VAR 0 9
16192: PPUSH
16193: CALL_OW 1
16197: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16198: LD_VAR 0 3
16202: PUSH
16203: LD_EXP 3
16207: PUSH
16208: LD_INT 2
16210: ARRAY
16211: EQUAL
16212: IFFALSE 16768
// begin if un in arForce then
16214: LD_VAR 0 1
16218: PUSH
16219: LD_EXP 54
16223: IN
16224: IFFALSE 16242
// arForce := arForce diff un ;
16226: LD_ADDR_EXP 54
16230: PUSH
16231: LD_EXP 54
16235: PUSH
16236: LD_VAR 0 1
16240: DIFF
16241: ST_TO_ADDR
// if un in arAttackersVeh then
16242: LD_VAR 0 1
16246: PUSH
16247: LD_EXP 57
16251: IN
16252: IFFALSE 16270
// arAttackersVeh := arAttackersVeh diff un ;
16254: LD_ADDR_EXP 57
16258: PUSH
16259: LD_EXP 57
16263: PUSH
16264: LD_VAR 0 1
16268: DIFF
16269: ST_TO_ADDR
// if un in arAttackersInf then
16270: LD_VAR 0 1
16274: PUSH
16275: LD_EXP 56
16279: IN
16280: IFFALSE 16298
// arAttackersInf := arAttackersInf diff un ;
16282: LD_ADDR_EXP 56
16286: PUSH
16287: LD_EXP 56
16291: PUSH
16292: LD_VAR 0 1
16296: DIFF
16297: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 257
16307: PUSH
16308: LD_INT 3
16310: EQUAL
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 110
16321: PUSH
16322: LD_INT 999
16324: LESS
16325: AND
16326: PUSH
16327: LD_EXP 51
16331: AND
16332: IFFALSE 16473
// begin if not IsOk ( arDep ) then
16334: LD_INT 32
16336: PPUSH
16337: CALL_OW 302
16341: NOT
16342: IFFALSE 16346
// exit ;
16344: GO 16869
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16346: LD_ADDR_EXP 51
16350: PUSH
16351: LD_EXP 51
16355: PPUSH
16356: CALL 66338 0 1
16360: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16361: LD_ADDR_OWVAR 20
16365: PUSH
16366: LD_EXP 3
16370: PUSH
16371: LD_INT 2
16373: ARRAY
16374: ST_TO_ADDR
// uc_nation := nation_arabian ;
16375: LD_ADDR_OWVAR 21
16379: PUSH
16380: LD_INT 2
16382: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16383: LD_INT 0
16385: PPUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 3
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_OWVAR 67
16404: ARRAY
16405: PPUSH
16406: CALL_OW 383
// un := CreateHuman ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: CALL_OW 44
16419: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 178
16427: PPUSH
16428: LD_INT 2
16430: PPUSH
16431: LD_INT 0
16433: PPUSH
16434: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 204
16445: PPUSH
16446: LD_INT 35
16448: PPUSH
16449: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16453: LD_ADDR_EXP 54
16457: PUSH
16458: LD_EXP 54
16462: PPUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL 64955 0 2
16472: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 247
16482: PUSH
16483: LD_INT 3
16485: EQUAL
16486: IFFALSE 16629
// begin btype := GetBType ( un ) ;
16488: LD_ADDR_VAR 0 11
16492: PUSH
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 266
16502: ST_TO_ADDR
// if btype = b_barracks then
16503: LD_VAR 0 11
16507: PUSH
16508: LD_INT 5
16510: EQUAL
16511: IFFALSE 16521
// btype := b_armoury ;
16513: LD_ADDR_VAR 0 11
16517: PUSH
16518: LD_INT 4
16520: ST_TO_ADDR
// if btype = b_factory then
16521: LD_VAR 0 11
16525: PUSH
16526: LD_INT 3
16528: EQUAL
16529: IFFALSE 16539
// btype := b_workshop ;
16531: LD_ADDR_VAR 0 11
16535: PUSH
16536: LD_INT 2
16538: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16539: LD_VAR 0 11
16543: PUSH
16544: LD_INT 8
16546: PUSH
16547: LD_INT 7
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: IN
16554: IFFALSE 16564
// btype := b_lab ;
16556: LD_ADDR_VAR 0 11
16560: PUSH
16561: LD_INT 6
16563: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16564: LD_ADDR_EXP 47
16568: PUSH
16569: LD_EXP 47
16573: PPUSH
16574: LD_EXP 47
16578: PUSH
16579: LD_INT 1
16581: PLUS
16582: PPUSH
16583: LD_VAR 0 11
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 250
16597: PUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 251
16607: PUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 254
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 1
16628: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 247
16638: PUSH
16639: LD_INT 2
16641: EQUAL
16642: IFFALSE 16768
// begin chassis := GetChassis ( un ) ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 265
16658: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16659: LD_ADDR_VAR 0 6
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 262
16673: ST_TO_ADDR
// control := GetControl ( un ) ;
16674: LD_ADDR_VAR 0 7
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 263
16688: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16689: LD_ADDR_VAR 0 8
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 264
16703: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16704: LD_ADDR_VAR 0 9
16708: PUSH
16709: LD_VAR 0 10
16713: PPUSH
16714: LD_VAR 0 5
16718: PPUSH
16719: LD_VAR 0 6
16723: PPUSH
16724: LD_VAR 0 7
16728: PPUSH
16729: LD_VAR 0 8
16733: PPUSH
16734: CALL 29704 0 5
16738: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16739: LD_ADDR_EXP 46
16743: PUSH
16744: LD_EXP 46
16748: PPUSH
16749: LD_EXP 46
16753: PUSH
16754: LD_INT 1
16756: PLUS
16757: PPUSH
16758: LD_VAR 0 9
16762: PPUSH
16763: CALL_OW 1
16767: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
16768: LD_EXP 24
16772: PUSH
16773: LD_EXP 16
16777: AND
16778: PUSH
16779: LD_EXP 25
16783: PUSH
16784: LD_VAR 0 3
16788: ARRAY
16789: NOT
16790: AND
16791: IFFALSE 16869
// if un in multi_commanders then
16793: LD_VAR 0 1
16797: PUSH
16798: LD_EXP 24
16802: IN
16803: IFFALSE 16869
// begin if side = your_side then
16805: LD_VAR 0 3
16809: PUSH
16810: LD_OWVAR 2
16814: EQUAL
16815: IFFALSE 16821
// Multiplayer_Loose_Message ;
16817: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16821: LD_ADDR_EXP 25
16825: PUSH
16826: LD_EXP 25
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 1
16843: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16844: LD_ADDR_EXP 24
16848: PUSH
16849: LD_EXP 24
16853: PUSH
16854: LD_VAR 0 1
16858: DIFF
16859: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16860: LD_VAR 0 3
16864: PPUSH
16865: CALL 5176 0 1
// end ; end ;
16869: PPOPN 11
16871: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
16872: LD_INT 0
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
// begin side := GetSide ( building ) ;
16878: LD_ADDR_VAR 0 4
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 255
16892: ST_TO_ADDR
// if multi_sides [ side ] then
16893: LD_EXP 7
16897: PUSH
16898: LD_VAR 0 4
16902: ARRAY
16903: IFFALSE 16924
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
16905: LD_VAR 0 4
16909: PPUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 266
16919: PPUSH
16920: CALL 5746 0 2
// if side = botSides [ 1 ] then
16924: LD_VAR 0 4
16928: PUSH
16929: LD_EXP 3
16933: PUSH
16934: LD_INT 1
16936: ARRAY
16937: EQUAL
16938: IFFALSE 17022
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16940: LD_ADDR_EXP 37
16944: PUSH
16945: LD_EXP 37
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 3
16957: ST_TO_ADDR
// btype := GetBType ( building ) ;
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: LD_VAR 0 1
16967: PPUSH
16968: CALL_OW 266
16972: ST_TO_ADDR
// case btype of b_workshop :
16973: LD_VAR 0 5
16977: PUSH
16978: LD_INT 2
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 16998
16986: POP
// ComUpgrade ( building ) ; b_lab :
16987: LD_VAR 0 1
16991: PPUSH
16992: CALL_OW 146
16996: GO 17022
16998: LD_INT 6
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17021
17006: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 10
17014: PPUSH
17015: CALL_OW 207
// end ; end ;
17019: GO 17022
17021: POP
// end ; if side = botSides [ 2 ] then
17022: LD_VAR 0 4
17026: PUSH
17027: LD_EXP 3
17031: PUSH
17032: LD_INT 2
17034: ARRAY
17035: EQUAL
17036: IFFALSE 17132
// begin arBuildings := Delete ( arBuildings , 1 ) ;
17038: LD_ADDR_EXP 47
17042: PUSH
17043: LD_EXP 47
17047: PPUSH
17048: LD_INT 1
17050: PPUSH
17051: CALL_OW 3
17055: ST_TO_ADDR
// btype := GetBType ( building ) ;
17056: LD_ADDR_VAR 0 5
17060: PUSH
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: ST_TO_ADDR
// case btype of b_workshop :
17071: LD_VAR 0 5
17075: PUSH
17076: LD_INT 2
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17096
17084: POP
// ComUpgrade ( building ) ; b_lab :
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 146
17094: GO 17132
17096: LD_INT 6
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17131
17104: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17105: LD_VAR 0 1
17109: PPUSH
17110: LD_INT 10
17112: PPUSH
17113: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
17117: LD_VAR 0 1
17121: PPUSH
17122: LD_INT 15
17124: PPUSH
17125: CALL_OW 207
// end ; end ;
17129: GO 17132
17131: POP
// end ; end ;
17132: PPOPN 5
17134: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
17135: LD_VAR 0 2
17139: PPUSH
17140: CALL_OW 255
17144: PUSH
17145: LD_EXP 3
17149: IN
17150: NOT
17151: IFFALSE 17155
// exit ;
17153: GO 17318
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17155: LD_VAR 0 2
17159: PUSH
17160: LD_EXP 55
17164: IN
17165: PUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 266
17175: PUSH
17176: LD_INT 31
17178: EQUAL
17179: AND
17180: IFFALSE 17204
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17182: LD_VAR 0 2
17186: PPUSH
17187: LD_INT 215
17189: PPUSH
17190: LD_INT 102
17192: PPUSH
17193: CALL_OW 428
17197: PPUSH
17198: CALL_OW 120
// exit ;
17202: GO 17318
// end ; if HexInfo ( 44 , 78 ) then
17204: LD_INT 44
17206: PPUSH
17207: LD_INT 78
17209: PPUSH
17210: CALL_OW 428
17214: IFFALSE 17253
// begin ComMoveXY ( unit , 26 , 40 ) ;
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_INT 26
17223: PPUSH
17224: LD_INT 40
17226: PPUSH
17227: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17231: LD_ADDR_EXP 42
17235: PUSH
17236: LD_EXP 42
17240: PPUSH
17241: LD_VAR 0 2
17245: PPUSH
17246: CALL 64955 0 2
17250: ST_TO_ADDR
// exit ;
17251: GO 17318
// end ; if GetX ( building ) > 71 then
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 250
17262: PUSH
17263: LD_INT 71
17265: GREATER
17266: IFFALSE 17318
// begin ComMoveXY ( unit , 69 , 39 ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_INT 69
17275: PPUSH
17276: LD_INT 39
17278: PPUSH
17279: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_INT 26
17290: PPUSH
17291: LD_INT 40
17293: PPUSH
17294: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17298: LD_ADDR_EXP 42
17302: PUSH
17303: LD_EXP 42
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL 64955 0 2
17317: ST_TO_ADDR
// end ; end ;
17318: PPOPN 2
17320: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17321: LD_INT 0
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17329: LD_VAR 0 1
17333: PPUSH
17334: LD_VAR 0 2
17338: PPUSH
17339: CALL 21884 0 2
// side := GetSide ( vehicle ) ;
17343: LD_ADDR_VAR 0 4
17347: PUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 255
17357: ST_TO_ADDR
// if multi_sides [ side ] then
17358: LD_EXP 7
17362: PUSH
17363: LD_VAR 0 4
17367: ARRAY
17368: IFFALSE 17379
// MultiplayerEvent_Produced ( side ) ;
17370: LD_VAR 0 4
17374: PPUSH
17375: CALL 5658 0 1
// if side = botSides [ 1 ] then
17379: LD_VAR 0 4
17383: PUSH
17384: LD_EXP 3
17388: PUSH
17389: LD_INT 1
17391: ARRAY
17392: EQUAL
17393: IFFALSE 17529
// begin driver := IsDrivenBy ( vehicle ) ;
17395: LD_ADDR_VAR 0 8
17399: PUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 311
17409: ST_TO_ADDR
// if driver then
17410: LD_VAR 0 8
17414: IFFALSE 17448
// begin SetTag ( driver , tMech ) ;
17416: LD_VAR 0 8
17420: PPUSH
17421: LD_INT 7
17423: PPUSH
17424: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17428: LD_ADDR_EXP 40
17432: PUSH
17433: LD_EXP 40
17437: PPUSH
17438: LD_VAR 0 8
17442: PPUSH
17443: CALL 64955 0 2
17447: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17448: LD_EXP 41
17452: PUSH
17453: LD_EXP 38
17457: PPUSH
17458: CALL 29346 0 1
17462: GREATER
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 266
17473: PUSH
17474: LD_INT 12
17476: PUSH
17477: LD_INT 13
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: IN
17484: OR
17485: IFFALSE 17509
// amVehicles := Join ( amVehicles , vehicle ) else
17487: LD_ADDR_EXP 38
17491: PUSH
17492: LD_EXP 38
17496: PPUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL 64955 0 2
17506: ST_TO_ADDR
17507: GO 17529
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17509: LD_ADDR_EXP 39
17513: PUSH
17514: LD_EXP 39
17518: PPUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL 64955 0 2
17528: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17529: LD_VAR 0 4
17533: PUSH
17534: LD_EXP 3
17538: PUSH
17539: LD_INT 2
17541: ARRAY
17542: EQUAL
17543: IFFALSE 17679
// begin driver := IsDrivenBy ( vehicle ) ;
17545: LD_ADDR_VAR 0 8
17549: PUSH
17550: LD_VAR 0 1
17554: PPUSH
17555: CALL_OW 311
17559: ST_TO_ADDR
// if driver then
17560: LD_VAR 0 8
17564: IFFALSE 17598
// begin SetTag ( driver , tMech ) ;
17566: LD_VAR 0 8
17570: PPUSH
17571: LD_INT 7
17573: PPUSH
17574: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17578: LD_ADDR_EXP 50
17582: PUSH
17583: LD_EXP 50
17587: PPUSH
17588: LD_VAR 0 8
17592: PPUSH
17593: CALL 64955 0 2
17597: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17598: LD_EXP 52
17602: PUSH
17603: LD_EXP 48
17607: PPUSH
17608: CALL 29346 0 1
17612: GREATER
17613: PUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 266
17623: PUSH
17624: LD_INT 32
17626: PUSH
17627: LD_INT 88
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: IN
17634: OR
17635: IFFALSE 17659
// arVehicles := Join ( arVehicles , vehicle ) else
17637: LD_ADDR_EXP 48
17641: PUSH
17642: LD_EXP 48
17646: PPUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL 64955 0 2
17656: ST_TO_ADDR
17657: GO 17679
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17659: LD_ADDR_EXP 49
17663: PUSH
17664: LD_EXP 49
17668: PPUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL 64955 0 2
17678: ST_TO_ADDR
// end ; end ;
17679: PPOPN 8
17681: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 110
17691: PUSH
17692: LD_INT 7
17694: EQUAL
17695: IFFALSE 17709
// SetTag ( driver , 0 ) ;
17697: LD_VAR 0 1
17701: PPUSH
17702: LD_INT 0
17704: PPUSH
17705: CALL_OW 109
// end ;
17709: PPOPN 4
17711: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17712: LD_VAR 0 2
17716: PPUSH
17717: CALL_OW 255
17721: PUSH
17722: LD_EXP 3
17726: PUSH
17727: LD_INT 1
17729: ARRAY
17730: EQUAL
17731: IFFALSE 17761
// if tech in amTech then
17733: LD_VAR 0 1
17737: PUSH
17738: LD_EXP 35
17742: IN
17743: IFFALSE 17761
// amTech := amTech diff tech ;
17745: LD_ADDR_EXP 35
17749: PUSH
17750: LD_EXP 35
17754: PUSH
17755: LD_VAR 0 1
17759: DIFF
17760: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17761: LD_VAR 0 2
17765: PPUSH
17766: CALL_OW 255
17770: PUSH
17771: LD_EXP 3
17775: PUSH
17776: LD_INT 2
17778: ARRAY
17779: EQUAL
17780: IFFALSE 17810
// if tech in arTech then
17782: LD_VAR 0 1
17786: PUSH
17787: LD_EXP 45
17791: IN
17792: IFFALSE 17810
// arTech := arTech diff tech ;
17794: LD_ADDR_EXP 45
17798: PUSH
17799: LD_EXP 45
17803: PUSH
17804: LD_VAR 0 1
17808: DIFF
17809: ST_TO_ADDR
// end ; end_of_file
17810: PPOPN 2
17812: END
// every 10 10$00 trigger IsOk ( amDep ) do
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 302
17820: IFFALSE 17833
17822: GO 17824
17824: DISABLE
// activeAmerAttacks := true ;
17825: LD_ADDR_EXP 5
17829: PUSH
17830: LD_INT 1
17832: ST_TO_ADDR
17833: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17834: LD_INT 32
17836: PPUSH
17837: CALL_OW 302
17841: PUSH
17842: LD_INT 32
17844: PPUSH
17845: CALL_OW 255
17849: PUSH
17850: LD_EXP 3
17854: PUSH
17855: LD_INT 2
17857: ARRAY
17858: EQUAL
17859: AND
17860: IFFALSE 17897
17862: GO 17864
17864: DISABLE
// begin activeArabAttacks := true ;
17865: LD_ADDR_EXP 4
17869: PUSH
17870: LD_INT 1
17872: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
17873: LD_INT 73500
17875: PUSH
17876: LD_INT 2100
17878: PUSH
17879: LD_OWVAR 67
17883: MUL
17884: MINUS
17885: PPUSH
17886: CALL_OW 67
// ArabAttack ( 0 ) ;
17890: LD_INT 0
17892: PPUSH
17893: CALL 17954 0 1
// end ;
17897: END
// every 19 19$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17898: LD_INT 1
17900: PPUSH
17901: CALL_OW 302
17905: PUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 255
17913: PUSH
17914: LD_EXP 3
17918: PUSH
17919: LD_INT 1
17921: ARRAY
17922: EQUAL
17923: AND
17924: IFFALSE 17953
17926: GO 17928
17928: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
17929: LD_INT 10500
17931: PUSH
17932: LD_INT 2100
17934: PUSH
17935: LD_OWVAR 67
17939: MUL
17940: MINUS
17941: PPUSH
17942: CALL_OW 67
// AmericanAttack ( 0 ) ;
17946: LD_INT 0
17948: PPUSH
17949: CALL 19975 0 1
// end ;
17953: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17954: LD_INT 0
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
// uc_side := botSides [ 2 ] ;
17961: LD_ADDR_OWVAR 20
17965: PUSH
17966: LD_EXP 3
17970: PUSH
17971: LD_INT 2
17973: ARRAY
17974: ST_TO_ADDR
// uc_nation := nation_arabian ;
17975: LD_ADDR_OWVAR 21
17979: PUSH
17980: LD_INT 2
17982: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_INT 3
17990: PUSH
17991: LD_INT 4
17993: PUSH
17994: LD_INT 5
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: LD_OWVAR 67
18006: ARRAY
18007: ST_TO_ADDR
// arAttackersInf := [ ] ;
18008: LD_ADDR_EXP 56
18012: PUSH
18013: EMPTY
18014: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18015: LD_ADDR_EXP 57
18019: PUSH
18020: EMPTY
18021: ST_TO_ADDR
// InitHC_All ( ) ;
18022: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: DOUBLE
18032: LD_INT 1
18034: DEC
18035: ST_TO_ADDR
18036: LD_INT 3
18038: PUSH
18039: LD_INT 4
18041: PUSH
18042: LD_INT 5
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: LD_OWVAR 67
18054: ARRAY
18055: PUSH
18056: LD_VAR 0 1
18060: PLUS
18061: PUSH
18062: FOR_TO
18063: IFFALSE 18165
// begin PrepareSoldier ( false , skill ) ;
18065: LD_INT 0
18067: PPUSH
18068: LD_VAR 0 4
18072: PPUSH
18073: CALL_OW 381
// un := CreateHuman ;
18077: LD_ADDR_VAR 0 5
18081: PUSH
18082: CALL_OW 44
18086: ST_TO_ADDR
// if i mod 2 = 0 then
18087: LD_VAR 0 3
18091: PUSH
18092: LD_INT 2
18094: MOD
18095: PUSH
18096: LD_INT 0
18098: EQUAL
18099: IFFALSE 18113
// SetClass ( un , class_mortar ) ;
18101: LD_VAR 0 5
18105: PPUSH
18106: LD_INT 8
18108: PPUSH
18109: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
18113: LD_VAR 0 5
18117: PPUSH
18118: LD_INT 25
18120: PPUSH
18121: LD_INT 0
18123: PPUSH
18124: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
18128: LD_ADDR_EXP 56
18132: PUSH
18133: LD_EXP 56
18137: PPUSH
18138: LD_VAR 0 5
18142: PPUSH
18143: CALL 64955 0 2
18147: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18148: LD_VAR 0 5
18152: PPUSH
18153: LD_INT 230
18155: PPUSH
18156: LD_INT 143
18158: PPUSH
18159: CALL_OW 114
// end ;
18163: GO 18062
18165: POP
18166: POP
// for i := 1 to 3 + v do
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: DOUBLE
18173: LD_INT 1
18175: DEC
18176: ST_TO_ADDR
18177: LD_INT 3
18179: PUSH
18180: LD_VAR 0 1
18184: PLUS
18185: PUSH
18186: FOR_TO
18187: IFFALSE 18351
// begin PrepareMechanic ( false , skill ) ;
18189: LD_INT 0
18191: PPUSH
18192: LD_VAR 0 4
18196: PPUSH
18197: CALL_OW 383
// un := CreateHuman ;
18201: LD_ADDR_VAR 0 5
18205: PUSH
18206: CALL_OW 44
18210: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18211: LD_VAR 0 5
18215: PPUSH
18216: LD_INT 999
18218: PPUSH
18219: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18223: LD_INT 14
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: LD_INT 27
18234: PUSH
18235: LD_INT 25
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_VAR 0 3
18246: PUSH
18247: LD_INT 2
18249: MOD
18250: PUSH
18251: LD_INT 1
18253: PLUS
18254: ARRAY
18255: PPUSH
18256: LD_INT 80
18258: PPUSH
18259: CALL 32084 0 5
// veh := CreateVehicle ;
18263: LD_ADDR_VAR 0 6
18267: PUSH
18268: CALL_OW 45
18272: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18273: LD_VAR 0 6
18277: PPUSH
18278: LD_INT 5
18280: PPUSH
18281: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18285: LD_VAR 0 6
18289: PPUSH
18290: LD_INT 26
18292: PPUSH
18293: LD_INT 0
18295: PPUSH
18296: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18300: LD_VAR 0 5
18304: PPUSH
18305: LD_VAR 0 6
18309: PPUSH
18310: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18314: LD_VAR 0 5
18318: PPUSH
18319: LD_INT 236
18321: PPUSH
18322: LD_INT 127
18324: PPUSH
18325: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18329: LD_ADDR_EXP 57
18333: PUSH
18334: LD_EXP 57
18338: PPUSH
18339: LD_VAR 0 6
18343: PPUSH
18344: CALL 64955 0 2
18348: ST_TO_ADDR
// end ;
18349: GO 18186
18351: POP
18352: POP
// wait ( 0 0$2 ) ;
18353: LD_INT 70
18355: PPUSH
18356: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: DOUBLE
18366: LD_INT 1
18368: DEC
18369: ST_TO_ADDR
18370: LD_INT 1
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: PUSH
18384: LD_OWVAR 67
18388: ARRAY
18389: PUSH
18390: FOR_TO
18391: IFFALSE 18534
// begin PrepareMechanic ( false , skill ) ;
18393: LD_INT 0
18395: PPUSH
18396: LD_VAR 0 4
18400: PPUSH
18401: CALL_OW 383
// un := CreateHuman ;
18405: LD_ADDR_VAR 0 5
18409: PUSH
18410: CALL_OW 44
18414: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18415: LD_VAR 0 5
18419: PPUSH
18420: LD_INT 999
18422: PPUSH
18423: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18427: LD_INT 14
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_INT 26
18438: PPUSH
18439: LD_INT 80
18441: PPUSH
18442: CALL 32084 0 5
// veh := CreateVehicle ;
18446: LD_ADDR_VAR 0 6
18450: PUSH
18451: CALL_OW 45
18455: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18456: LD_VAR 0 6
18460: PPUSH
18461: LD_INT 5
18463: PPUSH
18464: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18468: LD_VAR 0 6
18472: PPUSH
18473: LD_INT 26
18475: PPUSH
18476: LD_INT 0
18478: PPUSH
18479: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18483: LD_VAR 0 5
18487: PPUSH
18488: LD_VAR 0 6
18492: PPUSH
18493: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18497: LD_VAR 0 5
18501: PPUSH
18502: LD_INT 236
18504: PPUSH
18505: LD_INT 127
18507: PPUSH
18508: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18512: LD_ADDR_EXP 57
18516: PUSH
18517: LD_EXP 57
18521: PPUSH
18522: LD_VAR 0 6
18526: PPUSH
18527: CALL 64955 0 2
18531: ST_TO_ADDR
// end ;
18532: GO 18390
18534: POP
18535: POP
// wait ( 0 0$2 ) ;
18536: LD_INT 70
18538: PPUSH
18539: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: DOUBLE
18549: LD_INT 1
18551: DEC
18552: ST_TO_ADDR
18553: LD_INT 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: PUSH
18567: LD_OWVAR 67
18571: ARRAY
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18748
// begin PrepareMechanic ( false , skill ) ;
18576: LD_INT 0
18578: PPUSH
18579: LD_VAR 0 4
18583: PPUSH
18584: CALL_OW 383
// un := CreateHuman ;
18588: LD_ADDR_VAR 0 5
18592: PUSH
18593: CALL_OW 44
18597: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18598: LD_VAR 0 5
18602: PPUSH
18603: LD_INT 999
18605: PPUSH
18606: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18610: LD_INT 14
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: LD_INT 28
18621: PPUSH
18622: LD_INT 80
18624: PPUSH
18625: CALL 32084 0 5
// veh := CreateVehicle ;
18629: LD_ADDR_VAR 0 6
18633: PUSH
18634: CALL_OW 45
18638: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18639: LD_VAR 0 6
18643: PPUSH
18644: LD_INT 4
18646: PPUSH
18647: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18651: LD_VAR 0 6
18655: PPUSH
18656: LD_INT 26
18658: PPUSH
18659: LD_INT 0
18661: PPUSH
18662: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18666: LD_VAR 0 5
18670: PPUSH
18671: LD_VAR 0 6
18675: PPUSH
18676: CALL_OW 52
// if i mod 2 = 0 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 2
18687: MOD
18688: PUSH
18689: LD_INT 0
18691: EQUAL
18692: IFFALSE 18711
// ComMoveXY ( un , 136 , 61 ) else
18694: LD_VAR 0 5
18698: PPUSH
18699: LD_INT 136
18701: PPUSH
18702: LD_INT 61
18704: PPUSH
18705: CALL_OW 111
18709: GO 18726
// ComMoveXY ( un , 137 , 41 ) ;
18711: LD_VAR 0 5
18715: PPUSH
18716: LD_INT 137
18718: PPUSH
18719: LD_INT 41
18721: PPUSH
18722: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18726: LD_ADDR_EXP 57
18730: PUSH
18731: LD_EXP 57
18735: PPUSH
18736: LD_VAR 0 6
18740: PPUSH
18741: CALL 64955 0 2
18745: ST_TO_ADDR
// end ;
18746: GO 18573
18748: POP
18749: POP
// end ;
18750: LD_VAR 0 2
18754: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18755: LD_EXP 56
18759: IFFALSE 19130
18761: GO 18763
18763: DISABLE
18764: LD_INT 0
18766: PPUSH
18767: PPUSH
18768: PPUSH
18769: PPUSH
// begin enable ;
18770: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18771: LD_ADDR_VAR 0 2
18775: PUSH
18776: LD_EXP 56
18780: PPUSH
18781: LD_INT 50
18783: PUSH
18784: EMPTY
18785: LIST
18786: PPUSH
18787: CALL_OW 72
18791: ST_TO_ADDR
// arAttackersInf := [ ] ;
18792: LD_ADDR_EXP 56
18796: PUSH
18797: EMPTY
18798: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18799: LD_VAR 0 2
18803: PPUSH
18804: LD_INT 173
18806: PPUSH
18807: LD_INT 139
18809: PPUSH
18810: CALL_OW 111
// wait ( 0 0$10 ) ;
18814: LD_INT 350
18816: PPUSH
18817: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18821: LD_ADDR_VAR 0 1
18825: PUSH
18826: LD_VAR 0 2
18830: PPUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PPUSH
18841: CALL_OW 72
18845: PUSH
18846: FOR_IN
18847: IFFALSE 18978
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_INT 81
18856: PUSH
18857: LD_EXP 3
18861: PUSH
18862: LD_INT 2
18864: ARRAY
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: LD_INT 120
18875: PUSH
18876: LD_INT 11
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 21
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: PPUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 74
18934: ST_TO_ADDR
// if not nearest then
18935: LD_VAR 0 3
18939: NOT
18940: IFFALSE 18944
// break ;
18942: GO 18978
// SetTag ( nearest , tMined ) ;
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 11
18951: PPUSH
18952: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: LD_INT 0
18963: PPUSH
18964: LD_INT 0
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: CALL_OW 192
// end ;
18976: GO 18846
18978: POP
18979: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18980: LD_ADDR_VAR 0 2
18984: PUSH
18985: LD_VAR 0 2
18989: PPUSH
18990: LD_INT 50
18992: PUSH
18993: EMPTY
18994: LIST
18995: PPUSH
18996: CALL_OW 72
19000: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
19001: LD_VAR 0 2
19005: PPUSH
19006: LD_INT 155
19008: PPUSH
19009: LD_INT 119
19011: PPUSH
19012: CALL_OW 171
// repeat wait ( 0 0$3 ) ;
19016: LD_INT 105
19018: PPUSH
19019: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_VAR 0 2
19032: PPUSH
19033: LD_INT 50
19035: PUSH
19036: EMPTY
19037: LIST
19038: PPUSH
19039: CALL_OW 72
19043: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19044: LD_ADDR_VAR 0 4
19048: PUSH
19049: LD_INT 81
19051: PUSH
19052: LD_EXP 3
19056: PUSH
19057: LD_INT 2
19059: ARRAY
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: ST_TO_ADDR
// for i in tmp do
19070: LD_ADDR_VAR 0 1
19074: PUSH
19075: LD_VAR 0 2
19079: PUSH
19080: FOR_IN
19081: IFFALSE 19121
// if not HasTask ( i ) then
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 314
19092: NOT
19093: IFFALSE 19119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) until not tmp ;
19095: LD_VAR 0 1
19099: PPUSH
19100: LD_VAR 0 4
19104: PPUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 74
19114: PPUSH
19115: CALL_OW 115
19119: GO 19080
19121: POP
19122: POP
19123: LD_VAR 0 2
19127: NOT
19128: IFFALSE 19016
// end ;
19130: PPOPN 4
19132: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19133: LD_EXP 57
19137: IFFALSE 19249
19139: GO 19141
19141: DISABLE
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
// begin enable ;
19146: ENABLE
// tmp := arAttackersVeh ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_EXP 57
19156: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19157: LD_ADDR_EXP 57
19161: PUSH
19162: EMPTY
19163: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19164: LD_INT 70
19166: PPUSH
19167: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19171: LD_ADDR_VAR 0 2
19175: PUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: LD_INT 50
19183: PUSH
19184: EMPTY
19185: LIST
19186: PPUSH
19187: CALL_OW 72
19191: ST_TO_ADDR
// for i in tmp do
19192: LD_ADDR_VAR 0 1
19196: PUSH
19197: LD_VAR 0 2
19201: PUSH
19202: FOR_IN
19203: IFFALSE 19240
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 207
19212: PUSH
19213: LD_INT 125
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 185
19222: PUSH
19223: LD_INT 114
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL 67565 0 2
19238: GO 19202
19240: POP
19241: POP
19242: LD_VAR 0 2
19246: NOT
19247: IFFALSE 19164
// end ;
19249: PPOPN 2
19251: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19252: LD_EXP 49
19256: PUSH
19257: LD_EXP 4
19261: AND
19262: IFFALSE 19852
19264: GO 19266
19266: DISABLE
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// begin enable ;
19272: ENABLE
// if not arVehiclesAtttackers then
19273: LD_EXP 49
19277: NOT
19278: IFFALSE 19282
// exit ;
19280: GO 19852
// for i in arVehiclesAtttackers do
19282: LD_ADDR_VAR 0 1
19286: PUSH
19287: LD_EXP 49
19291: PUSH
19292: FOR_IN
19293: IFFALSE 19850
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19295: LD_VAR 0 1
19299: PPUSH
19300: CALL_OW 302
19304: NOT
19305: PUSH
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 255
19315: PUSH
19316: LD_EXP 3
19320: PUSH
19321: LD_INT 2
19323: ARRAY
19324: NONEQUAL
19325: OR
19326: IFFALSE 19346
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19328: LD_ADDR_EXP 49
19332: PUSH
19333: LD_EXP 49
19337: PUSH
19338: LD_VAR 0 1
19342: DIFF
19343: ST_TO_ADDR
// continue ;
19344: GO 19292
// end ; if GetTag ( i ) = 300 then
19346: LD_VAR 0 1
19350: PPUSH
19351: CALL_OW 110
19355: PUSH
19356: LD_INT 300
19358: EQUAL
19359: IFFALSE 19474
// begin if GetFuel ( i ) < 50 then
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 261
19370: PUSH
19371: LD_INT 50
19373: LESS
19374: IFFALSE 19433
// begin ComMoveXY ( i , 198 , 28 ) ;
19376: LD_VAR 0 1
19380: PPUSH
19381: LD_INT 198
19383: PPUSH
19384: LD_INT 28
19386: PPUSH
19387: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19391: LD_INT 35
19393: PPUSH
19394: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_INT 198
19405: PPUSH
19406: LD_INT 28
19408: PPUSH
19409: CALL_OW 297
19413: PUSH
19414: LD_INT 4
19416: LESS
19417: IFFALSE 19391
// SetFuel ( i , 100 ) ;
19419: LD_VAR 0 1
19423: PPUSH
19424: LD_INT 100
19426: PPUSH
19427: CALL_OW 240
// end else
19431: GO 19474
// if not IsInArea ( i , arParkingArea ) then
19433: LD_VAR 0 1
19437: PPUSH
19438: LD_INT 28
19440: PPUSH
19441: CALL_OW 308
19445: NOT
19446: IFFALSE 19462
// ComMoveToArea ( i , arParkingArea ) else
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 28
19455: PPUSH
19456: CALL_OW 113
19460: GO 19474
// SetTag ( i , 301 ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_INT 301
19469: PPUSH
19470: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 110
19483: PUSH
19484: LD_INT 301
19486: EQUAL
19487: IFFALSE 19629
// begin if GetLives ( i ) < 1000 then
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 256
19498: PUSH
19499: LD_INT 1000
19501: LESS
19502: IFFALSE 19606
// begin if not IsDrivenBy ( i ) then
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 311
19513: NOT
19514: IFFALSE 19518
// continue ;
19516: GO 19292
// mech := IsDrivenBy ( i ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 311
19532: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19533: LD_VAR 0 2
19537: PPUSH
19538: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19542: LD_VAR 0 2
19546: PPUSH
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19556: LD_INT 35
19558: PPUSH
19559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 256
19572: PUSH
19573: LD_INT 1000
19575: EQUAL
19576: IFFALSE 19556
// SetLives ( mech , 1000 ) ;
19578: LD_VAR 0 2
19582: PPUSH
19583: LD_INT 1000
19585: PPUSH
19586: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_VAR 0 1
19599: PPUSH
19600: CALL_OW 120
// end else
19604: GO 19629
// if IsDrivenBy ( i ) then
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL_OW 311
19615: IFFALSE 19629
// SetTag ( i , 0 ) ;
19617: LD_VAR 0 1
19621: PPUSH
19622: LD_INT 0
19624: PPUSH
19625: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 110
19638: PUSH
19639: LD_INT 300
19641: LESS
19642: IFFALSE 19848
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
19644: LD_ADDR_VAR 0 3
19648: PUSH
19649: LD_INT 5
19651: PPUSH
19652: LD_INT 81
19654: PUSH
19655: LD_EXP 3
19659: PUSH
19660: LD_INT 2
19662: ARRAY
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PPUSH
19668: CALL_OW 70
19672: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 256
19682: PUSH
19683: LD_INT 650
19685: LESS
19686: IFFALSE 19711
// begin ComStop ( i ) ;
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 141
// SetTag ( i , 300 ) ;
19697: LD_VAR 0 1
19701: PPUSH
19702: LD_INT 300
19704: PPUSH
19705: CALL_OW 109
// continue ;
19709: GO 19292
// end ; if enemy then
19711: LD_VAR 0 3
19715: IFFALSE 19755
// begin if not HasTask ( i ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 314
19726: NOT
19727: IFFALSE 19753
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19729: LD_VAR 0 1
19733: PPUSH
19734: LD_VAR 0 3
19738: PPUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 74
19748: PPUSH
19749: CALL_OW 115
// end else
19753: GO 19848
// if arVehiclesAtttackers then
19755: LD_EXP 49
19759: IFFALSE 19848
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19761: LD_ADDR_VAR 0 3
19765: PUSH
19766: LD_INT 81
19768: PUSH
19769: LD_EXP 3
19773: PUSH
19774: LD_INT 2
19776: ARRAY
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PPUSH
19782: CALL_OW 69
19786: ST_TO_ADDR
// if enemy then
19787: LD_VAR 0 3
19791: IFFALSE 19848
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_INT 215
19800: PUSH
19801: LD_INT 88
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 197
19810: PUSH
19811: LD_INT 90
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 178
19820: PUSH
19821: LD_INT 90
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 169
19830: PUSH
19831: LD_INT 104
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: PPUSH
19844: CALL 67565 0 2
// end ; end ; end ;
19848: GO 19292
19850: POP
19851: POP
// end ;
19852: PPOPN 3
19854: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19855: LD_INT 22
19857: PUSH
19858: LD_EXP 3
19862: PUSH
19863: LD_INT 2
19865: ARRAY
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 32
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 69
19889: IFFALSE 19972
19891: GO 19893
19893: DISABLE
19894: LD_INT 0
19896: PPUSH
// begin enable ;
19897: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19898: LD_ADDR_VAR 0 1
19902: PUSH
19903: LD_INT 22
19905: PUSH
19906: LD_EXP 3
19910: PUSH
19911: LD_INT 2
19913: ARRAY
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 32
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: PUSH
19938: FOR_IN
19939: IFFALSE 19970
// if GetFuel ( i ) < 3 then
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 261
19950: PUSH
19951: LD_INT 3
19953: LESS
19954: IFFALSE 19968
// SetFuel ( i , 3 ) ;
19956: LD_VAR 0 1
19960: PPUSH
19961: LD_INT 3
19963: PPUSH
19964: CALL_OW 240
19968: GO 19938
19970: POP
19971: POP
// end ;
19972: PPOPN 1
19974: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// uc_side := botSides [ 1 ] ;
19982: LD_ADDR_OWVAR 20
19986: PUSH
19987: LD_EXP 3
19991: PUSH
19992: LD_INT 1
19994: ARRAY
19995: ST_TO_ADDR
// uc_nation := nation_american ;
19996: LD_ADDR_OWVAR 21
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 4
20014: PUSH
20015: LD_INT 5
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: PUSH
20023: LD_OWVAR 67
20027: ARRAY
20028: ST_TO_ADDR
// amAttackersInf := [ ] ;
20029: LD_ADDR_EXP 58
20033: PUSH
20034: EMPTY
20035: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20036: LD_ADDR_EXP 59
20040: PUSH
20041: EMPTY
20042: ST_TO_ADDR
// InitHC_All ( ) ;
20043: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: DOUBLE
20053: LD_INT 1
20055: DEC
20056: ST_TO_ADDR
20057: LD_INT 2
20059: PUSH
20060: LD_INT 3
20062: PUSH
20063: LD_INT 4
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: PUSH
20071: LD_OWVAR 67
20075: ARRAY
20076: PUSH
20077: LD_VAR 0 1
20081: PLUS
20082: PUSH
20083: FOR_TO
20084: IFFALSE 20160
// begin PrepareSoldier ( false , skill ) ;
20086: LD_INT 0
20088: PPUSH
20089: LD_VAR 0 4
20093: PPUSH
20094: CALL_OW 381
// un := CreateHuman ;
20098: LD_ADDR_VAR 0 5
20102: PUSH
20103: CALL_OW 44
20107: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
20108: LD_VAR 0 5
20112: PPUSH
20113: LD_INT 30
20115: PPUSH
20116: LD_INT 0
20118: PPUSH
20119: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
20123: LD_ADDR_EXP 58
20127: PUSH
20128: LD_EXP 58
20132: PPUSH
20133: LD_VAR 0 5
20137: PPUSH
20138: CALL 64955 0 2
20142: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
20143: LD_VAR 0 5
20147: PPUSH
20148: LD_INT 110
20150: PPUSH
20151: LD_INT 129
20153: PPUSH
20154: CALL_OW 114
// end ;
20158: GO 20083
20160: POP
20161: POP
// for i := 1 to 2 + v do
20162: LD_ADDR_VAR 0 3
20166: PUSH
20167: DOUBLE
20168: LD_INT 1
20170: DEC
20171: ST_TO_ADDR
20172: LD_INT 2
20174: PUSH
20175: LD_VAR 0 1
20179: PLUS
20180: PUSH
20181: FOR_TO
20182: IFFALSE 20350
// begin PrepareMechanic ( false , skill ) ;
20184: LD_INT 0
20186: PPUSH
20187: LD_VAR 0 4
20191: PPUSH
20192: CALL_OW 383
// un := CreateHuman ;
20196: LD_ADDR_VAR 0 5
20200: PUSH
20201: CALL_OW 44
20205: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20206: LD_VAR 0 5
20210: PPUSH
20211: LD_INT 999
20213: PPUSH
20214: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20218: LD_INT 3
20220: PPUSH
20221: LD_INT 1
20223: PPUSH
20224: LD_INT 1
20226: PPUSH
20227: LD_INT 3
20229: PUSH
20230: LD_INT 5
20232: PUSH
20233: LD_INT 4
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 3
20248: MOD
20249: PUSH
20250: LD_INT 1
20252: PLUS
20253: ARRAY
20254: PPUSH
20255: LD_INT 80
20257: PPUSH
20258: CALL 32084 0 5
// veh := CreateVehicle ;
20262: LD_ADDR_VAR 0 6
20266: PUSH
20267: CALL_OW 45
20271: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20272: LD_VAR 0 6
20276: PPUSH
20277: LD_INT 0
20279: PPUSH
20280: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20284: LD_VAR 0 6
20288: PPUSH
20289: LD_INT 31
20291: PPUSH
20292: LD_INT 0
20294: PPUSH
20295: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20299: LD_VAR 0 5
20303: PPUSH
20304: LD_VAR 0 6
20308: PPUSH
20309: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20313: LD_VAR 0 5
20317: PPUSH
20318: LD_INT 96
20320: PPUSH
20321: LD_INT 137
20323: PPUSH
20324: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20328: LD_ADDR_EXP 59
20332: PUSH
20333: LD_EXP 59
20337: PPUSH
20338: LD_VAR 0 6
20342: PPUSH
20343: CALL 64955 0 2
20347: ST_TO_ADDR
// end ;
20348: GO 20181
20350: POP
20351: POP
// end ;
20352: LD_VAR 0 2
20356: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20357: LD_EXP 59
20361: IFFALSE 20497
20363: GO 20365
20365: DISABLE
20366: LD_INT 0
20368: PPUSH
20369: PPUSH
// begin enable ;
20370: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_EXP 59
20380: PUSH
20381: LD_EXP 58
20385: UNION
20386: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20387: LD_ADDR_EXP 57
20391: PUSH
20392: EMPTY
20393: ST_TO_ADDR
// amAttackersInf := [ ] ;
20394: LD_ADDR_EXP 58
20398: PUSH
20399: EMPTY
20400: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20401: LD_INT 70
20403: PPUSH
20404: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20408: LD_ADDR_VAR 0 2
20412: PUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: LD_INT 50
20420: PUSH
20421: EMPTY
20422: LIST
20423: PPUSH
20424: CALL_OW 72
20428: ST_TO_ADDR
// for i in tmp do
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: LD_VAR 0 2
20438: PUSH
20439: FOR_IN
20440: IFFALSE 20488
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20442: LD_VAR 0 1
20446: PPUSH
20447: LD_INT 96
20449: PUSH
20450: LD_INT 145
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 99
20459: PUSH
20460: LD_INT 130
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 87
20469: PUSH
20470: LD_INT 103
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: PPUSH
20482: CALL 67565 0 2
20486: GO 20439
20488: POP
20489: POP
20490: LD_VAR 0 2
20494: NOT
20495: IFFALSE 20401
// end ;
20497: PPOPN 2
20499: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20500: LD_EXP 39
20504: PUSH
20505: LD_EXP 5
20509: AND
20510: IFFALSE 21089
20512: GO 20514
20514: DISABLE
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
20519: PPUSH
// begin enable ;
20520: ENABLE
// if not amVehiclesAtttackers then
20521: LD_EXP 39
20525: NOT
20526: IFFALSE 20530
// exit ;
20528: GO 21089
// for i in amVehiclesAtttackers do
20530: LD_ADDR_VAR 0 1
20534: PUSH
20535: LD_EXP 39
20539: PUSH
20540: FOR_IN
20541: IFFALSE 21087
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 302
20552: NOT
20553: PUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 255
20563: PUSH
20564: LD_EXP 3
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: NONEQUAL
20573: OR
20574: IFFALSE 20594
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20576: LD_ADDR_EXP 39
20580: PUSH
20581: LD_EXP 39
20585: PUSH
20586: LD_VAR 0 1
20590: DIFF
20591: ST_TO_ADDR
// continue ;
20592: GO 20540
// end ; if GetTag ( i ) = 300 then
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 300
20606: EQUAL
20607: IFFALSE 20722
// begin if GetFuel ( i ) < 50 then
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 261
20618: PUSH
20619: LD_INT 50
20621: LESS
20622: IFFALSE 20681
// begin ComMoveXY ( i , 24 , 36 ) ;
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 24
20631: PPUSH
20632: LD_INT 36
20634: PPUSH
20635: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
20646: LD_VAR 0 1
20650: PPUSH
20651: LD_INT 24
20653: PPUSH
20654: LD_INT 36
20656: PPUSH
20657: CALL_OW 297
20661: PUSH
20662: LD_INT 4
20664: LESS
20665: IFFALSE 20639
// SetFuel ( i , 100 ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 100
20674: PPUSH
20675: CALL_OW 240
// end else
20679: GO 20722
// if not IsInArea ( i , amParkingArea ) then
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_INT 27
20688: PPUSH
20689: CALL_OW 308
20693: NOT
20694: IFFALSE 20710
// ComMoveToArea ( i , amParkingArea ) else
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_INT 27
20703: PPUSH
20704: CALL_OW 113
20708: GO 20722
// SetTag ( i , 301 ) ;
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_INT 301
20717: PPUSH
20718: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 110
20731: PUSH
20732: LD_INT 301
20734: EQUAL
20735: IFFALSE 20877
// begin if GetLives ( i ) < 1000 then
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 256
20746: PUSH
20747: LD_INT 1000
20749: LESS
20750: IFFALSE 20854
// begin if not IsDrivenBy ( i ) then
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 311
20761: NOT
20762: IFFALSE 20766
// continue ;
20764: GO 20540
// mech := IsDrivenBy ( i ) ;
20766: LD_ADDR_VAR 0 2
20770: PUSH
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 311
20780: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20781: LD_VAR 0 2
20785: PPUSH
20786: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20804: LD_INT 35
20806: PPUSH
20807: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 256
20820: PUSH
20821: LD_INT 1000
20823: EQUAL
20824: IFFALSE 20804
// SetLives ( mech , 1000 ) ;
20826: LD_VAR 0 2
20830: PPUSH
20831: LD_INT 1000
20833: PPUSH
20834: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20838: LD_VAR 0 2
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 120
// end else
20852: GO 20877
// if IsDrivenBy ( i ) then
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 311
20863: IFFALSE 20877
// SetTag ( i , 0 ) ;
20865: LD_VAR 0 1
20869: PPUSH
20870: LD_INT 0
20872: PPUSH
20873: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 110
20886: PUSH
20887: LD_INT 300
20889: LESS
20890: IFFALSE 21085
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_INT 3
20899: PPUSH
20900: LD_INT 81
20902: PUSH
20903: LD_EXP 3
20907: PUSH
20908: LD_INT 1
20910: ARRAY
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PPUSH
20916: CALL_OW 70
20920: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 256
20930: PUSH
20931: LD_INT 650
20933: LESS
20934: IFFALSE 20959
// begin ComStop ( i ) ;
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 141
// SetTag ( i , 300 ) ;
20945: LD_VAR 0 1
20949: PPUSH
20950: LD_INT 300
20952: PPUSH
20953: CALL_OW 109
// continue ;
20957: GO 20540
// end ; if enemy then
20959: LD_VAR 0 3
20963: IFFALSE 21003
// begin if not HasTask ( i ) then
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 314
20974: NOT
20975: IFFALSE 21001
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20977: LD_VAR 0 1
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 74
20996: PPUSH
20997: CALL_OW 115
// end else
21001: GO 21085
// if amVehiclesAtttackers then
21003: LD_EXP 39
21007: IFFALSE 21085
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
21009: LD_ADDR_VAR 0 3
21013: PUSH
21014: LD_INT 81
21016: PUSH
21017: LD_EXP 3
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: ST_TO_ADDR
// if enemy then
21035: LD_VAR 0 3
21039: IFFALSE 21085
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 49
21048: PUSH
21049: LD_INT 43
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 63
21058: PUSH
21059: LD_INT 56
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 72
21068: PUSH
21069: LD_INT 67
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL 67565 0 2
// end ; end ; end ;
21085: GO 20540
21087: POP
21088: POP
// end ;
21089: PPOPN 3
21091: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21092: LD_INT 22
21094: PUSH
21095: LD_EXP 3
21099: PUSH
21100: LD_INT 1
21102: ARRAY
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 32
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: IFFALSE 21209
21128: GO 21130
21130: DISABLE
21131: LD_INT 0
21133: PPUSH
// begin enable ;
21134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21135: LD_ADDR_VAR 0 1
21139: PUSH
21140: LD_INT 22
21142: PUSH
21143: LD_EXP 3
21147: PUSH
21148: LD_INT 1
21150: ARRAY
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 32
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 69
21174: PUSH
21175: FOR_IN
21176: IFFALSE 21207
// if GetFuel ( i ) < 3 then
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 261
21187: PUSH
21188: LD_INT 3
21190: LESS
21191: IFFALSE 21205
// SetFuel ( i , 3 ) ;
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_INT 3
21200: PPUSH
21201: CALL_OW 240
21205: GO 21175
21207: POP
21208: POP
// end ; end_of_file
21209: PPOPN 1
21211: END
// every 0 0$20 trigger game do
21212: LD_EXP 2
21216: IFFALSE 21265
21218: GO 21220
21220: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21221: LD_INT 20
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_INT 21
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 5
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PPUSH
21243: LD_EXP 21
21247: PUSH
21248: LD_INT 2
21250: ARRAY
21251: PPUSH
21252: LD_EXP 21
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PPUSH
21261: CALL 21266 0 3
21265: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
21271: PPUSH
// if not areas then
21272: LD_VAR 0 1
21276: NOT
21277: IFFALSE 21281
// exit ;
21279: GO 21658
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21281: LD_ADDR_VAR 0 7
21285: PUSH
21286: LD_INT 17
21288: PUSH
21289: LD_INT 18
21291: PUSH
21292: LD_INT 19
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: ST_TO_ADDR
// x := 5 ;
21300: LD_ADDR_VAR 0 6
21304: PUSH
21305: LD_INT 5
21307: ST_TO_ADDR
// repeat wait ( time ) ;
21308: LD_VAR 0 2
21312: PPUSH
21313: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21317: LD_OWVAR 1
21321: PUSH
21322: LD_INT 37800
21324: PUSH
21325: LD_INT 31500
21327: PUSH
21328: LD_INT 25200
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: LIST
21335: PUSH
21336: LD_OWVAR 67
21340: ARRAY
21341: LESS
21342: IFFALSE 21481
// begin for i := 1 to multi_sides do
21344: LD_ADDR_VAR 0 5
21348: PUSH
21349: DOUBLE
21350: LD_INT 1
21352: DEC
21353: ST_TO_ADDR
21354: LD_EXP 7
21358: PUSH
21359: FOR_TO
21360: IFFALSE 21472
// if multi_sides [ i ] then
21362: LD_EXP 7
21366: PUSH
21367: LD_VAR 0 5
21371: ARRAY
21372: IFFALSE 21470
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21374: LD_VAR 0 7
21378: PUSH
21379: LD_EXP 7
21383: PUSH
21384: LD_VAR 0 5
21388: ARRAY
21389: ARRAY
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 287
21398: PUSH
21399: LD_INT 32
21401: PUSH
21402: LD_INT 25
21404: PUSH
21405: LD_INT 23
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: PUSH
21413: LD_OWVAR 67
21417: ARRAY
21418: LESS
21419: IFFALSE 21470
// begin amount := amount - ( x * 10 ) ;
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_VAR 0 3
21430: PUSH
21431: LD_VAR 0 6
21435: PUSH
21436: LD_INT 10
21438: MUL
21439: MINUS
21440: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21441: LD_VAR 0 6
21445: PPUSH
21446: LD_VAR 0 7
21450: PUSH
21451: LD_EXP 7
21455: PUSH
21456: LD_VAR 0 5
21460: ARRAY
21461: ARRAY
21462: PPUSH
21463: LD_INT 1
21465: PPUSH
21466: CALL_OW 55
// end ; end ;
21470: GO 21359
21472: POP
21473: POP
// wait ( 0 0$2 ) ;
21474: LD_INT 70
21476: PPUSH
21477: CALL_OW 67
// end ; for i in areas do
21481: LD_ADDR_VAR 0 5
21485: PUSH
21486: LD_VAR 0 1
21490: PUSH
21491: FOR_IN
21492: IFFALSE 21575
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 287
21506: PUSH
21507: LD_INT 25
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 20
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: PUSH
21521: LD_OWVAR 67
21525: ARRAY
21526: LESS
21527: IFFALSE 21573
// begin wait ( 0 0$5 ) ;
21529: LD_INT 175
21531: PPUSH
21532: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21536: LD_VAR 0 6
21540: PPUSH
21541: LD_VAR 0 5
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_VAR 0 3
21562: PUSH
21563: LD_VAR 0 6
21567: PUSH
21568: LD_INT 10
21570: MUL
21571: MINUS
21572: ST_TO_ADDR
// end ; end ;
21573: GO 21491
21575: POP
21576: POP
// time := time + 0 0$2 ;
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: LD_VAR 0 2
21586: PUSH
21587: LD_INT 70
21589: PLUS
21590: ST_TO_ADDR
// x := x - 1 ;
21591: LD_ADDR_VAR 0 6
21595: PUSH
21596: LD_VAR 0 6
21600: PUSH
21601: LD_INT 1
21603: MINUS
21604: ST_TO_ADDR
// if x = 0 then
21605: LD_VAR 0 6
21609: PUSH
21610: LD_INT 0
21612: EQUAL
21613: IFFALSE 21623
// x := 5 ;
21615: LD_ADDR_VAR 0 6
21619: PUSH
21620: LD_INT 5
21622: ST_TO_ADDR
// if time > 2 2$00 then
21623: LD_VAR 0 2
21627: PUSH
21628: LD_INT 4200
21630: GREATER
21631: IFFALSE 21641
// time := 0 0$30 ;
21633: LD_ADDR_VAR 0 2
21637: PUSH
21638: LD_INT 1050
21640: ST_TO_ADDR
// until not game or amount <= 0 ;
21641: LD_EXP 2
21645: NOT
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 0
21654: LESSEQUAL
21655: OR
21656: IFFALSE 21308
// end ; end_of_file
21658: LD_VAR 0 4
21662: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21663: LD_VAR 0 1
21667: PUSH
21668: LD_INT 200
21670: DOUBLE
21671: GREATEREQUAL
21672: IFFALSE 21680
21674: LD_INT 299
21676: DOUBLE
21677: LESSEQUAL
21678: IFTRUE 21682
21680: GO 21714
21682: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: LD_VAR 0 4
21702: PPUSH
21703: LD_VAR 0 5
21707: PPUSH
21708: CALL 22461 0 5
21712: GO 21791
21714: LD_INT 300
21716: DOUBLE
21717: GREATEREQUAL
21718: IFFALSE 21726
21720: LD_INT 399
21722: DOUBLE
21723: LESSEQUAL
21724: IFTRUE 21728
21726: GO 21790
21728: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21729: LD_VAR 0 1
21733: PPUSH
21734: LD_VAR 0 2
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: LD_VAR 0 5
21753: PPUSH
21754: LD_VAR 0 6
21758: PPUSH
21759: LD_VAR 0 7
21763: PPUSH
21764: LD_VAR 0 8
21768: PPUSH
21769: LD_VAR 0 9
21773: PPUSH
21774: LD_VAR 0 10
21778: PPUSH
21779: LD_VAR 0 11
21783: PPUSH
21784: CALL 70141 0 11
21788: GO 21791
21790: POP
// end ;
21791: PPOPN 11
21793: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21794: LD_VAR 0 1
21798: PPUSH
21799: LD_VAR 0 2
21803: PPUSH
21804: LD_VAR 0 3
21808: PPUSH
21809: LD_VAR 0 4
21813: PPUSH
21814: LD_VAR 0 5
21818: PPUSH
21819: CALL 21876 0 5
// end ; end_of_file
21823: PPOPN 5
21825: END
// export function SOS_UnitDestroyed ( un ) ; begin
21826: LD_INT 0
21828: PPUSH
// ComRadiation ( un ) ;
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL 22865 0 1
// end ;
21838: LD_VAR 0 2
21842: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21843: LD_INT 0
21845: PPUSH
// ComRadiation ( un ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL 22865 0 1
// end ;
21855: LD_VAR 0 2
21859: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21860: LD_INT 0
21862: PPUSH
// end ;
21863: LD_VAR 0 4
21867: RET
// export function SOS_Command ( cmd ) ; begin
21868: LD_INT 0
21870: PPUSH
// end ;
21871: LD_VAR 0 2
21875: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21876: LD_INT 0
21878: PPUSH
// end ;
21879: LD_VAR 0 6
21883: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
21884: LD_INT 0
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
// if not vehicle or not factory then
21890: LD_VAR 0 1
21894: NOT
21895: PUSH
21896: LD_VAR 0 2
21900: NOT
21901: OR
21902: IFFALSE 21906
// exit ;
21904: GO 22456
// if not factoryWaypoints then
21906: LD_EXP 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22456
// for i := 1 to Count ( factoryWaypoints ) do
21915: LD_ADDR_VAR 0 4
21919: PUSH
21920: DOUBLE
21921: LD_INT 1
21923: DEC
21924: ST_TO_ADDR
21925: LD_EXP 70
21929: PPUSH
21930: CALL 29346 0 1
21934: PUSH
21935: FOR_TO
21936: IFFALSE 22454
// if factoryWaypoints [ i ] [ 2 ] = factory then
21938: LD_EXP 70
21942: PUSH
21943: LD_VAR 0 4
21947: ARRAY
21948: PUSH
21949: LD_INT 2
21951: ARRAY
21952: PUSH
21953: LD_VAR 0 2
21957: EQUAL
21958: IFFALSE 22452
// begin if GetControl ( vehicle ) = control_manual then
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 263
21969: PUSH
21970: LD_INT 1
21972: EQUAL
21973: IFFALSE 22335
// begin driver := IsDrivenBy ( vehicle ) ;
21975: LD_ADDR_VAR 0 5
21979: PUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 311
21989: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21990: LD_VAR 0 5
21994: PUSH
21995: LD_EXP 71
21999: IN
22000: PUSH
22001: LD_VAR 0 1
22005: PUSH
22006: LD_EXP 71
22010: IN
22011: OR
22012: IFFALSE 22018
// exit ;
22014: POP
22015: POP
22016: GO 22456
// if not HasTask ( driver ) then
22018: LD_VAR 0 5
22022: PPUSH
22023: CALL_OW 314
22027: NOT
22028: IFFALSE 22333
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22030: LD_ADDR_EXP 71
22034: PUSH
22035: LD_EXP 71
22039: PPUSH
22040: LD_VAR 0 5
22044: PPUSH
22045: CALL 64955 0 2
22049: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22050: LD_ADDR_EXP 71
22054: PUSH
22055: LD_EXP 71
22059: PPUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL 64955 0 2
22069: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22070: LD_ADDR_VAR 0 6
22074: PUSH
22075: LD_EXP 70
22079: PUSH
22080: LD_VAR 0 4
22084: ARRAY
22085: PUSH
22086: LD_INT 3
22088: ARRAY
22089: PPUSH
22090: LD_EXP 70
22094: PUSH
22095: LD_VAR 0 4
22099: ARRAY
22100: PUSH
22101: LD_INT 4
22103: ARRAY
22104: PPUSH
22105: CALL_OW 428
22109: ST_TO_ADDR
// if hex then
22110: LD_VAR 0 6
22114: IFFALSE 22132
// ComMoveUnit ( driver , hex ) else
22116: LD_VAR 0 5
22120: PPUSH
22121: LD_VAR 0 6
22125: PPUSH
22126: CALL_OW 112
22130: GO 22216
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22132: LD_VAR 0 1
22136: PPUSH
22137: LD_EXP 70
22141: PUSH
22142: LD_VAR 0 4
22146: ARRAY
22147: PUSH
22148: LD_INT 3
22150: ARRAY
22151: PPUSH
22152: LD_EXP 70
22156: PUSH
22157: LD_VAR 0 4
22161: ARRAY
22162: PUSH
22163: LD_INT 4
22165: ARRAY
22166: PPUSH
22167: CALL_OW 297
22171: PUSH
22172: LD_INT 0
22174: GREATER
22175: IFFALSE 22216
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22177: LD_VAR 0 5
22181: PPUSH
22182: LD_EXP 70
22186: PUSH
22187: LD_VAR 0 4
22191: ARRAY
22192: PUSH
22193: LD_INT 3
22195: ARRAY
22196: PPUSH
22197: LD_EXP 70
22201: PUSH
22202: LD_VAR 0 4
22206: ARRAY
22207: PUSH
22208: LD_INT 4
22210: ARRAY
22211: PPUSH
22212: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22216: LD_VAR 0 5
22220: PPUSH
22221: CALL_OW 181
// if Multiplayer then
22225: LD_OWVAR 4
22229: IFFALSE 22278
// begin repeat wait ( 10 ) ;
22231: LD_INT 10
22233: PPUSH
22234: CALL_OW 67
// until not IsInUnit ( driver ) ;
22238: LD_VAR 0 5
22242: PPUSH
22243: CALL_OW 310
22247: NOT
22248: IFFALSE 22231
// if not HasTask ( driver ) then
22250: LD_VAR 0 5
22254: PPUSH
22255: CALL_OW 314
22259: NOT
22260: IFFALSE 22276
// ComEnterUnit ( driver , factory ) ;
22262: LD_VAR 0 5
22266: PPUSH
22267: LD_VAR 0 2
22271: PPUSH
22272: CALL_OW 120
// end else
22276: GO 22292
// AddComEnterUnit ( driver , factory ) ;
22278: LD_VAR 0 5
22282: PPUSH
22283: LD_VAR 0 2
22287: PPUSH
22288: CALL_OW 180
// wait ( 0 0$1 ) ;
22292: LD_INT 35
22294: PPUSH
22295: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22299: LD_ADDR_EXP 71
22303: PUSH
22304: LD_EXP 71
22308: PUSH
22309: LD_VAR 0 5
22313: DIFF
22314: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22315: LD_ADDR_EXP 71
22319: PUSH
22320: LD_EXP 71
22324: PUSH
22325: LD_VAR 0 1
22329: DIFF
22330: ST_TO_ADDR
// break ;
22331: GO 22454
// end ; end else
22333: GO 22452
// if GetControl ( vehicle ) = control_remote then
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL_OW 263
22344: PUSH
22345: LD_INT 2
22347: EQUAL
22348: IFFALSE 22411
// begin wait ( 0 0$2 ) ;
22350: LD_INT 70
22352: PPUSH
22353: CALL_OW 67
// if Connect ( vehicle ) then
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL 35552 0 1
22366: IFFALSE 22407
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_EXP 70
22377: PUSH
22378: LD_VAR 0 4
22382: ARRAY
22383: PUSH
22384: LD_INT 3
22386: ARRAY
22387: PPUSH
22388: LD_EXP 70
22392: PUSH
22393: LD_VAR 0 4
22397: ARRAY
22398: PUSH
22399: LD_INT 4
22401: ARRAY
22402: PPUSH
22403: CALL_OW 111
// break ;
22407: GO 22454
// end else
22409: GO 22452
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22411: LD_VAR 0 1
22415: PPUSH
22416: LD_EXP 70
22420: PUSH
22421: LD_VAR 0 4
22425: ARRAY
22426: PUSH
22427: LD_INT 3
22429: ARRAY
22430: PPUSH
22431: LD_EXP 70
22435: PUSH
22436: LD_VAR 0 4
22440: ARRAY
22441: PUSH
22442: LD_INT 4
22444: ARRAY
22445: PPUSH
22446: CALL_OW 111
// break ;
22450: GO 22454
// end ; end ;
22452: GO 21935
22454: POP
22455: POP
// end ;
22456: LD_VAR 0 3
22460: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22461: LD_INT 0
22463: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22464: LD_VAR 0 1
22468: PUSH
22469: LD_INT 250
22471: EQUAL
22472: PUSH
22473: LD_VAR 0 2
22477: PPUSH
22478: CALL_OW 264
22482: PUSH
22483: LD_INT 81
22485: EQUAL
22486: AND
22487: IFFALSE 22508
// MinerPlaceMine ( unit , x , y ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: LD_VAR 0 4
22498: PPUSH
22499: LD_VAR 0 5
22503: PPUSH
22504: CALL 25600 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22508: LD_VAR 0 1
22512: PUSH
22513: LD_INT 251
22515: EQUAL
22516: PUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL_OW 264
22526: PUSH
22527: LD_INT 81
22529: EQUAL
22530: AND
22531: IFFALSE 22552
// MinerDetonateMine ( unit , x , y ) ;
22533: LD_VAR 0 2
22537: PPUSH
22538: LD_VAR 0 4
22542: PPUSH
22543: LD_VAR 0 5
22547: PPUSH
22548: CALL 25875 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22552: LD_VAR 0 1
22556: PUSH
22557: LD_INT 252
22559: EQUAL
22560: PUSH
22561: LD_VAR 0 2
22565: PPUSH
22566: CALL_OW 264
22570: PUSH
22571: LD_INT 81
22573: EQUAL
22574: AND
22575: IFFALSE 22596
// MinerCreateMinefield ( unit , x , y ) ;
22577: LD_VAR 0 2
22581: PPUSH
22582: LD_VAR 0 4
22586: PPUSH
22587: LD_VAR 0 5
22591: PPUSH
22592: CALL 26292 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22596: LD_VAR 0 1
22600: PUSH
22601: LD_INT 253
22603: EQUAL
22604: PUSH
22605: LD_VAR 0 2
22609: PPUSH
22610: CALL_OW 257
22614: PUSH
22615: LD_INT 5
22617: EQUAL
22618: AND
22619: IFFALSE 22640
// ComBinocular ( unit , x , y ) ;
22621: LD_VAR 0 2
22625: PPUSH
22626: LD_VAR 0 4
22630: PPUSH
22631: LD_VAR 0 5
22635: PPUSH
22636: CALL 26661 0 3
// if selectedUnit then
22640: LD_VAR 0 3
22644: IFFALSE 22700
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22646: LD_VAR 0 1
22650: PUSH
22651: LD_INT 254
22653: EQUAL
22654: PUSH
22655: LD_VAR 0 2
22659: PPUSH
22660: CALL_OW 264
22664: PUSH
22665: LD_INT 99
22667: EQUAL
22668: AND
22669: PUSH
22670: LD_VAR 0 3
22674: PPUSH
22675: CALL_OW 263
22679: PUSH
22680: LD_INT 3
22682: EQUAL
22683: AND
22684: IFFALSE 22700
// HackDestroyVehicle ( unit , selectedUnit ) ;
22686: LD_VAR 0 2
22690: PPUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: CALL 24964 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22700: LD_VAR 0 1
22704: PUSH
22705: LD_INT 255
22707: EQUAL
22708: PUSH
22709: LD_VAR 0 2
22713: PPUSH
22714: CALL_OW 264
22718: PUSH
22719: LD_INT 14
22721: PUSH
22722: LD_INT 53
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: IN
22729: AND
22730: PUSH
22731: LD_VAR 0 4
22735: PPUSH
22736: LD_VAR 0 5
22740: PPUSH
22741: CALL_OW 488
22745: AND
22746: IFFALSE 22770
// CutTreeXYR ( unit , x , y , 12 ) ;
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_VAR 0 4
22757: PPUSH
22758: LD_VAR 0 5
22762: PPUSH
22763: LD_INT 12
22765: PPUSH
22766: CALL 22961 0 4
// if cmd = 256 then
22770: LD_VAR 0 1
22774: PUSH
22775: LD_INT 256
22777: EQUAL
22778: IFFALSE 22799
// SetFactoryWaypoint ( unit , x , y ) ;
22780: LD_VAR 0 2
22784: PPUSH
22785: LD_VAR 0 4
22789: PPUSH
22790: LD_VAR 0 5
22794: PPUSH
22795: CALL 70149 0 3
// if cmd = 257 then
22799: LD_VAR 0 1
22803: PUSH
22804: LD_INT 257
22806: EQUAL
22807: IFFALSE 22828
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22809: LD_VAR 0 2
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 70639 0 3
// if cmd = 258 then
22828: LD_VAR 0 1
22832: PUSH
22833: LD_INT 258
22835: EQUAL
22836: IFFALSE 22860
// BurnTreeXYR ( unit , x , y , 8 ) ;
22838: LD_VAR 0 2
22842: PPUSH
22843: LD_VAR 0 4
22847: PPUSH
22848: LD_VAR 0 5
22852: PPUSH
22853: LD_INT 8
22855: PPUSH
22856: CALL 23355 0 4
// end ;
22860: LD_VAR 0 6
22864: RET
// export function ComRadiation ( un ) ; var eff ; begin
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 264
22878: PUSH
22879: LD_INT 91
22881: NONEQUAL
22882: IFFALSE 22886
// exit ;
22884: GO 22956
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22886: LD_INT 68
22888: PPUSH
22889: LD_VAR 0 1
22893: PPUSH
22894: CALL_OW 255
22898: PPUSH
22899: CALL_OW 321
22903: PUSH
22904: LD_INT 2
22906: EQUAL
22907: IFFALSE 22919
// eff := 50 else
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: LD_INT 50
22916: ST_TO_ADDR
22917: GO 22927
// eff := 25 ;
22919: LD_ADDR_VAR 0 3
22923: PUSH
22924: LD_INT 25
22926: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 250
22936: PPUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: CALL_OW 251
22946: PPUSH
22947: LD_VAR 0 3
22951: PPUSH
22952: CALL_OW 495
// end ;
22956: LD_VAR 0 2
22960: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 302
22981: NOT
22982: PUSH
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: CALL_OW 488
22997: NOT
22998: OR
22999: PUSH
23000: LD_VAR 0 4
23004: NOT
23005: OR
23006: IFFALSE 23010
// exit ;
23008: GO 23350
// list := [ ] ;
23010: LD_ADDR_VAR 0 13
23014: PUSH
23015: EMPTY
23016: ST_TO_ADDR
// if x - r < 0 then
23017: LD_VAR 0 2
23021: PUSH
23022: LD_VAR 0 4
23026: MINUS
23027: PUSH
23028: LD_INT 0
23030: LESS
23031: IFFALSE 23043
// min_x := 0 else
23033: LD_ADDR_VAR 0 7
23037: PUSH
23038: LD_INT 0
23040: ST_TO_ADDR
23041: GO 23059
// min_x := x - r ;
23043: LD_ADDR_VAR 0 7
23047: PUSH
23048: LD_VAR 0 2
23052: PUSH
23053: LD_VAR 0 4
23057: MINUS
23058: ST_TO_ADDR
// if y - r < 0 then
23059: LD_VAR 0 3
23063: PUSH
23064: LD_VAR 0 4
23068: MINUS
23069: PUSH
23070: LD_INT 0
23072: LESS
23073: IFFALSE 23085
// min_y := 0 else
23075: LD_ADDR_VAR 0 8
23079: PUSH
23080: LD_INT 0
23082: ST_TO_ADDR
23083: GO 23101
// min_y := y - r ;
23085: LD_ADDR_VAR 0 8
23089: PUSH
23090: LD_VAR 0 3
23094: PUSH
23095: LD_VAR 0 4
23099: MINUS
23100: ST_TO_ADDR
// max_x := x + r ;
23101: LD_ADDR_VAR 0 9
23105: PUSH
23106: LD_VAR 0 2
23110: PUSH
23111: LD_VAR 0 4
23115: PLUS
23116: ST_TO_ADDR
// max_y := y + r ;
23117: LD_ADDR_VAR 0 10
23121: PUSH
23122: LD_VAR 0 3
23126: PUSH
23127: LD_VAR 0 4
23131: PLUS
23132: ST_TO_ADDR
// for _x = min_x to max_x do
23133: LD_ADDR_VAR 0 11
23137: PUSH
23138: DOUBLE
23139: LD_VAR 0 7
23143: DEC
23144: ST_TO_ADDR
23145: LD_VAR 0 9
23149: PUSH
23150: FOR_TO
23151: IFFALSE 23268
// for _y = min_y to max_y do
23153: LD_ADDR_VAR 0 12
23157: PUSH
23158: DOUBLE
23159: LD_VAR 0 8
23163: DEC
23164: ST_TO_ADDR
23165: LD_VAR 0 10
23169: PUSH
23170: FOR_TO
23171: IFFALSE 23264
// begin if not ValidHex ( _x , _y ) then
23173: LD_VAR 0 11
23177: PPUSH
23178: LD_VAR 0 12
23182: PPUSH
23183: CALL_OW 488
23187: NOT
23188: IFFALSE 23192
// continue ;
23190: GO 23170
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23192: LD_VAR 0 11
23196: PPUSH
23197: LD_VAR 0 12
23201: PPUSH
23202: CALL_OW 351
23206: PUSH
23207: LD_VAR 0 11
23211: PPUSH
23212: LD_VAR 0 12
23216: PPUSH
23217: CALL_OW 554
23221: AND
23222: IFFALSE 23262
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23224: LD_ADDR_VAR 0 13
23228: PUSH
23229: LD_VAR 0 13
23233: PPUSH
23234: LD_VAR 0 13
23238: PUSH
23239: LD_INT 1
23241: PLUS
23242: PPUSH
23243: LD_VAR 0 11
23247: PUSH
23248: LD_VAR 0 12
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PPUSH
23257: CALL_OW 2
23261: ST_TO_ADDR
// end ;
23262: GO 23170
23264: POP
23265: POP
23266: GO 23150
23268: POP
23269: POP
// if not list then
23270: LD_VAR 0 13
23274: NOT
23275: IFFALSE 23279
// exit ;
23277: GO 23350
// for i in list do
23279: LD_ADDR_VAR 0 6
23283: PUSH
23284: LD_VAR 0 13
23288: PUSH
23289: FOR_IN
23290: IFFALSE 23348
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_STRING M
23299: PUSH
23300: LD_VAR 0 6
23304: PUSH
23305: LD_INT 1
23307: ARRAY
23308: PUSH
23309: LD_VAR 0 6
23313: PUSH
23314: LD_INT 2
23316: ARRAY
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: PPUSH
23342: CALL_OW 447
23346: GO 23289
23348: POP
23349: POP
// end ;
23350: LD_VAR 0 5
23354: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23355: LD_INT 0
23357: PPUSH
23358: PPUSH
23359: PPUSH
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 302
23376: NOT
23377: PUSH
23378: LD_VAR 0 2
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: CALL_OW 488
23392: NOT
23393: OR
23394: PUSH
23395: LD_VAR 0 4
23399: NOT
23400: OR
23401: IFFALSE 23405
// exit ;
23403: GO 23918
// list := [ ] ;
23405: LD_ADDR_VAR 0 13
23409: PUSH
23410: EMPTY
23411: ST_TO_ADDR
// if x - r < 0 then
23412: LD_VAR 0 2
23416: PUSH
23417: LD_VAR 0 4
23421: MINUS
23422: PUSH
23423: LD_INT 0
23425: LESS
23426: IFFALSE 23438
// min_x := 0 else
23428: LD_ADDR_VAR 0 7
23432: PUSH
23433: LD_INT 0
23435: ST_TO_ADDR
23436: GO 23454
// min_x := x - r ;
23438: LD_ADDR_VAR 0 7
23442: PUSH
23443: LD_VAR 0 2
23447: PUSH
23448: LD_VAR 0 4
23452: MINUS
23453: ST_TO_ADDR
// if y - r < 0 then
23454: LD_VAR 0 3
23458: PUSH
23459: LD_VAR 0 4
23463: MINUS
23464: PUSH
23465: LD_INT 0
23467: LESS
23468: IFFALSE 23480
// min_y := 0 else
23470: LD_ADDR_VAR 0 8
23474: PUSH
23475: LD_INT 0
23477: ST_TO_ADDR
23478: GO 23496
// min_y := y - r ;
23480: LD_ADDR_VAR 0 8
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_VAR 0 4
23494: MINUS
23495: ST_TO_ADDR
// max_x := x + r ;
23496: LD_ADDR_VAR 0 9
23500: PUSH
23501: LD_VAR 0 2
23505: PUSH
23506: LD_VAR 0 4
23510: PLUS
23511: ST_TO_ADDR
// max_y := y + r ;
23512: LD_ADDR_VAR 0 10
23516: PUSH
23517: LD_VAR 0 3
23521: PUSH
23522: LD_VAR 0 4
23526: PLUS
23527: ST_TO_ADDR
// for _x = min_x to max_x do
23528: LD_ADDR_VAR 0 11
23532: PUSH
23533: DOUBLE
23534: LD_VAR 0 7
23538: DEC
23539: ST_TO_ADDR
23540: LD_VAR 0 9
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23663
// for _y = min_y to max_y do
23548: LD_ADDR_VAR 0 12
23552: PUSH
23553: DOUBLE
23554: LD_VAR 0 8
23558: DEC
23559: ST_TO_ADDR
23560: LD_VAR 0 10
23564: PUSH
23565: FOR_TO
23566: IFFALSE 23659
// begin if not ValidHex ( _x , _y ) then
23568: LD_VAR 0 11
23572: PPUSH
23573: LD_VAR 0 12
23577: PPUSH
23578: CALL_OW 488
23582: NOT
23583: IFFALSE 23587
// continue ;
23585: GO 23565
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23587: LD_VAR 0 11
23591: PPUSH
23592: LD_VAR 0 12
23596: PPUSH
23597: CALL_OW 351
23601: PUSH
23602: LD_VAR 0 11
23606: PPUSH
23607: LD_VAR 0 12
23611: PPUSH
23612: CALL_OW 554
23616: AND
23617: IFFALSE 23657
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23619: LD_ADDR_VAR 0 13
23623: PUSH
23624: LD_VAR 0 13
23628: PPUSH
23629: LD_VAR 0 13
23633: PUSH
23634: LD_INT 1
23636: PLUS
23637: PPUSH
23638: LD_VAR 0 11
23642: PUSH
23643: LD_VAR 0 12
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 2
23656: ST_TO_ADDR
// end ;
23657: GO 23565
23659: POP
23660: POP
23661: GO 23545
23663: POP
23664: POP
// if not list then
23665: LD_VAR 0 13
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 23918
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23674: LD_ADDR_VAR 0 13
23678: PUSH
23679: LD_VAR 0 1
23683: PPUSH
23684: LD_VAR 0 13
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: LD_INT 1
23694: PPUSH
23695: CALL 32694 0 4
23699: ST_TO_ADDR
// ComStop ( flame ) ;
23700: LD_VAR 0 1
23704: PPUSH
23705: CALL_OW 141
// for i in list do
23709: LD_ADDR_VAR 0 6
23713: PUSH
23714: LD_VAR 0 13
23718: PUSH
23719: FOR_IN
23720: IFFALSE 23751
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_VAR 0 6
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: PPUSH
23736: LD_VAR 0 6
23740: PUSH
23741: LD_INT 2
23743: ARRAY
23744: PPUSH
23745: CALL_OW 176
23749: GO 23719
23751: POP
23752: POP
// repeat wait ( 0 0$1 ) ;
23753: LD_INT 35
23755: PPUSH
23756: CALL_OW 67
// task := GetTaskList ( flame ) ;
23760: LD_ADDR_VAR 0 14
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 437
23774: ST_TO_ADDR
// if not task then
23775: LD_VAR 0 14
23779: NOT
23780: IFFALSE 23784
// exit ;
23782: GO 23918
// if task [ 1 ] [ 1 ] <> | then
23784: LD_VAR 0 14
23788: PUSH
23789: LD_INT 1
23791: ARRAY
23792: PUSH
23793: LD_INT 1
23795: ARRAY
23796: PUSH
23797: LD_STRING |
23799: NONEQUAL
23800: IFFALSE 23804
// exit ;
23802: GO 23918
// _x := task [ 1 ] [ 2 ] ;
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_VAR 0 14
23813: PUSH
23814: LD_INT 1
23816: ARRAY
23817: PUSH
23818: LD_INT 2
23820: ARRAY
23821: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23822: LD_ADDR_VAR 0 12
23826: PUSH
23827: LD_VAR 0 14
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PUSH
23836: LD_INT 3
23838: ARRAY
23839: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23840: LD_VAR 0 11
23844: PPUSH
23845: LD_VAR 0 12
23849: PPUSH
23850: CALL_OW 351
23854: NOT
23855: PUSH
23856: LD_VAR 0 11
23860: PPUSH
23861: LD_VAR 0 12
23865: PPUSH
23866: CALL_OW 554
23870: NOT
23871: OR
23872: IFFALSE 23906
// begin task := Delete ( task , 1 ) ;
23874: LD_ADDR_VAR 0 14
23878: PUSH
23879: LD_VAR 0 14
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: CALL_OW 3
23891: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23892: LD_VAR 0 1
23896: PPUSH
23897: LD_VAR 0 14
23901: PPUSH
23902: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 314
23915: NOT
23916: IFFALSE 23753
// end ;
23918: LD_VAR 0 5
23922: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23923: LD_EXP 60
23927: NOT
23928: IFFALSE 23978
23930: GO 23932
23932: DISABLE
// begin initHack := true ;
23933: LD_ADDR_EXP 60
23937: PUSH
23938: LD_INT 1
23940: ST_TO_ADDR
// hackTanks := [ ] ;
23941: LD_ADDR_EXP 61
23945: PUSH
23946: EMPTY
23947: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23948: LD_ADDR_EXP 62
23952: PUSH
23953: EMPTY
23954: ST_TO_ADDR
// hackLimit := 3 ;
23955: LD_ADDR_EXP 63
23959: PUSH
23960: LD_INT 3
23962: ST_TO_ADDR
// hackDist := 12 ;
23963: LD_ADDR_EXP 64
23967: PUSH
23968: LD_INT 12
23970: ST_TO_ADDR
// hackCounter := [ ] ;
23971: LD_ADDR_EXP 65
23975: PUSH
23976: EMPTY
23977: ST_TO_ADDR
// end ;
23978: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23979: LD_EXP 60
23983: PUSH
23984: LD_INT 34
23986: PUSH
23987: LD_INT 99
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PPUSH
23994: CALL_OW 69
23998: AND
23999: IFFALSE 24252
24001: GO 24003
24003: DISABLE
24004: LD_INT 0
24006: PPUSH
24007: PPUSH
// begin enable ;
24008: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24009: LD_ADDR_VAR 0 1
24013: PUSH
24014: LD_INT 34
24016: PUSH
24017: LD_INT 99
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL_OW 69
24028: PUSH
24029: FOR_IN
24030: IFFALSE 24250
// begin if not i in hackTanks then
24032: LD_VAR 0 1
24036: PUSH
24037: LD_EXP 61
24041: IN
24042: NOT
24043: IFFALSE 24126
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24045: LD_ADDR_EXP 61
24049: PUSH
24050: LD_EXP 61
24054: PPUSH
24055: LD_EXP 61
24059: PUSH
24060: LD_INT 1
24062: PLUS
24063: PPUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 1
24073: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24074: LD_ADDR_EXP 62
24078: PUSH
24079: LD_EXP 62
24083: PPUSH
24084: LD_EXP 62
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PPUSH
24093: EMPTY
24094: PPUSH
24095: CALL_OW 1
24099: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24100: LD_ADDR_EXP 65
24104: PUSH
24105: LD_EXP 65
24109: PPUSH
24110: LD_EXP 65
24114: PUSH
24115: LD_INT 1
24117: PLUS
24118: PPUSH
24119: EMPTY
24120: PPUSH
24121: CALL_OW 1
24125: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 302
24135: NOT
24136: IFFALSE 24149
// begin HackUnlinkAll ( i ) ;
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL 24255 0 1
// continue ;
24147: GO 24029
// end ; HackCheckCapturedStatus ( i ) ;
24149: LD_VAR 0 1
24153: PPUSH
24154: CALL 24698 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24158: LD_ADDR_VAR 0 2
24162: PUSH
24163: LD_INT 81
24165: PUSH
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 255
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 33
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 91
24192: PUSH
24193: LD_VAR 0 1
24197: PUSH
24198: LD_EXP 64
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 50
24210: PUSH
24211: EMPTY
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 2
24229: NOT
24230: IFFALSE 24234
// continue ;
24232: GO 24029
// HackLink ( i , tmp ) ;
24234: LD_VAR 0 1
24238: PPUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: CALL 24391 0 2
// end ;
24248: GO 24029
24250: POP
24251: POP
// end ;
24252: PPOPN 2
24254: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
24259: PPUSH
// if not hack in hackTanks then
24260: LD_VAR 0 1
24264: PUSH
24265: LD_EXP 61
24269: IN
24270: NOT
24271: IFFALSE 24275
// exit ;
24273: GO 24386
// index := GetElementIndex ( hackTanks , hack ) ;
24275: LD_ADDR_VAR 0 4
24279: PUSH
24280: LD_EXP 61
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL 31991 0 2
24294: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24295: LD_EXP 62
24299: PUSH
24300: LD_VAR 0 4
24304: ARRAY
24305: IFFALSE 24386
// begin for i in hackTanksCaptured [ index ] do
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_EXP 62
24316: PUSH
24317: LD_VAR 0 4
24321: ARRAY
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24350
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24326: LD_VAR 0 3
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: PPUSH
24335: LD_VAR 0 3
24339: PUSH
24340: LD_INT 2
24342: ARRAY
24343: PPUSH
24344: CALL_OW 235
24348: GO 24323
24350: POP
24351: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24352: LD_ADDR_EXP 62
24356: PUSH
24357: LD_EXP 62
24361: PPUSH
24362: LD_VAR 0 4
24366: PPUSH
24367: EMPTY
24368: PPUSH
24369: CALL_OW 1
24373: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_INT 0
24381: PPUSH
24382: CALL_OW 505
// end ; end ;
24386: LD_VAR 0 2
24390: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24391: LD_INT 0
24393: PPUSH
24394: PPUSH
24395: PPUSH
// if not hack in hackTanks or not vehicles then
24396: LD_VAR 0 1
24400: PUSH
24401: LD_EXP 61
24405: IN
24406: NOT
24407: PUSH
24408: LD_VAR 0 2
24412: NOT
24413: OR
24414: IFFALSE 24418
// exit ;
24416: GO 24693
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_VAR 0 2
24432: PPUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_INT 1
24438: PPUSH
24439: CALL 32641 0 4
24443: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24444: LD_ADDR_VAR 0 5
24448: PUSH
24449: LD_EXP 61
24453: PPUSH
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL 31991 0 2
24463: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24464: LD_EXP 62
24468: PUSH
24469: LD_VAR 0 5
24473: ARRAY
24474: PUSH
24475: LD_EXP 63
24479: LESS
24480: IFFALSE 24669
// begin for i := 1 to vehicles do
24482: LD_ADDR_VAR 0 4
24486: PUSH
24487: DOUBLE
24488: LD_INT 1
24490: DEC
24491: ST_TO_ADDR
24492: LD_VAR 0 2
24496: PUSH
24497: FOR_TO
24498: IFFALSE 24667
// begin if hackTanksCaptured [ index ] = hackLimit then
24500: LD_EXP 62
24504: PUSH
24505: LD_VAR 0 5
24509: ARRAY
24510: PUSH
24511: LD_EXP 63
24515: EQUAL
24516: IFFALSE 24520
// break ;
24518: GO 24667
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24520: LD_ADDR_EXP 65
24524: PUSH
24525: LD_EXP 65
24529: PPUSH
24530: LD_VAR 0 5
24534: PPUSH
24535: LD_EXP 65
24539: PUSH
24540: LD_VAR 0 5
24544: ARRAY
24545: PUSH
24546: LD_INT 1
24548: PLUS
24549: PPUSH
24550: CALL_OW 1
24554: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24555: LD_ADDR_EXP 62
24559: PUSH
24560: LD_EXP 62
24564: PPUSH
24565: LD_VAR 0 5
24569: PUSH
24570: LD_EXP 62
24574: PUSH
24575: LD_VAR 0 5
24579: ARRAY
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PPUSH
24589: LD_VAR 0 2
24593: PUSH
24594: LD_VAR 0 4
24598: ARRAY
24599: PUSH
24600: LD_VAR 0 2
24604: PUSH
24605: LD_VAR 0 4
24609: ARRAY
24610: PPUSH
24611: CALL_OW 255
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PPUSH
24620: CALL 32206 0 3
24624: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24625: LD_VAR 0 2
24629: PUSH
24630: LD_VAR 0 4
24634: ARRAY
24635: PPUSH
24636: LD_VAR 0 1
24640: PPUSH
24641: CALL_OW 255
24645: PPUSH
24646: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24650: LD_VAR 0 2
24654: PUSH
24655: LD_VAR 0 4
24659: ARRAY
24660: PPUSH
24661: CALL_OW 141
// end ;
24665: GO 24497
24667: POP
24668: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24669: LD_VAR 0 1
24673: PPUSH
24674: LD_EXP 62
24678: PUSH
24679: LD_VAR 0 5
24683: ARRAY
24684: PUSH
24685: LD_INT 0
24687: PLUS
24688: PPUSH
24689: CALL_OW 505
// end ;
24693: LD_VAR 0 3
24697: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
24702: PPUSH
24703: PPUSH
// if not hack in hackTanks then
24704: LD_VAR 0 1
24708: PUSH
24709: LD_EXP 61
24713: IN
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24959
// index := GetElementIndex ( hackTanks , hack ) ;
24719: LD_ADDR_VAR 0 4
24723: PUSH
24724: LD_EXP 61
24728: PPUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: CALL 31991 0 2
24738: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24739: LD_ADDR_VAR 0 3
24743: PUSH
24744: DOUBLE
24745: LD_EXP 62
24749: PUSH
24750: LD_VAR 0 4
24754: ARRAY
24755: INC
24756: ST_TO_ADDR
24757: LD_INT 1
24759: PUSH
24760: FOR_DOWNTO
24761: IFFALSE 24933
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: LD_EXP 62
24772: PUSH
24773: LD_VAR 0 4
24777: ARRAY
24778: PUSH
24779: LD_VAR 0 3
24783: ARRAY
24784: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24785: LD_VAR 0 5
24789: PUSH
24790: LD_INT 1
24792: ARRAY
24793: PPUSH
24794: CALL_OW 302
24798: NOT
24799: PUSH
24800: LD_VAR 0 5
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: CALL_OW 255
24813: PUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 255
24823: NONEQUAL
24824: OR
24825: IFFALSE 24931
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24827: LD_VAR 0 5
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: PPUSH
24836: CALL_OW 305
24840: PUSH
24841: LD_VAR 0 5
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PPUSH
24850: CALL_OW 255
24854: PUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: CALL_OW 255
24864: EQUAL
24865: AND
24866: IFFALSE 24890
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24868: LD_VAR 0 5
24872: PUSH
24873: LD_INT 1
24875: ARRAY
24876: PPUSH
24877: LD_VAR 0 5
24881: PUSH
24882: LD_INT 2
24884: ARRAY
24885: PPUSH
24886: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24890: LD_ADDR_EXP 62
24894: PUSH
24895: LD_EXP 62
24899: PPUSH
24900: LD_VAR 0 4
24904: PPUSH
24905: LD_EXP 62
24909: PUSH
24910: LD_VAR 0 4
24914: ARRAY
24915: PPUSH
24916: LD_VAR 0 3
24920: PPUSH
24921: CALL_OW 3
24925: PPUSH
24926: CALL_OW 1
24930: ST_TO_ADDR
// end ; end ;
24931: GO 24760
24933: POP
24934: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24935: LD_VAR 0 1
24939: PPUSH
24940: LD_EXP 62
24944: PUSH
24945: LD_VAR 0 4
24949: ARRAY
24950: PUSH
24951: LD_INT 0
24953: PLUS
24954: PPUSH
24955: CALL_OW 505
// end ;
24959: LD_VAR 0 2
24963: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24964: LD_INT 0
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
// if not hack in hackTanks then
24970: LD_VAR 0 1
24974: PUSH
24975: LD_EXP 61
24979: IN
24980: NOT
24981: IFFALSE 24985
// exit ;
24983: GO 25070
// index := GetElementIndex ( hackTanks , hack ) ;
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: LD_EXP 61
24994: PPUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL 31991 0 2
25004: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25005: LD_ADDR_VAR 0 4
25009: PUSH
25010: DOUBLE
25011: LD_INT 1
25013: DEC
25014: ST_TO_ADDR
25015: LD_EXP 62
25019: PUSH
25020: LD_VAR 0 5
25024: ARRAY
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25068
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25029: LD_EXP 62
25033: PUSH
25034: LD_VAR 0 5
25038: ARRAY
25039: PUSH
25040: LD_VAR 0 4
25044: ARRAY
25045: PUSH
25046: LD_INT 1
25048: ARRAY
25049: PUSH
25050: LD_VAR 0 2
25054: EQUAL
25055: IFFALSE 25066
// KillUnit ( vehicle ) ;
25057: LD_VAR 0 2
25061: PPUSH
25062: CALL_OW 66
25066: GO 25026
25068: POP
25069: POP
// end ;
25070: LD_VAR 0 3
25074: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25075: LD_EXP 66
25079: NOT
25080: IFFALSE 25115
25082: GO 25084
25084: DISABLE
// begin initMiner := true ;
25085: LD_ADDR_EXP 66
25089: PUSH
25090: LD_INT 1
25092: ST_TO_ADDR
// minersList := [ ] ;
25093: LD_ADDR_EXP 67
25097: PUSH
25098: EMPTY
25099: ST_TO_ADDR
// minerMinesList := [ ] ;
25100: LD_ADDR_EXP 68
25104: PUSH
25105: EMPTY
25106: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25107: LD_ADDR_EXP 69
25111: PUSH
25112: LD_INT 5
25114: ST_TO_ADDR
// end ;
25115: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25116: LD_EXP 66
25120: PUSH
25121: LD_INT 34
25123: PUSH
25124: LD_INT 81
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PPUSH
25131: CALL_OW 69
25135: AND
25136: IFFALSE 25597
25138: GO 25140
25140: DISABLE
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
25145: PPUSH
25146: PPUSH
// begin enable ;
25147: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25148: LD_ADDR_VAR 0 1
25152: PUSH
25153: LD_INT 34
25155: PUSH
25156: LD_INT 81
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PPUSH
25163: CALL_OW 69
25167: PUSH
25168: FOR_IN
25169: IFFALSE 25241
// begin if not i in minersList then
25171: LD_VAR 0 1
25175: PUSH
25176: LD_EXP 67
25180: IN
25181: NOT
25182: IFFALSE 25239
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25184: LD_ADDR_EXP 67
25188: PUSH
25189: LD_EXP 67
25193: PPUSH
25194: LD_EXP 67
25198: PUSH
25199: LD_INT 1
25201: PLUS
25202: PPUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 1
25212: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25213: LD_ADDR_EXP 68
25217: PUSH
25218: LD_EXP 68
25222: PPUSH
25223: LD_EXP 68
25227: PUSH
25228: LD_INT 1
25230: PLUS
25231: PPUSH
25232: EMPTY
25233: PPUSH
25234: CALL_OW 1
25238: ST_TO_ADDR
// end end ;
25239: GO 25168
25241: POP
25242: POP
// for i := minerMinesList downto 1 do
25243: LD_ADDR_VAR 0 1
25247: PUSH
25248: DOUBLE
25249: LD_EXP 68
25253: INC
25254: ST_TO_ADDR
25255: LD_INT 1
25257: PUSH
25258: FOR_DOWNTO
25259: IFFALSE 25595
// begin if IsLive ( minersList [ i ] ) then
25261: LD_EXP 67
25265: PUSH
25266: LD_VAR 0 1
25270: ARRAY
25271: PPUSH
25272: CALL_OW 300
25276: IFFALSE 25304
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25278: LD_EXP 67
25282: PUSH
25283: LD_VAR 0 1
25287: ARRAY
25288: PPUSH
25289: LD_EXP 68
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: PPUSH
25300: CALL_OW 505
// if not minerMinesList [ i ] then
25304: LD_EXP 68
25308: PUSH
25309: LD_VAR 0 1
25313: ARRAY
25314: NOT
25315: IFFALSE 25319
// continue ;
25317: GO 25258
// for j := minerMinesList [ i ] downto 1 do
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: DOUBLE
25325: LD_EXP 68
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: INC
25336: ST_TO_ADDR
25337: LD_INT 1
25339: PUSH
25340: FOR_DOWNTO
25341: IFFALSE 25591
// begin side := GetSide ( minersList [ i ] ) ;
25343: LD_ADDR_VAR 0 3
25347: PUSH
25348: LD_EXP 67
25352: PUSH
25353: LD_VAR 0 1
25357: ARRAY
25358: PPUSH
25359: CALL_OW 255
25363: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25364: LD_ADDR_VAR 0 4
25368: PUSH
25369: LD_EXP 68
25373: PUSH
25374: LD_VAR 0 1
25378: ARRAY
25379: PUSH
25380: LD_VAR 0 2
25384: ARRAY
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PPUSH
25390: LD_EXP 68
25394: PUSH
25395: LD_VAR 0 1
25399: ARRAY
25400: PUSH
25401: LD_VAR 0 2
25405: ARRAY
25406: PUSH
25407: LD_INT 2
25409: ARRAY
25410: PPUSH
25411: CALL_OW 428
25415: ST_TO_ADDR
// if not tmp then
25416: LD_VAR 0 4
25420: NOT
25421: IFFALSE 25425
// continue ;
25423: GO 25340
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25425: LD_VAR 0 4
25429: PUSH
25430: LD_INT 81
25432: PUSH
25433: LD_VAR 0 3
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PPUSH
25442: CALL_OW 69
25446: IN
25447: PUSH
25448: LD_EXP 68
25452: PUSH
25453: LD_VAR 0 1
25457: ARRAY
25458: PUSH
25459: LD_VAR 0 2
25463: ARRAY
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PPUSH
25469: LD_EXP 68
25473: PUSH
25474: LD_VAR 0 1
25478: ARRAY
25479: PUSH
25480: LD_VAR 0 2
25484: ARRAY
25485: PUSH
25486: LD_INT 2
25488: ARRAY
25489: PPUSH
25490: CALL_OW 458
25494: AND
25495: IFFALSE 25589
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25497: LD_EXP 68
25501: PUSH
25502: LD_VAR 0 1
25506: ARRAY
25507: PUSH
25508: LD_VAR 0 2
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PPUSH
25518: LD_EXP 68
25522: PUSH
25523: LD_VAR 0 1
25527: ARRAY
25528: PUSH
25529: LD_VAR 0 2
25533: ARRAY
25534: PUSH
25535: LD_INT 2
25537: ARRAY
25538: PPUSH
25539: LD_VAR 0 3
25543: PPUSH
25544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25548: LD_ADDR_EXP 68
25552: PUSH
25553: LD_EXP 68
25557: PPUSH
25558: LD_VAR 0 1
25562: PPUSH
25563: LD_EXP 68
25567: PUSH
25568: LD_VAR 0 1
25572: ARRAY
25573: PPUSH
25574: LD_VAR 0 2
25578: PPUSH
25579: CALL_OW 3
25583: PPUSH
25584: CALL_OW 1
25588: ST_TO_ADDR
// end ; end ;
25589: GO 25340
25591: POP
25592: POP
// end ;
25593: GO 25258
25595: POP
25596: POP
// end ;
25597: PPOPN 4
25599: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25600: LD_INT 0
25602: PPUSH
25603: PPUSH
// result := false ;
25604: LD_ADDR_VAR 0 4
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL_OW 264
25621: PUSH
25622: LD_INT 81
25624: EQUAL
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25870
// index := GetElementIndex ( minersList , unit ) ;
25630: LD_ADDR_VAR 0 5
25634: PUSH
25635: LD_EXP 67
25639: PPUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL 31991 0 2
25649: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25650: LD_EXP 68
25654: PUSH
25655: LD_VAR 0 5
25659: ARRAY
25660: PUSH
25661: LD_EXP 69
25665: GREATEREQUAL
25666: IFFALSE 25670
// exit ;
25668: GO 25870
// ComMoveXY ( unit , x , y ) ;
25670: LD_VAR 0 1
25674: PPUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25689: LD_INT 35
25691: PPUSH
25692: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: CALL 63752 0 3
25715: NOT
25716: PUSH
25717: LD_VAR 0 1
25721: PPUSH
25722: CALL_OW 314
25726: AND
25727: IFFALSE 25731
// exit ;
25729: GO 25870
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25731: LD_VAR 0 2
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: CALL_OW 428
25745: PUSH
25746: LD_VAR 0 1
25750: EQUAL
25751: PUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 314
25761: NOT
25762: AND
25763: IFFALSE 25689
// PlaySoundXY ( x , y , PlantMine ) ;
25765: LD_VAR 0 2
25769: PPUSH
25770: LD_VAR 0 3
25774: PPUSH
25775: LD_STRING PlantMine
25777: PPUSH
25778: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25782: LD_VAR 0 2
25786: PPUSH
25787: LD_VAR 0 3
25791: PPUSH
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 255
25801: PPUSH
25802: LD_INT 0
25804: PPUSH
25805: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25809: LD_ADDR_EXP 68
25813: PUSH
25814: LD_EXP 68
25818: PPUSH
25819: LD_VAR 0 5
25823: PUSH
25824: LD_EXP 68
25828: PUSH
25829: LD_VAR 0 5
25833: ARRAY
25834: PUSH
25835: LD_INT 1
25837: PLUS
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: LD_VAR 0 2
25847: PUSH
25848: LD_VAR 0 3
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PPUSH
25857: CALL 32206 0 3
25861: ST_TO_ADDR
// result := true ;
25862: LD_ADDR_VAR 0 4
25866: PUSH
25867: LD_INT 1
25869: ST_TO_ADDR
// end ;
25870: LD_VAR 0 4
25874: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
// if not unit in minersList then
25880: LD_VAR 0 1
25884: PUSH
25885: LD_EXP 67
25889: IN
25890: NOT
25891: IFFALSE 25895
// exit ;
25893: GO 26287
// index := GetElementIndex ( minersList , unit ) ;
25895: LD_ADDR_VAR 0 6
25899: PUSH
25900: LD_EXP 67
25904: PPUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL 31991 0 2
25914: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25915: LD_ADDR_VAR 0 5
25919: PUSH
25920: DOUBLE
25921: LD_EXP 68
25925: PUSH
25926: LD_VAR 0 6
25930: ARRAY
25931: INC
25932: ST_TO_ADDR
25933: LD_INT 1
25935: PUSH
25936: FOR_DOWNTO
25937: IFFALSE 26098
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25939: LD_EXP 68
25943: PUSH
25944: LD_VAR 0 6
25948: ARRAY
25949: PUSH
25950: LD_VAR 0 5
25954: ARRAY
25955: PUSH
25956: LD_INT 1
25958: ARRAY
25959: PUSH
25960: LD_VAR 0 2
25964: EQUAL
25965: PUSH
25966: LD_EXP 68
25970: PUSH
25971: LD_VAR 0 6
25975: ARRAY
25976: PUSH
25977: LD_VAR 0 5
25981: ARRAY
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PUSH
25987: LD_VAR 0 3
25991: EQUAL
25992: AND
25993: IFFALSE 26096
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25995: LD_EXP 68
25999: PUSH
26000: LD_VAR 0 6
26004: ARRAY
26005: PUSH
26006: LD_VAR 0 5
26010: ARRAY
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PPUSH
26016: LD_EXP 68
26020: PUSH
26021: LD_VAR 0 6
26025: ARRAY
26026: PUSH
26027: LD_VAR 0 5
26031: ARRAY
26032: PUSH
26033: LD_INT 2
26035: ARRAY
26036: PPUSH
26037: LD_VAR 0 1
26041: PPUSH
26042: CALL_OW 255
26046: PPUSH
26047: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26051: LD_ADDR_EXP 68
26055: PUSH
26056: LD_EXP 68
26060: PPUSH
26061: LD_VAR 0 6
26065: PPUSH
26066: LD_EXP 68
26070: PUSH
26071: LD_VAR 0 6
26075: ARRAY
26076: PPUSH
26077: LD_VAR 0 5
26081: PPUSH
26082: CALL_OW 3
26086: PPUSH
26087: CALL_OW 1
26091: ST_TO_ADDR
// exit ;
26092: POP
26093: POP
26094: GO 26287
// end ; end ;
26096: GO 25936
26098: POP
26099: POP
// for i := minerMinesList [ index ] downto 1 do
26100: LD_ADDR_VAR 0 5
26104: PUSH
26105: DOUBLE
26106: LD_EXP 68
26110: PUSH
26111: LD_VAR 0 6
26115: ARRAY
26116: INC
26117: ST_TO_ADDR
26118: LD_INT 1
26120: PUSH
26121: FOR_DOWNTO
26122: IFFALSE 26285
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26124: LD_EXP 68
26128: PUSH
26129: LD_VAR 0 6
26133: ARRAY
26134: PUSH
26135: LD_VAR 0 5
26139: ARRAY
26140: PUSH
26141: LD_INT 1
26143: ARRAY
26144: PPUSH
26145: LD_EXP 68
26149: PUSH
26150: LD_VAR 0 6
26154: ARRAY
26155: PUSH
26156: LD_VAR 0 5
26160: ARRAY
26161: PUSH
26162: LD_INT 2
26164: ARRAY
26165: PPUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: LD_VAR 0 3
26175: PPUSH
26176: CALL_OW 298
26180: PUSH
26181: LD_INT 6
26183: LESS
26184: IFFALSE 26283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26186: LD_EXP 68
26190: PUSH
26191: LD_VAR 0 6
26195: ARRAY
26196: PUSH
26197: LD_VAR 0 5
26201: ARRAY
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: PPUSH
26207: LD_EXP 68
26211: PUSH
26212: LD_VAR 0 6
26216: ARRAY
26217: PUSH
26218: LD_VAR 0 5
26222: ARRAY
26223: PUSH
26224: LD_INT 2
26226: ARRAY
26227: PPUSH
26228: LD_VAR 0 1
26232: PPUSH
26233: CALL_OW 255
26237: PPUSH
26238: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26242: LD_ADDR_EXP 68
26246: PUSH
26247: LD_EXP 68
26251: PPUSH
26252: LD_VAR 0 6
26256: PPUSH
26257: LD_EXP 68
26261: PUSH
26262: LD_VAR 0 6
26266: ARRAY
26267: PPUSH
26268: LD_VAR 0 5
26272: PPUSH
26273: CALL_OW 3
26277: PPUSH
26278: CALL_OW 1
26282: ST_TO_ADDR
// end ; end ;
26283: GO 26121
26285: POP
26286: POP
// end ;
26287: LD_VAR 0 4
26291: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26292: LD_INT 0
26294: PPUSH
26295: PPUSH
26296: PPUSH
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
26302: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 264
26312: PUSH
26313: LD_INT 81
26315: EQUAL
26316: NOT
26317: PUSH
26318: LD_VAR 0 1
26322: PUSH
26323: LD_EXP 67
26327: IN
26328: NOT
26329: OR
26330: IFFALSE 26334
// exit ;
26332: GO 26656
// index := GetElementIndex ( minersList , unit ) ;
26334: LD_ADDR_VAR 0 6
26338: PUSH
26339: LD_EXP 67
26343: PPUSH
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL 31991 0 2
26353: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26354: LD_ADDR_VAR 0 8
26358: PUSH
26359: LD_EXP 69
26363: PUSH
26364: LD_EXP 68
26368: PUSH
26369: LD_VAR 0 6
26373: ARRAY
26374: MINUS
26375: ST_TO_ADDR
// if not minesFreeAmount then
26376: LD_VAR 0 8
26380: NOT
26381: IFFALSE 26385
// exit ;
26383: GO 26656
// tmp := [ ] ;
26385: LD_ADDR_VAR 0 7
26389: PUSH
26390: EMPTY
26391: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: DOUBLE
26398: LD_INT 1
26400: DEC
26401: ST_TO_ADDR
26402: LD_VAR 0 8
26406: PUSH
26407: FOR_TO
26408: IFFALSE 26603
// begin _d := rand ( 0 , 5 ) ;
26410: LD_ADDR_VAR 0 11
26414: PUSH
26415: LD_INT 0
26417: PPUSH
26418: LD_INT 5
26420: PPUSH
26421: CALL_OW 12
26425: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26426: LD_ADDR_VAR 0 12
26430: PUSH
26431: LD_INT 2
26433: PPUSH
26434: LD_INT 6
26436: PPUSH
26437: CALL_OW 12
26441: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_VAR 0 11
26456: PPUSH
26457: LD_VAR 0 12
26461: PPUSH
26462: CALL_OW 272
26466: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26467: LD_ADDR_VAR 0 10
26471: PUSH
26472: LD_VAR 0 3
26476: PPUSH
26477: LD_VAR 0 11
26481: PPUSH
26482: LD_VAR 0 12
26486: PPUSH
26487: CALL_OW 273
26491: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26492: LD_VAR 0 9
26496: PPUSH
26497: LD_VAR 0 10
26501: PPUSH
26502: CALL_OW 488
26506: PUSH
26507: LD_VAR 0 9
26511: PUSH
26512: LD_VAR 0 10
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_VAR 0 7
26525: IN
26526: NOT
26527: AND
26528: PUSH
26529: LD_VAR 0 9
26533: PPUSH
26534: LD_VAR 0 10
26538: PPUSH
26539: CALL_OW 458
26543: NOT
26544: AND
26545: IFFALSE 26587
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26547: LD_ADDR_VAR 0 7
26551: PUSH
26552: LD_VAR 0 7
26556: PPUSH
26557: LD_VAR 0 7
26561: PUSH
26562: LD_INT 1
26564: PLUS
26565: PPUSH
26566: LD_VAR 0 9
26570: PUSH
26571: LD_VAR 0 10
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 1
26584: ST_TO_ADDR
26585: GO 26601
// i := i - 1 ;
26587: LD_ADDR_VAR 0 5
26591: PUSH
26592: LD_VAR 0 5
26596: PUSH
26597: LD_INT 1
26599: MINUS
26600: ST_TO_ADDR
// end ;
26601: GO 26407
26603: POP
26604: POP
// for i in tmp do
26605: LD_ADDR_VAR 0 5
26609: PUSH
26610: LD_VAR 0 7
26614: PUSH
26615: FOR_IN
26616: IFFALSE 26654
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26618: LD_VAR 0 1
26622: PPUSH
26623: LD_VAR 0 5
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: PPUSH
26632: LD_VAR 0 5
26636: PUSH
26637: LD_INT 2
26639: ARRAY
26640: PPUSH
26641: CALL 25600 0 3
26645: NOT
26646: IFFALSE 26652
// exit ;
26648: POP
26649: POP
26650: GO 26656
26652: GO 26615
26654: POP
26655: POP
// end ;
26656: LD_VAR 0 4
26660: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26661: LD_INT 0
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
// if GetClass ( unit ) <> class_sniper then
26672: LD_VAR 0 1
26676: PPUSH
26677: CALL_OW 257
26681: PUSH
26682: LD_INT 5
26684: NONEQUAL
26685: IFFALSE 26689
// exit ;
26687: GO 27155
// dist := 8 ;
26689: LD_ADDR_VAR 0 5
26693: PUSH
26694: LD_INT 8
26696: ST_TO_ADDR
// viewRange := 12 ;
26697: LD_ADDR_VAR 0 8
26701: PUSH
26702: LD_INT 12
26704: ST_TO_ADDR
// side := GetSide ( unit ) ;
26705: LD_ADDR_VAR 0 6
26709: PUSH
26710: LD_VAR 0 1
26714: PPUSH
26715: CALL_OW 255
26719: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26720: LD_INT 61
26722: PPUSH
26723: LD_VAR 0 6
26727: PPUSH
26728: CALL_OW 321
26732: PUSH
26733: LD_INT 2
26735: EQUAL
26736: IFFALSE 26746
// viewRange := 16 ;
26738: LD_ADDR_VAR 0 8
26742: PUSH
26743: LD_INT 16
26745: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_VAR 0 2
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 297
26765: PUSH
26766: LD_VAR 0 5
26770: GREATER
26771: IFFALSE 26850
// begin ComMoveXY ( unit , x , y ) ;
26773: LD_VAR 0 1
26777: PPUSH
26778: LD_VAR 0 2
26782: PPUSH
26783: LD_VAR 0 3
26787: PPUSH
26788: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26792: LD_INT 35
26794: PPUSH
26795: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26799: LD_VAR 0 1
26803: PPUSH
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_VAR 0 3
26813: PPUSH
26814: CALL 63752 0 3
26818: NOT
26819: IFFALSE 26823
// exit ;
26821: GO 27155
// until GetDistUnitXY ( unit , x , y ) < dist ;
26823: LD_VAR 0 1
26827: PPUSH
26828: LD_VAR 0 2
26832: PPUSH
26833: LD_VAR 0 3
26837: PPUSH
26838: CALL_OW 297
26842: PUSH
26843: LD_VAR 0 5
26847: LESS
26848: IFFALSE 26792
// end ; ComTurnXY ( unit , x , y ) ;
26850: LD_VAR 0 1
26854: PPUSH
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL_OW 118
// repeat if Multiplayer then
26869: LD_OWVAR 4
26873: IFFALSE 26884
// wait ( 35 ) else
26875: LD_INT 35
26877: PPUSH
26878: CALL_OW 67
26882: GO 26891
// wait ( 5 ) ;
26884: LD_INT 5
26886: PPUSH
26887: CALL_OW 67
// _d := GetDir ( unit ) ;
26891: LD_ADDR_VAR 0 11
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 254
26905: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26906: LD_ADDR_VAR 0 7
26910: PUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 250
26920: PPUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 251
26930: PPUSH
26931: LD_VAR 0 2
26935: PPUSH
26936: LD_VAR 0 3
26940: PPUSH
26941: CALL 66360 0 4
26945: ST_TO_ADDR
// until dir = _d ;
26946: LD_VAR 0 7
26950: PUSH
26951: LD_VAR 0 11
26955: EQUAL
26956: IFFALSE 26869
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26958: LD_ADDR_VAR 0 9
26962: PUSH
26963: LD_VAR 0 1
26967: PPUSH
26968: CALL_OW 250
26972: PPUSH
26973: LD_VAR 0 7
26977: PPUSH
26978: LD_VAR 0 5
26982: PPUSH
26983: CALL_OW 272
26987: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26988: LD_ADDR_VAR 0 10
26992: PUSH
26993: LD_VAR 0 1
26997: PPUSH
26998: CALL_OW 251
27002: PPUSH
27003: LD_VAR 0 7
27007: PPUSH
27008: LD_VAR 0 5
27012: PPUSH
27013: CALL_OW 273
27017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27018: LD_VAR 0 9
27022: PPUSH
27023: LD_VAR 0 10
27027: PPUSH
27028: CALL_OW 488
27032: NOT
27033: IFFALSE 27037
// exit ;
27035: GO 27155
// ComAnimCustom ( unit , 1 ) ;
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_INT 1
27044: PPUSH
27045: CALL_OW 592
// p := 0 ;
27049: LD_ADDR_VAR 0 12
27053: PUSH
27054: LD_INT 0
27056: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27057: LD_VAR 0 9
27061: PPUSH
27062: LD_VAR 0 10
27066: PPUSH
27067: LD_VAR 0 6
27071: PPUSH
27072: LD_VAR 0 8
27076: PPUSH
27077: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27081: LD_INT 35
27083: PPUSH
27084: CALL_OW 67
// p := Inc ( p ) ;
27088: LD_ADDR_VAR 0 12
27092: PUSH
27093: LD_VAR 0 12
27097: PPUSH
27098: CALL 66316 0 1
27102: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27103: LD_VAR 0 12
27107: PUSH
27108: LD_INT 3
27110: EQUAL
27111: PUSH
27112: LD_VAR 0 1
27116: PPUSH
27117: CALL_OW 302
27121: NOT
27122: OR
27123: PUSH
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL_OW 301
27133: OR
27134: IFFALSE 27081
// RemoveSeeing ( _x , _y , side ) ;
27136: LD_VAR 0 9
27140: PPUSH
27141: LD_VAR 0 10
27145: PPUSH
27146: LD_VAR 0 6
27150: PPUSH
27151: CALL_OW 331
// end ; end_of_file
27155: LD_VAR 0 4
27159: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27160: LD_INT 0
27162: PPUSH
27163: PPUSH
// if exist_mode then
27164: LD_VAR 0 2
27168: IFFALSE 27214
// begin unit := CreateCharacter ( prefix & ident ) ;
27170: LD_ADDR_VAR 0 5
27174: PUSH
27175: LD_VAR 0 3
27179: PUSH
27180: LD_VAR 0 1
27184: STR
27185: PPUSH
27186: CALL_OW 34
27190: ST_TO_ADDR
// if unit then
27191: LD_VAR 0 5
27195: IFFALSE 27212
// DeleteCharacters ( prefix & ident ) ;
27197: LD_VAR 0 3
27201: PUSH
27202: LD_VAR 0 1
27206: STR
27207: PPUSH
27208: CALL_OW 40
// end else
27212: GO 27229
// unit := NewCharacter ( ident ) ;
27214: LD_ADDR_VAR 0 5
27218: PUSH
27219: LD_VAR 0 1
27223: PPUSH
27224: CALL_OW 25
27228: ST_TO_ADDR
// result := unit ;
27229: LD_ADDR_VAR 0 4
27233: PUSH
27234: LD_VAR 0 5
27238: ST_TO_ADDR
// end ;
27239: LD_VAR 0 4
27243: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27244: LD_INT 0
27246: PPUSH
27247: PPUSH
// if exist_mode then
27248: LD_VAR 0 2
27252: IFFALSE 27277
// unit := CreateCharacter ( prefix & ident ) else
27254: LD_ADDR_VAR 0 5
27258: PUSH
27259: LD_VAR 0 3
27263: PUSH
27264: LD_VAR 0 1
27268: STR
27269: PPUSH
27270: CALL_OW 34
27274: ST_TO_ADDR
27275: GO 27292
// unit := NewCharacter ( ident ) ;
27277: LD_ADDR_VAR 0 5
27281: PUSH
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL_OW 25
27291: ST_TO_ADDR
// result := unit ;
27292: LD_ADDR_VAR 0 4
27296: PUSH
27297: LD_VAR 0 5
27301: ST_TO_ADDR
// end ;
27302: LD_VAR 0 4
27306: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
// if not side or not nation then
27311: LD_VAR 0 1
27315: NOT
27316: PUSH
27317: LD_VAR 0 2
27321: NOT
27322: OR
27323: IFFALSE 27327
// exit ;
27325: GO 28095
// case nation of nation_american :
27327: LD_VAR 0 2
27331: PUSH
27332: LD_INT 1
27334: DOUBLE
27335: EQUAL
27336: IFTRUE 27340
27338: GO 27554
27340: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27341: LD_ADDR_VAR 0 4
27345: PUSH
27346: LD_INT 35
27348: PUSH
27349: LD_INT 45
27351: PUSH
27352: LD_INT 46
27354: PUSH
27355: LD_INT 47
27357: PUSH
27358: LD_INT 82
27360: PUSH
27361: LD_INT 83
27363: PUSH
27364: LD_INT 84
27366: PUSH
27367: LD_INT 85
27369: PUSH
27370: LD_INT 86
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 6
27381: PUSH
27382: LD_INT 15
27384: PUSH
27385: LD_INT 16
27387: PUSH
27388: LD_INT 7
27390: PUSH
27391: LD_INT 12
27393: PUSH
27394: LD_INT 13
27396: PUSH
27397: LD_INT 10
27399: PUSH
27400: LD_INT 14
27402: PUSH
27403: LD_INT 20
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: LD_INT 22
27411: PUSH
27412: LD_INT 25
27414: PUSH
27415: LD_INT 32
27417: PUSH
27418: LD_INT 27
27420: PUSH
27421: LD_INT 36
27423: PUSH
27424: LD_INT 69
27426: PUSH
27427: LD_INT 39
27429: PUSH
27430: LD_INT 34
27432: PUSH
27433: LD_INT 40
27435: PUSH
27436: LD_INT 48
27438: PUSH
27439: LD_INT 49
27441: PUSH
27442: LD_INT 50
27444: PUSH
27445: LD_INT 51
27447: PUSH
27448: LD_INT 52
27450: PUSH
27451: LD_INT 53
27453: PUSH
27454: LD_INT 54
27456: PUSH
27457: LD_INT 55
27459: PUSH
27460: LD_INT 56
27462: PUSH
27463: LD_INT 57
27465: PUSH
27466: LD_INT 58
27468: PUSH
27469: LD_INT 59
27471: PUSH
27472: LD_INT 60
27474: PUSH
27475: LD_INT 61
27477: PUSH
27478: LD_INT 62
27480: PUSH
27481: LD_INT 80
27483: PUSH
27484: LD_INT 82
27486: PUSH
27487: LD_INT 83
27489: PUSH
27490: LD_INT 84
27492: PUSH
27493: LD_INT 85
27495: PUSH
27496: LD_INT 86
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: ST_TO_ADDR
27552: GO 28019
27554: LD_INT 2
27556: DOUBLE
27557: EQUAL
27558: IFTRUE 27562
27560: GO 27788
27562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27563: LD_ADDR_VAR 0 4
27567: PUSH
27568: LD_INT 35
27570: PUSH
27571: LD_INT 45
27573: PUSH
27574: LD_INT 46
27576: PUSH
27577: LD_INT 47
27579: PUSH
27580: LD_INT 82
27582: PUSH
27583: LD_INT 83
27585: PUSH
27586: LD_INT 84
27588: PUSH
27589: LD_INT 85
27591: PUSH
27592: LD_INT 87
27594: PUSH
27595: LD_INT 70
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 11
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 5
27612: PUSH
27613: LD_INT 6
27615: PUSH
27616: LD_INT 15
27618: PUSH
27619: LD_INT 18
27621: PUSH
27622: LD_INT 7
27624: PUSH
27625: LD_INT 17
27627: PUSH
27628: LD_INT 8
27630: PUSH
27631: LD_INT 20
27633: PUSH
27634: LD_INT 21
27636: PUSH
27637: LD_INT 22
27639: PUSH
27640: LD_INT 72
27642: PUSH
27643: LD_INT 26
27645: PUSH
27646: LD_INT 69
27648: PUSH
27649: LD_INT 39
27651: PUSH
27652: LD_INT 40
27654: PUSH
27655: LD_INT 41
27657: PUSH
27658: LD_INT 42
27660: PUSH
27661: LD_INT 43
27663: PUSH
27664: LD_INT 48
27666: PUSH
27667: LD_INT 49
27669: PUSH
27670: LD_INT 50
27672: PUSH
27673: LD_INT 51
27675: PUSH
27676: LD_INT 52
27678: PUSH
27679: LD_INT 53
27681: PUSH
27682: LD_INT 54
27684: PUSH
27685: LD_INT 55
27687: PUSH
27688: LD_INT 56
27690: PUSH
27691: LD_INT 60
27693: PUSH
27694: LD_INT 61
27696: PUSH
27697: LD_INT 62
27699: PUSH
27700: LD_INT 66
27702: PUSH
27703: LD_INT 67
27705: PUSH
27706: LD_INT 68
27708: PUSH
27709: LD_INT 81
27711: PUSH
27712: LD_INT 82
27714: PUSH
27715: LD_INT 83
27717: PUSH
27718: LD_INT 84
27720: PUSH
27721: LD_INT 85
27723: PUSH
27724: LD_INT 87
27726: PUSH
27727: LD_INT 88
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
27786: GO 28019
27788: LD_INT 3
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 28018
27796: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27797: LD_ADDR_VAR 0 4
27801: PUSH
27802: LD_INT 46
27804: PUSH
27805: LD_INT 47
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 82
27816: PUSH
27817: LD_INT 83
27819: PUSH
27820: LD_INT 84
27822: PUSH
27823: LD_INT 85
27825: PUSH
27826: LD_INT 86
27828: PUSH
27829: LD_INT 11
27831: PUSH
27832: LD_INT 9
27834: PUSH
27835: LD_INT 20
27837: PUSH
27838: LD_INT 19
27840: PUSH
27841: LD_INT 21
27843: PUSH
27844: LD_INT 24
27846: PUSH
27847: LD_INT 22
27849: PUSH
27850: LD_INT 25
27852: PUSH
27853: LD_INT 28
27855: PUSH
27856: LD_INT 29
27858: PUSH
27859: LD_INT 30
27861: PUSH
27862: LD_INT 31
27864: PUSH
27865: LD_INT 37
27867: PUSH
27868: LD_INT 38
27870: PUSH
27871: LD_INT 32
27873: PUSH
27874: LD_INT 27
27876: PUSH
27877: LD_INT 33
27879: PUSH
27880: LD_INT 69
27882: PUSH
27883: LD_INT 39
27885: PUSH
27886: LD_INT 34
27888: PUSH
27889: LD_INT 40
27891: PUSH
27892: LD_INT 71
27894: PUSH
27895: LD_INT 23
27897: PUSH
27898: LD_INT 44
27900: PUSH
27901: LD_INT 48
27903: PUSH
27904: LD_INT 49
27906: PUSH
27907: LD_INT 50
27909: PUSH
27910: LD_INT 51
27912: PUSH
27913: LD_INT 52
27915: PUSH
27916: LD_INT 53
27918: PUSH
27919: LD_INT 54
27921: PUSH
27922: LD_INT 55
27924: PUSH
27925: LD_INT 56
27927: PUSH
27928: LD_INT 57
27930: PUSH
27931: LD_INT 58
27933: PUSH
27934: LD_INT 59
27936: PUSH
27937: LD_INT 63
27939: PUSH
27940: LD_INT 64
27942: PUSH
27943: LD_INT 65
27945: PUSH
27946: LD_INT 82
27948: PUSH
27949: LD_INT 83
27951: PUSH
27952: LD_INT 84
27954: PUSH
27955: LD_INT 85
27957: PUSH
27958: LD_INT 86
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
28016: GO 28019
28018: POP
// if state > - 1 and state < 3 then
28019: LD_VAR 0 3
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: GREATER
28028: PUSH
28029: LD_VAR 0 3
28033: PUSH
28034: LD_INT 3
28036: LESS
28037: AND
28038: IFFALSE 28095
// for i in result do
28040: LD_ADDR_VAR 0 5
28044: PUSH
28045: LD_VAR 0 4
28049: PUSH
28050: FOR_IN
28051: IFFALSE 28093
// if GetTech ( i , side ) <> state then
28053: LD_VAR 0 5
28057: PPUSH
28058: LD_VAR 0 1
28062: PPUSH
28063: CALL_OW 321
28067: PUSH
28068: LD_VAR 0 3
28072: NONEQUAL
28073: IFFALSE 28091
// result := result diff i ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: LD_VAR 0 4
28084: PUSH
28085: LD_VAR 0 5
28089: DIFF
28090: ST_TO_ADDR
28091: GO 28050
28093: POP
28094: POP
// end ;
28095: LD_VAR 0 4
28099: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
28104: PPUSH
// result := true ;
28105: LD_ADDR_VAR 0 3
28109: PUSH
28110: LD_INT 1
28112: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28113: LD_ADDR_VAR 0 5
28117: PUSH
28118: LD_VAR 0 2
28122: PPUSH
28123: CALL_OW 480
28127: ST_TO_ADDR
// if not tmp then
28128: LD_VAR 0 5
28132: NOT
28133: IFFALSE 28137
// exit ;
28135: GO 28186
// for i in tmp do
28137: LD_ADDR_VAR 0 4
28141: PUSH
28142: LD_VAR 0 5
28146: PUSH
28147: FOR_IN
28148: IFFALSE 28184
// if GetTech ( i , side ) <> state_researched then
28150: LD_VAR 0 4
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 321
28164: PUSH
28165: LD_INT 2
28167: NONEQUAL
28168: IFFALSE 28182
// begin result := false ;
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 0
28177: ST_TO_ADDR
// exit ;
28178: POP
28179: POP
28180: GO 28186
// end ;
28182: GO 28147
28184: POP
28185: POP
// end ;
28186: LD_VAR 0 3
28190: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28206: LD_VAR 0 1
28210: NOT
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 257
28221: PUSH
28222: LD_INT 9
28224: NONEQUAL
28225: OR
28226: IFFALSE 28230
// exit ;
28228: GO 28803
// side := GetSide ( unit ) ;
28230: LD_ADDR_VAR 0 9
28234: PUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 255
28244: ST_TO_ADDR
// tech_space := tech_spacanom ;
28245: LD_ADDR_VAR 0 12
28249: PUSH
28250: LD_INT 29
28252: ST_TO_ADDR
// tech_time := tech_taurad ;
28253: LD_ADDR_VAR 0 13
28257: PUSH
28258: LD_INT 28
28260: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28261: LD_ADDR_VAR 0 11
28265: PUSH
28266: LD_VAR 0 1
28270: PPUSH
28271: CALL_OW 310
28275: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28276: LD_VAR 0 11
28280: PPUSH
28281: CALL_OW 247
28285: PUSH
28286: LD_INT 2
28288: EQUAL
28289: IFFALSE 28293
// exit ;
28291: GO 28803
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28293: LD_ADDR_VAR 0 8
28297: PUSH
28298: LD_INT 81
28300: PUSH
28301: LD_VAR 0 9
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: LD_INT 21
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 8
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28803
// if in_unit then
28345: LD_VAR 0 11
28349: IFFALSE 28373
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28351: LD_ADDR_VAR 0 10
28355: PUSH
28356: LD_VAR 0 8
28360: PPUSH
28361: LD_VAR 0 11
28365: PPUSH
28366: CALL_OW 74
28370: ST_TO_ADDR
28371: GO 28393
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28373: LD_ADDR_VAR 0 10
28377: PUSH
28378: LD_VAR 0 8
28382: PPUSH
28383: LD_VAR 0 1
28387: PPUSH
28388: CALL_OW 74
28392: ST_TO_ADDR
// if not enemy then
28393: LD_VAR 0 10
28397: NOT
28398: IFFALSE 28402
// exit ;
28400: GO 28803
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28402: LD_VAR 0 11
28406: PUSH
28407: LD_VAR 0 11
28411: PPUSH
28412: LD_VAR 0 10
28416: PPUSH
28417: CALL_OW 296
28421: PUSH
28422: LD_INT 13
28424: GREATER
28425: AND
28426: PUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: LD_VAR 0 10
28436: PPUSH
28437: CALL_OW 296
28441: PUSH
28442: LD_INT 12
28444: GREATER
28445: OR
28446: IFFALSE 28450
// exit ;
28448: GO 28803
// missile := [ 1 ] ;
28450: LD_ADDR_VAR 0 14
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28461: LD_VAR 0 9
28465: PPUSH
28466: LD_VAR 0 12
28470: PPUSH
28471: CALL_OW 325
28475: IFFALSE 28504
// missile := Replace ( missile , missile + 1 , 2 ) ;
28477: LD_ADDR_VAR 0 14
28481: PUSH
28482: LD_VAR 0 14
28486: PPUSH
28487: LD_VAR 0 14
28491: PUSH
28492: LD_INT 1
28494: PLUS
28495: PPUSH
28496: LD_INT 2
28498: PPUSH
28499: CALL_OW 1
28503: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28504: LD_VAR 0 9
28508: PPUSH
28509: LD_VAR 0 13
28513: PPUSH
28514: CALL_OW 325
28518: PUSH
28519: LD_VAR 0 10
28523: PPUSH
28524: CALL_OW 255
28528: PPUSH
28529: LD_VAR 0 13
28533: PPUSH
28534: CALL_OW 325
28538: NOT
28539: AND
28540: IFFALSE 28569
// missile := Replace ( missile , missile + 1 , 3 ) ;
28542: LD_ADDR_VAR 0 14
28546: PUSH
28547: LD_VAR 0 14
28551: PPUSH
28552: LD_VAR 0 14
28556: PUSH
28557: LD_INT 1
28559: PLUS
28560: PPUSH
28561: LD_INT 3
28563: PPUSH
28564: CALL_OW 1
28568: ST_TO_ADDR
// if missile < 2 then
28569: LD_VAR 0 14
28573: PUSH
28574: LD_INT 2
28576: LESS
28577: IFFALSE 28581
// exit ;
28579: GO 28803
// x := GetX ( enemy ) ;
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_VAR 0 10
28590: PPUSH
28591: CALL_OW 250
28595: ST_TO_ADDR
// y := GetY ( enemy ) ;
28596: LD_ADDR_VAR 0 5
28600: PUSH
28601: LD_VAR 0 10
28605: PPUSH
28606: CALL_OW 251
28610: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28611: LD_ADDR_VAR 0 6
28615: PUSH
28616: LD_VAR 0 4
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PPUSH
28625: LD_INT 1
28627: PPUSH
28628: CALL_OW 12
28632: PLUS
28633: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28634: LD_ADDR_VAR 0 7
28638: PUSH
28639: LD_VAR 0 5
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PPUSH
28648: LD_INT 1
28650: PPUSH
28651: CALL_OW 12
28655: PLUS
28656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28657: LD_VAR 0 6
28661: PPUSH
28662: LD_VAR 0 7
28666: PPUSH
28667: CALL_OW 488
28671: NOT
28672: IFFALSE 28694
// begin _x := x ;
28674: LD_ADDR_VAR 0 6
28678: PUSH
28679: LD_VAR 0 4
28683: ST_TO_ADDR
// _y := y ;
28684: LD_ADDR_VAR 0 7
28688: PUSH
28689: LD_VAR 0 5
28693: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 1
28701: PPUSH
28702: LD_VAR 0 14
28706: PPUSH
28707: CALL_OW 12
28711: ST_TO_ADDR
// case i of 1 :
28712: LD_VAR 0 3
28716: PUSH
28717: LD_INT 1
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28742
28725: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28726: LD_VAR 0 1
28730: PPUSH
28731: LD_VAR 0 10
28735: PPUSH
28736: CALL_OW 115
28740: GO 28803
28742: LD_INT 2
28744: DOUBLE
28745: EQUAL
28746: IFTRUE 28750
28748: GO 28772
28750: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28751: LD_VAR 0 1
28755: PPUSH
28756: LD_VAR 0 6
28760: PPUSH
28761: LD_VAR 0 7
28765: PPUSH
28766: CALL_OW 153
28770: GO 28803
28772: LD_INT 3
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28802
28780: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28781: LD_VAR 0 1
28785: PPUSH
28786: LD_VAR 0 6
28790: PPUSH
28791: LD_VAR 0 7
28795: PPUSH
28796: CALL_OW 154
28800: GO 28803
28802: POP
// end ;
28803: LD_VAR 0 2
28807: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28808: LD_INT 0
28810: PPUSH
28811: PPUSH
28812: PPUSH
28813: PPUSH
28814: PPUSH
28815: PPUSH
// if not unit or not building then
28816: LD_VAR 0 1
28820: NOT
28821: PUSH
28822: LD_VAR 0 2
28826: NOT
28827: OR
28828: IFFALSE 28832
// exit ;
28830: GO 28990
// x := GetX ( building ) ;
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: LD_VAR 0 2
28841: PPUSH
28842: CALL_OW 250
28846: ST_TO_ADDR
// y := GetY ( building ) ;
28847: LD_ADDR_VAR 0 6
28851: PUSH
28852: LD_VAR 0 2
28856: PPUSH
28857: CALL_OW 251
28861: ST_TO_ADDR
// for i = 0 to 5 do
28862: LD_ADDR_VAR 0 4
28866: PUSH
28867: DOUBLE
28868: LD_INT 0
28870: DEC
28871: ST_TO_ADDR
28872: LD_INT 5
28874: PUSH
28875: FOR_TO
28876: IFFALSE 28988
// begin _x := ShiftX ( x , i , 3 ) ;
28878: LD_ADDR_VAR 0 7
28882: PUSH
28883: LD_VAR 0 5
28887: PPUSH
28888: LD_VAR 0 4
28892: PPUSH
28893: LD_INT 3
28895: PPUSH
28896: CALL_OW 272
28900: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28901: LD_ADDR_VAR 0 8
28905: PUSH
28906: LD_VAR 0 6
28910: PPUSH
28911: LD_VAR 0 4
28915: PPUSH
28916: LD_INT 3
28918: PPUSH
28919: CALL_OW 273
28923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28924: LD_VAR 0 7
28928: PPUSH
28929: LD_VAR 0 8
28933: PPUSH
28934: CALL_OW 488
28938: NOT
28939: IFFALSE 28943
// continue ;
28941: GO 28875
// if HexInfo ( _x , _y ) = 0 then
28943: LD_VAR 0 7
28947: PPUSH
28948: LD_VAR 0 8
28952: PPUSH
28953: CALL_OW 428
28957: PUSH
28958: LD_INT 0
28960: EQUAL
28961: IFFALSE 28986
// begin ComMoveXY ( unit , _x , _y ) ;
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 7
28972: PPUSH
28973: LD_VAR 0 8
28977: PPUSH
28978: CALL_OW 111
// exit ;
28982: POP
28983: POP
28984: GO 28990
// end ; end ;
28986: GO 28875
28988: POP
28989: POP
// end ;
28990: LD_VAR 0 3
28994: RET
// export function ScanBase ( side , base_area ) ; begin
28995: LD_INT 0
28997: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_VAR 0 2
29007: PPUSH
29008: LD_INT 81
29010: PUSH
29011: LD_VAR 0 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PPUSH
29020: CALL_OW 70
29024: ST_TO_ADDR
// end ;
29025: LD_VAR 0 3
29029: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29030: LD_INT 0
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
// result := false ;
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: LD_INT 0
29043: ST_TO_ADDR
// side := GetSide ( unit ) ;
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 255
29058: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 248
29073: ST_TO_ADDR
// case nat of 1 :
29074: LD_VAR 0 4
29078: PUSH
29079: LD_INT 1
29081: DOUBLE
29082: EQUAL
29083: IFTRUE 29087
29085: GO 29098
29087: POP
// tech := tech_lassight ; 2 :
29088: LD_ADDR_VAR 0 5
29092: PUSH
29093: LD_INT 12
29095: ST_TO_ADDR
29096: GO 29137
29098: LD_INT 2
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29117
29106: POP
// tech := tech_mortar ; 3 :
29107: LD_ADDR_VAR 0 5
29111: PUSH
29112: LD_INT 41
29114: ST_TO_ADDR
29115: GO 29137
29117: LD_INT 3
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29136
29125: POP
// tech := tech_bazooka ; end ;
29126: LD_ADDR_VAR 0 5
29130: PUSH
29131: LD_INT 44
29133: ST_TO_ADDR
29134: GO 29137
29136: POP
// if Researched ( side , tech ) then
29137: LD_VAR 0 3
29141: PPUSH
29142: LD_VAR 0 5
29146: PPUSH
29147: CALL_OW 325
29151: IFFALSE 29178
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29153: LD_ADDR_VAR 0 2
29157: PUSH
29158: LD_INT 5
29160: PUSH
29161: LD_INT 8
29163: PUSH
29164: LD_INT 9
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: PUSH
29172: LD_VAR 0 4
29176: ARRAY
29177: ST_TO_ADDR
// end ;
29178: LD_VAR 0 2
29182: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29183: LD_INT 0
29185: PPUSH
29186: PPUSH
29187: PPUSH
// if not mines then
29188: LD_VAR 0 2
29192: NOT
29193: IFFALSE 29197
// exit ;
29195: GO 29341
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29197: LD_ADDR_VAR 0 5
29201: PUSH
29202: LD_INT 81
29204: PUSH
29205: LD_VAR 0 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 3
29216: PUSH
29217: LD_INT 21
29219: PUSH
29220: LD_INT 3
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PPUSH
29235: CALL_OW 69
29239: ST_TO_ADDR
// for i in mines do
29240: LD_ADDR_VAR 0 4
29244: PUSH
29245: LD_VAR 0 2
29249: PUSH
29250: FOR_IN
29251: IFFALSE 29339
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29253: LD_VAR 0 4
29257: PUSH
29258: LD_INT 1
29260: ARRAY
29261: PPUSH
29262: LD_VAR 0 4
29266: PUSH
29267: LD_INT 2
29269: ARRAY
29270: PPUSH
29271: CALL_OW 458
29275: NOT
29276: IFFALSE 29280
// continue ;
29278: GO 29250
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29280: LD_VAR 0 4
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: LD_VAR 0 4
29293: PUSH
29294: LD_INT 2
29296: ARRAY
29297: PPUSH
29298: CALL_OW 428
29302: PUSH
29303: LD_VAR 0 5
29307: IN
29308: IFFALSE 29337
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29310: LD_VAR 0 4
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: PPUSH
29319: LD_VAR 0 4
29323: PUSH
29324: LD_INT 2
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 456
// end ;
29337: GO 29250
29339: POP
29340: POP
// end ;
29341: LD_VAR 0 3
29345: RET
// export function Count ( array ) ; begin
29346: LD_INT 0
29348: PPUSH
// result := array + 0 ;
29349: LD_ADDR_VAR 0 2
29353: PUSH
29354: LD_VAR 0 1
29358: PUSH
29359: LD_INT 0
29361: PLUS
29362: ST_TO_ADDR
// end ;
29363: LD_VAR 0 2
29367: RET
// export function IsEmpty ( building ) ; begin
29368: LD_INT 0
29370: PPUSH
// if not building then
29371: LD_VAR 0 1
29375: NOT
29376: IFFALSE 29380
// exit ;
29378: GO 29423
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29380: LD_ADDR_VAR 0 2
29384: PUSH
29385: LD_VAR 0 1
29389: PUSH
29390: LD_INT 22
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 255
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 58
29409: PUSH
29410: EMPTY
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PPUSH
29417: CALL_OW 69
29421: IN
29422: ST_TO_ADDR
// end ;
29423: LD_VAR 0 2
29427: RET
// export function IsNotFull ( building ) ; var places ; begin
29428: LD_INT 0
29430: PPUSH
29431: PPUSH
// if not building then
29432: LD_VAR 0 1
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29469
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29441: LD_ADDR_VAR 0 2
29445: PUSH
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_INT 3
29453: PUSH
29454: LD_INT 62
29456: PUSH
29457: EMPTY
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PPUSH
29464: CALL_OW 72
29468: ST_TO_ADDR
// end ;
29469: LD_VAR 0 2
29473: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
// tmp := [ ] ;
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: EMPTY
29486: ST_TO_ADDR
// list := [ ] ;
29487: LD_ADDR_VAR 0 5
29491: PUSH
29492: EMPTY
29493: ST_TO_ADDR
// for i = 16 to 25 do
29494: LD_ADDR_VAR 0 4
29498: PUSH
29499: DOUBLE
29500: LD_INT 16
29502: DEC
29503: ST_TO_ADDR
29504: LD_INT 25
29506: PUSH
29507: FOR_TO
29508: IFFALSE 29581
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_VAR 0 3
29519: PUSH
29520: LD_INT 22
29522: PUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 255
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 91
29539: PUSH
29540: LD_VAR 0 1
29544: PUSH
29545: LD_INT 6
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 30
29555: PUSH
29556: LD_VAR 0 4
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: PPUSH
29573: CALL_OW 69
29577: ADD
29578: ST_TO_ADDR
29579: GO 29507
29581: POP
29582: POP
// for i = 1 to tmp do
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: DOUBLE
29589: LD_INT 1
29591: DEC
29592: ST_TO_ADDR
29593: LD_VAR 0 3
29597: PUSH
29598: FOR_TO
29599: IFFALSE 29687
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29601: LD_ADDR_VAR 0 5
29605: PUSH
29606: LD_VAR 0 5
29610: PUSH
29611: LD_VAR 0 3
29615: PUSH
29616: LD_VAR 0 4
29620: ARRAY
29621: PPUSH
29622: CALL_OW 266
29626: PUSH
29627: LD_VAR 0 3
29631: PUSH
29632: LD_VAR 0 4
29636: ARRAY
29637: PPUSH
29638: CALL_OW 250
29642: PUSH
29643: LD_VAR 0 3
29647: PUSH
29648: LD_VAR 0 4
29652: ARRAY
29653: PPUSH
29654: CALL_OW 251
29658: PUSH
29659: LD_VAR 0 3
29663: PUSH
29664: LD_VAR 0 4
29668: ARRAY
29669: PPUSH
29670: CALL_OW 254
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: ADD
29684: ST_TO_ADDR
29685: GO 29598
29687: POP
29688: POP
// result := list ;
29689: LD_ADDR_VAR 0 2
29693: PUSH
29694: LD_VAR 0 5
29698: ST_TO_ADDR
// end ;
29699: LD_VAR 0 2
29703: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29704: LD_INT 0
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
// if not factory then
29713: LD_VAR 0 1
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 30315
// if control = control_apeman then
29722: LD_VAR 0 4
29726: PUSH
29727: LD_INT 5
29729: EQUAL
29730: IFFALSE 29839
// begin tmp := UnitsInside ( factory ) ;
29732: LD_ADDR_VAR 0 8
29736: PUSH
29737: LD_VAR 0 1
29741: PPUSH
29742: CALL_OW 313
29746: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29747: LD_VAR 0 8
29751: PPUSH
29752: LD_INT 25
29754: PUSH
29755: LD_INT 12
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PPUSH
29762: CALL_OW 72
29766: NOT
29767: IFFALSE 29777
// control := control_manual ;
29769: LD_ADDR_VAR 0 4
29773: PUSH
29774: LD_INT 1
29776: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29777: LD_ADDR_VAR 0 8
29781: PUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: CALL 29474 0 1
29791: ST_TO_ADDR
// if tmp then
29792: LD_VAR 0 8
29796: IFFALSE 29839
// begin for i in tmp do
29798: LD_ADDR_VAR 0 7
29802: PUSH
29803: LD_VAR 0 8
29807: PUSH
29808: FOR_IN
29809: IFFALSE 29837
// if i [ 1 ] = b_ext_radio then
29811: LD_VAR 0 7
29815: PUSH
29816: LD_INT 1
29818: ARRAY
29819: PUSH
29820: LD_INT 22
29822: EQUAL
29823: IFFALSE 29835
// begin control := control_remote ;
29825: LD_ADDR_VAR 0 4
29829: PUSH
29830: LD_INT 2
29832: ST_TO_ADDR
// break ;
29833: GO 29837
// end ;
29835: GO 29808
29837: POP
29838: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29839: LD_VAR 0 1
29843: PPUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: LD_VAR 0 5
29863: PPUSH
29864: CALL_OW 448
29868: IFFALSE 29903
// begin result := [ chassis , engine , control , weapon ] ;
29870: LD_ADDR_VAR 0 6
29874: PUSH
29875: LD_VAR 0 2
29879: PUSH
29880: LD_VAR 0 3
29884: PUSH
29885: LD_VAR 0 4
29889: PUSH
29890: LD_VAR 0 5
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// exit ;
29901: GO 30315
// end ; _chassis := AvailableChassisList ( factory ) ;
29903: LD_ADDR_VAR 0 9
29907: PUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL_OW 475
29917: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29918: LD_ADDR_VAR 0 11
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 476
29932: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29933: LD_ADDR_VAR 0 12
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 477
29947: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29948: LD_ADDR_VAR 0 10
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 478
29962: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29963: LD_VAR 0 9
29967: NOT
29968: PUSH
29969: LD_VAR 0 11
29973: NOT
29974: OR
29975: PUSH
29976: LD_VAR 0 12
29980: NOT
29981: OR
29982: PUSH
29983: LD_VAR 0 10
29987: NOT
29988: OR
29989: IFFALSE 30024
// begin result := [ chassis , engine , control , weapon ] ;
29991: LD_ADDR_VAR 0 6
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: LD_VAR 0 3
30005: PUSH
30006: LD_VAR 0 4
30010: PUSH
30011: LD_VAR 0 5
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: ST_TO_ADDR
// exit ;
30022: GO 30315
// end ; if not chassis in _chassis then
30024: LD_VAR 0 2
30028: PUSH
30029: LD_VAR 0 9
30033: IN
30034: NOT
30035: IFFALSE 30061
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30037: LD_ADDR_VAR 0 2
30041: PUSH
30042: LD_VAR 0 9
30046: PUSH
30047: LD_INT 1
30049: PPUSH
30050: LD_VAR 0 9
30054: PPUSH
30055: CALL_OW 12
30059: ARRAY
30060: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30061: LD_VAR 0 2
30065: PPUSH
30066: LD_VAR 0 3
30070: PPUSH
30071: CALL 30320 0 2
30075: NOT
30076: IFFALSE 30135
// repeat engine := _engine [ 1 ] ;
30078: LD_ADDR_VAR 0 3
30082: PUSH
30083: LD_VAR 0 11
30087: PUSH
30088: LD_INT 1
30090: ARRAY
30091: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30092: LD_ADDR_VAR 0 11
30096: PUSH
30097: LD_VAR 0 11
30101: PPUSH
30102: LD_INT 1
30104: PPUSH
30105: CALL_OW 3
30109: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30110: LD_VAR 0 2
30114: PPUSH
30115: LD_VAR 0 3
30119: PPUSH
30120: CALL 30320 0 2
30124: PUSH
30125: LD_VAR 0 11
30129: PUSH
30130: EMPTY
30131: EQUAL
30132: OR
30133: IFFALSE 30078
// if not control in _control then
30135: LD_VAR 0 4
30139: PUSH
30140: LD_VAR 0 12
30144: IN
30145: NOT
30146: IFFALSE 30172
// control := _control [ rand ( 1 , _control ) ] ;
30148: LD_ADDR_VAR 0 4
30152: PUSH
30153: LD_VAR 0 12
30157: PUSH
30158: LD_INT 1
30160: PPUSH
30161: LD_VAR 0 12
30165: PPUSH
30166: CALL_OW 12
30170: ARRAY
30171: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30172: LD_VAR 0 2
30176: PPUSH
30177: LD_VAR 0 5
30181: PPUSH
30182: CALL 30540 0 2
30186: NOT
30187: IFFALSE 30246
// repeat weapon := _weapon [ 1 ] ;
30189: LD_ADDR_VAR 0 5
30193: PUSH
30194: LD_VAR 0 10
30198: PUSH
30199: LD_INT 1
30201: ARRAY
30202: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30203: LD_ADDR_VAR 0 10
30207: PUSH
30208: LD_VAR 0 10
30212: PPUSH
30213: LD_INT 1
30215: PPUSH
30216: CALL_OW 3
30220: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_VAR 0 5
30230: PPUSH
30231: CALL 30540 0 2
30235: PUSH
30236: LD_VAR 0 10
30240: PUSH
30241: EMPTY
30242: EQUAL
30243: OR
30244: IFFALSE 30189
// result := [ ] ;
30246: LD_ADDR_VAR 0 6
30250: PUSH
30251: EMPTY
30252: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: LD_VAR 0 3
30267: PPUSH
30268: LD_VAR 0 4
30272: PPUSH
30273: LD_VAR 0 5
30277: PPUSH
30278: CALL_OW 448
30282: IFFALSE 30315
// result := [ chassis , engine , control , weapon ] ;
30284: LD_ADDR_VAR 0 6
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: LD_VAR 0 3
30298: PUSH
30299: LD_VAR 0 4
30303: PUSH
30304: LD_VAR 0 5
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// end ;
30315: LD_VAR 0 6
30319: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30320: LD_INT 0
30322: PPUSH
// if not chassis or not engine then
30323: LD_VAR 0 1
30327: NOT
30328: PUSH
30329: LD_VAR 0 2
30333: NOT
30334: OR
30335: IFFALSE 30339
// exit ;
30337: GO 30535
// case engine of engine_solar :
30339: LD_VAR 0 2
30343: PUSH
30344: LD_INT 2
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30390
30352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 11
30360: PUSH
30361: LD_INT 12
30363: PUSH
30364: LD_INT 13
30366: PUSH
30367: LD_INT 14
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: ST_TO_ADDR
30388: GO 30519
30390: LD_INT 1
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30460
30398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_INT 11
30406: PUSH
30407: LD_INT 12
30409: PUSH
30410: LD_INT 13
30412: PUSH
30413: LD_INT 14
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 3
30424: PUSH
30425: LD_INT 4
30427: PUSH
30428: LD_INT 5
30430: PUSH
30431: LD_INT 21
30433: PUSH
30434: LD_INT 23
30436: PUSH
30437: LD_INT 22
30439: PUSH
30440: LD_INT 24
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: ST_TO_ADDR
30458: GO 30519
30460: LD_INT 3
30462: DOUBLE
30463: EQUAL
30464: IFTRUE 30468
30466: GO 30518
30468: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: LD_INT 13
30476: PUSH
30477: LD_INT 14
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 3
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: LD_INT 21
30494: PUSH
30495: LD_INT 22
30497: PUSH
30498: LD_INT 23
30500: PUSH
30501: LD_INT 24
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
30516: GO 30519
30518: POP
// result := ( chassis in result ) ;
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_VAR 0 1
30528: PUSH
30529: LD_VAR 0 3
30533: IN
30534: ST_TO_ADDR
// end ;
30535: LD_VAR 0 3
30539: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30540: LD_INT 0
30542: PPUSH
// if not chassis or not weapon then
30543: LD_VAR 0 1
30547: NOT
30548: PUSH
30549: LD_VAR 0 2
30553: NOT
30554: OR
30555: IFFALSE 30559
// exit ;
30557: GO 31619
// case weapon of us_machine_gun :
30559: LD_VAR 0 2
30563: PUSH
30564: LD_INT 2
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30602
30572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: LD_INT 2
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
30600: GO 31603
30602: LD_INT 3
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30640
30610: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 3
30624: PUSH
30625: LD_INT 4
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: ST_TO_ADDR
30638: GO 31603
30640: LD_INT 11
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30648
30646: GO 30678
30648: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30649: LD_ADDR_VAR 0 3
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 4
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
30676: GO 31603
30678: LD_INT 4
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30712
30686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 4
30700: PUSH
30701: LD_INT 5
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
30710: GO 31603
30712: LD_INT 5
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30746
30720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: LD_INT 4
30734: PUSH
30735: LD_INT 5
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 31603
30746: LD_INT 9
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30780
30754: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30755: LD_ADDR_VAR 0 3
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: LD_INT 4
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
30778: GO 31603
30780: LD_INT 7
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30814
30788: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30789: LD_ADDR_VAR 0 3
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
30812: GO 31603
30814: LD_INT 12
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30848
30822: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: LD_INT 3
30833: PUSH
30834: LD_INT 4
30836: PUSH
30837: LD_INT 5
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: ST_TO_ADDR
30846: GO 31603
30848: LD_INT 13
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 30882
30856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: LD_INT 4
30870: PUSH
30871: LD_INT 5
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: ST_TO_ADDR
30880: GO 31603
30882: LD_INT 14
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30908
30890: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30891: LD_ADDR_VAR 0 3
30895: PUSH
30896: LD_INT 4
30898: PUSH
30899: LD_INT 5
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: ST_TO_ADDR
30906: GO 31603
30908: LD_INT 6
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30934
30916: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30917: LD_ADDR_VAR 0 3
30921: PUSH
30922: LD_INT 4
30924: PUSH
30925: LD_INT 5
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: ST_TO_ADDR
30932: GO 31603
30934: LD_INT 10
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30960
30942: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: LD_INT 5
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: ST_TO_ADDR
30958: GO 31603
30960: LD_INT 22
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30994
30968: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_INT 11
30976: PUSH
30977: LD_INT 12
30979: PUSH
30980: LD_INT 13
30982: PUSH
30983: LD_INT 14
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
30992: GO 31603
30994: LD_INT 23
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31028
31002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 11
31010: PUSH
31011: LD_INT 12
31013: PUSH
31014: LD_INT 13
31016: PUSH
31017: LD_INT 14
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: ST_TO_ADDR
31026: GO 31603
31028: LD_INT 24
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31062
31036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31037: LD_ADDR_VAR 0 3
31041: PUSH
31042: LD_INT 11
31044: PUSH
31045: LD_INT 12
31047: PUSH
31048: LD_INT 13
31050: PUSH
31051: LD_INT 14
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
31060: GO 31603
31062: LD_INT 30
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31096
31070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_INT 12
31081: PUSH
31082: LD_INT 13
31084: PUSH
31085: LD_INT 14
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
31094: GO 31603
31096: LD_INT 25
31098: DOUBLE
31099: EQUAL
31100: IFTRUE 31104
31102: GO 31122
31104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31105: LD_ADDR_VAR 0 3
31109: PUSH
31110: LD_INT 13
31112: PUSH
31113: LD_INT 14
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: ST_TO_ADDR
31120: GO 31603
31122: LD_INT 27
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31148
31130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_INT 13
31138: PUSH
31139: LD_INT 14
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: ST_TO_ADDR
31146: GO 31603
31148: LD_INT 92
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31182
31156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31157: LD_ADDR_VAR 0 3
31161: PUSH
31162: LD_INT 11
31164: PUSH
31165: LD_INT 12
31167: PUSH
31168: LD_INT 13
31170: PUSH
31171: LD_INT 14
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 31603
31182: LD_INT 28
31184: DOUBLE
31185: EQUAL
31186: IFTRUE 31190
31188: GO 31208
31190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 13
31198: PUSH
31199: LD_INT 14
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: ST_TO_ADDR
31206: GO 31603
31208: LD_INT 29
31210: DOUBLE
31211: EQUAL
31212: IFTRUE 31216
31214: GO 31234
31216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31217: LD_ADDR_VAR 0 3
31221: PUSH
31222: LD_INT 13
31224: PUSH
31225: LD_INT 14
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: ST_TO_ADDR
31232: GO 31603
31234: LD_INT 31
31236: DOUBLE
31237: EQUAL
31238: IFTRUE 31242
31240: GO 31260
31242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31243: LD_ADDR_VAR 0 3
31247: PUSH
31248: LD_INT 13
31250: PUSH
31251: LD_INT 14
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: ST_TO_ADDR
31258: GO 31603
31260: LD_INT 26
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31268
31266: GO 31286
31268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31269: LD_ADDR_VAR 0 3
31273: PUSH
31274: LD_INT 13
31276: PUSH
31277: LD_INT 14
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: ST_TO_ADDR
31284: GO 31603
31286: LD_INT 42
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31320
31294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_INT 21
31302: PUSH
31303: LD_INT 22
31305: PUSH
31306: LD_INT 23
31308: PUSH
31309: LD_INT 24
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 31603
31320: LD_INT 43
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31354
31328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 21
31336: PUSH
31337: LD_INT 22
31339: PUSH
31340: LD_INT 23
31342: PUSH
31343: LD_INT 24
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
31352: GO 31603
31354: LD_INT 44
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 31388
31362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31363: LD_ADDR_VAR 0 3
31367: PUSH
31368: LD_INT 21
31370: PUSH
31371: LD_INT 22
31373: PUSH
31374: LD_INT 23
31376: PUSH
31377: LD_INT 24
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
31386: GO 31603
31388: LD_INT 45
31390: DOUBLE
31391: EQUAL
31392: IFTRUE 31396
31394: GO 31422
31396: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31397: LD_ADDR_VAR 0 3
31401: PUSH
31402: LD_INT 21
31404: PUSH
31405: LD_INT 22
31407: PUSH
31408: LD_INT 23
31410: PUSH
31411: LD_INT 24
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: ST_TO_ADDR
31420: GO 31603
31422: LD_INT 49
31424: DOUBLE
31425: EQUAL
31426: IFTRUE 31430
31428: GO 31456
31430: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31431: LD_ADDR_VAR 0 3
31435: PUSH
31436: LD_INT 21
31438: PUSH
31439: LD_INT 22
31441: PUSH
31442: LD_INT 23
31444: PUSH
31445: LD_INT 24
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
31454: GO 31603
31456: LD_INT 51
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31490
31464: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31465: LD_ADDR_VAR 0 3
31469: PUSH
31470: LD_INT 21
31472: PUSH
31473: LD_INT 22
31475: PUSH
31476: LD_INT 23
31478: PUSH
31479: LD_INT 24
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: ST_TO_ADDR
31488: GO 31603
31490: LD_INT 52
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31498
31496: GO 31524
31498: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31499: LD_ADDR_VAR 0 3
31503: PUSH
31504: LD_INT 21
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_INT 23
31512: PUSH
31513: LD_INT 24
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
31522: GO 31603
31524: LD_INT 53
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31550
31532: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31533: LD_ADDR_VAR 0 3
31537: PUSH
31538: LD_INT 23
31540: PUSH
31541: LD_INT 24
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: ST_TO_ADDR
31548: GO 31603
31550: LD_INT 46
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31576
31558: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31559: LD_ADDR_VAR 0 3
31563: PUSH
31564: LD_INT 23
31566: PUSH
31567: LD_INT 24
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: ST_TO_ADDR
31574: GO 31603
31576: LD_INT 47
31578: DOUBLE
31579: EQUAL
31580: IFTRUE 31584
31582: GO 31602
31584: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 23
31592: PUSH
31593: LD_INT 24
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: ST_TO_ADDR
31600: GO 31603
31602: POP
// result := ( chassis in result ) ;
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_VAR 0 1
31612: PUSH
31613: LD_VAR 0 3
31617: IN
31618: ST_TO_ADDR
// end ;
31619: LD_VAR 0 3
31623: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31624: LD_INT 0
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
// result := array ;
31633: LD_ADDR_VAR 0 5
31637: PUSH
31638: LD_VAR 0 1
31642: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31643: LD_VAR 0 1
31647: NOT
31648: PUSH
31649: LD_VAR 0 2
31653: NOT
31654: OR
31655: PUSH
31656: LD_VAR 0 3
31660: NOT
31661: OR
31662: PUSH
31663: LD_VAR 0 2
31667: PUSH
31668: LD_VAR 0 1
31672: GREATER
31673: OR
31674: PUSH
31675: LD_VAR 0 3
31679: PUSH
31680: LD_VAR 0 1
31684: GREATER
31685: OR
31686: IFFALSE 31690
// exit ;
31688: GO 31986
// if direction then
31690: LD_VAR 0 4
31694: IFFALSE 31758
// begin d := 1 ;
31696: LD_ADDR_VAR 0 9
31700: PUSH
31701: LD_INT 1
31703: ST_TO_ADDR
// if i_from > i_to then
31704: LD_VAR 0 2
31708: PUSH
31709: LD_VAR 0 3
31713: GREATER
31714: IFFALSE 31740
// length := ( array - i_from ) + i_to else
31716: LD_ADDR_VAR 0 11
31720: PUSH
31721: LD_VAR 0 1
31725: PUSH
31726: LD_VAR 0 2
31730: MINUS
31731: PUSH
31732: LD_VAR 0 3
31736: PLUS
31737: ST_TO_ADDR
31738: GO 31756
// length := i_to - i_from ;
31740: LD_ADDR_VAR 0 11
31744: PUSH
31745: LD_VAR 0 3
31749: PUSH
31750: LD_VAR 0 2
31754: MINUS
31755: ST_TO_ADDR
// end else
31756: GO 31819
// begin d := - 1 ;
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: ST_TO_ADDR
// if i_from > i_to then
31767: LD_VAR 0 2
31771: PUSH
31772: LD_VAR 0 3
31776: GREATER
31777: IFFALSE 31797
// length := i_from - i_to else
31779: LD_ADDR_VAR 0 11
31783: PUSH
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 3
31793: MINUS
31794: ST_TO_ADDR
31795: GO 31819
// length := ( array - i_to ) + i_from ;
31797: LD_ADDR_VAR 0 11
31801: PUSH
31802: LD_VAR 0 1
31806: PUSH
31807: LD_VAR 0 3
31811: MINUS
31812: PUSH
31813: LD_VAR 0 2
31817: PLUS
31818: ST_TO_ADDR
// end ; if not length then
31819: LD_VAR 0 11
31823: NOT
31824: IFFALSE 31828
// exit ;
31826: GO 31986
// tmp := array ;
31828: LD_ADDR_VAR 0 10
31832: PUSH
31833: LD_VAR 0 1
31837: ST_TO_ADDR
// for i = 1 to length do
31838: LD_ADDR_VAR 0 6
31842: PUSH
31843: DOUBLE
31844: LD_INT 1
31846: DEC
31847: ST_TO_ADDR
31848: LD_VAR 0 11
31852: PUSH
31853: FOR_TO
31854: IFFALSE 31974
// begin for j = 1 to array do
31856: LD_ADDR_VAR 0 7
31860: PUSH
31861: DOUBLE
31862: LD_INT 1
31864: DEC
31865: ST_TO_ADDR
31866: LD_VAR 0 1
31870: PUSH
31871: FOR_TO
31872: IFFALSE 31960
// begin k := j + d ;
31874: LD_ADDR_VAR 0 8
31878: PUSH
31879: LD_VAR 0 7
31883: PUSH
31884: LD_VAR 0 9
31888: PLUS
31889: ST_TO_ADDR
// if k > array then
31890: LD_VAR 0 8
31894: PUSH
31895: LD_VAR 0 1
31899: GREATER
31900: IFFALSE 31910
// k := 1 ;
31902: LD_ADDR_VAR 0 8
31906: PUSH
31907: LD_INT 1
31909: ST_TO_ADDR
// if not k then
31910: LD_VAR 0 8
31914: NOT
31915: IFFALSE 31927
// k := array ;
31917: LD_ADDR_VAR 0 8
31921: PUSH
31922: LD_VAR 0 1
31926: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31927: LD_ADDR_VAR 0 10
31931: PUSH
31932: LD_VAR 0 10
31936: PPUSH
31937: LD_VAR 0 8
31941: PPUSH
31942: LD_VAR 0 1
31946: PUSH
31947: LD_VAR 0 7
31951: ARRAY
31952: PPUSH
31953: CALL_OW 1
31957: ST_TO_ADDR
// end ;
31958: GO 31871
31960: POP
31961: POP
// array := tmp ;
31962: LD_ADDR_VAR 0 1
31966: PUSH
31967: LD_VAR 0 10
31971: ST_TO_ADDR
// end ;
31972: GO 31853
31974: POP
31975: POP
// result := array ;
31976: LD_ADDR_VAR 0 5
31980: PUSH
31981: LD_VAR 0 1
31985: ST_TO_ADDR
// end ;
31986: LD_VAR 0 5
31990: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
// result := 0 ;
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_INT 0
32002: ST_TO_ADDR
// if not array or not value in array then
32003: LD_VAR 0 1
32007: NOT
32008: PUSH
32009: LD_VAR 0 2
32013: PUSH
32014: LD_VAR 0 1
32018: IN
32019: NOT
32020: OR
32021: IFFALSE 32025
// exit ;
32023: GO 32079
// for i = 1 to array do
32025: LD_ADDR_VAR 0 4
32029: PUSH
32030: DOUBLE
32031: LD_INT 1
32033: DEC
32034: ST_TO_ADDR
32035: LD_VAR 0 1
32039: PUSH
32040: FOR_TO
32041: IFFALSE 32077
// if value = array [ i ] then
32043: LD_VAR 0 2
32047: PUSH
32048: LD_VAR 0 1
32052: PUSH
32053: LD_VAR 0 4
32057: ARRAY
32058: EQUAL
32059: IFFALSE 32075
// begin result := i ;
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: LD_VAR 0 4
32070: ST_TO_ADDR
// exit ;
32071: POP
32072: POP
32073: GO 32079
// end ;
32075: GO 32040
32077: POP
32078: POP
// end ;
32079: LD_VAR 0 3
32083: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32084: LD_INT 0
32086: PPUSH
// vc_chassis := chassis ;
32087: LD_ADDR_OWVAR 37
32091: PUSH
32092: LD_VAR 0 1
32096: ST_TO_ADDR
// vc_engine := engine ;
32097: LD_ADDR_OWVAR 39
32101: PUSH
32102: LD_VAR 0 2
32106: ST_TO_ADDR
// vc_control := control ;
32107: LD_ADDR_OWVAR 38
32111: PUSH
32112: LD_VAR 0 3
32116: ST_TO_ADDR
// vc_weapon := weapon ;
32117: LD_ADDR_OWVAR 40
32121: PUSH
32122: LD_VAR 0 4
32126: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32127: LD_ADDR_OWVAR 41
32131: PUSH
32132: LD_VAR 0 5
32136: ST_TO_ADDR
// end ;
32137: LD_VAR 0 6
32141: RET
// export function WantPlant ( unit ) ; var task ; begin
32142: LD_INT 0
32144: PPUSH
32145: PPUSH
// result := false ;
32146: LD_ADDR_VAR 0 2
32150: PUSH
32151: LD_INT 0
32153: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_VAR 0 1
32163: PPUSH
32164: CALL_OW 437
32168: ST_TO_ADDR
// if task then
32169: LD_VAR 0 3
32173: IFFALSE 32201
// if task [ 1 ] [ 1 ] = p then
32175: LD_VAR 0 3
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: PUSH
32184: LD_INT 1
32186: ARRAY
32187: PUSH
32188: LD_STRING p
32190: EQUAL
32191: IFFALSE 32201
// result := true ;
32193: LD_ADDR_VAR 0 2
32197: PUSH
32198: LD_INT 1
32200: ST_TO_ADDR
// end ;
32201: LD_VAR 0 2
32205: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32206: LD_INT 0
32208: PPUSH
32209: PPUSH
32210: PPUSH
32211: PPUSH
// if pos < 1 then
32212: LD_VAR 0 2
32216: PUSH
32217: LD_INT 1
32219: LESS
32220: IFFALSE 32224
// exit ;
32222: GO 32527
// if pos = 1 then
32224: LD_VAR 0 2
32228: PUSH
32229: LD_INT 1
32231: EQUAL
32232: IFFALSE 32265
// result := Replace ( arr , pos [ 1 ] , value ) else
32234: LD_ADDR_VAR 0 4
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: LD_VAR 0 2
32248: PUSH
32249: LD_INT 1
32251: ARRAY
32252: PPUSH
32253: LD_VAR 0 3
32257: PPUSH
32258: CALL_OW 1
32262: ST_TO_ADDR
32263: GO 32527
// begin tmp := arr ;
32265: LD_ADDR_VAR 0 6
32269: PUSH
32270: LD_VAR 0 1
32274: ST_TO_ADDR
// s_arr := [ tmp ] ;
32275: LD_ADDR_VAR 0 7
32279: PUSH
32280: LD_VAR 0 6
32284: PUSH
32285: EMPTY
32286: LIST
32287: ST_TO_ADDR
// for i = 1 to pos - 1 do
32288: LD_ADDR_VAR 0 5
32292: PUSH
32293: DOUBLE
32294: LD_INT 1
32296: DEC
32297: ST_TO_ADDR
32298: LD_VAR 0 2
32302: PUSH
32303: LD_INT 1
32305: MINUS
32306: PUSH
32307: FOR_TO
32308: IFFALSE 32353
// begin tmp := tmp [ pos [ i ] ] ;
32310: LD_ADDR_VAR 0 6
32314: PUSH
32315: LD_VAR 0 6
32319: PUSH
32320: LD_VAR 0 2
32324: PUSH
32325: LD_VAR 0 5
32329: ARRAY
32330: ARRAY
32331: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32332: LD_ADDR_VAR 0 7
32336: PUSH
32337: LD_VAR 0 7
32341: PUSH
32342: LD_VAR 0 6
32346: PUSH
32347: EMPTY
32348: LIST
32349: ADD
32350: ST_TO_ADDR
// end ;
32351: GO 32307
32353: POP
32354: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32355: LD_ADDR_VAR 0 6
32359: PUSH
32360: LD_VAR 0 6
32364: PPUSH
32365: LD_VAR 0 2
32369: PUSH
32370: LD_VAR 0 2
32374: ARRAY
32375: PPUSH
32376: LD_VAR 0 3
32380: PPUSH
32381: CALL_OW 1
32385: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32386: LD_ADDR_VAR 0 7
32390: PUSH
32391: LD_VAR 0 7
32395: PPUSH
32396: LD_VAR 0 7
32400: PPUSH
32401: LD_VAR 0 6
32405: PPUSH
32406: CALL_OW 1
32410: ST_TO_ADDR
// for i = s_arr downto 2 do
32411: LD_ADDR_VAR 0 5
32415: PUSH
32416: DOUBLE
32417: LD_VAR 0 7
32421: INC
32422: ST_TO_ADDR
32423: LD_INT 2
32425: PUSH
32426: FOR_DOWNTO
32427: IFFALSE 32511
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32429: LD_ADDR_VAR 0 6
32433: PUSH
32434: LD_VAR 0 7
32438: PUSH
32439: LD_VAR 0 5
32443: PUSH
32444: LD_INT 1
32446: MINUS
32447: ARRAY
32448: PPUSH
32449: LD_VAR 0 2
32453: PUSH
32454: LD_VAR 0 5
32458: PUSH
32459: LD_INT 1
32461: MINUS
32462: ARRAY
32463: PPUSH
32464: LD_VAR 0 7
32468: PUSH
32469: LD_VAR 0 5
32473: ARRAY
32474: PPUSH
32475: CALL_OW 1
32479: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32480: LD_ADDR_VAR 0 7
32484: PUSH
32485: LD_VAR 0 7
32489: PPUSH
32490: LD_VAR 0 5
32494: PUSH
32495: LD_INT 1
32497: MINUS
32498: PPUSH
32499: LD_VAR 0 6
32503: PPUSH
32504: CALL_OW 1
32508: ST_TO_ADDR
// end ;
32509: GO 32426
32511: POP
32512: POP
// result := s_arr [ 1 ] ;
32513: LD_ADDR_VAR 0 4
32517: PUSH
32518: LD_VAR 0 7
32522: PUSH
32523: LD_INT 1
32525: ARRAY
32526: ST_TO_ADDR
// end ; end ;
32527: LD_VAR 0 4
32531: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32532: LD_INT 0
32534: PPUSH
32535: PPUSH
// if not list then
32536: LD_VAR 0 1
32540: NOT
32541: IFFALSE 32545
// exit ;
32543: GO 32636
// i := list [ pos1 ] ;
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 1
32554: PUSH
32555: LD_VAR 0 2
32559: ARRAY
32560: ST_TO_ADDR
// if not i then
32561: LD_VAR 0 5
32565: NOT
32566: IFFALSE 32570
// exit ;
32568: GO 32636
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32570: LD_ADDR_VAR 0 1
32574: PUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_VAR 0 2
32584: PPUSH
32585: LD_VAR 0 1
32589: PUSH
32590: LD_VAR 0 3
32594: ARRAY
32595: PPUSH
32596: CALL_OW 1
32600: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32601: LD_ADDR_VAR 0 1
32605: PUSH
32606: LD_VAR 0 1
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: LD_VAR 0 5
32620: PPUSH
32621: CALL_OW 1
32625: ST_TO_ADDR
// result := list ;
32626: LD_ADDR_VAR 0 4
32630: PUSH
32631: LD_VAR 0 1
32635: ST_TO_ADDR
// end ;
32636: LD_VAR 0 4
32640: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32641: LD_INT 0
32643: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32644: LD_ADDR_VAR 0 5
32648: PUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 250
32658: PPUSH
32659: LD_VAR 0 1
32663: PPUSH
32664: CALL_OW 251
32668: PPUSH
32669: LD_VAR 0 2
32673: PPUSH
32674: LD_VAR 0 3
32678: PPUSH
32679: LD_VAR 0 4
32683: PPUSH
32684: CALL 33062 0 5
32688: ST_TO_ADDR
// end ;
32689: LD_VAR 0 5
32693: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32694: LD_INT 0
32696: PPUSH
32697: PPUSH
32698: PPUSH
32699: PPUSH
// if not list or not unit then
32700: LD_VAR 0 2
32704: NOT
32705: PUSH
32706: LD_VAR 0 1
32710: NOT
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33057
// result := [ ] ;
32716: LD_ADDR_VAR 0 5
32720: PUSH
32721: EMPTY
32722: ST_TO_ADDR
// for i in list do
32723: LD_ADDR_VAR 0 6
32727: PUSH
32728: LD_VAR 0 2
32732: PUSH
32733: FOR_IN
32734: IFFALSE 32952
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32736: LD_ADDR_VAR 0 8
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: LD_VAR 0 6
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: PPUSH
32755: LD_VAR 0 6
32759: PUSH
32760: LD_INT 2
32762: ARRAY
32763: PPUSH
32764: CALL_OW 297
32768: ST_TO_ADDR
// if not Count ( result ) then
32769: LD_VAR 0 5
32773: PPUSH
32774: CALL 29346 0 1
32778: NOT
32779: IFFALSE 32812
// begin result := Join ( result , [ i , tmp ] ) ;
32781: LD_ADDR_VAR 0 5
32785: PUSH
32786: LD_VAR 0 5
32790: PPUSH
32791: LD_VAR 0 6
32795: PUSH
32796: LD_VAR 0 8
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PPUSH
32805: CALL 64955 0 2
32809: ST_TO_ADDR
// continue ;
32810: GO 32733
// end ; if result [ result ] [ 2 ] <= tmp then
32812: LD_VAR 0 5
32816: PUSH
32817: LD_VAR 0 5
32821: ARRAY
32822: PUSH
32823: LD_INT 2
32825: ARRAY
32826: PUSH
32827: LD_VAR 0 8
32831: LESSEQUAL
32832: IFFALSE 32865
// result := Join ( result , [ i , tmp ] ) else
32834: LD_ADDR_VAR 0 5
32838: PUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 6
32848: PUSH
32849: LD_VAR 0 8
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PPUSH
32858: CALL 64955 0 2
32862: ST_TO_ADDR
32863: GO 32950
// begin for j := 1 to Count ( result ) do
32865: LD_ADDR_VAR 0 7
32869: PUSH
32870: DOUBLE
32871: LD_INT 1
32873: DEC
32874: ST_TO_ADDR
32875: LD_VAR 0 5
32879: PPUSH
32880: CALL 29346 0 1
32884: PUSH
32885: FOR_TO
32886: IFFALSE 32948
// begin if tmp < result [ j ] [ 2 ] then
32888: LD_VAR 0 8
32892: PUSH
32893: LD_VAR 0 5
32897: PUSH
32898: LD_VAR 0 7
32902: ARRAY
32903: PUSH
32904: LD_INT 2
32906: ARRAY
32907: LESS
32908: IFFALSE 32946
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32910: LD_ADDR_VAR 0 5
32914: PUSH
32915: LD_VAR 0 5
32919: PPUSH
32920: LD_VAR 0 7
32924: PPUSH
32925: LD_VAR 0 6
32929: PUSH
32930: LD_VAR 0 8
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PPUSH
32939: CALL_OW 2
32943: ST_TO_ADDR
// break ;
32944: GO 32948
// end ; end ;
32946: GO 32885
32948: POP
32949: POP
// end ; end ;
32950: GO 32733
32952: POP
32953: POP
// if result and not asc then
32954: LD_VAR 0 5
32958: PUSH
32959: LD_VAR 0 3
32963: NOT
32964: AND
32965: IFFALSE 32982
// result := ReverseArray ( result ) ;
32967: LD_ADDR_VAR 0 5
32971: PUSH
32972: LD_VAR 0 5
32976: PPUSH
32977: CALL 60222 0 1
32981: ST_TO_ADDR
// tmp := [ ] ;
32982: LD_ADDR_VAR 0 8
32986: PUSH
32987: EMPTY
32988: ST_TO_ADDR
// if mode then
32989: LD_VAR 0 4
32993: IFFALSE 33057
// begin for i := 1 to result do
32995: LD_ADDR_VAR 0 6
32999: PUSH
33000: DOUBLE
33001: LD_INT 1
33003: DEC
33004: ST_TO_ADDR
33005: LD_VAR 0 5
33009: PUSH
33010: FOR_TO
33011: IFFALSE 33045
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33013: LD_ADDR_VAR 0 8
33017: PUSH
33018: LD_VAR 0 8
33022: PPUSH
33023: LD_VAR 0 5
33027: PUSH
33028: LD_VAR 0 6
33032: ARRAY
33033: PUSH
33034: LD_INT 1
33036: ARRAY
33037: PPUSH
33038: CALL 64955 0 2
33042: ST_TO_ADDR
33043: GO 33010
33045: POP
33046: POP
// result := tmp ;
33047: LD_ADDR_VAR 0 5
33051: PUSH
33052: LD_VAR 0 8
33056: ST_TO_ADDR
// end ; end ;
33057: LD_VAR 0 5
33061: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33062: LD_INT 0
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
// if not list then
33068: LD_VAR 0 3
33072: NOT
33073: IFFALSE 33077
// exit ;
33075: GO 33465
// result := [ ] ;
33077: LD_ADDR_VAR 0 6
33081: PUSH
33082: EMPTY
33083: ST_TO_ADDR
// for i in list do
33084: LD_ADDR_VAR 0 7
33088: PUSH
33089: LD_VAR 0 3
33093: PUSH
33094: FOR_IN
33095: IFFALSE 33297
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33097: LD_ADDR_VAR 0 9
33101: PUSH
33102: LD_VAR 0 7
33106: PPUSH
33107: LD_VAR 0 1
33111: PPUSH
33112: LD_VAR 0 2
33116: PPUSH
33117: CALL_OW 297
33121: ST_TO_ADDR
// if not result then
33122: LD_VAR 0 6
33126: NOT
33127: IFFALSE 33153
// result := [ [ i , tmp ] ] else
33129: LD_ADDR_VAR 0 6
33133: PUSH
33134: LD_VAR 0 7
33138: PUSH
33139: LD_VAR 0 9
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: ST_TO_ADDR
33151: GO 33295
// begin if result [ result ] [ 2 ] <= tmp then
33153: LD_VAR 0 6
33157: PUSH
33158: LD_VAR 0 6
33162: ARRAY
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: PUSH
33168: LD_VAR 0 9
33172: LESSEQUAL
33173: IFFALSE 33215
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33175: LD_ADDR_VAR 0 6
33179: PUSH
33180: LD_VAR 0 6
33184: PPUSH
33185: LD_VAR 0 6
33189: PUSH
33190: LD_INT 1
33192: PLUS
33193: PPUSH
33194: LD_VAR 0 7
33198: PUSH
33199: LD_VAR 0 9
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PPUSH
33208: CALL_OW 2
33212: ST_TO_ADDR
33213: GO 33295
// for j := 1 to result do
33215: LD_ADDR_VAR 0 8
33219: PUSH
33220: DOUBLE
33221: LD_INT 1
33223: DEC
33224: ST_TO_ADDR
33225: LD_VAR 0 6
33229: PUSH
33230: FOR_TO
33231: IFFALSE 33293
// begin if tmp < result [ j ] [ 2 ] then
33233: LD_VAR 0 9
33237: PUSH
33238: LD_VAR 0 6
33242: PUSH
33243: LD_VAR 0 8
33247: ARRAY
33248: PUSH
33249: LD_INT 2
33251: ARRAY
33252: LESS
33253: IFFALSE 33291
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33255: LD_ADDR_VAR 0 6
33259: PUSH
33260: LD_VAR 0 6
33264: PPUSH
33265: LD_VAR 0 8
33269: PPUSH
33270: LD_VAR 0 7
33274: PUSH
33275: LD_VAR 0 9
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL_OW 2
33288: ST_TO_ADDR
// break ;
33289: GO 33293
// end ; end ;
33291: GO 33230
33293: POP
33294: POP
// end ; end ;
33295: GO 33094
33297: POP
33298: POP
// if result and not asc then
33299: LD_VAR 0 6
33303: PUSH
33304: LD_VAR 0 4
33308: NOT
33309: AND
33310: IFFALSE 33385
// begin tmp := result ;
33312: LD_ADDR_VAR 0 9
33316: PUSH
33317: LD_VAR 0 6
33321: ST_TO_ADDR
// for i = tmp downto 1 do
33322: LD_ADDR_VAR 0 7
33326: PUSH
33327: DOUBLE
33328: LD_VAR 0 9
33332: INC
33333: ST_TO_ADDR
33334: LD_INT 1
33336: PUSH
33337: FOR_DOWNTO
33338: IFFALSE 33383
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33340: LD_ADDR_VAR 0 6
33344: PUSH
33345: LD_VAR 0 6
33349: PPUSH
33350: LD_VAR 0 9
33354: PUSH
33355: LD_VAR 0 7
33359: MINUS
33360: PUSH
33361: LD_INT 1
33363: PLUS
33364: PPUSH
33365: LD_VAR 0 9
33369: PUSH
33370: LD_VAR 0 7
33374: ARRAY
33375: PPUSH
33376: CALL_OW 1
33380: ST_TO_ADDR
33381: GO 33337
33383: POP
33384: POP
// end ; tmp := [ ] ;
33385: LD_ADDR_VAR 0 9
33389: PUSH
33390: EMPTY
33391: ST_TO_ADDR
// if mode then
33392: LD_VAR 0 5
33396: IFFALSE 33465
// begin for i = 1 to result do
33398: LD_ADDR_VAR 0 7
33402: PUSH
33403: DOUBLE
33404: LD_INT 1
33406: DEC
33407: ST_TO_ADDR
33408: LD_VAR 0 6
33412: PUSH
33413: FOR_TO
33414: IFFALSE 33453
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33416: LD_ADDR_VAR 0 9
33420: PUSH
33421: LD_VAR 0 9
33425: PPUSH
33426: LD_VAR 0 7
33430: PPUSH
33431: LD_VAR 0 6
33435: PUSH
33436: LD_VAR 0 7
33440: ARRAY
33441: PUSH
33442: LD_INT 1
33444: ARRAY
33445: PPUSH
33446: CALL_OW 1
33450: ST_TO_ADDR
33451: GO 33413
33453: POP
33454: POP
// result := tmp ;
33455: LD_ADDR_VAR 0 6
33459: PUSH
33460: LD_VAR 0 9
33464: ST_TO_ADDR
// end ; end ;
33465: LD_VAR 0 6
33469: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33470: LD_INT 0
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33478: LD_ADDR_VAR 0 5
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: EMPTY
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: ST_TO_ADDR
// if not x or not y then
33500: LD_VAR 0 2
33504: NOT
33505: PUSH
33506: LD_VAR 0 3
33510: NOT
33511: OR
33512: IFFALSE 33516
// exit ;
33514: GO 35166
// if not range then
33516: LD_VAR 0 4
33520: NOT
33521: IFFALSE 33531
// range := 10 ;
33523: LD_ADDR_VAR 0 4
33527: PUSH
33528: LD_INT 10
33530: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33531: LD_ADDR_VAR 0 8
33535: PUSH
33536: LD_INT 81
33538: PUSH
33539: LD_VAR 0 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 92
33550: PUSH
33551: LD_VAR 0 2
33555: PUSH
33556: LD_VAR 0 3
33560: PUSH
33561: LD_VAR 0 4
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: LD_INT 21
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: PPUSH
33594: CALL_OW 69
33598: ST_TO_ADDR
// if not tmp then
33599: LD_VAR 0 8
33603: NOT
33604: IFFALSE 33608
// exit ;
33606: GO 35166
// for i in tmp do
33608: LD_ADDR_VAR 0 6
33612: PUSH
33613: LD_VAR 0 8
33617: PUSH
33618: FOR_IN
33619: IFFALSE 35141
// begin points := [ 0 , 0 , 0 ] ;
33621: LD_ADDR_VAR 0 9
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
// bpoints := 1 ;
33640: LD_ADDR_VAR 0 10
33644: PUSH
33645: LD_INT 1
33647: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33648: LD_VAR 0 6
33652: PPUSH
33653: CALL_OW 247
33657: PUSH
33658: LD_INT 1
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 34244
33666: POP
// begin if GetClass ( i ) = 1 then
33667: LD_VAR 0 6
33671: PPUSH
33672: CALL_OW 257
33676: PUSH
33677: LD_INT 1
33679: EQUAL
33680: IFFALSE 33701
// points := [ 10 , 5 , 3 ] ;
33682: LD_ADDR_VAR 0 9
33686: PUSH
33687: LD_INT 10
33689: PUSH
33690: LD_INT 5
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33701: LD_VAR 0 6
33705: PPUSH
33706: CALL_OW 257
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: LD_INT 4
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: IN
33725: IFFALSE 33746
// points := [ 3 , 2 , 1 ] ;
33727: LD_ADDR_VAR 0 9
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33746: LD_VAR 0 6
33750: PPUSH
33751: CALL_OW 257
33755: PUSH
33756: LD_INT 5
33758: EQUAL
33759: IFFALSE 33780
// points := [ 130 , 5 , 2 ] ;
33761: LD_ADDR_VAR 0 9
33765: PUSH
33766: LD_INT 130
33768: PUSH
33769: LD_INT 5
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33780: LD_VAR 0 6
33784: PPUSH
33785: CALL_OW 257
33789: PUSH
33790: LD_INT 8
33792: EQUAL
33793: IFFALSE 33814
// points := [ 35 , 35 , 30 ] ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_INT 35
33802: PUSH
33803: LD_INT 35
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33814: LD_VAR 0 6
33818: PPUSH
33819: CALL_OW 257
33823: PUSH
33824: LD_INT 9
33826: EQUAL
33827: IFFALSE 33848
// points := [ 20 , 55 , 40 ] ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_INT 20
33836: PUSH
33837: LD_INT 55
33839: PUSH
33840: LD_INT 40
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 257
33857: PUSH
33858: LD_INT 12
33860: PUSH
33861: LD_INT 16
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: IN
33868: IFFALSE 33889
// points := [ 5 , 3 , 2 ] ;
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_INT 5
33877: PUSH
33878: LD_INT 3
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33889: LD_VAR 0 6
33893: PPUSH
33894: CALL_OW 257
33898: PUSH
33899: LD_INT 17
33901: EQUAL
33902: IFFALSE 33923
// points := [ 100 , 50 , 75 ] ;
33904: LD_ADDR_VAR 0 9
33908: PUSH
33909: LD_INT 100
33911: PUSH
33912: LD_INT 50
33914: PUSH
33915: LD_INT 75
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: LIST
33922: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33923: LD_VAR 0 6
33927: PPUSH
33928: CALL_OW 257
33932: PUSH
33933: LD_INT 15
33935: EQUAL
33936: IFFALSE 33957
// points := [ 10 , 5 , 3 ] ;
33938: LD_ADDR_VAR 0 9
33942: PUSH
33943: LD_INT 10
33945: PUSH
33946: LD_INT 5
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33957: LD_VAR 0 6
33961: PPUSH
33962: CALL_OW 257
33966: PUSH
33967: LD_INT 14
33969: EQUAL
33970: IFFALSE 33991
// points := [ 10 , 0 , 0 ] ;
33972: LD_ADDR_VAR 0 9
33976: PUSH
33977: LD_INT 10
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33991: LD_VAR 0 6
33995: PPUSH
33996: CALL_OW 257
34000: PUSH
34001: LD_INT 11
34003: EQUAL
34004: IFFALSE 34025
// points := [ 30 , 10 , 5 ] ;
34006: LD_ADDR_VAR 0 9
34010: PUSH
34011: LD_INT 30
34013: PUSH
34014: LD_INT 10
34016: PUSH
34017: LD_INT 5
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34025: LD_VAR 0 1
34029: PPUSH
34030: LD_INT 5
34032: PPUSH
34033: CALL_OW 321
34037: PUSH
34038: LD_INT 2
34040: EQUAL
34041: IFFALSE 34058
// bpoints := bpoints * 1.8 ;
34043: LD_ADDR_VAR 0 10
34047: PUSH
34048: LD_VAR 0 10
34052: PUSH
34053: LD_REAL  1.80000000000000E+0000
34056: MUL
34057: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34058: LD_VAR 0 6
34062: PPUSH
34063: CALL_OW 257
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 3
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: IN
34086: PUSH
34087: LD_VAR 0 1
34091: PPUSH
34092: LD_INT 51
34094: PPUSH
34095: CALL_OW 321
34099: PUSH
34100: LD_INT 2
34102: EQUAL
34103: AND
34104: IFFALSE 34121
// bpoints := bpoints * 1.2 ;
34106: LD_ADDR_VAR 0 10
34110: PUSH
34111: LD_VAR 0 10
34115: PUSH
34116: LD_REAL  1.20000000000000E+0000
34119: MUL
34120: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34121: LD_VAR 0 6
34125: PPUSH
34126: CALL_OW 257
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: LD_INT 7
34136: PUSH
34137: LD_INT 9
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: IN
34145: PUSH
34146: LD_VAR 0 1
34150: PPUSH
34151: LD_INT 52
34153: PPUSH
34154: CALL_OW 321
34158: PUSH
34159: LD_INT 2
34161: EQUAL
34162: AND
34163: IFFALSE 34180
// bpoints := bpoints * 1.5 ;
34165: LD_ADDR_VAR 0 10
34169: PUSH
34170: LD_VAR 0 10
34174: PUSH
34175: LD_REAL  1.50000000000000E+0000
34178: MUL
34179: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34180: LD_VAR 0 1
34184: PPUSH
34185: LD_INT 66
34187: PPUSH
34188: CALL_OW 321
34192: PUSH
34193: LD_INT 2
34195: EQUAL
34196: IFFALSE 34213
// bpoints := bpoints * 1.1 ;
34198: LD_ADDR_VAR 0 10
34202: PUSH
34203: LD_VAR 0 10
34207: PUSH
34208: LD_REAL  1.10000000000000E+0000
34211: MUL
34212: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34213: LD_ADDR_VAR 0 10
34217: PUSH
34218: LD_VAR 0 10
34222: PUSH
34223: LD_VAR 0 6
34227: PPUSH
34228: LD_INT 1
34230: PPUSH
34231: CALL_OW 259
34235: PUSH
34236: LD_REAL  1.15000000000000E+0000
34239: MUL
34240: MUL
34241: ST_TO_ADDR
// end ; unit_vehicle :
34242: GO 35070
34244: LD_INT 2
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 35058
34252: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34253: LD_VAR 0 6
34257: PPUSH
34258: CALL_OW 264
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 42
34268: PUSH
34269: LD_INT 24
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: IN
34277: IFFALSE 34298
// points := [ 25 , 5 , 3 ] ;
34279: LD_ADDR_VAR 0 9
34283: PUSH
34284: LD_INT 25
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34298: LD_VAR 0 6
34302: PPUSH
34303: CALL_OW 264
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: LD_INT 43
34313: PUSH
34314: LD_INT 25
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: LIST
34321: IN
34322: IFFALSE 34343
// points := [ 40 , 15 , 5 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 40
34331: PUSH
34332: LD_INT 15
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 264
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: LD_INT 23
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: IN
34363: IFFALSE 34384
// points := [ 7 , 25 , 8 ] ;
34365: LD_ADDR_VAR 0 9
34369: PUSH
34370: LD_INT 7
34372: PUSH
34373: LD_INT 25
34375: PUSH
34376: LD_INT 8
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34384: LD_VAR 0 6
34388: PPUSH
34389: CALL_OW 264
34393: PUSH
34394: LD_INT 5
34396: PUSH
34397: LD_INT 27
34399: PUSH
34400: LD_INT 44
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: IN
34408: IFFALSE 34429
// points := [ 14 , 50 , 16 ] ;
34410: LD_ADDR_VAR 0 9
34414: PUSH
34415: LD_INT 14
34417: PUSH
34418: LD_INT 50
34420: PUSH
34421: LD_INT 16
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34429: LD_VAR 0 6
34433: PPUSH
34434: CALL_OW 264
34438: PUSH
34439: LD_INT 6
34441: PUSH
34442: LD_INT 46
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: IN
34449: IFFALSE 34470
// points := [ 32 , 120 , 70 ] ;
34451: LD_ADDR_VAR 0 9
34455: PUSH
34456: LD_INT 32
34458: PUSH
34459: LD_INT 120
34461: PUSH
34462: LD_INT 70
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34470: LD_VAR 0 6
34474: PPUSH
34475: CALL_OW 264
34479: PUSH
34480: LD_INT 7
34482: PUSH
34483: LD_INT 28
34485: PUSH
34486: LD_INT 45
34488: PUSH
34489: LD_INT 92
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: IN
34498: IFFALSE 34519
// points := [ 35 , 20 , 45 ] ;
34500: LD_ADDR_VAR 0 9
34504: PUSH
34505: LD_INT 35
34507: PUSH
34508: LD_INT 20
34510: PUSH
34511: LD_INT 45
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34519: LD_VAR 0 6
34523: PPUSH
34524: CALL_OW 264
34528: PUSH
34529: LD_INT 47
34531: PUSH
34532: EMPTY
34533: LIST
34534: IN
34535: IFFALSE 34556
// points := [ 67 , 45 , 75 ] ;
34537: LD_ADDR_VAR 0 9
34541: PUSH
34542: LD_INT 67
34544: PUSH
34545: LD_INT 45
34547: PUSH
34548: LD_INT 75
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 264
34565: PUSH
34566: LD_INT 26
34568: PUSH
34569: EMPTY
34570: LIST
34571: IN
34572: IFFALSE 34593
// points := [ 120 , 30 , 80 ] ;
34574: LD_ADDR_VAR 0 9
34578: PUSH
34579: LD_INT 120
34581: PUSH
34582: LD_INT 30
34584: PUSH
34585: LD_INT 80
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34593: LD_VAR 0 6
34597: PPUSH
34598: CALL_OW 264
34602: PUSH
34603: LD_INT 22
34605: PUSH
34606: EMPTY
34607: LIST
34608: IN
34609: IFFALSE 34630
// points := [ 40 , 1 , 1 ] ;
34611: LD_ADDR_VAR 0 9
34615: PUSH
34616: LD_INT 40
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34630: LD_VAR 0 6
34634: PPUSH
34635: CALL_OW 264
34639: PUSH
34640: LD_INT 29
34642: PUSH
34643: EMPTY
34644: LIST
34645: IN
34646: IFFALSE 34667
// points := [ 70 , 200 , 400 ] ;
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: LD_INT 70
34655: PUSH
34656: LD_INT 200
34658: PUSH
34659: LD_INT 400
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34667: LD_VAR 0 6
34671: PPUSH
34672: CALL_OW 264
34676: PUSH
34677: LD_INT 14
34679: PUSH
34680: LD_INT 53
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: IN
34687: IFFALSE 34708
// points := [ 40 , 10 , 20 ] ;
34689: LD_ADDR_VAR 0 9
34693: PUSH
34694: LD_INT 40
34696: PUSH
34697: LD_INT 10
34699: PUSH
34700: LD_INT 20
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34708: LD_VAR 0 6
34712: PPUSH
34713: CALL_OW 264
34717: PUSH
34718: LD_INT 9
34720: PUSH
34721: EMPTY
34722: LIST
34723: IN
34724: IFFALSE 34745
// points := [ 5 , 70 , 20 ] ;
34726: LD_ADDR_VAR 0 9
34730: PUSH
34731: LD_INT 5
34733: PUSH
34734: LD_INT 70
34736: PUSH
34737: LD_INT 20
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34745: LD_VAR 0 6
34749: PPUSH
34750: CALL_OW 264
34754: PUSH
34755: LD_INT 10
34757: PUSH
34758: EMPTY
34759: LIST
34760: IN
34761: IFFALSE 34782
// points := [ 35 , 110 , 70 ] ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: LD_INT 35
34770: PUSH
34771: LD_INT 110
34773: PUSH
34774: LD_INT 70
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34782: LD_VAR 0 6
34786: PPUSH
34787: CALL_OW 265
34791: PUSH
34792: LD_INT 25
34794: EQUAL
34795: IFFALSE 34816
// points := [ 80 , 65 , 100 ] ;
34797: LD_ADDR_VAR 0 9
34801: PUSH
34802: LD_INT 80
34804: PUSH
34805: LD_INT 65
34807: PUSH
34808: LD_INT 100
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34816: LD_VAR 0 6
34820: PPUSH
34821: CALL_OW 263
34825: PUSH
34826: LD_INT 1
34828: EQUAL
34829: IFFALSE 34864
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34831: LD_ADDR_VAR 0 10
34835: PUSH
34836: LD_VAR 0 10
34840: PUSH
34841: LD_VAR 0 6
34845: PPUSH
34846: CALL_OW 311
34850: PPUSH
34851: LD_INT 3
34853: PPUSH
34854: CALL_OW 259
34858: PUSH
34859: LD_INT 4
34861: MUL
34862: MUL
34863: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34864: LD_VAR 0 6
34868: PPUSH
34869: CALL_OW 263
34873: PUSH
34874: LD_INT 2
34876: EQUAL
34877: IFFALSE 34928
// begin j := IsControledBy ( i ) ;
34879: LD_ADDR_VAR 0 7
34883: PUSH
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 312
34893: ST_TO_ADDR
// if j then
34894: LD_VAR 0 7
34898: IFFALSE 34928
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34900: LD_ADDR_VAR 0 10
34904: PUSH
34905: LD_VAR 0 10
34909: PUSH
34910: LD_VAR 0 7
34914: PPUSH
34915: LD_INT 3
34917: PPUSH
34918: CALL_OW 259
34922: PUSH
34923: LD_INT 3
34925: MUL
34926: MUL
34927: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34928: LD_VAR 0 6
34932: PPUSH
34933: CALL_OW 264
34937: PUSH
34938: LD_INT 5
34940: PUSH
34941: LD_INT 6
34943: PUSH
34944: LD_INT 46
34946: PUSH
34947: LD_INT 44
34949: PUSH
34950: LD_INT 47
34952: PUSH
34953: LD_INT 45
34955: PUSH
34956: LD_INT 28
34958: PUSH
34959: LD_INT 7
34961: PUSH
34962: LD_INT 27
34964: PUSH
34965: LD_INT 29
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: IN
34980: PUSH
34981: LD_VAR 0 1
34985: PPUSH
34986: LD_INT 52
34988: PPUSH
34989: CALL_OW 321
34993: PUSH
34994: LD_INT 2
34996: EQUAL
34997: AND
34998: IFFALSE 35015
// bpoints := bpoints * 1.2 ;
35000: LD_ADDR_VAR 0 10
35004: PUSH
35005: LD_VAR 0 10
35009: PUSH
35010: LD_REAL  1.20000000000000E+0000
35013: MUL
35014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35015: LD_VAR 0 6
35019: PPUSH
35020: CALL_OW 264
35024: PUSH
35025: LD_INT 6
35027: PUSH
35028: LD_INT 46
35030: PUSH
35031: LD_INT 47
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: IN
35039: IFFALSE 35056
// bpoints := bpoints * 1.2 ;
35041: LD_ADDR_VAR 0 10
35045: PUSH
35046: LD_VAR 0 10
35050: PUSH
35051: LD_REAL  1.20000000000000E+0000
35054: MUL
35055: ST_TO_ADDR
// end ; unit_building :
35056: GO 35070
35058: LD_INT 3
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35069
35066: POP
// ; end ;
35067: GO 35070
35069: POP
// for j = 1 to 3 do
35070: LD_ADDR_VAR 0 7
35074: PUSH
35075: DOUBLE
35076: LD_INT 1
35078: DEC
35079: ST_TO_ADDR
35080: LD_INT 3
35082: PUSH
35083: FOR_TO
35084: IFFALSE 35137
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35086: LD_ADDR_VAR 0 5
35090: PUSH
35091: LD_VAR 0 5
35095: PPUSH
35096: LD_VAR 0 7
35100: PPUSH
35101: LD_VAR 0 5
35105: PUSH
35106: LD_VAR 0 7
35110: ARRAY
35111: PUSH
35112: LD_VAR 0 9
35116: PUSH
35117: LD_VAR 0 7
35121: ARRAY
35122: PUSH
35123: LD_VAR 0 10
35127: MUL
35128: PLUS
35129: PPUSH
35130: CALL_OW 1
35134: ST_TO_ADDR
35135: GO 35083
35137: POP
35138: POP
// end ;
35139: GO 33618
35141: POP
35142: POP
// result := Replace ( result , 4 , tmp ) ;
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_VAR 0 5
35152: PPUSH
35153: LD_INT 4
35155: PPUSH
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 1
35165: ST_TO_ADDR
// end ;
35166: LD_VAR 0 5
35170: RET
// export function DangerAtRange ( unit , range ) ; begin
35171: LD_INT 0
35173: PPUSH
// if not unit then
35174: LD_VAR 0 1
35178: NOT
35179: IFFALSE 35183
// exit ;
35181: GO 35228
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 255
35197: PPUSH
35198: LD_VAR 0 1
35202: PPUSH
35203: CALL_OW 250
35207: PPUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: CALL_OW 251
35217: PPUSH
35218: LD_VAR 0 2
35222: PPUSH
35223: CALL 33470 0 4
35227: ST_TO_ADDR
// end ;
35228: LD_VAR 0 3
35232: RET
// export function DangerInArea ( side , area ) ; begin
35233: LD_INT 0
35235: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_VAR 0 2
35245: PPUSH
35246: LD_INT 81
35248: PUSH
35249: LD_VAR 0 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PPUSH
35258: CALL_OW 70
35262: ST_TO_ADDR
// end ;
35263: LD_VAR 0 3
35267: RET
// export function IsExtension ( b ) ; begin
35268: LD_INT 0
35270: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35271: LD_ADDR_VAR 0 2
35275: PUSH
35276: LD_VAR 0 1
35280: PUSH
35281: LD_INT 23
35283: PUSH
35284: LD_INT 20
35286: PUSH
35287: LD_INT 22
35289: PUSH
35290: LD_INT 17
35292: PUSH
35293: LD_INT 24
35295: PUSH
35296: LD_INT 21
35298: PUSH
35299: LD_INT 19
35301: PUSH
35302: LD_INT 16
35304: PUSH
35305: LD_INT 25
35307: PUSH
35308: LD_INT 18
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: IN
35323: ST_TO_ADDR
// end ;
35324: LD_VAR 0 2
35328: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35329: LD_INT 0
35331: PPUSH
35332: PPUSH
35333: PPUSH
// result := [ ] ;
35334: LD_ADDR_VAR 0 4
35338: PUSH
35339: EMPTY
35340: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35341: LD_ADDR_VAR 0 5
35345: PUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: LD_INT 21
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PPUSH
35361: CALL_OW 70
35365: ST_TO_ADDR
// if not tmp then
35366: LD_VAR 0 5
35370: NOT
35371: IFFALSE 35375
// exit ;
35373: GO 35439
// if checkLink then
35375: LD_VAR 0 3
35379: IFFALSE 35429
// begin for i in tmp do
35381: LD_ADDR_VAR 0 6
35385: PUSH
35386: LD_VAR 0 5
35390: PUSH
35391: FOR_IN
35392: IFFALSE 35427
// if GetBase ( i ) <> base then
35394: LD_VAR 0 6
35398: PPUSH
35399: CALL_OW 274
35403: PUSH
35404: LD_VAR 0 1
35408: NONEQUAL
35409: IFFALSE 35425
// ComLinkToBase ( base , i ) ;
35411: LD_VAR 0 1
35415: PPUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: CALL_OW 169
35425: GO 35391
35427: POP
35428: POP
// end ; result := tmp ;
35429: LD_ADDR_VAR 0 4
35433: PUSH
35434: LD_VAR 0 5
35438: ST_TO_ADDR
// end ;
35439: LD_VAR 0 4
35443: RET
// export function ComComplete ( units , b ) ; var i ; begin
35444: LD_INT 0
35446: PPUSH
35447: PPUSH
// if not units then
35448: LD_VAR 0 1
35452: NOT
35453: IFFALSE 35457
// exit ;
35455: GO 35547
// for i in units do
35457: LD_ADDR_VAR 0 4
35461: PUSH
35462: LD_VAR 0 1
35466: PUSH
35467: FOR_IN
35468: IFFALSE 35545
// if BuildingStatus ( b ) = bs_build then
35470: LD_VAR 0 2
35474: PPUSH
35475: CALL_OW 461
35479: PUSH
35480: LD_INT 1
35482: EQUAL
35483: IFFALSE 35543
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35485: LD_VAR 0 4
35489: PPUSH
35490: LD_STRING h
35492: PUSH
35493: LD_VAR 0 2
35497: PPUSH
35498: CALL_OW 250
35502: PUSH
35503: LD_VAR 0 2
35507: PPUSH
35508: CALL_OW 251
35512: PUSH
35513: LD_VAR 0 2
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: PPUSH
35539: CALL_OW 446
35543: GO 35467
35545: POP
35546: POP
// end ;
35547: LD_VAR 0 3
35551: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35552: LD_INT 0
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35560: LD_VAR 0 1
35564: NOT
35565: PUSH
35566: LD_VAR 0 1
35570: PPUSH
35571: CALL_OW 263
35575: PUSH
35576: LD_INT 2
35578: NONEQUAL
35579: OR
35580: IFFALSE 35584
// exit ;
35582: GO 35900
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35584: LD_ADDR_VAR 0 6
35588: PUSH
35589: LD_INT 22
35591: PUSH
35592: LD_VAR 0 1
35596: PPUSH
35597: CALL_OW 255
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 30
35611: PUSH
35612: LD_INT 36
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 34
35621: PUSH
35622: LD_INT 31
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PPUSH
35638: CALL_OW 69
35642: ST_TO_ADDR
// if not tmp then
35643: LD_VAR 0 6
35647: NOT
35648: IFFALSE 35652
// exit ;
35650: GO 35900
// result := [ ] ;
35652: LD_ADDR_VAR 0 2
35656: PUSH
35657: EMPTY
35658: ST_TO_ADDR
// for i in tmp do
35659: LD_ADDR_VAR 0 3
35663: PUSH
35664: LD_VAR 0 6
35668: PUSH
35669: FOR_IN
35670: IFFALSE 35741
// begin t := UnitsInside ( i ) ;
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_VAR 0 3
35681: PPUSH
35682: CALL_OW 313
35686: ST_TO_ADDR
// if t then
35687: LD_VAR 0 4
35691: IFFALSE 35739
// for j in t do
35693: LD_ADDR_VAR 0 7
35697: PUSH
35698: LD_VAR 0 4
35702: PUSH
35703: FOR_IN
35704: IFFALSE 35737
// result := Replace ( result , result + 1 , j ) ;
35706: LD_ADDR_VAR 0 2
35710: PUSH
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_VAR 0 2
35720: PUSH
35721: LD_INT 1
35723: PLUS
35724: PPUSH
35725: LD_VAR 0 7
35729: PPUSH
35730: CALL_OW 1
35734: ST_TO_ADDR
35735: GO 35703
35737: POP
35738: POP
// end ;
35739: GO 35669
35741: POP
35742: POP
// if not result then
35743: LD_VAR 0 2
35747: NOT
35748: IFFALSE 35752
// exit ;
35750: GO 35900
// mech := result [ 1 ] ;
35752: LD_ADDR_VAR 0 5
35756: PUSH
35757: LD_VAR 0 2
35761: PUSH
35762: LD_INT 1
35764: ARRAY
35765: ST_TO_ADDR
// if result > 1 then
35766: LD_VAR 0 2
35770: PUSH
35771: LD_INT 1
35773: GREATER
35774: IFFALSE 35886
// begin for i = 2 to result do
35776: LD_ADDR_VAR 0 3
35780: PUSH
35781: DOUBLE
35782: LD_INT 2
35784: DEC
35785: ST_TO_ADDR
35786: LD_VAR 0 2
35790: PUSH
35791: FOR_TO
35792: IFFALSE 35884
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35794: LD_ADDR_VAR 0 4
35798: PUSH
35799: LD_VAR 0 2
35803: PUSH
35804: LD_VAR 0 3
35808: ARRAY
35809: PPUSH
35810: LD_INT 3
35812: PPUSH
35813: CALL_OW 259
35817: PUSH
35818: LD_VAR 0 2
35822: PUSH
35823: LD_VAR 0 3
35827: ARRAY
35828: PPUSH
35829: CALL_OW 432
35833: MINUS
35834: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35835: LD_VAR 0 4
35839: PUSH
35840: LD_VAR 0 5
35844: PPUSH
35845: LD_INT 3
35847: PPUSH
35848: CALL_OW 259
35852: PUSH
35853: LD_VAR 0 5
35857: PPUSH
35858: CALL_OW 432
35862: MINUS
35863: GREATEREQUAL
35864: IFFALSE 35882
// mech := result [ i ] ;
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: LD_VAR 0 2
35875: PUSH
35876: LD_VAR 0 3
35880: ARRAY
35881: ST_TO_ADDR
// end ;
35882: GO 35791
35884: POP
35885: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35886: LD_VAR 0 1
35890: PPUSH
35891: LD_VAR 0 5
35895: PPUSH
35896: CALL_OW 135
// end ;
35900: LD_VAR 0 2
35904: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
// result := [ ] ;
35920: LD_ADDR_VAR 0 7
35924: PUSH
35925: EMPTY
35926: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 266
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: IN
35947: NOT
35948: IFFALSE 35952
// exit ;
35950: GO 37586
// if name then
35952: LD_VAR 0 3
35956: IFFALSE 35972
// SetBName ( base_dep , name ) ;
35958: LD_VAR 0 1
35962: PPUSH
35963: LD_VAR 0 3
35967: PPUSH
35968: CALL_OW 500
// base := GetBase ( base_dep ) ;
35972: LD_ADDR_VAR 0 15
35976: PUSH
35977: LD_VAR 0 1
35981: PPUSH
35982: CALL_OW 274
35986: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35987: LD_ADDR_VAR 0 16
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: CALL_OW 255
36001: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36002: LD_ADDR_VAR 0 17
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 248
36016: ST_TO_ADDR
// if sources then
36017: LD_VAR 0 5
36021: IFFALSE 36068
// for i = 1 to 3 do
36023: LD_ADDR_VAR 0 8
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_INT 3
36035: PUSH
36036: FOR_TO
36037: IFFALSE 36066
// AddResourceType ( base , i , sources [ i ] ) ;
36039: LD_VAR 0 15
36043: PPUSH
36044: LD_VAR 0 8
36048: PPUSH
36049: LD_VAR 0 5
36053: PUSH
36054: LD_VAR 0 8
36058: ARRAY
36059: PPUSH
36060: CALL_OW 276
36064: GO 36036
36066: POP
36067: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36068: LD_ADDR_VAR 0 18
36072: PUSH
36073: LD_VAR 0 15
36077: PPUSH
36078: LD_VAR 0 2
36082: PPUSH
36083: LD_INT 1
36085: PPUSH
36086: CALL 35329 0 3
36090: ST_TO_ADDR
// InitHc ;
36091: CALL_OW 19
// InitUc ;
36095: CALL_OW 18
// uc_side := side ;
36099: LD_ADDR_OWVAR 20
36103: PUSH
36104: LD_VAR 0 16
36108: ST_TO_ADDR
// uc_nation := nation ;
36109: LD_ADDR_OWVAR 21
36113: PUSH
36114: LD_VAR 0 17
36118: ST_TO_ADDR
// if buildings then
36119: LD_VAR 0 18
36123: IFFALSE 37445
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36125: LD_ADDR_VAR 0 19
36129: PUSH
36130: LD_VAR 0 18
36134: PPUSH
36135: LD_INT 2
36137: PUSH
36138: LD_INT 30
36140: PUSH
36141: LD_INT 29
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 30
36150: PUSH
36151: LD_INT 30
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: PPUSH
36163: CALL_OW 72
36167: ST_TO_ADDR
// if tmp then
36168: LD_VAR 0 19
36172: IFFALSE 36220
// for i in tmp do
36174: LD_ADDR_VAR 0 8
36178: PUSH
36179: LD_VAR 0 19
36183: PUSH
36184: FOR_IN
36185: IFFALSE 36218
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36187: LD_VAR 0 8
36191: PPUSH
36192: CALL_OW 250
36196: PPUSH
36197: LD_VAR 0 8
36201: PPUSH
36202: CALL_OW 251
36206: PPUSH
36207: LD_VAR 0 16
36211: PPUSH
36212: CALL_OW 441
36216: GO 36184
36218: POP
36219: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36220: LD_VAR 0 18
36224: PPUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 30
36230: PUSH
36231: LD_INT 32
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 30
36240: PUSH
36241: LD_INT 33
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: PPUSH
36253: CALL_OW 72
36257: IFFALSE 36345
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36259: LD_ADDR_VAR 0 8
36263: PUSH
36264: LD_VAR 0 18
36268: PPUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 30
36274: PUSH
36275: LD_INT 32
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 30
36284: PUSH
36285: LD_INT 33
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: PPUSH
36297: CALL_OW 72
36301: PUSH
36302: FOR_IN
36303: IFFALSE 36343
// begin if not GetBWeapon ( i ) then
36305: LD_VAR 0 8
36309: PPUSH
36310: CALL_OW 269
36314: NOT
36315: IFFALSE 36341
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36317: LD_VAR 0 8
36321: PPUSH
36322: LD_VAR 0 8
36326: PPUSH
36327: LD_VAR 0 2
36331: PPUSH
36332: CALL 37591 0 2
36336: PPUSH
36337: CALL_OW 431
// end ;
36341: GO 36302
36343: POP
36344: POP
// end ; for i = 1 to personel do
36345: LD_ADDR_VAR 0 8
36349: PUSH
36350: DOUBLE
36351: LD_INT 1
36353: DEC
36354: ST_TO_ADDR
36355: LD_VAR 0 6
36359: PUSH
36360: FOR_TO
36361: IFFALSE 37425
// begin if i > 4 then
36363: LD_VAR 0 8
36367: PUSH
36368: LD_INT 4
36370: GREATER
36371: IFFALSE 36375
// break ;
36373: GO 37425
// case i of 1 :
36375: LD_VAR 0 8
36379: PUSH
36380: LD_INT 1
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36468
36388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36389: LD_ADDR_VAR 0 12
36393: PUSH
36394: LD_VAR 0 18
36398: PPUSH
36399: LD_INT 22
36401: PUSH
36402: LD_VAR 0 16
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 58
36413: PUSH
36414: EMPTY
36415: LIST
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 30
36422: PUSH
36423: LD_INT 32
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: LD_INT 4
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 30
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: PPUSH
36461: CALL_OW 72
36465: ST_TO_ADDR
36466: GO 36690
36468: LD_INT 2
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36538
36476: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36477: LD_ADDR_VAR 0 12
36481: PUSH
36482: LD_VAR 0 18
36486: PPUSH
36487: LD_INT 22
36489: PUSH
36490: LD_VAR 0 16
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 30
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 30
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PPUSH
36531: CALL_OW 72
36535: ST_TO_ADDR
36536: GO 36690
36538: LD_INT 3
36540: DOUBLE
36541: EQUAL
36542: IFTRUE 36546
36544: GO 36608
36546: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36547: LD_ADDR_VAR 0 12
36551: PUSH
36552: LD_VAR 0 18
36556: PPUSH
36557: LD_INT 22
36559: PUSH
36560: LD_VAR 0 16
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 30
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 30
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PPUSH
36601: CALL_OW 72
36605: ST_TO_ADDR
36606: GO 36690
36608: LD_INT 4
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36616
36614: GO 36689
36616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36617: LD_ADDR_VAR 0 12
36621: PUSH
36622: LD_VAR 0 18
36626: PPUSH
36627: LD_INT 22
36629: PUSH
36630: LD_VAR 0 16
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 30
36644: PUSH
36645: LD_INT 6
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 30
36654: PUSH
36655: LD_INT 7
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 30
36664: PUSH
36665: LD_INT 8
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 72
36686: ST_TO_ADDR
36687: GO 36690
36689: POP
// if i = 1 then
36690: LD_VAR 0 8
36694: PUSH
36695: LD_INT 1
36697: EQUAL
36698: IFFALSE 36809
// begin tmp := [ ] ;
36700: LD_ADDR_VAR 0 19
36704: PUSH
36705: EMPTY
36706: ST_TO_ADDR
// for j in f do
36707: LD_ADDR_VAR 0 9
36711: PUSH
36712: LD_VAR 0 12
36716: PUSH
36717: FOR_IN
36718: IFFALSE 36791
// if GetBType ( j ) = b_bunker then
36720: LD_VAR 0 9
36724: PPUSH
36725: CALL_OW 266
36729: PUSH
36730: LD_INT 32
36732: EQUAL
36733: IFFALSE 36760
// tmp := Insert ( tmp , 1 , j ) else
36735: LD_ADDR_VAR 0 19
36739: PUSH
36740: LD_VAR 0 19
36744: PPUSH
36745: LD_INT 1
36747: PPUSH
36748: LD_VAR 0 9
36752: PPUSH
36753: CALL_OW 2
36757: ST_TO_ADDR
36758: GO 36789
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36760: LD_ADDR_VAR 0 19
36764: PUSH
36765: LD_VAR 0 19
36769: PPUSH
36770: LD_VAR 0 19
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PPUSH
36779: LD_VAR 0 9
36783: PPUSH
36784: CALL_OW 2
36788: ST_TO_ADDR
36789: GO 36717
36791: POP
36792: POP
// if tmp then
36793: LD_VAR 0 19
36797: IFFALSE 36809
// f := tmp ;
36799: LD_ADDR_VAR 0 12
36803: PUSH
36804: LD_VAR 0 19
36808: ST_TO_ADDR
// end ; x := personel [ i ] ;
36809: LD_ADDR_VAR 0 13
36813: PUSH
36814: LD_VAR 0 6
36818: PUSH
36819: LD_VAR 0 8
36823: ARRAY
36824: ST_TO_ADDR
// if x = - 1 then
36825: LD_VAR 0 13
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: EQUAL
36834: IFFALSE 37043
// begin for j in f do
36836: LD_ADDR_VAR 0 9
36840: PUSH
36841: LD_VAR 0 12
36845: PUSH
36846: FOR_IN
36847: IFFALSE 37039
// repeat InitHc ;
36849: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36853: LD_VAR 0 9
36857: PPUSH
36858: CALL_OW 266
36862: PUSH
36863: LD_INT 5
36865: EQUAL
36866: IFFALSE 36936
// begin if UnitsInside ( j ) < 3 then
36868: LD_VAR 0 9
36872: PPUSH
36873: CALL_OW 313
36877: PUSH
36878: LD_INT 3
36880: LESS
36881: IFFALSE 36917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36883: LD_INT 0
36885: PPUSH
36886: LD_INT 5
36888: PUSH
36889: LD_INT 8
36891: PUSH
36892: LD_INT 9
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: PUSH
36900: LD_VAR 0 17
36904: ARRAY
36905: PPUSH
36906: LD_VAR 0 4
36910: PPUSH
36911: CALL_OW 380
36915: GO 36934
// PrepareHuman ( false , i , skill ) ;
36917: LD_INT 0
36919: PPUSH
36920: LD_VAR 0 8
36924: PPUSH
36925: LD_VAR 0 4
36929: PPUSH
36930: CALL_OW 380
// end else
36934: GO 36953
// PrepareHuman ( false , i , skill ) ;
36936: LD_INT 0
36938: PPUSH
36939: LD_VAR 0 8
36943: PPUSH
36944: LD_VAR 0 4
36948: PPUSH
36949: CALL_OW 380
// un := CreateHuman ;
36953: LD_ADDR_VAR 0 14
36957: PUSH
36958: CALL_OW 44
36962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36963: LD_ADDR_VAR 0 7
36967: PUSH
36968: LD_VAR 0 7
36972: PPUSH
36973: LD_INT 1
36975: PPUSH
36976: LD_VAR 0 14
36980: PPUSH
36981: CALL_OW 2
36985: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36986: LD_VAR 0 14
36990: PPUSH
36991: LD_VAR 0 9
36995: PPUSH
36996: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37000: LD_VAR 0 9
37004: PPUSH
37005: CALL_OW 313
37009: PUSH
37010: LD_INT 6
37012: EQUAL
37013: PUSH
37014: LD_VAR 0 9
37018: PPUSH
37019: CALL_OW 266
37023: PUSH
37024: LD_INT 32
37026: PUSH
37027: LD_INT 31
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: IN
37034: OR
37035: IFFALSE 36849
37037: GO 36846
37039: POP
37040: POP
// end else
37041: GO 37423
// for j = 1 to x do
37043: LD_ADDR_VAR 0 9
37047: PUSH
37048: DOUBLE
37049: LD_INT 1
37051: DEC
37052: ST_TO_ADDR
37053: LD_VAR 0 13
37057: PUSH
37058: FOR_TO
37059: IFFALSE 37421
// begin InitHc ;
37061: CALL_OW 19
// if not f then
37065: LD_VAR 0 12
37069: NOT
37070: IFFALSE 37159
// begin PrepareHuman ( false , i , skill ) ;
37072: LD_INT 0
37074: PPUSH
37075: LD_VAR 0 8
37079: PPUSH
37080: LD_VAR 0 4
37084: PPUSH
37085: CALL_OW 380
// un := CreateHuman ;
37089: LD_ADDR_VAR 0 14
37093: PUSH
37094: CALL_OW 44
37098: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: LD_VAR 0 7
37108: PPUSH
37109: LD_INT 1
37111: PPUSH
37112: LD_VAR 0 14
37116: PPUSH
37117: CALL_OW 2
37121: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37122: LD_VAR 0 14
37126: PPUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: CALL_OW 250
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 251
37146: PPUSH
37147: LD_INT 10
37149: PPUSH
37150: LD_INT 0
37152: PPUSH
37153: CALL_OW 50
// continue ;
37157: GO 37058
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37159: LD_VAR 0 12
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: PPUSH
37168: CALL_OW 313
37172: PUSH
37173: LD_VAR 0 12
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: PPUSH
37182: CALL_OW 266
37186: PUSH
37187: LD_INT 32
37189: PUSH
37190: LD_INT 31
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: IN
37197: AND
37198: PUSH
37199: LD_VAR 0 12
37203: PUSH
37204: LD_INT 1
37206: ARRAY
37207: PPUSH
37208: CALL_OW 313
37212: PUSH
37213: LD_INT 6
37215: EQUAL
37216: OR
37217: IFFALSE 37237
// f := Delete ( f , 1 ) ;
37219: LD_ADDR_VAR 0 12
37223: PUSH
37224: LD_VAR 0 12
37228: PPUSH
37229: LD_INT 1
37231: PPUSH
37232: CALL_OW 3
37236: ST_TO_ADDR
// if not f then
37237: LD_VAR 0 12
37241: NOT
37242: IFFALSE 37260
// begin x := x + 2 ;
37244: LD_ADDR_VAR 0 13
37248: PUSH
37249: LD_VAR 0 13
37253: PUSH
37254: LD_INT 2
37256: PLUS
37257: ST_TO_ADDR
// continue ;
37258: GO 37058
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37260: LD_VAR 0 12
37264: PUSH
37265: LD_INT 1
37267: ARRAY
37268: PPUSH
37269: CALL_OW 266
37273: PUSH
37274: LD_INT 5
37276: EQUAL
37277: IFFALSE 37351
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37279: LD_VAR 0 12
37283: PUSH
37284: LD_INT 1
37286: ARRAY
37287: PPUSH
37288: CALL_OW 313
37292: PUSH
37293: LD_INT 3
37295: LESS
37296: IFFALSE 37332
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37298: LD_INT 0
37300: PPUSH
37301: LD_INT 5
37303: PUSH
37304: LD_INT 8
37306: PUSH
37307: LD_INT 9
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: LD_VAR 0 17
37319: ARRAY
37320: PPUSH
37321: LD_VAR 0 4
37325: PPUSH
37326: CALL_OW 380
37330: GO 37349
// PrepareHuman ( false , i , skill ) ;
37332: LD_INT 0
37334: PPUSH
37335: LD_VAR 0 8
37339: PPUSH
37340: LD_VAR 0 4
37344: PPUSH
37345: CALL_OW 380
// end else
37349: GO 37368
// PrepareHuman ( false , i , skill ) ;
37351: LD_INT 0
37353: PPUSH
37354: LD_VAR 0 8
37358: PPUSH
37359: LD_VAR 0 4
37363: PPUSH
37364: CALL_OW 380
// un := CreateHuman ;
37368: LD_ADDR_VAR 0 14
37372: PUSH
37373: CALL_OW 44
37377: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37378: LD_ADDR_VAR 0 7
37382: PUSH
37383: LD_VAR 0 7
37387: PPUSH
37388: LD_INT 1
37390: PPUSH
37391: LD_VAR 0 14
37395: PPUSH
37396: CALL_OW 2
37400: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37401: LD_VAR 0 14
37405: PPUSH
37406: LD_VAR 0 12
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: CALL_OW 52
// end ;
37419: GO 37058
37421: POP
37422: POP
// end ;
37423: GO 36360
37425: POP
37426: POP
// result := result ^ buildings ;
37427: LD_ADDR_VAR 0 7
37431: PUSH
37432: LD_VAR 0 7
37436: PUSH
37437: LD_VAR 0 18
37441: ADD
37442: ST_TO_ADDR
// end else
37443: GO 37586
// begin for i = 1 to personel do
37445: LD_ADDR_VAR 0 8
37449: PUSH
37450: DOUBLE
37451: LD_INT 1
37453: DEC
37454: ST_TO_ADDR
37455: LD_VAR 0 6
37459: PUSH
37460: FOR_TO
37461: IFFALSE 37584
// begin if i > 4 then
37463: LD_VAR 0 8
37467: PUSH
37468: LD_INT 4
37470: GREATER
37471: IFFALSE 37475
// break ;
37473: GO 37584
// x := personel [ i ] ;
37475: LD_ADDR_VAR 0 13
37479: PUSH
37480: LD_VAR 0 6
37484: PUSH
37485: LD_VAR 0 8
37489: ARRAY
37490: ST_TO_ADDR
// if x = - 1 then
37491: LD_VAR 0 13
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: EQUAL
37500: IFFALSE 37504
// continue ;
37502: GO 37460
// PrepareHuman ( false , i , skill ) ;
37504: LD_INT 0
37506: PPUSH
37507: LD_VAR 0 8
37511: PPUSH
37512: LD_VAR 0 4
37516: PPUSH
37517: CALL_OW 380
// un := CreateHuman ;
37521: LD_ADDR_VAR 0 14
37525: PUSH
37526: CALL_OW 44
37530: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37531: LD_VAR 0 14
37535: PPUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 250
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 251
37555: PPUSH
37556: LD_INT 10
37558: PPUSH
37559: LD_INT 0
37561: PPUSH
37562: CALL_OW 50
// result := result ^ un ;
37566: LD_ADDR_VAR 0 7
37570: PUSH
37571: LD_VAR 0 7
37575: PUSH
37576: LD_VAR 0 14
37580: ADD
37581: ST_TO_ADDR
// end ;
37582: GO 37460
37584: POP
37585: POP
// end ; end ;
37586: LD_VAR 0 7
37590: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37591: LD_INT 0
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
// result := false ;
37609: LD_ADDR_VAR 0 3
37613: PUSH
37614: LD_INT 0
37616: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37617: LD_VAR 0 1
37621: NOT
37622: PUSH
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL_OW 266
37632: PUSH
37633: LD_INT 32
37635: PUSH
37636: LD_INT 33
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: IN
37643: NOT
37644: OR
37645: IFFALSE 37649
// exit ;
37647: GO 38758
// nat := GetNation ( tower ) ;
37649: LD_ADDR_VAR 0 12
37653: PUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 248
37663: ST_TO_ADDR
// side := GetSide ( tower ) ;
37664: LD_ADDR_VAR 0 16
37668: PUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 255
37678: ST_TO_ADDR
// x := GetX ( tower ) ;
37679: LD_ADDR_VAR 0 10
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 250
37693: ST_TO_ADDR
// y := GetY ( tower ) ;
37694: LD_ADDR_VAR 0 11
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 251
37708: ST_TO_ADDR
// if not x or not y then
37709: LD_VAR 0 10
37713: NOT
37714: PUSH
37715: LD_VAR 0 11
37719: NOT
37720: OR
37721: IFFALSE 37725
// exit ;
37723: GO 38758
// weapon := 0 ;
37725: LD_ADDR_VAR 0 18
37729: PUSH
37730: LD_INT 0
37732: ST_TO_ADDR
// fac_list := [ ] ;
37733: LD_ADDR_VAR 0 17
37737: PUSH
37738: EMPTY
37739: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37740: LD_ADDR_VAR 0 6
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 274
37754: PPUSH
37755: LD_VAR 0 2
37759: PPUSH
37760: LD_INT 0
37762: PPUSH
37763: CALL 35329 0 3
37767: PPUSH
37768: LD_INT 30
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PPUSH
37778: CALL_OW 72
37782: ST_TO_ADDR
// if not factories then
37783: LD_VAR 0 6
37787: NOT
37788: IFFALSE 37792
// exit ;
37790: GO 38758
// for i in factories do
37792: LD_ADDR_VAR 0 8
37796: PUSH
37797: LD_VAR 0 6
37801: PUSH
37802: FOR_IN
37803: IFFALSE 37828
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37805: LD_ADDR_VAR 0 17
37809: PUSH
37810: LD_VAR 0 17
37814: PUSH
37815: LD_VAR 0 8
37819: PPUSH
37820: CALL_OW 478
37824: UNION
37825: ST_TO_ADDR
37826: GO 37802
37828: POP
37829: POP
// if not fac_list then
37830: LD_VAR 0 17
37834: NOT
37835: IFFALSE 37839
// exit ;
37837: GO 38758
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37839: LD_ADDR_VAR 0 5
37843: PUSH
37844: LD_INT 4
37846: PUSH
37847: LD_INT 5
37849: PUSH
37850: LD_INT 9
37852: PUSH
37853: LD_INT 10
37855: PUSH
37856: LD_INT 6
37858: PUSH
37859: LD_INT 7
37861: PUSH
37862: LD_INT 11
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 27
37876: PUSH
37877: LD_INT 28
37879: PUSH
37880: LD_INT 26
37882: PUSH
37883: LD_INT 30
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 43
37894: PUSH
37895: LD_INT 44
37897: PUSH
37898: LD_INT 46
37900: PUSH
37901: LD_INT 45
37903: PUSH
37904: LD_INT 47
37906: PUSH
37907: LD_INT 49
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: LD_VAR 0 12
37927: ARRAY
37928: ST_TO_ADDR
// list := list isect fac_list ;
37929: LD_ADDR_VAR 0 5
37933: PUSH
37934: LD_VAR 0 5
37938: PUSH
37939: LD_VAR 0 17
37943: ISECT
37944: ST_TO_ADDR
// if not list then
37945: LD_VAR 0 5
37949: NOT
37950: IFFALSE 37954
// exit ;
37952: GO 38758
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37954: LD_VAR 0 12
37958: PUSH
37959: LD_INT 3
37961: EQUAL
37962: PUSH
37963: LD_INT 49
37965: PUSH
37966: LD_VAR 0 5
37970: IN
37971: AND
37972: PUSH
37973: LD_INT 31
37975: PPUSH
37976: LD_VAR 0 16
37980: PPUSH
37981: CALL_OW 321
37985: PUSH
37986: LD_INT 2
37988: EQUAL
37989: AND
37990: IFFALSE 38050
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37992: LD_INT 22
37994: PUSH
37995: LD_VAR 0 16
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 35
38006: PUSH
38007: LD_INT 49
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 91
38016: PUSH
38017: LD_VAR 0 1
38021: PUSH
38022: LD_INT 10
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: LIST
38034: PPUSH
38035: CALL_OW 69
38039: NOT
38040: IFFALSE 38050
// weapon := ru_time_lapser ;
38042: LD_ADDR_VAR 0 18
38046: PUSH
38047: LD_INT 49
38049: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38050: LD_VAR 0 12
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: IN
38065: PUSH
38066: LD_INT 11
38068: PUSH
38069: LD_VAR 0 5
38073: IN
38074: PUSH
38075: LD_INT 30
38077: PUSH
38078: LD_VAR 0 5
38082: IN
38083: OR
38084: AND
38085: PUSH
38086: LD_INT 6
38088: PPUSH
38089: LD_VAR 0 16
38093: PPUSH
38094: CALL_OW 321
38098: PUSH
38099: LD_INT 2
38101: EQUAL
38102: AND
38103: IFFALSE 38268
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38105: LD_INT 22
38107: PUSH
38108: LD_VAR 0 16
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: LD_INT 35
38122: PUSH
38123: LD_INT 11
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 35
38132: PUSH
38133: LD_INT 30
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 91
38147: PUSH
38148: LD_VAR 0 1
38152: PUSH
38153: LD_INT 18
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: PPUSH
38166: CALL_OW 69
38170: NOT
38171: PUSH
38172: LD_INT 22
38174: PUSH
38175: LD_VAR 0 16
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 30
38189: PUSH
38190: LD_INT 32
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 30
38199: PUSH
38200: LD_INT 33
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 91
38214: PUSH
38215: LD_VAR 0 1
38219: PUSH
38220: LD_INT 12
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: PPUSH
38236: CALL_OW 69
38240: PUSH
38241: LD_INT 2
38243: GREATER
38244: AND
38245: IFFALSE 38268
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38247: LD_ADDR_VAR 0 18
38251: PUSH
38252: LD_INT 11
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_VAR 0 12
38266: ARRAY
38267: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38268: LD_VAR 0 18
38272: NOT
38273: PUSH
38274: LD_INT 40
38276: PPUSH
38277: LD_VAR 0 16
38281: PPUSH
38282: CALL_OW 321
38286: PUSH
38287: LD_INT 2
38289: EQUAL
38290: AND
38291: PUSH
38292: LD_INT 7
38294: PUSH
38295: LD_VAR 0 5
38299: IN
38300: PUSH
38301: LD_INT 28
38303: PUSH
38304: LD_VAR 0 5
38308: IN
38309: OR
38310: PUSH
38311: LD_INT 45
38313: PUSH
38314: LD_VAR 0 5
38318: IN
38319: OR
38320: AND
38321: IFFALSE 38575
// begin hex := GetHexInfo ( x , y ) ;
38323: LD_ADDR_VAR 0 4
38327: PUSH
38328: LD_VAR 0 10
38332: PPUSH
38333: LD_VAR 0 11
38337: PPUSH
38338: CALL_OW 546
38342: ST_TO_ADDR
// if hex [ 1 ] then
38343: LD_VAR 0 4
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: IFFALSE 38355
// exit ;
38353: GO 38758
// height := hex [ 2 ] ;
38355: LD_ADDR_VAR 0 15
38359: PUSH
38360: LD_VAR 0 4
38364: PUSH
38365: LD_INT 2
38367: ARRAY
38368: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38369: LD_ADDR_VAR 0 14
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: LD_INT 5
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// for i in tmp do
38392: LD_ADDR_VAR 0 8
38396: PUSH
38397: LD_VAR 0 14
38401: PUSH
38402: FOR_IN
38403: IFFALSE 38573
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38405: LD_ADDR_VAR 0 9
38409: PUSH
38410: LD_VAR 0 10
38414: PPUSH
38415: LD_VAR 0 8
38419: PPUSH
38420: LD_INT 5
38422: PPUSH
38423: CALL_OW 272
38427: PUSH
38428: LD_VAR 0 11
38432: PPUSH
38433: LD_VAR 0 8
38437: PPUSH
38438: LD_INT 5
38440: PPUSH
38441: CALL_OW 273
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38450: LD_VAR 0 9
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: PPUSH
38459: LD_VAR 0 9
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: PPUSH
38468: CALL_OW 488
38472: IFFALSE 38571
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38474: LD_ADDR_VAR 0 4
38478: PUSH
38479: LD_VAR 0 9
38483: PUSH
38484: LD_INT 1
38486: ARRAY
38487: PPUSH
38488: LD_VAR 0 9
38492: PUSH
38493: LD_INT 2
38495: ARRAY
38496: PPUSH
38497: CALL_OW 546
38501: ST_TO_ADDR
// if hex [ 1 ] then
38502: LD_VAR 0 4
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: IFFALSE 38514
// continue ;
38512: GO 38402
// h := hex [ 2 ] ;
38514: LD_ADDR_VAR 0 13
38518: PUSH
38519: LD_VAR 0 4
38523: PUSH
38524: LD_INT 2
38526: ARRAY
38527: ST_TO_ADDR
// if h + 7 < height then
38528: LD_VAR 0 13
38532: PUSH
38533: LD_INT 7
38535: PLUS
38536: PUSH
38537: LD_VAR 0 15
38541: LESS
38542: IFFALSE 38571
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38544: LD_ADDR_VAR 0 18
38548: PUSH
38549: LD_INT 7
38551: PUSH
38552: LD_INT 28
38554: PUSH
38555: LD_INT 45
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_VAR 0 12
38567: ARRAY
38568: ST_TO_ADDR
// break ;
38569: GO 38573
// end ; end ; end ;
38571: GO 38402
38573: POP
38574: POP
// end ; if not weapon then
38575: LD_VAR 0 18
38579: NOT
38580: IFFALSE 38640
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38582: LD_ADDR_VAR 0 5
38586: PUSH
38587: LD_VAR 0 5
38591: PUSH
38592: LD_INT 11
38594: PUSH
38595: LD_INT 30
38597: PUSH
38598: LD_INT 49
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: DIFF
38606: ST_TO_ADDR
// if not list then
38607: LD_VAR 0 5
38611: NOT
38612: IFFALSE 38616
// exit ;
38614: GO 38758
// weapon := list [ rand ( 1 , list ) ] ;
38616: LD_ADDR_VAR 0 18
38620: PUSH
38621: LD_VAR 0 5
38625: PUSH
38626: LD_INT 1
38628: PPUSH
38629: LD_VAR 0 5
38633: PPUSH
38634: CALL_OW 12
38638: ARRAY
38639: ST_TO_ADDR
// end ; if weapon then
38640: LD_VAR 0 18
38644: IFFALSE 38758
// begin tmp := CostOfWeapon ( weapon ) ;
38646: LD_ADDR_VAR 0 14
38650: PUSH
38651: LD_VAR 0 18
38655: PPUSH
38656: CALL_OW 451
38660: ST_TO_ADDR
// j := GetBase ( tower ) ;
38661: LD_ADDR_VAR 0 9
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 274
38675: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38676: LD_VAR 0 9
38680: PPUSH
38681: LD_INT 1
38683: PPUSH
38684: CALL_OW 275
38688: PUSH
38689: LD_VAR 0 14
38693: PUSH
38694: LD_INT 1
38696: ARRAY
38697: GREATEREQUAL
38698: PUSH
38699: LD_VAR 0 9
38703: PPUSH
38704: LD_INT 2
38706: PPUSH
38707: CALL_OW 275
38711: PUSH
38712: LD_VAR 0 14
38716: PUSH
38717: LD_INT 2
38719: ARRAY
38720: GREATEREQUAL
38721: AND
38722: PUSH
38723: LD_VAR 0 9
38727: PPUSH
38728: LD_INT 3
38730: PPUSH
38731: CALL_OW 275
38735: PUSH
38736: LD_VAR 0 14
38740: PUSH
38741: LD_INT 3
38743: ARRAY
38744: GREATEREQUAL
38745: AND
38746: IFFALSE 38758
// result := weapon ;
38748: LD_ADDR_VAR 0 3
38752: PUSH
38753: LD_VAR 0 18
38757: ST_TO_ADDR
// end ; end ;
38758: LD_VAR 0 3
38762: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38763: LD_INT 0
38765: PPUSH
38766: PPUSH
// result := true ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_INT 1
38774: ST_TO_ADDR
// if array1 = array2 then
38775: LD_VAR 0 1
38779: PUSH
38780: LD_VAR 0 2
38784: EQUAL
38785: IFFALSE 38845
// begin for i = 1 to array1 do
38787: LD_ADDR_VAR 0 4
38791: PUSH
38792: DOUBLE
38793: LD_INT 1
38795: DEC
38796: ST_TO_ADDR
38797: LD_VAR 0 1
38801: PUSH
38802: FOR_TO
38803: IFFALSE 38841
// if array1 [ i ] <> array2 [ i ] then
38805: LD_VAR 0 1
38809: PUSH
38810: LD_VAR 0 4
38814: ARRAY
38815: PUSH
38816: LD_VAR 0 2
38820: PUSH
38821: LD_VAR 0 4
38825: ARRAY
38826: NONEQUAL
38827: IFFALSE 38839
// begin result := false ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 0
38836: ST_TO_ADDR
// break ;
38837: GO 38841
// end ;
38839: GO 38802
38841: POP
38842: POP
// end else
38843: GO 38853
// result := false ;
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: LD_INT 0
38852: ST_TO_ADDR
// end ;
38853: LD_VAR 0 3
38857: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38858: LD_INT 0
38860: PPUSH
38861: PPUSH
// if not array1 or not array2 then
38862: LD_VAR 0 1
38866: NOT
38867: PUSH
38868: LD_VAR 0 2
38872: NOT
38873: OR
38874: IFFALSE 38878
// exit ;
38876: GO 38942
// result := true ;
38878: LD_ADDR_VAR 0 3
38882: PUSH
38883: LD_INT 1
38885: ST_TO_ADDR
// for i = 1 to array1 do
38886: LD_ADDR_VAR 0 4
38890: PUSH
38891: DOUBLE
38892: LD_INT 1
38894: DEC
38895: ST_TO_ADDR
38896: LD_VAR 0 1
38900: PUSH
38901: FOR_TO
38902: IFFALSE 38940
// if array1 [ i ] <> array2 [ i ] then
38904: LD_VAR 0 1
38908: PUSH
38909: LD_VAR 0 4
38913: ARRAY
38914: PUSH
38915: LD_VAR 0 2
38919: PUSH
38920: LD_VAR 0 4
38924: ARRAY
38925: NONEQUAL
38926: IFFALSE 38938
// begin result := false ;
38928: LD_ADDR_VAR 0 3
38932: PUSH
38933: LD_INT 0
38935: ST_TO_ADDR
// break ;
38936: GO 38940
// end ;
38938: GO 38901
38940: POP
38941: POP
// end ;
38942: LD_VAR 0 3
38946: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
// pom := GetBase ( fac ) ;
38952: LD_ADDR_VAR 0 5
38956: PUSH
38957: LD_VAR 0 1
38961: PPUSH
38962: CALL_OW 274
38966: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38967: LD_ADDR_VAR 0 4
38971: PUSH
38972: LD_VAR 0 2
38976: PUSH
38977: LD_INT 1
38979: ARRAY
38980: PPUSH
38981: LD_VAR 0 2
38985: PUSH
38986: LD_INT 2
38988: ARRAY
38989: PPUSH
38990: LD_VAR 0 2
38994: PUSH
38995: LD_INT 3
38997: ARRAY
38998: PPUSH
38999: LD_VAR 0 2
39003: PUSH
39004: LD_INT 4
39006: ARRAY
39007: PPUSH
39008: CALL_OW 449
39012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_VAR 0 5
39022: PPUSH
39023: LD_INT 1
39025: PPUSH
39026: CALL_OW 275
39030: PUSH
39031: LD_VAR 0 4
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: GREATEREQUAL
39040: PUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: LD_INT 2
39048: PPUSH
39049: CALL_OW 275
39053: PUSH
39054: LD_VAR 0 4
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: GREATEREQUAL
39063: AND
39064: PUSH
39065: LD_VAR 0 5
39069: PPUSH
39070: LD_INT 3
39072: PPUSH
39073: CALL_OW 275
39077: PUSH
39078: LD_VAR 0 4
39082: PUSH
39083: LD_INT 3
39085: ARRAY
39086: GREATEREQUAL
39087: AND
39088: ST_TO_ADDR
// end ;
39089: LD_VAR 0 3
39093: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
39098: PPUSH
39099: PPUSH
// pom := GetBase ( building ) ;
39100: LD_ADDR_VAR 0 3
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 274
39114: ST_TO_ADDR
// if not pom then
39115: LD_VAR 0 3
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 39294
// btype := GetBType ( building ) ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 266
39138: ST_TO_ADDR
// if btype = b_armoury then
39139: LD_VAR 0 5
39143: PUSH
39144: LD_INT 4
39146: EQUAL
39147: IFFALSE 39157
// btype := b_barracks ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_INT 5
39156: ST_TO_ADDR
// if btype = b_depot then
39157: LD_VAR 0 5
39161: PUSH
39162: LD_INT 0
39164: EQUAL
39165: IFFALSE 39175
// btype := b_warehouse ;
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: LD_INT 1
39174: ST_TO_ADDR
// if btype = b_workshop then
39175: LD_VAR 0 5
39179: PUSH
39180: LD_INT 2
39182: EQUAL
39183: IFFALSE 39193
// btype := b_factory ;
39185: LD_ADDR_VAR 0 5
39189: PUSH
39190: LD_INT 3
39192: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39193: LD_ADDR_VAR 0 4
39197: PUSH
39198: LD_VAR 0 5
39202: PPUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 248
39212: PPUSH
39213: CALL_OW 450
39217: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39218: LD_ADDR_VAR 0 2
39222: PUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: LD_INT 1
39230: PPUSH
39231: CALL_OW 275
39235: PUSH
39236: LD_VAR 0 4
39240: PUSH
39241: LD_INT 1
39243: ARRAY
39244: GREATEREQUAL
39245: PUSH
39246: LD_VAR 0 3
39250: PPUSH
39251: LD_INT 2
39253: PPUSH
39254: CALL_OW 275
39258: PUSH
39259: LD_VAR 0 4
39263: PUSH
39264: LD_INT 2
39266: ARRAY
39267: GREATEREQUAL
39268: AND
39269: PUSH
39270: LD_VAR 0 3
39274: PPUSH
39275: LD_INT 3
39277: PPUSH
39278: CALL_OW 275
39282: PUSH
39283: LD_VAR 0 4
39287: PUSH
39288: LD_INT 3
39290: ARRAY
39291: GREATEREQUAL
39292: AND
39293: ST_TO_ADDR
// end ;
39294: LD_VAR 0 2
39298: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39299: LD_INT 0
39301: PPUSH
39302: PPUSH
39303: PPUSH
// pom := GetBase ( building ) ;
39304: LD_ADDR_VAR 0 4
39308: PUSH
39309: LD_VAR 0 1
39313: PPUSH
39314: CALL_OW 274
39318: ST_TO_ADDR
// if not pom then
39319: LD_VAR 0 4
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39429
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 2
39337: PPUSH
39338: LD_VAR 0 1
39342: PPUSH
39343: CALL_OW 248
39347: PPUSH
39348: CALL_OW 450
39352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39353: LD_ADDR_VAR 0 3
39357: PUSH
39358: LD_VAR 0 4
39362: PPUSH
39363: LD_INT 1
39365: PPUSH
39366: CALL_OW 275
39370: PUSH
39371: LD_VAR 0 5
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: GREATEREQUAL
39380: PUSH
39381: LD_VAR 0 4
39385: PPUSH
39386: LD_INT 2
39388: PPUSH
39389: CALL_OW 275
39393: PUSH
39394: LD_VAR 0 5
39398: PUSH
39399: LD_INT 2
39401: ARRAY
39402: GREATEREQUAL
39403: AND
39404: PUSH
39405: LD_VAR 0 4
39409: PPUSH
39410: LD_INT 3
39412: PPUSH
39413: CALL_OW 275
39417: PUSH
39418: LD_VAR 0 5
39422: PUSH
39423: LD_INT 3
39425: ARRAY
39426: GREATEREQUAL
39427: AND
39428: ST_TO_ADDR
// end ;
39429: LD_VAR 0 3
39433: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39434: LD_INT 0
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
// result := false ;
39447: LD_ADDR_VAR 0 8
39451: PUSH
39452: LD_INT 0
39454: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39455: LD_VAR 0 5
39459: NOT
39460: PUSH
39461: LD_VAR 0 1
39465: NOT
39466: OR
39467: PUSH
39468: LD_VAR 0 2
39472: NOT
39473: OR
39474: PUSH
39475: LD_VAR 0 3
39479: NOT
39480: OR
39481: IFFALSE 39485
// exit ;
39483: GO 40299
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39485: LD_ADDR_VAR 0 14
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: LD_VAR 0 3
39504: PPUSH
39505: LD_VAR 0 4
39509: PPUSH
39510: LD_VAR 0 5
39514: PUSH
39515: LD_INT 1
39517: ARRAY
39518: PPUSH
39519: CALL_OW 248
39523: PPUSH
39524: LD_INT 0
39526: PPUSH
39527: CALL 41552 0 6
39531: ST_TO_ADDR
// if not hexes then
39532: LD_VAR 0 14
39536: NOT
39537: IFFALSE 39541
// exit ;
39539: GO 40299
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39541: LD_ADDR_VAR 0 17
39545: PUSH
39546: LD_VAR 0 5
39550: PPUSH
39551: LD_INT 22
39553: PUSH
39554: LD_VAR 0 13
39558: PPUSH
39559: CALL_OW 255
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 30
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 30
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PPUSH
39600: CALL_OW 72
39604: ST_TO_ADDR
// for i = 1 to hexes do
39605: LD_ADDR_VAR 0 9
39609: PUSH
39610: DOUBLE
39611: LD_INT 1
39613: DEC
39614: ST_TO_ADDR
39615: LD_VAR 0 14
39619: PUSH
39620: FOR_TO
39621: IFFALSE 40297
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39623: LD_ADDR_VAR 0 13
39627: PUSH
39628: LD_VAR 0 14
39632: PUSH
39633: LD_VAR 0 9
39637: ARRAY
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PPUSH
39643: LD_VAR 0 14
39647: PUSH
39648: LD_VAR 0 9
39652: ARRAY
39653: PUSH
39654: LD_INT 2
39656: ARRAY
39657: PPUSH
39658: CALL_OW 428
39662: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39663: LD_VAR 0 14
39667: PUSH
39668: LD_VAR 0 9
39672: ARRAY
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: PPUSH
39678: LD_VAR 0 14
39682: PUSH
39683: LD_VAR 0 9
39687: ARRAY
39688: PUSH
39689: LD_INT 2
39691: ARRAY
39692: PPUSH
39693: CALL_OW 351
39697: PUSH
39698: LD_VAR 0 14
39702: PUSH
39703: LD_VAR 0 9
39707: ARRAY
39708: PUSH
39709: LD_INT 1
39711: ARRAY
39712: PPUSH
39713: LD_VAR 0 14
39717: PUSH
39718: LD_VAR 0 9
39722: ARRAY
39723: PUSH
39724: LD_INT 2
39726: ARRAY
39727: PPUSH
39728: CALL_OW 488
39732: NOT
39733: OR
39734: PUSH
39735: LD_VAR 0 13
39739: PPUSH
39740: CALL_OW 247
39744: PUSH
39745: LD_INT 3
39747: EQUAL
39748: OR
39749: IFFALSE 39755
// exit ;
39751: POP
39752: POP
39753: GO 40299
// if not tmp then
39755: LD_VAR 0 13
39759: NOT
39760: IFFALSE 39764
// continue ;
39762: GO 39620
// result := true ;
39764: LD_ADDR_VAR 0 8
39768: PUSH
39769: LD_INT 1
39771: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39772: LD_VAR 0 6
39776: PUSH
39777: LD_VAR 0 13
39781: PPUSH
39782: CALL_OW 247
39786: PUSH
39787: LD_INT 2
39789: EQUAL
39790: AND
39791: PUSH
39792: LD_VAR 0 13
39796: PPUSH
39797: CALL_OW 263
39801: PUSH
39802: LD_INT 1
39804: EQUAL
39805: AND
39806: IFFALSE 39970
// begin if IsDrivenBy ( tmp ) then
39808: LD_VAR 0 13
39812: PPUSH
39813: CALL_OW 311
39817: IFFALSE 39821
// continue ;
39819: GO 39620
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39821: LD_VAR 0 6
39825: PPUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 60
39831: PUSH
39832: EMPTY
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: LD_INT 55
39844: PUSH
39845: EMPTY
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PPUSH
39856: CALL_OW 72
39860: IFFALSE 39968
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39862: LD_ADDR_VAR 0 18
39866: PUSH
39867: LD_VAR 0 6
39871: PPUSH
39872: LD_INT 3
39874: PUSH
39875: LD_INT 60
39877: PUSH
39878: EMPTY
39879: LIST
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 3
39887: PUSH
39888: LD_INT 55
39890: PUSH
39891: EMPTY
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PPUSH
39902: CALL_OW 72
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: ST_TO_ADDR
// if IsInUnit ( driver ) then
39911: LD_VAR 0 18
39915: PPUSH
39916: CALL_OW 310
39920: IFFALSE 39931
// ComExit ( driver ) ;
39922: LD_VAR 0 18
39926: PPUSH
39927: CALL 65353 0 1
// AddComEnterUnit ( driver , tmp ) ;
39931: LD_VAR 0 18
39935: PPUSH
39936: LD_VAR 0 13
39940: PPUSH
39941: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39945: LD_VAR 0 18
39949: PPUSH
39950: LD_VAR 0 7
39954: PPUSH
39955: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39959: LD_VAR 0 18
39963: PPUSH
39964: CALL_OW 181
// end ; continue ;
39968: GO 39620
// end ; if not cleaners or not tmp in cleaners then
39970: LD_VAR 0 6
39974: NOT
39975: PUSH
39976: LD_VAR 0 13
39980: PUSH
39981: LD_VAR 0 6
39985: IN
39986: NOT
39987: OR
39988: IFFALSE 40295
// begin if dep then
39990: LD_VAR 0 17
39994: IFFALSE 40130
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39996: LD_ADDR_VAR 0 16
40000: PUSH
40001: LD_VAR 0 17
40005: PUSH
40006: LD_INT 1
40008: ARRAY
40009: PPUSH
40010: CALL_OW 250
40014: PPUSH
40015: LD_VAR 0 17
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PPUSH
40024: CALL_OW 254
40028: PPUSH
40029: LD_INT 5
40031: PPUSH
40032: CALL_OW 272
40036: PUSH
40037: LD_VAR 0 17
40041: PUSH
40042: LD_INT 1
40044: ARRAY
40045: PPUSH
40046: CALL_OW 251
40050: PPUSH
40051: LD_VAR 0 17
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: CALL_OW 254
40064: PPUSH
40065: LD_INT 5
40067: PPUSH
40068: CALL_OW 273
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40077: LD_VAR 0 16
40081: PUSH
40082: LD_INT 1
40084: ARRAY
40085: PPUSH
40086: LD_VAR 0 16
40090: PUSH
40091: LD_INT 2
40093: ARRAY
40094: PPUSH
40095: CALL_OW 488
40099: IFFALSE 40130
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40101: LD_VAR 0 13
40105: PPUSH
40106: LD_VAR 0 16
40110: PUSH
40111: LD_INT 1
40113: ARRAY
40114: PPUSH
40115: LD_VAR 0 16
40119: PUSH
40120: LD_INT 2
40122: ARRAY
40123: PPUSH
40124: CALL_OW 111
// continue ;
40128: GO 39620
// end ; end ; r := GetDir ( tmp ) ;
40130: LD_ADDR_VAR 0 15
40134: PUSH
40135: LD_VAR 0 13
40139: PPUSH
40140: CALL_OW 254
40144: ST_TO_ADDR
// if r = 5 then
40145: LD_VAR 0 15
40149: PUSH
40150: LD_INT 5
40152: EQUAL
40153: IFFALSE 40163
// r := 0 ;
40155: LD_ADDR_VAR 0 15
40159: PUSH
40160: LD_INT 0
40162: ST_TO_ADDR
// for j = r to 5 do
40163: LD_ADDR_VAR 0 10
40167: PUSH
40168: DOUBLE
40169: LD_VAR 0 15
40173: DEC
40174: ST_TO_ADDR
40175: LD_INT 5
40177: PUSH
40178: FOR_TO
40179: IFFALSE 40293
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40181: LD_ADDR_VAR 0 11
40185: PUSH
40186: LD_VAR 0 13
40190: PPUSH
40191: CALL_OW 250
40195: PPUSH
40196: LD_VAR 0 10
40200: PPUSH
40201: LD_INT 2
40203: PPUSH
40204: CALL_OW 272
40208: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40209: LD_ADDR_VAR 0 12
40213: PUSH
40214: LD_VAR 0 13
40218: PPUSH
40219: CALL_OW 251
40223: PPUSH
40224: LD_VAR 0 10
40228: PPUSH
40229: LD_INT 2
40231: PPUSH
40232: CALL_OW 273
40236: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40237: LD_VAR 0 11
40241: PPUSH
40242: LD_VAR 0 12
40246: PPUSH
40247: CALL_OW 488
40251: PUSH
40252: LD_VAR 0 11
40256: PPUSH
40257: LD_VAR 0 12
40261: PPUSH
40262: CALL_OW 428
40266: NOT
40267: AND
40268: IFFALSE 40291
// begin ComMoveXY ( tmp , _x , _y ) ;
40270: LD_VAR 0 13
40274: PPUSH
40275: LD_VAR 0 11
40279: PPUSH
40280: LD_VAR 0 12
40284: PPUSH
40285: CALL_OW 111
// break ;
40289: GO 40293
// end ; end ;
40291: GO 40178
40293: POP
40294: POP
// end ; end ;
40295: GO 39620
40297: POP
40298: POP
// end ;
40299: LD_VAR 0 8
40303: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40304: LD_INT 0
40306: PPUSH
// result := true ;
40307: LD_ADDR_VAR 0 3
40311: PUSH
40312: LD_INT 1
40314: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40315: LD_VAR 0 2
40319: PUSH
40320: LD_INT 24
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40334
40326: LD_INT 33
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40359
40334: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 32
40342: PPUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 321
40352: PUSH
40353: LD_INT 2
40355: EQUAL
40356: ST_TO_ADDR
40357: GO 40675
40359: LD_INT 20
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40392
40367: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 6
40375: PPUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 321
40385: PUSH
40386: LD_INT 2
40388: EQUAL
40389: ST_TO_ADDR
40390: GO 40675
40392: LD_INT 22
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40406
40398: LD_INT 36
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40431
40406: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40407: LD_ADDR_VAR 0 3
40411: PUSH
40412: LD_INT 15
40414: PPUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 321
40424: PUSH
40425: LD_INT 2
40427: EQUAL
40428: ST_TO_ADDR
40429: GO 40675
40431: LD_INT 30
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40464
40439: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_INT 20
40447: PPUSH
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 321
40457: PUSH
40458: LD_INT 2
40460: EQUAL
40461: ST_TO_ADDR
40462: GO 40675
40464: LD_INT 28
40466: DOUBLE
40467: EQUAL
40468: IFTRUE 40478
40470: LD_INT 21
40472: DOUBLE
40473: EQUAL
40474: IFTRUE 40478
40476: GO 40503
40478: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_INT 21
40486: PPUSH
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 321
40496: PUSH
40497: LD_INT 2
40499: EQUAL
40500: ST_TO_ADDR
40501: GO 40675
40503: LD_INT 16
40505: DOUBLE
40506: EQUAL
40507: IFTRUE 40511
40509: GO 40536
40511: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40512: LD_ADDR_VAR 0 3
40516: PUSH
40517: LD_INT 84
40519: PPUSH
40520: LD_VAR 0 1
40524: PPUSH
40525: CALL_OW 321
40529: PUSH
40530: LD_INT 2
40532: EQUAL
40533: ST_TO_ADDR
40534: GO 40675
40536: LD_INT 19
40538: DOUBLE
40539: EQUAL
40540: IFTRUE 40550
40542: LD_INT 23
40544: DOUBLE
40545: EQUAL
40546: IFTRUE 40550
40548: GO 40575
40550: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40551: LD_ADDR_VAR 0 3
40555: PUSH
40556: LD_INT 83
40558: PPUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 321
40568: PUSH
40569: LD_INT 2
40571: EQUAL
40572: ST_TO_ADDR
40573: GO 40675
40575: LD_INT 17
40577: DOUBLE
40578: EQUAL
40579: IFTRUE 40583
40581: GO 40608
40583: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 39
40591: PPUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 321
40601: PUSH
40602: LD_INT 2
40604: EQUAL
40605: ST_TO_ADDR
40606: GO 40675
40608: LD_INT 18
40610: DOUBLE
40611: EQUAL
40612: IFTRUE 40616
40614: GO 40641
40616: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_INT 40
40624: PPUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: CALL_OW 321
40634: PUSH
40635: LD_INT 2
40637: EQUAL
40638: ST_TO_ADDR
40639: GO 40675
40641: LD_INT 27
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 40674
40649: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40650: LD_ADDR_VAR 0 3
40654: PUSH
40655: LD_INT 35
40657: PPUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 321
40667: PUSH
40668: LD_INT 2
40670: EQUAL
40671: ST_TO_ADDR
40672: GO 40675
40674: POP
// end ;
40675: LD_VAR 0 3
40679: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40680: LD_INT 0
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
// result := false ;
40693: LD_ADDR_VAR 0 6
40697: PUSH
40698: LD_INT 0
40700: ST_TO_ADDR
// if btype = b_depot then
40701: LD_VAR 0 2
40705: PUSH
40706: LD_INT 0
40708: EQUAL
40709: IFFALSE 40721
// begin result := true ;
40711: LD_ADDR_VAR 0 6
40715: PUSH
40716: LD_INT 1
40718: ST_TO_ADDR
// exit ;
40719: GO 41547
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40721: LD_VAR 0 1
40725: NOT
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 266
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: IN
40747: NOT
40748: OR
40749: PUSH
40750: LD_VAR 0 2
40754: NOT
40755: OR
40756: PUSH
40757: LD_VAR 0 5
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 3
40773: PUSH
40774: LD_INT 4
40776: PUSH
40777: LD_INT 5
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: IN
40788: NOT
40789: OR
40790: PUSH
40791: LD_VAR 0 3
40795: PPUSH
40796: LD_VAR 0 4
40800: PPUSH
40801: CALL_OW 488
40805: NOT
40806: OR
40807: IFFALSE 40811
// exit ;
40809: GO 41547
// side := GetSide ( depot ) ;
40811: LD_ADDR_VAR 0 9
40815: PUSH
40816: LD_VAR 0 1
40820: PPUSH
40821: CALL_OW 255
40825: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40826: LD_VAR 0 9
40830: PPUSH
40831: LD_VAR 0 2
40835: PPUSH
40836: CALL 40304 0 2
40840: NOT
40841: IFFALSE 40845
// exit ;
40843: GO 41547
// pom := GetBase ( depot ) ;
40845: LD_ADDR_VAR 0 10
40849: PUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 274
40859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40860: LD_ADDR_VAR 0 11
40864: PUSH
40865: LD_VAR 0 2
40869: PPUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: CALL_OW 248
40879: PPUSH
40880: CALL_OW 450
40884: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40885: LD_VAR 0 10
40889: PPUSH
40890: LD_INT 1
40892: PPUSH
40893: CALL_OW 275
40897: PUSH
40898: LD_VAR 0 11
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: GREATEREQUAL
40907: PUSH
40908: LD_VAR 0 10
40912: PPUSH
40913: LD_INT 2
40915: PPUSH
40916: CALL_OW 275
40920: PUSH
40921: LD_VAR 0 11
40925: PUSH
40926: LD_INT 2
40928: ARRAY
40929: GREATEREQUAL
40930: AND
40931: PUSH
40932: LD_VAR 0 10
40936: PPUSH
40937: LD_INT 3
40939: PPUSH
40940: CALL_OW 275
40944: PUSH
40945: LD_VAR 0 11
40949: PUSH
40950: LD_INT 3
40952: ARRAY
40953: GREATEREQUAL
40954: AND
40955: NOT
40956: IFFALSE 40960
// exit ;
40958: GO 41547
// if GetBType ( depot ) = b_depot then
40960: LD_VAR 0 1
40964: PPUSH
40965: CALL_OW 266
40969: PUSH
40970: LD_INT 0
40972: EQUAL
40973: IFFALSE 40985
// dist := 28 else
40975: LD_ADDR_VAR 0 14
40979: PUSH
40980: LD_INT 28
40982: ST_TO_ADDR
40983: GO 40993
// dist := 36 ;
40985: LD_ADDR_VAR 0 14
40989: PUSH
40990: LD_INT 36
40992: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_VAR 0 4
41007: PPUSH
41008: CALL_OW 297
41012: PUSH
41013: LD_VAR 0 14
41017: GREATER
41018: IFFALSE 41022
// exit ;
41020: GO 41547
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41022: LD_ADDR_VAR 0 12
41026: PUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: LD_VAR 0 4
41041: PPUSH
41042: LD_VAR 0 5
41046: PPUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 248
41056: PPUSH
41057: LD_INT 0
41059: PPUSH
41060: CALL 41552 0 6
41064: ST_TO_ADDR
// if not hexes then
41065: LD_VAR 0 12
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41547
// hex := GetHexInfo ( x , y ) ;
41074: LD_ADDR_VAR 0 15
41078: PUSH
41079: LD_VAR 0 3
41083: PPUSH
41084: LD_VAR 0 4
41088: PPUSH
41089: CALL_OW 546
41093: ST_TO_ADDR
// if hex [ 1 ] then
41094: LD_VAR 0 15
41098: PUSH
41099: LD_INT 1
41101: ARRAY
41102: IFFALSE 41106
// exit ;
41104: GO 41547
// height := hex [ 2 ] ;
41106: LD_ADDR_VAR 0 13
41110: PUSH
41111: LD_VAR 0 15
41115: PUSH
41116: LD_INT 2
41118: ARRAY
41119: ST_TO_ADDR
// for i = 1 to hexes do
41120: LD_ADDR_VAR 0 7
41124: PUSH
41125: DOUBLE
41126: LD_INT 1
41128: DEC
41129: ST_TO_ADDR
41130: LD_VAR 0 12
41134: PUSH
41135: FOR_TO
41136: IFFALSE 41466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41138: LD_VAR 0 12
41142: PUSH
41143: LD_VAR 0 7
41147: ARRAY
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PPUSH
41153: LD_VAR 0 12
41157: PUSH
41158: LD_VAR 0 7
41162: ARRAY
41163: PUSH
41164: LD_INT 2
41166: ARRAY
41167: PPUSH
41168: CALL_OW 488
41172: NOT
41173: PUSH
41174: LD_VAR 0 12
41178: PUSH
41179: LD_VAR 0 7
41183: ARRAY
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: PPUSH
41189: LD_VAR 0 12
41193: PUSH
41194: LD_VAR 0 7
41198: ARRAY
41199: PUSH
41200: LD_INT 2
41202: ARRAY
41203: PPUSH
41204: CALL_OW 428
41208: PUSH
41209: LD_INT 0
41211: GREATER
41212: OR
41213: PUSH
41214: LD_VAR 0 12
41218: PUSH
41219: LD_VAR 0 7
41223: ARRAY
41224: PUSH
41225: LD_INT 1
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 12
41233: PUSH
41234: LD_VAR 0 7
41238: ARRAY
41239: PUSH
41240: LD_INT 2
41242: ARRAY
41243: PPUSH
41244: CALL_OW 351
41248: OR
41249: IFFALSE 41255
// exit ;
41251: POP
41252: POP
41253: GO 41547
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41255: LD_ADDR_VAR 0 8
41259: PUSH
41260: LD_VAR 0 12
41264: PUSH
41265: LD_VAR 0 7
41269: ARRAY
41270: PUSH
41271: LD_INT 1
41273: ARRAY
41274: PPUSH
41275: LD_VAR 0 12
41279: PUSH
41280: LD_VAR 0 7
41284: ARRAY
41285: PUSH
41286: LD_INT 2
41288: ARRAY
41289: PPUSH
41290: CALL_OW 546
41294: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41295: LD_VAR 0 8
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: PUSH
41304: LD_VAR 0 8
41308: PUSH
41309: LD_INT 2
41311: ARRAY
41312: PUSH
41313: LD_VAR 0 13
41317: PUSH
41318: LD_INT 2
41320: PLUS
41321: GREATER
41322: OR
41323: PUSH
41324: LD_VAR 0 8
41328: PUSH
41329: LD_INT 2
41331: ARRAY
41332: PUSH
41333: LD_VAR 0 13
41337: PUSH
41338: LD_INT 2
41340: MINUS
41341: LESS
41342: OR
41343: PUSH
41344: LD_VAR 0 8
41348: PUSH
41349: LD_INT 3
41351: ARRAY
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 8
41358: PUSH
41359: LD_INT 9
41361: PUSH
41362: LD_INT 10
41364: PUSH
41365: LD_INT 11
41367: PUSH
41368: LD_INT 12
41370: PUSH
41371: LD_INT 13
41373: PUSH
41374: LD_INT 16
41376: PUSH
41377: LD_INT 17
41379: PUSH
41380: LD_INT 18
41382: PUSH
41383: LD_INT 19
41385: PUSH
41386: LD_INT 20
41388: PUSH
41389: LD_INT 21
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: IN
41407: NOT
41408: OR
41409: PUSH
41410: LD_VAR 0 8
41414: PUSH
41415: LD_INT 5
41417: ARRAY
41418: NOT
41419: OR
41420: PUSH
41421: LD_VAR 0 8
41425: PUSH
41426: LD_INT 6
41428: ARRAY
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 7
41438: PUSH
41439: LD_INT 9
41441: PUSH
41442: LD_INT 10
41444: PUSH
41445: LD_INT 11
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: IN
41456: NOT
41457: OR
41458: IFFALSE 41464
// exit ;
41460: POP
41461: POP
41462: GO 41547
// end ;
41464: GO 41135
41466: POP
41467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41468: LD_VAR 0 9
41472: PPUSH
41473: LD_VAR 0 3
41477: PPUSH
41478: LD_VAR 0 4
41482: PPUSH
41483: LD_INT 20
41485: PPUSH
41486: CALL 33470 0 4
41490: PUSH
41491: LD_INT 4
41493: ARRAY
41494: IFFALSE 41498
// exit ;
41496: GO 41547
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41498: LD_VAR 0 2
41502: PUSH
41503: LD_INT 29
41505: PUSH
41506: LD_INT 30
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: IN
41513: PUSH
41514: LD_VAR 0 3
41518: PPUSH
41519: LD_VAR 0 4
41523: PPUSH
41524: LD_VAR 0 9
41528: PPUSH
41529: CALL_OW 440
41533: NOT
41534: AND
41535: IFFALSE 41539
// exit ;
41537: GO 41547
// result := true ;
41539: LD_ADDR_VAR 0 6
41543: PUSH
41544: LD_INT 1
41546: ST_TO_ADDR
// end ;
41547: LD_VAR 0 6
41551: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41552: LD_INT 0
41554: PPUSH
41555: PPUSH
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
41563: PPUSH
41564: PPUSH
41565: PPUSH
41566: PPUSH
41567: PPUSH
41568: PPUSH
41569: PPUSH
41570: PPUSH
41571: PPUSH
41572: PPUSH
41573: PPUSH
41574: PPUSH
41575: PPUSH
41576: PPUSH
41577: PPUSH
41578: PPUSH
41579: PPUSH
41580: PPUSH
41581: PPUSH
41582: PPUSH
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
// result = [ ] ;
41612: LD_ADDR_VAR 0 7
41616: PUSH
41617: EMPTY
41618: ST_TO_ADDR
// temp_list = [ ] ;
41619: LD_ADDR_VAR 0 9
41623: PUSH
41624: EMPTY
41625: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41626: LD_VAR 0 4
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: LD_INT 4
41645: PUSH
41646: LD_INT 5
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: IN
41657: NOT
41658: PUSH
41659: LD_VAR 0 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: IN
41674: PUSH
41675: LD_VAR 0 5
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: IN
41694: NOT
41695: AND
41696: OR
41697: IFFALSE 41701
// exit ;
41699: GO 60092
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41701: LD_VAR 0 1
41705: PUSH
41706: LD_INT 6
41708: PUSH
41709: LD_INT 7
41711: PUSH
41712: LD_INT 8
41714: PUSH
41715: LD_INT 13
41717: PUSH
41718: LD_INT 12
41720: PUSH
41721: LD_INT 15
41723: PUSH
41724: LD_INT 11
41726: PUSH
41727: LD_INT 14
41729: PUSH
41730: LD_INT 10
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: IN
41744: IFFALSE 41754
// btype = b_lab ;
41746: LD_ADDR_VAR 0 1
41750: PUSH
41751: LD_INT 6
41753: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41754: LD_VAR 0 6
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: IN
41773: NOT
41774: PUSH
41775: LD_VAR 0 1
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: LD_INT 6
41794: PUSH
41795: LD_INT 36
41797: PUSH
41798: LD_INT 4
41800: PUSH
41801: LD_INT 5
41803: PUSH
41804: LD_INT 31
41806: PUSH
41807: LD_INT 32
41809: PUSH
41810: LD_INT 33
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: IN
41826: NOT
41827: PUSH
41828: LD_VAR 0 6
41832: PUSH
41833: LD_INT 1
41835: EQUAL
41836: AND
41837: OR
41838: PUSH
41839: LD_VAR 0 1
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 3
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: IN
41854: NOT
41855: PUSH
41856: LD_VAR 0 6
41860: PUSH
41861: LD_INT 2
41863: EQUAL
41864: AND
41865: OR
41866: IFFALSE 41876
// mode = 0 ;
41868: LD_ADDR_VAR 0 6
41872: PUSH
41873: LD_INT 0
41875: ST_TO_ADDR
// case mode of 0 :
41876: LD_VAR 0 6
41880: PUSH
41881: LD_INT 0
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 53342
41889: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41890: LD_ADDR_VAR 0 11
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 3
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42083: LD_ADDR_VAR 0 12
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 3
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42279: LD_ADDR_VAR 0 13
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: NEG
42451: PUSH
42452: LD_INT 3
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42478: LD_ADDR_VAR 0 14
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 3
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 3
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42674: LD_ADDR_VAR 0 15
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42867: LD_ADDR_VAR 0 16
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43060: LD_ADDR_VAR 0 17
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43290: LD_ADDR_VAR 0 18
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43520: LD_ADDR_VAR 0 19
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43750: LD_ADDR_VAR 0 20
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43980: LD_ADDR_VAR 0 21
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44210: LD_ADDR_VAR 0 22
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44440: LD_ADDR_VAR 0 23
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44720: LD_ADDR_VAR 0 24
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44996: LD_ADDR_VAR 0 25
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45270: LD_ADDR_VAR 0 26
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 2
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45546: LD_ADDR_VAR 0 27
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45826: LD_ADDR_VAR 0 28
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: LD_INT 3
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46108: LD_ADDR_VAR 0 29
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46387: LD_ADDR_VAR 0 30
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46665: LD_ADDR_VAR 0 31
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 3
46908: NEG
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46943: LD_ADDR_VAR 0 32
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47221: LD_ADDR_VAR 0 33
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47500: LD_ADDR_VAR 0 34
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47780: LD_ADDR_VAR 0 35
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47892: LD_ADDR_VAR 0 36
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48004: LD_ADDR_VAR 0 37
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48116: LD_ADDR_VAR 0 38
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48228: LD_ADDR_VAR 0 39
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48340: LD_ADDR_VAR 0 40
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48452: LD_ADDR_VAR 0 41
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 3
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: LD_INT 3
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48802: LD_ADDR_VAR 0 42
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 3
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49152: LD_ADDR_VAR 0 43
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49500: LD_ADDR_VAR 0 44
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 3
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49850: LD_ADDR_VAR 0 45
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: LD_INT 3
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: LD_INT 3
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50200: LD_ADDR_VAR 0 46
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 3
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50548: LD_ADDR_VAR 0 47
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50699: LD_ADDR_VAR 0 48
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50846: LD_ADDR_VAR 0 49
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50990: LD_ADDR_VAR 0 50
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51134: LD_ADDR_VAR 0 51
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51281: LD_ADDR_VAR 0 52
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51432: LD_ADDR_VAR 0 53
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51662: LD_ADDR_VAR 0 54
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51892: LD_ADDR_VAR 0 55
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52122: LD_ADDR_VAR 0 56
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52352: LD_ADDR_VAR 0 57
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52582: LD_ADDR_VAR 0 58
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52812: LD_ADDR_VAR 0 59
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52900: LD_ADDR_VAR 0 60
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52988: LD_ADDR_VAR 0 61
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53076: LD_ADDR_VAR 0 62
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53164: LD_ADDR_VAR 0 63
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53252: LD_ADDR_VAR 0 64
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// end ; 1 :
53340: GO 59237
53342: LD_INT 1
53344: DOUBLE
53345: EQUAL
53346: IFTRUE 53350
53348: GO 55973
53350: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53351: LD_ADDR_VAR 0 11
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53395: LD_ADDR_VAR 0 12
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53436: LD_ADDR_VAR 0 13
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 3
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53476: LD_ADDR_VAR 0 14
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53517: LD_ADDR_VAR 0 15
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53561: LD_ADDR_VAR 0 16
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53607: LD_ADDR_VAR 0 17
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53651: LD_ADDR_VAR 0 18
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53692: LD_ADDR_VAR 0 19
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 3
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53732: LD_ADDR_VAR 0 20
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53773: LD_ADDR_VAR 0 21
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53817: LD_ADDR_VAR 0 22
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53863: LD_ADDR_VAR 0 23
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 4
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53907: LD_ADDR_VAR 0 24
53911: PUSH
53912: LD_INT 3
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53948: LD_ADDR_VAR 0 25
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53988: LD_ADDR_VAR 0 26
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 4
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54029: LD_ADDR_VAR 0 27
54033: PUSH
54034: LD_INT 3
54036: NEG
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54073: LD_ADDR_VAR 0 28
54077: PUSH
54078: LD_INT 3
54080: NEG
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 4
54104: NEG
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54119: LD_ADDR_VAR 0 29
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 3
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: LD_INT 4
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 4
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 5
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 5
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 4
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 6
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 6
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 5
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54274: LD_ADDR_VAR 0 30
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 4
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 5
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 5
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 6
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 6
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54417: LD_ADDR_VAR 0 31
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 4
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: LD_INT 4
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 5
54484: PUSH
54485: LD_INT 4
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 5
54494: PUSH
54495: LD_INT 5
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 4
54504: PUSH
54505: LD_INT 5
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 6
54514: PUSH
54515: LD_INT 5
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 6
54524: PUSH
54525: LD_INT 6
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: LD_INT 6
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54556: LD_ADDR_VAR 0 32
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 5
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 5
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 4
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 6
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 6
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 5
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54699: LD_ADDR_VAR 0 33
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 4
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 5
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 5
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 6
54819: NEG
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 6
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54854: LD_ADDR_VAR 0 34
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: NEG
54922: PUSH
54923: LD_INT 4
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: NEG
54934: PUSH
54935: LD_INT 5
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 5
54945: NEG
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 5
54957: NEG
54958: PUSH
54959: LD_INT 5
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 5
54969: NEG
54970: PUSH
54971: LD_INT 6
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 6
54981: NEG
54982: PUSH
54983: LD_INT 5
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 6
54993: NEG
54994: PUSH
54995: LD_INT 6
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55017: LD_ADDR_VAR 0 41
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55061: LD_ADDR_VAR 0 42
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55102: LD_ADDR_VAR 0 43
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55142: LD_ADDR_VAR 0 44
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55183: LD_ADDR_VAR 0 45
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55227: LD_ADDR_VAR 0 46
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55273: LD_ADDR_VAR 0 47
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 3
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55306: LD_ADDR_VAR 0 48
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55337: LD_ADDR_VAR 0 49
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55366: LD_ADDR_VAR 0 50
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55395: LD_ADDR_VAR 0 51
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55426: LD_ADDR_VAR 0 52
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55459: LD_ADDR_VAR 0 53
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55503: LD_ADDR_VAR 0 54
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55544: LD_ADDR_VAR 0 55
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55584: LD_ADDR_VAR 0 56
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55625: LD_ADDR_VAR 0 57
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55669: LD_ADDR_VAR 0 58
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55715: LD_ADDR_VAR 0 59
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55759: LD_ADDR_VAR 0 60
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55800: LD_ADDR_VAR 0 61
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55840: LD_ADDR_VAR 0 62
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55881: LD_ADDR_VAR 0 63
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55925: LD_ADDR_VAR 0 64
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// end ; 2 :
55971: GO 59237
55973: LD_INT 2
55975: DOUBLE
55976: EQUAL
55977: IFTRUE 55981
55979: GO 59236
55981: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55982: LD_ADDR_VAR 0 29
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 5
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 4
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 5
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 4
56112: PUSH
56113: LD_INT 4
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: LD_INT 4
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 4
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 4
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 5
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 4
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 4
56367: NEG
56368: PUSH
56369: LD_INT 4
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: LD_INT 5
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: NEG
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 4
56415: NEG
56416: PUSH
56417: LD_INT 3
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 5
56427: NEG
56428: PUSH
56429: LD_INT 4
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 5
56439: NEG
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 5
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 5
56463: NEG
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56520: LD_ADDR_VAR 0 30
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: LD_INT 5
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: LD_INT 5
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 5
56597: PUSH
56598: LD_INT 3
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: LD_INT 5
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 4
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 4
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 5
56766: NEG
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 5
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 5
56789: NEG
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: NEG
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 3
56824: NEG
56825: PUSH
56826: LD_INT 4
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 3
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 4
56884: NEG
56885: PUSH
56886: LD_INT 4
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 4
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 4
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 5
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 5
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 3
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 5
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57067: LD_ADDR_VAR 0 31
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 4
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 4
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 5
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 5
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 3
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 4
57246: NEG
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 4
57281: NEG
57282: PUSH
57283: LD_INT 5
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 5
57329: NEG
57330: PUSH
57331: LD_INT 4
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 5
57341: NEG
57342: PUSH
57343: LD_INT 5
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: LD_INT 5
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 5
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: LD_INT 3
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 4
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 5
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 5
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 5
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57617: LD_ADDR_VAR 0 32
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 4
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 5
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 5
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 4
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: NEG
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: LD_INT 4
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: NEG
57811: PUSH
57812: LD_INT 4
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 4
57822: NEG
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 4
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 5
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 4
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 5
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 5
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 4
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 5
58049: PUSH
58050: LD_INT 4
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 5
58059: PUSH
58060: LD_INT 5
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: LD_INT 5
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58164: LD_ADDR_VAR 0 33
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: LD_INT 4
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 3
58207: NEG
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 4
58219: NEG
58220: PUSH
58221: LD_INT 3
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 5
58231: NEG
58232: PUSH
58233: LD_INT 4
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 5
58243: NEG
58244: PUSH
58245: LD_INT 5
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 3
58255: NEG
58256: PUSH
58257: LD_INT 5
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 5
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 4
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 3
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: LD_INT 4
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 4
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 5
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 5
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: LD_INT 3
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 4
58504: PUSH
58505: LD_INT 4
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 5
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 4
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 5
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58702: LD_ADDR_VAR 0 34
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 4
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 5
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 3
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 5
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: LD_INT 5
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 3
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 4
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 4
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: LD_INT 4
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: LD_INT 5
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: LD_INT 5
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 5
58974: PUSH
58975: LD_INT 3
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 5
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: LD_INT 4
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 4
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 5
59143: NEG
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 5
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// end ; end ;
59234: GO 59237
59236: POP
// case btype of b_depot , b_warehouse :
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 0
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59256
59248: LD_INT 1
59250: DOUBLE
59251: EQUAL
59252: IFTRUE 59256
59254: GO 59457
59256: POP
// case nation of nation_american :
59257: LD_VAR 0 5
59261: PUSH
59262: LD_INT 1
59264: DOUBLE
59265: EQUAL
59266: IFTRUE 59270
59268: GO 59326
59270: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59271: LD_ADDR_VAR 0 9
59275: PUSH
59276: LD_VAR 0 11
59280: PUSH
59281: LD_VAR 0 12
59285: PUSH
59286: LD_VAR 0 13
59290: PUSH
59291: LD_VAR 0 14
59295: PUSH
59296: LD_VAR 0 15
59300: PUSH
59301: LD_VAR 0 16
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: PUSH
59314: LD_VAR 0 4
59318: PUSH
59319: LD_INT 1
59321: PLUS
59322: ARRAY
59323: ST_TO_ADDR
59324: GO 59455
59326: LD_INT 2
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59334
59332: GO 59390
59334: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59335: LD_ADDR_VAR 0 9
59339: PUSH
59340: LD_VAR 0 17
59344: PUSH
59345: LD_VAR 0 18
59349: PUSH
59350: LD_VAR 0 19
59354: PUSH
59355: LD_VAR 0 20
59359: PUSH
59360: LD_VAR 0 21
59364: PUSH
59365: LD_VAR 0 22
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: PUSH
59378: LD_VAR 0 4
59382: PUSH
59383: LD_INT 1
59385: PLUS
59386: ARRAY
59387: ST_TO_ADDR
59388: GO 59455
59390: LD_INT 3
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59398
59396: GO 59454
59398: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59399: LD_ADDR_VAR 0 9
59403: PUSH
59404: LD_VAR 0 23
59408: PUSH
59409: LD_VAR 0 24
59413: PUSH
59414: LD_VAR 0 25
59418: PUSH
59419: LD_VAR 0 26
59423: PUSH
59424: LD_VAR 0 27
59428: PUSH
59429: LD_VAR 0 28
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: PUSH
59442: LD_VAR 0 4
59446: PUSH
59447: LD_INT 1
59449: PLUS
59450: ARRAY
59451: ST_TO_ADDR
59452: GO 59455
59454: POP
59455: GO 60010
59457: LD_INT 2
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59471
59463: LD_INT 3
59465: DOUBLE
59466: EQUAL
59467: IFTRUE 59471
59469: GO 59527
59471: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59472: LD_ADDR_VAR 0 9
59476: PUSH
59477: LD_VAR 0 29
59481: PUSH
59482: LD_VAR 0 30
59486: PUSH
59487: LD_VAR 0 31
59491: PUSH
59492: LD_VAR 0 32
59496: PUSH
59497: LD_VAR 0 33
59501: PUSH
59502: LD_VAR 0 34
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: LD_VAR 0 4
59519: PUSH
59520: LD_INT 1
59522: PLUS
59523: ARRAY
59524: ST_TO_ADDR
59525: GO 60010
59527: LD_INT 16
59529: DOUBLE
59530: EQUAL
59531: IFTRUE 59589
59533: LD_INT 17
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59589
59539: LD_INT 18
59541: DOUBLE
59542: EQUAL
59543: IFTRUE 59589
59545: LD_INT 19
59547: DOUBLE
59548: EQUAL
59549: IFTRUE 59589
59551: LD_INT 22
59553: DOUBLE
59554: EQUAL
59555: IFTRUE 59589
59557: LD_INT 20
59559: DOUBLE
59560: EQUAL
59561: IFTRUE 59589
59563: LD_INT 21
59565: DOUBLE
59566: EQUAL
59567: IFTRUE 59589
59569: LD_INT 23
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59589
59575: LD_INT 24
59577: DOUBLE
59578: EQUAL
59579: IFTRUE 59589
59581: LD_INT 25
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59589
59587: GO 59645
59589: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59590: LD_ADDR_VAR 0 9
59594: PUSH
59595: LD_VAR 0 35
59599: PUSH
59600: LD_VAR 0 36
59604: PUSH
59605: LD_VAR 0 37
59609: PUSH
59610: LD_VAR 0 38
59614: PUSH
59615: LD_VAR 0 39
59619: PUSH
59620: LD_VAR 0 40
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: LD_VAR 0 4
59637: PUSH
59638: LD_INT 1
59640: PLUS
59641: ARRAY
59642: ST_TO_ADDR
59643: GO 60010
59645: LD_INT 6
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59701
59651: LD_INT 7
59653: DOUBLE
59654: EQUAL
59655: IFTRUE 59701
59657: LD_INT 8
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59701
59663: LD_INT 13
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59701
59669: LD_INT 12
59671: DOUBLE
59672: EQUAL
59673: IFTRUE 59701
59675: LD_INT 15
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59701
59681: LD_INT 11
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59701
59687: LD_INT 14
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59701
59693: LD_INT 10
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59701
59699: GO 59757
59701: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59702: LD_ADDR_VAR 0 9
59706: PUSH
59707: LD_VAR 0 41
59711: PUSH
59712: LD_VAR 0 42
59716: PUSH
59717: LD_VAR 0 43
59721: PUSH
59722: LD_VAR 0 44
59726: PUSH
59727: LD_VAR 0 45
59731: PUSH
59732: LD_VAR 0 46
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: PUSH
59745: LD_VAR 0 4
59749: PUSH
59750: LD_INT 1
59752: PLUS
59753: ARRAY
59754: ST_TO_ADDR
59755: GO 60010
59757: LD_INT 36
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59821
59765: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59766: LD_ADDR_VAR 0 9
59770: PUSH
59771: LD_VAR 0 47
59775: PUSH
59776: LD_VAR 0 48
59780: PUSH
59781: LD_VAR 0 49
59785: PUSH
59786: LD_VAR 0 50
59790: PUSH
59791: LD_VAR 0 51
59795: PUSH
59796: LD_VAR 0 52
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: PUSH
59809: LD_VAR 0 4
59813: PUSH
59814: LD_INT 1
59816: PLUS
59817: ARRAY
59818: ST_TO_ADDR
59819: GO 60010
59821: LD_INT 4
59823: DOUBLE
59824: EQUAL
59825: IFTRUE 59847
59827: LD_INT 5
59829: DOUBLE
59830: EQUAL
59831: IFTRUE 59847
59833: LD_INT 34
59835: DOUBLE
59836: EQUAL
59837: IFTRUE 59847
59839: LD_INT 37
59841: DOUBLE
59842: EQUAL
59843: IFTRUE 59847
59845: GO 59903
59847: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59848: LD_ADDR_VAR 0 9
59852: PUSH
59853: LD_VAR 0 53
59857: PUSH
59858: LD_VAR 0 54
59862: PUSH
59863: LD_VAR 0 55
59867: PUSH
59868: LD_VAR 0 56
59872: PUSH
59873: LD_VAR 0 57
59877: PUSH
59878: LD_VAR 0 58
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: LD_VAR 0 4
59895: PUSH
59896: LD_INT 1
59898: PLUS
59899: ARRAY
59900: ST_TO_ADDR
59901: GO 60010
59903: LD_INT 31
59905: DOUBLE
59906: EQUAL
59907: IFTRUE 59953
59909: LD_INT 32
59911: DOUBLE
59912: EQUAL
59913: IFTRUE 59953
59915: LD_INT 33
59917: DOUBLE
59918: EQUAL
59919: IFTRUE 59953
59921: LD_INT 27
59923: DOUBLE
59924: EQUAL
59925: IFTRUE 59953
59927: LD_INT 26
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59953
59933: LD_INT 28
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59953
59939: LD_INT 29
59941: DOUBLE
59942: EQUAL
59943: IFTRUE 59953
59945: LD_INT 30
59947: DOUBLE
59948: EQUAL
59949: IFTRUE 59953
59951: GO 60009
59953: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59954: LD_ADDR_VAR 0 9
59958: PUSH
59959: LD_VAR 0 59
59963: PUSH
59964: LD_VAR 0 60
59968: PUSH
59969: LD_VAR 0 61
59973: PUSH
59974: LD_VAR 0 62
59978: PUSH
59979: LD_VAR 0 63
59983: PUSH
59984: LD_VAR 0 64
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: PUSH
59997: LD_VAR 0 4
60001: PUSH
60002: LD_INT 1
60004: PLUS
60005: ARRAY
60006: ST_TO_ADDR
60007: GO 60010
60009: POP
// temp_list2 = [ ] ;
60010: LD_ADDR_VAR 0 10
60014: PUSH
60015: EMPTY
60016: ST_TO_ADDR
// for i in temp_list do
60017: LD_ADDR_VAR 0 8
60021: PUSH
60022: LD_VAR 0 9
60026: PUSH
60027: FOR_IN
60028: IFFALSE 60080
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60030: LD_ADDR_VAR 0 10
60034: PUSH
60035: LD_VAR 0 10
60039: PUSH
60040: LD_VAR 0 8
60044: PUSH
60045: LD_INT 1
60047: ARRAY
60048: PUSH
60049: LD_VAR 0 2
60053: PLUS
60054: PUSH
60055: LD_VAR 0 8
60059: PUSH
60060: LD_INT 2
60062: ARRAY
60063: PUSH
60064: LD_VAR 0 3
60068: PLUS
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: EMPTY
60075: LIST
60076: ADD
60077: ST_TO_ADDR
60078: GO 60027
60080: POP
60081: POP
// result = temp_list2 ;
60082: LD_ADDR_VAR 0 7
60086: PUSH
60087: LD_VAR 0 10
60091: ST_TO_ADDR
// end ;
60092: LD_VAR 0 7
60096: RET
// export function EnemyInRange ( unit , dist ) ; begin
60097: LD_INT 0
60099: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 255
60114: PPUSH
60115: LD_VAR 0 1
60119: PPUSH
60120: CALL_OW 250
60124: PPUSH
60125: LD_VAR 0 1
60129: PPUSH
60130: CALL_OW 251
60134: PPUSH
60135: LD_VAR 0 2
60139: PPUSH
60140: CALL 33470 0 4
60144: PUSH
60145: LD_INT 4
60147: ARRAY
60148: ST_TO_ADDR
// end ;
60149: LD_VAR 0 3
60153: RET
// export function PlayerSeeMe ( unit ) ; begin
60154: LD_INT 0
60156: PPUSH
// result := See ( your_side , unit ) ;
60157: LD_ADDR_VAR 0 2
60161: PUSH
60162: LD_OWVAR 2
60166: PPUSH
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 292
60176: ST_TO_ADDR
// end ;
60177: LD_VAR 0 2
60181: RET
// export function ReverseDir ( unit ) ; begin
60182: LD_INT 0
60184: PPUSH
// if not unit then
60185: LD_VAR 0 1
60189: NOT
60190: IFFALSE 60194
// exit ;
60192: GO 60217
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60194: LD_ADDR_VAR 0 2
60198: PUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: CALL_OW 254
60208: PUSH
60209: LD_INT 3
60211: PLUS
60212: PUSH
60213: LD_INT 6
60215: MOD
60216: ST_TO_ADDR
// end ;
60217: LD_VAR 0 2
60221: RET
// export function ReverseArray ( array ) ; var i ; begin
60222: LD_INT 0
60224: PPUSH
60225: PPUSH
// if not array then
60226: LD_VAR 0 1
60230: NOT
60231: IFFALSE 60235
// exit ;
60233: GO 60290
// result := [ ] ;
60235: LD_ADDR_VAR 0 2
60239: PUSH
60240: EMPTY
60241: ST_TO_ADDR
// for i := array downto 1 do
60242: LD_ADDR_VAR 0 3
60246: PUSH
60247: DOUBLE
60248: LD_VAR 0 1
60252: INC
60253: ST_TO_ADDR
60254: LD_INT 1
60256: PUSH
60257: FOR_DOWNTO
60258: IFFALSE 60288
// result := Join ( result , array [ i ] ) ;
60260: LD_ADDR_VAR 0 2
60264: PUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: LD_VAR 0 1
60274: PUSH
60275: LD_VAR 0 3
60279: ARRAY
60280: PPUSH
60281: CALL 64955 0 2
60285: ST_TO_ADDR
60286: GO 60257
60288: POP
60289: POP
// end ;
60290: LD_VAR 0 2
60294: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
60301: PPUSH
60302: PPUSH
// if not unit or not hexes then
60303: LD_VAR 0 1
60307: NOT
60308: PUSH
60309: LD_VAR 0 2
60313: NOT
60314: OR
60315: IFFALSE 60319
// exit ;
60317: GO 60442
// dist := 9999 ;
60319: LD_ADDR_VAR 0 5
60323: PUSH
60324: LD_INT 9999
60326: ST_TO_ADDR
// for i = 1 to hexes do
60327: LD_ADDR_VAR 0 4
60331: PUSH
60332: DOUBLE
60333: LD_INT 1
60335: DEC
60336: ST_TO_ADDR
60337: LD_VAR 0 2
60341: PUSH
60342: FOR_TO
60343: IFFALSE 60430
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60345: LD_ADDR_VAR 0 6
60349: PUSH
60350: LD_VAR 0 1
60354: PPUSH
60355: LD_VAR 0 2
60359: PUSH
60360: LD_VAR 0 4
60364: ARRAY
60365: PUSH
60366: LD_INT 1
60368: ARRAY
60369: PPUSH
60370: LD_VAR 0 2
60374: PUSH
60375: LD_VAR 0 4
60379: ARRAY
60380: PUSH
60381: LD_INT 2
60383: ARRAY
60384: PPUSH
60385: CALL_OW 297
60389: ST_TO_ADDR
// if tdist < dist then
60390: LD_VAR 0 6
60394: PUSH
60395: LD_VAR 0 5
60399: LESS
60400: IFFALSE 60428
// begin hex := hexes [ i ] ;
60402: LD_ADDR_VAR 0 8
60406: PUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_VAR 0 4
60416: ARRAY
60417: ST_TO_ADDR
// dist := tdist ;
60418: LD_ADDR_VAR 0 5
60422: PUSH
60423: LD_VAR 0 6
60427: ST_TO_ADDR
// end ; end ;
60428: GO 60342
60430: POP
60431: POP
// result := hex ;
60432: LD_ADDR_VAR 0 3
60436: PUSH
60437: LD_VAR 0 8
60441: ST_TO_ADDR
// end ;
60442: LD_VAR 0 3
60446: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60447: LD_INT 0
60449: PPUSH
60450: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60451: LD_VAR 0 1
60455: NOT
60456: PUSH
60457: LD_VAR 0 1
60461: PUSH
60462: LD_INT 21
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 23
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PPUSH
60486: CALL_OW 69
60490: IN
60491: NOT
60492: OR
60493: IFFALSE 60497
// exit ;
60495: GO 60544
// for i = 1 to 3 do
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: DOUBLE
60503: LD_INT 1
60505: DEC
60506: ST_TO_ADDR
60507: LD_INT 3
60509: PUSH
60510: FOR_TO
60511: IFFALSE 60542
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60513: LD_VAR 0 1
60517: PPUSH
60518: CALL_OW 250
60522: PPUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: CALL_OW 251
60532: PPUSH
60533: LD_INT 1
60535: PPUSH
60536: CALL_OW 453
60540: GO 60510
60542: POP
60543: POP
// end ;
60544: LD_VAR 0 2
60548: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60549: LD_INT 0
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
// if not unit or not enemy_unit then
60557: LD_VAR 0 1
60561: NOT
60562: PUSH
60563: LD_VAR 0 2
60567: NOT
60568: OR
60569: IFFALSE 60573
// exit ;
60571: GO 61040
// if GetLives ( i ) < 250 then
60573: LD_VAR 0 4
60577: PPUSH
60578: CALL_OW 256
60582: PUSH
60583: LD_INT 250
60585: LESS
60586: IFFALSE 60599
// begin ComAutodestruct ( i ) ;
60588: LD_VAR 0 4
60592: PPUSH
60593: CALL 60447 0 1
// exit ;
60597: GO 61040
// end ; x := GetX ( enemy_unit ) ;
60599: LD_ADDR_VAR 0 7
60603: PUSH
60604: LD_VAR 0 2
60608: PPUSH
60609: CALL_OW 250
60613: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60614: LD_ADDR_VAR 0 8
60618: PUSH
60619: LD_VAR 0 2
60623: PPUSH
60624: CALL_OW 251
60628: ST_TO_ADDR
// if not x or not y then
60629: LD_VAR 0 7
60633: NOT
60634: PUSH
60635: LD_VAR 0 8
60639: NOT
60640: OR
60641: IFFALSE 60645
// exit ;
60643: GO 61040
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60645: LD_ADDR_VAR 0 6
60649: PUSH
60650: LD_VAR 0 7
60654: PPUSH
60655: LD_INT 0
60657: PPUSH
60658: LD_INT 4
60660: PPUSH
60661: CALL_OW 272
60665: PUSH
60666: LD_VAR 0 8
60670: PPUSH
60671: LD_INT 0
60673: PPUSH
60674: LD_INT 4
60676: PPUSH
60677: CALL_OW 273
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_VAR 0 7
60690: PPUSH
60691: LD_INT 1
60693: PPUSH
60694: LD_INT 4
60696: PPUSH
60697: CALL_OW 272
60701: PUSH
60702: LD_VAR 0 8
60706: PPUSH
60707: LD_INT 1
60709: PPUSH
60710: LD_INT 4
60712: PPUSH
60713: CALL_OW 273
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_VAR 0 7
60726: PPUSH
60727: LD_INT 2
60729: PPUSH
60730: LD_INT 4
60732: PPUSH
60733: CALL_OW 272
60737: PUSH
60738: LD_VAR 0 8
60742: PPUSH
60743: LD_INT 2
60745: PPUSH
60746: LD_INT 4
60748: PPUSH
60749: CALL_OW 273
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_VAR 0 7
60762: PPUSH
60763: LD_INT 3
60765: PPUSH
60766: LD_INT 4
60768: PPUSH
60769: CALL_OW 272
60773: PUSH
60774: LD_VAR 0 8
60778: PPUSH
60779: LD_INT 3
60781: PPUSH
60782: LD_INT 4
60784: PPUSH
60785: CALL_OW 273
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_VAR 0 7
60798: PPUSH
60799: LD_INT 4
60801: PPUSH
60802: LD_INT 4
60804: PPUSH
60805: CALL_OW 272
60809: PUSH
60810: LD_VAR 0 8
60814: PPUSH
60815: LD_INT 4
60817: PPUSH
60818: LD_INT 4
60820: PPUSH
60821: CALL_OW 273
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_VAR 0 7
60834: PPUSH
60835: LD_INT 5
60837: PPUSH
60838: LD_INT 4
60840: PPUSH
60841: CALL_OW 272
60845: PUSH
60846: LD_VAR 0 8
60850: PPUSH
60851: LD_INT 5
60853: PPUSH
60854: LD_INT 4
60856: PPUSH
60857: CALL_OW 273
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: ST_TO_ADDR
// for i = tmp downto 1 do
60874: LD_ADDR_VAR 0 4
60878: PUSH
60879: DOUBLE
60880: LD_VAR 0 6
60884: INC
60885: ST_TO_ADDR
60886: LD_INT 1
60888: PUSH
60889: FOR_DOWNTO
60890: IFFALSE 60991
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60892: LD_VAR 0 6
60896: PUSH
60897: LD_VAR 0 4
60901: ARRAY
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PPUSH
60907: LD_VAR 0 6
60911: PUSH
60912: LD_VAR 0 4
60916: ARRAY
60917: PUSH
60918: LD_INT 2
60920: ARRAY
60921: PPUSH
60922: CALL_OW 488
60926: NOT
60927: PUSH
60928: LD_VAR 0 6
60932: PUSH
60933: LD_VAR 0 4
60937: ARRAY
60938: PUSH
60939: LD_INT 1
60941: ARRAY
60942: PPUSH
60943: LD_VAR 0 6
60947: PUSH
60948: LD_VAR 0 4
60952: ARRAY
60953: PUSH
60954: LD_INT 2
60956: ARRAY
60957: PPUSH
60958: CALL_OW 428
60962: PUSH
60963: LD_INT 0
60965: NONEQUAL
60966: OR
60967: IFFALSE 60989
// tmp := Delete ( tmp , i ) ;
60969: LD_ADDR_VAR 0 6
60973: PUSH
60974: LD_VAR 0 6
60978: PPUSH
60979: LD_VAR 0 4
60983: PPUSH
60984: CALL_OW 3
60988: ST_TO_ADDR
60989: GO 60889
60991: POP
60992: POP
// j := GetClosestHex ( unit , tmp ) ;
60993: LD_ADDR_VAR 0 5
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 6
61007: PPUSH
61008: CALL 60295 0 2
61012: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61013: LD_VAR 0 1
61017: PPUSH
61018: LD_VAR 0 5
61022: PUSH
61023: LD_INT 1
61025: ARRAY
61026: PPUSH
61027: LD_VAR 0 5
61031: PUSH
61032: LD_INT 2
61034: ARRAY
61035: PPUSH
61036: CALL_OW 111
// end ;
61040: LD_VAR 0 3
61044: RET
// export function PrepareApemanSoldier ( ) ; begin
61045: LD_INT 0
61047: PPUSH
// uc_nation := 0 ;
61048: LD_ADDR_OWVAR 21
61052: PUSH
61053: LD_INT 0
61055: ST_TO_ADDR
// hc_sex := sex_male ;
61056: LD_ADDR_OWVAR 27
61060: PUSH
61061: LD_INT 1
61063: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61064: LD_ADDR_OWVAR 28
61068: PUSH
61069: LD_INT 15
61071: ST_TO_ADDR
// hc_gallery :=  ;
61072: LD_ADDR_OWVAR 33
61076: PUSH
61077: LD_STRING 
61079: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61080: LD_ADDR_OWVAR 31
61084: PUSH
61085: LD_INT 0
61087: PPUSH
61088: LD_INT 3
61090: PPUSH
61091: CALL_OW 12
61095: PUSH
61096: LD_INT 0
61098: PPUSH
61099: LD_INT 3
61101: PPUSH
61102: CALL_OW 12
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// end ;
61119: LD_VAR 0 1
61123: RET
// export function PrepareApemanEngineer ( ) ; begin
61124: LD_INT 0
61126: PPUSH
// uc_nation := 0 ;
61127: LD_ADDR_OWVAR 21
61131: PUSH
61132: LD_INT 0
61134: ST_TO_ADDR
// hc_sex := sex_male ;
61135: LD_ADDR_OWVAR 27
61139: PUSH
61140: LD_INT 1
61142: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61143: LD_ADDR_OWVAR 28
61147: PUSH
61148: LD_INT 16
61150: ST_TO_ADDR
// hc_gallery :=  ;
61151: LD_ADDR_OWVAR 33
61155: PUSH
61156: LD_STRING 
61158: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61159: LD_ADDR_OWVAR 31
61163: PUSH
61164: LD_INT 0
61166: PPUSH
61167: LD_INT 3
61169: PPUSH
61170: CALL_OW 12
61174: PUSH
61175: LD_INT 0
61177: PPUSH
61178: LD_INT 3
61180: PPUSH
61181: CALL_OW 12
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// end ;
61198: LD_VAR 0 1
61202: RET
// export function PrepareApeman ( agressivity ) ; begin
61203: LD_INT 0
61205: PPUSH
// uc_side := 0 ;
61206: LD_ADDR_OWVAR 20
61210: PUSH
61211: LD_INT 0
61213: ST_TO_ADDR
// uc_nation := 0 ;
61214: LD_ADDR_OWVAR 21
61218: PUSH
61219: LD_INT 0
61221: ST_TO_ADDR
// hc_sex := sex_male ;
61222: LD_ADDR_OWVAR 27
61226: PUSH
61227: LD_INT 1
61229: ST_TO_ADDR
// hc_class := class_apeman ;
61230: LD_ADDR_OWVAR 28
61234: PUSH
61235: LD_INT 12
61237: ST_TO_ADDR
// hc_gallery :=  ;
61238: LD_ADDR_OWVAR 33
61242: PUSH
61243: LD_STRING 
61245: ST_TO_ADDR
// if agressivity = 0 then
61246: LD_VAR 0 1
61250: PUSH
61251: LD_INT 0
61253: EQUAL
61254: IFFALSE 61266
// hc_agressivity := 0 else
61256: LD_ADDR_OWVAR 35
61260: PUSH
61261: LD_INT 0
61263: ST_TO_ADDR
61264: GO 61287
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61266: LD_ADDR_OWVAR 35
61270: PUSH
61271: LD_VAR 0 1
61275: NEG
61276: PPUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: CALL_OW 12
61286: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61287: LD_ADDR_OWVAR 31
61291: PUSH
61292: LD_INT 0
61294: PPUSH
61295: LD_INT 3
61297: PPUSH
61298: CALL_OW 12
61302: PUSH
61303: LD_INT 0
61305: PPUSH
61306: LD_INT 3
61308: PPUSH
61309: CALL_OW 12
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// end ;
61326: LD_VAR 0 2
61330: RET
// export function PrepareTiger ( agressivity ) ; begin
61331: LD_INT 0
61333: PPUSH
// uc_side := 0 ;
61334: LD_ADDR_OWVAR 20
61338: PUSH
61339: LD_INT 0
61341: ST_TO_ADDR
// uc_nation := 0 ;
61342: LD_ADDR_OWVAR 21
61346: PUSH
61347: LD_INT 0
61349: ST_TO_ADDR
// hc_class := class_tiger ;
61350: LD_ADDR_OWVAR 28
61354: PUSH
61355: LD_INT 14
61357: ST_TO_ADDR
// hc_gallery :=  ;
61358: LD_ADDR_OWVAR 33
61362: PUSH
61363: LD_STRING 
61365: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61366: LD_ADDR_OWVAR 35
61370: PUSH
61371: LD_VAR 0 1
61375: NEG
61376: PPUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: CALL_OW 12
61386: ST_TO_ADDR
// end ;
61387: LD_VAR 0 2
61391: RET
// export function PrepareEnchidna ( ) ; begin
61392: LD_INT 0
61394: PPUSH
// uc_side := 0 ;
61395: LD_ADDR_OWVAR 20
61399: PUSH
61400: LD_INT 0
61402: ST_TO_ADDR
// uc_nation := 0 ;
61403: LD_ADDR_OWVAR 21
61407: PUSH
61408: LD_INT 0
61410: ST_TO_ADDR
// hc_class := class_baggie ;
61411: LD_ADDR_OWVAR 28
61415: PUSH
61416: LD_INT 13
61418: ST_TO_ADDR
// hc_gallery :=  ;
61419: LD_ADDR_OWVAR 33
61423: PUSH
61424: LD_STRING 
61426: ST_TO_ADDR
// end ;
61427: LD_VAR 0 1
61431: RET
// export function PrepareFrog ( ) ; begin
61432: LD_INT 0
61434: PPUSH
// uc_side := 0 ;
61435: LD_ADDR_OWVAR 20
61439: PUSH
61440: LD_INT 0
61442: ST_TO_ADDR
// uc_nation := 0 ;
61443: LD_ADDR_OWVAR 21
61447: PUSH
61448: LD_INT 0
61450: ST_TO_ADDR
// hc_class := class_frog ;
61451: LD_ADDR_OWVAR 28
61455: PUSH
61456: LD_INT 19
61458: ST_TO_ADDR
// hc_gallery :=  ;
61459: LD_ADDR_OWVAR 33
61463: PUSH
61464: LD_STRING 
61466: ST_TO_ADDR
// end ;
61467: LD_VAR 0 1
61471: RET
// export function PrepareFish ( ) ; begin
61472: LD_INT 0
61474: PPUSH
// uc_side := 0 ;
61475: LD_ADDR_OWVAR 20
61479: PUSH
61480: LD_INT 0
61482: ST_TO_ADDR
// uc_nation := 0 ;
61483: LD_ADDR_OWVAR 21
61487: PUSH
61488: LD_INT 0
61490: ST_TO_ADDR
// hc_class := class_fish ;
61491: LD_ADDR_OWVAR 28
61495: PUSH
61496: LD_INT 20
61498: ST_TO_ADDR
// hc_gallery :=  ;
61499: LD_ADDR_OWVAR 33
61503: PUSH
61504: LD_STRING 
61506: ST_TO_ADDR
// end ;
61507: LD_VAR 0 1
61511: RET
// export function PrepareBird ( ) ; begin
61512: LD_INT 0
61514: PPUSH
// uc_side := 0 ;
61515: LD_ADDR_OWVAR 20
61519: PUSH
61520: LD_INT 0
61522: ST_TO_ADDR
// uc_nation := 0 ;
61523: LD_ADDR_OWVAR 21
61527: PUSH
61528: LD_INT 0
61530: ST_TO_ADDR
// hc_class := class_phororhacos ;
61531: LD_ADDR_OWVAR 28
61535: PUSH
61536: LD_INT 18
61538: ST_TO_ADDR
// hc_gallery :=  ;
61539: LD_ADDR_OWVAR 33
61543: PUSH
61544: LD_STRING 
61546: ST_TO_ADDR
// end ;
61547: LD_VAR 0 1
61551: RET
// export function PrepareHorse ( ) ; begin
61552: LD_INT 0
61554: PPUSH
// uc_side := 0 ;
61555: LD_ADDR_OWVAR 20
61559: PUSH
61560: LD_INT 0
61562: ST_TO_ADDR
// uc_nation := 0 ;
61563: LD_ADDR_OWVAR 21
61567: PUSH
61568: LD_INT 0
61570: ST_TO_ADDR
// hc_class := class_horse ;
61571: LD_ADDR_OWVAR 28
61575: PUSH
61576: LD_INT 21
61578: ST_TO_ADDR
// hc_gallery :=  ;
61579: LD_ADDR_OWVAR 33
61583: PUSH
61584: LD_STRING 
61586: ST_TO_ADDR
// end ;
61587: LD_VAR 0 1
61591: RET
// export function PrepareMastodont ( ) ; begin
61592: LD_INT 0
61594: PPUSH
// uc_side := 0 ;
61595: LD_ADDR_OWVAR 20
61599: PUSH
61600: LD_INT 0
61602: ST_TO_ADDR
// uc_nation := 0 ;
61603: LD_ADDR_OWVAR 21
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61611: LD_ADDR_OWVAR 37
61615: PUSH
61616: LD_INT 31
61618: ST_TO_ADDR
// vc_control := control_rider ;
61619: LD_ADDR_OWVAR 38
61623: PUSH
61624: LD_INT 4
61626: ST_TO_ADDR
// end ;
61627: LD_VAR 0 1
61631: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61632: LD_INT 0
61634: PPUSH
61635: PPUSH
61636: PPUSH
// uc_side = 0 ;
61637: LD_ADDR_OWVAR 20
61641: PUSH
61642: LD_INT 0
61644: ST_TO_ADDR
// uc_nation = 0 ;
61645: LD_ADDR_OWVAR 21
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// InitHc_All ( ) ;
61653: CALL_OW 584
// InitVc ;
61657: CALL_OW 20
// if mastodonts then
61661: LD_VAR 0 6
61665: IFFALSE 61732
// for i = 1 to mastodonts do
61667: LD_ADDR_VAR 0 11
61671: PUSH
61672: DOUBLE
61673: LD_INT 1
61675: DEC
61676: ST_TO_ADDR
61677: LD_VAR 0 6
61681: PUSH
61682: FOR_TO
61683: IFFALSE 61730
// begin vc_chassis := 31 ;
61685: LD_ADDR_OWVAR 37
61689: PUSH
61690: LD_INT 31
61692: ST_TO_ADDR
// vc_control := control_rider ;
61693: LD_ADDR_OWVAR 38
61697: PUSH
61698: LD_INT 4
61700: ST_TO_ADDR
// animal := CreateVehicle ;
61701: LD_ADDR_VAR 0 12
61705: PUSH
61706: CALL_OW 45
61710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61711: LD_VAR 0 12
61715: PPUSH
61716: LD_VAR 0 8
61720: PPUSH
61721: LD_INT 0
61723: PPUSH
61724: CALL 63860 0 3
// end ;
61728: GO 61682
61730: POP
61731: POP
// if horses then
61732: LD_VAR 0 5
61736: IFFALSE 61803
// for i = 1 to horses do
61738: LD_ADDR_VAR 0 11
61742: PUSH
61743: DOUBLE
61744: LD_INT 1
61746: DEC
61747: ST_TO_ADDR
61748: LD_VAR 0 5
61752: PUSH
61753: FOR_TO
61754: IFFALSE 61801
// begin hc_class := 21 ;
61756: LD_ADDR_OWVAR 28
61760: PUSH
61761: LD_INT 21
61763: ST_TO_ADDR
// hc_gallery :=  ;
61764: LD_ADDR_OWVAR 33
61768: PUSH
61769: LD_STRING 
61771: ST_TO_ADDR
// animal := CreateHuman ;
61772: LD_ADDR_VAR 0 12
61776: PUSH
61777: CALL_OW 44
61781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61782: LD_VAR 0 12
61786: PPUSH
61787: LD_VAR 0 8
61791: PPUSH
61792: LD_INT 0
61794: PPUSH
61795: CALL 63860 0 3
// end ;
61799: GO 61753
61801: POP
61802: POP
// if birds then
61803: LD_VAR 0 1
61807: IFFALSE 61874
// for i = 1 to birds do
61809: LD_ADDR_VAR 0 11
61813: PUSH
61814: DOUBLE
61815: LD_INT 1
61817: DEC
61818: ST_TO_ADDR
61819: LD_VAR 0 1
61823: PUSH
61824: FOR_TO
61825: IFFALSE 61872
// begin hc_class := 18 ;
61827: LD_ADDR_OWVAR 28
61831: PUSH
61832: LD_INT 18
61834: ST_TO_ADDR
// hc_gallery =  ;
61835: LD_ADDR_OWVAR 33
61839: PUSH
61840: LD_STRING 
61842: ST_TO_ADDR
// animal := CreateHuman ;
61843: LD_ADDR_VAR 0 12
61847: PUSH
61848: CALL_OW 44
61852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61853: LD_VAR 0 12
61857: PPUSH
61858: LD_VAR 0 8
61862: PPUSH
61863: LD_INT 0
61865: PPUSH
61866: CALL 63860 0 3
// end ;
61870: GO 61824
61872: POP
61873: POP
// if tigers then
61874: LD_VAR 0 2
61878: IFFALSE 61962
// for i = 1 to tigers do
61880: LD_ADDR_VAR 0 11
61884: PUSH
61885: DOUBLE
61886: LD_INT 1
61888: DEC
61889: ST_TO_ADDR
61890: LD_VAR 0 2
61894: PUSH
61895: FOR_TO
61896: IFFALSE 61960
// begin hc_class = class_tiger ;
61898: LD_ADDR_OWVAR 28
61902: PUSH
61903: LD_INT 14
61905: ST_TO_ADDR
// hc_gallery =  ;
61906: LD_ADDR_OWVAR 33
61910: PUSH
61911: LD_STRING 
61913: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61914: LD_ADDR_OWVAR 35
61918: PUSH
61919: LD_INT 7
61921: NEG
61922: PPUSH
61923: LD_INT 7
61925: PPUSH
61926: CALL_OW 12
61930: ST_TO_ADDR
// animal := CreateHuman ;
61931: LD_ADDR_VAR 0 12
61935: PUSH
61936: CALL_OW 44
61940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61941: LD_VAR 0 12
61945: PPUSH
61946: LD_VAR 0 8
61950: PPUSH
61951: LD_INT 0
61953: PPUSH
61954: CALL 63860 0 3
// end ;
61958: GO 61895
61960: POP
61961: POP
// if apemans then
61962: LD_VAR 0 3
61966: IFFALSE 62089
// for i = 1 to apemans do
61968: LD_ADDR_VAR 0 11
61972: PUSH
61973: DOUBLE
61974: LD_INT 1
61976: DEC
61977: ST_TO_ADDR
61978: LD_VAR 0 3
61982: PUSH
61983: FOR_TO
61984: IFFALSE 62087
// begin hc_class = class_apeman ;
61986: LD_ADDR_OWVAR 28
61990: PUSH
61991: LD_INT 12
61993: ST_TO_ADDR
// hc_gallery =  ;
61994: LD_ADDR_OWVAR 33
61998: PUSH
61999: LD_STRING 
62001: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62002: LD_ADDR_OWVAR 35
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PPUSH
62011: LD_INT 2
62013: PPUSH
62014: CALL_OW 12
62018: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62019: LD_ADDR_OWVAR 31
62023: PUSH
62024: LD_INT 1
62026: PPUSH
62027: LD_INT 3
62029: PPUSH
62030: CALL_OW 12
62034: PUSH
62035: LD_INT 1
62037: PPUSH
62038: LD_INT 3
62040: PPUSH
62041: CALL_OW 12
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: ST_TO_ADDR
// animal := CreateHuman ;
62058: LD_ADDR_VAR 0 12
62062: PUSH
62063: CALL_OW 44
62067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62068: LD_VAR 0 12
62072: PPUSH
62073: LD_VAR 0 8
62077: PPUSH
62078: LD_INT 0
62080: PPUSH
62081: CALL 63860 0 3
// end ;
62085: GO 61983
62087: POP
62088: POP
// if enchidnas then
62089: LD_VAR 0 4
62093: IFFALSE 62160
// for i = 1 to enchidnas do
62095: LD_ADDR_VAR 0 11
62099: PUSH
62100: DOUBLE
62101: LD_INT 1
62103: DEC
62104: ST_TO_ADDR
62105: LD_VAR 0 4
62109: PUSH
62110: FOR_TO
62111: IFFALSE 62158
// begin hc_class = 13 ;
62113: LD_ADDR_OWVAR 28
62117: PUSH
62118: LD_INT 13
62120: ST_TO_ADDR
// hc_gallery =  ;
62121: LD_ADDR_OWVAR 33
62125: PUSH
62126: LD_STRING 
62128: ST_TO_ADDR
// animal := CreateHuman ;
62129: LD_ADDR_VAR 0 12
62133: PUSH
62134: CALL_OW 44
62138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62139: LD_VAR 0 12
62143: PPUSH
62144: LD_VAR 0 8
62148: PPUSH
62149: LD_INT 0
62151: PPUSH
62152: CALL 63860 0 3
// end ;
62156: GO 62110
62158: POP
62159: POP
// if fishes then
62160: LD_VAR 0 7
62164: IFFALSE 62231
// for i = 1 to fishes do
62166: LD_ADDR_VAR 0 11
62170: PUSH
62171: DOUBLE
62172: LD_INT 1
62174: DEC
62175: ST_TO_ADDR
62176: LD_VAR 0 7
62180: PUSH
62181: FOR_TO
62182: IFFALSE 62229
// begin hc_class = 20 ;
62184: LD_ADDR_OWVAR 28
62188: PUSH
62189: LD_INT 20
62191: ST_TO_ADDR
// hc_gallery =  ;
62192: LD_ADDR_OWVAR 33
62196: PUSH
62197: LD_STRING 
62199: ST_TO_ADDR
// animal := CreateHuman ;
62200: LD_ADDR_VAR 0 12
62204: PUSH
62205: CALL_OW 44
62209: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62210: LD_VAR 0 12
62214: PPUSH
62215: LD_VAR 0 9
62219: PPUSH
62220: LD_INT 0
62222: PPUSH
62223: CALL 63860 0 3
// end ;
62227: GO 62181
62229: POP
62230: POP
// end ;
62231: LD_VAR 0 10
62235: RET
// export function WantHeal ( sci , unit ) ; begin
62236: LD_INT 0
62238: PPUSH
// if GetTaskList ( sci ) > 0 then
62239: LD_VAR 0 1
62243: PPUSH
62244: CALL_OW 437
62248: PUSH
62249: LD_INT 0
62251: GREATER
62252: IFFALSE 62322
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62254: LD_VAR 0 1
62258: PPUSH
62259: CALL_OW 437
62263: PUSH
62264: LD_INT 1
62266: ARRAY
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: PUSH
62272: LD_STRING l
62274: EQUAL
62275: PUSH
62276: LD_VAR 0 1
62280: PPUSH
62281: CALL_OW 437
62285: PUSH
62286: LD_INT 1
62288: ARRAY
62289: PUSH
62290: LD_INT 4
62292: ARRAY
62293: PUSH
62294: LD_VAR 0 2
62298: EQUAL
62299: AND
62300: IFFALSE 62312
// result := true else
62302: LD_ADDR_VAR 0 3
62306: PUSH
62307: LD_INT 1
62309: ST_TO_ADDR
62310: GO 62320
// result := false ;
62312: LD_ADDR_VAR 0 3
62316: PUSH
62317: LD_INT 0
62319: ST_TO_ADDR
// end else
62320: GO 62330
// result := false ;
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: LD_INT 0
62329: ST_TO_ADDR
// end ;
62330: LD_VAR 0 3
62334: RET
// export function HealTarget ( sci ) ; begin
62335: LD_INT 0
62337: PPUSH
// if not sci then
62338: LD_VAR 0 1
62342: NOT
62343: IFFALSE 62347
// exit ;
62345: GO 62412
// result := 0 ;
62347: LD_ADDR_VAR 0 2
62351: PUSH
62352: LD_INT 0
62354: ST_TO_ADDR
// if GetTaskList ( sci ) then
62355: LD_VAR 0 1
62359: PPUSH
62360: CALL_OW 437
62364: IFFALSE 62412
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62366: LD_VAR 0 1
62370: PPUSH
62371: CALL_OW 437
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PUSH
62380: LD_INT 1
62382: ARRAY
62383: PUSH
62384: LD_STRING l
62386: EQUAL
62387: IFFALSE 62412
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62389: LD_ADDR_VAR 0 2
62393: PUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: CALL_OW 437
62403: PUSH
62404: LD_INT 1
62406: ARRAY
62407: PUSH
62408: LD_INT 4
62410: ARRAY
62411: ST_TO_ADDR
// end ;
62412: LD_VAR 0 2
62416: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62417: LD_INT 0
62419: PPUSH
62420: PPUSH
62421: PPUSH
62422: PPUSH
// if not base_units then
62423: LD_VAR 0 1
62427: NOT
62428: IFFALSE 62432
// exit ;
62430: GO 62519
// result := false ;
62432: LD_ADDR_VAR 0 2
62436: PUSH
62437: LD_INT 0
62439: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62440: LD_ADDR_VAR 0 5
62444: PUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: LD_INT 21
62452: PUSH
62453: LD_INT 3
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: CALL_OW 72
62464: ST_TO_ADDR
// if not tmp then
62465: LD_VAR 0 5
62469: NOT
62470: IFFALSE 62474
// exit ;
62472: GO 62519
// for i in tmp do
62474: LD_ADDR_VAR 0 3
62478: PUSH
62479: LD_VAR 0 5
62483: PUSH
62484: FOR_IN
62485: IFFALSE 62517
// begin result := EnemyInRange ( i , 22 ) ;
62487: LD_ADDR_VAR 0 2
62491: PUSH
62492: LD_VAR 0 3
62496: PPUSH
62497: LD_INT 22
62499: PPUSH
62500: CALL 60097 0 2
62504: ST_TO_ADDR
// if result then
62505: LD_VAR 0 2
62509: IFFALSE 62515
// exit ;
62511: POP
62512: POP
62513: GO 62519
// end ;
62515: GO 62484
62517: POP
62518: POP
// end ;
62519: LD_VAR 0 2
62523: RET
// export function FilterByTag ( units , tag ) ; begin
62524: LD_INT 0
62526: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62527: LD_ADDR_VAR 0 3
62531: PUSH
62532: LD_VAR 0 1
62536: PPUSH
62537: LD_INT 120
62539: PUSH
62540: LD_VAR 0 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PPUSH
62549: CALL_OW 72
62553: ST_TO_ADDR
// end ;
62554: LD_VAR 0 3
62558: RET
// export function IsDriver ( un ) ; begin
62559: LD_INT 0
62561: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62562: LD_ADDR_VAR 0 2
62566: PUSH
62567: LD_VAR 0 1
62571: PUSH
62572: LD_INT 55
62574: PUSH
62575: EMPTY
62576: LIST
62577: PPUSH
62578: CALL_OW 69
62582: IN
62583: ST_TO_ADDR
// end ;
62584: LD_VAR 0 2
62588: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62589: LD_INT 0
62591: PPUSH
62592: PPUSH
// list := [ ] ;
62593: LD_ADDR_VAR 0 5
62597: PUSH
62598: EMPTY
62599: ST_TO_ADDR
// case d of 0 :
62600: LD_VAR 0 3
62604: PUSH
62605: LD_INT 0
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62746
62613: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62614: LD_ADDR_VAR 0 5
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_INT 4
62626: MINUS
62627: PUSH
62628: LD_VAR 0 2
62632: PUSH
62633: LD_INT 4
62635: MINUS
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: PUSH
62645: LD_VAR 0 1
62649: PUSH
62650: LD_INT 3
62652: MINUS
62653: PUSH
62654: LD_VAR 0 2
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: PUSH
62667: LD_VAR 0 1
62671: PUSH
62672: LD_INT 4
62674: PLUS
62675: PUSH
62676: LD_VAR 0 2
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: PUSH
62689: LD_VAR 0 1
62693: PUSH
62694: LD_INT 3
62696: PLUS
62697: PUSH
62698: LD_VAR 0 2
62702: PUSH
62703: LD_INT 3
62705: PLUS
62706: PUSH
62707: LD_INT 5
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: PUSH
62715: LD_VAR 0 1
62719: PUSH
62720: LD_VAR 0 2
62724: PUSH
62725: LD_INT 4
62727: PLUS
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// end ; 1 :
62744: GO 63444
62746: LD_INT 1
62748: DOUBLE
62749: EQUAL
62750: IFTRUE 62754
62752: GO 62887
62754: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62755: LD_ADDR_VAR 0 5
62759: PUSH
62760: LD_VAR 0 1
62764: PUSH
62765: LD_VAR 0 2
62769: PUSH
62770: LD_INT 4
62772: MINUS
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: PUSH
62782: LD_VAR 0 1
62786: PUSH
62787: LD_INT 3
62789: MINUS
62790: PUSH
62791: LD_VAR 0 2
62795: PUSH
62796: LD_INT 3
62798: MINUS
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: PUSH
62808: LD_VAR 0 1
62812: PUSH
62813: LD_INT 4
62815: MINUS
62816: PUSH
62817: LD_VAR 0 2
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: PUSH
62830: LD_VAR 0 1
62834: PUSH
62835: LD_VAR 0 2
62839: PUSH
62840: LD_INT 3
62842: PLUS
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: PUSH
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 4
62859: PLUS
62860: PUSH
62861: LD_VAR 0 2
62865: PUSH
62866: LD_INT 4
62868: PLUS
62869: PUSH
62870: LD_INT 5
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: ST_TO_ADDR
// end ; 2 :
62885: GO 63444
62887: LD_INT 2
62889: DOUBLE
62890: EQUAL
62891: IFTRUE 62895
62893: GO 63024
62895: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62896: LD_ADDR_VAR 0 5
62900: PUSH
62901: LD_VAR 0 1
62905: PUSH
62906: LD_VAR 0 2
62910: PUSH
62911: LD_INT 3
62913: MINUS
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: PUSH
62923: LD_VAR 0 1
62927: PUSH
62928: LD_INT 4
62930: PLUS
62931: PUSH
62932: LD_VAR 0 2
62936: PUSH
62937: LD_INT 4
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: PUSH
62945: LD_VAR 0 1
62949: PUSH
62950: LD_VAR 0 2
62954: PUSH
62955: LD_INT 4
62957: PLUS
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: PUSH
62967: LD_VAR 0 1
62971: PUSH
62972: LD_INT 3
62974: MINUS
62975: PUSH
62976: LD_VAR 0 2
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: PUSH
62989: LD_VAR 0 1
62993: PUSH
62994: LD_INT 4
62996: MINUS
62997: PUSH
62998: LD_VAR 0 2
63002: PUSH
63003: LD_INT 4
63005: MINUS
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: ST_TO_ADDR
// end ; 3 :
63022: GO 63444
63024: LD_INT 3
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63032
63030: GO 63165
63032: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63033: LD_ADDR_VAR 0 5
63037: PUSH
63038: LD_VAR 0 1
63042: PUSH
63043: LD_INT 3
63045: PLUS
63046: PUSH
63047: LD_VAR 0 2
63051: PUSH
63052: LD_INT 4
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: PUSH
63060: LD_VAR 0 1
63064: PUSH
63065: LD_INT 4
63067: PLUS
63068: PUSH
63069: LD_VAR 0 2
63073: PUSH
63074: LD_INT 4
63076: PLUS
63077: PUSH
63078: LD_INT 5
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: PUSH
63086: LD_VAR 0 1
63090: PUSH
63091: LD_INT 4
63093: MINUS
63094: PUSH
63095: LD_VAR 0 2
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: LD_VAR 0 1
63112: PUSH
63113: LD_VAR 0 2
63117: PUSH
63118: LD_INT 4
63120: MINUS
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: LD_VAR 0 1
63134: PUSH
63135: LD_INT 3
63137: MINUS
63138: PUSH
63139: LD_VAR 0 2
63143: PUSH
63144: LD_INT 3
63146: MINUS
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: ST_TO_ADDR
// end ; 4 :
63163: GO 63444
63165: LD_INT 4
63167: DOUBLE
63168: EQUAL
63169: IFTRUE 63173
63171: GO 63306
63173: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63174: LD_ADDR_VAR 0 5
63178: PUSH
63179: LD_VAR 0 1
63183: PUSH
63184: LD_VAR 0 2
63188: PUSH
63189: LD_INT 4
63191: PLUS
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: LIST
63200: PUSH
63201: LD_VAR 0 1
63205: PUSH
63206: LD_INT 3
63208: PLUS
63209: PUSH
63210: LD_VAR 0 2
63214: PUSH
63215: LD_INT 3
63217: PLUS
63218: PUSH
63219: LD_INT 5
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: LD_VAR 0 1
63231: PUSH
63232: LD_INT 4
63234: PLUS
63235: PUSH
63236: LD_VAR 0 2
63240: PUSH
63241: LD_INT 4
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: PUSH
63249: LD_VAR 0 1
63253: PUSH
63254: LD_VAR 0 2
63258: PUSH
63259: LD_INT 3
63261: MINUS
63262: PUSH
63263: LD_INT 3
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: PUSH
63271: LD_VAR 0 1
63275: PUSH
63276: LD_INT 4
63278: MINUS
63279: PUSH
63280: LD_VAR 0 2
63284: PUSH
63285: LD_INT 4
63287: MINUS
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: ST_TO_ADDR
// end ; 5 :
63304: GO 63444
63306: LD_INT 5
63308: DOUBLE
63309: EQUAL
63310: IFTRUE 63314
63312: GO 63443
63314: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63315: LD_ADDR_VAR 0 5
63319: PUSH
63320: LD_VAR 0 1
63324: PUSH
63325: LD_INT 4
63327: MINUS
63328: PUSH
63329: LD_VAR 0 2
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: PUSH
63342: LD_VAR 0 1
63346: PUSH
63347: LD_VAR 0 2
63351: PUSH
63352: LD_INT 4
63354: MINUS
63355: PUSH
63356: LD_INT 3
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: LIST
63363: PUSH
63364: LD_VAR 0 1
63368: PUSH
63369: LD_INT 4
63371: PLUS
63372: PUSH
63373: LD_VAR 0 2
63377: PUSH
63378: LD_INT 4
63380: PLUS
63381: PUSH
63382: LD_INT 5
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: LIST
63389: PUSH
63390: LD_VAR 0 1
63394: PUSH
63395: LD_INT 3
63397: PLUS
63398: PUSH
63399: LD_VAR 0 2
63403: PUSH
63404: LD_INT 4
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: PUSH
63412: LD_VAR 0 1
63416: PUSH
63417: LD_VAR 0 2
63421: PUSH
63422: LD_INT 3
63424: PLUS
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// end ; end ;
63441: GO 63444
63443: POP
// result := list ;
63444: LD_ADDR_VAR 0 4
63448: PUSH
63449: LD_VAR 0 5
63453: ST_TO_ADDR
// end ;
63454: LD_VAR 0 4
63458: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63459: LD_INT 0
63461: PPUSH
63462: PPUSH
63463: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63464: LD_VAR 0 1
63468: NOT
63469: PUSH
63470: LD_VAR 0 2
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: LD_INT 3
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: IN
63493: NOT
63494: OR
63495: IFFALSE 63499
// exit ;
63497: GO 63582
// tmp := [ ] ;
63499: LD_ADDR_VAR 0 5
63503: PUSH
63504: EMPTY
63505: ST_TO_ADDR
// for i in units do
63506: LD_ADDR_VAR 0 4
63510: PUSH
63511: LD_VAR 0 1
63515: PUSH
63516: FOR_IN
63517: IFFALSE 63551
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63519: LD_ADDR_VAR 0 5
63523: PUSH
63524: LD_VAR 0 5
63528: PPUSH
63529: LD_VAR 0 4
63533: PPUSH
63534: LD_VAR 0 2
63538: PPUSH
63539: CALL_OW 259
63543: PPUSH
63544: CALL 64955 0 2
63548: ST_TO_ADDR
63549: GO 63516
63551: POP
63552: POP
// if not tmp then
63553: LD_VAR 0 5
63557: NOT
63558: IFFALSE 63562
// exit ;
63560: GO 63582
// result := SortListByListDesc ( units , tmp ) ;
63562: LD_ADDR_VAR 0 3
63566: PUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: LD_VAR 0 5
63576: PPUSH
63577: CALL_OW 77
63581: ST_TO_ADDR
// end ;
63582: LD_VAR 0 3
63586: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63587: LD_INT 0
63589: PPUSH
63590: PPUSH
63591: PPUSH
// result := false ;
63592: LD_ADDR_VAR 0 3
63596: PUSH
63597: LD_INT 0
63599: ST_TO_ADDR
// if not building then
63600: LD_VAR 0 2
63604: NOT
63605: IFFALSE 63609
// exit ;
63607: GO 63747
// x := GetX ( building ) ;
63609: LD_ADDR_VAR 0 4
63613: PUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: CALL_OW 250
63623: ST_TO_ADDR
// y := GetY ( building ) ;
63624: LD_ADDR_VAR 0 5
63628: PUSH
63629: LD_VAR 0 2
63633: PPUSH
63634: CALL_OW 251
63638: ST_TO_ADDR
// if not x or not y then
63639: LD_VAR 0 4
63643: NOT
63644: PUSH
63645: LD_VAR 0 5
63649: NOT
63650: OR
63651: IFFALSE 63655
// exit ;
63653: GO 63747
// if GetTaskList ( unit ) then
63655: LD_VAR 0 1
63659: PPUSH
63660: CALL_OW 437
63664: IFFALSE 63747
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63666: LD_STRING e
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 437
63678: PUSH
63679: LD_INT 1
63681: ARRAY
63682: PUSH
63683: LD_INT 1
63685: ARRAY
63686: EQUAL
63687: PUSH
63688: LD_VAR 0 4
63692: PUSH
63693: LD_VAR 0 1
63697: PPUSH
63698: CALL_OW 437
63702: PUSH
63703: LD_INT 1
63705: ARRAY
63706: PUSH
63707: LD_INT 2
63709: ARRAY
63710: EQUAL
63711: AND
63712: PUSH
63713: LD_VAR 0 5
63717: PUSH
63718: LD_VAR 0 1
63722: PPUSH
63723: CALL_OW 437
63727: PUSH
63728: LD_INT 1
63730: ARRAY
63731: PUSH
63732: LD_INT 3
63734: ARRAY
63735: EQUAL
63736: AND
63737: IFFALSE 63747
// result := true end ;
63739: LD_ADDR_VAR 0 3
63743: PUSH
63744: LD_INT 1
63746: ST_TO_ADDR
// end ;
63747: LD_VAR 0 3
63751: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63752: LD_INT 0
63754: PPUSH
// result := false ;
63755: LD_ADDR_VAR 0 4
63759: PUSH
63760: LD_INT 0
63762: ST_TO_ADDR
// if GetTaskList ( unit ) then
63763: LD_VAR 0 1
63767: PPUSH
63768: CALL_OW 437
63772: IFFALSE 63855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63774: LD_STRING M
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL_OW 437
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PUSH
63791: LD_INT 1
63793: ARRAY
63794: EQUAL
63795: PUSH
63796: LD_VAR 0 2
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: CALL_OW 437
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PUSH
63815: LD_INT 2
63817: ARRAY
63818: EQUAL
63819: AND
63820: PUSH
63821: LD_VAR 0 3
63825: PUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL_OW 437
63835: PUSH
63836: LD_INT 1
63838: ARRAY
63839: PUSH
63840: LD_INT 3
63842: ARRAY
63843: EQUAL
63844: AND
63845: IFFALSE 63855
// result := true ;
63847: LD_ADDR_VAR 0 4
63851: PUSH
63852: LD_INT 1
63854: ST_TO_ADDR
// end ; end ;
63855: LD_VAR 0 4
63859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63860: LD_INT 0
63862: PPUSH
63863: PPUSH
63864: PPUSH
63865: PPUSH
// if not unit or not area then
63866: LD_VAR 0 1
63870: NOT
63871: PUSH
63872: LD_VAR 0 2
63876: NOT
63877: OR
63878: IFFALSE 63882
// exit ;
63880: GO 64058
// tmp := AreaToList ( area , i ) ;
63882: LD_ADDR_VAR 0 6
63886: PUSH
63887: LD_VAR 0 2
63891: PPUSH
63892: LD_VAR 0 5
63896: PPUSH
63897: CALL_OW 517
63901: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63902: LD_ADDR_VAR 0 5
63906: PUSH
63907: DOUBLE
63908: LD_INT 1
63910: DEC
63911: ST_TO_ADDR
63912: LD_VAR 0 6
63916: PUSH
63917: LD_INT 1
63919: ARRAY
63920: PUSH
63921: FOR_TO
63922: IFFALSE 64056
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63924: LD_ADDR_VAR 0 7
63928: PUSH
63929: LD_VAR 0 6
63933: PUSH
63934: LD_INT 1
63936: ARRAY
63937: PUSH
63938: LD_VAR 0 5
63942: ARRAY
63943: PUSH
63944: LD_VAR 0 6
63948: PUSH
63949: LD_INT 2
63951: ARRAY
63952: PUSH
63953: LD_VAR 0 5
63957: ARRAY
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63963: LD_INT 92
63965: PUSH
63966: LD_VAR 0 7
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: PUSH
63975: LD_VAR 0 7
63979: PUSH
63980: LD_INT 2
63982: ARRAY
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: PPUSH
63993: CALL_OW 69
63997: PUSH
63998: LD_INT 0
64000: EQUAL
64001: IFFALSE 64054
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 7
64012: PUSH
64013: LD_INT 1
64015: ARRAY
64016: PPUSH
64017: LD_VAR 0 7
64021: PUSH
64022: LD_INT 2
64024: ARRAY
64025: PPUSH
64026: LD_VAR 0 3
64030: PPUSH
64031: CALL_OW 48
// result := IsPlaced ( unit ) ;
64035: LD_ADDR_VAR 0 4
64039: PUSH
64040: LD_VAR 0 1
64044: PPUSH
64045: CALL_OW 305
64049: ST_TO_ADDR
// exit ;
64050: POP
64051: POP
64052: GO 64058
// end ; end ;
64054: GO 63921
64056: POP
64057: POP
// end ;
64058: LD_VAR 0 4
64062: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64063: LD_INT 0
64065: PPUSH
64066: PPUSH
64067: PPUSH
// if not side or side > 8 then
64068: LD_VAR 0 1
64072: NOT
64073: PUSH
64074: LD_VAR 0 1
64078: PUSH
64079: LD_INT 8
64081: GREATER
64082: OR
64083: IFFALSE 64087
// exit ;
64085: GO 64274
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_INT 22
64094: PUSH
64095: LD_VAR 0 1
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 21
64106: PUSH
64107: LD_INT 3
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PPUSH
64118: CALL_OW 69
64122: ST_TO_ADDR
// if not tmp then
64123: LD_VAR 0 4
64127: NOT
64128: IFFALSE 64132
// exit ;
64130: GO 64274
// enable_addtolog := true ;
64132: LD_ADDR_OWVAR 81
64136: PUSH
64137: LD_INT 1
64139: ST_TO_ADDR
// AddToLog ( [ ) ;
64140: LD_STRING [
64142: PPUSH
64143: CALL_OW 561
// for i in tmp do
64147: LD_ADDR_VAR 0 3
64151: PUSH
64152: LD_VAR 0 4
64156: PUSH
64157: FOR_IN
64158: IFFALSE 64265
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64160: LD_STRING [
64162: PUSH
64163: LD_VAR 0 3
64167: PPUSH
64168: CALL_OW 266
64172: STR
64173: PUSH
64174: LD_STRING , 
64176: STR
64177: PUSH
64178: LD_VAR 0 3
64182: PPUSH
64183: CALL_OW 250
64187: STR
64188: PUSH
64189: LD_STRING , 
64191: STR
64192: PUSH
64193: LD_VAR 0 3
64197: PPUSH
64198: CALL_OW 251
64202: STR
64203: PUSH
64204: LD_STRING , 
64206: STR
64207: PUSH
64208: LD_VAR 0 3
64212: PPUSH
64213: CALL_OW 254
64217: STR
64218: PUSH
64219: LD_STRING , 
64221: STR
64222: PUSH
64223: LD_VAR 0 3
64227: PPUSH
64228: LD_INT 1
64230: PPUSH
64231: CALL_OW 268
64235: STR
64236: PUSH
64237: LD_STRING , 
64239: STR
64240: PUSH
64241: LD_VAR 0 3
64245: PPUSH
64246: LD_INT 2
64248: PPUSH
64249: CALL_OW 268
64253: STR
64254: PUSH
64255: LD_STRING ],
64257: STR
64258: PPUSH
64259: CALL_OW 561
// end ;
64263: GO 64157
64265: POP
64266: POP
// AddToLog ( ]; ) ;
64267: LD_STRING ];
64269: PPUSH
64270: CALL_OW 561
// end ;
64274: LD_VAR 0 2
64278: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64279: LD_INT 0
64281: PPUSH
64282: PPUSH
64283: PPUSH
64284: PPUSH
64285: PPUSH
// if not area or not rate or not max then
64286: LD_VAR 0 1
64290: NOT
64291: PUSH
64292: LD_VAR 0 2
64296: NOT
64297: OR
64298: PUSH
64299: LD_VAR 0 4
64303: NOT
64304: OR
64305: IFFALSE 64309
// exit ;
64307: GO 64498
// while 1 do
64309: LD_INT 1
64311: IFFALSE 64498
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64313: LD_ADDR_VAR 0 9
64317: PUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_INT 1
64325: PPUSH
64326: CALL_OW 287
64330: PUSH
64331: LD_INT 10
64333: MUL
64334: ST_TO_ADDR
// r := rate / 10 ;
64335: LD_ADDR_VAR 0 7
64339: PUSH
64340: LD_VAR 0 2
64344: PUSH
64345: LD_INT 10
64347: DIVREAL
64348: ST_TO_ADDR
// time := 1 1$00 ;
64349: LD_ADDR_VAR 0 8
64353: PUSH
64354: LD_INT 2100
64356: ST_TO_ADDR
// if amount < min then
64357: LD_VAR 0 9
64361: PUSH
64362: LD_VAR 0 3
64366: LESS
64367: IFFALSE 64385
// r := r * 2 else
64369: LD_ADDR_VAR 0 7
64373: PUSH
64374: LD_VAR 0 7
64378: PUSH
64379: LD_INT 2
64381: MUL
64382: ST_TO_ADDR
64383: GO 64411
// if amount > max then
64385: LD_VAR 0 9
64389: PUSH
64390: LD_VAR 0 4
64394: GREATER
64395: IFFALSE 64411
// r := r / 2 ;
64397: LD_ADDR_VAR 0 7
64401: PUSH
64402: LD_VAR 0 7
64406: PUSH
64407: LD_INT 2
64409: DIVREAL
64410: ST_TO_ADDR
// time := time / r ;
64411: LD_ADDR_VAR 0 8
64415: PUSH
64416: LD_VAR 0 8
64420: PUSH
64421: LD_VAR 0 7
64425: DIVREAL
64426: ST_TO_ADDR
// if time < 0 then
64427: LD_VAR 0 8
64431: PUSH
64432: LD_INT 0
64434: LESS
64435: IFFALSE 64452
// time := time * - 1 ;
64437: LD_ADDR_VAR 0 8
64441: PUSH
64442: LD_VAR 0 8
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: MUL
64451: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64452: LD_VAR 0 8
64456: PUSH
64457: LD_INT 35
64459: PPUSH
64460: LD_INT 875
64462: PPUSH
64463: CALL_OW 12
64467: PLUS
64468: PPUSH
64469: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64473: LD_INT 1
64475: PPUSH
64476: LD_INT 5
64478: PPUSH
64479: CALL_OW 12
64483: PPUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: LD_INT 1
64491: PPUSH
64492: CALL_OW 55
// end ;
64496: GO 64309
// end ;
64498: LD_VAR 0 5
64502: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64503: LD_INT 0
64505: PPUSH
64506: PPUSH
64507: PPUSH
64508: PPUSH
64509: PPUSH
64510: PPUSH
64511: PPUSH
64512: PPUSH
// if not turrets or not factories then
64513: LD_VAR 0 1
64517: NOT
64518: PUSH
64519: LD_VAR 0 2
64523: NOT
64524: OR
64525: IFFALSE 64529
// exit ;
64527: GO 64836
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64529: LD_ADDR_VAR 0 10
64533: PUSH
64534: LD_INT 5
64536: PUSH
64537: LD_INT 6
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 4
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: LD_INT 5
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 24
64571: PUSH
64572: LD_INT 25
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 23
64581: PUSH
64582: LD_INT 27
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 42
64595: PUSH
64596: LD_INT 43
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 44
64605: PUSH
64606: LD_INT 46
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 45
64615: PUSH
64616: LD_INT 47
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: ST_TO_ADDR
// result := [ ] ;
64633: LD_ADDR_VAR 0 3
64637: PUSH
64638: EMPTY
64639: ST_TO_ADDR
// for i in turrets do
64640: LD_ADDR_VAR 0 4
64644: PUSH
64645: LD_VAR 0 1
64649: PUSH
64650: FOR_IN
64651: IFFALSE 64834
// begin nat := GetNation ( i ) ;
64653: LD_ADDR_VAR 0 7
64657: PUSH
64658: LD_VAR 0 4
64662: PPUSH
64663: CALL_OW 248
64667: ST_TO_ADDR
// weapon := 0 ;
64668: LD_ADDR_VAR 0 8
64672: PUSH
64673: LD_INT 0
64675: ST_TO_ADDR
// if not nat then
64676: LD_VAR 0 7
64680: NOT
64681: IFFALSE 64685
// continue ;
64683: GO 64650
// for j in list [ nat ] do
64685: LD_ADDR_VAR 0 5
64689: PUSH
64690: LD_VAR 0 10
64694: PUSH
64695: LD_VAR 0 7
64699: ARRAY
64700: PUSH
64701: FOR_IN
64702: IFFALSE 64743
// if GetBWeapon ( i ) = j [ 1 ] then
64704: LD_VAR 0 4
64708: PPUSH
64709: CALL_OW 269
64713: PUSH
64714: LD_VAR 0 5
64718: PUSH
64719: LD_INT 1
64721: ARRAY
64722: EQUAL
64723: IFFALSE 64741
// begin weapon := j [ 2 ] ;
64725: LD_ADDR_VAR 0 8
64729: PUSH
64730: LD_VAR 0 5
64734: PUSH
64735: LD_INT 2
64737: ARRAY
64738: ST_TO_ADDR
// break ;
64739: GO 64743
// end ;
64741: GO 64701
64743: POP
64744: POP
// if not weapon then
64745: LD_VAR 0 8
64749: NOT
64750: IFFALSE 64754
// continue ;
64752: GO 64650
// for k in factories do
64754: LD_ADDR_VAR 0 6
64758: PUSH
64759: LD_VAR 0 2
64763: PUSH
64764: FOR_IN
64765: IFFALSE 64830
// begin weapons := AvailableWeaponList ( k ) ;
64767: LD_ADDR_VAR 0 9
64771: PUSH
64772: LD_VAR 0 6
64776: PPUSH
64777: CALL_OW 478
64781: ST_TO_ADDR
// if not weapons then
64782: LD_VAR 0 9
64786: NOT
64787: IFFALSE 64791
// continue ;
64789: GO 64764
// if weapon in weapons then
64791: LD_VAR 0 8
64795: PUSH
64796: LD_VAR 0 9
64800: IN
64801: IFFALSE 64828
// begin result := [ i , weapon ] ;
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_VAR 0 4
64812: PUSH
64813: LD_VAR 0 8
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: ST_TO_ADDR
// exit ;
64822: POP
64823: POP
64824: POP
64825: POP
64826: GO 64836
// end ; end ;
64828: GO 64764
64830: POP
64831: POP
// end ;
64832: GO 64650
64834: POP
64835: POP
// end ;
64836: LD_VAR 0 3
64840: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64841: LD_INT 0
64843: PPUSH
// if not side or side > 8 then
64844: LD_VAR 0 3
64848: NOT
64849: PUSH
64850: LD_VAR 0 3
64854: PUSH
64855: LD_INT 8
64857: GREATER
64858: OR
64859: IFFALSE 64863
// exit ;
64861: GO 64922
// if not range then
64863: LD_VAR 0 4
64867: NOT
64868: IFFALSE 64879
// range := - 12 ;
64870: LD_ADDR_VAR 0 4
64874: PUSH
64875: LD_INT 12
64877: NEG
64878: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64879: LD_VAR 0 1
64883: PPUSH
64884: LD_VAR 0 2
64888: PPUSH
64889: LD_VAR 0 3
64893: PPUSH
64894: LD_VAR 0 4
64898: PPUSH
64899: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_VAR 0 2
64912: PPUSH
64913: LD_VAR 0 3
64917: PPUSH
64918: CALL_OW 331
// end ;
64922: LD_VAR 0 5
64926: RET
// export function Video ( mode ) ; begin
64927: LD_INT 0
64929: PPUSH
// ingame_video = mode ;
64930: LD_ADDR_OWVAR 52
64934: PUSH
64935: LD_VAR 0 1
64939: ST_TO_ADDR
// interface_hidden = mode ;
64940: LD_ADDR_OWVAR 54
64944: PUSH
64945: LD_VAR 0 1
64949: ST_TO_ADDR
// end ;
64950: LD_VAR 0 2
64954: RET
// export function Join ( array , element ) ; begin
64955: LD_INT 0
64957: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_VAR 0 1
64967: PPUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_INT 1
64975: PLUS
64976: PPUSH
64977: LD_VAR 0 2
64981: PPUSH
64982: CALL_OW 1
64986: ST_TO_ADDR
// end ;
64987: LD_VAR 0 3
64991: RET
// export function JoinUnion ( array , element ) ; begin
64992: LD_INT 0
64994: PPUSH
// result := array union element ;
64995: LD_ADDR_VAR 0 3
64999: PUSH
65000: LD_VAR 0 1
65004: PUSH
65005: LD_VAR 0 2
65009: UNION
65010: ST_TO_ADDR
// end ;
65011: LD_VAR 0 3
65015: RET
// export function GetBehemoths ( side ) ; begin
65016: LD_INT 0
65018: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_INT 22
65026: PUSH
65027: LD_VAR 0 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 31
65038: PUSH
65039: LD_INT 25
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PPUSH
65050: CALL_OW 69
65054: ST_TO_ADDR
// end ;
65055: LD_VAR 0 2
65059: RET
// export function Shuffle ( array ) ; var i , index ; begin
65060: LD_INT 0
65062: PPUSH
65063: PPUSH
65064: PPUSH
// result := [ ] ;
65065: LD_ADDR_VAR 0 2
65069: PUSH
65070: EMPTY
65071: ST_TO_ADDR
// if not array then
65072: LD_VAR 0 1
65076: NOT
65077: IFFALSE 65081
// exit ;
65079: GO 65180
// Randomize ;
65081: CALL_OW 10
// for i = array downto 1 do
65085: LD_ADDR_VAR 0 3
65089: PUSH
65090: DOUBLE
65091: LD_VAR 0 1
65095: INC
65096: ST_TO_ADDR
65097: LD_INT 1
65099: PUSH
65100: FOR_DOWNTO
65101: IFFALSE 65178
// begin index := rand ( 1 , array ) ;
65103: LD_ADDR_VAR 0 4
65107: PUSH
65108: LD_INT 1
65110: PPUSH
65111: LD_VAR 0 1
65115: PPUSH
65116: CALL_OW 12
65120: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65121: LD_ADDR_VAR 0 2
65125: PUSH
65126: LD_VAR 0 2
65130: PPUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 1
65138: PLUS
65139: PPUSH
65140: LD_VAR 0 1
65144: PUSH
65145: LD_VAR 0 4
65149: ARRAY
65150: PPUSH
65151: CALL_OW 2
65155: ST_TO_ADDR
// array := Delete ( array , index ) ;
65156: LD_ADDR_VAR 0 1
65160: PUSH
65161: LD_VAR 0 1
65165: PPUSH
65166: LD_VAR 0 4
65170: PPUSH
65171: CALL_OW 3
65175: ST_TO_ADDR
// end ;
65176: GO 65100
65178: POP
65179: POP
// end ;
65180: LD_VAR 0 2
65184: RET
// export function GetBaseMaterials ( base ) ; begin
65185: LD_INT 0
65187: PPUSH
// result := [ 0 , 0 , 0 ] ;
65188: LD_ADDR_VAR 0 2
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// if not base then
65207: LD_VAR 0 1
65211: NOT
65212: IFFALSE 65216
// exit ;
65214: GO 65265
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65216: LD_ADDR_VAR 0 2
65220: PUSH
65221: LD_VAR 0 1
65225: PPUSH
65226: LD_INT 1
65228: PPUSH
65229: CALL_OW 275
65233: PUSH
65234: LD_VAR 0 1
65238: PPUSH
65239: LD_INT 2
65241: PPUSH
65242: CALL_OW 275
65246: PUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: LD_INT 3
65254: PPUSH
65255: CALL_OW 275
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// end ;
65265: LD_VAR 0 2
65269: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65270: LD_INT 0
65272: PPUSH
65273: PPUSH
// result := array ;
65274: LD_ADDR_VAR 0 3
65278: PUSH
65279: LD_VAR 0 1
65283: ST_TO_ADDR
// if size >= result then
65284: LD_VAR 0 2
65288: PUSH
65289: LD_VAR 0 3
65293: GREATEREQUAL
65294: IFFALSE 65298
// exit ;
65296: GO 65348
// if size then
65298: LD_VAR 0 2
65302: IFFALSE 65348
// for i := array downto size do
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: DOUBLE
65310: LD_VAR 0 1
65314: INC
65315: ST_TO_ADDR
65316: LD_VAR 0 2
65320: PUSH
65321: FOR_DOWNTO
65322: IFFALSE 65346
// result := Delete ( result , result ) ;
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: LD_VAR 0 3
65338: PPUSH
65339: CALL_OW 3
65343: ST_TO_ADDR
65344: GO 65321
65346: POP
65347: POP
// end ;
65348: LD_VAR 0 3
65352: RET
// export function ComExit ( unit ) ; var tmp ; begin
65353: LD_INT 0
65355: PPUSH
65356: PPUSH
// if not IsInUnit ( unit ) then
65357: LD_VAR 0 1
65361: PPUSH
65362: CALL_OW 310
65366: NOT
65367: IFFALSE 65371
// exit ;
65369: GO 65431
// tmp := IsInUnit ( unit ) ;
65371: LD_ADDR_VAR 0 3
65375: PUSH
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 310
65385: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65386: LD_VAR 0 3
65390: PPUSH
65391: CALL_OW 247
65395: PUSH
65396: LD_INT 2
65398: EQUAL
65399: IFFALSE 65412
// ComExitVehicle ( unit ) else
65401: LD_VAR 0 1
65405: PPUSH
65406: CALL_OW 121
65410: GO 65421
// ComExitBuilding ( unit ) ;
65412: LD_VAR 0 1
65416: PPUSH
65417: CALL_OW 122
// result := tmp ;
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: LD_VAR 0 3
65430: ST_TO_ADDR
// end ;
65431: LD_VAR 0 2
65435: RET
// export function ComExitAll ( units ) ; var i ; begin
65436: LD_INT 0
65438: PPUSH
65439: PPUSH
// if not units then
65440: LD_VAR 0 1
65444: NOT
65445: IFFALSE 65449
// exit ;
65447: GO 65475
// for i in units do
65449: LD_ADDR_VAR 0 3
65453: PUSH
65454: LD_VAR 0 1
65458: PUSH
65459: FOR_IN
65460: IFFALSE 65473
// ComExit ( i ) ;
65462: LD_VAR 0 3
65466: PPUSH
65467: CALL 65353 0 1
65471: GO 65459
65473: POP
65474: POP
// end ;
65475: LD_VAR 0 2
65479: RET
// export function ResetHc ; begin
65480: LD_INT 0
65482: PPUSH
// InitHc ;
65483: CALL_OW 19
// hc_importance := 0 ;
65487: LD_ADDR_OWVAR 32
65491: PUSH
65492: LD_INT 0
65494: ST_TO_ADDR
// end ;
65495: LD_VAR 0 1
65499: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65500: LD_INT 0
65502: PPUSH
65503: PPUSH
65504: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65505: LD_ADDR_VAR 0 6
65509: PUSH
65510: LD_VAR 0 1
65514: PUSH
65515: LD_VAR 0 3
65519: PLUS
65520: PUSH
65521: LD_INT 2
65523: DIV
65524: ST_TO_ADDR
// if _x < 0 then
65525: LD_VAR 0 6
65529: PUSH
65530: LD_INT 0
65532: LESS
65533: IFFALSE 65550
// _x := _x * - 1 ;
65535: LD_ADDR_VAR 0 6
65539: PUSH
65540: LD_VAR 0 6
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: MUL
65549: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65550: LD_ADDR_VAR 0 7
65554: PUSH
65555: LD_VAR 0 2
65559: PUSH
65560: LD_VAR 0 4
65564: PLUS
65565: PUSH
65566: LD_INT 2
65568: DIV
65569: ST_TO_ADDR
// if _y < 0 then
65570: LD_VAR 0 7
65574: PUSH
65575: LD_INT 0
65577: LESS
65578: IFFALSE 65595
// _y := _y * - 1 ;
65580: LD_ADDR_VAR 0 7
65584: PUSH
65585: LD_VAR 0 7
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: MUL
65594: ST_TO_ADDR
// result := [ _x , _y ] ;
65595: LD_ADDR_VAR 0 5
65599: PUSH
65600: LD_VAR 0 6
65604: PUSH
65605: LD_VAR 0 7
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// end ;
65614: LD_VAR 0 5
65618: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65619: LD_INT 0
65621: PPUSH
65622: PPUSH
65623: PPUSH
65624: PPUSH
// task := GetTaskList ( unit ) ;
65625: LD_ADDR_VAR 0 7
65629: PUSH
65630: LD_VAR 0 1
65634: PPUSH
65635: CALL_OW 437
65639: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65640: LD_VAR 0 7
65644: NOT
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_VAR 0 2
65655: PPUSH
65656: CALL_OW 308
65660: NOT
65661: AND
65662: IFFALSE 65666
// exit ;
65664: GO 65784
// if IsInArea ( unit , area ) then
65666: LD_VAR 0 1
65670: PPUSH
65671: LD_VAR 0 2
65675: PPUSH
65676: CALL_OW 308
65680: IFFALSE 65698
// begin ComMoveToArea ( unit , goAway ) ;
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_VAR 0 3
65691: PPUSH
65692: CALL_OW 113
// exit ;
65696: GO 65784
// end ; if task [ 1 ] [ 1 ] <> M then
65698: LD_VAR 0 7
65702: PUSH
65703: LD_INT 1
65705: ARRAY
65706: PUSH
65707: LD_INT 1
65709: ARRAY
65710: PUSH
65711: LD_STRING M
65713: NONEQUAL
65714: IFFALSE 65718
// exit ;
65716: GO 65784
// x := task [ 1 ] [ 2 ] ;
65718: LD_ADDR_VAR 0 5
65722: PUSH
65723: LD_VAR 0 7
65727: PUSH
65728: LD_INT 1
65730: ARRAY
65731: PUSH
65732: LD_INT 2
65734: ARRAY
65735: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65736: LD_ADDR_VAR 0 6
65740: PUSH
65741: LD_VAR 0 7
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PUSH
65750: LD_INT 3
65752: ARRAY
65753: ST_TO_ADDR
// if InArea ( x , y , area ) then
65754: LD_VAR 0 5
65758: PPUSH
65759: LD_VAR 0 6
65763: PPUSH
65764: LD_VAR 0 2
65768: PPUSH
65769: CALL_OW 309
65773: IFFALSE 65784
// ComStop ( unit ) ;
65775: LD_VAR 0 1
65779: PPUSH
65780: CALL_OW 141
// end ;
65784: LD_VAR 0 4
65788: RET
// export function Abs ( value ) ; begin
65789: LD_INT 0
65791: PPUSH
// result := value ;
65792: LD_ADDR_VAR 0 2
65796: PUSH
65797: LD_VAR 0 1
65801: ST_TO_ADDR
// if value < 0 then
65802: LD_VAR 0 1
65806: PUSH
65807: LD_INT 0
65809: LESS
65810: IFFALSE 65827
// result := value * - 1 ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_VAR 0 1
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: MUL
65826: ST_TO_ADDR
// end ;
65827: LD_VAR 0 2
65831: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65832: LD_INT 0
65834: PPUSH
65835: PPUSH
65836: PPUSH
65837: PPUSH
65838: PPUSH
65839: PPUSH
65840: PPUSH
65841: PPUSH
// if not unit or not building then
65842: LD_VAR 0 1
65846: NOT
65847: PUSH
65848: LD_VAR 0 2
65852: NOT
65853: OR
65854: IFFALSE 65858
// exit ;
65856: GO 66084
// x := GetX ( building ) ;
65858: LD_ADDR_VAR 0 4
65862: PUSH
65863: LD_VAR 0 2
65867: PPUSH
65868: CALL_OW 250
65872: ST_TO_ADDR
// y := GetY ( building ) ;
65873: LD_ADDR_VAR 0 6
65877: PUSH
65878: LD_VAR 0 2
65882: PPUSH
65883: CALL_OW 251
65887: ST_TO_ADDR
// d := GetDir ( building ) ;
65888: LD_ADDR_VAR 0 8
65892: PUSH
65893: LD_VAR 0 2
65897: PPUSH
65898: CALL_OW 254
65902: ST_TO_ADDR
// r := 4 ;
65903: LD_ADDR_VAR 0 9
65907: PUSH
65908: LD_INT 4
65910: ST_TO_ADDR
// for i := 1 to 5 do
65911: LD_ADDR_VAR 0 10
65915: PUSH
65916: DOUBLE
65917: LD_INT 1
65919: DEC
65920: ST_TO_ADDR
65921: LD_INT 5
65923: PUSH
65924: FOR_TO
65925: IFFALSE 66082
// begin _x := ShiftX ( x , d , r + i ) ;
65927: LD_ADDR_VAR 0 5
65931: PUSH
65932: LD_VAR 0 4
65936: PPUSH
65937: LD_VAR 0 8
65941: PPUSH
65942: LD_VAR 0 9
65946: PUSH
65947: LD_VAR 0 10
65951: PLUS
65952: PPUSH
65953: CALL_OW 272
65957: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65958: LD_ADDR_VAR 0 7
65962: PUSH
65963: LD_VAR 0 6
65967: PPUSH
65968: LD_VAR 0 8
65972: PPUSH
65973: LD_VAR 0 9
65977: PUSH
65978: LD_VAR 0 10
65982: PLUS
65983: PPUSH
65984: CALL_OW 273
65988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65989: LD_VAR 0 5
65993: PPUSH
65994: LD_VAR 0 7
65998: PPUSH
65999: CALL_OW 488
66003: PUSH
66004: LD_VAR 0 5
66008: PPUSH
66009: LD_VAR 0 7
66013: PPUSH
66014: CALL_OW 428
66018: PPUSH
66019: CALL_OW 247
66023: PUSH
66024: LD_INT 3
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: IN
66034: NOT
66035: AND
66036: IFFALSE 66080
// begin ComMoveXY ( unit , _x , _y ) ;
66038: LD_VAR 0 1
66042: PPUSH
66043: LD_VAR 0 5
66047: PPUSH
66048: LD_VAR 0 7
66052: PPUSH
66053: CALL_OW 111
// result := [ _x , _y ] ;
66057: LD_ADDR_VAR 0 3
66061: PUSH
66062: LD_VAR 0 5
66066: PUSH
66067: LD_VAR 0 7
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: ST_TO_ADDR
// exit ;
66076: POP
66077: POP
66078: GO 66084
// end ; end ;
66080: GO 65924
66082: POP
66083: POP
// end ;
66084: LD_VAR 0 3
66088: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66089: LD_INT 0
66091: PPUSH
66092: PPUSH
66093: PPUSH
// result := 0 ;
66094: LD_ADDR_VAR 0 3
66098: PUSH
66099: LD_INT 0
66101: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66102: LD_VAR 0 1
66106: PUSH
66107: LD_INT 0
66109: LESS
66110: PUSH
66111: LD_VAR 0 1
66115: PUSH
66116: LD_INT 8
66118: GREATER
66119: OR
66120: PUSH
66121: LD_VAR 0 2
66125: PUSH
66126: LD_INT 0
66128: LESS
66129: OR
66130: PUSH
66131: LD_VAR 0 2
66135: PUSH
66136: LD_INT 8
66138: GREATER
66139: OR
66140: IFFALSE 66144
// exit ;
66142: GO 66219
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66144: LD_ADDR_VAR 0 4
66148: PUSH
66149: LD_INT 22
66151: PUSH
66152: LD_VAR 0 2
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PPUSH
66161: CALL_OW 69
66165: PUSH
66166: FOR_IN
66167: IFFALSE 66217
// begin un := UnitShoot ( i ) ;
66169: LD_ADDR_VAR 0 5
66173: PUSH
66174: LD_VAR 0 4
66178: PPUSH
66179: CALL_OW 504
66183: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66184: LD_VAR 0 5
66188: PPUSH
66189: CALL_OW 255
66193: PUSH
66194: LD_VAR 0 1
66198: EQUAL
66199: IFFALSE 66215
// begin result := un ;
66201: LD_ADDR_VAR 0 3
66205: PUSH
66206: LD_VAR 0 5
66210: ST_TO_ADDR
// exit ;
66211: POP
66212: POP
66213: GO 66219
// end ; end ;
66215: GO 66166
66217: POP
66218: POP
// end ;
66219: LD_VAR 0 3
66223: RET
// export function GetCargoBay ( units ) ; begin
66224: LD_INT 0
66226: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66227: LD_ADDR_VAR 0 2
66231: PUSH
66232: LD_VAR 0 1
66236: PPUSH
66237: LD_INT 2
66239: PUSH
66240: LD_INT 34
66242: PUSH
66243: LD_INT 12
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 34
66252: PUSH
66253: LD_INT 51
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 34
66262: PUSH
66263: LD_INT 32
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 34
66272: PUSH
66273: LD_INT 89
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: PPUSH
66287: CALL_OW 72
66291: ST_TO_ADDR
// end ;
66292: LD_VAR 0 2
66296: RET
// export function Negate ( value ) ; begin
66297: LD_INT 0
66299: PPUSH
// result := not value ;
66300: LD_ADDR_VAR 0 2
66304: PUSH
66305: LD_VAR 0 1
66309: NOT
66310: ST_TO_ADDR
// end ;
66311: LD_VAR 0 2
66315: RET
// export function Inc ( value ) ; begin
66316: LD_INT 0
66318: PPUSH
// result := value + 1 ;
66319: LD_ADDR_VAR 0 2
66323: PUSH
66324: LD_VAR 0 1
66328: PUSH
66329: LD_INT 1
66331: PLUS
66332: ST_TO_ADDR
// end ;
66333: LD_VAR 0 2
66337: RET
// export function Dec ( value ) ; begin
66338: LD_INT 0
66340: PPUSH
// result := value - 1 ;
66341: LD_ADDR_VAR 0 2
66345: PUSH
66346: LD_VAR 0 1
66350: PUSH
66351: LD_INT 1
66353: MINUS
66354: ST_TO_ADDR
// end ;
66355: LD_VAR 0 2
66359: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66360: LD_INT 0
66362: PPUSH
66363: PPUSH
66364: PPUSH
66365: PPUSH
66366: PPUSH
66367: PPUSH
66368: PPUSH
66369: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66370: LD_VAR 0 1
66374: PPUSH
66375: LD_VAR 0 2
66379: PPUSH
66380: CALL_OW 488
66384: NOT
66385: PUSH
66386: LD_VAR 0 3
66390: PPUSH
66391: LD_VAR 0 4
66395: PPUSH
66396: CALL_OW 488
66400: NOT
66401: OR
66402: IFFALSE 66415
// begin result := - 1 ;
66404: LD_ADDR_VAR 0 5
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: ST_TO_ADDR
// exit ;
66413: GO 66650
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66415: LD_ADDR_VAR 0 12
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: LD_VAR 0 2
66429: PPUSH
66430: LD_VAR 0 3
66434: PPUSH
66435: LD_VAR 0 4
66439: PPUSH
66440: CALL 65500 0 4
66444: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66445: LD_ADDR_VAR 0 11
66449: PUSH
66450: LD_VAR 0 1
66454: PPUSH
66455: LD_VAR 0 2
66459: PPUSH
66460: LD_VAR 0 12
66464: PUSH
66465: LD_INT 1
66467: ARRAY
66468: PPUSH
66469: LD_VAR 0 12
66473: PUSH
66474: LD_INT 2
66476: ARRAY
66477: PPUSH
66478: CALL_OW 298
66482: ST_TO_ADDR
// distance := 9999 ;
66483: LD_ADDR_VAR 0 10
66487: PUSH
66488: LD_INT 9999
66490: ST_TO_ADDR
// for i := 0 to 5 do
66491: LD_ADDR_VAR 0 6
66495: PUSH
66496: DOUBLE
66497: LD_INT 0
66499: DEC
66500: ST_TO_ADDR
66501: LD_INT 5
66503: PUSH
66504: FOR_TO
66505: IFFALSE 66648
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66507: LD_ADDR_VAR 0 7
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: LD_VAR 0 6
66521: PPUSH
66522: LD_VAR 0 11
66526: PPUSH
66527: CALL_OW 272
66531: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66532: LD_ADDR_VAR 0 8
66536: PUSH
66537: LD_VAR 0 2
66541: PPUSH
66542: LD_VAR 0 6
66546: PPUSH
66547: LD_VAR 0 11
66551: PPUSH
66552: CALL_OW 273
66556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66557: LD_VAR 0 7
66561: PPUSH
66562: LD_VAR 0 8
66566: PPUSH
66567: CALL_OW 488
66571: NOT
66572: IFFALSE 66576
// continue ;
66574: GO 66504
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66576: LD_ADDR_VAR 0 9
66580: PUSH
66581: LD_VAR 0 12
66585: PUSH
66586: LD_INT 1
66588: ARRAY
66589: PPUSH
66590: LD_VAR 0 12
66594: PUSH
66595: LD_INT 2
66597: ARRAY
66598: PPUSH
66599: LD_VAR 0 7
66603: PPUSH
66604: LD_VAR 0 8
66608: PPUSH
66609: CALL_OW 298
66613: ST_TO_ADDR
// if tmp < distance then
66614: LD_VAR 0 9
66618: PUSH
66619: LD_VAR 0 10
66623: LESS
66624: IFFALSE 66646
// begin result := i ;
66626: LD_ADDR_VAR 0 5
66630: PUSH
66631: LD_VAR 0 6
66635: ST_TO_ADDR
// distance := tmp ;
66636: LD_ADDR_VAR 0 10
66640: PUSH
66641: LD_VAR 0 9
66645: ST_TO_ADDR
// end ; end ;
66646: GO 66504
66648: POP
66649: POP
// end ;
66650: LD_VAR 0 5
66654: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66655: LD_INT 0
66657: PPUSH
66658: PPUSH
// if not driver or not IsInUnit ( driver ) then
66659: LD_VAR 0 1
66663: NOT
66664: PUSH
66665: LD_VAR 0 1
66669: PPUSH
66670: CALL_OW 310
66674: NOT
66675: OR
66676: IFFALSE 66680
// exit ;
66678: GO 66770
// vehicle := IsInUnit ( driver ) ;
66680: LD_ADDR_VAR 0 3
66684: PUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 310
66694: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66695: LD_VAR 0 1
66699: PPUSH
66700: LD_STRING \
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: PUSH
66730: LD_STRING E
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_VAR 0 3
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PPUSH
66766: CALL_OW 446
// end ;
66770: LD_VAR 0 2
66774: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66775: LD_INT 0
66777: PPUSH
66778: PPUSH
// if not driver or not IsInUnit ( driver ) then
66779: LD_VAR 0 1
66783: NOT
66784: PUSH
66785: LD_VAR 0 1
66789: PPUSH
66790: CALL_OW 310
66794: NOT
66795: OR
66796: IFFALSE 66800
// exit ;
66798: GO 66890
// vehicle := IsInUnit ( driver ) ;
66800: LD_ADDR_VAR 0 3
66804: PUSH
66805: LD_VAR 0 1
66809: PPUSH
66810: CALL_OW 310
66814: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66815: LD_VAR 0 1
66819: PPUSH
66820: LD_STRING \
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 0
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: PUSH
66850: LD_STRING E
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_VAR 0 3
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PPUSH
66886: CALL_OW 447
// end ;
66890: LD_VAR 0 2
66894: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66895: LD_INT 0
66897: PPUSH
66898: PPUSH
66899: PPUSH
// tmp := [ ] ;
66900: LD_ADDR_VAR 0 5
66904: PUSH
66905: EMPTY
66906: ST_TO_ADDR
// for i in units do
66907: LD_ADDR_VAR 0 4
66911: PUSH
66912: LD_VAR 0 1
66916: PUSH
66917: FOR_IN
66918: IFFALSE 66956
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66920: LD_ADDR_VAR 0 5
66924: PUSH
66925: LD_VAR 0 5
66929: PPUSH
66930: LD_VAR 0 5
66934: PUSH
66935: LD_INT 1
66937: PLUS
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: CALL_OW 256
66948: PPUSH
66949: CALL_OW 2
66953: ST_TO_ADDR
66954: GO 66917
66956: POP
66957: POP
// if not tmp then
66958: LD_VAR 0 5
66962: NOT
66963: IFFALSE 66967
// exit ;
66965: GO 67015
// if asc then
66967: LD_VAR 0 2
66971: IFFALSE 66995
// result := SortListByListAsc ( units , tmp ) else
66973: LD_ADDR_VAR 0 3
66977: PUSH
66978: LD_VAR 0 1
66982: PPUSH
66983: LD_VAR 0 5
66987: PPUSH
66988: CALL_OW 76
66992: ST_TO_ADDR
66993: GO 67015
// result := SortListByListDesc ( units , tmp ) ;
66995: LD_ADDR_VAR 0 3
66999: PUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: LD_VAR 0 5
67009: PPUSH
67010: CALL_OW 77
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 3
67019: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
// task := GetTaskList ( mech ) ;
67024: LD_ADDR_VAR 0 4
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 437
67038: ST_TO_ADDR
// if not task then
67039: LD_VAR 0 4
67043: NOT
67044: IFFALSE 67048
// exit ;
67046: GO 67090
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67048: LD_ADDR_VAR 0 3
67052: PUSH
67053: LD_VAR 0 4
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PUSH
67062: LD_INT 1
67064: ARRAY
67065: PUSH
67066: LD_STRING r
67068: EQUAL
67069: PUSH
67070: LD_VAR 0 4
67074: PUSH
67075: LD_INT 1
67077: ARRAY
67078: PUSH
67079: LD_INT 4
67081: ARRAY
67082: PUSH
67083: LD_VAR 0 2
67087: EQUAL
67088: AND
67089: ST_TO_ADDR
// end ;
67090: LD_VAR 0 3
67094: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67095: LD_INT 0
67097: PPUSH
// SetDir ( unit , d ) ;
67098: LD_VAR 0 1
67102: PPUSH
67103: LD_VAR 0 4
67107: PPUSH
67108: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67112: LD_ADDR_VAR 0 6
67116: PUSH
67117: LD_VAR 0 1
67121: PPUSH
67122: LD_VAR 0 2
67126: PPUSH
67127: LD_VAR 0 3
67131: PPUSH
67132: LD_VAR 0 5
67136: PPUSH
67137: CALL_OW 48
67141: ST_TO_ADDR
// end ;
67142: LD_VAR 0 6
67146: RET
// export function ToNaturalNumber ( number ) ; begin
67147: LD_INT 0
67149: PPUSH
// result := number div 1 ;
67150: LD_ADDR_VAR 0 2
67154: PUSH
67155: LD_VAR 0 1
67159: PUSH
67160: LD_INT 1
67162: DIV
67163: ST_TO_ADDR
// if number < 0 then
67164: LD_VAR 0 1
67168: PUSH
67169: LD_INT 0
67171: LESS
67172: IFFALSE 67182
// result := 0 ;
67174: LD_ADDR_VAR 0 2
67178: PUSH
67179: LD_INT 0
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function SortByClass ( units , class ) ; var un ; begin
67187: LD_INT 0
67189: PPUSH
67190: PPUSH
// if not units or not class then
67191: LD_VAR 0 1
67195: NOT
67196: PUSH
67197: LD_VAR 0 2
67201: NOT
67202: OR
67203: IFFALSE 67207
// exit ;
67205: GO 67302
// result := [ ] ;
67207: LD_ADDR_VAR 0 3
67211: PUSH
67212: EMPTY
67213: ST_TO_ADDR
// for un in units do
67214: LD_ADDR_VAR 0 4
67218: PUSH
67219: LD_VAR 0 1
67223: PUSH
67224: FOR_IN
67225: IFFALSE 67300
// if GetClass ( un ) = class then
67227: LD_VAR 0 4
67231: PPUSH
67232: CALL_OW 257
67236: PUSH
67237: LD_VAR 0 2
67241: EQUAL
67242: IFFALSE 67269
// result := Insert ( result , 1 , un ) else
67244: LD_ADDR_VAR 0 3
67248: PUSH
67249: LD_VAR 0 3
67253: PPUSH
67254: LD_INT 1
67256: PPUSH
67257: LD_VAR 0 4
67261: PPUSH
67262: CALL_OW 2
67266: ST_TO_ADDR
67267: GO 67298
// result := Replace ( result , result + 1 , un ) ;
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 3
67278: PPUSH
67279: LD_VAR 0 3
67283: PUSH
67284: LD_INT 1
67286: PLUS
67287: PPUSH
67288: LD_VAR 0 4
67292: PPUSH
67293: CALL_OW 1
67297: ST_TO_ADDR
67298: GO 67224
67300: POP
67301: POP
// end ;
67302: LD_VAR 0 3
67306: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67307: LD_INT 0
67309: PPUSH
67310: PPUSH
67311: PPUSH
67312: PPUSH
67313: PPUSH
67314: PPUSH
67315: PPUSH
// result := [ ] ;
67316: LD_ADDR_VAR 0 4
67320: PUSH
67321: EMPTY
67322: ST_TO_ADDR
// if x - r < 0 then
67323: LD_VAR 0 1
67327: PUSH
67328: LD_VAR 0 3
67332: MINUS
67333: PUSH
67334: LD_INT 0
67336: LESS
67337: IFFALSE 67349
// min_x := 0 else
67339: LD_ADDR_VAR 0 8
67343: PUSH
67344: LD_INT 0
67346: ST_TO_ADDR
67347: GO 67365
// min_x := x - r ;
67349: LD_ADDR_VAR 0 8
67353: PUSH
67354: LD_VAR 0 1
67358: PUSH
67359: LD_VAR 0 3
67363: MINUS
67364: ST_TO_ADDR
// if y - r < 0 then
67365: LD_VAR 0 2
67369: PUSH
67370: LD_VAR 0 3
67374: MINUS
67375: PUSH
67376: LD_INT 0
67378: LESS
67379: IFFALSE 67391
// min_y := 0 else
67381: LD_ADDR_VAR 0 7
67385: PUSH
67386: LD_INT 0
67388: ST_TO_ADDR
67389: GO 67407
// min_y := y - r ;
67391: LD_ADDR_VAR 0 7
67395: PUSH
67396: LD_VAR 0 2
67400: PUSH
67401: LD_VAR 0 3
67405: MINUS
67406: ST_TO_ADDR
// max_x := x + r ;
67407: LD_ADDR_VAR 0 9
67411: PUSH
67412: LD_VAR 0 1
67416: PUSH
67417: LD_VAR 0 3
67421: PLUS
67422: ST_TO_ADDR
// max_y := y + r ;
67423: LD_ADDR_VAR 0 10
67427: PUSH
67428: LD_VAR 0 2
67432: PUSH
67433: LD_VAR 0 3
67437: PLUS
67438: ST_TO_ADDR
// for _x = min_x to max_x do
67439: LD_ADDR_VAR 0 5
67443: PUSH
67444: DOUBLE
67445: LD_VAR 0 8
67449: DEC
67450: ST_TO_ADDR
67451: LD_VAR 0 9
67455: PUSH
67456: FOR_TO
67457: IFFALSE 67558
// for _y = min_y to max_y do
67459: LD_ADDR_VAR 0 6
67463: PUSH
67464: DOUBLE
67465: LD_VAR 0 7
67469: DEC
67470: ST_TO_ADDR
67471: LD_VAR 0 10
67475: PUSH
67476: FOR_TO
67477: IFFALSE 67554
// begin if not ValidHex ( _x , _y ) then
67479: LD_VAR 0 5
67483: PPUSH
67484: LD_VAR 0 6
67488: PPUSH
67489: CALL_OW 488
67493: NOT
67494: IFFALSE 67498
// continue ;
67496: GO 67476
// if GetResourceTypeXY ( _x , _y ) then
67498: LD_VAR 0 5
67502: PPUSH
67503: LD_VAR 0 6
67507: PPUSH
67508: CALL_OW 283
67512: IFFALSE 67552
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67514: LD_ADDR_VAR 0 4
67518: PUSH
67519: LD_VAR 0 4
67523: PPUSH
67524: LD_VAR 0 4
67528: PUSH
67529: LD_INT 1
67531: PLUS
67532: PPUSH
67533: LD_VAR 0 5
67537: PUSH
67538: LD_VAR 0 6
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PPUSH
67547: CALL_OW 1
67551: ST_TO_ADDR
// end ;
67552: GO 67476
67554: POP
67555: POP
67556: GO 67456
67558: POP
67559: POP
// end ;
67560: LD_VAR 0 4
67564: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
67570: PPUSH
67571: PPUSH
67572: PPUSH
67573: PPUSH
67574: PPUSH
// if not units then
67575: LD_VAR 0 1
67579: NOT
67580: IFFALSE 67584
// exit ;
67582: GO 68112
// result := UnitFilter ( units , [ f_ok ] ) ;
67584: LD_ADDR_VAR 0 3
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_INT 50
67596: PUSH
67597: EMPTY
67598: LIST
67599: PPUSH
67600: CALL_OW 72
67604: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67605: LD_ADDR_VAR 0 8
67609: PUSH
67610: LD_VAR 0 1
67614: PUSH
67615: LD_INT 1
67617: ARRAY
67618: PPUSH
67619: CALL_OW 255
67623: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67624: LD_ADDR_VAR 0 10
67628: PUSH
67629: LD_INT 29
67631: PUSH
67632: LD_INT 91
67634: PUSH
67635: LD_INT 49
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: LIST
67642: ST_TO_ADDR
// if not result then
67643: LD_VAR 0 3
67647: NOT
67648: IFFALSE 67652
// exit ;
67650: GO 68112
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67652: LD_ADDR_VAR 0 5
67656: PUSH
67657: LD_INT 81
67659: PUSH
67660: LD_VAR 0 8
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PPUSH
67669: CALL_OW 69
67673: ST_TO_ADDR
// for i in result do
67674: LD_ADDR_VAR 0 4
67678: PUSH
67679: LD_VAR 0 3
67683: PUSH
67684: FOR_IN
67685: IFFALSE 68110
// begin tag := GetTag ( i ) + 1 ;
67687: LD_ADDR_VAR 0 9
67691: PUSH
67692: LD_VAR 0 4
67696: PPUSH
67697: CALL_OW 110
67701: PUSH
67702: LD_INT 1
67704: PLUS
67705: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67706: LD_ADDR_VAR 0 7
67710: PUSH
67711: LD_VAR 0 4
67715: PPUSH
67716: CALL_OW 250
67720: PPUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: CALL_OW 251
67730: PPUSH
67731: LD_INT 4
67733: PPUSH
67734: CALL 67307 0 3
67738: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67739: LD_VAR 0 4
67743: PPUSH
67744: CALL_OW 247
67748: PUSH
67749: LD_INT 2
67751: EQUAL
67752: PUSH
67753: LD_VAR 0 7
67757: PUSH
67758: LD_INT 2
67760: GREATER
67761: AND
67762: PUSH
67763: LD_VAR 0 4
67767: PPUSH
67768: CALL_OW 264
67772: PUSH
67773: LD_VAR 0 10
67777: IN
67778: NOT
67779: AND
67780: IFFALSE 67819
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67782: LD_VAR 0 4
67786: PPUSH
67787: LD_VAR 0 7
67791: PUSH
67792: LD_INT 1
67794: ARRAY
67795: PUSH
67796: LD_INT 1
67798: ARRAY
67799: PPUSH
67800: LD_VAR 0 7
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PUSH
67809: LD_INT 2
67811: ARRAY
67812: PPUSH
67813: CALL_OW 116
67817: GO 68108
// if path > tag then
67819: LD_VAR 0 2
67823: PUSH
67824: LD_VAR 0 9
67828: GREATER
67829: IFFALSE 68037
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67831: LD_ADDR_VAR 0 6
67835: PUSH
67836: LD_VAR 0 5
67840: PPUSH
67841: LD_INT 91
67843: PUSH
67844: LD_VAR 0 4
67848: PUSH
67849: LD_INT 8
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: PPUSH
67857: CALL_OW 72
67861: ST_TO_ADDR
// if nearEnemy then
67862: LD_VAR 0 6
67866: IFFALSE 67935
// begin if GetWeapon ( i ) = ru_time_lapser then
67868: LD_VAR 0 4
67872: PPUSH
67873: CALL_OW 264
67877: PUSH
67878: LD_INT 49
67880: EQUAL
67881: IFFALSE 67909
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67883: LD_VAR 0 4
67887: PPUSH
67888: LD_VAR 0 6
67892: PPUSH
67893: LD_VAR 0 4
67897: PPUSH
67898: CALL_OW 74
67902: PPUSH
67903: CALL_OW 112
67907: GO 67933
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67909: LD_VAR 0 4
67913: PPUSH
67914: LD_VAR 0 6
67918: PPUSH
67919: LD_VAR 0 4
67923: PPUSH
67924: CALL_OW 74
67928: PPUSH
67929: CALL 69183 0 2
// end else
67933: GO 68035
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67935: LD_VAR 0 4
67939: PPUSH
67940: LD_VAR 0 2
67944: PUSH
67945: LD_VAR 0 9
67949: ARRAY
67950: PUSH
67951: LD_INT 1
67953: ARRAY
67954: PPUSH
67955: LD_VAR 0 2
67959: PUSH
67960: LD_VAR 0 9
67964: ARRAY
67965: PUSH
67966: LD_INT 2
67968: ARRAY
67969: PPUSH
67970: CALL_OW 297
67974: PUSH
67975: LD_INT 6
67977: GREATER
67978: IFFALSE 68021
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67980: LD_VAR 0 4
67984: PPUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_VAR 0 9
67994: ARRAY
67995: PUSH
67996: LD_INT 1
67998: ARRAY
67999: PPUSH
68000: LD_VAR 0 2
68004: PUSH
68005: LD_VAR 0 9
68009: ARRAY
68010: PUSH
68011: LD_INT 2
68013: ARRAY
68014: PPUSH
68015: CALL_OW 114
68019: GO 68035
// SetTag ( i , tag ) ;
68021: LD_VAR 0 4
68025: PPUSH
68026: LD_VAR 0 9
68030: PPUSH
68031: CALL_OW 109
// end else
68035: GO 68108
// if enemy then
68037: LD_VAR 0 5
68041: IFFALSE 68108
// begin if GetWeapon ( i ) = ru_time_lapser then
68043: LD_VAR 0 4
68047: PPUSH
68048: CALL_OW 264
68052: PUSH
68053: LD_INT 49
68055: EQUAL
68056: IFFALSE 68084
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68058: LD_VAR 0 4
68062: PPUSH
68063: LD_VAR 0 5
68067: PPUSH
68068: LD_VAR 0 4
68072: PPUSH
68073: CALL_OW 74
68077: PPUSH
68078: CALL_OW 112
68082: GO 68108
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68084: LD_VAR 0 4
68088: PPUSH
68089: LD_VAR 0 5
68093: PPUSH
68094: LD_VAR 0 4
68098: PPUSH
68099: CALL_OW 74
68103: PPUSH
68104: CALL 69183 0 2
// end ; end ;
68108: GO 67684
68110: POP
68111: POP
// end ;
68112: LD_VAR 0 3
68116: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68117: LD_INT 0
68119: PPUSH
68120: PPUSH
68121: PPUSH
// if not unit or IsInUnit ( unit ) then
68122: LD_VAR 0 1
68126: NOT
68127: PUSH
68128: LD_VAR 0 1
68132: PPUSH
68133: CALL_OW 310
68137: OR
68138: IFFALSE 68142
// exit ;
68140: GO 68233
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68142: LD_ADDR_VAR 0 4
68146: PUSH
68147: LD_VAR 0 1
68151: PPUSH
68152: CALL_OW 250
68156: PPUSH
68157: LD_VAR 0 2
68161: PPUSH
68162: LD_INT 1
68164: PPUSH
68165: CALL_OW 272
68169: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68170: LD_ADDR_VAR 0 5
68174: PUSH
68175: LD_VAR 0 1
68179: PPUSH
68180: CALL_OW 251
68184: PPUSH
68185: LD_VAR 0 2
68189: PPUSH
68190: LD_INT 1
68192: PPUSH
68193: CALL_OW 273
68197: ST_TO_ADDR
// if ValidHex ( x , y ) then
68198: LD_VAR 0 4
68202: PPUSH
68203: LD_VAR 0 5
68207: PPUSH
68208: CALL_OW 488
68212: IFFALSE 68233
// ComTurnXY ( unit , x , y ) ;
68214: LD_VAR 0 1
68218: PPUSH
68219: LD_VAR 0 4
68223: PPUSH
68224: LD_VAR 0 5
68228: PPUSH
68229: CALL_OW 118
// end ;
68233: LD_VAR 0 3
68237: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68238: LD_INT 0
68240: PPUSH
68241: PPUSH
// result := false ;
68242: LD_ADDR_VAR 0 3
68246: PUSH
68247: LD_INT 0
68249: ST_TO_ADDR
// if not units then
68250: LD_VAR 0 2
68254: NOT
68255: IFFALSE 68259
// exit ;
68257: GO 68304
// for i in units do
68259: LD_ADDR_VAR 0 4
68263: PUSH
68264: LD_VAR 0 2
68268: PUSH
68269: FOR_IN
68270: IFFALSE 68302
// if See ( side , i ) then
68272: LD_VAR 0 1
68276: PPUSH
68277: LD_VAR 0 4
68281: PPUSH
68282: CALL_OW 292
68286: IFFALSE 68300
// begin result := true ;
68288: LD_ADDR_VAR 0 3
68292: PUSH
68293: LD_INT 1
68295: ST_TO_ADDR
// exit ;
68296: POP
68297: POP
68298: GO 68304
// end ;
68300: GO 68269
68302: POP
68303: POP
// end ;
68304: LD_VAR 0 3
68308: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68309: LD_INT 0
68311: PPUSH
68312: PPUSH
68313: PPUSH
68314: PPUSH
// if not unit or not points then
68315: LD_VAR 0 1
68319: NOT
68320: PUSH
68321: LD_VAR 0 2
68325: NOT
68326: OR
68327: IFFALSE 68331
// exit ;
68329: GO 68421
// dist := 99999 ;
68331: LD_ADDR_VAR 0 5
68335: PUSH
68336: LD_INT 99999
68338: ST_TO_ADDR
// for i in points do
68339: LD_ADDR_VAR 0 4
68343: PUSH
68344: LD_VAR 0 2
68348: PUSH
68349: FOR_IN
68350: IFFALSE 68419
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68352: LD_ADDR_VAR 0 6
68356: PUSH
68357: LD_VAR 0 1
68361: PPUSH
68362: LD_VAR 0 4
68366: PUSH
68367: LD_INT 1
68369: ARRAY
68370: PPUSH
68371: LD_VAR 0 4
68375: PUSH
68376: LD_INT 2
68378: ARRAY
68379: PPUSH
68380: CALL_OW 297
68384: ST_TO_ADDR
// if tmpDist < dist then
68385: LD_VAR 0 6
68389: PUSH
68390: LD_VAR 0 5
68394: LESS
68395: IFFALSE 68417
// begin result := i ;
68397: LD_ADDR_VAR 0 3
68401: PUSH
68402: LD_VAR 0 4
68406: ST_TO_ADDR
// dist := tmpDist ;
68407: LD_ADDR_VAR 0 5
68411: PUSH
68412: LD_VAR 0 6
68416: ST_TO_ADDR
// end ; end ;
68417: GO 68349
68419: POP
68420: POP
// end ;
68421: LD_VAR 0 3
68425: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68426: LD_INT 0
68428: PPUSH
// uc_side := side ;
68429: LD_ADDR_OWVAR 20
68433: PUSH
68434: LD_VAR 0 1
68438: ST_TO_ADDR
// uc_nation := 3 ;
68439: LD_ADDR_OWVAR 21
68443: PUSH
68444: LD_INT 3
68446: ST_TO_ADDR
// vc_chassis := 25 ;
68447: LD_ADDR_OWVAR 37
68451: PUSH
68452: LD_INT 25
68454: ST_TO_ADDR
// vc_engine := engine_siberite ;
68455: LD_ADDR_OWVAR 39
68459: PUSH
68460: LD_INT 3
68462: ST_TO_ADDR
// vc_control := control_computer ;
68463: LD_ADDR_OWVAR 38
68467: PUSH
68468: LD_INT 3
68470: ST_TO_ADDR
// vc_weapon := 59 ;
68471: LD_ADDR_OWVAR 40
68475: PUSH
68476: LD_INT 59
68478: ST_TO_ADDR
// result := CreateVehicle ;
68479: LD_ADDR_VAR 0 5
68483: PUSH
68484: CALL_OW 45
68488: ST_TO_ADDR
// SetDir ( result , d ) ;
68489: LD_VAR 0 5
68493: PPUSH
68494: LD_VAR 0 4
68498: PPUSH
68499: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68503: LD_VAR 0 5
68507: PPUSH
68508: LD_VAR 0 2
68512: PPUSH
68513: LD_VAR 0 3
68517: PPUSH
68518: LD_INT 0
68520: PPUSH
68521: CALL_OW 48
// end ;
68525: LD_VAR 0 5
68529: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68530: LD_INT 0
68532: PPUSH
68533: PPUSH
68534: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68535: LD_ADDR_VAR 0 2
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68558: LD_VAR 0 1
68562: NOT
68563: PUSH
68564: LD_VAR 0 1
68568: PPUSH
68569: CALL_OW 264
68573: PUSH
68574: LD_INT 12
68576: PUSH
68577: LD_INT 51
68579: PUSH
68580: LD_INT 32
68582: PUSH
68583: LD_INT 89
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: IN
68592: NOT
68593: OR
68594: IFFALSE 68598
// exit ;
68596: GO 68696
// for i := 1 to 3 do
68598: LD_ADDR_VAR 0 3
68602: PUSH
68603: DOUBLE
68604: LD_INT 1
68606: DEC
68607: ST_TO_ADDR
68608: LD_INT 3
68610: PUSH
68611: FOR_TO
68612: IFFALSE 68694
// begin tmp := GetCargo ( cargo , i ) ;
68614: LD_ADDR_VAR 0 4
68618: PUSH
68619: LD_VAR 0 1
68623: PPUSH
68624: LD_VAR 0 3
68628: PPUSH
68629: CALL_OW 289
68633: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68634: LD_ADDR_VAR 0 2
68638: PUSH
68639: LD_VAR 0 2
68643: PPUSH
68644: LD_VAR 0 3
68648: PPUSH
68649: LD_VAR 0 4
68653: PPUSH
68654: CALL_OW 1
68658: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68659: LD_ADDR_VAR 0 2
68663: PUSH
68664: LD_VAR 0 2
68668: PPUSH
68669: LD_INT 4
68671: PPUSH
68672: LD_VAR 0 2
68676: PUSH
68677: LD_INT 4
68679: ARRAY
68680: PUSH
68681: LD_VAR 0 4
68685: PLUS
68686: PPUSH
68687: CALL_OW 1
68691: ST_TO_ADDR
// end ;
68692: GO 68611
68694: POP
68695: POP
// end ;
68696: LD_VAR 0 2
68700: RET
// export function Length ( array ) ; begin
68701: LD_INT 0
68703: PPUSH
// result := array + 0 ;
68704: LD_ADDR_VAR 0 2
68708: PUSH
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 0
68716: PLUS
68717: ST_TO_ADDR
// end ;
68718: LD_VAR 0 2
68722: RET
// export function PrepareArray ( array ) ; begin
68723: LD_INT 0
68725: PPUSH
// result := array diff 0 ;
68726: LD_ADDR_VAR 0 2
68730: PUSH
68731: LD_VAR 0 1
68735: PUSH
68736: LD_INT 0
68738: DIFF
68739: ST_TO_ADDR
// if not result [ 1 ] then
68740: LD_VAR 0 2
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: NOT
68749: IFFALSE 68769
// result := Delete ( result , 1 ) ;
68751: LD_ADDR_VAR 0 2
68755: PUSH
68756: LD_VAR 0 2
68760: PPUSH
68761: LD_INT 1
68763: PPUSH
68764: CALL_OW 3
68768: ST_TO_ADDR
// end ;
68769: LD_VAR 0 2
68773: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68774: LD_INT 0
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
// sibRocketRange := 25 ;
68780: LD_ADDR_VAR 0 6
68784: PUSH
68785: LD_INT 25
68787: ST_TO_ADDR
// result := false ;
68788: LD_ADDR_VAR 0 4
68792: PUSH
68793: LD_INT 0
68795: ST_TO_ADDR
// for i := 0 to 5 do
68796: LD_ADDR_VAR 0 5
68800: PUSH
68801: DOUBLE
68802: LD_INT 0
68804: DEC
68805: ST_TO_ADDR
68806: LD_INT 5
68808: PUSH
68809: FOR_TO
68810: IFFALSE 68877
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68812: LD_VAR 0 1
68816: PPUSH
68817: LD_VAR 0 5
68821: PPUSH
68822: LD_VAR 0 6
68826: PPUSH
68827: CALL_OW 272
68831: PPUSH
68832: LD_VAR 0 2
68836: PPUSH
68837: LD_VAR 0 5
68841: PPUSH
68842: LD_VAR 0 6
68846: PPUSH
68847: CALL_OW 273
68851: PPUSH
68852: LD_VAR 0 3
68856: PPUSH
68857: CALL_OW 309
68861: IFFALSE 68875
// begin result := true ;
68863: LD_ADDR_VAR 0 4
68867: PUSH
68868: LD_INT 1
68870: ST_TO_ADDR
// exit ;
68871: POP
68872: POP
68873: GO 68879
// end ;
68875: GO 68809
68877: POP
68878: POP
// end ;
68879: LD_VAR 0 4
68883: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68884: LD_INT 0
68886: PPUSH
68887: PPUSH
68888: PPUSH
// if btype = b_depot then
68889: LD_VAR 0 2
68893: PUSH
68894: LD_INT 0
68896: EQUAL
68897: IFFALSE 68909
// begin result := true ;
68899: LD_ADDR_VAR 0 3
68903: PUSH
68904: LD_INT 1
68906: ST_TO_ADDR
// exit ;
68907: GO 69025
// end ; pom := GetBase ( depot ) ;
68909: LD_ADDR_VAR 0 4
68913: PUSH
68914: LD_VAR 0 1
68918: PPUSH
68919: CALL_OW 274
68923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68924: LD_ADDR_VAR 0 5
68928: PUSH
68929: LD_VAR 0 2
68933: PPUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: CALL_OW 248
68943: PPUSH
68944: CALL_OW 450
68948: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68949: LD_ADDR_VAR 0 3
68953: PUSH
68954: LD_VAR 0 4
68958: PPUSH
68959: LD_INT 1
68961: PPUSH
68962: CALL_OW 275
68966: PUSH
68967: LD_VAR 0 5
68971: PUSH
68972: LD_INT 1
68974: ARRAY
68975: GREATEREQUAL
68976: PUSH
68977: LD_VAR 0 4
68981: PPUSH
68982: LD_INT 2
68984: PPUSH
68985: CALL_OW 275
68989: PUSH
68990: LD_VAR 0 5
68994: PUSH
68995: LD_INT 2
68997: ARRAY
68998: GREATEREQUAL
68999: AND
69000: PUSH
69001: LD_VAR 0 4
69005: PPUSH
69006: LD_INT 3
69008: PPUSH
69009: CALL_OW 275
69013: PUSH
69014: LD_VAR 0 5
69018: PUSH
69019: LD_INT 3
69021: ARRAY
69022: GREATEREQUAL
69023: AND
69024: ST_TO_ADDR
// end ;
69025: LD_VAR 0 3
69029: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69030: LD_INT 0
69032: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69033: LD_VAR 0 1
69037: PPUSH
69038: LD_VAR 0 2
69042: PPUSH
69043: LD_INT 0
69045: PPUSH
69046: LD_INT 0
69048: PPUSH
69049: LD_INT 1
69051: PPUSH
69052: LD_INT 0
69054: PPUSH
69055: CALL_OW 587
// end ;
69059: LD_VAR 0 3
69063: RET
// export function CenterOnNow ( unit ) ; begin
69064: LD_INT 0
69066: PPUSH
// result := IsInUnit ( unit ) ;
69067: LD_ADDR_VAR 0 2
69071: PUSH
69072: LD_VAR 0 1
69076: PPUSH
69077: CALL_OW 310
69081: ST_TO_ADDR
// if not result then
69082: LD_VAR 0 2
69086: NOT
69087: IFFALSE 69099
// result := unit ;
69089: LD_ADDR_VAR 0 2
69093: PUSH
69094: LD_VAR 0 1
69098: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69099: LD_VAR 0 1
69103: PPUSH
69104: CALL_OW 87
// end ;
69108: LD_VAR 0 2
69112: RET
// export function ComMoveHex ( unit , hex ) ; begin
69113: LD_INT 0
69115: PPUSH
// if not hex then
69116: LD_VAR 0 2
69120: NOT
69121: IFFALSE 69125
// exit ;
69123: GO 69178
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69125: LD_VAR 0 2
69129: PUSH
69130: LD_INT 1
69132: ARRAY
69133: PPUSH
69134: LD_VAR 0 2
69138: PUSH
69139: LD_INT 2
69141: ARRAY
69142: PPUSH
69143: CALL_OW 428
69147: IFFALSE 69151
// exit ;
69149: GO 69178
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69151: LD_VAR 0 1
69155: PPUSH
69156: LD_VAR 0 2
69160: PUSH
69161: LD_INT 1
69163: ARRAY
69164: PPUSH
69165: LD_VAR 0 2
69169: PUSH
69170: LD_INT 2
69172: ARRAY
69173: PPUSH
69174: CALL_OW 111
// end ;
69178: LD_VAR 0 3
69182: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69183: LD_INT 0
69185: PPUSH
69186: PPUSH
69187: PPUSH
// if not unit or not enemy then
69188: LD_VAR 0 1
69192: NOT
69193: PUSH
69194: LD_VAR 0 2
69198: NOT
69199: OR
69200: IFFALSE 69204
// exit ;
69202: GO 69328
// x := GetX ( enemy ) ;
69204: LD_ADDR_VAR 0 4
69208: PUSH
69209: LD_VAR 0 2
69213: PPUSH
69214: CALL_OW 250
69218: ST_TO_ADDR
// y := GetY ( enemy ) ;
69219: LD_ADDR_VAR 0 5
69223: PUSH
69224: LD_VAR 0 2
69228: PPUSH
69229: CALL_OW 251
69233: ST_TO_ADDR
// if ValidHex ( x , y ) then
69234: LD_VAR 0 4
69238: PPUSH
69239: LD_VAR 0 5
69243: PPUSH
69244: CALL_OW 488
69248: IFFALSE 69328
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69250: LD_VAR 0 2
69254: PPUSH
69255: CALL_OW 247
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: LD_INT 2
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: IN
69270: PUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 255
69280: PPUSH
69281: LD_VAR 0 2
69285: PPUSH
69286: CALL_OW 292
69290: OR
69291: IFFALSE 69309
// ComAttackUnit ( unit , enemy ) else
69293: LD_VAR 0 1
69297: PPUSH
69298: LD_VAR 0 2
69302: PPUSH
69303: CALL_OW 115
69307: GO 69328
// ComAgressiveMove ( unit , x , y ) ;
69309: LD_VAR 0 1
69313: PPUSH
69314: LD_VAR 0 4
69318: PPUSH
69319: LD_VAR 0 5
69323: PPUSH
69324: CALL_OW 114
// end ;
69328: LD_VAR 0 3
69332: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69333: LD_INT 0
69335: PPUSH
69336: PPUSH
69337: PPUSH
// list := AreaToList ( area , 0 ) ;
69338: LD_ADDR_VAR 0 5
69342: PUSH
69343: LD_VAR 0 1
69347: PPUSH
69348: LD_INT 0
69350: PPUSH
69351: CALL_OW 517
69355: ST_TO_ADDR
// if not list then
69356: LD_VAR 0 5
69360: NOT
69361: IFFALSE 69365
// exit ;
69363: GO 69495
// if all then
69365: LD_VAR 0 2
69369: IFFALSE 69457
// begin for i := 1 to list [ 1 ] do
69371: LD_ADDR_VAR 0 4
69375: PUSH
69376: DOUBLE
69377: LD_INT 1
69379: DEC
69380: ST_TO_ADDR
69381: LD_VAR 0 5
69385: PUSH
69386: LD_INT 1
69388: ARRAY
69389: PUSH
69390: FOR_TO
69391: IFFALSE 69453
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69393: LD_ADDR_VAR 0 3
69397: PUSH
69398: LD_VAR 0 3
69402: PPUSH
69403: LD_VAR 0 3
69407: PUSH
69408: LD_INT 1
69410: PLUS
69411: PPUSH
69412: LD_VAR 0 5
69416: PUSH
69417: LD_INT 1
69419: ARRAY
69420: PUSH
69421: LD_VAR 0 4
69425: ARRAY
69426: PUSH
69427: LD_VAR 0 5
69431: PUSH
69432: LD_INT 2
69434: ARRAY
69435: PUSH
69436: LD_VAR 0 4
69440: ARRAY
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PPUSH
69446: CALL_OW 1
69450: ST_TO_ADDR
69451: GO 69390
69453: POP
69454: POP
// exit ;
69455: GO 69495
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69457: LD_ADDR_VAR 0 3
69461: PUSH
69462: LD_VAR 0 5
69466: PUSH
69467: LD_INT 1
69469: ARRAY
69470: PUSH
69471: LD_INT 1
69473: ARRAY
69474: PUSH
69475: LD_VAR 0 5
69479: PUSH
69480: LD_INT 2
69482: ARRAY
69483: PUSH
69484: LD_INT 1
69486: ARRAY
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: EMPTY
69493: LIST
69494: ST_TO_ADDR
// end ;
69495: LD_VAR 0 3
69499: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
// list := AreaToList ( area , 0 ) ;
69504: LD_ADDR_VAR 0 4
69508: PUSH
69509: LD_VAR 0 1
69513: PPUSH
69514: LD_INT 0
69516: PPUSH
69517: CALL_OW 517
69521: ST_TO_ADDR
// if not list then
69522: LD_VAR 0 4
69526: NOT
69527: IFFALSE 69531
// exit ;
69529: GO 69572
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_VAR 0 4
69540: PUSH
69541: LD_INT 1
69543: ARRAY
69544: PUSH
69545: LD_INT 1
69547: ARRAY
69548: PUSH
69549: LD_VAR 0 4
69553: PUSH
69554: LD_INT 2
69556: ARRAY
69557: PUSH
69558: LD_INT 1
69560: ARRAY
69561: PUSH
69562: LD_VAR 0 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: LIST
69571: ST_TO_ADDR
// end ;
69572: LD_VAR 0 3
69576: RET
// export function First ( array ) ; begin
69577: LD_INT 0
69579: PPUSH
// if not array then
69580: LD_VAR 0 1
69584: NOT
69585: IFFALSE 69589
// exit ;
69587: GO 69603
// result := array [ 1 ] ;
69589: LD_ADDR_VAR 0 2
69593: PUSH
69594: LD_VAR 0 1
69598: PUSH
69599: LD_INT 1
69601: ARRAY
69602: ST_TO_ADDR
// end ;
69603: LD_VAR 0 2
69607: RET
// export function Last ( array ) ; begin
69608: LD_INT 0
69610: PPUSH
// if not array then
69611: LD_VAR 0 1
69615: NOT
69616: IFFALSE 69620
// exit ;
69618: GO 69636
// result := array [ array ] ;
69620: LD_ADDR_VAR 0 2
69624: PUSH
69625: LD_VAR 0 1
69629: PUSH
69630: LD_VAR 0 1
69634: ARRAY
69635: ST_TO_ADDR
// end ;
69636: LD_VAR 0 2
69640: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69641: LD_INT 0
69643: PPUSH
69644: PPUSH
// result := [ ] ;
69645: LD_ADDR_VAR 0 5
69649: PUSH
69650: EMPTY
69651: ST_TO_ADDR
// if not array then
69652: LD_VAR 0 1
69656: NOT
69657: IFFALSE 69661
// exit ;
69659: GO 69773
// for i := 1 to array do
69661: LD_ADDR_VAR 0 6
69665: PUSH
69666: DOUBLE
69667: LD_INT 1
69669: DEC
69670: ST_TO_ADDR
69671: LD_VAR 0 1
69675: PUSH
69676: FOR_TO
69677: IFFALSE 69771
// if array [ i ] [ index ] = value then
69679: LD_VAR 0 1
69683: PUSH
69684: LD_VAR 0 6
69688: ARRAY
69689: PUSH
69690: LD_VAR 0 2
69694: ARRAY
69695: PUSH
69696: LD_VAR 0 3
69700: EQUAL
69701: IFFALSE 69769
// begin if indexColumn then
69703: LD_VAR 0 4
69707: IFFALSE 69743
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69709: LD_ADDR_VAR 0 5
69713: PUSH
69714: LD_VAR 0 5
69718: PPUSH
69719: LD_VAR 0 1
69723: PUSH
69724: LD_VAR 0 6
69728: ARRAY
69729: PUSH
69730: LD_VAR 0 4
69734: ARRAY
69735: PPUSH
69736: CALL 64955 0 2
69740: ST_TO_ADDR
69741: GO 69769
// result := Join ( result , array [ i ] ) ;
69743: LD_ADDR_VAR 0 5
69747: PUSH
69748: LD_VAR 0 5
69752: PPUSH
69753: LD_VAR 0 1
69757: PUSH
69758: LD_VAR 0 6
69762: ARRAY
69763: PPUSH
69764: CALL 64955 0 2
69768: ST_TO_ADDR
// end ;
69769: GO 69676
69771: POP
69772: POP
// end ;
69773: LD_VAR 0 5
69777: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69778: LD_INT 0
69780: PPUSH
// if not vehicles or not parkingPoint then
69781: LD_VAR 0 1
69785: NOT
69786: PUSH
69787: LD_VAR 0 2
69791: NOT
69792: OR
69793: IFFALSE 69797
// exit ;
69795: GO 69895
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69797: LD_ADDR_VAR 0 1
69801: PUSH
69802: LD_VAR 0 1
69806: PPUSH
69807: LD_INT 50
69809: PUSH
69810: EMPTY
69811: LIST
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: LD_INT 92
69818: PUSH
69819: LD_VAR 0 2
69823: PUSH
69824: LD_INT 1
69826: ARRAY
69827: PUSH
69828: LD_VAR 0 2
69832: PUSH
69833: LD_INT 2
69835: ARRAY
69836: PUSH
69837: LD_INT 8
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PPUSH
69854: CALL_OW 72
69858: ST_TO_ADDR
// if not vehicles then
69859: LD_VAR 0 1
69863: NOT
69864: IFFALSE 69868
// exit ;
69866: GO 69895
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69868: LD_VAR 0 1
69872: PPUSH
69873: LD_VAR 0 2
69877: PUSH
69878: LD_INT 1
69880: ARRAY
69881: PPUSH
69882: LD_VAR 0 2
69886: PUSH
69887: LD_INT 2
69889: ARRAY
69890: PPUSH
69891: CALL_OW 111
// end ;
69895: LD_VAR 0 3
69899: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69900: LD_INT 0
69902: PPUSH
69903: PPUSH
69904: PPUSH
// if not side or not area then
69905: LD_VAR 0 1
69909: NOT
69910: PUSH
69911: LD_VAR 0 2
69915: NOT
69916: OR
69917: IFFALSE 69921
// exit ;
69919: GO 70040
// tmp := AreaToList ( area , 0 ) ;
69921: LD_ADDR_VAR 0 5
69925: PUSH
69926: LD_VAR 0 2
69930: PPUSH
69931: LD_INT 0
69933: PPUSH
69934: CALL_OW 517
69938: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69939: LD_ADDR_VAR 0 4
69943: PUSH
69944: DOUBLE
69945: LD_INT 1
69947: DEC
69948: ST_TO_ADDR
69949: LD_VAR 0 5
69953: PUSH
69954: LD_INT 1
69956: ARRAY
69957: PUSH
69958: FOR_TO
69959: IFFALSE 70038
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69961: LD_VAR 0 5
69965: PUSH
69966: LD_INT 1
69968: ARRAY
69969: PUSH
69970: LD_VAR 0 4
69974: ARRAY
69975: PPUSH
69976: LD_VAR 0 5
69980: PUSH
69981: LD_INT 2
69983: ARRAY
69984: PUSH
69985: LD_VAR 0 4
69989: ARRAY
69990: PPUSH
69991: CALL_OW 351
69995: IFFALSE 70036
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69997: LD_VAR 0 5
70001: PUSH
70002: LD_INT 1
70004: ARRAY
70005: PUSH
70006: LD_VAR 0 4
70010: ARRAY
70011: PPUSH
70012: LD_VAR 0 5
70016: PUSH
70017: LD_INT 2
70019: ARRAY
70020: PUSH
70021: LD_VAR 0 4
70025: ARRAY
70026: PPUSH
70027: LD_VAR 0 1
70031: PPUSH
70032: CALL_OW 244
// end ;
70036: GO 69958
70038: POP
70039: POP
// end ; end_of_file
70040: LD_VAR 0 3
70044: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
70045: PPOPN 6
70047: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
70048: LD_EXP 30
70052: PUSH
70053: LD_INT 4
70055: EQUAL
70056: IFFALSE 70092
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
70058: LD_STRING setGameDifficulty(
70060: PUSH
70061: LD_OWVAR 67
70065: STR
70066: PUSH
70067: LD_STRING )
70069: STR
70070: PPUSH
70071: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
70075: LD_STRING displayDifficulty(
70077: PUSH
70078: LD_OWVAR 67
70082: STR
70083: PUSH
70084: LD_STRING )
70086: STR
70087: PPUSH
70088: CALL_OW 559
// end ; SOS_MapStart ( ) ;
70092: CALL 70121 0 0
// end ; end_of_file
70096: PPOPN 1
70098: END
// every 0 0$1 do
70099: GO 70101
70101: DISABLE
// begin enable ;
70102: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
70103: LD_STRING updateTimer(
70105: PUSH
70106: LD_OWVAR 1
70110: STR
70111: PUSH
70112: LD_STRING );
70114: STR
70115: PPUSH
70116: CALL_OW 559
// end ;
70120: END
// export function SOS_MapStart ( ) ; begin
70121: LD_INT 0
70123: PPUSH
// UpdateFactoryWaypoints ( ) ;
70124: CALL 70497 0 0
// UpdateWarehouseGatheringPoints ( ) ;
70128: CALL 70749 0 0
// ParseMultiDataToLua ( ) ;
70132: CALL 70896 0 0
// end ;
70136: LD_VAR 0 1
70140: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70141: LD_INT 0
70143: PPUSH
// end ;
70144: LD_VAR 0 12
70148: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
70149: LD_INT 0
70151: PPUSH
70152: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
70153: LD_VAR 0 1
70157: NOT
70158: PUSH
70159: LD_VAR 0 2
70163: PPUSH
70164: LD_VAR 0 3
70168: PPUSH
70169: CALL_OW 488
70173: NOT
70174: OR
70175: PUSH
70176: LD_VAR 0 1
70180: PPUSH
70181: CALL_OW 266
70185: PUSH
70186: LD_INT 3
70188: NONEQUAL
70189: PUSH
70190: LD_VAR 0 1
70194: PPUSH
70195: CALL_OW 247
70199: PUSH
70200: LD_INT 1
70202: EQUAL
70203: NOT
70204: AND
70205: OR
70206: IFFALSE 70210
// exit ;
70208: GO 70492
// if GetType ( factory ) = unit_human then
70210: LD_VAR 0 1
70214: PPUSH
70215: CALL_OW 247
70219: PUSH
70220: LD_INT 1
70222: EQUAL
70223: IFFALSE 70240
// factory := IsInUnit ( factory ) ;
70225: LD_ADDR_VAR 0 1
70229: PUSH
70230: LD_VAR 0 1
70234: PPUSH
70235: CALL_OW 310
70239: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
70240: LD_VAR 0 1
70244: PPUSH
70245: CALL_OW 266
70249: PUSH
70250: LD_INT 3
70252: NONEQUAL
70253: IFFALSE 70257
// exit ;
70255: GO 70492
// for i := 1 to Count ( factoryWaypoints ) do
70257: LD_ADDR_VAR 0 5
70261: PUSH
70262: DOUBLE
70263: LD_INT 1
70265: DEC
70266: ST_TO_ADDR
70267: LD_EXP 70
70271: PPUSH
70272: CALL 29346 0 1
70276: PUSH
70277: FOR_TO
70278: IFFALSE 70440
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
70280: LD_VAR 0 2
70284: PPUSH
70285: LD_VAR 0 3
70289: PPUSH
70290: CALL_OW 428
70294: PUSH
70295: LD_EXP 70
70299: PUSH
70300: LD_VAR 0 5
70304: ARRAY
70305: PUSH
70306: LD_INT 2
70308: ARRAY
70309: EQUAL
70310: IFFALSE 70342
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70312: LD_ADDR_EXP 70
70316: PUSH
70317: LD_EXP 70
70321: PPUSH
70322: LD_VAR 0 5
70326: PPUSH
70327: CALL_OW 3
70331: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70332: CALL 70497 0 0
// exit ;
70336: POP
70337: POP
70338: GO 70492
// end else
70340: GO 70438
// if factory = factoryWaypoints [ i ] [ 2 ] then
70342: LD_VAR 0 1
70346: PUSH
70347: LD_EXP 70
70351: PUSH
70352: LD_VAR 0 5
70356: ARRAY
70357: PUSH
70358: LD_INT 2
70360: ARRAY
70361: EQUAL
70362: IFFALSE 70438
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70364: LD_ADDR_EXP 70
70368: PUSH
70369: LD_EXP 70
70373: PPUSH
70374: LD_VAR 0 5
70378: PPUSH
70379: CALL_OW 3
70383: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70384: LD_ADDR_EXP 70
70388: PUSH
70389: LD_EXP 70
70393: PPUSH
70394: LD_VAR 0 1
70398: PPUSH
70399: CALL_OW 255
70403: PUSH
70404: LD_VAR 0 1
70408: PUSH
70409: LD_VAR 0 2
70413: PUSH
70414: LD_VAR 0 3
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: PPUSH
70425: CALL 64955 0 2
70429: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70430: CALL 70497 0 0
// exit ;
70434: POP
70435: POP
70436: GO 70492
// end ; end ;
70438: GO 70277
70440: POP
70441: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70442: LD_ADDR_EXP 70
70446: PUSH
70447: LD_EXP 70
70451: PPUSH
70452: LD_VAR 0 1
70456: PPUSH
70457: CALL_OW 255
70461: PUSH
70462: LD_VAR 0 1
70466: PUSH
70467: LD_VAR 0 2
70471: PUSH
70472: LD_VAR 0 3
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: PPUSH
70483: CALL 64955 0 2
70487: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70488: CALL 70497 0 0
// end ;
70492: LD_VAR 0 4
70496: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
70497: LD_INT 0
70499: PPUSH
70500: PPUSH
70501: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
70502: LD_STRING resetFactoryWaypoint();
70504: PPUSH
70505: CALL_OW 559
// if factoryWaypoints then
70509: LD_EXP 70
70513: IFFALSE 70634
// begin list := factoryWaypoints ;
70515: LD_ADDR_VAR 0 3
70519: PUSH
70520: LD_EXP 70
70524: ST_TO_ADDR
// for i := 1 to list do
70525: LD_ADDR_VAR 0 2
70529: PUSH
70530: DOUBLE
70531: LD_INT 1
70533: DEC
70534: ST_TO_ADDR
70535: LD_VAR 0 3
70539: PUSH
70540: FOR_TO
70541: IFFALSE 70632
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70543: LD_STRING setFactoryWaypointXY(
70545: PUSH
70546: LD_VAR 0 3
70550: PUSH
70551: LD_VAR 0 2
70555: ARRAY
70556: PUSH
70557: LD_INT 1
70559: ARRAY
70560: STR
70561: PUSH
70562: LD_STRING ,
70564: STR
70565: PUSH
70566: LD_VAR 0 3
70570: PUSH
70571: LD_VAR 0 2
70575: ARRAY
70576: PUSH
70577: LD_INT 2
70579: ARRAY
70580: STR
70581: PUSH
70582: LD_STRING ,
70584: STR
70585: PUSH
70586: LD_VAR 0 3
70590: PUSH
70591: LD_VAR 0 2
70595: ARRAY
70596: PUSH
70597: LD_INT 3
70599: ARRAY
70600: STR
70601: PUSH
70602: LD_STRING ,
70604: STR
70605: PUSH
70606: LD_VAR 0 3
70610: PUSH
70611: LD_VAR 0 2
70615: ARRAY
70616: PUSH
70617: LD_INT 4
70619: ARRAY
70620: STR
70621: PUSH
70622: LD_STRING )
70624: STR
70625: PPUSH
70626: CALL_OW 559
70630: GO 70540
70632: POP
70633: POP
// end ; end ;
70634: LD_VAR 0 1
70638: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
70639: LD_INT 0
70641: PPUSH
// if HexInfo ( x , y ) = warehouse then
70642: LD_VAR 0 2
70646: PPUSH
70647: LD_VAR 0 3
70651: PPUSH
70652: CALL_OW 428
70656: PUSH
70657: LD_VAR 0 1
70661: EQUAL
70662: IFFALSE 70689
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
70664: LD_ADDR_EXP 72
70668: PUSH
70669: LD_EXP 72
70673: PPUSH
70674: LD_VAR 0 1
70678: PPUSH
70679: LD_INT 0
70681: PPUSH
70682: CALL_OW 1
70686: ST_TO_ADDR
70687: GO 70740
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
70689: LD_ADDR_EXP 72
70693: PUSH
70694: LD_EXP 72
70698: PPUSH
70699: LD_VAR 0 1
70703: PPUSH
70704: LD_VAR 0 1
70708: PPUSH
70709: CALL_OW 255
70713: PUSH
70714: LD_VAR 0 1
70718: PUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_VAR 0 3
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: PPUSH
70735: CALL_OW 1
70739: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
70740: CALL 70749 0 0
// end ;
70744: LD_VAR 0 4
70748: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
70749: LD_INT 0
70751: PPUSH
70752: PPUSH
70753: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
70754: LD_STRING resetWarehouseGatheringPoints();
70756: PPUSH
70757: CALL_OW 559
// if warehouseGatheringPoints then
70761: LD_EXP 72
70765: IFFALSE 70891
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: LD_EXP 72
70776: PPUSH
70777: CALL 68723 0 1
70781: ST_TO_ADDR
// for i := 1 to list do
70782: LD_ADDR_VAR 0 2
70786: PUSH
70787: DOUBLE
70788: LD_INT 1
70790: DEC
70791: ST_TO_ADDR
70792: LD_VAR 0 3
70796: PUSH
70797: FOR_TO
70798: IFFALSE 70889
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70800: LD_STRING setWarehouseGatheringPointXY(
70802: PUSH
70803: LD_VAR 0 3
70807: PUSH
70808: LD_VAR 0 2
70812: ARRAY
70813: PUSH
70814: LD_INT 1
70816: ARRAY
70817: STR
70818: PUSH
70819: LD_STRING ,
70821: STR
70822: PUSH
70823: LD_VAR 0 3
70827: PUSH
70828: LD_VAR 0 2
70832: ARRAY
70833: PUSH
70834: LD_INT 2
70836: ARRAY
70837: STR
70838: PUSH
70839: LD_STRING ,
70841: STR
70842: PUSH
70843: LD_VAR 0 3
70847: PUSH
70848: LD_VAR 0 2
70852: ARRAY
70853: PUSH
70854: LD_INT 3
70856: ARRAY
70857: STR
70858: PUSH
70859: LD_STRING ,
70861: STR
70862: PUSH
70863: LD_VAR 0 3
70867: PUSH
70868: LD_VAR 0 2
70872: ARRAY
70873: PUSH
70874: LD_INT 4
70876: ARRAY
70877: STR
70878: PUSH
70879: LD_STRING )
70881: STR
70882: PPUSH
70883: CALL_OW 559
70887: GO 70797
70889: POP
70890: POP
// end ; end ;
70891: LD_VAR 0 1
70895: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
70896: LD_INT 0
70898: PPUSH
70899: PPUSH
// if not mpSidePositions then
70900: LD_EXP 31
70904: NOT
70905: IFFALSE 70909
// exit ;
70907: GO 70980
// result :=  ;
70909: LD_ADDR_VAR 0 1
70913: PUSH
70914: LD_STRING 
70916: ST_TO_ADDR
// for i := 1 to 8 do
70917: LD_ADDR_VAR 0 2
70921: PUSH
70922: DOUBLE
70923: LD_INT 1
70925: DEC
70926: ST_TO_ADDR
70927: LD_INT 8
70929: PUSH
70930: FOR_TO
70931: IFFALSE 70961
// begin result := result & mpSidePositions [ i ] & ; ;
70933: LD_ADDR_VAR 0 1
70937: PUSH
70938: LD_VAR 0 1
70942: PUSH
70943: LD_EXP 31
70947: PUSH
70948: LD_VAR 0 2
70952: ARRAY
70953: STR
70954: PUSH
70955: LD_STRING ;
70957: STR
70958: ST_TO_ADDR
// end ;
70959: GO 70930
70961: POP
70962: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
70963: LD_STRING setMultiplayerRealPosition("
70965: PUSH
70966: LD_VAR 0 1
70970: STR
70971: PUSH
70972: LD_STRING ");
70974: STR
70975: PPUSH
70976: CALL_OW 559
// end ;
70980: LD_VAR 0 1
70984: RET
