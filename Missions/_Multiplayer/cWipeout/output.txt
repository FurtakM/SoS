// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 159 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1906 0 1
  44: PPUSH
  45: CALL 5947 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1906 0 1
  56: PPUSH
  57: CALL 10563 0 1
// Multiplayer_Start ;
  61: CALL 3938 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4050 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: IFFALSE 142
 135: PUSH
 136: LD_OWVAR 48
 140: NOT
 141: AND
 142: IFFALSE 158
 144: GO 146
 146: DISABLE
// begin enable ;
 147: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 148: LD_ADDR_OWVAR 47
 152: PUSH
 153: CALL 4865 0 0
 157: ST_TO_ADDR
// end ; end_of_file
 158: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
 163: PPUSH
 164: PPUSH
 165: PPUSH
// mpGameType := GameTypeCoop ;
 166: LD_ADDR_EXP 30
 170: PUSH
 171: LD_INT 4
 173: ST_TO_ADDR
// multi_settings_counter := 6 ;
 174: LD_ADDR_EXP 18
 178: PUSH
 179: LD_INT 6
 181: ST_TO_ADDR
// multi_settings := [ ] ;
 182: LD_ADDR_EXP 17
 186: PUSH
 187: EMPTY
 188: ST_TO_ADDR
// if Multiplayer then
 189: LD_OWVAR 4
 193: IFFALSE 373
// begin your_side := mp_player_side ;
 195: LD_ADDR_OWVAR 2
 199: PUSH
 200: LD_OWVAR 7
 204: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_OWVAR 6
 214: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 215: LD_ADDR_EXP 7
 219: PUSH
 220: LD_OWVAR 17
 224: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 225: LD_ADDR_EXP 8
 229: PUSH
 230: LD_OWVAR 15
 234: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 235: LD_ADDR_EXP 9
 239: PUSH
 240: LD_OWVAR 16
 244: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 245: LD_ADDR_EXP 10
 249: PUSH
 250: EMPTY
 251: PUSH
 252: EMPTY
 253: LIST
 254: ST_TO_ADDR
// for i in mp_teams do
 255: LD_ADDR_VAR 0 2
 259: PUSH
 260: LD_OWVAR 12
 264: PUSH
 265: FOR_IN
 266: IFFALSE 309
// if i then
 268: LD_VAR 0 2
 272: IFFALSE 307
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 274: LD_ADDR_EXP 10
 278: PUSH
 279: LD_EXP 10
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_EXP 10
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PUSH
 296: LD_VAR 0 2
 300: UNION
 301: PPUSH
 302: CALL_OW 1
 306: ST_TO_ADDR
 307: GO 265
 309: POP
 310: POP
// for i := 1 to multi_settings_counter do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_EXP 18
 325: PUSH
 326: FOR_TO
 327: IFFALSE 369
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 329: LD_ADDR_EXP 17
 333: PUSH
 334: LD_EXP 17
 338: PPUSH
 339: LD_EXP 17
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: PPUSH
 348: LD_VAR 0 2
 352: PPUSH
 353: CALL_OW 426
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
 367: GO 326
 369: POP
 370: POP
// end else
 371: GO 559
// begin your_side := 3 ;
 373: LD_ADDR_OWVAR 2
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// multi_gametype := 1 ;
 381: LD_ADDR_EXP 6
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 389: LD_ADDR_EXP 7
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: LD_INT 1
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 428: LD_ADDR_EXP 8
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 467: LD_ADDR_EXP 9
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: LD_INT 3
 483: PUSH
 484: LD_INT 3
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_INT 3
 513: PUSH
 514: LD_INT 4
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 4
 538: PUSH
 539: LD_INT 4
 541: PUSH
 542: LD_INT 3
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 559: LD_ADDR_EXP 31
 563: PUSH
 564: LD_EXP 7
 568: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 569: LD_ADDR_EXP 11
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 0
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 14
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 647: LD_ADDR_EXP 25
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: LD_INT 0
 657: PUSH
 658: LD_INT 0
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 0
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// multi_teamgame := true ;
 686: LD_ADDR_EXP 15
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 694: LD_ADDR_EXP 13
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: EMPTY
 703: LIST
 704: ST_TO_ADDR
// multi_custom_commanders := true ;
 705: LD_ADDR_EXP 16
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// multi_commanders := [ ] ;
 713: LD_ADDR_EXP 24
 717: PUSH
 718: EMPTY
 719: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 720: LD_ADDR_EXP 27
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// multi_players_amount := 0 ;
 727: LD_ADDR_EXP 26
 731: PUSH
 732: LD_INT 0
 734: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 735: LD_ADDR_EXP 12
 739: PUSH
 740: LD_INT 8
 742: PUSH
 743: LD_INT 9
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 10
 752: PUSH
 753: LD_INT 11
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 12
 762: PUSH
 763: LD_INT 13
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 775: LD_ADDR_EXP 29
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 14
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: CALL 70673 0 2
 793: PUSH
 794: LD_STRING kagan
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 31
 804: PUSH
 805: LD_INT 67
 807: PUSH
 808: LD_INT 102
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 31
 825: PUSH
 826: LD_INT 73
 828: PUSH
 829: LD_INT 103
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 29
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: LD_INT 112
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_INT 0
 873: PUSH
 874: LD_INT 15
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL 70673 0 2
 884: PUSH
 885: LD_STRING beria
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 31
 895: PUSH
 896: LD_INT 102
 898: PUSH
 899: LD_INT 86
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 31
 916: PUSH
 917: LD_INT 98
 919: PUSH
 920: LD_INT 96
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 115
 940: PUSH
 941: LD_INT 104
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 16
 967: PPUSH
 968: LD_INT 3
 970: PPUSH
 971: CALL 70673 0 2
 975: PUSH
 976: LD_STRING kirov
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 31
 986: PUSH
 987: LD_INT 169
 989: PUSH
 990: LD_INT 101
 992: PUSH
 993: LD_INT 4
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 31
1007: PUSH
1008: LD_INT 175
1010: PUSH
1011: LD_INT 123
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 4
1028: PUSH
1029: LD_INT 166
1031: PUSH
1032: LD_INT 115
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: LD_INT 152
1052: PUSH
1053: LD_INT 98
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: ST_TO_ADDR
// for i := 1 to 8 do
1080: LD_ADDR_VAR 0 2
1084: PUSH
1085: DOUBLE
1086: LD_INT 1
1088: DEC
1089: ST_TO_ADDR
1090: LD_INT 8
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1429
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1096: LD_VAR 0 2
1100: PPUSH
1101: CALL_OW 530
1105: IFFALSE 1263
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1107: LD_ADDR_EXP 11
1111: PUSH
1112: LD_EXP 11
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1130: LD_ADDR_EXP 9
1134: PUSH
1135: LD_EXP 9
1139: PPUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 1
1152: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1153: LD_ADDR_EXP 7
1157: PUSH
1158: LD_EXP 7
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 1
1175: ST_TO_ADDR
// for j = 1 to multi_teams do
1176: LD_ADDR_VAR 0 3
1180: PUSH
1181: DOUBLE
1182: LD_INT 1
1184: DEC
1185: ST_TO_ADDR
1186: LD_EXP 10
1190: PUSH
1191: FOR_TO
1192: IFFALSE 1261
// begin if i in multi_teams [ j ] then
1194: LD_VAR 0 2
1198: PUSH
1199: LD_EXP 10
1203: PUSH
1204: LD_VAR 0 3
1208: ARRAY
1209: IN
1210: IFFALSE 1259
// begin tmp := multi_teams [ j ] diff i ;
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_EXP 10
1221: PUSH
1222: LD_VAR 0 3
1226: ARRAY
1227: PUSH
1228: LD_VAR 0 2
1232: DIFF
1233: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1234: LD_ADDR_EXP 10
1238: PUSH
1239: LD_EXP 10
1243: PPUSH
1244: LD_VAR 0 3
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// end ; end ;
1259: GO 1191
1261: POP
1262: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1263: LD_EXP 9
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: IFFALSE 1294
1275: PUSH
1276: LD_EXP 9
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_EXP 13
1291: IN
1292: NOT
1293: AND
1294: IFFALSE 1335
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1296: LD_ADDR_EXP 9
1300: PUSH
1301: LD_EXP 9
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: LD_EXP 13
1315: PUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_EXP 13
1323: PPUSH
1324: CALL_OW 12
1328: ARRAY
1329: PPUSH
1330: CALL_OW 1
1334: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1335: LD_EXP 9
1339: PUSH
1340: LD_VAR 0 2
1344: ARRAY
1345: NOT
1346: IFFALSE 1361
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: NOT
1360: AND
1361: IFFALSE 1376
1363: PUSH
1364: LD_EXP 11
1368: PUSH
1369: LD_VAR 0 2
1373: ARRAY
1374: NOT
1375: AND
1376: IFFALSE 1401
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1378: LD_ADDR_EXP 14
1382: PUSH
1383: LD_EXP 14
1387: PPUSH
1388: LD_VAR 0 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL_OW 1
1400: ST_TO_ADDR
// if multi_sides [ i ] then
1401: LD_EXP 7
1405: PUSH
1406: LD_VAR 0 2
1410: ARRAY
1411: IFFALSE 1427
// multi_players_amount := multi_players_amount + 1 ;
1413: LD_ADDR_EXP 26
1417: PUSH
1418: LD_EXP 26
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ST_TO_ADDR
// end ;
1427: GO 1093
1429: POP
1430: POP
// for i in multi_teams do
1431: LD_ADDR_VAR 0 2
1435: PUSH
1436: LD_EXP 10
1440: PUSH
1441: FOR_IN
1442: IFFALSE 1550
// begin for j = 2 to i do
1444: LD_ADDR_VAR 0 3
1448: PUSH
1449: DOUBLE
1450: LD_INT 2
1452: DEC
1453: ST_TO_ADDR
1454: LD_VAR 0 2
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1546
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1462: LD_VAR 0 2
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PPUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 343
// for x = 1 to j - 1 do
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_VAR 0 3
1500: PUSH
1501: LD_INT 1
1503: MINUS
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1542
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1508: LD_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_VAR 0 4
1528: ARRAY
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 80
1540: GO 1505
1542: POP
1543: POP
// end ;
1544: GO 1459
1546: POP
1547: POP
// end ;
1548: GO 1441
1550: POP
1551: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1552: LD_ADDR_OWVAR 67
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 3
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_EXP 17
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: ARRAY
1580: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1581: LD_ADDR_EXP 19
1585: PUSH
1586: LD_INT 6
1588: PUSH
1589: LD_INT 7
1591: PUSH
1592: LD_INT 8
1594: PUSH
1595: LD_INT 9
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 17
1608: PUSH
1609: LD_INT 2
1611: ARRAY
1612: ARRAY
1613: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 4
1627: PUSH
1628: LD_INT 5
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_EXP 17
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ARRAY
1646: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1647: LD_ADDR_EXP 21
1651: PUSH
1652: LD_INT 3000
1654: PUSH
1655: LD_INT 1120
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 5000
1664: PUSH
1665: LD_INT 770
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 6000
1674: PUSH
1675: LD_INT 490
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 8000
1684: PUSH
1685: LD_INT 420
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_EXP 17
1702: PUSH
1703: LD_INT 4
1705: ARRAY
1706: ARRAY
1707: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1708: LD_ADDR_EXP 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_EXP 17
1731: PUSH
1732: LD_INT 5
1734: ARRAY
1735: ARRAY
1736: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1737: LD_ADDR_EXP 23
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_EXP 17
1760: PUSH
1761: LD_INT 6
1763: ARRAY
1764: ARRAY
1765: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1766: LD_ADDR_EXP 28
1770: PUSH
1771: LD_INT 10500
1773: PUSH
1774: LD_INT 31500
1776: PUSH
1777: LD_INT 52500
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: ST_TO_ADDR
// if multi_extra_oil then
1791: LD_EXP 22
1795: IFFALSE 1856
// begin if multi_extra_oil = 1 then
1797: LD_EXP 22
1801: PUSH
1802: LD_INT 1
1804: EQUAL
1805: IFFALSE 1820
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1807: LD_INT 109
1809: PPUSH
1810: LD_INT 130
1812: PPUSH
1813: LD_INT 2
1815: PPUSH
1816: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1820: LD_EXP 22
1824: PUSH
1825: LD_INT 2
1827: EQUAL
1828: IFFALSE 1856
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1830: LD_INT 109
1832: PPUSH
1833: LD_INT 130
1835: PPUSH
1836: LD_INT 2
1838: PPUSH
1839: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1843: LD_INT 150
1845: PPUSH
1846: LD_INT 112
1848: PPUSH
1849: LD_INT 2
1851: PPUSH
1852: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 1
1863: GREATER
1864: IFFALSE 1901
// for i := 2 to 8 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 2
1874: DEC
1875: ST_TO_ADDR
1876: LD_INT 8
1878: PUSH
1879: FOR_TO
1880: IFFALSE 1899
// SetTech ( tech_advmet , i , state_disabled ) ;
1882: LD_INT 34
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 322
1897: GO 1879
1899: POP
1900: POP
// end ;
1901: LD_VAR 0 1
1905: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1906: LD_INT 0
1908: PPUSH
1909: PPUSH
// if not multi_sides [ preferSide ] then
1910: LD_EXP 7
1914: PUSH
1915: LD_VAR 0 1
1919: ARRAY
1920: NOT
1921: IFFALSE 1935
// begin result := preferSide ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_VAR 0 1
1932: ST_TO_ADDR
// exit ;
1933: GO 1982
// end ; for i := 1 to 8 do
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: DOUBLE
1941: LD_INT 1
1943: DEC
1944: ST_TO_ADDR
1945: LD_INT 8
1947: PUSH
1948: FOR_TO
1949: IFFALSE 1980
// if not multi_sides [ i ] then
1951: LD_EXP 7
1955: PUSH
1956: LD_VAR 0 3
1960: ARRAY
1961: NOT
1962: IFFALSE 1978
// begin result := i ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 3
1973: ST_TO_ADDR
// exit ;
1974: POP
1975: POP
1976: GO 1982
// end ;
1978: GO 1948
1980: POP
1981: POP
// end ;
1982: LD_VAR 0 2
1986: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1987: LD_INT 0
1989: PPUSH
// uc_side := side ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// uc_nation := nation_russian ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// hc_importance := 100 ;
2008: LD_ADDR_OWVAR 32
2012: PUSH
2013: LD_INT 100
2015: ST_TO_ADDR
// hc_class := class_soldier ;
2016: LD_ADDR_OWVAR 28
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// if num = 1 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 1
2031: EQUAL
2032: IFFALSE 2095
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 381
// hc_gallery := ru ;
2046: LD_ADDR_OWVAR 33
2050: PUSH
2051: LD_STRING ru
2053: ST_TO_ADDR
// hc_face_number := 10 ;
2054: LD_ADDR_OWVAR 34
2058: PUSH
2059: LD_INT 10
2061: ST_TO_ADDR
// hc_name := Popov ;
2062: LD_ADDR_OWVAR 26
2066: PUSH
2067: LD_STRING Popov
2069: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2070: LD_ADDR_OWVAR 29
2074: PUSH
2075: LD_INT 10
2077: PUSH
2078: LD_INT 10
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// result := CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// end ; if num = 2 then
2095: LD_VAR 0 2
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2174
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2105: LD_INT 1
2107: PPUSH
2108: LD_EXP 20
2112: PPUSH
2113: CALL_OW 383
// hc_class := class_mechanic ;
2117: LD_ADDR_OWVAR 28
2121: PUSH
2122: LD_INT 3
2124: ST_TO_ADDR
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 1 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// hc_name := Burlak ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Burlak
2148: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; if num = 3 then
2174: LD_VAR 0 2
2178: PUSH
2179: LD_INT 3
2181: EQUAL
2182: IFFALSE 2245
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2184: LD_INT 1
2186: PPUSH
2187: LD_EXP 20
2191: PPUSH
2192: CALL_OW 381
// hc_gallery := ru ;
2196: LD_ADDR_OWVAR 33
2200: PUSH
2201: LD_STRING ru
2203: ST_TO_ADDR
// hc_face_number := 8 ;
2204: LD_ADDR_OWVAR 34
2208: PUSH
2209: LD_INT 8
2211: ST_TO_ADDR
// hc_name := Kurin ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_STRING Kurin
2219: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2220: LD_ADDR_OWVAR 29
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 11
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: ST_TO_ADDR
// result := CreateHuman ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: CALL_OW 44
2244: ST_TO_ADDR
// end ; end ;
2245: LD_VAR 0 3
2249: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// for i := 1 to 8 do
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: DOUBLE
2268: LD_INT 1
2270: DEC
2271: ST_TO_ADDR
2272: LD_INT 8
2274: PUSH
2275: FOR_TO
2276: IFFALSE 3607
// begin if not multi_sides [ i ] then
2278: LD_EXP 7
2282: PUSH
2283: LD_VAR 0 2
2287: ARRAY
2288: NOT
2289: IFFALSE 2293
// continue ;
2291: GO 2275
// if multi_buildings [ multi_sides [ i ] ] then
2293: LD_EXP 29
2297: PUSH
2298: LD_EXP 7
2302: PUSH
2303: LD_VAR 0 2
2307: ARRAY
2308: ARRAY
2309: IFFALSE 2622
// begin uc_side := i ;
2311: LD_ADDR_OWVAR 20
2315: PUSH
2316: LD_VAR 0 2
2320: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2321: LD_ADDR_OWVAR 21
2325: PUSH
2326: LD_EXP 9
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_EXP 29
2346: PUSH
2347: LD_EXP 7
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: ARRAY
2358: PUSH
2359: FOR_IN
2360: IFFALSE 2620
// begin if j [ 1 ] = b_oil_mine then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 29
2373: EQUAL
2374: IFFALSE 2411
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 2
2396: ARRAY
2397: PUSH
2398: LD_INT 2
2400: ARRAY
2401: PPUSH
2402: LD_VAR 0 2
2406: PPUSH
2407: CALL_OW 441
// bc_type := j [ 1 ] ;
2411: LD_ADDR_OWVAR 42
2415: PUSH
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: ST_TO_ADDR
// bc_level := 2 ;
2425: LD_ADDR_OWVAR 43
2429: PUSH
2430: LD_INT 2
2432: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PUSH
2442: LD_INT 6
2444: EQUAL
2445: IFFALSE 2463
// begin bc_kind1 := b_lab_basic ;
2447: LD_ADDR_OWVAR 44
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2455: LD_ADDR_OWVAR 45
2459: PUSH
2460: LD_INT 9
2462: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2463: LD_ADDR_VAR 0 4
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PUSH
2477: LD_INT 1
2479: ARRAY
2480: PPUSH
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: PUSH
2490: LD_INT 2
2492: ARRAY
2493: PPUSH
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 2
2501: ARRAY
2502: PUSH
2503: LD_INT 3
2505: ARRAY
2506: PPUSH
2507: CALL_OW 47
2511: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PUSH
2521: LD_INT 0
2523: EQUAL
2524: IFFALSE 2618
// begin SetBName ( b , j [ 3 ] ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 3
2538: ARRAY
2539: PPUSH
2540: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 320
2559: PUSH
2560: LD_INT 240
2562: PUSH
2563: LD_INT 150
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 274
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: LD_INT 160
2596: PUSH
2597: LD_INT 130
2599: PUSH
2600: LD_INT 100
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_OWVAR 67
2612: ARRAY
2613: PPUSH
2614: CALL_OW 277
// end ; end ;
2618: GO 2359
2620: POP
2621: POP
// end ; if multi_custom_commanders then
2622: LD_EXP 16
2626: IFFALSE 2836
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2628: LD_ADDR_VAR 0 6
2632: PUSH
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_EXP 7
2642: PUSH
2643: LD_VAR 0 2
2647: ARRAY
2648: PPUSH
2649: CALL 1987 0 2
2653: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2654: LD_ADDR_EXP 24
2658: PUSH
2659: LD_EXP 24
2663: PPUSH
2664: LD_EXP 24
2668: PUSH
2669: LD_INT 1
2671: PLUS
2672: PPUSH
2673: LD_VAR 0 6
2677: PPUSH
2678: CALL_OW 2
2682: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2683: LD_VAR 0 6
2687: PPUSH
2688: CALL_OW 257
2692: PUSH
2693: LD_INT 3
2695: EQUAL
2696: IFFALSE 2801
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2698: LD_INT 22
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 51
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 32784 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2727: LD_VAR 0 7
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 100
2737: PUSH
2738: LD_INT 20
2740: PUSH
2741: LD_OWVAR 67
2745: MUL
2746: MINUS
2747: PPUSH
2748: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_EXP 12
2761: PUSH
2762: LD_EXP 7
2766: PUSH
2767: LD_VAR 0 2
2771: ARRAY
2772: ARRAY
2773: PUSH
2774: LD_INT 2
2776: ARRAY
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2785: LD_VAR 0 6
2789: PPUSH
2790: LD_VAR 0 7
2794: PPUSH
2795: CALL_OW 52
// end else
2799: GO 2834
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2801: LD_VAR 0 6
2805: PPUSH
2806: LD_EXP 12
2810: PUSH
2811: LD_EXP 7
2815: PUSH
2816: LD_VAR 0 2
2820: ARRAY
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// end else
2834: GO 3047
// begin uc_side := i ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_VAR 0 2
2845: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_EXP 9
2855: PUSH
2856: LD_VAR 0 2
2860: ARRAY
2861: ST_TO_ADDR
// hc_importance := 100 ;
2862: LD_ADDR_OWVAR 32
2866: PUSH
2867: LD_INT 100
2869: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2870: LD_INT 0
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: LD_EXP 20
2880: PPUSH
2881: CALL_OW 380
// if multiplayer then
2885: LD_OWVAR 4
2889: IFFALSE 2947
// begin hc_name := mp_sides_players_names [ i ] ;
2891: LD_ADDR_OWVAR 26
2895: PUSH
2896: LD_OWVAR 19
2900: PUSH
2901: LD_VAR 0 2
2905: ARRAY
2906: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2907: LD_ADDR_OWVAR 33
2911: PUSH
2912: LD_STRING MULTIAVATARS
2914: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2915: LD_ADDR_OWVAR 34
2919: PUSH
2920: LD_VAR 0 2
2924: PPUSH
2925: CALL_OW 525
2929: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2930: LD_ADDR_OWVAR 27
2934: PUSH
2935: LD_VAR 0 2
2939: PPUSH
2940: CALL_OW 526
2944: ST_TO_ADDR
// end else
2945: GO 2979
// begin hc_gallery :=  ;
2947: LD_ADDR_OWVAR 33
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_name :=  ;
2955: LD_ADDR_OWVAR 26
2959: PUSH
2960: LD_STRING 
2962: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 2
2973: PPUSH
2974: CALL_OW 12
2978: ST_TO_ADDR
// end ; un := CreateHuman ;
2979: LD_ADDR_VAR 0 6
2983: PUSH
2984: CALL_OW 44
2988: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2989: LD_VAR 0 6
2993: PPUSH
2994: LD_EXP 12
2998: PUSH
2999: LD_EXP 7
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_EXP 24
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 6
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// end ; InitHc ;
3047: CALL_OW 19
// InitUc ;
3051: CALL_OW 18
// uc_side := i ;
3055: LD_ADDR_OWVAR 20
3059: PUSH
3060: LD_VAR 0 2
3064: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3065: LD_ADDR_OWVAR 21
3069: PUSH
3070: LD_EXP 9
3074: PUSH
3075: LD_VAR 0 2
3079: ARRAY
3080: ST_TO_ADDR
// hc_gallery :=  ;
3081: LD_ADDR_OWVAR 33
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_name :=  ;
3089: LD_ADDR_OWVAR 26
3093: PUSH
3094: LD_STRING 
3096: ST_TO_ADDR
// hc_importance := 0 ;
3097: LD_ADDR_OWVAR 32
3101: PUSH
3102: LD_INT 0
3104: ST_TO_ADDR
// cl := 1 ;
3105: LD_ADDR_VAR 0 5
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: DOUBLE
3119: LD_INT 2
3121: DEC
3122: ST_TO_ADDR
3123: LD_EXP 19
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3603
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 1
3138: MINUS
3139: PUSH
3140: LD_EXP 19
3144: PUSH
3145: LD_INT 1
3147: MINUS
3148: PUSH
3149: LD_INT 4
3151: DIVREAL
3152: MOD
3153: PUSH
3154: LD_INT 0
3156: EQUAL
3157: IFFALSE 3173
// cl := cl + 1 ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_VAR 0 5
3168: PUSH
3169: LD_INT 1
3171: PLUS
3172: ST_TO_ADDR
// if cl > 4 then
3173: LD_VAR 0 5
3177: PUSH
3178: LD_INT 4
3180: GREATER
3181: IFFALSE 3191
// cl := 1 ;
3183: LD_ADDR_VAR 0 5
3187: PUSH
3188: LD_INT 1
3190: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3191: LD_INT 0
3193: PPUSH
3194: LD_VAR 0 5
3198: PPUSH
3199: LD_EXP 20
3203: PPUSH
3204: CALL_OW 380
// un := CreateHuman ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: CALL_OW 44
3217: ST_TO_ADDR
// if j > copy then
3218: LD_VAR 0 3
3222: PUSH
3223: LD_VAR 0 9
3227: GREATER
3228: IFFALSE 3257
// copy := Replace ( copy , j , un ) else
3230: LD_ADDR_VAR 0 9
3234: PUSH
3235: LD_VAR 0 9
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 1
3254: ST_TO_ADDR
3255: GO 3339
// begin CopySkills ( copy [ j ] , un ) ;
3257: LD_VAR 0 9
3261: PUSH
3262: LD_VAR 0 3
3266: ARRAY
3267: PPUSH
3268: LD_VAR 0 6
3272: PPUSH
3273: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3277: LD_VAR 0 6
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: LD_VAR 0 9
3289: PUSH
3290: LD_VAR 0 3
3294: ARRAY
3295: PPUSH
3296: LD_INT 2
3298: PPUSH
3299: CALL_OW 260
3303: PPUSH
3304: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3308: LD_VAR 0 6
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_VAR 0 9
3320: PUSH
3321: LD_VAR 0 3
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if multi_pos_area then
3339: LD_EXP 12
3343: IFFALSE 3601
// begin if GetClass ( un ) = 3 then
3345: LD_VAR 0 6
3349: PPUSH
3350: CALL_OW 257
3354: PUSH
3355: LD_INT 3
3357: EQUAL
3358: IFFALSE 3455
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3360: LD_INT 21
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: LD_INT 43
3371: PUSH
3372: LD_INT 42
3374: PUSH
3375: LD_INT 42
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_OWVAR 67
3387: ARRAY
3388: PPUSH
3389: LD_INT 80
3391: PPUSH
3392: CALL 32784 0 5
// veh := CreateVehicle ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 45
3405: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3406: LD_VAR 0 7
3410: PPUSH
3411: LD_EXP 12
3415: PUSH
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3439: LD_VAR 0 6
3443: PPUSH
3444: LD_VAR 0 7
3448: PPUSH
3449: CALL_OW 52
// continue ;
3453: GO 3128
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 30
3474: PUSH
3475: LD_INT 31
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 58
3484: PUSH
3485: EMPTY
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 69
3497: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3498: LD_VAR 0 6
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 1
3510: EQUAL
3511: IFFALSE 3519
3513: PUSH
3514: LD_VAR 0 8
3518: AND
3519: IFFALSE 3568
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 8
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: CALL_OW 254
3539: PUSH
3540: LD_INT 3
3542: MINUS
3543: PPUSH
3544: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3548: LD_VAR 0 6
3552: PPUSH
3553: LD_VAR 0 8
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 52
// continue ;
3566: GO 3128
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_EXP 12
3577: PUSH
3578: LD_EXP 7
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: ARRAY
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// end ; end ;
3601: GO 3128
3603: POP
3604: POP
// end ;
3605: GO 2275
3607: POP
3608: POP
// end ;
3609: LD_VAR 0 1
3613: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
// if not multi_support then
3621: LD_EXP 23
3625: NOT
3626: IFFALSE 3630
// exit ;
3628: GO 3933
// result := [ ] ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: EMPTY
3636: ST_TO_ADDR
// for i := 1 to 8 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 8
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3931
// begin result := Replace ( result , i , [ ] ) ;
3653: LD_ADDR_VAR 0 1
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: EMPTY
3669: PPUSH
3670: CALL_OW 1
3674: ST_TO_ADDR
// if multi_sides [ i ] then
3675: LD_EXP 7
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: IFFALSE 3929
// begin tmp := [ ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: EMPTY
3693: ST_TO_ADDR
// if multi_support = 1 then
3694: LD_EXP 23
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: IFFALSE 3799
// begin uc_side := i ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_VAR 0 2
3713: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3714: LD_ADDR_OWVAR 21
3718: PUSH
3719: LD_EXP 9
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: ST_TO_ADDR
// for j := 1 to 3 do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: DOUBLE
3736: LD_INT 1
3738: DEC
3739: ST_TO_ADDR
3740: LD_INT 3
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3797
// begin InitHC_All ( ) ;
3746: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: LD_INT 1
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3779: LD_ADDR_VAR 0 5
3783: PUSH
3784: LD_VAR 0 5
3788: PUSH
3789: CALL_OW 44
3793: ADD
3794: ST_TO_ADDR
// end ;
3795: GO 3743
3797: POP
3798: POP
// end ; if multi_support = 2 then
3799: LD_EXP 23
3803: PUSH
3804: LD_INT 2
3806: EQUAL
3807: IFFALSE 3904
// begin uc_side := i ;
3809: LD_ADDR_OWVAR 20
3813: PUSH
3814: LD_VAR 0 2
3818: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3819: LD_ADDR_OWVAR 21
3823: PUSH
3824: LD_EXP 9
3828: PUSH
3829: LD_VAR 0 2
3833: ARRAY
3834: ST_TO_ADDR
// for j := 1 to 5 do
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: DOUBLE
3841: LD_INT 1
3843: DEC
3844: ST_TO_ADDR
3845: LD_INT 5
3847: PUSH
3848: FOR_TO
3849: IFFALSE 3902
// begin InitHC_All ( ) ;
3851: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3855: LD_INT 0
3857: PPUSH
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 4
3863: PPUSH
3864: CALL_OW 12
3868: PPUSH
3869: LD_INT 2
3871: PPUSH
3872: LD_INT 4
3874: PPUSH
3875: CALL_OW 12
3879: PPUSH
3880: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3884: LD_ADDR_VAR 0 5
3888: PUSH
3889: LD_VAR 0 5
3893: PUSH
3894: CALL_OW 44
3898: ADD
3899: ST_TO_ADDR
// end ;
3900: GO 3848
3902: POP
3903: POP
// end ; result := Replace ( result , i , tmp ) ;
3904: LD_ADDR_VAR 0 1
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: LD_VAR 0 2
3918: PPUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: CALL_OW 1
3928: ST_TO_ADDR
// end ; end ;
3929: GO 3650
3931: POP
3932: POP
// end ;
3933: LD_VAR 0 1
3937: RET
// export function Multiplayer_Start ( ) ; begin
3938: LD_INT 0
3940: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3941: CALL 2250 0 0
// Multiplayer_InitPointSystem ( ) ;
3945: CALL 4954 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3949: LD_INT 20
3951: PPUSH
3952: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3956: LD_INT 150
3958: PPUSH
3959: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3963: LD_INT 5
3965: PPUSH
3966: CALL 5138 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3970: LD_INT 40
3972: NEG
3973: PPUSH
3974: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3978: LD_INT 200
3980: PPUSH
3981: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3985: LD_INT 2
3987: PPUSH
3988: CALL 5138 0 1
// if multi_support then
3992: LD_EXP 23
3996: IFFALSE 4008
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3998: LD_ADDR_EXP 27
4002: PUSH
4003: CALL 3614 0 0
4007: ST_TO_ADDR
// if multi_sides [ your_side ] then
4008: LD_EXP 7
4012: PUSH
4013: LD_OWVAR 2
4017: ARRAY
4018: IFFALSE 4045
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4020: LD_INT 22
4022: PUSH
4023: LD_OWVAR 2
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL_OW 87
// end ;
4045: LD_VAR 0 1
4049: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
// tmp := [ ] ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: EMPTY
4065: ST_TO_ADDR
// for i := 1 to 8 do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_INT 8
4078: PUSH
4079: FOR_TO
4080: IFFALSE 4116
// if multi_sides [ i ] then
4082: LD_EXP 7
4086: PUSH
4087: LD_VAR 0 2
4091: ARRAY
4092: IFFALSE 4114
// tmp := Join ( tmp , i ) ;
4094: LD_ADDR_VAR 0 6
4098: PUSH
4099: LD_VAR 0 6
4103: PPUSH
4104: LD_VAR 0 2
4108: PPUSH
4109: CALL 65954 0 2
4113: ST_TO_ADDR
4114: GO 4079
4116: POP
4117: POP
// repeat wait ( 0 0$1 ) ;
4118: LD_INT 35
4120: PPUSH
4121: CALL_OW 67
// if tick = 10 10$00 then
4125: LD_OWVAR 1
4129: PUSH
4130: LD_INT 21000
4132: EQUAL
4133: IFFALSE 4306
// begin for i := 1 to 8 do
4135: LD_ADDR_VAR 0 2
4139: PUSH
4140: DOUBLE
4141: LD_INT 1
4143: DEC
4144: ST_TO_ADDR
4145: LD_INT 8
4147: PUSH
4148: FOR_TO
4149: IFFALSE 4304
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4151: LD_EXP 7
4155: PUSH
4156: LD_VAR 0 2
4160: ARRAY
4161: IFFALSE 4176
4163: PUSH
4164: LD_EXP 25
4168: PUSH
4169: LD_VAR 0 2
4173: ARRAY
4174: NOT
4175: AND
4176: IFFALSE 4302
// begin uc_side := i ;
4178: LD_ADDR_OWVAR 20
4182: PUSH
4183: LD_VAR 0 2
4187: ST_TO_ADDR
// uc_nation := nation_russian ;
4188: LD_ADDR_OWVAR 21
4192: PUSH
4193: LD_INT 3
4195: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4196: LD_INT 22
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: LD_INT 44
4207: PUSH
4208: LD_INT 44
4210: PUSH
4211: LD_INT 42
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: PUSH
4219: LD_OWVAR 67
4223: ARRAY
4224: PPUSH
4225: LD_INT 30
4227: PPUSH
4228: CALL 32784 0 5
// veh := CreateVehicle ;
4232: LD_ADDR_VAR 0 7
4236: PUSH
4237: CALL_OW 45
4241: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4242: LD_VAR 0 7
4246: PPUSH
4247: LD_INT 31
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 5
4262: PUSH
4263: LD_OWVAR 67
4267: MINUS
4268: PPUSH
4269: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4273: CALL_OW 44
4277: PPUSH
4278: LD_VAR 0 7
4282: PPUSH
4283: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4287: LD_VAR 0 7
4291: PPUSH
4292: LD_INT 158
4294: PPUSH
4295: LD_INT 106
4297: PPUSH
4298: CALL_OW 111
// end ; end ;
4302: GO 4148
4304: POP
4305: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4306: LD_OWVAR 1
4310: PUSH
4311: LD_EXP 28
4315: GREATER
4316: IFFALSE 4324
4318: PUSH
4319: LD_EXP 23
4323: AND
4324: IFFALSE 4516
// begin if tick mod 2 2$00 = 0 then
4326: LD_OWVAR 1
4330: PUSH
4331: LD_INT 4200
4333: MOD
4334: PUSH
4335: LD_INT 0
4337: EQUAL
4338: IFFALSE 4516
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4340: LD_ADDR_VAR 0 6
4344: PUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: LD_VAR 0 6
4357: PPUSH
4358: CALL 30022 0 1
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL 32314 0 4
4370: ST_TO_ADDR
// for s := 1 to tmp do
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 6
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4514
// begin i := tmp [ s ] ;
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_VAR 0 6
4398: PUSH
4399: LD_VAR 0 5
4403: ARRAY
4404: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4405: LD_EXP 7
4409: PUSH
4410: LD_VAR 0 2
4414: ARRAY
4415: IFFALSE 4430
4417: PUSH
4418: LD_EXP 25
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: NOT
4429: AND
4430: IFFALSE 4444
4432: PUSH
4433: LD_EXP 27
4437: PUSH
4438: LD_VAR 0 2
4442: ARRAY
4443: AND
4444: IFFALSE 4512
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4446: LD_EXP 27
4450: PUSH
4451: LD_VAR 0 2
4455: ARRAY
4456: PUSH
4457: LD_INT 1
4459: ARRAY
4460: PPUSH
4461: LD_INT 7
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4471: LD_ADDR_EXP 27
4475: PUSH
4476: LD_EXP 27
4480: PPUSH
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_VAR 0 2
4495: ARRAY
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: CALL_OW 3
4504: PPUSH
4505: CALL_OW 1
4509: ST_TO_ADDR
// break ;
4510: GO 4514
// end ; end ;
4512: GO 4386
4514: POP
4515: POP
// end ; end ; if not multi_custom_commanders then
4516: LD_EXP 16
4520: NOT
4521: IFFALSE 4636
// begin for i := 1 to 8 do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: DOUBLE
4529: LD_INT 1
4531: DEC
4532: ST_TO_ADDR
4533: LD_INT 8
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4610
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4539: LD_INT 22
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 69
4555: PUSH
4556: LD_INT 0
4558: EQUAL
4559: IFFALSE 4574
4561: PUSH
4562: LD_EXP 25
4566: PUSH
4567: LD_VAR 0 2
4571: ARRAY
4572: NOT
4573: AND
4574: IFFALSE 4608
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4576: LD_ADDR_EXP 25
4580: PUSH
4581: LD_EXP 25
4585: PPUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 1
4598: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL 5208 0 1
// end ; end ;
4608: GO 4536
4610: POP
4611: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4612: LD_EXP 25
4616: PPUSH
4617: CALL 30022 0 1
4621: PUSH
4622: LD_EXP 7
4626: PPUSH
4627: CALL 30022 0 1
4631: EQUAL
4632: IFFALSE 4636
// break ;
4634: GO 4660
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4636: CALL 4774 0 0
4640: NOT
4641: IFFALSE 4649
4643: PUSH
4644: LD_EXP 2
4648: AND
4649: IFTRUE 4658
4651: PUSH
4652: LD_EXP 24
4656: NOT
4657: OR
4658: IFFALSE 4118
// game := false ;
4660: LD_ADDR_EXP 2
4664: PUSH
4665: LD_INT 0
4667: ST_TO_ADDR
// for i := 1 to 8 do
4668: LD_ADDR_VAR 0 2
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_INT 8
4680: PUSH
4681: FOR_TO
4682: IFFALSE 4718
// begin if multi_sides [ i ] then
4684: LD_EXP 7
4688: PUSH
4689: LD_VAR 0 2
4693: ARRAY
4694: IFFALSE 4716
// SetMultiScore ( i , multi_points [ i ] ) ;
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_EXP 32
4705: PUSH
4706: LD_VAR 0 2
4710: ARRAY
4711: PPUSH
4712: CALL_OW 506
// end ;
4716: GO 4681
4718: POP
4719: POP
// if multi_loosers [ your_side ] then
4720: LD_EXP 25
4724: PUSH
4725: LD_OWVAR 2
4729: ARRAY
4730: IFFALSE 4753
// begin if Multiplayer then
4732: LD_OWVAR 4
4736: IFFALSE 4744
// YouLostInMultiplayer else
4738: CALL_OW 107
4742: GO 4751
// YouLost (  ) ;
4744: LD_STRING 
4746: PPUSH
4747: CALL_OW 104
// end else
4751: GO 4769
// begin if Multiplayer then
4753: LD_OWVAR 4
4757: IFFALSE 4765
// YouWinInMultiplayer else
4759: CALL_OW 106
4763: GO 4769
// YouWin ;
4765: CALL_OW 103
// end ; end ;
4769: LD_VAR 0 1
4773: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
// result := false ;
4778: LD_ADDR_VAR 0 1
4782: PUSH
4783: LD_INT 0
4785: ST_TO_ADDR
// for side in botSides do
4786: LD_ADDR_VAR 0 2
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: FOR_IN
4797: IFFALSE 4858
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4799: LD_ADDR_VAR 0 1
4803: PUSH
4804: LD_INT 22
4806: PUSH
4807: LD_VAR 0 2
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 21
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 50
4828: PUSH
4829: EMPTY
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: PUSH
4842: LD_INT 0
4844: GREATER
4845: ST_TO_ADDR
// if result then
4846: LD_VAR 0 1
4850: IFFALSE 4856
// exit ;
4852: POP
4853: POP
4854: GO 4860
// end ;
4856: GO 4796
4858: POP
4859: POP
// end ;
4860: LD_VAR 0 1
4864: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4865: LD_INT 0
4867: PPUSH
4868: PPUSH
// result := [ ] ;
4869: LD_ADDR_VAR 0 1
4873: PUSH
4874: EMPTY
4875: ST_TO_ADDR
// for i := 1 to 8 do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: DOUBLE
4882: LD_INT 1
4884: DEC
4885: ST_TO_ADDR
4886: LD_INT 8
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4947
// begin if multi_sides [ i ] then
4892: LD_EXP 7
4896: PUSH
4897: LD_VAR 0 2
4901: ARRAY
4902: IFFALSE 4945
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4904: LD_ADDR_VAR 0 1
4908: PUSH
4909: LD_VAR 0 1
4913: PUSH
4914: LD_STRING #coop-points
4916: PUSH
4917: LD_VAR 0 2
4921: PUSH
4922: LD_VAR 0 2
4926: PUSH
4927: LD_EXP 32
4931: PUSH
4932: LD_VAR 0 2
4936: ARRAY
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: ADD
4944: ST_TO_ADDR
// end ; end ;
4945: GO 4889
4947: POP
4948: POP
// end ;
4949: LD_VAR 0 1
4953: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4958: LD_ADDR_EXP 32
4962: PUSH
4963: LD_INT 0
4965: PUSH
4966: LD_INT 0
4968: PUSH
4969: LD_INT 0
4971: PUSH
4972: LD_INT 0
4974: PUSH
4975: LD_INT 0
4977: PUSH
4978: LD_INT 0
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: LD_INT 0
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4997: LD_ADDR_EXP 33
5001: PUSH
5002: EMPTY
5003: ST_TO_ADDR
// end ;
5004: LD_VAR 0 1
5008: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
5009: LD_INT 0
5011: PPUSH
// if not multi_points or not side or side > 8 then
5012: LD_EXP 32
5016: NOT
5017: IFTRUE 5026
5019: PUSH
5020: LD_VAR 0 1
5024: NOT
5025: OR
5026: IFTRUE 5038
5028: PUSH
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 8
5036: GREATER
5037: OR
5038: IFFALSE 5042
// exit ;
5040: GO 5079
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5042: LD_ADDR_EXP 32
5046: PUSH
5047: LD_EXP 32
5051: PPUSH
5052: LD_VAR 0 1
5056: PPUSH
5057: LD_EXP 32
5061: PUSH
5062: LD_VAR 0 1
5066: ARRAY
5067: PUSH
5068: LD_VAR 0 2
5072: PLUS
5073: PPUSH
5074: CALL_OW 1
5078: ST_TO_ADDR
// end ;
5079: LD_VAR 0 3
5083: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5084: LD_INT 0
5086: PPUSH
// if not multi_points or not side or side > 8 then
5087: LD_EXP 32
5091: NOT
5092: IFTRUE 5101
5094: PUSH
5095: LD_VAR 0 1
5099: NOT
5100: OR
5101: IFTRUE 5113
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 8
5111: GREATER
5112: OR
5113: IFFALSE 5117
// exit ;
5115: GO 5133
// result := multi_points [ side ] ;
5117: LD_ADDR_VAR 0 2
5121: PUSH
5122: LD_EXP 32
5126: PUSH
5127: LD_VAR 0 1
5131: ARRAY
5132: ST_TO_ADDR
// end ;
5133: LD_VAR 0 2
5137: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5138: LD_INT 0
5140: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5141: LD_ADDR_EXP 33
5145: PUSH
5146: LD_EXP 33
5150: PPUSH
5151: LD_EXP 33
5155: PUSH
5156: LD_INT 1
5158: PLUS
5159: PPUSH
5160: LD_VAR 0 1
5164: PPUSH
5165: CALL_OW 1
5169: ST_TO_ADDR
// end ;
5170: LD_VAR 0 2
5174: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5175: LD_INT 0
5177: PPUSH
// if not id then
5178: LD_VAR 0 1
5182: NOT
5183: IFFALSE 5187
// exit ;
5185: GO 5203
// result := multi_points_conditions [ id ] ;
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_EXP 33
5196: PUSH
5197: LD_VAR 0 1
5201: ARRAY
5202: ST_TO_ADDR
// end ;
5203: LD_VAR 0 2
5207: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
5212: PPUSH
5213: PPUSH
5214: PPUSH
// players := [ ] ;
5215: LD_ADDR_VAR 0 3
5219: PUSH
5220: EMPTY
5221: ST_TO_ADDR
// for i = 1 to 8 do
5222: LD_ADDR_VAR 0 4
5226: PUSH
5227: DOUBLE
5228: LD_INT 1
5230: DEC
5231: ST_TO_ADDR
5232: LD_INT 8
5234: PUSH
5235: FOR_TO
5236: IFFALSE 5297
// begin if i = side then
5238: LD_VAR 0 4
5242: PUSH
5243: LD_VAR 0 1
5247: EQUAL
5248: IFFALSE 5252
// continue ;
5250: GO 5235
// if multi_sides [ i ] and not multi_loosers [ i ] then
5252: LD_EXP 7
5256: PUSH
5257: LD_VAR 0 4
5261: ARRAY
5262: IFFALSE 5277
5264: PUSH
5265: LD_EXP 25
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: NOT
5276: AND
5277: IFFALSE 5295
// players := players ^ i ;
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_VAR 0 3
5288: PUSH
5289: LD_VAR 0 4
5293: ADD
5294: ST_TO_ADDR
// end ;
5295: GO 5235
5297: POP
5298: POP
// if not players then
5299: LD_VAR 0 3
5303: NOT
5304: IFFALSE 5308
// exit ;
5306: GO 5575
// if players = 1 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 1
5315: EQUAL
5316: IFFALSE 5377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5318: LD_ADDR_VAR 0 4
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_VAR 0 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 51
5337: PUSH
5338: EMPTY
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: PUSH
5350: FOR_IN
5351: IFFALSE 5373
// SetSide ( i , players [ 1 ] ) ;
5353: LD_VAR 0 4
5357: PPUSH
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 1
5365: ARRAY
5366: PPUSH
5367: CALL_OW 235
5371: GO 5350
5373: POP
5374: POP
// end else
5375: GO 5575
// begin j := 1 ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_INT 1
5384: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5385: LD_ADDR_VAR 0 4
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 2
5404: PUSH
5405: LD_INT 21
5407: PUSH
5408: LD_INT 1
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 51
5417: PUSH
5418: EMPTY
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PUSH
5425: LD_INT 21
5427: PUSH
5428: LD_INT 2
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 69
5448: PUSH
5449: FOR_IN
5450: IFFALSE 5573
// begin SetSide ( i , players [ j ] ) ;
5452: LD_VAR 0 4
5456: PPUSH
5457: LD_VAR 0 3
5461: PUSH
5462: LD_VAR 0 5
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// if IsDrivenBy ( i ) then
5472: LD_VAR 0 4
5476: PPUSH
5477: CALL_OW 311
5481: IFFALSE 5508
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5483: LD_VAR 0 4
5487: PPUSH
5488: CALL_OW 311
5492: PPUSH
5493: LD_VAR 0 3
5497: PUSH
5498: LD_VAR 0 5
5502: ARRAY
5503: PPUSH
5504: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 310
5517: PPUSH
5518: CALL_OW 247
5522: PUSH
5523: LD_INT 3
5525: EQUAL
5526: IFFALSE 5537
// ComExitBuilding ( i ) ;
5528: LD_VAR 0 4
5532: PPUSH
5533: CALL_OW 122
// j := j + 1 ;
5537: LD_ADDR_VAR 0 5
5541: PUSH
5542: LD_VAR 0 5
5546: PUSH
5547: LD_INT 1
5549: PLUS
5550: ST_TO_ADDR
// if j > players then
5551: LD_VAR 0 5
5555: PUSH
5556: LD_VAR 0 3
5560: GREATER
5561: IFFALSE 5571
// j := 1 ;
5563: LD_ADDR_VAR 0 5
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// end ;
5571: GO 5449
5573: POP
5574: POP
// end ; end ;
5575: LD_VAR 0 2
5579: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5580: LD_INT 0
5582: PPUSH
5583: PPUSH
5584: PPUSH
// i := 3 ;
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: LD_INT 3
5592: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_INT 5
5600: PUSH
5601: LD_INT 10
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 120
5610: PUSH
5611: LD_INT 2
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 101
5620: PUSH
5621: LD_INT 8
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 27
5630: PUSH
5631: LD_INT 4
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5644: LD_INT 4
5646: PPUSH
5647: LD_INT 5
5649: PPUSH
5650: LD_VAR 0 3
5654: PUSH
5655: LD_VAR 0 2
5659: ARRAY
5660: PUSH
5661: LD_INT 1
5663: ARRAY
5664: PPUSH
5665: LD_VAR 0 3
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PUSH
5676: LD_INT 2
5678: ARRAY
5679: PPUSH
5680: LD_INT 0
5682: PPUSH
5683: CALL_OW 58
// end ;
5687: LD_VAR 0 1
5691: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5692: LD_INT 0
5694: PPUSH
// if not side or side > 8 then
5695: LD_VAR 0 1
5699: NOT
5700: IFTRUE 5712
5702: PUSH
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 8
5710: GREATER
5711: OR
5712: IFFALSE 5716
// exit ;
5714: GO 5733
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5716: LD_VAR 0 1
5720: PPUSH
5721: LD_INT 6
5723: PPUSH
5724: CALL 5175 0 1
5728: PPUSH
5729: CALL 5009 0 2
// end ;
5733: LD_VAR 0 2
5737: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5738: LD_INT 0
5740: PPUSH
// if not side or side > 8 then
5741: LD_VAR 0 1
5745: NOT
5746: IFTRUE 5758
5748: PUSH
5749: LD_VAR 0 1
5753: PUSH
5754: LD_INT 8
5756: GREATER
5757: OR
5758: IFFALSE 5762
// exit ;
5760: GO 5779
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5762: LD_VAR 0 1
5766: PPUSH
5767: LD_INT 4
5769: PPUSH
5770: CALL 5175 0 1
5774: PPUSH
5775: CALL 5009 0 2
// end ;
5779: LD_VAR 0 2
5783: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5784: LD_INT 0
5786: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5787: LD_VAR 0 1
5791: NOT
5792: IFTRUE 5804
5794: PUSH
5795: LD_VAR 0 1
5799: PUSH
5800: LD_INT 8
5802: GREATER
5803: OR
5804: IFTRUE 5832
5806: PUSH
5807: LD_VAR 0 2
5811: PUSH
5812: LD_INT 2
5814: PUSH
5815: LD_INT 6
5817: PUSH
5818: LD_INT 36
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: IN
5830: NOT
5831: OR
5832: IFFALSE 5836
// exit ;
5834: GO 5853
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 3
5843: PPUSH
5844: CALL 5175 0 1
5848: PPUSH
5849: CALL 5009 0 2
// end ;
5853: LD_VAR 0 3
5857: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5858: LD_INT 0
5860: PPUSH
5861: PPUSH
// if not un then
5862: LD_VAR 0 1
5866: NOT
5867: IFFALSE 5871
// exit ;
5869: GO 5917
// if not points then
5871: LD_VAR 0 3
5875: NOT
5876: IFFALSE 5893
// gained_points := Multiplayer_GetCondition ( 1 ) else
5878: LD_ADDR_VAR 0 5
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL 5175 0 1
5890: ST_TO_ADDR
5891: GO 5903
// gained_points := points ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: LD_VAR 0 3
5902: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 5
5912: PPUSH
5913: CALL 5009 0 2
5917: LD_VAR 0 4
5921: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5922: LD_INT 0
5924: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5925: LD_VAR 0 1
5929: PPUSH
5930: LD_INT 2
5932: PPUSH
5933: CALL 5175 0 1
5937: PPUSH
5938: CALL 5009 0 2
// end ; end_of_file
5942: LD_VAR 0 2
5946: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
5957: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5958: LD_ADDR_EXP 35
5962: PUSH
5963: LD_VAR 0 1
5967: PPUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 1
5973: PPUSH
5974: CALL 27969 0 3
5978: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5979: LD_ADDR_EXP 36
5983: PUSH
5984: LD_INT 4
5986: PUSH
5987: LD_INT 1
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: LD_INT 6
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 1
6007: PUSH
6008: LD_INT 1
6010: PUSH
6011: LD_INT 5
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 3
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 2
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 1
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: LD_INT 3
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: ST_TO_ADDR
// amBuildings := [ ] ;
6081: LD_ADDR_EXP 37
6085: PUSH
6086: EMPTY
6087: ST_TO_ADDR
// amVehicles := [ ] ;
6088: LD_ADDR_EXP 38
6092: PUSH
6093: EMPTY
6094: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6095: LD_ADDR_EXP 39
6099: PUSH
6100: EMPTY
6101: ST_TO_ADDR
// amDrivers := [ ] ;
6102: LD_ADDR_EXP 40
6106: PUSH
6107: EMPTY
6108: ST_TO_ADDR
// amVehiclesCounter := 1 ;
6109: LD_ADDR_EXP 41
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6117: LD_ADDR_EXP 44
6121: PUSH
6122: LD_INT 6
6124: PUSH
6125: LD_INT 8
6127: PUSH
6128: LD_INT 10
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6142: LD_ADDR_VAR 0 8
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_INT 4
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: LD_OWVAR 67
6165: ARRAY
6166: ST_TO_ADDR
// uc_side := side ;
6167: LD_ADDR_OWVAR 20
6171: PUSH
6172: LD_VAR 0 1
6176: ST_TO_ADDR
// uc_nation := nation_american ;
6177: LD_ADDR_OWVAR 21
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// hc_gallery := us ;
6185: LD_ADDR_OWVAR 33
6189: PUSH
6190: LD_STRING us
6192: ST_TO_ADDR
// hc_face_number := 19 ;
6193: LD_ADDR_OWVAR 34
6197: PUSH
6198: LD_INT 19
6200: ST_TO_ADDR
// hc_importance := 100 ;
6201: LD_ADDR_OWVAR 32
6205: PUSH
6206: LD_INT 100
6208: ST_TO_ADDR
// hc_name := Sikorski ;
6209: LD_ADDR_OWVAR 26
6213: PUSH
6214: LD_STRING Sikorski
6216: ST_TO_ADDR
// hc_sex := sex_male ;
6217: LD_ADDR_OWVAR 27
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6225: LD_ADDR_OWVAR 31
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: LD_INT 3
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6248: LD_ADDR_OWVAR 29
6252: PUSH
6253: LD_INT 10
6255: PUSH
6256: LD_INT 11
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: ST_TO_ADDR
// Sikorski := CreateHuman ;
6263: LD_ADDR_EXP 34
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 52
// InitHC_All ( ) ;
6285: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6289: LD_ADDR_EXP 42
6293: PUSH
6294: LD_INT 1
6296: PPUSH
6297: LD_INT 3
6299: PPUSH
6300: LD_STRING 
6302: PPUSH
6303: LD_VAR 0 8
6307: PPUSH
6308: LD_INT 800
6310: PUSH
6311: LD_INT 120
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: PPUSH
6322: LD_INT 10
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_OWVAR 67
6340: ARRAY
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 6
6347: PUSH
6348: LD_INT 3
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL 36621 0 6
6361: ST_TO_ADDR
// amForceTmp := [ ] ;
6362: LD_ADDR_EXP 43
6366: PUSH
6367: EMPTY
6368: ST_TO_ADDR
// if Difficulty = 3 then
6369: LD_OWVAR 67
6373: PUSH
6374: LD_INT 3
6376: EQUAL
6377: IFFALSE 6408
// begin bc_type := b_breastwork ;
6379: LD_ADDR_OWVAR 42
6383: PUSH
6384: LD_INT 31
6386: ST_TO_ADDR
// bc_level := 7 ;
6387: LD_ADDR_OWVAR 43
6391: PUSH
6392: LD_INT 7
6394: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6395: LD_INT 79
6397: PPUSH
6398: LD_INT 72
6400: PPUSH
6401: LD_INT 5
6403: PPUSH
6404: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 30
6427: PUSH
6428: LD_INT 31
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 95
6440: PUSH
6441: LD_INT 3
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 58
6454: PUSH
6455: EMPTY
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 69
6468: PUSH
6469: FOR_IN
6470: IFFALSE 6599
// begin d := GetDir ( i ) ;
6472: LD_ADDR_VAR 0 4
6476: PUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 254
6486: ST_TO_ADDR
// if d < 3 then
6487: LD_VAR 0 4
6491: PUSH
6492: LD_INT 3
6494: LESS
6495: IFFALSE 6513
// d := d + 3 else
6497: LD_ADDR_VAR 0 4
6501: PUSH
6502: LD_VAR 0 4
6506: PUSH
6507: LD_INT 3
6509: PLUS
6510: ST_TO_ADDR
6511: GO 6527
// d := d - 3 ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 3
6525: MINUS
6526: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6527: LD_INT 0
6529: PPUSH
6530: LD_VAR 0 8
6534: PPUSH
6535: CALL_OW 381
// un := CreateHuman ;
6539: LD_ADDR_VAR 0 6
6543: PUSH
6544: CALL_OW 44
6548: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6549: LD_ADDR_EXP 43
6553: PUSH
6554: LD_EXP 43
6558: PPUSH
6559: LD_VAR 0 6
6563: PPUSH
6564: CALL 65954 0 2
6568: ST_TO_ADDR
// SetDir ( un , d ) ;
6569: LD_VAR 0 6
6573: PPUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_VAR 0 3
6592: PPUSH
6593: CALL_OW 52
// end ;
6597: GO 6469
6599: POP
6600: POP
// for i := 1 to 3 do
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: DOUBLE
6607: LD_INT 1
6609: DEC
6610: ST_TO_ADDR
6611: LD_INT 3
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6676
// begin PrepareEngineer ( false , skill ) ;
6617: LD_INT 0
6619: PPUSH
6620: LD_VAR 0 8
6624: PPUSH
6625: CALL_OW 382
// un := CreateHuman ;
6629: LD_ADDR_VAR 0 6
6633: PUSH
6634: CALL_OW 44
6638: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6639: LD_VAR 0 6
6643: PPUSH
6644: LD_INT 29
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6654: LD_ADDR_EXP 43
6658: PUSH
6659: LD_EXP 43
6663: PPUSH
6664: LD_VAR 0 6
6668: PPUSH
6669: CALL 65954 0 2
6673: ST_TO_ADDR
// end ;
6674: GO 6614
6676: POP
6677: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6678: LD_ADDR_VAR 0 3
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_VAR 0 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 21
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 69
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6748
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 5
6727: PUSH
6728: LD_INT 7
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: LD_OWVAR 67
6740: ARRAY
6741: PPUSH
6742: CALL_OW 241
6746: GO 6714
6748: POP
6749: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 69
6785: PUSH
6786: FOR_IN
6787: IFFALSE 6828
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6789: LD_VAR 0 3
6793: PPUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: LD_VAR 0 3
6812: PUSH
6813: LD_INT 3
6815: MOD
6816: PUSH
6817: LD_INT 1
6819: PLUS
6820: ARRAY
6821: PPUSH
6822: CALL_OW 431
6826: GO 6786
6828: POP
6829: POP
// end ;
6830: LD_VAR 0 2
6834: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6835: LD_INT 0
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
6862: PPUSH
6863: PPUSH
// enable ;
6864: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6865: LD_ADDR_VAR 0 11
6869: PUSH
6870: LD_INT 81
6872: PUSH
6873: LD_VAR 0 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: ST_TO_ADDR
// if tmp then
6887: LD_VAR 0 11
6891: IFFALSE 6912
// enemySide := GetSide ( tmp [ 1 ] ) ;
6893: LD_ADDR_VAR 0 35
6897: PUSH
6898: LD_VAR 0 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: CALL_OW 255
6911: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
6912: LD_ADDR_VAR 0 23
6916: PUSH
6917: LD_VAR 0 4
6921: PPUSH
6922: LD_INT 81
6924: PUSH
6925: LD_VAR 0 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 70
6938: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6939: LD_ADDR_VAR 0 24
6943: PUSH
6944: LD_VAR 0 5
6948: PPUSH
6949: LD_INT 81
6951: PUSH
6952: LD_VAR 0 1
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 70
6965: ST_TO_ADDR
// vehicles := amVehicles ;
6966: LD_ADDR_VAR 0 27
6970: PUSH
6971: LD_EXP 38
6975: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6976: LD_ADDR_VAR 0 33
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 22
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 30
7003: PUSH
7004: LD_INT 0
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 30
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 70
7034: ST_TO_ADDR
// if depot then
7035: LD_VAR 0 33
7039: IFFALSE 7055
// depot := depot [ 1 ] ;
7041: LD_ADDR_VAR 0 33
7045: PUSH
7046: LD_VAR 0 33
7050: PUSH
7051: LD_INT 1
7053: ARRAY
7054: ST_TO_ADDR
// if amTech then
7055: LD_EXP 35
7059: IFFALSE 7218
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7061: LD_ADDR_VAR 0 13
7065: PUSH
7066: LD_VAR 0 3
7070: PPUSH
7071: LD_INT 22
7073: PUSH
7074: LD_VAR 0 1
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 50
7085: PUSH
7086: EMPTY
7087: LIST
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 30
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 30
7104: PUSH
7105: LD_INT 7
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 30
7114: PUSH
7115: LD_INT 8
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: PPUSH
7133: CALL_OW 70
7137: ST_TO_ADDR
// if lab then
7138: LD_VAR 0 13
7142: IFFALSE 7218
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7144: LD_VAR 0 13
7148: PUSH
7149: LD_INT 1
7151: ARRAY
7152: PPUSH
7153: CALL_OW 461
7157: PUSH
7158: LD_INT 2
7160: EQUAL
7161: IFFALSE 7218
// begin for i in amTech do
7163: LD_ADDR_VAR 0 10
7167: PUSH
7168: LD_EXP 35
7172: PUSH
7173: FOR_IN
7174: IFFALSE 7216
// if CanBeResearched ( lab [ 1 ] , i ) then
7176: LD_VAR 0 13
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 10
7189: PPUSH
7190: CALL_OW 430
7194: IFFALSE 7214
// begin AddComResearch ( lab [ 1 ] , i ) ;
7196: LD_VAR 0 13
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: PPUSH
7205: LD_VAR 0 10
7209: PPUSH
7210: CALL_OW 184
// end ;
7214: GO 7173
7216: POP
7217: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7218: LD_ADDR_VAR 0 30
7222: PUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_INT 22
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 30
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 50
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 70
7265: ST_TO_ADDR
// if fac then
7266: LD_VAR 0 30
7270: IFFALSE 7605
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7272: LD_VAR 0 30
7276: PUSH
7277: LD_INT 1
7279: ARRAY
7280: PPUSH
7281: CALL_OW 461
7285: PUSH
7286: LD_INT 2
7288: EQUAL
7289: IFFALSE 7605
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7291: LD_ADDR_VAR 0 31
7295: PUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 32
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 33
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 35
7331: PUSH
7332: LD_INT 0
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: ST_TO_ADDR
// if emptyTowers then
7348: LD_VAR 0 31
7352: IFFALSE 7402
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7354: LD_ADDR_VAR 0 32
7358: PUSH
7359: LD_VAR 0 31
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL 38313 0 2
7377: ST_TO_ADDR
// if weapon then
7378: LD_VAR 0 32
7382: IFFALSE 7402
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7384: LD_VAR 0 31
7388: PUSH
7389: LD_INT 1
7391: ARRAY
7392: PPUSH
7393: LD_VAR 0 32
7397: PPUSH
7398: CALL_OW 148
// end ; if amConstructList then
7402: LD_EXP 36
7406: IFFALSE 7605
// for i := 1 to Count ( amConstructList ) do
7408: LD_ADDR_VAR 0 10
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_EXP 36
7422: PPUSH
7423: CALL 30022 0 1
7427: PUSH
7428: FOR_TO
7429: IFFALSE 7603
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7431: LD_VAR 0 30
7435: PUSH
7436: LD_INT 1
7438: ARRAY
7439: PPUSH
7440: LD_EXP 36
7444: PUSH
7445: LD_VAR 0 10
7449: ARRAY
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_EXP 36
7459: PUSH
7460: LD_VAR 0 10
7464: ARRAY
7465: PUSH
7466: LD_INT 2
7468: ARRAY
7469: PPUSH
7470: LD_EXP 36
7474: PUSH
7475: LD_VAR 0 10
7479: ARRAY
7480: PUSH
7481: LD_INT 3
7483: ARRAY
7484: PPUSH
7485: LD_EXP 36
7489: PUSH
7490: LD_VAR 0 10
7494: ARRAY
7495: PUSH
7496: LD_INT 4
7498: ARRAY
7499: PPUSH
7500: CALL_OW 448
7504: IFFALSE 7601
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7506: LD_VAR 0 30
7510: PUSH
7511: LD_INT 1
7513: ARRAY
7514: PPUSH
7515: LD_EXP 36
7519: PUSH
7520: LD_VAR 0 10
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_EXP 36
7534: PUSH
7535: LD_VAR 0 10
7539: ARRAY
7540: PUSH
7541: LD_INT 2
7543: ARRAY
7544: PPUSH
7545: LD_EXP 36
7549: PUSH
7550: LD_VAR 0 10
7554: ARRAY
7555: PUSH
7556: LD_INT 3
7558: ARRAY
7559: PPUSH
7560: LD_EXP 36
7564: PUSH
7565: LD_VAR 0 10
7569: ARRAY
7570: PUSH
7571: LD_INT 4
7573: ARRAY
7574: PPUSH
7575: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7579: LD_ADDR_EXP 36
7583: PUSH
7584: LD_EXP 36
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 3
7598: ST_TO_ADDR
// break ;
7599: GO 7603
// end ; end ;
7601: GO 7428
7603: POP
7604: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7605: LD_ADDR_VAR 0 11
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_INT 22
7617: PUSH
7618: LD_VAR 0 1
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 21
7629: PUSH
7630: LD_INT 3
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 57
7642: PUSH
7643: EMPTY
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: LD_INT 24
7655: PUSH
7656: LD_INT 1000
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 70
7677: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7678: LD_ADDR_VAR 0 18
7682: PUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 435
7692: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7693: LD_ADDR_VAR 0 15
7697: PUSH
7698: LD_VAR 0 6
7702: PPUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 50
7715: PUSH
7716: EMPTY
7717: LIST
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PPUSH
7723: CALL_OW 72
7727: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7728: LD_VAR 0 15
7732: PPUSH
7733: LD_INT 3
7735: PUSH
7736: LD_INT 120
7738: PUSH
7739: LD_INT 7
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 3
7752: PUSH
7753: LD_INT 54
7755: PUSH
7756: EMPTY
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: IFFALSE 7788
7773: PUSH
7774: LD_VAR 0 30
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 302
7787: AND
7788: IFFALSE 7847
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7790: LD_VAR 0 15
7794: PPUSH
7795: LD_INT 3
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 7
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: LD_INT 54
7817: PUSH
7818: EMPTY
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 72
7833: PPUSH
7834: LD_VAR 0 30
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PPUSH
7843: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7847: LD_ADDR_VAR 0 19
7851: PUSH
7852: LD_VAR 0 6
7856: PPUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 4
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 50
7869: PUSH
7870: EMPTY
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 72
7881: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7882: LD_ADDR_VAR 0 13
7886: PUSH
7887: LD_VAR 0 3
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 30
7897: PUSH
7898: LD_INT 6
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 30
7907: PUSH
7908: LD_INT 7
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 30
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PPUSH
7931: CALL_OW 70
7935: ST_TO_ADDR
// if sci then
7936: LD_VAR 0 19
7940: IFFALSE 8101
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7942: LD_ADDR_VAR 0 21
7946: PUSH
7947: LD_VAR 0 6
7951: PPUSH
7952: LD_INT 95
7954: PUSH
7955: LD_VAR 0 3
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 120
7966: PUSH
7967: LD_INT 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 72
7982: ST_TO_ADDR
// if hurtUnits then
7983: LD_VAR 0 21
7987: IFFALSE 8048
// begin for i in sci do
7989: LD_ADDR_VAR 0 10
7993: PUSH
7994: LD_VAR 0 19
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8044
// if IsInUnit ( i ) then
8002: LD_VAR 0 10
8006: PPUSH
8007: CALL_OW 310
8011: IFFALSE 8024
// ComExitBuilding ( i ) else
8013: LD_VAR 0 10
8017: PPUSH
8018: CALL_OW 122
8022: GO 8042
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8024: LD_VAR 0 10
8028: PPUSH
8029: LD_VAR 0 21
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: CALL_OW 128
8042: GO 7999
8044: POP
8045: POP
// end else
8046: GO 8101
// if lab then
8048: LD_VAR 0 13
8052: IFFALSE 8101
// begin for i in sci do
8054: LD_ADDR_VAR 0 10
8058: PUSH
8059: LD_VAR 0 19
8063: PUSH
8064: FOR_IN
8065: IFFALSE 8099
// if not IsInUnit ( i ) then
8067: LD_VAR 0 10
8071: PPUSH
8072: CALL_OW 310
8076: NOT
8077: IFFALSE 8097
// ComEnterUnit ( i , lab [ 1 ] ) ;
8079: LD_VAR 0 10
8083: PPUSH
8084: LD_VAR 0 13
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: CALL_OW 120
8097: GO 8064
8099: POP
8100: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8101: LD_ADDR_VAR 0 14
8105: PUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_INT 25
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PPUSH
8121: CALL_OW 72
8125: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8126: LD_ADDR_VAR 0 34
8130: PUSH
8131: LD_EXP 37
8135: ST_TO_ADDR
// if eng then
8136: LD_VAR 0 14
8140: IFFALSE 8988
// begin for i in eng do
8142: LD_ADDR_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8986
// begin tag := GetTag ( i ) ;
8155: LD_ADDR_VAR 0 16
8159: PUSH
8160: LD_VAR 0 10
8164: PPUSH
8165: CALL_OW 110
8169: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8170: LD_VAR 0 10
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 308
8184: IFFALSE 8215
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8186: LD_VAR 0 10
8190: PPUSH
8191: LD_VAR 0 8
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 8
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PPUSH
8209: CALL_OW 111
// continue ;
8213: GO 8152
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8215: LD_VAR 0 10
8219: PPUSH
8220: CALL_OW 256
8224: PUSH
8225: LD_INT 800
8227: LESS
8228: IFFALSE 8240
8230: PUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 1
8238: NONEQUAL
8239: AND
8240: IFFALSE 8290
// begin SetTag ( i , tHeal ) ;
8242: LD_VAR 0 10
8246: PPUSH
8247: LD_INT 1
8249: PPUSH
8250: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8254: LD_VAR 0 10
8258: PPUSH
8259: LD_VAR 0 7
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 7
8272: PUSH
8273: LD_INT 2
8275: ARRAY
8276: PPUSH
8277: CALL_OW 111
// AddComHold ( i ) ;
8281: LD_VAR 0 10
8285: PPUSH
8286: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8290: LD_VAR 0 16
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: IFFALSE 8315
8300: PUSH
8301: LD_VAR 0 10
8305: PPUSH
8306: CALL_OW 256
8310: PUSH
8311: LD_INT 1000
8313: EQUAL
8314: AND
8315: IFFALSE 8329
// SetTag ( i , 0 ) ;
8317: LD_VAR 0 10
8321: PPUSH
8322: LD_INT 0
8324: PPUSH
8325: CALL_OW 109
// if not tag then
8329: LD_VAR 0 16
8333: NOT
8334: IFFALSE 8505
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8336: LD_ADDR_VAR 0 12
8340: PUSH
8341: LD_VAR 0 3
8345: PPUSH
8346: LD_INT 57
8348: PUSH
8349: EMPTY
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if undone then
8357: LD_VAR 0 12
8361: IFFALSE 8383
// begin ComComplete ( i , undone [ 1 ] ) ;
8363: LD_VAR 0 10
8367: PPUSH
8368: LD_VAR 0 12
8372: PUSH
8373: LD_INT 1
8375: ARRAY
8376: PPUSH
8377: CALL 36158 0 2
// continue ;
8381: GO 8152
// end ; if cr or tmp or buildingsToBuild then
8383: LD_VAR 0 18
8387: IFTRUE 8395
8389: PUSH
8390: LD_VAR 0 11
8394: OR
8395: IFTRUE 8403
8397: PUSH
8398: LD_VAR 0 34
8402: OR
8403: IFFALSE 8479
// begin if IsInUnit ( i ) then
8405: LD_VAR 0 10
8409: PPUSH
8410: CALL_OW 310
8414: IFFALSE 8425
// ComExitBuilding ( i ) ;
8416: LD_VAR 0 10
8420: PPUSH
8421: CALL_OW 122
// if tmp then
8425: LD_VAR 0 11
8429: IFFALSE 8445
// SetTag ( i , tRepair ) else
8431: LD_VAR 0 10
8435: PPUSH
8436: LD_INT 3
8438: PPUSH
8439: CALL_OW 109
8443: GO 8477
// if cr then
8445: LD_VAR 0 18
8449: IFFALSE 8465
// SetTag ( i , tCrates ) else
8451: LD_VAR 0 10
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: CALL_OW 109
8463: GO 8477
// SetTag ( i , tBuild ) ;
8465: LD_VAR 0 10
8469: PPUSH
8470: LD_INT 5
8472: PPUSH
8473: CALL_OW 109
// end else
8477: GO 8505
// if not IsInUnit ( i ) then
8479: LD_VAR 0 10
8483: PPUSH
8484: CALL_OW 310
8488: NOT
8489: IFFALSE 8505
// ComEnterUnit ( i , depot ) ;
8491: LD_VAR 0 10
8495: PPUSH
8496: LD_VAR 0 33
8500: PPUSH
8501: CALL_OW 120
// end ; if tag = tRepair then
8505: LD_VAR 0 16
8509: PUSH
8510: LD_INT 3
8512: EQUAL
8513: IFFALSE 8619
// begin if IsInUnit ( i ) then
8515: LD_VAR 0 10
8519: PPUSH
8520: CALL_OW 310
8524: IFFALSE 8537
// begin ComExitBuilding ( i ) ;
8526: LD_VAR 0 10
8530: PPUSH
8531: CALL_OW 122
// continue ;
8535: GO 8152
// end ; if not tmp then
8537: LD_VAR 0 11
8541: NOT
8542: IFFALSE 8558
// begin SetTag ( i , 0 ) ;
8544: LD_VAR 0 10
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 109
// continue ;
8556: GO 8152
// end ; if not HasTask ( i ) then
8558: LD_VAR 0 10
8562: PPUSH
8563: CALL_OW 314
8567: NOT
8568: IFFALSE 8588
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8570: LD_VAR 0 10
8574: PPUSH
8575: LD_VAR 0 11
8579: PUSH
8580: LD_INT 1
8582: ARRAY
8583: PPUSH
8584: CALL_OW 130
// if not IsInarea ( i , area ) then
8588: LD_VAR 0 10
8592: PPUSH
8593: LD_VAR 0 3
8597: PPUSH
8598: CALL_OW 308
8602: NOT
8603: IFFALSE 8619
// ComMoveToarea ( i , area ) ;
8605: LD_VAR 0 10
8609: PPUSH
8610: LD_VAR 0 3
8614: PPUSH
8615: CALL_OW 113
// end ; if tag = tBuild then
8619: LD_VAR 0 16
8623: PUSH
8624: LD_INT 5
8626: EQUAL
8627: IFFALSE 8837
// begin if IsInUnit ( i ) then
8629: LD_VAR 0 10
8633: PPUSH
8634: CALL_OW 310
8638: IFFALSE 8651
// begin ComExitBuilding ( i ) ;
8640: LD_VAR 0 10
8644: PPUSH
8645: CALL_OW 122
// continue ;
8649: GO 8152
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8651: LD_VAR 0 34
8655: NOT
8656: IFTRUE 8664
8658: PUSH
8659: LD_VAR 0 23
8663: OR
8664: IFTRUE 8672
8666: PUSH
8667: LD_VAR 0 24
8671: OR
8672: IFFALSE 8690
// begin SetTag ( i , 0 ) ;
8674: LD_VAR 0 10
8678: PPUSH
8679: LD_INT 0
8681: PPUSH
8682: CALL_OW 109
// continue ;
8686: GO 8152
// end else
8688: GO 8729
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8690: LD_VAR 0 33
8694: PPUSH
8695: LD_VAR 0 34
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: PUSH
8704: LD_INT 1
8706: ARRAY
8707: PPUSH
8708: CALL 70049 0 2
8712: NOT
8713: IFFALSE 8729
// begin SetTag ( i , 0 ) ;
8715: LD_VAR 0 10
8719: PPUSH
8720: LD_INT 0
8722: PPUSH
8723: CALL_OW 109
// continue ;
8727: GO 8152
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8729: LD_ADDR_VAR 0 12
8733: PUSH
8734: LD_VAR 0 3
8738: PPUSH
8739: LD_INT 57
8741: PUSH
8742: EMPTY
8743: LIST
8744: PPUSH
8745: CALL_OW 70
8749: ST_TO_ADDR
// if undone then
8750: LD_VAR 0 12
8754: IFFALSE 8776
// begin ComComplete ( i , undone [ 1 ] ) ;
8756: LD_VAR 0 10
8760: PPUSH
8761: LD_VAR 0 12
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: CALL 36158 0 2
// continue ;
8774: GO 8152
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8776: LD_VAR 0 10
8780: PPUSH
8781: LD_VAR 0 34
8785: PUSH
8786: LD_INT 1
8788: ARRAY
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PPUSH
8794: LD_VAR 0 34
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PUSH
8803: LD_INT 2
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 34
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PUSH
8816: LD_INT 3
8818: ARRAY
8819: PPUSH
8820: LD_VAR 0 34
8824: PUSH
8825: LD_INT 1
8827: ARRAY
8828: PUSH
8829: LD_INT 4
8831: ARRAY
8832: PPUSH
8833: CALL_OW 145
// end ; if tag = tCrates then
8837: LD_VAR 0 16
8841: PUSH
8842: LD_INT 2
8844: EQUAL
8845: IFFALSE 8984
// begin if IsInUnit ( i ) then
8847: LD_VAR 0 10
8851: PPUSH
8852: CALL_OW 310
8856: IFFALSE 8869
// begin ComExitBuilding ( i ) ;
8858: LD_VAR 0 10
8862: PPUSH
8863: CALL_OW 122
// continue ;
8867: GO 8152
// end ; if not cr then
8869: LD_VAR 0 18
8873: NOT
8874: IFFALSE 8890
// begin SetTag ( i , 0 ) ;
8876: LD_VAR 0 10
8880: PPUSH
8881: LD_INT 0
8883: PPUSH
8884: CALL_OW 109
// continue ;
8888: GO 8152
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8890: LD_VAR 0 10
8894: PPUSH
8895: CALL_OW 314
8899: NOT
8900: IFFALSE 8955
8902: PUSH
8903: LD_INT 81
8905: PUSH
8906: LD_VAR 0 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 92
8917: PUSH
8918: LD_VAR 0 18
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PUSH
8927: LD_VAR 0 18
8931: PUSH
8932: LD_INT 2
8934: ARRAY
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: NOT
8954: AND
8955: IFFALSE 8984
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8957: LD_VAR 0 10
8961: PPUSH
8962: LD_VAR 0 18
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_VAR 0 18
8975: PUSH
8976: LD_INT 2
8978: ARRAY
8979: PPUSH
8980: CALL_OW 117
// end ; end ;
8984: GO 8152
8986: POP
8987: POP
// end ; if vehicles then
8988: LD_VAR 0 27
8992: IFFALSE 9804
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8994: LD_ADDR_VAR 0 27
8998: PUSH
8999: LD_VAR 0 27
9003: PPUSH
9004: LD_INT 3
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: LD_INT 34
9012: PUSH
9013: LD_INT 13
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 34
9022: PUSH
9023: LD_INT 12
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 50
9041: PUSH
9042: EMPTY
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 72
9053: ST_TO_ADDR
// if vehicles then
9054: LD_VAR 0 27
9058: IFFALSE 9804
// begin for i in vehicles do
9060: LD_ADDR_VAR 0 10
9064: PUSH
9065: LD_VAR 0 27
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9802
// begin tag := GetTag ( i ) ;
9073: LD_ADDR_VAR 0 16
9077: PUSH
9078: LD_VAR 0 10
9082: PPUSH
9083: CALL_OW 110
9087: ST_TO_ADDR
// if not tag then
9088: LD_VAR 0 16
9092: NOT
9093: IFFALSE 9239
// begin if GetControl ( i ) = control_manual then
9095: LD_VAR 0 10
9099: PPUSH
9100: CALL_OW 263
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: IFFALSE 9225
// begin drivers := amDrivers ;
9110: LD_ADDR_VAR 0 25
9114: PUSH
9115: LD_EXP 40
9119: ST_TO_ADDR
// if not drivers then
9120: LD_VAR 0 25
9124: NOT
9125: IFFALSE 9205
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9127: LD_ADDR_VAR 0 25
9131: PUSH
9132: LD_VAR 0 15
9136: PPUSH
9137: LD_INT 3
9139: PUSH
9140: LD_INT 120
9142: PUSH
9143: LD_INT 7
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 72
9158: ST_TO_ADDR
// if drivers then
9159: LD_VAR 0 25
9163: IFFALSE 9205
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9165: LD_VAR 0 25
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_INT 7
9176: PPUSH
9177: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9181: LD_ADDR_EXP 40
9185: PUSH
9186: LD_EXP 40
9190: PPUSH
9191: LD_VAR 0 25
9195: PUSH
9196: LD_INT 1
9198: ARRAY
9199: PPUSH
9200: CALL 65954 0 2
9204: ST_TO_ADDR
// end ; end ; if drivers then
9205: LD_VAR 0 25
9209: IFFALSE 9223
// SetTag ( i , tBusy ) ;
9211: LD_VAR 0 10
9215: PPUSH
9216: LD_INT 8
9218: PPUSH
9219: CALL_OW 109
// continue ;
9223: GO 9070
// end ; SetTag ( i , tBusy ) ;
9225: LD_VAR 0 10
9229: PPUSH
9230: LD_INT 8
9232: PPUSH
9233: CALL_OW 109
// end else
9237: GO 9800
// if tag = tBusy then
9239: LD_VAR 0 16
9243: PUSH
9244: LD_INT 8
9246: EQUAL
9247: IFFALSE 9467
// begin if GetLives ( i ) = 1000 then
9249: LD_VAR 0 10
9253: PPUSH
9254: CALL_OW 256
9258: PUSH
9259: LD_INT 1000
9261: EQUAL
9262: IFFALSE 9465
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9264: LD_VAR 0 10
9268: PPUSH
9269: CALL_OW 263
9273: PUSH
9274: LD_INT 1
9276: EQUAL
9277: IFFALSE 9291
9279: PUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 311
9289: NOT
9290: AND
9291: IFFALSE 9453
// begin drivers := amDrivers ;
9293: LD_ADDR_VAR 0 25
9297: PUSH
9298: LD_EXP 40
9302: ST_TO_ADDR
// if not drivers then
9303: LD_VAR 0 25
9307: NOT
9308: IFFALSE 9324
// begin SetTag ( i , 0 ) ;
9310: LD_VAR 0 10
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: CALL_OW 109
// continue ;
9322: GO 9070
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9324: LD_VAR 0 25
9328: PUSH
9329: LD_INT 1
9331: ARRAY
9332: PPUSH
9333: CALL_OW 310
9337: IFFALSE 9355
9339: PUSH
9340: LD_VAR 0 25
9344: PUSH
9345: LD_INT 1
9347: ARRAY
9348: PPUSH
9349: CALL 63534 0 1
9353: NOT
9354: AND
9355: IFFALSE 9370
// ComExitBuilding ( drivers [ 1 ] ) ;
9357: LD_VAR 0 25
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: PPUSH
9366: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9370: LD_VAR 0 27
9374: PPUSH
9375: LD_INT 120
9377: PUSH
9378: LD_INT 3
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 72
9389: IFFALSE 9407
9391: PUSH
9392: LD_VAR 0 25
9396: PUSH
9397: LD_INT 1
9399: ARRAY
9400: PPUSH
9401: CALL_OW 314
9405: NOT
9406: AND
9407: IFTRUE 9431
9409: PUSH
9410: LD_VAR 0 27
9414: PPUSH
9415: LD_INT 120
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 72
9429: NOT
9430: OR
9431: IFFALSE 9451
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9433: LD_VAR 0 25
9437: PUSH
9438: LD_INT 1
9440: ARRAY
9441: PPUSH
9442: LD_VAR 0 10
9446: PPUSH
9447: CALL_OW 120
// continue ;
9451: GO 9070
// end ; SetTag ( i , tAttack ) ;
9453: LD_VAR 0 10
9457: PPUSH
9458: LD_INT 13
9460: PPUSH
9461: CALL_OW 109
// end ; end else
9465: GO 9800
// if tag = tAttack then
9467: LD_VAR 0 16
9471: PUSH
9472: LD_INT 13
9474: EQUAL
9475: IFFALSE 9657
// begin enemy := enemyInBase ;
9477: LD_ADDR_VAR 0 22
9481: PUSH
9482: LD_VAR 0 23
9486: ST_TO_ADDR
// if not enemy then
9487: LD_VAR 0 22
9491: NOT
9492: IFFALSE 9504
// enemy := enemyOuterBase ;
9494: LD_ADDR_VAR 0 22
9498: PUSH
9499: LD_VAR 0 24
9503: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9504: LD_VAR 0 22
9508: NOT
9509: IFFALSE 9544
9511: PUSH
9512: LD_VAR 0 10
9516: PPUSH
9517: LD_VAR 0 8
9521: PUSH
9522: LD_INT 1
9524: ARRAY
9525: PPUSH
9526: LD_VAR 0 8
9530: PUSH
9531: LD_INT 2
9533: ARRAY
9534: PPUSH
9535: CALL_OW 297
9539: PUSH
9540: LD_INT 10
9542: GREATER
9543: AND
9544: IFFALSE 9575
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9546: LD_VAR 0 10
9550: PPUSH
9551: LD_VAR 0 8
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: LD_VAR 0 8
9564: PUSH
9565: LD_INT 2
9567: ARRAY
9568: PPUSH
9569: CALL_OW 111
// continue ;
9573: GO 9070
// end ; if GetLives ( i ) < 650 then
9575: LD_VAR 0 10
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: LESS
9588: IFFALSE 9631
// begin SetTag ( i , tVehRepair ) ;
9590: LD_VAR 0 10
9594: PPUSH
9595: LD_INT 9
9597: PPUSH
9598: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9602: LD_VAR 0 10
9606: PPUSH
9607: LD_VAR 0 8
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: LD_VAR 0 8
9620: PUSH
9621: LD_INT 2
9623: ARRAY
9624: PPUSH
9625: CALL_OW 111
// continue ;
9629: GO 9070
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9631: LD_VAR 0 10
9635: PPUSH
9636: LD_VAR 0 22
9640: PPUSH
9641: LD_VAR 0 10
9645: PPUSH
9646: CALL_OW 74
9650: PPUSH
9651: CALL_OW 115
// end else
9655: GO 9800
// if tag = tVehRepair then
9657: LD_VAR 0 16
9661: PUSH
9662: LD_INT 9
9664: EQUAL
9665: IFFALSE 9800
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9667: LD_VAR 0 10
9671: PPUSH
9672: LD_VAR 0 8
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PPUSH
9681: LD_VAR 0 8
9685: PUSH
9686: LD_INT 2
9688: ARRAY
9689: PPUSH
9690: CALL_OW 297
9694: PUSH
9695: LD_INT 10
9697: GREATER
9698: IFFALSE 9729
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9700: LD_VAR 0 10
9704: PPUSH
9705: LD_VAR 0 8
9709: PUSH
9710: LD_INT 1
9712: ARRAY
9713: PPUSH
9714: LD_VAR 0 8
9718: PUSH
9719: LD_INT 2
9721: ARRAY
9722: PPUSH
9723: CALL_OW 111
// continue ;
9727: GO 9070
// end ; if GetLives ( i ) = 1000 then
9729: LD_VAR 0 10
9733: PPUSH
9734: CALL_OW 256
9738: PUSH
9739: LD_INT 1000
9741: EQUAL
9742: IFFALSE 9758
// begin SetTag ( i , tBusy ) ;
9744: LD_VAR 0 10
9748: PPUSH
9749: LD_INT 8
9751: PPUSH
9752: CALL_OW 109
// continue ;
9756: GO 9070
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9758: LD_VAR 0 10
9762: PPUSH
9763: CALL_OW 263
9767: PUSH
9768: LD_INT 1
9770: EQUAL
9771: IFFALSE 9784
9773: PUSH
9774: LD_VAR 0 10
9778: PPUSH
9779: CALL_OW 311
9783: AND
9784: IFFALSE 9800
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9786: LD_VAR 0 10
9790: PPUSH
9791: CALL_OW 311
9795: PPUSH
9796: CALL 67668 0 1
// end ; end ;
9800: GO 9070
9802: POP
9803: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9804: LD_ADDR_VAR 0 20
9808: PUSH
9809: LD_VAR 0 6
9813: PPUSH
9814: LD_INT 2
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 8
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 25
9839: PUSH
9840: LD_INT 5
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 25
9849: PUSH
9850: LD_INT 9
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 50
9866: PUSH
9867: EMPTY
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 72
9878: ST_TO_ADDR
// if sol then
9879: LD_VAR 0 20
9883: IFFALSE 10399
// begin if enemyInBase then
9885: LD_VAR 0 23
9889: IFFALSE 10068
// begin for i in sol do
9891: LD_ADDR_VAR 0 10
9895: PUSH
9896: LD_VAR 0 20
9900: PUSH
9901: FOR_IN
9902: IFFALSE 10064
// begin tw := IsInUnit ( i ) ;
9904: LD_ADDR_VAR 0 17
9908: PUSH
9909: LD_VAR 0 10
9913: PPUSH
9914: CALL_OW 310
9918: ST_TO_ADDR
// if tw then
9919: LD_VAR 0 17
9923: IFFALSE 10006
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9925: LD_VAR 0 17
9929: PUSH
9930: LD_INT 22
9932: PUSH
9933: LD_VAR 0 1
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 101
9944: PUSH
9945: LD_VAR 0 35
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 32
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 31
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: IN
9992: NOT
9993: IFFALSE 10004
// ComExitBuilding ( i ) ;
9995: LD_VAR 0 10
9999: PPUSH
10000: CALL_OW 122
// end else
10004: GO 10062
// if IsInArea ( i , area ) then
10006: LD_VAR 0 10
10010: PPUSH
10011: LD_VAR 0 3
10015: PPUSH
10016: CALL_OW 308
10020: IFFALSE 10048
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
10022: LD_VAR 0 10
10026: PPUSH
10027: LD_VAR 0 23
10031: PPUSH
10032: LD_VAR 0 10
10036: PPUSH
10037: CALL_OW 74
10041: PPUSH
10042: CALL_OW 115
10046: GO 10062
// ComMoveToarea ( i , area ) ;
10048: LD_VAR 0 10
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: CALL_OW 113
// end ;
10062: GO 9901
10064: POP
10065: POP
// end else
10066: GO 10399
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
10068: LD_ADDR_VAR 0 29
10072: PUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 62
10083: PUSH
10084: EMPTY
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 30
10096: PUSH
10097: LD_INT 32
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 30
10106: PUSH
10107: LD_INT 4
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 31
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 70
10149: ST_TO_ADDR
// if empty then
10150: LD_VAR 0 29
10154: IFFALSE 10171
// empty := ReverseArray ( empty ) ;
10156: LD_ADDR_VAR 0 29
10160: PUSH
10161: LD_VAR 0 29
10165: PPUSH
10166: CALL 61044 0 1
10170: ST_TO_ADDR
// for i in sol do
10171: LD_ADDR_VAR 0 10
10175: PUSH
10176: LD_VAR 0 20
10180: PUSH
10181: FOR_IN
10182: IFFALSE 10397
// begin tag := GetTag ( i ) ;
10184: LD_ADDR_VAR 0 16
10188: PUSH
10189: LD_VAR 0 10
10193: PPUSH
10194: CALL_OW 110
10198: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10199: LD_VAR 0 10
10203: PPUSH
10204: CALL_OW 256
10208: PUSH
10209: LD_INT 1000
10211: LESS
10212: IFFALSE 10224
10214: PUSH
10215: LD_VAR 0 16
10219: PUSH
10220: LD_INT 1
10222: NONEQUAL
10223: AND
10224: IFFALSE 10276
// begin SetTag ( i , tHeal ) ;
10226: LD_VAR 0 10
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10238: LD_VAR 0 10
10242: PPUSH
10243: LD_VAR 0 7
10247: PUSH
10248: LD_INT 1
10250: ARRAY
10251: PPUSH
10252: LD_VAR 0 7
10256: PUSH
10257: LD_INT 2
10259: ARRAY
10260: PPUSH
10261: CALL_OW 111
// AddComHold ( i ) ;
10265: LD_VAR 0 10
10269: PPUSH
10270: CALL_OW 200
// continue ;
10274: GO 10181
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10276: LD_VAR 0 10
10280: PPUSH
10281: CALL_OW 256
10285: PUSH
10286: LD_INT 1000
10288: EQUAL
10289: IFFALSE 10301
10291: PUSH
10292: LD_VAR 0 16
10296: PUSH
10297: LD_INT 1
10299: EQUAL
10300: AND
10301: IFFALSE 10317
// begin SetTag ( i , 0 ) ;
10303: LD_VAR 0 10
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 109
// continue ;
10315: GO 10181
// end ; if HasTask ( i ) then
10317: LD_VAR 0 10
10321: PPUSH
10322: CALL_OW 314
10326: IFFALSE 10330
// continue ;
10328: GO 10181
// if not IsInUnit ( i ) and not tag and empty then
10330: LD_VAR 0 10
10334: PPUSH
10335: CALL_OW 310
10339: NOT
10340: IFFALSE 10349
10342: PUSH
10343: LD_VAR 0 16
10347: NOT
10348: AND
10349: IFFALSE 10357
10351: PUSH
10352: LD_VAR 0 29
10356: AND
10357: IFFALSE 10395
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10359: LD_VAR 0 10
10363: PPUSH
10364: LD_VAR 0 29
10368: PUSH
10369: LD_INT 1
10371: ARRAY
10372: PPUSH
10373: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10377: LD_ADDR_VAR 0 29
10381: PUSH
10382: LD_VAR 0 29
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 3
10394: ST_TO_ADDR
// end ; end ;
10395: GO 10181
10397: POP
10398: POP
// end ; end ; end ;
10399: LD_VAR 0 9
10403: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10404: LD_EXP 42
10408: PPUSH
10409: LD_INT 50
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 72
10419: IFFALSE 10475
10421: GO 10423
10423: DISABLE
// begin BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10424: LD_EXP 3
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: LD_INT 3
10438: PPUSH
10439: LD_INT 32
10441: PPUSH
10442: LD_INT 4
10444: PPUSH
10445: LD_EXP 42
10449: PPUSH
10450: LD_INT 27
10452: PUSH
10453: LD_INT 33
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PPUSH
10460: LD_INT 22
10462: PUSH
10463: LD_INT 17
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PPUSH
10470: CALL 6835 0 8
// enable ;
10474: ENABLE
// end ;
10475: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 302
10483: IFFALSE 10492
10485: PUSH
10486: LD_EXP 36
10490: NOT
10491: AND
10492: IFFALSE 10562
10494: GO 10496
10496: DISABLE
// begin enable ;
10497: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10498: LD_ADDR_EXP 36
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: LD_INT 1
10547: PUSH
10548: LD_INT 6
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: ST_TO_ADDR
// end ; end_of_file
10562: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10563: LD_INT 0
10565: PPUSH
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
10571: PPUSH
10572: PPUSH
10573: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10574: LD_ADDR_EXP 45
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 2
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL 27969 0 3
10594: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10595: LD_ADDR_EXP 46
10599: PUSH
10600: LD_INT 13
10602: PUSH
10603: LD_INT 1
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: LD_INT 27
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 13
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: LD_INT 27
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 13
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: LD_INT 26
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 13
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 13
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: LD_INT 27
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: ST_TO_ADDR
// arBuildings := [ ] ;
10697: LD_ADDR_EXP 47
10701: PUSH
10702: EMPTY
10703: ST_TO_ADDR
// arVehicles := [ ] ;
10704: LD_ADDR_EXP 48
10708: PUSH
10709: EMPTY
10710: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10711: LD_ADDR_EXP 49
10715: PUSH
10716: EMPTY
10717: ST_TO_ADDR
// arDrivers := [ ] ;
10718: LD_ADDR_EXP 50
10722: PUSH
10723: EMPTY
10724: ST_TO_ADDR
// arVehiclesCounter := 1 ;
10725: LD_ADDR_EXP 52
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// arMinesList := [ ] ;
10733: LD_ADDR_EXP 53
10737: PUSH
10738: EMPTY
10739: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10740: LD_ADDR_EXP 51
10744: PUSH
10745: LD_INT 8
10747: PUSH
10748: LD_INT 11
10750: PUSH
10751: LD_INT 12
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: PUSH
10759: LD_OWVAR 67
10763: ARRAY
10764: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_INT 24
10772: PPUSH
10773: CALL 71075 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10777: LD_INT 23
10779: PPUSH
10780: LD_INT 7
10782: PUSH
10783: LD_INT 9
10785: PUSH
10786: LD_INT 11
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_OWVAR 67
10798: ARRAY
10799: PPUSH
10800: CALL 11365 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10804: LD_ADDR_VAR 0 8
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: LD_INT 4
10814: PUSH
10815: LD_INT 5
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_OWVAR 67
10827: ARRAY
10828: ST_TO_ADDR
// uc_side := side ;
10829: LD_ADDR_OWVAR 20
10833: PUSH
10834: LD_VAR 0 1
10838: ST_TO_ADDR
// uc_nation := 2 ;
10839: LD_ADDR_OWVAR 21
10843: PUSH
10844: LD_INT 2
10846: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10847: LD_ADDR_EXP 54
10851: PUSH
10852: LD_INT 32
10854: PPUSH
10855: LD_INT 5
10857: PPUSH
10858: LD_STRING 
10860: PPUSH
10861: LD_VAR 0 8
10865: PPUSH
10866: LD_INT 800
10868: PUSH
10869: LD_INT 120
10871: PUSH
10872: LD_INT 0
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PPUSH
10880: LD_INT 10
10882: PUSH
10883: LD_INT 11
10885: PUSH
10886: LD_INT 12
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: PUSH
10894: LD_OWVAR 67
10898: ARRAY
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: LD_INT 6
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL 36621 0 6
10919: ST_TO_ADDR
// arForceTmp := [ ] ;
10920: LD_ADDR_EXP 55
10924: PUSH
10925: EMPTY
10926: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_VAR 0 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 30
10946: PUSH
10947: LD_INT 31
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 3
10956: PUSH
10957: LD_INT 95
10959: PUSH
10960: LD_INT 5
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 58
10973: PUSH
10974: EMPTY
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: PPUSH
10983: CALL_OW 69
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11118
// begin d := GetDir ( i ) ;
10991: LD_ADDR_VAR 0 4
10995: PUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: CALL_OW 254
11005: ST_TO_ADDR
// if d < 3 then
11006: LD_VAR 0 4
11010: PUSH
11011: LD_INT 3
11013: LESS
11014: IFFALSE 11032
// d := d + 3 else
11016: LD_ADDR_VAR 0 4
11020: PUSH
11021: LD_VAR 0 4
11025: PUSH
11026: LD_INT 3
11028: PLUS
11029: ST_TO_ADDR
11030: GO 11046
// d := d - 3 ;
11032: LD_ADDR_VAR 0 4
11036: PUSH
11037: LD_VAR 0 4
11041: PUSH
11042: LD_INT 3
11044: MINUS
11045: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
11046: LD_INT 0
11048: PPUSH
11049: LD_VAR 0 8
11053: PPUSH
11054: CALL_OW 381
// un := CreateHuman ;
11058: LD_ADDR_VAR 0 6
11062: PUSH
11063: CALL_OW 44
11067: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11068: LD_ADDR_EXP 55
11072: PUSH
11073: LD_EXP 55
11077: PPUSH
11078: LD_VAR 0 6
11082: PPUSH
11083: CALL 65954 0 2
11087: ST_TO_ADDR
// SetDir ( un , d ) ;
11088: LD_VAR 0 6
11092: PPUSH
11093: LD_VAR 0 4
11097: PPUSH
11098: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11102: LD_VAR 0 6
11106: PPUSH
11107: LD_VAR 0 3
11111: PPUSH
11112: CALL_OW 52
// end ;
11116: GO 10988
11118: POP
11119: POP
// for i := 1 to Difficulty do
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: DOUBLE
11126: LD_INT 1
11128: DEC
11129: ST_TO_ADDR
11130: LD_OWVAR 67
11134: PUSH
11135: FOR_TO
11136: IFFALSE 11202
// begin PrepareSoldier ( false , skill ) ;
11138: LD_INT 0
11140: PPUSH
11141: LD_VAR 0 8
11145: PPUSH
11146: CALL_OW 381
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 6
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11160: LD_ADDR_EXP 55
11164: PUSH
11165: LD_EXP 55
11169: PPUSH
11170: LD_VAR 0 6
11174: PPUSH
11175: CALL 65954 0 2
11179: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11180: LD_VAR 0 6
11184: PPUSH
11185: LD_INT 215
11187: PPUSH
11188: LD_INT 102
11190: PPUSH
11191: CALL_OW 428
11195: PPUSH
11196: CALL_OW 52
// end ;
11200: GO 11135
11202: POP
11203: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11204: LD_ADDR_VAR 0 3
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_VAR 0 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: PUSH
11240: FOR_IN
11241: IFFALSE 11274
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 3
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 7
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: LD_OWVAR 67
11266: ARRAY
11267: PPUSH
11268: CALL_OW 241
11272: GO 11240
11274: POP
11275: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11276: LD_ADDR_VAR 0 3
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 30
11295: PUSH
11296: LD_INT 32
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: PUSH
11312: FOR_IN
11313: IFFALSE 11358
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 27
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 24
11328: PUSH
11329: LD_INT 27
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: LD_VAR 0 3
11342: PUSH
11343: LD_INT 4
11345: MOD
11346: PUSH
11347: LD_INT 1
11349: PLUS
11350: ARRAY
11351: PPUSH
11352: CALL_OW 431
11356: GO 11312
11358: POP
11359: POP
// end ;
11360: LD_VAR 0 2
11364: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11365: LD_INT 0
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11371: LD_ADDR_VAR 0 5
11375: PUSH
11376: LD_VAR 0 1
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: CALL_OW 517
11388: ST_TO_ADDR
// if not tmp then
11389: LD_VAR 0 5
11393: NOT
11394: IFFALSE 11398
// exit ;
11396: GO 11640
// for i := 1 to n do
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: DOUBLE
11404: LD_INT 1
11406: DEC
11407: ST_TO_ADDR
11408: LD_VAR 0 2
11412: PUSH
11413: FOR_TO
11414: IFFALSE 11638
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11416: LD_ADDR_VAR 0 6
11420: PUSH
11421: LD_INT 1
11423: PPUSH
11424: LD_VAR 0 5
11428: PUSH
11429: LD_INT 1
11431: ARRAY
11432: PPUSH
11433: CALL_OW 12
11437: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11438: LD_VAR 0 5
11442: PUSH
11443: LD_INT 1
11445: ARRAY
11446: PUSH
11447: LD_VAR 0 6
11451: ARRAY
11452: PPUSH
11453: LD_VAR 0 5
11457: PUSH
11458: LD_INT 2
11460: ARRAY
11461: PUSH
11462: LD_VAR 0 6
11466: ARRAY
11467: PPUSH
11468: LD_EXP 3
11472: PUSH
11473: LD_INT 2
11475: ARRAY
11476: PPUSH
11477: LD_INT 0
11479: PPUSH
11480: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11484: LD_ADDR_EXP 53
11488: PUSH
11489: LD_EXP 53
11493: PPUSH
11494: LD_EXP 53
11498: PUSH
11499: LD_INT 1
11501: PLUS
11502: PPUSH
11503: LD_VAR 0 5
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: PUSH
11512: LD_VAR 0 6
11516: ARRAY
11517: PPUSH
11518: CALL_OW 2
11522: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11523: LD_ADDR_EXP 53
11527: PUSH
11528: LD_EXP 53
11532: PPUSH
11533: LD_EXP 53
11537: PUSH
11538: LD_INT 1
11540: PLUS
11541: PPUSH
11542: LD_VAR 0 5
11546: PUSH
11547: LD_INT 2
11549: ARRAY
11550: PUSH
11551: LD_VAR 0 6
11555: ARRAY
11556: PPUSH
11557: CALL_OW 2
11561: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11562: LD_ADDR_VAR 0 5
11566: PUSH
11567: LD_VAR 0 5
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_VAR 0 5
11579: PUSH
11580: LD_INT 1
11582: ARRAY
11583: PPUSH
11584: LD_VAR 0 6
11588: PPUSH
11589: CALL_OW 3
11593: PPUSH
11594: CALL_OW 1
11598: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11599: LD_ADDR_VAR 0 5
11603: PUSH
11604: LD_VAR 0 5
11608: PPUSH
11609: LD_INT 2
11611: PPUSH
11612: LD_VAR 0 5
11616: PUSH
11617: LD_INT 2
11619: ARRAY
11620: PPUSH
11621: LD_VAR 0 6
11625: PPUSH
11626: CALL_OW 3
11630: PPUSH
11631: CALL_OW 1
11635: ST_TO_ADDR
// end ;
11636: GO 11413
11638: POP
11639: POP
// end ;
11640: LD_VAR 0 3
11644: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
11659: PPUSH
11660: PPUSH
11661: PPUSH
11662: PPUSH
11663: PPUSH
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
11671: PPUSH
11672: PPUSH
11673: PPUSH
// enable ;
11674: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11675: LD_ADDR_VAR 0 10
11679: PUSH
11680: LD_INT 81
11682: PUSH
11683: LD_VAR 0 1
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 69
11696: ST_TO_ADDR
// if tmp then
11697: LD_VAR 0 10
11701: IFFALSE 11722
// enemySide := GetSide ( tmp [ 1 ] ) ;
11703: LD_ADDR_VAR 0 34
11707: PUSH
11708: LD_VAR 0 10
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 255
11721: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11722: LD_ADDR_VAR 0 22
11726: PUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 81
11734: PUSH
11735: LD_VAR 0 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 70
11748: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11749: LD_ADDR_VAR 0 23
11753: PUSH
11754: LD_VAR 0 4
11758: PPUSH
11759: LD_INT 81
11761: PUSH
11762: LD_VAR 0 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL_OW 70
11775: ST_TO_ADDR
// vehicles := arVehicles ;
11776: LD_ADDR_VAR 0 26
11780: PUSH
11781: LD_EXP 48
11785: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11786: LD_ADDR_VAR 0 32
11790: PUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 22
11798: PUSH
11799: LD_VAR 0 1
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 2
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: ST_TO_ADDR
// if depot then
11845: LD_VAR 0 32
11849: IFFALSE 11865
// depot := depot [ 1 ] ;
11851: LD_ADDR_VAR 0 32
11855: PUSH
11856: LD_VAR 0 32
11860: PUSH
11861: LD_INT 1
11863: ARRAY
11864: ST_TO_ADDR
// if arTech then
11865: LD_EXP 45
11869: IFFALSE 12028
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11871: LD_ADDR_VAR 0 12
11875: PUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 50
11895: PUSH
11896: EMPTY
11897: LIST
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 30
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: LD_INT 7
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 8
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 70
11947: ST_TO_ADDR
// if lab then
11948: LD_VAR 0 12
11952: IFFALSE 12028
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11954: LD_VAR 0 12
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: CALL_OW 461
11967: PUSH
11968: LD_INT 2
11970: EQUAL
11971: IFFALSE 12028
// begin for i in arTech do
11973: LD_ADDR_VAR 0 9
11977: PUSH
11978: LD_EXP 45
11982: PUSH
11983: FOR_IN
11984: IFFALSE 12026
// if CanBeResearched ( lab [ 1 ] , i ) then
11986: LD_VAR 0 12
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 9
11999: PPUSH
12000: CALL_OW 430
12004: IFFALSE 12024
// begin AddComResearch ( lab [ 1 ] , i ) ;
12006: LD_VAR 0 12
12010: PUSH
12011: LD_INT 1
12013: ARRAY
12014: PPUSH
12015: LD_VAR 0 9
12019: PPUSH
12020: CALL_OW 184
// end ;
12024: GO 11983
12026: POP
12027: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12028: LD_ADDR_VAR 0 29
12032: PUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 22
12040: PUSH
12041: LD_VAR 0 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 50
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// if fac then
12076: LD_VAR 0 29
12080: IFFALSE 12415
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12082: LD_VAR 0 29
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: CALL_OW 461
12095: PUSH
12096: LD_INT 2
12098: EQUAL
12099: IFFALSE 12415
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12101: LD_ADDR_VAR 0 30
12105: PUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 30
12126: PUSH
12127: LD_INT 33
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 35
12141: PUSH
12142: LD_INT 0
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 70
12157: ST_TO_ADDR
// if emptyTowers then
12158: LD_VAR 0 30
12162: IFFALSE 12212
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12164: LD_ADDR_VAR 0 31
12168: PUSH
12169: LD_VAR 0 30
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: CALL 38313 0 2
12187: ST_TO_ADDR
// if weapon then
12188: LD_VAR 0 31
12192: IFFALSE 12212
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12194: LD_VAR 0 30
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_VAR 0 31
12207: PPUSH
12208: CALL_OW 148
// end ; if arConstructList then
12212: LD_EXP 46
12216: IFFALSE 12415
// for i := 1 to Count ( arConstructList ) do
12218: LD_ADDR_VAR 0 9
12222: PUSH
12223: DOUBLE
12224: LD_INT 1
12226: DEC
12227: ST_TO_ADDR
12228: LD_EXP 46
12232: PPUSH
12233: CALL 30022 0 1
12237: PUSH
12238: FOR_TO
12239: IFFALSE 12413
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12241: LD_VAR 0 29
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: LD_EXP 46
12254: PUSH
12255: LD_VAR 0 9
12259: ARRAY
12260: PUSH
12261: LD_INT 1
12263: ARRAY
12264: PPUSH
12265: LD_EXP 46
12269: PUSH
12270: LD_VAR 0 9
12274: ARRAY
12275: PUSH
12276: LD_INT 2
12278: ARRAY
12279: PPUSH
12280: LD_EXP 46
12284: PUSH
12285: LD_VAR 0 9
12289: ARRAY
12290: PUSH
12291: LD_INT 3
12293: ARRAY
12294: PPUSH
12295: LD_EXP 46
12299: PUSH
12300: LD_VAR 0 9
12304: ARRAY
12305: PUSH
12306: LD_INT 4
12308: ARRAY
12309: PPUSH
12310: CALL_OW 448
12314: IFFALSE 12411
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12316: LD_VAR 0 29
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: LD_EXP 46
12329: PUSH
12330: LD_VAR 0 9
12334: ARRAY
12335: PUSH
12336: LD_INT 1
12338: ARRAY
12339: PPUSH
12340: LD_EXP 46
12344: PUSH
12345: LD_VAR 0 9
12349: ARRAY
12350: PUSH
12351: LD_INT 2
12353: ARRAY
12354: PPUSH
12355: LD_EXP 46
12359: PUSH
12360: LD_VAR 0 9
12364: ARRAY
12365: PUSH
12366: LD_INT 3
12368: ARRAY
12369: PPUSH
12370: LD_EXP 46
12374: PUSH
12375: LD_VAR 0 9
12379: ARRAY
12380: PUSH
12381: LD_INT 4
12383: ARRAY
12384: PPUSH
12385: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12389: LD_ADDR_EXP 46
12393: PUSH
12394: LD_EXP 46
12398: PPUSH
12399: LD_VAR 0 9
12403: PPUSH
12404: CALL_OW 3
12408: ST_TO_ADDR
// break ;
12409: GO 12413
// end ; end ;
12411: GO 12238
12413: POP
12414: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12415: LD_ADDR_VAR 0 10
12419: PUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 22
12427: PUSH
12428: LD_VAR 0 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: LD_INT 57
12452: PUSH
12453: EMPTY
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 24
12465: PUSH
12466: LD_INT 1000
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 70
12487: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12488: LD_ADDR_VAR 0 17
12492: PUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: CALL_OW 435
12502: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12503: LD_ADDR_VAR 0 14
12507: PUSH
12508: LD_VAR 0 5
12512: PPUSH
12513: LD_INT 25
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 50
12525: PUSH
12526: EMPTY
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PPUSH
12533: CALL_OW 72
12537: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12538: LD_VAR 0 14
12542: PPUSH
12543: LD_INT 3
12545: PUSH
12546: LD_INT 120
12548: PUSH
12549: LD_INT 7
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 3
12562: PUSH
12563: LD_INT 54
12565: PUSH
12566: EMPTY
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 72
12581: IFFALSE 12598
12583: PUSH
12584: LD_VAR 0 29
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 302
12597: AND
12598: IFFALSE 12657
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_INT 3
12607: PUSH
12608: LD_INT 120
12610: PUSH
12611: LD_INT 7
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: LD_INT 54
12627: PUSH
12628: EMPTY
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 72
12643: PPUSH
12644: LD_VAR 0 29
12648: PUSH
12649: LD_INT 1
12651: ARRAY
12652: PPUSH
12653: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12657: LD_ADDR_VAR 0 18
12661: PUSH
12662: LD_VAR 0 5
12666: PPUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 4
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: EMPTY
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 72
12691: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12692: LD_ADDR_VAR 0 12
12696: PUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 2
12704: PUSH
12705: LD_INT 30
12707: PUSH
12708: LD_INT 6
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 7
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: LD_INT 8
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 70
12745: ST_TO_ADDR
// if sci then
12746: LD_VAR 0 18
12750: IFFALSE 12911
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12752: LD_ADDR_VAR 0 20
12756: PUSH
12757: LD_VAR 0 5
12761: PPUSH
12762: LD_INT 95
12764: PUSH
12765: LD_VAR 0 3
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 120
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 72
12792: ST_TO_ADDR
// if hurtUnits then
12793: LD_VAR 0 20
12797: IFFALSE 12858
// begin for i in sci do
12799: LD_ADDR_VAR 0 9
12803: PUSH
12804: LD_VAR 0 18
12808: PUSH
12809: FOR_IN
12810: IFFALSE 12854
// if IsInUnit ( i ) then
12812: LD_VAR 0 9
12816: PPUSH
12817: CALL_OW 310
12821: IFFALSE 12834
// ComExitBuilding ( i ) else
12823: LD_VAR 0 9
12827: PPUSH
12828: CALL_OW 122
12832: GO 12852
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12834: LD_VAR 0 9
12838: PPUSH
12839: LD_VAR 0 20
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: PPUSH
12848: CALL_OW 128
12852: GO 12809
12854: POP
12855: POP
// end else
12856: GO 12911
// if lab then
12858: LD_VAR 0 12
12862: IFFALSE 12911
// begin for i in sci do
12864: LD_ADDR_VAR 0 9
12868: PUSH
12869: LD_VAR 0 18
12873: PUSH
12874: FOR_IN
12875: IFFALSE 12909
// if not IsInUnit ( i ) then
12877: LD_VAR 0 9
12881: PPUSH
12882: CALL_OW 310
12886: NOT
12887: IFFALSE 12907
// ComEnterUnit ( i , lab [ 1 ] ) ;
12889: LD_VAR 0 9
12893: PPUSH
12894: LD_VAR 0 12
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: CALL_OW 120
12907: GO 12874
12909: POP
12910: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12911: LD_ADDR_VAR 0 13
12915: PUSH
12916: LD_VAR 0 5
12920: PPUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 72
12935: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12936: LD_ADDR_VAR 0 33
12940: PUSH
12941: LD_EXP 47
12945: ST_TO_ADDR
// if eng then
12946: LD_VAR 0 13
12950: IFFALSE 13798
// begin for i in eng do
12952: LD_ADDR_VAR 0 9
12956: PUSH
12957: LD_VAR 0 13
12961: PUSH
12962: FOR_IN
12963: IFFALSE 13796
// begin tag := GetTag ( i ) ;
12965: LD_ADDR_VAR 0 15
12969: PUSH
12970: LD_VAR 0 9
12974: PPUSH
12975: CALL_OW 110
12979: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12980: LD_VAR 0 9
12984: PPUSH
12985: LD_VAR 0 4
12989: PPUSH
12990: CALL_OW 308
12994: IFFALSE 13025
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12996: LD_VAR 0 9
13000: PPUSH
13001: LD_VAR 0 7
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 7
13014: PUSH
13015: LD_INT 2
13017: ARRAY
13018: PPUSH
13019: CALL_OW 111
// continue ;
13023: GO 12962
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
13025: LD_VAR 0 9
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 800
13037: LESS
13038: IFFALSE 13050
13040: PUSH
13041: LD_VAR 0 15
13045: PUSH
13046: LD_INT 1
13048: NONEQUAL
13049: AND
13050: IFFALSE 13100
// begin SetTag ( i , tHeal ) ;
13052: LD_VAR 0 9
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13064: LD_VAR 0 9
13068: PPUSH
13069: LD_VAR 0 6
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 6
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: CALL_OW 111
// AddComHold ( i ) ;
13091: LD_VAR 0 9
13095: PPUSH
13096: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13100: LD_VAR 0 15
13104: PUSH
13105: LD_INT 1
13107: EQUAL
13108: IFFALSE 13125
13110: PUSH
13111: LD_VAR 0 9
13115: PPUSH
13116: CALL_OW 256
13120: PUSH
13121: LD_INT 1000
13123: EQUAL
13124: AND
13125: IFFALSE 13139
// SetTag ( i , 0 ) ;
13127: LD_VAR 0 9
13131: PPUSH
13132: LD_INT 0
13134: PPUSH
13135: CALL_OW 109
// if not tag then
13139: LD_VAR 0 15
13143: NOT
13144: IFFALSE 13315
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13146: LD_ADDR_VAR 0 11
13150: PUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 57
13158: PUSH
13159: EMPTY
13160: LIST
13161: PPUSH
13162: CALL_OW 70
13166: ST_TO_ADDR
// if undone then
13167: LD_VAR 0 11
13171: IFFALSE 13193
// begin ComComplete ( i , undone [ 1 ] ) ;
13173: LD_VAR 0 9
13177: PPUSH
13178: LD_VAR 0 11
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL 36158 0 2
// continue ;
13191: GO 12962
// end ; if cr or tmp or buildingsToBuild then
13193: LD_VAR 0 17
13197: IFTRUE 13205
13199: PUSH
13200: LD_VAR 0 10
13204: OR
13205: IFTRUE 13213
13207: PUSH
13208: LD_VAR 0 33
13212: OR
13213: IFFALSE 13289
// begin if IsInUnit ( i ) then
13215: LD_VAR 0 9
13219: PPUSH
13220: CALL_OW 310
13224: IFFALSE 13235
// ComExitBuilding ( i ) ;
13226: LD_VAR 0 9
13230: PPUSH
13231: CALL_OW 122
// if tmp then
13235: LD_VAR 0 10
13239: IFFALSE 13255
// SetTag ( i , tRepair ) else
13241: LD_VAR 0 9
13245: PPUSH
13246: LD_INT 3
13248: PPUSH
13249: CALL_OW 109
13253: GO 13287
// if cr then
13255: LD_VAR 0 17
13259: IFFALSE 13275
// SetTag ( i , tCrates ) else
13261: LD_VAR 0 9
13265: PPUSH
13266: LD_INT 2
13268: PPUSH
13269: CALL_OW 109
13273: GO 13287
// SetTag ( i , tBuild ) ;
13275: LD_VAR 0 9
13279: PPUSH
13280: LD_INT 5
13282: PPUSH
13283: CALL_OW 109
// end else
13287: GO 13315
// if not IsInUnit ( i ) then
13289: LD_VAR 0 9
13293: PPUSH
13294: CALL_OW 310
13298: NOT
13299: IFFALSE 13315
// ComEnterUnit ( i , depot ) ;
13301: LD_VAR 0 9
13305: PPUSH
13306: LD_VAR 0 32
13310: PPUSH
13311: CALL_OW 120
// end ; if tag = tRepair then
13315: LD_VAR 0 15
13319: PUSH
13320: LD_INT 3
13322: EQUAL
13323: IFFALSE 13429
// begin if IsInUnit ( i ) then
13325: LD_VAR 0 9
13329: PPUSH
13330: CALL_OW 310
13334: IFFALSE 13347
// begin ComExitBuilding ( i ) ;
13336: LD_VAR 0 9
13340: PPUSH
13341: CALL_OW 122
// continue ;
13345: GO 12962
// end ; if not tmp then
13347: LD_VAR 0 10
13351: NOT
13352: IFFALSE 13368
// begin SetTag ( i , 0 ) ;
13354: LD_VAR 0 9
13358: PPUSH
13359: LD_INT 0
13361: PPUSH
13362: CALL_OW 109
// continue ;
13366: GO 12962
// end ; if not HasTask ( i ) then
13368: LD_VAR 0 9
13372: PPUSH
13373: CALL_OW 314
13377: NOT
13378: IFFALSE 13398
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13380: LD_VAR 0 9
13384: PPUSH
13385: LD_VAR 0 10
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: CALL_OW 130
// if not IsInArea ( i , area ) then
13398: LD_VAR 0 9
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 308
13412: NOT
13413: IFFALSE 13429
// ComMoveToArea ( i , area ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 113
// end ; if tag = tBuild then
13429: LD_VAR 0 15
13433: PUSH
13434: LD_INT 5
13436: EQUAL
13437: IFFALSE 13647
// begin if IsInUnit ( i ) then
13439: LD_VAR 0 9
13443: PPUSH
13444: CALL_OW 310
13448: IFFALSE 13461
// begin ComExitBuilding ( i ) ;
13450: LD_VAR 0 9
13454: PPUSH
13455: CALL_OW 122
// continue ;
13459: GO 12962
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13461: LD_VAR 0 33
13465: NOT
13466: IFTRUE 13474
13468: PUSH
13469: LD_VAR 0 22
13473: OR
13474: IFTRUE 13482
13476: PUSH
13477: LD_VAR 0 23
13481: OR
13482: IFFALSE 13500
// begin SetTag ( i , 0 ) ;
13484: LD_VAR 0 9
13488: PPUSH
13489: LD_INT 0
13491: PPUSH
13492: CALL_OW 109
// continue ;
13496: GO 12962
// end else
13498: GO 13539
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13500: LD_VAR 0 32
13504: PPUSH
13505: LD_VAR 0 33
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: CALL 70049 0 2
13522: NOT
13523: IFFALSE 13539
// begin SetTag ( i , 0 ) ;
13525: LD_VAR 0 9
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 109
// continue ;
13537: GO 12962
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13539: LD_ADDR_VAR 0 11
13543: PUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 57
13551: PUSH
13552: EMPTY
13553: LIST
13554: PPUSH
13555: CALL_OW 70
13559: ST_TO_ADDR
// if undone then
13560: LD_VAR 0 11
13564: IFFALSE 13586
// begin ComComplete ( i , undone [ 1 ] ) ;
13566: LD_VAR 0 9
13570: PPUSH
13571: LD_VAR 0 11
13575: PUSH
13576: LD_INT 1
13578: ARRAY
13579: PPUSH
13580: CALL 36158 0 2
// continue ;
13584: GO 12962
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13586: LD_VAR 0 9
13590: PPUSH
13591: LD_VAR 0 33
13595: PUSH
13596: LD_INT 1
13598: ARRAY
13599: PUSH
13600: LD_INT 1
13602: ARRAY
13603: PPUSH
13604: LD_VAR 0 33
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 33
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PUSH
13626: LD_INT 3
13628: ARRAY
13629: PPUSH
13630: LD_VAR 0 33
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: PUSH
13639: LD_INT 4
13641: ARRAY
13642: PPUSH
13643: CALL_OW 145
// end ; if tag = tCrates then
13647: LD_VAR 0 15
13651: PUSH
13652: LD_INT 2
13654: EQUAL
13655: IFFALSE 13794
// begin if IsInUnit ( i ) then
13657: LD_VAR 0 9
13661: PPUSH
13662: CALL_OW 310
13666: IFFALSE 13679
// begin ComExitBuilding ( i ) ;
13668: LD_VAR 0 9
13672: PPUSH
13673: CALL_OW 122
// continue ;
13677: GO 12962
// end ; if not cr then
13679: LD_VAR 0 17
13683: NOT
13684: IFFALSE 13700
// begin SetTag ( i , 0 ) ;
13686: LD_VAR 0 9
13690: PPUSH
13691: LD_INT 0
13693: PPUSH
13694: CALL_OW 109
// continue ;
13698: GO 12962
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13700: LD_VAR 0 9
13704: PPUSH
13705: CALL_OW 314
13709: NOT
13710: IFFALSE 13765
13712: PUSH
13713: LD_INT 81
13715: PUSH
13716: LD_VAR 0 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 92
13727: PUSH
13728: LD_VAR 0 17
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PUSH
13737: LD_VAR 0 17
13741: PUSH
13742: LD_INT 2
13744: ARRAY
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PPUSH
13759: CALL_OW 69
13763: NOT
13764: AND
13765: IFFALSE 13794
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13767: LD_VAR 0 9
13771: PPUSH
13772: LD_VAR 0 17
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: LD_VAR 0 17
13785: PUSH
13786: LD_INT 2
13788: ARRAY
13789: PPUSH
13790: CALL_OW 117
// end ; end ;
13794: GO 12962
13796: POP
13797: POP
// end ; if vehicles then
13798: LD_VAR 0 26
13802: IFFALSE 14614
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13804: LD_ADDR_VAR 0 26
13808: PUSH
13809: LD_VAR 0 26
13813: PPUSH
13814: LD_INT 3
13816: PUSH
13817: LD_INT 2
13819: PUSH
13820: LD_INT 34
13822: PUSH
13823: LD_INT 88
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 34
13832: PUSH
13833: LD_INT 32
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 50
13851: PUSH
13852: EMPTY
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 72
13863: ST_TO_ADDR
// if vehicles then
13864: LD_VAR 0 26
13868: IFFALSE 14614
// begin for i in vehicles do
13870: LD_ADDR_VAR 0 9
13874: PUSH
13875: LD_VAR 0 26
13879: PUSH
13880: FOR_IN
13881: IFFALSE 14612
// begin tag := GetTag ( i ) ;
13883: LD_ADDR_VAR 0 15
13887: PUSH
13888: LD_VAR 0 9
13892: PPUSH
13893: CALL_OW 110
13897: ST_TO_ADDR
// if not tag then
13898: LD_VAR 0 15
13902: NOT
13903: IFFALSE 14049
// begin if GetControl ( i ) = control_manual then
13905: LD_VAR 0 9
13909: PPUSH
13910: CALL_OW 263
13914: PUSH
13915: LD_INT 1
13917: EQUAL
13918: IFFALSE 14035
// begin drivers := arDrivers ;
13920: LD_ADDR_VAR 0 24
13924: PUSH
13925: LD_EXP 50
13929: ST_TO_ADDR
// if not drivers then
13930: LD_VAR 0 24
13934: NOT
13935: IFFALSE 14015
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13937: LD_ADDR_VAR 0 24
13941: PUSH
13942: LD_VAR 0 14
13946: PPUSH
13947: LD_INT 3
13949: PUSH
13950: LD_INT 120
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 72
13968: ST_TO_ADDR
// if drivers then
13969: LD_VAR 0 24
13973: IFFALSE 14015
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13975: LD_VAR 0 24
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_INT 7
13986: PPUSH
13987: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13991: LD_ADDR_EXP 50
13995: PUSH
13996: LD_EXP 50
14000: PPUSH
14001: LD_VAR 0 24
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL 65954 0 2
14014: ST_TO_ADDR
// end ; end ; if drivers then
14015: LD_VAR 0 24
14019: IFFALSE 14033
// SetTag ( i , tBusy ) ;
14021: LD_VAR 0 9
14025: PPUSH
14026: LD_INT 8
14028: PPUSH
14029: CALL_OW 109
// continue ;
14033: GO 13880
// end ; SetTag ( i , tBusy ) ;
14035: LD_VAR 0 9
14039: PPUSH
14040: LD_INT 8
14042: PPUSH
14043: CALL_OW 109
// end else
14047: GO 14610
// if tag = tBusy then
14049: LD_VAR 0 15
14053: PUSH
14054: LD_INT 8
14056: EQUAL
14057: IFFALSE 14277
// begin if GetLives ( i ) = 1000 then
14059: LD_VAR 0 9
14063: PPUSH
14064: CALL_OW 256
14068: PUSH
14069: LD_INT 1000
14071: EQUAL
14072: IFFALSE 14275
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
14074: LD_VAR 0 9
14078: PPUSH
14079: CALL_OW 263
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: IFFALSE 14101
14089: PUSH
14090: LD_VAR 0 9
14094: PPUSH
14095: CALL_OW 311
14099: NOT
14100: AND
14101: IFFALSE 14263
// begin drivers := arDrivers ;
14103: LD_ADDR_VAR 0 24
14107: PUSH
14108: LD_EXP 50
14112: ST_TO_ADDR
// if not drivers then
14113: LD_VAR 0 24
14117: NOT
14118: IFFALSE 14134
// begin SetTag ( i , 0 ) ;
14120: LD_VAR 0 9
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 109
// continue ;
14132: GO 13880
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14134: LD_VAR 0 24
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PPUSH
14143: CALL_OW 310
14147: IFFALSE 14165
14149: PUSH
14150: LD_VAR 0 24
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: PPUSH
14159: CALL 63534 0 1
14163: NOT
14164: AND
14165: IFFALSE 14180
// ComExitBuilding ( drivers [ 1 ] ) ;
14167: LD_VAR 0 24
14171: PUSH
14172: LD_INT 1
14174: ARRAY
14175: PPUSH
14176: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14180: LD_VAR 0 26
14184: PPUSH
14185: LD_INT 120
14187: PUSH
14188: LD_INT 3
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 72
14199: IFFALSE 14217
14201: PUSH
14202: LD_VAR 0 24
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 314
14215: NOT
14216: AND
14217: IFTRUE 14241
14219: PUSH
14220: LD_VAR 0 26
14224: PPUSH
14225: LD_INT 120
14227: PUSH
14228: LD_INT 3
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 72
14239: NOT
14240: OR
14241: IFFALSE 14261
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14243: LD_VAR 0 24
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: LD_VAR 0 9
14256: PPUSH
14257: CALL_OW 120
// continue ;
14261: GO 13880
// end ; SetTag ( i , tAttack ) ;
14263: LD_VAR 0 9
14267: PPUSH
14268: LD_INT 13
14270: PPUSH
14271: CALL_OW 109
// end ; end else
14275: GO 14610
// if tag = tAttack then
14277: LD_VAR 0 15
14281: PUSH
14282: LD_INT 13
14284: EQUAL
14285: IFFALSE 14467
// begin enemy := enemyInBase ;
14287: LD_ADDR_VAR 0 21
14291: PUSH
14292: LD_VAR 0 22
14296: ST_TO_ADDR
// if not enemy then
14297: LD_VAR 0 21
14301: NOT
14302: IFFALSE 14314
// enemy := enemyOuterBase ;
14304: LD_ADDR_VAR 0 21
14308: PUSH
14309: LD_VAR 0 23
14313: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14314: LD_VAR 0 21
14318: NOT
14319: IFFALSE 14354
14321: PUSH
14322: LD_VAR 0 9
14326: PPUSH
14327: LD_VAR 0 7
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: PPUSH
14336: LD_VAR 0 7
14340: PUSH
14341: LD_INT 2
14343: ARRAY
14344: PPUSH
14345: CALL_OW 297
14349: PUSH
14350: LD_INT 10
14352: GREATER
14353: AND
14354: IFFALSE 14385
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14356: LD_VAR 0 9
14360: PPUSH
14361: LD_VAR 0 7
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PPUSH
14370: LD_VAR 0 7
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: CALL_OW 111
// continue ;
14383: GO 13880
// end ; if GetLives ( i ) < 650 then
14385: LD_VAR 0 9
14389: PPUSH
14390: CALL_OW 256
14394: PUSH
14395: LD_INT 650
14397: LESS
14398: IFFALSE 14441
// begin SetTag ( i , tVehRepair ) ;
14400: LD_VAR 0 9
14404: PPUSH
14405: LD_INT 9
14407: PPUSH
14408: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14412: LD_VAR 0 9
14416: PPUSH
14417: LD_VAR 0 7
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: LD_VAR 0 7
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: CALL_OW 111
// continue ;
14439: GO 13880
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14441: LD_VAR 0 9
14445: PPUSH
14446: LD_VAR 0 21
14450: PPUSH
14451: LD_VAR 0 9
14455: PPUSH
14456: CALL_OW 74
14460: PPUSH
14461: CALL_OW 115
// end else
14465: GO 14610
// if tag = tVehRepair then
14467: LD_VAR 0 15
14471: PUSH
14472: LD_INT 9
14474: EQUAL
14475: IFFALSE 14610
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14477: LD_VAR 0 9
14481: PPUSH
14482: LD_VAR 0 7
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_VAR 0 7
14495: PUSH
14496: LD_INT 2
14498: ARRAY
14499: PPUSH
14500: CALL_OW 297
14504: PUSH
14505: LD_INT 10
14507: GREATER
14508: IFFALSE 14539
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14510: LD_VAR 0 9
14514: PPUSH
14515: LD_VAR 0 7
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: LD_VAR 0 7
14528: PUSH
14529: LD_INT 2
14531: ARRAY
14532: PPUSH
14533: CALL_OW 111
// continue ;
14537: GO 13880
// end ; if GetLives ( i ) = 1000 then
14539: LD_VAR 0 9
14543: PPUSH
14544: CALL_OW 256
14548: PUSH
14549: LD_INT 1000
14551: EQUAL
14552: IFFALSE 14568
// begin SetTag ( i , tBusy ) ;
14554: LD_VAR 0 9
14558: PPUSH
14559: LD_INT 8
14561: PPUSH
14562: CALL_OW 109
// continue ;
14566: GO 13880
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14568: LD_VAR 0 9
14572: PPUSH
14573: CALL_OW 263
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: IFFALSE 14594
14583: PUSH
14584: LD_VAR 0 9
14588: PPUSH
14589: CALL_OW 311
14593: AND
14594: IFFALSE 14610
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14596: LD_VAR 0 9
14600: PPUSH
14601: CALL_OW 311
14605: PPUSH
14606: CALL 67668 0 1
// end ; end ;
14610: GO 13880
14612: POP
14613: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14614: LD_ADDR_VAR 0 19
14618: PUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: LD_INT 2
14626: PUSH
14627: LD_INT 25
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 25
14639: PUSH
14640: LD_INT 8
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 5
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 9
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 50
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PPUSH
14684: CALL_OW 72
14688: ST_TO_ADDR
// if sol then
14689: LD_VAR 0 19
14693: IFFALSE 15209
// begin if enemyInBase then
14695: LD_VAR 0 22
14699: IFFALSE 14878
// begin for i in sol do
14701: LD_ADDR_VAR 0 9
14705: PUSH
14706: LD_VAR 0 19
14710: PUSH
14711: FOR_IN
14712: IFFALSE 14874
// begin tw := IsInUnit ( i ) ;
14714: LD_ADDR_VAR 0 16
14718: PUSH
14719: LD_VAR 0 9
14723: PPUSH
14724: CALL_OW 310
14728: ST_TO_ADDR
// if tw then
14729: LD_VAR 0 16
14733: IFFALSE 14816
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14735: LD_VAR 0 16
14739: PUSH
14740: LD_INT 22
14742: PUSH
14743: LD_VAR 0 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 101
14754: PUSH
14755: LD_VAR 0 34
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: LD_INT 30
14769: PUSH
14770: LD_INT 32
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 30
14779: PUSH
14780: LD_INT 31
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: IN
14802: NOT
14803: IFFALSE 14814
// ComExitBuilding ( i ) ;
14805: LD_VAR 0 9
14809: PPUSH
14810: CALL_OW 122
// end else
14814: GO 14872
// if IsInArea ( i , area ) then
14816: LD_VAR 0 9
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: CALL_OW 308
14830: IFFALSE 14858
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14832: LD_VAR 0 9
14836: PPUSH
14837: LD_VAR 0 22
14841: PPUSH
14842: LD_VAR 0 9
14846: PPUSH
14847: CALL_OW 74
14851: PPUSH
14852: CALL_OW 115
14856: GO 14872
// ComMoveToArea ( i , area ) ;
14858: LD_VAR 0 9
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: CALL_OW 113
// end ;
14872: GO 14711
14874: POP
14875: POP
// end else
14876: GO 15209
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14878: LD_ADDR_VAR 0 28
14882: PUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 3
14890: PUSH
14891: LD_INT 62
14893: PUSH
14894: EMPTY
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 2
14903: PUSH
14904: LD_INT 30
14906: PUSH
14907: LD_INT 32
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 30
14916: PUSH
14917: LD_INT 4
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 30
14926: PUSH
14927: LD_INT 5
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 31
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 70
14959: ST_TO_ADDR
// if empty then
14960: LD_VAR 0 28
14964: IFFALSE 14981
// empty := ReverseArray ( empty ) ;
14966: LD_ADDR_VAR 0 28
14970: PUSH
14971: LD_VAR 0 28
14975: PPUSH
14976: CALL 61044 0 1
14980: ST_TO_ADDR
// for i in sol do
14981: LD_ADDR_VAR 0 9
14985: PUSH
14986: LD_VAR 0 19
14990: PUSH
14991: FOR_IN
14992: IFFALSE 15207
// begin tag := GetTag ( i ) ;
14994: LD_ADDR_VAR 0 15
14998: PUSH
14999: LD_VAR 0 9
15003: PPUSH
15004: CALL_OW 110
15008: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15009: LD_VAR 0 9
15013: PPUSH
15014: CALL_OW 256
15018: PUSH
15019: LD_INT 1000
15021: LESS
15022: IFFALSE 15034
15024: PUSH
15025: LD_VAR 0 15
15029: PUSH
15030: LD_INT 1
15032: NONEQUAL
15033: AND
15034: IFFALSE 15086
// begin SetTag ( i , tHeal ) ;
15036: LD_VAR 0 9
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15048: LD_VAR 0 9
15052: PPUSH
15053: LD_VAR 0 6
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 6
15066: PUSH
15067: LD_INT 2
15069: ARRAY
15070: PPUSH
15071: CALL_OW 111
// AddComHold ( i ) ;
15075: LD_VAR 0 9
15079: PPUSH
15080: CALL_OW 200
// continue ;
15084: GO 14991
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15086: LD_VAR 0 9
15090: PPUSH
15091: CALL_OW 256
15095: PUSH
15096: LD_INT 1000
15098: EQUAL
15099: IFFALSE 15111
15101: PUSH
15102: LD_VAR 0 15
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: AND
15111: IFFALSE 15127
// begin SetTag ( i , 0 ) ;
15113: LD_VAR 0 9
15117: PPUSH
15118: LD_INT 0
15120: PPUSH
15121: CALL_OW 109
// continue ;
15125: GO 14991
// end ; if HasTask ( i ) then
15127: LD_VAR 0 9
15131: PPUSH
15132: CALL_OW 314
15136: IFFALSE 15140
// continue ;
15138: GO 14991
// if not IsInUnit ( i ) and not tag and empty then
15140: LD_VAR 0 9
15144: PPUSH
15145: CALL_OW 310
15149: NOT
15150: IFFALSE 15159
15152: PUSH
15153: LD_VAR 0 15
15157: NOT
15158: AND
15159: IFFALSE 15167
15161: PUSH
15162: LD_VAR 0 28
15166: AND
15167: IFFALSE 15205
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15169: LD_VAR 0 9
15173: PPUSH
15174: LD_VAR 0 28
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15187: LD_ADDR_VAR 0 28
15191: PUSH
15192: LD_VAR 0 28
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 3
15204: ST_TO_ADDR
// end ; end ;
15205: GO 14991
15207: POP
15208: POP
// end ; end ; end ;
15209: LD_VAR 0 8
15213: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15214: LD_EXP 54
15218: PPUSH
15219: LD_INT 50
15221: PUSH
15222: EMPTY
15223: LIST
15224: PPUSH
15225: CALL_OW 72
15229: IFFALSE 15282
15231: GO 15233
15233: DISABLE
// begin BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15234: LD_EXP 3
15238: PUSH
15239: LD_INT 2
15241: ARRAY
15242: PPUSH
15243: LD_INT 2
15245: PPUSH
15246: LD_INT 5
15248: PPUSH
15249: LD_INT 6
15251: PPUSH
15252: LD_EXP 54
15256: PPUSH
15257: LD_INT 210
15259: PUSH
15260: LD_INT 43
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PPUSH
15267: LD_INT 194
15269: PUSH
15270: LD_INT 28
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL 11645 0 7
// enable ;
15281: ENABLE
// end ;
15282: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15283: LD_EXP 53
15287: IFFALSE 15507
15289: GO 15291
15291: DISABLE
15292: LD_INT 0
15294: PPUSH
15295: PPUSH
15296: PPUSH
// begin enable ;
15297: ENABLE
// p := 1 ;
15298: LD_ADDR_VAR 0 2
15302: PUSH
15303: LD_INT 1
15305: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15306: LD_ADDR_VAR 0 1
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_EXP 53
15320: PPUSH
15321: CALL 30022 0 1
15325: PUSH
15326: LD_INT 2
15328: DIV
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15505
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_EXP 53
15342: PUSH
15343: LD_VAR 0 2
15347: ARRAY
15348: PPUSH
15349: LD_EXP 53
15353: PUSH
15354: LD_VAR 0 2
15358: PUSH
15359: LD_INT 1
15361: PLUS
15362: ARRAY
15363: PPUSH
15364: CALL_OW 428
15368: ST_TO_ADDR
// if tmp then
15369: LD_VAR 0 3
15373: IFFALSE 15489
// if GetSide ( tmp ) <> botSides [ 2 ] then
15375: LD_VAR 0 3
15379: PPUSH
15380: CALL_OW 255
15384: PUSH
15385: LD_EXP 3
15389: PUSH
15390: LD_INT 2
15392: ARRAY
15393: NONEQUAL
15394: IFFALSE 15489
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15396: LD_EXP 53
15400: PUSH
15401: LD_VAR 0 2
15405: ARRAY
15406: PPUSH
15407: LD_EXP 53
15411: PUSH
15412: LD_VAR 0 2
15416: PUSH
15417: LD_INT 1
15419: PLUS
15420: ARRAY
15421: PPUSH
15422: LD_EXP 3
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: PPUSH
15431: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15435: LD_ADDR_EXP 53
15439: PUSH
15440: LD_EXP 53
15444: PPUSH
15445: LD_VAR 0 2
15449: PPUSH
15450: CALL_OW 3
15454: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15455: LD_ADDR_EXP 53
15459: PUSH
15460: LD_EXP 53
15464: PPUSH
15465: LD_VAR 0 2
15469: PPUSH
15470: CALL_OW 3
15474: ST_TO_ADDR
// p := p - 2 ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_VAR 0 2
15484: PUSH
15485: LD_INT 2
15487: MINUS
15488: ST_TO_ADDR
// end ; p := p + 2 ;
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_VAR 0 2
15498: PUSH
15499: LD_INT 2
15501: PLUS
15502: ST_TO_ADDR
// end ;
15503: GO 15330
15505: POP
15506: POP
// end ;
15507: PPOPN 3
15509: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15510: LD_INT 32
15512: PPUSH
15513: CALL_OW 302
15517: IFFALSE 15526
15519: PUSH
15520: LD_EXP 46
15524: NOT
15525: AND
15526: IFFALSE 15596
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15532: LD_ADDR_EXP 46
15536: PUSH
15537: LD_INT 14
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: LD_INT 27
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 14
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: LD_INT 26
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 14
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: LD_INT 27
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: ST_TO_ADDR
// end ; end_of_file
15596: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 255
15606: PUSH
15607: LD_EXP 3
15611: IN
15612: NOT
15613: IFFALSE 15617
// exit ;
15615: GO 15674
// if not un in [ Sikorski ] then
15617: LD_VAR 0 1
15621: PUSH
15622: LD_EXP 34
15626: PUSH
15627: EMPTY
15628: LIST
15629: IN
15630: NOT
15631: IFFALSE 15652
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15633: LD_VAR 0 1
15637: PPUSH
15638: LD_VAR 0 2
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL 5858 0 3
15650: GO 15674
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 5
15664: PPUSH
15665: CALL 5175 0 1
15669: PPUSH
15670: CALL 5858 0 3
// end ;
15674: PPOPN 3
15676: END
// on UnitDestroyed ( un ) do var i , skill , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL 22396 0 1
// side := GetSide ( un ) ;
15699: LD_ADDR_VAR 0 4
15703: PUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 255
15713: ST_TO_ADDR
// skill := tick div 10 10$00 ;
15714: LD_ADDR_VAR 0 3
15718: PUSH
15719: LD_OWVAR 1
15723: PUSH
15724: LD_INT 21000
15726: DIV
15727: ST_TO_ADDR
// if skill < 0 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 0
15735: LESS
15736: IFFALSE 15748
// skill := 0 else
15738: LD_ADDR_VAR 0 3
15742: PUSH
15743: LD_INT 0
15745: ST_TO_ADDR
15746: GO 15766
// if skill > 7 then
15748: LD_VAR 0 3
15752: PUSH
15753: LD_INT 7
15755: GREATER
15756: IFFALSE 15766
// skill := 7 ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: LD_INT 7
15765: ST_TO_ADDR
// if multi_sides [ side ] then
15766: LD_EXP 7
15770: PUSH
15771: LD_VAR 0 4
15775: ARRAY
15776: IFFALSE 15802
// if GetType ( un ) = unit_human then
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 247
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: IFFALSE 15802
// MultiplayerEvent_HumanLost ( side ) ;
15793: LD_VAR 0 4
15797: PPUSH
15798: CALL 5738 0 1
// if side in botSides then
15802: LD_VAR 0 4
15806: PUSH
15807: LD_EXP 3
15811: IN
15812: IFFALSE 16989
// begin if side = botSides [ 1 ] then
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 3
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: EQUAL
15828: IFFALSE 16393
// begin if un in amForce then
15830: LD_VAR 0 1
15834: PUSH
15835: LD_EXP 42
15839: IN
15840: IFFALSE 15858
// amForce := amForce diff un ;
15842: LD_ADDR_EXP 42
15846: PUSH
15847: LD_EXP 42
15851: PUSH
15852: LD_VAR 0 1
15856: DIFF
15857: ST_TO_ADDR
// if un in amAttackersVeh then
15858: LD_VAR 0 1
15862: PUSH
15863: LD_EXP 59
15867: IN
15868: IFFALSE 15886
// amAttackersVeh := amAttackersVeh diff un ;
15870: LD_ADDR_EXP 59
15874: PUSH
15875: LD_EXP 59
15879: PUSH
15880: LD_VAR 0 1
15884: DIFF
15885: ST_TO_ADDR
// if un in amAttackersInf then
15886: LD_VAR 0 1
15890: PUSH
15891: LD_EXP 58
15895: IN
15896: IFFALSE 15914
// amAttackersInf := amAttackersInf diff un ;
15898: LD_ADDR_EXP 58
15902: PUSH
15903: LD_EXP 58
15907: PUSH
15908: LD_VAR 0 1
15912: DIFF
15913: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 257
15923: PUSH
15924: LD_INT 3
15926: EQUAL
15927: IFFALSE 15935
15929: PUSH
15930: LD_EXP 44
15934: AND
15935: IFFALSE 16082
// begin if not IsOk ( amDep ) then
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 302
15944: NOT
15945: IFFALSE 15949
// exit ;
15947: GO 17094
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15949: LD_ADDR_EXP 44
15953: PUSH
15954: LD_EXP 44
15958: PPUSH
15959: CALL 67349 0 1
15963: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15964: LD_ADDR_OWVAR 20
15968: PUSH
15969: LD_EXP 3
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: ST_TO_ADDR
// uc_nation := nation_american ;
15978: LD_ADDR_OWVAR 21
15982: PUSH
15983: LD_INT 1
15985: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
15986: LD_INT 0
15988: PPUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: LD_OWVAR 67
16007: ARRAY
16008: PUSH
16009: LD_VAR 0 3
16013: PLUS
16014: PPUSH
16015: CALL_OW 383
// un := CreateHuman ;
16019: LD_ADDR_VAR 0 1
16023: PUSH
16024: CALL_OW 44
16028: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: LD_INT 52
16036: PPUSH
16037: LD_INT 2
16039: PPUSH
16040: LD_INT 0
16042: PPUSH
16043: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: LD_INT 23
16054: PPUSH
16055: LD_INT 19
16057: PPUSH
16058: CALL_OW 111
// amForce := Join ( amForce , un ) ;
16062: LD_ADDR_EXP 42
16066: PUSH
16067: LD_EXP 42
16071: PPUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL 65954 0 2
16081: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL_OW 247
16091: PUSH
16092: LD_INT 3
16094: EQUAL
16095: IFFALSE 16111
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: LD_INT 3
16105: PPUSH
16106: CALL_OW 308
16110: AND
16111: IFFALSE 16254
// begin btype := GetBType ( un ) ;
16113: LD_ADDR_VAR 0 12
16117: PUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 266
16127: ST_TO_ADDR
// if btype = b_barracks then
16128: LD_VAR 0 12
16132: PUSH
16133: LD_INT 5
16135: EQUAL
16136: IFFALSE 16146
// btype := b_armoury ;
16138: LD_ADDR_VAR 0 12
16142: PUSH
16143: LD_INT 4
16145: ST_TO_ADDR
// if btype = b_factory then
16146: LD_VAR 0 12
16150: PUSH
16151: LD_INT 3
16153: EQUAL
16154: IFFALSE 16164
// btype := b_workshop ;
16156: LD_ADDR_VAR 0 12
16160: PUSH
16161: LD_INT 2
16163: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16164: LD_VAR 0 12
16168: PUSH
16169: LD_INT 8
16171: PUSH
16172: LD_INT 7
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: IN
16179: IFFALSE 16189
// btype := b_lab ;
16181: LD_ADDR_VAR 0 12
16185: PUSH
16186: LD_INT 6
16188: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16189: LD_ADDR_EXP 37
16193: PUSH
16194: LD_EXP 37
16198: PPUSH
16199: LD_EXP 37
16203: PUSH
16204: LD_INT 1
16206: PLUS
16207: PPUSH
16208: LD_VAR 0 12
16212: PUSH
16213: LD_VAR 0 1
16217: PPUSH
16218: CALL_OW 250
16222: PUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 251
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 254
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 1
16253: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 247
16263: PUSH
16264: LD_INT 2
16266: EQUAL
16267: IFFALSE 16393
// begin chassis := GetChassis ( un ) ;
16269: LD_ADDR_VAR 0 6
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 265
16283: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16284: LD_ADDR_VAR 0 7
16288: PUSH
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 262
16298: ST_TO_ADDR
// control := GetControl ( un ) ;
16299: LD_ADDR_VAR 0 8
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 263
16313: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16314: LD_ADDR_VAR 0 9
16318: PUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 264
16328: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16329: LD_ADDR_VAR 0 10
16333: PUSH
16334: LD_VAR 0 11
16338: PPUSH
16339: LD_VAR 0 6
16343: PPUSH
16344: LD_VAR 0 7
16348: PPUSH
16349: LD_VAR 0 8
16353: PPUSH
16354: LD_VAR 0 9
16358: PPUSH
16359: CALL 30380 0 5
16363: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16364: LD_ADDR_EXP 36
16368: PUSH
16369: LD_EXP 36
16373: PPUSH
16374: LD_EXP 36
16378: PUSH
16379: LD_INT 1
16381: PLUS
16382: PPUSH
16383: LD_VAR 0 10
16387: PPUSH
16388: CALL_OW 1
16392: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16393: LD_VAR 0 4
16397: PUSH
16398: LD_EXP 3
16402: PUSH
16403: LD_INT 2
16405: ARRAY
16406: EQUAL
16407: IFFALSE 16989
// begin if un in arForce then
16409: LD_VAR 0 1
16413: PUSH
16414: LD_EXP 54
16418: IN
16419: IFFALSE 16437
// arForce := arForce diff un ;
16421: LD_ADDR_EXP 54
16425: PUSH
16426: LD_EXP 54
16430: PUSH
16431: LD_VAR 0 1
16435: DIFF
16436: ST_TO_ADDR
// if un in arAttackersVeh then
16437: LD_VAR 0 1
16441: PUSH
16442: LD_EXP 57
16446: IN
16447: IFFALSE 16465
// arAttackersVeh := arAttackersVeh diff un ;
16449: LD_ADDR_EXP 57
16453: PUSH
16454: LD_EXP 57
16458: PUSH
16459: LD_VAR 0 1
16463: DIFF
16464: ST_TO_ADDR
// if un in arAttackersInf then
16465: LD_VAR 0 1
16469: PUSH
16470: LD_EXP 56
16474: IN
16475: IFFALSE 16493
// arAttackersInf := arAttackersInf diff un ;
16477: LD_ADDR_EXP 56
16481: PUSH
16482: LD_EXP 56
16486: PUSH
16487: LD_VAR 0 1
16491: DIFF
16492: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 257
16502: PUSH
16503: LD_INT 3
16505: EQUAL
16506: IFFALSE 16523
16508: PUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 110
16518: PUSH
16519: LD_INT 999
16521: LESS
16522: AND
16523: IFFALSE 16531
16525: PUSH
16526: LD_EXP 51
16530: AND
16531: IFFALSE 16678
// begin if not IsOk ( arDep ) then
16533: LD_INT 32
16535: PPUSH
16536: CALL_OW 302
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 17094
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16545: LD_ADDR_EXP 51
16549: PUSH
16550: LD_EXP 51
16554: PPUSH
16555: CALL 67349 0 1
16559: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16560: LD_ADDR_OWVAR 20
16564: PUSH
16565: LD_EXP 3
16569: PUSH
16570: LD_INT 2
16572: ARRAY
16573: ST_TO_ADDR
// uc_nation := nation_arabian ;
16574: LD_ADDR_OWVAR 21
16578: PUSH
16579: LD_INT 2
16581: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 3
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_OWVAR 67
16603: ARRAY
16604: PUSH
16605: LD_VAR 0 3
16609: PLUS
16610: PPUSH
16611: CALL_OW 383
// un := CreateHuman ;
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: CALL_OW 44
16624: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16625: LD_VAR 0 1
16629: PPUSH
16630: LD_INT 178
16632: PPUSH
16633: LD_INT 2
16635: PPUSH
16636: LD_INT 0
16638: PPUSH
16639: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_INT 204
16650: PPUSH
16651: LD_INT 35
16653: PPUSH
16654: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16658: LD_ADDR_EXP 54
16662: PUSH
16663: LD_EXP 54
16667: PPUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL 65954 0 2
16677: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 247
16687: PUSH
16688: LD_INT 3
16690: EQUAL
16691: IFFALSE 16707
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_INT 3
16701: PPUSH
16702: CALL_OW 308
16706: AND
16707: IFFALSE 16850
// begin btype := GetBType ( un ) ;
16709: LD_ADDR_VAR 0 12
16713: PUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 266
16723: ST_TO_ADDR
// if btype = b_barracks then
16724: LD_VAR 0 12
16728: PUSH
16729: LD_INT 5
16731: EQUAL
16732: IFFALSE 16742
// btype := b_armoury ;
16734: LD_ADDR_VAR 0 12
16738: PUSH
16739: LD_INT 4
16741: ST_TO_ADDR
// if btype = b_factory then
16742: LD_VAR 0 12
16746: PUSH
16747: LD_INT 3
16749: EQUAL
16750: IFFALSE 16760
// btype := b_workshop ;
16752: LD_ADDR_VAR 0 12
16756: PUSH
16757: LD_INT 2
16759: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16760: LD_VAR 0 12
16764: PUSH
16765: LD_INT 8
16767: PUSH
16768: LD_INT 7
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: IN
16775: IFFALSE 16785
// btype := b_lab ;
16777: LD_ADDR_VAR 0 12
16781: PUSH
16782: LD_INT 6
16784: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16785: LD_ADDR_EXP 47
16789: PUSH
16790: LD_EXP 47
16794: PPUSH
16795: LD_EXP 47
16799: PUSH
16800: LD_INT 1
16802: PLUS
16803: PPUSH
16804: LD_VAR 0 12
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 250
16818: PUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 251
16828: PUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 254
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 1
16849: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 247
16859: PUSH
16860: LD_INT 2
16862: EQUAL
16863: IFFALSE 16989
// begin chassis := GetChassis ( un ) ;
16865: LD_ADDR_VAR 0 6
16869: PUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 265
16879: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16880: LD_ADDR_VAR 0 7
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 262
16894: ST_TO_ADDR
// control := GetControl ( un ) ;
16895: LD_ADDR_VAR 0 8
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 263
16909: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16910: LD_ADDR_VAR 0 9
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 264
16924: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16925: LD_ADDR_VAR 0 10
16929: PUSH
16930: LD_VAR 0 11
16934: PPUSH
16935: LD_VAR 0 6
16939: PPUSH
16940: LD_VAR 0 7
16944: PPUSH
16945: LD_VAR 0 8
16949: PPUSH
16950: LD_VAR 0 9
16954: PPUSH
16955: CALL 30380 0 5
16959: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16960: LD_ADDR_EXP 46
16964: PUSH
16965: LD_EXP 46
16969: PPUSH
16970: LD_EXP 46
16974: PUSH
16975: LD_INT 1
16977: PLUS
16978: PPUSH
16979: LD_VAR 0 10
16983: PPUSH
16984: CALL_OW 1
16988: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
16989: LD_EXP 24
16993: IFFALSE 17001
16995: PUSH
16996: LD_EXP 16
17000: AND
17001: IFFALSE 17016
17003: PUSH
17004: LD_EXP 25
17008: PUSH
17009: LD_VAR 0 4
17013: ARRAY
17014: NOT
17015: AND
17016: IFFALSE 17094
// if un in multi_commanders then
17018: LD_VAR 0 1
17022: PUSH
17023: LD_EXP 24
17027: IN
17028: IFFALSE 17094
// begin if side = your_side then
17030: LD_VAR 0 4
17034: PUSH
17035: LD_OWVAR 2
17039: EQUAL
17040: IFFALSE 17046
// Multiplayer_Loose_Message ;
17042: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
17046: LD_ADDR_EXP 25
17050: PUSH
17051: LD_EXP 25
17055: PPUSH
17056: LD_VAR 0 4
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 1
17068: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
17069: LD_ADDR_EXP 24
17073: PUSH
17074: LD_EXP 24
17078: PUSH
17079: LD_VAR 0 1
17083: DIFF
17084: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
17085: LD_VAR 0 4
17089: PPUSH
17090: CALL 5208 0 1
// end ; end ;
17094: PPOPN 12
17096: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
17097: LD_INT 0
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
// begin side := GetSide ( building ) ;
17103: LD_ADDR_VAR 0 4
17107: PUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 255
17117: ST_TO_ADDR
// if multi_sides [ side ] then
17118: LD_EXP 7
17122: PUSH
17123: LD_VAR 0 4
17127: ARRAY
17128: IFFALSE 17149
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
17130: LD_VAR 0 4
17134: PPUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 266
17144: PPUSH
17145: CALL 5784 0 2
// if side = botSides [ 1 ] then
17149: LD_VAR 0 4
17153: PUSH
17154: LD_EXP 3
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: EQUAL
17163: IFFALSE 17247
// begin amBuildings := Delete ( amBuildings , 1 ) ;
17165: LD_ADDR_EXP 37
17169: PUSH
17170: LD_EXP 37
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 3
17182: ST_TO_ADDR
// btype := GetBType ( building ) ;
17183: LD_ADDR_VAR 0 5
17187: PUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 266
17197: ST_TO_ADDR
// case btype of b_workshop :
17198: LD_VAR 0 5
17202: PUSH
17203: LD_INT 2
17205: DOUBLE
17206: EQUAL
17207: IFTRUE 17211
17209: GO 17223
17211: POP
// ComUpgrade ( building ) ; b_lab :
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 146
17221: GO 17247
17223: LD_INT 6
17225: DOUBLE
17226: EQUAL
17227: IFTRUE 17231
17229: GO 17246
17231: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_INT 10
17239: PPUSH
17240: CALL_OW 207
// end ; end ;
17244: GO 17247
17246: POP
// end ; if side = botSides [ 2 ] then
17247: LD_VAR 0 4
17251: PUSH
17252: LD_EXP 3
17256: PUSH
17257: LD_INT 2
17259: ARRAY
17260: EQUAL
17261: IFFALSE 17357
// begin arBuildings := Delete ( arBuildings , 1 ) ;
17263: LD_ADDR_EXP 47
17267: PUSH
17268: LD_EXP 47
17272: PPUSH
17273: LD_INT 1
17275: PPUSH
17276: CALL_OW 3
17280: ST_TO_ADDR
// btype := GetBType ( building ) ;
17281: LD_ADDR_VAR 0 5
17285: PUSH
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 266
17295: ST_TO_ADDR
// case btype of b_workshop :
17296: LD_VAR 0 5
17300: PUSH
17301: LD_INT 2
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17321
17309: POP
// ComUpgrade ( building ) ; b_lab :
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 146
17319: GO 17357
17321: LD_INT 6
17323: DOUBLE
17324: EQUAL
17325: IFTRUE 17329
17327: GO 17356
17329: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17330: LD_VAR 0 1
17334: PPUSH
17335: LD_INT 10
17337: PPUSH
17338: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_INT 15
17349: PPUSH
17350: CALL_OW 207
// end ; end ;
17354: GO 17357
17356: POP
// end ; end ;
17357: PPOPN 5
17359: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
17360: LD_VAR 0 2
17364: PPUSH
17365: CALL_OW 255
17369: PUSH
17370: LD_EXP 3
17374: IN
17375: NOT
17376: IFFALSE 17380
// exit ;
17378: GO 17579
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17380: LD_VAR 0 2
17384: PUSH
17385: LD_EXP 55
17389: IN
17390: IFFALSE 17407
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 266
17402: PUSH
17403: LD_INT 31
17405: EQUAL
17406: AND
17407: IFFALSE 17431
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17409: LD_VAR 0 2
17413: PPUSH
17414: LD_INT 215
17416: PPUSH
17417: LD_INT 102
17419: PPUSH
17420: CALL_OW 428
17424: PPUSH
17425: CALL_OW 120
// exit ;
17429: GO 17579
// end ; if HexInfo ( 44 , 78 ) and GetSide ( unit ) = 1 then
17431: LD_INT 44
17433: PPUSH
17434: LD_INT 78
17436: PPUSH
17437: CALL_OW 428
17441: IFFALSE 17458
17443: PUSH
17444: LD_VAR 0 2
17448: PPUSH
17449: CALL_OW 255
17453: PUSH
17454: LD_INT 1
17456: EQUAL
17457: AND
17458: IFFALSE 17497
// begin ComMoveXY ( unit , 26 , 40 ) ;
17460: LD_VAR 0 2
17464: PPUSH
17465: LD_INT 26
17467: PPUSH
17468: LD_INT 40
17470: PPUSH
17471: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17475: LD_ADDR_EXP 42
17479: PUSH
17480: LD_EXP 42
17484: PPUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: CALL 65954 0 2
17494: ST_TO_ADDR
// exit ;
17495: GO 17579
// end ; if GetX ( building ) > 71 and GetSide ( unit ) = 1 then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 250
17506: PUSH
17507: LD_INT 71
17509: GREATER
17510: IFFALSE 17527
17512: PUSH
17513: LD_VAR 0 2
17517: PPUSH
17518: CALL_OW 255
17522: PUSH
17523: LD_INT 1
17525: EQUAL
17526: AND
17527: IFFALSE 17579
// begin ComMoveXY ( unit , 69 , 39 ) ;
17529: LD_VAR 0 2
17533: PPUSH
17534: LD_INT 69
17536: PPUSH
17537: LD_INT 39
17539: PPUSH
17540: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 26
17551: PPUSH
17552: LD_INT 40
17554: PPUSH
17555: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17559: LD_ADDR_EXP 42
17563: PUSH
17564: LD_EXP 42
17568: PPUSH
17569: LD_VAR 0 2
17573: PPUSH
17574: CALL 65954 0 2
17578: ST_TO_ADDR
// end ; end ;
17579: PPOPN 2
17581: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17590: LD_VAR 0 1
17594: PPUSH
17595: LD_VAR 0 2
17599: PPUSH
17600: CALL 22454 0 2
// side := GetSide ( vehicle ) ;
17604: LD_ADDR_VAR 0 4
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 255
17618: ST_TO_ADDR
// if multi_sides [ side ] then
17619: LD_EXP 7
17623: PUSH
17624: LD_VAR 0 4
17628: ARRAY
17629: IFFALSE 17640
// MultiplayerEvent_Produced ( side ) ;
17631: LD_VAR 0 4
17635: PPUSH
17636: CALL 5692 0 1
// if side = botSides [ 1 ] then
17640: LD_VAR 0 4
17644: PUSH
17645: LD_EXP 3
17649: PUSH
17650: LD_INT 1
17652: ARRAY
17653: EQUAL
17654: IFFALSE 17792
// begin driver := IsDrivenBy ( vehicle ) ;
17656: LD_ADDR_VAR 0 8
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 311
17670: ST_TO_ADDR
// if driver then
17671: LD_VAR 0 8
17675: IFFALSE 17709
// begin SetTag ( driver , tMech ) ;
17677: LD_VAR 0 8
17681: PPUSH
17682: LD_INT 7
17684: PPUSH
17685: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17689: LD_ADDR_EXP 40
17693: PUSH
17694: LD_EXP 40
17698: PPUSH
17699: LD_VAR 0 8
17703: PPUSH
17704: CALL 65954 0 2
17708: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17709: LD_EXP 41
17713: PUSH
17714: LD_EXP 38
17718: PPUSH
17719: CALL 30022 0 1
17723: GREATER
17724: IFTRUE 17748
17726: PUSH
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 266
17736: PUSH
17737: LD_INT 12
17739: PUSH
17740: LD_INT 13
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: IN
17747: OR
17748: IFFALSE 17772
// amVehicles := Join ( amVehicles , vehicle ) else
17750: LD_ADDR_EXP 38
17754: PUSH
17755: LD_EXP 38
17759: PPUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL 65954 0 2
17769: ST_TO_ADDR
17770: GO 17792
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17772: LD_ADDR_EXP 39
17776: PUSH
17777: LD_EXP 39
17781: PPUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL 65954 0 2
17791: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17792: LD_VAR 0 4
17796: PUSH
17797: LD_EXP 3
17801: PUSH
17802: LD_INT 2
17804: ARRAY
17805: EQUAL
17806: IFFALSE 17944
// begin driver := IsDrivenBy ( vehicle ) ;
17808: LD_ADDR_VAR 0 8
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 311
17822: ST_TO_ADDR
// if driver then
17823: LD_VAR 0 8
17827: IFFALSE 17861
// begin SetTag ( driver , tMech ) ;
17829: LD_VAR 0 8
17833: PPUSH
17834: LD_INT 7
17836: PPUSH
17837: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17841: LD_ADDR_EXP 50
17845: PUSH
17846: LD_EXP 50
17850: PPUSH
17851: LD_VAR 0 8
17855: PPUSH
17856: CALL 65954 0 2
17860: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17861: LD_EXP 52
17865: PUSH
17866: LD_EXP 48
17870: PPUSH
17871: CALL 30022 0 1
17875: GREATER
17876: IFTRUE 17900
17878: PUSH
17879: LD_VAR 0 1
17883: PPUSH
17884: CALL_OW 266
17888: PUSH
17889: LD_INT 32
17891: PUSH
17892: LD_INT 88
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: IN
17899: OR
17900: IFFALSE 17924
// arVehicles := Join ( arVehicles , vehicle ) else
17902: LD_ADDR_EXP 48
17906: PUSH
17907: LD_EXP 48
17911: PPUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL 65954 0 2
17921: ST_TO_ADDR
17922: GO 17944
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17924: LD_ADDR_EXP 49
17928: PUSH
17929: LD_EXP 49
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL 65954 0 2
17943: ST_TO_ADDR
// end ; end ;
17944: PPOPN 8
17946: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 110
17956: PUSH
17957: LD_INT 7
17959: EQUAL
17960: IFFALSE 17974
// SetTag ( driver , 0 ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_INT 0
17969: PPUSH
17970: CALL_OW 109
// end ;
17974: PPOPN 4
17976: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17977: LD_VAR 0 2
17981: PPUSH
17982: CALL_OW 255
17986: PUSH
17987: LD_EXP 3
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: EQUAL
17996: IFFALSE 18026
// if tech in amTech then
17998: LD_VAR 0 1
18002: PUSH
18003: LD_EXP 35
18007: IN
18008: IFFALSE 18026
// amTech := amTech diff tech ;
18010: LD_ADDR_EXP 35
18014: PUSH
18015: LD_EXP 35
18019: PUSH
18020: LD_VAR 0 1
18024: DIFF
18025: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
18026: LD_VAR 0 2
18030: PPUSH
18031: CALL_OW 255
18035: PUSH
18036: LD_EXP 3
18040: PUSH
18041: LD_INT 2
18043: ARRAY
18044: EQUAL
18045: IFFALSE 18075
// if tech in arTech then
18047: LD_VAR 0 1
18051: PUSH
18052: LD_EXP 45
18056: IN
18057: IFFALSE 18075
// arTech := arTech diff tech ;
18059: LD_ADDR_EXP 45
18063: PUSH
18064: LD_EXP 45
18068: PUSH
18069: LD_VAR 0 1
18073: DIFF
18074: ST_TO_ADDR
// end ; end_of_file
18075: PPOPN 2
18077: END
// every 10 10$00 trigger IsOk ( amDep ) do
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 302
18085: IFFALSE 18122
18087: GO 18089
18089: DISABLE
// begin activeAmerAttacks := true ;
18090: LD_ADDR_EXP 5
18094: PUSH
18095: LD_INT 1
18097: ST_TO_ADDR
// wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
18098: LD_INT 10500
18100: PUSH
18101: LD_INT 2100
18103: PUSH
18104: LD_OWVAR 67
18108: MUL
18109: MINUS
18110: PPUSH
18111: CALL_OW 67
// AmericanAttack ( 0 ) ;
18115: LD_INT 0
18117: PPUSH
18118: CALL 20513 0 1
// end ;
18122: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
18123: LD_INT 32
18125: PPUSH
18126: CALL_OW 302
18130: IFFALSE 18151
18132: PUSH
18133: LD_INT 32
18135: PPUSH
18136: CALL_OW 255
18140: PUSH
18141: LD_EXP 3
18145: PUSH
18146: LD_INT 2
18148: ARRAY
18149: EQUAL
18150: AND
18151: IFFALSE 18188
18153: GO 18155
18155: DISABLE
// begin activeArabAttacks := true ;
18156: LD_ADDR_EXP 4
18160: PUSH
18161: LD_INT 1
18163: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
18164: LD_INT 73500
18166: PUSH
18167: LD_INT 2100
18169: PUSH
18170: LD_OWVAR 67
18174: MUL
18175: MINUS
18176: PPUSH
18177: CALL_OW 67
// ArabAttack ( 0 ) ;
18181: LD_INT 0
18183: PPUSH
18184: CALL 18232 0 1
// end ;
18188: END
// every 45 45$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
18189: LD_INT 1
18191: PPUSH
18192: CALL_OW 302
18196: IFFALSE 18217
18198: PUSH
18199: LD_INT 1
18201: PPUSH
18202: CALL_OW 255
18206: PUSH
18207: LD_EXP 3
18211: PUSH
18212: LD_INT 1
18214: ARRAY
18215: EQUAL
18216: AND
18217: IFFALSE 18231
18219: GO 18221
18221: DISABLE
// AmericanAttack ( Difficulty ) ;
18222: LD_OWVAR 67
18226: PPUSH
18227: CALL 20513 0 1
18231: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
18232: LD_INT 0
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
// uc_side := botSides [ 2 ] ;
18239: LD_ADDR_OWVAR 20
18243: PUSH
18244: LD_EXP 3
18248: PUSH
18249: LD_INT 2
18251: ARRAY
18252: ST_TO_ADDR
// uc_nation := nation_arabian ;
18253: LD_ADDR_OWVAR 21
18257: PUSH
18258: LD_INT 2
18260: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
18261: LD_ADDR_VAR 0 4
18265: PUSH
18266: LD_INT 3
18268: PUSH
18269: LD_INT 4
18271: PUSH
18272: LD_INT 5
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: PUSH
18280: LD_OWVAR 67
18284: ARRAY
18285: ST_TO_ADDR
// arAttackersInf := [ ] ;
18286: LD_ADDR_EXP 56
18290: PUSH
18291: EMPTY
18292: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18293: LD_ADDR_EXP 57
18297: PUSH
18298: EMPTY
18299: ST_TO_ADDR
// InitHC_All ( ) ;
18300: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: DOUBLE
18310: LD_INT 1
18312: DEC
18313: ST_TO_ADDR
18314: LD_INT 3
18316: PUSH
18317: LD_INT 4
18319: PUSH
18320: LD_INT 5
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_OWVAR 67
18332: ARRAY
18333: PUSH
18334: LD_VAR 0 1
18338: PLUS
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18443
// begin PrepareSoldier ( false , skill ) ;
18343: LD_INT 0
18345: PPUSH
18346: LD_VAR 0 4
18350: PPUSH
18351: CALL_OW 381
// un := CreateHuman ;
18355: LD_ADDR_VAR 0 5
18359: PUSH
18360: CALL_OW 44
18364: ST_TO_ADDR
// if i mod 2 = 0 then
18365: LD_VAR 0 3
18369: PUSH
18370: LD_INT 2
18372: MOD
18373: PUSH
18374: LD_INT 0
18376: EQUAL
18377: IFFALSE 18391
// SetClass ( un , class_mortar ) ;
18379: LD_VAR 0 5
18383: PPUSH
18384: LD_INT 8
18386: PPUSH
18387: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
18391: LD_VAR 0 5
18395: PPUSH
18396: LD_INT 25
18398: PPUSH
18399: LD_INT 0
18401: PPUSH
18402: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
18406: LD_ADDR_EXP 56
18410: PUSH
18411: LD_EXP 56
18415: PPUSH
18416: LD_VAR 0 5
18420: PPUSH
18421: CALL 65954 0 2
18425: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18426: LD_VAR 0 5
18430: PPUSH
18431: LD_INT 230
18433: PPUSH
18434: LD_INT 143
18436: PPUSH
18437: CALL_OW 114
// end ;
18441: GO 18340
18443: POP
18444: POP
// for i := 1 to 3 + v do
18445: LD_ADDR_VAR 0 3
18449: PUSH
18450: DOUBLE
18451: LD_INT 1
18453: DEC
18454: ST_TO_ADDR
18455: LD_INT 3
18457: PUSH
18458: LD_VAR 0 1
18462: PLUS
18463: PUSH
18464: FOR_TO
18465: IFFALSE 18629
// begin PrepareMechanic ( false , skill ) ;
18467: LD_INT 0
18469: PPUSH
18470: LD_VAR 0 4
18474: PPUSH
18475: CALL_OW 383
// un := CreateHuman ;
18479: LD_ADDR_VAR 0 5
18483: PUSH
18484: CALL_OW 44
18488: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18489: LD_VAR 0 5
18493: PPUSH
18494: LD_INT 999
18496: PPUSH
18497: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18501: LD_INT 14
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: LD_INT 27
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_VAR 0 3
18524: PUSH
18525: LD_INT 2
18527: MOD
18528: PUSH
18529: LD_INT 1
18531: PLUS
18532: ARRAY
18533: PPUSH
18534: LD_INT 80
18536: PPUSH
18537: CALL 32784 0 5
// veh := CreateVehicle ;
18541: LD_ADDR_VAR 0 6
18545: PUSH
18546: CALL_OW 45
18550: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18551: LD_VAR 0 6
18555: PPUSH
18556: LD_INT 5
18558: PPUSH
18559: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18563: LD_VAR 0 6
18567: PPUSH
18568: LD_INT 26
18570: PPUSH
18571: LD_INT 0
18573: PPUSH
18574: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18578: LD_VAR 0 5
18582: PPUSH
18583: LD_VAR 0 6
18587: PPUSH
18588: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18592: LD_VAR 0 5
18596: PPUSH
18597: LD_INT 236
18599: PPUSH
18600: LD_INT 127
18602: PPUSH
18603: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18607: LD_ADDR_EXP 57
18611: PUSH
18612: LD_EXP 57
18616: PPUSH
18617: LD_VAR 0 6
18621: PPUSH
18622: CALL 65954 0 2
18626: ST_TO_ADDR
// end ;
18627: GO 18464
18629: POP
18630: POP
// wait ( 0 0$2 ) ;
18631: LD_INT 70
18633: PPUSH
18634: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: DOUBLE
18644: LD_INT 1
18646: DEC
18647: ST_TO_ADDR
18648: LD_INT 1
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 3
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: PUSH
18662: LD_OWVAR 67
18666: ARRAY
18667: PUSH
18668: FOR_TO
18669: IFFALSE 18821
// begin PrepareMechanic ( false , skill ) ;
18671: LD_INT 0
18673: PPUSH
18674: LD_VAR 0 4
18678: PPUSH
18679: CALL_OW 383
// un := CreateHuman ;
18683: LD_ADDR_VAR 0 5
18687: PUSH
18688: CALL_OW 44
18692: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18693: LD_VAR 0 5
18697: PPUSH
18698: LD_INT 999
18700: PPUSH
18701: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18705: LD_INT 14
18707: PPUSH
18708: LD_INT 1
18710: PPUSH
18711: LD_INT 1
18713: PPUSH
18714: LD_INT 26
18716: PPUSH
18717: LD_INT 80
18719: PPUSH
18720: CALL 32784 0 5
// veh := CreateVehicle ;
18724: LD_ADDR_VAR 0 6
18728: PUSH
18729: CALL_OW 45
18733: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18734: LD_VAR 0 6
18738: PPUSH
18739: LD_INT 5
18741: PPUSH
18742: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
18746: LD_INT 35
18748: PPUSH
18749: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18753: LD_VAR 0 6
18757: PPUSH
18758: LD_INT 26
18760: PPUSH
18761: LD_INT 0
18763: PPUSH
18764: CALL_OW 49
18768: IFFALSE 18746
// PlaceHumanInUnit ( un , veh ) ;
18770: LD_VAR 0 5
18774: PPUSH
18775: LD_VAR 0 6
18779: PPUSH
18780: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18784: LD_VAR 0 5
18788: PPUSH
18789: LD_INT 236
18791: PPUSH
18792: LD_INT 127
18794: PPUSH
18795: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18799: LD_ADDR_EXP 57
18803: PUSH
18804: LD_EXP 57
18808: PPUSH
18809: LD_VAR 0 6
18813: PPUSH
18814: CALL 65954 0 2
18818: ST_TO_ADDR
// end ;
18819: GO 18668
18821: POP
18822: POP
// wait ( 0 0$2 ) ;
18823: LD_INT 70
18825: PPUSH
18826: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18830: LD_ADDR_VAR 0 3
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_INT 1
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: PUSH
18854: LD_OWVAR 67
18858: ARRAY
18859: PUSH
18860: FOR_TO
18861: IFFALSE 19044
// begin PrepareMechanic ( false , skill ) ;
18863: LD_INT 0
18865: PPUSH
18866: LD_VAR 0 4
18870: PPUSH
18871: CALL_OW 383
// un := CreateHuman ;
18875: LD_ADDR_VAR 0 5
18879: PUSH
18880: CALL_OW 44
18884: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18885: LD_VAR 0 5
18889: PPUSH
18890: LD_INT 999
18892: PPUSH
18893: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18897: LD_INT 14
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_INT 28
18908: PPUSH
18909: LD_INT 80
18911: PPUSH
18912: CALL 32784 0 5
// veh := CreateVehicle ;
18916: LD_ADDR_VAR 0 6
18920: PUSH
18921: CALL_OW 45
18925: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18926: LD_VAR 0 6
18930: PPUSH
18931: LD_INT 4
18933: PPUSH
18934: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
18938: LD_INT 35
18940: PPUSH
18941: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18945: LD_VAR 0 6
18949: PPUSH
18950: LD_INT 26
18952: PPUSH
18953: LD_INT 0
18955: PPUSH
18956: CALL_OW 49
18960: IFFALSE 18938
// PlaceHumanInUnit ( un , veh ) ;
18962: LD_VAR 0 5
18966: PPUSH
18967: LD_VAR 0 6
18971: PPUSH
18972: CALL_OW 52
// if i mod 2 = 0 then
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 2
18983: MOD
18984: PUSH
18985: LD_INT 0
18987: EQUAL
18988: IFFALSE 19007
// ComMoveXY ( un , 136 , 61 ) else
18990: LD_VAR 0 5
18994: PPUSH
18995: LD_INT 136
18997: PPUSH
18998: LD_INT 61
19000: PPUSH
19001: CALL_OW 111
19005: GO 19022
// ComMoveXY ( un , 137 , 41 ) ;
19007: LD_VAR 0 5
19011: PPUSH
19012: LD_INT 137
19014: PPUSH
19015: LD_INT 41
19017: PPUSH
19018: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
19022: LD_ADDR_EXP 57
19026: PUSH
19027: LD_EXP 57
19031: PPUSH
19032: LD_VAR 0 6
19036: PPUSH
19037: CALL 65954 0 2
19041: ST_TO_ADDR
// end ;
19042: GO 18860
19044: POP
19045: POP
// end ;
19046: LD_VAR 0 2
19050: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
19051: LD_EXP 56
19055: IFFALSE 19664
19057: GO 19059
19059: DISABLE
19060: LD_INT 0
19062: PPUSH
19063: PPUSH
19064: PPUSH
19065: PPUSH
// begin enable ;
19066: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
19067: LD_ADDR_VAR 0 2
19071: PUSH
19072: LD_EXP 56
19076: PPUSH
19077: LD_INT 50
19079: PUSH
19080: EMPTY
19081: LIST
19082: PPUSH
19083: CALL_OW 72
19087: ST_TO_ADDR
// arAttackersInf := [ ] ;
19088: LD_ADDR_EXP 56
19092: PUSH
19093: EMPTY
19094: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: LD_INT 173
19102: PPUSH
19103: LD_INT 139
19105: PPUSH
19106: CALL_OW 111
// wait ( 0 0$10 ) ;
19110: LD_INT 350
19112: PPUSH
19113: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
19117: LD_ADDR_VAR 0 1
19121: PUSH
19122: LD_VAR 0 2
19126: PPUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 72
19141: PUSH
19142: FOR_IN
19143: IFFALSE 19274
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
19145: LD_ADDR_VAR 0 3
19149: PUSH
19150: LD_INT 81
19152: PUSH
19153: LD_EXP 3
19157: PUSH
19158: LD_INT 2
19160: ARRAY
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: LD_INT 120
19171: PUSH
19172: LD_INT 11
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: LD_INT 21
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: PPUSH
19221: LD_VAR 0 1
19225: PPUSH
19226: CALL_OW 74
19230: ST_TO_ADDR
// if not nearest then
19231: LD_VAR 0 3
19235: NOT
19236: IFFALSE 19240
// break ;
19238: GO 19274
// SetTag ( nearest , tMined ) ;
19240: LD_VAR 0 3
19244: PPUSH
19245: LD_INT 11
19247: PPUSH
19248: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
19252: LD_VAR 0 1
19256: PPUSH
19257: LD_INT 0
19259: PPUSH
19260: LD_INT 0
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 192
// end ;
19272: GO 19142
19274: POP
19275: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: LD_INT 50
19288: PUSH
19289: EMPTY
19290: LIST
19291: PPUSH
19292: CALL_OW 72
19296: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_INT 155
19304: PPUSH
19305: LD_INT 119
19307: PPUSH
19308: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
19312: LD_INT 70
19314: PPUSH
19315: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19319: LD_ADDR_VAR 0 2
19323: PUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: LD_INT 50
19331: PUSH
19332: EMPTY
19333: LIST
19334: PPUSH
19335: CALL_OW 72
19339: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19340: LD_ADDR_VAR 0 4
19344: PUSH
19345: LD_INT 81
19347: PUSH
19348: LD_EXP 3
19352: PUSH
19353: LD_INT 2
19355: ARRAY
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PPUSH
19361: CALL_OW 69
19365: ST_TO_ADDR
// for i in tmp do
19366: LD_ADDR_VAR 0 1
19370: PUSH
19371: LD_VAR 0 2
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19655
// if GetClass ( i ) <> 1 then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 257
19388: PUSH
19389: LD_INT 1
19391: NONEQUAL
19392: IFFALSE 19432
// begin if not HasTask ( i ) then
19394: LD_VAR 0 1
19398: PPUSH
19399: CALL_OW 314
19403: NOT
19404: IFFALSE 19430
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end else
19406: LD_VAR 0 1
19410: PPUSH
19411: LD_VAR 0 4
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 74
19425: PPUSH
19426: CALL_OW 115
19430: GO 19653
// if not HasTask ( i ) then
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 314
19441: NOT
19442: IFFALSE 19653
// begin if GetTag ( i ) <> tMine then
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 110
19453: PUSH
19454: LD_INT 6
19456: NONEQUAL
19457: IFFALSE 19629
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_dist , i , 12 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: LD_VAR 0 4
19468: PPUSH
19469: LD_INT 3
19471: PUSH
19472: LD_INT 120
19474: PUSH
19475: LD_INT 11
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 91
19488: PUSH
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 12
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: LD_INT 21
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 3
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: PPUSH
19535: CALL_OW 72
19539: PPUSH
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 74
19549: ST_TO_ADDR
// if not nearest then
19550: LD_VAR 0 3
19554: NOT
19555: IFFALSE 19583
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
19557: LD_VAR 0 1
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 74
19576: PPUSH
19577: CALL_OW 115
19581: GO 19627
// begin SetTag ( nearest , tMined ) ;
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_INT 11
19590: PPUSH
19591: CALL_OW 109
// SetTag ( i , tMine ) ;
19595: LD_VAR 0 1
19599: PPUSH
19600: LD_INT 6
19602: PPUSH
19603: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_INT 0
19614: PPUSH
19615: LD_INT 0
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 132
// end ; end else
19627: GO 19653
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end ;
19629: LD_VAR 0 1
19633: PPUSH
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 74
19648: PPUSH
19649: CALL_OW 115
19653: GO 19376
19655: POP
19656: POP
// until not tmp ;
19657: LD_VAR 0 2
19661: NOT
19662: IFFALSE 19312
// end ;
19664: PPOPN 4
19666: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19667: LD_EXP 57
19671: IFFALSE 19783
19673: GO 19675
19675: DISABLE
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
// begin enable ;
19680: ENABLE
// tmp := arAttackersVeh ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_EXP 57
19690: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19691: LD_ADDR_EXP 57
19695: PUSH
19696: EMPTY
19697: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19698: LD_INT 70
19700: PPUSH
19701: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_INT 50
19717: PUSH
19718: EMPTY
19719: LIST
19720: PPUSH
19721: CALL_OW 72
19725: ST_TO_ADDR
// for i in tmp do
19726: LD_ADDR_VAR 0 1
19730: PUSH
19731: LD_VAR 0 2
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19774
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_INT 207
19746: PUSH
19747: LD_INT 125
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 185
19756: PUSH
19757: LD_INT 114
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL 68720 0 2
19772: GO 19736
19774: POP
19775: POP
19776: LD_VAR 0 2
19780: NOT
19781: IFFALSE 19698
// end ;
19783: PPOPN 2
19785: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19786: LD_EXP 49
19790: IFFALSE 19798
19792: PUSH
19793: LD_EXP 4
19797: AND
19798: IFFALSE 20390
19800: GO 19802
19802: DISABLE
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
// begin enable ;
19808: ENABLE
// if not arVehiclesAtttackers then
19809: LD_EXP 49
19813: NOT
19814: IFFALSE 19818
// exit ;
19816: GO 20390
// for i in arVehiclesAtttackers do
19818: LD_ADDR_VAR 0 1
19822: PUSH
19823: LD_EXP 49
19827: PUSH
19828: FOR_IN
19829: IFFALSE 20388
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 302
19840: NOT
19841: IFTRUE 19864
19843: PUSH
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 255
19853: PUSH
19854: LD_EXP 3
19858: PUSH
19859: LD_INT 2
19861: ARRAY
19862: NONEQUAL
19863: OR
19864: IFFALSE 19884
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19866: LD_ADDR_EXP 49
19870: PUSH
19871: LD_EXP 49
19875: PUSH
19876: LD_VAR 0 1
19880: DIFF
19881: ST_TO_ADDR
// continue ;
19882: GO 19828
// end ; if GetTag ( i ) = 300 then
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL_OW 110
19893: PUSH
19894: LD_INT 300
19896: EQUAL
19897: IFFALSE 20012
// begin if GetFuel ( i ) < 50 then
19899: LD_VAR 0 1
19903: PPUSH
19904: CALL_OW 261
19908: PUSH
19909: LD_INT 50
19911: LESS
19912: IFFALSE 19971
// begin ComMoveXY ( i , 198 , 28 ) ;
19914: LD_VAR 0 1
19918: PPUSH
19919: LD_INT 198
19921: PPUSH
19922: LD_INT 28
19924: PPUSH
19925: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19929: LD_INT 35
19931: PPUSH
19932: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 198
19943: PPUSH
19944: LD_INT 28
19946: PPUSH
19947: CALL_OW 297
19951: PUSH
19952: LD_INT 4
19954: LESS
19955: IFFALSE 19929
// SetFuel ( i , 100 ) ;
19957: LD_VAR 0 1
19961: PPUSH
19962: LD_INT 100
19964: PPUSH
19965: CALL_OW 240
// end else
19969: GO 20012
// if not IsInArea ( i , arParkingArea ) then
19971: LD_VAR 0 1
19975: PPUSH
19976: LD_INT 28
19978: PPUSH
19979: CALL_OW 308
19983: NOT
19984: IFFALSE 20000
// ComMoveToArea ( i , arParkingArea ) else
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_INT 28
19993: PPUSH
19994: CALL_OW 113
19998: GO 20012
// SetTag ( i , 301 ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 301
20007: PPUSH
20008: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 110
20021: PUSH
20022: LD_INT 301
20024: EQUAL
20025: IFFALSE 20167
// begin if GetLives ( i ) < 1000 then
20027: LD_VAR 0 1
20031: PPUSH
20032: CALL_OW 256
20036: PUSH
20037: LD_INT 1000
20039: LESS
20040: IFFALSE 20144
// begin if not IsDrivenBy ( i ) then
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 311
20051: NOT
20052: IFFALSE 20056
// continue ;
20054: GO 19828
// mech := IsDrivenBy ( i ) ;
20056: LD_ADDR_VAR 0 2
20060: PUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 311
20070: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20080: LD_VAR 0 2
20084: PPUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20094: LD_INT 35
20096: PPUSH
20097: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20101: LD_VAR 0 1
20105: PPUSH
20106: CALL_OW 256
20110: PUSH
20111: LD_INT 1000
20113: EQUAL
20114: IFFALSE 20094
// SetLives ( mech , 1000 ) ;
20116: LD_VAR 0 2
20120: PPUSH
20121: LD_INT 1000
20123: PPUSH
20124: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20128: LD_VAR 0 2
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 120
// end else
20142: GO 20167
// if IsDrivenBy ( i ) then
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 311
20153: IFFALSE 20167
// SetTag ( i , 0 ) ;
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_INT 0
20162: PPUSH
20163: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 110
20176: PUSH
20177: LD_INT 300
20179: LESS
20180: IFFALSE 20386
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
20182: LD_ADDR_VAR 0 3
20186: PUSH
20187: LD_INT 5
20189: PPUSH
20190: LD_INT 81
20192: PUSH
20193: LD_EXP 3
20197: PUSH
20198: LD_INT 2
20200: ARRAY
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 70
20210: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL_OW 256
20220: PUSH
20221: LD_INT 650
20223: LESS
20224: IFFALSE 20249
// begin ComStop ( i ) ;
20226: LD_VAR 0 1
20230: PPUSH
20231: CALL_OW 141
// SetTag ( i , 300 ) ;
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_INT 300
20242: PPUSH
20243: CALL_OW 109
// continue ;
20247: GO 19828
// end ; if enemy then
20249: LD_VAR 0 3
20253: IFFALSE 20293
// begin if not HasTask ( i ) then
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 314
20264: NOT
20265: IFFALSE 20291
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 74
20286: PPUSH
20287: CALL_OW 115
// end else
20291: GO 20386
// if arVehiclesAtttackers then
20293: LD_EXP 49
20297: IFFALSE 20386
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 81
20306: PUSH
20307: LD_EXP 3
20311: PUSH
20312: LD_INT 2
20314: ARRAY
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 69
20324: ST_TO_ADDR
// if enemy then
20325: LD_VAR 0 3
20329: IFFALSE 20386
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
20331: LD_VAR 0 1
20335: PPUSH
20336: LD_INT 215
20338: PUSH
20339: LD_INT 88
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 197
20348: PUSH
20349: LD_INT 90
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 178
20358: PUSH
20359: LD_INT 90
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 169
20368: PUSH
20369: LD_INT 104
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: PPUSH
20382: CALL 68720 0 2
// end ; end ; end ;
20386: GO 19828
20388: POP
20389: POP
// end ;
20390: PPOPN 3
20392: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20393: LD_INT 22
20395: PUSH
20396: LD_EXP 3
20400: PUSH
20401: LD_INT 2
20403: ARRAY
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 32
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PPUSH
20423: CALL_OW 69
20427: IFFALSE 20510
20429: GO 20431
20431: DISABLE
20432: LD_INT 0
20434: PPUSH
// begin enable ;
20435: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
20436: LD_ADDR_VAR 0 1
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_EXP 3
20448: PUSH
20449: LD_INT 2
20451: ARRAY
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 32
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: PUSH
20476: FOR_IN
20477: IFFALSE 20508
// if GetFuel ( i ) < 3 then
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL_OW 261
20488: PUSH
20489: LD_INT 3
20491: LESS
20492: IFFALSE 20506
// SetFuel ( i , 3 ) ;
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_INT 3
20501: PPUSH
20502: CALL_OW 240
20506: GO 20476
20508: POP
20509: POP
// end ;
20510: PPOPN 1
20512: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
// uc_side := botSides [ 1 ] ;
20520: LD_ADDR_OWVAR 20
20524: PUSH
20525: LD_EXP 3
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: ST_TO_ADDR
// uc_nation := nation_american ;
20534: LD_ADDR_OWVAR 21
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
20542: LD_ADDR_VAR 0 4
20546: PUSH
20547: LD_INT 3
20549: PUSH
20550: LD_INT 4
20552: PUSH
20553: LD_INT 5
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: LD_OWVAR 67
20565: ARRAY
20566: ST_TO_ADDR
// amAttackersInf := [ ] ;
20567: LD_ADDR_EXP 58
20571: PUSH
20572: EMPTY
20573: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20574: LD_ADDR_EXP 59
20578: PUSH
20579: EMPTY
20580: ST_TO_ADDR
// InitHC_All ( ) ;
20581: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
20585: LD_ADDR_VAR 0 3
20589: PUSH
20590: DOUBLE
20591: LD_INT 1
20593: DEC
20594: ST_TO_ADDR
20595: LD_INT 2
20597: PUSH
20598: LD_INT 3
20600: PUSH
20601: LD_INT 4
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: LD_OWVAR 67
20613: ARRAY
20614: PUSH
20615: LD_VAR 0 1
20619: PLUS
20620: PUSH
20621: FOR_TO
20622: IFFALSE 20707
// begin PrepareSoldier ( false , skill ) ;
20624: LD_INT 0
20626: PPUSH
20627: LD_VAR 0 4
20631: PPUSH
20632: CALL_OW 381
// un := CreateHuman ;
20636: LD_ADDR_VAR 0 5
20640: PUSH
20641: CALL_OW 44
20645: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20646: LD_INT 35
20648: PPUSH
20649: CALL_OW 67
// until PlaceUnitArea ( un , amAttackSpawnArea , false ) ;
20653: LD_VAR 0 5
20657: PPUSH
20658: LD_INT 30
20660: PPUSH
20661: LD_INT 0
20663: PPUSH
20664: CALL_OW 49
20668: IFFALSE 20646
// amAttackersInf := Join ( amAttackersInf , un ) ;
20670: LD_ADDR_EXP 58
20674: PUSH
20675: LD_EXP 58
20679: PPUSH
20680: LD_VAR 0 5
20684: PPUSH
20685: CALL 65954 0 2
20689: ST_TO_ADDR
// ComAgressiveMove ( un , 102 , 23 ) ;
20690: LD_VAR 0 5
20694: PPUSH
20695: LD_INT 102
20697: PPUSH
20698: LD_INT 23
20700: PPUSH
20701: CALL_OW 114
// end ;
20705: GO 20621
20707: POP
20708: POP
// for i := 1 to 2 + v do
20709: LD_ADDR_VAR 0 3
20713: PUSH
20714: DOUBLE
20715: LD_INT 1
20717: DEC
20718: ST_TO_ADDR
20719: LD_INT 2
20721: PUSH
20722: LD_VAR 0 1
20726: PLUS
20727: PUSH
20728: FOR_TO
20729: IFFALSE 20906
// begin PrepareMechanic ( false , skill ) ;
20731: LD_INT 0
20733: PPUSH
20734: LD_VAR 0 4
20738: PPUSH
20739: CALL_OW 383
// un := CreateHuman ;
20743: LD_ADDR_VAR 0 5
20747: PUSH
20748: CALL_OW 44
20752: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20753: LD_VAR 0 5
20757: PPUSH
20758: LD_INT 999
20760: PPUSH
20761: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20765: LD_INT 3
20767: PPUSH
20768: LD_INT 1
20770: PPUSH
20771: LD_INT 1
20773: PPUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 5
20779: PUSH
20780: LD_INT 4
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 3
20795: MOD
20796: PUSH
20797: LD_INT 1
20799: PLUS
20800: ARRAY
20801: PPUSH
20802: LD_INT 80
20804: PPUSH
20805: CALL 32784 0 5
// veh := CreateVehicle ;
20809: LD_ADDR_VAR 0 6
20813: PUSH
20814: CALL_OW 45
20818: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
20819: LD_VAR 0 6
20823: PPUSH
20824: LD_INT 2
20826: PPUSH
20827: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
20831: LD_INT 35
20833: PPUSH
20834: CALL_OW 67
// until PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20838: LD_VAR 0 6
20842: PPUSH
20843: LD_INT 30
20845: PPUSH
20846: LD_INT 0
20848: PPUSH
20849: CALL_OW 49
20853: IFFALSE 20831
// PlaceHumanInUnit ( un , veh ) ;
20855: LD_VAR 0 5
20859: PPUSH
20860: LD_VAR 0 6
20864: PPUSH
20865: CALL_OW 52
// ComMoveXY ( un , 102 , 19 ) ;
20869: LD_VAR 0 5
20873: PPUSH
20874: LD_INT 102
20876: PPUSH
20877: LD_INT 19
20879: PPUSH
20880: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20884: LD_ADDR_EXP 59
20888: PUSH
20889: LD_EXP 59
20893: PPUSH
20894: LD_VAR 0 6
20898: PPUSH
20899: CALL 65954 0 2
20903: ST_TO_ADDR
// end ;
20904: GO 20728
20906: POP
20907: POP
// end ;
20908: LD_VAR 0 2
20912: RET
// every 0 0$2 trigger amAttackersVeh or amAttackersInf do var i , tmp ;
20913: LD_EXP 59
20917: IFTRUE 20925
20919: PUSH
20920: LD_EXP 58
20924: OR
20925: IFFALSE 21061
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
// begin enable ;
20934: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20935: LD_ADDR_VAR 0 2
20939: PUSH
20940: LD_EXP 59
20944: PUSH
20945: LD_EXP 58
20949: UNION
20950: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20951: LD_ADDR_EXP 59
20955: PUSH
20956: EMPTY
20957: ST_TO_ADDR
// amAttackersInf := [ ] ;
20958: LD_ADDR_EXP 58
20962: PUSH
20963: EMPTY
20964: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20965: LD_INT 70
20967: PPUSH
20968: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20972: LD_ADDR_VAR 0 2
20976: PUSH
20977: LD_VAR 0 2
20981: PPUSH
20982: LD_INT 50
20984: PUSH
20985: EMPTY
20986: LIST
20987: PPUSH
20988: CALL_OW 72
20992: ST_TO_ADDR
// for i in tmp do
20993: LD_ADDR_VAR 0 1
20997: PUSH
20998: LD_VAR 0 2
21002: PUSH
21003: FOR_IN
21004: IFFALSE 21052
// AgressiveMove ( i , [ [ 111 , 48 ] , [ 120 , 73 ] , [ 123 , 87 ] ] ) until not tmp ;
21006: LD_VAR 0 1
21010: PPUSH
21011: LD_INT 111
21013: PUSH
21014: LD_INT 48
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 120
21023: PUSH
21024: LD_INT 73
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 123
21033: PUSH
21034: LD_INT 87
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: PPUSH
21046: CALL 68720 0 2
21050: GO 21003
21052: POP
21053: POP
21054: LD_VAR 0 2
21058: NOT
21059: IFFALSE 20965
// end ;
21061: PPOPN 2
21063: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
21064: LD_EXP 39
21068: IFFALSE 21076
21070: PUSH
21071: LD_EXP 5
21075: AND
21076: IFFALSE 21657
21078: GO 21080
21080: DISABLE
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
// begin enable ;
21086: ENABLE
// if not amVehiclesAtttackers then
21087: LD_EXP 39
21091: NOT
21092: IFFALSE 21096
// exit ;
21094: GO 21657
// for i in amVehiclesAtttackers do
21096: LD_ADDR_VAR 0 1
21100: PUSH
21101: LD_EXP 39
21105: PUSH
21106: FOR_IN
21107: IFFALSE 21655
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 302
21118: NOT
21119: IFTRUE 21142
21121: PUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 255
21131: PUSH
21132: LD_EXP 3
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: NONEQUAL
21141: OR
21142: IFFALSE 21162
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
21144: LD_ADDR_EXP 39
21148: PUSH
21149: LD_EXP 39
21153: PUSH
21154: LD_VAR 0 1
21158: DIFF
21159: ST_TO_ADDR
// continue ;
21160: GO 21106
// end ; if GetTag ( i ) = 300 then
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 110
21171: PUSH
21172: LD_INT 300
21174: EQUAL
21175: IFFALSE 21290
// begin if GetFuel ( i ) < 50 then
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 261
21186: PUSH
21187: LD_INT 50
21189: LESS
21190: IFFALSE 21249
// begin ComMoveXY ( i , 24 , 36 ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_INT 24
21199: PPUSH
21200: LD_INT 36
21202: PPUSH
21203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21207: LD_INT 35
21209: PPUSH
21210: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
21214: LD_VAR 0 1
21218: PPUSH
21219: LD_INT 24
21221: PPUSH
21222: LD_INT 36
21224: PPUSH
21225: CALL_OW 297
21229: PUSH
21230: LD_INT 4
21232: LESS
21233: IFFALSE 21207
// SetFuel ( i , 100 ) ;
21235: LD_VAR 0 1
21239: PPUSH
21240: LD_INT 100
21242: PPUSH
21243: CALL_OW 240
// end else
21247: GO 21290
// if not IsInArea ( i , amParkingArea ) then
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_INT 27
21256: PPUSH
21257: CALL_OW 308
21261: NOT
21262: IFFALSE 21278
// ComMoveToArea ( i , amParkingArea ) else
21264: LD_VAR 0 1
21268: PPUSH
21269: LD_INT 27
21271: PPUSH
21272: CALL_OW 113
21276: GO 21290
// SetTag ( i , 301 ) ;
21278: LD_VAR 0 1
21282: PPUSH
21283: LD_INT 301
21285: PPUSH
21286: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 110
21299: PUSH
21300: LD_INT 301
21302: EQUAL
21303: IFFALSE 21445
// begin if GetLives ( i ) < 1000 then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 256
21314: PUSH
21315: LD_INT 1000
21317: LESS
21318: IFFALSE 21422
// begin if not IsDrivenBy ( i ) then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 311
21329: NOT
21330: IFFALSE 21334
// continue ;
21332: GO 21106
// mech := IsDrivenBy ( i ) ;
21334: LD_ADDR_VAR 0 2
21338: PUSH
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 311
21348: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21358: LD_VAR 0 2
21362: PPUSH
21363: LD_VAR 0 1
21367: PPUSH
21368: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
21372: LD_INT 35
21374: PPUSH
21375: CALL_OW 67
// until GetLives ( i ) = 1000 ;
21379: LD_VAR 0 1
21383: PPUSH
21384: CALL_OW 256
21388: PUSH
21389: LD_INT 1000
21391: EQUAL
21392: IFFALSE 21372
// SetLives ( mech , 1000 ) ;
21394: LD_VAR 0 2
21398: PPUSH
21399: LD_INT 1000
21401: PPUSH
21402: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
21406: LD_VAR 0 2
21410: PPUSH
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 120
// end else
21420: GO 21445
// if IsDrivenBy ( i ) then
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 311
21431: IFFALSE 21445
// SetTag ( i , 0 ) ;
21433: LD_VAR 0 1
21437: PPUSH
21438: LD_INT 0
21440: PPUSH
21441: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
21445: LD_VAR 0 1
21449: PPUSH
21450: CALL_OW 110
21454: PUSH
21455: LD_INT 300
21457: LESS
21458: IFFALSE 21653
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
21460: LD_ADDR_VAR 0 3
21464: PUSH
21465: LD_INT 3
21467: PPUSH
21468: LD_INT 81
21470: PUSH
21471: LD_EXP 3
21475: PUSH
21476: LD_INT 1
21478: ARRAY
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 70
21488: ST_TO_ADDR
// if GetLives ( i ) < 650 then
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL_OW 256
21498: PUSH
21499: LD_INT 650
21501: LESS
21502: IFFALSE 21527
// begin ComStop ( i ) ;
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 141
// SetTag ( i , 300 ) ;
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_INT 300
21520: PPUSH
21521: CALL_OW 109
// continue ;
21525: GO 21106
// end ; if enemy then
21527: LD_VAR 0 3
21531: IFFALSE 21571
// begin if not HasTask ( i ) then
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 314
21542: NOT
21543: IFFALSE 21569
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21545: LD_VAR 0 1
21549: PPUSH
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 74
21564: PPUSH
21565: CALL_OW 115
// end else
21569: GO 21653
// if amVehiclesAtttackers then
21571: LD_EXP 39
21575: IFFALSE 21653
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
21577: LD_ADDR_VAR 0 3
21581: PUSH
21582: LD_INT 81
21584: PUSH
21585: LD_EXP 3
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PPUSH
21598: CALL_OW 69
21602: ST_TO_ADDR
// if enemy then
21603: LD_VAR 0 3
21607: IFFALSE 21653
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 49
21616: PUSH
21617: LD_INT 43
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 63
21626: PUSH
21627: LD_INT 56
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 72
21636: PUSH
21637: LD_INT 67
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: PPUSH
21649: CALL 68720 0 2
// end ; end ; end ;
21653: GO 21106
21655: POP
21656: POP
// end ;
21657: PPOPN 3
21659: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21660: LD_INT 22
21662: PUSH
21663: LD_EXP 3
21667: PUSH
21668: LD_INT 1
21670: ARRAY
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 32
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PPUSH
21690: CALL_OW 69
21694: IFFALSE 21777
21696: GO 21698
21698: DISABLE
21699: LD_INT 0
21701: PPUSH
// begin enable ;
21702: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21703: LD_ADDR_VAR 0 1
21707: PUSH
21708: LD_INT 22
21710: PUSH
21711: LD_EXP 3
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 32
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL_OW 69
21742: PUSH
21743: FOR_IN
21744: IFFALSE 21775
// if GetFuel ( i ) < 3 then
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 261
21755: PUSH
21756: LD_INT 3
21758: LESS
21759: IFFALSE 21773
// SetFuel ( i , 3 ) ;
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_INT 3
21768: PPUSH
21769: CALL_OW 240
21773: GO 21743
21775: POP
21776: POP
// end ; end_of_file
21777: PPOPN 1
21779: END
// every 0 0$20 trigger game do
21780: LD_EXP 2
21784: IFFALSE 21833
21786: GO 21788
21788: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21789: LD_INT 20
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 21
21797: PUSH
21798: LD_INT 3
21800: PUSH
21801: LD_INT 5
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PPUSH
21811: LD_EXP 21
21815: PUSH
21816: LD_INT 2
21818: ARRAY
21819: PPUSH
21820: LD_EXP 21
21824: PUSH
21825: LD_INT 1
21827: ARRAY
21828: PPUSH
21829: CALL 21834 0 3
21833: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
// if not areas then
21840: LD_VAR 0 1
21844: NOT
21845: IFFALSE 21849
// exit ;
21847: GO 22228
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21849: LD_ADDR_VAR 0 7
21853: PUSH
21854: LD_INT 17
21856: PUSH
21857: LD_INT 18
21859: PUSH
21860: LD_INT 19
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: ST_TO_ADDR
// x := 5 ;
21868: LD_ADDR_VAR 0 6
21872: PUSH
21873: LD_INT 5
21875: ST_TO_ADDR
// repeat wait ( time ) ;
21876: LD_VAR 0 2
21880: PPUSH
21881: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21885: LD_OWVAR 1
21889: PUSH
21890: LD_INT 37800
21892: PUSH
21893: LD_INT 31500
21895: PUSH
21896: LD_INT 25200
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_OWVAR 67
21908: ARRAY
21909: LESS
21910: IFFALSE 22049
// begin for i := 1 to multi_sides do
21912: LD_ADDR_VAR 0 5
21916: PUSH
21917: DOUBLE
21918: LD_INT 1
21920: DEC
21921: ST_TO_ADDR
21922: LD_EXP 7
21926: PUSH
21927: FOR_TO
21928: IFFALSE 22040
// if multi_sides [ i ] then
21930: LD_EXP 7
21934: PUSH
21935: LD_VAR 0 5
21939: ARRAY
21940: IFFALSE 22038
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21942: LD_VAR 0 7
21946: PUSH
21947: LD_EXP 7
21951: PUSH
21952: LD_VAR 0 5
21956: ARRAY
21957: ARRAY
21958: PPUSH
21959: LD_INT 1
21961: PPUSH
21962: CALL_OW 287
21966: PUSH
21967: LD_INT 32
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 23
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: LD_OWVAR 67
21985: ARRAY
21986: LESS
21987: IFFALSE 22038
// begin amount := amount - ( x * 10 ) ;
21989: LD_ADDR_VAR 0 3
21993: PUSH
21994: LD_VAR 0 3
21998: PUSH
21999: LD_VAR 0 6
22003: PUSH
22004: LD_INT 10
22006: MUL
22007: MINUS
22008: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
22009: LD_VAR 0 6
22013: PPUSH
22014: LD_VAR 0 7
22018: PUSH
22019: LD_EXP 7
22023: PUSH
22024: LD_VAR 0 5
22028: ARRAY
22029: ARRAY
22030: PPUSH
22031: LD_INT 1
22033: PPUSH
22034: CALL_OW 55
// end ; end ;
22038: GO 21927
22040: POP
22041: POP
// wait ( 0 0$2 ) ;
22042: LD_INT 70
22044: PPUSH
22045: CALL_OW 67
// end ; for i in areas do
22049: LD_ADDR_VAR 0 5
22053: PUSH
22054: LD_VAR 0 1
22058: PUSH
22059: FOR_IN
22060: IFFALSE 22143
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
22062: LD_VAR 0 5
22066: PPUSH
22067: LD_INT 1
22069: PPUSH
22070: CALL_OW 287
22074: PUSH
22075: LD_INT 25
22077: PUSH
22078: LD_INT 22
22080: PUSH
22081: LD_INT 20
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_OWVAR 67
22093: ARRAY
22094: LESS
22095: IFFALSE 22141
// begin wait ( 0 0$5 ) ;
22097: LD_INT 175
22099: PPUSH
22100: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
22104: LD_VAR 0 6
22108: PPUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: LD_INT 1
22116: PPUSH
22117: CALL_OW 55
// amount := amount - ( x * 10 ) ;
22121: LD_ADDR_VAR 0 3
22125: PUSH
22126: LD_VAR 0 3
22130: PUSH
22131: LD_VAR 0 6
22135: PUSH
22136: LD_INT 10
22138: MUL
22139: MINUS
22140: ST_TO_ADDR
// end ; end ;
22141: GO 22059
22143: POP
22144: POP
// time := time + 0 0$2 ;
22145: LD_ADDR_VAR 0 2
22149: PUSH
22150: LD_VAR 0 2
22154: PUSH
22155: LD_INT 70
22157: PLUS
22158: ST_TO_ADDR
// x := x - 1 ;
22159: LD_ADDR_VAR 0 6
22163: PUSH
22164: LD_VAR 0 6
22168: PUSH
22169: LD_INT 1
22171: MINUS
22172: ST_TO_ADDR
// if x = 0 then
22173: LD_VAR 0 6
22177: PUSH
22178: LD_INT 0
22180: EQUAL
22181: IFFALSE 22191
// x := 5 ;
22183: LD_ADDR_VAR 0 6
22187: PUSH
22188: LD_INT 5
22190: ST_TO_ADDR
// if time > 2 2$00 then
22191: LD_VAR 0 2
22195: PUSH
22196: LD_INT 4200
22198: GREATER
22199: IFFALSE 22209
// time := 0 0$30 ;
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_INT 1050
22208: ST_TO_ADDR
// until not game or amount <= 0 ;
22209: LD_EXP 2
22213: NOT
22214: IFTRUE 22226
22216: PUSH
22217: LD_VAR 0 3
22221: PUSH
22222: LD_INT 0
22224: LESSEQUAL
22225: OR
22226: IFFALSE 21876
// end ; end_of_file
22228: LD_VAR 0 4
22232: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22233: LD_VAR 0 1
22237: PUSH
22238: LD_INT 200
22240: DOUBLE
22241: GREATEREQUAL
22242: IFFALSE 22250
22244: LD_INT 299
22246: DOUBLE
22247: LESSEQUAL
22248: IFTRUE 22252
22250: GO 22284
22252: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: LD_VAR 0 4
22272: PPUSH
22273: LD_VAR 0 5
22277: PPUSH
22278: CALL 23065 0 5
22282: GO 22361
22284: LD_INT 300
22286: DOUBLE
22287: GREATEREQUAL
22288: IFFALSE 22296
22290: LD_INT 399
22292: DOUBLE
22293: LESSEQUAL
22294: IFTRUE 22298
22296: GO 22360
22298: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22299: LD_VAR 0 1
22303: PPUSH
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_VAR 0 4
22318: PPUSH
22319: LD_VAR 0 5
22323: PPUSH
22324: LD_VAR 0 6
22328: PPUSH
22329: LD_VAR 0 7
22333: PPUSH
22334: LD_VAR 0 8
22338: PPUSH
22339: LD_VAR 0 9
22343: PPUSH
22344: LD_VAR 0 10
22348: PPUSH
22349: LD_VAR 0 11
22353: PPUSH
22354: CALL 71956 0 11
22358: GO 22361
22360: POP
// end ;
22361: PPOPN 11
22363: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22364: LD_VAR 0 1
22368: PPUSH
22369: LD_VAR 0 2
22373: PPUSH
22374: LD_VAR 0 3
22378: PPUSH
22379: LD_VAR 0 4
22383: PPUSH
22384: LD_VAR 0 5
22388: PPUSH
22389: CALL 22446 0 5
// end ; end_of_file
22393: PPOPN 5
22395: END
// export function SOS_UnitDestroyed ( un ) ; begin
22396: LD_INT 0
22398: PPUSH
// ComRadiation ( un ) ;
22399: LD_VAR 0 1
22403: PPUSH
22404: CALL 23485 0 1
// end ;
22408: LD_VAR 0 2
22412: RET
// export function SOS_UnitKamikazed ( un ) ; begin
22413: LD_INT 0
22415: PPUSH
// ComRadiation ( un ) ;
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL 23485 0 1
// end ;
22425: LD_VAR 0 2
22429: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22430: LD_INT 0
22432: PPUSH
// end ;
22433: LD_VAR 0 4
22437: RET
// export function SOS_Command ( cmd ) ; begin
22438: LD_INT 0
22440: PPUSH
// end ;
22441: LD_VAR 0 2
22445: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22446: LD_INT 0
22448: PPUSH
// end ;
22449: LD_VAR 0 6
22453: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
22454: LD_INT 0
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
// if not vehicle or not factory then
22460: LD_VAR 0 1
22464: NOT
22465: IFTRUE 22474
22467: PUSH
22468: LD_VAR 0 2
22472: NOT
22473: OR
22474: IFFALSE 22478
// exit ;
22476: GO 23060
// if not factoryWaypoints then
22478: LD_EXP 70
22482: NOT
22483: IFFALSE 22487
// exit ;
22485: GO 23060
// for i := 1 to Count ( factoryWaypoints ) do
22487: LD_ADDR_VAR 0 4
22491: PUSH
22492: DOUBLE
22493: LD_INT 1
22495: DEC
22496: ST_TO_ADDR
22497: LD_EXP 70
22501: PPUSH
22502: CALL 30022 0 1
22506: PUSH
22507: FOR_TO
22508: IFFALSE 23058
// if factoryWaypoints [ i ] [ 2 ] = factory then
22510: LD_EXP 70
22514: PUSH
22515: LD_VAR 0 4
22519: ARRAY
22520: PUSH
22521: LD_INT 2
22523: ARRAY
22524: PUSH
22525: LD_VAR 0 2
22529: EQUAL
22530: IFFALSE 23056
// begin if GetControl ( vehicle ) = control_manual then
22532: LD_VAR 0 1
22536: PPUSH
22537: CALL_OW 263
22541: PUSH
22542: LD_INT 1
22544: EQUAL
22545: IFFALSE 22909
// begin driver := IsDrivenBy ( vehicle ) ;
22547: LD_ADDR_VAR 0 5
22551: PUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 311
22561: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22562: LD_VAR 0 5
22566: PUSH
22567: LD_EXP 71
22571: IN
22572: IFTRUE 22586
22574: PUSH
22575: LD_VAR 0 1
22579: PUSH
22580: LD_EXP 71
22584: IN
22585: OR
22586: IFFALSE 22592
// exit ;
22588: POP
22589: POP
22590: GO 23060
// if not HasTask ( driver ) then
22592: LD_VAR 0 5
22596: PPUSH
22597: CALL_OW 314
22601: NOT
22602: IFFALSE 22907
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22604: LD_ADDR_EXP 71
22608: PUSH
22609: LD_EXP 71
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: CALL 65954 0 2
22623: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22624: LD_ADDR_EXP 71
22628: PUSH
22629: LD_EXP 71
22633: PPUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL 65954 0 2
22643: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22644: LD_ADDR_VAR 0 6
22648: PUSH
22649: LD_EXP 70
22653: PUSH
22654: LD_VAR 0 4
22658: ARRAY
22659: PUSH
22660: LD_INT 3
22662: ARRAY
22663: PPUSH
22664: LD_EXP 70
22668: PUSH
22669: LD_VAR 0 4
22673: ARRAY
22674: PUSH
22675: LD_INT 4
22677: ARRAY
22678: PPUSH
22679: CALL_OW 428
22683: ST_TO_ADDR
// if hex then
22684: LD_VAR 0 6
22688: IFFALSE 22706
// ComMoveUnit ( driver , hex ) else
22690: LD_VAR 0 5
22694: PPUSH
22695: LD_VAR 0 6
22699: PPUSH
22700: CALL_OW 112
22704: GO 22790
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22706: LD_VAR 0 1
22710: PPUSH
22711: LD_EXP 70
22715: PUSH
22716: LD_VAR 0 4
22720: ARRAY
22721: PUSH
22722: LD_INT 3
22724: ARRAY
22725: PPUSH
22726: LD_EXP 70
22730: PUSH
22731: LD_VAR 0 4
22735: ARRAY
22736: PUSH
22737: LD_INT 4
22739: ARRAY
22740: PPUSH
22741: CALL_OW 297
22745: PUSH
22746: LD_INT 0
22748: GREATER
22749: IFFALSE 22790
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22751: LD_VAR 0 5
22755: PPUSH
22756: LD_EXP 70
22760: PUSH
22761: LD_VAR 0 4
22765: ARRAY
22766: PUSH
22767: LD_INT 3
22769: ARRAY
22770: PPUSH
22771: LD_EXP 70
22775: PUSH
22776: LD_VAR 0 4
22780: ARRAY
22781: PUSH
22782: LD_INT 4
22784: ARRAY
22785: PPUSH
22786: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22790: LD_VAR 0 5
22794: PPUSH
22795: CALL_OW 181
// if Multiplayer then
22799: LD_OWVAR 4
22803: IFFALSE 22852
// begin repeat wait ( 10 ) ;
22805: LD_INT 10
22807: PPUSH
22808: CALL_OW 67
// until not IsInUnit ( driver ) ;
22812: LD_VAR 0 5
22816: PPUSH
22817: CALL_OW 310
22821: NOT
22822: IFFALSE 22805
// if not HasTask ( driver ) then
22824: LD_VAR 0 5
22828: PPUSH
22829: CALL_OW 314
22833: NOT
22834: IFFALSE 22850
// ComEnterUnit ( driver , factory ) ;
22836: LD_VAR 0 5
22840: PPUSH
22841: LD_VAR 0 2
22845: PPUSH
22846: CALL_OW 120
// end else
22850: GO 22866
// AddComEnterUnit ( driver , factory ) ;
22852: LD_VAR 0 5
22856: PPUSH
22857: LD_VAR 0 2
22861: PPUSH
22862: CALL_OW 180
// wait ( 0 0$1 ) ;
22866: LD_INT 35
22868: PPUSH
22869: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22873: LD_ADDR_EXP 71
22877: PUSH
22878: LD_EXP 71
22882: PUSH
22883: LD_VAR 0 5
22887: DIFF
22888: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22889: LD_ADDR_EXP 71
22893: PUSH
22894: LD_EXP 71
22898: PUSH
22899: LD_VAR 0 1
22903: DIFF
22904: ST_TO_ADDR
// break ;
22905: GO 23058
// end ; end else
22907: GO 23056
// if GetControl ( vehicle ) = control_remote then
22909: LD_VAR 0 1
22913: PPUSH
22914: CALL_OW 263
22918: PUSH
22919: LD_INT 2
22921: EQUAL
22922: IFFALSE 23008
// begin wait ( 0 0$2 ) ;
22924: LD_INT 70
22926: PPUSH
22927: CALL_OW 67
// repeat wait ( 10 ) ;
22931: LD_INT 10
22933: PPUSH
22934: CALL_OW 67
// Connect ( vehicle ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL 36266 0 1
// until IsControledBy ( vehicle ) ;
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 312
22956: IFFALSE 22931
// wait ( 10 ) ;
22958: LD_INT 10
22960: PPUSH
22961: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22965: LD_VAR 0 1
22969: PPUSH
22970: LD_EXP 70
22974: PUSH
22975: LD_VAR 0 4
22979: ARRAY
22980: PUSH
22981: LD_INT 3
22983: ARRAY
22984: PPUSH
22985: LD_EXP 70
22989: PUSH
22990: LD_VAR 0 4
22994: ARRAY
22995: PUSH
22996: LD_INT 4
22998: ARRAY
22999: PPUSH
23000: CALL_OW 111
// break ;
23004: GO 23058
// end else
23006: GO 23056
// begin wait ( 0 0$3 ) ;
23008: LD_INT 105
23010: PPUSH
23011: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: LD_EXP 70
23024: PUSH
23025: LD_VAR 0 4
23029: ARRAY
23030: PUSH
23031: LD_INT 3
23033: ARRAY
23034: PPUSH
23035: LD_EXP 70
23039: PUSH
23040: LD_VAR 0 4
23044: ARRAY
23045: PUSH
23046: LD_INT 4
23048: ARRAY
23049: PPUSH
23050: CALL_OW 111
// break ;
23054: GO 23058
// end ; end ;
23056: GO 22507
23058: POP
23059: POP
// end ;
23060: LD_VAR 0 3
23064: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23065: LD_INT 0
23067: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23068: LD_VAR 0 1
23072: PUSH
23073: LD_INT 250
23075: EQUAL
23076: IFFALSE 23093
23078: PUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: CALL_OW 264
23088: PUSH
23089: LD_INT 81
23091: EQUAL
23092: AND
23093: IFFALSE 23114
// MinerPlaceMine ( unit , x , y ) ;
23095: LD_VAR 0 2
23099: PPUSH
23100: LD_VAR 0 4
23104: PPUSH
23105: LD_VAR 0 5
23109: PPUSH
23110: CALL 26246 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23114: LD_VAR 0 1
23118: PUSH
23119: LD_INT 251
23121: EQUAL
23122: IFFALSE 23139
23124: PUSH
23125: LD_VAR 0 2
23129: PPUSH
23130: CALL_OW 264
23134: PUSH
23135: LD_INT 81
23137: EQUAL
23138: AND
23139: IFFALSE 23160
// MinerDetonateMine ( unit , x , y ) ;
23141: LD_VAR 0 2
23145: PPUSH
23146: LD_VAR 0 4
23150: PPUSH
23151: LD_VAR 0 5
23155: PPUSH
23156: CALL 26525 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 252
23167: EQUAL
23168: IFFALSE 23185
23170: PUSH
23171: LD_VAR 0 2
23175: PPUSH
23176: CALL_OW 264
23180: PUSH
23181: LD_INT 81
23183: EQUAL
23184: AND
23185: IFFALSE 23206
// MinerCreateMinefield ( unit , x , y ) ;
23187: LD_VAR 0 2
23191: PPUSH
23192: LD_VAR 0 4
23196: PPUSH
23197: LD_VAR 0 5
23201: PPUSH
23202: CALL 26944 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23206: LD_VAR 0 1
23210: PUSH
23211: LD_INT 253
23213: EQUAL
23214: IFFALSE 23231
23216: PUSH
23217: LD_VAR 0 2
23221: PPUSH
23222: CALL_OW 257
23226: PUSH
23227: LD_INT 5
23229: EQUAL
23230: AND
23231: IFFALSE 23252
// ComBinocular ( unit , x , y ) ;
23233: LD_VAR 0 2
23237: PPUSH
23238: LD_VAR 0 4
23242: PPUSH
23243: LD_VAR 0 5
23247: PPUSH
23248: CALL 27319 0 3
// if selectedUnit then
23252: LD_VAR 0 3
23256: IFFALSE 23316
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23258: LD_VAR 0 1
23262: PUSH
23263: LD_INT 254
23265: EQUAL
23266: IFFALSE 23283
23268: PUSH
23269: LD_VAR 0 2
23273: PPUSH
23274: CALL_OW 264
23278: PUSH
23279: LD_INT 99
23281: EQUAL
23282: AND
23283: IFFALSE 23300
23285: PUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: CALL_OW 263
23295: PUSH
23296: LD_INT 3
23298: EQUAL
23299: AND
23300: IFFALSE 23316
// HackDestroyVehicle ( unit , selectedUnit ) ;
23302: LD_VAR 0 2
23306: PPUSH
23307: LD_VAR 0 3
23311: PPUSH
23312: CALL 25606 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23316: LD_VAR 0 1
23320: PUSH
23321: LD_INT 255
23323: EQUAL
23324: IFFALSE 23348
23326: PUSH
23327: LD_VAR 0 2
23331: PPUSH
23332: CALL_OW 264
23336: PUSH
23337: LD_INT 14
23339: PUSH
23340: LD_INT 53
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: IN
23347: AND
23348: IFFALSE 23366
23350: PUSH
23351: LD_VAR 0 4
23355: PPUSH
23356: LD_VAR 0 5
23360: PPUSH
23361: CALL_OW 488
23365: AND
23366: IFFALSE 23390
// CutTreeXYR ( unit , x , y , 12 ) ;
23368: LD_VAR 0 2
23372: PPUSH
23373: LD_VAR 0 4
23377: PPUSH
23378: LD_VAR 0 5
23382: PPUSH
23383: LD_INT 12
23385: PPUSH
23386: CALL 23581 0 4
// if cmd = 256 then
23390: LD_VAR 0 1
23394: PUSH
23395: LD_INT 256
23397: EQUAL
23398: IFFALSE 23419
// SetFactoryWaypoint ( unit , x , y ) ;
23400: LD_VAR 0 2
23404: PPUSH
23405: LD_VAR 0 4
23409: PPUSH
23410: LD_VAR 0 5
23414: PPUSH
23415: CALL 71964 0 3
// if cmd = 257 then
23419: LD_VAR 0 1
23423: PUSH
23424: LD_INT 257
23426: EQUAL
23427: IFFALSE 23448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23429: LD_VAR 0 2
23433: PPUSH
23434: LD_VAR 0 4
23438: PPUSH
23439: LD_VAR 0 5
23443: PPUSH
23444: CALL 72460 0 3
// if cmd = 258 then
23448: LD_VAR 0 1
23452: PUSH
23453: LD_INT 258
23455: EQUAL
23456: IFFALSE 23480
// BurnTreeXYR ( unit , x , y , 8 ) ;
23458: LD_VAR 0 2
23462: PPUSH
23463: LD_VAR 0 4
23467: PPUSH
23468: LD_VAR 0 5
23472: PPUSH
23473: LD_INT 8
23475: PPUSH
23476: CALL 23981 0 4
// end ;
23480: LD_VAR 0 6
23484: RET
// export function ComRadiation ( un ) ; var eff ; begin
23485: LD_INT 0
23487: PPUSH
23488: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 264
23498: PUSH
23499: LD_INT 91
23501: NONEQUAL
23502: IFFALSE 23506
// exit ;
23504: GO 23576
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23506: LD_INT 68
23508: PPUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 255
23518: PPUSH
23519: CALL_OW 321
23523: PUSH
23524: LD_INT 2
23526: EQUAL
23527: IFFALSE 23539
// eff := 50 else
23529: LD_ADDR_VAR 0 3
23533: PUSH
23534: LD_INT 50
23536: ST_TO_ADDR
23537: GO 23547
// eff := 25 ;
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 25
23546: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23547: LD_VAR 0 1
23551: PPUSH
23552: CALL_OW 250
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 251
23566: PPUSH
23567: LD_VAR 0 3
23571: PPUSH
23572: CALL_OW 495
// end ;
23576: LD_VAR 0 2
23580: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23581: LD_INT 0
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
23589: PPUSH
23590: PPUSH
23591: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 302
23601: NOT
23602: IFTRUE 23621
23604: PUSH
23605: LD_VAR 0 2
23609: PPUSH
23610: LD_VAR 0 3
23614: PPUSH
23615: CALL_OW 488
23619: NOT
23620: OR
23621: IFTRUE 23630
23623: PUSH
23624: LD_VAR 0 4
23628: NOT
23629: OR
23630: IFFALSE 23634
// exit ;
23632: GO 23976
// list := [ ] ;
23634: LD_ADDR_VAR 0 13
23638: PUSH
23639: EMPTY
23640: ST_TO_ADDR
// if x - r < 0 then
23641: LD_VAR 0 2
23645: PUSH
23646: LD_VAR 0 4
23650: MINUS
23651: PUSH
23652: LD_INT 0
23654: LESS
23655: IFFALSE 23667
// min_x := 0 else
23657: LD_ADDR_VAR 0 7
23661: PUSH
23662: LD_INT 0
23664: ST_TO_ADDR
23665: GO 23683
// min_x := x - r ;
23667: LD_ADDR_VAR 0 7
23671: PUSH
23672: LD_VAR 0 2
23676: PUSH
23677: LD_VAR 0 4
23681: MINUS
23682: ST_TO_ADDR
// if y - r < 0 then
23683: LD_VAR 0 3
23687: PUSH
23688: LD_VAR 0 4
23692: MINUS
23693: PUSH
23694: LD_INT 0
23696: LESS
23697: IFFALSE 23709
// min_y := 0 else
23699: LD_ADDR_VAR 0 8
23703: PUSH
23704: LD_INT 0
23706: ST_TO_ADDR
23707: GO 23725
// min_y := y - r ;
23709: LD_ADDR_VAR 0 8
23713: PUSH
23714: LD_VAR 0 3
23718: PUSH
23719: LD_VAR 0 4
23723: MINUS
23724: ST_TO_ADDR
// max_x := x + r ;
23725: LD_ADDR_VAR 0 9
23729: PUSH
23730: LD_VAR 0 2
23734: PUSH
23735: LD_VAR 0 4
23739: PLUS
23740: ST_TO_ADDR
// max_y := y + r ;
23741: LD_ADDR_VAR 0 10
23745: PUSH
23746: LD_VAR 0 3
23750: PUSH
23751: LD_VAR 0 4
23755: PLUS
23756: ST_TO_ADDR
// for _x = min_x to max_x do
23757: LD_ADDR_VAR 0 11
23761: PUSH
23762: DOUBLE
23763: LD_VAR 0 7
23767: DEC
23768: ST_TO_ADDR
23769: LD_VAR 0 9
23773: PUSH
23774: FOR_TO
23775: IFFALSE 23894
// for _y = min_y to max_y do
23777: LD_ADDR_VAR 0 12
23781: PUSH
23782: DOUBLE
23783: LD_VAR 0 8
23787: DEC
23788: ST_TO_ADDR
23789: LD_VAR 0 10
23793: PUSH
23794: FOR_TO
23795: IFFALSE 23890
// begin if not ValidHex ( _x , _y ) then
23797: LD_VAR 0 11
23801: PPUSH
23802: LD_VAR 0 12
23806: PPUSH
23807: CALL_OW 488
23811: NOT
23812: IFFALSE 23816
// continue ;
23814: GO 23794
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23816: LD_VAR 0 11
23820: PPUSH
23821: LD_VAR 0 12
23825: PPUSH
23826: CALL_OW 351
23830: IFFALSE 23848
23832: PUSH
23833: LD_VAR 0 11
23837: PPUSH
23838: LD_VAR 0 12
23842: PPUSH
23843: CALL_OW 554
23847: AND
23848: IFFALSE 23888
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23850: LD_ADDR_VAR 0 13
23854: PUSH
23855: LD_VAR 0 13
23859: PPUSH
23860: LD_VAR 0 13
23864: PUSH
23865: LD_INT 1
23867: PLUS
23868: PPUSH
23869: LD_VAR 0 11
23873: PUSH
23874: LD_VAR 0 12
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PPUSH
23883: CALL_OW 2
23887: ST_TO_ADDR
// end ;
23888: GO 23794
23890: POP
23891: POP
23892: GO 23774
23894: POP
23895: POP
// if not list then
23896: LD_VAR 0 13
23900: NOT
23901: IFFALSE 23905
// exit ;
23903: GO 23976
// for i in list do
23905: LD_ADDR_VAR 0 6
23909: PUSH
23910: LD_VAR 0 13
23914: PUSH
23915: FOR_IN
23916: IFFALSE 23974
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23918: LD_VAR 0 1
23922: PPUSH
23923: LD_STRING M
23925: PUSH
23926: LD_VAR 0 6
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PUSH
23935: LD_VAR 0 6
23939: PUSH
23940: LD_INT 2
23942: ARRAY
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: PPUSH
23968: CALL_OW 447
23972: GO 23915
23974: POP
23975: POP
// end ;
23976: LD_VAR 0 5
23980: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23981: LD_INT 0
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
23990: PPUSH
23991: PPUSH
23992: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23993: LD_VAR 0 1
23997: PPUSH
23998: CALL_OW 302
24002: NOT
24003: IFTRUE 24022
24005: PUSH
24006: LD_VAR 0 2
24010: PPUSH
24011: LD_VAR 0 3
24015: PPUSH
24016: CALL_OW 488
24020: NOT
24021: OR
24022: IFTRUE 24031
24024: PUSH
24025: LD_VAR 0 4
24029: NOT
24030: OR
24031: IFFALSE 24035
// exit ;
24033: GO 24552
// list := [ ] ;
24035: LD_ADDR_VAR 0 13
24039: PUSH
24040: EMPTY
24041: ST_TO_ADDR
// if x - r < 0 then
24042: LD_VAR 0 2
24046: PUSH
24047: LD_VAR 0 4
24051: MINUS
24052: PUSH
24053: LD_INT 0
24055: LESS
24056: IFFALSE 24068
// min_x := 0 else
24058: LD_ADDR_VAR 0 7
24062: PUSH
24063: LD_INT 0
24065: ST_TO_ADDR
24066: GO 24084
// min_x := x - r ;
24068: LD_ADDR_VAR 0 7
24072: PUSH
24073: LD_VAR 0 2
24077: PUSH
24078: LD_VAR 0 4
24082: MINUS
24083: ST_TO_ADDR
// if y - r < 0 then
24084: LD_VAR 0 3
24088: PUSH
24089: LD_VAR 0 4
24093: MINUS
24094: PUSH
24095: LD_INT 0
24097: LESS
24098: IFFALSE 24110
// min_y := 0 else
24100: LD_ADDR_VAR 0 8
24104: PUSH
24105: LD_INT 0
24107: ST_TO_ADDR
24108: GO 24126
// min_y := y - r ;
24110: LD_ADDR_VAR 0 8
24114: PUSH
24115: LD_VAR 0 3
24119: PUSH
24120: LD_VAR 0 4
24124: MINUS
24125: ST_TO_ADDR
// max_x := x + r ;
24126: LD_ADDR_VAR 0 9
24130: PUSH
24131: LD_VAR 0 2
24135: PUSH
24136: LD_VAR 0 4
24140: PLUS
24141: ST_TO_ADDR
// max_y := y + r ;
24142: LD_ADDR_VAR 0 10
24146: PUSH
24147: LD_VAR 0 3
24151: PUSH
24152: LD_VAR 0 4
24156: PLUS
24157: ST_TO_ADDR
// for _x = min_x to max_x do
24158: LD_ADDR_VAR 0 11
24162: PUSH
24163: DOUBLE
24164: LD_VAR 0 7
24168: DEC
24169: ST_TO_ADDR
24170: LD_VAR 0 9
24174: PUSH
24175: FOR_TO
24176: IFFALSE 24295
// for _y = min_y to max_y do
24178: LD_ADDR_VAR 0 12
24182: PUSH
24183: DOUBLE
24184: LD_VAR 0 8
24188: DEC
24189: ST_TO_ADDR
24190: LD_VAR 0 10
24194: PUSH
24195: FOR_TO
24196: IFFALSE 24291
// begin if not ValidHex ( _x , _y ) then
24198: LD_VAR 0 11
24202: PPUSH
24203: LD_VAR 0 12
24207: PPUSH
24208: CALL_OW 488
24212: NOT
24213: IFFALSE 24217
// continue ;
24215: GO 24195
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24217: LD_VAR 0 11
24221: PPUSH
24222: LD_VAR 0 12
24226: PPUSH
24227: CALL_OW 351
24231: IFFALSE 24249
24233: PUSH
24234: LD_VAR 0 11
24238: PPUSH
24239: LD_VAR 0 12
24243: PPUSH
24244: CALL_OW 554
24248: AND
24249: IFFALSE 24289
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24251: LD_ADDR_VAR 0 13
24255: PUSH
24256: LD_VAR 0 13
24260: PPUSH
24261: LD_VAR 0 13
24265: PUSH
24266: LD_INT 1
24268: PLUS
24269: PPUSH
24270: LD_VAR 0 11
24274: PUSH
24275: LD_VAR 0 12
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PPUSH
24284: CALL_OW 2
24288: ST_TO_ADDR
// end ;
24289: GO 24195
24291: POP
24292: POP
24293: GO 24175
24295: POP
24296: POP
// if not list then
24297: LD_VAR 0 13
24301: NOT
24302: IFFALSE 24306
// exit ;
24304: GO 24552
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24306: LD_ADDR_VAR 0 13
24310: PUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: LD_VAR 0 13
24320: PPUSH
24321: LD_INT 1
24323: PPUSH
24324: LD_INT 1
24326: PPUSH
24327: CALL 33394 0 4
24331: ST_TO_ADDR
// ComStop ( flame ) ;
24332: LD_VAR 0 1
24336: PPUSH
24337: CALL_OW 141
// for i in list do
24341: LD_ADDR_VAR 0 6
24345: PUSH
24346: LD_VAR 0 13
24350: PUSH
24351: FOR_IN
24352: IFFALSE 24383
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24354: LD_VAR 0 1
24358: PPUSH
24359: LD_VAR 0 6
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: LD_VAR 0 6
24372: PUSH
24373: LD_INT 2
24375: ARRAY
24376: PPUSH
24377: CALL_OW 176
24381: GO 24351
24383: POP
24384: POP
// repeat wait ( 0 0$1 ) ;
24385: LD_INT 35
24387: PPUSH
24388: CALL_OW 67
// task := GetTaskList ( flame ) ;
24392: LD_ADDR_VAR 0 14
24396: PUSH
24397: LD_VAR 0 1
24401: PPUSH
24402: CALL_OW 437
24406: ST_TO_ADDR
// if not task then
24407: LD_VAR 0 14
24411: NOT
24412: IFFALSE 24416
// exit ;
24414: GO 24552
// if task [ 1 ] [ 1 ] <> | then
24416: LD_VAR 0 14
24420: PUSH
24421: LD_INT 1
24423: ARRAY
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: PUSH
24429: LD_STRING |
24431: NONEQUAL
24432: IFFALSE 24436
// exit ;
24434: GO 24552
// _x := task [ 1 ] [ 2 ] ;
24436: LD_ADDR_VAR 0 11
24440: PUSH
24441: LD_VAR 0 14
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24454: LD_ADDR_VAR 0 12
24458: PUSH
24459: LD_VAR 0 14
24463: PUSH
24464: LD_INT 1
24466: ARRAY
24467: PUSH
24468: LD_INT 3
24470: ARRAY
24471: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24472: LD_VAR 0 11
24476: PPUSH
24477: LD_VAR 0 12
24481: PPUSH
24482: CALL_OW 351
24486: NOT
24487: IFTRUE 24506
24489: PUSH
24490: LD_VAR 0 11
24494: PPUSH
24495: LD_VAR 0 12
24499: PPUSH
24500: CALL_OW 554
24504: NOT
24505: OR
24506: IFFALSE 24540
// begin task := Delete ( task , 1 ) ;
24508: LD_ADDR_VAR 0 14
24512: PUSH
24513: LD_VAR 0 14
24517: PPUSH
24518: LD_INT 1
24520: PPUSH
24521: CALL_OW 3
24525: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24526: LD_VAR 0 1
24530: PPUSH
24531: LD_VAR 0 14
24535: PPUSH
24536: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24540: LD_VAR 0 1
24544: PPUSH
24545: CALL_OW 314
24549: NOT
24550: IFFALSE 24385
// end ;
24552: LD_VAR 0 5
24556: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24557: LD_EXP 60
24561: NOT
24562: IFFALSE 24612
24564: GO 24566
24566: DISABLE
// begin initHack := true ;
24567: LD_ADDR_EXP 60
24571: PUSH
24572: LD_INT 1
24574: ST_TO_ADDR
// hackTanks := [ ] ;
24575: LD_ADDR_EXP 61
24579: PUSH
24580: EMPTY
24581: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24582: LD_ADDR_EXP 62
24586: PUSH
24587: EMPTY
24588: ST_TO_ADDR
// hackLimit := 3 ;
24589: LD_ADDR_EXP 63
24593: PUSH
24594: LD_INT 3
24596: ST_TO_ADDR
// hackDist := 12 ;
24597: LD_ADDR_EXP 64
24601: PUSH
24602: LD_INT 12
24604: ST_TO_ADDR
// hackCounter := [ ] ;
24605: LD_ADDR_EXP 65
24609: PUSH
24610: EMPTY
24611: ST_TO_ADDR
// end ;
24612: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24613: LD_EXP 60
24617: IFFALSE 24635
24619: PUSH
24620: LD_INT 34
24622: PUSH
24623: LD_INT 99
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: AND
24635: IFFALSE 24888
24637: GO 24639
24639: DISABLE
24640: LD_INT 0
24642: PPUSH
24643: PPUSH
// begin enable ;
24644: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: LD_INT 34
24652: PUSH
24653: LD_INT 99
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PPUSH
24660: CALL_OW 69
24664: PUSH
24665: FOR_IN
24666: IFFALSE 24886
// begin if not i in hackTanks then
24668: LD_VAR 0 1
24672: PUSH
24673: LD_EXP 61
24677: IN
24678: NOT
24679: IFFALSE 24762
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24681: LD_ADDR_EXP 61
24685: PUSH
24686: LD_EXP 61
24690: PPUSH
24691: LD_EXP 61
24695: PUSH
24696: LD_INT 1
24698: PLUS
24699: PPUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 1
24709: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24710: LD_ADDR_EXP 62
24714: PUSH
24715: LD_EXP 62
24719: PPUSH
24720: LD_EXP 62
24724: PUSH
24725: LD_INT 1
24727: PLUS
24728: PPUSH
24729: EMPTY
24730: PPUSH
24731: CALL_OW 1
24735: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24736: LD_ADDR_EXP 65
24740: PUSH
24741: LD_EXP 65
24745: PPUSH
24746: LD_EXP 65
24750: PUSH
24751: LD_INT 1
24753: PLUS
24754: PPUSH
24755: EMPTY
24756: PPUSH
24757: CALL_OW 1
24761: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24762: LD_VAR 0 1
24766: PPUSH
24767: CALL_OW 302
24771: NOT
24772: IFFALSE 24785
// begin HackUnlinkAll ( i ) ;
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL 24891 0 1
// continue ;
24783: GO 24665
// end ; HackCheckCapturedStatus ( i ) ;
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL 25336 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24794: LD_ADDR_VAR 0 2
24798: PUSH
24799: LD_INT 81
24801: PUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 255
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 33
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 91
24828: PUSH
24829: LD_VAR 0 1
24833: PUSH
24834: LD_EXP 64
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 50
24846: PUSH
24847: EMPTY
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PPUSH
24856: CALL_OW 69
24860: ST_TO_ADDR
// if not tmp then
24861: LD_VAR 0 2
24865: NOT
24866: IFFALSE 24870
// continue ;
24868: GO 24665
// HackLink ( i , tmp ) ;
24870: LD_VAR 0 1
24874: PPUSH
24875: LD_VAR 0 2
24879: PPUSH
24880: CALL 25027 0 2
// end ;
24884: GO 24665
24886: POP
24887: POP
// end ;
24888: PPOPN 2
24890: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
// if not hack in hackTanks then
24896: LD_VAR 0 1
24900: PUSH
24901: LD_EXP 61
24905: IN
24906: NOT
24907: IFFALSE 24911
// exit ;
24909: GO 25022
// index := GetElementIndex ( hackTanks , hack ) ;
24911: LD_ADDR_VAR 0 4
24915: PUSH
24916: LD_EXP 61
24920: PPUSH
24921: LD_VAR 0 1
24925: PPUSH
24926: CALL 32689 0 2
24930: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24931: LD_EXP 62
24935: PUSH
24936: LD_VAR 0 4
24940: ARRAY
24941: IFFALSE 25022
// begin for i in hackTanksCaptured [ index ] do
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_EXP 62
24952: PUSH
24953: LD_VAR 0 4
24957: ARRAY
24958: PUSH
24959: FOR_IN
24960: IFFALSE 24986
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24962: LD_VAR 0 3
24966: PUSH
24967: LD_INT 1
24969: ARRAY
24970: PPUSH
24971: LD_VAR 0 3
24975: PUSH
24976: LD_INT 2
24978: ARRAY
24979: PPUSH
24980: CALL_OW 235
24984: GO 24959
24986: POP
24987: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24988: LD_ADDR_EXP 62
24992: PUSH
24993: LD_EXP 62
24997: PPUSH
24998: LD_VAR 0 4
25002: PPUSH
25003: EMPTY
25004: PPUSH
25005: CALL_OW 1
25009: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_INT 0
25017: PPUSH
25018: CALL_OW 505
// end ; end ;
25022: LD_VAR 0 2
25026: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25027: LD_INT 0
25029: PPUSH
25030: PPUSH
25031: PPUSH
// if not hack in hackTanks or not vehicles then
25032: LD_VAR 0 1
25036: PUSH
25037: LD_EXP 61
25041: IN
25042: NOT
25043: IFTRUE 25052
25045: PUSH
25046: LD_VAR 0 2
25050: NOT
25051: OR
25052: IFFALSE 25056
// exit ;
25054: GO 25331
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25056: LD_ADDR_VAR 0 2
25060: PUSH
25061: LD_VAR 0 1
25065: PPUSH
25066: LD_VAR 0 2
25070: PPUSH
25071: LD_INT 1
25073: PPUSH
25074: LD_INT 1
25076: PPUSH
25077: CALL 33341 0 4
25081: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25082: LD_ADDR_VAR 0 5
25086: PUSH
25087: LD_EXP 61
25091: PPUSH
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL 32689 0 2
25101: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25102: LD_EXP 62
25106: PUSH
25107: LD_VAR 0 5
25111: ARRAY
25112: PUSH
25113: LD_EXP 63
25117: LESS
25118: IFFALSE 25307
// begin for i := 1 to vehicles do
25120: LD_ADDR_VAR 0 4
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_VAR 0 2
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25305
// begin if hackTanksCaptured [ index ] = hackLimit then
25138: LD_EXP 62
25142: PUSH
25143: LD_VAR 0 5
25147: ARRAY
25148: PUSH
25149: LD_EXP 63
25153: EQUAL
25154: IFFALSE 25158
// break ;
25156: GO 25305
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25158: LD_ADDR_EXP 65
25162: PUSH
25163: LD_EXP 65
25167: PPUSH
25168: LD_VAR 0 5
25172: PPUSH
25173: LD_EXP 65
25177: PUSH
25178: LD_VAR 0 5
25182: ARRAY
25183: PUSH
25184: LD_INT 1
25186: PLUS
25187: PPUSH
25188: CALL_OW 1
25192: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25193: LD_ADDR_EXP 62
25197: PUSH
25198: LD_EXP 62
25202: PPUSH
25203: LD_VAR 0 5
25207: PUSH
25208: LD_EXP 62
25212: PUSH
25213: LD_VAR 0 5
25217: ARRAY
25218: PUSH
25219: LD_INT 1
25221: PLUS
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: LD_VAR 0 2
25231: PUSH
25232: LD_VAR 0 4
25236: ARRAY
25237: PUSH
25238: LD_VAR 0 2
25242: PUSH
25243: LD_VAR 0 4
25247: ARRAY
25248: PPUSH
25249: CALL_OW 255
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL 32906 0 3
25262: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25263: LD_VAR 0 2
25267: PUSH
25268: LD_VAR 0 4
25272: ARRAY
25273: PPUSH
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 255
25283: PPUSH
25284: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25288: LD_VAR 0 2
25292: PUSH
25293: LD_VAR 0 4
25297: ARRAY
25298: PPUSH
25299: CALL_OW 141
// end ;
25303: GO 25135
25305: POP
25306: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25307: LD_VAR 0 1
25311: PPUSH
25312: LD_EXP 62
25316: PUSH
25317: LD_VAR 0 5
25321: ARRAY
25322: PUSH
25323: LD_INT 0
25325: PLUS
25326: PPUSH
25327: CALL_OW 505
// end ;
25331: LD_VAR 0 3
25335: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
25340: PPUSH
25341: PPUSH
// if not hack in hackTanks then
25342: LD_VAR 0 1
25346: PUSH
25347: LD_EXP 61
25351: IN
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25601
// index := GetElementIndex ( hackTanks , hack ) ;
25357: LD_ADDR_VAR 0 4
25361: PUSH
25362: LD_EXP 61
25366: PPUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL 32689 0 2
25376: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: DOUBLE
25383: LD_EXP 62
25387: PUSH
25388: LD_VAR 0 4
25392: ARRAY
25393: INC
25394: ST_TO_ADDR
25395: LD_INT 1
25397: PUSH
25398: FOR_DOWNTO
25399: IFFALSE 25575
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_EXP 62
25410: PUSH
25411: LD_VAR 0 4
25415: ARRAY
25416: PUSH
25417: LD_VAR 0 3
25421: ARRAY
25422: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25423: LD_VAR 0 5
25427: PUSH
25428: LD_INT 1
25430: ARRAY
25431: PPUSH
25432: CALL_OW 302
25436: NOT
25437: IFTRUE 25465
25439: PUSH
25440: LD_VAR 0 5
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: CALL_OW 255
25453: PUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 255
25463: NONEQUAL
25464: OR
25465: IFFALSE 25573
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25467: LD_VAR 0 5
25471: PUSH
25472: LD_INT 1
25474: ARRAY
25475: PPUSH
25476: CALL_OW 305
25480: IFFALSE 25508
25482: PUSH
25483: LD_VAR 0 5
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: PPUSH
25492: CALL_OW 255
25496: PUSH
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 255
25506: EQUAL
25507: AND
25508: IFFALSE 25532
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25510: LD_VAR 0 5
25514: PUSH
25515: LD_INT 1
25517: ARRAY
25518: PPUSH
25519: LD_VAR 0 5
25523: PUSH
25524: LD_INT 2
25526: ARRAY
25527: PPUSH
25528: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25532: LD_ADDR_EXP 62
25536: PUSH
25537: LD_EXP 62
25541: PPUSH
25542: LD_VAR 0 4
25546: PPUSH
25547: LD_EXP 62
25551: PUSH
25552: LD_VAR 0 4
25556: ARRAY
25557: PPUSH
25558: LD_VAR 0 3
25562: PPUSH
25563: CALL_OW 3
25567: PPUSH
25568: CALL_OW 1
25572: ST_TO_ADDR
// end ; end ;
25573: GO 25398
25575: POP
25576: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25577: LD_VAR 0 1
25581: PPUSH
25582: LD_EXP 62
25586: PUSH
25587: LD_VAR 0 4
25591: ARRAY
25592: PUSH
25593: LD_INT 0
25595: PLUS
25596: PPUSH
25597: CALL_OW 505
// end ;
25601: LD_VAR 0 2
25605: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25606: LD_INT 0
25608: PPUSH
25609: PPUSH
25610: PPUSH
25611: PPUSH
// if not hack in hackTanks then
25612: LD_VAR 0 1
25616: PUSH
25617: LD_EXP 61
25621: IN
25622: NOT
25623: IFFALSE 25627
// exit ;
25625: GO 25712
// index := GetElementIndex ( hackTanks , hack ) ;
25627: LD_ADDR_VAR 0 5
25631: PUSH
25632: LD_EXP 61
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL 32689 0 2
25646: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25647: LD_ADDR_VAR 0 4
25651: PUSH
25652: DOUBLE
25653: LD_INT 1
25655: DEC
25656: ST_TO_ADDR
25657: LD_EXP 62
25661: PUSH
25662: LD_VAR 0 5
25666: ARRAY
25667: PUSH
25668: FOR_TO
25669: IFFALSE 25710
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25671: LD_EXP 62
25675: PUSH
25676: LD_VAR 0 5
25680: ARRAY
25681: PUSH
25682: LD_VAR 0 4
25686: ARRAY
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PUSH
25692: LD_VAR 0 2
25696: EQUAL
25697: IFFALSE 25708
// KillUnit ( vehicle ) ;
25699: LD_VAR 0 2
25703: PPUSH
25704: CALL_OW 66
25708: GO 25668
25710: POP
25711: POP
// end ;
25712: LD_VAR 0 3
25716: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25717: LD_EXP 66
25721: NOT
25722: IFFALSE 25757
25724: GO 25726
25726: DISABLE
// begin initMiner := true ;
25727: LD_ADDR_EXP 66
25731: PUSH
25732: LD_INT 1
25734: ST_TO_ADDR
// minersList := [ ] ;
25735: LD_ADDR_EXP 67
25739: PUSH
25740: EMPTY
25741: ST_TO_ADDR
// minerMinesList := [ ] ;
25742: LD_ADDR_EXP 68
25746: PUSH
25747: EMPTY
25748: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25749: LD_ADDR_EXP 69
25753: PUSH
25754: LD_INT 5
25756: ST_TO_ADDR
// end ;
25757: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25758: LD_EXP 66
25762: IFFALSE 25780
25764: PUSH
25765: LD_INT 34
25767: PUSH
25768: LD_INT 81
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 69
25779: AND
25780: IFFALSE 26243
25782: GO 25784
25784: DISABLE
25785: LD_INT 0
25787: PPUSH
25788: PPUSH
25789: PPUSH
25790: PPUSH
// begin enable ;
25791: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25792: LD_ADDR_VAR 0 1
25796: PUSH
25797: LD_INT 34
25799: PUSH
25800: LD_INT 81
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 69
25811: PUSH
25812: FOR_IN
25813: IFFALSE 25885
// begin if not i in minersList then
25815: LD_VAR 0 1
25819: PUSH
25820: LD_EXP 67
25824: IN
25825: NOT
25826: IFFALSE 25883
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25828: LD_ADDR_EXP 67
25832: PUSH
25833: LD_EXP 67
25837: PPUSH
25838: LD_EXP 67
25842: PUSH
25843: LD_INT 1
25845: PLUS
25846: PPUSH
25847: LD_VAR 0 1
25851: PPUSH
25852: CALL_OW 1
25856: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25857: LD_ADDR_EXP 68
25861: PUSH
25862: LD_EXP 68
25866: PPUSH
25867: LD_EXP 68
25871: PUSH
25872: LD_INT 1
25874: PLUS
25875: PPUSH
25876: EMPTY
25877: PPUSH
25878: CALL_OW 1
25882: ST_TO_ADDR
// end end ;
25883: GO 25812
25885: POP
25886: POP
// for i := minerMinesList downto 1 do
25887: LD_ADDR_VAR 0 1
25891: PUSH
25892: DOUBLE
25893: LD_EXP 68
25897: INC
25898: ST_TO_ADDR
25899: LD_INT 1
25901: PUSH
25902: FOR_DOWNTO
25903: IFFALSE 26241
// begin if IsLive ( minersList [ i ] ) then
25905: LD_EXP 67
25909: PUSH
25910: LD_VAR 0 1
25914: ARRAY
25915: PPUSH
25916: CALL_OW 300
25920: IFFALSE 25948
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25922: LD_EXP 67
25926: PUSH
25927: LD_VAR 0 1
25931: ARRAY
25932: PPUSH
25933: LD_EXP 68
25937: PUSH
25938: LD_VAR 0 1
25942: ARRAY
25943: PPUSH
25944: CALL_OW 505
// if not minerMinesList [ i ] then
25948: LD_EXP 68
25952: PUSH
25953: LD_VAR 0 1
25957: ARRAY
25958: NOT
25959: IFFALSE 25963
// continue ;
25961: GO 25902
// for j := minerMinesList [ i ] downto 1 do
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: DOUBLE
25969: LD_EXP 68
25973: PUSH
25974: LD_VAR 0 1
25978: ARRAY
25979: INC
25980: ST_TO_ADDR
25981: LD_INT 1
25983: PUSH
25984: FOR_DOWNTO
25985: IFFALSE 26237
// begin side := GetSide ( minersList [ i ] ) ;
25987: LD_ADDR_VAR 0 3
25991: PUSH
25992: LD_EXP 67
25996: PUSH
25997: LD_VAR 0 1
26001: ARRAY
26002: PPUSH
26003: CALL_OW 255
26007: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26008: LD_ADDR_VAR 0 4
26012: PUSH
26013: LD_EXP 68
26017: PUSH
26018: LD_VAR 0 1
26022: ARRAY
26023: PUSH
26024: LD_VAR 0 2
26028: ARRAY
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PPUSH
26034: LD_EXP 68
26038: PUSH
26039: LD_VAR 0 1
26043: ARRAY
26044: PUSH
26045: LD_VAR 0 2
26049: ARRAY
26050: PUSH
26051: LD_INT 2
26053: ARRAY
26054: PPUSH
26055: CALL_OW 428
26059: ST_TO_ADDR
// if not tmp then
26060: LD_VAR 0 4
26064: NOT
26065: IFFALSE 26069
// continue ;
26067: GO 25984
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26069: LD_VAR 0 4
26073: PUSH
26074: LD_INT 81
26076: PUSH
26077: LD_VAR 0 3
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 69
26090: IN
26091: IFFALSE 26141
26093: PUSH
26094: LD_EXP 68
26098: PUSH
26099: LD_VAR 0 1
26103: ARRAY
26104: PUSH
26105: LD_VAR 0 2
26109: ARRAY
26110: PUSH
26111: LD_INT 1
26113: ARRAY
26114: PPUSH
26115: LD_EXP 68
26119: PUSH
26120: LD_VAR 0 1
26124: ARRAY
26125: PUSH
26126: LD_VAR 0 2
26130: ARRAY
26131: PUSH
26132: LD_INT 2
26134: ARRAY
26135: PPUSH
26136: CALL_OW 458
26140: AND
26141: IFFALSE 26235
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26143: LD_EXP 68
26147: PUSH
26148: LD_VAR 0 1
26152: ARRAY
26153: PUSH
26154: LD_VAR 0 2
26158: ARRAY
26159: PUSH
26160: LD_INT 1
26162: ARRAY
26163: PPUSH
26164: LD_EXP 68
26168: PUSH
26169: LD_VAR 0 1
26173: ARRAY
26174: PUSH
26175: LD_VAR 0 2
26179: ARRAY
26180: PUSH
26181: LD_INT 2
26183: ARRAY
26184: PPUSH
26185: LD_VAR 0 3
26189: PPUSH
26190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26194: LD_ADDR_EXP 68
26198: PUSH
26199: LD_EXP 68
26203: PPUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: LD_EXP 68
26213: PUSH
26214: LD_VAR 0 1
26218: ARRAY
26219: PPUSH
26220: LD_VAR 0 2
26224: PPUSH
26225: CALL_OW 3
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
// end ; end ;
26235: GO 25984
26237: POP
26238: POP
// end ;
26239: GO 25902
26241: POP
26242: POP
// end ;
26243: PPOPN 4
26245: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
// result := false ;
26250: LD_ADDR_VAR 0 4
26254: PUSH
26255: LD_INT 0
26257: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 264
26267: PUSH
26268: LD_INT 81
26270: EQUAL
26271: NOT
26272: IFFALSE 26276
// exit ;
26274: GO 26520
// index := GetElementIndex ( minersList , unit ) ;
26276: LD_ADDR_VAR 0 5
26280: PUSH
26281: LD_EXP 67
26285: PPUSH
26286: LD_VAR 0 1
26290: PPUSH
26291: CALL 32689 0 2
26295: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26296: LD_EXP 68
26300: PUSH
26301: LD_VAR 0 5
26305: ARRAY
26306: PUSH
26307: LD_EXP 69
26311: GREATEREQUAL
26312: IFFALSE 26316
// exit ;
26314: GO 26520
// ComMoveXY ( unit , x , y ) ;
26316: LD_VAR 0 1
26320: PPUSH
26321: LD_VAR 0 2
26325: PPUSH
26326: LD_VAR 0 3
26330: PPUSH
26331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26335: LD_INT 35
26337: PPUSH
26338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26342: LD_VAR 0 1
26346: PPUSH
26347: LD_VAR 0 2
26351: PPUSH
26352: LD_VAR 0 3
26356: PPUSH
26357: CALL 64735 0 3
26361: NOT
26362: IFFALSE 26375
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 314
26374: AND
26375: IFFALSE 26379
// exit ;
26377: GO 26520
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: CALL_OW 428
26393: PUSH
26394: LD_VAR 0 1
26398: EQUAL
26399: IFFALSE 26413
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 314
26411: NOT
26412: AND
26413: IFFALSE 26335
// PlaySoundXY ( x , y , PlantMine ) ;
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 3
26424: PPUSH
26425: LD_STRING PlantMine
26427: PPUSH
26428: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26432: LD_VAR 0 2
26436: PPUSH
26437: LD_VAR 0 3
26441: PPUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL_OW 255
26451: PPUSH
26452: LD_INT 0
26454: PPUSH
26455: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26459: LD_ADDR_EXP 68
26463: PUSH
26464: LD_EXP 68
26468: PPUSH
26469: LD_VAR 0 5
26473: PUSH
26474: LD_EXP 68
26478: PUSH
26479: LD_VAR 0 5
26483: ARRAY
26484: PUSH
26485: LD_INT 1
26487: PLUS
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PPUSH
26493: LD_VAR 0 2
26497: PUSH
26498: LD_VAR 0 3
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PPUSH
26507: CALL 32906 0 3
26511: ST_TO_ADDR
// result := true ;
26512: LD_ADDR_VAR 0 4
26516: PUSH
26517: LD_INT 1
26519: ST_TO_ADDR
// end ;
26520: LD_VAR 0 4
26524: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26525: LD_INT 0
26527: PPUSH
26528: PPUSH
26529: PPUSH
// if not unit in minersList then
26530: LD_VAR 0 1
26534: PUSH
26535: LD_EXP 67
26539: IN
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26939
// index := GetElementIndex ( minersList , unit ) ;
26545: LD_ADDR_VAR 0 6
26549: PUSH
26550: LD_EXP 67
26554: PPUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL 32689 0 2
26564: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26565: LD_ADDR_VAR 0 5
26569: PUSH
26570: DOUBLE
26571: LD_EXP 68
26575: PUSH
26576: LD_VAR 0 6
26580: ARRAY
26581: INC
26582: ST_TO_ADDR
26583: LD_INT 1
26585: PUSH
26586: FOR_DOWNTO
26587: IFFALSE 26750
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26589: LD_EXP 68
26593: PUSH
26594: LD_VAR 0 6
26598: ARRAY
26599: PUSH
26600: LD_VAR 0 5
26604: ARRAY
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: PUSH
26610: LD_VAR 0 2
26614: EQUAL
26615: IFFALSE 26645
26617: PUSH
26618: LD_EXP 68
26622: PUSH
26623: LD_VAR 0 6
26627: ARRAY
26628: PUSH
26629: LD_VAR 0 5
26633: ARRAY
26634: PUSH
26635: LD_INT 2
26637: ARRAY
26638: PUSH
26639: LD_VAR 0 3
26643: EQUAL
26644: AND
26645: IFFALSE 26748
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26647: LD_EXP 68
26651: PUSH
26652: LD_VAR 0 6
26656: ARRAY
26657: PUSH
26658: LD_VAR 0 5
26662: ARRAY
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_EXP 68
26672: PUSH
26673: LD_VAR 0 6
26677: ARRAY
26678: PUSH
26679: LD_VAR 0 5
26683: ARRAY
26684: PUSH
26685: LD_INT 2
26687: ARRAY
26688: PPUSH
26689: LD_VAR 0 1
26693: PPUSH
26694: CALL_OW 255
26698: PPUSH
26699: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26703: LD_ADDR_EXP 68
26707: PUSH
26708: LD_EXP 68
26712: PPUSH
26713: LD_VAR 0 6
26717: PPUSH
26718: LD_EXP 68
26722: PUSH
26723: LD_VAR 0 6
26727: ARRAY
26728: PPUSH
26729: LD_VAR 0 5
26733: PPUSH
26734: CALL_OW 3
26738: PPUSH
26739: CALL_OW 1
26743: ST_TO_ADDR
// exit ;
26744: POP
26745: POP
26746: GO 26939
// end ; end ;
26748: GO 26586
26750: POP
26751: POP
// for i := minerMinesList [ index ] downto 1 do
26752: LD_ADDR_VAR 0 5
26756: PUSH
26757: DOUBLE
26758: LD_EXP 68
26762: PUSH
26763: LD_VAR 0 6
26767: ARRAY
26768: INC
26769: ST_TO_ADDR
26770: LD_INT 1
26772: PUSH
26773: FOR_DOWNTO
26774: IFFALSE 26937
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26776: LD_EXP 68
26780: PUSH
26781: LD_VAR 0 6
26785: ARRAY
26786: PUSH
26787: LD_VAR 0 5
26791: ARRAY
26792: PUSH
26793: LD_INT 1
26795: ARRAY
26796: PPUSH
26797: LD_EXP 68
26801: PUSH
26802: LD_VAR 0 6
26806: ARRAY
26807: PUSH
26808: LD_VAR 0 5
26812: ARRAY
26813: PUSH
26814: LD_INT 2
26816: ARRAY
26817: PPUSH
26818: LD_VAR 0 2
26822: PPUSH
26823: LD_VAR 0 3
26827: PPUSH
26828: CALL_OW 298
26832: PUSH
26833: LD_INT 6
26835: LESS
26836: IFFALSE 26935
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26838: LD_EXP 68
26842: PUSH
26843: LD_VAR 0 6
26847: ARRAY
26848: PUSH
26849: LD_VAR 0 5
26853: ARRAY
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: LD_EXP 68
26863: PUSH
26864: LD_VAR 0 6
26868: ARRAY
26869: PUSH
26870: LD_VAR 0 5
26874: ARRAY
26875: PUSH
26876: LD_INT 2
26878: ARRAY
26879: PPUSH
26880: LD_VAR 0 1
26884: PPUSH
26885: CALL_OW 255
26889: PPUSH
26890: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26894: LD_ADDR_EXP 68
26898: PUSH
26899: LD_EXP 68
26903: PPUSH
26904: LD_VAR 0 6
26908: PPUSH
26909: LD_EXP 68
26913: PUSH
26914: LD_VAR 0 6
26918: ARRAY
26919: PPUSH
26920: LD_VAR 0 5
26924: PPUSH
26925: CALL_OW 3
26929: PPUSH
26930: CALL_OW 1
26934: ST_TO_ADDR
// end ; end ;
26935: GO 26773
26937: POP
26938: POP
// end ;
26939: LD_VAR 0 4
26943: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26944: LD_INT 0
26946: PPUSH
26947: PPUSH
26948: PPUSH
26949: PPUSH
26950: PPUSH
26951: PPUSH
26952: PPUSH
26953: PPUSH
26954: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26955: LD_VAR 0 1
26959: PPUSH
26960: CALL_OW 264
26964: PUSH
26965: LD_INT 81
26967: EQUAL
26968: NOT
26969: IFTRUE 26984
26971: PUSH
26972: LD_VAR 0 1
26976: PUSH
26977: LD_EXP 67
26981: IN
26982: NOT
26983: OR
26984: IFFALSE 26988
// exit ;
26986: GO 27314
// index := GetElementIndex ( minersList , unit ) ;
26988: LD_ADDR_VAR 0 6
26992: PUSH
26993: LD_EXP 67
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL 32689 0 2
27007: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_EXP 69
27017: PUSH
27018: LD_EXP 68
27022: PUSH
27023: LD_VAR 0 6
27027: ARRAY
27028: MINUS
27029: ST_TO_ADDR
// if not minesFreeAmount then
27030: LD_VAR 0 8
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27314
// tmp := [ ] ;
27039: LD_ADDR_VAR 0 7
27043: PUSH
27044: EMPTY
27045: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27046: LD_ADDR_VAR 0 5
27050: PUSH
27051: DOUBLE
27052: LD_INT 1
27054: DEC
27055: ST_TO_ADDR
27056: LD_VAR 0 8
27060: PUSH
27061: FOR_TO
27062: IFFALSE 27261
// begin _d := rand ( 0 , 5 ) ;
27064: LD_ADDR_VAR 0 11
27068: PUSH
27069: LD_INT 0
27071: PPUSH
27072: LD_INT 5
27074: PPUSH
27075: CALL_OW 12
27079: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27080: LD_ADDR_VAR 0 12
27084: PUSH
27085: LD_INT 2
27087: PPUSH
27088: LD_INT 6
27090: PPUSH
27091: CALL_OW 12
27095: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27096: LD_ADDR_VAR 0 9
27100: PUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 11
27110: PPUSH
27111: LD_VAR 0 12
27115: PPUSH
27116: CALL_OW 272
27120: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27121: LD_ADDR_VAR 0 10
27125: PUSH
27126: LD_VAR 0 3
27130: PPUSH
27131: LD_VAR 0 11
27135: PPUSH
27136: LD_VAR 0 12
27140: PPUSH
27141: CALL_OW 273
27145: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27146: LD_VAR 0 9
27150: PPUSH
27151: LD_VAR 0 10
27155: PPUSH
27156: CALL_OW 488
27160: IFFALSE 27184
27162: PUSH
27163: LD_VAR 0 9
27167: PUSH
27168: LD_VAR 0 10
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_VAR 0 7
27181: IN
27182: NOT
27183: AND
27184: IFFALSE 27203
27186: PUSH
27187: LD_VAR 0 9
27191: PPUSH
27192: LD_VAR 0 10
27196: PPUSH
27197: CALL_OW 458
27201: NOT
27202: AND
27203: IFFALSE 27245
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27205: LD_ADDR_VAR 0 7
27209: PUSH
27210: LD_VAR 0 7
27214: PPUSH
27215: LD_VAR 0 7
27219: PUSH
27220: LD_INT 1
27222: PLUS
27223: PPUSH
27224: LD_VAR 0 9
27228: PUSH
27229: LD_VAR 0 10
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PPUSH
27238: CALL_OW 1
27242: ST_TO_ADDR
27243: GO 27259
// i := i - 1 ;
27245: LD_ADDR_VAR 0 5
27249: PUSH
27250: LD_VAR 0 5
27254: PUSH
27255: LD_INT 1
27257: MINUS
27258: ST_TO_ADDR
// end ;
27259: GO 27061
27261: POP
27262: POP
// for i in tmp do
27263: LD_ADDR_VAR 0 5
27267: PUSH
27268: LD_VAR 0 7
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27312
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27276: LD_VAR 0 1
27280: PPUSH
27281: LD_VAR 0 5
27285: PUSH
27286: LD_INT 1
27288: ARRAY
27289: PPUSH
27290: LD_VAR 0 5
27294: PUSH
27295: LD_INT 2
27297: ARRAY
27298: PPUSH
27299: CALL 26246 0 3
27303: NOT
27304: IFFALSE 27310
// exit ;
27306: POP
27307: POP
27308: GO 27314
27310: GO 27273
27312: POP
27313: POP
// end ;
27314: LD_VAR 0 4
27318: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
27319: LD_INT 0
27321: PPUSH
27322: PPUSH
27323: PPUSH
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
// if GetClass ( unit ) <> class_sniper then
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 257
27339: PUSH
27340: LD_INT 5
27342: NONEQUAL
27343: IFFALSE 27347
// exit ;
27345: GO 27817
// dist := 8 ;
27347: LD_ADDR_VAR 0 5
27351: PUSH
27352: LD_INT 8
27354: ST_TO_ADDR
// viewRange := 12 ;
27355: LD_ADDR_VAR 0 8
27359: PUSH
27360: LD_INT 12
27362: ST_TO_ADDR
// side := GetSide ( unit ) ;
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 255
27377: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27378: LD_INT 61
27380: PPUSH
27381: LD_VAR 0 6
27385: PPUSH
27386: CALL_OW 321
27390: PUSH
27391: LD_INT 2
27393: EQUAL
27394: IFFALSE 27404
// viewRange := 16 ;
27396: LD_ADDR_VAR 0 8
27400: PUSH
27401: LD_INT 16
27403: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 3
27418: PPUSH
27419: CALL_OW 297
27423: PUSH
27424: LD_VAR 0 5
27428: GREATER
27429: IFFALSE 27508
// begin ComMoveXY ( unit , x , y ) ;
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_VAR 0 2
27440: PPUSH
27441: LD_VAR 0 3
27445: PPUSH
27446: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27450: LD_INT 35
27452: PPUSH
27453: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27457: LD_VAR 0 1
27461: PPUSH
27462: LD_VAR 0 2
27466: PPUSH
27467: LD_VAR 0 3
27471: PPUSH
27472: CALL 64735 0 3
27476: NOT
27477: IFFALSE 27481
// exit ;
27479: GO 27817
// until GetDistUnitXY ( unit , x , y ) < dist ;
27481: LD_VAR 0 1
27485: PPUSH
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_VAR 0 3
27495: PPUSH
27496: CALL_OW 297
27500: PUSH
27501: LD_VAR 0 5
27505: LESS
27506: IFFALSE 27450
// end ; ComTurnXY ( unit , x , y ) ;
27508: LD_VAR 0 1
27512: PPUSH
27513: LD_VAR 0 2
27517: PPUSH
27518: LD_VAR 0 3
27522: PPUSH
27523: CALL_OW 118
// repeat if Multiplayer then
27527: LD_OWVAR 4
27531: IFFALSE 27542
// wait ( 35 ) else
27533: LD_INT 35
27535: PPUSH
27536: CALL_OW 67
27540: GO 27549
// wait ( 5 ) ;
27542: LD_INT 5
27544: PPUSH
27545: CALL_OW 67
// _d := GetDir ( unit ) ;
27549: LD_ADDR_VAR 0 11
27553: PUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 254
27563: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27564: LD_ADDR_VAR 0 7
27568: PUSH
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 250
27578: PPUSH
27579: LD_VAR 0 1
27583: PPUSH
27584: CALL_OW 251
27588: PPUSH
27589: LD_VAR 0 2
27593: PPUSH
27594: LD_VAR 0 3
27598: PPUSH
27599: CALL 67371 0 4
27603: ST_TO_ADDR
// until dir = _d ;
27604: LD_VAR 0 7
27608: PUSH
27609: LD_VAR 0 11
27613: EQUAL
27614: IFFALSE 27527
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27616: LD_ADDR_VAR 0 9
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 250
27630: PPUSH
27631: LD_VAR 0 7
27635: PPUSH
27636: LD_VAR 0 5
27640: PPUSH
27641: CALL_OW 272
27645: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27646: LD_ADDR_VAR 0 10
27650: PUSH
27651: LD_VAR 0 1
27655: PPUSH
27656: CALL_OW 251
27660: PPUSH
27661: LD_VAR 0 7
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: CALL_OW 273
27675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27676: LD_VAR 0 9
27680: PPUSH
27681: LD_VAR 0 10
27685: PPUSH
27686: CALL_OW 488
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 27817
// ComAnimCustom ( unit , 1 ) ;
27695: LD_VAR 0 1
27699: PPUSH
27700: LD_INT 1
27702: PPUSH
27703: CALL_OW 592
// p := 0 ;
27707: LD_ADDR_VAR 0 12
27711: PUSH
27712: LD_INT 0
27714: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27715: LD_VAR 0 9
27719: PPUSH
27720: LD_VAR 0 10
27724: PPUSH
27725: LD_VAR 0 6
27729: PPUSH
27730: LD_VAR 0 8
27734: PPUSH
27735: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27739: LD_INT 35
27741: PPUSH
27742: CALL_OW 67
// p := Inc ( p ) ;
27746: LD_ADDR_VAR 0 12
27750: PUSH
27751: LD_VAR 0 12
27755: PPUSH
27756: CALL 67327 0 1
27760: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27761: LD_VAR 0 12
27765: PUSH
27766: LD_INT 3
27768: EQUAL
27769: IFTRUE 27783
27771: PUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: CALL_OW 302
27781: NOT
27782: OR
27783: IFTRUE 27796
27785: PUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 301
27795: OR
27796: IFFALSE 27739
// RemoveSeeing ( _x , _y , side ) ;
27798: LD_VAR 0 9
27802: PPUSH
27803: LD_VAR 0 10
27807: PPUSH
27808: LD_VAR 0 6
27812: PPUSH
27813: CALL_OW 331
// end ; end_of_file
27817: LD_VAR 0 4
27821: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27822: LD_INT 0
27824: PPUSH
27825: PPUSH
// if exist_mode then
27826: LD_VAR 0 2
27830: IFFALSE 27876
// begin unit := CreateCharacter ( prefix & ident ) ;
27832: LD_ADDR_VAR 0 5
27836: PUSH
27837: LD_VAR 0 3
27841: PUSH
27842: LD_VAR 0 1
27846: STR
27847: PPUSH
27848: CALL_OW 34
27852: ST_TO_ADDR
// if unit then
27853: LD_VAR 0 5
27857: IFFALSE 27874
// DeleteCharacters ( prefix & ident ) ;
27859: LD_VAR 0 3
27863: PUSH
27864: LD_VAR 0 1
27868: STR
27869: PPUSH
27870: CALL_OW 40
// end else
27874: GO 27891
// unit := NewCharacter ( ident ) ;
27876: LD_ADDR_VAR 0 5
27880: PUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL_OW 25
27890: ST_TO_ADDR
// result := unit ;
27891: LD_ADDR_VAR 0 4
27895: PUSH
27896: LD_VAR 0 5
27900: ST_TO_ADDR
// end ;
27901: LD_VAR 0 4
27905: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
// if exist_mode then
27910: LD_VAR 0 2
27914: IFFALSE 27939
// unit := CreateCharacter ( prefix & ident ) else
27916: LD_ADDR_VAR 0 5
27920: PUSH
27921: LD_VAR 0 3
27925: PUSH
27926: LD_VAR 0 1
27930: STR
27931: PPUSH
27932: CALL_OW 34
27936: ST_TO_ADDR
27937: GO 27954
// unit := NewCharacter ( ident ) ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_VAR 0 1
27948: PPUSH
27949: CALL_OW 25
27953: ST_TO_ADDR
// result := unit ;
27954: LD_ADDR_VAR 0 4
27958: PUSH
27959: LD_VAR 0 5
27963: ST_TO_ADDR
// end ;
27964: LD_VAR 0 4
27968: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27969: LD_INT 0
27971: PPUSH
27972: PPUSH
// if not side or not nation then
27973: LD_VAR 0 1
27977: NOT
27978: IFTRUE 27987
27980: PUSH
27981: LD_VAR 0 2
27985: NOT
27986: OR
27987: IFFALSE 27991
// exit ;
27989: GO 28761
// case nation of nation_american :
27991: LD_VAR 0 2
27995: PUSH
27996: LD_INT 1
27998: DOUBLE
27999: EQUAL
28000: IFTRUE 28004
28002: GO 28218
28004: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28005: LD_ADDR_VAR 0 4
28009: PUSH
28010: LD_INT 35
28012: PUSH
28013: LD_INT 45
28015: PUSH
28016: LD_INT 46
28018: PUSH
28019: LD_INT 47
28021: PUSH
28022: LD_INT 82
28024: PUSH
28025: LD_INT 83
28027: PUSH
28028: LD_INT 84
28030: PUSH
28031: LD_INT 85
28033: PUSH
28034: LD_INT 86
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 6
28045: PUSH
28046: LD_INT 15
28048: PUSH
28049: LD_INT 16
28051: PUSH
28052: LD_INT 7
28054: PUSH
28055: LD_INT 12
28057: PUSH
28058: LD_INT 13
28060: PUSH
28061: LD_INT 10
28063: PUSH
28064: LD_INT 14
28066: PUSH
28067: LD_INT 20
28069: PUSH
28070: LD_INT 21
28072: PUSH
28073: LD_INT 22
28075: PUSH
28076: LD_INT 25
28078: PUSH
28079: LD_INT 32
28081: PUSH
28082: LD_INT 27
28084: PUSH
28085: LD_INT 36
28087: PUSH
28088: LD_INT 69
28090: PUSH
28091: LD_INT 39
28093: PUSH
28094: LD_INT 34
28096: PUSH
28097: LD_INT 40
28099: PUSH
28100: LD_INT 48
28102: PUSH
28103: LD_INT 49
28105: PUSH
28106: LD_INT 50
28108: PUSH
28109: LD_INT 51
28111: PUSH
28112: LD_INT 52
28114: PUSH
28115: LD_INT 53
28117: PUSH
28118: LD_INT 54
28120: PUSH
28121: LD_INT 55
28123: PUSH
28124: LD_INT 56
28126: PUSH
28127: LD_INT 57
28129: PUSH
28130: LD_INT 58
28132: PUSH
28133: LD_INT 59
28135: PUSH
28136: LD_INT 60
28138: PUSH
28139: LD_INT 61
28141: PUSH
28142: LD_INT 62
28144: PUSH
28145: LD_INT 80
28147: PUSH
28148: LD_INT 82
28150: PUSH
28151: LD_INT 83
28153: PUSH
28154: LD_INT 84
28156: PUSH
28157: LD_INT 85
28159: PUSH
28160: LD_INT 86
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: ST_TO_ADDR
28216: GO 28683
28218: LD_INT 2
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28452
28226: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28227: LD_ADDR_VAR 0 4
28231: PUSH
28232: LD_INT 35
28234: PUSH
28235: LD_INT 45
28237: PUSH
28238: LD_INT 46
28240: PUSH
28241: LD_INT 47
28243: PUSH
28244: LD_INT 82
28246: PUSH
28247: LD_INT 83
28249: PUSH
28250: LD_INT 84
28252: PUSH
28253: LD_INT 85
28255: PUSH
28256: LD_INT 87
28258: PUSH
28259: LD_INT 70
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 11
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 4
28273: PUSH
28274: LD_INT 5
28276: PUSH
28277: LD_INT 6
28279: PUSH
28280: LD_INT 15
28282: PUSH
28283: LD_INT 18
28285: PUSH
28286: LD_INT 7
28288: PUSH
28289: LD_INT 17
28291: PUSH
28292: LD_INT 8
28294: PUSH
28295: LD_INT 20
28297: PUSH
28298: LD_INT 21
28300: PUSH
28301: LD_INT 22
28303: PUSH
28304: LD_INT 72
28306: PUSH
28307: LD_INT 26
28309: PUSH
28310: LD_INT 69
28312: PUSH
28313: LD_INT 39
28315: PUSH
28316: LD_INT 40
28318: PUSH
28319: LD_INT 41
28321: PUSH
28322: LD_INT 42
28324: PUSH
28325: LD_INT 43
28327: PUSH
28328: LD_INT 48
28330: PUSH
28331: LD_INT 49
28333: PUSH
28334: LD_INT 50
28336: PUSH
28337: LD_INT 51
28339: PUSH
28340: LD_INT 52
28342: PUSH
28343: LD_INT 53
28345: PUSH
28346: LD_INT 54
28348: PUSH
28349: LD_INT 55
28351: PUSH
28352: LD_INT 56
28354: PUSH
28355: LD_INT 60
28357: PUSH
28358: LD_INT 61
28360: PUSH
28361: LD_INT 62
28363: PUSH
28364: LD_INT 66
28366: PUSH
28367: LD_INT 67
28369: PUSH
28370: LD_INT 68
28372: PUSH
28373: LD_INT 81
28375: PUSH
28376: LD_INT 82
28378: PUSH
28379: LD_INT 83
28381: PUSH
28382: LD_INT 84
28384: PUSH
28385: LD_INT 85
28387: PUSH
28388: LD_INT 87
28390: PUSH
28391: LD_INT 88
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
28450: GO 28683
28452: LD_INT 3
28454: DOUBLE
28455: EQUAL
28456: IFTRUE 28460
28458: GO 28682
28460: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28461: LD_ADDR_VAR 0 4
28465: PUSH
28466: LD_INT 46
28468: PUSH
28469: LD_INT 47
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: LD_INT 82
28480: PUSH
28481: LD_INT 83
28483: PUSH
28484: LD_INT 84
28486: PUSH
28487: LD_INT 85
28489: PUSH
28490: LD_INT 86
28492: PUSH
28493: LD_INT 11
28495: PUSH
28496: LD_INT 9
28498: PUSH
28499: LD_INT 20
28501: PUSH
28502: LD_INT 19
28504: PUSH
28505: LD_INT 21
28507: PUSH
28508: LD_INT 24
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_INT 25
28516: PUSH
28517: LD_INT 28
28519: PUSH
28520: LD_INT 29
28522: PUSH
28523: LD_INT 30
28525: PUSH
28526: LD_INT 31
28528: PUSH
28529: LD_INT 37
28531: PUSH
28532: LD_INT 38
28534: PUSH
28535: LD_INT 32
28537: PUSH
28538: LD_INT 27
28540: PUSH
28541: LD_INT 33
28543: PUSH
28544: LD_INT 69
28546: PUSH
28547: LD_INT 39
28549: PUSH
28550: LD_INT 34
28552: PUSH
28553: LD_INT 40
28555: PUSH
28556: LD_INT 71
28558: PUSH
28559: LD_INT 23
28561: PUSH
28562: LD_INT 44
28564: PUSH
28565: LD_INT 48
28567: PUSH
28568: LD_INT 49
28570: PUSH
28571: LD_INT 50
28573: PUSH
28574: LD_INT 51
28576: PUSH
28577: LD_INT 52
28579: PUSH
28580: LD_INT 53
28582: PUSH
28583: LD_INT 54
28585: PUSH
28586: LD_INT 55
28588: PUSH
28589: LD_INT 56
28591: PUSH
28592: LD_INT 57
28594: PUSH
28595: LD_INT 58
28597: PUSH
28598: LD_INT 59
28600: PUSH
28601: LD_INT 63
28603: PUSH
28604: LD_INT 64
28606: PUSH
28607: LD_INT 65
28609: PUSH
28610: LD_INT 82
28612: PUSH
28613: LD_INT 83
28615: PUSH
28616: LD_INT 84
28618: PUSH
28619: LD_INT 85
28621: PUSH
28622: LD_INT 86
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: ST_TO_ADDR
28680: GO 28683
28682: POP
// if state > - 1 and state < 3 then
28683: LD_VAR 0 3
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: GREATER
28692: IFFALSE 28704
28694: PUSH
28695: LD_VAR 0 3
28699: PUSH
28700: LD_INT 3
28702: LESS
28703: AND
28704: IFFALSE 28761
// for i in result do
28706: LD_ADDR_VAR 0 5
28710: PUSH
28711: LD_VAR 0 4
28715: PUSH
28716: FOR_IN
28717: IFFALSE 28759
// if GetTech ( i , side ) <> state then
28719: LD_VAR 0 5
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 321
28733: PUSH
28734: LD_VAR 0 3
28738: NONEQUAL
28739: IFFALSE 28757
// result := result diff i ;
28741: LD_ADDR_VAR 0 4
28745: PUSH
28746: LD_VAR 0 4
28750: PUSH
28751: LD_VAR 0 5
28755: DIFF
28756: ST_TO_ADDR
28757: GO 28716
28759: POP
28760: POP
// end ;
28761: LD_VAR 0 4
28765: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28766: LD_INT 0
28768: PPUSH
28769: PPUSH
28770: PPUSH
// result := true ;
28771: LD_ADDR_VAR 0 3
28775: PUSH
28776: LD_INT 1
28778: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28779: LD_ADDR_VAR 0 5
28783: PUSH
28784: LD_VAR 0 2
28788: PPUSH
28789: CALL_OW 480
28793: ST_TO_ADDR
// if not tmp then
28794: LD_VAR 0 5
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 28852
// for i in tmp do
28803: LD_ADDR_VAR 0 4
28807: PUSH
28808: LD_VAR 0 5
28812: PUSH
28813: FOR_IN
28814: IFFALSE 28850
// if GetTech ( i , side ) <> state_researched then
28816: LD_VAR 0 4
28820: PPUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 321
28830: PUSH
28831: LD_INT 2
28833: NONEQUAL
28834: IFFALSE 28848
// begin result := false ;
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: LD_INT 0
28843: ST_TO_ADDR
// exit ;
28844: POP
28845: POP
28846: GO 28852
// end ;
28848: GO 28813
28850: POP
28851: POP
// end ;
28852: LD_VAR 0 3
28856: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28857: LD_INT 0
28859: PPUSH
28860: PPUSH
28861: PPUSH
28862: PPUSH
28863: PPUSH
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28872: LD_VAR 0 1
28876: NOT
28877: IFTRUE 28894
28879: PUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 257
28889: PUSH
28890: LD_INT 9
28892: NONEQUAL
28893: OR
28894: IFFALSE 28898
// exit ;
28896: GO 29477
// side := GetSide ( unit ) ;
28898: LD_ADDR_VAR 0 9
28902: PUSH
28903: LD_VAR 0 1
28907: PPUSH
28908: CALL_OW 255
28912: ST_TO_ADDR
// tech_space := tech_spacanom ;
28913: LD_ADDR_VAR 0 12
28917: PUSH
28918: LD_INT 29
28920: ST_TO_ADDR
// tech_time := tech_taurad ;
28921: LD_ADDR_VAR 0 13
28925: PUSH
28926: LD_INT 28
28928: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28929: LD_ADDR_VAR 0 11
28933: PUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 310
28943: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28944: LD_VAR 0 11
28948: PPUSH
28949: CALL_OW 247
28953: PUSH
28954: LD_INT 2
28956: EQUAL
28957: IFFALSE 28961
// exit ;
28959: GO 29477
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28961: LD_ADDR_VAR 0 8
28965: PUSH
28966: LD_INT 81
28968: PUSH
28969: LD_VAR 0 9
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: LD_INT 21
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: ST_TO_ADDR
// if not tmp then
29004: LD_VAR 0 8
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 29477
// if in_unit then
29013: LD_VAR 0 11
29017: IFFALSE 29041
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29019: LD_ADDR_VAR 0 10
29023: PUSH
29024: LD_VAR 0 8
29028: PPUSH
29029: LD_VAR 0 11
29033: PPUSH
29034: CALL_OW 74
29038: ST_TO_ADDR
29039: GO 29061
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29041: LD_ADDR_VAR 0 10
29045: PUSH
29046: LD_VAR 0 8
29050: PPUSH
29051: LD_VAR 0 1
29055: PPUSH
29056: CALL_OW 74
29060: ST_TO_ADDR
// if not enemy then
29061: LD_VAR 0 10
29065: NOT
29066: IFFALSE 29070
// exit ;
29068: GO 29477
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29070: LD_VAR 0 11
29074: IFFALSE 29096
29076: PUSH
29077: LD_VAR 0 11
29081: PPUSH
29082: LD_VAR 0 10
29086: PPUSH
29087: CALL_OW 296
29091: PUSH
29092: LD_INT 13
29094: GREATER
29095: AND
29096: IFTRUE 29118
29098: PUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: LD_VAR 0 10
29108: PPUSH
29109: CALL_OW 296
29113: PUSH
29114: LD_INT 12
29116: GREATER
29117: OR
29118: IFFALSE 29122
// exit ;
29120: GO 29477
// missile := [ 1 ] ;
29122: LD_ADDR_VAR 0 14
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29133: LD_VAR 0 9
29137: PPUSH
29138: LD_VAR 0 12
29142: PPUSH
29143: CALL_OW 325
29147: IFFALSE 29176
// missile := Replace ( missile , missile + 1 , 2 ) ;
29149: LD_ADDR_VAR 0 14
29153: PUSH
29154: LD_VAR 0 14
29158: PPUSH
29159: LD_VAR 0 14
29163: PUSH
29164: LD_INT 1
29166: PLUS
29167: PPUSH
29168: LD_INT 2
29170: PPUSH
29171: CALL_OW 1
29175: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29176: LD_VAR 0 9
29180: PPUSH
29181: LD_VAR 0 13
29185: PPUSH
29186: CALL_OW 325
29190: IFFALSE 29214
29192: PUSH
29193: LD_VAR 0 10
29197: PPUSH
29198: CALL_OW 255
29202: PPUSH
29203: LD_VAR 0 13
29207: PPUSH
29208: CALL_OW 325
29212: NOT
29213: AND
29214: IFFALSE 29243
// missile := Replace ( missile , missile + 1 , 3 ) ;
29216: LD_ADDR_VAR 0 14
29220: PUSH
29221: LD_VAR 0 14
29225: PPUSH
29226: LD_VAR 0 14
29230: PUSH
29231: LD_INT 1
29233: PLUS
29234: PPUSH
29235: LD_INT 3
29237: PPUSH
29238: CALL_OW 1
29242: ST_TO_ADDR
// if missile < 2 then
29243: LD_VAR 0 14
29247: PUSH
29248: LD_INT 2
29250: LESS
29251: IFFALSE 29255
// exit ;
29253: GO 29477
// x := GetX ( enemy ) ;
29255: LD_ADDR_VAR 0 4
29259: PUSH
29260: LD_VAR 0 10
29264: PPUSH
29265: CALL_OW 250
29269: ST_TO_ADDR
// y := GetY ( enemy ) ;
29270: LD_ADDR_VAR 0 5
29274: PUSH
29275: LD_VAR 0 10
29279: PPUSH
29280: CALL_OW 251
29284: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29285: LD_ADDR_VAR 0 6
29289: PUSH
29290: LD_VAR 0 4
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PPUSH
29299: LD_INT 1
29301: PPUSH
29302: CALL_OW 12
29306: PLUS
29307: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29308: LD_ADDR_VAR 0 7
29312: PUSH
29313: LD_VAR 0 5
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PPUSH
29322: LD_INT 1
29324: PPUSH
29325: CALL_OW 12
29329: PLUS
29330: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29331: LD_VAR 0 6
29335: PPUSH
29336: LD_VAR 0 7
29340: PPUSH
29341: CALL_OW 488
29345: NOT
29346: IFFALSE 29368
// begin _x := x ;
29348: LD_ADDR_VAR 0 6
29352: PUSH
29353: LD_VAR 0 4
29357: ST_TO_ADDR
// _y := y ;
29358: LD_ADDR_VAR 0 7
29362: PUSH
29363: LD_VAR 0 5
29367: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29368: LD_ADDR_VAR 0 3
29372: PUSH
29373: LD_INT 1
29375: PPUSH
29376: LD_VAR 0 14
29380: PPUSH
29381: CALL_OW 12
29385: ST_TO_ADDR
// case i of 1 :
29386: LD_VAR 0 3
29390: PUSH
29391: LD_INT 1
29393: DOUBLE
29394: EQUAL
29395: IFTRUE 29399
29397: GO 29416
29399: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29400: LD_VAR 0 1
29404: PPUSH
29405: LD_VAR 0 10
29409: PPUSH
29410: CALL_OW 115
29414: GO 29477
29416: LD_INT 2
29418: DOUBLE
29419: EQUAL
29420: IFTRUE 29424
29422: GO 29446
29424: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29425: LD_VAR 0 1
29429: PPUSH
29430: LD_VAR 0 6
29434: PPUSH
29435: LD_VAR 0 7
29439: PPUSH
29440: CALL_OW 153
29444: GO 29477
29446: LD_INT 3
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29454
29452: GO 29476
29454: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29455: LD_VAR 0 1
29459: PPUSH
29460: LD_VAR 0 6
29464: PPUSH
29465: LD_VAR 0 7
29469: PPUSH
29470: CALL_OW 154
29474: GO 29477
29476: POP
// end ;
29477: LD_VAR 0 2
29481: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29482: LD_INT 0
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
// if not unit or not building then
29490: LD_VAR 0 1
29494: NOT
29495: IFTRUE 29504
29497: PUSH
29498: LD_VAR 0 2
29502: NOT
29503: OR
29504: IFFALSE 29508
// exit ;
29506: GO 29666
// x := GetX ( building ) ;
29508: LD_ADDR_VAR 0 5
29512: PUSH
29513: LD_VAR 0 2
29517: PPUSH
29518: CALL_OW 250
29522: ST_TO_ADDR
// y := GetY ( building ) ;
29523: LD_ADDR_VAR 0 6
29527: PUSH
29528: LD_VAR 0 2
29532: PPUSH
29533: CALL_OW 251
29537: ST_TO_ADDR
// for i := 0 to 5 do
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: DOUBLE
29544: LD_INT 0
29546: DEC
29547: ST_TO_ADDR
29548: LD_INT 5
29550: PUSH
29551: FOR_TO
29552: IFFALSE 29664
// begin _x := ShiftX ( x , i , 3 ) ;
29554: LD_ADDR_VAR 0 7
29558: PUSH
29559: LD_VAR 0 5
29563: PPUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: LD_INT 3
29571: PPUSH
29572: CALL_OW 272
29576: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29577: LD_ADDR_VAR 0 8
29581: PUSH
29582: LD_VAR 0 6
29586: PPUSH
29587: LD_VAR 0 4
29591: PPUSH
29592: LD_INT 3
29594: PPUSH
29595: CALL_OW 273
29599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29600: LD_VAR 0 7
29604: PPUSH
29605: LD_VAR 0 8
29609: PPUSH
29610: CALL_OW 488
29614: NOT
29615: IFFALSE 29619
// continue ;
29617: GO 29551
// if HexInfo ( _x , _y ) = 0 then
29619: LD_VAR 0 7
29623: PPUSH
29624: LD_VAR 0 8
29628: PPUSH
29629: CALL_OW 428
29633: PUSH
29634: LD_INT 0
29636: EQUAL
29637: IFFALSE 29662
// begin ComMoveXY ( unit , _x , _y ) ;
29639: LD_VAR 0 1
29643: PPUSH
29644: LD_VAR 0 7
29648: PPUSH
29649: LD_VAR 0 8
29653: PPUSH
29654: CALL_OW 111
// exit ;
29658: POP
29659: POP
29660: GO 29666
// end ; end ;
29662: GO 29551
29664: POP
29665: POP
// end ;
29666: LD_VAR 0 3
29670: RET
// export function ScanBase ( side , base_area ) ; begin
29671: LD_INT 0
29673: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29674: LD_ADDR_VAR 0 3
29678: PUSH
29679: LD_VAR 0 2
29683: PPUSH
29684: LD_INT 81
29686: PUSH
29687: LD_VAR 0 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PPUSH
29696: CALL_OW 70
29700: ST_TO_ADDR
// end ;
29701: LD_VAR 0 3
29705: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29706: LD_INT 0
29708: PPUSH
29709: PPUSH
29710: PPUSH
29711: PPUSH
// result := false ;
29712: LD_ADDR_VAR 0 2
29716: PUSH
29717: LD_INT 0
29719: ST_TO_ADDR
// side := GetSide ( unit ) ;
29720: LD_ADDR_VAR 0 3
29724: PUSH
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 255
29734: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29735: LD_ADDR_VAR 0 4
29739: PUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 248
29749: ST_TO_ADDR
// case nat of 1 :
29750: LD_VAR 0 4
29754: PUSH
29755: LD_INT 1
29757: DOUBLE
29758: EQUAL
29759: IFTRUE 29763
29761: GO 29774
29763: POP
// tech := tech_lassight ; 2 :
29764: LD_ADDR_VAR 0 5
29768: PUSH
29769: LD_INT 12
29771: ST_TO_ADDR
29772: GO 29813
29774: LD_INT 2
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29793
29782: POP
// tech := tech_mortar ; 3 :
29783: LD_ADDR_VAR 0 5
29787: PUSH
29788: LD_INT 41
29790: ST_TO_ADDR
29791: GO 29813
29793: LD_INT 3
29795: DOUBLE
29796: EQUAL
29797: IFTRUE 29801
29799: GO 29812
29801: POP
// tech := tech_bazooka ; end ;
29802: LD_ADDR_VAR 0 5
29806: PUSH
29807: LD_INT 44
29809: ST_TO_ADDR
29810: GO 29813
29812: POP
// if Researched ( side , tech ) then
29813: LD_VAR 0 3
29817: PPUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: CALL_OW 325
29827: IFFALSE 29854
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 5
29836: PUSH
29837: LD_INT 8
29839: PUSH
29840: LD_INT 9
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: PUSH
29848: LD_VAR 0 4
29852: ARRAY
29853: ST_TO_ADDR
// end ;
29854: LD_VAR 0 2
29858: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29859: LD_INT 0
29861: PPUSH
29862: PPUSH
29863: PPUSH
// if not mines then
29864: LD_VAR 0 2
29868: NOT
29869: IFFALSE 29873
// exit ;
29871: GO 30017
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29873: LD_ADDR_VAR 0 5
29877: PUSH
29878: LD_INT 81
29880: PUSH
29881: LD_VAR 0 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 21
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: ST_TO_ADDR
// for i in mines do
29916: LD_ADDR_VAR 0 4
29920: PUSH
29921: LD_VAR 0 2
29925: PUSH
29926: FOR_IN
29927: IFFALSE 30015
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29929: LD_VAR 0 4
29933: PUSH
29934: LD_INT 1
29936: ARRAY
29937: PPUSH
29938: LD_VAR 0 4
29942: PUSH
29943: LD_INT 2
29945: ARRAY
29946: PPUSH
29947: CALL_OW 458
29951: NOT
29952: IFFALSE 29956
// continue ;
29954: GO 29926
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29956: LD_VAR 0 4
29960: PUSH
29961: LD_INT 1
29963: ARRAY
29964: PPUSH
29965: LD_VAR 0 4
29969: PUSH
29970: LD_INT 2
29972: ARRAY
29973: PPUSH
29974: CALL_OW 428
29978: PUSH
29979: LD_VAR 0 5
29983: IN
29984: IFFALSE 30013
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29986: LD_VAR 0 4
29990: PUSH
29991: LD_INT 1
29993: ARRAY
29994: PPUSH
29995: LD_VAR 0 4
29999: PUSH
30000: LD_INT 2
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 456
// end ;
30013: GO 29926
30015: POP
30016: POP
// end ;
30017: LD_VAR 0 3
30021: RET
// export function Count ( array ) ; begin
30022: LD_INT 0
30024: PPUSH
// result := array + 0 ;
30025: LD_ADDR_VAR 0 2
30029: PUSH
30030: LD_VAR 0 1
30034: PUSH
30035: LD_INT 0
30037: PLUS
30038: ST_TO_ADDR
// end ;
30039: LD_VAR 0 2
30043: RET
// export function IsEmpty ( building ) ; begin
30044: LD_INT 0
30046: PPUSH
// if not building then
30047: LD_VAR 0 1
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30099
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30056: LD_ADDR_VAR 0 2
30060: PUSH
30061: LD_VAR 0 1
30065: PUSH
30066: LD_INT 22
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 255
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 58
30085: PUSH
30086: EMPTY
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PPUSH
30093: CALL_OW 69
30097: IN
30098: ST_TO_ADDR
// end ;
30099: LD_VAR 0 2
30103: RET
// export function IsNotFull ( building ) ; var places ; begin
30104: LD_INT 0
30106: PPUSH
30107: PPUSH
// if not building then
30108: LD_VAR 0 1
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30145
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30117: LD_ADDR_VAR 0 2
30121: PUSH
30122: LD_VAR 0 1
30126: PPUSH
30127: LD_INT 3
30129: PUSH
30130: LD_INT 62
30132: PUSH
30133: EMPTY
30134: LIST
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PPUSH
30140: CALL_OW 72
30144: ST_TO_ADDR
// end ;
30145: LD_VAR 0 2
30149: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30150: LD_INT 0
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
// tmp := [ ] ;
30156: LD_ADDR_VAR 0 3
30160: PUSH
30161: EMPTY
30162: ST_TO_ADDR
// list := [ ] ;
30163: LD_ADDR_VAR 0 5
30167: PUSH
30168: EMPTY
30169: ST_TO_ADDR
// for i = 16 to 25 do
30170: LD_ADDR_VAR 0 4
30174: PUSH
30175: DOUBLE
30176: LD_INT 16
30178: DEC
30179: ST_TO_ADDR
30180: LD_INT 25
30182: PUSH
30183: FOR_TO
30184: IFFALSE 30257
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_VAR 0 3
30195: PUSH
30196: LD_INT 22
30198: PUSH
30199: LD_VAR 0 1
30203: PPUSH
30204: CALL_OW 255
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 91
30215: PUSH
30216: LD_VAR 0 1
30220: PUSH
30221: LD_INT 6
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_VAR 0 4
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: PPUSH
30249: CALL_OW 69
30253: ADD
30254: ST_TO_ADDR
30255: GO 30183
30257: POP
30258: POP
// for i = 1 to tmp do
30259: LD_ADDR_VAR 0 4
30263: PUSH
30264: DOUBLE
30265: LD_INT 1
30267: DEC
30268: ST_TO_ADDR
30269: LD_VAR 0 3
30273: PUSH
30274: FOR_TO
30275: IFFALSE 30363
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30277: LD_ADDR_VAR 0 5
30281: PUSH
30282: LD_VAR 0 5
30286: PUSH
30287: LD_VAR 0 3
30291: PUSH
30292: LD_VAR 0 4
30296: ARRAY
30297: PPUSH
30298: CALL_OW 266
30302: PUSH
30303: LD_VAR 0 3
30307: PUSH
30308: LD_VAR 0 4
30312: ARRAY
30313: PPUSH
30314: CALL_OW 250
30318: PUSH
30319: LD_VAR 0 3
30323: PUSH
30324: LD_VAR 0 4
30328: ARRAY
30329: PPUSH
30330: CALL_OW 251
30334: PUSH
30335: LD_VAR 0 3
30339: PUSH
30340: LD_VAR 0 4
30344: ARRAY
30345: PPUSH
30346: CALL_OW 254
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: ADD
30360: ST_TO_ADDR
30361: GO 30274
30363: POP
30364: POP
// result := list ;
30365: LD_ADDR_VAR 0 2
30369: PUSH
30370: LD_VAR 0 5
30374: ST_TO_ADDR
// end ;
30375: LD_VAR 0 2
30379: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30380: LD_INT 0
30382: PPUSH
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
// if not factory then
30389: LD_VAR 0 1
30393: NOT
30394: IFFALSE 30398
// exit ;
30396: GO 31001
// if control = control_apeman then
30398: LD_VAR 0 4
30402: PUSH
30403: LD_INT 5
30405: EQUAL
30406: IFFALSE 30515
// begin tmp := UnitsInside ( factory ) ;
30408: LD_ADDR_VAR 0 8
30412: PUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 313
30422: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30423: LD_VAR 0 8
30427: PPUSH
30428: LD_INT 25
30430: PUSH
30431: LD_INT 12
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 72
30442: NOT
30443: IFFALSE 30453
// control := control_manual ;
30445: LD_ADDR_VAR 0 4
30449: PUSH
30450: LD_INT 1
30452: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30453: LD_ADDR_VAR 0 8
30457: PUSH
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL 30150 0 1
30467: ST_TO_ADDR
// if tmp then
30468: LD_VAR 0 8
30472: IFFALSE 30515
// begin for i in tmp do
30474: LD_ADDR_VAR 0 7
30478: PUSH
30479: LD_VAR 0 8
30483: PUSH
30484: FOR_IN
30485: IFFALSE 30513
// if i [ 1 ] = b_ext_radio then
30487: LD_VAR 0 7
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PUSH
30496: LD_INT 22
30498: EQUAL
30499: IFFALSE 30511
// begin control := control_remote ;
30501: LD_ADDR_VAR 0 4
30505: PUSH
30506: LD_INT 2
30508: ST_TO_ADDR
// break ;
30509: GO 30513
// end ;
30511: GO 30484
30513: POP
30514: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30515: LD_VAR 0 1
30519: PPUSH
30520: LD_VAR 0 2
30524: PPUSH
30525: LD_VAR 0 3
30529: PPUSH
30530: LD_VAR 0 4
30534: PPUSH
30535: LD_VAR 0 5
30539: PPUSH
30540: CALL_OW 448
30544: IFFALSE 30579
// begin result := [ chassis , engine , control , weapon ] ;
30546: LD_ADDR_VAR 0 6
30550: PUSH
30551: LD_VAR 0 2
30555: PUSH
30556: LD_VAR 0 3
30560: PUSH
30561: LD_VAR 0 4
30565: PUSH
30566: LD_VAR 0 5
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// exit ;
30577: GO 31001
// end ; _chassis := AvailableChassisList ( factory ) ;
30579: LD_ADDR_VAR 0 9
30583: PUSH
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 475
30593: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30594: LD_ADDR_VAR 0 11
30598: PUSH
30599: LD_VAR 0 1
30603: PPUSH
30604: CALL_OW 476
30608: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30609: LD_ADDR_VAR 0 12
30613: PUSH
30614: LD_VAR 0 1
30618: PPUSH
30619: CALL_OW 477
30623: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30624: LD_ADDR_VAR 0 10
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 478
30638: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30639: LD_VAR 0 9
30643: NOT
30644: IFTRUE 30653
30646: PUSH
30647: LD_VAR 0 11
30651: NOT
30652: OR
30653: IFTRUE 30662
30655: PUSH
30656: LD_VAR 0 12
30660: NOT
30661: OR
30662: IFTRUE 30671
30664: PUSH
30665: LD_VAR 0 10
30669: NOT
30670: OR
30671: IFFALSE 30706
// begin result := [ chassis , engine , control , weapon ] ;
30673: LD_ADDR_VAR 0 6
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_VAR 0 3
30687: PUSH
30688: LD_VAR 0 4
30692: PUSH
30693: LD_VAR 0 5
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: ST_TO_ADDR
// exit ;
30704: GO 31001
// end ; if not chassis in _chassis then
30706: LD_VAR 0 2
30710: PUSH
30711: LD_VAR 0 9
30715: IN
30716: NOT
30717: IFFALSE 30743
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30719: LD_ADDR_VAR 0 2
30723: PUSH
30724: LD_VAR 0 9
30728: PUSH
30729: LD_INT 1
30731: PPUSH
30732: LD_VAR 0 9
30736: PPUSH
30737: CALL_OW 12
30741: ARRAY
30742: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30743: LD_VAR 0 2
30747: PPUSH
30748: LD_VAR 0 3
30752: PPUSH
30753: CALL 31006 0 2
30757: NOT
30758: IFFALSE 30819
// repeat engine := _engine [ 1 ] ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_VAR 0 11
30769: PUSH
30770: LD_INT 1
30772: ARRAY
30773: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30774: LD_ADDR_VAR 0 11
30778: PUSH
30779: LD_VAR 0 11
30783: PPUSH
30784: LD_INT 1
30786: PPUSH
30787: CALL_OW 3
30791: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30792: LD_VAR 0 2
30796: PPUSH
30797: LD_VAR 0 3
30801: PPUSH
30802: CALL 31006 0 2
30806: IFTRUE 30817
30808: PUSH
30809: LD_VAR 0 11
30813: PUSH
30814: EMPTY
30815: EQUAL
30816: OR
30817: IFFALSE 30760
// if not control in _control then
30819: LD_VAR 0 4
30823: PUSH
30824: LD_VAR 0 12
30828: IN
30829: NOT
30830: IFFALSE 30856
// control := _control [ rand ( 1 , _control ) ] ;
30832: LD_ADDR_VAR 0 4
30836: PUSH
30837: LD_VAR 0 12
30841: PUSH
30842: LD_INT 1
30844: PPUSH
30845: LD_VAR 0 12
30849: PPUSH
30850: CALL_OW 12
30854: ARRAY
30855: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30856: LD_VAR 0 2
30860: PPUSH
30861: LD_VAR 0 5
30865: PPUSH
30866: CALL 31228 0 2
30870: NOT
30871: IFFALSE 30932
// repeat weapon := _weapon [ 1 ] ;
30873: LD_ADDR_VAR 0 5
30877: PUSH
30878: LD_VAR 0 10
30882: PUSH
30883: LD_INT 1
30885: ARRAY
30886: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30887: LD_ADDR_VAR 0 10
30891: PUSH
30892: LD_VAR 0 10
30896: PPUSH
30897: LD_INT 1
30899: PPUSH
30900: CALL_OW 3
30904: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30905: LD_VAR 0 2
30909: PPUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: CALL 31228 0 2
30919: IFTRUE 30930
30921: PUSH
30922: LD_VAR 0 10
30926: PUSH
30927: EMPTY
30928: EQUAL
30929: OR
30930: IFFALSE 30873
// result := [ ] ;
30932: LD_ADDR_VAR 0 6
30936: PUSH
30937: EMPTY
30938: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30939: LD_VAR 0 1
30943: PPUSH
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 3
30953: PPUSH
30954: LD_VAR 0 4
30958: PPUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: CALL_OW 448
30968: IFFALSE 31001
// result := [ chassis , engine , control , weapon ] ;
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: LD_VAR 0 2
30979: PUSH
30980: LD_VAR 0 3
30984: PUSH
30985: LD_VAR 0 4
30989: PUSH
30990: LD_VAR 0 5
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// end ;
31001: LD_VAR 0 6
31005: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31006: LD_INT 0
31008: PPUSH
// if not chassis or not engine then
31009: LD_VAR 0 1
31013: NOT
31014: IFTRUE 31023
31016: PUSH
31017: LD_VAR 0 2
31021: NOT
31022: OR
31023: IFFALSE 31027
// exit ;
31025: GO 31223
// case engine of engine_solar :
31027: LD_VAR 0 2
31031: PUSH
31032: LD_INT 2
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31078
31040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 11
31048: PUSH
31049: LD_INT 12
31051: PUSH
31052: LD_INT 13
31054: PUSH
31055: LD_INT 14
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: ST_TO_ADDR
31076: GO 31207
31078: LD_INT 1
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31148
31086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31087: LD_ADDR_VAR 0 3
31091: PUSH
31092: LD_INT 11
31094: PUSH
31095: LD_INT 12
31097: PUSH
31098: LD_INT 13
31100: PUSH
31101: LD_INT 14
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: LD_INT 21
31121: PUSH
31122: LD_INT 23
31124: PUSH
31125: LD_INT 22
31127: PUSH
31128: LD_INT 24
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: ST_TO_ADDR
31146: GO 31207
31148: LD_INT 3
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31206
31156: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31157: LD_ADDR_VAR 0 3
31161: PUSH
31162: LD_INT 13
31164: PUSH
31165: LD_INT 14
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: LD_INT 3
31173: PUSH
31174: LD_INT 4
31176: PUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 21
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 23
31188: PUSH
31189: LD_INT 24
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: ST_TO_ADDR
31204: GO 31207
31206: POP
// result := ( chassis in result ) ;
31207: LD_ADDR_VAR 0 3
31211: PUSH
31212: LD_VAR 0 1
31216: PUSH
31217: LD_VAR 0 3
31221: IN
31222: ST_TO_ADDR
// end ;
31223: LD_VAR 0 3
31227: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31228: LD_INT 0
31230: PPUSH
// if not chassis or not weapon then
31231: LD_VAR 0 1
31235: NOT
31236: IFTRUE 31245
31238: PUSH
31239: LD_VAR 0 2
31243: NOT
31244: OR
31245: IFFALSE 31249
// exit ;
31247: GO 32309
// case weapon of us_machine_gun :
31249: LD_VAR 0 2
31253: PUSH
31254: LD_INT 2
31256: DOUBLE
31257: EQUAL
31258: IFTRUE 31262
31260: GO 31292
31262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: LD_INT 4
31279: PUSH
31280: LD_INT 5
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
31290: GO 32293
31292: LD_INT 3
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31330
31300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31301: LD_ADDR_VAR 0 3
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: LD_INT 4
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
31328: GO 32293
31330: LD_INT 11
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31368
31338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: LD_INT 4
31355: PUSH
31356: LD_INT 5
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
31366: GO 32293
31368: LD_INT 4
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31402
31376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: ST_TO_ADDR
31400: GO 32293
31402: LD_INT 5
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31436
31410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31411: LD_ADDR_VAR 0 3
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 4
31424: PUSH
31425: LD_INT 5
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
31434: GO 32293
31436: LD_INT 9
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31470
31444: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: LD_INT 5
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: ST_TO_ADDR
31468: GO 32293
31470: LD_INT 7
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31504
31478: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 4
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
31502: GO 32293
31504: LD_INT 12
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31538
31512: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 5
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
31536: GO 32293
31538: LD_INT 13
31540: DOUBLE
31541: EQUAL
31542: IFTRUE 31546
31544: GO 31572
31546: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: LD_INT 4
31560: PUSH
31561: LD_INT 5
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
31570: GO 32293
31572: LD_INT 14
31574: DOUBLE
31575: EQUAL
31576: IFTRUE 31580
31578: GO 31598
31580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31581: LD_ADDR_VAR 0 3
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: LD_INT 5
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 32293
31598: LD_INT 6
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31624
31606: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: LD_INT 5
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: ST_TO_ADDR
31622: GO 32293
31624: LD_INT 10
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31650
31632: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_INT 4
31640: PUSH
31641: LD_INT 5
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 32293
31650: LD_INT 22
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31684
31658: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_INT 11
31666: PUSH
31667: LD_INT 12
31669: PUSH
31670: LD_INT 13
31672: PUSH
31673: LD_INT 14
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: ST_TO_ADDR
31682: GO 32293
31684: LD_INT 23
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31718
31692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31693: LD_ADDR_VAR 0 3
31697: PUSH
31698: LD_INT 11
31700: PUSH
31701: LD_INT 12
31703: PUSH
31704: LD_INT 13
31706: PUSH
31707: LD_INT 14
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
31716: GO 32293
31718: LD_INT 24
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31752
31726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31727: LD_ADDR_VAR 0 3
31731: PUSH
31732: LD_INT 11
31734: PUSH
31735: LD_INT 12
31737: PUSH
31738: LD_INT 13
31740: PUSH
31741: LD_INT 14
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
31750: GO 32293
31752: LD_INT 30
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31786
31760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 11
31768: PUSH
31769: LD_INT 12
31771: PUSH
31772: LD_INT 13
31774: PUSH
31775: LD_INT 14
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
31784: GO 32293
31786: LD_INT 25
31788: DOUBLE
31789: EQUAL
31790: IFTRUE 31794
31792: GO 31812
31794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31795: LD_ADDR_VAR 0 3
31799: PUSH
31800: LD_INT 13
31802: PUSH
31803: LD_INT 14
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: ST_TO_ADDR
31810: GO 32293
31812: LD_INT 27
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31820
31818: GO 31838
31820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: LD_INT 13
31828: PUSH
31829: LD_INT 14
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: ST_TO_ADDR
31836: GO 32293
31838: LD_INT 92
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31872
31846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31847: LD_ADDR_VAR 0 3
31851: PUSH
31852: LD_INT 11
31854: PUSH
31855: LD_INT 12
31857: PUSH
31858: LD_INT 13
31860: PUSH
31861: LD_INT 14
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
31870: GO 32293
31872: LD_INT 28
31874: DOUBLE
31875: EQUAL
31876: IFTRUE 31880
31878: GO 31898
31880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 13
31888: PUSH
31889: LD_INT 14
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: ST_TO_ADDR
31896: GO 32293
31898: LD_INT 29
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31924
31906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 13
31914: PUSH
31915: LD_INT 14
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: ST_TO_ADDR
31922: GO 32293
31924: LD_INT 31
31926: DOUBLE
31927: EQUAL
31928: IFTRUE 31932
31930: GO 31950
31932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_INT 13
31940: PUSH
31941: LD_INT 14
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: ST_TO_ADDR
31948: GO 32293
31950: LD_INT 26
31952: DOUBLE
31953: EQUAL
31954: IFTRUE 31958
31956: GO 31976
31958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31959: LD_ADDR_VAR 0 3
31963: PUSH
31964: LD_INT 13
31966: PUSH
31967: LD_INT 14
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: ST_TO_ADDR
31974: GO 32293
31976: LD_INT 42
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 32010
31984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31985: LD_ADDR_VAR 0 3
31989: PUSH
31990: LD_INT 21
31992: PUSH
31993: LD_INT 22
31995: PUSH
31996: LD_INT 23
31998: PUSH
31999: LD_INT 24
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
32008: GO 32293
32010: LD_INT 43
32012: DOUBLE
32013: EQUAL
32014: IFTRUE 32018
32016: GO 32044
32018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_INT 21
32026: PUSH
32027: LD_INT 22
32029: PUSH
32030: LD_INT 23
32032: PUSH
32033: LD_INT 24
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 32293
32044: LD_INT 44
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32078
32052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 22
32063: PUSH
32064: LD_INT 23
32066: PUSH
32067: LD_INT 24
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
32076: GO 32293
32078: LD_INT 45
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32112
32086: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_INT 21
32094: PUSH
32095: LD_INT 22
32097: PUSH
32098: LD_INT 23
32100: PUSH
32101: LD_INT 24
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
32110: GO 32293
32112: LD_INT 49
32114: DOUBLE
32115: EQUAL
32116: IFTRUE 32120
32118: GO 32146
32120: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32121: LD_ADDR_VAR 0 3
32125: PUSH
32126: LD_INT 21
32128: PUSH
32129: LD_INT 22
32131: PUSH
32132: LD_INT 23
32134: PUSH
32135: LD_INT 24
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 32293
32146: LD_INT 51
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32180
32154: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 21
32162: PUSH
32163: LD_INT 22
32165: PUSH
32166: LD_INT 23
32168: PUSH
32169: LD_INT 24
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
32178: GO 32293
32180: LD_INT 52
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32214
32188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: LD_INT 21
32196: PUSH
32197: LD_INT 22
32199: PUSH
32200: LD_INT 23
32202: PUSH
32203: LD_INT 24
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
32212: GO 32293
32214: LD_INT 53
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32240
32222: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_INT 23
32230: PUSH
32231: LD_INT 24
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: ST_TO_ADDR
32238: GO 32293
32240: LD_INT 46
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32248
32246: GO 32266
32248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32249: LD_ADDR_VAR 0 3
32253: PUSH
32254: LD_INT 23
32256: PUSH
32257: LD_INT 24
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: ST_TO_ADDR
32264: GO 32293
32266: LD_INT 47
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32274
32272: GO 32292
32274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_INT 23
32282: PUSH
32283: LD_INT 24
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: ST_TO_ADDR
32290: GO 32293
32292: POP
// result := ( chassis in result ) ;
32293: LD_ADDR_VAR 0 3
32297: PUSH
32298: LD_VAR 0 1
32302: PUSH
32303: LD_VAR 0 3
32307: IN
32308: ST_TO_ADDR
// end ;
32309: LD_VAR 0 3
32313: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32314: LD_INT 0
32316: PPUSH
32317: PPUSH
32318: PPUSH
32319: PPUSH
32320: PPUSH
32321: PPUSH
32322: PPUSH
// result := array ;
32323: LD_ADDR_VAR 0 5
32327: PUSH
32328: LD_VAR 0 1
32332: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32333: LD_VAR 0 1
32337: NOT
32338: IFTRUE 32347
32340: PUSH
32341: LD_VAR 0 2
32345: NOT
32346: OR
32347: IFTRUE 32356
32349: PUSH
32350: LD_VAR 0 3
32354: NOT
32355: OR
32356: IFTRUE 32370
32358: PUSH
32359: LD_VAR 0 2
32363: PUSH
32364: LD_VAR 0 1
32368: GREATER
32369: OR
32370: IFTRUE 32384
32372: PUSH
32373: LD_VAR 0 3
32377: PUSH
32378: LD_VAR 0 1
32382: GREATER
32383: OR
32384: IFFALSE 32388
// exit ;
32386: GO 32684
// if direction then
32388: LD_VAR 0 4
32392: IFFALSE 32456
// begin d := 1 ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_INT 1
32401: ST_TO_ADDR
// if i_from > i_to then
32402: LD_VAR 0 2
32406: PUSH
32407: LD_VAR 0 3
32411: GREATER
32412: IFFALSE 32438
// length := ( array - i_from ) + i_to else
32414: LD_ADDR_VAR 0 11
32418: PUSH
32419: LD_VAR 0 1
32423: PUSH
32424: LD_VAR 0 2
32428: MINUS
32429: PUSH
32430: LD_VAR 0 3
32434: PLUS
32435: ST_TO_ADDR
32436: GO 32454
// length := i_to - i_from ;
32438: LD_ADDR_VAR 0 11
32442: PUSH
32443: LD_VAR 0 3
32447: PUSH
32448: LD_VAR 0 2
32452: MINUS
32453: ST_TO_ADDR
// end else
32454: GO 32517
// begin d := - 1 ;
32456: LD_ADDR_VAR 0 9
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: ST_TO_ADDR
// if i_from > i_to then
32465: LD_VAR 0 2
32469: PUSH
32470: LD_VAR 0 3
32474: GREATER
32475: IFFALSE 32495
// length := i_from - i_to else
32477: LD_ADDR_VAR 0 11
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: LD_VAR 0 3
32491: MINUS
32492: ST_TO_ADDR
32493: GO 32517
// length := ( array - i_to ) + i_from ;
32495: LD_ADDR_VAR 0 11
32499: PUSH
32500: LD_VAR 0 1
32504: PUSH
32505: LD_VAR 0 3
32509: MINUS
32510: PUSH
32511: LD_VAR 0 2
32515: PLUS
32516: ST_TO_ADDR
// end ; if not length then
32517: LD_VAR 0 11
32521: NOT
32522: IFFALSE 32526
// exit ;
32524: GO 32684
// tmp := array ;
32526: LD_ADDR_VAR 0 10
32530: PUSH
32531: LD_VAR 0 1
32535: ST_TO_ADDR
// for i = 1 to length do
32536: LD_ADDR_VAR 0 6
32540: PUSH
32541: DOUBLE
32542: LD_INT 1
32544: DEC
32545: ST_TO_ADDR
32546: LD_VAR 0 11
32550: PUSH
32551: FOR_TO
32552: IFFALSE 32672
// begin for j = 1 to array do
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: DOUBLE
32560: LD_INT 1
32562: DEC
32563: ST_TO_ADDR
32564: LD_VAR 0 1
32568: PUSH
32569: FOR_TO
32570: IFFALSE 32658
// begin k := j + d ;
32572: LD_ADDR_VAR 0 8
32576: PUSH
32577: LD_VAR 0 7
32581: PUSH
32582: LD_VAR 0 9
32586: PLUS
32587: ST_TO_ADDR
// if k > array then
32588: LD_VAR 0 8
32592: PUSH
32593: LD_VAR 0 1
32597: GREATER
32598: IFFALSE 32608
// k := 1 ;
32600: LD_ADDR_VAR 0 8
32604: PUSH
32605: LD_INT 1
32607: ST_TO_ADDR
// if not k then
32608: LD_VAR 0 8
32612: NOT
32613: IFFALSE 32625
// k := array ;
32615: LD_ADDR_VAR 0 8
32619: PUSH
32620: LD_VAR 0 1
32624: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32625: LD_ADDR_VAR 0 10
32629: PUSH
32630: LD_VAR 0 10
32634: PPUSH
32635: LD_VAR 0 8
32639: PPUSH
32640: LD_VAR 0 1
32644: PUSH
32645: LD_VAR 0 7
32649: ARRAY
32650: PPUSH
32651: CALL_OW 1
32655: ST_TO_ADDR
// end ;
32656: GO 32569
32658: POP
32659: POP
// array := tmp ;
32660: LD_ADDR_VAR 0 1
32664: PUSH
32665: LD_VAR 0 10
32669: ST_TO_ADDR
// end ;
32670: GO 32551
32672: POP
32673: POP
// result := array ;
32674: LD_ADDR_VAR 0 5
32678: PUSH
32679: LD_VAR 0 1
32683: ST_TO_ADDR
// end ;
32684: LD_VAR 0 5
32688: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32689: LD_INT 0
32691: PPUSH
32692: PPUSH
// result := 0 ;
32693: LD_ADDR_VAR 0 3
32697: PUSH
32698: LD_INT 0
32700: ST_TO_ADDR
// if not array or not value in array then
32701: LD_VAR 0 1
32705: NOT
32706: IFTRUE 32721
32708: PUSH
32709: LD_VAR 0 2
32713: PUSH
32714: LD_VAR 0 1
32718: IN
32719: NOT
32720: OR
32721: IFFALSE 32725
// exit ;
32723: GO 32779
// for i = 1 to array do
32725: LD_ADDR_VAR 0 4
32729: PUSH
32730: DOUBLE
32731: LD_INT 1
32733: DEC
32734: ST_TO_ADDR
32735: LD_VAR 0 1
32739: PUSH
32740: FOR_TO
32741: IFFALSE 32777
// if value = array [ i ] then
32743: LD_VAR 0 2
32747: PUSH
32748: LD_VAR 0 1
32752: PUSH
32753: LD_VAR 0 4
32757: ARRAY
32758: EQUAL
32759: IFFALSE 32775
// begin result := i ;
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_VAR 0 4
32770: ST_TO_ADDR
// exit ;
32771: POP
32772: POP
32773: GO 32779
// end ;
32775: GO 32740
32777: POP
32778: POP
// end ;
32779: LD_VAR 0 3
32783: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32784: LD_INT 0
32786: PPUSH
// vc_chassis := chassis ;
32787: LD_ADDR_OWVAR 37
32791: PUSH
32792: LD_VAR 0 1
32796: ST_TO_ADDR
// vc_engine := engine ;
32797: LD_ADDR_OWVAR 39
32801: PUSH
32802: LD_VAR 0 2
32806: ST_TO_ADDR
// vc_control := control ;
32807: LD_ADDR_OWVAR 38
32811: PUSH
32812: LD_VAR 0 3
32816: ST_TO_ADDR
// vc_weapon := weapon ;
32817: LD_ADDR_OWVAR 40
32821: PUSH
32822: LD_VAR 0 4
32826: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32827: LD_ADDR_OWVAR 41
32831: PUSH
32832: LD_VAR 0 5
32836: ST_TO_ADDR
// end ;
32837: LD_VAR 0 6
32841: RET
// export function WantPlant ( unit ) ; var task ; begin
32842: LD_INT 0
32844: PPUSH
32845: PPUSH
// result := false ;
32846: LD_ADDR_VAR 0 2
32850: PUSH
32851: LD_INT 0
32853: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_VAR 0 1
32863: PPUSH
32864: CALL_OW 437
32868: ST_TO_ADDR
// if task then
32869: LD_VAR 0 3
32873: IFFALSE 32901
// if task [ 1 ] [ 1 ] = p then
32875: LD_VAR 0 3
32879: PUSH
32880: LD_INT 1
32882: ARRAY
32883: PUSH
32884: LD_INT 1
32886: ARRAY
32887: PUSH
32888: LD_STRING p
32890: EQUAL
32891: IFFALSE 32901
// result := true ;
32893: LD_ADDR_VAR 0 2
32897: PUSH
32898: LD_INT 1
32900: ST_TO_ADDR
// end ;
32901: LD_VAR 0 2
32905: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32906: LD_INT 0
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
// if pos < 1 then
32912: LD_VAR 0 2
32916: PUSH
32917: LD_INT 1
32919: LESS
32920: IFFALSE 32924
// exit ;
32922: GO 33227
// if pos = 1 then
32924: LD_VAR 0 2
32928: PUSH
32929: LD_INT 1
32931: EQUAL
32932: IFFALSE 32965
// result := Replace ( arr , pos [ 1 ] , value ) else
32934: LD_ADDR_VAR 0 4
32938: PUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: LD_VAR 0 2
32948: PUSH
32949: LD_INT 1
32951: ARRAY
32952: PPUSH
32953: LD_VAR 0 3
32957: PPUSH
32958: CALL_OW 1
32962: ST_TO_ADDR
32963: GO 33227
// begin tmp := arr ;
32965: LD_ADDR_VAR 0 6
32969: PUSH
32970: LD_VAR 0 1
32974: ST_TO_ADDR
// s_arr := [ tmp ] ;
32975: LD_ADDR_VAR 0 7
32979: PUSH
32980: LD_VAR 0 6
32984: PUSH
32985: EMPTY
32986: LIST
32987: ST_TO_ADDR
// for i = 1 to pos - 1 do
32988: LD_ADDR_VAR 0 5
32992: PUSH
32993: DOUBLE
32994: LD_INT 1
32996: DEC
32997: ST_TO_ADDR
32998: LD_VAR 0 2
33002: PUSH
33003: LD_INT 1
33005: MINUS
33006: PUSH
33007: FOR_TO
33008: IFFALSE 33053
// begin tmp := tmp [ pos [ i ] ] ;
33010: LD_ADDR_VAR 0 6
33014: PUSH
33015: LD_VAR 0 6
33019: PUSH
33020: LD_VAR 0 2
33024: PUSH
33025: LD_VAR 0 5
33029: ARRAY
33030: ARRAY
33031: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33032: LD_ADDR_VAR 0 7
33036: PUSH
33037: LD_VAR 0 7
33041: PUSH
33042: LD_VAR 0 6
33046: PUSH
33047: EMPTY
33048: LIST
33049: ADD
33050: ST_TO_ADDR
// end ;
33051: GO 33007
33053: POP
33054: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33055: LD_ADDR_VAR 0 6
33059: PUSH
33060: LD_VAR 0 6
33064: PPUSH
33065: LD_VAR 0 2
33069: PUSH
33070: LD_VAR 0 2
33074: ARRAY
33075: PPUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: CALL_OW 1
33085: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33086: LD_ADDR_VAR 0 7
33090: PUSH
33091: LD_VAR 0 7
33095: PPUSH
33096: LD_VAR 0 7
33100: PPUSH
33101: LD_VAR 0 6
33105: PPUSH
33106: CALL_OW 1
33110: ST_TO_ADDR
// for i = s_arr downto 2 do
33111: LD_ADDR_VAR 0 5
33115: PUSH
33116: DOUBLE
33117: LD_VAR 0 7
33121: INC
33122: ST_TO_ADDR
33123: LD_INT 2
33125: PUSH
33126: FOR_DOWNTO
33127: IFFALSE 33211
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33129: LD_ADDR_VAR 0 6
33133: PUSH
33134: LD_VAR 0 7
33138: PUSH
33139: LD_VAR 0 5
33143: PUSH
33144: LD_INT 1
33146: MINUS
33147: ARRAY
33148: PPUSH
33149: LD_VAR 0 2
33153: PUSH
33154: LD_VAR 0 5
33158: PUSH
33159: LD_INT 1
33161: MINUS
33162: ARRAY
33163: PPUSH
33164: LD_VAR 0 7
33168: PUSH
33169: LD_VAR 0 5
33173: ARRAY
33174: PPUSH
33175: CALL_OW 1
33179: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33180: LD_ADDR_VAR 0 7
33184: PUSH
33185: LD_VAR 0 7
33189: PPUSH
33190: LD_VAR 0 5
33194: PUSH
33195: LD_INT 1
33197: MINUS
33198: PPUSH
33199: LD_VAR 0 6
33203: PPUSH
33204: CALL_OW 1
33208: ST_TO_ADDR
// end ;
33209: GO 33126
33211: POP
33212: POP
// result := s_arr [ 1 ] ;
33213: LD_ADDR_VAR 0 4
33217: PUSH
33218: LD_VAR 0 7
33222: PUSH
33223: LD_INT 1
33225: ARRAY
33226: ST_TO_ADDR
// end ; end ;
33227: LD_VAR 0 4
33231: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
// if not list then
33236: LD_VAR 0 1
33240: NOT
33241: IFFALSE 33245
// exit ;
33243: GO 33336
// i := list [ pos1 ] ;
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_VAR 0 1
33254: PUSH
33255: LD_VAR 0 2
33259: ARRAY
33260: ST_TO_ADDR
// if not i then
33261: LD_VAR 0 5
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33336
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33270: LD_ADDR_VAR 0 1
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_VAR 0 2
33284: PPUSH
33285: LD_VAR 0 1
33289: PUSH
33290: LD_VAR 0 3
33294: ARRAY
33295: PPUSH
33296: CALL_OW 1
33300: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33301: LD_ADDR_VAR 0 1
33305: PUSH
33306: LD_VAR 0 1
33310: PPUSH
33311: LD_VAR 0 3
33315: PPUSH
33316: LD_VAR 0 5
33320: PPUSH
33321: CALL_OW 1
33325: ST_TO_ADDR
// result := list ;
33326: LD_ADDR_VAR 0 4
33330: PUSH
33331: LD_VAR 0 1
33335: ST_TO_ADDR
// end ;
33336: LD_VAR 0 4
33340: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33341: LD_INT 0
33343: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33344: LD_ADDR_VAR 0 5
33348: PUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 250
33358: PPUSH
33359: LD_VAR 0 1
33363: PPUSH
33364: CALL_OW 251
33368: PPUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: LD_VAR 0 3
33378: PPUSH
33379: LD_VAR 0 4
33383: PPUSH
33384: CALL 33766 0 5
33388: ST_TO_ADDR
// end ;
33389: LD_VAR 0 5
33393: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
// if not list or not unit then
33400: LD_VAR 0 2
33404: NOT
33405: IFTRUE 33414
33407: PUSH
33408: LD_VAR 0 1
33412: NOT
33413: OR
33414: IFFALSE 33418
// exit ;
33416: GO 33761
// result := [ ] ;
33418: LD_ADDR_VAR 0 5
33422: PUSH
33423: EMPTY
33424: ST_TO_ADDR
// for i in list do
33425: LD_ADDR_VAR 0 6
33429: PUSH
33430: LD_VAR 0 2
33434: PUSH
33435: FOR_IN
33436: IFFALSE 33654
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33438: LD_ADDR_VAR 0 8
33442: PUSH
33443: LD_VAR 0 1
33447: PPUSH
33448: LD_VAR 0 6
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: PPUSH
33457: LD_VAR 0 6
33461: PUSH
33462: LD_INT 2
33464: ARRAY
33465: PPUSH
33466: CALL_OW 297
33470: ST_TO_ADDR
// if not Count ( result ) then
33471: LD_VAR 0 5
33475: PPUSH
33476: CALL 30022 0 1
33480: NOT
33481: IFFALSE 33514
// begin result := Join ( result , [ i , tmp ] ) ;
33483: LD_ADDR_VAR 0 5
33487: PUSH
33488: LD_VAR 0 5
33492: PPUSH
33493: LD_VAR 0 6
33497: PUSH
33498: LD_VAR 0 8
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL 65954 0 2
33511: ST_TO_ADDR
// continue ;
33512: GO 33435
// end ; if result [ result ] [ 2 ] <= tmp then
33514: LD_VAR 0 5
33518: PUSH
33519: LD_VAR 0 5
33523: ARRAY
33524: PUSH
33525: LD_INT 2
33527: ARRAY
33528: PUSH
33529: LD_VAR 0 8
33533: LESSEQUAL
33534: IFFALSE 33567
// result := Join ( result , [ i , tmp ] ) else
33536: LD_ADDR_VAR 0 5
33540: PUSH
33541: LD_VAR 0 5
33545: PPUSH
33546: LD_VAR 0 6
33550: PUSH
33551: LD_VAR 0 8
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PPUSH
33560: CALL 65954 0 2
33564: ST_TO_ADDR
33565: GO 33652
// begin for j := 1 to Count ( result ) do
33567: LD_ADDR_VAR 0 7
33571: PUSH
33572: DOUBLE
33573: LD_INT 1
33575: DEC
33576: ST_TO_ADDR
33577: LD_VAR 0 5
33581: PPUSH
33582: CALL 30022 0 1
33586: PUSH
33587: FOR_TO
33588: IFFALSE 33650
// begin if tmp < result [ j ] [ 2 ] then
33590: LD_VAR 0 8
33594: PUSH
33595: LD_VAR 0 5
33599: PUSH
33600: LD_VAR 0 7
33604: ARRAY
33605: PUSH
33606: LD_INT 2
33608: ARRAY
33609: LESS
33610: IFFALSE 33648
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33612: LD_ADDR_VAR 0 5
33616: PUSH
33617: LD_VAR 0 5
33621: PPUSH
33622: LD_VAR 0 7
33626: PPUSH
33627: LD_VAR 0 6
33631: PUSH
33632: LD_VAR 0 8
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 2
33645: ST_TO_ADDR
// break ;
33646: GO 33650
// end ; end ;
33648: GO 33587
33650: POP
33651: POP
// end ; end ;
33652: GO 33435
33654: POP
33655: POP
// if result and not asc then
33656: LD_VAR 0 5
33660: IFFALSE 33669
33662: PUSH
33663: LD_VAR 0 3
33667: NOT
33668: AND
33669: IFFALSE 33686
// result := ReverseArray ( result ) ;
33671: LD_ADDR_VAR 0 5
33675: PUSH
33676: LD_VAR 0 5
33680: PPUSH
33681: CALL 61044 0 1
33685: ST_TO_ADDR
// tmp := [ ] ;
33686: LD_ADDR_VAR 0 8
33690: PUSH
33691: EMPTY
33692: ST_TO_ADDR
// if mode then
33693: LD_VAR 0 4
33697: IFFALSE 33761
// begin for i := 1 to result do
33699: LD_ADDR_VAR 0 6
33703: PUSH
33704: DOUBLE
33705: LD_INT 1
33707: DEC
33708: ST_TO_ADDR
33709: LD_VAR 0 5
33713: PUSH
33714: FOR_TO
33715: IFFALSE 33749
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33717: LD_ADDR_VAR 0 8
33721: PUSH
33722: LD_VAR 0 8
33726: PPUSH
33727: LD_VAR 0 5
33731: PUSH
33732: LD_VAR 0 6
33736: ARRAY
33737: PUSH
33738: LD_INT 1
33740: ARRAY
33741: PPUSH
33742: CALL 65954 0 2
33746: ST_TO_ADDR
33747: GO 33714
33749: POP
33750: POP
// result := tmp ;
33751: LD_ADDR_VAR 0 5
33755: PUSH
33756: LD_VAR 0 8
33760: ST_TO_ADDR
// end ; end ;
33761: LD_VAR 0 5
33765: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33766: LD_INT 0
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
// if not list then
33772: LD_VAR 0 3
33776: NOT
33777: IFFALSE 33781
// exit ;
33779: GO 34171
// result := [ ] ;
33781: LD_ADDR_VAR 0 6
33785: PUSH
33786: EMPTY
33787: ST_TO_ADDR
// for i in list do
33788: LD_ADDR_VAR 0 7
33792: PUSH
33793: LD_VAR 0 3
33797: PUSH
33798: FOR_IN
33799: IFFALSE 34001
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33801: LD_ADDR_VAR 0 9
33805: PUSH
33806: LD_VAR 0 7
33810: PPUSH
33811: LD_VAR 0 1
33815: PPUSH
33816: LD_VAR 0 2
33820: PPUSH
33821: CALL_OW 297
33825: ST_TO_ADDR
// if not result then
33826: LD_VAR 0 6
33830: NOT
33831: IFFALSE 33857
// result := [ [ i , tmp ] ] else
33833: LD_ADDR_VAR 0 6
33837: PUSH
33838: LD_VAR 0 7
33842: PUSH
33843: LD_VAR 0 9
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: ST_TO_ADDR
33855: GO 33999
// begin if result [ result ] [ 2 ] <= tmp then
33857: LD_VAR 0 6
33861: PUSH
33862: LD_VAR 0 6
33866: ARRAY
33867: PUSH
33868: LD_INT 2
33870: ARRAY
33871: PUSH
33872: LD_VAR 0 9
33876: LESSEQUAL
33877: IFFALSE 33919
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33879: LD_ADDR_VAR 0 6
33883: PUSH
33884: LD_VAR 0 6
33888: PPUSH
33889: LD_VAR 0 6
33893: PUSH
33894: LD_INT 1
33896: PLUS
33897: PPUSH
33898: LD_VAR 0 7
33902: PUSH
33903: LD_VAR 0 9
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PPUSH
33912: CALL_OW 2
33916: ST_TO_ADDR
33917: GO 33999
// for j := 1 to result do
33919: LD_ADDR_VAR 0 8
33923: PUSH
33924: DOUBLE
33925: LD_INT 1
33927: DEC
33928: ST_TO_ADDR
33929: LD_VAR 0 6
33933: PUSH
33934: FOR_TO
33935: IFFALSE 33997
// begin if tmp < result [ j ] [ 2 ] then
33937: LD_VAR 0 9
33941: PUSH
33942: LD_VAR 0 6
33946: PUSH
33947: LD_VAR 0 8
33951: ARRAY
33952: PUSH
33953: LD_INT 2
33955: ARRAY
33956: LESS
33957: IFFALSE 33995
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33959: LD_ADDR_VAR 0 6
33963: PUSH
33964: LD_VAR 0 6
33968: PPUSH
33969: LD_VAR 0 8
33973: PPUSH
33974: LD_VAR 0 7
33978: PUSH
33979: LD_VAR 0 9
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PPUSH
33988: CALL_OW 2
33992: ST_TO_ADDR
// break ;
33993: GO 33997
// end ; end ;
33995: GO 33934
33997: POP
33998: POP
// end ; end ;
33999: GO 33798
34001: POP
34002: POP
// if result and not asc then
34003: LD_VAR 0 6
34007: IFFALSE 34016
34009: PUSH
34010: LD_VAR 0 4
34014: NOT
34015: AND
34016: IFFALSE 34091
// begin tmp := result ;
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: LD_VAR 0 6
34027: ST_TO_ADDR
// for i = tmp downto 1 do
34028: LD_ADDR_VAR 0 7
34032: PUSH
34033: DOUBLE
34034: LD_VAR 0 9
34038: INC
34039: ST_TO_ADDR
34040: LD_INT 1
34042: PUSH
34043: FOR_DOWNTO
34044: IFFALSE 34089
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34046: LD_ADDR_VAR 0 6
34050: PUSH
34051: LD_VAR 0 6
34055: PPUSH
34056: LD_VAR 0 9
34060: PUSH
34061: LD_VAR 0 7
34065: MINUS
34066: PUSH
34067: LD_INT 1
34069: PLUS
34070: PPUSH
34071: LD_VAR 0 9
34075: PUSH
34076: LD_VAR 0 7
34080: ARRAY
34081: PPUSH
34082: CALL_OW 1
34086: ST_TO_ADDR
34087: GO 34043
34089: POP
34090: POP
// end ; tmp := [ ] ;
34091: LD_ADDR_VAR 0 9
34095: PUSH
34096: EMPTY
34097: ST_TO_ADDR
// if mode then
34098: LD_VAR 0 5
34102: IFFALSE 34171
// begin for i = 1 to result do
34104: LD_ADDR_VAR 0 7
34108: PUSH
34109: DOUBLE
34110: LD_INT 1
34112: DEC
34113: ST_TO_ADDR
34114: LD_VAR 0 6
34118: PUSH
34119: FOR_TO
34120: IFFALSE 34159
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34122: LD_ADDR_VAR 0 9
34126: PUSH
34127: LD_VAR 0 9
34131: PPUSH
34132: LD_VAR 0 7
34136: PPUSH
34137: LD_VAR 0 6
34141: PUSH
34142: LD_VAR 0 7
34146: ARRAY
34147: PUSH
34148: LD_INT 1
34150: ARRAY
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
34157: GO 34119
34159: POP
34160: POP
// result := tmp ;
34161: LD_ADDR_VAR 0 6
34165: PUSH
34166: LD_VAR 0 9
34170: ST_TO_ADDR
// end ; end ;
34171: LD_VAR 0 6
34175: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34176: LD_INT 0
34178: PPUSH
34179: PPUSH
34180: PPUSH
34181: PPUSH
34182: PPUSH
34183: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34184: LD_ADDR_VAR 0 5
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: EMPTY
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: ST_TO_ADDR
// if not x or not y then
34206: LD_VAR 0 2
34210: NOT
34211: IFTRUE 34220
34213: PUSH
34214: LD_VAR 0 3
34218: NOT
34219: OR
34220: IFFALSE 34224
// exit ;
34222: GO 35880
// if not range then
34224: LD_VAR 0 4
34228: NOT
34229: IFFALSE 34239
// range := 10 ;
34231: LD_ADDR_VAR 0 4
34235: PUSH
34236: LD_INT 10
34238: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34239: LD_ADDR_VAR 0 8
34243: PUSH
34244: LD_INT 81
34246: PUSH
34247: LD_VAR 0 1
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 92
34258: PUSH
34259: LD_VAR 0 2
34263: PUSH
34264: LD_VAR 0 3
34268: PUSH
34269: LD_VAR 0 4
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 3
34282: PUSH
34283: LD_INT 21
34285: PUSH
34286: LD_INT 3
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 69
34306: ST_TO_ADDR
// if not tmp then
34307: LD_VAR 0 8
34311: NOT
34312: IFFALSE 34316
// exit ;
34314: GO 35880
// for i in tmp do
34316: LD_ADDR_VAR 0 6
34320: PUSH
34321: LD_VAR 0 8
34325: PUSH
34326: FOR_IN
34327: IFFALSE 35855
// begin points := [ 0 , 0 , 0 ] ;
34329: LD_ADDR_VAR 0 9
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
// bpoints := 1 ;
34348: LD_ADDR_VAR 0 10
34352: PUSH
34353: LD_INT 1
34355: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34356: LD_VAR 0 6
34360: PPUSH
34361: CALL_OW 247
34365: PUSH
34366: LD_INT 1
34368: DOUBLE
34369: EQUAL
34370: IFTRUE 34374
34372: GO 34956
34374: POP
// begin if GetClass ( i ) = 1 then
34375: LD_VAR 0 6
34379: PPUSH
34380: CALL_OW 257
34384: PUSH
34385: LD_INT 1
34387: EQUAL
34388: IFFALSE 34409
// points := [ 10 , 5 , 3 ] ;
34390: LD_ADDR_VAR 0 9
34394: PUSH
34395: LD_INT 10
34397: PUSH
34398: LD_INT 5
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34409: LD_VAR 0 6
34413: PPUSH
34414: CALL_OW 257
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: IN
34433: IFFALSE 34454
// points := [ 3 , 2 , 1 ] ;
34435: LD_ADDR_VAR 0 9
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34454: LD_VAR 0 6
34458: PPUSH
34459: CALL_OW 257
34463: PUSH
34464: LD_INT 5
34466: EQUAL
34467: IFFALSE 34488
// points := [ 130 , 5 , 2 ] ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_INT 130
34476: PUSH
34477: LD_INT 5
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34488: LD_VAR 0 6
34492: PPUSH
34493: CALL_OW 257
34497: PUSH
34498: LD_INT 8
34500: EQUAL
34501: IFFALSE 34522
// points := [ 35 , 35 , 30 ] ;
34503: LD_ADDR_VAR 0 9
34507: PUSH
34508: LD_INT 35
34510: PUSH
34511: LD_INT 35
34513: PUSH
34514: LD_INT 30
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 257
34531: PUSH
34532: LD_INT 9
34534: EQUAL
34535: IFFALSE 34556
// points := [ 20 , 55 , 40 ] ;
34537: LD_ADDR_VAR 0 9
34541: PUSH
34542: LD_INT 20
34544: PUSH
34545: LD_INT 55
34547: PUSH
34548: LD_INT 40
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 257
34565: PUSH
34566: LD_INT 12
34568: PUSH
34569: LD_INT 16
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: IN
34576: IFFALSE 34597
// points := [ 5 , 3 , 2 ] ;
34578: LD_ADDR_VAR 0 9
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 257
34606: PUSH
34607: LD_INT 17
34609: EQUAL
34610: IFFALSE 34631
// points := [ 100 , 50 , 75 ] ;
34612: LD_ADDR_VAR 0 9
34616: PUSH
34617: LD_INT 100
34619: PUSH
34620: LD_INT 50
34622: PUSH
34623: LD_INT 75
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34631: LD_VAR 0 6
34635: PPUSH
34636: CALL_OW 257
34640: PUSH
34641: LD_INT 15
34643: EQUAL
34644: IFFALSE 34665
// points := [ 10 , 5 , 3 ] ;
34646: LD_ADDR_VAR 0 9
34650: PUSH
34651: LD_INT 10
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34665: LD_VAR 0 6
34669: PPUSH
34670: CALL_OW 257
34674: PUSH
34675: LD_INT 14
34677: EQUAL
34678: IFFALSE 34699
// points := [ 10 , 0 , 0 ] ;
34680: LD_ADDR_VAR 0 9
34684: PUSH
34685: LD_INT 10
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34699: LD_VAR 0 6
34703: PPUSH
34704: CALL_OW 257
34708: PUSH
34709: LD_INT 11
34711: EQUAL
34712: IFFALSE 34733
// points := [ 30 , 10 , 5 ] ;
34714: LD_ADDR_VAR 0 9
34718: PUSH
34719: LD_INT 30
34721: PUSH
34722: LD_INT 10
34724: PUSH
34725: LD_INT 5
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34733: LD_VAR 0 1
34737: PPUSH
34738: LD_INT 5
34740: PPUSH
34741: CALL_OW 321
34745: PUSH
34746: LD_INT 2
34748: EQUAL
34749: IFFALSE 34766
// bpoints := bpoints * 1.8 ;
34751: LD_ADDR_VAR 0 10
34755: PUSH
34756: LD_VAR 0 10
34760: PUSH
34761: LD_REAL  1.80000000000000E+0000
34764: MUL
34765: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34766: LD_VAR 0 6
34770: PPUSH
34771: CALL_OW 257
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: IN
34794: IFFALSE 34814
34796: PUSH
34797: LD_VAR 0 1
34801: PPUSH
34802: LD_INT 51
34804: PPUSH
34805: CALL_OW 321
34809: PUSH
34810: LD_INT 2
34812: EQUAL
34813: AND
34814: IFFALSE 34831
// bpoints := bpoints * 1.2 ;
34816: LD_ADDR_VAR 0 10
34820: PUSH
34821: LD_VAR 0 10
34825: PUSH
34826: LD_REAL  1.20000000000000E+0000
34829: MUL
34830: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34831: LD_VAR 0 6
34835: PPUSH
34836: CALL_OW 257
34840: PUSH
34841: LD_INT 5
34843: PUSH
34844: LD_INT 7
34846: PUSH
34847: LD_INT 9
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: IN
34855: IFFALSE 34875
34857: PUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: LD_INT 52
34865: PPUSH
34866: CALL_OW 321
34870: PUSH
34871: LD_INT 2
34873: EQUAL
34874: AND
34875: IFFALSE 34892
// bpoints := bpoints * 1.5 ;
34877: LD_ADDR_VAR 0 10
34881: PUSH
34882: LD_VAR 0 10
34886: PUSH
34887: LD_REAL  1.50000000000000E+0000
34890: MUL
34891: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34892: LD_VAR 0 1
34896: PPUSH
34897: LD_INT 66
34899: PPUSH
34900: CALL_OW 321
34904: PUSH
34905: LD_INT 2
34907: EQUAL
34908: IFFALSE 34925
// bpoints := bpoints * 1.1 ;
34910: LD_ADDR_VAR 0 10
34914: PUSH
34915: LD_VAR 0 10
34919: PUSH
34920: LD_REAL  1.10000000000000E+0000
34923: MUL
34924: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34925: LD_ADDR_VAR 0 10
34929: PUSH
34930: LD_VAR 0 10
34934: PUSH
34935: LD_VAR 0 6
34939: PPUSH
34940: LD_INT 1
34942: PPUSH
34943: CALL_OW 259
34947: PUSH
34948: LD_REAL  1.15000000000000E+0000
34951: MUL
34952: MUL
34953: ST_TO_ADDR
// end ; unit_vehicle :
34954: GO 35784
34956: LD_INT 2
34958: DOUBLE
34959: EQUAL
34960: IFTRUE 34964
34962: GO 35772
34964: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34965: LD_VAR 0 6
34969: PPUSH
34970: CALL_OW 264
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 42
34980: PUSH
34981: LD_INT 24
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: IN
34989: IFFALSE 35010
// points := [ 25 , 5 , 3 ] ;
34991: LD_ADDR_VAR 0 9
34995: PUSH
34996: LD_INT 25
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35010: LD_VAR 0 6
35014: PPUSH
35015: CALL_OW 264
35019: PUSH
35020: LD_INT 4
35022: PUSH
35023: LD_INT 43
35025: PUSH
35026: LD_INT 25
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: IN
35034: IFFALSE 35055
// points := [ 40 , 15 , 5 ] ;
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: LD_INT 40
35043: PUSH
35044: LD_INT 15
35046: PUSH
35047: LD_INT 5
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35055: LD_VAR 0 6
35059: PPUSH
35060: CALL_OW 264
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: LD_INT 23
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: IN
35075: IFFALSE 35096
// points := [ 7 , 25 , 8 ] ;
35077: LD_ADDR_VAR 0 9
35081: PUSH
35082: LD_INT 7
35084: PUSH
35085: LD_INT 25
35087: PUSH
35088: LD_INT 8
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35096: LD_VAR 0 6
35100: PPUSH
35101: CALL_OW 264
35105: PUSH
35106: LD_INT 5
35108: PUSH
35109: LD_INT 27
35111: PUSH
35112: LD_INT 44
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: IN
35120: IFFALSE 35141
// points := [ 14 , 50 , 16 ] ;
35122: LD_ADDR_VAR 0 9
35126: PUSH
35127: LD_INT 14
35129: PUSH
35130: LD_INT 50
35132: PUSH
35133: LD_INT 16
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35141: LD_VAR 0 6
35145: PPUSH
35146: CALL_OW 264
35150: PUSH
35151: LD_INT 6
35153: PUSH
35154: LD_INT 46
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: IN
35161: IFFALSE 35182
// points := [ 32 , 120 , 70 ] ;
35163: LD_ADDR_VAR 0 9
35167: PUSH
35168: LD_INT 32
35170: PUSH
35171: LD_INT 120
35173: PUSH
35174: LD_INT 70
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35182: LD_VAR 0 6
35186: PPUSH
35187: CALL_OW 264
35191: PUSH
35192: LD_INT 7
35194: PUSH
35195: LD_INT 28
35197: PUSH
35198: LD_INT 45
35200: PUSH
35201: LD_INT 92
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: IN
35210: IFFALSE 35231
// points := [ 35 , 20 , 45 ] ;
35212: LD_ADDR_VAR 0 9
35216: PUSH
35217: LD_INT 35
35219: PUSH
35220: LD_INT 20
35222: PUSH
35223: LD_INT 45
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35231: LD_VAR 0 6
35235: PPUSH
35236: CALL_OW 264
35240: PUSH
35241: LD_INT 47
35243: PUSH
35244: EMPTY
35245: LIST
35246: IN
35247: IFFALSE 35268
// points := [ 67 , 45 , 75 ] ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_INT 67
35256: PUSH
35257: LD_INT 45
35259: PUSH
35260: LD_INT 75
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35268: LD_VAR 0 6
35272: PPUSH
35273: CALL_OW 264
35277: PUSH
35278: LD_INT 26
35280: PUSH
35281: EMPTY
35282: LIST
35283: IN
35284: IFFALSE 35305
// points := [ 120 , 30 , 80 ] ;
35286: LD_ADDR_VAR 0 9
35290: PUSH
35291: LD_INT 120
35293: PUSH
35294: LD_INT 30
35296: PUSH
35297: LD_INT 80
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35305: LD_VAR 0 6
35309: PPUSH
35310: CALL_OW 264
35314: PUSH
35315: LD_INT 22
35317: PUSH
35318: EMPTY
35319: LIST
35320: IN
35321: IFFALSE 35342
// points := [ 40 , 1 , 1 ] ;
35323: LD_ADDR_VAR 0 9
35327: PUSH
35328: LD_INT 40
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35342: LD_VAR 0 6
35346: PPUSH
35347: CALL_OW 264
35351: PUSH
35352: LD_INT 29
35354: PUSH
35355: EMPTY
35356: LIST
35357: IN
35358: IFFALSE 35379
// points := [ 70 , 200 , 400 ] ;
35360: LD_ADDR_VAR 0 9
35364: PUSH
35365: LD_INT 70
35367: PUSH
35368: LD_INT 200
35370: PUSH
35371: LD_INT 400
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35379: LD_VAR 0 6
35383: PPUSH
35384: CALL_OW 264
35388: PUSH
35389: LD_INT 14
35391: PUSH
35392: LD_INT 53
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: IN
35399: IFFALSE 35420
// points := [ 40 , 10 , 20 ] ;
35401: LD_ADDR_VAR 0 9
35405: PUSH
35406: LD_INT 40
35408: PUSH
35409: LD_INT 10
35411: PUSH
35412: LD_INT 20
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35420: LD_VAR 0 6
35424: PPUSH
35425: CALL_OW 264
35429: PUSH
35430: LD_INT 9
35432: PUSH
35433: EMPTY
35434: LIST
35435: IN
35436: IFFALSE 35457
// points := [ 5 , 70 , 20 ] ;
35438: LD_ADDR_VAR 0 9
35442: PUSH
35443: LD_INT 5
35445: PUSH
35446: LD_INT 70
35448: PUSH
35449: LD_INT 20
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35457: LD_VAR 0 6
35461: PPUSH
35462: CALL_OW 264
35466: PUSH
35467: LD_INT 10
35469: PUSH
35470: EMPTY
35471: LIST
35472: IN
35473: IFFALSE 35494
// points := [ 35 , 110 , 70 ] ;
35475: LD_ADDR_VAR 0 9
35479: PUSH
35480: LD_INT 35
35482: PUSH
35483: LD_INT 110
35485: PUSH
35486: LD_INT 70
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35494: LD_VAR 0 6
35498: PPUSH
35499: CALL_OW 265
35503: PUSH
35504: LD_INT 25
35506: EQUAL
35507: IFFALSE 35528
// points := [ 80 , 65 , 100 ] ;
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_INT 80
35516: PUSH
35517: LD_INT 65
35519: PUSH
35520: LD_INT 100
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35528: LD_VAR 0 6
35532: PPUSH
35533: CALL_OW 263
35537: PUSH
35538: LD_INT 1
35540: EQUAL
35541: IFFALSE 35576
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35543: LD_ADDR_VAR 0 10
35547: PUSH
35548: LD_VAR 0 10
35552: PUSH
35553: LD_VAR 0 6
35557: PPUSH
35558: CALL_OW 311
35562: PPUSH
35563: LD_INT 3
35565: PPUSH
35566: CALL_OW 259
35570: PUSH
35571: LD_INT 4
35573: MUL
35574: MUL
35575: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35576: LD_VAR 0 6
35580: PPUSH
35581: CALL_OW 263
35585: PUSH
35586: LD_INT 2
35588: EQUAL
35589: IFFALSE 35640
// begin j := IsControledBy ( i ) ;
35591: LD_ADDR_VAR 0 7
35595: PUSH
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 312
35605: ST_TO_ADDR
// if j then
35606: LD_VAR 0 7
35610: IFFALSE 35640
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35612: LD_ADDR_VAR 0 10
35616: PUSH
35617: LD_VAR 0 10
35621: PUSH
35622: LD_VAR 0 7
35626: PPUSH
35627: LD_INT 3
35629: PPUSH
35630: CALL_OW 259
35634: PUSH
35635: LD_INT 3
35637: MUL
35638: MUL
35639: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35640: LD_VAR 0 6
35644: PPUSH
35645: CALL_OW 264
35649: PUSH
35650: LD_INT 5
35652: PUSH
35653: LD_INT 6
35655: PUSH
35656: LD_INT 46
35658: PUSH
35659: LD_INT 44
35661: PUSH
35662: LD_INT 47
35664: PUSH
35665: LD_INT 45
35667: PUSH
35668: LD_INT 28
35670: PUSH
35671: LD_INT 7
35673: PUSH
35674: LD_INT 27
35676: PUSH
35677: LD_INT 29
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: IN
35692: IFFALSE 35712
35694: PUSH
35695: LD_VAR 0 1
35699: PPUSH
35700: LD_INT 52
35702: PPUSH
35703: CALL_OW 321
35707: PUSH
35708: LD_INT 2
35710: EQUAL
35711: AND
35712: IFFALSE 35729
// bpoints := bpoints * 1.2 ;
35714: LD_ADDR_VAR 0 10
35718: PUSH
35719: LD_VAR 0 10
35723: PUSH
35724: LD_REAL  1.20000000000000E+0000
35727: MUL
35728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35729: LD_VAR 0 6
35733: PPUSH
35734: CALL_OW 264
35738: PUSH
35739: LD_INT 6
35741: PUSH
35742: LD_INT 46
35744: PUSH
35745: LD_INT 47
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: IN
35753: IFFALSE 35770
// bpoints := bpoints * 1.2 ;
35755: LD_ADDR_VAR 0 10
35759: PUSH
35760: LD_VAR 0 10
35764: PUSH
35765: LD_REAL  1.20000000000000E+0000
35768: MUL
35769: ST_TO_ADDR
// end ; unit_building :
35770: GO 35784
35772: LD_INT 3
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35780
35778: GO 35783
35780: POP
// ; end ;
35781: GO 35784
35783: POP
// for j = 1 to 3 do
35784: LD_ADDR_VAR 0 7
35788: PUSH
35789: DOUBLE
35790: LD_INT 1
35792: DEC
35793: ST_TO_ADDR
35794: LD_INT 3
35796: PUSH
35797: FOR_TO
35798: IFFALSE 35851
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35800: LD_ADDR_VAR 0 5
35804: PUSH
35805: LD_VAR 0 5
35809: PPUSH
35810: LD_VAR 0 7
35814: PPUSH
35815: LD_VAR 0 5
35819: PUSH
35820: LD_VAR 0 7
35824: ARRAY
35825: PUSH
35826: LD_VAR 0 9
35830: PUSH
35831: LD_VAR 0 7
35835: ARRAY
35836: PUSH
35837: LD_VAR 0 10
35841: MUL
35842: PLUS
35843: PPUSH
35844: CALL_OW 1
35848: ST_TO_ADDR
35849: GO 35797
35851: POP
35852: POP
// end ;
35853: GO 34326
35855: POP
35856: POP
// result := Replace ( result , 4 , tmp ) ;
35857: LD_ADDR_VAR 0 5
35861: PUSH
35862: LD_VAR 0 5
35866: PPUSH
35867: LD_INT 4
35869: PPUSH
35870: LD_VAR 0 8
35874: PPUSH
35875: CALL_OW 1
35879: ST_TO_ADDR
// end ;
35880: LD_VAR 0 5
35884: RET
// export function DangerAtRange ( unit , range ) ; begin
35885: LD_INT 0
35887: PPUSH
// if not unit then
35888: LD_VAR 0 1
35892: NOT
35893: IFFALSE 35897
// exit ;
35895: GO 35942
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35897: LD_ADDR_VAR 0 3
35901: PUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 255
35911: PPUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 250
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 251
35931: PPUSH
35932: LD_VAR 0 2
35936: PPUSH
35937: CALL 34176 0 4
35941: ST_TO_ADDR
// end ;
35942: LD_VAR 0 3
35946: RET
// export function DangerInArea ( side , area ) ; begin
35947: LD_INT 0
35949: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35950: LD_ADDR_VAR 0 3
35954: PUSH
35955: LD_VAR 0 2
35959: PPUSH
35960: LD_INT 81
35962: PUSH
35963: LD_VAR 0 1
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 70
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 3
35981: RET
// export function IsExtension ( b ) ; begin
35982: LD_INT 0
35984: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35985: LD_ADDR_VAR 0 2
35989: PUSH
35990: LD_VAR 0 1
35994: PUSH
35995: LD_INT 23
35997: PUSH
35998: LD_INT 20
36000: PUSH
36001: LD_INT 22
36003: PUSH
36004: LD_INT 17
36006: PUSH
36007: LD_INT 24
36009: PUSH
36010: LD_INT 21
36012: PUSH
36013: LD_INT 19
36015: PUSH
36016: LD_INT 16
36018: PUSH
36019: LD_INT 25
36021: PUSH
36022: LD_INT 18
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: IN
36037: ST_TO_ADDR
// end ;
36038: LD_VAR 0 2
36042: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36043: LD_INT 0
36045: PPUSH
36046: PPUSH
36047: PPUSH
// result := [ ] ;
36048: LD_ADDR_VAR 0 4
36052: PUSH
36053: EMPTY
36054: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36055: LD_ADDR_VAR 0 5
36059: PUSH
36060: LD_VAR 0 2
36064: PPUSH
36065: LD_INT 21
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PPUSH
36075: CALL_OW 70
36079: ST_TO_ADDR
// if not tmp then
36080: LD_VAR 0 5
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 36153
// if checkLink then
36089: LD_VAR 0 3
36093: IFFALSE 36143
// begin for i in tmp do
36095: LD_ADDR_VAR 0 6
36099: PUSH
36100: LD_VAR 0 5
36104: PUSH
36105: FOR_IN
36106: IFFALSE 36141
// if GetBase ( i ) <> base then
36108: LD_VAR 0 6
36112: PPUSH
36113: CALL_OW 274
36117: PUSH
36118: LD_VAR 0 1
36122: NONEQUAL
36123: IFFALSE 36139
// ComLinkToBase ( base , i ) ;
36125: LD_VAR 0 1
36129: PPUSH
36130: LD_VAR 0 6
36134: PPUSH
36135: CALL_OW 169
36139: GO 36105
36141: POP
36142: POP
// end ; result := tmp ;
36143: LD_ADDR_VAR 0 4
36147: PUSH
36148: LD_VAR 0 5
36152: ST_TO_ADDR
// end ;
36153: LD_VAR 0 4
36157: RET
// export function ComComplete ( units , b ) ; var i ; begin
36158: LD_INT 0
36160: PPUSH
36161: PPUSH
// if not units then
36162: LD_VAR 0 1
36166: NOT
36167: IFFALSE 36171
// exit ;
36169: GO 36261
// for i in units do
36171: LD_ADDR_VAR 0 4
36175: PUSH
36176: LD_VAR 0 1
36180: PUSH
36181: FOR_IN
36182: IFFALSE 36259
// if BuildingStatus ( b ) = bs_build then
36184: LD_VAR 0 2
36188: PPUSH
36189: CALL_OW 461
36193: PUSH
36194: LD_INT 1
36196: EQUAL
36197: IFFALSE 36257
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36199: LD_VAR 0 4
36203: PPUSH
36204: LD_STRING h
36206: PUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: CALL_OW 250
36216: PUSH
36217: LD_VAR 0 2
36221: PPUSH
36222: CALL_OW 251
36226: PUSH
36227: LD_VAR 0 2
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: PUSH
36250: EMPTY
36251: LIST
36252: PPUSH
36253: CALL_OW 446
36257: GO 36181
36259: POP
36260: POP
// end ;
36261: LD_VAR 0 3
36265: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36266: LD_INT 0
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36274: LD_VAR 0 1
36278: NOT
36279: IFTRUE 36296
36281: PUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 263
36291: PUSH
36292: LD_INT 2
36294: NONEQUAL
36295: OR
36296: IFFALSE 36300
// exit ;
36298: GO 36616
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36300: LD_ADDR_VAR 0 6
36304: PUSH
36305: LD_INT 22
36307: PUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: CALL_OW 255
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: LD_INT 30
36327: PUSH
36328: LD_INT 36
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 34
36337: PUSH
36338: LD_INT 31
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PPUSH
36354: CALL_OW 69
36358: ST_TO_ADDR
// if not tmp then
36359: LD_VAR 0 6
36363: NOT
36364: IFFALSE 36368
// exit ;
36366: GO 36616
// result := [ ] ;
36368: LD_ADDR_VAR 0 2
36372: PUSH
36373: EMPTY
36374: ST_TO_ADDR
// for i in tmp do
36375: LD_ADDR_VAR 0 3
36379: PUSH
36380: LD_VAR 0 6
36384: PUSH
36385: FOR_IN
36386: IFFALSE 36457
// begin t := UnitsInside ( i ) ;
36388: LD_ADDR_VAR 0 4
36392: PUSH
36393: LD_VAR 0 3
36397: PPUSH
36398: CALL_OW 313
36402: ST_TO_ADDR
// if t then
36403: LD_VAR 0 4
36407: IFFALSE 36455
// for j in t do
36409: LD_ADDR_VAR 0 7
36413: PUSH
36414: LD_VAR 0 4
36418: PUSH
36419: FOR_IN
36420: IFFALSE 36453
// result := Replace ( result , result + 1 , j ) ;
36422: LD_ADDR_VAR 0 2
36426: PUSH
36427: LD_VAR 0 2
36431: PPUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_INT 1
36439: PLUS
36440: PPUSH
36441: LD_VAR 0 7
36445: PPUSH
36446: CALL_OW 1
36450: ST_TO_ADDR
36451: GO 36419
36453: POP
36454: POP
// end ;
36455: GO 36385
36457: POP
36458: POP
// if not result then
36459: LD_VAR 0 2
36463: NOT
36464: IFFALSE 36468
// exit ;
36466: GO 36616
// mech := result [ 1 ] ;
36468: LD_ADDR_VAR 0 5
36472: PUSH
36473: LD_VAR 0 2
36477: PUSH
36478: LD_INT 1
36480: ARRAY
36481: ST_TO_ADDR
// if result > 1 then
36482: LD_VAR 0 2
36486: PUSH
36487: LD_INT 1
36489: GREATER
36490: IFFALSE 36602
// begin for i = 2 to result do
36492: LD_ADDR_VAR 0 3
36496: PUSH
36497: DOUBLE
36498: LD_INT 2
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 2
36506: PUSH
36507: FOR_TO
36508: IFFALSE 36600
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_VAR 0 3
36524: ARRAY
36525: PPUSH
36526: LD_INT 3
36528: PPUSH
36529: CALL_OW 259
36533: PUSH
36534: LD_VAR 0 2
36538: PUSH
36539: LD_VAR 0 3
36543: ARRAY
36544: PPUSH
36545: CALL_OW 432
36549: MINUS
36550: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36551: LD_VAR 0 4
36555: PUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: LD_INT 3
36563: PPUSH
36564: CALL_OW 259
36568: PUSH
36569: LD_VAR 0 5
36573: PPUSH
36574: CALL_OW 432
36578: MINUS
36579: GREATEREQUAL
36580: IFFALSE 36598
// mech := result [ i ] ;
36582: LD_ADDR_VAR 0 5
36586: PUSH
36587: LD_VAR 0 2
36591: PUSH
36592: LD_VAR 0 3
36596: ARRAY
36597: ST_TO_ADDR
// end ;
36598: GO 36507
36600: POP
36601: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36602: LD_VAR 0 1
36606: PPUSH
36607: LD_VAR 0 5
36611: PPUSH
36612: CALL_OW 135
// end ;
36616: LD_VAR 0 2
36620: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36621: LD_INT 0
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
// result := [ ] ;
36636: LD_ADDR_VAR 0 7
36640: PUSH
36641: EMPTY
36642: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36643: LD_VAR 0 1
36647: PPUSH
36648: CALL_OW 266
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: IN
36663: NOT
36664: IFFALSE 36668
// exit ;
36666: GO 38308
// if name then
36668: LD_VAR 0 3
36672: IFFALSE 36688
// SetBName ( base_dep , name ) ;
36674: LD_VAR 0 1
36678: PPUSH
36679: LD_VAR 0 3
36683: PPUSH
36684: CALL_OW 500
// base := GetBase ( base_dep ) ;
36688: LD_ADDR_VAR 0 15
36692: PUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 274
36702: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36703: LD_ADDR_VAR 0 16
36707: PUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 255
36717: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36718: LD_ADDR_VAR 0 17
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 248
36732: ST_TO_ADDR
// if sources then
36733: LD_VAR 0 5
36737: IFFALSE 36784
// for i = 1 to 3 do
36739: LD_ADDR_VAR 0 8
36743: PUSH
36744: DOUBLE
36745: LD_INT 1
36747: DEC
36748: ST_TO_ADDR
36749: LD_INT 3
36751: PUSH
36752: FOR_TO
36753: IFFALSE 36782
// AddResourceType ( base , i , sources [ i ] ) ;
36755: LD_VAR 0 15
36759: PPUSH
36760: LD_VAR 0 8
36764: PPUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_VAR 0 8
36774: ARRAY
36775: PPUSH
36776: CALL_OW 276
36780: GO 36752
36782: POP
36783: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36784: LD_ADDR_VAR 0 18
36788: PUSH
36789: LD_VAR 0 15
36793: PPUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: LD_INT 1
36801: PPUSH
36802: CALL 36043 0 3
36806: ST_TO_ADDR
// InitHc ;
36807: CALL_OW 19
// InitUc ;
36811: CALL_OW 18
// uc_side := side ;
36815: LD_ADDR_OWVAR 20
36819: PUSH
36820: LD_VAR 0 16
36824: ST_TO_ADDR
// uc_nation := nation ;
36825: LD_ADDR_OWVAR 21
36829: PUSH
36830: LD_VAR 0 17
36834: ST_TO_ADDR
// if buildings then
36835: LD_VAR 0 18
36839: IFFALSE 38167
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36841: LD_ADDR_VAR 0 19
36845: PUSH
36846: LD_VAR 0 18
36850: PPUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 30
36856: PUSH
36857: LD_INT 29
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 30
36866: PUSH
36867: LD_INT 30
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: PPUSH
36879: CALL_OW 72
36883: ST_TO_ADDR
// if tmp then
36884: LD_VAR 0 19
36888: IFFALSE 36936
// for i in tmp do
36890: LD_ADDR_VAR 0 8
36894: PUSH
36895: LD_VAR 0 19
36899: PUSH
36900: FOR_IN
36901: IFFALSE 36934
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36903: LD_VAR 0 8
36907: PPUSH
36908: CALL_OW 250
36912: PPUSH
36913: LD_VAR 0 8
36917: PPUSH
36918: CALL_OW 251
36922: PPUSH
36923: LD_VAR 0 16
36927: PPUSH
36928: CALL_OW 441
36932: GO 36900
36934: POP
36935: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36936: LD_VAR 0 18
36940: PPUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 30
36946: PUSH
36947: LD_INT 32
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 30
36956: PUSH
36957: LD_INT 33
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: PPUSH
36969: CALL_OW 72
36973: IFFALSE 37061
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36975: LD_ADDR_VAR 0 8
36979: PUSH
36980: LD_VAR 0 18
36984: PPUSH
36985: LD_INT 2
36987: PUSH
36988: LD_INT 30
36990: PUSH
36991: LD_INT 32
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 30
37000: PUSH
37001: LD_INT 33
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PPUSH
37013: CALL_OW 72
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37059
// begin if not GetBWeapon ( i ) then
37021: LD_VAR 0 8
37025: PPUSH
37026: CALL_OW 269
37030: NOT
37031: IFFALSE 37057
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37033: LD_VAR 0 8
37037: PPUSH
37038: LD_VAR 0 8
37042: PPUSH
37043: LD_VAR 0 2
37047: PPUSH
37048: CALL 38313 0 2
37052: PPUSH
37053: CALL_OW 431
// end ;
37057: GO 37018
37059: POP
37060: POP
// end ; for i = 1 to personel do
37061: LD_ADDR_VAR 0 8
37065: PUSH
37066: DOUBLE
37067: LD_INT 1
37069: DEC
37070: ST_TO_ADDR
37071: LD_VAR 0 6
37075: PUSH
37076: FOR_TO
37077: IFFALSE 38147
// begin if i > 4 then
37079: LD_VAR 0 8
37083: PUSH
37084: LD_INT 4
37086: GREATER
37087: IFFALSE 37091
// break ;
37089: GO 38147
// case i of 1 :
37091: LD_VAR 0 8
37095: PUSH
37096: LD_INT 1
37098: DOUBLE
37099: EQUAL
37100: IFTRUE 37104
37102: GO 37184
37104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37105: LD_ADDR_VAR 0 12
37109: PUSH
37110: LD_VAR 0 18
37114: PPUSH
37115: LD_INT 22
37117: PUSH
37118: LD_VAR 0 16
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 58
37129: PUSH
37130: EMPTY
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 30
37138: PUSH
37139: LD_INT 32
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 30
37148: PUSH
37149: LD_INT 4
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 30
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: PPUSH
37177: CALL_OW 72
37181: ST_TO_ADDR
37182: GO 37406
37184: LD_INT 2
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37192
37190: GO 37254
37192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37193: LD_ADDR_VAR 0 12
37197: PUSH
37198: LD_VAR 0 18
37202: PPUSH
37203: LD_INT 22
37205: PUSH
37206: LD_VAR 0 16
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 30
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 30
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PPUSH
37247: CALL_OW 72
37251: ST_TO_ADDR
37252: GO 37406
37254: LD_INT 3
37256: DOUBLE
37257: EQUAL
37258: IFTRUE 37262
37260: GO 37324
37262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37263: LD_ADDR_VAR 0 12
37267: PUSH
37268: LD_VAR 0 18
37272: PPUSH
37273: LD_INT 22
37275: PUSH
37276: LD_VAR 0 16
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 30
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 30
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PPUSH
37317: CALL_OW 72
37321: ST_TO_ADDR
37322: GO 37406
37324: LD_INT 4
37326: DOUBLE
37327: EQUAL
37328: IFTRUE 37332
37330: GO 37405
37332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37333: LD_ADDR_VAR 0 12
37337: PUSH
37338: LD_VAR 0 18
37342: PPUSH
37343: LD_INT 22
37345: PUSH
37346: LD_VAR 0 16
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 30
37360: PUSH
37361: LD_INT 6
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 7
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 30
37380: PUSH
37381: LD_INT 8
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PPUSH
37398: CALL_OW 72
37402: ST_TO_ADDR
37403: GO 37406
37405: POP
// if i = 1 then
37406: LD_VAR 0 8
37410: PUSH
37411: LD_INT 1
37413: EQUAL
37414: IFFALSE 37525
// begin tmp := [ ] ;
37416: LD_ADDR_VAR 0 19
37420: PUSH
37421: EMPTY
37422: ST_TO_ADDR
// for j in f do
37423: LD_ADDR_VAR 0 9
37427: PUSH
37428: LD_VAR 0 12
37432: PUSH
37433: FOR_IN
37434: IFFALSE 37507
// if GetBType ( j ) = b_bunker then
37436: LD_VAR 0 9
37440: PPUSH
37441: CALL_OW 266
37445: PUSH
37446: LD_INT 32
37448: EQUAL
37449: IFFALSE 37476
// tmp := Insert ( tmp , 1 , j ) else
37451: LD_ADDR_VAR 0 19
37455: PUSH
37456: LD_VAR 0 19
37460: PPUSH
37461: LD_INT 1
37463: PPUSH
37464: LD_VAR 0 9
37468: PPUSH
37469: CALL_OW 2
37473: ST_TO_ADDR
37474: GO 37505
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37476: LD_ADDR_VAR 0 19
37480: PUSH
37481: LD_VAR 0 19
37485: PPUSH
37486: LD_VAR 0 19
37490: PUSH
37491: LD_INT 1
37493: PLUS
37494: PPUSH
37495: LD_VAR 0 9
37499: PPUSH
37500: CALL_OW 2
37504: ST_TO_ADDR
37505: GO 37433
37507: POP
37508: POP
// if tmp then
37509: LD_VAR 0 19
37513: IFFALSE 37525
// f := tmp ;
37515: LD_ADDR_VAR 0 12
37519: PUSH
37520: LD_VAR 0 19
37524: ST_TO_ADDR
// end ; x := personel [ i ] ;
37525: LD_ADDR_VAR 0 13
37529: PUSH
37530: LD_VAR 0 6
37534: PUSH
37535: LD_VAR 0 8
37539: ARRAY
37540: ST_TO_ADDR
// if x = - 1 then
37541: LD_VAR 0 13
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: EQUAL
37550: IFFALSE 37761
// begin for j in f do
37552: LD_ADDR_VAR 0 9
37556: PUSH
37557: LD_VAR 0 12
37561: PUSH
37562: FOR_IN
37563: IFFALSE 37757
// repeat InitHc ;
37565: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37569: LD_VAR 0 9
37573: PPUSH
37574: CALL_OW 266
37578: PUSH
37579: LD_INT 5
37581: EQUAL
37582: IFFALSE 37652
// begin if UnitsInside ( j ) < 3 then
37584: LD_VAR 0 9
37588: PPUSH
37589: CALL_OW 313
37593: PUSH
37594: LD_INT 3
37596: LESS
37597: IFFALSE 37633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37599: LD_INT 0
37601: PPUSH
37602: LD_INT 5
37604: PUSH
37605: LD_INT 8
37607: PUSH
37608: LD_INT 9
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: LIST
37615: PUSH
37616: LD_VAR 0 17
37620: ARRAY
37621: PPUSH
37622: LD_VAR 0 4
37626: PPUSH
37627: CALL_OW 380
37631: GO 37650
// PrepareHuman ( false , i , skill ) ;
37633: LD_INT 0
37635: PPUSH
37636: LD_VAR 0 8
37640: PPUSH
37641: LD_VAR 0 4
37645: PPUSH
37646: CALL_OW 380
// end else
37650: GO 37669
// PrepareHuman ( false , i , skill ) ;
37652: LD_INT 0
37654: PPUSH
37655: LD_VAR 0 8
37659: PPUSH
37660: LD_VAR 0 4
37664: PPUSH
37665: CALL_OW 380
// un := CreateHuman ;
37669: LD_ADDR_VAR 0 14
37673: PUSH
37674: CALL_OW 44
37678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37679: LD_ADDR_VAR 0 7
37683: PUSH
37684: LD_VAR 0 7
37688: PPUSH
37689: LD_INT 1
37691: PPUSH
37692: LD_VAR 0 14
37696: PPUSH
37697: CALL_OW 2
37701: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37702: LD_VAR 0 14
37706: PPUSH
37707: LD_VAR 0 9
37711: PPUSH
37712: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37716: LD_VAR 0 9
37720: PPUSH
37721: CALL_OW 313
37725: PUSH
37726: LD_INT 6
37728: EQUAL
37729: IFTRUE 37753
37731: PUSH
37732: LD_VAR 0 9
37736: PPUSH
37737: CALL_OW 266
37741: PUSH
37742: LD_INT 32
37744: PUSH
37745: LD_INT 31
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: IN
37752: OR
37753: IFFALSE 37565
37755: GO 37562
37757: POP
37758: POP
// end else
37759: GO 38145
// for j = 1 to x do
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: DOUBLE
37767: LD_INT 1
37769: DEC
37770: ST_TO_ADDR
37771: LD_VAR 0 13
37775: PUSH
37776: FOR_TO
37777: IFFALSE 38143
// begin InitHc ;
37779: CALL_OW 19
// if not f then
37783: LD_VAR 0 12
37787: NOT
37788: IFFALSE 37877
// begin PrepareHuman ( false , i , skill ) ;
37790: LD_INT 0
37792: PPUSH
37793: LD_VAR 0 8
37797: PPUSH
37798: LD_VAR 0 4
37802: PPUSH
37803: CALL_OW 380
// un := CreateHuman ;
37807: LD_ADDR_VAR 0 14
37811: PUSH
37812: CALL_OW 44
37816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37817: LD_ADDR_VAR 0 7
37821: PUSH
37822: LD_VAR 0 7
37826: PPUSH
37827: LD_INT 1
37829: PPUSH
37830: LD_VAR 0 14
37834: PPUSH
37835: CALL_OW 2
37839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37840: LD_VAR 0 14
37844: PPUSH
37845: LD_VAR 0 1
37849: PPUSH
37850: CALL_OW 250
37854: PPUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 251
37864: PPUSH
37865: LD_INT 10
37867: PPUSH
37868: LD_INT 0
37870: PPUSH
37871: CALL_OW 50
// continue ;
37875: GO 37776
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37877: LD_VAR 0 12
37881: PUSH
37882: LD_INT 1
37884: ARRAY
37885: PPUSH
37886: CALL_OW 313
37890: IFFALSE 37918
37892: PUSH
37893: LD_VAR 0 12
37897: PUSH
37898: LD_INT 1
37900: ARRAY
37901: PPUSH
37902: CALL_OW 266
37906: PUSH
37907: LD_INT 32
37909: PUSH
37910: LD_INT 31
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: IN
37917: AND
37918: IFTRUE 37939
37920: PUSH
37921: LD_VAR 0 12
37925: PUSH
37926: LD_INT 1
37928: ARRAY
37929: PPUSH
37930: CALL_OW 313
37934: PUSH
37935: LD_INT 6
37937: EQUAL
37938: OR
37939: IFFALSE 37959
// f := Delete ( f , 1 ) ;
37941: LD_ADDR_VAR 0 12
37945: PUSH
37946: LD_VAR 0 12
37950: PPUSH
37951: LD_INT 1
37953: PPUSH
37954: CALL_OW 3
37958: ST_TO_ADDR
// if not f then
37959: LD_VAR 0 12
37963: NOT
37964: IFFALSE 37982
// begin x := x + 2 ;
37966: LD_ADDR_VAR 0 13
37970: PUSH
37971: LD_VAR 0 13
37975: PUSH
37976: LD_INT 2
37978: PLUS
37979: ST_TO_ADDR
// continue ;
37980: GO 37776
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37982: LD_VAR 0 12
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PPUSH
37991: CALL_OW 266
37995: PUSH
37996: LD_INT 5
37998: EQUAL
37999: IFFALSE 38073
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38001: LD_VAR 0 12
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PPUSH
38010: CALL_OW 313
38014: PUSH
38015: LD_INT 3
38017: LESS
38018: IFFALSE 38054
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38020: LD_INT 0
38022: PPUSH
38023: LD_INT 5
38025: PUSH
38026: LD_INT 8
38028: PUSH
38029: LD_INT 9
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: PUSH
38037: LD_VAR 0 17
38041: ARRAY
38042: PPUSH
38043: LD_VAR 0 4
38047: PPUSH
38048: CALL_OW 380
38052: GO 38071
// PrepareHuman ( false , i , skill ) ;
38054: LD_INT 0
38056: PPUSH
38057: LD_VAR 0 8
38061: PPUSH
38062: LD_VAR 0 4
38066: PPUSH
38067: CALL_OW 380
// end else
38071: GO 38090
// PrepareHuman ( false , i , skill ) ;
38073: LD_INT 0
38075: PPUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_VAR 0 4
38085: PPUSH
38086: CALL_OW 380
// un := CreateHuman ;
38090: LD_ADDR_VAR 0 14
38094: PUSH
38095: CALL_OW 44
38099: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38100: LD_ADDR_VAR 0 7
38104: PUSH
38105: LD_VAR 0 7
38109: PPUSH
38110: LD_INT 1
38112: PPUSH
38113: LD_VAR 0 14
38117: PPUSH
38118: CALL_OW 2
38122: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38123: LD_VAR 0 14
38127: PPUSH
38128: LD_VAR 0 12
38132: PUSH
38133: LD_INT 1
38135: ARRAY
38136: PPUSH
38137: CALL_OW 52
// end ;
38141: GO 37776
38143: POP
38144: POP
// end ;
38145: GO 37076
38147: POP
38148: POP
// result := result ^ buildings ;
38149: LD_ADDR_VAR 0 7
38153: PUSH
38154: LD_VAR 0 7
38158: PUSH
38159: LD_VAR 0 18
38163: ADD
38164: ST_TO_ADDR
// end else
38165: GO 38308
// begin for i = 1 to personel do
38167: LD_ADDR_VAR 0 8
38171: PUSH
38172: DOUBLE
38173: LD_INT 1
38175: DEC
38176: ST_TO_ADDR
38177: LD_VAR 0 6
38181: PUSH
38182: FOR_TO
38183: IFFALSE 38306
// begin if i > 4 then
38185: LD_VAR 0 8
38189: PUSH
38190: LD_INT 4
38192: GREATER
38193: IFFALSE 38197
// break ;
38195: GO 38306
// x := personel [ i ] ;
38197: LD_ADDR_VAR 0 13
38201: PUSH
38202: LD_VAR 0 6
38206: PUSH
38207: LD_VAR 0 8
38211: ARRAY
38212: ST_TO_ADDR
// if x = - 1 then
38213: LD_VAR 0 13
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: EQUAL
38222: IFFALSE 38226
// continue ;
38224: GO 38182
// PrepareHuman ( false , i , skill ) ;
38226: LD_INT 0
38228: PPUSH
38229: LD_VAR 0 8
38233: PPUSH
38234: LD_VAR 0 4
38238: PPUSH
38239: CALL_OW 380
// un := CreateHuman ;
38243: LD_ADDR_VAR 0 14
38247: PUSH
38248: CALL_OW 44
38252: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38253: LD_VAR 0 14
38257: PPUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 250
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 251
38277: PPUSH
38278: LD_INT 10
38280: PPUSH
38281: LD_INT 0
38283: PPUSH
38284: CALL_OW 50
// result := result ^ un ;
38288: LD_ADDR_VAR 0 7
38292: PUSH
38293: LD_VAR 0 7
38297: PUSH
38298: LD_VAR 0 14
38302: ADD
38303: ST_TO_ADDR
// end ;
38304: GO 38182
38306: POP
38307: POP
// end ; end ;
38308: LD_VAR 0 7
38312: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
// result := false ;
38331: LD_ADDR_VAR 0 3
38335: PUSH
38336: LD_INT 0
38338: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38339: LD_VAR 0 1
38343: NOT
38344: IFTRUE 38369
38346: PUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 266
38356: PUSH
38357: LD_INT 32
38359: PUSH
38360: LD_INT 33
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: IN
38367: NOT
38368: OR
38369: IFFALSE 38373
// exit ;
38371: GO 39508
// nat := GetNation ( tower ) ;
38373: LD_ADDR_VAR 0 12
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 248
38387: ST_TO_ADDR
// side := GetSide ( tower ) ;
38388: LD_ADDR_VAR 0 16
38392: PUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: CALL_OW 255
38402: ST_TO_ADDR
// x := GetX ( tower ) ;
38403: LD_ADDR_VAR 0 10
38407: PUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 250
38417: ST_TO_ADDR
// y := GetY ( tower ) ;
38418: LD_ADDR_VAR 0 11
38422: PUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL_OW 251
38432: ST_TO_ADDR
// if not x or not y then
38433: LD_VAR 0 10
38437: NOT
38438: IFTRUE 38447
38440: PUSH
38441: LD_VAR 0 11
38445: NOT
38446: OR
38447: IFFALSE 38451
// exit ;
38449: GO 39508
// weapon := 0 ;
38451: LD_ADDR_VAR 0 18
38455: PUSH
38456: LD_INT 0
38458: ST_TO_ADDR
// fac_list := [ ] ;
38459: LD_ADDR_VAR 0 17
38463: PUSH
38464: EMPTY
38465: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38466: LD_ADDR_VAR 0 6
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 274
38480: PPUSH
38481: LD_VAR 0 2
38485: PPUSH
38486: LD_INT 0
38488: PPUSH
38489: CALL 36043 0 3
38493: PPUSH
38494: LD_INT 30
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PPUSH
38504: CALL_OW 72
38508: ST_TO_ADDR
// if not factories then
38509: LD_VAR 0 6
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 39508
// for i in factories do
38518: LD_ADDR_VAR 0 8
38522: PUSH
38523: LD_VAR 0 6
38527: PUSH
38528: FOR_IN
38529: IFFALSE 38554
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38531: LD_ADDR_VAR 0 17
38535: PUSH
38536: LD_VAR 0 17
38540: PUSH
38541: LD_VAR 0 8
38545: PPUSH
38546: CALL_OW 478
38550: UNION
38551: ST_TO_ADDR
38552: GO 38528
38554: POP
38555: POP
// if not fac_list then
38556: LD_VAR 0 17
38560: NOT
38561: IFFALSE 38565
// exit ;
38563: GO 39508
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38565: LD_ADDR_VAR 0 5
38569: PUSH
38570: LD_INT 4
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: LD_INT 9
38578: PUSH
38579: LD_INT 10
38581: PUSH
38582: LD_INT 6
38584: PUSH
38585: LD_INT 7
38587: PUSH
38588: LD_INT 11
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 27
38602: PUSH
38603: LD_INT 28
38605: PUSH
38606: LD_INT 26
38608: PUSH
38609: LD_INT 30
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 43
38620: PUSH
38621: LD_INT 44
38623: PUSH
38624: LD_INT 46
38626: PUSH
38627: LD_INT 45
38629: PUSH
38630: LD_INT 47
38632: PUSH
38633: LD_INT 49
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: PUSH
38649: LD_VAR 0 12
38653: ARRAY
38654: ST_TO_ADDR
// list := list isect fac_list ;
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: LD_VAR 0 5
38664: PUSH
38665: LD_VAR 0 17
38669: ISECT
38670: ST_TO_ADDR
// if not list then
38671: LD_VAR 0 5
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 39508
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38680: LD_VAR 0 12
38684: PUSH
38685: LD_INT 3
38687: EQUAL
38688: IFFALSE 38700
38690: PUSH
38691: LD_INT 49
38693: PUSH
38694: LD_VAR 0 5
38698: IN
38699: AND
38700: IFFALSE 38720
38702: PUSH
38703: LD_INT 31
38705: PPUSH
38706: LD_VAR 0 16
38710: PPUSH
38711: CALL_OW 321
38715: PUSH
38716: LD_INT 2
38718: EQUAL
38719: AND
38720: IFFALSE 38780
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38722: LD_INT 22
38724: PUSH
38725: LD_VAR 0 16
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 35
38736: PUSH
38737: LD_INT 49
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 91
38746: PUSH
38747: LD_VAR 0 1
38751: PUSH
38752: LD_INT 10
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: PPUSH
38765: CALL_OW 69
38769: NOT
38770: IFFALSE 38780
// weapon := ru_time_lapser ;
38772: LD_ADDR_VAR 0 18
38776: PUSH
38777: LD_INT 49
38779: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38780: LD_VAR 0 12
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: IN
38795: IFFALSE 38819
38797: PUSH
38798: LD_INT 11
38800: PUSH
38801: LD_VAR 0 5
38805: IN
38806: IFTRUE 38818
38808: PUSH
38809: LD_INT 30
38811: PUSH
38812: LD_VAR 0 5
38816: IN
38817: OR
38818: AND
38819: IFFALSE 38839
38821: PUSH
38822: LD_INT 6
38824: PPUSH
38825: LD_VAR 0 16
38829: PPUSH
38830: CALL_OW 321
38834: PUSH
38835: LD_INT 2
38837: EQUAL
38838: AND
38839: IFFALSE 39006
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38841: LD_INT 22
38843: PUSH
38844: LD_VAR 0 16
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 35
38858: PUSH
38859: LD_INT 11
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 35
38868: PUSH
38869: LD_INT 30
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 91
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 18
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 69
38906: NOT
38907: IFFALSE 38983
38909: PUSH
38910: LD_INT 22
38912: PUSH
38913: LD_VAR 0 16
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 30
38927: PUSH
38928: LD_INT 32
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 30
38937: PUSH
38938: LD_INT 33
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 91
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 12
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: PUSH
38971: EMPTY
38972: LIST
38973: PPUSH
38974: CALL_OW 69
38978: PUSH
38979: LD_INT 2
38981: GREATER
38982: AND
38983: IFFALSE 39006
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38985: LD_ADDR_VAR 0 18
38989: PUSH
38990: LD_INT 11
38992: PUSH
38993: LD_INT 30
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_VAR 0 12
39004: ARRAY
39005: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39006: LD_VAR 0 18
39010: NOT
39011: IFFALSE 39031
39013: PUSH
39014: LD_INT 40
39016: PPUSH
39017: LD_VAR 0 16
39021: PPUSH
39022: CALL_OW 321
39026: PUSH
39027: LD_INT 2
39029: EQUAL
39030: AND
39031: IFFALSE 39067
39033: PUSH
39034: LD_INT 7
39036: PUSH
39037: LD_VAR 0 5
39041: IN
39042: IFTRUE 39054
39044: PUSH
39045: LD_INT 28
39047: PUSH
39048: LD_VAR 0 5
39052: IN
39053: OR
39054: IFTRUE 39066
39056: PUSH
39057: LD_INT 45
39059: PUSH
39060: LD_VAR 0 5
39064: IN
39065: OR
39066: AND
39067: IFFALSE 39321
// begin hex := GetHexInfo ( x , y ) ;
39069: LD_ADDR_VAR 0 4
39073: PUSH
39074: LD_VAR 0 10
39078: PPUSH
39079: LD_VAR 0 11
39083: PPUSH
39084: CALL_OW 546
39088: ST_TO_ADDR
// if hex [ 1 ] then
39089: LD_VAR 0 4
39093: PUSH
39094: LD_INT 1
39096: ARRAY
39097: IFFALSE 39101
// exit ;
39099: GO 39508
// height := hex [ 2 ] ;
39101: LD_ADDR_VAR 0 15
39105: PUSH
39106: LD_VAR 0 4
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39115: LD_ADDR_VAR 0 14
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: LD_INT 5
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// for i in tmp do
39138: LD_ADDR_VAR 0 8
39142: PUSH
39143: LD_VAR 0 14
39147: PUSH
39148: FOR_IN
39149: IFFALSE 39319
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39151: LD_ADDR_VAR 0 9
39155: PUSH
39156: LD_VAR 0 10
39160: PPUSH
39161: LD_VAR 0 8
39165: PPUSH
39166: LD_INT 5
39168: PPUSH
39169: CALL_OW 272
39173: PUSH
39174: LD_VAR 0 11
39178: PPUSH
39179: LD_VAR 0 8
39183: PPUSH
39184: LD_INT 5
39186: PPUSH
39187: CALL_OW 273
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39196: LD_VAR 0 9
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: PPUSH
39205: LD_VAR 0 9
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PPUSH
39214: CALL_OW 488
39218: IFFALSE 39317
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39220: LD_ADDR_VAR 0 4
39224: PUSH
39225: LD_VAR 0 9
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: PPUSH
39234: LD_VAR 0 9
39238: PUSH
39239: LD_INT 2
39241: ARRAY
39242: PPUSH
39243: CALL_OW 546
39247: ST_TO_ADDR
// if hex [ 1 ] then
39248: LD_VAR 0 4
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: IFFALSE 39260
// continue ;
39258: GO 39148
// h := hex [ 2 ] ;
39260: LD_ADDR_VAR 0 13
39264: PUSH
39265: LD_VAR 0 4
39269: PUSH
39270: LD_INT 2
39272: ARRAY
39273: ST_TO_ADDR
// if h + 7 < height then
39274: LD_VAR 0 13
39278: PUSH
39279: LD_INT 7
39281: PLUS
39282: PUSH
39283: LD_VAR 0 15
39287: LESS
39288: IFFALSE 39317
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39290: LD_ADDR_VAR 0 18
39294: PUSH
39295: LD_INT 7
39297: PUSH
39298: LD_INT 28
39300: PUSH
39301: LD_INT 45
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PUSH
39309: LD_VAR 0 12
39313: ARRAY
39314: ST_TO_ADDR
// break ;
39315: GO 39319
// end ; end ; end ;
39317: GO 39148
39319: POP
39320: POP
// end ; if not weapon then
39321: LD_VAR 0 18
39325: NOT
39326: IFFALSE 39386
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 5
39337: PUSH
39338: LD_INT 11
39340: PUSH
39341: LD_INT 30
39343: PUSH
39344: LD_INT 49
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: DIFF
39352: ST_TO_ADDR
// if not list then
39353: LD_VAR 0 5
39357: NOT
39358: IFFALSE 39362
// exit ;
39360: GO 39508
// weapon := list [ rand ( 1 , list ) ] ;
39362: LD_ADDR_VAR 0 18
39366: PUSH
39367: LD_VAR 0 5
39371: PUSH
39372: LD_INT 1
39374: PPUSH
39375: LD_VAR 0 5
39379: PPUSH
39380: CALL_OW 12
39384: ARRAY
39385: ST_TO_ADDR
// end ; if weapon then
39386: LD_VAR 0 18
39390: IFFALSE 39508
// begin tmp := CostOfWeapon ( weapon ) ;
39392: LD_ADDR_VAR 0 14
39396: PUSH
39397: LD_VAR 0 18
39401: PPUSH
39402: CALL_OW 451
39406: ST_TO_ADDR
// j := GetBase ( tower ) ;
39407: LD_ADDR_VAR 0 9
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 274
39421: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39422: LD_VAR 0 9
39426: PPUSH
39427: LD_INT 1
39429: PPUSH
39430: CALL_OW 275
39434: PUSH
39435: LD_VAR 0 14
39439: PUSH
39440: LD_INT 1
39442: ARRAY
39443: GREATEREQUAL
39444: IFFALSE 39470
39446: PUSH
39447: LD_VAR 0 9
39451: PPUSH
39452: LD_INT 2
39454: PPUSH
39455: CALL_OW 275
39459: PUSH
39460: LD_VAR 0 14
39464: PUSH
39465: LD_INT 2
39467: ARRAY
39468: GREATEREQUAL
39469: AND
39470: IFFALSE 39496
39472: PUSH
39473: LD_VAR 0 9
39477: PPUSH
39478: LD_INT 3
39480: PPUSH
39481: CALL_OW 275
39485: PUSH
39486: LD_VAR 0 14
39490: PUSH
39491: LD_INT 3
39493: ARRAY
39494: GREATEREQUAL
39495: AND
39496: IFFALSE 39508
// result := weapon ;
39498: LD_ADDR_VAR 0 3
39502: PUSH
39503: LD_VAR 0 18
39507: ST_TO_ADDR
// end ; end ;
39508: LD_VAR 0 3
39512: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// result := true ;
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_INT 1
39524: ST_TO_ADDR
// if array1 = array2 then
39525: LD_VAR 0 1
39529: PUSH
39530: LD_VAR 0 2
39534: EQUAL
39535: IFFALSE 39595
// begin for i = 1 to array1 do
39537: LD_ADDR_VAR 0 4
39541: PUSH
39542: DOUBLE
39543: LD_INT 1
39545: DEC
39546: ST_TO_ADDR
39547: LD_VAR 0 1
39551: PUSH
39552: FOR_TO
39553: IFFALSE 39591
// if array1 [ i ] <> array2 [ i ] then
39555: LD_VAR 0 1
39559: PUSH
39560: LD_VAR 0 4
39564: ARRAY
39565: PUSH
39566: LD_VAR 0 2
39570: PUSH
39571: LD_VAR 0 4
39575: ARRAY
39576: NONEQUAL
39577: IFFALSE 39589
// begin result := false ;
39579: LD_ADDR_VAR 0 3
39583: PUSH
39584: LD_INT 0
39586: ST_TO_ADDR
// break ;
39587: GO 39591
// end ;
39589: GO 39552
39591: POP
39592: POP
// end else
39593: GO 39603
// result := false ;
39595: LD_ADDR_VAR 0 3
39599: PUSH
39600: LD_INT 0
39602: ST_TO_ADDR
// end ;
39603: LD_VAR 0 3
39607: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39608: LD_INT 0
39610: PPUSH
39611: PPUSH
// if not array1 or not array2 then
39612: LD_VAR 0 1
39616: NOT
39617: IFTRUE 39626
39619: PUSH
39620: LD_VAR 0 2
39624: NOT
39625: OR
39626: IFFALSE 39630
// exit ;
39628: GO 39694
// result := true ;
39630: LD_ADDR_VAR 0 3
39634: PUSH
39635: LD_INT 1
39637: ST_TO_ADDR
// for i = 1 to array1 do
39638: LD_ADDR_VAR 0 4
39642: PUSH
39643: DOUBLE
39644: LD_INT 1
39646: DEC
39647: ST_TO_ADDR
39648: LD_VAR 0 1
39652: PUSH
39653: FOR_TO
39654: IFFALSE 39692
// if array1 [ i ] <> array2 [ i ] then
39656: LD_VAR 0 1
39660: PUSH
39661: LD_VAR 0 4
39665: ARRAY
39666: PUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_VAR 0 4
39676: ARRAY
39677: NONEQUAL
39678: IFFALSE 39690
// begin result := false ;
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 0
39687: ST_TO_ADDR
// break ;
39688: GO 39692
// end ;
39690: GO 39653
39692: POP
39693: POP
// end ;
39694: LD_VAR 0 3
39698: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39699: LD_INT 0
39701: PPUSH
39702: PPUSH
39703: PPUSH
// pom := GetBase ( fac ) ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 274
39718: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39719: LD_ADDR_VAR 0 4
39723: PUSH
39724: LD_VAR 0 2
39728: PUSH
39729: LD_INT 1
39731: ARRAY
39732: PPUSH
39733: LD_VAR 0 2
39737: PUSH
39738: LD_INT 2
39740: ARRAY
39741: PPUSH
39742: LD_VAR 0 2
39746: PUSH
39747: LD_INT 3
39749: ARRAY
39750: PPUSH
39751: LD_VAR 0 2
39755: PUSH
39756: LD_INT 4
39758: ARRAY
39759: PPUSH
39760: CALL_OW 449
39764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_VAR 0 5
39774: PPUSH
39775: LD_INT 1
39777: PPUSH
39778: CALL_OW 275
39782: PUSH
39783: LD_VAR 0 4
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: GREATEREQUAL
39792: IFFALSE 39818
39794: PUSH
39795: LD_VAR 0 5
39799: PPUSH
39800: LD_INT 2
39802: PPUSH
39803: CALL_OW 275
39807: PUSH
39808: LD_VAR 0 4
39812: PUSH
39813: LD_INT 2
39815: ARRAY
39816: GREATEREQUAL
39817: AND
39818: IFFALSE 39844
39820: PUSH
39821: LD_VAR 0 5
39825: PPUSH
39826: LD_INT 3
39828: PPUSH
39829: CALL_OW 275
39833: PUSH
39834: LD_VAR 0 4
39838: PUSH
39839: LD_INT 3
39841: ARRAY
39842: GREATEREQUAL
39843: AND
39844: ST_TO_ADDR
// end ;
39845: LD_VAR 0 3
39849: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39850: LD_INT 0
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
// pom := GetBase ( building ) ;
39856: LD_ADDR_VAR 0 3
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 274
39870: ST_TO_ADDR
// if not pom then
39871: LD_VAR 0 3
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 40054
// btype := GetBType ( building ) ;
39880: LD_ADDR_VAR 0 5
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 266
39894: ST_TO_ADDR
// if btype = b_armoury then
39895: LD_VAR 0 5
39899: PUSH
39900: LD_INT 4
39902: EQUAL
39903: IFFALSE 39913
// btype := b_barracks ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_INT 5
39912: ST_TO_ADDR
// if btype = b_depot then
39913: LD_VAR 0 5
39917: PUSH
39918: LD_INT 0
39920: EQUAL
39921: IFFALSE 39931
// btype := b_warehouse ;
39923: LD_ADDR_VAR 0 5
39927: PUSH
39928: LD_INT 1
39930: ST_TO_ADDR
// if btype = b_workshop then
39931: LD_VAR 0 5
39935: PUSH
39936: LD_INT 2
39938: EQUAL
39939: IFFALSE 39949
// btype := b_factory ;
39941: LD_ADDR_VAR 0 5
39945: PUSH
39946: LD_INT 3
39948: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39949: LD_ADDR_VAR 0 4
39953: PUSH
39954: LD_VAR 0 5
39958: PPUSH
39959: LD_VAR 0 1
39963: PPUSH
39964: CALL_OW 248
39968: PPUSH
39969: CALL_OW 450
39973: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39974: LD_ADDR_VAR 0 2
39978: PUSH
39979: LD_VAR 0 3
39983: PPUSH
39984: LD_INT 1
39986: PPUSH
39987: CALL_OW 275
39991: PUSH
39992: LD_VAR 0 4
39996: PUSH
39997: LD_INT 1
39999: ARRAY
40000: GREATEREQUAL
40001: IFFALSE 40027
40003: PUSH
40004: LD_VAR 0 3
40008: PPUSH
40009: LD_INT 2
40011: PPUSH
40012: CALL_OW 275
40016: PUSH
40017: LD_VAR 0 4
40021: PUSH
40022: LD_INT 2
40024: ARRAY
40025: GREATEREQUAL
40026: AND
40027: IFFALSE 40053
40029: PUSH
40030: LD_VAR 0 3
40034: PPUSH
40035: LD_INT 3
40037: PPUSH
40038: CALL_OW 275
40042: PUSH
40043: LD_VAR 0 4
40047: PUSH
40048: LD_INT 3
40050: ARRAY
40051: GREATEREQUAL
40052: AND
40053: ST_TO_ADDR
// end ;
40054: LD_VAR 0 2
40058: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40059: LD_INT 0
40061: PPUSH
40062: PPUSH
40063: PPUSH
// pom := GetBase ( building ) ;
40064: LD_ADDR_VAR 0 4
40068: PUSH
40069: LD_VAR 0 1
40073: PPUSH
40074: CALL_OW 274
40078: ST_TO_ADDR
// if not pom then
40079: LD_VAR 0 4
40083: NOT
40084: IFFALSE 40088
// exit ;
40086: GO 40193
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40088: LD_ADDR_VAR 0 5
40092: PUSH
40093: LD_VAR 0 2
40097: PPUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 248
40107: PPUSH
40108: CALL_OW 450
40112: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40113: LD_ADDR_VAR 0 3
40117: PUSH
40118: LD_VAR 0 4
40122: PPUSH
40123: LD_INT 1
40125: PPUSH
40126: CALL_OW 275
40130: PUSH
40131: LD_VAR 0 5
40135: PUSH
40136: LD_INT 1
40138: ARRAY
40139: GREATEREQUAL
40140: IFFALSE 40166
40142: PUSH
40143: LD_VAR 0 4
40147: PPUSH
40148: LD_INT 2
40150: PPUSH
40151: CALL_OW 275
40155: PUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_INT 2
40163: ARRAY
40164: GREATEREQUAL
40165: AND
40166: IFFALSE 40192
40168: PUSH
40169: LD_VAR 0 4
40173: PPUSH
40174: LD_INT 3
40176: PPUSH
40177: CALL_OW 275
40181: PUSH
40182: LD_VAR 0 5
40186: PUSH
40187: LD_INT 3
40189: ARRAY
40190: GREATEREQUAL
40191: AND
40192: ST_TO_ADDR
// end ;
40193: LD_VAR 0 3
40197: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40198: LD_INT 0
40200: PPUSH
40201: PPUSH
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
40209: PPUSH
40210: PPUSH
// result := false ;
40211: LD_ADDR_VAR 0 8
40215: PUSH
40216: LD_INT 0
40218: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40219: LD_VAR 0 5
40223: NOT
40224: IFTRUE 40233
40226: PUSH
40227: LD_VAR 0 1
40231: NOT
40232: OR
40233: IFTRUE 40242
40235: PUSH
40236: LD_VAR 0 2
40240: NOT
40241: OR
40242: IFTRUE 40251
40244: PUSH
40245: LD_VAR 0 3
40249: NOT
40250: OR
40251: IFFALSE 40255
// exit ;
40253: GO 41081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40255: LD_ADDR_VAR 0 14
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: LD_VAR 0 2
40269: PPUSH
40270: LD_VAR 0 3
40274: PPUSH
40275: LD_VAR 0 4
40279: PPUSH
40280: LD_VAR 0 5
40284: PUSH
40285: LD_INT 1
40287: ARRAY
40288: PPUSH
40289: CALL_OW 248
40293: PPUSH
40294: LD_INT 0
40296: PPUSH
40297: CALL 42362 0 6
40301: ST_TO_ADDR
// if not hexes then
40302: LD_VAR 0 14
40306: NOT
40307: IFFALSE 40311
// exit ;
40309: GO 41081
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40311: LD_ADDR_VAR 0 17
40315: PUSH
40316: LD_VAR 0 5
40320: PPUSH
40321: LD_INT 22
40323: PUSH
40324: LD_VAR 0 13
40328: PPUSH
40329: CALL_OW 255
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 30
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 30
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PPUSH
40370: CALL_OW 72
40374: ST_TO_ADDR
// for i = 1 to hexes do
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: DOUBLE
40381: LD_INT 1
40383: DEC
40384: ST_TO_ADDR
40385: LD_VAR 0 14
40389: PUSH
40390: FOR_TO
40391: IFFALSE 41079
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40393: LD_ADDR_VAR 0 13
40397: PUSH
40398: LD_VAR 0 14
40402: PUSH
40403: LD_VAR 0 9
40407: ARRAY
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: LD_VAR 0 14
40417: PUSH
40418: LD_VAR 0 9
40422: ARRAY
40423: PUSH
40424: LD_INT 2
40426: ARRAY
40427: PPUSH
40428: CALL_OW 428
40432: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40433: LD_VAR 0 14
40437: PUSH
40438: LD_VAR 0 9
40442: ARRAY
40443: PUSH
40444: LD_INT 1
40446: ARRAY
40447: PPUSH
40448: LD_VAR 0 14
40452: PUSH
40453: LD_VAR 0 9
40457: ARRAY
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: PPUSH
40463: CALL_OW 351
40467: IFTRUE 40506
40469: PUSH
40470: LD_VAR 0 14
40474: PUSH
40475: LD_VAR 0 9
40479: ARRAY
40480: PUSH
40481: LD_INT 1
40483: ARRAY
40484: PPUSH
40485: LD_VAR 0 14
40489: PUSH
40490: LD_VAR 0 9
40494: ARRAY
40495: PUSH
40496: LD_INT 2
40498: ARRAY
40499: PPUSH
40500: CALL_OW 488
40504: NOT
40505: OR
40506: IFTRUE 40523
40508: PUSH
40509: LD_VAR 0 13
40513: PPUSH
40514: CALL_OW 247
40518: PUSH
40519: LD_INT 3
40521: EQUAL
40522: OR
40523: IFFALSE 40529
// exit ;
40525: POP
40526: POP
40527: GO 41081
// if not tmp then
40529: LD_VAR 0 13
40533: NOT
40534: IFFALSE 40538
// continue ;
40536: GO 40390
// result := true ;
40538: LD_ADDR_VAR 0 8
40542: PUSH
40543: LD_INT 1
40545: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40546: LD_VAR 0 6
40550: IFFALSE 40567
40552: PUSH
40553: LD_VAR 0 13
40557: PPUSH
40558: CALL_OW 247
40562: PUSH
40563: LD_INT 2
40565: EQUAL
40566: AND
40567: IFFALSE 40584
40569: PUSH
40570: LD_VAR 0 13
40574: PPUSH
40575: CALL_OW 263
40579: PUSH
40580: LD_INT 1
40582: EQUAL
40583: AND
40584: IFFALSE 40748
// begin if IsDrivenBy ( tmp ) then
40586: LD_VAR 0 13
40590: PPUSH
40591: CALL_OW 311
40595: IFFALSE 40599
// continue ;
40597: GO 40390
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40599: LD_VAR 0 6
40603: PPUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 60
40609: PUSH
40610: EMPTY
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 55
40622: PUSH
40623: EMPTY
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PPUSH
40634: CALL_OW 72
40638: IFFALSE 40746
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40640: LD_ADDR_VAR 0 18
40644: PUSH
40645: LD_VAR 0 6
40649: PPUSH
40650: LD_INT 3
40652: PUSH
40653: LD_INT 60
40655: PUSH
40656: EMPTY
40657: LIST
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: LD_INT 55
40668: PUSH
40669: EMPTY
40670: LIST
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PPUSH
40680: CALL_OW 72
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: ST_TO_ADDR
// if IsInUnit ( driver ) then
40689: LD_VAR 0 18
40693: PPUSH
40694: CALL_OW 310
40698: IFFALSE 40709
// ComExit ( driver ) ;
40700: LD_VAR 0 18
40704: PPUSH
40705: CALL 66352 0 1
// AddComEnterUnit ( driver , tmp ) ;
40709: LD_VAR 0 18
40713: PPUSH
40714: LD_VAR 0 13
40718: PPUSH
40719: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40723: LD_VAR 0 18
40727: PPUSH
40728: LD_VAR 0 7
40732: PPUSH
40733: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40737: LD_VAR 0 18
40741: PPUSH
40742: CALL_OW 181
// end ; continue ;
40746: GO 40390
// end ; if not cleaners or not tmp in cleaners then
40748: LD_VAR 0 6
40752: NOT
40753: IFTRUE 40768
40755: PUSH
40756: LD_VAR 0 13
40760: PUSH
40761: LD_VAR 0 6
40765: IN
40766: NOT
40767: OR
40768: IFFALSE 41077
// begin if dep then
40770: LD_VAR 0 17
40774: IFFALSE 40910
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40776: LD_ADDR_VAR 0 16
40780: PUSH
40781: LD_VAR 0 17
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: PPUSH
40790: CALL_OW 250
40794: PPUSH
40795: LD_VAR 0 17
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: PPUSH
40804: CALL_OW 254
40808: PPUSH
40809: LD_INT 5
40811: PPUSH
40812: CALL_OW 272
40816: PUSH
40817: LD_VAR 0 17
40821: PUSH
40822: LD_INT 1
40824: ARRAY
40825: PPUSH
40826: CALL_OW 251
40830: PPUSH
40831: LD_VAR 0 17
40835: PUSH
40836: LD_INT 1
40838: ARRAY
40839: PPUSH
40840: CALL_OW 254
40844: PPUSH
40845: LD_INT 5
40847: PPUSH
40848: CALL_OW 273
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40857: LD_VAR 0 16
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PPUSH
40866: LD_VAR 0 16
40870: PUSH
40871: LD_INT 2
40873: ARRAY
40874: PPUSH
40875: CALL_OW 488
40879: IFFALSE 40910
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40881: LD_VAR 0 13
40885: PPUSH
40886: LD_VAR 0 16
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PPUSH
40895: LD_VAR 0 16
40899: PUSH
40900: LD_INT 2
40902: ARRAY
40903: PPUSH
40904: CALL_OW 111
// continue ;
40908: GO 40390
// end ; end ; r := GetDir ( tmp ) ;
40910: LD_ADDR_VAR 0 15
40914: PUSH
40915: LD_VAR 0 13
40919: PPUSH
40920: CALL_OW 254
40924: ST_TO_ADDR
// if r = 5 then
40925: LD_VAR 0 15
40929: PUSH
40930: LD_INT 5
40932: EQUAL
40933: IFFALSE 40943
// r := 0 ;
40935: LD_ADDR_VAR 0 15
40939: PUSH
40940: LD_INT 0
40942: ST_TO_ADDR
// for j = r to 5 do
40943: LD_ADDR_VAR 0 10
40947: PUSH
40948: DOUBLE
40949: LD_VAR 0 15
40953: DEC
40954: ST_TO_ADDR
40955: LD_INT 5
40957: PUSH
40958: FOR_TO
40959: IFFALSE 41075
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40961: LD_ADDR_VAR 0 11
40965: PUSH
40966: LD_VAR 0 13
40970: PPUSH
40971: CALL_OW 250
40975: PPUSH
40976: LD_VAR 0 10
40980: PPUSH
40981: LD_INT 2
40983: PPUSH
40984: CALL_OW 272
40988: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40989: LD_ADDR_VAR 0 12
40993: PUSH
40994: LD_VAR 0 13
40998: PPUSH
40999: CALL_OW 251
41003: PPUSH
41004: LD_VAR 0 10
41008: PPUSH
41009: LD_INT 2
41011: PPUSH
41012: CALL_OW 273
41016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41017: LD_VAR 0 11
41021: PPUSH
41022: LD_VAR 0 12
41026: PPUSH
41027: CALL_OW 488
41031: IFFALSE 41050
41033: PUSH
41034: LD_VAR 0 11
41038: PPUSH
41039: LD_VAR 0 12
41043: PPUSH
41044: CALL_OW 428
41048: NOT
41049: AND
41050: IFFALSE 41073
// begin ComMoveXY ( tmp , _x , _y ) ;
41052: LD_VAR 0 13
41056: PPUSH
41057: LD_VAR 0 11
41061: PPUSH
41062: LD_VAR 0 12
41066: PPUSH
41067: CALL_OW 111
// break ;
41071: GO 41075
// end ; end ;
41073: GO 40958
41075: POP
41076: POP
// end ; end ;
41077: GO 40390
41079: POP
41080: POP
// end ;
41081: LD_VAR 0 8
41085: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41086: LD_INT 0
41088: PPUSH
// result := true ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_INT 1
41096: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41097: LD_VAR 0 2
41101: PUSH
41102: LD_INT 24
41104: DOUBLE
41105: EQUAL
41106: IFTRUE 41116
41108: LD_INT 33
41110: DOUBLE
41111: EQUAL
41112: IFTRUE 41116
41114: GO 41141
41116: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_INT 32
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 321
41134: PUSH
41135: LD_INT 2
41137: EQUAL
41138: ST_TO_ADDR
41139: GO 41457
41141: LD_INT 20
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41174
41149: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_INT 6
41157: PPUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 321
41167: PUSH
41168: LD_INT 2
41170: EQUAL
41171: ST_TO_ADDR
41172: GO 41457
41174: LD_INT 22
41176: DOUBLE
41177: EQUAL
41178: IFTRUE 41188
41180: LD_INT 36
41182: DOUBLE
41183: EQUAL
41184: IFTRUE 41188
41186: GO 41213
41188: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41189: LD_ADDR_VAR 0 3
41193: PUSH
41194: LD_INT 15
41196: PPUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 321
41206: PUSH
41207: LD_INT 2
41209: EQUAL
41210: ST_TO_ADDR
41211: GO 41457
41213: LD_INT 30
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41246
41221: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 20
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 321
41239: PUSH
41240: LD_INT 2
41242: EQUAL
41243: ST_TO_ADDR
41244: GO 41457
41246: LD_INT 28
41248: DOUBLE
41249: EQUAL
41250: IFTRUE 41260
41252: LD_INT 21
41254: DOUBLE
41255: EQUAL
41256: IFTRUE 41260
41258: GO 41285
41260: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_INT 21
41268: PPUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 321
41278: PUSH
41279: LD_INT 2
41281: EQUAL
41282: ST_TO_ADDR
41283: GO 41457
41285: LD_INT 16
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41318
41293: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 84
41301: PPUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 321
41311: PUSH
41312: LD_INT 2
41314: EQUAL
41315: ST_TO_ADDR
41316: GO 41457
41318: LD_INT 19
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41332
41324: LD_INT 23
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41357
41332: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 83
41340: PPUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 321
41350: PUSH
41351: LD_INT 2
41353: EQUAL
41354: ST_TO_ADDR
41355: GO 41457
41357: LD_INT 17
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41390
41365: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 39
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 321
41383: PUSH
41384: LD_INT 2
41386: EQUAL
41387: ST_TO_ADDR
41388: GO 41457
41390: LD_INT 18
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41423
41398: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_INT 40
41406: PPUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 321
41416: PUSH
41417: LD_INT 2
41419: EQUAL
41420: ST_TO_ADDR
41421: GO 41457
41423: LD_INT 27
41425: DOUBLE
41426: EQUAL
41427: IFTRUE 41431
41429: GO 41456
41431: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41432: LD_ADDR_VAR 0 3
41436: PUSH
41437: LD_INT 35
41439: PPUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL_OW 321
41449: PUSH
41450: LD_INT 2
41452: EQUAL
41453: ST_TO_ADDR
41454: GO 41457
41456: POP
// end ;
41457: LD_VAR 0 3
41461: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41462: LD_INT 0
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
// result := false ;
41475: LD_ADDR_VAR 0 6
41479: PUSH
41480: LD_INT 0
41482: ST_TO_ADDR
// if btype = b_depot then
41483: LD_VAR 0 2
41487: PUSH
41488: LD_INT 0
41490: EQUAL
41491: IFFALSE 41503
// begin result := true ;
41493: LD_ADDR_VAR 0 6
41497: PUSH
41498: LD_INT 1
41500: ST_TO_ADDR
// exit ;
41501: GO 42357
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41503: LD_VAR 0 1
41507: NOT
41508: IFTRUE 41533
41510: PUSH
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 266
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: IN
41531: NOT
41532: OR
41533: IFTRUE 41542
41535: PUSH
41536: LD_VAR 0 2
41540: NOT
41541: OR
41542: IFTRUE 41578
41544: PUSH
41545: LD_VAR 0 5
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 3
41561: PUSH
41562: LD_INT 4
41564: PUSH
41565: LD_INT 5
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: IN
41576: NOT
41577: OR
41578: IFTRUE 41597
41580: PUSH
41581: LD_VAR 0 3
41585: PPUSH
41586: LD_VAR 0 4
41590: PPUSH
41591: CALL_OW 488
41595: NOT
41596: OR
41597: IFFALSE 41601
// exit ;
41599: GO 42357
// side := GetSide ( depot ) ;
41601: LD_ADDR_VAR 0 9
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: CALL_OW 255
41615: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41616: LD_VAR 0 9
41620: PPUSH
41621: LD_VAR 0 2
41625: PPUSH
41626: CALL 41086 0 2
41630: NOT
41631: IFFALSE 41635
// exit ;
41633: GO 42357
// pom := GetBase ( depot ) ;
41635: LD_ADDR_VAR 0 10
41639: PUSH
41640: LD_VAR 0 1
41644: PPUSH
41645: CALL_OW 274
41649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41650: LD_ADDR_VAR 0 11
41654: PUSH
41655: LD_VAR 0 2
41659: PPUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: CALL_OW 248
41669: PPUSH
41670: CALL_OW 450
41674: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41675: LD_VAR 0 10
41679: PPUSH
41680: LD_INT 1
41682: PPUSH
41683: CALL_OW 275
41687: PUSH
41688: LD_VAR 0 11
41692: PUSH
41693: LD_INT 1
41695: ARRAY
41696: GREATEREQUAL
41697: IFFALSE 41723
41699: PUSH
41700: LD_VAR 0 10
41704: PPUSH
41705: LD_INT 2
41707: PPUSH
41708: CALL_OW 275
41712: PUSH
41713: LD_VAR 0 11
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: GREATEREQUAL
41722: AND
41723: IFFALSE 41749
41725: PUSH
41726: LD_VAR 0 10
41730: PPUSH
41731: LD_INT 3
41733: PPUSH
41734: CALL_OW 275
41738: PUSH
41739: LD_VAR 0 11
41743: PUSH
41744: LD_INT 3
41746: ARRAY
41747: GREATEREQUAL
41748: AND
41749: NOT
41750: IFFALSE 41754
// exit ;
41752: GO 42357
// if GetBType ( depot ) = b_depot then
41754: LD_VAR 0 1
41758: PPUSH
41759: CALL_OW 266
41763: PUSH
41764: LD_INT 0
41766: EQUAL
41767: IFFALSE 41779
// dist := 28 else
41769: LD_ADDR_VAR 0 14
41773: PUSH
41774: LD_INT 28
41776: ST_TO_ADDR
41777: GO 41787
// dist := 36 ;
41779: LD_ADDR_VAR 0 14
41783: PUSH
41784: LD_INT 36
41786: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41787: LD_VAR 0 1
41791: PPUSH
41792: LD_VAR 0 3
41796: PPUSH
41797: LD_VAR 0 4
41801: PPUSH
41802: CALL_OW 297
41806: PUSH
41807: LD_VAR 0 14
41811: GREATER
41812: IFFALSE 41816
// exit ;
41814: GO 42357
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41816: LD_ADDR_VAR 0 12
41820: PUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: LD_VAR 0 3
41830: PPUSH
41831: LD_VAR 0 4
41835: PPUSH
41836: LD_VAR 0 5
41840: PPUSH
41841: LD_VAR 0 1
41845: PPUSH
41846: CALL_OW 248
41850: PPUSH
41851: LD_INT 0
41853: PPUSH
41854: CALL 42362 0 6
41858: ST_TO_ADDR
// if not hexes then
41859: LD_VAR 0 12
41863: NOT
41864: IFFALSE 41868
// exit ;
41866: GO 42357
// hex := GetHexInfo ( x , y ) ;
41868: LD_ADDR_VAR 0 15
41872: PUSH
41873: LD_VAR 0 3
41877: PPUSH
41878: LD_VAR 0 4
41882: PPUSH
41883: CALL_OW 546
41887: ST_TO_ADDR
// if hex [ 1 ] then
41888: LD_VAR 0 15
41892: PUSH
41893: LD_INT 1
41895: ARRAY
41896: IFFALSE 41900
// exit ;
41898: GO 42357
// height := hex [ 2 ] ;
41900: LD_ADDR_VAR 0 13
41904: PUSH
41905: LD_VAR 0 15
41909: PUSH
41910: LD_INT 2
41912: ARRAY
41913: ST_TO_ADDR
// for i = 1 to hexes do
41914: LD_ADDR_VAR 0 7
41918: PUSH
41919: DOUBLE
41920: LD_INT 1
41922: DEC
41923: ST_TO_ADDR
41924: LD_VAR 0 12
41928: PUSH
41929: FOR_TO
41930: IFFALSE 42274
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41932: LD_VAR 0 12
41936: PUSH
41937: LD_VAR 0 7
41941: ARRAY
41942: PUSH
41943: LD_INT 1
41945: ARRAY
41946: PPUSH
41947: LD_VAR 0 12
41951: PUSH
41952: LD_VAR 0 7
41956: ARRAY
41957: PUSH
41958: LD_INT 2
41960: ARRAY
41961: PPUSH
41962: CALL_OW 488
41966: NOT
41967: IFTRUE 42009
41969: PUSH
41970: LD_VAR 0 12
41974: PUSH
41975: LD_VAR 0 7
41979: ARRAY
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: LD_VAR 0 12
41989: PUSH
41990: LD_VAR 0 7
41994: ARRAY
41995: PUSH
41996: LD_INT 2
41998: ARRAY
41999: PPUSH
42000: CALL_OW 428
42004: PUSH
42005: LD_INT 0
42007: GREATER
42008: OR
42009: IFTRUE 42047
42011: PUSH
42012: LD_VAR 0 12
42016: PUSH
42017: LD_VAR 0 7
42021: ARRAY
42022: PUSH
42023: LD_INT 1
42025: ARRAY
42026: PPUSH
42027: LD_VAR 0 12
42031: PUSH
42032: LD_VAR 0 7
42036: ARRAY
42037: PUSH
42038: LD_INT 2
42040: ARRAY
42041: PPUSH
42042: CALL_OW 351
42046: OR
42047: IFFALSE 42053
// exit ;
42049: POP
42050: POP
42051: GO 42357
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42053: LD_ADDR_VAR 0 8
42057: PUSH
42058: LD_VAR 0 12
42062: PUSH
42063: LD_VAR 0 7
42067: ARRAY
42068: PUSH
42069: LD_INT 1
42071: ARRAY
42072: PPUSH
42073: LD_VAR 0 12
42077: PUSH
42078: LD_VAR 0 7
42082: ARRAY
42083: PUSH
42084: LD_INT 2
42086: ARRAY
42087: PPUSH
42088: CALL_OW 546
42092: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42093: LD_VAR 0 8
42097: PUSH
42098: LD_INT 1
42100: ARRAY
42101: IFTRUE 42123
42103: PUSH
42104: LD_VAR 0 8
42108: PUSH
42109: LD_INT 2
42111: ARRAY
42112: PUSH
42113: LD_VAR 0 13
42117: PUSH
42118: LD_INT 2
42120: PLUS
42121: GREATER
42122: OR
42123: IFTRUE 42145
42125: PUSH
42126: LD_VAR 0 8
42130: PUSH
42131: LD_INT 2
42133: ARRAY
42134: PUSH
42135: LD_VAR 0 13
42139: PUSH
42140: LD_INT 2
42142: MINUS
42143: LESS
42144: OR
42145: IFTRUE 42213
42147: PUSH
42148: LD_VAR 0 8
42152: PUSH
42153: LD_INT 3
42155: ARRAY
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 8
42162: PUSH
42163: LD_INT 9
42165: PUSH
42166: LD_INT 10
42168: PUSH
42169: LD_INT 11
42171: PUSH
42172: LD_INT 12
42174: PUSH
42175: LD_INT 13
42177: PUSH
42178: LD_INT 16
42180: PUSH
42181: LD_INT 17
42183: PUSH
42184: LD_INT 18
42186: PUSH
42187: LD_INT 19
42189: PUSH
42190: LD_INT 20
42192: PUSH
42193: LD_INT 21
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: IN
42211: NOT
42212: OR
42213: IFTRUE 42226
42215: PUSH
42216: LD_VAR 0 8
42220: PUSH
42221: LD_INT 5
42223: ARRAY
42224: NOT
42225: OR
42226: IFTRUE 42266
42228: PUSH
42229: LD_VAR 0 8
42233: PUSH
42234: LD_INT 6
42236: ARRAY
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 7
42246: PUSH
42247: LD_INT 9
42249: PUSH
42250: LD_INT 10
42252: PUSH
42253: LD_INT 11
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: IN
42264: NOT
42265: OR
42266: IFFALSE 42272
// exit ;
42268: POP
42269: POP
42270: GO 42357
// end ;
42272: GO 41929
42274: POP
42275: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42276: LD_VAR 0 9
42280: PPUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: LD_VAR 0 4
42290: PPUSH
42291: LD_INT 20
42293: PPUSH
42294: CALL 34176 0 4
42298: PUSH
42299: LD_INT 4
42301: ARRAY
42302: IFFALSE 42306
// exit ;
42304: GO 42357
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42306: LD_VAR 0 2
42310: PUSH
42311: LD_INT 29
42313: PUSH
42314: LD_INT 30
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: IN
42321: IFFALSE 42345
42323: PUSH
42324: LD_VAR 0 3
42328: PPUSH
42329: LD_VAR 0 4
42333: PPUSH
42334: LD_VAR 0 9
42338: PPUSH
42339: CALL_OW 440
42343: NOT
42344: AND
42345: IFFALSE 42349
// exit ;
42347: GO 42357
// result := true ;
42349: LD_ADDR_VAR 0 6
42353: PUSH
42354: LD_INT 1
42356: ST_TO_ADDR
// end ;
42357: LD_VAR 0 6
42361: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42362: LD_INT 0
42364: PPUSH
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
42407: PPUSH
42408: PPUSH
42409: PPUSH
42410: PPUSH
42411: PPUSH
42412: PPUSH
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
42419: PPUSH
42420: PPUSH
42421: PPUSH
// result = [ ] ;
42422: LD_ADDR_VAR 0 7
42426: PUSH
42427: EMPTY
42428: ST_TO_ADDR
// temp_list = [ ] ;
42429: LD_ADDR_VAR 0 9
42433: PUSH
42434: EMPTY
42435: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42436: LD_VAR 0 4
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: LD_INT 4
42455: PUSH
42456: LD_INT 5
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: IN
42467: NOT
42468: IFTRUE 42511
42470: PUSH
42471: LD_VAR 0 1
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: IN
42486: IFFALSE 42510
42488: PUSH
42489: LD_VAR 0 5
42493: PUSH
42494: LD_INT 1
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: IN
42508: NOT
42509: AND
42510: OR
42511: IFFALSE 42515
// exit ;
42513: GO 60914
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42515: LD_VAR 0 1
42519: PUSH
42520: LD_INT 6
42522: PUSH
42523: LD_INT 7
42525: PUSH
42526: LD_INT 8
42528: PUSH
42529: LD_INT 13
42531: PUSH
42532: LD_INT 12
42534: PUSH
42535: LD_INT 15
42537: PUSH
42538: LD_INT 11
42540: PUSH
42541: LD_INT 14
42543: PUSH
42544: LD_INT 10
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: IN
42558: IFFALSE 42568
// btype = b_lab ;
42560: LD_ADDR_VAR 0 1
42564: PUSH
42565: LD_INT 6
42567: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42568: LD_VAR 0 6
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: IN
42587: NOT
42588: IFTRUE 42656
42590: PUSH
42591: LD_VAR 0 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: LD_INT 3
42607: PUSH
42608: LD_INT 6
42610: PUSH
42611: LD_INT 36
42613: PUSH
42614: LD_INT 4
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 31
42622: PUSH
42623: LD_INT 32
42625: PUSH
42626: LD_INT 33
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: IN
42642: NOT
42643: IFFALSE 42655
42645: PUSH
42646: LD_VAR 0 6
42650: PUSH
42651: LD_INT 1
42653: EQUAL
42654: AND
42655: OR
42656: IFTRUE 42688
42658: PUSH
42659: LD_VAR 0 1
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: IN
42674: NOT
42675: IFFALSE 42687
42677: PUSH
42678: LD_VAR 0 6
42682: PUSH
42683: LD_INT 2
42685: EQUAL
42686: AND
42687: OR
42688: IFFALSE 42698
// mode = 0 ;
42690: LD_ADDR_VAR 0 6
42694: PUSH
42695: LD_INT 0
42697: ST_TO_ADDR
// case mode of 0 :
42698: LD_VAR 0 6
42702: PUSH
42703: LD_INT 0
42705: DOUBLE
42706: EQUAL
42707: IFTRUE 42711
42709: GO 54164
42711: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42712: LD_ADDR_VAR 0 11
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42905: LD_ADDR_VAR 0 12
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43101: LD_ADDR_VAR 0 13
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: LD_INT 3
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43300: LD_ADDR_VAR 0 14
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43496: LD_ADDR_VAR 0 15
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43689: LD_ADDR_VAR 0 16
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43882: LD_ADDR_VAR 0 17
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44112: LD_ADDR_VAR 0 18
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44342: LD_ADDR_VAR 0 19
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44572: LD_ADDR_VAR 0 20
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44802: LD_ADDR_VAR 0 21
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45032: LD_ADDR_VAR 0 22
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45262: LD_ADDR_VAR 0 23
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45542: LD_ADDR_VAR 0 24
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 3
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45818: LD_ADDR_VAR 0 25
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 3
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 3
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46092: LD_ADDR_VAR 0 26
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46368: LD_ADDR_VAR 0 27
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46648: LD_ADDR_VAR 0 28
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46930: LD_ADDR_VAR 0 29
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47209: LD_ADDR_VAR 0 30
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47487: LD_ADDR_VAR 0 31
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 3
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47765: LD_ADDR_VAR 0 32
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48043: LD_ADDR_VAR 0 33
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 3
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48322: LD_ADDR_VAR 0 34
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48602: LD_ADDR_VAR 0 35
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48714: LD_ADDR_VAR 0 36
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48826: LD_ADDR_VAR 0 37
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48938: LD_ADDR_VAR 0 38
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49050: LD_ADDR_VAR 0 39
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49162: LD_ADDR_VAR 0 40
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49274: LD_ADDR_VAR 0 41
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49624: LD_ADDR_VAR 0 42
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49974: LD_ADDR_VAR 0 43
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50322: LD_ADDR_VAR 0 44
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: NEG
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50672: LD_ADDR_VAR 0 45
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51022: LD_ADDR_VAR 0 46
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51370: LD_ADDR_VAR 0 47
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51521: LD_ADDR_VAR 0 48
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51668: LD_ADDR_VAR 0 49
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51812: LD_ADDR_VAR 0 50
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51956: LD_ADDR_VAR 0 51
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52103: LD_ADDR_VAR 0 52
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52254: LD_ADDR_VAR 0 53
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52484: LD_ADDR_VAR 0 54
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52714: LD_ADDR_VAR 0 55
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52944: LD_ADDR_VAR 0 56
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53174: LD_ADDR_VAR 0 57
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53404: LD_ADDR_VAR 0 58
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53634: LD_ADDR_VAR 0 59
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53722: LD_ADDR_VAR 0 60
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53810: LD_ADDR_VAR 0 61
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53898: LD_ADDR_VAR 0 62
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53986: LD_ADDR_VAR 0 63
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54074: LD_ADDR_VAR 0 64
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// end ; 1 :
54162: GO 60059
54164: LD_INT 1
54166: DOUBLE
54167: EQUAL
54168: IFTRUE 54172
54170: GO 56795
54172: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54173: LD_ADDR_VAR 0 11
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54217: LD_ADDR_VAR 0 12
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54258: LD_ADDR_VAR 0 13
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54298: LD_ADDR_VAR 0 14
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54339: LD_ADDR_VAR 0 15
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54383: LD_ADDR_VAR 0 16
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: LD_INT 3
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54429: LD_ADDR_VAR 0 17
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54473: LD_ADDR_VAR 0 18
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54514: LD_ADDR_VAR 0 19
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54554: LD_ADDR_VAR 0 20
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54595: LD_ADDR_VAR 0 21
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54639: LD_ADDR_VAR 0 22
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54685: LD_ADDR_VAR 0 23
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 4
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54729: LD_ADDR_VAR 0 24
54733: PUSH
54734: LD_INT 3
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54770: LD_ADDR_VAR 0 25
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 4
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 4
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54810: LD_ADDR_VAR 0 26
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 4
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54851: LD_ADDR_VAR 0 27
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54895: LD_ADDR_VAR 0 28
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: LD_INT 3
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: LD_INT 4
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: LD_INT 3
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54941: LD_ADDR_VAR 0 29
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 4
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 5
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 4
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 6
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: LD_INT 6
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 5
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55096: LD_ADDR_VAR 0 30
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 5
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 5
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 6
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 6
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55239: LD_ADDR_VAR 0 31
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 3
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: PUSH
55287: LD_INT 4
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 5
55306: PUSH
55307: LD_INT 4
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 5
55316: PUSH
55317: LD_INT 5
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: LD_INT 5
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 6
55336: PUSH
55337: LD_INT 5
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 6
55346: PUSH
55347: LD_INT 6
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 5
55356: PUSH
55357: LD_INT 6
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55378: LD_ADDR_VAR 0 32
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 3
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 4
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 5
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 4
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 6
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 6
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 5
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55521: LD_ADDR_VAR 0 33
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 4
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 5
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 6
55641: NEG
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 6
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55676: LD_ADDR_VAR 0 34
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: LD_INT 4
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: NEG
55732: PUSH
55733: LD_INT 3
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 4
55743: NEG
55744: PUSH
55745: LD_INT 4
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: LD_INT 5
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 5
55767: NEG
55768: PUSH
55769: LD_INT 4
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 5
55779: NEG
55780: PUSH
55781: LD_INT 5
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 5
55791: NEG
55792: PUSH
55793: LD_INT 6
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 6
55803: NEG
55804: PUSH
55805: LD_INT 5
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 6
55815: NEG
55816: PUSH
55817: LD_INT 6
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55839: LD_ADDR_VAR 0 41
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55883: LD_ADDR_VAR 0 42
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55924: LD_ADDR_VAR 0 43
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55964: LD_ADDR_VAR 0 44
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56005: LD_ADDR_VAR 0 45
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56049: LD_ADDR_VAR 0 46
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56095: LD_ADDR_VAR 0 47
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 3
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56128: LD_ADDR_VAR 0 48
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56159: LD_ADDR_VAR 0 49
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56188: LD_ADDR_VAR 0 50
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56217: LD_ADDR_VAR 0 51
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56248: LD_ADDR_VAR 0 52
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56281: LD_ADDR_VAR 0 53
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 3
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56325: LD_ADDR_VAR 0 54
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56366: LD_ADDR_VAR 0 55
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56406: LD_ADDR_VAR 0 56
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56447: LD_ADDR_VAR 0 57
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56491: LD_ADDR_VAR 0 58
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56537: LD_ADDR_VAR 0 59
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56581: LD_ADDR_VAR 0 60
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56622: LD_ADDR_VAR 0 61
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56662: LD_ADDR_VAR 0 62
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56703: LD_ADDR_VAR 0 63
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56747: LD_ADDR_VAR 0 64
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: ST_TO_ADDR
// end ; 2 :
56793: GO 60059
56795: LD_INT 2
56797: DOUBLE
56798: EQUAL
56799: IFTRUE 56803
56801: GO 60058
56803: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56804: LD_ADDR_VAR 0 29
56808: PUSH
56809: LD_INT 4
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 5
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 5
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 4
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 4
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 4
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 4
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 4
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 4
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 5
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 5
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 4
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 4
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 4
57189: NEG
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: NEG
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: NEG
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: NEG
57250: PUSH
57251: LD_INT 4
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: LD_INT 5
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 5
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 5
57285: NEG
57286: PUSH
57287: LD_INT 3
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57342: LD_ADDR_VAR 0 30
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 5
57379: PUSH
57380: LD_INT 5
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: LD_INT 5
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 4
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: LD_INT 5
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 4
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 4
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 5
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 5
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 5
57611: NEG
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 4
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 4
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 4
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 5
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 4
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 3
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 4
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 5
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 5
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57889: LD_ADDR_VAR 0 31
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: LD_INT 5
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: NEG
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 4
58103: NEG
58104: PUSH
58105: LD_INT 5
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 5
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 5
58163: NEG
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: LD_INT 5
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: LD_INT 3
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 4
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 3
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 4
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 4
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 4
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 4
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58439: LD_ADDR_VAR 0 32
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 3
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 5
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 5
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: NEG
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: NEG
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 4
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 4
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 4
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 5
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 4
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 5
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 3
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: LD_INT 5
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 4
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: LD_INT 5
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 5
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58986: LD_ADDR_VAR 0 33
58990: PUSH
58991: LD_INT 4
58993: NEG
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: LD_INT 5
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: LD_INT 3
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 5
59053: NEG
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: NEG
59066: PUSH
59067: LD_INT 5
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: LD_INT 5
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: LD_INT 3
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 4
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 4
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 5
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 3
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 4
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 5
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 4
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59524: LD_ADDR_VAR 0 34
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 5
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 4
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 4
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 4
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 5
59746: PUSH
59747: LD_INT 4
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 5
59756: PUSH
59757: LD_INT 5
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: PUSH
59767: LD_INT 5
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 5
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: LD_INT 5
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 4
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 4
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 4
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 5
59965: NEG
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 5
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 5
59988: NEG
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: ST_TO_ADDR
// end ; end ;
60056: GO 60059
60058: POP
// case btype of b_depot , b_warehouse :
60059: LD_VAR 0 1
60063: PUSH
60064: LD_INT 0
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60078
60070: LD_INT 1
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60078
60076: GO 60279
60078: POP
// case nation of nation_american :
60079: LD_VAR 0 5
60083: PUSH
60084: LD_INT 1
60086: DOUBLE
60087: EQUAL
60088: IFTRUE 60092
60090: GO 60148
60092: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60093: LD_ADDR_VAR 0 9
60097: PUSH
60098: LD_VAR 0 11
60102: PUSH
60103: LD_VAR 0 12
60107: PUSH
60108: LD_VAR 0 13
60112: PUSH
60113: LD_VAR 0 14
60117: PUSH
60118: LD_VAR 0 15
60122: PUSH
60123: LD_VAR 0 16
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_VAR 0 4
60140: PUSH
60141: LD_INT 1
60143: PLUS
60144: ARRAY
60145: ST_TO_ADDR
60146: GO 60277
60148: LD_INT 2
60150: DOUBLE
60151: EQUAL
60152: IFTRUE 60156
60154: GO 60212
60156: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60157: LD_ADDR_VAR 0 9
60161: PUSH
60162: LD_VAR 0 17
60166: PUSH
60167: LD_VAR 0 18
60171: PUSH
60172: LD_VAR 0 19
60176: PUSH
60177: LD_VAR 0 20
60181: PUSH
60182: LD_VAR 0 21
60186: PUSH
60187: LD_VAR 0 22
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: PUSH
60200: LD_VAR 0 4
60204: PUSH
60205: LD_INT 1
60207: PLUS
60208: ARRAY
60209: ST_TO_ADDR
60210: GO 60277
60212: LD_INT 3
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60220
60218: GO 60276
60220: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60221: LD_ADDR_VAR 0 9
60225: PUSH
60226: LD_VAR 0 23
60230: PUSH
60231: LD_VAR 0 24
60235: PUSH
60236: LD_VAR 0 25
60240: PUSH
60241: LD_VAR 0 26
60245: PUSH
60246: LD_VAR 0 27
60250: PUSH
60251: LD_VAR 0 28
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: PUSH
60264: LD_VAR 0 4
60268: PUSH
60269: LD_INT 1
60271: PLUS
60272: ARRAY
60273: ST_TO_ADDR
60274: GO 60277
60276: POP
60277: GO 60832
60279: LD_INT 2
60281: DOUBLE
60282: EQUAL
60283: IFTRUE 60293
60285: LD_INT 3
60287: DOUBLE
60288: EQUAL
60289: IFTRUE 60293
60291: GO 60349
60293: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60294: LD_ADDR_VAR 0 9
60298: PUSH
60299: LD_VAR 0 29
60303: PUSH
60304: LD_VAR 0 30
60308: PUSH
60309: LD_VAR 0 31
60313: PUSH
60314: LD_VAR 0 32
60318: PUSH
60319: LD_VAR 0 33
60323: PUSH
60324: LD_VAR 0 34
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: PUSH
60337: LD_VAR 0 4
60341: PUSH
60342: LD_INT 1
60344: PLUS
60345: ARRAY
60346: ST_TO_ADDR
60347: GO 60832
60349: LD_INT 16
60351: DOUBLE
60352: EQUAL
60353: IFTRUE 60411
60355: LD_INT 17
60357: DOUBLE
60358: EQUAL
60359: IFTRUE 60411
60361: LD_INT 18
60363: DOUBLE
60364: EQUAL
60365: IFTRUE 60411
60367: LD_INT 19
60369: DOUBLE
60370: EQUAL
60371: IFTRUE 60411
60373: LD_INT 22
60375: DOUBLE
60376: EQUAL
60377: IFTRUE 60411
60379: LD_INT 20
60381: DOUBLE
60382: EQUAL
60383: IFTRUE 60411
60385: LD_INT 21
60387: DOUBLE
60388: EQUAL
60389: IFTRUE 60411
60391: LD_INT 23
60393: DOUBLE
60394: EQUAL
60395: IFTRUE 60411
60397: LD_INT 24
60399: DOUBLE
60400: EQUAL
60401: IFTRUE 60411
60403: LD_INT 25
60405: DOUBLE
60406: EQUAL
60407: IFTRUE 60411
60409: GO 60467
60411: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60412: LD_ADDR_VAR 0 9
60416: PUSH
60417: LD_VAR 0 35
60421: PUSH
60422: LD_VAR 0 36
60426: PUSH
60427: LD_VAR 0 37
60431: PUSH
60432: LD_VAR 0 38
60436: PUSH
60437: LD_VAR 0 39
60441: PUSH
60442: LD_VAR 0 40
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: PUSH
60455: LD_VAR 0 4
60459: PUSH
60460: LD_INT 1
60462: PLUS
60463: ARRAY
60464: ST_TO_ADDR
60465: GO 60832
60467: LD_INT 6
60469: DOUBLE
60470: EQUAL
60471: IFTRUE 60523
60473: LD_INT 7
60475: DOUBLE
60476: EQUAL
60477: IFTRUE 60523
60479: LD_INT 8
60481: DOUBLE
60482: EQUAL
60483: IFTRUE 60523
60485: LD_INT 13
60487: DOUBLE
60488: EQUAL
60489: IFTRUE 60523
60491: LD_INT 12
60493: DOUBLE
60494: EQUAL
60495: IFTRUE 60523
60497: LD_INT 15
60499: DOUBLE
60500: EQUAL
60501: IFTRUE 60523
60503: LD_INT 11
60505: DOUBLE
60506: EQUAL
60507: IFTRUE 60523
60509: LD_INT 14
60511: DOUBLE
60512: EQUAL
60513: IFTRUE 60523
60515: LD_INT 10
60517: DOUBLE
60518: EQUAL
60519: IFTRUE 60523
60521: GO 60579
60523: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60524: LD_ADDR_VAR 0 9
60528: PUSH
60529: LD_VAR 0 41
60533: PUSH
60534: LD_VAR 0 42
60538: PUSH
60539: LD_VAR 0 43
60543: PUSH
60544: LD_VAR 0 44
60548: PUSH
60549: LD_VAR 0 45
60553: PUSH
60554: LD_VAR 0 46
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: PUSH
60567: LD_VAR 0 4
60571: PUSH
60572: LD_INT 1
60574: PLUS
60575: ARRAY
60576: ST_TO_ADDR
60577: GO 60832
60579: LD_INT 36
60581: DOUBLE
60582: EQUAL
60583: IFTRUE 60587
60585: GO 60643
60587: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60588: LD_ADDR_VAR 0 9
60592: PUSH
60593: LD_VAR 0 47
60597: PUSH
60598: LD_VAR 0 48
60602: PUSH
60603: LD_VAR 0 49
60607: PUSH
60608: LD_VAR 0 50
60612: PUSH
60613: LD_VAR 0 51
60617: PUSH
60618: LD_VAR 0 52
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: PUSH
60631: LD_VAR 0 4
60635: PUSH
60636: LD_INT 1
60638: PLUS
60639: ARRAY
60640: ST_TO_ADDR
60641: GO 60832
60643: LD_INT 4
60645: DOUBLE
60646: EQUAL
60647: IFTRUE 60669
60649: LD_INT 5
60651: DOUBLE
60652: EQUAL
60653: IFTRUE 60669
60655: LD_INT 34
60657: DOUBLE
60658: EQUAL
60659: IFTRUE 60669
60661: LD_INT 37
60663: DOUBLE
60664: EQUAL
60665: IFTRUE 60669
60667: GO 60725
60669: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60670: LD_ADDR_VAR 0 9
60674: PUSH
60675: LD_VAR 0 53
60679: PUSH
60680: LD_VAR 0 54
60684: PUSH
60685: LD_VAR 0 55
60689: PUSH
60690: LD_VAR 0 56
60694: PUSH
60695: LD_VAR 0 57
60699: PUSH
60700: LD_VAR 0 58
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: PUSH
60713: LD_VAR 0 4
60717: PUSH
60718: LD_INT 1
60720: PLUS
60721: ARRAY
60722: ST_TO_ADDR
60723: GO 60832
60725: LD_INT 31
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60775
60731: LD_INT 32
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60775
60737: LD_INT 33
60739: DOUBLE
60740: EQUAL
60741: IFTRUE 60775
60743: LD_INT 27
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60775
60749: LD_INT 26
60751: DOUBLE
60752: EQUAL
60753: IFTRUE 60775
60755: LD_INT 28
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60775
60761: LD_INT 29
60763: DOUBLE
60764: EQUAL
60765: IFTRUE 60775
60767: LD_INT 30
60769: DOUBLE
60770: EQUAL
60771: IFTRUE 60775
60773: GO 60831
60775: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60776: LD_ADDR_VAR 0 9
60780: PUSH
60781: LD_VAR 0 59
60785: PUSH
60786: LD_VAR 0 60
60790: PUSH
60791: LD_VAR 0 61
60795: PUSH
60796: LD_VAR 0 62
60800: PUSH
60801: LD_VAR 0 63
60805: PUSH
60806: LD_VAR 0 64
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: PUSH
60819: LD_VAR 0 4
60823: PUSH
60824: LD_INT 1
60826: PLUS
60827: ARRAY
60828: ST_TO_ADDR
60829: GO 60832
60831: POP
// temp_list2 = [ ] ;
60832: LD_ADDR_VAR 0 10
60836: PUSH
60837: EMPTY
60838: ST_TO_ADDR
// for i in temp_list do
60839: LD_ADDR_VAR 0 8
60843: PUSH
60844: LD_VAR 0 9
60848: PUSH
60849: FOR_IN
60850: IFFALSE 60902
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60852: LD_ADDR_VAR 0 10
60856: PUSH
60857: LD_VAR 0 10
60861: PUSH
60862: LD_VAR 0 8
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PUSH
60871: LD_VAR 0 2
60875: PLUS
60876: PUSH
60877: LD_VAR 0 8
60881: PUSH
60882: LD_INT 2
60884: ARRAY
60885: PUSH
60886: LD_VAR 0 3
60890: PLUS
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: ADD
60899: ST_TO_ADDR
60900: GO 60849
60902: POP
60903: POP
// result = temp_list2 ;
60904: LD_ADDR_VAR 0 7
60908: PUSH
60909: LD_VAR 0 10
60913: ST_TO_ADDR
// end ;
60914: LD_VAR 0 7
60918: RET
// export function EnemyInRange ( unit , dist ) ; begin
60919: LD_INT 0
60921: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60922: LD_ADDR_VAR 0 3
60926: PUSH
60927: LD_VAR 0 1
60931: PPUSH
60932: CALL_OW 255
60936: PPUSH
60937: LD_VAR 0 1
60941: PPUSH
60942: CALL_OW 250
60946: PPUSH
60947: LD_VAR 0 1
60951: PPUSH
60952: CALL_OW 251
60956: PPUSH
60957: LD_VAR 0 2
60961: PPUSH
60962: CALL 34176 0 4
60966: PUSH
60967: LD_INT 4
60969: ARRAY
60970: ST_TO_ADDR
// end ;
60971: LD_VAR 0 3
60975: RET
// export function PlayerSeeMe ( unit ) ; begin
60976: LD_INT 0
60978: PPUSH
// result := See ( your_side , unit ) ;
60979: LD_ADDR_VAR 0 2
60983: PUSH
60984: LD_OWVAR 2
60988: PPUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 292
60998: ST_TO_ADDR
// end ;
60999: LD_VAR 0 2
61003: RET
// export function ReverseDir ( unit ) ; begin
61004: LD_INT 0
61006: PPUSH
// if not unit then
61007: LD_VAR 0 1
61011: NOT
61012: IFFALSE 61016
// exit ;
61014: GO 61039
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61016: LD_ADDR_VAR 0 2
61020: PUSH
61021: LD_VAR 0 1
61025: PPUSH
61026: CALL_OW 254
61030: PUSH
61031: LD_INT 3
61033: PLUS
61034: PUSH
61035: LD_INT 6
61037: MOD
61038: ST_TO_ADDR
// end ;
61039: LD_VAR 0 2
61043: RET
// export function ReverseArray ( array ) ; var i ; begin
61044: LD_INT 0
61046: PPUSH
61047: PPUSH
// if not array then
61048: LD_VAR 0 1
61052: NOT
61053: IFFALSE 61057
// exit ;
61055: GO 61112
// result := [ ] ;
61057: LD_ADDR_VAR 0 2
61061: PUSH
61062: EMPTY
61063: ST_TO_ADDR
// for i := array downto 1 do
61064: LD_ADDR_VAR 0 3
61068: PUSH
61069: DOUBLE
61070: LD_VAR 0 1
61074: INC
61075: ST_TO_ADDR
61076: LD_INT 1
61078: PUSH
61079: FOR_DOWNTO
61080: IFFALSE 61110
// result := Join ( result , array [ i ] ) ;
61082: LD_ADDR_VAR 0 2
61086: PUSH
61087: LD_VAR 0 2
61091: PPUSH
61092: LD_VAR 0 1
61096: PUSH
61097: LD_VAR 0 3
61101: ARRAY
61102: PPUSH
61103: CALL 65954 0 2
61107: ST_TO_ADDR
61108: GO 61079
61110: POP
61111: POP
// end ;
61112: LD_VAR 0 2
61116: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61117: LD_INT 0
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
61123: PPUSH
61124: PPUSH
// if not unit or not hexes then
61125: LD_VAR 0 1
61129: NOT
61130: IFTRUE 61139
61132: PUSH
61133: LD_VAR 0 2
61137: NOT
61138: OR
61139: IFFALSE 61143
// exit ;
61141: GO 61266
// dist := 9999 ;
61143: LD_ADDR_VAR 0 5
61147: PUSH
61148: LD_INT 9999
61150: ST_TO_ADDR
// for i = 1 to hexes do
61151: LD_ADDR_VAR 0 4
61155: PUSH
61156: DOUBLE
61157: LD_INT 1
61159: DEC
61160: ST_TO_ADDR
61161: LD_VAR 0 2
61165: PUSH
61166: FOR_TO
61167: IFFALSE 61254
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61169: LD_ADDR_VAR 0 6
61173: PUSH
61174: LD_VAR 0 1
61178: PPUSH
61179: LD_VAR 0 2
61183: PUSH
61184: LD_VAR 0 4
61188: ARRAY
61189: PUSH
61190: LD_INT 1
61192: ARRAY
61193: PPUSH
61194: LD_VAR 0 2
61198: PUSH
61199: LD_VAR 0 4
61203: ARRAY
61204: PUSH
61205: LD_INT 2
61207: ARRAY
61208: PPUSH
61209: CALL_OW 297
61213: ST_TO_ADDR
// if tdist < dist then
61214: LD_VAR 0 6
61218: PUSH
61219: LD_VAR 0 5
61223: LESS
61224: IFFALSE 61252
// begin hex := hexes [ i ] ;
61226: LD_ADDR_VAR 0 8
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_VAR 0 4
61240: ARRAY
61241: ST_TO_ADDR
// dist := tdist ;
61242: LD_ADDR_VAR 0 5
61246: PUSH
61247: LD_VAR 0 6
61251: ST_TO_ADDR
// end ; end ;
61252: GO 61166
61254: POP
61255: POP
// result := hex ;
61256: LD_ADDR_VAR 0 3
61260: PUSH
61261: LD_VAR 0 8
61265: ST_TO_ADDR
// end ;
61266: LD_VAR 0 3
61270: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61271: LD_INT 0
61273: PPUSH
61274: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61275: LD_VAR 0 1
61279: NOT
61280: IFTRUE 61319
61282: PUSH
61283: LD_VAR 0 1
61287: PUSH
61288: LD_INT 21
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 23
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PPUSH
61312: CALL_OW 69
61316: IN
61317: NOT
61318: OR
61319: IFFALSE 61323
// exit ;
61321: GO 61370
// for i = 1 to 3 do
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: DOUBLE
61329: LD_INT 1
61331: DEC
61332: ST_TO_ADDR
61333: LD_INT 3
61335: PUSH
61336: FOR_TO
61337: IFFALSE 61368
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61339: LD_VAR 0 1
61343: PPUSH
61344: CALL_OW 250
61348: PPUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: CALL_OW 251
61358: PPUSH
61359: LD_INT 1
61361: PPUSH
61362: CALL_OW 453
61366: GO 61336
61368: POP
61369: POP
// end ;
61370: LD_VAR 0 2
61374: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61375: LD_INT 0
61377: PPUSH
61378: PPUSH
61379: PPUSH
61380: PPUSH
61381: PPUSH
61382: PPUSH
// if not unit or not enemy_unit then
61383: LD_VAR 0 1
61387: NOT
61388: IFTRUE 61397
61390: PUSH
61391: LD_VAR 0 2
61395: NOT
61396: OR
61397: IFFALSE 61401
// exit ;
61399: GO 61872
// if GetLives ( i ) < 250 then
61401: LD_VAR 0 4
61405: PPUSH
61406: CALL_OW 256
61410: PUSH
61411: LD_INT 250
61413: LESS
61414: IFFALSE 61427
// begin ComAutodestruct ( i ) ;
61416: LD_VAR 0 4
61420: PPUSH
61421: CALL 61271 0 1
// exit ;
61425: GO 61872
// end ; x := GetX ( enemy_unit ) ;
61427: LD_ADDR_VAR 0 7
61431: PUSH
61432: LD_VAR 0 2
61436: PPUSH
61437: CALL_OW 250
61441: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61442: LD_ADDR_VAR 0 8
61446: PUSH
61447: LD_VAR 0 2
61451: PPUSH
61452: CALL_OW 251
61456: ST_TO_ADDR
// if not x or not y then
61457: LD_VAR 0 7
61461: NOT
61462: IFTRUE 61471
61464: PUSH
61465: LD_VAR 0 8
61469: NOT
61470: OR
61471: IFFALSE 61475
// exit ;
61473: GO 61872
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61475: LD_ADDR_VAR 0 6
61479: PUSH
61480: LD_VAR 0 7
61484: PPUSH
61485: LD_INT 0
61487: PPUSH
61488: LD_INT 4
61490: PPUSH
61491: CALL_OW 272
61495: PUSH
61496: LD_VAR 0 8
61500: PPUSH
61501: LD_INT 0
61503: PPUSH
61504: LD_INT 4
61506: PPUSH
61507: CALL_OW 273
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_VAR 0 7
61520: PPUSH
61521: LD_INT 1
61523: PPUSH
61524: LD_INT 4
61526: PPUSH
61527: CALL_OW 272
61531: PUSH
61532: LD_VAR 0 8
61536: PPUSH
61537: LD_INT 1
61539: PPUSH
61540: LD_INT 4
61542: PPUSH
61543: CALL_OW 273
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_VAR 0 7
61556: PPUSH
61557: LD_INT 2
61559: PPUSH
61560: LD_INT 4
61562: PPUSH
61563: CALL_OW 272
61567: PUSH
61568: LD_VAR 0 8
61572: PPUSH
61573: LD_INT 2
61575: PPUSH
61576: LD_INT 4
61578: PPUSH
61579: CALL_OW 273
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_VAR 0 7
61592: PPUSH
61593: LD_INT 3
61595: PPUSH
61596: LD_INT 4
61598: PPUSH
61599: CALL_OW 272
61603: PUSH
61604: LD_VAR 0 8
61608: PPUSH
61609: LD_INT 3
61611: PPUSH
61612: LD_INT 4
61614: PPUSH
61615: CALL_OW 273
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_VAR 0 7
61628: PPUSH
61629: LD_INT 4
61631: PPUSH
61632: LD_INT 4
61634: PPUSH
61635: CALL_OW 272
61639: PUSH
61640: LD_VAR 0 8
61644: PPUSH
61645: LD_INT 4
61647: PPUSH
61648: LD_INT 4
61650: PPUSH
61651: CALL_OW 273
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_VAR 0 7
61664: PPUSH
61665: LD_INT 5
61667: PPUSH
61668: LD_INT 4
61670: PPUSH
61671: CALL_OW 272
61675: PUSH
61676: LD_VAR 0 8
61680: PPUSH
61681: LD_INT 5
61683: PPUSH
61684: LD_INT 4
61686: PPUSH
61687: CALL_OW 273
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: ST_TO_ADDR
// for i = tmp downto 1 do
61704: LD_ADDR_VAR 0 4
61708: PUSH
61709: DOUBLE
61710: LD_VAR 0 6
61714: INC
61715: ST_TO_ADDR
61716: LD_INT 1
61718: PUSH
61719: FOR_DOWNTO
61720: IFFALSE 61823
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61722: LD_VAR 0 6
61726: PUSH
61727: LD_VAR 0 4
61731: ARRAY
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PPUSH
61737: LD_VAR 0 6
61741: PUSH
61742: LD_VAR 0 4
61746: ARRAY
61747: PUSH
61748: LD_INT 2
61750: ARRAY
61751: PPUSH
61752: CALL_OW 488
61756: NOT
61757: IFTRUE 61799
61759: PUSH
61760: LD_VAR 0 6
61764: PUSH
61765: LD_VAR 0 4
61769: ARRAY
61770: PUSH
61771: LD_INT 1
61773: ARRAY
61774: PPUSH
61775: LD_VAR 0 6
61779: PUSH
61780: LD_VAR 0 4
61784: ARRAY
61785: PUSH
61786: LD_INT 2
61788: ARRAY
61789: PPUSH
61790: CALL_OW 428
61794: PUSH
61795: LD_INT 0
61797: NONEQUAL
61798: OR
61799: IFFALSE 61821
// tmp := Delete ( tmp , i ) ;
61801: LD_ADDR_VAR 0 6
61805: PUSH
61806: LD_VAR 0 6
61810: PPUSH
61811: LD_VAR 0 4
61815: PPUSH
61816: CALL_OW 3
61820: ST_TO_ADDR
61821: GO 61719
61823: POP
61824: POP
// j := GetClosestHex ( unit , tmp ) ;
61825: LD_ADDR_VAR 0 5
61829: PUSH
61830: LD_VAR 0 1
61834: PPUSH
61835: LD_VAR 0 6
61839: PPUSH
61840: CALL 61117 0 2
61844: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_VAR 0 5
61854: PUSH
61855: LD_INT 1
61857: ARRAY
61858: PPUSH
61859: LD_VAR 0 5
61863: PUSH
61864: LD_INT 2
61866: ARRAY
61867: PPUSH
61868: CALL_OW 111
// end ;
61872: LD_VAR 0 3
61876: RET
// export function PrepareApemanSoldier ( ) ; begin
61877: LD_INT 0
61879: PPUSH
// uc_nation := 0 ;
61880: LD_ADDR_OWVAR 21
61884: PUSH
61885: LD_INT 0
61887: ST_TO_ADDR
// hc_sex := sex_male ;
61888: LD_ADDR_OWVAR 27
61892: PUSH
61893: LD_INT 1
61895: ST_TO_ADDR
// hc_name :=  ;
61896: LD_ADDR_OWVAR 26
61900: PUSH
61901: LD_STRING 
61903: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61904: LD_ADDR_OWVAR 28
61908: PUSH
61909: LD_INT 15
61911: ST_TO_ADDR
// hc_gallery :=  ;
61912: LD_ADDR_OWVAR 33
61916: PUSH
61917: LD_STRING 
61919: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61920: LD_ADDR_OWVAR 31
61924: PUSH
61925: LD_INT 0
61927: PPUSH
61928: LD_INT 3
61930: PPUSH
61931: CALL_OW 12
61935: PUSH
61936: LD_INT 0
61938: PPUSH
61939: LD_INT 3
61941: PPUSH
61942: CALL_OW 12
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61959: LD_ADDR_OWVAR 29
61963: PUSH
61964: LD_INT 12
61966: PUSH
61967: LD_INT 12
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// end ;
61974: LD_VAR 0 1
61978: RET
// export function PrepareApemanEngineer ( ) ; begin
61979: LD_INT 0
61981: PPUSH
// uc_nation := 0 ;
61982: LD_ADDR_OWVAR 21
61986: PUSH
61987: LD_INT 0
61989: ST_TO_ADDR
// hc_sex := sex_male ;
61990: LD_ADDR_OWVAR 27
61994: PUSH
61995: LD_INT 1
61997: ST_TO_ADDR
// hc_name :=  ;
61998: LD_ADDR_OWVAR 26
62002: PUSH
62003: LD_STRING 
62005: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62006: LD_ADDR_OWVAR 28
62010: PUSH
62011: LD_INT 16
62013: ST_TO_ADDR
// hc_gallery :=  ;
62014: LD_ADDR_OWVAR 33
62018: PUSH
62019: LD_STRING 
62021: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62022: LD_ADDR_OWVAR 31
62026: PUSH
62027: LD_INT 0
62029: PPUSH
62030: LD_INT 3
62032: PPUSH
62033: CALL_OW 12
62037: PUSH
62038: LD_INT 0
62040: PPUSH
62041: LD_INT 3
62043: PPUSH
62044: CALL_OW 12
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62061: LD_ADDR_OWVAR 29
62065: PUSH
62066: LD_INT 12
62068: PUSH
62069: LD_INT 12
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// end ;
62076: LD_VAR 0 1
62080: RET
// export function PrepareApeman ( agressivity ) ; begin
62081: LD_INT 0
62083: PPUSH
// uc_side := 0 ;
62084: LD_ADDR_OWVAR 20
62088: PUSH
62089: LD_INT 0
62091: ST_TO_ADDR
// uc_nation := 0 ;
62092: LD_ADDR_OWVAR 21
62096: PUSH
62097: LD_INT 0
62099: ST_TO_ADDR
// hc_sex := sex_male ;
62100: LD_ADDR_OWVAR 27
62104: PUSH
62105: LD_INT 1
62107: ST_TO_ADDR
// hc_class := class_apeman ;
62108: LD_ADDR_OWVAR 28
62112: PUSH
62113: LD_INT 12
62115: ST_TO_ADDR
// hc_gallery :=  ;
62116: LD_ADDR_OWVAR 33
62120: PUSH
62121: LD_STRING 
62123: ST_TO_ADDR
// hc_name :=  ;
62124: LD_ADDR_OWVAR 26
62128: PUSH
62129: LD_STRING 
62131: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62132: LD_ADDR_OWVAR 29
62136: PUSH
62137: LD_INT 12
62139: PUSH
62140: LD_INT 12
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: ST_TO_ADDR
// if agressivity = 0 then
62147: LD_VAR 0 1
62151: PUSH
62152: LD_INT 0
62154: EQUAL
62155: IFFALSE 62167
// hc_agressivity := 0 else
62157: LD_ADDR_OWVAR 35
62161: PUSH
62162: LD_INT 0
62164: ST_TO_ADDR
62165: GO 62188
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62167: LD_ADDR_OWVAR 35
62171: PUSH
62172: LD_VAR 0 1
62176: NEG
62177: PPUSH
62178: LD_VAR 0 1
62182: PPUSH
62183: CALL_OW 12
62187: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62188: LD_ADDR_OWVAR 31
62192: PUSH
62193: LD_INT 0
62195: PPUSH
62196: LD_INT 3
62198: PPUSH
62199: CALL_OW 12
62203: PUSH
62204: LD_INT 0
62206: PPUSH
62207: LD_INT 3
62209: PPUSH
62210: CALL_OW 12
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// end ;
62227: LD_VAR 0 2
62231: RET
// export function PrepareTiger ( agressivity ) ; begin
62232: LD_INT 0
62234: PPUSH
// uc_side := 0 ;
62235: LD_ADDR_OWVAR 20
62239: PUSH
62240: LD_INT 0
62242: ST_TO_ADDR
// uc_nation := 0 ;
62243: LD_ADDR_OWVAR 21
62247: PUSH
62248: LD_INT 0
62250: ST_TO_ADDR
// InitHc ;
62251: CALL_OW 19
// hc_class := class_tiger ;
62255: LD_ADDR_OWVAR 28
62259: PUSH
62260: LD_INT 14
62262: ST_TO_ADDR
// hc_gallery :=  ;
62263: LD_ADDR_OWVAR 33
62267: PUSH
62268: LD_STRING 
62270: ST_TO_ADDR
// hc_name :=  ;
62271: LD_ADDR_OWVAR 26
62275: PUSH
62276: LD_STRING 
62278: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62279: LD_ADDR_OWVAR 35
62283: PUSH
62284: LD_VAR 0 1
62288: NEG
62289: PPUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: CALL_OW 12
62299: ST_TO_ADDR
// end ;
62300: LD_VAR 0 2
62304: RET
// export function PrepareEnchidna ( ) ; begin
62305: LD_INT 0
62307: PPUSH
// uc_side := 0 ;
62308: LD_ADDR_OWVAR 20
62312: PUSH
62313: LD_INT 0
62315: ST_TO_ADDR
// uc_nation := 0 ;
62316: LD_ADDR_OWVAR 21
62320: PUSH
62321: LD_INT 0
62323: ST_TO_ADDR
// InitHc ;
62324: CALL_OW 19
// hc_class := class_baggie ;
62328: LD_ADDR_OWVAR 28
62332: PUSH
62333: LD_INT 13
62335: ST_TO_ADDR
// hc_gallery :=  ;
62336: LD_ADDR_OWVAR 33
62340: PUSH
62341: LD_STRING 
62343: ST_TO_ADDR
// hc_name :=  ;
62344: LD_ADDR_OWVAR 26
62348: PUSH
62349: LD_STRING 
62351: ST_TO_ADDR
// end ;
62352: LD_VAR 0 1
62356: RET
// export function PrepareFrog ( ) ; begin
62357: LD_INT 0
62359: PPUSH
// uc_side := 0 ;
62360: LD_ADDR_OWVAR 20
62364: PUSH
62365: LD_INT 0
62367: ST_TO_ADDR
// uc_nation := 0 ;
62368: LD_ADDR_OWVAR 21
62372: PUSH
62373: LD_INT 0
62375: ST_TO_ADDR
// InitHc ;
62376: CALL_OW 19
// hc_class := class_frog ;
62380: LD_ADDR_OWVAR 28
62384: PUSH
62385: LD_INT 19
62387: ST_TO_ADDR
// hc_gallery :=  ;
62388: LD_ADDR_OWVAR 33
62392: PUSH
62393: LD_STRING 
62395: ST_TO_ADDR
// hc_name :=  ;
62396: LD_ADDR_OWVAR 26
62400: PUSH
62401: LD_STRING 
62403: ST_TO_ADDR
// end ;
62404: LD_VAR 0 1
62408: RET
// export function PrepareFish ( ) ; begin
62409: LD_INT 0
62411: PPUSH
// uc_side := 0 ;
62412: LD_ADDR_OWVAR 20
62416: PUSH
62417: LD_INT 0
62419: ST_TO_ADDR
// uc_nation := 0 ;
62420: LD_ADDR_OWVAR 21
62424: PUSH
62425: LD_INT 0
62427: ST_TO_ADDR
// InitHc ;
62428: CALL_OW 19
// hc_class := class_fish ;
62432: LD_ADDR_OWVAR 28
62436: PUSH
62437: LD_INT 20
62439: ST_TO_ADDR
// hc_gallery :=  ;
62440: LD_ADDR_OWVAR 33
62444: PUSH
62445: LD_STRING 
62447: ST_TO_ADDR
// hc_name :=  ;
62448: LD_ADDR_OWVAR 26
62452: PUSH
62453: LD_STRING 
62455: ST_TO_ADDR
// end ;
62456: LD_VAR 0 1
62460: RET
// export function PrepareBird ( ) ; begin
62461: LD_INT 0
62463: PPUSH
// uc_side := 0 ;
62464: LD_ADDR_OWVAR 20
62468: PUSH
62469: LD_INT 0
62471: ST_TO_ADDR
// uc_nation := 0 ;
62472: LD_ADDR_OWVAR 21
62476: PUSH
62477: LD_INT 0
62479: ST_TO_ADDR
// InitHc ;
62480: CALL_OW 19
// hc_class := class_phororhacos ;
62484: LD_ADDR_OWVAR 28
62488: PUSH
62489: LD_INT 18
62491: ST_TO_ADDR
// hc_gallery :=  ;
62492: LD_ADDR_OWVAR 33
62496: PUSH
62497: LD_STRING 
62499: ST_TO_ADDR
// hc_name :=  ;
62500: LD_ADDR_OWVAR 26
62504: PUSH
62505: LD_STRING 
62507: ST_TO_ADDR
// end ;
62508: LD_VAR 0 1
62512: RET
// export function PrepareHorse ( ) ; begin
62513: LD_INT 0
62515: PPUSH
// uc_side := 0 ;
62516: LD_ADDR_OWVAR 20
62520: PUSH
62521: LD_INT 0
62523: ST_TO_ADDR
// uc_nation := 0 ;
62524: LD_ADDR_OWVAR 21
62528: PUSH
62529: LD_INT 0
62531: ST_TO_ADDR
// InitHc ;
62532: CALL_OW 19
// hc_class := class_horse ;
62536: LD_ADDR_OWVAR 28
62540: PUSH
62541: LD_INT 21
62543: ST_TO_ADDR
// hc_gallery :=  ;
62544: LD_ADDR_OWVAR 33
62548: PUSH
62549: LD_STRING 
62551: ST_TO_ADDR
// hc_name :=  ;
62552: LD_ADDR_OWVAR 26
62556: PUSH
62557: LD_STRING 
62559: ST_TO_ADDR
// end ;
62560: LD_VAR 0 1
62564: RET
// export function PrepareMastodont ( ) ; begin
62565: LD_INT 0
62567: PPUSH
// uc_side := 0 ;
62568: LD_ADDR_OWVAR 20
62572: PUSH
62573: LD_INT 0
62575: ST_TO_ADDR
// uc_nation := 0 ;
62576: LD_ADDR_OWVAR 21
62580: PUSH
62581: LD_INT 0
62583: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62584: LD_ADDR_OWVAR 37
62588: PUSH
62589: LD_INT 31
62591: ST_TO_ADDR
// vc_control := control_rider ;
62592: LD_ADDR_OWVAR 38
62596: PUSH
62597: LD_INT 4
62599: ST_TO_ADDR
// end ;
62600: LD_VAR 0 1
62604: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62605: LD_INT 0
62607: PPUSH
62608: PPUSH
62609: PPUSH
// uc_side = 0 ;
62610: LD_ADDR_OWVAR 20
62614: PUSH
62615: LD_INT 0
62617: ST_TO_ADDR
// uc_nation = 0 ;
62618: LD_ADDR_OWVAR 21
62622: PUSH
62623: LD_INT 0
62625: ST_TO_ADDR
// InitHc_All ( ) ;
62626: CALL_OW 584
// InitVc ;
62630: CALL_OW 20
// if mastodonts then
62634: LD_VAR 0 6
62638: IFFALSE 62705
// for i = 1 to mastodonts do
62640: LD_ADDR_VAR 0 11
62644: PUSH
62645: DOUBLE
62646: LD_INT 1
62648: DEC
62649: ST_TO_ADDR
62650: LD_VAR 0 6
62654: PUSH
62655: FOR_TO
62656: IFFALSE 62703
// begin vc_chassis := 31 ;
62658: LD_ADDR_OWVAR 37
62662: PUSH
62663: LD_INT 31
62665: ST_TO_ADDR
// vc_control := control_rider ;
62666: LD_ADDR_OWVAR 38
62670: PUSH
62671: LD_INT 4
62673: ST_TO_ADDR
// animal := CreateVehicle ;
62674: LD_ADDR_VAR 0 12
62678: PUSH
62679: CALL_OW 45
62683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62684: LD_VAR 0 12
62688: PPUSH
62689: LD_VAR 0 8
62693: PPUSH
62694: LD_INT 0
62696: PPUSH
62697: CALL 64847 0 3
// end ;
62701: GO 62655
62703: POP
62704: POP
// if horses then
62705: LD_VAR 0 5
62709: IFFALSE 62776
// for i = 1 to horses do
62711: LD_ADDR_VAR 0 11
62715: PUSH
62716: DOUBLE
62717: LD_INT 1
62719: DEC
62720: ST_TO_ADDR
62721: LD_VAR 0 5
62725: PUSH
62726: FOR_TO
62727: IFFALSE 62774
// begin hc_class := 21 ;
62729: LD_ADDR_OWVAR 28
62733: PUSH
62734: LD_INT 21
62736: ST_TO_ADDR
// hc_gallery :=  ;
62737: LD_ADDR_OWVAR 33
62741: PUSH
62742: LD_STRING 
62744: ST_TO_ADDR
// animal := CreateHuman ;
62745: LD_ADDR_VAR 0 12
62749: PUSH
62750: CALL_OW 44
62754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62755: LD_VAR 0 12
62759: PPUSH
62760: LD_VAR 0 8
62764: PPUSH
62765: LD_INT 0
62767: PPUSH
62768: CALL 64847 0 3
// end ;
62772: GO 62726
62774: POP
62775: POP
// if birds then
62776: LD_VAR 0 1
62780: IFFALSE 62847
// for i = 1 to birds do
62782: LD_ADDR_VAR 0 11
62786: PUSH
62787: DOUBLE
62788: LD_INT 1
62790: DEC
62791: ST_TO_ADDR
62792: LD_VAR 0 1
62796: PUSH
62797: FOR_TO
62798: IFFALSE 62845
// begin hc_class := 18 ;
62800: LD_ADDR_OWVAR 28
62804: PUSH
62805: LD_INT 18
62807: ST_TO_ADDR
// hc_gallery =  ;
62808: LD_ADDR_OWVAR 33
62812: PUSH
62813: LD_STRING 
62815: ST_TO_ADDR
// animal := CreateHuman ;
62816: LD_ADDR_VAR 0 12
62820: PUSH
62821: CALL_OW 44
62825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62826: LD_VAR 0 12
62830: PPUSH
62831: LD_VAR 0 8
62835: PPUSH
62836: LD_INT 0
62838: PPUSH
62839: CALL 64847 0 3
// end ;
62843: GO 62797
62845: POP
62846: POP
// if tigers then
62847: LD_VAR 0 2
62851: IFFALSE 62935
// for i = 1 to tigers do
62853: LD_ADDR_VAR 0 11
62857: PUSH
62858: DOUBLE
62859: LD_INT 1
62861: DEC
62862: ST_TO_ADDR
62863: LD_VAR 0 2
62867: PUSH
62868: FOR_TO
62869: IFFALSE 62933
// begin hc_class = class_tiger ;
62871: LD_ADDR_OWVAR 28
62875: PUSH
62876: LD_INT 14
62878: ST_TO_ADDR
// hc_gallery =  ;
62879: LD_ADDR_OWVAR 33
62883: PUSH
62884: LD_STRING 
62886: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62887: LD_ADDR_OWVAR 35
62891: PUSH
62892: LD_INT 7
62894: NEG
62895: PPUSH
62896: LD_INT 7
62898: PPUSH
62899: CALL_OW 12
62903: ST_TO_ADDR
// animal := CreateHuman ;
62904: LD_ADDR_VAR 0 12
62908: PUSH
62909: CALL_OW 44
62913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62914: LD_VAR 0 12
62918: PPUSH
62919: LD_VAR 0 8
62923: PPUSH
62924: LD_INT 0
62926: PPUSH
62927: CALL 64847 0 3
// end ;
62931: GO 62868
62933: POP
62934: POP
// if apemans then
62935: LD_VAR 0 3
62939: IFFALSE 63062
// for i = 1 to apemans do
62941: LD_ADDR_VAR 0 11
62945: PUSH
62946: DOUBLE
62947: LD_INT 1
62949: DEC
62950: ST_TO_ADDR
62951: LD_VAR 0 3
62955: PUSH
62956: FOR_TO
62957: IFFALSE 63060
// begin hc_class = class_apeman ;
62959: LD_ADDR_OWVAR 28
62963: PUSH
62964: LD_INT 12
62966: ST_TO_ADDR
// hc_gallery =  ;
62967: LD_ADDR_OWVAR 33
62971: PUSH
62972: LD_STRING 
62974: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62975: LD_ADDR_OWVAR 35
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PPUSH
62984: LD_INT 2
62986: PPUSH
62987: CALL_OW 12
62991: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62992: LD_ADDR_OWVAR 31
62996: PUSH
62997: LD_INT 1
62999: PPUSH
63000: LD_INT 3
63002: PPUSH
63003: CALL_OW 12
63007: PUSH
63008: LD_INT 1
63010: PPUSH
63011: LD_INT 3
63013: PPUSH
63014: CALL_OW 12
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: ST_TO_ADDR
// animal := CreateHuman ;
63031: LD_ADDR_VAR 0 12
63035: PUSH
63036: CALL_OW 44
63040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63041: LD_VAR 0 12
63045: PPUSH
63046: LD_VAR 0 8
63050: PPUSH
63051: LD_INT 0
63053: PPUSH
63054: CALL 64847 0 3
// end ;
63058: GO 62956
63060: POP
63061: POP
// if enchidnas then
63062: LD_VAR 0 4
63066: IFFALSE 63133
// for i = 1 to enchidnas do
63068: LD_ADDR_VAR 0 11
63072: PUSH
63073: DOUBLE
63074: LD_INT 1
63076: DEC
63077: ST_TO_ADDR
63078: LD_VAR 0 4
63082: PUSH
63083: FOR_TO
63084: IFFALSE 63131
// begin hc_class = 13 ;
63086: LD_ADDR_OWVAR 28
63090: PUSH
63091: LD_INT 13
63093: ST_TO_ADDR
// hc_gallery =  ;
63094: LD_ADDR_OWVAR 33
63098: PUSH
63099: LD_STRING 
63101: ST_TO_ADDR
// animal := CreateHuman ;
63102: LD_ADDR_VAR 0 12
63106: PUSH
63107: CALL_OW 44
63111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63112: LD_VAR 0 12
63116: PPUSH
63117: LD_VAR 0 8
63121: PPUSH
63122: LD_INT 0
63124: PPUSH
63125: CALL 64847 0 3
// end ;
63129: GO 63083
63131: POP
63132: POP
// if fishes then
63133: LD_VAR 0 7
63137: IFFALSE 63204
// for i = 1 to fishes do
63139: LD_ADDR_VAR 0 11
63143: PUSH
63144: DOUBLE
63145: LD_INT 1
63147: DEC
63148: ST_TO_ADDR
63149: LD_VAR 0 7
63153: PUSH
63154: FOR_TO
63155: IFFALSE 63202
// begin hc_class = 20 ;
63157: LD_ADDR_OWVAR 28
63161: PUSH
63162: LD_INT 20
63164: ST_TO_ADDR
// hc_gallery =  ;
63165: LD_ADDR_OWVAR 33
63169: PUSH
63170: LD_STRING 
63172: ST_TO_ADDR
// animal := CreateHuman ;
63173: LD_ADDR_VAR 0 12
63177: PUSH
63178: CALL_OW 44
63182: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63183: LD_VAR 0 12
63187: PPUSH
63188: LD_VAR 0 9
63192: PPUSH
63193: LD_INT 0
63195: PPUSH
63196: CALL 64847 0 3
// end ;
63200: GO 63154
63202: POP
63203: POP
// end ;
63204: LD_VAR 0 10
63208: RET
// export function WantHeal ( sci , unit ) ; begin
63209: LD_INT 0
63211: PPUSH
// if GetTaskList ( sci ) > 0 then
63212: LD_VAR 0 1
63216: PPUSH
63217: CALL_OW 437
63221: PUSH
63222: LD_INT 0
63224: GREATER
63225: IFFALSE 63297
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63227: LD_VAR 0 1
63231: PPUSH
63232: CALL_OW 437
63236: PUSH
63237: LD_INT 1
63239: ARRAY
63240: PUSH
63241: LD_INT 1
63243: ARRAY
63244: PUSH
63245: LD_STRING l
63247: EQUAL
63248: IFFALSE 63275
63250: PUSH
63251: LD_VAR 0 1
63255: PPUSH
63256: CALL_OW 437
63260: PUSH
63261: LD_INT 1
63263: ARRAY
63264: PUSH
63265: LD_INT 4
63267: ARRAY
63268: PUSH
63269: LD_VAR 0 2
63273: EQUAL
63274: AND
63275: IFFALSE 63287
// result := true else
63277: LD_ADDR_VAR 0 3
63281: PUSH
63282: LD_INT 1
63284: ST_TO_ADDR
63285: GO 63295
// result := false ;
63287: LD_ADDR_VAR 0 3
63291: PUSH
63292: LD_INT 0
63294: ST_TO_ADDR
// end else
63295: GO 63305
// result := false ;
63297: LD_ADDR_VAR 0 3
63301: PUSH
63302: LD_INT 0
63304: ST_TO_ADDR
// end ;
63305: LD_VAR 0 3
63309: RET
// export function HealTarget ( sci ) ; begin
63310: LD_INT 0
63312: PPUSH
// if not sci then
63313: LD_VAR 0 1
63317: NOT
63318: IFFALSE 63322
// exit ;
63320: GO 63387
// result := 0 ;
63322: LD_ADDR_VAR 0 2
63326: PUSH
63327: LD_INT 0
63329: ST_TO_ADDR
// if GetTaskList ( sci ) then
63330: LD_VAR 0 1
63334: PPUSH
63335: CALL_OW 437
63339: IFFALSE 63387
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 437
63350: PUSH
63351: LD_INT 1
63353: ARRAY
63354: PUSH
63355: LD_INT 1
63357: ARRAY
63358: PUSH
63359: LD_STRING l
63361: EQUAL
63362: IFFALSE 63387
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63364: LD_ADDR_VAR 0 2
63368: PUSH
63369: LD_VAR 0 1
63373: PPUSH
63374: CALL_OW 437
63378: PUSH
63379: LD_INT 1
63381: ARRAY
63382: PUSH
63383: LD_INT 4
63385: ARRAY
63386: ST_TO_ADDR
// end ;
63387: LD_VAR 0 2
63391: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63392: LD_INT 0
63394: PPUSH
63395: PPUSH
63396: PPUSH
63397: PPUSH
// if not base_units then
63398: LD_VAR 0 1
63402: NOT
63403: IFFALSE 63407
// exit ;
63405: GO 63494
// result := false ;
63407: LD_ADDR_VAR 0 2
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63415: LD_ADDR_VAR 0 5
63419: PUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: LD_INT 21
63427: PUSH
63428: LD_INT 3
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PPUSH
63435: CALL_OW 72
63439: ST_TO_ADDR
// if not tmp then
63440: LD_VAR 0 5
63444: NOT
63445: IFFALSE 63449
// exit ;
63447: GO 63494
// for i in tmp do
63449: LD_ADDR_VAR 0 3
63453: PUSH
63454: LD_VAR 0 5
63458: PUSH
63459: FOR_IN
63460: IFFALSE 63492
// begin result := EnemyInRange ( i , 22 ) ;
63462: LD_ADDR_VAR 0 2
63466: PUSH
63467: LD_VAR 0 3
63471: PPUSH
63472: LD_INT 22
63474: PPUSH
63475: CALL 60919 0 2
63479: ST_TO_ADDR
// if result then
63480: LD_VAR 0 2
63484: IFFALSE 63490
// exit ;
63486: POP
63487: POP
63488: GO 63494
// end ;
63490: GO 63459
63492: POP
63493: POP
// end ;
63494: LD_VAR 0 2
63498: RET
// export function FilterByTag ( units , tag ) ; begin
63499: LD_INT 0
63501: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63502: LD_ADDR_VAR 0 3
63506: PUSH
63507: LD_VAR 0 1
63511: PPUSH
63512: LD_INT 120
63514: PUSH
63515: LD_VAR 0 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PPUSH
63524: CALL_OW 72
63528: ST_TO_ADDR
// end ;
63529: LD_VAR 0 3
63533: RET
// export function IsDriver ( un ) ; begin
63534: LD_INT 0
63536: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63537: LD_ADDR_VAR 0 2
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 55
63549: PUSH
63550: EMPTY
63551: LIST
63552: PPUSH
63553: CALL_OW 69
63557: IN
63558: ST_TO_ADDR
// end ;
63559: LD_VAR 0 2
63563: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63564: LD_INT 0
63566: PPUSH
63567: PPUSH
// list := [ ] ;
63568: LD_ADDR_VAR 0 5
63572: PUSH
63573: EMPTY
63574: ST_TO_ADDR
// case d of 0 :
63575: LD_VAR 0 3
63579: PUSH
63580: LD_INT 0
63582: DOUBLE
63583: EQUAL
63584: IFTRUE 63588
63586: GO 63721
63588: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63589: LD_ADDR_VAR 0 5
63593: PUSH
63594: LD_VAR 0 1
63598: PUSH
63599: LD_INT 4
63601: MINUS
63602: PUSH
63603: LD_VAR 0 2
63607: PUSH
63608: LD_INT 4
63610: MINUS
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: LIST
63619: PUSH
63620: LD_VAR 0 1
63624: PUSH
63625: LD_INT 3
63627: MINUS
63628: PUSH
63629: LD_VAR 0 2
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: PUSH
63642: LD_VAR 0 1
63646: PUSH
63647: LD_INT 4
63649: PLUS
63650: PUSH
63651: LD_VAR 0 2
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: LIST
63663: PUSH
63664: LD_VAR 0 1
63668: PUSH
63669: LD_INT 3
63671: PLUS
63672: PUSH
63673: LD_VAR 0 2
63677: PUSH
63678: LD_INT 3
63680: PLUS
63681: PUSH
63682: LD_INT 5
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: LIST
63689: PUSH
63690: LD_VAR 0 1
63694: PUSH
63695: LD_VAR 0 2
63699: PUSH
63700: LD_INT 4
63702: PLUS
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// end ; 1 :
63719: GO 64419
63721: LD_INT 1
63723: DOUBLE
63724: EQUAL
63725: IFTRUE 63729
63727: GO 63862
63729: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63730: LD_ADDR_VAR 0 5
63734: PUSH
63735: LD_VAR 0 1
63739: PUSH
63740: LD_VAR 0 2
63744: PUSH
63745: LD_INT 4
63747: MINUS
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: PUSH
63757: LD_VAR 0 1
63761: PUSH
63762: LD_INT 3
63764: MINUS
63765: PUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_INT 3
63773: MINUS
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_INT 4
63790: MINUS
63791: PUSH
63792: LD_VAR 0 2
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: LIST
63804: PUSH
63805: LD_VAR 0 1
63809: PUSH
63810: LD_VAR 0 2
63814: PUSH
63815: LD_INT 3
63817: PLUS
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: PUSH
63827: LD_VAR 0 1
63831: PUSH
63832: LD_INT 4
63834: PLUS
63835: PUSH
63836: LD_VAR 0 2
63840: PUSH
63841: LD_INT 4
63843: PLUS
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// end ; 2 :
63860: GO 64419
63862: LD_INT 2
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63870
63868: GO 63999
63870: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63871: LD_ADDR_VAR 0 5
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_VAR 0 2
63885: PUSH
63886: LD_INT 3
63888: MINUS
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_VAR 0 1
63902: PUSH
63903: LD_INT 4
63905: PLUS
63906: PUSH
63907: LD_VAR 0 2
63911: PUSH
63912: LD_INT 4
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: PUSH
63920: LD_VAR 0 1
63924: PUSH
63925: LD_VAR 0 2
63929: PUSH
63930: LD_INT 4
63932: PLUS
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: LIST
63941: PUSH
63942: LD_VAR 0 1
63946: PUSH
63947: LD_INT 3
63949: MINUS
63950: PUSH
63951: LD_VAR 0 2
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: PUSH
63964: LD_VAR 0 1
63968: PUSH
63969: LD_INT 4
63971: MINUS
63972: PUSH
63973: LD_VAR 0 2
63977: PUSH
63978: LD_INT 4
63980: MINUS
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// end ; 3 :
63997: GO 64419
63999: LD_INT 3
64001: DOUBLE
64002: EQUAL
64003: IFTRUE 64007
64005: GO 64140
64007: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64008: LD_ADDR_VAR 0 5
64012: PUSH
64013: LD_VAR 0 1
64017: PUSH
64018: LD_INT 3
64020: PLUS
64021: PUSH
64022: LD_VAR 0 2
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 4
64042: PLUS
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: LD_INT 4
64051: PLUS
64052: PUSH
64053: LD_INT 5
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: PUSH
64061: LD_VAR 0 1
64065: PUSH
64066: LD_INT 4
64068: MINUS
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: LD_VAR 0 1
64087: PUSH
64088: LD_VAR 0 2
64092: PUSH
64093: LD_INT 4
64095: MINUS
64096: PUSH
64097: LD_INT 3
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: PUSH
64105: LD_VAR 0 1
64109: PUSH
64110: LD_INT 3
64112: MINUS
64113: PUSH
64114: LD_VAR 0 2
64118: PUSH
64119: LD_INT 3
64121: MINUS
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// end ; 4 :
64138: GO 64419
64140: LD_INT 4
64142: DOUBLE
64143: EQUAL
64144: IFTRUE 64148
64146: GO 64281
64148: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64149: LD_ADDR_VAR 0 5
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 4
64166: PLUS
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_INT 3
64183: PLUS
64184: PUSH
64185: LD_VAR 0 2
64189: PUSH
64190: LD_INT 3
64192: PLUS
64193: PUSH
64194: LD_INT 5
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: PUSH
64202: LD_VAR 0 1
64206: PUSH
64207: LD_INT 4
64209: PLUS
64210: PUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_INT 4
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 3
64236: MINUS
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_INT 4
64253: MINUS
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 4
64262: MINUS
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: LIST
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: ST_TO_ADDR
// end ; 5 :
64279: GO 64419
64281: LD_INT 5
64283: DOUBLE
64284: EQUAL
64285: IFTRUE 64289
64287: GO 64418
64289: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64290: LD_ADDR_VAR 0 5
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_INT 4
64302: MINUS
64303: PUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 4
64329: MINUS
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 1
64343: PUSH
64344: LD_INT 4
64346: PLUS
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: PLUS
64356: PUSH
64357: LD_INT 5
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_INT 3
64372: PLUS
64373: PUSH
64374: LD_VAR 0 2
64378: PUSH
64379: LD_INT 4
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: LIST
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: LD_VAR 0 2
64396: PUSH
64397: LD_INT 3
64399: PLUS
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: ST_TO_ADDR
// end ; end ;
64416: GO 64419
64418: POP
// result := list ;
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_VAR 0 5
64428: ST_TO_ADDR
// end ;
64429: LD_VAR 0 4
64433: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64434: LD_INT 0
64436: PPUSH
64437: PPUSH
64438: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64439: LD_VAR 0 1
64443: NOT
64444: IFTRUE 64472
64446: PUSH
64447: LD_VAR 0 2
64451: PUSH
64452: LD_INT 1
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: LD_INT 3
64460: PUSH
64461: LD_INT 4
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: IN
64470: NOT
64471: OR
64472: IFFALSE 64476
// exit ;
64474: GO 64559
// tmp := [ ] ;
64476: LD_ADDR_VAR 0 5
64480: PUSH
64481: EMPTY
64482: ST_TO_ADDR
// for i in units do
64483: LD_ADDR_VAR 0 4
64487: PUSH
64488: LD_VAR 0 1
64492: PUSH
64493: FOR_IN
64494: IFFALSE 64528
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64496: LD_ADDR_VAR 0 5
64500: PUSH
64501: LD_VAR 0 5
64505: PPUSH
64506: LD_VAR 0 4
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: CALL_OW 259
64520: PPUSH
64521: CALL 65954 0 2
64525: ST_TO_ADDR
64526: GO 64493
64528: POP
64529: POP
// if not tmp then
64530: LD_VAR 0 5
64534: NOT
64535: IFFALSE 64539
// exit ;
64537: GO 64559
// result := SortListByListDesc ( units , tmp ) ;
64539: LD_ADDR_VAR 0 3
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: LD_VAR 0 5
64553: PPUSH
64554: CALL_OW 77
64558: ST_TO_ADDR
// end ;
64559: LD_VAR 0 3
64563: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64564: LD_INT 0
64566: PPUSH
64567: PPUSH
64568: PPUSH
// result := false ;
64569: LD_ADDR_VAR 0 3
64573: PUSH
64574: LD_INT 0
64576: ST_TO_ADDR
// if not building then
64577: LD_VAR 0 2
64581: NOT
64582: IFFALSE 64586
// exit ;
64584: GO 64730
// x := GetX ( building ) ;
64586: LD_ADDR_VAR 0 4
64590: PUSH
64591: LD_VAR 0 2
64595: PPUSH
64596: CALL_OW 250
64600: ST_TO_ADDR
// y := GetY ( building ) ;
64601: LD_ADDR_VAR 0 5
64605: PUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: CALL_OW 251
64615: ST_TO_ADDR
// if not x or not y then
64616: LD_VAR 0 4
64620: NOT
64621: IFTRUE 64630
64623: PUSH
64624: LD_VAR 0 5
64628: NOT
64629: OR
64630: IFFALSE 64634
// exit ;
64632: GO 64730
// if GetTaskList ( unit ) then
64634: LD_VAR 0 1
64638: PPUSH
64639: CALL_OW 437
64643: IFFALSE 64730
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64645: LD_STRING e
64647: PUSH
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL_OW 437
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: LD_INT 1
64664: ARRAY
64665: EQUAL
64666: IFFALSE 64693
64668: PUSH
64669: LD_VAR 0 4
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 437
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PUSH
64688: LD_INT 2
64690: ARRAY
64691: EQUAL
64692: AND
64693: IFFALSE 64720
64695: PUSH
64696: LD_VAR 0 5
64700: PUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: CALL_OW 437
64710: PUSH
64711: LD_INT 1
64713: ARRAY
64714: PUSH
64715: LD_INT 3
64717: ARRAY
64718: EQUAL
64719: AND
64720: IFFALSE 64730
// result := true end ;
64722: LD_ADDR_VAR 0 3
64726: PUSH
64727: LD_INT 1
64729: ST_TO_ADDR
// end ;
64730: LD_VAR 0 3
64734: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64735: LD_INT 0
64737: PPUSH
// result := false ;
64738: LD_ADDR_VAR 0 4
64742: PUSH
64743: LD_INT 0
64745: ST_TO_ADDR
// if GetTaskList ( unit ) then
64746: LD_VAR 0 1
64750: PPUSH
64751: CALL_OW 437
64755: IFFALSE 64842
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64757: LD_STRING M
64759: PUSH
64760: LD_VAR 0 1
64764: PPUSH
64765: CALL_OW 437
64769: PUSH
64770: LD_INT 1
64772: ARRAY
64773: PUSH
64774: LD_INT 1
64776: ARRAY
64777: EQUAL
64778: IFFALSE 64805
64780: PUSH
64781: LD_VAR 0 2
64785: PUSH
64786: LD_VAR 0 1
64790: PPUSH
64791: CALL_OW 437
64795: PUSH
64796: LD_INT 1
64798: ARRAY
64799: PUSH
64800: LD_INT 2
64802: ARRAY
64803: EQUAL
64804: AND
64805: IFFALSE 64832
64807: PUSH
64808: LD_VAR 0 3
64812: PUSH
64813: LD_VAR 0 1
64817: PPUSH
64818: CALL_OW 437
64822: PUSH
64823: LD_INT 1
64825: ARRAY
64826: PUSH
64827: LD_INT 3
64829: ARRAY
64830: EQUAL
64831: AND
64832: IFFALSE 64842
// result := true ;
64834: LD_ADDR_VAR 0 4
64838: PUSH
64839: LD_INT 1
64841: ST_TO_ADDR
// end ; end ;
64842: LD_VAR 0 4
64846: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64847: LD_INT 0
64849: PPUSH
64850: PPUSH
64851: PPUSH
64852: PPUSH
// if not unit or not area then
64853: LD_VAR 0 1
64857: NOT
64858: IFTRUE 64867
64860: PUSH
64861: LD_VAR 0 2
64865: NOT
64866: OR
64867: IFFALSE 64871
// exit ;
64869: GO 65047
// tmp := AreaToList ( area , i ) ;
64871: LD_ADDR_VAR 0 6
64875: PUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: LD_VAR 0 5
64885: PPUSH
64886: CALL_OW 517
64890: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64891: LD_ADDR_VAR 0 5
64895: PUSH
64896: DOUBLE
64897: LD_INT 1
64899: DEC
64900: ST_TO_ADDR
64901: LD_VAR 0 6
64905: PUSH
64906: LD_INT 1
64908: ARRAY
64909: PUSH
64910: FOR_TO
64911: IFFALSE 65045
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64913: LD_ADDR_VAR 0 7
64917: PUSH
64918: LD_VAR 0 6
64922: PUSH
64923: LD_INT 1
64925: ARRAY
64926: PUSH
64927: LD_VAR 0 5
64931: ARRAY
64932: PUSH
64933: LD_VAR 0 6
64937: PUSH
64938: LD_INT 2
64940: ARRAY
64941: PUSH
64942: LD_VAR 0 5
64946: ARRAY
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64952: LD_INT 92
64954: PUSH
64955: LD_VAR 0 7
64959: PUSH
64960: LD_INT 1
64962: ARRAY
64963: PUSH
64964: LD_VAR 0 7
64968: PUSH
64969: LD_INT 2
64971: ARRAY
64972: PUSH
64973: LD_INT 2
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: PPUSH
64982: CALL_OW 69
64986: PUSH
64987: LD_INT 0
64989: EQUAL
64990: IFFALSE 65043
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64992: LD_VAR 0 1
64996: PPUSH
64997: LD_VAR 0 7
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PPUSH
65006: LD_VAR 0 7
65010: PUSH
65011: LD_INT 2
65013: ARRAY
65014: PPUSH
65015: LD_VAR 0 3
65019: PPUSH
65020: CALL_OW 48
// result := IsPlaced ( unit ) ;
65024: LD_ADDR_VAR 0 4
65028: PUSH
65029: LD_VAR 0 1
65033: PPUSH
65034: CALL_OW 305
65038: ST_TO_ADDR
// exit ;
65039: POP
65040: POP
65041: GO 65047
// end ; end ;
65043: GO 64910
65045: POP
65046: POP
// end ;
65047: LD_VAR 0 4
65051: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65052: LD_INT 0
65054: PPUSH
65055: PPUSH
65056: PPUSH
// if not side or side > 8 then
65057: LD_VAR 0 1
65061: NOT
65062: IFTRUE 65074
65064: PUSH
65065: LD_VAR 0 1
65069: PUSH
65070: LD_INT 8
65072: GREATER
65073: OR
65074: IFFALSE 65078
// exit ;
65076: GO 65265
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65078: LD_ADDR_VAR 0 4
65082: PUSH
65083: LD_INT 22
65085: PUSH
65086: LD_VAR 0 1
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 21
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PPUSH
65109: CALL_OW 69
65113: ST_TO_ADDR
// if not tmp then
65114: LD_VAR 0 4
65118: NOT
65119: IFFALSE 65123
// exit ;
65121: GO 65265
// enable_addtolog := true ;
65123: LD_ADDR_OWVAR 81
65127: PUSH
65128: LD_INT 1
65130: ST_TO_ADDR
// AddToLog ( [ ) ;
65131: LD_STRING [
65133: PPUSH
65134: CALL_OW 561
// for i in tmp do
65138: LD_ADDR_VAR 0 3
65142: PUSH
65143: LD_VAR 0 4
65147: PUSH
65148: FOR_IN
65149: IFFALSE 65256
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65151: LD_STRING [
65153: PUSH
65154: LD_VAR 0 3
65158: PPUSH
65159: CALL_OW 266
65163: STR
65164: PUSH
65165: LD_STRING , 
65167: STR
65168: PUSH
65169: LD_VAR 0 3
65173: PPUSH
65174: CALL_OW 250
65178: STR
65179: PUSH
65180: LD_STRING , 
65182: STR
65183: PUSH
65184: LD_VAR 0 3
65188: PPUSH
65189: CALL_OW 251
65193: STR
65194: PUSH
65195: LD_STRING , 
65197: STR
65198: PUSH
65199: LD_VAR 0 3
65203: PPUSH
65204: CALL_OW 254
65208: STR
65209: PUSH
65210: LD_STRING , 
65212: STR
65213: PUSH
65214: LD_VAR 0 3
65218: PPUSH
65219: LD_INT 1
65221: PPUSH
65222: CALL_OW 268
65226: STR
65227: PUSH
65228: LD_STRING , 
65230: STR
65231: PUSH
65232: LD_VAR 0 3
65236: PPUSH
65237: LD_INT 2
65239: PPUSH
65240: CALL_OW 268
65244: STR
65245: PUSH
65246: LD_STRING ],
65248: STR
65249: PPUSH
65250: CALL_OW 561
// end ;
65254: GO 65148
65256: POP
65257: POP
// AddToLog ( ]; ) ;
65258: LD_STRING ];
65260: PPUSH
65261: CALL_OW 561
// end ;
65265: LD_VAR 0 2
65269: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65270: LD_INT 0
65272: PPUSH
65273: PPUSH
65274: PPUSH
65275: PPUSH
65276: PPUSH
// if not area or not rate or not max then
65277: LD_VAR 0 1
65281: NOT
65282: IFTRUE 65291
65284: PUSH
65285: LD_VAR 0 2
65289: NOT
65290: OR
65291: IFTRUE 65300
65293: PUSH
65294: LD_VAR 0 4
65298: NOT
65299: OR
65300: IFFALSE 65304
// exit ;
65302: GO 65493
// while 1 do
65304: LD_INT 1
65306: IFFALSE 65493
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65308: LD_ADDR_VAR 0 9
65312: PUSH
65313: LD_VAR 0 1
65317: PPUSH
65318: LD_INT 1
65320: PPUSH
65321: CALL_OW 287
65325: PUSH
65326: LD_INT 10
65328: MUL
65329: ST_TO_ADDR
// r := rate / 10 ;
65330: LD_ADDR_VAR 0 7
65334: PUSH
65335: LD_VAR 0 2
65339: PUSH
65340: LD_INT 10
65342: DIVREAL
65343: ST_TO_ADDR
// time := 1 1$00 ;
65344: LD_ADDR_VAR 0 8
65348: PUSH
65349: LD_INT 2100
65351: ST_TO_ADDR
// if amount < min then
65352: LD_VAR 0 9
65356: PUSH
65357: LD_VAR 0 3
65361: LESS
65362: IFFALSE 65380
// r := r * 2 else
65364: LD_ADDR_VAR 0 7
65368: PUSH
65369: LD_VAR 0 7
65373: PUSH
65374: LD_INT 2
65376: MUL
65377: ST_TO_ADDR
65378: GO 65406
// if amount > max then
65380: LD_VAR 0 9
65384: PUSH
65385: LD_VAR 0 4
65389: GREATER
65390: IFFALSE 65406
// r := r / 2 ;
65392: LD_ADDR_VAR 0 7
65396: PUSH
65397: LD_VAR 0 7
65401: PUSH
65402: LD_INT 2
65404: DIVREAL
65405: ST_TO_ADDR
// time := time / r ;
65406: LD_ADDR_VAR 0 8
65410: PUSH
65411: LD_VAR 0 8
65415: PUSH
65416: LD_VAR 0 7
65420: DIVREAL
65421: ST_TO_ADDR
// if time < 0 then
65422: LD_VAR 0 8
65426: PUSH
65427: LD_INT 0
65429: LESS
65430: IFFALSE 65447
// time := time * - 1 ;
65432: LD_ADDR_VAR 0 8
65436: PUSH
65437: LD_VAR 0 8
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: MUL
65446: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65447: LD_VAR 0 8
65451: PUSH
65452: LD_INT 35
65454: PPUSH
65455: LD_INT 875
65457: PPUSH
65458: CALL_OW 12
65462: PLUS
65463: PPUSH
65464: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65468: LD_INT 1
65470: PPUSH
65471: LD_INT 5
65473: PPUSH
65474: CALL_OW 12
65478: PPUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: LD_INT 1
65486: PPUSH
65487: CALL_OW 55
// end ;
65491: GO 65304
// end ;
65493: LD_VAR 0 5
65497: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65498: LD_INT 0
65500: PPUSH
65501: PPUSH
65502: PPUSH
65503: PPUSH
65504: PPUSH
65505: PPUSH
65506: PPUSH
65507: PPUSH
// if not turrets or not factories then
65508: LD_VAR 0 1
65512: NOT
65513: IFTRUE 65522
65515: PUSH
65516: LD_VAR 0 2
65520: NOT
65521: OR
65522: IFFALSE 65526
// exit ;
65524: GO 65833
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65526: LD_ADDR_VAR 0 10
65530: PUSH
65531: LD_INT 5
65533: PUSH
65534: LD_INT 6
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 24
65568: PUSH
65569: LD_INT 25
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 23
65578: PUSH
65579: LD_INT 27
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 42
65592: PUSH
65593: LD_INT 43
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 44
65602: PUSH
65603: LD_INT 46
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 45
65612: PUSH
65613: LD_INT 47
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: ST_TO_ADDR
// result := [ ] ;
65630: LD_ADDR_VAR 0 3
65634: PUSH
65635: EMPTY
65636: ST_TO_ADDR
// for i in turrets do
65637: LD_ADDR_VAR 0 4
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: FOR_IN
65648: IFFALSE 65831
// begin nat := GetNation ( i ) ;
65650: LD_ADDR_VAR 0 7
65654: PUSH
65655: LD_VAR 0 4
65659: PPUSH
65660: CALL_OW 248
65664: ST_TO_ADDR
// weapon := 0 ;
65665: LD_ADDR_VAR 0 8
65669: PUSH
65670: LD_INT 0
65672: ST_TO_ADDR
// if not nat then
65673: LD_VAR 0 7
65677: NOT
65678: IFFALSE 65682
// continue ;
65680: GO 65647
// for j in list [ nat ] do
65682: LD_ADDR_VAR 0 5
65686: PUSH
65687: LD_VAR 0 10
65691: PUSH
65692: LD_VAR 0 7
65696: ARRAY
65697: PUSH
65698: FOR_IN
65699: IFFALSE 65740
// if GetBWeapon ( i ) = j [ 1 ] then
65701: LD_VAR 0 4
65705: PPUSH
65706: CALL_OW 269
65710: PUSH
65711: LD_VAR 0 5
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: EQUAL
65720: IFFALSE 65738
// begin weapon := j [ 2 ] ;
65722: LD_ADDR_VAR 0 8
65726: PUSH
65727: LD_VAR 0 5
65731: PUSH
65732: LD_INT 2
65734: ARRAY
65735: ST_TO_ADDR
// break ;
65736: GO 65740
// end ;
65738: GO 65698
65740: POP
65741: POP
// if not weapon then
65742: LD_VAR 0 8
65746: NOT
65747: IFFALSE 65751
// continue ;
65749: GO 65647
// for k in factories do
65751: LD_ADDR_VAR 0 6
65755: PUSH
65756: LD_VAR 0 2
65760: PUSH
65761: FOR_IN
65762: IFFALSE 65827
// begin weapons := AvailableWeaponList ( k ) ;
65764: LD_ADDR_VAR 0 9
65768: PUSH
65769: LD_VAR 0 6
65773: PPUSH
65774: CALL_OW 478
65778: ST_TO_ADDR
// if not weapons then
65779: LD_VAR 0 9
65783: NOT
65784: IFFALSE 65788
// continue ;
65786: GO 65761
// if weapon in weapons then
65788: LD_VAR 0 8
65792: PUSH
65793: LD_VAR 0 9
65797: IN
65798: IFFALSE 65825
// begin result := [ i , weapon ] ;
65800: LD_ADDR_VAR 0 3
65804: PUSH
65805: LD_VAR 0 4
65809: PUSH
65810: LD_VAR 0 8
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// exit ;
65819: POP
65820: POP
65821: POP
65822: POP
65823: GO 65833
// end ; end ;
65825: GO 65761
65827: POP
65828: POP
// end ;
65829: GO 65647
65831: POP
65832: POP
// end ;
65833: LD_VAR 0 3
65837: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65838: LD_INT 0
65840: PPUSH
// if not side or side > 8 then
65841: LD_VAR 0 3
65845: NOT
65846: IFTRUE 65858
65848: PUSH
65849: LD_VAR 0 3
65853: PUSH
65854: LD_INT 8
65856: GREATER
65857: OR
65858: IFFALSE 65862
// exit ;
65860: GO 65921
// if not range then
65862: LD_VAR 0 4
65866: NOT
65867: IFFALSE 65878
// range := - 12 ;
65869: LD_ADDR_VAR 0 4
65873: PUSH
65874: LD_INT 12
65876: NEG
65877: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65878: LD_VAR 0 1
65882: PPUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: LD_VAR 0 3
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: CALL_OW 331
// end ;
65921: LD_VAR 0 5
65925: RET
// export function Video ( mode ) ; begin
65926: LD_INT 0
65928: PPUSH
// ingame_video = mode ;
65929: LD_ADDR_OWVAR 52
65933: PUSH
65934: LD_VAR 0 1
65938: ST_TO_ADDR
// interface_hidden = mode ;
65939: LD_ADDR_OWVAR 54
65943: PUSH
65944: LD_VAR 0 1
65948: ST_TO_ADDR
// end ;
65949: LD_VAR 0 2
65953: RET
// export function Join ( array , element ) ; begin
65954: LD_INT 0
65956: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65957: LD_ADDR_VAR 0 3
65961: PUSH
65962: LD_VAR 0 1
65966: PPUSH
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 1
65974: PLUS
65975: PPUSH
65976: LD_VAR 0 2
65980: PPUSH
65981: CALL_OW 1
65985: ST_TO_ADDR
// end ;
65986: LD_VAR 0 3
65990: RET
// export function JoinUnion ( array , element ) ; begin
65991: LD_INT 0
65993: PPUSH
// result := array union element ;
65994: LD_ADDR_VAR 0 3
65998: PUSH
65999: LD_VAR 0 1
66003: PUSH
66004: LD_VAR 0 2
66008: UNION
66009: ST_TO_ADDR
// end ;
66010: LD_VAR 0 3
66014: RET
// export function GetBehemoths ( side ) ; begin
66015: LD_INT 0
66017: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66018: LD_ADDR_VAR 0 2
66022: PUSH
66023: LD_INT 22
66025: PUSH
66026: LD_VAR 0 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 31
66037: PUSH
66038: LD_INT 25
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PPUSH
66049: CALL_OW 69
66053: ST_TO_ADDR
// end ;
66054: LD_VAR 0 2
66058: RET
// export function Shuffle ( array ) ; var i , index ; begin
66059: LD_INT 0
66061: PPUSH
66062: PPUSH
66063: PPUSH
// result := [ ] ;
66064: LD_ADDR_VAR 0 2
66068: PUSH
66069: EMPTY
66070: ST_TO_ADDR
// if not array then
66071: LD_VAR 0 1
66075: NOT
66076: IFFALSE 66080
// exit ;
66078: GO 66179
// Randomize ;
66080: CALL_OW 10
// for i = array downto 1 do
66084: LD_ADDR_VAR 0 3
66088: PUSH
66089: DOUBLE
66090: LD_VAR 0 1
66094: INC
66095: ST_TO_ADDR
66096: LD_INT 1
66098: PUSH
66099: FOR_DOWNTO
66100: IFFALSE 66177
// begin index := rand ( 1 , array ) ;
66102: LD_ADDR_VAR 0 4
66106: PUSH
66107: LD_INT 1
66109: PPUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 12
66119: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66120: LD_ADDR_VAR 0 2
66124: PUSH
66125: LD_VAR 0 2
66129: PPUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_INT 1
66137: PLUS
66138: PPUSH
66139: LD_VAR 0 1
66143: PUSH
66144: LD_VAR 0 4
66148: ARRAY
66149: PPUSH
66150: CALL_OW 2
66154: ST_TO_ADDR
// array := Delete ( array , index ) ;
66155: LD_ADDR_VAR 0 1
66159: PUSH
66160: LD_VAR 0 1
66164: PPUSH
66165: LD_VAR 0 4
66169: PPUSH
66170: CALL_OW 3
66174: ST_TO_ADDR
// end ;
66175: GO 66099
66177: POP
66178: POP
// end ;
66179: LD_VAR 0 2
66183: RET
// export function GetBaseMaterials ( base ) ; begin
66184: LD_INT 0
66186: PPUSH
// result := [ 0 , 0 , 0 ] ;
66187: LD_ADDR_VAR 0 2
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: ST_TO_ADDR
// if not base then
66206: LD_VAR 0 1
66210: NOT
66211: IFFALSE 66215
// exit ;
66213: GO 66264
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66215: LD_ADDR_VAR 0 2
66219: PUSH
66220: LD_VAR 0 1
66224: PPUSH
66225: LD_INT 1
66227: PPUSH
66228: CALL_OW 275
66232: PUSH
66233: LD_VAR 0 1
66237: PPUSH
66238: LD_INT 2
66240: PPUSH
66241: CALL_OW 275
66245: PUSH
66246: LD_VAR 0 1
66250: PPUSH
66251: LD_INT 3
66253: PPUSH
66254: CALL_OW 275
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: ST_TO_ADDR
// end ;
66264: LD_VAR 0 2
66268: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66269: LD_INT 0
66271: PPUSH
66272: PPUSH
// result := array ;
66273: LD_ADDR_VAR 0 3
66277: PUSH
66278: LD_VAR 0 1
66282: ST_TO_ADDR
// if size >= result then
66283: LD_VAR 0 2
66287: PUSH
66288: LD_VAR 0 3
66292: GREATEREQUAL
66293: IFFALSE 66297
// exit ;
66295: GO 66347
// if size then
66297: LD_VAR 0 2
66301: IFFALSE 66347
// for i := array downto size do
66303: LD_ADDR_VAR 0 4
66307: PUSH
66308: DOUBLE
66309: LD_VAR 0 1
66313: INC
66314: ST_TO_ADDR
66315: LD_VAR 0 2
66319: PUSH
66320: FOR_DOWNTO
66321: IFFALSE 66345
// result := Delete ( result , result ) ;
66323: LD_ADDR_VAR 0 3
66327: PUSH
66328: LD_VAR 0 3
66332: PPUSH
66333: LD_VAR 0 3
66337: PPUSH
66338: CALL_OW 3
66342: ST_TO_ADDR
66343: GO 66320
66345: POP
66346: POP
// end ;
66347: LD_VAR 0 3
66351: RET
// export function ComExit ( unit ) ; var tmp ; begin
66352: LD_INT 0
66354: PPUSH
66355: PPUSH
// if not IsInUnit ( unit ) then
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 310
66365: NOT
66366: IFFALSE 66370
// exit ;
66368: GO 66430
// tmp := IsInUnit ( unit ) ;
66370: LD_ADDR_VAR 0 3
66374: PUSH
66375: LD_VAR 0 1
66379: PPUSH
66380: CALL_OW 310
66384: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66385: LD_VAR 0 3
66389: PPUSH
66390: CALL_OW 247
66394: PUSH
66395: LD_INT 2
66397: EQUAL
66398: IFFALSE 66411
// ComExitVehicle ( unit ) else
66400: LD_VAR 0 1
66404: PPUSH
66405: CALL_OW 121
66409: GO 66420
// ComExitBuilding ( unit ) ;
66411: LD_VAR 0 1
66415: PPUSH
66416: CALL_OW 122
// result := tmp ;
66420: LD_ADDR_VAR 0 2
66424: PUSH
66425: LD_VAR 0 3
66429: ST_TO_ADDR
// end ;
66430: LD_VAR 0 2
66434: RET
// export function ComExitAll ( units ) ; var i ; begin
66435: LD_INT 0
66437: PPUSH
66438: PPUSH
// if not units then
66439: LD_VAR 0 1
66443: NOT
66444: IFFALSE 66448
// exit ;
66446: GO 66474
// for i in units do
66448: LD_ADDR_VAR 0 3
66452: PUSH
66453: LD_VAR 0 1
66457: PUSH
66458: FOR_IN
66459: IFFALSE 66472
// ComExit ( i ) ;
66461: LD_VAR 0 3
66465: PPUSH
66466: CALL 66352 0 1
66470: GO 66458
66472: POP
66473: POP
// end ;
66474: LD_VAR 0 2
66478: RET
// export function ResetHc ; begin
66479: LD_INT 0
66481: PPUSH
// InitHc ;
66482: CALL_OW 19
// hc_importance := 0 ;
66486: LD_ADDR_OWVAR 32
66490: PUSH
66491: LD_INT 0
66493: ST_TO_ADDR
// end ;
66494: LD_VAR 0 1
66498: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66499: LD_INT 0
66501: PPUSH
66502: PPUSH
66503: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66504: LD_ADDR_VAR 0 6
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_VAR 0 3
66518: PLUS
66519: PUSH
66520: LD_INT 2
66522: DIV
66523: ST_TO_ADDR
// if _x < 0 then
66524: LD_VAR 0 6
66528: PUSH
66529: LD_INT 0
66531: LESS
66532: IFFALSE 66549
// _x := _x * - 1 ;
66534: LD_ADDR_VAR 0 6
66538: PUSH
66539: LD_VAR 0 6
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: MUL
66548: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66549: LD_ADDR_VAR 0 7
66553: PUSH
66554: LD_VAR 0 2
66558: PUSH
66559: LD_VAR 0 4
66563: PLUS
66564: PUSH
66565: LD_INT 2
66567: DIV
66568: ST_TO_ADDR
// if _y < 0 then
66569: LD_VAR 0 7
66573: PUSH
66574: LD_INT 0
66576: LESS
66577: IFFALSE 66594
// _y := _y * - 1 ;
66579: LD_ADDR_VAR 0 7
66583: PUSH
66584: LD_VAR 0 7
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: MUL
66593: ST_TO_ADDR
// result := [ _x , _y ] ;
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: LD_VAR 0 6
66603: PUSH
66604: LD_VAR 0 7
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// end ;
66613: LD_VAR 0 5
66617: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66618: LD_INT 0
66620: PPUSH
66621: PPUSH
66622: PPUSH
66623: PPUSH
// task := GetTaskList ( unit ) ;
66624: LD_ADDR_VAR 0 7
66628: PUSH
66629: LD_VAR 0 1
66633: PPUSH
66634: CALL_OW 437
66638: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66639: LD_VAR 0 7
66643: NOT
66644: IFFALSE 66663
66646: PUSH
66647: LD_VAR 0 1
66651: PPUSH
66652: LD_VAR 0 2
66656: PPUSH
66657: CALL_OW 308
66661: NOT
66662: AND
66663: IFFALSE 66667
// exit ;
66665: GO 66785
// if IsInArea ( unit , area ) then
66667: LD_VAR 0 1
66671: PPUSH
66672: LD_VAR 0 2
66676: PPUSH
66677: CALL_OW 308
66681: IFFALSE 66699
// begin ComMoveToArea ( unit , goAway ) ;
66683: LD_VAR 0 1
66687: PPUSH
66688: LD_VAR 0 3
66692: PPUSH
66693: CALL_OW 113
// exit ;
66697: GO 66785
// end ; if task [ 1 ] [ 1 ] <> M then
66699: LD_VAR 0 7
66703: PUSH
66704: LD_INT 1
66706: ARRAY
66707: PUSH
66708: LD_INT 1
66710: ARRAY
66711: PUSH
66712: LD_STRING M
66714: NONEQUAL
66715: IFFALSE 66719
// exit ;
66717: GO 66785
// x := task [ 1 ] [ 2 ] ;
66719: LD_ADDR_VAR 0 5
66723: PUSH
66724: LD_VAR 0 7
66728: PUSH
66729: LD_INT 1
66731: ARRAY
66732: PUSH
66733: LD_INT 2
66735: ARRAY
66736: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66737: LD_ADDR_VAR 0 6
66741: PUSH
66742: LD_VAR 0 7
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: PUSH
66751: LD_INT 3
66753: ARRAY
66754: ST_TO_ADDR
// if InArea ( x , y , area ) then
66755: LD_VAR 0 5
66759: PPUSH
66760: LD_VAR 0 6
66764: PPUSH
66765: LD_VAR 0 2
66769: PPUSH
66770: CALL_OW 309
66774: IFFALSE 66785
// ComStop ( unit ) ;
66776: LD_VAR 0 1
66780: PPUSH
66781: CALL_OW 141
// end ;
66785: LD_VAR 0 4
66789: RET
// export function Abs ( value ) ; begin
66790: LD_INT 0
66792: PPUSH
// result := value ;
66793: LD_ADDR_VAR 0 2
66797: PUSH
66798: LD_VAR 0 1
66802: ST_TO_ADDR
// if value < 0 then
66803: LD_VAR 0 1
66807: PUSH
66808: LD_INT 0
66810: LESS
66811: IFFALSE 66828
// result := value * - 1 ;
66813: LD_ADDR_VAR 0 2
66817: PUSH
66818: LD_VAR 0 1
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: MUL
66827: ST_TO_ADDR
// end ;
66828: LD_VAR 0 2
66832: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66833: LD_INT 0
66835: PPUSH
66836: PPUSH
66837: PPUSH
66838: PPUSH
66839: PPUSH
66840: PPUSH
66841: PPUSH
66842: PPUSH
// if not unit or not building then
66843: LD_VAR 0 1
66847: NOT
66848: IFTRUE 66857
66850: PUSH
66851: LD_VAR 0 2
66855: NOT
66856: OR
66857: IFFALSE 66861
// exit ;
66859: GO 67089
// x := GetX ( building ) ;
66861: LD_ADDR_VAR 0 4
66865: PUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: CALL_OW 250
66875: ST_TO_ADDR
// y := GetY ( building ) ;
66876: LD_ADDR_VAR 0 6
66880: PUSH
66881: LD_VAR 0 2
66885: PPUSH
66886: CALL_OW 251
66890: ST_TO_ADDR
// d := GetDir ( building ) ;
66891: LD_ADDR_VAR 0 8
66895: PUSH
66896: LD_VAR 0 2
66900: PPUSH
66901: CALL_OW 254
66905: ST_TO_ADDR
// r := 4 ;
66906: LD_ADDR_VAR 0 9
66910: PUSH
66911: LD_INT 4
66913: ST_TO_ADDR
// for i := 1 to 5 do
66914: LD_ADDR_VAR 0 10
66918: PUSH
66919: DOUBLE
66920: LD_INT 1
66922: DEC
66923: ST_TO_ADDR
66924: LD_INT 5
66926: PUSH
66927: FOR_TO
66928: IFFALSE 67087
// begin _x := ShiftX ( x , d , r + i ) ;
66930: LD_ADDR_VAR 0 5
66934: PUSH
66935: LD_VAR 0 4
66939: PPUSH
66940: LD_VAR 0 8
66944: PPUSH
66945: LD_VAR 0 9
66949: PUSH
66950: LD_VAR 0 10
66954: PLUS
66955: PPUSH
66956: CALL_OW 272
66960: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66961: LD_ADDR_VAR 0 7
66965: PUSH
66966: LD_VAR 0 6
66970: PPUSH
66971: LD_VAR 0 8
66975: PPUSH
66976: LD_VAR 0 9
66980: PUSH
66981: LD_VAR 0 10
66985: PLUS
66986: PPUSH
66987: CALL_OW 273
66991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66992: LD_VAR 0 5
66996: PPUSH
66997: LD_VAR 0 7
67001: PPUSH
67002: CALL_OW 488
67006: IFFALSE 67041
67008: PUSH
67009: LD_VAR 0 5
67013: PPUSH
67014: LD_VAR 0 7
67018: PPUSH
67019: CALL_OW 428
67023: PPUSH
67024: CALL_OW 247
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: IN
67039: NOT
67040: AND
67041: IFFALSE 67085
// begin ComMoveXY ( unit , _x , _y ) ;
67043: LD_VAR 0 1
67047: PPUSH
67048: LD_VAR 0 5
67052: PPUSH
67053: LD_VAR 0 7
67057: PPUSH
67058: CALL_OW 111
// result := [ _x , _y ] ;
67062: LD_ADDR_VAR 0 3
67066: PUSH
67067: LD_VAR 0 5
67071: PUSH
67072: LD_VAR 0 7
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: ST_TO_ADDR
// exit ;
67081: POP
67082: POP
67083: GO 67089
// end ; end ;
67085: GO 66927
67087: POP
67088: POP
// end ;
67089: LD_VAR 0 3
67093: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67094: LD_INT 0
67096: PPUSH
67097: PPUSH
67098: PPUSH
// result := 0 ;
67099: LD_ADDR_VAR 0 3
67103: PUSH
67104: LD_INT 0
67106: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67107: LD_VAR 0 1
67111: PUSH
67112: LD_INT 0
67114: LESS
67115: IFTRUE 67127
67117: PUSH
67118: LD_VAR 0 1
67122: PUSH
67123: LD_INT 8
67125: GREATER
67126: OR
67127: IFTRUE 67139
67129: PUSH
67130: LD_VAR 0 2
67134: PUSH
67135: LD_INT 0
67137: LESS
67138: OR
67139: IFTRUE 67151
67141: PUSH
67142: LD_VAR 0 2
67146: PUSH
67147: LD_INT 8
67149: GREATER
67150: OR
67151: IFFALSE 67155
// exit ;
67153: GO 67230
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67155: LD_ADDR_VAR 0 4
67159: PUSH
67160: LD_INT 22
67162: PUSH
67163: LD_VAR 0 2
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PPUSH
67172: CALL_OW 69
67176: PUSH
67177: FOR_IN
67178: IFFALSE 67228
// begin un := UnitShoot ( i ) ;
67180: LD_ADDR_VAR 0 5
67184: PUSH
67185: LD_VAR 0 4
67189: PPUSH
67190: CALL_OW 504
67194: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67195: LD_VAR 0 5
67199: PPUSH
67200: CALL_OW 255
67204: PUSH
67205: LD_VAR 0 1
67209: EQUAL
67210: IFFALSE 67226
// begin result := un ;
67212: LD_ADDR_VAR 0 3
67216: PUSH
67217: LD_VAR 0 5
67221: ST_TO_ADDR
// exit ;
67222: POP
67223: POP
67224: GO 67230
// end ; end ;
67226: GO 67177
67228: POP
67229: POP
// end ;
67230: LD_VAR 0 3
67234: RET
// export function GetCargoBay ( units ) ; begin
67235: LD_INT 0
67237: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67238: LD_ADDR_VAR 0 2
67242: PUSH
67243: LD_VAR 0 1
67247: PPUSH
67248: LD_INT 2
67250: PUSH
67251: LD_INT 34
67253: PUSH
67254: LD_INT 12
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 34
67263: PUSH
67264: LD_INT 51
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 34
67273: PUSH
67274: LD_INT 32
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 34
67283: PUSH
67284: LD_INT 89
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: PPUSH
67298: CALL_OW 72
67302: ST_TO_ADDR
// end ;
67303: LD_VAR 0 2
67307: RET
// export function Negate ( value ) ; begin
67308: LD_INT 0
67310: PPUSH
// result := not value ;
67311: LD_ADDR_VAR 0 2
67315: PUSH
67316: LD_VAR 0 1
67320: NOT
67321: ST_TO_ADDR
// end ;
67322: LD_VAR 0 2
67326: RET
// export function Inc ( value ) ; begin
67327: LD_INT 0
67329: PPUSH
// result := value + 1 ;
67330: LD_ADDR_VAR 0 2
67334: PUSH
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 1
67342: PLUS
67343: ST_TO_ADDR
// end ;
67344: LD_VAR 0 2
67348: RET
// export function Dec ( value ) ; begin
67349: LD_INT 0
67351: PPUSH
// result := value - 1 ;
67352: LD_ADDR_VAR 0 2
67356: PUSH
67357: LD_VAR 0 1
67361: PUSH
67362: LD_INT 1
67364: MINUS
67365: ST_TO_ADDR
// end ;
67366: LD_VAR 0 2
67370: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67371: LD_INT 0
67373: PPUSH
67374: PPUSH
67375: PPUSH
67376: PPUSH
67377: PPUSH
67378: PPUSH
67379: PPUSH
67380: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67381: LD_VAR 0 1
67385: PPUSH
67386: LD_VAR 0 2
67390: PPUSH
67391: CALL_OW 488
67395: NOT
67396: IFTRUE 67415
67398: PUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: CALL_OW 488
67413: NOT
67414: OR
67415: IFFALSE 67428
// begin result := - 1 ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: ST_TO_ADDR
// exit ;
67426: GO 67663
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67428: LD_ADDR_VAR 0 12
67432: PUSH
67433: LD_VAR 0 1
67437: PPUSH
67438: LD_VAR 0 2
67442: PPUSH
67443: LD_VAR 0 3
67447: PPUSH
67448: LD_VAR 0 4
67452: PPUSH
67453: CALL 66499 0 4
67457: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67458: LD_ADDR_VAR 0 11
67462: PUSH
67463: LD_VAR 0 1
67467: PPUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: LD_VAR 0 12
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PPUSH
67482: LD_VAR 0 12
67486: PUSH
67487: LD_INT 2
67489: ARRAY
67490: PPUSH
67491: CALL_OW 298
67495: ST_TO_ADDR
// distance := 9999 ;
67496: LD_ADDR_VAR 0 10
67500: PUSH
67501: LD_INT 9999
67503: ST_TO_ADDR
// for i := 0 to 5 do
67504: LD_ADDR_VAR 0 6
67508: PUSH
67509: DOUBLE
67510: LD_INT 0
67512: DEC
67513: ST_TO_ADDR
67514: LD_INT 5
67516: PUSH
67517: FOR_TO
67518: IFFALSE 67661
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67520: LD_ADDR_VAR 0 7
67524: PUSH
67525: LD_VAR 0 1
67529: PPUSH
67530: LD_VAR 0 6
67534: PPUSH
67535: LD_VAR 0 11
67539: PPUSH
67540: CALL_OW 272
67544: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67545: LD_ADDR_VAR 0 8
67549: PUSH
67550: LD_VAR 0 2
67554: PPUSH
67555: LD_VAR 0 6
67559: PPUSH
67560: LD_VAR 0 11
67564: PPUSH
67565: CALL_OW 273
67569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67570: LD_VAR 0 7
67574: PPUSH
67575: LD_VAR 0 8
67579: PPUSH
67580: CALL_OW 488
67584: NOT
67585: IFFALSE 67589
// continue ;
67587: GO 67517
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67589: LD_ADDR_VAR 0 9
67593: PUSH
67594: LD_VAR 0 12
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: PPUSH
67603: LD_VAR 0 12
67607: PUSH
67608: LD_INT 2
67610: ARRAY
67611: PPUSH
67612: LD_VAR 0 7
67616: PPUSH
67617: LD_VAR 0 8
67621: PPUSH
67622: CALL_OW 298
67626: ST_TO_ADDR
// if tmp < distance then
67627: LD_VAR 0 9
67631: PUSH
67632: LD_VAR 0 10
67636: LESS
67637: IFFALSE 67659
// begin result := i ;
67639: LD_ADDR_VAR 0 5
67643: PUSH
67644: LD_VAR 0 6
67648: ST_TO_ADDR
// distance := tmp ;
67649: LD_ADDR_VAR 0 10
67653: PUSH
67654: LD_VAR 0 9
67658: ST_TO_ADDR
// end ; end ;
67659: GO 67517
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 5
67667: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
// if not driver or not IsInUnit ( driver ) then
67672: LD_VAR 0 1
67676: NOT
67677: IFTRUE 67691
67679: PUSH
67680: LD_VAR 0 1
67684: PPUSH
67685: CALL_OW 310
67689: NOT
67690: OR
67691: IFFALSE 67695
// exit ;
67693: GO 67785
// vehicle := IsInUnit ( driver ) ;
67695: LD_ADDR_VAR 0 3
67699: PUSH
67700: LD_VAR 0 1
67704: PPUSH
67705: CALL_OW 310
67709: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67710: LD_VAR 0 1
67714: PPUSH
67715: LD_STRING \
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: PUSH
67745: LD_STRING E
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_VAR 0 3
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PPUSH
67781: CALL_OW 446
// end ;
67785: LD_VAR 0 2
67789: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67790: LD_INT 0
67792: PPUSH
67793: PPUSH
// if not driver or not IsInUnit ( driver ) then
67794: LD_VAR 0 1
67798: NOT
67799: IFTRUE 67813
67801: PUSH
67802: LD_VAR 0 1
67806: PPUSH
67807: CALL_OW 310
67811: NOT
67812: OR
67813: IFFALSE 67817
// exit ;
67815: GO 67907
// vehicle := IsInUnit ( driver ) ;
67817: LD_ADDR_VAR 0 3
67821: PUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 310
67831: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67832: LD_VAR 0 1
67836: PPUSH
67837: LD_STRING \
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: PUSH
67867: LD_STRING E
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_VAR 0 3
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PPUSH
67903: CALL_OW 447
// end ;
67907: LD_VAR 0 2
67911: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67912: LD_INT 0
67914: PPUSH
67915: PPUSH
67916: PPUSH
// tmp := [ ] ;
67917: LD_ADDR_VAR 0 5
67921: PUSH
67922: EMPTY
67923: ST_TO_ADDR
// for i in units do
67924: LD_ADDR_VAR 0 4
67928: PUSH
67929: LD_VAR 0 1
67933: PUSH
67934: FOR_IN
67935: IFFALSE 67973
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67937: LD_ADDR_VAR 0 5
67941: PUSH
67942: LD_VAR 0 5
67946: PPUSH
67947: LD_VAR 0 5
67951: PUSH
67952: LD_INT 1
67954: PLUS
67955: PPUSH
67956: LD_VAR 0 4
67960: PPUSH
67961: CALL_OW 256
67965: PPUSH
67966: CALL_OW 2
67970: ST_TO_ADDR
67971: GO 67934
67973: POP
67974: POP
// if not tmp then
67975: LD_VAR 0 5
67979: NOT
67980: IFFALSE 67984
// exit ;
67982: GO 68032
// if asc then
67984: LD_VAR 0 2
67988: IFFALSE 68012
// result := SortListByListAsc ( units , tmp ) else
67990: LD_ADDR_VAR 0 3
67994: PUSH
67995: LD_VAR 0 1
67999: PPUSH
68000: LD_VAR 0 5
68004: PPUSH
68005: CALL_OW 76
68009: ST_TO_ADDR
68010: GO 68032
// result := SortListByListDesc ( units , tmp ) ;
68012: LD_ADDR_VAR 0 3
68016: PUSH
68017: LD_VAR 0 1
68021: PPUSH
68022: LD_VAR 0 5
68026: PPUSH
68027: CALL_OW 77
68031: ST_TO_ADDR
// end ;
68032: LD_VAR 0 3
68036: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68037: LD_INT 0
68039: PPUSH
68040: PPUSH
// task := GetTaskList ( mech ) ;
68041: LD_ADDR_VAR 0 4
68045: PUSH
68046: LD_VAR 0 1
68050: PPUSH
68051: CALL_OW 437
68055: ST_TO_ADDR
// if not task then
68056: LD_VAR 0 4
68060: NOT
68061: IFFALSE 68065
// exit ;
68063: GO 68109
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68065: LD_ADDR_VAR 0 3
68069: PUSH
68070: LD_VAR 0 4
68074: PUSH
68075: LD_INT 1
68077: ARRAY
68078: PUSH
68079: LD_INT 1
68081: ARRAY
68082: PUSH
68083: LD_STRING r
68085: EQUAL
68086: IFFALSE 68108
68088: PUSH
68089: LD_VAR 0 4
68093: PUSH
68094: LD_INT 1
68096: ARRAY
68097: PUSH
68098: LD_INT 4
68100: ARRAY
68101: PUSH
68102: LD_VAR 0 2
68106: EQUAL
68107: AND
68108: ST_TO_ADDR
// end ;
68109: LD_VAR 0 3
68113: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68114: LD_INT 0
68116: PPUSH
// SetDir ( unit , d ) ;
68117: LD_VAR 0 1
68121: PPUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68131: LD_ADDR_VAR 0 6
68135: PUSH
68136: LD_VAR 0 1
68140: PPUSH
68141: LD_VAR 0 2
68145: PPUSH
68146: LD_VAR 0 3
68150: PPUSH
68151: LD_VAR 0 5
68155: PPUSH
68156: CALL_OW 48
68160: ST_TO_ADDR
// end ;
68161: LD_VAR 0 6
68165: RET
// export function ToNaturalNumber ( number ) ; begin
68166: LD_INT 0
68168: PPUSH
// result := number div 1 ;
68169: LD_ADDR_VAR 0 2
68173: PUSH
68174: LD_VAR 0 1
68178: PUSH
68179: LD_INT 1
68181: DIV
68182: ST_TO_ADDR
// if number < 0 then
68183: LD_VAR 0 1
68187: PUSH
68188: LD_INT 0
68190: LESS
68191: IFFALSE 68201
// result := 0 ;
68193: LD_ADDR_VAR 0 2
68197: PUSH
68198: LD_INT 0
68200: ST_TO_ADDR
// end ;
68201: LD_VAR 0 2
68205: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68206: LD_INT 0
68208: PPUSH
68209: PPUSH
68210: PPUSH
// if not buildings then
68211: LD_VAR 0 1
68215: NOT
68216: IFFALSE 68220
// exit ;
68218: GO 68335
// tmp := [ ] ;
68220: LD_ADDR_VAR 0 5
68224: PUSH
68225: EMPTY
68226: ST_TO_ADDR
// for b in buildings do
68227: LD_ADDR_VAR 0 4
68231: PUSH
68232: LD_VAR 0 1
68236: PUSH
68237: FOR_IN
68238: IFFALSE 68276
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68240: LD_ADDR_VAR 0 5
68244: PUSH
68245: LD_VAR 0 5
68249: PPUSH
68250: LD_VAR 0 5
68254: PUSH
68255: LD_INT 1
68257: PLUS
68258: PPUSH
68259: LD_VAR 0 4
68263: PPUSH
68264: CALL_OW 266
68268: PPUSH
68269: CALL_OW 1
68273: ST_TO_ADDR
68274: GO 68237
68276: POP
68277: POP
// if not tmp then
68278: LD_VAR 0 5
68282: NOT
68283: IFFALSE 68287
// exit ;
68285: GO 68335
// if asc then
68287: LD_VAR 0 2
68291: IFFALSE 68315
// result := SortListByListAsc ( buildings , tmp ) else
68293: LD_ADDR_VAR 0 3
68297: PUSH
68298: LD_VAR 0 1
68302: PPUSH
68303: LD_VAR 0 5
68307: PPUSH
68308: CALL_OW 76
68312: ST_TO_ADDR
68313: GO 68335
// result := SortListByListDesc ( buildings , tmp ) ;
68315: LD_ADDR_VAR 0 3
68319: PUSH
68320: LD_VAR 0 1
68324: PPUSH
68325: LD_VAR 0 5
68329: PPUSH
68330: CALL_OW 77
68334: ST_TO_ADDR
// end ;
68335: LD_VAR 0 3
68339: RET
// export function SortByClass ( units , class ) ; var un ; begin
68340: LD_INT 0
68342: PPUSH
68343: PPUSH
// if not units or not class then
68344: LD_VAR 0 1
68348: NOT
68349: IFTRUE 68358
68351: PUSH
68352: LD_VAR 0 2
68356: NOT
68357: OR
68358: IFFALSE 68362
// exit ;
68360: GO 68457
// result := [ ] ;
68362: LD_ADDR_VAR 0 3
68366: PUSH
68367: EMPTY
68368: ST_TO_ADDR
// for un in units do
68369: LD_ADDR_VAR 0 4
68373: PUSH
68374: LD_VAR 0 1
68378: PUSH
68379: FOR_IN
68380: IFFALSE 68455
// if GetClass ( un ) = class then
68382: LD_VAR 0 4
68386: PPUSH
68387: CALL_OW 257
68391: PUSH
68392: LD_VAR 0 2
68396: EQUAL
68397: IFFALSE 68424
// result := Insert ( result , 1 , un ) else
68399: LD_ADDR_VAR 0 3
68403: PUSH
68404: LD_VAR 0 3
68408: PPUSH
68409: LD_INT 1
68411: PPUSH
68412: LD_VAR 0 4
68416: PPUSH
68417: CALL_OW 2
68421: ST_TO_ADDR
68422: GO 68453
// result := Replace ( result , result + 1 , un ) ;
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: LD_VAR 0 3
68433: PPUSH
68434: LD_VAR 0 3
68438: PUSH
68439: LD_INT 1
68441: PLUS
68442: PPUSH
68443: LD_VAR 0 4
68447: PPUSH
68448: CALL_OW 1
68452: ST_TO_ADDR
68453: GO 68379
68455: POP
68456: POP
// end ;
68457: LD_VAR 0 3
68461: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68462: LD_INT 0
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
68468: PPUSH
68469: PPUSH
68470: PPUSH
// result := [ ] ;
68471: LD_ADDR_VAR 0 4
68475: PUSH
68476: EMPTY
68477: ST_TO_ADDR
// if x - r < 0 then
68478: LD_VAR 0 1
68482: PUSH
68483: LD_VAR 0 3
68487: MINUS
68488: PUSH
68489: LD_INT 0
68491: LESS
68492: IFFALSE 68504
// min_x := 0 else
68494: LD_ADDR_VAR 0 8
68498: PUSH
68499: LD_INT 0
68501: ST_TO_ADDR
68502: GO 68520
// min_x := x - r ;
68504: LD_ADDR_VAR 0 8
68508: PUSH
68509: LD_VAR 0 1
68513: PUSH
68514: LD_VAR 0 3
68518: MINUS
68519: ST_TO_ADDR
// if y - r < 0 then
68520: LD_VAR 0 2
68524: PUSH
68525: LD_VAR 0 3
68529: MINUS
68530: PUSH
68531: LD_INT 0
68533: LESS
68534: IFFALSE 68546
// min_y := 0 else
68536: LD_ADDR_VAR 0 7
68540: PUSH
68541: LD_INT 0
68543: ST_TO_ADDR
68544: GO 68562
// min_y := y - r ;
68546: LD_ADDR_VAR 0 7
68550: PUSH
68551: LD_VAR 0 2
68555: PUSH
68556: LD_VAR 0 3
68560: MINUS
68561: ST_TO_ADDR
// max_x := x + r ;
68562: LD_ADDR_VAR 0 9
68566: PUSH
68567: LD_VAR 0 1
68571: PUSH
68572: LD_VAR 0 3
68576: PLUS
68577: ST_TO_ADDR
// max_y := y + r ;
68578: LD_ADDR_VAR 0 10
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_VAR 0 3
68592: PLUS
68593: ST_TO_ADDR
// for _x = min_x to max_x do
68594: LD_ADDR_VAR 0 5
68598: PUSH
68599: DOUBLE
68600: LD_VAR 0 8
68604: DEC
68605: ST_TO_ADDR
68606: LD_VAR 0 9
68610: PUSH
68611: FOR_TO
68612: IFFALSE 68713
// for _y = min_y to max_y do
68614: LD_ADDR_VAR 0 6
68618: PUSH
68619: DOUBLE
68620: LD_VAR 0 7
68624: DEC
68625: ST_TO_ADDR
68626: LD_VAR 0 10
68630: PUSH
68631: FOR_TO
68632: IFFALSE 68709
// begin if not ValidHex ( _x , _y ) then
68634: LD_VAR 0 5
68638: PPUSH
68639: LD_VAR 0 6
68643: PPUSH
68644: CALL_OW 488
68648: NOT
68649: IFFALSE 68653
// continue ;
68651: GO 68631
// if GetResourceTypeXY ( _x , _y ) then
68653: LD_VAR 0 5
68657: PPUSH
68658: LD_VAR 0 6
68662: PPUSH
68663: CALL_OW 283
68667: IFFALSE 68707
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68669: LD_ADDR_VAR 0 4
68673: PUSH
68674: LD_VAR 0 4
68678: PPUSH
68679: LD_VAR 0 4
68683: PUSH
68684: LD_INT 1
68686: PLUS
68687: PPUSH
68688: LD_VAR 0 5
68692: PUSH
68693: LD_VAR 0 6
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PPUSH
68702: CALL_OW 1
68706: ST_TO_ADDR
// end ;
68707: GO 68631
68709: POP
68710: POP
68711: GO 68611
68713: POP
68714: POP
// end ;
68715: LD_VAR 0 4
68719: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68720: LD_INT 0
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
68727: PPUSH
68728: PPUSH
68729: PPUSH
// if not units then
68730: LD_VAR 0 1
68734: NOT
68735: IFFALSE 68739
// exit ;
68737: GO 69271
// result := UnitFilter ( units , [ f_ok ] ) ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: LD_INT 50
68751: PUSH
68752: EMPTY
68753: LIST
68754: PPUSH
68755: CALL_OW 72
68759: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68760: LD_ADDR_VAR 0 8
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_INT 1
68772: ARRAY
68773: PPUSH
68774: CALL_OW 255
68778: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68779: LD_ADDR_VAR 0 10
68783: PUSH
68784: LD_INT 29
68786: PUSH
68787: LD_INT 91
68789: PUSH
68790: LD_INT 49
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: LIST
68797: ST_TO_ADDR
// if not result then
68798: LD_VAR 0 3
68802: NOT
68803: IFFALSE 68807
// exit ;
68805: GO 69271
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68807: LD_ADDR_VAR 0 5
68811: PUSH
68812: LD_INT 81
68814: PUSH
68815: LD_VAR 0 8
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PPUSH
68824: CALL_OW 69
68828: ST_TO_ADDR
// for i in result do
68829: LD_ADDR_VAR 0 4
68833: PUSH
68834: LD_VAR 0 3
68838: PUSH
68839: FOR_IN
68840: IFFALSE 69269
// begin tag := GetTag ( i ) + 1 ;
68842: LD_ADDR_VAR 0 9
68846: PUSH
68847: LD_VAR 0 4
68851: PPUSH
68852: CALL_OW 110
68856: PUSH
68857: LD_INT 1
68859: PLUS
68860: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68861: LD_ADDR_VAR 0 7
68865: PUSH
68866: LD_VAR 0 4
68870: PPUSH
68871: CALL_OW 250
68875: PPUSH
68876: LD_VAR 0 4
68880: PPUSH
68881: CALL_OW 251
68885: PPUSH
68886: LD_INT 4
68888: PPUSH
68889: CALL 68462 0 3
68893: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68894: LD_VAR 0 4
68898: PPUSH
68899: CALL_OW 247
68903: PUSH
68904: LD_INT 2
68906: EQUAL
68907: IFFALSE 68919
68909: PUSH
68910: LD_VAR 0 7
68914: PUSH
68915: LD_INT 2
68917: GREATER
68918: AND
68919: IFFALSE 68939
68921: PUSH
68922: LD_VAR 0 4
68926: PPUSH
68927: CALL_OW 264
68931: PUSH
68932: LD_VAR 0 10
68936: IN
68937: NOT
68938: AND
68939: IFFALSE 68978
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68941: LD_VAR 0 4
68945: PPUSH
68946: LD_VAR 0 7
68950: PUSH
68951: LD_INT 1
68953: ARRAY
68954: PUSH
68955: LD_INT 1
68957: ARRAY
68958: PPUSH
68959: LD_VAR 0 7
68963: PUSH
68964: LD_INT 1
68966: ARRAY
68967: PUSH
68968: LD_INT 2
68970: ARRAY
68971: PPUSH
68972: CALL_OW 116
68976: GO 69267
// if path > tag then
68978: LD_VAR 0 2
68982: PUSH
68983: LD_VAR 0 9
68987: GREATER
68988: IFFALSE 69196
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68990: LD_ADDR_VAR 0 6
68994: PUSH
68995: LD_VAR 0 5
68999: PPUSH
69000: LD_INT 91
69002: PUSH
69003: LD_VAR 0 4
69007: PUSH
69008: LD_INT 8
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: PPUSH
69016: CALL_OW 72
69020: ST_TO_ADDR
// if nearEnemy then
69021: LD_VAR 0 6
69025: IFFALSE 69094
// begin if GetWeapon ( i ) = ru_time_lapser then
69027: LD_VAR 0 4
69031: PPUSH
69032: CALL_OW 264
69036: PUSH
69037: LD_INT 49
69039: EQUAL
69040: IFFALSE 69068
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69042: LD_VAR 0 4
69046: PPUSH
69047: LD_VAR 0 6
69051: PPUSH
69052: LD_VAR 0 4
69056: PPUSH
69057: CALL_OW 74
69061: PPUSH
69062: CALL_OW 112
69066: GO 69092
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69068: LD_VAR 0 4
69072: PPUSH
69073: LD_VAR 0 6
69077: PPUSH
69078: LD_VAR 0 4
69082: PPUSH
69083: CALL_OW 74
69087: PPUSH
69088: CALL 70352 0 2
// end else
69092: GO 69194
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69094: LD_VAR 0 4
69098: PPUSH
69099: LD_VAR 0 2
69103: PUSH
69104: LD_VAR 0 9
69108: ARRAY
69109: PUSH
69110: LD_INT 1
69112: ARRAY
69113: PPUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_VAR 0 9
69123: ARRAY
69124: PUSH
69125: LD_INT 2
69127: ARRAY
69128: PPUSH
69129: CALL_OW 297
69133: PUSH
69134: LD_INT 6
69136: GREATER
69137: IFFALSE 69180
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69139: LD_VAR 0 4
69143: PPUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_VAR 0 9
69153: ARRAY
69154: PUSH
69155: LD_INT 1
69157: ARRAY
69158: PPUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_VAR 0 9
69168: ARRAY
69169: PUSH
69170: LD_INT 2
69172: ARRAY
69173: PPUSH
69174: CALL_OW 114
69178: GO 69194
// SetTag ( i , tag ) ;
69180: LD_VAR 0 4
69184: PPUSH
69185: LD_VAR 0 9
69189: PPUSH
69190: CALL_OW 109
// end else
69194: GO 69267
// if enemy then
69196: LD_VAR 0 5
69200: IFFALSE 69267
// begin if GetWeapon ( i ) = ru_time_lapser then
69202: LD_VAR 0 4
69206: PPUSH
69207: CALL_OW 264
69211: PUSH
69212: LD_INT 49
69214: EQUAL
69215: IFFALSE 69243
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69217: LD_VAR 0 4
69221: PPUSH
69222: LD_VAR 0 5
69226: PPUSH
69227: LD_VAR 0 4
69231: PPUSH
69232: CALL_OW 74
69236: PPUSH
69237: CALL_OW 112
69241: GO 69267
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69243: LD_VAR 0 4
69247: PPUSH
69248: LD_VAR 0 5
69252: PPUSH
69253: LD_VAR 0 4
69257: PPUSH
69258: CALL_OW 74
69262: PPUSH
69263: CALL 70352 0 2
// end ; end ;
69267: GO 68839
69269: POP
69270: POP
// end ;
69271: LD_VAR 0 3
69275: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69276: LD_INT 0
69278: PPUSH
69279: PPUSH
69280: PPUSH
// if not unit or IsInUnit ( unit ) then
69281: LD_VAR 0 1
69285: NOT
69286: IFTRUE 69299
69288: PUSH
69289: LD_VAR 0 1
69293: PPUSH
69294: CALL_OW 310
69298: OR
69299: IFFALSE 69303
// exit ;
69301: GO 69394
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69303: LD_ADDR_VAR 0 4
69307: PUSH
69308: LD_VAR 0 1
69312: PPUSH
69313: CALL_OW 250
69317: PPUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: LD_INT 1
69325: PPUSH
69326: CALL_OW 272
69330: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69331: LD_ADDR_VAR 0 5
69335: PUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: CALL_OW 251
69345: PPUSH
69346: LD_VAR 0 2
69350: PPUSH
69351: LD_INT 1
69353: PPUSH
69354: CALL_OW 273
69358: ST_TO_ADDR
// if ValidHex ( x , y ) then
69359: LD_VAR 0 4
69363: PPUSH
69364: LD_VAR 0 5
69368: PPUSH
69369: CALL_OW 488
69373: IFFALSE 69394
// ComTurnXY ( unit , x , y ) ;
69375: LD_VAR 0 1
69379: PPUSH
69380: LD_VAR 0 4
69384: PPUSH
69385: LD_VAR 0 5
69389: PPUSH
69390: CALL_OW 118
// end ;
69394: LD_VAR 0 3
69398: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69399: LD_INT 0
69401: PPUSH
69402: PPUSH
// result := false ;
69403: LD_ADDR_VAR 0 3
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
// if not units then
69411: LD_VAR 0 2
69415: NOT
69416: IFFALSE 69420
// exit ;
69418: GO 69465
// for i in units do
69420: LD_ADDR_VAR 0 4
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: FOR_IN
69431: IFFALSE 69463
// if See ( side , i ) then
69433: LD_VAR 0 1
69437: PPUSH
69438: LD_VAR 0 4
69442: PPUSH
69443: CALL_OW 292
69447: IFFALSE 69461
// begin result := true ;
69449: LD_ADDR_VAR 0 3
69453: PUSH
69454: LD_INT 1
69456: ST_TO_ADDR
// exit ;
69457: POP
69458: POP
69459: GO 69465
// end ;
69461: GO 69430
69463: POP
69464: POP
// end ;
69465: LD_VAR 0 3
69469: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69470: LD_INT 0
69472: PPUSH
69473: PPUSH
69474: PPUSH
69475: PPUSH
// if not unit or not points then
69476: LD_VAR 0 1
69480: NOT
69481: IFTRUE 69490
69483: PUSH
69484: LD_VAR 0 2
69488: NOT
69489: OR
69490: IFFALSE 69494
// exit ;
69492: GO 69584
// dist := 99999 ;
69494: LD_ADDR_VAR 0 5
69498: PUSH
69499: LD_INT 99999
69501: ST_TO_ADDR
// for i in points do
69502: LD_ADDR_VAR 0 4
69506: PUSH
69507: LD_VAR 0 2
69511: PUSH
69512: FOR_IN
69513: IFFALSE 69582
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69515: LD_ADDR_VAR 0 6
69519: PUSH
69520: LD_VAR 0 1
69524: PPUSH
69525: LD_VAR 0 4
69529: PUSH
69530: LD_INT 1
69532: ARRAY
69533: PPUSH
69534: LD_VAR 0 4
69538: PUSH
69539: LD_INT 2
69541: ARRAY
69542: PPUSH
69543: CALL_OW 297
69547: ST_TO_ADDR
// if tmpDist < dist then
69548: LD_VAR 0 6
69552: PUSH
69553: LD_VAR 0 5
69557: LESS
69558: IFFALSE 69580
// begin result := i ;
69560: LD_ADDR_VAR 0 3
69564: PUSH
69565: LD_VAR 0 4
69569: ST_TO_ADDR
// dist := tmpDist ;
69570: LD_ADDR_VAR 0 5
69574: PUSH
69575: LD_VAR 0 6
69579: ST_TO_ADDR
// end ; end ;
69580: GO 69512
69582: POP
69583: POP
// end ;
69584: LD_VAR 0 3
69588: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69589: LD_INT 0
69591: PPUSH
// uc_side := side ;
69592: LD_ADDR_OWVAR 20
69596: PUSH
69597: LD_VAR 0 1
69601: ST_TO_ADDR
// uc_nation := 3 ;
69602: LD_ADDR_OWVAR 21
69606: PUSH
69607: LD_INT 3
69609: ST_TO_ADDR
// vc_chassis := 25 ;
69610: LD_ADDR_OWVAR 37
69614: PUSH
69615: LD_INT 25
69617: ST_TO_ADDR
// vc_engine := engine_siberite ;
69618: LD_ADDR_OWVAR 39
69622: PUSH
69623: LD_INT 3
69625: ST_TO_ADDR
// vc_control := control_computer ;
69626: LD_ADDR_OWVAR 38
69630: PUSH
69631: LD_INT 3
69633: ST_TO_ADDR
// vc_weapon := 59 ;
69634: LD_ADDR_OWVAR 40
69638: PUSH
69639: LD_INT 59
69641: ST_TO_ADDR
// result := CreateVehicle ;
69642: LD_ADDR_VAR 0 5
69646: PUSH
69647: CALL_OW 45
69651: ST_TO_ADDR
// SetDir ( result , d ) ;
69652: LD_VAR 0 5
69656: PPUSH
69657: LD_VAR 0 4
69661: PPUSH
69662: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69666: LD_VAR 0 5
69670: PPUSH
69671: LD_VAR 0 2
69675: PPUSH
69676: LD_VAR 0 3
69680: PPUSH
69681: LD_INT 0
69683: PPUSH
69684: CALL_OW 48
// end ;
69688: LD_VAR 0 5
69692: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69693: LD_INT 0
69695: PPUSH
69696: PPUSH
69697: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69698: LD_ADDR_VAR 0 2
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69721: LD_VAR 0 1
69725: NOT
69726: IFTRUE 69759
69728: PUSH
69729: LD_VAR 0 1
69733: PPUSH
69734: CALL_OW 264
69738: PUSH
69739: LD_INT 12
69741: PUSH
69742: LD_INT 51
69744: PUSH
69745: LD_INT 32
69747: PUSH
69748: LD_INT 89
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: IN
69757: NOT
69758: OR
69759: IFFALSE 69763
// exit ;
69761: GO 69861
// for i := 1 to 3 do
69763: LD_ADDR_VAR 0 3
69767: PUSH
69768: DOUBLE
69769: LD_INT 1
69771: DEC
69772: ST_TO_ADDR
69773: LD_INT 3
69775: PUSH
69776: FOR_TO
69777: IFFALSE 69859
// begin tmp := GetCargo ( cargo , i ) ;
69779: LD_ADDR_VAR 0 4
69783: PUSH
69784: LD_VAR 0 1
69788: PPUSH
69789: LD_VAR 0 3
69793: PPUSH
69794: CALL_OW 289
69798: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69799: LD_ADDR_VAR 0 2
69803: PUSH
69804: LD_VAR 0 2
69808: PPUSH
69809: LD_VAR 0 3
69813: PPUSH
69814: LD_VAR 0 4
69818: PPUSH
69819: CALL_OW 1
69823: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69824: LD_ADDR_VAR 0 2
69828: PUSH
69829: LD_VAR 0 2
69833: PPUSH
69834: LD_INT 4
69836: PPUSH
69837: LD_VAR 0 2
69841: PUSH
69842: LD_INT 4
69844: ARRAY
69845: PUSH
69846: LD_VAR 0 4
69850: PLUS
69851: PPUSH
69852: CALL_OW 1
69856: ST_TO_ADDR
// end ;
69857: GO 69776
69859: POP
69860: POP
// end ;
69861: LD_VAR 0 2
69865: RET
// export function Length ( array ) ; begin
69866: LD_INT 0
69868: PPUSH
// result := array + 0 ;
69869: LD_ADDR_VAR 0 2
69873: PUSH
69874: LD_VAR 0 1
69878: PUSH
69879: LD_INT 0
69881: PLUS
69882: ST_TO_ADDR
// end ;
69883: LD_VAR 0 2
69887: RET
// export function PrepareArray ( array ) ; begin
69888: LD_INT 0
69890: PPUSH
// result := array diff 0 ;
69891: LD_ADDR_VAR 0 2
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 0
69903: DIFF
69904: ST_TO_ADDR
// if not result [ 1 ] then
69905: LD_VAR 0 2
69909: PUSH
69910: LD_INT 1
69912: ARRAY
69913: NOT
69914: IFFALSE 69934
// result := Delete ( result , 1 ) ;
69916: LD_ADDR_VAR 0 2
69920: PUSH
69921: LD_VAR 0 2
69925: PPUSH
69926: LD_INT 1
69928: PPUSH
69929: CALL_OW 3
69933: ST_TO_ADDR
// end ;
69934: LD_VAR 0 2
69938: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69939: LD_INT 0
69941: PPUSH
69942: PPUSH
69943: PPUSH
69944: PPUSH
// sibRocketRange := 25 ;
69945: LD_ADDR_VAR 0 6
69949: PUSH
69950: LD_INT 25
69952: ST_TO_ADDR
// result := false ;
69953: LD_ADDR_VAR 0 4
69957: PUSH
69958: LD_INT 0
69960: ST_TO_ADDR
// for i := 0 to 5 do
69961: LD_ADDR_VAR 0 5
69965: PUSH
69966: DOUBLE
69967: LD_INT 0
69969: DEC
69970: ST_TO_ADDR
69971: LD_INT 5
69973: PUSH
69974: FOR_TO
69975: IFFALSE 70042
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69977: LD_VAR 0 1
69981: PPUSH
69982: LD_VAR 0 5
69986: PPUSH
69987: LD_VAR 0 6
69991: PPUSH
69992: CALL_OW 272
69996: PPUSH
69997: LD_VAR 0 2
70001: PPUSH
70002: LD_VAR 0 5
70006: PPUSH
70007: LD_VAR 0 6
70011: PPUSH
70012: CALL_OW 273
70016: PPUSH
70017: LD_VAR 0 3
70021: PPUSH
70022: CALL_OW 309
70026: IFFALSE 70040
// begin result := true ;
70028: LD_ADDR_VAR 0 4
70032: PUSH
70033: LD_INT 1
70035: ST_TO_ADDR
// exit ;
70036: POP
70037: POP
70038: GO 70044
// end ;
70040: GO 69974
70042: POP
70043: POP
// end ;
70044: LD_VAR 0 4
70048: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70049: LD_INT 0
70051: PPUSH
70052: PPUSH
70053: PPUSH
// if btype = b_depot then
70054: LD_VAR 0 2
70058: PUSH
70059: LD_INT 0
70061: EQUAL
70062: IFFALSE 70074
// begin result := true ;
70064: LD_ADDR_VAR 0 3
70068: PUSH
70069: LD_INT 1
70071: ST_TO_ADDR
// exit ;
70072: GO 70194
// end ; pom := GetBase ( depot ) ;
70074: LD_ADDR_VAR 0 4
70078: PUSH
70079: LD_VAR 0 1
70083: PPUSH
70084: CALL_OW 274
70088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70089: LD_ADDR_VAR 0 5
70093: PUSH
70094: LD_VAR 0 2
70098: PPUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: CALL_OW 248
70108: PPUSH
70109: CALL_OW 450
70113: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70114: LD_ADDR_VAR 0 3
70118: PUSH
70119: LD_VAR 0 4
70123: PPUSH
70124: LD_INT 1
70126: PPUSH
70127: CALL_OW 275
70131: PUSH
70132: LD_VAR 0 5
70136: PUSH
70137: LD_INT 1
70139: ARRAY
70140: GREATEREQUAL
70141: IFFALSE 70167
70143: PUSH
70144: LD_VAR 0 4
70148: PPUSH
70149: LD_INT 2
70151: PPUSH
70152: CALL_OW 275
70156: PUSH
70157: LD_VAR 0 5
70161: PUSH
70162: LD_INT 2
70164: ARRAY
70165: GREATEREQUAL
70166: AND
70167: IFFALSE 70193
70169: PUSH
70170: LD_VAR 0 4
70174: PPUSH
70175: LD_INT 3
70177: PPUSH
70178: CALL_OW 275
70182: PUSH
70183: LD_VAR 0 5
70187: PUSH
70188: LD_INT 3
70190: ARRAY
70191: GREATEREQUAL
70192: AND
70193: ST_TO_ADDR
// end ;
70194: LD_VAR 0 3
70198: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70199: LD_INT 0
70201: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70202: LD_VAR 0 1
70206: PPUSH
70207: LD_VAR 0 2
70211: PPUSH
70212: LD_INT 0
70214: PPUSH
70215: LD_INT 0
70217: PPUSH
70218: LD_INT 1
70220: PPUSH
70221: LD_INT 0
70223: PPUSH
70224: CALL_OW 587
// end ;
70228: LD_VAR 0 3
70232: RET
// export function CenterOnNow ( unit ) ; begin
70233: LD_INT 0
70235: PPUSH
// result := IsInUnit ( unit ) ;
70236: LD_ADDR_VAR 0 2
70240: PUSH
70241: LD_VAR 0 1
70245: PPUSH
70246: CALL_OW 310
70250: ST_TO_ADDR
// if not result then
70251: LD_VAR 0 2
70255: NOT
70256: IFFALSE 70268
// result := unit ;
70258: LD_ADDR_VAR 0 2
70262: PUSH
70263: LD_VAR 0 1
70267: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70268: LD_VAR 0 1
70272: PPUSH
70273: CALL_OW 87
// end ;
70277: LD_VAR 0 2
70281: RET
// export function ComMoveHex ( unit , hex ) ; begin
70282: LD_INT 0
70284: PPUSH
// if not hex then
70285: LD_VAR 0 2
70289: NOT
70290: IFFALSE 70294
// exit ;
70292: GO 70347
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70294: LD_VAR 0 2
70298: PUSH
70299: LD_INT 1
70301: ARRAY
70302: PPUSH
70303: LD_VAR 0 2
70307: PUSH
70308: LD_INT 2
70310: ARRAY
70311: PPUSH
70312: CALL_OW 428
70316: IFFALSE 70320
// exit ;
70318: GO 70347
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_VAR 0 2
70329: PUSH
70330: LD_INT 1
70332: ARRAY
70333: PPUSH
70334: LD_VAR 0 2
70338: PUSH
70339: LD_INT 2
70341: ARRAY
70342: PPUSH
70343: CALL_OW 111
// end ;
70347: LD_VAR 0 3
70351: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70352: LD_INT 0
70354: PPUSH
70355: PPUSH
70356: PPUSH
// if not unit or not enemy then
70357: LD_VAR 0 1
70361: NOT
70362: IFTRUE 70371
70364: PUSH
70365: LD_VAR 0 2
70369: NOT
70370: OR
70371: IFFALSE 70375
// exit ;
70373: GO 70501
// x := GetX ( enemy ) ;
70375: LD_ADDR_VAR 0 4
70379: PUSH
70380: LD_VAR 0 2
70384: PPUSH
70385: CALL_OW 250
70389: ST_TO_ADDR
// y := GetY ( enemy ) ;
70390: LD_ADDR_VAR 0 5
70394: PUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: CALL_OW 251
70404: ST_TO_ADDR
// if ValidHex ( x , y ) then
70405: LD_VAR 0 4
70409: PPUSH
70410: LD_VAR 0 5
70414: PPUSH
70415: CALL_OW 488
70419: IFFALSE 70501
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70421: LD_VAR 0 2
70425: PPUSH
70426: CALL_OW 247
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: LD_INT 2
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: IN
70441: IFTRUE 70464
70443: PUSH
70444: LD_VAR 0 1
70448: PPUSH
70449: CALL_OW 255
70453: PPUSH
70454: LD_VAR 0 2
70458: PPUSH
70459: CALL_OW 292
70463: OR
70464: IFFALSE 70482
// ComAttackUnit ( unit , enemy ) else
70466: LD_VAR 0 1
70470: PPUSH
70471: LD_VAR 0 2
70475: PPUSH
70476: CALL_OW 115
70480: GO 70501
// ComAgressiveMove ( unit , x , y ) ;
70482: LD_VAR 0 1
70486: PPUSH
70487: LD_VAR 0 4
70491: PPUSH
70492: LD_VAR 0 5
70496: PPUSH
70497: CALL_OW 114
// end ;
70501: LD_VAR 0 3
70505: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70506: LD_INT 0
70508: PPUSH
70509: PPUSH
70510: PPUSH
// list := AreaToList ( area , 0 ) ;
70511: LD_ADDR_VAR 0 5
70515: PUSH
70516: LD_VAR 0 1
70520: PPUSH
70521: LD_INT 0
70523: PPUSH
70524: CALL_OW 517
70528: ST_TO_ADDR
// if not list then
70529: LD_VAR 0 5
70533: NOT
70534: IFFALSE 70538
// exit ;
70536: GO 70668
// if all then
70538: LD_VAR 0 2
70542: IFFALSE 70630
// begin for i := 1 to list [ 1 ] do
70544: LD_ADDR_VAR 0 4
70548: PUSH
70549: DOUBLE
70550: LD_INT 1
70552: DEC
70553: ST_TO_ADDR
70554: LD_VAR 0 5
70558: PUSH
70559: LD_INT 1
70561: ARRAY
70562: PUSH
70563: FOR_TO
70564: IFFALSE 70626
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70566: LD_ADDR_VAR 0 3
70570: PUSH
70571: LD_VAR 0 3
70575: PPUSH
70576: LD_VAR 0 3
70580: PUSH
70581: LD_INT 1
70583: PLUS
70584: PPUSH
70585: LD_VAR 0 5
70589: PUSH
70590: LD_INT 1
70592: ARRAY
70593: PUSH
70594: LD_VAR 0 4
70598: ARRAY
70599: PUSH
70600: LD_VAR 0 5
70604: PUSH
70605: LD_INT 2
70607: ARRAY
70608: PUSH
70609: LD_VAR 0 4
70613: ARRAY
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PPUSH
70619: CALL_OW 1
70623: ST_TO_ADDR
70624: GO 70563
70626: POP
70627: POP
// exit ;
70628: GO 70668
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70630: LD_ADDR_VAR 0 3
70634: PUSH
70635: LD_VAR 0 5
70639: PUSH
70640: LD_INT 1
70642: ARRAY
70643: PUSH
70644: LD_INT 1
70646: ARRAY
70647: PUSH
70648: LD_VAR 0 5
70652: PUSH
70653: LD_INT 2
70655: ARRAY
70656: PUSH
70657: LD_INT 1
70659: ARRAY
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: EMPTY
70666: LIST
70667: ST_TO_ADDR
// end ;
70668: LD_VAR 0 3
70672: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70673: LD_INT 0
70675: PPUSH
70676: PPUSH
// list := AreaToList ( area , 0 ) ;
70677: LD_ADDR_VAR 0 4
70681: PUSH
70682: LD_VAR 0 1
70686: PPUSH
70687: LD_INT 0
70689: PPUSH
70690: CALL_OW 517
70694: ST_TO_ADDR
// if not list then
70695: LD_VAR 0 4
70699: NOT
70700: IFFALSE 70704
// exit ;
70702: GO 70745
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70704: LD_ADDR_VAR 0 3
70708: PUSH
70709: LD_VAR 0 4
70713: PUSH
70714: LD_INT 1
70716: ARRAY
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: PUSH
70722: LD_VAR 0 4
70726: PUSH
70727: LD_INT 2
70729: ARRAY
70730: PUSH
70731: LD_INT 1
70733: ARRAY
70734: PUSH
70735: LD_VAR 0 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: LIST
70744: ST_TO_ADDR
// end ;
70745: LD_VAR 0 3
70749: RET
// export function First ( array ) ; begin
70750: LD_INT 0
70752: PPUSH
// if not array then
70753: LD_VAR 0 1
70757: NOT
70758: IFFALSE 70762
// exit ;
70760: GO 70776
// result := array [ 1 ] ;
70762: LD_ADDR_VAR 0 2
70766: PUSH
70767: LD_VAR 0 1
70771: PUSH
70772: LD_INT 1
70774: ARRAY
70775: ST_TO_ADDR
// end ;
70776: LD_VAR 0 2
70780: RET
// export function Last ( array ) ; begin
70781: LD_INT 0
70783: PPUSH
// if not array then
70784: LD_VAR 0 1
70788: NOT
70789: IFFALSE 70793
// exit ;
70791: GO 70809
// result := array [ array ] ;
70793: LD_ADDR_VAR 0 2
70797: PUSH
70798: LD_VAR 0 1
70802: PUSH
70803: LD_VAR 0 1
70807: ARRAY
70808: ST_TO_ADDR
// end ;
70809: LD_VAR 0 2
70813: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70814: LD_INT 0
70816: PPUSH
70817: PPUSH
// result := [ ] ;
70818: LD_ADDR_VAR 0 5
70822: PUSH
70823: EMPTY
70824: ST_TO_ADDR
// if not array then
70825: LD_VAR 0 1
70829: NOT
70830: IFFALSE 70834
// exit ;
70832: GO 70946
// for i := 1 to array do
70834: LD_ADDR_VAR 0 6
70838: PUSH
70839: DOUBLE
70840: LD_INT 1
70842: DEC
70843: ST_TO_ADDR
70844: LD_VAR 0 1
70848: PUSH
70849: FOR_TO
70850: IFFALSE 70944
// if array [ i ] [ index ] = value then
70852: LD_VAR 0 1
70856: PUSH
70857: LD_VAR 0 6
70861: ARRAY
70862: PUSH
70863: LD_VAR 0 2
70867: ARRAY
70868: PUSH
70869: LD_VAR 0 3
70873: EQUAL
70874: IFFALSE 70942
// begin if indexColumn then
70876: LD_VAR 0 4
70880: IFFALSE 70916
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70882: LD_ADDR_VAR 0 5
70886: PUSH
70887: LD_VAR 0 5
70891: PPUSH
70892: LD_VAR 0 1
70896: PUSH
70897: LD_VAR 0 6
70901: ARRAY
70902: PUSH
70903: LD_VAR 0 4
70907: ARRAY
70908: PPUSH
70909: CALL 65954 0 2
70913: ST_TO_ADDR
70914: GO 70942
// result := Join ( result , array [ i ] ) ;
70916: LD_ADDR_VAR 0 5
70920: PUSH
70921: LD_VAR 0 5
70925: PPUSH
70926: LD_VAR 0 1
70930: PUSH
70931: LD_VAR 0 6
70935: ARRAY
70936: PPUSH
70937: CALL 65954 0 2
70941: ST_TO_ADDR
// end ;
70942: GO 70849
70944: POP
70945: POP
// end ;
70946: LD_VAR 0 5
70950: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70951: LD_INT 0
70953: PPUSH
// if not vehicles or not parkingPoint then
70954: LD_VAR 0 1
70958: NOT
70959: IFTRUE 70968
70961: PUSH
70962: LD_VAR 0 2
70966: NOT
70967: OR
70968: IFFALSE 70972
// exit ;
70970: GO 71070
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70972: LD_ADDR_VAR 0 1
70976: PUSH
70977: LD_VAR 0 1
70981: PPUSH
70982: LD_INT 50
70984: PUSH
70985: EMPTY
70986: LIST
70987: PUSH
70988: LD_INT 3
70990: PUSH
70991: LD_INT 92
70993: PUSH
70994: LD_VAR 0 2
70998: PUSH
70999: LD_INT 1
71001: ARRAY
71002: PUSH
71003: LD_VAR 0 2
71007: PUSH
71008: LD_INT 2
71010: ARRAY
71011: PUSH
71012: LD_INT 8
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PPUSH
71029: CALL_OW 72
71033: ST_TO_ADDR
// if not vehicles then
71034: LD_VAR 0 1
71038: NOT
71039: IFFALSE 71043
// exit ;
71041: GO 71070
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71043: LD_VAR 0 1
71047: PPUSH
71048: LD_VAR 0 2
71052: PUSH
71053: LD_INT 1
71055: ARRAY
71056: PPUSH
71057: LD_VAR 0 2
71061: PUSH
71062: LD_INT 2
71064: ARRAY
71065: PPUSH
71066: CALL_OW 111
// end ;
71070: LD_VAR 0 3
71074: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71075: LD_INT 0
71077: PPUSH
71078: PPUSH
71079: PPUSH
// if not side or not area then
71080: LD_VAR 0 1
71084: NOT
71085: IFTRUE 71094
71087: PUSH
71088: LD_VAR 0 2
71092: NOT
71093: OR
71094: IFFALSE 71098
// exit ;
71096: GO 71217
// tmp := AreaToList ( area , 0 ) ;
71098: LD_ADDR_VAR 0 5
71102: PUSH
71103: LD_VAR 0 2
71107: PPUSH
71108: LD_INT 0
71110: PPUSH
71111: CALL_OW 517
71115: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71116: LD_ADDR_VAR 0 4
71120: PUSH
71121: DOUBLE
71122: LD_INT 1
71124: DEC
71125: ST_TO_ADDR
71126: LD_VAR 0 5
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: PUSH
71135: FOR_TO
71136: IFFALSE 71215
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71138: LD_VAR 0 5
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PUSH
71147: LD_VAR 0 4
71151: ARRAY
71152: PPUSH
71153: LD_VAR 0 5
71157: PUSH
71158: LD_INT 2
71160: ARRAY
71161: PUSH
71162: LD_VAR 0 4
71166: ARRAY
71167: PPUSH
71168: CALL_OW 351
71172: IFFALSE 71213
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71174: LD_VAR 0 5
71178: PUSH
71179: LD_INT 1
71181: ARRAY
71182: PUSH
71183: LD_VAR 0 4
71187: ARRAY
71188: PPUSH
71189: LD_VAR 0 5
71193: PUSH
71194: LD_INT 2
71196: ARRAY
71197: PUSH
71198: LD_VAR 0 4
71202: ARRAY
71203: PPUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 244
// end ;
71213: GO 71135
71215: POP
71216: POP
// end ;
71217: LD_VAR 0 3
71221: RET
// export function UniqueArray ( array ) ; var i ; begin
71222: LD_INT 0
71224: PPUSH
71225: PPUSH
// result := [ ] ;
71226: LD_ADDR_VAR 0 2
71230: PUSH
71231: EMPTY
71232: ST_TO_ADDR
// if not array then
71233: LD_VAR 0 1
71237: NOT
71238: IFFALSE 71242
// exit ;
71240: GO 71303
// for i := 1 to array do
71242: LD_ADDR_VAR 0 3
71246: PUSH
71247: DOUBLE
71248: LD_INT 1
71250: DEC
71251: ST_TO_ADDR
71252: LD_VAR 0 1
71256: PUSH
71257: FOR_TO
71258: IFFALSE 71301
// if not array [ i ] in result then
71260: LD_VAR 0 1
71264: PUSH
71265: LD_VAR 0 3
71269: ARRAY
71270: PUSH
71271: LD_VAR 0 2
71275: IN
71276: NOT
71277: IFFALSE 71299
// result := Join ( result , i ) ;
71279: LD_ADDR_VAR 0 2
71283: PUSH
71284: LD_VAR 0 2
71288: PPUSH
71289: LD_VAR 0 3
71293: PPUSH
71294: CALL 65954 0 2
71298: ST_TO_ADDR
71299: GO 71257
71301: POP
71302: POP
// end ; end_of_file
71303: LD_VAR 0 2
71307: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
71308: PPOPN 6
71310: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
71311: LD_EXP 30
71315: PUSH
71316: LD_INT 4
71318: EQUAL
71319: IFFALSE 71355
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71321: LD_STRING setGameDifficulty(
71323: PUSH
71324: LD_OWVAR 67
71328: STR
71329: PUSH
71330: LD_STRING )
71332: STR
71333: PPUSH
71334: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
71338: LD_STRING displayDifficulty(
71340: PUSH
71341: LD_OWVAR 67
71345: STR
71346: PUSH
71347: LD_STRING )
71349: STR
71350: PPUSH
71351: CALL_OW 559
// end ; SOS_MapStart ( ) ;
71355: CALL 71384 0 0
// end ; end_of_file
71359: PPOPN 1
71361: END
// every 0 0$1 do
71362: GO 71364
71364: DISABLE
// begin enable ;
71365: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71366: LD_STRING updateTimer(
71368: PUSH
71369: LD_OWVAR 1
71373: STR
71374: PUSH
71375: LD_STRING );
71377: STR
71378: PPUSH
71379: CALL_OW 559
// end ;
71383: END
// export function SOS_MapStart ( ) ; begin
71384: LD_INT 0
71386: PPUSH
// UpdateFactoryWaypoints ( ) ;
71387: CALL 72318 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71391: CALL 72570 0 0
// ParseMultiDataToLua ( ) ;
71395: CALL 72717 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
71399: LD_STRING setSpecLogoNumber(
71401: PUSH
71402: LD_INT 2
71404: STR
71405: PUSH
71406: LD_STRING ,
71408: STR
71409: PUSH
71410: LD_INT 1
71412: STR
71413: PUSH
71414: LD_STRING )
71416: STR
71417: PPUSH
71418: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
71422: LD_STRING setSpecLogoNumber(
71424: PUSH
71425: LD_INT 3
71427: STR
71428: PUSH
71429: LD_STRING ,
71431: STR
71432: PUSH
71433: LD_INT 2
71435: STR
71436: PUSH
71437: LD_STRING )
71439: STR
71440: PPUSH
71441: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
71445: LD_STRING setSpecLogoNumber(
71447: PUSH
71448: LD_INT 4
71450: STR
71451: PUSH
71452: LD_STRING ,
71454: STR
71455: PUSH
71456: LD_INT 3
71458: STR
71459: PUSH
71460: LD_STRING )
71462: STR
71463: PPUSH
71464: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
71468: LD_STRING setSpecLogoNumber(
71470: PUSH
71471: LD_INT 5
71473: STR
71474: PUSH
71475: LD_STRING ,
71477: STR
71478: PUSH
71479: LD_INT 4
71481: STR
71482: PUSH
71483: LD_STRING )
71485: STR
71486: PPUSH
71487: CALL_OW 559
// end ;
71491: LD_VAR 0 1
71495: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
71501: PPUSH
71502: PPUSH
71503: PPUSH
71504: PPUSH
71505: PPUSH
71506: PPUSH
// for i := 1 to 8 do
71507: LD_ADDR_VAR 0 2
71511: PUSH
71512: DOUBLE
71513: LD_INT 1
71515: DEC
71516: ST_TO_ADDR
71517: LD_INT 8
71519: PUSH
71520: FOR_TO
71521: IFFALSE 71906
// begin if mpSidePositions [ i ] then
71523: LD_EXP 31
71527: PUSH
71528: LD_VAR 0 2
71532: ARRAY
71533: IFFALSE 71904
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
71535: LD_ADDR_VAR 0 7
71539: PUSH
71540: LD_INT 22
71542: PUSH
71543: LD_VAR 0 2
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 21
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PPUSH
71566: CALL_OW 69
71570: PPUSH
71571: CALL 30022 0 1
71575: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71576: LD_ADDR_VAR 0 9
71580: PUSH
71581: LD_INT 22
71583: PUSH
71584: LD_VAR 0 2
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 30
71598: PUSH
71599: LD_INT 0
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 30
71608: PUSH
71609: LD_INT 1
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: LIST
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PPUSH
71625: CALL_OW 69
71629: ST_TO_ADDR
// crates := 0 ;
71630: LD_ADDR_VAR 0 4
71634: PUSH
71635: LD_INT 0
71637: ST_TO_ADDR
// oil := 0 ;
71638: LD_ADDR_VAR 0 5
71642: PUSH
71643: LD_INT 0
71645: ST_TO_ADDR
// sib := 0 ;
71646: LD_ADDR_VAR 0 6
71650: PUSH
71651: LD_INT 0
71653: ST_TO_ADDR
// if bases then
71654: LD_VAR 0 9
71658: IFFALSE 71764
// begin for j in bases do
71660: LD_ADDR_VAR 0 3
71664: PUSH
71665: LD_VAR 0 9
71669: PUSH
71670: FOR_IN
71671: IFFALSE 71762
// begin base := GetBase ( j ) ;
71673: LD_ADDR_VAR 0 8
71677: PUSH
71678: LD_VAR 0 3
71682: PPUSH
71683: CALL_OW 274
71687: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
71688: LD_ADDR_VAR 0 4
71692: PUSH
71693: LD_VAR 0 4
71697: PUSH
71698: LD_VAR 0 8
71702: PPUSH
71703: LD_INT 1
71705: PPUSH
71706: CALL_OW 275
71710: PLUS
71711: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
71712: LD_ADDR_VAR 0 5
71716: PUSH
71717: LD_VAR 0 5
71721: PUSH
71722: LD_VAR 0 8
71726: PPUSH
71727: LD_INT 2
71729: PPUSH
71730: CALL_OW 275
71734: PLUS
71735: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
71736: LD_ADDR_VAR 0 6
71740: PUSH
71741: LD_VAR 0 6
71745: PUSH
71746: LD_VAR 0 8
71750: PPUSH
71751: LD_INT 3
71753: PPUSH
71754: CALL_OW 275
71758: PLUS
71759: ST_TO_ADDR
// end ;
71760: GO 71670
71762: POP
71763: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
71764: LD_STRING setSpecText(
71766: PUSH
71767: LD_VAR 0 2
71771: STR
71772: PUSH
71773: LD_STRING ,
71775: STR
71776: PUSH
71777: LD_INT 2
71779: STR
71780: PUSH
71781: LD_STRING ,
71783: STR
71784: PUSH
71785: LD_VAR 0 4
71789: STR
71790: PUSH
71791: LD_STRING )
71793: STR
71794: PPUSH
71795: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
71799: LD_STRING setSpecText(
71801: PUSH
71802: LD_VAR 0 2
71806: STR
71807: PUSH
71808: LD_STRING ,
71810: STR
71811: PUSH
71812: LD_INT 3
71814: STR
71815: PUSH
71816: LD_STRING ,
71818: STR
71819: PUSH
71820: LD_VAR 0 5
71824: STR
71825: PUSH
71826: LD_STRING )
71828: STR
71829: PPUSH
71830: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
71834: LD_STRING setSpecText(
71836: PUSH
71837: LD_VAR 0 2
71841: STR
71842: PUSH
71843: LD_STRING ,
71845: STR
71846: PUSH
71847: LD_INT 4
71849: STR
71850: PUSH
71851: LD_STRING ,
71853: STR
71854: PUSH
71855: LD_VAR 0 6
71859: STR
71860: PUSH
71861: LD_STRING )
71863: STR
71864: PPUSH
71865: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
71869: LD_STRING setSpecText(
71871: PUSH
71872: LD_VAR 0 2
71876: STR
71877: PUSH
71878: LD_STRING ,
71880: STR
71881: PUSH
71882: LD_INT 5
71884: STR
71885: PUSH
71886: LD_STRING ,
71888: STR
71889: PUSH
71890: LD_VAR 0 7
71894: STR
71895: PUSH
71896: LD_STRING )
71898: STR
71899: PPUSH
71900: CALL_OW 559
// end ; end ;
71904: GO 71520
71906: POP
71907: POP
// end ;
71908: LD_VAR 0 1
71912: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
71913: LD_INT 2
71915: PUSH
71916: LD_INT 30
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 30
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: LIST
71940: PPUSH
71941: CALL_OW 69
71945: IFFALSE 71955
71947: GO 71949
71949: DISABLE
// begin enable ;
71950: ENABLE
// UpdateSpectatorBar ;
71951: CALL 71496 0 0
// end ;
71955: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71956: LD_INT 0
71958: PPUSH
// end ;
71959: LD_VAR 0 12
71963: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71964: LD_INT 0
71966: PPUSH
71967: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71968: LD_VAR 0 1
71972: NOT
71973: IFTRUE 71992
71975: PUSH
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_VAR 0 3
71985: PPUSH
71986: CALL_OW 488
71990: NOT
71991: OR
71992: IFTRUE 72027
71994: PUSH
71995: LD_VAR 0 1
71999: PPUSH
72000: CALL_OW 266
72004: PUSH
72005: LD_INT 3
72007: NONEQUAL
72008: IFFALSE 72026
72010: PUSH
72011: LD_VAR 0 1
72015: PPUSH
72016: CALL_OW 247
72020: PUSH
72021: LD_INT 1
72023: EQUAL
72024: NOT
72025: AND
72026: OR
72027: IFFALSE 72031
// exit ;
72029: GO 72313
// if GetType ( factory ) = unit_human then
72031: LD_VAR 0 1
72035: PPUSH
72036: CALL_OW 247
72040: PUSH
72041: LD_INT 1
72043: EQUAL
72044: IFFALSE 72061
// factory := IsInUnit ( factory ) ;
72046: LD_ADDR_VAR 0 1
72050: PUSH
72051: LD_VAR 0 1
72055: PPUSH
72056: CALL_OW 310
72060: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72061: LD_VAR 0 1
72065: PPUSH
72066: CALL_OW 266
72070: PUSH
72071: LD_INT 3
72073: NONEQUAL
72074: IFFALSE 72078
// exit ;
72076: GO 72313
// for i := 1 to Count ( factoryWaypoints ) do
72078: LD_ADDR_VAR 0 5
72082: PUSH
72083: DOUBLE
72084: LD_INT 1
72086: DEC
72087: ST_TO_ADDR
72088: LD_EXP 70
72092: PPUSH
72093: CALL 30022 0 1
72097: PUSH
72098: FOR_TO
72099: IFFALSE 72261
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
72101: LD_VAR 0 2
72105: PPUSH
72106: LD_VAR 0 3
72110: PPUSH
72111: CALL_OW 428
72115: PUSH
72116: LD_EXP 70
72120: PUSH
72121: LD_VAR 0 5
72125: ARRAY
72126: PUSH
72127: LD_INT 2
72129: ARRAY
72130: EQUAL
72131: IFFALSE 72163
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
72133: LD_ADDR_EXP 70
72137: PUSH
72138: LD_EXP 70
72142: PPUSH
72143: LD_VAR 0 5
72147: PPUSH
72148: CALL_OW 3
72152: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72153: CALL 72318 0 0
// exit ;
72157: POP
72158: POP
72159: GO 72313
// end else
72161: GO 72259
// if factory = factoryWaypoints [ i ] [ 2 ] then
72163: LD_VAR 0 1
72167: PUSH
72168: LD_EXP 70
72172: PUSH
72173: LD_VAR 0 5
72177: ARRAY
72178: PUSH
72179: LD_INT 2
72181: ARRAY
72182: EQUAL
72183: IFFALSE 72259
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
72185: LD_ADDR_EXP 70
72189: PUSH
72190: LD_EXP 70
72194: PPUSH
72195: LD_VAR 0 5
72199: PPUSH
72200: CALL_OW 3
72204: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
72205: LD_ADDR_EXP 70
72209: PUSH
72210: LD_EXP 70
72214: PPUSH
72215: LD_VAR 0 1
72219: PPUSH
72220: CALL_OW 255
72224: PUSH
72225: LD_VAR 0 1
72229: PUSH
72230: LD_VAR 0 2
72234: PUSH
72235: LD_VAR 0 3
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: PPUSH
72246: CALL 65954 0 2
72250: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72251: CALL 72318 0 0
// exit ;
72255: POP
72256: POP
72257: GO 72313
// end ; end ;
72259: GO 72098
72261: POP
72262: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
72263: LD_ADDR_EXP 70
72267: PUSH
72268: LD_EXP 70
72272: PPUSH
72273: LD_VAR 0 1
72277: PPUSH
72278: CALL_OW 255
72282: PUSH
72283: LD_VAR 0 1
72287: PUSH
72288: LD_VAR 0 2
72292: PUSH
72293: LD_VAR 0 3
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: PPUSH
72304: CALL 65954 0 2
72308: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72309: CALL 72318 0 0
// end ;
72313: LD_VAR 0 4
72317: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72318: LD_INT 0
72320: PPUSH
72321: PPUSH
72322: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72323: LD_STRING resetFactoryWaypoint();
72325: PPUSH
72326: CALL_OW 559
// if factoryWaypoints then
72330: LD_EXP 70
72334: IFFALSE 72455
// begin list := factoryWaypoints ;
72336: LD_ADDR_VAR 0 3
72340: PUSH
72341: LD_EXP 70
72345: ST_TO_ADDR
// for i := 1 to list do
72346: LD_ADDR_VAR 0 2
72350: PUSH
72351: DOUBLE
72352: LD_INT 1
72354: DEC
72355: ST_TO_ADDR
72356: LD_VAR 0 3
72360: PUSH
72361: FOR_TO
72362: IFFALSE 72453
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72364: LD_STRING setFactoryWaypointXY(
72366: PUSH
72367: LD_VAR 0 3
72371: PUSH
72372: LD_VAR 0 2
72376: ARRAY
72377: PUSH
72378: LD_INT 1
72380: ARRAY
72381: STR
72382: PUSH
72383: LD_STRING ,
72385: STR
72386: PUSH
72387: LD_VAR 0 3
72391: PUSH
72392: LD_VAR 0 2
72396: ARRAY
72397: PUSH
72398: LD_INT 2
72400: ARRAY
72401: STR
72402: PUSH
72403: LD_STRING ,
72405: STR
72406: PUSH
72407: LD_VAR 0 3
72411: PUSH
72412: LD_VAR 0 2
72416: ARRAY
72417: PUSH
72418: LD_INT 3
72420: ARRAY
72421: STR
72422: PUSH
72423: LD_STRING ,
72425: STR
72426: PUSH
72427: LD_VAR 0 3
72431: PUSH
72432: LD_VAR 0 2
72436: ARRAY
72437: PUSH
72438: LD_INT 4
72440: ARRAY
72441: STR
72442: PUSH
72443: LD_STRING )
72445: STR
72446: PPUSH
72447: CALL_OW 559
72451: GO 72361
72453: POP
72454: POP
// end ; end ;
72455: LD_VAR 0 1
72459: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72460: LD_INT 0
72462: PPUSH
// if HexInfo ( x , y ) = warehouse then
72463: LD_VAR 0 2
72467: PPUSH
72468: LD_VAR 0 3
72472: PPUSH
72473: CALL_OW 428
72477: PUSH
72478: LD_VAR 0 1
72482: EQUAL
72483: IFFALSE 72510
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72485: LD_ADDR_EXP 72
72489: PUSH
72490: LD_EXP 72
72494: PPUSH
72495: LD_VAR 0 1
72499: PPUSH
72500: LD_INT 0
72502: PPUSH
72503: CALL_OW 1
72507: ST_TO_ADDR
72508: GO 72561
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72510: LD_ADDR_EXP 72
72514: PUSH
72515: LD_EXP 72
72519: PPUSH
72520: LD_VAR 0 1
72524: PPUSH
72525: LD_VAR 0 1
72529: PPUSH
72530: CALL_OW 255
72534: PUSH
72535: LD_VAR 0 1
72539: PUSH
72540: LD_VAR 0 2
72544: PUSH
72545: LD_VAR 0 3
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: PPUSH
72556: CALL_OW 1
72560: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72561: CALL 72570 0 0
// end ;
72565: LD_VAR 0 4
72569: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72570: LD_INT 0
72572: PPUSH
72573: PPUSH
72574: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72575: LD_STRING resetWarehouseGatheringPoints();
72577: PPUSH
72578: CALL_OW 559
// if warehouseGatheringPoints then
72582: LD_EXP 72
72586: IFFALSE 72712
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72588: LD_ADDR_VAR 0 3
72592: PUSH
72593: LD_EXP 72
72597: PPUSH
72598: CALL 69888 0 1
72602: ST_TO_ADDR
// for i := 1 to list do
72603: LD_ADDR_VAR 0 2
72607: PUSH
72608: DOUBLE
72609: LD_INT 1
72611: DEC
72612: ST_TO_ADDR
72613: LD_VAR 0 3
72617: PUSH
72618: FOR_TO
72619: IFFALSE 72710
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72621: LD_STRING setWarehouseGatheringPointXY(
72623: PUSH
72624: LD_VAR 0 3
72628: PUSH
72629: LD_VAR 0 2
72633: ARRAY
72634: PUSH
72635: LD_INT 1
72637: ARRAY
72638: STR
72639: PUSH
72640: LD_STRING ,
72642: STR
72643: PUSH
72644: LD_VAR 0 3
72648: PUSH
72649: LD_VAR 0 2
72653: ARRAY
72654: PUSH
72655: LD_INT 2
72657: ARRAY
72658: STR
72659: PUSH
72660: LD_STRING ,
72662: STR
72663: PUSH
72664: LD_VAR 0 3
72668: PUSH
72669: LD_VAR 0 2
72673: ARRAY
72674: PUSH
72675: LD_INT 3
72677: ARRAY
72678: STR
72679: PUSH
72680: LD_STRING ,
72682: STR
72683: PUSH
72684: LD_VAR 0 3
72688: PUSH
72689: LD_VAR 0 2
72693: ARRAY
72694: PUSH
72695: LD_INT 4
72697: ARRAY
72698: STR
72699: PUSH
72700: LD_STRING )
72702: STR
72703: PPUSH
72704: CALL_OW 559
72708: GO 72618
72710: POP
72711: POP
// end ; end ;
72712: LD_VAR 0 1
72716: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
// if not mpSidePositions then
72721: LD_EXP 31
72725: NOT
72726: IFFALSE 72730
// exit ;
72728: GO 72801
// result :=  ;
72730: LD_ADDR_VAR 0 1
72734: PUSH
72735: LD_STRING 
72737: ST_TO_ADDR
// for i := 1 to 8 do
72738: LD_ADDR_VAR 0 2
72742: PUSH
72743: DOUBLE
72744: LD_INT 1
72746: DEC
72747: ST_TO_ADDR
72748: LD_INT 8
72750: PUSH
72751: FOR_TO
72752: IFFALSE 72782
// begin result := result & mpSidePositions [ i ] & ; ;
72754: LD_ADDR_VAR 0 1
72758: PUSH
72759: LD_VAR 0 1
72763: PUSH
72764: LD_EXP 31
72768: PUSH
72769: LD_VAR 0 2
72773: ARRAY
72774: STR
72775: PUSH
72776: LD_STRING ;
72778: STR
72779: ST_TO_ADDR
// end ;
72780: GO 72751
72782: POP
72783: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
72784: LD_STRING setMultiplayerRealPosition("
72786: PUSH
72787: LD_VAR 0 1
72791: STR
72792: PUSH
72793: LD_STRING ");
72795: STR
72796: PPUSH
72797: CALL_OW 559
// end ;
72801: LD_VAR 0 1
72805: RET
