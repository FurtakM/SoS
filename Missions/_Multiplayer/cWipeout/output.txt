// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 157 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1835 0 1
  44: PPUSH
  45: CALL 5815 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1835 0 1
  56: PPUSH
  57: CALL 10377 0 1
// Multiplayer_Start ;
  61: CALL 3865 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 3977 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: PUSH
 134: LD_OWVAR 48
 138: NOT
 139: AND
 140: IFFALSE 156
 142: GO 144
 144: DISABLE
// begin enable ;
 145: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 146: LD_ADDR_OWVAR 47
 150: PUSH
 151: CALL 4751 0 0
 155: ST_TO_ADDR
// end ; end_of_file
 156: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 157: LD_INT 0
 159: PPUSH
 160: PPUSH
 161: PPUSH
 162: PPUSH
 163: PPUSH
// multi_settings_counter := 6 ;
 164: LD_ADDR_EXP 18
 168: PUSH
 169: LD_INT 6
 171: ST_TO_ADDR
// multi_settings := [ ] ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: EMPTY
 178: ST_TO_ADDR
// if Multiplayer then
 179: LD_OWVAR 4
 183: IFFALSE 363
// begin your_side := mp_player_side ;
 185: LD_ADDR_OWVAR 2
 189: PUSH
 190: LD_OWVAR 7
 194: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 195: LD_ADDR_EXP 6
 199: PUSH
 200: LD_OWVAR 6
 204: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 205: LD_ADDR_EXP 7
 209: PUSH
 210: LD_OWVAR 17
 214: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 215: LD_ADDR_EXP 8
 219: PUSH
 220: LD_OWVAR 15
 224: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 225: LD_ADDR_EXP 9
 229: PUSH
 230: LD_OWVAR 16
 234: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 235: LD_ADDR_EXP 10
 239: PUSH
 240: EMPTY
 241: PUSH
 242: EMPTY
 243: LIST
 244: ST_TO_ADDR
// for i in mp_teams do
 245: LD_ADDR_VAR 0 2
 249: PUSH
 250: LD_OWVAR 12
 254: PUSH
 255: FOR_IN
 256: IFFALSE 299
// if i then
 258: LD_VAR 0 2
 262: IFFALSE 297
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 264: LD_ADDR_EXP 10
 268: PUSH
 269: LD_EXP 10
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: LD_EXP 10
 281: PUSH
 282: LD_INT 1
 284: ARRAY
 285: PUSH
 286: LD_VAR 0 2
 290: UNION
 291: PPUSH
 292: CALL_OW 1
 296: ST_TO_ADDR
 297: GO 255
 299: POP
 300: POP
// for i := 1 to multi_settings_counter do
 301: LD_ADDR_VAR 0 2
 305: PUSH
 306: DOUBLE
 307: LD_INT 1
 309: DEC
 310: ST_TO_ADDR
 311: LD_EXP 18
 315: PUSH
 316: FOR_TO
 317: IFFALSE 359
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 319: LD_ADDR_EXP 17
 323: PUSH
 324: LD_EXP 17
 328: PPUSH
 329: LD_EXP 17
 333: PUSH
 334: LD_INT 1
 336: PLUS
 337: PPUSH
 338: LD_VAR 0 2
 342: PPUSH
 343: CALL_OW 426
 347: PUSH
 348: LD_INT 1
 350: PLUS
 351: PPUSH
 352: CALL_OW 1
 356: ST_TO_ADDR
 357: GO 316
 359: POP
 360: POP
// end else
 361: GO 549
// begin your_side := 3 ;
 363: LD_ADDR_OWVAR 2
 367: PUSH
 368: LD_INT 3
 370: ST_TO_ADDR
// multi_gametype := 1 ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 379: LD_ADDR_EXP 7
 383: PUSH
 384: LD_INT 0
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: LD_INT 2
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: LD_INT 0
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 418: LD_ADDR_EXP 8
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: LD_INT 1
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: LD_INT 0
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 457: LD_ADDR_EXP 9
 461: PUSH
 462: LD_INT 0
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 3
 470: PUSH
 471: LD_INT 3
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 496: LD_ADDR_EXP 10
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 5
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 518: LD_ADDR_EXP 17
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 4
 528: PUSH
 529: LD_INT 4
 531: PUSH
 532: LD_INT 3
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: LD_INT 3
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 549: LD_ADDR_EXP 11
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 588: LD_ADDR_EXP 14
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 0
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 627: LD_ADDR_EXP 25
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: LD_INT 0
 646: PUSH
 647: LD_INT 0
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: LD_INT 0
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: ST_TO_ADDR
// multi_teamgame := true ;
 666: LD_ADDR_EXP 15
 670: PUSH
 671: LD_INT 1
 673: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: ST_TO_ADDR
// multi_custom_commanders := true ;
 685: LD_ADDR_EXP 16
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// multi_commanders := [ ] ;
 693: LD_ADDR_EXP 24
 697: PUSH
 698: EMPTY
 699: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 700: LD_ADDR_EXP 27
 704: PUSH
 705: EMPTY
 706: ST_TO_ADDR
// multi_players_amount := 0 ;
 707: LD_ADDR_EXP 26
 711: PUSH
 712: LD_INT 0
 714: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 715: LD_ADDR_EXP 12
 719: PUSH
 720: LD_INT 8
 722: PUSH
 723: LD_INT 9
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 10
 732: PUSH
 733: LD_INT 11
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 12
 742: PUSH
 743: LD_INT 13
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 755: LD_ADDR_EXP 29
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 14
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL 69212 0 2
 773: PUSH
 774: LD_STRING kagan
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 31
 784: PUSH
 785: LD_INT 67
 787: PUSH
 788: LD_INT 102
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 31
 805: PUSH
 806: LD_INT 73
 808: PUSH
 809: LD_INT 103
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 29
 826: PUSH
 827: LD_INT 78
 829: PUSH
 830: LD_INT 112
 832: PUSH
 833: LD_INT 3
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 0
 853: PUSH
 854: LD_INT 15
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL 69212 0 2
 864: PUSH
 865: LD_STRING beria
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 31
 875: PUSH
 876: LD_INT 102
 878: PUSH
 879: LD_INT 86
 881: PUSH
 882: LD_INT 2
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 31
 896: PUSH
 897: LD_INT 98
 899: PUSH
 900: LD_INT 96
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 2
 917: PUSH
 918: LD_INT 115
 920: PUSH
 921: LD_INT 104
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: LD_INT 16
 947: PPUSH
 948: LD_INT 3
 950: PPUSH
 951: CALL 69212 0 2
 955: PUSH
 956: LD_STRING kirov
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 31
 966: PUSH
 967: LD_INT 169
 969: PUSH
 970: LD_INT 101
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 31
 987: PUSH
 988: LD_INT 175
 990: PUSH
 991: LD_INT 123
 993: PUSH
 994: LD_INT 5
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 4
1008: PUSH
1009: LD_INT 166
1011: PUSH
1012: LD_INT 115
1014: PUSH
1015: LD_INT 5
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 6
1029: PUSH
1030: LD_INT 152
1032: PUSH
1033: LD_INT 98
1035: PUSH
1036: LD_INT 3
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: ST_TO_ADDR
// for i := 1 to 8 do
1060: LD_ADDR_VAR 0 2
1064: PUSH
1065: DOUBLE
1066: LD_INT 1
1068: DEC
1069: ST_TO_ADDR
1070: LD_INT 8
1072: PUSH
1073: FOR_TO
1074: IFFALSE 1403
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1076: LD_VAR 0 2
1080: PPUSH
1081: CALL_OW 530
1085: IFFALSE 1243
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1087: LD_ADDR_EXP 11
1091: PUSH
1092: LD_EXP 11
1096: PPUSH
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL_OW 1
1109: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1110: LD_ADDR_EXP 9
1114: PUSH
1115: LD_EXP 9
1119: PPUSH
1120: LD_VAR 0 2
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 1
1132: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_EXP 7
1142: PPUSH
1143: LD_VAR 0 2
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 1
1155: ST_TO_ADDR
// for j = 1 to multi_teams do
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 10
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1241
// begin if i in multi_teams [ j ] then
1174: LD_VAR 0 2
1178: PUSH
1179: LD_EXP 10
1183: PUSH
1184: LD_VAR 0 3
1188: ARRAY
1189: IN
1190: IFFALSE 1239
// begin tmp := multi_teams [ j ] diff i ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_EXP 10
1201: PUSH
1202: LD_VAR 0 3
1206: ARRAY
1207: PUSH
1208: LD_VAR 0 2
1212: DIFF
1213: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1214: LD_ADDR_EXP 10
1218: PUSH
1219: LD_EXP 10
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 5
1233: PPUSH
1234: CALL_OW 1
1238: ST_TO_ADDR
// end ; end ;
1239: GO 1171
1241: POP
1242: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1243: LD_EXP 9
1247: PUSH
1248: LD_VAR 0 2
1252: ARRAY
1253: PUSH
1254: LD_EXP 9
1258: PUSH
1259: LD_VAR 0 2
1263: ARRAY
1264: PUSH
1265: LD_EXP 13
1269: IN
1270: NOT
1271: AND
1272: IFFALSE 1313
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1274: LD_ADDR_EXP 9
1278: PUSH
1279: LD_EXP 9
1283: PPUSH
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_EXP 13
1293: PUSH
1294: LD_INT 1
1296: PPUSH
1297: LD_EXP 13
1301: PPUSH
1302: CALL_OW 12
1306: ARRAY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1313: LD_EXP 9
1317: PUSH
1318: LD_VAR 0 2
1322: ARRAY
1323: NOT
1324: PUSH
1325: LD_EXP 7
1329: PUSH
1330: LD_VAR 0 2
1334: ARRAY
1335: NOT
1336: AND
1337: PUSH
1338: LD_EXP 11
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: NOT
1349: AND
1350: IFFALSE 1375
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1352: LD_ADDR_EXP 14
1356: PUSH
1357: LD_EXP 14
1361: PPUSH
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL_OW 1
1374: ST_TO_ADDR
// if multi_sides [ i ] then
1375: LD_EXP 7
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: IFFALSE 1401
// multi_players_amount := multi_players_amount + 1 ;
1387: LD_ADDR_EXP 26
1391: PUSH
1392: LD_EXP 26
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ST_TO_ADDR
// end ;
1401: GO 1073
1403: POP
1404: POP
// for i in multi_teams do
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: LD_EXP 10
1414: PUSH
1415: FOR_IN
1416: IFFALSE 1524
// begin for j = 2 to i do
1418: LD_ADDR_VAR 0 3
1422: PUSH
1423: DOUBLE
1424: LD_INT 2
1426: DEC
1427: ST_TO_ADDR
1428: LD_VAR 0 2
1432: PUSH
1433: FOR_TO
1434: IFFALSE 1520
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1436: LD_VAR 0 2
1440: PUSH
1441: LD_VAR 0 3
1445: ARRAY
1446: PPUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PPUSH
1456: CALL_OW 343
// for x = 1 to j - 1 do
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: MINUS
1478: PUSH
1479: FOR_TO
1480: IFFALSE 1516
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1482: LD_VAR 0 2
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PPUSH
1493: LD_VAR 0 2
1497: PUSH
1498: LD_VAR 0 4
1502: ARRAY
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 80
1514: GO 1479
1516: POP
1517: POP
// end ;
1518: GO 1433
1520: POP
1521: POP
// end ;
1522: GO 1415
1524: POP
1525: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1526: LD_ADDR_OWVAR 67
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 2
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_EXP 17
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: ARRAY
1554: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: LD_INT 6
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 9
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_EXP 17
1582: PUSH
1583: LD_INT 2
1585: ARRAY
1586: ARRAY
1587: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1588: LD_ADDR_EXP 20
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: LD_INT 4
1601: PUSH
1602: LD_INT 5
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_EXP 17
1615: PUSH
1616: LD_INT 3
1618: ARRAY
1619: ARRAY
1620: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1621: LD_ADDR_EXP 21
1625: PUSH
1626: LD_INT 3000
1628: PUSH
1629: LD_INT 1120
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 5000
1638: PUSH
1639: LD_INT 770
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 6000
1648: PUSH
1649: LD_INT 490
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 8000
1658: PUSH
1659: LD_INT 420
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_EXP 17
1676: PUSH
1677: LD_INT 4
1679: ARRAY
1680: ARRAY
1681: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1682: LD_ADDR_EXP 22
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_EXP 17
1705: PUSH
1706: LD_INT 5
1708: ARRAY
1709: ARRAY
1710: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1711: LD_ADDR_EXP 23
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: LD_EXP 17
1734: PUSH
1735: LD_INT 6
1737: ARRAY
1738: ARRAY
1739: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1740: LD_ADDR_EXP 28
1744: PUSH
1745: LD_INT 10500
1747: PUSH
1748: LD_INT 31500
1750: PUSH
1751: LD_INT 52500
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_OWVAR 67
1763: ARRAY
1764: ST_TO_ADDR
// if multi_extra_oil then
1765: LD_EXP 22
1769: IFFALSE 1830
// begin if multi_extra_oil = 1 then
1771: LD_EXP 22
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1794
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1781: LD_INT 109
1783: PPUSH
1784: LD_INT 130
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1794: LD_EXP 22
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1830
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1804: LD_INT 109
1806: PPUSH
1807: LD_INT 130
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1817: LD_INT 150
1819: PPUSH
1820: LD_INT 112
1822: PPUSH
1823: LD_INT 2
1825: PPUSH
1826: CALL_OW 62
// end ; end ; end ;
1830: LD_VAR 0 1
1834: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1835: LD_INT 0
1837: PPUSH
1838: PPUSH
// if not multi_sides [ preferSide ] then
1839: LD_EXP 7
1843: PUSH
1844: LD_VAR 0 1
1848: ARRAY
1849: NOT
1850: IFFALSE 1864
// begin result := preferSide ;
1852: LD_ADDR_VAR 0 2
1856: PUSH
1857: LD_VAR 0 1
1861: ST_TO_ADDR
// exit ;
1862: GO 1911
// end ; for i := 1 to 8 do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: DOUBLE
1870: LD_INT 1
1872: DEC
1873: ST_TO_ADDR
1874: LD_INT 8
1876: PUSH
1877: FOR_TO
1878: IFFALSE 1909
// if not multi_sides [ i ] then
1880: LD_EXP 7
1884: PUSH
1885: LD_VAR 0 3
1889: ARRAY
1890: NOT
1891: IFFALSE 1907
// begin result := i ;
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 3
1902: ST_TO_ADDR
// exit ;
1903: POP
1904: POP
1905: GO 1911
// end ;
1907: GO 1877
1909: POP
1910: POP
// end ;
1911: LD_VAR 0 2
1915: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1916: LD_INT 0
1918: PPUSH
// uc_side := side ;
1919: LD_ADDR_OWVAR 20
1923: PUSH
1924: LD_VAR 0 1
1928: ST_TO_ADDR
// uc_nation := nation_russian ;
1929: LD_ADDR_OWVAR 21
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// hc_importance := 100 ;
1937: LD_ADDR_OWVAR 32
1941: PUSH
1942: LD_INT 100
1944: ST_TO_ADDR
// hc_class := class_soldier ;
1945: LD_ADDR_OWVAR 28
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// if num = 1 then
1953: LD_VAR 0 2
1957: PUSH
1958: LD_INT 1
1960: EQUAL
1961: IFFALSE 2024
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
1963: LD_INT 1
1965: PPUSH
1966: LD_EXP 20
1970: PPUSH
1971: CALL_OW 381
// hc_gallery := ru ;
1975: LD_ADDR_OWVAR 33
1979: PUSH
1980: LD_STRING ru
1982: ST_TO_ADDR
// hc_face_number := 10 ;
1983: LD_ADDR_OWVAR 34
1987: PUSH
1988: LD_INT 10
1990: ST_TO_ADDR
// hc_name := Popov ;
1991: LD_ADDR_OWVAR 26
1995: PUSH
1996: LD_STRING Popov
1998: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1999: LD_ADDR_OWVAR 29
2003: PUSH
2004: LD_INT 10
2006: PUSH
2007: LD_INT 10
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// result := CreateHuman ;
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// end ; if num = 2 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 2
2031: EQUAL
2032: IFFALSE 2103
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 383
// hc_class := class_mechanic ;
2046: LD_ADDR_OWVAR 28
2050: PUSH
2051: LD_INT 3
2053: ST_TO_ADDR
// hc_gallery := ru ;
2054: LD_ADDR_OWVAR 33
2058: PUSH
2059: LD_STRING ru
2061: ST_TO_ADDR
// hc_face_number := 1 ;
2062: LD_ADDR_OWVAR 34
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// hc_name := Burlak ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING Burlak
2077: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2078: LD_ADDR_OWVAR 29
2082: PUSH
2083: LD_INT 10
2085: PUSH
2086: LD_INT 11
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// result := CreateHuman ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: CALL_OW 44
2102: ST_TO_ADDR
// end ; if num = 3 then
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: EQUAL
2111: IFFALSE 2174
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2113: LD_INT 1
2115: PPUSH
2116: LD_EXP 20
2120: PPUSH
2121: CALL_OW 381
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 8 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 8
2140: ST_TO_ADDR
// hc_name := Kurin ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Kurin
2148: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; end ;
2174: LD_VAR 0 3
2178: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2179: LD_INT 0
2181: PPUSH
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
// for i := 1 to 8 do
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_INT 8
2203: PUSH
2204: FOR_TO
2205: IFFALSE 3534
// begin if not multi_sides [ i ] then
2207: LD_EXP 7
2211: PUSH
2212: LD_VAR 0 2
2216: ARRAY
2217: NOT
2218: IFFALSE 2222
// continue ;
2220: GO 2204
// if multi_buildings [ multi_sides [ i ] ] then
2222: LD_EXP 29
2226: PUSH
2227: LD_EXP 7
2231: PUSH
2232: LD_VAR 0 2
2236: ARRAY
2237: ARRAY
2238: IFFALSE 2551
// begin uc_side := i ;
2240: LD_ADDR_OWVAR 20
2244: PUSH
2245: LD_VAR 0 2
2249: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2250: LD_ADDR_OWVAR 21
2254: PUSH
2255: LD_EXP 9
2259: PUSH
2260: LD_VAR 0 2
2264: ARRAY
2265: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_EXP 29
2275: PUSH
2276: LD_EXP 7
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: ARRAY
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2549
// begin if j [ 1 ] = b_oil_mine then
2291: LD_VAR 0 3
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 29
2302: EQUAL
2303: IFFALSE 2340
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 2
2312: ARRAY
2313: PUSH
2314: LD_INT 1
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 2
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL_OW 441
// bc_type := j [ 1 ] ;
2340: LD_ADDR_OWVAR 42
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 1
2352: ARRAY
2353: ST_TO_ADDR
// bc_level := 2 ;
2354: LD_ADDR_OWVAR 43
2358: PUSH
2359: LD_INT 2
2361: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 6
2373: EQUAL
2374: IFFALSE 2392
// begin bc_kind1 := b_lab_basic ;
2376: LD_ADDR_OWVAR 44
2380: PUSH
2381: LD_INT 9
2383: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2384: LD_ADDR_OWVAR 45
2388: PUSH
2389: LD_INT 9
2391: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2392: LD_ADDR_VAR 0 4
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 2
2417: ARRAY
2418: PUSH
2419: LD_INT 2
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PUSH
2432: LD_INT 3
2434: ARRAY
2435: PPUSH
2436: CALL_OW 47
2440: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2441: LD_VAR 0 3
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PUSH
2450: LD_INT 0
2452: EQUAL
2453: IFFALSE 2547
// begin SetBName ( b , j [ 3 ] ) ;
2455: LD_VAR 0 4
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 3
2467: ARRAY
2468: PPUSH
2469: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2473: LD_VAR 0 4
2477: PPUSH
2478: CALL_OW 274
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 320
2488: PUSH
2489: LD_INT 240
2491: PUSH
2492: LD_INT 150
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: PUSH
2500: LD_OWVAR 67
2504: ARRAY
2505: PPUSH
2506: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2510: LD_VAR 0 4
2514: PPUSH
2515: CALL_OW 274
2519: PPUSH
2520: LD_INT 2
2522: PPUSH
2523: LD_INT 160
2525: PUSH
2526: LD_INT 130
2528: PUSH
2529: LD_INT 100
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_OWVAR 67
2541: ARRAY
2542: PPUSH
2543: CALL_OW 277
// end ; end ;
2547: GO 2288
2549: POP
2550: POP
// end ; if multi_custom_commanders then
2551: LD_EXP 16
2555: IFFALSE 2765
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2557: LD_ADDR_VAR 0 6
2561: PUSH
2562: LD_VAR 0 2
2566: PPUSH
2567: LD_EXP 7
2571: PUSH
2572: LD_VAR 0 2
2576: ARRAY
2577: PPUSH
2578: CALL 1916 0 2
2582: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2583: LD_ADDR_EXP 24
2587: PUSH
2588: LD_EXP 24
2592: PPUSH
2593: LD_EXP 24
2597: PUSH
2598: LD_INT 1
2600: PLUS
2601: PPUSH
2602: LD_VAR 0 6
2606: PPUSH
2607: CALL_OW 2
2611: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2612: LD_VAR 0 6
2616: PPUSH
2617: CALL_OW 257
2621: PUSH
2622: LD_INT 3
2624: EQUAL
2625: IFFALSE 2730
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2627: LD_INT 22
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: LD_INT 51
2638: PPUSH
2639: LD_INT 100
2641: PPUSH
2642: CALL 31802 0 5
// veh := CreateVehicle ;
2646: LD_ADDR_VAR 0 7
2650: PUSH
2651: CALL_OW 45
2655: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2656: LD_VAR 0 7
2660: PPUSH
2661: LD_INT 2
2663: PPUSH
2664: LD_INT 100
2666: PUSH
2667: LD_INT 20
2669: PUSH
2670: LD_OWVAR 67
2674: MUL
2675: MINUS
2676: PPUSH
2677: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2681: LD_VAR 0 7
2685: PPUSH
2686: LD_EXP 12
2690: PUSH
2691: LD_EXP 7
2695: PUSH
2696: LD_VAR 0 2
2700: ARRAY
2701: ARRAY
2702: PUSH
2703: LD_INT 2
2705: ARRAY
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2714: LD_VAR 0 6
2718: PPUSH
2719: LD_VAR 0 7
2723: PPUSH
2724: CALL_OW 52
// end else
2728: GO 2763
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2730: LD_VAR 0 6
2734: PPUSH
2735: LD_EXP 12
2739: PUSH
2740: LD_EXP 7
2744: PUSH
2745: LD_VAR 0 2
2749: ARRAY
2750: ARRAY
2751: PUSH
2752: LD_INT 1
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// end else
2763: GO 2976
// begin uc_side := i ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_VAR 0 2
2774: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_EXP 9
2784: PUSH
2785: LD_VAR 0 2
2789: ARRAY
2790: ST_TO_ADDR
// hc_importance := 100 ;
2791: LD_ADDR_OWVAR 32
2795: PUSH
2796: LD_INT 100
2798: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_EXP 20
2809: PPUSH
2810: CALL_OW 380
// if multiplayer then
2814: LD_OWVAR 4
2818: IFFALSE 2876
// begin hc_name := mp_sides_players_names [ i ] ;
2820: LD_ADDR_OWVAR 26
2824: PUSH
2825: LD_OWVAR 19
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2836: LD_ADDR_OWVAR 33
2840: PUSH
2841: LD_STRING MULTIAVATARS
2843: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2844: LD_ADDR_OWVAR 34
2848: PUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 525
2858: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2859: LD_ADDR_OWVAR 27
2863: PUSH
2864: LD_VAR 0 2
2868: PPUSH
2869: CALL_OW 526
2873: ST_TO_ADDR
// end else
2874: GO 2908
// begin hc_gallery :=  ;
2876: LD_ADDR_OWVAR 33
2880: PUSH
2881: LD_STRING 
2883: ST_TO_ADDR
// hc_name :=  ;
2884: LD_ADDR_OWVAR 26
2888: PUSH
2889: LD_STRING 
2891: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2892: LD_ADDR_OWVAR 27
2896: PUSH
2897: LD_INT 1
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 12
2907: ST_TO_ADDR
// end ; un := CreateHuman ;
2908: LD_ADDR_VAR 0 6
2912: PUSH
2913: CALL_OW 44
2917: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2918: LD_VAR 0 6
2922: PPUSH
2923: LD_EXP 12
2927: PUSH
2928: LD_EXP 7
2932: PUSH
2933: LD_VAR 0 2
2937: ARRAY
2938: ARRAY
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: LD_INT 0
2946: PPUSH
2947: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2951: LD_ADDR_EXP 24
2955: PUSH
2956: LD_EXP 24
2960: PPUSH
2961: LD_VAR 0 2
2965: PPUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
// end ; InitHc ;
2976: CALL_OW 19
// InitUc ;
2980: CALL_OW 18
// uc_side := i ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_VAR 0 2
2993: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2994: LD_ADDR_OWVAR 21
2998: PUSH
2999: LD_EXP 9
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ST_TO_ADDR
// hc_gallery :=  ;
3010: LD_ADDR_OWVAR 33
3014: PUSH
3015: LD_STRING 
3017: ST_TO_ADDR
// hc_name :=  ;
3018: LD_ADDR_OWVAR 26
3022: PUSH
3023: LD_STRING 
3025: ST_TO_ADDR
// hc_importance := 0 ;
3026: LD_ADDR_OWVAR 32
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// cl := 1 ;
3034: LD_ADDR_VAR 0 5
3038: PUSH
3039: LD_INT 1
3041: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3042: LD_ADDR_VAR 0 3
3046: PUSH
3047: DOUBLE
3048: LD_INT 2
3050: DEC
3051: ST_TO_ADDR
3052: LD_EXP 19
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3530
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3060: LD_VAR 0 3
3064: PUSH
3065: LD_INT 1
3067: MINUS
3068: PUSH
3069: LD_EXP 19
3073: PUSH
3074: LD_INT 1
3076: MINUS
3077: PUSH
3078: LD_INT 4
3080: DIVREAL
3081: MOD
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3102
// cl := cl + 1 ;
3088: LD_ADDR_VAR 0 5
3092: PUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 1
3100: PLUS
3101: ST_TO_ADDR
// if cl > 4 then
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 4
3109: GREATER
3110: IFFALSE 3120
// cl := 1 ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_INT 1
3119: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3120: LD_INT 0
3122: PPUSH
3123: LD_VAR 0 5
3127: PPUSH
3128: LD_EXP 20
3132: PPUSH
3133: CALL_OW 380
// un := CreateHuman ;
3137: LD_ADDR_VAR 0 6
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// if j > copy then
3147: LD_VAR 0 3
3151: PUSH
3152: LD_VAR 0 9
3156: GREATER
3157: IFFALSE 3186
// copy := Replace ( copy , j , un ) else
3159: LD_ADDR_VAR 0 9
3163: PUSH
3164: LD_VAR 0 9
3168: PPUSH
3169: LD_VAR 0 3
3173: PPUSH
3174: LD_VAR 0 6
3178: PPUSH
3179: CALL_OW 1
3183: ST_TO_ADDR
3184: GO 3268
// begin CopySkills ( copy [ j ] , un ) ;
3186: LD_VAR 0 9
3190: PUSH
3191: LD_VAR 0 3
3195: ARRAY
3196: PPUSH
3197: LD_VAR 0 6
3201: PPUSH
3202: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3206: LD_VAR 0 6
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_VAR 0 9
3218: PUSH
3219: LD_VAR 0 3
3223: ARRAY
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 260
3232: PPUSH
3233: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_INT 1
3244: PPUSH
3245: LD_VAR 0 9
3249: PUSH
3250: LD_VAR 0 3
3254: ARRAY
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 260
3263: PPUSH
3264: CALL_OW 239
// end ; if multi_pos_area then
3268: LD_EXP 12
3272: IFFALSE 3528
// begin if GetClass ( un ) = 3 then
3274: LD_VAR 0 6
3278: PPUSH
3279: CALL_OW 257
3283: PUSH
3284: LD_INT 3
3286: EQUAL
3287: IFFALSE 3384
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3289: LD_INT 21
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 43
3300: PUSH
3301: LD_INT 42
3303: PUSH
3304: LD_INT 42
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: PUSH
3312: LD_OWVAR 67
3316: ARRAY
3317: PPUSH
3318: LD_INT 80
3320: PPUSH
3321: CALL 31802 0 5
// veh := CreateVehicle ;
3325: LD_ADDR_VAR 0 7
3329: PUSH
3330: CALL_OW 45
3334: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3335: LD_VAR 0 7
3339: PPUSH
3340: LD_EXP 12
3344: PUSH
3345: LD_EXP 7
3349: PUSH
3350: LD_VAR 0 2
3354: ARRAY
3355: ARRAY
3356: PUSH
3357: LD_INT 2
3359: ARRAY
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3368: LD_VAR 0 6
3372: PPUSH
3373: LD_VAR 0 7
3377: PPUSH
3378: CALL_OW 52
// continue ;
3382: GO 3057
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3384: LD_ADDR_VAR 0 8
3388: PUSH
3389: LD_INT 22
3391: PUSH
3392: LD_VAR 0 2
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 30
3403: PUSH
3404: LD_INT 31
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 58
3413: PUSH
3414: EMPTY
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3427: LD_VAR 0 6
3431: PPUSH
3432: CALL_OW 257
3436: PUSH
3437: LD_INT 1
3439: EQUAL
3440: PUSH
3441: LD_VAR 0 8
3445: AND
3446: IFFALSE 3495
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3448: LD_VAR 0 6
3452: PPUSH
3453: LD_VAR 0 8
3457: PUSH
3458: LD_INT 1
3460: ARRAY
3461: PPUSH
3462: CALL_OW 254
3466: PUSH
3467: LD_INT 3
3469: MINUS
3470: PPUSH
3471: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3475: LD_VAR 0 6
3479: PPUSH
3480: LD_VAR 0 8
3484: PUSH
3485: LD_INT 1
3487: ARRAY
3488: PPUSH
3489: CALL_OW 52
// continue ;
3493: GO 3057
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3495: LD_VAR 0 6
3499: PPUSH
3500: LD_EXP 12
3504: PUSH
3505: LD_EXP 7
3509: PUSH
3510: LD_VAR 0 2
3514: ARRAY
3515: ARRAY
3516: PUSH
3517: LD_INT 1
3519: ARRAY
3520: PPUSH
3521: LD_INT 0
3523: PPUSH
3524: CALL_OW 49
// end ; end ;
3528: GO 3057
3530: POP
3531: POP
// end ;
3532: GO 2204
3534: POP
3535: POP
// end ;
3536: LD_VAR 0 1
3540: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3541: LD_INT 0
3543: PPUSH
3544: PPUSH
3545: PPUSH
3546: PPUSH
3547: PPUSH
// if not multi_support then
3548: LD_EXP 23
3552: NOT
3553: IFFALSE 3557
// exit ;
3555: GO 3860
// result := [ ] ;
3557: LD_ADDR_VAR 0 1
3561: PUSH
3562: EMPTY
3563: ST_TO_ADDR
// for i := 1 to 8 do
3564: LD_ADDR_VAR 0 2
3568: PUSH
3569: DOUBLE
3570: LD_INT 1
3572: DEC
3573: ST_TO_ADDR
3574: LD_INT 8
3576: PUSH
3577: FOR_TO
3578: IFFALSE 3858
// begin result := Replace ( result , i , [ ] ) ;
3580: LD_ADDR_VAR 0 1
3584: PUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: LD_VAR 0 2
3594: PPUSH
3595: EMPTY
3596: PPUSH
3597: CALL_OW 1
3601: ST_TO_ADDR
// if multi_sides [ i ] then
3602: LD_EXP 7
3606: PUSH
3607: LD_VAR 0 2
3611: ARRAY
3612: IFFALSE 3856
// begin tmp := [ ] ;
3614: LD_ADDR_VAR 0 5
3618: PUSH
3619: EMPTY
3620: ST_TO_ADDR
// if multi_support = 1 then
3621: LD_EXP 23
3625: PUSH
3626: LD_INT 1
3628: EQUAL
3629: IFFALSE 3726
// begin uc_side := i ;
3631: LD_ADDR_OWVAR 20
3635: PUSH
3636: LD_VAR 0 2
3640: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3641: LD_ADDR_OWVAR 21
3645: PUSH
3646: LD_EXP 9
3650: PUSH
3651: LD_VAR 0 2
3655: ARRAY
3656: ST_TO_ADDR
// for j := 1 to 3 do
3657: LD_ADDR_VAR 0 3
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_INT 3
3669: PUSH
3670: FOR_TO
3671: IFFALSE 3724
// begin InitHC_All ( ) ;
3673: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3677: LD_INT 0
3679: PPUSH
3680: LD_INT 1
3682: PPUSH
3683: LD_INT 4
3685: PPUSH
3686: CALL_OW 12
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 4
3696: PPUSH
3697: CALL_OW 12
3701: PPUSH
3702: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3706: LD_ADDR_VAR 0 5
3710: PUSH
3711: LD_VAR 0 5
3715: PUSH
3716: CALL_OW 44
3720: ADD
3721: ST_TO_ADDR
// end ;
3722: GO 3670
3724: POP
3725: POP
// end ; if multi_support = 2 then
3726: LD_EXP 23
3730: PUSH
3731: LD_INT 2
3733: EQUAL
3734: IFFALSE 3831
// begin uc_side := i ;
3736: LD_ADDR_OWVAR 20
3740: PUSH
3741: LD_VAR 0 2
3745: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_EXP 9
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: ST_TO_ADDR
// for j := 1 to 5 do
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: DOUBLE
3768: LD_INT 1
3770: DEC
3771: ST_TO_ADDR
3772: LD_INT 5
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3829
// begin InitHC_All ( ) ;
3778: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3782: LD_INT 0
3784: PPUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 4
3790: PPUSH
3791: CALL_OW 12
3795: PPUSH
3796: LD_INT 2
3798: PPUSH
3799: LD_INT 4
3801: PPUSH
3802: CALL_OW 12
3806: PPUSH
3807: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_VAR 0 5
3820: PUSH
3821: CALL_OW 44
3825: ADD
3826: ST_TO_ADDR
// end ;
3827: GO 3775
3829: POP
3830: POP
// end ; result := Replace ( result , i , tmp ) ;
3831: LD_ADDR_VAR 0 1
3835: PUSH
3836: LD_VAR 0 1
3840: PPUSH
3841: LD_VAR 0 2
3845: PPUSH
3846: LD_VAR 0 5
3850: PPUSH
3851: CALL_OW 1
3855: ST_TO_ADDR
// end ; end ;
3856: GO 3577
3858: POP
3859: POP
// end ;
3860: LD_VAR 0 1
3864: RET
// export function Multiplayer_Start ( ) ; begin
3865: LD_INT 0
3867: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3868: CALL 2179 0 0
// Multiplayer_InitPointSystem ( ) ;
3872: CALL 4840 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3876: LD_INT 20
3878: PPUSH
3879: CALL 5016 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3883: LD_INT 150
3885: PPUSH
3886: CALL 5016 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3890: LD_INT 5
3892: PPUSH
3893: CALL 5016 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3897: LD_INT 40
3899: NEG
3900: PPUSH
3901: CALL 5016 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3905: LD_INT 200
3907: PPUSH
3908: CALL 5016 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3912: LD_INT 2
3914: PPUSH
3915: CALL 5016 0 1
// if multi_support then
3919: LD_EXP 23
3923: IFFALSE 3935
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3925: LD_ADDR_EXP 27
3929: PUSH
3930: CALL 3541 0 0
3934: ST_TO_ADDR
// if multi_sides [ your_side ] then
3935: LD_EXP 7
3939: PUSH
3940: LD_OWVAR 2
3944: ARRAY
3945: IFFALSE 3972
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3947: LD_INT 22
3949: PUSH
3950: LD_OWVAR 2
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PPUSH
3959: CALL_OW 69
3963: PUSH
3964: LD_INT 1
3966: ARRAY
3967: PPUSH
3968: CALL_OW 87
// end ;
3972: LD_VAR 0 1
3976: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
// tmp := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
3986: LD_ADDR_VAR 0 6
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 3
3999: PUSH
4000: LD_INT 4
4002: PUSH
4003: LD_INT 5
4005: PUSH
4006: LD_INT 6
4008: PUSH
4009: LD_INT 7
4011: PUSH
4012: LD_INT 8
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4025: LD_INT 35
4027: PPUSH
4028: CALL_OW 67
// if tick = 10 10$00 then
4032: LD_OWVAR 1
4036: PUSH
4037: LD_INT 21000
4039: EQUAL
4040: IFFALSE 4211
// begin for i := 1 to 8 do
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: DOUBLE
4048: LD_INT 1
4050: DEC
4051: ST_TO_ADDR
4052: LD_INT 8
4054: PUSH
4055: FOR_TO
4056: IFFALSE 4209
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4058: LD_EXP 7
4062: PUSH
4063: LD_VAR 0 2
4067: ARRAY
4068: PUSH
4069: LD_EXP 25
4073: PUSH
4074: LD_VAR 0 2
4078: ARRAY
4079: NOT
4080: AND
4081: IFFALSE 4207
// begin uc_side := i ;
4083: LD_ADDR_OWVAR 20
4087: PUSH
4088: LD_VAR 0 2
4092: ST_TO_ADDR
// uc_nation := nation_russian ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4101: LD_INT 22
4103: PPUSH
4104: LD_INT 1
4106: PPUSH
4107: LD_INT 1
4109: PPUSH
4110: LD_INT 44
4112: PUSH
4113: LD_INT 44
4115: PUSH
4116: LD_INT 42
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: LD_OWVAR 67
4128: ARRAY
4129: PPUSH
4130: LD_INT 30
4132: PPUSH
4133: CALL 31802 0 5
// veh := CreateVehicle ;
4137: LD_ADDR_VAR 0 7
4141: PUSH
4142: CALL_OW 45
4146: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4147: LD_VAR 0 7
4151: PPUSH
4152: LD_INT 32
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 5
4167: PUSH
4168: LD_OWVAR 67
4172: MINUS
4173: PPUSH
4174: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4178: CALL_OW 44
4182: PPUSH
4183: LD_VAR 0 7
4187: PPUSH
4188: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4192: LD_VAR 0 7
4196: PPUSH
4197: LD_INT 158
4199: PPUSH
4200: LD_INT 106
4202: PPUSH
4203: CALL_OW 111
// end ; end ;
4207: GO 4055
4209: POP
4210: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4211: LD_OWVAR 1
4215: PUSH
4216: LD_EXP 28
4220: GREATER
4221: PUSH
4222: LD_EXP 23
4226: AND
4227: IFFALSE 4408
// begin tmp := Reindex ( tmp , 1 , 8 , true ) ;
4229: LD_ADDR_VAR 0 6
4233: PUSH
4234: LD_VAR 0 6
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 8
4244: PPUSH
4245: LD_INT 1
4247: PPUSH
4248: CALL 31342 0 4
4252: ST_TO_ADDR
// if tick mod 2 2$00 = 0 then
4253: LD_OWVAR 1
4257: PUSH
4258: LD_INT 4200
4260: MOD
4261: PUSH
4262: LD_INT 0
4264: EQUAL
4265: IFFALSE 4408
// begin for s := 1 to tmp do
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: DOUBLE
4273: LD_INT 1
4275: DEC
4276: ST_TO_ADDR
4277: LD_VAR 0 6
4281: PUSH
4282: FOR_TO
4283: IFFALSE 4406
// begin i := tmp [ s ] ;
4285: LD_ADDR_VAR 0 2
4289: PUSH
4290: LD_VAR 0 6
4294: PUSH
4295: LD_VAR 0 5
4299: ARRAY
4300: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4301: LD_EXP 7
4305: PUSH
4306: LD_VAR 0 2
4310: ARRAY
4311: PUSH
4312: LD_EXP 25
4316: PUSH
4317: LD_VAR 0 2
4321: ARRAY
4322: NOT
4323: AND
4324: PUSH
4325: LD_EXP 27
4329: PUSH
4330: LD_VAR 0 2
4334: ARRAY
4335: AND
4336: IFFALSE 4404
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4338: LD_EXP 27
4342: PUSH
4343: LD_VAR 0 2
4347: ARRAY
4348: PUSH
4349: LD_INT 1
4351: ARRAY
4352: PPUSH
4353: LD_INT 7
4355: PPUSH
4356: LD_INT 1
4358: PPUSH
4359: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4363: LD_ADDR_EXP 27
4367: PUSH
4368: LD_EXP 27
4372: PPUSH
4373: LD_VAR 0 2
4377: PPUSH
4378: LD_EXP 27
4382: PUSH
4383: LD_VAR 0 2
4387: ARRAY
4388: PPUSH
4389: LD_INT 1
4391: PPUSH
4392: CALL_OW 3
4396: PPUSH
4397: CALL_OW 1
4401: ST_TO_ADDR
// break ;
4402: GO 4406
// end ; end ;
4404: GO 4282
4406: POP
4407: POP
// end ; end ; if not multi_custom_commanders then
4408: LD_EXP 16
4412: NOT
4413: IFFALSE 4526
// begin for i := 1 to 8 do
4415: LD_ADDR_VAR 0 2
4419: PUSH
4420: DOUBLE
4421: LD_INT 1
4423: DEC
4424: ST_TO_ADDR
4425: LD_INT 8
4427: PUSH
4428: FOR_TO
4429: IFFALSE 4500
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4431: LD_INT 22
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 69
4447: PUSH
4448: LD_INT 0
4450: EQUAL
4451: PUSH
4452: LD_EXP 25
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: NOT
4463: AND
4464: IFFALSE 4498
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4466: LD_ADDR_EXP 25
4470: PUSH
4471: LD_EXP 25
4475: PPUSH
4476: LD_VAR 0 2
4480: PPUSH
4481: LD_INT 1
4483: PPUSH
4484: CALL_OW 1
4488: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4489: LD_VAR 0 2
4493: PPUSH
4494: CALL 5086 0 1
// end ; end ;
4498: GO 4428
4500: POP
4501: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4502: LD_EXP 25
4506: PPUSH
4507: CALL 29064 0 1
4511: PUSH
4512: LD_EXP 7
4516: PPUSH
4517: CALL 29064 0 1
4521: EQUAL
4522: IFFALSE 4526
// break ;
4524: GO 4546
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4526: CALL 4660 0 0
4530: NOT
4531: PUSH
4532: LD_EXP 2
4536: AND
4537: PUSH
4538: LD_EXP 24
4542: NOT
4543: OR
4544: IFFALSE 4025
// game := false ;
4546: LD_ADDR_EXP 2
4550: PUSH
4551: LD_INT 0
4553: ST_TO_ADDR
// for i := 1 to 8 do
4554: LD_ADDR_VAR 0 2
4558: PUSH
4559: DOUBLE
4560: LD_INT 1
4562: DEC
4563: ST_TO_ADDR
4564: LD_INT 8
4566: PUSH
4567: FOR_TO
4568: IFFALSE 4604
// begin if multi_sides [ i ] then
4570: LD_EXP 7
4574: PUSH
4575: LD_VAR 0 2
4579: ARRAY
4580: IFFALSE 4602
// SetMultiScore ( i , multi_points [ i ] ) ;
4582: LD_VAR 0 2
4586: PPUSH
4587: LD_EXP 30
4591: PUSH
4592: LD_VAR 0 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 506
// end ;
4602: GO 4567
4604: POP
4605: POP
// if multi_loosers [ your_side ] then
4606: LD_EXP 25
4610: PUSH
4611: LD_OWVAR 2
4615: ARRAY
4616: IFFALSE 4639
// begin if Multiplayer then
4618: LD_OWVAR 4
4622: IFFALSE 4630
// YouLostInMultiplayer else
4624: CALL_OW 107
4628: GO 4637
// YouLost (  ) ;
4630: LD_STRING 
4632: PPUSH
4633: CALL_OW 104
// end else
4637: GO 4655
// begin if Multiplayer then
4639: LD_OWVAR 4
4643: IFFALSE 4651
// YouWinInMultiplayer else
4645: CALL_OW 106
4649: GO 4655
// YouWin ;
4651: CALL_OW 103
// end ; end ;
4655: LD_VAR 0 1
4659: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4660: LD_INT 0
4662: PPUSH
4663: PPUSH
// result := false ;
4664: LD_ADDR_VAR 0 1
4668: PUSH
4669: LD_INT 0
4671: ST_TO_ADDR
// for side in botSides do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: LD_EXP 3
4681: PUSH
4682: FOR_IN
4683: IFFALSE 4744
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4685: LD_ADDR_VAR 0 1
4689: PUSH
4690: LD_INT 22
4692: PUSH
4693: LD_VAR 0 2
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PUSH
4702: LD_INT 21
4704: PUSH
4705: LD_INT 1
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 50
4714: PUSH
4715: EMPTY
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: PUSH
4728: LD_INT 0
4730: GREATER
4731: ST_TO_ADDR
// if result then
4732: LD_VAR 0 1
4736: IFFALSE 4742
// exit ;
4738: POP
4739: POP
4740: GO 4746
// end ;
4742: GO 4682
4744: POP
4745: POP
// end ;
4746: LD_VAR 0 1
4750: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4751: LD_INT 0
4753: PPUSH
4754: PPUSH
// result := [ ] ;
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: EMPTY
4761: ST_TO_ADDR
// for i := 1 to 8 do
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: DOUBLE
4768: LD_INT 1
4770: DEC
4771: ST_TO_ADDR
4772: LD_INT 8
4774: PUSH
4775: FOR_TO
4776: IFFALSE 4833
// begin if multi_sides [ i ] then
4778: LD_EXP 7
4782: PUSH
4783: LD_VAR 0 2
4787: ARRAY
4788: IFFALSE 4831
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4790: LD_ADDR_VAR 0 1
4794: PUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_STRING #coop-points
4802: PUSH
4803: LD_VAR 0 2
4807: PUSH
4808: LD_VAR 0 2
4812: PUSH
4813: LD_EXP 30
4817: PUSH
4818: LD_VAR 0 2
4822: ARRAY
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ADD
4830: ST_TO_ADDR
// end ; end ;
4831: GO 4775
4833: POP
4834: POP
// end ;
4835: LD_VAR 0 1
4839: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4840: LD_INT 0
4842: PPUSH
4843: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4844: LD_ADDR_EXP 30
4848: PUSH
4849: LD_INT 0
4851: PUSH
4852: LD_INT 0
4854: PUSH
4855: LD_INT 0
4857: PUSH
4858: LD_INT 0
4860: PUSH
4861: LD_INT 0
4863: PUSH
4864: LD_INT 0
4866: PUSH
4867: LD_INT 0
4869: PUSH
4870: LD_INT 0
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4883: LD_ADDR_EXP 31
4887: PUSH
4888: EMPTY
4889: ST_TO_ADDR
// end ;
4890: LD_VAR 0 1
4894: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4895: LD_INT 0
4897: PPUSH
// if not multi_points or not side or side > 8 then
4898: LD_EXP 30
4902: NOT
4903: PUSH
4904: LD_VAR 0 1
4908: NOT
4909: OR
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 8
4918: GREATER
4919: OR
4920: IFFALSE 4924
// exit ;
4922: GO 4961
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4924: LD_ADDR_EXP 30
4928: PUSH
4929: LD_EXP 30
4933: PPUSH
4934: LD_VAR 0 1
4938: PPUSH
4939: LD_EXP 30
4943: PUSH
4944: LD_VAR 0 1
4948: ARRAY
4949: PUSH
4950: LD_VAR 0 2
4954: PLUS
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// end ;
4961: LD_VAR 0 3
4965: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4966: LD_INT 0
4968: PPUSH
// if not multi_points or not side or side > 8 then
4969: LD_EXP 30
4973: NOT
4974: PUSH
4975: LD_VAR 0 1
4979: NOT
4980: OR
4981: PUSH
4982: LD_VAR 0 1
4986: PUSH
4987: LD_INT 8
4989: GREATER
4990: OR
4991: IFFALSE 4995
// exit ;
4993: GO 5011
// result := multi_points [ side ] ;
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: LD_EXP 30
5004: PUSH
5005: LD_VAR 0 1
5009: ARRAY
5010: ST_TO_ADDR
// end ;
5011: LD_VAR 0 2
5015: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5016: LD_INT 0
5018: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5019: LD_ADDR_EXP 31
5023: PUSH
5024: LD_EXP 31
5028: PPUSH
5029: LD_EXP 31
5033: PUSH
5034: LD_INT 1
5036: PLUS
5037: PPUSH
5038: LD_VAR 0 1
5042: PPUSH
5043: CALL_OW 1
5047: ST_TO_ADDR
// end ;
5048: LD_VAR 0 2
5052: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5053: LD_INT 0
5055: PPUSH
// if not id then
5056: LD_VAR 0 1
5060: NOT
5061: IFFALSE 5065
// exit ;
5063: GO 5081
// result := multi_points_conditions [ id ] ;
5065: LD_ADDR_VAR 0 2
5069: PUSH
5070: LD_EXP 31
5074: PUSH
5075: LD_VAR 0 1
5079: ARRAY
5080: ST_TO_ADDR
// end ;
5081: LD_VAR 0 2
5085: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5086: LD_INT 0
5088: PPUSH
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
// players := [ ] ;
5093: LD_ADDR_VAR 0 3
5097: PUSH
5098: EMPTY
5099: ST_TO_ADDR
// for i = 1 to 8 do
5100: LD_ADDR_VAR 0 4
5104: PUSH
5105: DOUBLE
5106: LD_INT 1
5108: DEC
5109: ST_TO_ADDR
5110: LD_INT 8
5112: PUSH
5113: FOR_TO
5114: IFFALSE 5173
// begin if i = side then
5116: LD_VAR 0 4
5120: PUSH
5121: LD_VAR 0 1
5125: EQUAL
5126: IFFALSE 5130
// continue ;
5128: GO 5113
// if multi_sides [ i ] and not multi_loosers [ i ] then
5130: LD_EXP 7
5134: PUSH
5135: LD_VAR 0 4
5139: ARRAY
5140: PUSH
5141: LD_EXP 25
5145: PUSH
5146: LD_VAR 0 4
5150: ARRAY
5151: NOT
5152: AND
5153: IFFALSE 5171
// players := players ^ i ;
5155: LD_ADDR_VAR 0 3
5159: PUSH
5160: LD_VAR 0 3
5164: PUSH
5165: LD_VAR 0 4
5169: ADD
5170: ST_TO_ADDR
// end ;
5171: GO 5113
5173: POP
5174: POP
// if not players then
5175: LD_VAR 0 3
5179: NOT
5180: IFFALSE 5184
// exit ;
5182: GO 5451
// if players = 1 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 1
5191: EQUAL
5192: IFFALSE 5253
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5194: LD_ADDR_VAR 0 4
5198: PUSH
5199: LD_INT 22
5201: PUSH
5202: LD_VAR 0 1
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 51
5213: PUSH
5214: EMPTY
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: PUSH
5226: FOR_IN
5227: IFFALSE 5249
// SetSide ( i , players [ 1 ] ) ;
5229: LD_VAR 0 4
5233: PPUSH
5234: LD_VAR 0 3
5238: PUSH
5239: LD_INT 1
5241: ARRAY
5242: PPUSH
5243: CALL_OW 235
5247: GO 5226
5249: POP
5250: POP
// end else
5251: GO 5451
// begin j := 1 ;
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5261: LD_ADDR_VAR 0 4
5265: PUSH
5266: LD_INT 22
5268: PUSH
5269: LD_VAR 0 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 2
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 1
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 51
5293: PUSH
5294: EMPTY
5295: LIST
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 21
5303: PUSH
5304: LD_INT 2
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PPUSH
5320: CALL_OW 69
5324: PUSH
5325: FOR_IN
5326: IFFALSE 5449
// begin SetSide ( i , players [ j ] ) ;
5328: LD_VAR 0 4
5332: PPUSH
5333: LD_VAR 0 3
5337: PUSH
5338: LD_VAR 0 5
5342: ARRAY
5343: PPUSH
5344: CALL_OW 235
// if IsDrivenBy ( i ) then
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 311
5357: IFFALSE 5384
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5359: LD_VAR 0 4
5363: PPUSH
5364: CALL_OW 311
5368: PPUSH
5369: LD_VAR 0 3
5373: PUSH
5374: LD_VAR 0 5
5378: ARRAY
5379: PPUSH
5380: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5384: LD_VAR 0 4
5388: PPUSH
5389: CALL_OW 310
5393: PPUSH
5394: CALL_OW 247
5398: PUSH
5399: LD_INT 3
5401: EQUAL
5402: IFFALSE 5413
// ComExitBuilding ( i ) ;
5404: LD_VAR 0 4
5408: PPUSH
5409: CALL_OW 122
// j := j + 1 ;
5413: LD_ADDR_VAR 0 5
5417: PUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PLUS
5426: ST_TO_ADDR
// if j > players then
5427: LD_VAR 0 5
5431: PUSH
5432: LD_VAR 0 3
5436: GREATER
5437: IFFALSE 5447
// j := 1 ;
5439: LD_ADDR_VAR 0 5
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// end ;
5447: GO 5325
5449: POP
5450: POP
// end ; end ;
5451: LD_VAR 0 2
5455: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
// i := 3 ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 3
5468: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5469: LD_ADDR_VAR 0 3
5473: PUSH
5474: LD_INT 5
5476: PUSH
5477: LD_INT 10
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 120
5486: PUSH
5487: LD_INT 2
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 101
5496: PUSH
5497: LD_INT 8
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 27
5506: PUSH
5507: LD_INT 4
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5520: LD_INT 4
5522: PPUSH
5523: LD_INT 5
5525: PPUSH
5526: LD_VAR 0 3
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: PPUSH
5541: LD_VAR 0 3
5545: PUSH
5546: LD_VAR 0 2
5550: ARRAY
5551: PUSH
5552: LD_INT 2
5554: ARRAY
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 58
// end ;
5563: LD_VAR 0 1
5567: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5568: LD_INT 0
5570: PPUSH
// if not side or side > 8 then
5571: LD_VAR 0 1
5575: NOT
5576: PUSH
5577: LD_VAR 0 1
5581: PUSH
5582: LD_INT 8
5584: GREATER
5585: OR
5586: IFFALSE 5590
// exit ;
5588: GO 5607
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_INT 6
5597: PPUSH
5598: CALL 5053 0 1
5602: PPUSH
5603: CALL 4895 0 2
// end ;
5607: LD_VAR 0 2
5611: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5612: LD_INT 0
5614: PPUSH
// if not side or side > 8 then
5615: LD_VAR 0 1
5619: NOT
5620: PUSH
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: GREATER
5629: OR
5630: IFFALSE 5634
// exit ;
5632: GO 5651
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_INT 4
5641: PPUSH
5642: CALL 5053 0 1
5646: PPUSH
5647: CALL 4895 0 2
// end ;
5651: LD_VAR 0 2
5655: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5656: LD_INT 0
5658: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5659: LD_VAR 0 1
5663: NOT
5664: PUSH
5665: LD_VAR 0 1
5669: PUSH
5670: LD_INT 8
5672: GREATER
5673: OR
5674: PUSH
5675: LD_VAR 0 2
5679: PUSH
5680: LD_INT 2
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: LD_INT 36
5688: PUSH
5689: LD_INT 0
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: IN
5698: NOT
5699: OR
5700: IFFALSE 5704
// exit ;
5702: GO 5721
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5704: LD_VAR 0 1
5708: PPUSH
5709: LD_INT 3
5711: PPUSH
5712: CALL 5053 0 1
5716: PPUSH
5717: CALL 4895 0 2
// end ;
5721: LD_VAR 0 3
5725: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5726: LD_INT 0
5728: PPUSH
5729: PPUSH
// if not un then
5730: LD_VAR 0 1
5734: NOT
5735: IFFALSE 5739
// exit ;
5737: GO 5785
// if not points then
5739: LD_VAR 0 3
5743: NOT
5744: IFFALSE 5761
// gained_points := Multiplayer_GetCondition ( 1 ) else
5746: LD_ADDR_VAR 0 5
5750: PUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL 5053 0 1
5758: ST_TO_ADDR
5759: GO 5771
// gained_points := points ;
5761: LD_ADDR_VAR 0 5
5765: PUSH
5766: LD_VAR 0 3
5770: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5771: LD_VAR 0 2
5775: PPUSH
5776: LD_VAR 0 5
5780: PPUSH
5781: CALL 4895 0 2
5785: LD_VAR 0 4
5789: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5790: LD_INT 0
5792: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5793: LD_VAR 0 1
5797: PPUSH
5798: LD_INT 2
5800: PPUSH
5801: CALL 5053 0 1
5805: PPUSH
5806: CALL 4895 0 2
// end ; end_of_file
5810: LD_VAR 0 2
5814: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5815: LD_INT 0
5817: PPUSH
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5826: LD_ADDR_EXP 33
5830: PUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 1
5841: PPUSH
5842: CALL 27025 0 3
5846: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5847: LD_ADDR_EXP 34
5851: PUSH
5852: LD_INT 4
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: LD_INT 1
5860: PUSH
5861: LD_INT 6
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 3
5872: PUSH
5873: LD_INT 1
5875: PUSH
5876: LD_INT 1
5878: PUSH
5879: LD_INT 5
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 3
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 2
5908: PUSH
5909: LD_INT 1
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: LD_INT 4
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 2
5926: PUSH
5927: LD_INT 1
5929: PUSH
5930: LD_INT 1
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// amBuildings := [ ] ;
5949: LD_ADDR_EXP 35
5953: PUSH
5954: EMPTY
5955: ST_TO_ADDR
// amVehicles := [ ] ;
5956: LD_ADDR_EXP 36
5960: PUSH
5961: EMPTY
5962: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
5963: LD_ADDR_EXP 37
5967: PUSH
5968: EMPTY
5969: ST_TO_ADDR
// amDrivers := [ ] ;
5970: LD_ADDR_EXP 38
5974: PUSH
5975: EMPTY
5976: ST_TO_ADDR
// amVehiclesCounter := 2 ;
5977: LD_ADDR_EXP 39
5981: PUSH
5982: LD_INT 2
5984: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
5985: LD_ADDR_EXP 42
5989: PUSH
5990: LD_INT 6
5992: PUSH
5993: LD_INT 8
5995: PUSH
5996: LD_INT 10
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: LD_OWVAR 67
6008: ARRAY
6009: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6010: LD_ADDR_VAR 0 8
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 4
6020: PUSH
6021: LD_INT 5
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: ST_TO_ADDR
// uc_side := side ;
6035: LD_ADDR_OWVAR 20
6039: PUSH
6040: LD_VAR 0 1
6044: ST_TO_ADDR
// uc_nation := nation_american ;
6045: LD_ADDR_OWVAR 21
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// hc_gallery := us ;
6053: LD_ADDR_OWVAR 33
6057: PUSH
6058: LD_STRING us
6060: ST_TO_ADDR
// hc_face_number := 19 ;
6061: LD_ADDR_OWVAR 34
6065: PUSH
6066: LD_INT 19
6068: ST_TO_ADDR
// hc_importance := 100 ;
6069: LD_ADDR_OWVAR 32
6073: PUSH
6074: LD_INT 100
6076: ST_TO_ADDR
// hc_name := Sikorski ;
6077: LD_ADDR_OWVAR 26
6081: PUSH
6082: LD_STRING Sikorski
6084: ST_TO_ADDR
// hc_sex := sex_male ;
6085: LD_ADDR_OWVAR 27
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6093: LD_ADDR_OWVAR 31
6097: PUSH
6098: LD_INT 5
6100: PUSH
6101: LD_INT 3
6103: PUSH
6104: LD_INT 2
6106: PUSH
6107: LD_INT 1
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6116: LD_ADDR_OWVAR 29
6120: PUSH
6121: LD_INT 10
6123: PUSH
6124: LD_INT 11
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: ST_TO_ADDR
// Sikorski := CreateHuman ;
6131: LD_ADDR_EXP 32
6135: PUSH
6136: CALL_OW 44
6140: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6141: LD_EXP 32
6145: PPUSH
6146: LD_INT 1
6148: PPUSH
6149: CALL_OW 52
// InitHC_All ( ) ;
6153: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6157: LD_ADDR_EXP 40
6161: PUSH
6162: LD_INT 1
6164: PPUSH
6165: LD_INT 3
6167: PPUSH
6168: LD_STRING 
6170: PPUSH
6171: LD_VAR 0 8
6175: PPUSH
6176: LD_INT 800
6178: PUSH
6179: LD_INT 120
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: LIST
6189: PPUSH
6190: LD_INT 10
6192: PUSH
6193: LD_INT 11
6195: PUSH
6196: LD_INT 12
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_OWVAR 67
6208: ARRAY
6209: PUSH
6210: LD_INT 4
6212: PUSH
6213: LD_INT 6
6215: PUSH
6216: LD_INT 3
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: PPUSH
6225: CALL 35623 0 6
6229: ST_TO_ADDR
// amForceTmp := [ ] ;
6230: LD_ADDR_EXP 41
6234: PUSH
6235: EMPTY
6236: ST_TO_ADDR
// if Difficulty = 3 then
6237: LD_OWVAR 67
6241: PUSH
6242: LD_INT 3
6244: EQUAL
6245: IFFALSE 6276
// begin bc_type := b_breastwork ;
6247: LD_ADDR_OWVAR 42
6251: PUSH
6252: LD_INT 31
6254: ST_TO_ADDR
// bc_level := 7 ;
6255: LD_ADDR_OWVAR 43
6259: PUSH
6260: LD_INT 7
6262: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6263: LD_INT 79
6265: PPUSH
6266: LD_INT 72
6268: PPUSH
6269: LD_INT 5
6271: PPUSH
6272: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_INT 22
6283: PUSH
6284: LD_VAR 0 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 30
6295: PUSH
6296: LD_INT 31
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 3
6305: PUSH
6306: LD_INT 95
6308: PUSH
6309: LD_INT 3
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 58
6322: PUSH
6323: EMPTY
6324: LIST
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: PUSH
6337: FOR_IN
6338: IFFALSE 6467
// begin d := GetDir ( i ) ;
6340: LD_ADDR_VAR 0 4
6344: PUSH
6345: LD_VAR 0 3
6349: PPUSH
6350: CALL_OW 254
6354: ST_TO_ADDR
// if d < 3 then
6355: LD_VAR 0 4
6359: PUSH
6360: LD_INT 3
6362: LESS
6363: IFFALSE 6381
// d := d + 3 else
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_VAR 0 4
6374: PUSH
6375: LD_INT 3
6377: PLUS
6378: ST_TO_ADDR
6379: GO 6395
// d := d - 3 ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: LD_VAR 0 4
6390: PUSH
6391: LD_INT 3
6393: MINUS
6394: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6395: LD_INT 0
6397: PPUSH
6398: LD_VAR 0 8
6402: PPUSH
6403: CALL_OW 381
// un := CreateHuman ;
6407: LD_ADDR_VAR 0 6
6411: PUSH
6412: CALL_OW 44
6416: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PPUSH
6427: LD_VAR 0 6
6431: PPUSH
6432: CALL 64673 0 2
6436: ST_TO_ADDR
// SetDir ( un , d ) ;
6437: LD_VAR 0 6
6441: PPUSH
6442: LD_VAR 0 4
6446: PPUSH
6447: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6451: LD_VAR 0 6
6455: PPUSH
6456: LD_VAR 0 3
6460: PPUSH
6461: CALL_OW 52
// end ;
6465: GO 6337
6467: POP
6468: POP
// for i := 1 to 3 do
6469: LD_ADDR_VAR 0 3
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_INT 3
6481: PUSH
6482: FOR_TO
6483: IFFALSE 6544
// begin PrepareEngineer ( false , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 382
// un := CreateHuman ;
6497: LD_ADDR_VAR 0 6
6501: PUSH
6502: CALL_OW 44
6506: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6507: LD_VAR 0 6
6511: PPUSH
6512: LD_INT 29
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6522: LD_ADDR_EXP 41
6526: PUSH
6527: LD_EXP 41
6531: PPUSH
6532: LD_VAR 0 6
6536: PPUSH
6537: CALL 64673 0 2
6541: ST_TO_ADDR
// end ;
6542: GO 6482
6544: POP
6545: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6546: LD_ADDR_VAR 0 3
6550: PUSH
6551: LD_INT 22
6553: PUSH
6554: LD_VAR 0 1
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 21
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 69
6581: PUSH
6582: FOR_IN
6583: IFFALSE 6616
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6585: LD_VAR 0 3
6589: PPUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 7
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_OWVAR 67
6608: ARRAY
6609: PPUSH
6610: CALL_OW 241
6614: GO 6582
6616: POP
6617: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 30
6637: PUSH
6638: LD_INT 32
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PPUSH
6649: CALL_OW 69
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6696
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 5
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: LD_INT 5
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_VAR 0 3
6680: PUSH
6681: LD_INT 3
6683: MOD
6684: PUSH
6685: LD_INT 1
6687: PLUS
6688: ARRAY
6689: PPUSH
6690: CALL_OW 431
6694: GO 6654
6696: POP
6697: POP
// end ;
6698: LD_VAR 0 2
6702: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
// enable ;
6732: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6733: LD_ADDR_VAR 0 10
6737: PUSH
6738: LD_INT 81
6740: PUSH
6741: LD_VAR 0 1
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 69
6754: ST_TO_ADDR
// if tmp then
6755: LD_VAR 0 10
6759: IFFALSE 6780
// enemySide := GetSide ( tmp [ 1 ] ) ;
6761: LD_ADDR_VAR 0 34
6765: PUSH
6766: LD_VAR 0 10
6770: PUSH
6771: LD_INT 1
6773: ARRAY
6774: PPUSH
6775: CALL_OW 255
6779: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
6780: LD_ADDR_VAR 0 22
6784: PUSH
6785: LD_VAR 0 3
6789: PPUSH
6790: LD_INT 81
6792: PUSH
6793: LD_VAR 0 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 70
6806: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6807: LD_ADDR_VAR 0 23
6811: PUSH
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 81
6819: PUSH
6820: LD_VAR 0 1
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PPUSH
6829: CALL_OW 70
6833: ST_TO_ADDR
// vehicles := amVehicles ;
6834: LD_ADDR_VAR 0 26
6838: PUSH
6839: LD_EXP 36
6843: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6844: LD_ADDR_VAR 0 32
6848: PUSH
6849: LD_VAR 0 3
6853: PPUSH
6854: LD_INT 22
6856: PUSH
6857: LD_VAR 0 1
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 2
6868: PUSH
6869: LD_INT 30
6871: PUSH
6872: LD_INT 0
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 30
6881: PUSH
6882: LD_INT 1
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 70
6902: ST_TO_ADDR
// if depot then
6903: LD_VAR 0 32
6907: IFFALSE 6923
// depot := depot [ 1 ] ;
6909: LD_ADDR_VAR 0 32
6913: PUSH
6914: LD_VAR 0 32
6918: PUSH
6919: LD_INT 1
6921: ARRAY
6922: ST_TO_ADDR
// if amTech then
6923: LD_EXP 33
6927: IFFALSE 7086
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6929: LD_ADDR_VAR 0 12
6933: PUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 50
6953: PUSH
6954: EMPTY
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 6
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 7
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 30
6982: PUSH
6983: LD_INT 8
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 70
7005: ST_TO_ADDR
// if lab then
7006: LD_VAR 0 12
7010: IFFALSE 7086
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7012: LD_VAR 0 12
7016: PUSH
7017: LD_INT 1
7019: ARRAY
7020: PPUSH
7021: CALL_OW 461
7025: PUSH
7026: LD_INT 2
7028: EQUAL
7029: IFFALSE 7086
// begin for i in amTech do
7031: LD_ADDR_VAR 0 9
7035: PUSH
7036: LD_EXP 33
7040: PUSH
7041: FOR_IN
7042: IFFALSE 7084
// if CanBeResearched ( lab [ 1 ] , i ) then
7044: LD_VAR 0 12
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: LD_VAR 0 9
7057: PPUSH
7058: CALL_OW 430
7062: IFFALSE 7082
// begin AddComResearch ( lab [ 1 ] , i ) ;
7064: LD_VAR 0 12
7068: PUSH
7069: LD_INT 1
7071: ARRAY
7072: PPUSH
7073: LD_VAR 0 9
7077: PPUSH
7078: CALL_OW 184
// end ;
7082: GO 7041
7084: POP
7085: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7086: LD_ADDR_VAR 0 29
7090: PUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 22
7098: PUSH
7099: LD_VAR 0 1
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 30
7110: PUSH
7111: LD_INT 3
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 50
7120: PUSH
7121: EMPTY
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 70
7133: ST_TO_ADDR
// if fac then
7134: LD_VAR 0 29
7138: IFFALSE 7473
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7140: LD_VAR 0 29
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 461
7153: PUSH
7154: LD_INT 2
7156: EQUAL
7157: IFFALSE 7473
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7159: LD_ADDR_VAR 0 30
7163: PUSH
7164: LD_VAR 0 3
7168: PPUSH
7169: LD_INT 2
7171: PUSH
7172: LD_INT 30
7174: PUSH
7175: LD_INT 32
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 30
7184: PUSH
7185: LD_INT 33
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 35
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 70
7215: ST_TO_ADDR
// if emptyTowers then
7216: LD_VAR 0 30
7220: IFFALSE 7270
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7222: LD_ADDR_VAR 0 31
7226: PUSH
7227: LD_VAR 0 30
7231: PUSH
7232: LD_INT 1
7234: ARRAY
7235: PPUSH
7236: LD_VAR 0 3
7240: PPUSH
7241: CALL 37309 0 2
7245: ST_TO_ADDR
// if weapon then
7246: LD_VAR 0 31
7250: IFFALSE 7270
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7252: LD_VAR 0 30
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: PPUSH
7261: LD_VAR 0 31
7265: PPUSH
7266: CALL_OW 148
// end ; if amConstructList then
7270: LD_EXP 34
7274: IFFALSE 7473
// for i := 1 to Count ( amConstructList ) do
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: DOUBLE
7282: LD_INT 1
7284: DEC
7285: ST_TO_ADDR
7286: LD_EXP 34
7290: PPUSH
7291: CALL 29064 0 1
7295: PUSH
7296: FOR_TO
7297: IFFALSE 7471
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7299: LD_VAR 0 29
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PPUSH
7308: LD_EXP 34
7312: PUSH
7313: LD_VAR 0 9
7317: ARRAY
7318: PUSH
7319: LD_INT 1
7321: ARRAY
7322: PPUSH
7323: LD_EXP 34
7327: PUSH
7328: LD_VAR 0 9
7332: ARRAY
7333: PUSH
7334: LD_INT 2
7336: ARRAY
7337: PPUSH
7338: LD_EXP 34
7342: PUSH
7343: LD_VAR 0 9
7347: ARRAY
7348: PUSH
7349: LD_INT 3
7351: ARRAY
7352: PPUSH
7353: LD_EXP 34
7357: PUSH
7358: LD_VAR 0 9
7362: ARRAY
7363: PUSH
7364: LD_INT 4
7366: ARRAY
7367: PPUSH
7368: CALL_OW 448
7372: IFFALSE 7469
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7374: LD_VAR 0 29
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: PPUSH
7383: LD_EXP 34
7387: PUSH
7388: LD_VAR 0 9
7392: ARRAY
7393: PUSH
7394: LD_INT 1
7396: ARRAY
7397: PPUSH
7398: LD_EXP 34
7402: PUSH
7403: LD_VAR 0 9
7407: ARRAY
7408: PUSH
7409: LD_INT 2
7411: ARRAY
7412: PPUSH
7413: LD_EXP 34
7417: PUSH
7418: LD_VAR 0 9
7422: ARRAY
7423: PUSH
7424: LD_INT 3
7426: ARRAY
7427: PPUSH
7428: LD_EXP 34
7432: PUSH
7433: LD_VAR 0 9
7437: ARRAY
7438: PUSH
7439: LD_INT 4
7441: ARRAY
7442: PPUSH
7443: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7447: LD_ADDR_EXP 34
7451: PUSH
7452: LD_EXP 34
7456: PPUSH
7457: LD_VAR 0 9
7461: PPUSH
7462: CALL_OW 3
7466: ST_TO_ADDR
// break ;
7467: GO 7471
// end ; end ;
7469: GO 7296
7471: POP
7472: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 3
7482: PPUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 3
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 57
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 3
7508: PUSH
7509: LD_INT 24
7511: PUSH
7512: LD_INT 1000
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: PPUSH
7528: CALL_OW 70
7532: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7533: LD_ADDR_VAR 0 17
7537: PUSH
7538: LD_VAR 0 3
7542: PPUSH
7543: CALL_OW 435
7547: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7548: LD_ADDR_VAR 0 14
7552: PUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: LD_INT 25
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 50
7570: PUSH
7571: EMPTY
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PPUSH
7578: CALL_OW 72
7582: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7583: LD_VAR 0 14
7587: PPUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 120
7593: PUSH
7594: LD_INT 7
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 3
7607: PUSH
7608: LD_INT 54
7610: PUSH
7611: EMPTY
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 72
7626: PUSH
7627: LD_VAR 0 29
7631: PUSH
7632: LD_INT 1
7634: ARRAY
7635: PPUSH
7636: CALL_OW 302
7640: AND
7641: IFFALSE 7700
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7643: LD_VAR 0 14
7647: PPUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 120
7653: PUSH
7654: LD_INT 7
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: LD_INT 54
7670: PUSH
7671: EMPTY
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 72
7686: PPUSH
7687: LD_VAR 0 29
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PPUSH
7696: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7700: LD_ADDR_VAR 0 18
7704: PUSH
7705: LD_VAR 0 5
7709: PPUSH
7710: LD_INT 25
7712: PUSH
7713: LD_INT 4
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 50
7722: PUSH
7723: EMPTY
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PPUSH
7730: CALL_OW 72
7734: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7735: LD_ADDR_VAR 0 12
7739: PUSH
7740: LD_VAR 0 3
7744: PPUSH
7745: LD_INT 2
7747: PUSH
7748: LD_INT 30
7750: PUSH
7751: LD_INT 6
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 30
7760: PUSH
7761: LD_INT 7
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 30
7770: PUSH
7771: LD_INT 8
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 70
7788: ST_TO_ADDR
// if sci then
7789: LD_VAR 0 18
7793: IFFALSE 7954
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7795: LD_ADDR_VAR 0 20
7799: PUSH
7800: LD_VAR 0 5
7804: PPUSH
7805: LD_INT 95
7807: PUSH
7808: LD_VAR 0 3
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 120
7819: PUSH
7820: LD_INT 1
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// if hurtUnits then
7836: LD_VAR 0 20
7840: IFFALSE 7901
// begin for i in sci do
7842: LD_ADDR_VAR 0 9
7846: PUSH
7847: LD_VAR 0 18
7851: PUSH
7852: FOR_IN
7853: IFFALSE 7897
// if IsInUnit ( i ) then
7855: LD_VAR 0 9
7859: PPUSH
7860: CALL_OW 310
7864: IFFALSE 7877
// ComExitBuilding ( i ) else
7866: LD_VAR 0 9
7870: PPUSH
7871: CALL_OW 122
7875: GO 7895
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7877: LD_VAR 0 9
7881: PPUSH
7882: LD_VAR 0 20
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: CALL_OW 128
7895: GO 7852
7897: POP
7898: POP
// end else
7899: GO 7954
// if lab then
7901: LD_VAR 0 12
7905: IFFALSE 7954
// begin for i in sci do
7907: LD_ADDR_VAR 0 9
7911: PUSH
7912: LD_VAR 0 18
7916: PUSH
7917: FOR_IN
7918: IFFALSE 7952
// if not IsInUnit ( i ) then
7920: LD_VAR 0 9
7924: PPUSH
7925: CALL_OW 310
7929: NOT
7930: IFFALSE 7950
// ComEnterUnit ( i , lab [ 1 ] ) ;
7932: LD_VAR 0 9
7936: PPUSH
7937: LD_VAR 0 12
7941: PUSH
7942: LD_INT 1
7944: ARRAY
7945: PPUSH
7946: CALL_OW 120
7950: GO 7917
7952: POP
7953: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
7954: LD_ADDR_VAR 0 13
7958: PUSH
7959: LD_VAR 0 5
7963: PPUSH
7964: LD_INT 25
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 72
7978: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
7979: LD_ADDR_VAR 0 33
7983: PUSH
7984: LD_EXP 35
7988: ST_TO_ADDR
// if eng then
7989: LD_VAR 0 13
7993: IFFALSE 8827
// begin for i in eng do
7995: LD_ADDR_VAR 0 9
7999: PUSH
8000: LD_VAR 0 13
8004: PUSH
8005: FOR_IN
8006: IFFALSE 8825
// begin tag := GetTag ( i ) ;
8008: LD_ADDR_VAR 0 15
8012: PUSH
8013: LD_VAR 0 9
8017: PPUSH
8018: CALL_OW 110
8022: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8023: LD_VAR 0 9
8027: PPUSH
8028: LD_VAR 0 4
8032: PPUSH
8033: CALL_OW 308
8037: IFFALSE 8068
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8039: LD_VAR 0 9
8043: PPUSH
8044: LD_VAR 0 7
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 7
8057: PUSH
8058: LD_INT 2
8060: ARRAY
8061: PPUSH
8062: CALL_OW 111
// continue ;
8066: GO 8005
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8068: LD_VAR 0 9
8072: PPUSH
8073: CALL_OW 256
8077: PUSH
8078: LD_INT 800
8080: LESS
8081: PUSH
8082: LD_VAR 0 15
8086: PUSH
8087: LD_INT 1
8089: NONEQUAL
8090: AND
8091: IFFALSE 8141
// begin SetTag ( i , tHeal ) ;
8093: LD_VAR 0 9
8097: PPUSH
8098: LD_INT 1
8100: PPUSH
8101: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8105: LD_VAR 0 9
8109: PPUSH
8110: LD_VAR 0 6
8114: PUSH
8115: LD_INT 1
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 6
8123: PUSH
8124: LD_INT 2
8126: ARRAY
8127: PPUSH
8128: CALL_OW 111
// AddComHold ( i ) ;
8132: LD_VAR 0 9
8136: PPUSH
8137: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8141: LD_VAR 0 15
8145: PUSH
8146: LD_INT 1
8148: EQUAL
8149: PUSH
8150: LD_VAR 0 9
8154: PPUSH
8155: CALL_OW 256
8159: PUSH
8160: LD_INT 1000
8162: EQUAL
8163: AND
8164: IFFALSE 8178
// SetTag ( i , 0 ) ;
8166: LD_VAR 0 9
8170: PPUSH
8171: LD_INT 0
8173: PPUSH
8174: CALL_OW 109
// if not tag then
8178: LD_VAR 0 15
8182: NOT
8183: IFFALSE 8350
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 3
8194: PPUSH
8195: LD_INT 57
8197: PUSH
8198: EMPTY
8199: LIST
8200: PPUSH
8201: CALL_OW 70
8205: ST_TO_ADDR
// if undone then
8206: LD_VAR 0 11
8210: IFFALSE 8232
// begin ComComplete ( i , undone [ 1 ] ) ;
8212: LD_VAR 0 9
8216: PPUSH
8217: LD_VAR 0 11
8221: PUSH
8222: LD_INT 1
8224: ARRAY
8225: PPUSH
8226: CALL 35162 0 2
// continue ;
8230: GO 8005
// end ; if cr or tmp or buildingsToBuild then
8232: LD_VAR 0 17
8236: PUSH
8237: LD_VAR 0 10
8241: OR
8242: PUSH
8243: LD_VAR 0 33
8247: OR
8248: IFFALSE 8324
// begin if IsInUnit ( i ) then
8250: LD_VAR 0 9
8254: PPUSH
8255: CALL_OW 310
8259: IFFALSE 8270
// ComExitBuilding ( i ) ;
8261: LD_VAR 0 9
8265: PPUSH
8266: CALL_OW 122
// if tmp then
8270: LD_VAR 0 10
8274: IFFALSE 8290
// SetTag ( i , tRepair ) else
8276: LD_VAR 0 9
8280: PPUSH
8281: LD_INT 3
8283: PPUSH
8284: CALL_OW 109
8288: GO 8322
// if cr then
8290: LD_VAR 0 17
8294: IFFALSE 8310
// SetTag ( i , tCrates ) else
8296: LD_VAR 0 9
8300: PPUSH
8301: LD_INT 2
8303: PPUSH
8304: CALL_OW 109
8308: GO 8322
// SetTag ( i , tBuild ) ;
8310: LD_VAR 0 9
8314: PPUSH
8315: LD_INT 5
8317: PPUSH
8318: CALL_OW 109
// end else
8322: GO 8350
// if not IsInUnit ( i ) then
8324: LD_VAR 0 9
8328: PPUSH
8329: CALL_OW 310
8333: NOT
8334: IFFALSE 8350
// ComEnterUnit ( i , depot ) ;
8336: LD_VAR 0 9
8340: PPUSH
8341: LD_VAR 0 32
8345: PPUSH
8346: CALL_OW 120
// end ; if tag = tRepair then
8350: LD_VAR 0 15
8354: PUSH
8355: LD_INT 3
8357: EQUAL
8358: IFFALSE 8464
// begin if IsInUnit ( i ) then
8360: LD_VAR 0 9
8364: PPUSH
8365: CALL_OW 310
8369: IFFALSE 8382
// begin ComExitBuilding ( i ) ;
8371: LD_VAR 0 9
8375: PPUSH
8376: CALL_OW 122
// continue ;
8380: GO 8005
// end ; if not tmp then
8382: LD_VAR 0 10
8386: NOT
8387: IFFALSE 8403
// begin SetTag ( i , 0 ) ;
8389: LD_VAR 0 9
8393: PPUSH
8394: LD_INT 0
8396: PPUSH
8397: CALL_OW 109
// continue ;
8401: GO 8005
// end ; if not HasTask ( i ) then
8403: LD_VAR 0 9
8407: PPUSH
8408: CALL_OW 314
8412: NOT
8413: IFFALSE 8433
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8415: LD_VAR 0 9
8419: PPUSH
8420: LD_VAR 0 10
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: CALL_OW 130
// if not IsInarea ( i , area ) then
8433: LD_VAR 0 9
8437: PPUSH
8438: LD_VAR 0 3
8442: PPUSH
8443: CALL_OW 308
8447: NOT
8448: IFFALSE 8464
// ComMoveToarea ( i , area ) ;
8450: LD_VAR 0 9
8454: PPUSH
8455: LD_VAR 0 3
8459: PPUSH
8460: CALL_OW 113
// end ; if tag = tBuild then
8464: LD_VAR 0 15
8468: PUSH
8469: LD_INT 5
8471: EQUAL
8472: IFFALSE 8678
// begin if IsInUnit ( i ) then
8474: LD_VAR 0 9
8478: PPUSH
8479: CALL_OW 310
8483: IFFALSE 8496
// begin ComExitBuilding ( i ) ;
8485: LD_VAR 0 9
8489: PPUSH
8490: CALL_OW 122
// continue ;
8494: GO 8005
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8496: LD_VAR 0 33
8500: NOT
8501: PUSH
8502: LD_VAR 0 22
8506: OR
8507: PUSH
8508: LD_VAR 0 23
8512: OR
8513: IFFALSE 8531
// begin SetTag ( i , 0 ) ;
8515: LD_VAR 0 9
8519: PPUSH
8520: LD_INT 0
8522: PPUSH
8523: CALL_OW 109
// continue ;
8527: GO 8005
// end else
8529: GO 8570
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8531: LD_VAR 0 32
8535: PPUSH
8536: LD_VAR 0 33
8540: PUSH
8541: LD_INT 1
8543: ARRAY
8544: PUSH
8545: LD_INT 1
8547: ARRAY
8548: PPUSH
8549: CALL 68596 0 2
8553: NOT
8554: IFFALSE 8570
// begin SetTag ( i , 0 ) ;
8556: LD_VAR 0 9
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: CALL_OW 109
// continue ;
8568: GO 8005
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8570: LD_ADDR_VAR 0 11
8574: PUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_INT 57
8582: PUSH
8583: EMPTY
8584: LIST
8585: PPUSH
8586: CALL_OW 70
8590: ST_TO_ADDR
// if undone then
8591: LD_VAR 0 11
8595: IFFALSE 8617
// begin ComComplete ( i , undone [ 1 ] ) ;
8597: LD_VAR 0 9
8601: PPUSH
8602: LD_VAR 0 11
8606: PUSH
8607: LD_INT 1
8609: ARRAY
8610: PPUSH
8611: CALL 35162 0 2
// continue ;
8615: GO 8005
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8617: LD_VAR 0 9
8621: PPUSH
8622: LD_VAR 0 33
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PUSH
8631: LD_INT 1
8633: ARRAY
8634: PPUSH
8635: LD_VAR 0 33
8639: PUSH
8640: LD_INT 1
8642: ARRAY
8643: PUSH
8644: LD_INT 2
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 33
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PUSH
8657: LD_INT 3
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 33
8665: PUSH
8666: LD_INT 1
8668: ARRAY
8669: PUSH
8670: LD_INT 4
8672: ARRAY
8673: PPUSH
8674: CALL_OW 145
// end ; if tag = tCrates then
8678: LD_VAR 0 15
8682: PUSH
8683: LD_INT 2
8685: EQUAL
8686: IFFALSE 8823
// begin if IsInUnit ( i ) then
8688: LD_VAR 0 9
8692: PPUSH
8693: CALL_OW 310
8697: IFFALSE 8710
// begin ComExitBuilding ( i ) ;
8699: LD_VAR 0 9
8703: PPUSH
8704: CALL_OW 122
// continue ;
8708: GO 8005
// end ; if not cr then
8710: LD_VAR 0 17
8714: NOT
8715: IFFALSE 8731
// begin SetTag ( i , 0 ) ;
8717: LD_VAR 0 9
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 109
// continue ;
8729: GO 8005
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8731: LD_VAR 0 9
8735: PPUSH
8736: CALL_OW 314
8740: NOT
8741: PUSH
8742: LD_INT 81
8744: PUSH
8745: LD_VAR 0 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 92
8756: PUSH
8757: LD_VAR 0 17
8761: PUSH
8762: LD_INT 1
8764: ARRAY
8765: PUSH
8766: LD_VAR 0 17
8770: PUSH
8771: LD_INT 2
8773: ARRAY
8774: PUSH
8775: LD_INT 12
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: NOT
8793: AND
8794: IFFALSE 8823
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8796: LD_VAR 0 9
8800: PPUSH
8801: LD_VAR 0 17
8805: PUSH
8806: LD_INT 1
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 17
8814: PUSH
8815: LD_INT 2
8817: ARRAY
8818: PPUSH
8819: CALL_OW 117
// end ; end ;
8823: GO 8005
8825: POP
8826: POP
// end ; if vehicles then
8827: LD_VAR 0 26
8831: IFFALSE 9631
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8833: LD_ADDR_VAR 0 26
8837: PUSH
8838: LD_VAR 0 26
8842: PPUSH
8843: LD_INT 3
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: LD_INT 34
8851: PUSH
8852: LD_INT 13
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 34
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 50
8880: PUSH
8881: EMPTY
8882: LIST
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 72
8892: ST_TO_ADDR
// if vehicles then
8893: LD_VAR 0 26
8897: IFFALSE 9631
// begin for i in vehicles do
8899: LD_ADDR_VAR 0 9
8903: PUSH
8904: LD_VAR 0 26
8908: PUSH
8909: FOR_IN
8910: IFFALSE 9629
// begin tag := GetTag ( i ) ;
8912: LD_ADDR_VAR 0 15
8916: PUSH
8917: LD_VAR 0 9
8921: PPUSH
8922: CALL_OW 110
8926: ST_TO_ADDR
// if not tag then
8927: LD_VAR 0 15
8931: NOT
8932: IFFALSE 9078
// begin if GetControl ( i ) = control_manual then
8934: LD_VAR 0 9
8938: PPUSH
8939: CALL_OW 263
8943: PUSH
8944: LD_INT 1
8946: EQUAL
8947: IFFALSE 9064
// begin drivers := amDrivers ;
8949: LD_ADDR_VAR 0 24
8953: PUSH
8954: LD_EXP 38
8958: ST_TO_ADDR
// if not drivers then
8959: LD_VAR 0 24
8963: NOT
8964: IFFALSE 9044
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
8966: LD_ADDR_VAR 0 24
8970: PUSH
8971: LD_VAR 0 14
8975: PPUSH
8976: LD_INT 3
8978: PUSH
8979: LD_INT 120
8981: PUSH
8982: LD_INT 7
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PPUSH
8993: CALL_OW 72
8997: ST_TO_ADDR
// if drivers then
8998: LD_VAR 0 24
9002: IFFALSE 9044
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9004: LD_VAR 0 24
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: LD_INT 7
9015: PPUSH
9016: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9020: LD_ADDR_EXP 38
9024: PUSH
9025: LD_EXP 38
9029: PPUSH
9030: LD_VAR 0 24
9034: PUSH
9035: LD_INT 1
9037: ARRAY
9038: PPUSH
9039: CALL 64673 0 2
9043: ST_TO_ADDR
// end ; end ; if drivers then
9044: LD_VAR 0 24
9048: IFFALSE 9062
// SetTag ( i , tBusy ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_INT 8
9057: PPUSH
9058: CALL_OW 109
// continue ;
9062: GO 8909
// end ; SetTag ( i , tBusy ) ;
9064: LD_VAR 0 9
9068: PPUSH
9069: LD_INT 8
9071: PPUSH
9072: CALL_OW 109
// end else
9076: GO 9627
// if tag = tBusy then
9078: LD_VAR 0 15
9082: PUSH
9083: LD_INT 8
9085: EQUAL
9086: IFFALSE 9298
// begin if GetLives ( i ) = 1000 then
9088: LD_VAR 0 9
9092: PPUSH
9093: CALL_OW 256
9097: PUSH
9098: LD_INT 1000
9100: EQUAL
9101: IFFALSE 9296
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9103: LD_VAR 0 9
9107: PPUSH
9108: CALL_OW 263
9112: PUSH
9113: LD_INT 1
9115: EQUAL
9116: PUSH
9117: LD_VAR 0 9
9121: PPUSH
9122: CALL_OW 311
9126: NOT
9127: AND
9128: IFFALSE 9284
// begin drivers := amDrivers ;
9130: LD_ADDR_VAR 0 24
9134: PUSH
9135: LD_EXP 38
9139: ST_TO_ADDR
// if not drivers then
9140: LD_VAR 0 24
9144: NOT
9145: IFFALSE 9161
// begin SetTag ( i , 0 ) ;
9147: LD_VAR 0 9
9151: PPUSH
9152: LD_INT 0
9154: PPUSH
9155: CALL_OW 109
// continue ;
9159: GO 8909
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9161: LD_VAR 0 24
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: CALL_OW 310
9174: PUSH
9175: LD_VAR 0 24
9179: PUSH
9180: LD_INT 1
9182: ARRAY
9183: PPUSH
9184: CALL 62277 0 1
9188: NOT
9189: AND
9190: IFFALSE 9205
// ComExitBuilding ( drivers [ 1 ] ) ;
9192: LD_VAR 0 24
9196: PUSH
9197: LD_INT 1
9199: ARRAY
9200: PPUSH
9201: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9205: LD_VAR 0 26
9209: PPUSH
9210: LD_INT 120
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PPUSH
9220: CALL_OW 72
9224: PUSH
9225: LD_VAR 0 24
9229: PUSH
9230: LD_INT 1
9232: ARRAY
9233: PPUSH
9234: CALL_OW 314
9238: NOT
9239: AND
9240: PUSH
9241: LD_VAR 0 26
9245: PPUSH
9246: LD_INT 120
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PPUSH
9256: CALL_OW 72
9260: NOT
9261: OR
9262: IFFALSE 9282
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9264: LD_VAR 0 24
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: PPUSH
9273: LD_VAR 0 9
9277: PPUSH
9278: CALL_OW 120
// continue ;
9282: GO 8909
// end ; SetTag ( i , tAttack ) ;
9284: LD_VAR 0 9
9288: PPUSH
9289: LD_INT 13
9291: PPUSH
9292: CALL_OW 109
// end ; end else
9296: GO 9627
// if tag = tAttack then
9298: LD_VAR 0 15
9302: PUSH
9303: LD_INT 13
9305: EQUAL
9306: IFFALSE 9486
// begin enemy := enemyInBase ;
9308: LD_ADDR_VAR 0 21
9312: PUSH
9313: LD_VAR 0 22
9317: ST_TO_ADDR
// if not enemy then
9318: LD_VAR 0 21
9322: NOT
9323: IFFALSE 9335
// enemy := enemyOuterBase ;
9325: LD_ADDR_VAR 0 21
9329: PUSH
9330: LD_VAR 0 23
9334: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9335: LD_VAR 0 21
9339: NOT
9340: PUSH
9341: LD_VAR 0 9
9345: PPUSH
9346: LD_VAR 0 7
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: LD_VAR 0 7
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PPUSH
9364: CALL_OW 297
9368: PUSH
9369: LD_INT 10
9371: GREATER
9372: AND
9373: IFFALSE 9404
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9375: LD_VAR 0 9
9379: PPUSH
9380: LD_VAR 0 7
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 7
9393: PUSH
9394: LD_INT 2
9396: ARRAY
9397: PPUSH
9398: CALL_OW 111
// continue ;
9402: GO 8909
// end ; if GetLives ( i ) < 650 then
9404: LD_VAR 0 9
9408: PPUSH
9409: CALL_OW 256
9413: PUSH
9414: LD_INT 650
9416: LESS
9417: IFFALSE 9460
// begin SetTag ( i , tVehRepair ) ;
9419: LD_VAR 0 9
9423: PPUSH
9424: LD_INT 9
9426: PPUSH
9427: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9431: LD_VAR 0 9
9435: PPUSH
9436: LD_VAR 0 7
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PPUSH
9445: LD_VAR 0 7
9449: PUSH
9450: LD_INT 2
9452: ARRAY
9453: PPUSH
9454: CALL_OW 111
// continue ;
9458: GO 8909
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9460: LD_VAR 0 9
9464: PPUSH
9465: LD_VAR 0 21
9469: PPUSH
9470: LD_VAR 0 9
9474: PPUSH
9475: CALL_OW 74
9479: PPUSH
9480: CALL_OW 115
// end else
9484: GO 9627
// if tag = tVehRepair then
9486: LD_VAR 0 15
9490: PUSH
9491: LD_INT 9
9493: EQUAL
9494: IFFALSE 9627
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9496: LD_VAR 0 9
9500: PPUSH
9501: LD_VAR 0 7
9505: PUSH
9506: LD_INT 1
9508: ARRAY
9509: PPUSH
9510: LD_VAR 0 7
9514: PUSH
9515: LD_INT 2
9517: ARRAY
9518: PPUSH
9519: CALL_OW 297
9523: PUSH
9524: LD_INT 10
9526: GREATER
9527: IFFALSE 9558
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9529: LD_VAR 0 9
9533: PPUSH
9534: LD_VAR 0 7
9538: PUSH
9539: LD_INT 1
9541: ARRAY
9542: PPUSH
9543: LD_VAR 0 7
9547: PUSH
9548: LD_INT 2
9550: ARRAY
9551: PPUSH
9552: CALL_OW 111
// continue ;
9556: GO 8909
// end ; if GetLives ( i ) = 1000 then
9558: LD_VAR 0 9
9562: PPUSH
9563: CALL_OW 256
9567: PUSH
9568: LD_INT 1000
9570: EQUAL
9571: IFFALSE 9587
// begin SetTag ( i , tBusy ) ;
9573: LD_VAR 0 9
9577: PPUSH
9578: LD_INT 8
9580: PPUSH
9581: CALL_OW 109
// continue ;
9585: GO 8909
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9587: LD_VAR 0 9
9591: PPUSH
9592: CALL_OW 263
9596: PUSH
9597: LD_INT 1
9599: EQUAL
9600: PUSH
9601: LD_VAR 0 9
9605: PPUSH
9606: CALL_OW 311
9610: AND
9611: IFFALSE 9627
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9613: LD_VAR 0 9
9617: PPUSH
9618: CALL_OW 311
9622: PPUSH
9623: CALL 66373 0 1
// end ; end ;
9627: GO 8909
9629: POP
9630: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9631: LD_ADDR_VAR 0 19
9635: PUSH
9636: LD_VAR 0 5
9640: PPUSH
9641: LD_INT 2
9643: PUSH
9644: LD_INT 25
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 25
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 25
9666: PUSH
9667: LD_INT 5
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 25
9676: PUSH
9677: LD_INT 9
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 50
9693: PUSH
9694: EMPTY
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 72
9705: ST_TO_ADDR
// if sol then
9706: LD_VAR 0 19
9710: IFFALSE 10218
// begin if enemyInBase then
9712: LD_VAR 0 22
9716: IFFALSE 9895
// begin for i in sol do
9718: LD_ADDR_VAR 0 9
9722: PUSH
9723: LD_VAR 0 19
9727: PUSH
9728: FOR_IN
9729: IFFALSE 9891
// begin tw := IsInUnit ( i ) ;
9731: LD_ADDR_VAR 0 16
9735: PUSH
9736: LD_VAR 0 9
9740: PPUSH
9741: CALL_OW 310
9745: ST_TO_ADDR
// if tw then
9746: LD_VAR 0 16
9750: IFFALSE 9833
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9752: LD_VAR 0 16
9756: PUSH
9757: LD_INT 22
9759: PUSH
9760: LD_VAR 0 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 101
9771: PUSH
9772: LD_VAR 0 34
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 32
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 30
9796: PUSH
9797: LD_INT 31
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: LIST
9813: PPUSH
9814: CALL_OW 69
9818: IN
9819: NOT
9820: IFFALSE 9831
// ComExitBuilding ( i ) ;
9822: LD_VAR 0 9
9826: PPUSH
9827: CALL_OW 122
// end else
9831: GO 9889
// if IsInarea ( i , area ) then
9833: LD_VAR 0 9
9837: PPUSH
9838: LD_VAR 0 3
9842: PPUSH
9843: CALL_OW 308
9847: IFFALSE 9875
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9849: LD_VAR 0 9
9853: PPUSH
9854: LD_VAR 0 22
9858: PPUSH
9859: LD_VAR 0 9
9863: PPUSH
9864: CALL_OW 74
9868: PPUSH
9869: CALL_OW 115
9873: GO 9889
// ComMoveToarea ( i , area ) ;
9875: LD_VAR 0 9
9879: PPUSH
9880: LD_VAR 0 3
9884: PPUSH
9885: CALL_OW 113
// end ;
9889: GO 9728
9891: POP
9892: POP
// end else
9893: GO 10218
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9895: LD_ADDR_VAR 0 28
9899: PUSH
9900: LD_VAR 0 3
9904: PPUSH
9905: LD_INT 3
9907: PUSH
9908: LD_INT 62
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 30
9923: PUSH
9924: LD_INT 32
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 4
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 5
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 30
9953: PUSH
9954: LD_INT 31
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 70
9976: ST_TO_ADDR
// if empty then
9977: LD_VAR 0 28
9981: IFFALSE 9998
// empty := ReverseArray ( empty ) ;
9983: LD_ADDR_VAR 0 28
9987: PUSH
9988: LD_VAR 0 28
9992: PPUSH
9993: CALL 59940 0 1
9997: ST_TO_ADDR
// for i in sol do
9998: LD_ADDR_VAR 0 9
10002: PUSH
10003: LD_VAR 0 19
10007: PUSH
10008: FOR_IN
10009: IFFALSE 10216
// begin tag := GetTag ( i ) ;
10011: LD_ADDR_VAR 0 15
10015: PUSH
10016: LD_VAR 0 9
10020: PPUSH
10021: CALL_OW 110
10025: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10026: LD_VAR 0 9
10030: PPUSH
10031: CALL_OW 256
10035: PUSH
10036: LD_INT 1000
10038: LESS
10039: PUSH
10040: LD_VAR 0 15
10044: PUSH
10045: LD_INT 1
10047: NONEQUAL
10048: AND
10049: IFFALSE 10101
// begin SetTag ( i , tHeal ) ;
10051: LD_VAR 0 9
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10063: LD_VAR 0 9
10067: PPUSH
10068: LD_VAR 0 6
10072: PUSH
10073: LD_INT 1
10075: ARRAY
10076: PPUSH
10077: LD_VAR 0 6
10081: PUSH
10082: LD_INT 2
10084: ARRAY
10085: PPUSH
10086: CALL_OW 111
// AddComHold ( i ) ;
10090: LD_VAR 0 9
10094: PPUSH
10095: CALL_OW 200
// continue ;
10099: GO 10008
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10101: LD_VAR 0 9
10105: PPUSH
10106: CALL_OW 256
10110: PUSH
10111: LD_INT 1000
10113: EQUAL
10114: PUSH
10115: LD_VAR 0 15
10119: PUSH
10120: LD_INT 1
10122: EQUAL
10123: AND
10124: IFFALSE 10140
// begin SetTag ( i , 0 ) ;
10126: LD_VAR 0 9
10130: PPUSH
10131: LD_INT 0
10133: PPUSH
10134: CALL_OW 109
// continue ;
10138: GO 10008
// end ; if HasTask ( i ) then
10140: LD_VAR 0 9
10144: PPUSH
10145: CALL_OW 314
10149: IFFALSE 10153
// continue ;
10151: GO 10008
// if not IsInUnit ( i ) and not tag and empty then
10153: LD_VAR 0 9
10157: PPUSH
10158: CALL_OW 310
10162: NOT
10163: PUSH
10164: LD_VAR 0 15
10168: NOT
10169: AND
10170: PUSH
10171: LD_VAR 0 28
10175: AND
10176: IFFALSE 10214
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10178: LD_VAR 0 9
10182: PPUSH
10183: LD_VAR 0 28
10187: PUSH
10188: LD_INT 1
10190: ARRAY
10191: PPUSH
10192: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10196: LD_ADDR_VAR 0 28
10200: PUSH
10201: LD_VAR 0 28
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 3
10213: ST_TO_ADDR
// end ; end ;
10214: GO 10008
10216: POP
10217: POP
// end ; end ; end ;
10218: LD_VAR 0 8
10222: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10223: LD_EXP 40
10227: PPUSH
10228: LD_INT 50
10230: PUSH
10231: EMPTY
10232: LIST
10233: PPUSH
10234: CALL_OW 72
10238: IFFALSE 10291
10240: GO 10242
10242: DISABLE
// begin enable ;
10243: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10244: LD_EXP 3
10248: PUSH
10249: LD_INT 1
10251: ARRAY
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: LD_INT 3
10258: PPUSH
10259: LD_INT 4
10261: PPUSH
10262: LD_EXP 40
10266: PPUSH
10267: LD_INT 27
10269: PUSH
10270: LD_INT 33
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 17
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PPUSH
10287: CALL 6703 0 7
// end ;
10291: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 302
10299: PUSH
10300: LD_EXP 34
10304: NOT
10305: AND
10306: IFFALSE 10376
10308: GO 10310
10310: DISABLE
// begin enable ;
10311: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10312: LD_ADDR_EXP 34
10316: PUSH
10317: LD_INT 3
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 1
10325: PUSH
10326: LD_INT 5
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 3
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 4
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 4
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 1
10361: PUSH
10362: LD_INT 6
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: ST_TO_ADDR
// end ; end_of_file
10376: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10377: LD_INT 0
10379: PPUSH
10380: PPUSH
10381: PPUSH
10382: PPUSH
10383: PPUSH
10384: PPUSH
10385: PPUSH
10386: PPUSH
10387: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10388: LD_ADDR_EXP 43
10392: PUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 2
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL 27025 0 3
10408: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10409: LD_ADDR_EXP 44
10413: PUSH
10414: LD_INT 13
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: LD_INT 1
10422: PUSH
10423: LD_INT 27
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 13
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: LD_INT 1
10440: PUSH
10441: LD_INT 27
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 13
10452: PUSH
10453: LD_INT 1
10455: PUSH
10456: LD_INT 1
10458: PUSH
10459: LD_INT 26
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 13
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: LD_INT 1
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 13
10488: PUSH
10489: LD_INT 1
10491: PUSH
10492: LD_INT 1
10494: PUSH
10495: LD_INT 27
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: ST_TO_ADDR
// arBuildings := [ ] ;
10511: LD_ADDR_EXP 45
10515: PUSH
10516: EMPTY
10517: ST_TO_ADDR
// arVehicles := [ ] ;
10518: LD_ADDR_EXP 46
10522: PUSH
10523: EMPTY
10524: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10525: LD_ADDR_EXP 47
10529: PUSH
10530: EMPTY
10531: ST_TO_ADDR
// arDrivers := [ ] ;
10532: LD_ADDR_EXP 48
10536: PUSH
10537: EMPTY
10538: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10539: LD_ADDR_EXP 50
10543: PUSH
10544: LD_INT 2
10546: ST_TO_ADDR
// arMinesList := [ ] ;
10547: LD_ADDR_EXP 51
10551: PUSH
10552: EMPTY
10553: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10554: LD_ADDR_EXP 49
10558: PUSH
10559: LD_INT 8
10561: PUSH
10562: LD_INT 11
10564: PUSH
10565: LD_INT 12
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_OWVAR 67
10577: ARRAY
10578: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 24
10586: PPUSH
10587: CALL 69612 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10591: LD_INT 23
10593: PPUSH
10594: LD_INT 7
10596: PUSH
10597: LD_INT 9
10599: PUSH
10600: LD_INT 11
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PUSH
10608: LD_OWVAR 67
10612: ARRAY
10613: PPUSH
10614: CALL 11179 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10618: LD_ADDR_VAR 0 8
10622: PUSH
10623: LD_INT 3
10625: PUSH
10626: LD_INT 4
10628: PUSH
10629: LD_INT 5
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_OWVAR 67
10641: ARRAY
10642: ST_TO_ADDR
// uc_side := side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 1
10652: ST_TO_ADDR
// uc_nation := 2 ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_INT 2
10660: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10661: LD_ADDR_EXP 52
10665: PUSH
10666: LD_INT 32
10668: PPUSH
10669: LD_INT 5
10671: PPUSH
10672: LD_STRING 
10674: PPUSH
10675: LD_VAR 0 8
10679: PPUSH
10680: LD_INT 800
10682: PUSH
10683: LD_INT 120
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: PPUSH
10694: LD_INT 10
10696: PUSH
10697: LD_INT 11
10699: PUSH
10700: LD_INT 12
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: PUSH
10708: LD_OWVAR 67
10712: ARRAY
10713: PUSH
10714: LD_INT 4
10716: PUSH
10717: LD_INT 6
10719: PUSH
10720: LD_INT 3
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL 35623 0 6
10733: ST_TO_ADDR
// arForceTmp := [ ] ;
10734: LD_ADDR_EXP 53
10738: PUSH
10739: EMPTY
10740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_INT 22
10748: PUSH
10749: LD_VAR 0 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 30
10760: PUSH
10761: LD_INT 31
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: LD_INT 95
10773: PUSH
10774: LD_INT 5
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 58
10787: PUSH
10788: EMPTY
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: PUSH
10802: FOR_IN
10803: IFFALSE 10932
// begin d := GetDir ( i ) ;
10805: LD_ADDR_VAR 0 4
10809: PUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: CALL_OW 254
10819: ST_TO_ADDR
// if d < 3 then
10820: LD_VAR 0 4
10824: PUSH
10825: LD_INT 3
10827: LESS
10828: IFFALSE 10846
// d := d + 3 else
10830: LD_ADDR_VAR 0 4
10834: PUSH
10835: LD_VAR 0 4
10839: PUSH
10840: LD_INT 3
10842: PLUS
10843: ST_TO_ADDR
10844: GO 10860
// d := d - 3 ;
10846: LD_ADDR_VAR 0 4
10850: PUSH
10851: LD_VAR 0 4
10855: PUSH
10856: LD_INT 3
10858: MINUS
10859: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10860: LD_INT 0
10862: PPUSH
10863: LD_VAR 0 8
10867: PPUSH
10868: CALL_OW 381
// un := CreateHuman ;
10872: LD_ADDR_VAR 0 6
10876: PUSH
10877: CALL_OW 44
10881: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10882: LD_ADDR_EXP 53
10886: PUSH
10887: LD_EXP 53
10891: PPUSH
10892: LD_VAR 0 6
10896: PPUSH
10897: CALL 64673 0 2
10901: ST_TO_ADDR
// SetDir ( un , d ) ;
10902: LD_VAR 0 6
10906: PPUSH
10907: LD_VAR 0 4
10911: PPUSH
10912: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
10916: LD_VAR 0 6
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: CALL_OW 52
// end ;
10930: GO 10802
10932: POP
10933: POP
// for i := 1 to Difficulty do
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: DOUBLE
10940: LD_INT 1
10942: DEC
10943: ST_TO_ADDR
10944: LD_OWVAR 67
10948: PUSH
10949: FOR_TO
10950: IFFALSE 11016
// begin PrepareSoldier ( false , skill ) ;
10952: LD_INT 0
10954: PPUSH
10955: LD_VAR 0 8
10959: PPUSH
10960: CALL_OW 381
// un := CreateHuman ;
10964: LD_ADDR_VAR 0 6
10968: PUSH
10969: CALL_OW 44
10973: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10974: LD_ADDR_EXP 53
10978: PUSH
10979: LD_EXP 53
10983: PPUSH
10984: LD_VAR 0 6
10988: PPUSH
10989: CALL 64673 0 2
10993: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
10994: LD_VAR 0 6
10998: PPUSH
10999: LD_INT 215
11001: PPUSH
11002: LD_INT 102
11004: PPUSH
11005: CALL_OW 428
11009: PPUSH
11010: CALL_OW 52
// end ;
11014: GO 10949
11016: POP
11017: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 22
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PPUSH
11049: CALL_OW 69
11053: PUSH
11054: FOR_IN
11055: IFFALSE 11088
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 3
11064: PUSH
11065: LD_INT 5
11067: PUSH
11068: LD_INT 7
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: PUSH
11076: LD_OWVAR 67
11080: ARRAY
11081: PPUSH
11082: CALL_OW 241
11086: GO 11054
11088: POP
11089: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_INT 22
11097: PUSH
11098: LD_VAR 0 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 32
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PUSH
11126: FOR_IN
11127: IFFALSE 11172
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 27
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: LD_INT 27
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: PUSH
11152: LD_VAR 0 3
11156: PUSH
11157: LD_INT 4
11159: MOD
11160: PUSH
11161: LD_INT 1
11163: PLUS
11164: ARRAY
11165: PPUSH
11166: CALL_OW 431
11170: GO 11126
11172: POP
11173: POP
// end ;
11174: LD_VAR 0 2
11178: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11179: LD_INT 0
11181: PPUSH
11182: PPUSH
11183: PPUSH
11184: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11185: LD_ADDR_VAR 0 5
11189: PUSH
11190: LD_VAR 0 1
11194: PPUSH
11195: LD_INT 0
11197: PPUSH
11198: CALL_OW 517
11202: ST_TO_ADDR
// if not tmp then
11203: LD_VAR 0 5
11207: NOT
11208: IFFALSE 11212
// exit ;
11210: GO 11454
// for i := 1 to n do
11212: LD_ADDR_VAR 0 4
11216: PUSH
11217: DOUBLE
11218: LD_INT 1
11220: DEC
11221: ST_TO_ADDR
11222: LD_VAR 0 2
11226: PUSH
11227: FOR_TO
11228: IFFALSE 11452
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11230: LD_ADDR_VAR 0 6
11234: PUSH
11235: LD_INT 1
11237: PPUSH
11238: LD_VAR 0 5
11242: PUSH
11243: LD_INT 1
11245: ARRAY
11246: PPUSH
11247: CALL_OW 12
11251: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11252: LD_VAR 0 5
11256: PUSH
11257: LD_INT 1
11259: ARRAY
11260: PUSH
11261: LD_VAR 0 6
11265: ARRAY
11266: PPUSH
11267: LD_VAR 0 5
11271: PUSH
11272: LD_INT 2
11274: ARRAY
11275: PUSH
11276: LD_VAR 0 6
11280: ARRAY
11281: PPUSH
11282: LD_EXP 3
11286: PUSH
11287: LD_INT 2
11289: ARRAY
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11298: LD_ADDR_EXP 51
11302: PUSH
11303: LD_EXP 51
11307: PPUSH
11308: LD_EXP 51
11312: PUSH
11313: LD_INT 1
11315: PLUS
11316: PPUSH
11317: LD_VAR 0 5
11321: PUSH
11322: LD_INT 1
11324: ARRAY
11325: PUSH
11326: LD_VAR 0 6
11330: ARRAY
11331: PPUSH
11332: CALL_OW 2
11336: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11337: LD_ADDR_EXP 51
11341: PUSH
11342: LD_EXP 51
11346: PPUSH
11347: LD_EXP 51
11351: PUSH
11352: LD_INT 1
11354: PLUS
11355: PPUSH
11356: LD_VAR 0 5
11360: PUSH
11361: LD_INT 2
11363: ARRAY
11364: PUSH
11365: LD_VAR 0 6
11369: ARRAY
11370: PPUSH
11371: CALL_OW 2
11375: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11376: LD_ADDR_VAR 0 5
11380: PUSH
11381: LD_VAR 0 5
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: LD_VAR 0 5
11393: PUSH
11394: LD_INT 1
11396: ARRAY
11397: PPUSH
11398: LD_VAR 0 6
11402: PPUSH
11403: CALL_OW 3
11407: PPUSH
11408: CALL_OW 1
11412: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11413: LD_ADDR_VAR 0 5
11417: PUSH
11418: LD_VAR 0 5
11422: PPUSH
11423: LD_INT 2
11425: PPUSH
11426: LD_VAR 0 5
11430: PUSH
11431: LD_INT 2
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 6
11439: PPUSH
11440: CALL_OW 3
11444: PPUSH
11445: CALL_OW 1
11449: ST_TO_ADDR
// end ;
11450: GO 11227
11452: POP
11453: POP
// end ;
11454: LD_VAR 0 3
11458: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
11475: PPUSH
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
11484: PPUSH
11485: PPUSH
11486: PPUSH
11487: PPUSH
// enable ;
11488: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11489: LD_ADDR_VAR 0 10
11493: PUSH
11494: LD_INT 81
11496: PUSH
11497: LD_VAR 0 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PPUSH
11506: CALL_OW 69
11510: ST_TO_ADDR
// if tmp then
11511: LD_VAR 0 10
11515: IFFALSE 11536
// enemySide := GetSide ( tmp [ 1 ] ) ;
11517: LD_ADDR_VAR 0 34
11521: PUSH
11522: LD_VAR 0 10
11526: PUSH
11527: LD_INT 1
11529: ARRAY
11530: PPUSH
11531: CALL_OW 255
11535: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11536: LD_ADDR_VAR 0 22
11540: PUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 81
11548: PUSH
11549: LD_VAR 0 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PPUSH
11558: CALL_OW 70
11562: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11563: LD_ADDR_VAR 0 23
11567: PUSH
11568: LD_VAR 0 4
11572: PPUSH
11573: LD_INT 81
11575: PUSH
11576: LD_VAR 0 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PPUSH
11585: CALL_OW 70
11589: ST_TO_ADDR
// vehicles := arVehicles ;
11590: LD_ADDR_VAR 0 26
11594: PUSH
11595: LD_EXP 46
11599: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11600: LD_ADDR_VAR 0 32
11604: PUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 22
11612: PUSH
11613: LD_VAR 0 1
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: LD_INT 30
11627: PUSH
11628: LD_INT 0
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 30
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 70
11658: ST_TO_ADDR
// if depot then
11659: LD_VAR 0 32
11663: IFFALSE 11679
// depot := depot [ 1 ] ;
11665: LD_ADDR_VAR 0 32
11669: PUSH
11670: LD_VAR 0 32
11674: PUSH
11675: LD_INT 1
11677: ARRAY
11678: ST_TO_ADDR
// if arTech then
11679: LD_EXP 43
11683: IFFALSE 11842
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11685: LD_ADDR_VAR 0 12
11689: PUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 22
11697: PUSH
11698: LD_VAR 0 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 50
11709: PUSH
11710: EMPTY
11711: LIST
11712: PUSH
11713: LD_INT 2
11715: PUSH
11716: LD_INT 30
11718: PUSH
11719: LD_INT 6
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: LD_INT 7
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 30
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 70
11761: ST_TO_ADDR
// if lab then
11762: LD_VAR 0 12
11766: IFFALSE 11842
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11768: LD_VAR 0 12
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PPUSH
11777: CALL_OW 461
11781: PUSH
11782: LD_INT 2
11784: EQUAL
11785: IFFALSE 11842
// begin for i in arTech do
11787: LD_ADDR_VAR 0 9
11791: PUSH
11792: LD_EXP 43
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11840
// if CanBeResearched ( lab [ 1 ] , i ) then
11800: LD_VAR 0 12
11804: PUSH
11805: LD_INT 1
11807: ARRAY
11808: PPUSH
11809: LD_VAR 0 9
11813: PPUSH
11814: CALL_OW 430
11818: IFFALSE 11838
// begin AddComResearch ( lab [ 1 ] , i ) ;
11820: LD_VAR 0 12
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PPUSH
11829: LD_VAR 0 9
11833: PPUSH
11834: CALL_OW 184
// end ;
11838: GO 11797
11840: POP
11841: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11842: LD_ADDR_VAR 0 29
11846: PUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 22
11854: PUSH
11855: LD_VAR 0 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 30
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 50
11876: PUSH
11877: EMPTY
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: PPUSH
11885: CALL_OW 70
11889: ST_TO_ADDR
// if fac then
11890: LD_VAR 0 29
11894: IFFALSE 12229
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11896: LD_VAR 0 29
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: PPUSH
11905: CALL_OW 461
11909: PUSH
11910: LD_INT 2
11912: EQUAL
11913: IFFALSE 12229
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
11915: LD_ADDR_VAR 0 30
11919: PUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 2
11927: PUSH
11928: LD_INT 30
11930: PUSH
11931: LD_INT 32
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 33
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 35
11955: PUSH
11956: LD_INT 0
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PPUSH
11967: CALL_OW 70
11971: ST_TO_ADDR
// if emptyTowers then
11972: LD_VAR 0 30
11976: IFFALSE 12026
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
11978: LD_ADDR_VAR 0 31
11982: PUSH
11983: LD_VAR 0 30
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: CALL 37309 0 2
12001: ST_TO_ADDR
// if weapon then
12002: LD_VAR 0 31
12006: IFFALSE 12026
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12008: LD_VAR 0 30
12012: PUSH
12013: LD_INT 1
12015: ARRAY
12016: PPUSH
12017: LD_VAR 0 31
12021: PPUSH
12022: CALL_OW 148
// end ; if arConstructList then
12026: LD_EXP 44
12030: IFFALSE 12229
// for i := 1 to Count ( arConstructList ) do
12032: LD_ADDR_VAR 0 9
12036: PUSH
12037: DOUBLE
12038: LD_INT 1
12040: DEC
12041: ST_TO_ADDR
12042: LD_EXP 44
12046: PPUSH
12047: CALL 29064 0 1
12051: PUSH
12052: FOR_TO
12053: IFFALSE 12227
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12055: LD_VAR 0 29
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_EXP 44
12068: PUSH
12069: LD_VAR 0 9
12073: ARRAY
12074: PUSH
12075: LD_INT 1
12077: ARRAY
12078: PPUSH
12079: LD_EXP 44
12083: PUSH
12084: LD_VAR 0 9
12088: ARRAY
12089: PUSH
12090: LD_INT 2
12092: ARRAY
12093: PPUSH
12094: LD_EXP 44
12098: PUSH
12099: LD_VAR 0 9
12103: ARRAY
12104: PUSH
12105: LD_INT 3
12107: ARRAY
12108: PPUSH
12109: LD_EXP 44
12113: PUSH
12114: LD_VAR 0 9
12118: ARRAY
12119: PUSH
12120: LD_INT 4
12122: ARRAY
12123: PPUSH
12124: CALL_OW 448
12128: IFFALSE 12225
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12130: LD_VAR 0 29
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: LD_EXP 44
12143: PUSH
12144: LD_VAR 0 9
12148: ARRAY
12149: PUSH
12150: LD_INT 1
12152: ARRAY
12153: PPUSH
12154: LD_EXP 44
12158: PUSH
12159: LD_VAR 0 9
12163: ARRAY
12164: PUSH
12165: LD_INT 2
12167: ARRAY
12168: PPUSH
12169: LD_EXP 44
12173: PUSH
12174: LD_VAR 0 9
12178: ARRAY
12179: PUSH
12180: LD_INT 3
12182: ARRAY
12183: PPUSH
12184: LD_EXP 44
12188: PUSH
12189: LD_VAR 0 9
12193: ARRAY
12194: PUSH
12195: LD_INT 4
12197: ARRAY
12198: PPUSH
12199: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12203: LD_ADDR_EXP 44
12207: PUSH
12208: LD_EXP 44
12212: PPUSH
12213: LD_VAR 0 9
12217: PPUSH
12218: CALL_OW 3
12222: ST_TO_ADDR
// break ;
12223: GO 12227
// end ; end ;
12225: GO 12052
12227: POP
12228: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12229: LD_ADDR_VAR 0 10
12233: PUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 21
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: LD_INT 57
12254: PUSH
12255: EMPTY
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: LD_INT 24
12267: PUSH
12268: LD_INT 1000
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 70
12288: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12289: LD_ADDR_VAR 0 17
12293: PUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: CALL_OW 435
12303: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12304: LD_ADDR_VAR 0 14
12308: PUSH
12309: LD_VAR 0 5
12313: PPUSH
12314: LD_INT 25
12316: PUSH
12317: LD_INT 3
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 50
12326: PUSH
12327: EMPTY
12328: LIST
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 72
12338: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12339: LD_VAR 0 14
12343: PPUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 120
12349: PUSH
12350: LD_INT 7
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 3
12363: PUSH
12364: LD_INT 54
12366: PUSH
12367: EMPTY
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: PUSH
12383: LD_VAR 0 29
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: PPUSH
12392: CALL_OW 302
12396: AND
12397: IFFALSE 12456
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12399: LD_VAR 0 14
12403: PPUSH
12404: LD_INT 3
12406: PUSH
12407: LD_INT 120
12409: PUSH
12410: LD_INT 7
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 3
12423: PUSH
12424: LD_INT 54
12426: PUSH
12427: EMPTY
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: PPUSH
12443: LD_VAR 0 29
12447: PUSH
12448: LD_INT 1
12450: ARRAY
12451: PPUSH
12452: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12456: LD_ADDR_VAR 0 18
12460: PUSH
12461: LD_VAR 0 5
12465: PPUSH
12466: LD_INT 25
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 50
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 72
12490: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12491: LD_ADDR_VAR 0 12
12495: PUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: LD_INT 6
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 30
12516: PUSH
12517: LD_INT 7
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 30
12526: PUSH
12527: LD_INT 8
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 70
12544: ST_TO_ADDR
// if sci then
12545: LD_VAR 0 18
12549: IFFALSE 12710
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12551: LD_ADDR_VAR 0 20
12555: PUSH
12556: LD_VAR 0 5
12560: PPUSH
12561: LD_INT 95
12563: PUSH
12564: LD_VAR 0 3
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 120
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 72
12591: ST_TO_ADDR
// if hurtUnits then
12592: LD_VAR 0 20
12596: IFFALSE 12657
// begin for i in sci do
12598: LD_ADDR_VAR 0 9
12602: PUSH
12603: LD_VAR 0 18
12607: PUSH
12608: FOR_IN
12609: IFFALSE 12653
// if IsInUnit ( i ) then
12611: LD_VAR 0 9
12615: PPUSH
12616: CALL_OW 310
12620: IFFALSE 12633
// ComExitBuilding ( i ) else
12622: LD_VAR 0 9
12626: PPUSH
12627: CALL_OW 122
12631: GO 12651
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12633: LD_VAR 0 9
12637: PPUSH
12638: LD_VAR 0 20
12642: PUSH
12643: LD_INT 1
12645: ARRAY
12646: PPUSH
12647: CALL_OW 128
12651: GO 12608
12653: POP
12654: POP
// end else
12655: GO 12710
// if lab then
12657: LD_VAR 0 12
12661: IFFALSE 12710
// begin for i in sci do
12663: LD_ADDR_VAR 0 9
12667: PUSH
12668: LD_VAR 0 18
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12708
// if not IsInUnit ( i ) then
12676: LD_VAR 0 9
12680: PPUSH
12681: CALL_OW 310
12685: NOT
12686: IFFALSE 12706
// ComEnterUnit ( i , lab [ 1 ] ) ;
12688: LD_VAR 0 9
12692: PPUSH
12693: LD_VAR 0 12
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: CALL_OW 120
12706: GO 12673
12708: POP
12709: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12710: LD_ADDR_VAR 0 13
12714: PUSH
12715: LD_VAR 0 5
12719: PPUSH
12720: LD_INT 25
12722: PUSH
12723: LD_INT 2
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 72
12734: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12735: LD_ADDR_VAR 0 33
12739: PUSH
12740: LD_EXP 45
12744: ST_TO_ADDR
// if eng then
12745: LD_VAR 0 13
12749: IFFALSE 13583
// begin for i in eng do
12751: LD_ADDR_VAR 0 9
12755: PUSH
12756: LD_VAR 0 13
12760: PUSH
12761: FOR_IN
12762: IFFALSE 13581
// begin tag := GetTag ( i ) ;
12764: LD_ADDR_VAR 0 15
12768: PUSH
12769: LD_VAR 0 9
12773: PPUSH
12774: CALL_OW 110
12778: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12779: LD_VAR 0 9
12783: PPUSH
12784: LD_VAR 0 4
12788: PPUSH
12789: CALL_OW 308
12793: IFFALSE 12824
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12795: LD_VAR 0 9
12799: PPUSH
12800: LD_VAR 0 7
12804: PUSH
12805: LD_INT 1
12807: ARRAY
12808: PPUSH
12809: LD_VAR 0 7
12813: PUSH
12814: LD_INT 2
12816: ARRAY
12817: PPUSH
12818: CALL_OW 111
// continue ;
12822: GO 12761
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12824: LD_VAR 0 9
12828: PPUSH
12829: CALL_OW 256
12833: PUSH
12834: LD_INT 800
12836: LESS
12837: PUSH
12838: LD_VAR 0 15
12842: PUSH
12843: LD_INT 1
12845: NONEQUAL
12846: AND
12847: IFFALSE 12897
// begin SetTag ( i , tHeal ) ;
12849: LD_VAR 0 9
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12861: LD_VAR 0 9
12865: PPUSH
12866: LD_VAR 0 6
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PPUSH
12875: LD_VAR 0 6
12879: PUSH
12880: LD_INT 2
12882: ARRAY
12883: PPUSH
12884: CALL_OW 111
// AddComHold ( i ) ;
12888: LD_VAR 0 9
12892: PPUSH
12893: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12897: LD_VAR 0 15
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: PUSH
12906: LD_VAR 0 9
12910: PPUSH
12911: CALL_OW 256
12915: PUSH
12916: LD_INT 1000
12918: EQUAL
12919: AND
12920: IFFALSE 12934
// SetTag ( i , 0 ) ;
12922: LD_VAR 0 9
12926: PPUSH
12927: LD_INT 0
12929: PPUSH
12930: CALL_OW 109
// if not tag then
12934: LD_VAR 0 15
12938: NOT
12939: IFFALSE 13106
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12941: LD_ADDR_VAR 0 11
12945: PUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 57
12953: PUSH
12954: EMPTY
12955: LIST
12956: PPUSH
12957: CALL_OW 70
12961: ST_TO_ADDR
// if undone then
12962: LD_VAR 0 11
12966: IFFALSE 12988
// begin ComComplete ( i , undone [ 1 ] ) ;
12968: LD_VAR 0 9
12972: PPUSH
12973: LD_VAR 0 11
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL 35162 0 2
// continue ;
12986: GO 12761
// end ; if cr or tmp or buildingsToBuild then
12988: LD_VAR 0 17
12992: PUSH
12993: LD_VAR 0 10
12997: OR
12998: PUSH
12999: LD_VAR 0 33
13003: OR
13004: IFFALSE 13080
// begin if IsInUnit ( i ) then
13006: LD_VAR 0 9
13010: PPUSH
13011: CALL_OW 310
13015: IFFALSE 13026
// ComExitBuilding ( i ) ;
13017: LD_VAR 0 9
13021: PPUSH
13022: CALL_OW 122
// if tmp then
13026: LD_VAR 0 10
13030: IFFALSE 13046
// SetTag ( i , tRepair ) else
13032: LD_VAR 0 9
13036: PPUSH
13037: LD_INT 3
13039: PPUSH
13040: CALL_OW 109
13044: GO 13078
// if cr then
13046: LD_VAR 0 17
13050: IFFALSE 13066
// SetTag ( i , tCrates ) else
13052: LD_VAR 0 9
13056: PPUSH
13057: LD_INT 2
13059: PPUSH
13060: CALL_OW 109
13064: GO 13078
// SetTag ( i , tBuild ) ;
13066: LD_VAR 0 9
13070: PPUSH
13071: LD_INT 5
13073: PPUSH
13074: CALL_OW 109
// end else
13078: GO 13106
// if not IsInUnit ( i ) then
13080: LD_VAR 0 9
13084: PPUSH
13085: CALL_OW 310
13089: NOT
13090: IFFALSE 13106
// ComEnterUnit ( i , depot ) ;
13092: LD_VAR 0 9
13096: PPUSH
13097: LD_VAR 0 32
13101: PPUSH
13102: CALL_OW 120
// end ; if tag = tRepair then
13106: LD_VAR 0 15
13110: PUSH
13111: LD_INT 3
13113: EQUAL
13114: IFFALSE 13220
// begin if IsInUnit ( i ) then
13116: LD_VAR 0 9
13120: PPUSH
13121: CALL_OW 310
13125: IFFALSE 13138
// begin ComExitBuilding ( i ) ;
13127: LD_VAR 0 9
13131: PPUSH
13132: CALL_OW 122
// continue ;
13136: GO 12761
// end ; if not tmp then
13138: LD_VAR 0 10
13142: NOT
13143: IFFALSE 13159
// begin SetTag ( i , 0 ) ;
13145: LD_VAR 0 9
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 109
// continue ;
13157: GO 12761
// end ; if not HasTask ( i ) then
13159: LD_VAR 0 9
13163: PPUSH
13164: CALL_OW 314
13168: NOT
13169: IFFALSE 13189
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13171: LD_VAR 0 9
13175: PPUSH
13176: LD_VAR 0 10
13180: PUSH
13181: LD_INT 1
13183: ARRAY
13184: PPUSH
13185: CALL_OW 130
// if not IsInArea ( i , area ) then
13189: LD_VAR 0 9
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: CALL_OW 308
13203: NOT
13204: IFFALSE 13220
// ComMoveToArea ( i , area ) ;
13206: LD_VAR 0 9
13210: PPUSH
13211: LD_VAR 0 3
13215: PPUSH
13216: CALL_OW 113
// end ; if tag = tBuild then
13220: LD_VAR 0 15
13224: PUSH
13225: LD_INT 5
13227: EQUAL
13228: IFFALSE 13434
// begin if IsInUnit ( i ) then
13230: LD_VAR 0 9
13234: PPUSH
13235: CALL_OW 310
13239: IFFALSE 13252
// begin ComExitBuilding ( i ) ;
13241: LD_VAR 0 9
13245: PPUSH
13246: CALL_OW 122
// continue ;
13250: GO 12761
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13252: LD_VAR 0 33
13256: NOT
13257: PUSH
13258: LD_VAR 0 22
13262: OR
13263: PUSH
13264: LD_VAR 0 23
13268: OR
13269: IFFALSE 13287
// begin SetTag ( i , 0 ) ;
13271: LD_VAR 0 9
13275: PPUSH
13276: LD_INT 0
13278: PPUSH
13279: CALL_OW 109
// continue ;
13283: GO 12761
// end else
13285: GO 13326
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13287: LD_VAR 0 32
13291: PPUSH
13292: LD_VAR 0 33
13296: PUSH
13297: LD_INT 1
13299: ARRAY
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PPUSH
13305: CALL 68596 0 2
13309: NOT
13310: IFFALSE 13326
// begin SetTag ( i , 0 ) ;
13312: LD_VAR 0 9
13316: PPUSH
13317: LD_INT 0
13319: PPUSH
13320: CALL_OW 109
// continue ;
13324: GO 12761
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13326: LD_ADDR_VAR 0 11
13330: PUSH
13331: LD_VAR 0 3
13335: PPUSH
13336: LD_INT 57
13338: PUSH
13339: EMPTY
13340: LIST
13341: PPUSH
13342: CALL_OW 70
13346: ST_TO_ADDR
// if undone then
13347: LD_VAR 0 11
13351: IFFALSE 13373
// begin ComComplete ( i , undone [ 1 ] ) ;
13353: LD_VAR 0 9
13357: PPUSH
13358: LD_VAR 0 11
13362: PUSH
13363: LD_INT 1
13365: ARRAY
13366: PPUSH
13367: CALL 35162 0 2
// continue ;
13371: GO 12761
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13373: LD_VAR 0 9
13377: PPUSH
13378: LD_VAR 0 33
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 33
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PUSH
13400: LD_INT 2
13402: ARRAY
13403: PPUSH
13404: LD_VAR 0 33
13408: PUSH
13409: LD_INT 1
13411: ARRAY
13412: PUSH
13413: LD_INT 3
13415: ARRAY
13416: PPUSH
13417: LD_VAR 0 33
13421: PUSH
13422: LD_INT 1
13424: ARRAY
13425: PUSH
13426: LD_INT 4
13428: ARRAY
13429: PPUSH
13430: CALL_OW 145
// end ; if tag = tCrates then
13434: LD_VAR 0 15
13438: PUSH
13439: LD_INT 2
13441: EQUAL
13442: IFFALSE 13579
// begin if IsInUnit ( i ) then
13444: LD_VAR 0 9
13448: PPUSH
13449: CALL_OW 310
13453: IFFALSE 13466
// begin ComExitBuilding ( i ) ;
13455: LD_VAR 0 9
13459: PPUSH
13460: CALL_OW 122
// continue ;
13464: GO 12761
// end ; if not cr then
13466: LD_VAR 0 17
13470: NOT
13471: IFFALSE 13487
// begin SetTag ( i , 0 ) ;
13473: LD_VAR 0 9
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 109
// continue ;
13485: GO 12761
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13487: LD_VAR 0 9
13491: PPUSH
13492: CALL_OW 314
13496: NOT
13497: PUSH
13498: LD_INT 81
13500: PUSH
13501: LD_VAR 0 1
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 92
13512: PUSH
13513: LD_VAR 0 17
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PUSH
13522: LD_VAR 0 17
13526: PUSH
13527: LD_INT 2
13529: ARRAY
13530: PUSH
13531: LD_INT 12
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PPUSH
13544: CALL_OW 69
13548: NOT
13549: AND
13550: IFFALSE 13579
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13552: LD_VAR 0 9
13556: PPUSH
13557: LD_VAR 0 17
13561: PUSH
13562: LD_INT 1
13564: ARRAY
13565: PPUSH
13566: LD_VAR 0 17
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: CALL_OW 117
// end ; end ;
13579: GO 12761
13581: POP
13582: POP
// end ; if vehicles then
13583: LD_VAR 0 26
13587: IFFALSE 14387
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13589: LD_ADDR_VAR 0 26
13593: PUSH
13594: LD_VAR 0 26
13598: PPUSH
13599: LD_INT 3
13601: PUSH
13602: LD_INT 2
13604: PUSH
13605: LD_INT 34
13607: PUSH
13608: LD_INT 88
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 34
13617: PUSH
13618: LD_INT 32
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 50
13636: PUSH
13637: EMPTY
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 72
13648: ST_TO_ADDR
// if vehicles then
13649: LD_VAR 0 26
13653: IFFALSE 14387
// begin for i in vehicles do
13655: LD_ADDR_VAR 0 9
13659: PUSH
13660: LD_VAR 0 26
13664: PUSH
13665: FOR_IN
13666: IFFALSE 14385
// begin tag := GetTag ( i ) ;
13668: LD_ADDR_VAR 0 15
13672: PUSH
13673: LD_VAR 0 9
13677: PPUSH
13678: CALL_OW 110
13682: ST_TO_ADDR
// if not tag then
13683: LD_VAR 0 15
13687: NOT
13688: IFFALSE 13834
// begin if GetControl ( i ) = control_manual then
13690: LD_VAR 0 9
13694: PPUSH
13695: CALL_OW 263
13699: PUSH
13700: LD_INT 1
13702: EQUAL
13703: IFFALSE 13820
// begin drivers := arDrivers ;
13705: LD_ADDR_VAR 0 24
13709: PUSH
13710: LD_EXP 48
13714: ST_TO_ADDR
// if not drivers then
13715: LD_VAR 0 24
13719: NOT
13720: IFFALSE 13800
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13722: LD_ADDR_VAR 0 24
13726: PUSH
13727: LD_VAR 0 14
13731: PPUSH
13732: LD_INT 3
13734: PUSH
13735: LD_INT 120
13737: PUSH
13738: LD_INT 7
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PPUSH
13749: CALL_OW 72
13753: ST_TO_ADDR
// if drivers then
13754: LD_VAR 0 24
13758: IFFALSE 13800
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13760: LD_VAR 0 24
13764: PUSH
13765: LD_INT 1
13767: ARRAY
13768: PPUSH
13769: LD_INT 7
13771: PPUSH
13772: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13776: LD_ADDR_EXP 48
13780: PUSH
13781: LD_EXP 48
13785: PPUSH
13786: LD_VAR 0 24
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: PPUSH
13795: CALL 64673 0 2
13799: ST_TO_ADDR
// end ; end ; if drivers then
13800: LD_VAR 0 24
13804: IFFALSE 13818
// SetTag ( i , tBusy ) ;
13806: LD_VAR 0 9
13810: PPUSH
13811: LD_INT 8
13813: PPUSH
13814: CALL_OW 109
// continue ;
13818: GO 13665
// end ; SetTag ( i , tBusy ) ;
13820: LD_VAR 0 9
13824: PPUSH
13825: LD_INT 8
13827: PPUSH
13828: CALL_OW 109
// end else
13832: GO 14383
// if tag = tBusy then
13834: LD_VAR 0 15
13838: PUSH
13839: LD_INT 8
13841: EQUAL
13842: IFFALSE 14054
// begin if GetLives ( i ) = 1000 then
13844: LD_VAR 0 9
13848: PPUSH
13849: CALL_OW 256
13853: PUSH
13854: LD_INT 1000
13856: EQUAL
13857: IFFALSE 14052
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13859: LD_VAR 0 9
13863: PPUSH
13864: CALL_OW 263
13868: PUSH
13869: LD_INT 1
13871: EQUAL
13872: PUSH
13873: LD_VAR 0 9
13877: PPUSH
13878: CALL_OW 311
13882: NOT
13883: AND
13884: IFFALSE 14040
// begin drivers := arDrivers ;
13886: LD_ADDR_VAR 0 24
13890: PUSH
13891: LD_EXP 48
13895: ST_TO_ADDR
// if not drivers then
13896: LD_VAR 0 24
13900: NOT
13901: IFFALSE 13917
// begin SetTag ( i , 0 ) ;
13903: LD_VAR 0 9
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 109
// continue ;
13915: GO 13665
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13917: LD_VAR 0 24
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: PPUSH
13926: CALL_OW 310
13930: PUSH
13931: LD_VAR 0 24
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PPUSH
13940: CALL 62277 0 1
13944: NOT
13945: AND
13946: IFFALSE 13961
// ComExitBuilding ( drivers [ 1 ] ) ;
13948: LD_VAR 0 24
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13961: LD_VAR 0 26
13965: PPUSH
13966: LD_INT 120
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 72
13980: PUSH
13981: LD_VAR 0 24
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: CALL_OW 314
13994: NOT
13995: AND
13996: PUSH
13997: LD_VAR 0 26
14001: PPUSH
14002: LD_INT 120
14004: PUSH
14005: LD_INT 3
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PPUSH
14012: CALL_OW 72
14016: NOT
14017: OR
14018: IFFALSE 14038
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14020: LD_VAR 0 24
14024: PUSH
14025: LD_INT 1
14027: ARRAY
14028: PPUSH
14029: LD_VAR 0 9
14033: PPUSH
14034: CALL_OW 120
// continue ;
14038: GO 13665
// end ; SetTag ( i , tAttack ) ;
14040: LD_VAR 0 9
14044: PPUSH
14045: LD_INT 13
14047: PPUSH
14048: CALL_OW 109
// end ; end else
14052: GO 14383
// if tag = tAttack then
14054: LD_VAR 0 15
14058: PUSH
14059: LD_INT 13
14061: EQUAL
14062: IFFALSE 14242
// begin enemy := enemyInBase ;
14064: LD_ADDR_VAR 0 21
14068: PUSH
14069: LD_VAR 0 22
14073: ST_TO_ADDR
// if not enemy then
14074: LD_VAR 0 21
14078: NOT
14079: IFFALSE 14091
// enemy := enemyOuterBase ;
14081: LD_ADDR_VAR 0 21
14085: PUSH
14086: LD_VAR 0 23
14090: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14091: LD_VAR 0 21
14095: NOT
14096: PUSH
14097: LD_VAR 0 9
14101: PPUSH
14102: LD_VAR 0 7
14106: PUSH
14107: LD_INT 1
14109: ARRAY
14110: PPUSH
14111: LD_VAR 0 7
14115: PUSH
14116: LD_INT 2
14118: ARRAY
14119: PPUSH
14120: CALL_OW 297
14124: PUSH
14125: LD_INT 10
14127: GREATER
14128: AND
14129: IFFALSE 14160
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14131: LD_VAR 0 9
14135: PPUSH
14136: LD_VAR 0 7
14140: PUSH
14141: LD_INT 1
14143: ARRAY
14144: PPUSH
14145: LD_VAR 0 7
14149: PUSH
14150: LD_INT 2
14152: ARRAY
14153: PPUSH
14154: CALL_OW 111
// continue ;
14158: GO 13665
// end ; if GetLives ( i ) < 650 then
14160: LD_VAR 0 9
14164: PPUSH
14165: CALL_OW 256
14169: PUSH
14170: LD_INT 650
14172: LESS
14173: IFFALSE 14216
// begin SetTag ( i , tVehRepair ) ;
14175: LD_VAR 0 9
14179: PPUSH
14180: LD_INT 9
14182: PPUSH
14183: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14187: LD_VAR 0 9
14191: PPUSH
14192: LD_VAR 0 7
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PPUSH
14201: LD_VAR 0 7
14205: PUSH
14206: LD_INT 2
14208: ARRAY
14209: PPUSH
14210: CALL_OW 111
// continue ;
14214: GO 13665
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14216: LD_VAR 0 9
14220: PPUSH
14221: LD_VAR 0 21
14225: PPUSH
14226: LD_VAR 0 9
14230: PPUSH
14231: CALL_OW 74
14235: PPUSH
14236: CALL_OW 115
// end else
14240: GO 14383
// if tag = tVehRepair then
14242: LD_VAR 0 15
14246: PUSH
14247: LD_INT 9
14249: EQUAL
14250: IFFALSE 14383
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14252: LD_VAR 0 9
14256: PPUSH
14257: LD_VAR 0 7
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: LD_VAR 0 7
14270: PUSH
14271: LD_INT 2
14273: ARRAY
14274: PPUSH
14275: CALL_OW 297
14279: PUSH
14280: LD_INT 10
14282: GREATER
14283: IFFALSE 14314
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14285: LD_VAR 0 9
14289: PPUSH
14290: LD_VAR 0 7
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 7
14303: PUSH
14304: LD_INT 2
14306: ARRAY
14307: PPUSH
14308: CALL_OW 111
// continue ;
14312: GO 13665
// end ; if GetLives ( i ) = 1000 then
14314: LD_VAR 0 9
14318: PPUSH
14319: CALL_OW 256
14323: PUSH
14324: LD_INT 1000
14326: EQUAL
14327: IFFALSE 14343
// begin SetTag ( i , tBusy ) ;
14329: LD_VAR 0 9
14333: PPUSH
14334: LD_INT 8
14336: PPUSH
14337: CALL_OW 109
// continue ;
14341: GO 13665
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14343: LD_VAR 0 9
14347: PPUSH
14348: CALL_OW 263
14352: PUSH
14353: LD_INT 1
14355: EQUAL
14356: PUSH
14357: LD_VAR 0 9
14361: PPUSH
14362: CALL_OW 311
14366: AND
14367: IFFALSE 14383
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14369: LD_VAR 0 9
14373: PPUSH
14374: CALL_OW 311
14378: PPUSH
14379: CALL 66373 0 1
// end ; end ;
14383: GO 13665
14385: POP
14386: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14387: LD_ADDR_VAR 0 19
14391: PUSH
14392: LD_VAR 0 5
14396: PPUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 25
14412: PUSH
14413: LD_INT 8
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 25
14422: PUSH
14423: LD_INT 5
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 25
14432: PUSH
14433: LD_INT 9
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 50
14449: PUSH
14450: EMPTY
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PPUSH
14457: CALL_OW 72
14461: ST_TO_ADDR
// if sol then
14462: LD_VAR 0 19
14466: IFFALSE 14974
// begin if enemyInBase then
14468: LD_VAR 0 22
14472: IFFALSE 14651
// begin for i in sol do
14474: LD_ADDR_VAR 0 9
14478: PUSH
14479: LD_VAR 0 19
14483: PUSH
14484: FOR_IN
14485: IFFALSE 14647
// begin tw := IsInUnit ( i ) ;
14487: LD_ADDR_VAR 0 16
14491: PUSH
14492: LD_VAR 0 9
14496: PPUSH
14497: CALL_OW 310
14501: ST_TO_ADDR
// if tw then
14502: LD_VAR 0 16
14506: IFFALSE 14589
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14508: LD_VAR 0 16
14512: PUSH
14513: LD_INT 22
14515: PUSH
14516: LD_VAR 0 1
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 101
14527: PUSH
14528: LD_VAR 0 34
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 32
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 30
14552: PUSH
14553: LD_INT 31
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 69
14574: IN
14575: NOT
14576: IFFALSE 14587
// ComExitBuilding ( i ) ;
14578: LD_VAR 0 9
14582: PPUSH
14583: CALL_OW 122
// end else
14587: GO 14645
// if IsInArea ( i , area ) then
14589: LD_VAR 0 9
14593: PPUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: CALL_OW 308
14603: IFFALSE 14631
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14605: LD_VAR 0 9
14609: PPUSH
14610: LD_VAR 0 22
14614: PPUSH
14615: LD_VAR 0 9
14619: PPUSH
14620: CALL_OW 74
14624: PPUSH
14625: CALL_OW 115
14629: GO 14645
// ComMoveToArea ( i , area ) ;
14631: LD_VAR 0 9
14635: PPUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: CALL_OW 113
// end ;
14645: GO 14484
14647: POP
14648: POP
// end else
14649: GO 14974
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14651: LD_ADDR_VAR 0 28
14655: PUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 3
14663: PUSH
14664: LD_INT 62
14666: PUSH
14667: EMPTY
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 32
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 30
14689: PUSH
14690: LD_INT 4
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 30
14699: PUSH
14700: LD_INT 5
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 30
14709: PUSH
14710: LD_INT 31
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 70
14732: ST_TO_ADDR
// if empty then
14733: LD_VAR 0 28
14737: IFFALSE 14754
// empty := ReverseArray ( empty ) ;
14739: LD_ADDR_VAR 0 28
14743: PUSH
14744: LD_VAR 0 28
14748: PPUSH
14749: CALL 59940 0 1
14753: ST_TO_ADDR
// for i in sol do
14754: LD_ADDR_VAR 0 9
14758: PUSH
14759: LD_VAR 0 19
14763: PUSH
14764: FOR_IN
14765: IFFALSE 14972
// begin tag := GetTag ( i ) ;
14767: LD_ADDR_VAR 0 15
14771: PUSH
14772: LD_VAR 0 9
14776: PPUSH
14777: CALL_OW 110
14781: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14782: LD_VAR 0 9
14786: PPUSH
14787: CALL_OW 256
14791: PUSH
14792: LD_INT 1000
14794: LESS
14795: PUSH
14796: LD_VAR 0 15
14800: PUSH
14801: LD_INT 1
14803: NONEQUAL
14804: AND
14805: IFFALSE 14857
// begin SetTag ( i , tHeal ) ;
14807: LD_VAR 0 9
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14819: LD_VAR 0 9
14823: PPUSH
14824: LD_VAR 0 6
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 6
14837: PUSH
14838: LD_INT 2
14840: ARRAY
14841: PPUSH
14842: CALL_OW 111
// AddComHold ( i ) ;
14846: LD_VAR 0 9
14850: PPUSH
14851: CALL_OW 200
// continue ;
14855: GO 14764
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14857: LD_VAR 0 9
14861: PPUSH
14862: CALL_OW 256
14866: PUSH
14867: LD_INT 1000
14869: EQUAL
14870: PUSH
14871: LD_VAR 0 15
14875: PUSH
14876: LD_INT 1
14878: EQUAL
14879: AND
14880: IFFALSE 14896
// begin SetTag ( i , 0 ) ;
14882: LD_VAR 0 9
14886: PPUSH
14887: LD_INT 0
14889: PPUSH
14890: CALL_OW 109
// continue ;
14894: GO 14764
// end ; if HasTask ( i ) then
14896: LD_VAR 0 9
14900: PPUSH
14901: CALL_OW 314
14905: IFFALSE 14909
// continue ;
14907: GO 14764
// if not IsInUnit ( i ) and not tag and empty then
14909: LD_VAR 0 9
14913: PPUSH
14914: CALL_OW 310
14918: NOT
14919: PUSH
14920: LD_VAR 0 15
14924: NOT
14925: AND
14926: PUSH
14927: LD_VAR 0 28
14931: AND
14932: IFFALSE 14970
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
14934: LD_VAR 0 9
14938: PPUSH
14939: LD_VAR 0 28
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: PPUSH
14948: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
14952: LD_ADDR_VAR 0 28
14956: PUSH
14957: LD_VAR 0 28
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 3
14969: ST_TO_ADDR
// end ; end ;
14970: GO 14764
14972: POP
14973: POP
// end ; end ; end ;
14974: LD_VAR 0 8
14978: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
14979: LD_EXP 52
14983: PPUSH
14984: LD_INT 50
14986: PUSH
14987: EMPTY
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: IFFALSE 15047
14996: GO 14998
14998: DISABLE
// begin enable ;
14999: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15000: LD_EXP 3
15004: PUSH
15005: LD_INT 2
15007: ARRAY
15008: PPUSH
15009: LD_INT 2
15011: PPUSH
15012: LD_INT 5
15014: PPUSH
15015: LD_INT 6
15017: PPUSH
15018: LD_EXP 52
15022: PPUSH
15023: LD_INT 210
15025: PUSH
15026: LD_INT 43
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: LD_INT 194
15035: PUSH
15036: LD_INT 28
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL 11459 0 7
// end ;
15047: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15048: LD_EXP 51
15052: IFFALSE 15272
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
// begin enable ;
15062: ENABLE
// p := 1 ;
15063: LD_ADDR_VAR 0 2
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: DOUBLE
15077: LD_INT 1
15079: DEC
15080: ST_TO_ADDR
15081: LD_EXP 51
15085: PPUSH
15086: CALL 29064 0 1
15090: PUSH
15091: LD_INT 2
15093: DIV
15094: PUSH
15095: FOR_TO
15096: IFFALSE 15270
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_EXP 51
15107: PUSH
15108: LD_VAR 0 2
15112: ARRAY
15113: PPUSH
15114: LD_EXP 51
15118: PUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_INT 1
15126: PLUS
15127: ARRAY
15128: PPUSH
15129: CALL_OW 428
15133: ST_TO_ADDR
// if tmp then
15134: LD_VAR 0 3
15138: IFFALSE 15254
// if GetSide ( tmp ) <> botSides [ 2 ] then
15140: LD_VAR 0 3
15144: PPUSH
15145: CALL_OW 255
15149: PUSH
15150: LD_EXP 3
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: NONEQUAL
15159: IFFALSE 15254
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15161: LD_EXP 51
15165: PUSH
15166: LD_VAR 0 2
15170: ARRAY
15171: PPUSH
15172: LD_EXP 51
15176: PUSH
15177: LD_VAR 0 2
15181: PUSH
15182: LD_INT 1
15184: PLUS
15185: ARRAY
15186: PPUSH
15187: LD_EXP 3
15191: PUSH
15192: LD_INT 2
15194: ARRAY
15195: PPUSH
15196: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15200: LD_ADDR_EXP 51
15204: PUSH
15205: LD_EXP 51
15209: PPUSH
15210: LD_VAR 0 2
15214: PPUSH
15215: CALL_OW 3
15219: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15220: LD_ADDR_EXP 51
15224: PUSH
15225: LD_EXP 51
15229: PPUSH
15230: LD_VAR 0 2
15234: PPUSH
15235: CALL_OW 3
15239: ST_TO_ADDR
// p := p - 2 ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 2
15249: PUSH
15250: LD_INT 2
15252: MINUS
15253: ST_TO_ADDR
// end ; p := p + 2 ;
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: LD_INT 2
15266: PLUS
15267: ST_TO_ADDR
// end ;
15268: GO 15095
15270: POP
15271: POP
// end ;
15272: PPOPN 3
15274: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15275: LD_INT 32
15277: PPUSH
15278: CALL_OW 302
15282: PUSH
15283: LD_EXP 44
15287: NOT
15288: AND
15289: IFFALSE 15359
15291: GO 15293
15293: DISABLE
// begin enable ;
15294: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15295: LD_ADDR_EXP 44
15299: PUSH
15300: LD_INT 14
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: LD_INT 27
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 14
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: LD_INT 1
15326: PUSH
15327: LD_INT 26
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 14
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: LD_INT 27
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: ST_TO_ADDR
// end ; end_of_file
15359: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 255
15369: PUSH
15370: LD_EXP 3
15374: IN
15375: NOT
15376: IFFALSE 15380
// exit ;
15378: GO 15437
// if not un in [ Sikorski ] then
15380: LD_VAR 0 1
15384: PUSH
15385: LD_EXP 32
15389: PUSH
15390: EMPTY
15391: LIST
15392: IN
15393: NOT
15394: IFFALSE 15415
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15396: LD_VAR 0 1
15400: PPUSH
15401: LD_VAR 0 2
15405: PPUSH
15406: LD_INT 0
15408: PPUSH
15409: CALL 5726 0 3
15413: GO 15437
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15415: LD_VAR 0 1
15419: PPUSH
15420: LD_VAR 0 2
15424: PPUSH
15425: LD_INT 5
15427: PPUSH
15428: CALL 5053 0 1
15432: PPUSH
15433: CALL 5726 0 3
// end ;
15437: PPOPN 3
15439: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15440: LD_INT 0
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: CALL 21678 0 1
// side := GetSide ( un ) ;
15461: LD_ADDR_VAR 0 3
15465: PUSH
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 255
15475: ST_TO_ADDR
// if multi_sides [ side ] then
15476: LD_EXP 7
15480: PUSH
15481: LD_VAR 0 3
15485: ARRAY
15486: IFFALSE 15512
// if GetType ( un ) = unit_human then
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 247
15497: PUSH
15498: LD_INT 1
15500: EQUAL
15501: IFFALSE 15512
// MultiplayerEvent_HumanLost ( side ) ;
15503: LD_VAR 0 3
15507: PPUSH
15508: CALL 5612 0 1
// if side in botSides then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_EXP 3
15521: IN
15522: IFFALSE 16649
// begin if side = botSides [ 1 ] then
15524: LD_VAR 0 3
15528: PUSH
15529: LD_EXP 3
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: EQUAL
15538: IFFALSE 16079
// begin if un in amForce then
15540: LD_VAR 0 1
15544: PUSH
15545: LD_EXP 40
15549: IN
15550: IFFALSE 15568
// amForce := amForce diff un ;
15552: LD_ADDR_EXP 40
15556: PUSH
15557: LD_EXP 40
15561: PUSH
15562: LD_VAR 0 1
15566: DIFF
15567: ST_TO_ADDR
// if un in amAttackersVeh then
15568: LD_VAR 0 1
15572: PUSH
15573: LD_EXP 57
15577: IN
15578: IFFALSE 15596
// amAttackersVeh := amAttackersVeh diff un ;
15580: LD_ADDR_EXP 57
15584: PUSH
15585: LD_EXP 57
15589: PUSH
15590: LD_VAR 0 1
15594: DIFF
15595: ST_TO_ADDR
// if un in amAttackersInf then
15596: LD_VAR 0 1
15600: PUSH
15601: LD_EXP 56
15605: IN
15606: IFFALSE 15624
// amAttackersInf := amAttackersInf diff un ;
15608: LD_ADDR_EXP 56
15612: PUSH
15613: LD_EXP 56
15617: PUSH
15618: LD_VAR 0 1
15622: DIFF
15623: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15624: LD_VAR 0 1
15628: PPUSH
15629: CALL_OW 257
15633: PUSH
15634: LD_INT 3
15636: EQUAL
15637: PUSH
15638: LD_EXP 42
15642: AND
15643: IFFALSE 15784
// begin if not IsOk ( amDep ) then
15645: LD_INT 1
15647: PPUSH
15648: CALL_OW 302
15652: NOT
15653: IFFALSE 15657
// exit ;
15655: GO 16721
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15657: LD_ADDR_EXP 42
15661: PUSH
15662: LD_EXP 42
15666: PPUSH
15667: CALL 66056 0 1
15671: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15672: LD_ADDR_OWVAR 20
15676: PUSH
15677: LD_EXP 3
15681: PUSH
15682: LD_INT 1
15684: ARRAY
15685: ST_TO_ADDR
// uc_nation := nation_american ;
15686: LD_ADDR_OWVAR 21
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: LD_INT 3
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_OWVAR 67
15715: ARRAY
15716: PPUSH
15717: CALL_OW 383
// un := CreateHuman ;
15721: LD_ADDR_VAR 0 1
15725: PUSH
15726: CALL_OW 44
15730: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: LD_INT 52
15738: PPUSH
15739: LD_INT 2
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15749: LD_VAR 0 1
15753: PPUSH
15754: LD_INT 23
15756: PPUSH
15757: LD_INT 19
15759: PPUSH
15760: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15764: LD_ADDR_EXP 40
15768: PUSH
15769: LD_EXP 40
15773: PPUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL 64673 0 2
15783: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 247
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: IFFALSE 15940
// begin btype := GetBType ( un ) ;
15799: LD_ADDR_VAR 0 11
15803: PUSH
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 266
15813: ST_TO_ADDR
// if btype = b_barracks then
15814: LD_VAR 0 11
15818: PUSH
15819: LD_INT 5
15821: EQUAL
15822: IFFALSE 15832
// btype := b_armoury ;
15824: LD_ADDR_VAR 0 11
15828: PUSH
15829: LD_INT 4
15831: ST_TO_ADDR
// if btype = b_factory then
15832: LD_VAR 0 11
15836: PUSH
15837: LD_INT 3
15839: EQUAL
15840: IFFALSE 15850
// btype := b_workshop ;
15842: LD_ADDR_VAR 0 11
15846: PUSH
15847: LD_INT 2
15849: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15850: LD_VAR 0 11
15854: PUSH
15855: LD_INT 8
15857: PUSH
15858: LD_INT 7
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: IN
15865: IFFALSE 15875
// btype := b_lab ;
15867: LD_ADDR_VAR 0 11
15871: PUSH
15872: LD_INT 6
15874: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15875: LD_ADDR_EXP 35
15879: PUSH
15880: LD_EXP 35
15884: PPUSH
15885: LD_EXP 35
15889: PUSH
15890: LD_INT 1
15892: PLUS
15893: PPUSH
15894: LD_VAR 0 11
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 250
15908: PUSH
15909: LD_VAR 0 1
15913: PPUSH
15914: CALL_OW 251
15918: PUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 254
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 1
15939: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 247
15949: PUSH
15950: LD_INT 2
15952: EQUAL
15953: IFFALSE 16079
// begin chassis := GetChassis ( un ) ;
15955: LD_ADDR_VAR 0 5
15959: PUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 265
15969: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15970: LD_ADDR_VAR 0 6
15974: PUSH
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 262
15984: ST_TO_ADDR
// control := GetControl ( un ) ;
15985: LD_ADDR_VAR 0 7
15989: PUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 263
15999: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16000: LD_ADDR_VAR 0 8
16004: PUSH
16005: LD_VAR 0 1
16009: PPUSH
16010: CALL_OW 264
16014: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16015: LD_ADDR_VAR 0 9
16019: PUSH
16020: LD_VAR 0 10
16024: PPUSH
16025: LD_VAR 0 5
16029: PPUSH
16030: LD_VAR 0 6
16034: PPUSH
16035: LD_VAR 0 7
16039: PPUSH
16040: LD_VAR 0 8
16044: PPUSH
16045: CALL 29422 0 5
16049: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16050: LD_ADDR_EXP 34
16054: PUSH
16055: LD_EXP 34
16059: PPUSH
16060: LD_EXP 34
16064: PUSH
16065: LD_INT 1
16067: PLUS
16068: PPUSH
16069: LD_VAR 0 9
16073: PPUSH
16074: CALL_OW 1
16078: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16079: LD_VAR 0 3
16083: PUSH
16084: LD_EXP 3
16088: PUSH
16089: LD_INT 2
16091: ARRAY
16092: EQUAL
16093: IFFALSE 16649
// begin if un in arForce then
16095: LD_VAR 0 1
16099: PUSH
16100: LD_EXP 52
16104: IN
16105: IFFALSE 16123
// arForce := arForce diff un ;
16107: LD_ADDR_EXP 52
16111: PUSH
16112: LD_EXP 52
16116: PUSH
16117: LD_VAR 0 1
16121: DIFF
16122: ST_TO_ADDR
// if un in arAttackersVeh then
16123: LD_VAR 0 1
16127: PUSH
16128: LD_EXP 55
16132: IN
16133: IFFALSE 16151
// arAttackersVeh := arAttackersVeh diff un ;
16135: LD_ADDR_EXP 55
16139: PUSH
16140: LD_EXP 55
16144: PUSH
16145: LD_VAR 0 1
16149: DIFF
16150: ST_TO_ADDR
// if un in arAttackersInf then
16151: LD_VAR 0 1
16155: PUSH
16156: LD_EXP 54
16160: IN
16161: IFFALSE 16179
// arAttackersInf := arAttackersInf diff un ;
16163: LD_ADDR_EXP 54
16167: PUSH
16168: LD_EXP 54
16172: PUSH
16173: LD_VAR 0 1
16177: DIFF
16178: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 257
16188: PUSH
16189: LD_INT 3
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 110
16202: PUSH
16203: LD_INT 999
16205: LESS
16206: AND
16207: PUSH
16208: LD_EXP 49
16212: AND
16213: IFFALSE 16354
// begin if not IsOk ( arDep ) then
16215: LD_INT 32
16217: PPUSH
16218: CALL_OW 302
16222: NOT
16223: IFFALSE 16227
// exit ;
16225: GO 16721
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16227: LD_ADDR_EXP 49
16231: PUSH
16232: LD_EXP 49
16236: PPUSH
16237: CALL 66056 0 1
16241: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16242: LD_ADDR_OWVAR 20
16246: PUSH
16247: LD_EXP 3
16251: PUSH
16252: LD_INT 2
16254: ARRAY
16255: ST_TO_ADDR
// uc_nation := nation_arabian ;
16256: LD_ADDR_OWVAR 21
16260: PUSH
16261: LD_INT 2
16263: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16264: LD_INT 0
16266: PPUSH
16267: LD_INT 1
16269: PUSH
16270: LD_INT 2
16272: PUSH
16273: LD_INT 3
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: PUSH
16281: LD_OWVAR 67
16285: ARRAY
16286: PPUSH
16287: CALL_OW 383
// un := CreateHuman ;
16291: LD_ADDR_VAR 0 1
16295: PUSH
16296: CALL_OW 44
16300: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16301: LD_VAR 0 1
16305: PPUSH
16306: LD_INT 178
16308: PPUSH
16309: LD_INT 2
16311: PPUSH
16312: LD_INT 0
16314: PPUSH
16315: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16319: LD_VAR 0 1
16323: PPUSH
16324: LD_INT 204
16326: PPUSH
16327: LD_INT 35
16329: PPUSH
16330: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16334: LD_ADDR_EXP 52
16338: PUSH
16339: LD_EXP 52
16343: PPUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL 64673 0 2
16353: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 247
16363: PUSH
16364: LD_INT 3
16366: EQUAL
16367: IFFALSE 16510
// begin btype := GetBType ( un ) ;
16369: LD_ADDR_VAR 0 11
16373: PUSH
16374: LD_VAR 0 1
16378: PPUSH
16379: CALL_OW 266
16383: ST_TO_ADDR
// if btype = b_barracks then
16384: LD_VAR 0 11
16388: PUSH
16389: LD_INT 5
16391: EQUAL
16392: IFFALSE 16402
// btype := b_armoury ;
16394: LD_ADDR_VAR 0 11
16398: PUSH
16399: LD_INT 4
16401: ST_TO_ADDR
// if btype = b_factory then
16402: LD_VAR 0 11
16406: PUSH
16407: LD_INT 3
16409: EQUAL
16410: IFFALSE 16420
// btype := b_workshop ;
16412: LD_ADDR_VAR 0 11
16416: PUSH
16417: LD_INT 2
16419: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16420: LD_VAR 0 11
16424: PUSH
16425: LD_INT 8
16427: PUSH
16428: LD_INT 7
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: IN
16435: IFFALSE 16445
// btype := b_lab ;
16437: LD_ADDR_VAR 0 11
16441: PUSH
16442: LD_INT 6
16444: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16445: LD_ADDR_EXP 45
16449: PUSH
16450: LD_EXP 45
16454: PPUSH
16455: LD_EXP 45
16459: PUSH
16460: LD_INT 1
16462: PLUS
16463: PPUSH
16464: LD_VAR 0 11
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 250
16478: PUSH
16479: LD_VAR 0 1
16483: PPUSH
16484: CALL_OW 251
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 254
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 1
16509: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 247
16519: PUSH
16520: LD_INT 2
16522: EQUAL
16523: IFFALSE 16649
// begin chassis := GetChassis ( un ) ;
16525: LD_ADDR_VAR 0 5
16529: PUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 265
16539: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16540: LD_ADDR_VAR 0 6
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 262
16554: ST_TO_ADDR
// control := GetControl ( un ) ;
16555: LD_ADDR_VAR 0 7
16559: PUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 263
16569: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16570: LD_ADDR_VAR 0 8
16574: PUSH
16575: LD_VAR 0 1
16579: PPUSH
16580: CALL_OW 264
16584: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16585: LD_ADDR_VAR 0 9
16589: PUSH
16590: LD_VAR 0 10
16594: PPUSH
16595: LD_VAR 0 5
16599: PPUSH
16600: LD_VAR 0 6
16604: PPUSH
16605: LD_VAR 0 7
16609: PPUSH
16610: LD_VAR 0 8
16614: PPUSH
16615: CALL 29422 0 5
16619: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16620: LD_ADDR_EXP 44
16624: PUSH
16625: LD_EXP 44
16629: PPUSH
16630: LD_EXP 44
16634: PUSH
16635: LD_INT 1
16637: PLUS
16638: PPUSH
16639: LD_VAR 0 9
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
16649: LD_EXP 24
16653: PUSH
16654: LD_EXP 16
16658: AND
16659: IFFALSE 16721
// if un in multi_commanders then
16661: LD_VAR 0 1
16665: PUSH
16666: LD_EXP 24
16670: IN
16671: IFFALSE 16721
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16673: LD_ADDR_EXP 25
16677: PUSH
16678: LD_EXP 25
16682: PPUSH
16683: LD_VAR 0 3
16687: PPUSH
16688: LD_INT 1
16690: PPUSH
16691: CALL_OW 1
16695: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16696: LD_ADDR_EXP 24
16700: PUSH
16701: LD_EXP 24
16705: PUSH
16706: LD_VAR 0 1
16710: DIFF
16711: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16712: LD_VAR 0 3
16716: PPUSH
16717: CALL 5086 0 1
// end ; end ;
16721: PPOPN 11
16723: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
// begin side := GetSide ( building ) ;
16730: LD_ADDR_VAR 0 4
16734: PUSH
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 255
16744: ST_TO_ADDR
// if multi_sides [ side ] then
16745: LD_EXP 7
16749: PUSH
16750: LD_VAR 0 4
16754: ARRAY
16755: IFFALSE 16776
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
16757: LD_VAR 0 4
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 266
16771: PPUSH
16772: CALL 5656 0 2
// if side = botSides [ 1 ] then
16776: LD_VAR 0 4
16780: PUSH
16781: LD_EXP 3
16785: PUSH
16786: LD_INT 1
16788: ARRAY
16789: EQUAL
16790: IFFALSE 16874
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16792: LD_ADDR_EXP 35
16796: PUSH
16797: LD_EXP 35
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 3
16809: ST_TO_ADDR
// btype := GetBType ( building ) ;
16810: LD_ADDR_VAR 0 5
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 266
16824: ST_TO_ADDR
// case btype of b_workshop :
16825: LD_VAR 0 5
16829: PUSH
16830: LD_INT 2
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 16850
16838: POP
// ComUpgrade ( building ) ; b_lab :
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 146
16848: GO 16874
16850: LD_INT 6
16852: DOUBLE
16853: EQUAL
16854: IFTRUE 16858
16856: GO 16873
16858: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_INT 10
16866: PPUSH
16867: CALL_OW 207
// end ; end ;
16871: GO 16874
16873: POP
// end ; if side = botSides [ 2 ] then
16874: LD_VAR 0 4
16878: PUSH
16879: LD_EXP 3
16883: PUSH
16884: LD_INT 2
16886: ARRAY
16887: EQUAL
16888: IFFALSE 16984
// begin arBuildings := Delete ( arBuildings , 1 ) ;
16890: LD_ADDR_EXP 45
16894: PUSH
16895: LD_EXP 45
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 3
16907: ST_TO_ADDR
// btype := GetBType ( building ) ;
16908: LD_ADDR_VAR 0 5
16912: PUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 266
16922: ST_TO_ADDR
// case btype of b_workshop :
16923: LD_VAR 0 5
16927: PUSH
16928: LD_INT 2
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 16948
16936: POP
// ComUpgrade ( building ) ; b_lab :
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 146
16946: GO 16984
16948: LD_INT 6
16950: DOUBLE
16951: EQUAL
16952: IFTRUE 16956
16954: GO 16983
16956: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 10
16964: PPUSH
16965: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: LD_INT 15
16976: PPUSH
16977: CALL_OW 207
// end ; end ;
16981: GO 16984
16983: POP
// end ; end ;
16984: PPOPN 5
16986: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
16987: LD_VAR 0 2
16991: PPUSH
16992: CALL_OW 255
16996: PUSH
16997: LD_EXP 3
17001: IN
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17170
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17007: LD_VAR 0 2
17011: PUSH
17012: LD_EXP 53
17016: IN
17017: PUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 266
17027: PUSH
17028: LD_INT 31
17030: EQUAL
17031: AND
17032: IFFALSE 17056
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17034: LD_VAR 0 2
17038: PPUSH
17039: LD_INT 215
17041: PPUSH
17042: LD_INT 102
17044: PPUSH
17045: CALL_OW 428
17049: PPUSH
17050: CALL_OW 120
// exit ;
17054: GO 17170
// end ; if HexInfo ( 44 , 78 ) then
17056: LD_INT 44
17058: PPUSH
17059: LD_INT 78
17061: PPUSH
17062: CALL_OW 428
17066: IFFALSE 17105
// begin ComMoveXY ( unit , 26 , 40 ) ;
17068: LD_VAR 0 2
17072: PPUSH
17073: LD_INT 26
17075: PPUSH
17076: LD_INT 40
17078: PPUSH
17079: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17083: LD_ADDR_EXP 40
17087: PUSH
17088: LD_EXP 40
17092: PPUSH
17093: LD_VAR 0 2
17097: PPUSH
17098: CALL 64673 0 2
17102: ST_TO_ADDR
// exit ;
17103: GO 17170
// end ; if GetX ( building ) > 71 then
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 250
17114: PUSH
17115: LD_INT 71
17117: GREATER
17118: IFFALSE 17170
// begin ComMoveXY ( unit , 69 , 39 ) ;
17120: LD_VAR 0 2
17124: PPUSH
17125: LD_INT 69
17127: PPUSH
17128: LD_INT 39
17130: PPUSH
17131: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_INT 26
17142: PPUSH
17143: LD_INT 40
17145: PPUSH
17146: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17150: LD_ADDR_EXP 40
17154: PUSH
17155: LD_EXP 40
17159: PPUSH
17160: LD_VAR 0 2
17164: PPUSH
17165: CALL 64673 0 2
17169: ST_TO_ADDR
// end ; end ;
17170: PPOPN 2
17172: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17173: LD_INT 0
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17181: LD_VAR 0 1
17185: PPUSH
17186: LD_VAR 0 2
17190: PPUSH
17191: CALL 21736 0 2
// side := GetSide ( vehicle ) ;
17195: LD_ADDR_VAR 0 4
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 255
17209: ST_TO_ADDR
// if multi_sides [ side ] then
17210: LD_EXP 7
17214: PUSH
17215: LD_VAR 0 4
17219: ARRAY
17220: IFFALSE 17231
// MultiplayerEvent_Produced ( side ) ;
17222: LD_VAR 0 4
17226: PPUSH
17227: CALL 5568 0 1
// if side = botSides [ 1 ] then
17231: LD_VAR 0 4
17235: PUSH
17236: LD_EXP 3
17240: PUSH
17241: LD_INT 1
17243: ARRAY
17244: EQUAL
17245: IFFALSE 17381
// begin driver := IsDrivenBy ( vehicle ) ;
17247: LD_ADDR_VAR 0 8
17251: PUSH
17252: LD_VAR 0 1
17256: PPUSH
17257: CALL_OW 311
17261: ST_TO_ADDR
// if driver then
17262: LD_VAR 0 8
17266: IFFALSE 17300
// begin SetTag ( driver , tMech ) ;
17268: LD_VAR 0 8
17272: PPUSH
17273: LD_INT 7
17275: PPUSH
17276: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17280: LD_ADDR_EXP 38
17284: PUSH
17285: LD_EXP 38
17289: PPUSH
17290: LD_VAR 0 8
17294: PPUSH
17295: CALL 64673 0 2
17299: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17300: LD_EXP 39
17304: PUSH
17305: LD_EXP 36
17309: PPUSH
17310: CALL 29064 0 1
17314: GREATER
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 266
17325: PUSH
17326: LD_INT 12
17328: PUSH
17329: LD_INT 13
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: IN
17336: OR
17337: IFFALSE 17361
// amVehicles := Join ( amVehicles , vehicle ) else
17339: LD_ADDR_EXP 36
17343: PUSH
17344: LD_EXP 36
17348: PPUSH
17349: LD_VAR 0 1
17353: PPUSH
17354: CALL 64673 0 2
17358: ST_TO_ADDR
17359: GO 17381
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17361: LD_ADDR_EXP 37
17365: PUSH
17366: LD_EXP 37
17370: PPUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: CALL 64673 0 2
17380: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17381: LD_VAR 0 4
17385: PUSH
17386: LD_EXP 3
17390: PUSH
17391: LD_INT 2
17393: ARRAY
17394: EQUAL
17395: IFFALSE 17531
// begin driver := IsDrivenBy ( vehicle ) ;
17397: LD_ADDR_VAR 0 8
17401: PUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: CALL_OW 311
17411: ST_TO_ADDR
// if driver then
17412: LD_VAR 0 8
17416: IFFALSE 17450
// begin SetTag ( driver , tMech ) ;
17418: LD_VAR 0 8
17422: PPUSH
17423: LD_INT 7
17425: PPUSH
17426: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17430: LD_ADDR_EXP 48
17434: PUSH
17435: LD_EXP 48
17439: PPUSH
17440: LD_VAR 0 8
17444: PPUSH
17445: CALL 64673 0 2
17449: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17450: LD_EXP 50
17454: PUSH
17455: LD_EXP 46
17459: PPUSH
17460: CALL 29064 0 1
17464: GREATER
17465: PUSH
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 266
17475: PUSH
17476: LD_INT 32
17478: PUSH
17479: LD_INT 88
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: IN
17486: OR
17487: IFFALSE 17511
// arVehicles := Join ( arVehicles , vehicle ) else
17489: LD_ADDR_EXP 46
17493: PUSH
17494: LD_EXP 46
17498: PPUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL 64673 0 2
17508: ST_TO_ADDR
17509: GO 17531
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17511: LD_ADDR_EXP 47
17515: PUSH
17516: LD_EXP 47
17520: PPUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL 64673 0 2
17530: ST_TO_ADDR
// end ; end ;
17531: PPOPN 8
17533: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 110
17543: PUSH
17544: LD_INT 7
17546: EQUAL
17547: IFFALSE 17561
// SetTag ( driver , 0 ) ;
17549: LD_VAR 0 1
17553: PPUSH
17554: LD_INT 0
17556: PPUSH
17557: CALL_OW 109
// end ;
17561: PPOPN 4
17563: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17564: LD_VAR 0 2
17568: PPUSH
17569: CALL_OW 255
17573: PUSH
17574: LD_EXP 3
17578: PUSH
17579: LD_INT 1
17581: ARRAY
17582: EQUAL
17583: IFFALSE 17613
// if tech in amTech then
17585: LD_VAR 0 1
17589: PUSH
17590: LD_EXP 33
17594: IN
17595: IFFALSE 17613
// amTech := amTech diff tech ;
17597: LD_ADDR_EXP 33
17601: PUSH
17602: LD_EXP 33
17606: PUSH
17607: LD_VAR 0 1
17611: DIFF
17612: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17613: LD_VAR 0 2
17617: PPUSH
17618: CALL_OW 255
17622: PUSH
17623: LD_EXP 3
17627: PUSH
17628: LD_INT 2
17630: ARRAY
17631: EQUAL
17632: IFFALSE 17662
// if tech in arTech then
17634: LD_VAR 0 1
17638: PUSH
17639: LD_EXP 43
17643: IN
17644: IFFALSE 17662
// arTech := arTech diff tech ;
17646: LD_ADDR_EXP 43
17650: PUSH
17651: LD_EXP 43
17655: PUSH
17656: LD_VAR 0 1
17660: DIFF
17661: ST_TO_ADDR
// end ; end_of_file
17662: PPOPN 2
17664: END
// every 10 10$00 trigger IsOk ( amDep ) do
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 302
17672: IFFALSE 17685
17674: GO 17676
17676: DISABLE
// activeAmerAttacks := true ;
17677: LD_ADDR_EXP 5
17681: PUSH
17682: LD_INT 1
17684: ST_TO_ADDR
17685: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17686: LD_INT 32
17688: PPUSH
17689: CALL_OW 302
17693: PUSH
17694: LD_INT 32
17696: PPUSH
17697: CALL_OW 255
17701: PUSH
17702: LD_EXP 3
17706: PUSH
17707: LD_INT 2
17709: ARRAY
17710: EQUAL
17711: AND
17712: IFFALSE 17749
17714: GO 17716
17716: DISABLE
// begin activeArabAttacks := true ;
17717: LD_ADDR_EXP 4
17721: PUSH
17722: LD_INT 1
17724: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
17725: LD_INT 73500
17727: PUSH
17728: LD_INT 2100
17730: PUSH
17731: LD_OWVAR 67
17735: MUL
17736: MINUS
17737: PPUSH
17738: CALL_OW 67
// ArabAttack ( 0 ) ;
17742: LD_INT 0
17744: PPUSH
17745: CALL 17806 0 1
// end ;
17749: END
// every 19 19$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17750: LD_INT 1
17752: PPUSH
17753: CALL_OW 302
17757: PUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 255
17765: PUSH
17766: LD_EXP 3
17770: PUSH
17771: LD_INT 1
17773: ARRAY
17774: EQUAL
17775: AND
17776: IFFALSE 17805
17778: GO 17780
17780: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
17781: LD_INT 10500
17783: PUSH
17784: LD_INT 2100
17786: PUSH
17787: LD_OWVAR 67
17791: MUL
17792: MINUS
17793: PPUSH
17794: CALL_OW 67
// AmericanAttack ( 0 ) ;
17798: LD_INT 0
17800: PPUSH
17801: CALL 19827 0 1
// end ;
17805: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
// uc_side := botSides [ 2 ] ;
17813: LD_ADDR_OWVAR 20
17817: PUSH
17818: LD_EXP 3
17822: PUSH
17823: LD_INT 2
17825: ARRAY
17826: ST_TO_ADDR
// uc_nation := nation_arabian ;
17827: LD_ADDR_OWVAR 21
17831: PUSH
17832: LD_INT 2
17834: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17835: LD_ADDR_VAR 0 4
17839: PUSH
17840: LD_INT 3
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: LD_INT 5
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: PUSH
17854: LD_OWVAR 67
17858: ARRAY
17859: ST_TO_ADDR
// arAttackersInf := [ ] ;
17860: LD_ADDR_EXP 54
17864: PUSH
17865: EMPTY
17866: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17867: LD_ADDR_EXP 55
17871: PUSH
17872: EMPTY
17873: ST_TO_ADDR
// InitHC_All ( ) ;
17874: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_INT 3
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: LD_INT 5
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: LD_OWVAR 67
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 1
17912: PLUS
17913: PUSH
17914: FOR_TO
17915: IFFALSE 18017
// begin PrepareSoldier ( false , skill ) ;
17917: LD_INT 0
17919: PPUSH
17920: LD_VAR 0 4
17924: PPUSH
17925: CALL_OW 381
// un := CreateHuman ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: CALL_OW 44
17938: ST_TO_ADDR
// if i mod 2 = 0 then
17939: LD_VAR 0 3
17943: PUSH
17944: LD_INT 2
17946: MOD
17947: PUSH
17948: LD_INT 0
17950: EQUAL
17951: IFFALSE 17965
// SetClass ( un , class_mortar ) ;
17953: LD_VAR 0 5
17957: PPUSH
17958: LD_INT 8
17960: PPUSH
17961: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
17965: LD_VAR 0 5
17969: PPUSH
17970: LD_INT 25
17972: PPUSH
17973: LD_INT 0
17975: PPUSH
17976: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
17980: LD_ADDR_EXP 54
17984: PUSH
17985: LD_EXP 54
17989: PPUSH
17990: LD_VAR 0 5
17994: PPUSH
17995: CALL 64673 0 2
17999: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18000: LD_VAR 0 5
18004: PPUSH
18005: LD_INT 230
18007: PPUSH
18008: LD_INT 143
18010: PPUSH
18011: CALL_OW 114
// end ;
18015: GO 17914
18017: POP
18018: POP
// for i := 1 to 3 + v do
18019: LD_ADDR_VAR 0 3
18023: PUSH
18024: DOUBLE
18025: LD_INT 1
18027: DEC
18028: ST_TO_ADDR
18029: LD_INT 3
18031: PUSH
18032: LD_VAR 0 1
18036: PLUS
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18203
// begin PrepareMechanic ( false , skill ) ;
18041: LD_INT 0
18043: PPUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: CALL_OW 383
// un := CreateHuman ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: CALL_OW 44
18062: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18063: LD_VAR 0 5
18067: PPUSH
18068: LD_INT 999
18070: PPUSH
18071: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18075: LD_INT 14
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_INT 27
18086: PUSH
18087: LD_INT 25
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 2
18101: MOD
18102: PUSH
18103: LD_INT 1
18105: PLUS
18106: ARRAY
18107: PPUSH
18108: LD_INT 80
18110: PPUSH
18111: CALL 31802 0 5
// veh := CreateVehicle ;
18115: LD_ADDR_VAR 0 6
18119: PUSH
18120: CALL_OW 45
18124: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18125: LD_VAR 0 6
18129: PPUSH
18130: LD_INT 5
18132: PPUSH
18133: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18137: LD_VAR 0 6
18141: PPUSH
18142: LD_INT 26
18144: PPUSH
18145: LD_INT 0
18147: PPUSH
18148: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18152: LD_VAR 0 5
18156: PPUSH
18157: LD_VAR 0 6
18161: PPUSH
18162: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18166: LD_VAR 0 5
18170: PPUSH
18171: LD_INT 236
18173: PPUSH
18174: LD_INT 127
18176: PPUSH
18177: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18181: LD_ADDR_EXP 55
18185: PUSH
18186: LD_EXP 55
18190: PPUSH
18191: LD_VAR 0 6
18195: PPUSH
18196: CALL 64673 0 2
18200: ST_TO_ADDR
// end ;
18201: GO 18038
18203: POP
18204: POP
// wait ( 0 0$2 ) ;
18205: LD_INT 70
18207: PPUSH
18208: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: DOUBLE
18218: LD_INT 1
18220: DEC
18221: ST_TO_ADDR
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 3
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: LD_OWVAR 67
18240: ARRAY
18241: PUSH
18242: FOR_TO
18243: IFFALSE 18386
// begin PrepareMechanic ( false , skill ) ;
18245: LD_INT 0
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: CALL_OW 383
// un := CreateHuman ;
18257: LD_ADDR_VAR 0 5
18261: PUSH
18262: CALL_OW 44
18266: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18267: LD_VAR 0 5
18271: PPUSH
18272: LD_INT 999
18274: PPUSH
18275: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18279: LD_INT 14
18281: PPUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: LD_INT 26
18290: PPUSH
18291: LD_INT 80
18293: PPUSH
18294: CALL 31802 0 5
// veh := CreateVehicle ;
18298: LD_ADDR_VAR 0 6
18302: PUSH
18303: CALL_OW 45
18307: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18308: LD_VAR 0 6
18312: PPUSH
18313: LD_INT 5
18315: PPUSH
18316: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18320: LD_VAR 0 6
18324: PPUSH
18325: LD_INT 26
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18335: LD_VAR 0 5
18339: PPUSH
18340: LD_VAR 0 6
18344: PPUSH
18345: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18349: LD_VAR 0 5
18353: PPUSH
18354: LD_INT 236
18356: PPUSH
18357: LD_INT 127
18359: PPUSH
18360: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18364: LD_ADDR_EXP 55
18368: PUSH
18369: LD_EXP 55
18373: PPUSH
18374: LD_VAR 0 6
18378: PPUSH
18379: CALL 64673 0 2
18383: ST_TO_ADDR
// end ;
18384: GO 18242
18386: POP
18387: POP
// wait ( 0 0$2 ) ;
18388: LD_INT 70
18390: PPUSH
18391: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18395: LD_ADDR_VAR 0 3
18399: PUSH
18400: DOUBLE
18401: LD_INT 1
18403: DEC
18404: ST_TO_ADDR
18405: LD_INT 1
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PUSH
18419: LD_OWVAR 67
18423: ARRAY
18424: PUSH
18425: FOR_TO
18426: IFFALSE 18600
// begin PrepareMechanic ( false , skill ) ;
18428: LD_INT 0
18430: PPUSH
18431: LD_VAR 0 4
18435: PPUSH
18436: CALL_OW 383
// un := CreateHuman ;
18440: LD_ADDR_VAR 0 5
18444: PUSH
18445: CALL_OW 44
18449: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18450: LD_VAR 0 5
18454: PPUSH
18455: LD_INT 999
18457: PPUSH
18458: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18462: LD_INT 14
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: LD_INT 28
18473: PPUSH
18474: LD_INT 80
18476: PPUSH
18477: CALL 31802 0 5
// veh := CreateVehicle ;
18481: LD_ADDR_VAR 0 6
18485: PUSH
18486: CALL_OW 45
18490: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18491: LD_VAR 0 6
18495: PPUSH
18496: LD_INT 4
18498: PPUSH
18499: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18503: LD_VAR 0 6
18507: PPUSH
18508: LD_INT 26
18510: PPUSH
18511: LD_INT 0
18513: PPUSH
18514: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18518: LD_VAR 0 5
18522: PPUSH
18523: LD_VAR 0 6
18527: PPUSH
18528: CALL_OW 52
// if i mod 2 = 0 then
18532: LD_VAR 0 3
18536: PUSH
18537: LD_INT 2
18539: MOD
18540: PUSH
18541: LD_INT 0
18543: EQUAL
18544: IFFALSE 18563
// ComMoveXY ( un , 136 , 61 ) else
18546: LD_VAR 0 5
18550: PPUSH
18551: LD_INT 136
18553: PPUSH
18554: LD_INT 61
18556: PPUSH
18557: CALL_OW 111
18561: GO 18578
// ComMoveXY ( un , 137 , 41 ) ;
18563: LD_VAR 0 5
18567: PPUSH
18568: LD_INT 137
18570: PPUSH
18571: LD_INT 41
18573: PPUSH
18574: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18578: LD_ADDR_EXP 55
18582: PUSH
18583: LD_EXP 55
18587: PPUSH
18588: LD_VAR 0 6
18592: PPUSH
18593: CALL 64673 0 2
18597: ST_TO_ADDR
// end ;
18598: GO 18425
18600: POP
18601: POP
// end ;
18602: LD_VAR 0 2
18606: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18607: LD_EXP 54
18611: IFFALSE 18982
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
// begin enable ;
18622: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18623: LD_ADDR_VAR 0 2
18627: PUSH
18628: LD_EXP 54
18632: PPUSH
18633: LD_INT 50
18635: PUSH
18636: EMPTY
18637: LIST
18638: PPUSH
18639: CALL_OW 72
18643: ST_TO_ADDR
// arAttackersInf := [ ] ;
18644: LD_ADDR_EXP 54
18648: PUSH
18649: EMPTY
18650: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18651: LD_VAR 0 2
18655: PPUSH
18656: LD_INT 173
18658: PPUSH
18659: LD_INT 139
18661: PPUSH
18662: CALL_OW 111
// wait ( 0 0$10 ) ;
18666: LD_INT 350
18668: PPUSH
18669: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18673: LD_ADDR_VAR 0 1
18677: PUSH
18678: LD_VAR 0 2
18682: PPUSH
18683: LD_INT 25
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 72
18697: PUSH
18698: FOR_IN
18699: IFFALSE 18830
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 81
18708: PUSH
18709: LD_EXP 3
18713: PUSH
18714: LD_INT 2
18716: ARRAY
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: LD_INT 120
18727: PUSH
18728: LD_INT 11
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 21
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL_OW 69
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 74
18786: ST_TO_ADDR
// if not nearest then
18787: LD_VAR 0 3
18791: NOT
18792: IFFALSE 18796
// break ;
18794: GO 18830
// SetTag ( nearest , tMined ) ;
18796: LD_VAR 0 3
18800: PPUSH
18801: LD_INT 11
18803: PPUSH
18804: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_INT 0
18815: PPUSH
18816: LD_INT 0
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 192
// end ;
18828: GO 18698
18830: POP
18831: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_VAR 0 2
18841: PPUSH
18842: LD_INT 50
18844: PUSH
18845: EMPTY
18846: LIST
18847: PPUSH
18848: CALL_OW 72
18852: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18853: LD_VAR 0 2
18857: PPUSH
18858: LD_INT 155
18860: PPUSH
18861: LD_INT 119
18863: PPUSH
18864: CALL_OW 171
// repeat wait ( 0 0$3 ) ;
18868: LD_INT 105
18870: PPUSH
18871: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18875: LD_ADDR_VAR 0 2
18879: PUSH
18880: LD_VAR 0 2
18884: PPUSH
18885: LD_INT 50
18887: PUSH
18888: EMPTY
18889: LIST
18890: PPUSH
18891: CALL_OW 72
18895: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18896: LD_ADDR_VAR 0 4
18900: PUSH
18901: LD_INT 81
18903: PUSH
18904: LD_EXP 3
18908: PUSH
18909: LD_INT 2
18911: ARRAY
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 69
18921: ST_TO_ADDR
// for i in tmp do
18922: LD_ADDR_VAR 0 1
18926: PUSH
18927: LD_VAR 0 2
18931: PUSH
18932: FOR_IN
18933: IFFALSE 18973
// if not HasTask ( i ) then
18935: LD_VAR 0 1
18939: PPUSH
18940: CALL_OW 314
18944: NOT
18945: IFFALSE 18971
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) until not tmp ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_VAR 0 4
18956: PPUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 74
18966: PPUSH
18967: CALL_OW 115
18971: GO 18932
18973: POP
18974: POP
18975: LD_VAR 0 2
18979: NOT
18980: IFFALSE 18868
// end ;
18982: PPOPN 4
18984: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
18985: LD_EXP 55
18989: IFFALSE 19101
18991: GO 18993
18993: DISABLE
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
// begin enable ;
18998: ENABLE
// tmp := arAttackersVeh ;
18999: LD_ADDR_VAR 0 2
19003: PUSH
19004: LD_EXP 55
19008: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19009: LD_ADDR_EXP 55
19013: PUSH
19014: EMPTY
19015: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19016: LD_INT 70
19018: PPUSH
19019: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: LD_VAR 0 2
19032: PPUSH
19033: LD_INT 50
19035: PUSH
19036: EMPTY
19037: LIST
19038: PPUSH
19039: CALL_OW 72
19043: ST_TO_ADDR
// for i in tmp do
19044: LD_ADDR_VAR 0 1
19048: PUSH
19049: LD_VAR 0 2
19053: PUSH
19054: FOR_IN
19055: IFFALSE 19092
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 207
19064: PUSH
19065: LD_INT 125
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 185
19074: PUSH
19075: LD_INT 114
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL 67277 0 2
19090: GO 19054
19092: POP
19093: POP
19094: LD_VAR 0 2
19098: NOT
19099: IFFALSE 19016
// end ;
19101: PPOPN 2
19103: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19104: LD_EXP 47
19108: PUSH
19109: LD_EXP 4
19113: AND
19114: IFFALSE 19704
19116: GO 19118
19118: DISABLE
19119: LD_INT 0
19121: PPUSH
19122: PPUSH
19123: PPUSH
// begin enable ;
19124: ENABLE
// if not arVehiclesAtttackers then
19125: LD_EXP 47
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19704
// for i in arVehiclesAtttackers do
19134: LD_ADDR_VAR 0 1
19138: PUSH
19139: LD_EXP 47
19143: PUSH
19144: FOR_IN
19145: IFFALSE 19702
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 302
19156: NOT
19157: PUSH
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 255
19167: PUSH
19168: LD_EXP 3
19172: PUSH
19173: LD_INT 2
19175: ARRAY
19176: NONEQUAL
19177: OR
19178: IFFALSE 19198
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19180: LD_ADDR_EXP 47
19184: PUSH
19185: LD_EXP 47
19189: PUSH
19190: LD_VAR 0 1
19194: DIFF
19195: ST_TO_ADDR
// continue ;
19196: GO 19144
// end ; if GetTag ( i ) = 300 then
19198: LD_VAR 0 1
19202: PPUSH
19203: CALL_OW 110
19207: PUSH
19208: LD_INT 300
19210: EQUAL
19211: IFFALSE 19326
// begin if GetFuel ( i ) < 50 then
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 261
19222: PUSH
19223: LD_INT 50
19225: LESS
19226: IFFALSE 19285
// begin ComMoveXY ( i , 198 , 28 ) ;
19228: LD_VAR 0 1
19232: PPUSH
19233: LD_INT 198
19235: PPUSH
19236: LD_INT 28
19238: PPUSH
19239: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19243: LD_INT 35
19245: PPUSH
19246: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19250: LD_VAR 0 1
19254: PPUSH
19255: LD_INT 198
19257: PPUSH
19258: LD_INT 28
19260: PPUSH
19261: CALL_OW 297
19265: PUSH
19266: LD_INT 4
19268: LESS
19269: IFFALSE 19243
// SetFuel ( i , 100 ) ;
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 100
19278: PPUSH
19279: CALL_OW 240
// end else
19283: GO 19326
// if not IsInArea ( i , arParkingArea ) then
19285: LD_VAR 0 1
19289: PPUSH
19290: LD_INT 28
19292: PPUSH
19293: CALL_OW 308
19297: NOT
19298: IFFALSE 19314
// ComMoveToArea ( i , arParkingArea ) else
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_INT 28
19307: PPUSH
19308: CALL_OW 113
19312: GO 19326
// SetTag ( i , 301 ) ;
19314: LD_VAR 0 1
19318: PPUSH
19319: LD_INT 301
19321: PPUSH
19322: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 110
19335: PUSH
19336: LD_INT 301
19338: EQUAL
19339: IFFALSE 19481
// begin if GetLives ( i ) < 1000 then
19341: LD_VAR 0 1
19345: PPUSH
19346: CALL_OW 256
19350: PUSH
19351: LD_INT 1000
19353: LESS
19354: IFFALSE 19458
// begin if not IsDrivenBy ( i ) then
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 311
19365: NOT
19366: IFFALSE 19370
// continue ;
19368: GO 19144
// mech := IsDrivenBy ( i ) ;
19370: LD_ADDR_VAR 0 2
19374: PUSH
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 311
19384: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19385: LD_VAR 0 2
19389: PPUSH
19390: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19394: LD_VAR 0 2
19398: PPUSH
19399: LD_VAR 0 1
19403: PPUSH
19404: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19408: LD_INT 35
19410: PPUSH
19411: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 256
19424: PUSH
19425: LD_INT 1000
19427: EQUAL
19428: IFFALSE 19408
// SetLives ( mech , 1000 ) ;
19430: LD_VAR 0 2
19434: PPUSH
19435: LD_INT 1000
19437: PPUSH
19438: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19442: LD_VAR 0 2
19446: PPUSH
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 120
// end else
19456: GO 19481
// if IsDrivenBy ( i ) then
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 311
19467: IFFALSE 19481
// SetTag ( i , 0 ) ;
19469: LD_VAR 0 1
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 110
19490: PUSH
19491: LD_INT 300
19493: LESS
19494: IFFALSE 19700
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
19496: LD_ADDR_VAR 0 3
19500: PUSH
19501: LD_INT 5
19503: PPUSH
19504: LD_INT 81
19506: PUSH
19507: LD_EXP 3
19511: PUSH
19512: LD_INT 2
19514: ARRAY
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PPUSH
19520: CALL_OW 70
19524: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19525: LD_VAR 0 1
19529: PPUSH
19530: CALL_OW 256
19534: PUSH
19535: LD_INT 650
19537: LESS
19538: IFFALSE 19563
// begin ComStop ( i ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 141
// SetTag ( i , 300 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 300
19556: PPUSH
19557: CALL_OW 109
// continue ;
19561: GO 19144
// end ; if enemy then
19563: LD_VAR 0 3
19567: IFFALSE 19607
// begin if not HasTask ( i ) then
19569: LD_VAR 0 1
19573: PPUSH
19574: CALL_OW 314
19578: NOT
19579: IFFALSE 19605
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_VAR 0 3
19590: PPUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 74
19600: PPUSH
19601: CALL_OW 115
// end else
19605: GO 19700
// if arVehiclesAtttackers then
19607: LD_EXP 47
19611: IFFALSE 19700
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 81
19620: PUSH
19621: LD_EXP 3
19625: PUSH
19626: LD_INT 2
19628: ARRAY
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if enemy then
19639: LD_VAR 0 3
19643: IFFALSE 19700
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19645: LD_VAR 0 1
19649: PPUSH
19650: LD_INT 215
19652: PUSH
19653: LD_INT 88
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 197
19662: PUSH
19663: LD_INT 90
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 178
19672: PUSH
19673: LD_INT 90
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 169
19682: PUSH
19683: LD_INT 104
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PPUSH
19696: CALL 67277 0 2
// end ; end ; end ;
19700: GO 19144
19702: POP
19703: POP
// end ;
19704: PPOPN 3
19706: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19707: LD_INT 22
19709: PUSH
19710: LD_EXP 3
19714: PUSH
19715: LD_INT 2
19717: ARRAY
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 32
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PPUSH
19737: CALL_OW 69
19741: IFFALSE 19824
19743: GO 19745
19745: DISABLE
19746: LD_INT 0
19748: PPUSH
// begin enable ;
19749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_EXP 3
19762: PUSH
19763: LD_INT 2
19765: ARRAY
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 32
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: PUSH
19790: FOR_IN
19791: IFFALSE 19822
// if GetFuel ( i ) < 3 then
19793: LD_VAR 0 1
19797: PPUSH
19798: CALL_OW 261
19802: PUSH
19803: LD_INT 3
19805: LESS
19806: IFFALSE 19820
// SetFuel ( i , 3 ) ;
19808: LD_VAR 0 1
19812: PPUSH
19813: LD_INT 3
19815: PPUSH
19816: CALL_OW 240
19820: GO 19790
19822: POP
19823: POP
// end ;
19824: PPOPN 1
19826: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19827: LD_INT 0
19829: PPUSH
19830: PPUSH
19831: PPUSH
19832: PPUSH
19833: PPUSH
// uc_side := botSides [ 1 ] ;
19834: LD_ADDR_OWVAR 20
19838: PUSH
19839: LD_EXP 3
19843: PUSH
19844: LD_INT 1
19846: ARRAY
19847: ST_TO_ADDR
// uc_nation := nation_american ;
19848: LD_ADDR_OWVAR 21
19852: PUSH
19853: LD_INT 1
19855: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19856: LD_ADDR_VAR 0 4
19860: PUSH
19861: LD_INT 3
19863: PUSH
19864: LD_INT 4
19866: PUSH
19867: LD_INT 5
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: PUSH
19875: LD_OWVAR 67
19879: ARRAY
19880: ST_TO_ADDR
// amAttackersInf := [ ] ;
19881: LD_ADDR_EXP 56
19885: PUSH
19886: EMPTY
19887: ST_TO_ADDR
// amAttackersVeh := [ ] ;
19888: LD_ADDR_EXP 57
19892: PUSH
19893: EMPTY
19894: ST_TO_ADDR
// InitHC_All ( ) ;
19895: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
19899: LD_ADDR_VAR 0 3
19903: PUSH
19904: DOUBLE
19905: LD_INT 1
19907: DEC
19908: ST_TO_ADDR
19909: LD_INT 2
19911: PUSH
19912: LD_INT 3
19914: PUSH
19915: LD_INT 4
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: PUSH
19923: LD_OWVAR 67
19927: ARRAY
19928: PUSH
19929: LD_VAR 0 1
19933: PLUS
19934: PUSH
19935: FOR_TO
19936: IFFALSE 20012
// begin PrepareSoldier ( false , skill ) ;
19938: LD_INT 0
19940: PPUSH
19941: LD_VAR 0 4
19945: PPUSH
19946: CALL_OW 381
// un := CreateHuman ;
19950: LD_ADDR_VAR 0 5
19954: PUSH
19955: CALL_OW 44
19959: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
19960: LD_VAR 0 5
19964: PPUSH
19965: LD_INT 30
19967: PPUSH
19968: LD_INT 0
19970: PPUSH
19971: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
19975: LD_ADDR_EXP 56
19979: PUSH
19980: LD_EXP 56
19984: PPUSH
19985: LD_VAR 0 5
19989: PPUSH
19990: CALL 64673 0 2
19994: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
19995: LD_VAR 0 5
19999: PPUSH
20000: LD_INT 110
20002: PPUSH
20003: LD_INT 129
20005: PPUSH
20006: CALL_OW 114
// end ;
20010: GO 19935
20012: POP
20013: POP
// for i := 1 to 2 + v do
20014: LD_ADDR_VAR 0 3
20018: PUSH
20019: DOUBLE
20020: LD_INT 1
20022: DEC
20023: ST_TO_ADDR
20024: LD_INT 2
20026: PUSH
20027: LD_VAR 0 1
20031: PLUS
20032: PUSH
20033: FOR_TO
20034: IFFALSE 20202
// begin PrepareMechanic ( false , skill ) ;
20036: LD_INT 0
20038: PPUSH
20039: LD_VAR 0 4
20043: PPUSH
20044: CALL_OW 383
// un := CreateHuman ;
20048: LD_ADDR_VAR 0 5
20052: PUSH
20053: CALL_OW 44
20057: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20058: LD_VAR 0 5
20062: PPUSH
20063: LD_INT 999
20065: PPUSH
20066: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20070: LD_INT 3
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: LD_INT 3
20081: PUSH
20082: LD_INT 5
20084: PUSH
20085: LD_INT 4
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 3
20100: MOD
20101: PUSH
20102: LD_INT 1
20104: PLUS
20105: ARRAY
20106: PPUSH
20107: LD_INT 80
20109: PPUSH
20110: CALL 31802 0 5
// veh := CreateVehicle ;
20114: LD_ADDR_VAR 0 6
20118: PUSH
20119: CALL_OW 45
20123: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20124: LD_VAR 0 6
20128: PPUSH
20129: LD_INT 0
20131: PPUSH
20132: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20136: LD_VAR 0 6
20140: PPUSH
20141: LD_INT 31
20143: PPUSH
20144: LD_INT 0
20146: PPUSH
20147: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20151: LD_VAR 0 5
20155: PPUSH
20156: LD_VAR 0 6
20160: PPUSH
20161: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20165: LD_VAR 0 5
20169: PPUSH
20170: LD_INT 96
20172: PPUSH
20173: LD_INT 137
20175: PPUSH
20176: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20180: LD_ADDR_EXP 57
20184: PUSH
20185: LD_EXP 57
20189: PPUSH
20190: LD_VAR 0 6
20194: PPUSH
20195: CALL 64673 0 2
20199: ST_TO_ADDR
// end ;
20200: GO 20033
20202: POP
20203: POP
// end ;
20204: LD_VAR 0 2
20208: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20209: LD_EXP 57
20213: IFFALSE 20349
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
20221: PPUSH
// begin enable ;
20222: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_EXP 57
20232: PUSH
20233: LD_EXP 56
20237: UNION
20238: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20239: LD_ADDR_EXP 55
20243: PUSH
20244: EMPTY
20245: ST_TO_ADDR
// amAttackersInf := [ ] ;
20246: LD_ADDR_EXP 56
20250: PUSH
20251: EMPTY
20252: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20253: LD_INT 70
20255: PPUSH
20256: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: LD_VAR 0 2
20269: PPUSH
20270: LD_INT 50
20272: PUSH
20273: EMPTY
20274: LIST
20275: PPUSH
20276: CALL_OW 72
20280: ST_TO_ADDR
// for i in tmp do
20281: LD_ADDR_VAR 0 1
20285: PUSH
20286: LD_VAR 0 2
20290: PUSH
20291: FOR_IN
20292: IFFALSE 20340
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20294: LD_VAR 0 1
20298: PPUSH
20299: LD_INT 96
20301: PUSH
20302: LD_INT 145
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 99
20311: PUSH
20312: LD_INT 130
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 87
20321: PUSH
20322: LD_INT 103
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL 67277 0 2
20338: GO 20291
20340: POP
20341: POP
20342: LD_VAR 0 2
20346: NOT
20347: IFFALSE 20253
// end ;
20349: PPOPN 2
20351: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20352: LD_EXP 37
20356: PUSH
20357: LD_EXP 5
20361: AND
20362: IFFALSE 20941
20364: GO 20366
20366: DISABLE
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
20371: PPUSH
// begin enable ;
20372: ENABLE
// if not amVehiclesAtttackers then
20373: LD_EXP 37
20377: NOT
20378: IFFALSE 20382
// exit ;
20380: GO 20941
// for i in amVehiclesAtttackers do
20382: LD_ADDR_VAR 0 1
20386: PUSH
20387: LD_EXP 37
20391: PUSH
20392: FOR_IN
20393: IFFALSE 20939
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 302
20404: NOT
20405: PUSH
20406: LD_VAR 0 1
20410: PPUSH
20411: CALL_OW 255
20415: PUSH
20416: LD_EXP 3
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: NONEQUAL
20425: OR
20426: IFFALSE 20446
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20428: LD_ADDR_EXP 37
20432: PUSH
20433: LD_EXP 37
20437: PUSH
20438: LD_VAR 0 1
20442: DIFF
20443: ST_TO_ADDR
// continue ;
20444: GO 20392
// end ; if GetTag ( i ) = 300 then
20446: LD_VAR 0 1
20450: PPUSH
20451: CALL_OW 110
20455: PUSH
20456: LD_INT 300
20458: EQUAL
20459: IFFALSE 20574
// begin if GetFuel ( i ) < 50 then
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL_OW 261
20470: PUSH
20471: LD_INT 50
20473: LESS
20474: IFFALSE 20533
// begin ComMoveXY ( i , 24 , 36 ) ;
20476: LD_VAR 0 1
20480: PPUSH
20481: LD_INT 24
20483: PPUSH
20484: LD_INT 36
20486: PPUSH
20487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20491: LD_INT 35
20493: PPUSH
20494: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
20498: LD_VAR 0 1
20502: PPUSH
20503: LD_INT 24
20505: PPUSH
20506: LD_INT 36
20508: PPUSH
20509: CALL_OW 297
20513: PUSH
20514: LD_INT 4
20516: LESS
20517: IFFALSE 20491
// SetFuel ( i , 100 ) ;
20519: LD_VAR 0 1
20523: PPUSH
20524: LD_INT 100
20526: PPUSH
20527: CALL_OW 240
// end else
20531: GO 20574
// if not IsInArea ( i , amParkingArea ) then
20533: LD_VAR 0 1
20537: PPUSH
20538: LD_INT 27
20540: PPUSH
20541: CALL_OW 308
20545: NOT
20546: IFFALSE 20562
// ComMoveToArea ( i , amParkingArea ) else
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_INT 27
20555: PPUSH
20556: CALL_OW 113
20560: GO 20574
// SetTag ( i , 301 ) ;
20562: LD_VAR 0 1
20566: PPUSH
20567: LD_INT 301
20569: PPUSH
20570: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20574: LD_VAR 0 1
20578: PPUSH
20579: CALL_OW 110
20583: PUSH
20584: LD_INT 301
20586: EQUAL
20587: IFFALSE 20729
// begin if GetLives ( i ) < 1000 then
20589: LD_VAR 0 1
20593: PPUSH
20594: CALL_OW 256
20598: PUSH
20599: LD_INT 1000
20601: LESS
20602: IFFALSE 20706
// begin if not IsDrivenBy ( i ) then
20604: LD_VAR 0 1
20608: PPUSH
20609: CALL_OW 311
20613: NOT
20614: IFFALSE 20618
// continue ;
20616: GO 20392
// mech := IsDrivenBy ( i ) ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 311
20632: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20633: LD_VAR 0 2
20637: PPUSH
20638: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20642: LD_VAR 0 2
20646: PPUSH
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20656: LD_INT 35
20658: PPUSH
20659: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 256
20672: PUSH
20673: LD_INT 1000
20675: EQUAL
20676: IFFALSE 20656
// SetLives ( mech , 1000 ) ;
20678: LD_VAR 0 2
20682: PPUSH
20683: LD_INT 1000
20685: PPUSH
20686: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20690: LD_VAR 0 2
20694: PPUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 120
// end else
20704: GO 20729
// if IsDrivenBy ( i ) then
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 311
20715: IFFALSE 20729
// SetTag ( i , 0 ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: LD_INT 0
20724: PPUSH
20725: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 110
20738: PUSH
20739: LD_INT 300
20741: LESS
20742: IFFALSE 20937
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_INT 3
20751: PPUSH
20752: LD_INT 81
20754: PUSH
20755: LD_EXP 3
20759: PUSH
20760: LD_INT 1
20762: ARRAY
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PPUSH
20768: CALL_OW 70
20772: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL_OW 256
20782: PUSH
20783: LD_INT 650
20785: LESS
20786: IFFALSE 20811
// begin ComStop ( i ) ;
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 141
// SetTag ( i , 300 ) ;
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_INT 300
20804: PPUSH
20805: CALL_OW 109
// continue ;
20809: GO 20392
// end ; if enemy then
20811: LD_VAR 0 3
20815: IFFALSE 20855
// begin if not HasTask ( i ) then
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 314
20826: NOT
20827: IFFALSE 20853
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20829: LD_VAR 0 1
20833: PPUSH
20834: LD_VAR 0 3
20838: PPUSH
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 74
20848: PPUSH
20849: CALL_OW 115
// end else
20853: GO 20937
// if amVehiclesAtttackers then
20855: LD_EXP 37
20859: IFFALSE 20937
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_INT 81
20868: PUSH
20869: LD_EXP 3
20873: PUSH
20874: LD_INT 1
20876: ARRAY
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if enemy then
20887: LD_VAR 0 3
20891: IFFALSE 20937
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_INT 49
20900: PUSH
20901: LD_INT 43
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 63
20910: PUSH
20911: LD_INT 56
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 72
20920: PUSH
20921: LD_INT 67
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL 67277 0 2
// end ; end ; end ;
20937: GO 20392
20939: POP
20940: POP
// end ;
20941: PPOPN 3
20943: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20944: LD_INT 22
20946: PUSH
20947: LD_EXP 3
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 32
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PPUSH
20974: CALL_OW 69
20978: IFFALSE 21061
20980: GO 20982
20982: DISABLE
20983: LD_INT 0
20985: PPUSH
// begin enable ;
20986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
20987: LD_ADDR_VAR 0 1
20991: PUSH
20992: LD_INT 22
20994: PUSH
20995: LD_EXP 3
20999: PUSH
21000: LD_INT 1
21002: ARRAY
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 32
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 69
21026: PUSH
21027: FOR_IN
21028: IFFALSE 21059
// if GetFuel ( i ) < 3 then
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 261
21039: PUSH
21040: LD_INT 3
21042: LESS
21043: IFFALSE 21057
// SetFuel ( i , 3 ) ;
21045: LD_VAR 0 1
21049: PPUSH
21050: LD_INT 3
21052: PPUSH
21053: CALL_OW 240
21057: GO 21027
21059: POP
21060: POP
// end ; end_of_file
21061: PPOPN 1
21063: END
// every 0 0$20 trigger game do
21064: LD_EXP 2
21068: IFFALSE 21117
21070: GO 21072
21072: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21073: LD_INT 20
21075: PUSH
21076: LD_INT 22
21078: PUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: LD_INT 5
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: PPUSH
21095: LD_EXP 21
21099: PUSH
21100: LD_INT 2
21102: ARRAY
21103: PPUSH
21104: LD_EXP 21
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: PPUSH
21113: CALL 21118 0 3
21117: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
21122: PPUSH
21123: PPUSH
// if not areas then
21124: LD_VAR 0 1
21128: NOT
21129: IFFALSE 21133
// exit ;
21131: GO 21510
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21133: LD_ADDR_VAR 0 7
21137: PUSH
21138: LD_INT 17
21140: PUSH
21141: LD_INT 18
21143: PUSH
21144: LD_INT 19
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: ST_TO_ADDR
// x := 5 ;
21152: LD_ADDR_VAR 0 6
21156: PUSH
21157: LD_INT 5
21159: ST_TO_ADDR
// repeat wait ( time ) ;
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21169: LD_OWVAR 1
21173: PUSH
21174: LD_INT 37800
21176: PUSH
21177: LD_INT 31500
21179: PUSH
21180: LD_INT 25200
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: PUSH
21188: LD_OWVAR 67
21192: ARRAY
21193: LESS
21194: IFFALSE 21333
// begin for i := 1 to multi_sides do
21196: LD_ADDR_VAR 0 5
21200: PUSH
21201: DOUBLE
21202: LD_INT 1
21204: DEC
21205: ST_TO_ADDR
21206: LD_EXP 7
21210: PUSH
21211: FOR_TO
21212: IFFALSE 21324
// if multi_sides [ i ] then
21214: LD_EXP 7
21218: PUSH
21219: LD_VAR 0 5
21223: ARRAY
21224: IFFALSE 21322
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21226: LD_VAR 0 7
21230: PUSH
21231: LD_EXP 7
21235: PUSH
21236: LD_VAR 0 5
21240: ARRAY
21241: ARRAY
21242: PPUSH
21243: LD_INT 1
21245: PPUSH
21246: CALL_OW 287
21250: PUSH
21251: LD_INT 32
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 23
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: PUSH
21265: LD_OWVAR 67
21269: ARRAY
21270: LESS
21271: IFFALSE 21322
// begin amount := amount - ( x * 10 ) ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_VAR 0 3
21282: PUSH
21283: LD_VAR 0 6
21287: PUSH
21288: LD_INT 10
21290: MUL
21291: MINUS
21292: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21293: LD_VAR 0 6
21297: PPUSH
21298: LD_VAR 0 7
21302: PUSH
21303: LD_EXP 7
21307: PUSH
21308: LD_VAR 0 5
21312: ARRAY
21313: ARRAY
21314: PPUSH
21315: LD_INT 1
21317: PPUSH
21318: CALL_OW 55
// end ; end ;
21322: GO 21211
21324: POP
21325: POP
// wait ( 0 0$2 ) ;
21326: LD_INT 70
21328: PPUSH
21329: CALL_OW 67
// end ; for i in areas do
21333: LD_ADDR_VAR 0 5
21337: PUSH
21338: LD_VAR 0 1
21342: PUSH
21343: FOR_IN
21344: IFFALSE 21427
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21346: LD_VAR 0 5
21350: PPUSH
21351: LD_INT 1
21353: PPUSH
21354: CALL_OW 287
21358: PUSH
21359: LD_INT 25
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 20
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: PUSH
21373: LD_OWVAR 67
21377: ARRAY
21378: LESS
21379: IFFALSE 21425
// begin wait ( 0 0$5 ) ;
21381: LD_INT 175
21383: PPUSH
21384: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21388: LD_VAR 0 6
21392: PPUSH
21393: LD_VAR 0 5
21397: PPUSH
21398: LD_INT 1
21400: PPUSH
21401: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21405: LD_ADDR_VAR 0 3
21409: PUSH
21410: LD_VAR 0 3
21414: PUSH
21415: LD_VAR 0 6
21419: PUSH
21420: LD_INT 10
21422: MUL
21423: MINUS
21424: ST_TO_ADDR
// end ; end ;
21425: GO 21343
21427: POP
21428: POP
// time := time + 0 0$2 ;
21429: LD_ADDR_VAR 0 2
21433: PUSH
21434: LD_VAR 0 2
21438: PUSH
21439: LD_INT 70
21441: PLUS
21442: ST_TO_ADDR
// x := x - 1 ;
21443: LD_ADDR_VAR 0 6
21447: PUSH
21448: LD_VAR 0 6
21452: PUSH
21453: LD_INT 1
21455: MINUS
21456: ST_TO_ADDR
// if x = 0 then
21457: LD_VAR 0 6
21461: PUSH
21462: LD_INT 0
21464: EQUAL
21465: IFFALSE 21475
// x := 5 ;
21467: LD_ADDR_VAR 0 6
21471: PUSH
21472: LD_INT 5
21474: ST_TO_ADDR
// if time > 2 2$00 then
21475: LD_VAR 0 2
21479: PUSH
21480: LD_INT 4200
21482: GREATER
21483: IFFALSE 21493
// time := 0 0$30 ;
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_INT 1050
21492: ST_TO_ADDR
// until not game or amount <= 0 ;
21493: LD_EXP 2
21497: NOT
21498: PUSH
21499: LD_VAR 0 3
21503: PUSH
21504: LD_INT 0
21506: LESSEQUAL
21507: OR
21508: IFFALSE 21160
// end ; end_of_file
21510: LD_VAR 0 4
21514: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21515: LD_VAR 0 1
21519: PUSH
21520: LD_INT 200
21522: DOUBLE
21523: GREATEREQUAL
21524: IFFALSE 21532
21526: LD_INT 299
21528: DOUBLE
21529: LESSEQUAL
21530: IFTRUE 21534
21532: GO 21566
21534: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21535: LD_VAR 0 1
21539: PPUSH
21540: LD_VAR 0 2
21544: PPUSH
21545: LD_VAR 0 3
21549: PPUSH
21550: LD_VAR 0 4
21554: PPUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: CALL 22263 0 5
21564: GO 21643
21566: LD_INT 300
21568: DOUBLE
21569: GREATEREQUAL
21570: IFFALSE 21578
21572: LD_INT 399
21574: DOUBLE
21575: LESSEQUAL
21576: IFTRUE 21580
21578: GO 21642
21580: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21581: LD_VAR 0 1
21585: PPUSH
21586: LD_VAR 0 2
21590: PPUSH
21591: LD_VAR 0 3
21595: PPUSH
21596: LD_VAR 0 4
21600: PPUSH
21601: LD_VAR 0 5
21605: PPUSH
21606: LD_VAR 0 6
21610: PPUSH
21611: LD_VAR 0 7
21615: PPUSH
21616: LD_VAR 0 8
21620: PPUSH
21621: LD_VAR 0 9
21625: PPUSH
21626: LD_VAR 0 10
21630: PPUSH
21631: LD_VAR 0 11
21635: PPUSH
21636: CALL 69805 0 11
21640: GO 21643
21642: POP
// end ;
21643: PPOPN 11
21645: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21646: LD_VAR 0 1
21650: PPUSH
21651: LD_VAR 0 2
21655: PPUSH
21656: LD_VAR 0 3
21660: PPUSH
21661: LD_VAR 0 4
21665: PPUSH
21666: LD_VAR 0 5
21670: PPUSH
21671: CALL 21728 0 5
// end ; end_of_file
21675: PPOPN 5
21677: END
// export function SOS_UnitDestroyed ( un ) ; begin
21678: LD_INT 0
21680: PPUSH
// ComRadiation ( un ) ;
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL 22667 0 1
// end ;
21690: LD_VAR 0 2
21694: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21695: LD_INT 0
21697: PPUSH
// ComRadiation ( un ) ;
21698: LD_VAR 0 1
21702: PPUSH
21703: CALL 22667 0 1
// end ;
21707: LD_VAR 0 2
21711: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21712: LD_INT 0
21714: PPUSH
// end ;
21715: LD_VAR 0 4
21719: RET
// export function SOS_Command ( cmd ) ; begin
21720: LD_INT 0
21722: PPUSH
// end ;
21723: LD_VAR 0 2
21727: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21728: LD_INT 0
21730: PPUSH
// end ;
21731: LD_VAR 0 6
21735: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
21741: PPUSH
21742: PPUSH
// if not vehicle or not factory then
21743: LD_VAR 0 1
21747: NOT
21748: PUSH
21749: LD_VAR 0 2
21753: NOT
21754: OR
21755: IFFALSE 21759
// exit ;
21757: GO 22258
// if not factoryWaypoints then
21759: LD_EXP 68
21763: NOT
21764: IFFALSE 21768
// exit ;
21766: GO 22258
// for i := 1 to Count ( factoryWaypoints ) do
21768: LD_ADDR_VAR 0 4
21772: PUSH
21773: DOUBLE
21774: LD_INT 1
21776: DEC
21777: ST_TO_ADDR
21778: LD_EXP 68
21782: PPUSH
21783: CALL 29064 0 1
21787: PUSH
21788: FOR_TO
21789: IFFALSE 22256
// if factoryWaypoints [ i ] [ 2 ] = factory then
21791: LD_EXP 68
21795: PUSH
21796: LD_VAR 0 4
21800: ARRAY
21801: PUSH
21802: LD_INT 2
21804: ARRAY
21805: PUSH
21806: LD_VAR 0 2
21810: EQUAL
21811: IFFALSE 22254
// begin if GetControl ( vehicle ) = control_manual then
21813: LD_VAR 0 1
21817: PPUSH
21818: CALL_OW 263
21822: PUSH
21823: LD_INT 1
21825: EQUAL
21826: IFFALSE 22137
// begin driver := IsDrivenBy ( vehicle ) ;
21828: LD_ADDR_VAR 0 6
21832: PUSH
21833: LD_VAR 0 1
21837: PPUSH
21838: CALL_OW 311
21842: ST_TO_ADDR
// tag := GetTag ( driver ) ;
21843: LD_ADDR_VAR 0 5
21847: PUSH
21848: LD_VAR 0 6
21852: PPUSH
21853: CALL_OW 110
21857: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
21858: LD_VAR 0 5
21862: PUSH
21863: LD_INT 501
21865: EQUAL
21866: PUSH
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 110
21876: PUSH
21877: LD_INT 501
21879: EQUAL
21880: OR
21881: IFFALSE 21887
// exit ;
21883: POP
21884: POP
21885: GO 22258
// if not HasTask ( driver ) then
21887: LD_VAR 0 6
21891: PPUSH
21892: CALL_OW 314
21896: NOT
21897: IFFALSE 22135
// begin SetTag ( driver , tDriver ) ;
21899: LD_VAR 0 6
21903: PPUSH
21904: LD_INT 501
21906: PPUSH
21907: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
21911: LD_VAR 0 1
21915: PPUSH
21916: LD_INT 501
21918: PPUSH
21919: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21923: LD_ADDR_VAR 0 7
21927: PUSH
21928: LD_EXP 68
21932: PUSH
21933: LD_VAR 0 4
21937: ARRAY
21938: PUSH
21939: LD_INT 3
21941: ARRAY
21942: PPUSH
21943: LD_EXP 68
21947: PUSH
21948: LD_VAR 0 4
21952: ARRAY
21953: PUSH
21954: LD_INT 4
21956: ARRAY
21957: PPUSH
21958: CALL_OW 428
21962: ST_TO_ADDR
// if hex then
21963: LD_VAR 0 7
21967: IFFALSE 21985
// ComMoveUnit ( driver , hex ) else
21969: LD_VAR 0 6
21973: PPUSH
21974: LD_VAR 0 7
21978: PPUSH
21979: CALL_OW 112
21983: GO 22024
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21985: LD_VAR 0 6
21989: PPUSH
21990: LD_EXP 68
21994: PUSH
21995: LD_VAR 0 4
21999: ARRAY
22000: PUSH
22001: LD_INT 3
22003: ARRAY
22004: PPUSH
22005: LD_EXP 68
22009: PUSH
22010: LD_VAR 0 4
22014: ARRAY
22015: PUSH
22016: LD_INT 4
22018: ARRAY
22019: PPUSH
22020: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22024: LD_VAR 0 6
22028: PPUSH
22029: CALL_OW 181
// if Multiplayer then
22033: LD_OWVAR 4
22037: IFFALSE 22086
// begin repeat wait ( 10 ) ;
22039: LD_INT 10
22041: PPUSH
22042: CALL_OW 67
// until not IsInUnit ( driver ) ;
22046: LD_VAR 0 6
22050: PPUSH
22051: CALL_OW 310
22055: NOT
22056: IFFALSE 22039
// if not HasTask ( driver ) then
22058: LD_VAR 0 6
22062: PPUSH
22063: CALL_OW 314
22067: NOT
22068: IFFALSE 22084
// ComEnterUnit ( driver , factory ) ;
22070: LD_VAR 0 6
22074: PPUSH
22075: LD_VAR 0 2
22079: PPUSH
22080: CALL_OW 120
// end else
22084: GO 22100
// AddComEnterUnit ( driver , factory ) ;
22086: LD_VAR 0 6
22090: PPUSH
22091: LD_VAR 0 2
22095: PPUSH
22096: CALL_OW 180
// wait ( 0 0$1 ) ;
22100: LD_INT 35
22102: PPUSH
22103: CALL_OW 67
// SetTag ( driver , tag ) ;
22107: LD_VAR 0 6
22111: PPUSH
22112: LD_VAR 0 5
22116: PPUSH
22117: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
22121: LD_VAR 0 1
22125: PPUSH
22126: LD_INT 0
22128: PPUSH
22129: CALL_OW 109
// break ;
22133: GO 22256
// end ; end else
22135: GO 22254
// if GetControl ( vehicle ) = control_remote then
22137: LD_VAR 0 1
22141: PPUSH
22142: CALL_OW 263
22146: PUSH
22147: LD_INT 2
22149: EQUAL
22150: IFFALSE 22213
// begin wait ( 0 0$2 ) ;
22152: LD_INT 70
22154: PPUSH
22155: CALL_OW 67
// if Connect ( vehicle ) then
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL 35270 0 1
22168: IFFALSE 22209
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_EXP 68
22179: PUSH
22180: LD_VAR 0 4
22184: ARRAY
22185: PUSH
22186: LD_INT 3
22188: ARRAY
22189: PPUSH
22190: LD_EXP 68
22194: PUSH
22195: LD_VAR 0 4
22199: ARRAY
22200: PUSH
22201: LD_INT 4
22203: ARRAY
22204: PPUSH
22205: CALL_OW 171
// break ;
22209: GO 22256
// end else
22211: GO 22254
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22213: LD_VAR 0 1
22217: PPUSH
22218: LD_EXP 68
22222: PUSH
22223: LD_VAR 0 4
22227: ARRAY
22228: PUSH
22229: LD_INT 3
22231: ARRAY
22232: PPUSH
22233: LD_EXP 68
22237: PUSH
22238: LD_VAR 0 4
22242: ARRAY
22243: PUSH
22244: LD_INT 4
22246: ARRAY
22247: PPUSH
22248: CALL_OW 171
// break ;
22252: GO 22256
// end ; end ;
22254: GO 21788
22256: POP
22257: POP
// end ;
22258: LD_VAR 0 3
22262: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22263: LD_INT 0
22265: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22266: LD_VAR 0 1
22270: PUSH
22271: LD_INT 250
22273: EQUAL
22274: PUSH
22275: LD_VAR 0 2
22279: PPUSH
22280: CALL_OW 264
22284: PUSH
22285: LD_INT 81
22287: EQUAL
22288: AND
22289: IFFALSE 22310
// MinerPlaceMine ( unit , x , y ) ;
22291: LD_VAR 0 2
22295: PPUSH
22296: LD_VAR 0 4
22300: PPUSH
22301: LD_VAR 0 5
22305: PPUSH
22306: CALL 25402 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22310: LD_VAR 0 1
22314: PUSH
22315: LD_INT 251
22317: EQUAL
22318: PUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: CALL_OW 264
22328: PUSH
22329: LD_INT 81
22331: EQUAL
22332: AND
22333: IFFALSE 22354
// MinerDetonateMine ( unit , x , y ) ;
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: LD_VAR 0 5
22349: PPUSH
22350: CALL 25677 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_INT 252
22361: EQUAL
22362: PUSH
22363: LD_VAR 0 2
22367: PPUSH
22368: CALL_OW 264
22372: PUSH
22373: LD_INT 81
22375: EQUAL
22376: AND
22377: IFFALSE 22398
// MinerCreateMinefield ( unit , x , y ) ;
22379: LD_VAR 0 2
22383: PPUSH
22384: LD_VAR 0 4
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: CALL 26094 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22398: LD_VAR 0 1
22402: PUSH
22403: LD_INT 253
22405: EQUAL
22406: PUSH
22407: LD_VAR 0 2
22411: PPUSH
22412: CALL_OW 257
22416: PUSH
22417: LD_INT 5
22419: EQUAL
22420: AND
22421: IFFALSE 22442
// ComBinocular ( unit , x , y ) ;
22423: LD_VAR 0 2
22427: PPUSH
22428: LD_VAR 0 4
22432: PPUSH
22433: LD_VAR 0 5
22437: PPUSH
22438: CALL 26463 0 3
// if selectedUnit then
22442: LD_VAR 0 3
22446: IFFALSE 22502
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_INT 254
22455: EQUAL
22456: PUSH
22457: LD_VAR 0 2
22461: PPUSH
22462: CALL_OW 264
22466: PUSH
22467: LD_INT 99
22469: EQUAL
22470: AND
22471: PUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: CALL_OW 263
22481: PUSH
22482: LD_INT 3
22484: EQUAL
22485: AND
22486: IFFALSE 22502
// HackDestroyVehicle ( unit , selectedUnit ) ;
22488: LD_VAR 0 2
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: CALL 24766 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22502: LD_VAR 0 1
22506: PUSH
22507: LD_INT 255
22509: EQUAL
22510: PUSH
22511: LD_VAR 0 2
22515: PPUSH
22516: CALL_OW 264
22520: PUSH
22521: LD_INT 14
22523: PUSH
22524: LD_INT 53
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: IN
22531: AND
22532: PUSH
22533: LD_VAR 0 4
22537: PPUSH
22538: LD_VAR 0 5
22542: PPUSH
22543: CALL_OW 488
22547: AND
22548: IFFALSE 22572
// CutTreeXYR ( unit , x , y , 12 ) ;
22550: LD_VAR 0 2
22554: PPUSH
22555: LD_VAR 0 4
22559: PPUSH
22560: LD_VAR 0 5
22564: PPUSH
22565: LD_INT 12
22567: PPUSH
22568: CALL 22763 0 4
// if cmd = 256 then
22572: LD_VAR 0 1
22576: PUSH
22577: LD_INT 256
22579: EQUAL
22580: IFFALSE 22601
// SetFactoryWaypoint ( unit , x , y ) ;
22582: LD_VAR 0 2
22586: PPUSH
22587: LD_VAR 0 4
22591: PPUSH
22592: LD_VAR 0 5
22596: PPUSH
22597: CALL 69813 0 3
// if cmd = 257 then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 257
22608: EQUAL
22609: IFFALSE 22630
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22611: LD_VAR 0 2
22615: PPUSH
22616: LD_VAR 0 4
22620: PPUSH
22621: LD_VAR 0 5
22625: PPUSH
22626: CALL 70303 0 3
// if cmd = 258 then
22630: LD_VAR 0 1
22634: PUSH
22635: LD_INT 258
22637: EQUAL
22638: IFFALSE 22662
// BurnTreeXYR ( unit , x , y , 8 ) ;
22640: LD_VAR 0 2
22644: PPUSH
22645: LD_VAR 0 4
22649: PPUSH
22650: LD_VAR 0 5
22654: PPUSH
22655: LD_INT 8
22657: PPUSH
22658: CALL 23157 0 4
// end ;
22662: LD_VAR 0 6
22666: RET
// export function ComRadiation ( un ) ; var eff ; begin
22667: LD_INT 0
22669: PPUSH
22670: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22671: LD_VAR 0 1
22675: PPUSH
22676: CALL_OW 264
22680: PUSH
22681: LD_INT 91
22683: NONEQUAL
22684: IFFALSE 22688
// exit ;
22686: GO 22758
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22688: LD_INT 68
22690: PPUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 255
22700: PPUSH
22701: CALL_OW 321
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: IFFALSE 22721
// eff := 70 else
22711: LD_ADDR_VAR 0 3
22715: PUSH
22716: LD_INT 70
22718: ST_TO_ADDR
22719: GO 22729
// eff := 30 ;
22721: LD_ADDR_VAR 0 3
22725: PUSH
22726: LD_INT 30
22728: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 250
22738: PPUSH
22739: LD_VAR 0 1
22743: PPUSH
22744: CALL_OW 251
22748: PPUSH
22749: LD_VAR 0 3
22753: PPUSH
22754: CALL_OW 495
// end ;
22758: LD_VAR 0 2
22762: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22763: LD_INT 0
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 302
22783: NOT
22784: PUSH
22785: LD_VAR 0 2
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: CALL_OW 488
22799: NOT
22800: OR
22801: PUSH
22802: LD_VAR 0 4
22806: NOT
22807: OR
22808: IFFALSE 22812
// exit ;
22810: GO 23152
// list := [ ] ;
22812: LD_ADDR_VAR 0 13
22816: PUSH
22817: EMPTY
22818: ST_TO_ADDR
// if x - r < 0 then
22819: LD_VAR 0 2
22823: PUSH
22824: LD_VAR 0 4
22828: MINUS
22829: PUSH
22830: LD_INT 0
22832: LESS
22833: IFFALSE 22845
// min_x := 0 else
22835: LD_ADDR_VAR 0 7
22839: PUSH
22840: LD_INT 0
22842: ST_TO_ADDR
22843: GO 22861
// min_x := x - r ;
22845: LD_ADDR_VAR 0 7
22849: PUSH
22850: LD_VAR 0 2
22854: PUSH
22855: LD_VAR 0 4
22859: MINUS
22860: ST_TO_ADDR
// if y - r < 0 then
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 4
22870: MINUS
22871: PUSH
22872: LD_INT 0
22874: LESS
22875: IFFALSE 22887
// min_y := 0 else
22877: LD_ADDR_VAR 0 8
22881: PUSH
22882: LD_INT 0
22884: ST_TO_ADDR
22885: GO 22903
// min_y := y - r ;
22887: LD_ADDR_VAR 0 8
22891: PUSH
22892: LD_VAR 0 3
22896: PUSH
22897: LD_VAR 0 4
22901: MINUS
22902: ST_TO_ADDR
// max_x := x + r ;
22903: LD_ADDR_VAR 0 9
22907: PUSH
22908: LD_VAR 0 2
22912: PUSH
22913: LD_VAR 0 4
22917: PLUS
22918: ST_TO_ADDR
// max_y := y + r ;
22919: LD_ADDR_VAR 0 10
22923: PUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_VAR 0 4
22933: PLUS
22934: ST_TO_ADDR
// for _x = min_x to max_x do
22935: LD_ADDR_VAR 0 11
22939: PUSH
22940: DOUBLE
22941: LD_VAR 0 7
22945: DEC
22946: ST_TO_ADDR
22947: LD_VAR 0 9
22951: PUSH
22952: FOR_TO
22953: IFFALSE 23070
// for _y = min_y to max_y do
22955: LD_ADDR_VAR 0 12
22959: PUSH
22960: DOUBLE
22961: LD_VAR 0 8
22965: DEC
22966: ST_TO_ADDR
22967: LD_VAR 0 10
22971: PUSH
22972: FOR_TO
22973: IFFALSE 23066
// begin if not ValidHex ( _x , _y ) then
22975: LD_VAR 0 11
22979: PPUSH
22980: LD_VAR 0 12
22984: PPUSH
22985: CALL_OW 488
22989: NOT
22990: IFFALSE 22994
// continue ;
22992: GO 22972
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22994: LD_VAR 0 11
22998: PPUSH
22999: LD_VAR 0 12
23003: PPUSH
23004: CALL_OW 351
23008: PUSH
23009: LD_VAR 0 11
23013: PPUSH
23014: LD_VAR 0 12
23018: PPUSH
23019: CALL_OW 554
23023: AND
23024: IFFALSE 23064
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23026: LD_ADDR_VAR 0 13
23030: PUSH
23031: LD_VAR 0 13
23035: PPUSH
23036: LD_VAR 0 13
23040: PUSH
23041: LD_INT 1
23043: PLUS
23044: PPUSH
23045: LD_VAR 0 11
23049: PUSH
23050: LD_VAR 0 12
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PPUSH
23059: CALL_OW 2
23063: ST_TO_ADDR
// end ;
23064: GO 22972
23066: POP
23067: POP
23068: GO 22952
23070: POP
23071: POP
// if not list then
23072: LD_VAR 0 13
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23152
// for i in list do
23081: LD_ADDR_VAR 0 6
23085: PUSH
23086: LD_VAR 0 13
23090: PUSH
23091: FOR_IN
23092: IFFALSE 23150
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23094: LD_VAR 0 1
23098: PPUSH
23099: LD_STRING M
23101: PUSH
23102: LD_VAR 0 6
23106: PUSH
23107: LD_INT 1
23109: ARRAY
23110: PUSH
23111: LD_VAR 0 6
23115: PUSH
23116: LD_INT 2
23118: ARRAY
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: LD_INT 0
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: PPUSH
23144: CALL_OW 447
23148: GO 23091
23150: POP
23151: POP
// end ;
23152: LD_VAR 0 5
23156: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23157: LD_INT 0
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
23167: PPUSH
23168: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 302
23178: NOT
23179: PUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: LD_VAR 0 3
23189: PPUSH
23190: CALL_OW 488
23194: NOT
23195: OR
23196: PUSH
23197: LD_VAR 0 4
23201: NOT
23202: OR
23203: IFFALSE 23207
// exit ;
23205: GO 23720
// list := [ ] ;
23207: LD_ADDR_VAR 0 13
23211: PUSH
23212: EMPTY
23213: ST_TO_ADDR
// if x - r < 0 then
23214: LD_VAR 0 2
23218: PUSH
23219: LD_VAR 0 4
23223: MINUS
23224: PUSH
23225: LD_INT 0
23227: LESS
23228: IFFALSE 23240
// min_x := 0 else
23230: LD_ADDR_VAR 0 7
23234: PUSH
23235: LD_INT 0
23237: ST_TO_ADDR
23238: GO 23256
// min_x := x - r ;
23240: LD_ADDR_VAR 0 7
23244: PUSH
23245: LD_VAR 0 2
23249: PUSH
23250: LD_VAR 0 4
23254: MINUS
23255: ST_TO_ADDR
// if y - r < 0 then
23256: LD_VAR 0 3
23260: PUSH
23261: LD_VAR 0 4
23265: MINUS
23266: PUSH
23267: LD_INT 0
23269: LESS
23270: IFFALSE 23282
// min_y := 0 else
23272: LD_ADDR_VAR 0 8
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
23280: GO 23298
// min_y := y - r ;
23282: LD_ADDR_VAR 0 8
23286: PUSH
23287: LD_VAR 0 3
23291: PUSH
23292: LD_VAR 0 4
23296: MINUS
23297: ST_TO_ADDR
// max_x := x + r ;
23298: LD_ADDR_VAR 0 9
23302: PUSH
23303: LD_VAR 0 2
23307: PUSH
23308: LD_VAR 0 4
23312: PLUS
23313: ST_TO_ADDR
// max_y := y + r ;
23314: LD_ADDR_VAR 0 10
23318: PUSH
23319: LD_VAR 0 3
23323: PUSH
23324: LD_VAR 0 4
23328: PLUS
23329: ST_TO_ADDR
// for _x = min_x to max_x do
23330: LD_ADDR_VAR 0 11
23334: PUSH
23335: DOUBLE
23336: LD_VAR 0 7
23340: DEC
23341: ST_TO_ADDR
23342: LD_VAR 0 9
23346: PUSH
23347: FOR_TO
23348: IFFALSE 23465
// for _y = min_y to max_y do
23350: LD_ADDR_VAR 0 12
23354: PUSH
23355: DOUBLE
23356: LD_VAR 0 8
23360: DEC
23361: ST_TO_ADDR
23362: LD_VAR 0 10
23366: PUSH
23367: FOR_TO
23368: IFFALSE 23461
// begin if not ValidHex ( _x , _y ) then
23370: LD_VAR 0 11
23374: PPUSH
23375: LD_VAR 0 12
23379: PPUSH
23380: CALL_OW 488
23384: NOT
23385: IFFALSE 23389
// continue ;
23387: GO 23367
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23389: LD_VAR 0 11
23393: PPUSH
23394: LD_VAR 0 12
23398: PPUSH
23399: CALL_OW 351
23403: PUSH
23404: LD_VAR 0 11
23408: PPUSH
23409: LD_VAR 0 12
23413: PPUSH
23414: CALL_OW 554
23418: AND
23419: IFFALSE 23459
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23421: LD_ADDR_VAR 0 13
23425: PUSH
23426: LD_VAR 0 13
23430: PPUSH
23431: LD_VAR 0 13
23435: PUSH
23436: LD_INT 1
23438: PLUS
23439: PPUSH
23440: LD_VAR 0 11
23444: PUSH
23445: LD_VAR 0 12
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 2
23458: ST_TO_ADDR
// end ;
23459: GO 23367
23461: POP
23462: POP
23463: GO 23347
23465: POP
23466: POP
// if not list then
23467: LD_VAR 0 13
23471: NOT
23472: IFFALSE 23476
// exit ;
23474: GO 23720
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23476: LD_ADDR_VAR 0 13
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: LD_VAR 0 13
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: LD_INT 1
23496: PPUSH
23497: CALL 32412 0 4
23501: ST_TO_ADDR
// ComStop ( flame ) ;
23502: LD_VAR 0 1
23506: PPUSH
23507: CALL_OW 141
// for i in list do
23511: LD_ADDR_VAR 0 6
23515: PUSH
23516: LD_VAR 0 13
23520: PUSH
23521: FOR_IN
23522: IFFALSE 23553
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23524: LD_VAR 0 1
23528: PPUSH
23529: LD_VAR 0 6
23533: PUSH
23534: LD_INT 1
23536: ARRAY
23537: PPUSH
23538: LD_VAR 0 6
23542: PUSH
23543: LD_INT 2
23545: ARRAY
23546: PPUSH
23547: CALL_OW 176
23551: GO 23521
23553: POP
23554: POP
// repeat wait ( 0 0$1 ) ;
23555: LD_INT 35
23557: PPUSH
23558: CALL_OW 67
// task := GetTaskList ( flame ) ;
23562: LD_ADDR_VAR 0 14
23566: PUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 437
23576: ST_TO_ADDR
// if not task then
23577: LD_VAR 0 14
23581: NOT
23582: IFFALSE 23586
// exit ;
23584: GO 23720
// if task [ 1 ] [ 1 ] <> | then
23586: LD_VAR 0 14
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PUSH
23599: LD_STRING |
23601: NONEQUAL
23602: IFFALSE 23606
// exit ;
23604: GO 23720
// _x := task [ 1 ] [ 2 ] ;
23606: LD_ADDR_VAR 0 11
23610: PUSH
23611: LD_VAR 0 14
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PUSH
23620: LD_INT 2
23622: ARRAY
23623: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23624: LD_ADDR_VAR 0 12
23628: PUSH
23629: LD_VAR 0 14
23633: PUSH
23634: LD_INT 1
23636: ARRAY
23637: PUSH
23638: LD_INT 3
23640: ARRAY
23641: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23642: LD_VAR 0 11
23646: PPUSH
23647: LD_VAR 0 12
23651: PPUSH
23652: CALL_OW 351
23656: NOT
23657: PUSH
23658: LD_VAR 0 11
23662: PPUSH
23663: LD_VAR 0 12
23667: PPUSH
23668: CALL_OW 554
23672: NOT
23673: OR
23674: IFFALSE 23708
// begin task := Delete ( task , 1 ) ;
23676: LD_ADDR_VAR 0 14
23680: PUSH
23681: LD_VAR 0 14
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 3
23693: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_VAR 0 14
23703: PPUSH
23704: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 314
23717: NOT
23718: IFFALSE 23555
// end ;
23720: LD_VAR 0 5
23724: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23725: LD_EXP 58
23729: NOT
23730: IFFALSE 23780
23732: GO 23734
23734: DISABLE
// begin initHack := true ;
23735: LD_ADDR_EXP 58
23739: PUSH
23740: LD_INT 1
23742: ST_TO_ADDR
// hackTanks := [ ] ;
23743: LD_ADDR_EXP 59
23747: PUSH
23748: EMPTY
23749: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23750: LD_ADDR_EXP 60
23754: PUSH
23755: EMPTY
23756: ST_TO_ADDR
// hackLimit := 3 ;
23757: LD_ADDR_EXP 61
23761: PUSH
23762: LD_INT 3
23764: ST_TO_ADDR
// hackDist := 12 ;
23765: LD_ADDR_EXP 62
23769: PUSH
23770: LD_INT 12
23772: ST_TO_ADDR
// hackCounter := [ ] ;
23773: LD_ADDR_EXP 63
23777: PUSH
23778: EMPTY
23779: ST_TO_ADDR
// end ;
23780: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23781: LD_EXP 58
23785: PUSH
23786: LD_INT 34
23788: PUSH
23789: LD_INT 99
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PPUSH
23796: CALL_OW 69
23800: AND
23801: IFFALSE 24054
23803: GO 23805
23805: DISABLE
23806: LD_INT 0
23808: PPUSH
23809: PPUSH
// begin enable ;
23810: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23811: LD_ADDR_VAR 0 1
23815: PUSH
23816: LD_INT 34
23818: PUSH
23819: LD_INT 99
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PPUSH
23826: CALL_OW 69
23830: PUSH
23831: FOR_IN
23832: IFFALSE 24052
// begin if not i in hackTanks then
23834: LD_VAR 0 1
23838: PUSH
23839: LD_EXP 59
23843: IN
23844: NOT
23845: IFFALSE 23928
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23847: LD_ADDR_EXP 59
23851: PUSH
23852: LD_EXP 59
23856: PPUSH
23857: LD_EXP 59
23861: PUSH
23862: LD_INT 1
23864: PLUS
23865: PPUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 1
23875: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23876: LD_ADDR_EXP 60
23880: PUSH
23881: LD_EXP 60
23885: PPUSH
23886: LD_EXP 60
23890: PUSH
23891: LD_INT 1
23893: PLUS
23894: PPUSH
23895: EMPTY
23896: PPUSH
23897: CALL_OW 1
23901: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23902: LD_ADDR_EXP 63
23906: PUSH
23907: LD_EXP 63
23911: PPUSH
23912: LD_EXP 63
23916: PUSH
23917: LD_INT 1
23919: PLUS
23920: PPUSH
23921: EMPTY
23922: PPUSH
23923: CALL_OW 1
23927: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 302
23937: NOT
23938: IFFALSE 23951
// begin HackUnlinkAll ( i ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: CALL 24057 0 1
// continue ;
23949: GO 23831
// end ; HackCheckCapturedStatus ( i ) ;
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL 24500 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23960: LD_ADDR_VAR 0 2
23964: PUSH
23965: LD_INT 81
23967: PUSH
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL_OW 255
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 33
23984: PUSH
23985: LD_INT 3
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 91
23994: PUSH
23995: LD_VAR 0 1
23999: PUSH
24000: LD_EXP 62
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 50
24012: PUSH
24013: EMPTY
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: PPUSH
24022: CALL_OW 69
24026: ST_TO_ADDR
// if not tmp then
24027: LD_VAR 0 2
24031: NOT
24032: IFFALSE 24036
// continue ;
24034: GO 23831
// HackLink ( i , tmp ) ;
24036: LD_VAR 0 1
24040: PPUSH
24041: LD_VAR 0 2
24045: PPUSH
24046: CALL 24193 0 2
// end ;
24050: GO 23831
24052: POP
24053: POP
// end ;
24054: PPOPN 2
24056: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
24061: PPUSH
// if not hack in hackTanks then
24062: LD_VAR 0 1
24066: PUSH
24067: LD_EXP 59
24071: IN
24072: NOT
24073: IFFALSE 24077
// exit ;
24075: GO 24188
// index := GetElementIndex ( hackTanks , hack ) ;
24077: LD_ADDR_VAR 0 4
24081: PUSH
24082: LD_EXP 59
24086: PPUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL 31709 0 2
24096: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24097: LD_EXP 60
24101: PUSH
24102: LD_VAR 0 4
24106: ARRAY
24107: IFFALSE 24188
// begin for i in hackTanksCaptured [ index ] do
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_EXP 60
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PUSH
24125: FOR_IN
24126: IFFALSE 24152
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24128: LD_VAR 0 3
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: PPUSH
24137: LD_VAR 0 3
24141: PUSH
24142: LD_INT 2
24144: ARRAY
24145: PPUSH
24146: CALL_OW 235
24150: GO 24125
24152: POP
24153: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24154: LD_ADDR_EXP 60
24158: PUSH
24159: LD_EXP 60
24163: PPUSH
24164: LD_VAR 0 4
24168: PPUSH
24169: EMPTY
24170: PPUSH
24171: CALL_OW 1
24175: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_INT 0
24183: PPUSH
24184: CALL_OW 505
// end ; end ;
24188: LD_VAR 0 2
24192: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24193: LD_INT 0
24195: PPUSH
24196: PPUSH
24197: PPUSH
// if not hack in hackTanks or not vehicles then
24198: LD_VAR 0 1
24202: PUSH
24203: LD_EXP 59
24207: IN
24208: NOT
24209: PUSH
24210: LD_VAR 0 2
24214: NOT
24215: OR
24216: IFFALSE 24220
// exit ;
24218: GO 24495
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24220: LD_ADDR_VAR 0 2
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: LD_VAR 0 2
24234: PPUSH
24235: LD_INT 1
24237: PPUSH
24238: LD_INT 1
24240: PPUSH
24241: CALL 32359 0 4
24245: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24246: LD_ADDR_VAR 0 5
24250: PUSH
24251: LD_EXP 59
24255: PPUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL 31709 0 2
24265: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24266: LD_EXP 60
24270: PUSH
24271: LD_VAR 0 5
24275: ARRAY
24276: PUSH
24277: LD_EXP 61
24281: LESS
24282: IFFALSE 24471
// begin for i := 1 to vehicles do
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: DOUBLE
24290: LD_INT 1
24292: DEC
24293: ST_TO_ADDR
24294: LD_VAR 0 2
24298: PUSH
24299: FOR_TO
24300: IFFALSE 24469
// begin if hackTanksCaptured [ index ] = hackLimit then
24302: LD_EXP 60
24306: PUSH
24307: LD_VAR 0 5
24311: ARRAY
24312: PUSH
24313: LD_EXP 61
24317: EQUAL
24318: IFFALSE 24322
// break ;
24320: GO 24469
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24322: LD_ADDR_EXP 63
24326: PUSH
24327: LD_EXP 63
24331: PPUSH
24332: LD_VAR 0 5
24336: PPUSH
24337: LD_EXP 63
24341: PUSH
24342: LD_VAR 0 5
24346: ARRAY
24347: PUSH
24348: LD_INT 1
24350: PLUS
24351: PPUSH
24352: CALL_OW 1
24356: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24357: LD_ADDR_EXP 60
24361: PUSH
24362: LD_EXP 60
24366: PPUSH
24367: LD_VAR 0 5
24371: PUSH
24372: LD_EXP 60
24376: PUSH
24377: LD_VAR 0 5
24381: ARRAY
24382: PUSH
24383: LD_INT 1
24385: PLUS
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PPUSH
24391: LD_VAR 0 2
24395: PUSH
24396: LD_VAR 0 4
24400: ARRAY
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_VAR 0 4
24411: ARRAY
24412: PPUSH
24413: CALL_OW 255
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL 31924 0 3
24426: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 4
24436: ARRAY
24437: PPUSH
24438: LD_VAR 0 1
24442: PPUSH
24443: CALL_OW 255
24447: PPUSH
24448: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24452: LD_VAR 0 2
24456: PUSH
24457: LD_VAR 0 4
24461: ARRAY
24462: PPUSH
24463: CALL_OW 141
// end ;
24467: GO 24299
24469: POP
24470: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_EXP 60
24480: PUSH
24481: LD_VAR 0 5
24485: ARRAY
24486: PUSH
24487: LD_INT 0
24489: PLUS
24490: PPUSH
24491: CALL_OW 505
// end ;
24495: LD_VAR 0 3
24499: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
// if not hack in hackTanks then
24506: LD_VAR 0 1
24510: PUSH
24511: LD_EXP 59
24515: IN
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24761
// index := GetElementIndex ( hackTanks , hack ) ;
24521: LD_ADDR_VAR 0 4
24525: PUSH
24526: LD_EXP 59
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL 31709 0 2
24540: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24541: LD_ADDR_VAR 0 3
24545: PUSH
24546: DOUBLE
24547: LD_EXP 60
24551: PUSH
24552: LD_VAR 0 4
24556: ARRAY
24557: INC
24558: ST_TO_ADDR
24559: LD_INT 1
24561: PUSH
24562: FOR_DOWNTO
24563: IFFALSE 24735
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24565: LD_ADDR_VAR 0 5
24569: PUSH
24570: LD_EXP 60
24574: PUSH
24575: LD_VAR 0 4
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 3
24585: ARRAY
24586: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24587: LD_VAR 0 5
24591: PUSH
24592: LD_INT 1
24594: ARRAY
24595: PPUSH
24596: CALL_OW 302
24600: NOT
24601: PUSH
24602: LD_VAR 0 5
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: CALL_OW 255
24615: PUSH
24616: LD_VAR 0 1
24620: PPUSH
24621: CALL_OW 255
24625: NONEQUAL
24626: OR
24627: IFFALSE 24733
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24629: LD_VAR 0 5
24633: PUSH
24634: LD_INT 1
24636: ARRAY
24637: PPUSH
24638: CALL_OW 305
24642: PUSH
24643: LD_VAR 0 5
24647: PUSH
24648: LD_INT 1
24650: ARRAY
24651: PPUSH
24652: CALL_OW 255
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 255
24666: EQUAL
24667: AND
24668: IFFALSE 24692
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24670: LD_VAR 0 5
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: LD_VAR 0 5
24683: PUSH
24684: LD_INT 2
24686: ARRAY
24687: PPUSH
24688: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24692: LD_ADDR_EXP 60
24696: PUSH
24697: LD_EXP 60
24701: PPUSH
24702: LD_VAR 0 4
24706: PPUSH
24707: LD_EXP 60
24711: PUSH
24712: LD_VAR 0 4
24716: ARRAY
24717: PPUSH
24718: LD_VAR 0 3
24722: PPUSH
24723: CALL_OW 3
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// end ; end ;
24733: GO 24562
24735: POP
24736: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_EXP 60
24746: PUSH
24747: LD_VAR 0 4
24751: ARRAY
24752: PUSH
24753: LD_INT 0
24755: PLUS
24756: PPUSH
24757: CALL_OW 505
// end ;
24761: LD_VAR 0 2
24765: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
// if not hack in hackTanks then
24772: LD_VAR 0 1
24776: PUSH
24777: LD_EXP 59
24781: IN
24782: NOT
24783: IFFALSE 24787
// exit ;
24785: GO 24872
// index := GetElementIndex ( hackTanks , hack ) ;
24787: LD_ADDR_VAR 0 5
24791: PUSH
24792: LD_EXP 59
24796: PPUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL 31709 0 2
24806: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24807: LD_ADDR_VAR 0 4
24811: PUSH
24812: DOUBLE
24813: LD_INT 1
24815: DEC
24816: ST_TO_ADDR
24817: LD_EXP 60
24821: PUSH
24822: LD_VAR 0 5
24826: ARRAY
24827: PUSH
24828: FOR_TO
24829: IFFALSE 24870
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24831: LD_EXP 60
24835: PUSH
24836: LD_VAR 0 5
24840: ARRAY
24841: PUSH
24842: LD_VAR 0 4
24846: ARRAY
24847: PUSH
24848: LD_INT 1
24850: ARRAY
24851: PUSH
24852: LD_VAR 0 2
24856: EQUAL
24857: IFFALSE 24868
// KillUnit ( vehicle ) ;
24859: LD_VAR 0 2
24863: PPUSH
24864: CALL_OW 66
24868: GO 24828
24870: POP
24871: POP
// end ;
24872: LD_VAR 0 3
24876: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24877: LD_EXP 64
24881: NOT
24882: IFFALSE 24917
24884: GO 24886
24886: DISABLE
// begin initMiner := true ;
24887: LD_ADDR_EXP 64
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
// minersList := [ ] ;
24895: LD_ADDR_EXP 65
24899: PUSH
24900: EMPTY
24901: ST_TO_ADDR
// minerMinesList := [ ] ;
24902: LD_ADDR_EXP 66
24906: PUSH
24907: EMPTY
24908: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24909: LD_ADDR_EXP 67
24913: PUSH
24914: LD_INT 5
24916: ST_TO_ADDR
// end ;
24917: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24918: LD_EXP 64
24922: PUSH
24923: LD_INT 34
24925: PUSH
24926: LD_INT 81
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: AND
24938: IFFALSE 25399
24940: GO 24942
24942: DISABLE
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
// begin enable ;
24949: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24950: LD_ADDR_VAR 0 1
24954: PUSH
24955: LD_INT 34
24957: PUSH
24958: LD_INT 81
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PPUSH
24965: CALL_OW 69
24969: PUSH
24970: FOR_IN
24971: IFFALSE 25043
// begin if not i in minersList then
24973: LD_VAR 0 1
24977: PUSH
24978: LD_EXP 65
24982: IN
24983: NOT
24984: IFFALSE 25041
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24986: LD_ADDR_EXP 65
24990: PUSH
24991: LD_EXP 65
24995: PPUSH
24996: LD_EXP 65
25000: PUSH
25001: LD_INT 1
25003: PLUS
25004: PPUSH
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 1
25014: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25015: LD_ADDR_EXP 66
25019: PUSH
25020: LD_EXP 66
25024: PPUSH
25025: LD_EXP 66
25029: PUSH
25030: LD_INT 1
25032: PLUS
25033: PPUSH
25034: EMPTY
25035: PPUSH
25036: CALL_OW 1
25040: ST_TO_ADDR
// end end ;
25041: GO 24970
25043: POP
25044: POP
// for i := minerMinesList downto 1 do
25045: LD_ADDR_VAR 0 1
25049: PUSH
25050: DOUBLE
25051: LD_EXP 66
25055: INC
25056: ST_TO_ADDR
25057: LD_INT 1
25059: PUSH
25060: FOR_DOWNTO
25061: IFFALSE 25397
// begin if IsLive ( minersList [ i ] ) then
25063: LD_EXP 65
25067: PUSH
25068: LD_VAR 0 1
25072: ARRAY
25073: PPUSH
25074: CALL_OW 300
25078: IFFALSE 25106
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25080: LD_EXP 65
25084: PUSH
25085: LD_VAR 0 1
25089: ARRAY
25090: PPUSH
25091: LD_EXP 66
25095: PUSH
25096: LD_VAR 0 1
25100: ARRAY
25101: PPUSH
25102: CALL_OW 505
// if not minerMinesList [ i ] then
25106: LD_EXP 66
25110: PUSH
25111: LD_VAR 0 1
25115: ARRAY
25116: NOT
25117: IFFALSE 25121
// continue ;
25119: GO 25060
// for j := minerMinesList [ i ] downto 1 do
25121: LD_ADDR_VAR 0 2
25125: PUSH
25126: DOUBLE
25127: LD_EXP 66
25131: PUSH
25132: LD_VAR 0 1
25136: ARRAY
25137: INC
25138: ST_TO_ADDR
25139: LD_INT 1
25141: PUSH
25142: FOR_DOWNTO
25143: IFFALSE 25393
// begin side := GetSide ( minersList [ i ] ) ;
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_EXP 65
25154: PUSH
25155: LD_VAR 0 1
25159: ARRAY
25160: PPUSH
25161: CALL_OW 255
25165: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25166: LD_ADDR_VAR 0 4
25170: PUSH
25171: LD_EXP 66
25175: PUSH
25176: LD_VAR 0 1
25180: ARRAY
25181: PUSH
25182: LD_VAR 0 2
25186: ARRAY
25187: PUSH
25188: LD_INT 1
25190: ARRAY
25191: PPUSH
25192: LD_EXP 66
25196: PUSH
25197: LD_VAR 0 1
25201: ARRAY
25202: PUSH
25203: LD_VAR 0 2
25207: ARRAY
25208: PUSH
25209: LD_INT 2
25211: ARRAY
25212: PPUSH
25213: CALL_OW 428
25217: ST_TO_ADDR
// if not tmp then
25218: LD_VAR 0 4
25222: NOT
25223: IFFALSE 25227
// continue ;
25225: GO 25142
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25227: LD_VAR 0 4
25231: PUSH
25232: LD_INT 81
25234: PUSH
25235: LD_VAR 0 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: IN
25249: PUSH
25250: LD_EXP 66
25254: PUSH
25255: LD_VAR 0 1
25259: ARRAY
25260: PUSH
25261: LD_VAR 0 2
25265: ARRAY
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: PPUSH
25271: LD_EXP 66
25275: PUSH
25276: LD_VAR 0 1
25280: ARRAY
25281: PUSH
25282: LD_VAR 0 2
25286: ARRAY
25287: PUSH
25288: LD_INT 2
25290: ARRAY
25291: PPUSH
25292: CALL_OW 458
25296: AND
25297: IFFALSE 25391
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25299: LD_EXP 66
25303: PUSH
25304: LD_VAR 0 1
25308: ARRAY
25309: PUSH
25310: LD_VAR 0 2
25314: ARRAY
25315: PUSH
25316: LD_INT 1
25318: ARRAY
25319: PPUSH
25320: LD_EXP 66
25324: PUSH
25325: LD_VAR 0 1
25329: ARRAY
25330: PUSH
25331: LD_VAR 0 2
25335: ARRAY
25336: PUSH
25337: LD_INT 2
25339: ARRAY
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25350: LD_ADDR_EXP 66
25354: PUSH
25355: LD_EXP 66
25359: PPUSH
25360: LD_VAR 0 1
25364: PPUSH
25365: LD_EXP 66
25369: PUSH
25370: LD_VAR 0 1
25374: ARRAY
25375: PPUSH
25376: LD_VAR 0 2
25380: PPUSH
25381: CALL_OW 3
25385: PPUSH
25386: CALL_OW 1
25390: ST_TO_ADDR
// end ; end ;
25391: GO 25142
25393: POP
25394: POP
// end ;
25395: GO 25060
25397: POP
25398: POP
// end ;
25399: PPOPN 4
25401: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
// result := false ;
25406: LD_ADDR_VAR 0 4
25410: PUSH
25411: LD_INT 0
25413: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 264
25423: PUSH
25424: LD_INT 81
25426: EQUAL
25427: NOT
25428: IFFALSE 25432
// exit ;
25430: GO 25672
// index := GetElementIndex ( minersList , unit ) ;
25432: LD_ADDR_VAR 0 5
25436: PUSH
25437: LD_EXP 65
25441: PPUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL 31709 0 2
25451: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25452: LD_EXP 66
25456: PUSH
25457: LD_VAR 0 5
25461: ARRAY
25462: PUSH
25463: LD_EXP 67
25467: GREATEREQUAL
25468: IFFALSE 25472
// exit ;
25470: GO 25672
// ComMoveXY ( unit , x , y ) ;
25472: LD_VAR 0 1
25476: PPUSH
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_VAR 0 3
25486: PPUSH
25487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25491: LD_INT 35
25493: PPUSH
25494: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_VAR 0 2
25507: PPUSH
25508: LD_VAR 0 3
25512: PPUSH
25513: CALL 63470 0 3
25517: NOT
25518: PUSH
25519: LD_VAR 0 1
25523: PPUSH
25524: CALL_OW 314
25528: AND
25529: IFFALSE 25533
// exit ;
25531: GO 25672
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25533: LD_VAR 0 2
25537: PPUSH
25538: LD_VAR 0 3
25542: PPUSH
25543: CALL_OW 428
25547: PUSH
25548: LD_VAR 0 1
25552: EQUAL
25553: PUSH
25554: LD_VAR 0 1
25558: PPUSH
25559: CALL_OW 314
25563: NOT
25564: AND
25565: IFFALSE 25491
// PlaySoundXY ( x , y , PlantMine ) ;
25567: LD_VAR 0 2
25571: PPUSH
25572: LD_VAR 0 3
25576: PPUSH
25577: LD_STRING PlantMine
25579: PPUSH
25580: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25584: LD_VAR 0 2
25588: PPUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 255
25603: PPUSH
25604: LD_INT 0
25606: PPUSH
25607: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25611: LD_ADDR_EXP 66
25615: PUSH
25616: LD_EXP 66
25620: PPUSH
25621: LD_VAR 0 5
25625: PUSH
25626: LD_EXP 66
25630: PUSH
25631: LD_VAR 0 5
25635: ARRAY
25636: PUSH
25637: LD_INT 1
25639: PLUS
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PPUSH
25645: LD_VAR 0 2
25649: PUSH
25650: LD_VAR 0 3
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PPUSH
25659: CALL 31924 0 3
25663: ST_TO_ADDR
// result := true ;
25664: LD_ADDR_VAR 0 4
25668: PUSH
25669: LD_INT 1
25671: ST_TO_ADDR
// end ;
25672: LD_VAR 0 4
25676: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25677: LD_INT 0
25679: PPUSH
25680: PPUSH
25681: PPUSH
// if not unit in minersList then
25682: LD_VAR 0 1
25686: PUSH
25687: LD_EXP 65
25691: IN
25692: NOT
25693: IFFALSE 25697
// exit ;
25695: GO 26089
// index := GetElementIndex ( minersList , unit ) ;
25697: LD_ADDR_VAR 0 6
25701: PUSH
25702: LD_EXP 65
25706: PPUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL 31709 0 2
25716: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25717: LD_ADDR_VAR 0 5
25721: PUSH
25722: DOUBLE
25723: LD_EXP 66
25727: PUSH
25728: LD_VAR 0 6
25732: ARRAY
25733: INC
25734: ST_TO_ADDR
25735: LD_INT 1
25737: PUSH
25738: FOR_DOWNTO
25739: IFFALSE 25900
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25741: LD_EXP 66
25745: PUSH
25746: LD_VAR 0 6
25750: ARRAY
25751: PUSH
25752: LD_VAR 0 5
25756: ARRAY
25757: PUSH
25758: LD_INT 1
25760: ARRAY
25761: PUSH
25762: LD_VAR 0 2
25766: EQUAL
25767: PUSH
25768: LD_EXP 66
25772: PUSH
25773: LD_VAR 0 6
25777: ARRAY
25778: PUSH
25779: LD_VAR 0 5
25783: ARRAY
25784: PUSH
25785: LD_INT 2
25787: ARRAY
25788: PUSH
25789: LD_VAR 0 3
25793: EQUAL
25794: AND
25795: IFFALSE 25898
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25797: LD_EXP 66
25801: PUSH
25802: LD_VAR 0 6
25806: ARRAY
25807: PUSH
25808: LD_VAR 0 5
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PPUSH
25818: LD_EXP 66
25822: PUSH
25823: LD_VAR 0 6
25827: ARRAY
25828: PUSH
25829: LD_VAR 0 5
25833: ARRAY
25834: PUSH
25835: LD_INT 2
25837: ARRAY
25838: PPUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 255
25848: PPUSH
25849: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25853: LD_ADDR_EXP 66
25857: PUSH
25858: LD_EXP 66
25862: PPUSH
25863: LD_VAR 0 6
25867: PPUSH
25868: LD_EXP 66
25872: PUSH
25873: LD_VAR 0 6
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: CALL_OW 3
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// exit ;
25894: POP
25895: POP
25896: GO 26089
// end ; end ;
25898: GO 25738
25900: POP
25901: POP
// for i := minerMinesList [ index ] downto 1 do
25902: LD_ADDR_VAR 0 5
25906: PUSH
25907: DOUBLE
25908: LD_EXP 66
25912: PUSH
25913: LD_VAR 0 6
25917: ARRAY
25918: INC
25919: ST_TO_ADDR
25920: LD_INT 1
25922: PUSH
25923: FOR_DOWNTO
25924: IFFALSE 26087
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25926: LD_EXP 66
25930: PUSH
25931: LD_VAR 0 6
25935: ARRAY
25936: PUSH
25937: LD_VAR 0 5
25941: ARRAY
25942: PUSH
25943: LD_INT 1
25945: ARRAY
25946: PPUSH
25947: LD_EXP 66
25951: PUSH
25952: LD_VAR 0 6
25956: ARRAY
25957: PUSH
25958: LD_VAR 0 5
25962: ARRAY
25963: PUSH
25964: LD_INT 2
25966: ARRAY
25967: PPUSH
25968: LD_VAR 0 2
25972: PPUSH
25973: LD_VAR 0 3
25977: PPUSH
25978: CALL_OW 298
25982: PUSH
25983: LD_INT 6
25985: LESS
25986: IFFALSE 26085
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25988: LD_EXP 66
25992: PUSH
25993: LD_VAR 0 6
25997: ARRAY
25998: PUSH
25999: LD_VAR 0 5
26003: ARRAY
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: LD_EXP 66
26013: PUSH
26014: LD_VAR 0 6
26018: ARRAY
26019: PUSH
26020: LD_VAR 0 5
26024: ARRAY
26025: PUSH
26026: LD_INT 2
26028: ARRAY
26029: PPUSH
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 255
26039: PPUSH
26040: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26044: LD_ADDR_EXP 66
26048: PUSH
26049: LD_EXP 66
26053: PPUSH
26054: LD_VAR 0 6
26058: PPUSH
26059: LD_EXP 66
26063: PUSH
26064: LD_VAR 0 6
26068: ARRAY
26069: PPUSH
26070: LD_VAR 0 5
26074: PPUSH
26075: CALL_OW 3
26079: PPUSH
26080: CALL_OW 1
26084: ST_TO_ADDR
// end ; end ;
26085: GO 25923
26087: POP
26088: POP
// end ;
26089: LD_VAR 0 4
26093: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26094: LD_INT 0
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
26103: PPUSH
26104: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26105: LD_VAR 0 1
26109: PPUSH
26110: CALL_OW 264
26114: PUSH
26115: LD_INT 81
26117: EQUAL
26118: NOT
26119: PUSH
26120: LD_VAR 0 1
26124: PUSH
26125: LD_EXP 65
26129: IN
26130: NOT
26131: OR
26132: IFFALSE 26136
// exit ;
26134: GO 26458
// index := GetElementIndex ( minersList , unit ) ;
26136: LD_ADDR_VAR 0 6
26140: PUSH
26141: LD_EXP 65
26145: PPUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL 31709 0 2
26155: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26156: LD_ADDR_VAR 0 8
26160: PUSH
26161: LD_EXP 67
26165: PUSH
26166: LD_EXP 66
26170: PUSH
26171: LD_VAR 0 6
26175: ARRAY
26176: MINUS
26177: ST_TO_ADDR
// if not minesFreeAmount then
26178: LD_VAR 0 8
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 26458
// tmp := [ ] ;
26187: LD_ADDR_VAR 0 7
26191: PUSH
26192: EMPTY
26193: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26194: LD_ADDR_VAR 0 5
26198: PUSH
26199: DOUBLE
26200: LD_INT 1
26202: DEC
26203: ST_TO_ADDR
26204: LD_VAR 0 8
26208: PUSH
26209: FOR_TO
26210: IFFALSE 26405
// begin _d := rand ( 0 , 5 ) ;
26212: LD_ADDR_VAR 0 11
26216: PUSH
26217: LD_INT 0
26219: PPUSH
26220: LD_INT 5
26222: PPUSH
26223: CALL_OW 12
26227: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26228: LD_ADDR_VAR 0 12
26232: PUSH
26233: LD_INT 2
26235: PPUSH
26236: LD_INT 6
26238: PPUSH
26239: CALL_OW 12
26243: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26244: LD_ADDR_VAR 0 9
26248: PUSH
26249: LD_VAR 0 2
26253: PPUSH
26254: LD_VAR 0 11
26258: PPUSH
26259: LD_VAR 0 12
26263: PPUSH
26264: CALL_OW 272
26268: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26269: LD_ADDR_VAR 0 10
26273: PUSH
26274: LD_VAR 0 3
26278: PPUSH
26279: LD_VAR 0 11
26283: PPUSH
26284: LD_VAR 0 12
26288: PPUSH
26289: CALL_OW 273
26293: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26294: LD_VAR 0 9
26298: PPUSH
26299: LD_VAR 0 10
26303: PPUSH
26304: CALL_OW 488
26308: PUSH
26309: LD_VAR 0 9
26313: PUSH
26314: LD_VAR 0 10
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_VAR 0 7
26327: IN
26328: NOT
26329: AND
26330: PUSH
26331: LD_VAR 0 9
26335: PPUSH
26336: LD_VAR 0 10
26340: PPUSH
26341: CALL_OW 458
26345: NOT
26346: AND
26347: IFFALSE 26389
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26349: LD_ADDR_VAR 0 7
26353: PUSH
26354: LD_VAR 0 7
26358: PPUSH
26359: LD_VAR 0 7
26363: PUSH
26364: LD_INT 1
26366: PLUS
26367: PPUSH
26368: LD_VAR 0 9
26372: PUSH
26373: LD_VAR 0 10
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PPUSH
26382: CALL_OW 1
26386: ST_TO_ADDR
26387: GO 26403
// i := i - 1 ;
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_VAR 0 5
26398: PUSH
26399: LD_INT 1
26401: MINUS
26402: ST_TO_ADDR
// end ;
26403: GO 26209
26405: POP
26406: POP
// for i in tmp do
26407: LD_ADDR_VAR 0 5
26411: PUSH
26412: LD_VAR 0 7
26416: PUSH
26417: FOR_IN
26418: IFFALSE 26456
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_VAR 0 5
26429: PUSH
26430: LD_INT 1
26432: ARRAY
26433: PPUSH
26434: LD_VAR 0 5
26438: PUSH
26439: LD_INT 2
26441: ARRAY
26442: PPUSH
26443: CALL 25402 0 3
26447: NOT
26448: IFFALSE 26454
// exit ;
26450: POP
26451: POP
26452: GO 26458
26454: GO 26417
26456: POP
26457: POP
// end ;
26458: LD_VAR 0 4
26462: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26463: LD_INT 0
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
// if GetClass ( unit ) <> class_sniper then
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 257
26483: PUSH
26484: LD_INT 5
26486: NONEQUAL
26487: IFFALSE 26491
// exit ;
26489: GO 26957
// dist := 8 ;
26491: LD_ADDR_VAR 0 5
26495: PUSH
26496: LD_INT 8
26498: ST_TO_ADDR
// viewRange := 12 ;
26499: LD_ADDR_VAR 0 8
26503: PUSH
26504: LD_INT 12
26506: ST_TO_ADDR
// side := GetSide ( unit ) ;
26507: LD_ADDR_VAR 0 6
26511: PUSH
26512: LD_VAR 0 1
26516: PPUSH
26517: CALL_OW 255
26521: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26522: LD_INT 61
26524: PPUSH
26525: LD_VAR 0 6
26529: PPUSH
26530: CALL_OW 321
26534: PUSH
26535: LD_INT 2
26537: EQUAL
26538: IFFALSE 26548
// viewRange := 16 ;
26540: LD_ADDR_VAR 0 8
26544: PUSH
26545: LD_INT 16
26547: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26548: LD_VAR 0 1
26552: PPUSH
26553: LD_VAR 0 2
26557: PPUSH
26558: LD_VAR 0 3
26562: PPUSH
26563: CALL_OW 297
26567: PUSH
26568: LD_VAR 0 5
26572: GREATER
26573: IFFALSE 26652
// begin ComMoveXY ( unit , x , y ) ;
26575: LD_VAR 0 1
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26594: LD_INT 35
26596: PPUSH
26597: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26601: LD_VAR 0 1
26605: PPUSH
26606: LD_VAR 0 2
26610: PPUSH
26611: LD_VAR 0 3
26615: PPUSH
26616: CALL 63470 0 3
26620: NOT
26621: IFFALSE 26625
// exit ;
26623: GO 26957
// until GetDistUnitXY ( unit , x , y ) < dist ;
26625: LD_VAR 0 1
26629: PPUSH
26630: LD_VAR 0 2
26634: PPUSH
26635: LD_VAR 0 3
26639: PPUSH
26640: CALL_OW 297
26644: PUSH
26645: LD_VAR 0 5
26649: LESS
26650: IFFALSE 26594
// end ; ComTurnXY ( unit , x , y ) ;
26652: LD_VAR 0 1
26656: PPUSH
26657: LD_VAR 0 2
26661: PPUSH
26662: LD_VAR 0 3
26666: PPUSH
26667: CALL_OW 118
// repeat if Multiplayer then
26671: LD_OWVAR 4
26675: IFFALSE 26686
// wait ( 35 ) else
26677: LD_INT 35
26679: PPUSH
26680: CALL_OW 67
26684: GO 26693
// wait ( 5 ) ;
26686: LD_INT 5
26688: PPUSH
26689: CALL_OW 67
// _d := GetDir ( unit ) ;
26693: LD_ADDR_VAR 0 11
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 254
26707: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26708: LD_ADDR_VAR 0 7
26712: PUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 250
26722: PPUSH
26723: LD_VAR 0 1
26727: PPUSH
26728: CALL_OW 251
26732: PPUSH
26733: LD_VAR 0 2
26737: PPUSH
26738: LD_VAR 0 3
26742: PPUSH
26743: CALL 66078 0 4
26747: ST_TO_ADDR
// until dir = _d ;
26748: LD_VAR 0 7
26752: PUSH
26753: LD_VAR 0 11
26757: EQUAL
26758: IFFALSE 26671
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26760: LD_ADDR_VAR 0 9
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 250
26774: PPUSH
26775: LD_VAR 0 7
26779: PPUSH
26780: LD_VAR 0 5
26784: PPUSH
26785: CALL_OW 272
26789: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26790: LD_ADDR_VAR 0 10
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 251
26804: PPUSH
26805: LD_VAR 0 7
26809: PPUSH
26810: LD_VAR 0 5
26814: PPUSH
26815: CALL_OW 273
26819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26820: LD_VAR 0 9
26824: PPUSH
26825: LD_VAR 0 10
26829: PPUSH
26830: CALL_OW 488
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 26957
// ComAnimCustom ( unit , 1 ) ;
26839: LD_VAR 0 1
26843: PPUSH
26844: LD_INT 1
26846: PPUSH
26847: CALL_OW 592
// p := 0 ;
26851: LD_ADDR_VAR 0 12
26855: PUSH
26856: LD_INT 0
26858: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26859: LD_VAR 0 9
26863: PPUSH
26864: LD_VAR 0 10
26868: PPUSH
26869: LD_VAR 0 6
26873: PPUSH
26874: LD_VAR 0 8
26878: PPUSH
26879: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26883: LD_INT 35
26885: PPUSH
26886: CALL_OW 67
// p := Inc ( p ) ;
26890: LD_ADDR_VAR 0 12
26894: PUSH
26895: LD_VAR 0 12
26899: PPUSH
26900: CALL 66034 0 1
26904: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26905: LD_VAR 0 12
26909: PUSH
26910: LD_INT 3
26912: EQUAL
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 302
26923: NOT
26924: OR
26925: PUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 301
26935: OR
26936: IFFALSE 26883
// RemoveSeeing ( _x , _y , side ) ;
26938: LD_VAR 0 9
26942: PPUSH
26943: LD_VAR 0 10
26947: PPUSH
26948: LD_VAR 0 6
26952: PPUSH
26953: CALL_OW 331
// end ; end_of_file
26957: LD_VAR 0 4
26961: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26962: LD_INT 0
26964: PPUSH
26965: PPUSH
// if exist_mode then
26966: LD_VAR 0 2
26970: IFFALSE 26995
// unit := CreateCharacter ( prefix & ident ) else
26972: LD_ADDR_VAR 0 5
26976: PUSH
26977: LD_VAR 0 3
26981: PUSH
26982: LD_VAR 0 1
26986: STR
26987: PPUSH
26988: CALL_OW 34
26992: ST_TO_ADDR
26993: GO 27010
// unit := NewCharacter ( ident ) ;
26995: LD_ADDR_VAR 0 5
26999: PUSH
27000: LD_VAR 0 1
27004: PPUSH
27005: CALL_OW 25
27009: ST_TO_ADDR
// result := unit ;
27010: LD_ADDR_VAR 0 4
27014: PUSH
27015: LD_VAR 0 5
27019: ST_TO_ADDR
// end ;
27020: LD_VAR 0 4
27024: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27025: LD_INT 0
27027: PPUSH
27028: PPUSH
// if not side or not nation then
27029: LD_VAR 0 1
27033: NOT
27034: PUSH
27035: LD_VAR 0 2
27039: NOT
27040: OR
27041: IFFALSE 27045
// exit ;
27043: GO 27813
// case nation of nation_american :
27045: LD_VAR 0 2
27049: PUSH
27050: LD_INT 1
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27272
27058: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27059: LD_ADDR_VAR 0 4
27063: PUSH
27064: LD_INT 35
27066: PUSH
27067: LD_INT 45
27069: PUSH
27070: LD_INT 46
27072: PUSH
27073: LD_INT 47
27075: PUSH
27076: LD_INT 82
27078: PUSH
27079: LD_INT 83
27081: PUSH
27082: LD_INT 84
27084: PUSH
27085: LD_INT 85
27087: PUSH
27088: LD_INT 86
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 6
27099: PUSH
27100: LD_INT 15
27102: PUSH
27103: LD_INT 16
27105: PUSH
27106: LD_INT 7
27108: PUSH
27109: LD_INT 12
27111: PUSH
27112: LD_INT 13
27114: PUSH
27115: LD_INT 10
27117: PUSH
27118: LD_INT 14
27120: PUSH
27121: LD_INT 20
27123: PUSH
27124: LD_INT 21
27126: PUSH
27127: LD_INT 22
27129: PUSH
27130: LD_INT 25
27132: PUSH
27133: LD_INT 32
27135: PUSH
27136: LD_INT 27
27138: PUSH
27139: LD_INT 36
27141: PUSH
27142: LD_INT 69
27144: PUSH
27145: LD_INT 39
27147: PUSH
27148: LD_INT 34
27150: PUSH
27151: LD_INT 40
27153: PUSH
27154: LD_INT 48
27156: PUSH
27157: LD_INT 49
27159: PUSH
27160: LD_INT 50
27162: PUSH
27163: LD_INT 51
27165: PUSH
27166: LD_INT 52
27168: PUSH
27169: LD_INT 53
27171: PUSH
27172: LD_INT 54
27174: PUSH
27175: LD_INT 55
27177: PUSH
27178: LD_INT 56
27180: PUSH
27181: LD_INT 57
27183: PUSH
27184: LD_INT 58
27186: PUSH
27187: LD_INT 59
27189: PUSH
27190: LD_INT 60
27192: PUSH
27193: LD_INT 61
27195: PUSH
27196: LD_INT 62
27198: PUSH
27199: LD_INT 80
27201: PUSH
27202: LD_INT 82
27204: PUSH
27205: LD_INT 83
27207: PUSH
27208: LD_INT 84
27210: PUSH
27211: LD_INT 85
27213: PUSH
27214: LD_INT 86
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: ST_TO_ADDR
27270: GO 27737
27272: LD_INT 2
27274: DOUBLE
27275: EQUAL
27276: IFTRUE 27280
27278: GO 27506
27280: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27281: LD_ADDR_VAR 0 4
27285: PUSH
27286: LD_INT 35
27288: PUSH
27289: LD_INT 45
27291: PUSH
27292: LD_INT 46
27294: PUSH
27295: LD_INT 47
27297: PUSH
27298: LD_INT 82
27300: PUSH
27301: LD_INT 83
27303: PUSH
27304: LD_INT 84
27306: PUSH
27307: LD_INT 85
27309: PUSH
27310: LD_INT 87
27312: PUSH
27313: LD_INT 70
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 11
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: LD_INT 4
27327: PUSH
27328: LD_INT 5
27330: PUSH
27331: LD_INT 6
27333: PUSH
27334: LD_INT 15
27336: PUSH
27337: LD_INT 18
27339: PUSH
27340: LD_INT 7
27342: PUSH
27343: LD_INT 17
27345: PUSH
27346: LD_INT 8
27348: PUSH
27349: LD_INT 20
27351: PUSH
27352: LD_INT 21
27354: PUSH
27355: LD_INT 22
27357: PUSH
27358: LD_INT 72
27360: PUSH
27361: LD_INT 26
27363: PUSH
27364: LD_INT 69
27366: PUSH
27367: LD_INT 39
27369: PUSH
27370: LD_INT 40
27372: PUSH
27373: LD_INT 41
27375: PUSH
27376: LD_INT 42
27378: PUSH
27379: LD_INT 43
27381: PUSH
27382: LD_INT 48
27384: PUSH
27385: LD_INT 49
27387: PUSH
27388: LD_INT 50
27390: PUSH
27391: LD_INT 51
27393: PUSH
27394: LD_INT 52
27396: PUSH
27397: LD_INT 53
27399: PUSH
27400: LD_INT 54
27402: PUSH
27403: LD_INT 55
27405: PUSH
27406: LD_INT 56
27408: PUSH
27409: LD_INT 60
27411: PUSH
27412: LD_INT 61
27414: PUSH
27415: LD_INT 62
27417: PUSH
27418: LD_INT 66
27420: PUSH
27421: LD_INT 67
27423: PUSH
27424: LD_INT 68
27426: PUSH
27427: LD_INT 81
27429: PUSH
27430: LD_INT 82
27432: PUSH
27433: LD_INT 83
27435: PUSH
27436: LD_INT 84
27438: PUSH
27439: LD_INT 85
27441: PUSH
27442: LD_INT 87
27444: PUSH
27445: LD_INT 88
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 27737
27506: LD_INT 3
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27736
27514: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27515: LD_ADDR_VAR 0 4
27519: PUSH
27520: LD_INT 46
27522: PUSH
27523: LD_INT 47
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 82
27534: PUSH
27535: LD_INT 83
27537: PUSH
27538: LD_INT 84
27540: PUSH
27541: LD_INT 85
27543: PUSH
27544: LD_INT 86
27546: PUSH
27547: LD_INT 11
27549: PUSH
27550: LD_INT 9
27552: PUSH
27553: LD_INT 20
27555: PUSH
27556: LD_INT 19
27558: PUSH
27559: LD_INT 21
27561: PUSH
27562: LD_INT 24
27564: PUSH
27565: LD_INT 22
27567: PUSH
27568: LD_INT 25
27570: PUSH
27571: LD_INT 28
27573: PUSH
27574: LD_INT 29
27576: PUSH
27577: LD_INT 30
27579: PUSH
27580: LD_INT 31
27582: PUSH
27583: LD_INT 37
27585: PUSH
27586: LD_INT 38
27588: PUSH
27589: LD_INT 32
27591: PUSH
27592: LD_INT 27
27594: PUSH
27595: LD_INT 33
27597: PUSH
27598: LD_INT 69
27600: PUSH
27601: LD_INT 39
27603: PUSH
27604: LD_INT 34
27606: PUSH
27607: LD_INT 40
27609: PUSH
27610: LD_INT 71
27612: PUSH
27613: LD_INT 23
27615: PUSH
27616: LD_INT 44
27618: PUSH
27619: LD_INT 48
27621: PUSH
27622: LD_INT 49
27624: PUSH
27625: LD_INT 50
27627: PUSH
27628: LD_INT 51
27630: PUSH
27631: LD_INT 52
27633: PUSH
27634: LD_INT 53
27636: PUSH
27637: LD_INT 54
27639: PUSH
27640: LD_INT 55
27642: PUSH
27643: LD_INT 56
27645: PUSH
27646: LD_INT 57
27648: PUSH
27649: LD_INT 58
27651: PUSH
27652: LD_INT 59
27654: PUSH
27655: LD_INT 63
27657: PUSH
27658: LD_INT 64
27660: PUSH
27661: LD_INT 65
27663: PUSH
27664: LD_INT 82
27666: PUSH
27667: LD_INT 83
27669: PUSH
27670: LD_INT 84
27672: PUSH
27673: LD_INT 85
27675: PUSH
27676: LD_INT 86
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
27734: GO 27737
27736: POP
// if state > - 1 and state < 3 then
27737: LD_VAR 0 3
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: GREATER
27746: PUSH
27747: LD_VAR 0 3
27751: PUSH
27752: LD_INT 3
27754: LESS
27755: AND
27756: IFFALSE 27813
// for i in result do
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_VAR 0 4
27767: PUSH
27768: FOR_IN
27769: IFFALSE 27811
// if GetTech ( i , side ) <> state then
27771: LD_VAR 0 5
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 321
27785: PUSH
27786: LD_VAR 0 3
27790: NONEQUAL
27791: IFFALSE 27809
// result := result diff i ;
27793: LD_ADDR_VAR 0 4
27797: PUSH
27798: LD_VAR 0 4
27802: PUSH
27803: LD_VAR 0 5
27807: DIFF
27808: ST_TO_ADDR
27809: GO 27768
27811: POP
27812: POP
// end ;
27813: LD_VAR 0 4
27817: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27818: LD_INT 0
27820: PPUSH
27821: PPUSH
27822: PPUSH
// result := true ;
27823: LD_ADDR_VAR 0 3
27827: PUSH
27828: LD_INT 1
27830: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27831: LD_ADDR_VAR 0 5
27835: PUSH
27836: LD_VAR 0 2
27840: PPUSH
27841: CALL_OW 480
27845: ST_TO_ADDR
// if not tmp then
27846: LD_VAR 0 5
27850: NOT
27851: IFFALSE 27855
// exit ;
27853: GO 27904
// for i in tmp do
27855: LD_ADDR_VAR 0 4
27859: PUSH
27860: LD_VAR 0 5
27864: PUSH
27865: FOR_IN
27866: IFFALSE 27902
// if GetTech ( i , side ) <> state_researched then
27868: LD_VAR 0 4
27872: PPUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 321
27882: PUSH
27883: LD_INT 2
27885: NONEQUAL
27886: IFFALSE 27900
// begin result := false ;
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_INT 0
27895: ST_TO_ADDR
// exit ;
27896: POP
27897: POP
27898: GO 27904
// end ;
27900: GO 27865
27902: POP
27903: POP
// end ;
27904: LD_VAR 0 3
27908: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27909: LD_INT 0
27911: PPUSH
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27924: LD_VAR 0 1
27928: NOT
27929: PUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: CALL_OW 257
27939: PUSH
27940: LD_INT 9
27942: NONEQUAL
27943: OR
27944: IFFALSE 27948
// exit ;
27946: GO 28521
// side := GetSide ( unit ) ;
27948: LD_ADDR_VAR 0 9
27952: PUSH
27953: LD_VAR 0 1
27957: PPUSH
27958: CALL_OW 255
27962: ST_TO_ADDR
// tech_space := tech_spacanom ;
27963: LD_ADDR_VAR 0 12
27967: PUSH
27968: LD_INT 29
27970: ST_TO_ADDR
// tech_time := tech_taurad ;
27971: LD_ADDR_VAR 0 13
27975: PUSH
27976: LD_INT 28
27978: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27979: LD_ADDR_VAR 0 11
27983: PUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 310
27993: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27994: LD_VAR 0 11
27998: PPUSH
27999: CALL_OW 247
28003: PUSH
28004: LD_INT 2
28006: EQUAL
28007: IFFALSE 28011
// exit ;
28009: GO 28521
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28011: LD_ADDR_VAR 0 8
28015: PUSH
28016: LD_INT 81
28018: PUSH
28019: LD_VAR 0 9
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 3
28030: PUSH
28031: LD_INT 21
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: ST_TO_ADDR
// if not tmp then
28054: LD_VAR 0 8
28058: NOT
28059: IFFALSE 28063
// exit ;
28061: GO 28521
// if in_unit then
28063: LD_VAR 0 11
28067: IFFALSE 28091
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28069: LD_ADDR_VAR 0 10
28073: PUSH
28074: LD_VAR 0 8
28078: PPUSH
28079: LD_VAR 0 11
28083: PPUSH
28084: CALL_OW 74
28088: ST_TO_ADDR
28089: GO 28111
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28091: LD_ADDR_VAR 0 10
28095: PUSH
28096: LD_VAR 0 8
28100: PPUSH
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL_OW 74
28110: ST_TO_ADDR
// if not enemy then
28111: LD_VAR 0 10
28115: NOT
28116: IFFALSE 28120
// exit ;
28118: GO 28521
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28120: LD_VAR 0 11
28124: PUSH
28125: LD_VAR 0 11
28129: PPUSH
28130: LD_VAR 0 10
28134: PPUSH
28135: CALL_OW 296
28139: PUSH
28140: LD_INT 13
28142: GREATER
28143: AND
28144: PUSH
28145: LD_VAR 0 1
28149: PPUSH
28150: LD_VAR 0 10
28154: PPUSH
28155: CALL_OW 296
28159: PUSH
28160: LD_INT 12
28162: GREATER
28163: OR
28164: IFFALSE 28168
// exit ;
28166: GO 28521
// missile := [ 1 ] ;
28168: LD_ADDR_VAR 0 14
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28179: LD_VAR 0 9
28183: PPUSH
28184: LD_VAR 0 12
28188: PPUSH
28189: CALL_OW 325
28193: IFFALSE 28222
// missile := Replace ( missile , missile + 1 , 2 ) ;
28195: LD_ADDR_VAR 0 14
28199: PUSH
28200: LD_VAR 0 14
28204: PPUSH
28205: LD_VAR 0 14
28209: PUSH
28210: LD_INT 1
28212: PLUS
28213: PPUSH
28214: LD_INT 2
28216: PPUSH
28217: CALL_OW 1
28221: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28222: LD_VAR 0 9
28226: PPUSH
28227: LD_VAR 0 13
28231: PPUSH
28232: CALL_OW 325
28236: PUSH
28237: LD_VAR 0 10
28241: PPUSH
28242: CALL_OW 255
28246: PPUSH
28247: LD_VAR 0 13
28251: PPUSH
28252: CALL_OW 325
28256: NOT
28257: AND
28258: IFFALSE 28287
// missile := Replace ( missile , missile + 1 , 3 ) ;
28260: LD_ADDR_VAR 0 14
28264: PUSH
28265: LD_VAR 0 14
28269: PPUSH
28270: LD_VAR 0 14
28274: PUSH
28275: LD_INT 1
28277: PLUS
28278: PPUSH
28279: LD_INT 3
28281: PPUSH
28282: CALL_OW 1
28286: ST_TO_ADDR
// if missile < 2 then
28287: LD_VAR 0 14
28291: PUSH
28292: LD_INT 2
28294: LESS
28295: IFFALSE 28299
// exit ;
28297: GO 28521
// x := GetX ( enemy ) ;
28299: LD_ADDR_VAR 0 4
28303: PUSH
28304: LD_VAR 0 10
28308: PPUSH
28309: CALL_OW 250
28313: ST_TO_ADDR
// y := GetY ( enemy ) ;
28314: LD_ADDR_VAR 0 5
28318: PUSH
28319: LD_VAR 0 10
28323: PPUSH
28324: CALL_OW 251
28328: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28329: LD_ADDR_VAR 0 6
28333: PUSH
28334: LD_VAR 0 4
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 12
28350: PLUS
28351: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28352: LD_ADDR_VAR 0 7
28356: PUSH
28357: LD_VAR 0 5
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PPUSH
28366: LD_INT 1
28368: PPUSH
28369: CALL_OW 12
28373: PLUS
28374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28375: LD_VAR 0 6
28379: PPUSH
28380: LD_VAR 0 7
28384: PPUSH
28385: CALL_OW 488
28389: NOT
28390: IFFALSE 28412
// begin _x := x ;
28392: LD_ADDR_VAR 0 6
28396: PUSH
28397: LD_VAR 0 4
28401: ST_TO_ADDR
// _y := y ;
28402: LD_ADDR_VAR 0 7
28406: PUSH
28407: LD_VAR 0 5
28411: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28412: LD_ADDR_VAR 0 3
28416: PUSH
28417: LD_INT 1
28419: PPUSH
28420: LD_VAR 0 14
28424: PPUSH
28425: CALL_OW 12
28429: ST_TO_ADDR
// case i of 1 :
28430: LD_VAR 0 3
28434: PUSH
28435: LD_INT 1
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28460
28443: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 10
28453: PPUSH
28454: CALL_OW 115
28458: GO 28521
28460: LD_INT 2
28462: DOUBLE
28463: EQUAL
28464: IFTRUE 28468
28466: GO 28490
28468: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28469: LD_VAR 0 1
28473: PPUSH
28474: LD_VAR 0 6
28478: PPUSH
28479: LD_VAR 0 7
28483: PPUSH
28484: CALL_OW 153
28488: GO 28521
28490: LD_INT 3
28492: DOUBLE
28493: EQUAL
28494: IFTRUE 28498
28496: GO 28520
28498: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28499: LD_VAR 0 1
28503: PPUSH
28504: LD_VAR 0 6
28508: PPUSH
28509: LD_VAR 0 7
28513: PPUSH
28514: CALL_OW 154
28518: GO 28521
28520: POP
// end ;
28521: LD_VAR 0 2
28525: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
// if not unit or not building then
28534: LD_VAR 0 1
28538: NOT
28539: PUSH
28540: LD_VAR 0 2
28544: NOT
28545: OR
28546: IFFALSE 28550
// exit ;
28548: GO 28708
// x := GetX ( building ) ;
28550: LD_ADDR_VAR 0 5
28554: PUSH
28555: LD_VAR 0 2
28559: PPUSH
28560: CALL_OW 250
28564: ST_TO_ADDR
// y := GetY ( building ) ;
28565: LD_ADDR_VAR 0 6
28569: PUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: CALL_OW 251
28579: ST_TO_ADDR
// for i = 0 to 5 do
28580: LD_ADDR_VAR 0 4
28584: PUSH
28585: DOUBLE
28586: LD_INT 0
28588: DEC
28589: ST_TO_ADDR
28590: LD_INT 5
28592: PUSH
28593: FOR_TO
28594: IFFALSE 28706
// begin _x := ShiftX ( x , i , 3 ) ;
28596: LD_ADDR_VAR 0 7
28600: PUSH
28601: LD_VAR 0 5
28605: PPUSH
28606: LD_VAR 0 4
28610: PPUSH
28611: LD_INT 3
28613: PPUSH
28614: CALL_OW 272
28618: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28619: LD_ADDR_VAR 0 8
28623: PUSH
28624: LD_VAR 0 6
28628: PPUSH
28629: LD_VAR 0 4
28633: PPUSH
28634: LD_INT 3
28636: PPUSH
28637: CALL_OW 273
28641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28642: LD_VAR 0 7
28646: PPUSH
28647: LD_VAR 0 8
28651: PPUSH
28652: CALL_OW 488
28656: NOT
28657: IFFALSE 28661
// continue ;
28659: GO 28593
// if HexInfo ( _x , _y ) = 0 then
28661: LD_VAR 0 7
28665: PPUSH
28666: LD_VAR 0 8
28670: PPUSH
28671: CALL_OW 428
28675: PUSH
28676: LD_INT 0
28678: EQUAL
28679: IFFALSE 28704
// begin ComMoveXY ( unit , _x , _y ) ;
28681: LD_VAR 0 1
28685: PPUSH
28686: LD_VAR 0 7
28690: PPUSH
28691: LD_VAR 0 8
28695: PPUSH
28696: CALL_OW 111
// exit ;
28700: POP
28701: POP
28702: GO 28708
// end ; end ;
28704: GO 28593
28706: POP
28707: POP
// end ;
28708: LD_VAR 0 3
28712: RET
// export function ScanBase ( side , base_area ) ; begin
28713: LD_INT 0
28715: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: LD_INT 81
28728: PUSH
28729: LD_VAR 0 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 70
28742: ST_TO_ADDR
// end ;
28743: LD_VAR 0 3
28747: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28748: LD_INT 0
28750: PPUSH
28751: PPUSH
28752: PPUSH
28753: PPUSH
// result := false ;
28754: LD_ADDR_VAR 0 2
28758: PUSH
28759: LD_INT 0
28761: ST_TO_ADDR
// side := GetSide ( unit ) ;
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_VAR 0 1
28771: PPUSH
28772: CALL_OW 255
28776: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28777: LD_ADDR_VAR 0 4
28781: PUSH
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 248
28791: ST_TO_ADDR
// case nat of 1 :
28792: LD_VAR 0 4
28796: PUSH
28797: LD_INT 1
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28816
28805: POP
// tech := tech_lassight ; 2 :
28806: LD_ADDR_VAR 0 5
28810: PUSH
28811: LD_INT 12
28813: ST_TO_ADDR
28814: GO 28855
28816: LD_INT 2
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28835
28824: POP
// tech := tech_mortar ; 3 :
28825: LD_ADDR_VAR 0 5
28829: PUSH
28830: LD_INT 41
28832: ST_TO_ADDR
28833: GO 28855
28835: LD_INT 3
28837: DOUBLE
28838: EQUAL
28839: IFTRUE 28843
28841: GO 28854
28843: POP
// tech := tech_bazooka ; end ;
28844: LD_ADDR_VAR 0 5
28848: PUSH
28849: LD_INT 44
28851: ST_TO_ADDR
28852: GO 28855
28854: POP
// if Researched ( side , tech ) then
28855: LD_VAR 0 3
28859: PPUSH
28860: LD_VAR 0 5
28864: PPUSH
28865: CALL_OW 325
28869: IFFALSE 28896
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28871: LD_ADDR_VAR 0 2
28875: PUSH
28876: LD_INT 5
28878: PUSH
28879: LD_INT 8
28881: PUSH
28882: LD_INT 9
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: PUSH
28890: LD_VAR 0 4
28894: ARRAY
28895: ST_TO_ADDR
// end ;
28896: LD_VAR 0 2
28900: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28901: LD_INT 0
28903: PPUSH
28904: PPUSH
28905: PPUSH
// if not mines then
28906: LD_VAR 0 2
28910: NOT
28911: IFFALSE 28915
// exit ;
28913: GO 29059
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28915: LD_ADDR_VAR 0 5
28919: PUSH
28920: LD_INT 81
28922: PUSH
28923: LD_VAR 0 1
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: LD_INT 21
28937: PUSH
28938: LD_INT 3
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PPUSH
28953: CALL_OW 69
28957: ST_TO_ADDR
// for i in mines do
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 2
28967: PUSH
28968: FOR_IN
28969: IFFALSE 29057
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28971: LD_VAR 0 4
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: LD_VAR 0 4
28984: PUSH
28985: LD_INT 2
28987: ARRAY
28988: PPUSH
28989: CALL_OW 458
28993: NOT
28994: IFFALSE 28998
// continue ;
28996: GO 28968
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28998: LD_VAR 0 4
29002: PUSH
29003: LD_INT 1
29005: ARRAY
29006: PPUSH
29007: LD_VAR 0 4
29011: PUSH
29012: LD_INT 2
29014: ARRAY
29015: PPUSH
29016: CALL_OW 428
29020: PUSH
29021: LD_VAR 0 5
29025: IN
29026: IFFALSE 29055
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29028: LD_VAR 0 4
29032: PUSH
29033: LD_INT 1
29035: ARRAY
29036: PPUSH
29037: LD_VAR 0 4
29041: PUSH
29042: LD_INT 2
29044: ARRAY
29045: PPUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 456
// end ;
29055: GO 28968
29057: POP
29058: POP
// end ;
29059: LD_VAR 0 3
29063: RET
// export function Count ( array ) ; begin
29064: LD_INT 0
29066: PPUSH
// result := array + 0 ;
29067: LD_ADDR_VAR 0 2
29071: PUSH
29072: LD_VAR 0 1
29076: PUSH
29077: LD_INT 0
29079: PLUS
29080: ST_TO_ADDR
// end ;
29081: LD_VAR 0 2
29085: RET
// export function IsEmpty ( building ) ; begin
29086: LD_INT 0
29088: PPUSH
// if not building then
29089: LD_VAR 0 1
29093: NOT
29094: IFFALSE 29098
// exit ;
29096: GO 29141
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29098: LD_ADDR_VAR 0 2
29102: PUSH
29103: LD_VAR 0 1
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 255
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 58
29127: PUSH
29128: EMPTY
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PPUSH
29135: CALL_OW 69
29139: IN
29140: ST_TO_ADDR
// end ;
29141: LD_VAR 0 2
29145: RET
// export function IsNotFull ( building ) ; var places ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
// if not building then
29150: LD_VAR 0 1
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29187
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 1
29168: PPUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 62
29174: PUSH
29175: EMPTY
29176: LIST
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PPUSH
29182: CALL_OW 72
29186: ST_TO_ADDR
// end ;
29187: LD_VAR 0 2
29191: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29192: LD_INT 0
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
// tmp := [ ] ;
29198: LD_ADDR_VAR 0 3
29202: PUSH
29203: EMPTY
29204: ST_TO_ADDR
// list := [ ] ;
29205: LD_ADDR_VAR 0 5
29209: PUSH
29210: EMPTY
29211: ST_TO_ADDR
// for i = 16 to 25 do
29212: LD_ADDR_VAR 0 4
29216: PUSH
29217: DOUBLE
29218: LD_INT 16
29220: DEC
29221: ST_TO_ADDR
29222: LD_INT 25
29224: PUSH
29225: FOR_TO
29226: IFFALSE 29299
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29228: LD_ADDR_VAR 0 3
29232: PUSH
29233: LD_VAR 0 3
29237: PUSH
29238: LD_INT 22
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 255
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 91
29257: PUSH
29258: LD_VAR 0 1
29262: PUSH
29263: LD_INT 6
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 30
29273: PUSH
29274: LD_VAR 0 4
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: PPUSH
29291: CALL_OW 69
29295: ADD
29296: ST_TO_ADDR
29297: GO 29225
29299: POP
29300: POP
// for i = 1 to tmp do
29301: LD_ADDR_VAR 0 4
29305: PUSH
29306: DOUBLE
29307: LD_INT 1
29309: DEC
29310: ST_TO_ADDR
29311: LD_VAR 0 3
29315: PUSH
29316: FOR_TO
29317: IFFALSE 29405
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29319: LD_ADDR_VAR 0 5
29323: PUSH
29324: LD_VAR 0 5
29328: PUSH
29329: LD_VAR 0 3
29333: PUSH
29334: LD_VAR 0 4
29338: ARRAY
29339: PPUSH
29340: CALL_OW 266
29344: PUSH
29345: LD_VAR 0 3
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PPUSH
29356: CALL_OW 250
29360: PUSH
29361: LD_VAR 0 3
29365: PUSH
29366: LD_VAR 0 4
29370: ARRAY
29371: PPUSH
29372: CALL_OW 251
29376: PUSH
29377: LD_VAR 0 3
29381: PUSH
29382: LD_VAR 0 4
29386: ARRAY
29387: PPUSH
29388: CALL_OW 254
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: ADD
29402: ST_TO_ADDR
29403: GO 29316
29405: POP
29406: POP
// result := list ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_VAR 0 5
29416: ST_TO_ADDR
// end ;
29417: LD_VAR 0 2
29421: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29422: LD_INT 0
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
// if not factory then
29431: LD_VAR 0 1
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 30033
// if control = control_apeman then
29440: LD_VAR 0 4
29444: PUSH
29445: LD_INT 5
29447: EQUAL
29448: IFFALSE 29557
// begin tmp := UnitsInside ( factory ) ;
29450: LD_ADDR_VAR 0 8
29454: PUSH
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 313
29464: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29465: LD_VAR 0 8
29469: PPUSH
29470: LD_INT 25
29472: PUSH
29473: LD_INT 12
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PPUSH
29480: CALL_OW 72
29484: NOT
29485: IFFALSE 29495
// control := control_manual ;
29487: LD_ADDR_VAR 0 4
29491: PUSH
29492: LD_INT 1
29494: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29495: LD_ADDR_VAR 0 8
29499: PUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL 29192 0 1
29509: ST_TO_ADDR
// if tmp then
29510: LD_VAR 0 8
29514: IFFALSE 29557
// begin for i in tmp do
29516: LD_ADDR_VAR 0 7
29520: PUSH
29521: LD_VAR 0 8
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29555
// if i [ 1 ] = b_ext_radio then
29529: LD_VAR 0 7
29533: PUSH
29534: LD_INT 1
29536: ARRAY
29537: PUSH
29538: LD_INT 22
29540: EQUAL
29541: IFFALSE 29553
// begin control := control_remote ;
29543: LD_ADDR_VAR 0 4
29547: PUSH
29548: LD_INT 2
29550: ST_TO_ADDR
// break ;
29551: GO 29555
// end ;
29553: GO 29526
29555: POP
29556: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29557: LD_VAR 0 1
29561: PPUSH
29562: LD_VAR 0 2
29566: PPUSH
29567: LD_VAR 0 3
29571: PPUSH
29572: LD_VAR 0 4
29576: PPUSH
29577: LD_VAR 0 5
29581: PPUSH
29582: CALL_OW 448
29586: IFFALSE 29621
// begin result := [ chassis , engine , control , weapon ] ;
29588: LD_ADDR_VAR 0 6
29592: PUSH
29593: LD_VAR 0 2
29597: PUSH
29598: LD_VAR 0 3
29602: PUSH
29603: LD_VAR 0 4
29607: PUSH
29608: LD_VAR 0 5
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
// exit ;
29619: GO 30033
// end ; _chassis := AvailableChassisList ( factory ) ;
29621: LD_ADDR_VAR 0 9
29625: PUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 475
29635: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29636: LD_ADDR_VAR 0 11
29640: PUSH
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 476
29650: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29651: LD_ADDR_VAR 0 12
29655: PUSH
29656: LD_VAR 0 1
29660: PPUSH
29661: CALL_OW 477
29665: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29666: LD_ADDR_VAR 0 10
29670: PUSH
29671: LD_VAR 0 1
29675: PPUSH
29676: CALL_OW 478
29680: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29681: LD_VAR 0 9
29685: NOT
29686: PUSH
29687: LD_VAR 0 11
29691: NOT
29692: OR
29693: PUSH
29694: LD_VAR 0 12
29698: NOT
29699: OR
29700: PUSH
29701: LD_VAR 0 10
29705: NOT
29706: OR
29707: IFFALSE 29742
// begin result := [ chassis , engine , control , weapon ] ;
29709: LD_ADDR_VAR 0 6
29713: PUSH
29714: LD_VAR 0 2
29718: PUSH
29719: LD_VAR 0 3
29723: PUSH
29724: LD_VAR 0 4
29728: PUSH
29729: LD_VAR 0 5
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
// exit ;
29740: GO 30033
// end ; if not chassis in _chassis then
29742: LD_VAR 0 2
29746: PUSH
29747: LD_VAR 0 9
29751: IN
29752: NOT
29753: IFFALSE 29779
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29755: LD_ADDR_VAR 0 2
29759: PUSH
29760: LD_VAR 0 9
29764: PUSH
29765: LD_INT 1
29767: PPUSH
29768: LD_VAR 0 9
29772: PPUSH
29773: CALL_OW 12
29777: ARRAY
29778: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29779: LD_VAR 0 2
29783: PPUSH
29784: LD_VAR 0 3
29788: PPUSH
29789: CALL 30038 0 2
29793: NOT
29794: IFFALSE 29853
// repeat engine := _engine [ 1 ] ;
29796: LD_ADDR_VAR 0 3
29800: PUSH
29801: LD_VAR 0 11
29805: PUSH
29806: LD_INT 1
29808: ARRAY
29809: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29810: LD_ADDR_VAR 0 11
29814: PUSH
29815: LD_VAR 0 11
29819: PPUSH
29820: LD_INT 1
29822: PPUSH
29823: CALL_OW 3
29827: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29828: LD_VAR 0 2
29832: PPUSH
29833: LD_VAR 0 3
29837: PPUSH
29838: CALL 30038 0 2
29842: PUSH
29843: LD_VAR 0 11
29847: PUSH
29848: EMPTY
29849: EQUAL
29850: OR
29851: IFFALSE 29796
// if not control in _control then
29853: LD_VAR 0 4
29857: PUSH
29858: LD_VAR 0 12
29862: IN
29863: NOT
29864: IFFALSE 29890
// control := _control [ rand ( 1 , _control ) ] ;
29866: LD_ADDR_VAR 0 4
29870: PUSH
29871: LD_VAR 0 12
29875: PUSH
29876: LD_INT 1
29878: PPUSH
29879: LD_VAR 0 12
29883: PPUSH
29884: CALL_OW 12
29888: ARRAY
29889: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_VAR 0 5
29899: PPUSH
29900: CALL 30258 0 2
29904: NOT
29905: IFFALSE 29964
// repeat weapon := _weapon [ 1 ] ;
29907: LD_ADDR_VAR 0 5
29911: PUSH
29912: LD_VAR 0 10
29916: PUSH
29917: LD_INT 1
29919: ARRAY
29920: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29921: LD_ADDR_VAR 0 10
29925: PUSH
29926: LD_VAR 0 10
29930: PPUSH
29931: LD_INT 1
29933: PPUSH
29934: CALL_OW 3
29938: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29939: LD_VAR 0 2
29943: PPUSH
29944: LD_VAR 0 5
29948: PPUSH
29949: CALL 30258 0 2
29953: PUSH
29954: LD_VAR 0 10
29958: PUSH
29959: EMPTY
29960: EQUAL
29961: OR
29962: IFFALSE 29907
// result := [ ] ;
29964: LD_ADDR_VAR 0 6
29968: PUSH
29969: EMPTY
29970: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29971: LD_VAR 0 1
29975: PPUSH
29976: LD_VAR 0 2
29980: PPUSH
29981: LD_VAR 0 3
29985: PPUSH
29986: LD_VAR 0 4
29990: PPUSH
29991: LD_VAR 0 5
29995: PPUSH
29996: CALL_OW 448
30000: IFFALSE 30033
// result := [ chassis , engine , control , weapon ] ;
30002: LD_ADDR_VAR 0 6
30006: PUSH
30007: LD_VAR 0 2
30011: PUSH
30012: LD_VAR 0 3
30016: PUSH
30017: LD_VAR 0 4
30021: PUSH
30022: LD_VAR 0 5
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: ST_TO_ADDR
// end ;
30033: LD_VAR 0 6
30037: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30038: LD_INT 0
30040: PPUSH
// if not chassis or not engine then
30041: LD_VAR 0 1
30045: NOT
30046: PUSH
30047: LD_VAR 0 2
30051: NOT
30052: OR
30053: IFFALSE 30057
// exit ;
30055: GO 30253
// case engine of engine_solar :
30057: LD_VAR 0 2
30061: PUSH
30062: LD_INT 2
30064: DOUBLE
30065: EQUAL
30066: IFTRUE 30070
30068: GO 30108
30070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30071: LD_ADDR_VAR 0 3
30075: PUSH
30076: LD_INT 11
30078: PUSH
30079: LD_INT 12
30081: PUSH
30082: LD_INT 13
30084: PUSH
30085: LD_INT 14
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: ST_TO_ADDR
30106: GO 30237
30108: LD_INT 1
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30116
30114: GO 30178
30116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30117: LD_ADDR_VAR 0 3
30121: PUSH
30122: LD_INT 11
30124: PUSH
30125: LD_INT 12
30127: PUSH
30128: LD_INT 13
30130: PUSH
30131: LD_INT 14
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: LD_INT 5
30148: PUSH
30149: LD_INT 21
30151: PUSH
30152: LD_INT 23
30154: PUSH
30155: LD_INT 22
30157: PUSH
30158: LD_INT 24
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: ST_TO_ADDR
30176: GO 30237
30178: LD_INT 3
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30236
30186: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 13
30194: PUSH
30195: LD_INT 14
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: LD_INT 4
30206: PUSH
30207: LD_INT 5
30209: PUSH
30210: LD_INT 21
30212: PUSH
30213: LD_INT 22
30215: PUSH
30216: LD_INT 23
30218: PUSH
30219: LD_INT 24
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
30234: GO 30237
30236: POP
// result := ( chassis in result ) ;
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_VAR 0 1
30246: PUSH
30247: LD_VAR 0 3
30251: IN
30252: ST_TO_ADDR
// end ;
30253: LD_VAR 0 3
30257: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30258: LD_INT 0
30260: PPUSH
// if not chassis or not weapon then
30261: LD_VAR 0 1
30265: NOT
30266: PUSH
30267: LD_VAR 0 2
30271: NOT
30272: OR
30273: IFFALSE 30277
// exit ;
30275: GO 31337
// case weapon of us_machine_gun :
30277: LD_VAR 0 2
30281: PUSH
30282: LD_INT 2
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30290
30288: GO 30320
30290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30291: LD_ADDR_VAR 0 3
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 4
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: ST_TO_ADDR
30318: GO 31321
30320: LD_INT 3
30322: DOUBLE
30323: EQUAL
30324: IFTRUE 30328
30326: GO 30358
30328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30329: LD_ADDR_VAR 0 3
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: LD_INT 4
30345: PUSH
30346: LD_INT 5
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
30356: GO 31321
30358: LD_INT 11
30360: DOUBLE
30361: EQUAL
30362: IFTRUE 30366
30364: GO 30396
30366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 4
30383: PUSH
30384: LD_INT 5
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
30394: GO 31321
30396: LD_INT 4
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30430
30404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: LD_INT 4
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 31321
30430: LD_INT 5
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30464
30438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 4
30452: PUSH
30453: LD_INT 5
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
30462: GO 31321
30464: LD_INT 9
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30498
30472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30473: LD_ADDR_VAR 0 3
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: LD_INT 5
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: ST_TO_ADDR
30496: GO 31321
30498: LD_INT 7
30500: DOUBLE
30501: EQUAL
30502: IFTRUE 30506
30504: GO 30532
30506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30507: LD_ADDR_VAR 0 3
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 4
30520: PUSH
30521: LD_INT 5
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: ST_TO_ADDR
30530: GO 31321
30532: LD_INT 12
30534: DOUBLE
30535: EQUAL
30536: IFTRUE 30540
30538: GO 30566
30540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30541: LD_ADDR_VAR 0 3
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: ST_TO_ADDR
30564: GO 31321
30566: LD_INT 13
30568: DOUBLE
30569: EQUAL
30570: IFTRUE 30574
30572: GO 30600
30574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30575: LD_ADDR_VAR 0 3
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
30598: GO 31321
30600: LD_INT 14
30602: DOUBLE
30603: EQUAL
30604: IFTRUE 30608
30606: GO 30626
30608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30609: LD_ADDR_VAR 0 3
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: LD_INT 5
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: ST_TO_ADDR
30624: GO 31321
30626: LD_INT 6
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 30652
30634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30635: LD_ADDR_VAR 0 3
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: ST_TO_ADDR
30650: GO 31321
30652: LD_INT 10
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30678
30660: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30661: LD_ADDR_VAR 0 3
30665: PUSH
30666: LD_INT 4
30668: PUSH
30669: LD_INT 5
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: ST_TO_ADDR
30676: GO 31321
30678: LD_INT 22
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30712
30686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 11
30694: PUSH
30695: LD_INT 12
30697: PUSH
30698: LD_INT 13
30700: PUSH
30701: LD_INT 14
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
30710: GO 31321
30712: LD_INT 23
30714: DOUBLE
30715: EQUAL
30716: IFTRUE 30720
30718: GO 30746
30720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 11
30728: PUSH
30729: LD_INT 12
30731: PUSH
30732: LD_INT 13
30734: PUSH
30735: LD_INT 14
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 31321
30746: LD_INT 24
30748: DOUBLE
30749: EQUAL
30750: IFTRUE 30754
30752: GO 30780
30754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30755: LD_ADDR_VAR 0 3
30759: PUSH
30760: LD_INT 11
30762: PUSH
30763: LD_INT 12
30765: PUSH
30766: LD_INT 13
30768: PUSH
30769: LD_INT 14
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
30778: GO 31321
30780: LD_INT 30
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30814
30788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30789: LD_ADDR_VAR 0 3
30793: PUSH
30794: LD_INT 11
30796: PUSH
30797: LD_INT 12
30799: PUSH
30800: LD_INT 13
30802: PUSH
30803: LD_INT 14
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
30812: GO 31321
30814: LD_INT 25
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30840
30822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 13
30830: PUSH
30831: LD_INT 14
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: ST_TO_ADDR
30838: GO 31321
30840: LD_INT 27
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30866
30848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 13
30856: PUSH
30857: LD_INT 14
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: ST_TO_ADDR
30864: GO 31321
30866: LD_INT 92
30868: DOUBLE
30869: EQUAL
30870: IFTRUE 30874
30872: GO 30900
30874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: LD_INT 11
30882: PUSH
30883: LD_INT 12
30885: PUSH
30886: LD_INT 13
30888: PUSH
30889: LD_INT 14
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
30898: GO 31321
30900: LD_INT 28
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30926
30908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_INT 13
30916: PUSH
30917: LD_INT 14
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: ST_TO_ADDR
30924: GO 31321
30926: LD_INT 29
30928: DOUBLE
30929: EQUAL
30930: IFTRUE 30934
30932: GO 30952
30934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30935: LD_ADDR_VAR 0 3
30939: PUSH
30940: LD_INT 13
30942: PUSH
30943: LD_INT 14
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31321
30952: LD_INT 31
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30978
30960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 13
30968: PUSH
30969: LD_INT 14
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31321
30978: LD_INT 26
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 13
30994: PUSH
30995: LD_INT 14
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31321
31004: LD_INT 42
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31038
31012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 21
31020: PUSH
31021: LD_INT 22
31023: PUSH
31024: LD_INT 23
31026: PUSH
31027: LD_INT 24
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 31321
31038: LD_INT 43
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31072
31046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31047: LD_ADDR_VAR 0 3
31051: PUSH
31052: LD_INT 21
31054: PUSH
31055: LD_INT 22
31057: PUSH
31058: LD_INT 23
31060: PUSH
31061: LD_INT 24
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31321
31072: LD_INT 44
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31106
31080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 21
31088: PUSH
31089: LD_INT 22
31091: PUSH
31092: LD_INT 23
31094: PUSH
31095: LD_INT 24
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31321
31106: LD_INT 45
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31140
31114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 21
31122: PUSH
31123: LD_INT 22
31125: PUSH
31126: LD_INT 23
31128: PUSH
31129: LD_INT 24
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: ST_TO_ADDR
31138: GO 31321
31140: LD_INT 49
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31174
31148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31149: LD_ADDR_VAR 0 3
31153: PUSH
31154: LD_INT 21
31156: PUSH
31157: LD_INT 22
31159: PUSH
31160: LD_INT 23
31162: PUSH
31163: LD_INT 24
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: ST_TO_ADDR
31172: GO 31321
31174: LD_INT 51
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31208
31182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_INT 21
31190: PUSH
31191: LD_INT 22
31193: PUSH
31194: LD_INT 23
31196: PUSH
31197: LD_INT 24
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
31206: GO 31321
31208: LD_INT 52
31210: DOUBLE
31211: EQUAL
31212: IFTRUE 31216
31214: GO 31242
31216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31217: LD_ADDR_VAR 0 3
31221: PUSH
31222: LD_INT 21
31224: PUSH
31225: LD_INT 22
31227: PUSH
31228: LD_INT 23
31230: PUSH
31231: LD_INT 24
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: ST_TO_ADDR
31240: GO 31321
31242: LD_INT 53
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31268
31250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: LD_INT 23
31258: PUSH
31259: LD_INT 24
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: ST_TO_ADDR
31266: GO 31321
31268: LD_INT 46
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31294
31276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31277: LD_ADDR_VAR 0 3
31281: PUSH
31282: LD_INT 23
31284: PUSH
31285: LD_INT 24
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: ST_TO_ADDR
31292: GO 31321
31294: LD_INT 47
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31320
31302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31303: LD_ADDR_VAR 0 3
31307: PUSH
31308: LD_INT 23
31310: PUSH
31311: LD_INT 24
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 31321
31320: POP
// result := ( chassis in result ) ;
31321: LD_ADDR_VAR 0 3
31325: PUSH
31326: LD_VAR 0 1
31330: PUSH
31331: LD_VAR 0 3
31335: IN
31336: ST_TO_ADDR
// end ;
31337: LD_VAR 0 3
31341: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
// result := array ;
31351: LD_ADDR_VAR 0 5
31355: PUSH
31356: LD_VAR 0 1
31360: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31361: LD_VAR 0 1
31365: NOT
31366: PUSH
31367: LD_VAR 0 2
31371: NOT
31372: OR
31373: PUSH
31374: LD_VAR 0 3
31378: NOT
31379: OR
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: LD_VAR 0 1
31390: GREATER
31391: OR
31392: PUSH
31393: LD_VAR 0 3
31397: PUSH
31398: LD_VAR 0 1
31402: GREATER
31403: OR
31404: IFFALSE 31408
// exit ;
31406: GO 31704
// if direction then
31408: LD_VAR 0 4
31412: IFFALSE 31476
// begin d := 1 ;
31414: LD_ADDR_VAR 0 9
31418: PUSH
31419: LD_INT 1
31421: ST_TO_ADDR
// if i_from > i_to then
31422: LD_VAR 0 2
31426: PUSH
31427: LD_VAR 0 3
31431: GREATER
31432: IFFALSE 31458
// length := ( array - i_from ) + i_to else
31434: LD_ADDR_VAR 0 11
31438: PUSH
31439: LD_VAR 0 1
31443: PUSH
31444: LD_VAR 0 2
31448: MINUS
31449: PUSH
31450: LD_VAR 0 3
31454: PLUS
31455: ST_TO_ADDR
31456: GO 31474
// length := i_to - i_from ;
31458: LD_ADDR_VAR 0 11
31462: PUSH
31463: LD_VAR 0 3
31467: PUSH
31468: LD_VAR 0 2
31472: MINUS
31473: ST_TO_ADDR
// end else
31474: GO 31537
// begin d := - 1 ;
31476: LD_ADDR_VAR 0 9
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: ST_TO_ADDR
// if i_from > i_to then
31485: LD_VAR 0 2
31489: PUSH
31490: LD_VAR 0 3
31494: GREATER
31495: IFFALSE 31515
// length := i_from - i_to else
31497: LD_ADDR_VAR 0 11
31501: PUSH
31502: LD_VAR 0 2
31506: PUSH
31507: LD_VAR 0 3
31511: MINUS
31512: ST_TO_ADDR
31513: GO 31537
// length := ( array - i_to ) + i_from ;
31515: LD_ADDR_VAR 0 11
31519: PUSH
31520: LD_VAR 0 1
31524: PUSH
31525: LD_VAR 0 3
31529: MINUS
31530: PUSH
31531: LD_VAR 0 2
31535: PLUS
31536: ST_TO_ADDR
// end ; if not length then
31537: LD_VAR 0 11
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31704
// tmp := array ;
31546: LD_ADDR_VAR 0 10
31550: PUSH
31551: LD_VAR 0 1
31555: ST_TO_ADDR
// for i = 1 to length do
31556: LD_ADDR_VAR 0 6
31560: PUSH
31561: DOUBLE
31562: LD_INT 1
31564: DEC
31565: ST_TO_ADDR
31566: LD_VAR 0 11
31570: PUSH
31571: FOR_TO
31572: IFFALSE 31692
// begin for j = 1 to array do
31574: LD_ADDR_VAR 0 7
31578: PUSH
31579: DOUBLE
31580: LD_INT 1
31582: DEC
31583: ST_TO_ADDR
31584: LD_VAR 0 1
31588: PUSH
31589: FOR_TO
31590: IFFALSE 31678
// begin k := j + d ;
31592: LD_ADDR_VAR 0 8
31596: PUSH
31597: LD_VAR 0 7
31601: PUSH
31602: LD_VAR 0 9
31606: PLUS
31607: ST_TO_ADDR
// if k > array then
31608: LD_VAR 0 8
31612: PUSH
31613: LD_VAR 0 1
31617: GREATER
31618: IFFALSE 31628
// k := 1 ;
31620: LD_ADDR_VAR 0 8
31624: PUSH
31625: LD_INT 1
31627: ST_TO_ADDR
// if not k then
31628: LD_VAR 0 8
31632: NOT
31633: IFFALSE 31645
// k := array ;
31635: LD_ADDR_VAR 0 8
31639: PUSH
31640: LD_VAR 0 1
31644: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31645: LD_ADDR_VAR 0 10
31649: PUSH
31650: LD_VAR 0 10
31654: PPUSH
31655: LD_VAR 0 8
31659: PPUSH
31660: LD_VAR 0 1
31664: PUSH
31665: LD_VAR 0 7
31669: ARRAY
31670: PPUSH
31671: CALL_OW 1
31675: ST_TO_ADDR
// end ;
31676: GO 31589
31678: POP
31679: POP
// array := tmp ;
31680: LD_ADDR_VAR 0 1
31684: PUSH
31685: LD_VAR 0 10
31689: ST_TO_ADDR
// end ;
31690: GO 31571
31692: POP
31693: POP
// result := array ;
31694: LD_ADDR_VAR 0 5
31698: PUSH
31699: LD_VAR 0 1
31703: ST_TO_ADDR
// end ;
31704: LD_VAR 0 5
31708: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
// result := 0 ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
// if not array or not value in array then
31721: LD_VAR 0 1
31725: NOT
31726: PUSH
31727: LD_VAR 0 2
31731: PUSH
31732: LD_VAR 0 1
31736: IN
31737: NOT
31738: OR
31739: IFFALSE 31743
// exit ;
31741: GO 31797
// for i = 1 to array do
31743: LD_ADDR_VAR 0 4
31747: PUSH
31748: DOUBLE
31749: LD_INT 1
31751: DEC
31752: ST_TO_ADDR
31753: LD_VAR 0 1
31757: PUSH
31758: FOR_TO
31759: IFFALSE 31795
// if value = array [ i ] then
31761: LD_VAR 0 2
31765: PUSH
31766: LD_VAR 0 1
31770: PUSH
31771: LD_VAR 0 4
31775: ARRAY
31776: EQUAL
31777: IFFALSE 31793
// begin result := i ;
31779: LD_ADDR_VAR 0 3
31783: PUSH
31784: LD_VAR 0 4
31788: ST_TO_ADDR
// exit ;
31789: POP
31790: POP
31791: GO 31797
// end ;
31793: GO 31758
31795: POP
31796: POP
// end ;
31797: LD_VAR 0 3
31801: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31802: LD_INT 0
31804: PPUSH
// vc_chassis := chassis ;
31805: LD_ADDR_OWVAR 37
31809: PUSH
31810: LD_VAR 0 1
31814: ST_TO_ADDR
// vc_engine := engine ;
31815: LD_ADDR_OWVAR 39
31819: PUSH
31820: LD_VAR 0 2
31824: ST_TO_ADDR
// vc_control := control ;
31825: LD_ADDR_OWVAR 38
31829: PUSH
31830: LD_VAR 0 3
31834: ST_TO_ADDR
// vc_weapon := weapon ;
31835: LD_ADDR_OWVAR 40
31839: PUSH
31840: LD_VAR 0 4
31844: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31845: LD_ADDR_OWVAR 41
31849: PUSH
31850: LD_VAR 0 5
31854: ST_TO_ADDR
// end ;
31855: LD_VAR 0 6
31859: RET
// export function WantPlant ( unit ) ; var task ; begin
31860: LD_INT 0
31862: PPUSH
31863: PPUSH
// result := false ;
31864: LD_ADDR_VAR 0 2
31868: PUSH
31869: LD_INT 0
31871: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31872: LD_ADDR_VAR 0 3
31876: PUSH
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 437
31886: ST_TO_ADDR
// if task then
31887: LD_VAR 0 3
31891: IFFALSE 31919
// if task [ 1 ] [ 1 ] = p then
31893: LD_VAR 0 3
31897: PUSH
31898: LD_INT 1
31900: ARRAY
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: PUSH
31906: LD_STRING p
31908: EQUAL
31909: IFFALSE 31919
// result := true ;
31911: LD_ADDR_VAR 0 2
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// end ;
31919: LD_VAR 0 2
31923: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
// if pos < 1 then
31930: LD_VAR 0 2
31934: PUSH
31935: LD_INT 1
31937: LESS
31938: IFFALSE 31942
// exit ;
31940: GO 32245
// if pos = 1 then
31942: LD_VAR 0 2
31946: PUSH
31947: LD_INT 1
31949: EQUAL
31950: IFFALSE 31983
// result := Replace ( arr , pos [ 1 ] , value ) else
31952: LD_ADDR_VAR 0 4
31956: PUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: LD_VAR 0 2
31966: PUSH
31967: LD_INT 1
31969: ARRAY
31970: PPUSH
31971: LD_VAR 0 3
31975: PPUSH
31976: CALL_OW 1
31980: ST_TO_ADDR
31981: GO 32245
// begin tmp := arr ;
31983: LD_ADDR_VAR 0 6
31987: PUSH
31988: LD_VAR 0 1
31992: ST_TO_ADDR
// s_arr := [ tmp ] ;
31993: LD_ADDR_VAR 0 7
31997: PUSH
31998: LD_VAR 0 6
32002: PUSH
32003: EMPTY
32004: LIST
32005: ST_TO_ADDR
// for i = 1 to pos - 1 do
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: DOUBLE
32012: LD_INT 1
32014: DEC
32015: ST_TO_ADDR
32016: LD_VAR 0 2
32020: PUSH
32021: LD_INT 1
32023: MINUS
32024: PUSH
32025: FOR_TO
32026: IFFALSE 32071
// begin tmp := tmp [ pos [ i ] ] ;
32028: LD_ADDR_VAR 0 6
32032: PUSH
32033: LD_VAR 0 6
32037: PUSH
32038: LD_VAR 0 2
32042: PUSH
32043: LD_VAR 0 5
32047: ARRAY
32048: ARRAY
32049: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32050: LD_ADDR_VAR 0 7
32054: PUSH
32055: LD_VAR 0 7
32059: PUSH
32060: LD_VAR 0 6
32064: PUSH
32065: EMPTY
32066: LIST
32067: ADD
32068: ST_TO_ADDR
// end ;
32069: GO 32025
32071: POP
32072: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32073: LD_ADDR_VAR 0 6
32077: PUSH
32078: LD_VAR 0 6
32082: PPUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_VAR 0 2
32092: ARRAY
32093: PPUSH
32094: LD_VAR 0 3
32098: PPUSH
32099: CALL_OW 1
32103: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32104: LD_ADDR_VAR 0 7
32108: PUSH
32109: LD_VAR 0 7
32113: PPUSH
32114: LD_VAR 0 7
32118: PPUSH
32119: LD_VAR 0 6
32123: PPUSH
32124: CALL_OW 1
32128: ST_TO_ADDR
// for i = s_arr downto 2 do
32129: LD_ADDR_VAR 0 5
32133: PUSH
32134: DOUBLE
32135: LD_VAR 0 7
32139: INC
32140: ST_TO_ADDR
32141: LD_INT 2
32143: PUSH
32144: FOR_DOWNTO
32145: IFFALSE 32229
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32147: LD_ADDR_VAR 0 6
32151: PUSH
32152: LD_VAR 0 7
32156: PUSH
32157: LD_VAR 0 5
32161: PUSH
32162: LD_INT 1
32164: MINUS
32165: ARRAY
32166: PPUSH
32167: LD_VAR 0 2
32171: PUSH
32172: LD_VAR 0 5
32176: PUSH
32177: LD_INT 1
32179: MINUS
32180: ARRAY
32181: PPUSH
32182: LD_VAR 0 7
32186: PUSH
32187: LD_VAR 0 5
32191: ARRAY
32192: PPUSH
32193: CALL_OW 1
32197: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32198: LD_ADDR_VAR 0 7
32202: PUSH
32203: LD_VAR 0 7
32207: PPUSH
32208: LD_VAR 0 5
32212: PUSH
32213: LD_INT 1
32215: MINUS
32216: PPUSH
32217: LD_VAR 0 6
32221: PPUSH
32222: CALL_OW 1
32226: ST_TO_ADDR
// end ;
32227: GO 32144
32229: POP
32230: POP
// result := s_arr [ 1 ] ;
32231: LD_ADDR_VAR 0 4
32235: PUSH
32236: LD_VAR 0 7
32240: PUSH
32241: LD_INT 1
32243: ARRAY
32244: ST_TO_ADDR
// end ; end ;
32245: LD_VAR 0 4
32249: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32250: LD_INT 0
32252: PPUSH
32253: PPUSH
// if not list then
32254: LD_VAR 0 1
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 32354
// i := list [ pos1 ] ;
32263: LD_ADDR_VAR 0 5
32267: PUSH
32268: LD_VAR 0 1
32272: PUSH
32273: LD_VAR 0 2
32277: ARRAY
32278: ST_TO_ADDR
// if not i then
32279: LD_VAR 0 5
32283: NOT
32284: IFFALSE 32288
// exit ;
32286: GO 32354
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32288: LD_ADDR_VAR 0 1
32292: PUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_VAR 0 2
32302: PPUSH
32303: LD_VAR 0 1
32307: PUSH
32308: LD_VAR 0 3
32312: ARRAY
32313: PPUSH
32314: CALL_OW 1
32318: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32319: LD_ADDR_VAR 0 1
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_VAR 0 3
32333: PPUSH
32334: LD_VAR 0 5
32338: PPUSH
32339: CALL_OW 1
32343: ST_TO_ADDR
// result := list ;
32344: LD_ADDR_VAR 0 4
32348: PUSH
32349: LD_VAR 0 1
32353: ST_TO_ADDR
// end ;
32354: LD_VAR 0 4
32358: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32359: LD_INT 0
32361: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 250
32376: PPUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 251
32386: PPUSH
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 3
32396: PPUSH
32397: LD_VAR 0 4
32401: PPUSH
32402: CALL 32780 0 5
32406: ST_TO_ADDR
// end ;
32407: LD_VAR 0 5
32411: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32412: LD_INT 0
32414: PPUSH
32415: PPUSH
32416: PPUSH
32417: PPUSH
// if not list or not unit then
32418: LD_VAR 0 2
32422: NOT
32423: PUSH
32424: LD_VAR 0 1
32428: NOT
32429: OR
32430: IFFALSE 32434
// exit ;
32432: GO 32775
// result := [ ] ;
32434: LD_ADDR_VAR 0 5
32438: PUSH
32439: EMPTY
32440: ST_TO_ADDR
// for i in list do
32441: LD_ADDR_VAR 0 6
32445: PUSH
32446: LD_VAR 0 2
32450: PUSH
32451: FOR_IN
32452: IFFALSE 32670
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32454: LD_ADDR_VAR 0 8
32458: PUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: LD_VAR 0 6
32468: PUSH
32469: LD_INT 1
32471: ARRAY
32472: PPUSH
32473: LD_VAR 0 6
32477: PUSH
32478: LD_INT 2
32480: ARRAY
32481: PPUSH
32482: CALL_OW 297
32486: ST_TO_ADDR
// if not Count ( result ) then
32487: LD_VAR 0 5
32491: PPUSH
32492: CALL 29064 0 1
32496: NOT
32497: IFFALSE 32530
// begin result := Join ( result , [ i , tmp ] ) ;
32499: LD_ADDR_VAR 0 5
32503: PUSH
32504: LD_VAR 0 5
32508: PPUSH
32509: LD_VAR 0 6
32513: PUSH
32514: LD_VAR 0 8
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL 64673 0 2
32527: ST_TO_ADDR
// continue ;
32528: GO 32451
// end ; if result [ result ] [ 2 ] <= tmp then
32530: LD_VAR 0 5
32534: PUSH
32535: LD_VAR 0 5
32539: ARRAY
32540: PUSH
32541: LD_INT 2
32543: ARRAY
32544: PUSH
32545: LD_VAR 0 8
32549: LESSEQUAL
32550: IFFALSE 32583
// result := Join ( result , [ i , tmp ] ) else
32552: LD_ADDR_VAR 0 5
32556: PUSH
32557: LD_VAR 0 5
32561: PPUSH
32562: LD_VAR 0 6
32566: PUSH
32567: LD_VAR 0 8
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PPUSH
32576: CALL 64673 0 2
32580: ST_TO_ADDR
32581: GO 32668
// begin for j := 1 to Count ( result ) do
32583: LD_ADDR_VAR 0 7
32587: PUSH
32588: DOUBLE
32589: LD_INT 1
32591: DEC
32592: ST_TO_ADDR
32593: LD_VAR 0 5
32597: PPUSH
32598: CALL 29064 0 1
32602: PUSH
32603: FOR_TO
32604: IFFALSE 32666
// begin if tmp < result [ j ] [ 2 ] then
32606: LD_VAR 0 8
32610: PUSH
32611: LD_VAR 0 5
32615: PUSH
32616: LD_VAR 0 7
32620: ARRAY
32621: PUSH
32622: LD_INT 2
32624: ARRAY
32625: LESS
32626: IFFALSE 32664
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_VAR 0 5
32637: PPUSH
32638: LD_VAR 0 7
32642: PPUSH
32643: LD_VAR 0 6
32647: PUSH
32648: LD_VAR 0 8
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PPUSH
32657: CALL_OW 2
32661: ST_TO_ADDR
// break ;
32662: GO 32666
// end ; end ;
32664: GO 32603
32666: POP
32667: POP
// end ; end ;
32668: GO 32451
32670: POP
32671: POP
// if result and not asc then
32672: LD_VAR 0 5
32676: PUSH
32677: LD_VAR 0 3
32681: NOT
32682: AND
32683: IFFALSE 32700
// result := ReverseArray ( result ) ;
32685: LD_ADDR_VAR 0 5
32689: PUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: CALL 59940 0 1
32699: ST_TO_ADDR
// tmp := [ ] ;
32700: LD_ADDR_VAR 0 8
32704: PUSH
32705: EMPTY
32706: ST_TO_ADDR
// if mode then
32707: LD_VAR 0 4
32711: IFFALSE 32775
// begin for i := 1 to result do
32713: LD_ADDR_VAR 0 6
32717: PUSH
32718: DOUBLE
32719: LD_INT 1
32721: DEC
32722: ST_TO_ADDR
32723: LD_VAR 0 5
32727: PUSH
32728: FOR_TO
32729: IFFALSE 32763
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32731: LD_ADDR_VAR 0 8
32735: PUSH
32736: LD_VAR 0 8
32740: PPUSH
32741: LD_VAR 0 5
32745: PUSH
32746: LD_VAR 0 6
32750: ARRAY
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: PPUSH
32756: CALL 64673 0 2
32760: ST_TO_ADDR
32761: GO 32728
32763: POP
32764: POP
// result := tmp ;
32765: LD_ADDR_VAR 0 5
32769: PUSH
32770: LD_VAR 0 8
32774: ST_TO_ADDR
// end ; end ;
32775: LD_VAR 0 5
32779: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32780: LD_INT 0
32782: PPUSH
32783: PPUSH
32784: PPUSH
32785: PPUSH
// if not list then
32786: LD_VAR 0 3
32790: NOT
32791: IFFALSE 32795
// exit ;
32793: GO 33183
// result := [ ] ;
32795: LD_ADDR_VAR 0 6
32799: PUSH
32800: EMPTY
32801: ST_TO_ADDR
// for i in list do
32802: LD_ADDR_VAR 0 7
32806: PUSH
32807: LD_VAR 0 3
32811: PUSH
32812: FOR_IN
32813: IFFALSE 33015
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32815: LD_ADDR_VAR 0 9
32819: PUSH
32820: LD_VAR 0 7
32824: PPUSH
32825: LD_VAR 0 1
32829: PPUSH
32830: LD_VAR 0 2
32834: PPUSH
32835: CALL_OW 297
32839: ST_TO_ADDR
// if not result then
32840: LD_VAR 0 6
32844: NOT
32845: IFFALSE 32871
// result := [ [ i , tmp ] ] else
32847: LD_ADDR_VAR 0 6
32851: PUSH
32852: LD_VAR 0 7
32856: PUSH
32857: LD_VAR 0 9
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: ST_TO_ADDR
32869: GO 33013
// begin if result [ result ] [ 2 ] < tmp then
32871: LD_VAR 0 6
32875: PUSH
32876: LD_VAR 0 6
32880: ARRAY
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: PUSH
32886: LD_VAR 0 9
32890: LESS
32891: IFFALSE 32933
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32893: LD_ADDR_VAR 0 6
32897: PUSH
32898: LD_VAR 0 6
32902: PPUSH
32903: LD_VAR 0 6
32907: PUSH
32908: LD_INT 1
32910: PLUS
32911: PPUSH
32912: LD_VAR 0 7
32916: PUSH
32917: LD_VAR 0 9
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 2
32930: ST_TO_ADDR
32931: GO 33013
// for j = 1 to result do
32933: LD_ADDR_VAR 0 8
32937: PUSH
32938: DOUBLE
32939: LD_INT 1
32941: DEC
32942: ST_TO_ADDR
32943: LD_VAR 0 6
32947: PUSH
32948: FOR_TO
32949: IFFALSE 33011
// begin if tmp < result [ j ] [ 2 ] then
32951: LD_VAR 0 9
32955: PUSH
32956: LD_VAR 0 6
32960: PUSH
32961: LD_VAR 0 8
32965: ARRAY
32966: PUSH
32967: LD_INT 2
32969: ARRAY
32970: LESS
32971: IFFALSE 33009
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32973: LD_ADDR_VAR 0 6
32977: PUSH
32978: LD_VAR 0 6
32982: PPUSH
32983: LD_VAR 0 8
32987: PPUSH
32988: LD_VAR 0 7
32992: PUSH
32993: LD_VAR 0 9
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PPUSH
33002: CALL_OW 2
33006: ST_TO_ADDR
// break ;
33007: GO 33011
// end ; end ;
33009: GO 32948
33011: POP
33012: POP
// end ; end ;
33013: GO 32812
33015: POP
33016: POP
// if result and not asc then
33017: LD_VAR 0 6
33021: PUSH
33022: LD_VAR 0 4
33026: NOT
33027: AND
33028: IFFALSE 33103
// begin tmp := result ;
33030: LD_ADDR_VAR 0 9
33034: PUSH
33035: LD_VAR 0 6
33039: ST_TO_ADDR
// for i = tmp downto 1 do
33040: LD_ADDR_VAR 0 7
33044: PUSH
33045: DOUBLE
33046: LD_VAR 0 9
33050: INC
33051: ST_TO_ADDR
33052: LD_INT 1
33054: PUSH
33055: FOR_DOWNTO
33056: IFFALSE 33101
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33058: LD_ADDR_VAR 0 6
33062: PUSH
33063: LD_VAR 0 6
33067: PPUSH
33068: LD_VAR 0 9
33072: PUSH
33073: LD_VAR 0 7
33077: MINUS
33078: PUSH
33079: LD_INT 1
33081: PLUS
33082: PPUSH
33083: LD_VAR 0 9
33087: PUSH
33088: LD_VAR 0 7
33092: ARRAY
33093: PPUSH
33094: CALL_OW 1
33098: ST_TO_ADDR
33099: GO 33055
33101: POP
33102: POP
// end ; tmp := [ ] ;
33103: LD_ADDR_VAR 0 9
33107: PUSH
33108: EMPTY
33109: ST_TO_ADDR
// if mode then
33110: LD_VAR 0 5
33114: IFFALSE 33183
// begin for i = 1 to result do
33116: LD_ADDR_VAR 0 7
33120: PUSH
33121: DOUBLE
33122: LD_INT 1
33124: DEC
33125: ST_TO_ADDR
33126: LD_VAR 0 6
33130: PUSH
33131: FOR_TO
33132: IFFALSE 33171
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33134: LD_ADDR_VAR 0 9
33138: PUSH
33139: LD_VAR 0 9
33143: PPUSH
33144: LD_VAR 0 7
33148: PPUSH
33149: LD_VAR 0 6
33153: PUSH
33154: LD_VAR 0 7
33158: ARRAY
33159: PUSH
33160: LD_INT 1
33162: ARRAY
33163: PPUSH
33164: CALL_OW 1
33168: ST_TO_ADDR
33169: GO 33131
33171: POP
33172: POP
// result := tmp ;
33173: LD_ADDR_VAR 0 6
33177: PUSH
33178: LD_VAR 0 9
33182: ST_TO_ADDR
// end ; end ;
33183: LD_VAR 0 6
33187: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33188: LD_INT 0
33190: PPUSH
33191: PPUSH
33192: PPUSH
33193: PPUSH
33194: PPUSH
33195: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33196: LD_ADDR_VAR 0 5
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// if not x or not y then
33218: LD_VAR 0 2
33222: NOT
33223: PUSH
33224: LD_VAR 0 3
33228: NOT
33229: OR
33230: IFFALSE 33234
// exit ;
33232: GO 34884
// if not range then
33234: LD_VAR 0 4
33238: NOT
33239: IFFALSE 33249
// range := 10 ;
33241: LD_ADDR_VAR 0 4
33245: PUSH
33246: LD_INT 10
33248: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33249: LD_ADDR_VAR 0 8
33253: PUSH
33254: LD_INT 81
33256: PUSH
33257: LD_VAR 0 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 92
33268: PUSH
33269: LD_VAR 0 2
33273: PUSH
33274: LD_VAR 0 3
33278: PUSH
33279: LD_VAR 0 4
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 3
33292: PUSH
33293: LD_INT 21
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 69
33316: ST_TO_ADDR
// if not tmp then
33317: LD_VAR 0 8
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 34884
// for i in tmp do
33326: LD_ADDR_VAR 0 6
33330: PUSH
33331: LD_VAR 0 8
33335: PUSH
33336: FOR_IN
33337: IFFALSE 34859
// begin points := [ 0 , 0 , 0 ] ;
33339: LD_ADDR_VAR 0 9
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
// bpoints := 1 ;
33358: LD_ADDR_VAR 0 10
33362: PUSH
33363: LD_INT 1
33365: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33366: LD_VAR 0 6
33370: PPUSH
33371: CALL_OW 247
33375: PUSH
33376: LD_INT 1
33378: DOUBLE
33379: EQUAL
33380: IFTRUE 33384
33382: GO 33962
33384: POP
// begin if GetClass ( i ) = 1 then
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 257
33394: PUSH
33395: LD_INT 1
33397: EQUAL
33398: IFFALSE 33419
// points := [ 10 , 5 , 3 ] ;
33400: LD_ADDR_VAR 0 9
33404: PUSH
33405: LD_INT 10
33407: PUSH
33408: LD_INT 5
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33419: LD_VAR 0 6
33423: PPUSH
33424: CALL_OW 257
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 3
33434: PUSH
33435: LD_INT 4
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: IN
33443: IFFALSE 33464
// points := [ 3 , 2 , 1 ] ;
33445: LD_ADDR_VAR 0 9
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33464: LD_VAR 0 6
33468: PPUSH
33469: CALL_OW 257
33473: PUSH
33474: LD_INT 5
33476: EQUAL
33477: IFFALSE 33498
// points := [ 130 , 5 , 2 ] ;
33479: LD_ADDR_VAR 0 9
33483: PUSH
33484: LD_INT 130
33486: PUSH
33487: LD_INT 5
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33498: LD_VAR 0 6
33502: PPUSH
33503: CALL_OW 257
33507: PUSH
33508: LD_INT 8
33510: EQUAL
33511: IFFALSE 33532
// points := [ 35 , 35 , 30 ] ;
33513: LD_ADDR_VAR 0 9
33517: PUSH
33518: LD_INT 35
33520: PUSH
33521: LD_INT 35
33523: PUSH
33524: LD_INT 30
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33532: LD_VAR 0 6
33536: PPUSH
33537: CALL_OW 257
33541: PUSH
33542: LD_INT 9
33544: EQUAL
33545: IFFALSE 33566
// points := [ 20 , 55 , 40 ] ;
33547: LD_ADDR_VAR 0 9
33551: PUSH
33552: LD_INT 20
33554: PUSH
33555: LD_INT 55
33557: PUSH
33558: LD_INT 40
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33566: LD_VAR 0 6
33570: PPUSH
33571: CALL_OW 257
33575: PUSH
33576: LD_INT 12
33578: PUSH
33579: LD_INT 16
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: IN
33586: IFFALSE 33607
// points := [ 5 , 3 , 2 ] ;
33588: LD_ADDR_VAR 0 9
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: LD_INT 3
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 257
33616: PUSH
33617: LD_INT 17
33619: EQUAL
33620: IFFALSE 33641
// points := [ 100 , 50 , 75 ] ;
33622: LD_ADDR_VAR 0 9
33626: PUSH
33627: LD_INT 100
33629: PUSH
33630: LD_INT 50
33632: PUSH
33633: LD_INT 75
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33641: LD_VAR 0 6
33645: PPUSH
33646: CALL_OW 257
33650: PUSH
33651: LD_INT 15
33653: EQUAL
33654: IFFALSE 33675
// points := [ 10 , 5 , 3 ] ;
33656: LD_ADDR_VAR 0 9
33660: PUSH
33661: LD_INT 10
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 3
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33675: LD_VAR 0 6
33679: PPUSH
33680: CALL_OW 257
33684: PUSH
33685: LD_INT 14
33687: EQUAL
33688: IFFALSE 33709
// points := [ 10 , 0 , 0 ] ;
33690: LD_ADDR_VAR 0 9
33694: PUSH
33695: LD_INT 10
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33709: LD_VAR 0 6
33713: PPUSH
33714: CALL_OW 257
33718: PUSH
33719: LD_INT 11
33721: EQUAL
33722: IFFALSE 33743
// points := [ 30 , 10 , 5 ] ;
33724: LD_ADDR_VAR 0 9
33728: PUSH
33729: LD_INT 30
33731: PUSH
33732: LD_INT 10
33734: PUSH
33735: LD_INT 5
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: LIST
33742: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33743: LD_VAR 0 1
33747: PPUSH
33748: LD_INT 5
33750: PPUSH
33751: CALL_OW 321
33755: PUSH
33756: LD_INT 2
33758: EQUAL
33759: IFFALSE 33776
// bpoints := bpoints * 1.8 ;
33761: LD_ADDR_VAR 0 10
33765: PUSH
33766: LD_VAR 0 10
33770: PUSH
33771: LD_REAL  1.80000000000000E+0000
33774: MUL
33775: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33776: LD_VAR 0 6
33780: PPUSH
33781: CALL_OW 257
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: LD_INT 4
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: IN
33804: PUSH
33805: LD_VAR 0 1
33809: PPUSH
33810: LD_INT 51
33812: PPUSH
33813: CALL_OW 321
33817: PUSH
33818: LD_INT 2
33820: EQUAL
33821: AND
33822: IFFALSE 33839
// bpoints := bpoints * 1.2 ;
33824: LD_ADDR_VAR 0 10
33828: PUSH
33829: LD_VAR 0 10
33833: PUSH
33834: LD_REAL  1.20000000000000E+0000
33837: MUL
33838: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33839: LD_VAR 0 6
33843: PPUSH
33844: CALL_OW 257
33848: PUSH
33849: LD_INT 5
33851: PUSH
33852: LD_INT 7
33854: PUSH
33855: LD_INT 9
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: IN
33863: PUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: LD_INT 52
33871: PPUSH
33872: CALL_OW 321
33876: PUSH
33877: LD_INT 2
33879: EQUAL
33880: AND
33881: IFFALSE 33898
// bpoints := bpoints * 1.5 ;
33883: LD_ADDR_VAR 0 10
33887: PUSH
33888: LD_VAR 0 10
33892: PUSH
33893: LD_REAL  1.50000000000000E+0000
33896: MUL
33897: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33898: LD_VAR 0 1
33902: PPUSH
33903: LD_INT 66
33905: PPUSH
33906: CALL_OW 321
33910: PUSH
33911: LD_INT 2
33913: EQUAL
33914: IFFALSE 33931
// bpoints := bpoints * 1.1 ;
33916: LD_ADDR_VAR 0 10
33920: PUSH
33921: LD_VAR 0 10
33925: PUSH
33926: LD_REAL  1.10000000000000E+0000
33929: MUL
33930: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33931: LD_ADDR_VAR 0 10
33935: PUSH
33936: LD_VAR 0 10
33940: PUSH
33941: LD_VAR 0 6
33945: PPUSH
33946: LD_INT 1
33948: PPUSH
33949: CALL_OW 259
33953: PUSH
33954: LD_REAL  1.15000000000000E+0000
33957: MUL
33958: MUL
33959: ST_TO_ADDR
// end ; unit_vehicle :
33960: GO 34788
33962: LD_INT 2
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 34776
33970: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33971: LD_VAR 0 6
33975: PPUSH
33976: CALL_OW 264
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: LD_INT 42
33986: PUSH
33987: LD_INT 24
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: IN
33995: IFFALSE 34016
// points := [ 25 , 5 , 3 ] ;
33997: LD_ADDR_VAR 0 9
34001: PUSH
34002: LD_INT 25
34004: PUSH
34005: LD_INT 5
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34016: LD_VAR 0 6
34020: PPUSH
34021: CALL_OW 264
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: LD_INT 43
34031: PUSH
34032: LD_INT 25
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: IN
34040: IFFALSE 34061
// points := [ 40 , 15 , 5 ] ;
34042: LD_ADDR_VAR 0 9
34046: PUSH
34047: LD_INT 40
34049: PUSH
34050: LD_INT 15
34052: PUSH
34053: LD_INT 5
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34061: LD_VAR 0 6
34065: PPUSH
34066: CALL_OW 264
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 23
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: IN
34081: IFFALSE 34102
// points := [ 7 , 25 , 8 ] ;
34083: LD_ADDR_VAR 0 9
34087: PUSH
34088: LD_INT 7
34090: PUSH
34091: LD_INT 25
34093: PUSH
34094: LD_INT 8
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34102: LD_VAR 0 6
34106: PPUSH
34107: CALL_OW 264
34111: PUSH
34112: LD_INT 5
34114: PUSH
34115: LD_INT 27
34117: PUSH
34118: LD_INT 44
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: IN
34126: IFFALSE 34147
// points := [ 14 , 50 , 16 ] ;
34128: LD_ADDR_VAR 0 9
34132: PUSH
34133: LD_INT 14
34135: PUSH
34136: LD_INT 50
34138: PUSH
34139: LD_INT 16
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34147: LD_VAR 0 6
34151: PPUSH
34152: CALL_OW 264
34156: PUSH
34157: LD_INT 6
34159: PUSH
34160: LD_INT 46
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: IN
34167: IFFALSE 34188
// points := [ 32 , 120 , 70 ] ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_INT 32
34176: PUSH
34177: LD_INT 120
34179: PUSH
34180: LD_INT 70
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34188: LD_VAR 0 6
34192: PPUSH
34193: CALL_OW 264
34197: PUSH
34198: LD_INT 7
34200: PUSH
34201: LD_INT 28
34203: PUSH
34204: LD_INT 45
34206: PUSH
34207: LD_INT 92
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: IN
34216: IFFALSE 34237
// points := [ 35 , 20 , 45 ] ;
34218: LD_ADDR_VAR 0 9
34222: PUSH
34223: LD_INT 35
34225: PUSH
34226: LD_INT 20
34228: PUSH
34229: LD_INT 45
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 264
34246: PUSH
34247: LD_INT 47
34249: PUSH
34250: EMPTY
34251: LIST
34252: IN
34253: IFFALSE 34274
// points := [ 67 , 45 , 75 ] ;
34255: LD_ADDR_VAR 0 9
34259: PUSH
34260: LD_INT 67
34262: PUSH
34263: LD_INT 45
34265: PUSH
34266: LD_INT 75
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34274: LD_VAR 0 6
34278: PPUSH
34279: CALL_OW 264
34283: PUSH
34284: LD_INT 26
34286: PUSH
34287: EMPTY
34288: LIST
34289: IN
34290: IFFALSE 34311
// points := [ 120 , 30 , 80 ] ;
34292: LD_ADDR_VAR 0 9
34296: PUSH
34297: LD_INT 120
34299: PUSH
34300: LD_INT 30
34302: PUSH
34303: LD_INT 80
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34311: LD_VAR 0 6
34315: PPUSH
34316: CALL_OW 264
34320: PUSH
34321: LD_INT 22
34323: PUSH
34324: EMPTY
34325: LIST
34326: IN
34327: IFFALSE 34348
// points := [ 40 , 1 , 1 ] ;
34329: LD_ADDR_VAR 0 9
34333: PUSH
34334: LD_INT 40
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34348: LD_VAR 0 6
34352: PPUSH
34353: CALL_OW 264
34357: PUSH
34358: LD_INT 29
34360: PUSH
34361: EMPTY
34362: LIST
34363: IN
34364: IFFALSE 34385
// points := [ 70 , 200 , 400 ] ;
34366: LD_ADDR_VAR 0 9
34370: PUSH
34371: LD_INT 70
34373: PUSH
34374: LD_INT 200
34376: PUSH
34377: LD_INT 400
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34385: LD_VAR 0 6
34389: PPUSH
34390: CALL_OW 264
34394: PUSH
34395: LD_INT 14
34397: PUSH
34398: LD_INT 53
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: IN
34405: IFFALSE 34426
// points := [ 40 , 10 , 20 ] ;
34407: LD_ADDR_VAR 0 9
34411: PUSH
34412: LD_INT 40
34414: PUSH
34415: LD_INT 10
34417: PUSH
34418: LD_INT 20
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34426: LD_VAR 0 6
34430: PPUSH
34431: CALL_OW 264
34435: PUSH
34436: LD_INT 9
34438: PUSH
34439: EMPTY
34440: LIST
34441: IN
34442: IFFALSE 34463
// points := [ 5 , 70 , 20 ] ;
34444: LD_ADDR_VAR 0 9
34448: PUSH
34449: LD_INT 5
34451: PUSH
34452: LD_INT 70
34454: PUSH
34455: LD_INT 20
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34463: LD_VAR 0 6
34467: PPUSH
34468: CALL_OW 264
34472: PUSH
34473: LD_INT 10
34475: PUSH
34476: EMPTY
34477: LIST
34478: IN
34479: IFFALSE 34500
// points := [ 35 , 110 , 70 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 35
34488: PUSH
34489: LD_INT 110
34491: PUSH
34492: LD_INT 70
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 265
34509: PUSH
34510: LD_INT 25
34512: EQUAL
34513: IFFALSE 34534
// points := [ 80 , 65 , 100 ] ;
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_INT 80
34522: PUSH
34523: LD_INT 65
34525: PUSH
34526: LD_INT 100
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34534: LD_VAR 0 6
34538: PPUSH
34539: CALL_OW 263
34543: PUSH
34544: LD_INT 1
34546: EQUAL
34547: IFFALSE 34582
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34549: LD_ADDR_VAR 0 10
34553: PUSH
34554: LD_VAR 0 10
34558: PUSH
34559: LD_VAR 0 6
34563: PPUSH
34564: CALL_OW 311
34568: PPUSH
34569: LD_INT 3
34571: PPUSH
34572: CALL_OW 259
34576: PUSH
34577: LD_INT 4
34579: MUL
34580: MUL
34581: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34582: LD_VAR 0 6
34586: PPUSH
34587: CALL_OW 263
34591: PUSH
34592: LD_INT 2
34594: EQUAL
34595: IFFALSE 34646
// begin j := IsControledBy ( i ) ;
34597: LD_ADDR_VAR 0 7
34601: PUSH
34602: LD_VAR 0 6
34606: PPUSH
34607: CALL_OW 312
34611: ST_TO_ADDR
// if j then
34612: LD_VAR 0 7
34616: IFFALSE 34646
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34618: LD_ADDR_VAR 0 10
34622: PUSH
34623: LD_VAR 0 10
34627: PUSH
34628: LD_VAR 0 7
34632: PPUSH
34633: LD_INT 3
34635: PPUSH
34636: CALL_OW 259
34640: PUSH
34641: LD_INT 3
34643: MUL
34644: MUL
34645: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34646: LD_VAR 0 6
34650: PPUSH
34651: CALL_OW 264
34655: PUSH
34656: LD_INT 5
34658: PUSH
34659: LD_INT 6
34661: PUSH
34662: LD_INT 46
34664: PUSH
34665: LD_INT 44
34667: PUSH
34668: LD_INT 47
34670: PUSH
34671: LD_INT 45
34673: PUSH
34674: LD_INT 28
34676: PUSH
34677: LD_INT 7
34679: PUSH
34680: LD_INT 27
34682: PUSH
34683: LD_INT 29
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: IN
34698: PUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: LD_INT 52
34706: PPUSH
34707: CALL_OW 321
34711: PUSH
34712: LD_INT 2
34714: EQUAL
34715: AND
34716: IFFALSE 34733
// bpoints := bpoints * 1.2 ;
34718: LD_ADDR_VAR 0 10
34722: PUSH
34723: LD_VAR 0 10
34727: PUSH
34728: LD_REAL  1.20000000000000E+0000
34731: MUL
34732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34733: LD_VAR 0 6
34737: PPUSH
34738: CALL_OW 264
34742: PUSH
34743: LD_INT 6
34745: PUSH
34746: LD_INT 46
34748: PUSH
34749: LD_INT 47
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: IN
34757: IFFALSE 34774
// bpoints := bpoints * 1.2 ;
34759: LD_ADDR_VAR 0 10
34763: PUSH
34764: LD_VAR 0 10
34768: PUSH
34769: LD_REAL  1.20000000000000E+0000
34772: MUL
34773: ST_TO_ADDR
// end ; unit_building :
34774: GO 34788
34776: LD_INT 3
34778: DOUBLE
34779: EQUAL
34780: IFTRUE 34784
34782: GO 34787
34784: POP
// ; end ;
34785: GO 34788
34787: POP
// for j = 1 to 3 do
34788: LD_ADDR_VAR 0 7
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_INT 3
34800: PUSH
34801: FOR_TO
34802: IFFALSE 34855
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34804: LD_ADDR_VAR 0 5
34808: PUSH
34809: LD_VAR 0 5
34813: PPUSH
34814: LD_VAR 0 7
34818: PPUSH
34819: LD_VAR 0 5
34823: PUSH
34824: LD_VAR 0 7
34828: ARRAY
34829: PUSH
34830: LD_VAR 0 9
34834: PUSH
34835: LD_VAR 0 7
34839: ARRAY
34840: PUSH
34841: LD_VAR 0 10
34845: MUL
34846: PLUS
34847: PPUSH
34848: CALL_OW 1
34852: ST_TO_ADDR
34853: GO 34801
34855: POP
34856: POP
// end ;
34857: GO 33336
34859: POP
34860: POP
// result := Replace ( result , 4 , tmp ) ;
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 5
34870: PPUSH
34871: LD_INT 4
34873: PPUSH
34874: LD_VAR 0 8
34878: PPUSH
34879: CALL_OW 1
34883: ST_TO_ADDR
// end ;
34884: LD_VAR 0 5
34888: RET
// export function DangerAtRange ( unit , range ) ; begin
34889: LD_INT 0
34891: PPUSH
// if not unit then
34892: LD_VAR 0 1
34896: NOT
34897: IFFALSE 34901
// exit ;
34899: GO 34946
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34901: LD_ADDR_VAR 0 3
34905: PUSH
34906: LD_VAR 0 1
34910: PPUSH
34911: CALL_OW 255
34915: PPUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: CALL_OW 250
34925: PPUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: CALL_OW 251
34935: PPUSH
34936: LD_VAR 0 2
34940: PPUSH
34941: CALL 33188 0 4
34945: ST_TO_ADDR
// end ;
34946: LD_VAR 0 3
34950: RET
// export function DangerInArea ( side , area ) ; begin
34951: LD_INT 0
34953: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34954: LD_ADDR_VAR 0 3
34958: PUSH
34959: LD_VAR 0 2
34963: PPUSH
34964: LD_INT 81
34966: PUSH
34967: LD_VAR 0 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PPUSH
34976: CALL_OW 70
34980: ST_TO_ADDR
// end ;
34981: LD_VAR 0 3
34985: RET
// export function IsExtension ( b ) ; begin
34986: LD_INT 0
34988: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34989: LD_ADDR_VAR 0 2
34993: PUSH
34994: LD_VAR 0 1
34998: PUSH
34999: LD_INT 23
35001: PUSH
35002: LD_INT 20
35004: PUSH
35005: LD_INT 22
35007: PUSH
35008: LD_INT 17
35010: PUSH
35011: LD_INT 24
35013: PUSH
35014: LD_INT 21
35016: PUSH
35017: LD_INT 19
35019: PUSH
35020: LD_INT 16
35022: PUSH
35023: LD_INT 25
35025: PUSH
35026: LD_INT 18
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: IN
35041: ST_TO_ADDR
// end ;
35042: LD_VAR 0 2
35046: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35047: LD_INT 0
35049: PPUSH
35050: PPUSH
35051: PPUSH
// result := [ ] ;
35052: LD_ADDR_VAR 0 4
35056: PUSH
35057: EMPTY
35058: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35059: LD_ADDR_VAR 0 5
35063: PUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: LD_INT 21
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PPUSH
35079: CALL_OW 70
35083: ST_TO_ADDR
// if not tmp then
35084: LD_VAR 0 5
35088: NOT
35089: IFFALSE 35093
// exit ;
35091: GO 35157
// if checkLink then
35093: LD_VAR 0 3
35097: IFFALSE 35147
// begin for i in tmp do
35099: LD_ADDR_VAR 0 6
35103: PUSH
35104: LD_VAR 0 5
35108: PUSH
35109: FOR_IN
35110: IFFALSE 35145
// if GetBase ( i ) <> base then
35112: LD_VAR 0 6
35116: PPUSH
35117: CALL_OW 274
35121: PUSH
35122: LD_VAR 0 1
35126: NONEQUAL
35127: IFFALSE 35143
// ComLinkToBase ( base , i ) ;
35129: LD_VAR 0 1
35133: PPUSH
35134: LD_VAR 0 6
35138: PPUSH
35139: CALL_OW 169
35143: GO 35109
35145: POP
35146: POP
// end ; result := tmp ;
35147: LD_ADDR_VAR 0 4
35151: PUSH
35152: LD_VAR 0 5
35156: ST_TO_ADDR
// end ;
35157: LD_VAR 0 4
35161: RET
// export function ComComplete ( units , b ) ; var i ; begin
35162: LD_INT 0
35164: PPUSH
35165: PPUSH
// if not units then
35166: LD_VAR 0 1
35170: NOT
35171: IFFALSE 35175
// exit ;
35173: GO 35265
// for i in units do
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_VAR 0 1
35184: PUSH
35185: FOR_IN
35186: IFFALSE 35263
// if BuildingStatus ( b ) = bs_build then
35188: LD_VAR 0 2
35192: PPUSH
35193: CALL_OW 461
35197: PUSH
35198: LD_INT 1
35200: EQUAL
35201: IFFALSE 35261
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35203: LD_VAR 0 4
35207: PPUSH
35208: LD_STRING h
35210: PUSH
35211: LD_VAR 0 2
35215: PPUSH
35216: CALL_OW 250
35220: PUSH
35221: LD_VAR 0 2
35225: PPUSH
35226: CALL_OW 251
35230: PUSH
35231: LD_VAR 0 2
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: PPUSH
35257: CALL_OW 446
35261: GO 35185
35263: POP
35264: POP
// end ;
35265: LD_VAR 0 3
35269: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35278: LD_VAR 0 1
35282: NOT
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 263
35293: PUSH
35294: LD_INT 2
35296: NONEQUAL
35297: OR
35298: IFFALSE 35302
// exit ;
35300: GO 35618
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35302: LD_ADDR_VAR 0 6
35306: PUSH
35307: LD_INT 22
35309: PUSH
35310: LD_VAR 0 1
35314: PPUSH
35315: CALL_OW 255
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 30
35329: PUSH
35330: LD_INT 36
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 34
35339: PUSH
35340: LD_INT 31
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PPUSH
35356: CALL_OW 69
35360: ST_TO_ADDR
// if not tmp then
35361: LD_VAR 0 6
35365: NOT
35366: IFFALSE 35370
// exit ;
35368: GO 35618
// result := [ ] ;
35370: LD_ADDR_VAR 0 2
35374: PUSH
35375: EMPTY
35376: ST_TO_ADDR
// for i in tmp do
35377: LD_ADDR_VAR 0 3
35381: PUSH
35382: LD_VAR 0 6
35386: PUSH
35387: FOR_IN
35388: IFFALSE 35459
// begin t := UnitsInside ( i ) ;
35390: LD_ADDR_VAR 0 4
35394: PUSH
35395: LD_VAR 0 3
35399: PPUSH
35400: CALL_OW 313
35404: ST_TO_ADDR
// if t then
35405: LD_VAR 0 4
35409: IFFALSE 35457
// for j in t do
35411: LD_ADDR_VAR 0 7
35415: PUSH
35416: LD_VAR 0 4
35420: PUSH
35421: FOR_IN
35422: IFFALSE 35455
// result := Replace ( result , result + 1 , j ) ;
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_VAR 0 2
35433: PPUSH
35434: LD_VAR 0 2
35438: PUSH
35439: LD_INT 1
35441: PLUS
35442: PPUSH
35443: LD_VAR 0 7
35447: PPUSH
35448: CALL_OW 1
35452: ST_TO_ADDR
35453: GO 35421
35455: POP
35456: POP
// end ;
35457: GO 35387
35459: POP
35460: POP
// if not result then
35461: LD_VAR 0 2
35465: NOT
35466: IFFALSE 35470
// exit ;
35468: GO 35618
// mech := result [ 1 ] ;
35470: LD_ADDR_VAR 0 5
35474: PUSH
35475: LD_VAR 0 2
35479: PUSH
35480: LD_INT 1
35482: ARRAY
35483: ST_TO_ADDR
// if result > 1 then
35484: LD_VAR 0 2
35488: PUSH
35489: LD_INT 1
35491: GREATER
35492: IFFALSE 35604
// begin for i = 2 to result do
35494: LD_ADDR_VAR 0 3
35498: PUSH
35499: DOUBLE
35500: LD_INT 2
35502: DEC
35503: ST_TO_ADDR
35504: LD_VAR 0 2
35508: PUSH
35509: FOR_TO
35510: IFFALSE 35602
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35512: LD_ADDR_VAR 0 4
35516: PUSH
35517: LD_VAR 0 2
35521: PUSH
35522: LD_VAR 0 3
35526: ARRAY
35527: PPUSH
35528: LD_INT 3
35530: PPUSH
35531: CALL_OW 259
35535: PUSH
35536: LD_VAR 0 2
35540: PUSH
35541: LD_VAR 0 3
35545: ARRAY
35546: PPUSH
35547: CALL_OW 432
35551: MINUS
35552: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35553: LD_VAR 0 4
35557: PUSH
35558: LD_VAR 0 5
35562: PPUSH
35563: LD_INT 3
35565: PPUSH
35566: CALL_OW 259
35570: PUSH
35571: LD_VAR 0 5
35575: PPUSH
35576: CALL_OW 432
35580: MINUS
35581: GREATEREQUAL
35582: IFFALSE 35600
// mech := result [ i ] ;
35584: LD_ADDR_VAR 0 5
35588: PUSH
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 3
35598: ARRAY
35599: ST_TO_ADDR
// end ;
35600: GO 35509
35602: POP
35603: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35604: LD_VAR 0 1
35608: PPUSH
35609: LD_VAR 0 5
35613: PPUSH
35614: CALL_OW 135
// end ;
35618: LD_VAR 0 2
35622: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35623: LD_INT 0
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
// result := [ ] ;
35638: LD_ADDR_VAR 0 7
35642: PUSH
35643: EMPTY
35644: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 266
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: IN
35665: NOT
35666: IFFALSE 35670
// exit ;
35668: GO 37304
// if name then
35670: LD_VAR 0 3
35674: IFFALSE 35690
// SetBName ( base_dep , name ) ;
35676: LD_VAR 0 1
35680: PPUSH
35681: LD_VAR 0 3
35685: PPUSH
35686: CALL_OW 500
// base := GetBase ( base_dep ) ;
35690: LD_ADDR_VAR 0 15
35694: PUSH
35695: LD_VAR 0 1
35699: PPUSH
35700: CALL_OW 274
35704: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35705: LD_ADDR_VAR 0 16
35709: PUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 255
35719: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35720: LD_ADDR_VAR 0 17
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 248
35734: ST_TO_ADDR
// if sources then
35735: LD_VAR 0 5
35739: IFFALSE 35786
// for i = 1 to 3 do
35741: LD_ADDR_VAR 0 8
35745: PUSH
35746: DOUBLE
35747: LD_INT 1
35749: DEC
35750: ST_TO_ADDR
35751: LD_INT 3
35753: PUSH
35754: FOR_TO
35755: IFFALSE 35784
// AddResourceType ( base , i , sources [ i ] ) ;
35757: LD_VAR 0 15
35761: PPUSH
35762: LD_VAR 0 8
35766: PPUSH
35767: LD_VAR 0 5
35771: PUSH
35772: LD_VAR 0 8
35776: ARRAY
35777: PPUSH
35778: CALL_OW 276
35782: GO 35754
35784: POP
35785: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35786: LD_ADDR_VAR 0 18
35790: PUSH
35791: LD_VAR 0 15
35795: PPUSH
35796: LD_VAR 0 2
35800: PPUSH
35801: LD_INT 1
35803: PPUSH
35804: CALL 35047 0 3
35808: ST_TO_ADDR
// InitHc ;
35809: CALL_OW 19
// InitUc ;
35813: CALL_OW 18
// uc_side := side ;
35817: LD_ADDR_OWVAR 20
35821: PUSH
35822: LD_VAR 0 16
35826: ST_TO_ADDR
// uc_nation := nation ;
35827: LD_ADDR_OWVAR 21
35831: PUSH
35832: LD_VAR 0 17
35836: ST_TO_ADDR
// if buildings then
35837: LD_VAR 0 18
35841: IFFALSE 37163
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35843: LD_ADDR_VAR 0 19
35847: PUSH
35848: LD_VAR 0 18
35852: PPUSH
35853: LD_INT 2
35855: PUSH
35856: LD_INT 30
35858: PUSH
35859: LD_INT 29
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 30
35868: PUSH
35869: LD_INT 30
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: PPUSH
35881: CALL_OW 72
35885: ST_TO_ADDR
// if tmp then
35886: LD_VAR 0 19
35890: IFFALSE 35938
// for i in tmp do
35892: LD_ADDR_VAR 0 8
35896: PUSH
35897: LD_VAR 0 19
35901: PUSH
35902: FOR_IN
35903: IFFALSE 35936
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35905: LD_VAR 0 8
35909: PPUSH
35910: CALL_OW 250
35914: PPUSH
35915: LD_VAR 0 8
35919: PPUSH
35920: CALL_OW 251
35924: PPUSH
35925: LD_VAR 0 16
35929: PPUSH
35930: CALL_OW 441
35934: GO 35902
35936: POP
35937: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35938: LD_VAR 0 18
35942: PPUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 30
35948: PUSH
35949: LD_INT 32
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 30
35958: PUSH
35959: LD_INT 33
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: PPUSH
35971: CALL_OW 72
35975: IFFALSE 36063
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35977: LD_ADDR_VAR 0 8
35981: PUSH
35982: LD_VAR 0 18
35986: PPUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 30
35992: PUSH
35993: LD_INT 32
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 30
36002: PUSH
36003: LD_INT 33
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: PPUSH
36015: CALL_OW 72
36019: PUSH
36020: FOR_IN
36021: IFFALSE 36061
// begin if not GetBWeapon ( i ) then
36023: LD_VAR 0 8
36027: PPUSH
36028: CALL_OW 269
36032: NOT
36033: IFFALSE 36059
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36035: LD_VAR 0 8
36039: PPUSH
36040: LD_VAR 0 8
36044: PPUSH
36045: LD_VAR 0 2
36049: PPUSH
36050: CALL 37309 0 2
36054: PPUSH
36055: CALL_OW 431
// end ;
36059: GO 36020
36061: POP
36062: POP
// end ; for i = 1 to personel do
36063: LD_ADDR_VAR 0 8
36067: PUSH
36068: DOUBLE
36069: LD_INT 1
36071: DEC
36072: ST_TO_ADDR
36073: LD_VAR 0 6
36077: PUSH
36078: FOR_TO
36079: IFFALSE 37143
// begin if i > 4 then
36081: LD_VAR 0 8
36085: PUSH
36086: LD_INT 4
36088: GREATER
36089: IFFALSE 36093
// break ;
36091: GO 37143
// case i of 1 :
36093: LD_VAR 0 8
36097: PUSH
36098: LD_INT 1
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36106
36104: GO 36186
36106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36107: LD_ADDR_VAR 0 12
36111: PUSH
36112: LD_VAR 0 18
36116: PPUSH
36117: LD_INT 22
36119: PUSH
36120: LD_VAR 0 16
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 58
36131: PUSH
36132: EMPTY
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: LD_INT 30
36140: PUSH
36141: LD_INT 32
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 30
36150: PUSH
36151: LD_INT 4
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 30
36160: PUSH
36161: LD_INT 5
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: PPUSH
36179: CALL_OW 72
36183: ST_TO_ADDR
36184: GO 36408
36186: LD_INT 2
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36256
36194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36195: LD_ADDR_VAR 0 12
36199: PUSH
36200: LD_VAR 0 18
36204: PPUSH
36205: LD_INT 22
36207: PUSH
36208: LD_VAR 0 16
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: LD_INT 30
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 30
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PPUSH
36249: CALL_OW 72
36253: ST_TO_ADDR
36254: GO 36408
36256: LD_INT 3
36258: DOUBLE
36259: EQUAL
36260: IFTRUE 36264
36262: GO 36326
36264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36265: LD_ADDR_VAR 0 12
36269: PUSH
36270: LD_VAR 0 18
36274: PPUSH
36275: LD_INT 22
36277: PUSH
36278: LD_VAR 0 16
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 30
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 30
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PPUSH
36319: CALL_OW 72
36323: ST_TO_ADDR
36324: GO 36408
36326: LD_INT 4
36328: DOUBLE
36329: EQUAL
36330: IFTRUE 36334
36332: GO 36407
36334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36335: LD_ADDR_VAR 0 12
36339: PUSH
36340: LD_VAR 0 18
36344: PPUSH
36345: LD_INT 22
36347: PUSH
36348: LD_VAR 0 16
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 30
36362: PUSH
36363: LD_INT 6
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 30
36372: PUSH
36373: LD_INT 7
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 30
36382: PUSH
36383: LD_INT 8
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PPUSH
36400: CALL_OW 72
36404: ST_TO_ADDR
36405: GO 36408
36407: POP
// if i = 1 then
36408: LD_VAR 0 8
36412: PUSH
36413: LD_INT 1
36415: EQUAL
36416: IFFALSE 36527
// begin tmp := [ ] ;
36418: LD_ADDR_VAR 0 19
36422: PUSH
36423: EMPTY
36424: ST_TO_ADDR
// for j in f do
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: LD_VAR 0 12
36434: PUSH
36435: FOR_IN
36436: IFFALSE 36509
// if GetBType ( j ) = b_bunker then
36438: LD_VAR 0 9
36442: PPUSH
36443: CALL_OW 266
36447: PUSH
36448: LD_INT 32
36450: EQUAL
36451: IFFALSE 36478
// tmp := Insert ( tmp , 1 , j ) else
36453: LD_ADDR_VAR 0 19
36457: PUSH
36458: LD_VAR 0 19
36462: PPUSH
36463: LD_INT 1
36465: PPUSH
36466: LD_VAR 0 9
36470: PPUSH
36471: CALL_OW 2
36475: ST_TO_ADDR
36476: GO 36507
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36478: LD_ADDR_VAR 0 19
36482: PUSH
36483: LD_VAR 0 19
36487: PPUSH
36488: LD_VAR 0 19
36492: PUSH
36493: LD_INT 1
36495: PLUS
36496: PPUSH
36497: LD_VAR 0 9
36501: PPUSH
36502: CALL_OW 2
36506: ST_TO_ADDR
36507: GO 36435
36509: POP
36510: POP
// if tmp then
36511: LD_VAR 0 19
36515: IFFALSE 36527
// f := tmp ;
36517: LD_ADDR_VAR 0 12
36521: PUSH
36522: LD_VAR 0 19
36526: ST_TO_ADDR
// end ; x := personel [ i ] ;
36527: LD_ADDR_VAR 0 13
36531: PUSH
36532: LD_VAR 0 6
36536: PUSH
36537: LD_VAR 0 8
36541: ARRAY
36542: ST_TO_ADDR
// if x = - 1 then
36543: LD_VAR 0 13
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: EQUAL
36552: IFFALSE 36761
// begin for j in f do
36554: LD_ADDR_VAR 0 9
36558: PUSH
36559: LD_VAR 0 12
36563: PUSH
36564: FOR_IN
36565: IFFALSE 36757
// repeat InitHc ;
36567: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36571: LD_VAR 0 9
36575: PPUSH
36576: CALL_OW 266
36580: PUSH
36581: LD_INT 5
36583: EQUAL
36584: IFFALSE 36654
// begin if UnitsInside ( j ) < 3 then
36586: LD_VAR 0 9
36590: PPUSH
36591: CALL_OW 313
36595: PUSH
36596: LD_INT 3
36598: LESS
36599: IFFALSE 36635
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36601: LD_INT 0
36603: PPUSH
36604: LD_INT 5
36606: PUSH
36607: LD_INT 8
36609: PUSH
36610: LD_INT 9
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: LD_VAR 0 17
36622: ARRAY
36623: PPUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: CALL_OW 380
36633: GO 36652
// PrepareHuman ( false , i , skill ) ;
36635: LD_INT 0
36637: PPUSH
36638: LD_VAR 0 8
36642: PPUSH
36643: LD_VAR 0 4
36647: PPUSH
36648: CALL_OW 380
// end else
36652: GO 36671
// PrepareHuman ( false , i , skill ) ;
36654: LD_INT 0
36656: PPUSH
36657: LD_VAR 0 8
36661: PPUSH
36662: LD_VAR 0 4
36666: PPUSH
36667: CALL_OW 380
// un := CreateHuman ;
36671: LD_ADDR_VAR 0 14
36675: PUSH
36676: CALL_OW 44
36680: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36681: LD_ADDR_VAR 0 7
36685: PUSH
36686: LD_VAR 0 7
36690: PPUSH
36691: LD_INT 1
36693: PPUSH
36694: LD_VAR 0 14
36698: PPUSH
36699: CALL_OW 2
36703: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36704: LD_VAR 0 14
36708: PPUSH
36709: LD_VAR 0 9
36713: PPUSH
36714: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36718: LD_VAR 0 9
36722: PPUSH
36723: CALL_OW 313
36727: PUSH
36728: LD_INT 6
36730: EQUAL
36731: PUSH
36732: LD_VAR 0 9
36736: PPUSH
36737: CALL_OW 266
36741: PUSH
36742: LD_INT 32
36744: PUSH
36745: LD_INT 31
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: IN
36752: OR
36753: IFFALSE 36567
36755: GO 36564
36757: POP
36758: POP
// end else
36759: GO 37141
// for j = 1 to x do
36761: LD_ADDR_VAR 0 9
36765: PUSH
36766: DOUBLE
36767: LD_INT 1
36769: DEC
36770: ST_TO_ADDR
36771: LD_VAR 0 13
36775: PUSH
36776: FOR_TO
36777: IFFALSE 37139
// begin InitHc ;
36779: CALL_OW 19
// if not f then
36783: LD_VAR 0 12
36787: NOT
36788: IFFALSE 36877
// begin PrepareHuman ( false , i , skill ) ;
36790: LD_INT 0
36792: PPUSH
36793: LD_VAR 0 8
36797: PPUSH
36798: LD_VAR 0 4
36802: PPUSH
36803: CALL_OW 380
// un := CreateHuman ;
36807: LD_ADDR_VAR 0 14
36811: PUSH
36812: CALL_OW 44
36816: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36817: LD_ADDR_VAR 0 7
36821: PUSH
36822: LD_VAR 0 7
36826: PPUSH
36827: LD_INT 1
36829: PPUSH
36830: LD_VAR 0 14
36834: PPUSH
36835: CALL_OW 2
36839: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36840: LD_VAR 0 14
36844: PPUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 250
36854: PPUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 251
36864: PPUSH
36865: LD_INT 10
36867: PPUSH
36868: LD_INT 0
36870: PPUSH
36871: CALL_OW 50
// continue ;
36875: GO 36776
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36877: LD_VAR 0 12
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PPUSH
36886: CALL_OW 313
36890: PUSH
36891: LD_VAR 0 12
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PPUSH
36900: CALL_OW 266
36904: PUSH
36905: LD_INT 32
36907: PUSH
36908: LD_INT 31
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: IN
36915: AND
36916: PUSH
36917: LD_VAR 0 12
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: CALL_OW 313
36930: PUSH
36931: LD_INT 6
36933: EQUAL
36934: OR
36935: IFFALSE 36955
// f := Delete ( f , 1 ) ;
36937: LD_ADDR_VAR 0 12
36941: PUSH
36942: LD_VAR 0 12
36946: PPUSH
36947: LD_INT 1
36949: PPUSH
36950: CALL_OW 3
36954: ST_TO_ADDR
// if not f then
36955: LD_VAR 0 12
36959: NOT
36960: IFFALSE 36978
// begin x := x + 2 ;
36962: LD_ADDR_VAR 0 13
36966: PUSH
36967: LD_VAR 0 13
36971: PUSH
36972: LD_INT 2
36974: PLUS
36975: ST_TO_ADDR
// continue ;
36976: GO 36776
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36978: LD_VAR 0 12
36982: PUSH
36983: LD_INT 1
36985: ARRAY
36986: PPUSH
36987: CALL_OW 266
36991: PUSH
36992: LD_INT 5
36994: EQUAL
36995: IFFALSE 37069
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36997: LD_VAR 0 12
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: PPUSH
37006: CALL_OW 313
37010: PUSH
37011: LD_INT 3
37013: LESS
37014: IFFALSE 37050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37016: LD_INT 0
37018: PPUSH
37019: LD_INT 5
37021: PUSH
37022: LD_INT 8
37024: PUSH
37025: LD_INT 9
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: PUSH
37033: LD_VAR 0 17
37037: ARRAY
37038: PPUSH
37039: LD_VAR 0 4
37043: PPUSH
37044: CALL_OW 380
37048: GO 37067
// PrepareHuman ( false , i , skill ) ;
37050: LD_INT 0
37052: PPUSH
37053: LD_VAR 0 8
37057: PPUSH
37058: LD_VAR 0 4
37062: PPUSH
37063: CALL_OW 380
// end else
37067: GO 37086
// PrepareHuman ( false , i , skill ) ;
37069: LD_INT 0
37071: PPUSH
37072: LD_VAR 0 8
37076: PPUSH
37077: LD_VAR 0 4
37081: PPUSH
37082: CALL_OW 380
// un := CreateHuman ;
37086: LD_ADDR_VAR 0 14
37090: PUSH
37091: CALL_OW 44
37095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37096: LD_ADDR_VAR 0 7
37100: PUSH
37101: LD_VAR 0 7
37105: PPUSH
37106: LD_INT 1
37108: PPUSH
37109: LD_VAR 0 14
37113: PPUSH
37114: CALL_OW 2
37118: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37119: LD_VAR 0 14
37123: PPUSH
37124: LD_VAR 0 12
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: PPUSH
37133: CALL_OW 52
// end ;
37137: GO 36776
37139: POP
37140: POP
// end ;
37141: GO 36078
37143: POP
37144: POP
// result := result ^ buildings ;
37145: LD_ADDR_VAR 0 7
37149: PUSH
37150: LD_VAR 0 7
37154: PUSH
37155: LD_VAR 0 18
37159: ADD
37160: ST_TO_ADDR
// end else
37161: GO 37304
// begin for i = 1 to personel do
37163: LD_ADDR_VAR 0 8
37167: PUSH
37168: DOUBLE
37169: LD_INT 1
37171: DEC
37172: ST_TO_ADDR
37173: LD_VAR 0 6
37177: PUSH
37178: FOR_TO
37179: IFFALSE 37302
// begin if i > 4 then
37181: LD_VAR 0 8
37185: PUSH
37186: LD_INT 4
37188: GREATER
37189: IFFALSE 37193
// break ;
37191: GO 37302
// x := personel [ i ] ;
37193: LD_ADDR_VAR 0 13
37197: PUSH
37198: LD_VAR 0 6
37202: PUSH
37203: LD_VAR 0 8
37207: ARRAY
37208: ST_TO_ADDR
// if x = - 1 then
37209: LD_VAR 0 13
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: EQUAL
37218: IFFALSE 37222
// continue ;
37220: GO 37178
// PrepareHuman ( false , i , skill ) ;
37222: LD_INT 0
37224: PPUSH
37225: LD_VAR 0 8
37229: PPUSH
37230: LD_VAR 0 4
37234: PPUSH
37235: CALL_OW 380
// un := CreateHuman ;
37239: LD_ADDR_VAR 0 14
37243: PUSH
37244: CALL_OW 44
37248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37249: LD_VAR 0 14
37253: PPUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL_OW 250
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 251
37273: PPUSH
37274: LD_INT 10
37276: PPUSH
37277: LD_INT 0
37279: PPUSH
37280: CALL_OW 50
// result := result ^ un ;
37284: LD_ADDR_VAR 0 7
37288: PUSH
37289: LD_VAR 0 7
37293: PUSH
37294: LD_VAR 0 14
37298: ADD
37299: ST_TO_ADDR
// end ;
37300: GO 37178
37302: POP
37303: POP
// end ; end ;
37304: LD_VAR 0 7
37308: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37309: LD_INT 0
37311: PPUSH
37312: PPUSH
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
// result := false ;
37327: LD_ADDR_VAR 0 3
37331: PUSH
37332: LD_INT 0
37334: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37335: LD_VAR 0 1
37339: NOT
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 266
37350: PUSH
37351: LD_INT 32
37353: PUSH
37354: LD_INT 33
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: IN
37361: NOT
37362: OR
37363: IFFALSE 37367
// exit ;
37365: GO 38476
// nat := GetNation ( tower ) ;
37367: LD_ADDR_VAR 0 12
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 248
37381: ST_TO_ADDR
// side := GetSide ( tower ) ;
37382: LD_ADDR_VAR 0 16
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 255
37396: ST_TO_ADDR
// x := GetX ( tower ) ;
37397: LD_ADDR_VAR 0 10
37401: PUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 250
37411: ST_TO_ADDR
// y := GetY ( tower ) ;
37412: LD_ADDR_VAR 0 11
37416: PUSH
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 251
37426: ST_TO_ADDR
// if not x or not y then
37427: LD_VAR 0 10
37431: NOT
37432: PUSH
37433: LD_VAR 0 11
37437: NOT
37438: OR
37439: IFFALSE 37443
// exit ;
37441: GO 38476
// weapon := 0 ;
37443: LD_ADDR_VAR 0 18
37447: PUSH
37448: LD_INT 0
37450: ST_TO_ADDR
// fac_list := [ ] ;
37451: LD_ADDR_VAR 0 17
37455: PUSH
37456: EMPTY
37457: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37458: LD_ADDR_VAR 0 6
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 274
37472: PPUSH
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_INT 0
37480: PPUSH
37481: CALL 35047 0 3
37485: PPUSH
37486: LD_INT 30
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 72
37500: ST_TO_ADDR
// if not factories then
37501: LD_VAR 0 6
37505: NOT
37506: IFFALSE 37510
// exit ;
37508: GO 38476
// for i in factories do
37510: LD_ADDR_VAR 0 8
37514: PUSH
37515: LD_VAR 0 6
37519: PUSH
37520: FOR_IN
37521: IFFALSE 37546
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37523: LD_ADDR_VAR 0 17
37527: PUSH
37528: LD_VAR 0 17
37532: PUSH
37533: LD_VAR 0 8
37537: PPUSH
37538: CALL_OW 478
37542: UNION
37543: ST_TO_ADDR
37544: GO 37520
37546: POP
37547: POP
// if not fac_list then
37548: LD_VAR 0 17
37552: NOT
37553: IFFALSE 37557
// exit ;
37555: GO 38476
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37557: LD_ADDR_VAR 0 5
37561: PUSH
37562: LD_INT 4
37564: PUSH
37565: LD_INT 5
37567: PUSH
37568: LD_INT 9
37570: PUSH
37571: LD_INT 10
37573: PUSH
37574: LD_INT 6
37576: PUSH
37577: LD_INT 7
37579: PUSH
37580: LD_INT 11
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 27
37594: PUSH
37595: LD_INT 28
37597: PUSH
37598: LD_INT 26
37600: PUSH
37601: LD_INT 30
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 43
37612: PUSH
37613: LD_INT 44
37615: PUSH
37616: LD_INT 46
37618: PUSH
37619: LD_INT 45
37621: PUSH
37622: LD_INT 47
37624: PUSH
37625: LD_INT 49
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: PUSH
37641: LD_VAR 0 12
37645: ARRAY
37646: ST_TO_ADDR
// list := list isect fac_list ;
37647: LD_ADDR_VAR 0 5
37651: PUSH
37652: LD_VAR 0 5
37656: PUSH
37657: LD_VAR 0 17
37661: ISECT
37662: ST_TO_ADDR
// if not list then
37663: LD_VAR 0 5
37667: NOT
37668: IFFALSE 37672
// exit ;
37670: GO 38476
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37672: LD_VAR 0 12
37676: PUSH
37677: LD_INT 3
37679: EQUAL
37680: PUSH
37681: LD_INT 49
37683: PUSH
37684: LD_VAR 0 5
37688: IN
37689: AND
37690: PUSH
37691: LD_INT 31
37693: PPUSH
37694: LD_VAR 0 16
37698: PPUSH
37699: CALL_OW 321
37703: PUSH
37704: LD_INT 2
37706: EQUAL
37707: AND
37708: IFFALSE 37768
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37710: LD_INT 22
37712: PUSH
37713: LD_VAR 0 16
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 35
37724: PUSH
37725: LD_INT 49
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 91
37734: PUSH
37735: LD_VAR 0 1
37739: PUSH
37740: LD_INT 10
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: PPUSH
37753: CALL_OW 69
37757: NOT
37758: IFFALSE 37768
// weapon := ru_time_lapser ;
37760: LD_ADDR_VAR 0 18
37764: PUSH
37765: LD_INT 49
37767: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37768: LD_VAR 0 12
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: IN
37783: PUSH
37784: LD_INT 11
37786: PUSH
37787: LD_VAR 0 5
37791: IN
37792: PUSH
37793: LD_INT 30
37795: PUSH
37796: LD_VAR 0 5
37800: IN
37801: OR
37802: AND
37803: PUSH
37804: LD_INT 6
37806: PPUSH
37807: LD_VAR 0 16
37811: PPUSH
37812: CALL_OW 321
37816: PUSH
37817: LD_INT 2
37819: EQUAL
37820: AND
37821: IFFALSE 37986
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37823: LD_INT 22
37825: PUSH
37826: LD_VAR 0 16
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 35
37840: PUSH
37841: LD_INT 11
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 35
37850: PUSH
37851: LD_INT 30
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 91
37865: PUSH
37866: LD_VAR 0 1
37870: PUSH
37871: LD_INT 18
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: PPUSH
37884: CALL_OW 69
37888: NOT
37889: PUSH
37890: LD_INT 22
37892: PUSH
37893: LD_VAR 0 16
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: LD_INT 30
37907: PUSH
37908: LD_INT 32
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: LD_INT 33
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 91
37932: PUSH
37933: LD_VAR 0 1
37937: PUSH
37938: LD_INT 12
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: PPUSH
37954: CALL_OW 69
37958: PUSH
37959: LD_INT 2
37961: GREATER
37962: AND
37963: IFFALSE 37986
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37965: LD_ADDR_VAR 0 18
37969: PUSH
37970: LD_INT 11
37972: PUSH
37973: LD_INT 30
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_VAR 0 12
37984: ARRAY
37985: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37986: LD_VAR 0 18
37990: NOT
37991: PUSH
37992: LD_INT 40
37994: PPUSH
37995: LD_VAR 0 16
37999: PPUSH
38000: CALL_OW 321
38004: PUSH
38005: LD_INT 2
38007: EQUAL
38008: AND
38009: PUSH
38010: LD_INT 7
38012: PUSH
38013: LD_VAR 0 5
38017: IN
38018: PUSH
38019: LD_INT 28
38021: PUSH
38022: LD_VAR 0 5
38026: IN
38027: OR
38028: PUSH
38029: LD_INT 45
38031: PUSH
38032: LD_VAR 0 5
38036: IN
38037: OR
38038: AND
38039: IFFALSE 38293
// begin hex := GetHexInfo ( x , y ) ;
38041: LD_ADDR_VAR 0 4
38045: PUSH
38046: LD_VAR 0 10
38050: PPUSH
38051: LD_VAR 0 11
38055: PPUSH
38056: CALL_OW 546
38060: ST_TO_ADDR
// if hex [ 1 ] then
38061: LD_VAR 0 4
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: IFFALSE 38073
// exit ;
38071: GO 38476
// height := hex [ 2 ] ;
38073: LD_ADDR_VAR 0 15
38077: PUSH
38078: LD_VAR 0 4
38082: PUSH
38083: LD_INT 2
38085: ARRAY
38086: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38087: LD_ADDR_VAR 0 14
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: LD_INT 5
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// for i in tmp do
38110: LD_ADDR_VAR 0 8
38114: PUSH
38115: LD_VAR 0 14
38119: PUSH
38120: FOR_IN
38121: IFFALSE 38291
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38123: LD_ADDR_VAR 0 9
38127: PUSH
38128: LD_VAR 0 10
38132: PPUSH
38133: LD_VAR 0 8
38137: PPUSH
38138: LD_INT 5
38140: PPUSH
38141: CALL_OW 272
38145: PUSH
38146: LD_VAR 0 11
38150: PPUSH
38151: LD_VAR 0 8
38155: PPUSH
38156: LD_INT 5
38158: PPUSH
38159: CALL_OW 273
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38168: LD_VAR 0 9
38172: PUSH
38173: LD_INT 1
38175: ARRAY
38176: PPUSH
38177: LD_VAR 0 9
38181: PUSH
38182: LD_INT 2
38184: ARRAY
38185: PPUSH
38186: CALL_OW 488
38190: IFFALSE 38289
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38192: LD_ADDR_VAR 0 4
38196: PUSH
38197: LD_VAR 0 9
38201: PUSH
38202: LD_INT 1
38204: ARRAY
38205: PPUSH
38206: LD_VAR 0 9
38210: PUSH
38211: LD_INT 2
38213: ARRAY
38214: PPUSH
38215: CALL_OW 546
38219: ST_TO_ADDR
// if hex [ 1 ] then
38220: LD_VAR 0 4
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: IFFALSE 38232
// continue ;
38230: GO 38120
// h := hex [ 2 ] ;
38232: LD_ADDR_VAR 0 13
38236: PUSH
38237: LD_VAR 0 4
38241: PUSH
38242: LD_INT 2
38244: ARRAY
38245: ST_TO_ADDR
// if h + 7 < height then
38246: LD_VAR 0 13
38250: PUSH
38251: LD_INT 7
38253: PLUS
38254: PUSH
38255: LD_VAR 0 15
38259: LESS
38260: IFFALSE 38289
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38262: LD_ADDR_VAR 0 18
38266: PUSH
38267: LD_INT 7
38269: PUSH
38270: LD_INT 28
38272: PUSH
38273: LD_INT 45
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: PUSH
38281: LD_VAR 0 12
38285: ARRAY
38286: ST_TO_ADDR
// break ;
38287: GO 38291
// end ; end ; end ;
38289: GO 38120
38291: POP
38292: POP
// end ; if not weapon then
38293: LD_VAR 0 18
38297: NOT
38298: IFFALSE 38358
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38300: LD_ADDR_VAR 0 5
38304: PUSH
38305: LD_VAR 0 5
38309: PUSH
38310: LD_INT 11
38312: PUSH
38313: LD_INT 30
38315: PUSH
38316: LD_INT 49
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: DIFF
38324: ST_TO_ADDR
// if not list then
38325: LD_VAR 0 5
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 38476
// weapon := list [ rand ( 1 , list ) ] ;
38334: LD_ADDR_VAR 0 18
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: PPUSH
38347: LD_VAR 0 5
38351: PPUSH
38352: CALL_OW 12
38356: ARRAY
38357: ST_TO_ADDR
// end ; if weapon then
38358: LD_VAR 0 18
38362: IFFALSE 38476
// begin tmp := CostOfWeapon ( weapon ) ;
38364: LD_ADDR_VAR 0 14
38368: PUSH
38369: LD_VAR 0 18
38373: PPUSH
38374: CALL_OW 451
38378: ST_TO_ADDR
// j := GetBase ( tower ) ;
38379: LD_ADDR_VAR 0 9
38383: PUSH
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 274
38393: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38394: LD_VAR 0 9
38398: PPUSH
38399: LD_INT 1
38401: PPUSH
38402: CALL_OW 275
38406: PUSH
38407: LD_VAR 0 14
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: GREATEREQUAL
38416: PUSH
38417: LD_VAR 0 9
38421: PPUSH
38422: LD_INT 2
38424: PPUSH
38425: CALL_OW 275
38429: PUSH
38430: LD_VAR 0 14
38434: PUSH
38435: LD_INT 2
38437: ARRAY
38438: GREATEREQUAL
38439: AND
38440: PUSH
38441: LD_VAR 0 9
38445: PPUSH
38446: LD_INT 3
38448: PPUSH
38449: CALL_OW 275
38453: PUSH
38454: LD_VAR 0 14
38458: PUSH
38459: LD_INT 3
38461: ARRAY
38462: GREATEREQUAL
38463: AND
38464: IFFALSE 38476
// result := weapon ;
38466: LD_ADDR_VAR 0 3
38470: PUSH
38471: LD_VAR 0 18
38475: ST_TO_ADDR
// end ; end ;
38476: LD_VAR 0 3
38480: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
// result := true ;
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_INT 1
38492: ST_TO_ADDR
// if array1 = array2 then
38493: LD_VAR 0 1
38497: PUSH
38498: LD_VAR 0 2
38502: EQUAL
38503: IFFALSE 38563
// begin for i = 1 to array1 do
38505: LD_ADDR_VAR 0 4
38509: PUSH
38510: DOUBLE
38511: LD_INT 1
38513: DEC
38514: ST_TO_ADDR
38515: LD_VAR 0 1
38519: PUSH
38520: FOR_TO
38521: IFFALSE 38559
// if array1 [ i ] <> array2 [ i ] then
38523: LD_VAR 0 1
38527: PUSH
38528: LD_VAR 0 4
38532: ARRAY
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_VAR 0 4
38543: ARRAY
38544: NONEQUAL
38545: IFFALSE 38557
// begin result := false ;
38547: LD_ADDR_VAR 0 3
38551: PUSH
38552: LD_INT 0
38554: ST_TO_ADDR
// break ;
38555: GO 38559
// end ;
38557: GO 38520
38559: POP
38560: POP
// end else
38561: GO 38571
// result := false ;
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_INT 0
38570: ST_TO_ADDR
// end ;
38571: LD_VAR 0 3
38575: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38576: LD_INT 0
38578: PPUSH
38579: PPUSH
// if not array1 or not array2 then
38580: LD_VAR 0 1
38584: NOT
38585: PUSH
38586: LD_VAR 0 2
38590: NOT
38591: OR
38592: IFFALSE 38596
// exit ;
38594: GO 38660
// result := true ;
38596: LD_ADDR_VAR 0 3
38600: PUSH
38601: LD_INT 1
38603: ST_TO_ADDR
// for i = 1 to array1 do
38604: LD_ADDR_VAR 0 4
38608: PUSH
38609: DOUBLE
38610: LD_INT 1
38612: DEC
38613: ST_TO_ADDR
38614: LD_VAR 0 1
38618: PUSH
38619: FOR_TO
38620: IFFALSE 38658
// if array1 [ i ] <> array2 [ i ] then
38622: LD_VAR 0 1
38626: PUSH
38627: LD_VAR 0 4
38631: ARRAY
38632: PUSH
38633: LD_VAR 0 2
38637: PUSH
38638: LD_VAR 0 4
38642: ARRAY
38643: NONEQUAL
38644: IFFALSE 38656
// begin result := false ;
38646: LD_ADDR_VAR 0 3
38650: PUSH
38651: LD_INT 0
38653: ST_TO_ADDR
// break ;
38654: GO 38658
// end ;
38656: GO 38619
38658: POP
38659: POP
// end ;
38660: LD_VAR 0 3
38664: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38665: LD_INT 0
38667: PPUSH
38668: PPUSH
38669: PPUSH
// pom := GetBase ( fac ) ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 1
38679: PPUSH
38680: CALL_OW 274
38684: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38685: LD_ADDR_VAR 0 4
38689: PUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: LD_VAR 0 2
38703: PUSH
38704: LD_INT 2
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 2
38712: PUSH
38713: LD_INT 3
38715: ARRAY
38716: PPUSH
38717: LD_VAR 0 2
38721: PUSH
38722: LD_INT 4
38724: ARRAY
38725: PPUSH
38726: CALL_OW 449
38730: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: LD_VAR 0 5
38740: PPUSH
38741: LD_INT 1
38743: PPUSH
38744: CALL_OW 275
38748: PUSH
38749: LD_VAR 0 4
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: GREATEREQUAL
38758: PUSH
38759: LD_VAR 0 5
38763: PPUSH
38764: LD_INT 2
38766: PPUSH
38767: CALL_OW 275
38771: PUSH
38772: LD_VAR 0 4
38776: PUSH
38777: LD_INT 2
38779: ARRAY
38780: GREATEREQUAL
38781: AND
38782: PUSH
38783: LD_VAR 0 5
38787: PPUSH
38788: LD_INT 3
38790: PPUSH
38791: CALL_OW 275
38795: PUSH
38796: LD_VAR 0 4
38800: PUSH
38801: LD_INT 3
38803: ARRAY
38804: GREATEREQUAL
38805: AND
38806: ST_TO_ADDR
// end ;
38807: LD_VAR 0 3
38811: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38812: LD_INT 0
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
// pom := GetBase ( building ) ;
38818: LD_ADDR_VAR 0 3
38822: PUSH
38823: LD_VAR 0 1
38827: PPUSH
38828: CALL_OW 274
38832: ST_TO_ADDR
// if not pom then
38833: LD_VAR 0 3
38837: NOT
38838: IFFALSE 38842
// exit ;
38840: GO 39012
// btype := GetBType ( building ) ;
38842: LD_ADDR_VAR 0 5
38846: PUSH
38847: LD_VAR 0 1
38851: PPUSH
38852: CALL_OW 266
38856: ST_TO_ADDR
// if btype = b_armoury then
38857: LD_VAR 0 5
38861: PUSH
38862: LD_INT 4
38864: EQUAL
38865: IFFALSE 38875
// btype := b_barracks ;
38867: LD_ADDR_VAR 0 5
38871: PUSH
38872: LD_INT 5
38874: ST_TO_ADDR
// if btype = b_depot then
38875: LD_VAR 0 5
38879: PUSH
38880: LD_INT 0
38882: EQUAL
38883: IFFALSE 38893
// btype := b_warehouse ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_INT 1
38892: ST_TO_ADDR
// if btype = b_workshop then
38893: LD_VAR 0 5
38897: PUSH
38898: LD_INT 2
38900: EQUAL
38901: IFFALSE 38911
// btype := b_factory ;
38903: LD_ADDR_VAR 0 5
38907: PUSH
38908: LD_INT 3
38910: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38911: LD_ADDR_VAR 0 4
38915: PUSH
38916: LD_VAR 0 5
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 248
38930: PPUSH
38931: CALL_OW 450
38935: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38936: LD_ADDR_VAR 0 2
38940: PUSH
38941: LD_VAR 0 3
38945: PPUSH
38946: LD_INT 1
38948: PPUSH
38949: CALL_OW 275
38953: PUSH
38954: LD_VAR 0 4
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: GREATEREQUAL
38963: PUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: LD_INT 2
38971: PPUSH
38972: CALL_OW 275
38976: PUSH
38977: LD_VAR 0 4
38981: PUSH
38982: LD_INT 2
38984: ARRAY
38985: GREATEREQUAL
38986: AND
38987: PUSH
38988: LD_VAR 0 3
38992: PPUSH
38993: LD_INT 3
38995: PPUSH
38996: CALL_OW 275
39000: PUSH
39001: LD_VAR 0 4
39005: PUSH
39006: LD_INT 3
39008: ARRAY
39009: GREATEREQUAL
39010: AND
39011: ST_TO_ADDR
// end ;
39012: LD_VAR 0 2
39016: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39017: LD_INT 0
39019: PPUSH
39020: PPUSH
39021: PPUSH
// pom := GetBase ( building ) ;
39022: LD_ADDR_VAR 0 4
39026: PUSH
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL_OW 274
39036: ST_TO_ADDR
// if not pom then
39037: LD_VAR 0 4
39041: NOT
39042: IFFALSE 39046
// exit ;
39044: GO 39147
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39046: LD_ADDR_VAR 0 5
39050: PUSH
39051: LD_VAR 0 2
39055: PPUSH
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 248
39065: PPUSH
39066: CALL_OW 450
39070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_VAR 0 4
39080: PPUSH
39081: LD_INT 1
39083: PPUSH
39084: CALL_OW 275
39088: PUSH
39089: LD_VAR 0 5
39093: PUSH
39094: LD_INT 1
39096: ARRAY
39097: GREATEREQUAL
39098: PUSH
39099: LD_VAR 0 4
39103: PPUSH
39104: LD_INT 2
39106: PPUSH
39107: CALL_OW 275
39111: PUSH
39112: LD_VAR 0 5
39116: PUSH
39117: LD_INT 2
39119: ARRAY
39120: GREATEREQUAL
39121: AND
39122: PUSH
39123: LD_VAR 0 4
39127: PPUSH
39128: LD_INT 3
39130: PPUSH
39131: CALL_OW 275
39135: PUSH
39136: LD_VAR 0 5
39140: PUSH
39141: LD_INT 3
39143: ARRAY
39144: GREATEREQUAL
39145: AND
39146: ST_TO_ADDR
// end ;
39147: LD_VAR 0 3
39151: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39152: LD_INT 0
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
// result := false ;
39165: LD_ADDR_VAR 0 8
39169: PUSH
39170: LD_INT 0
39172: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39173: LD_VAR 0 5
39177: NOT
39178: PUSH
39179: LD_VAR 0 1
39183: NOT
39184: OR
39185: PUSH
39186: LD_VAR 0 2
39190: NOT
39191: OR
39192: PUSH
39193: LD_VAR 0 3
39197: NOT
39198: OR
39199: IFFALSE 39203
// exit ;
39201: GO 40017
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39203: LD_ADDR_VAR 0 14
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: LD_VAR 0 2
39217: PPUSH
39218: LD_VAR 0 3
39222: PPUSH
39223: LD_VAR 0 4
39227: PPUSH
39228: LD_VAR 0 5
39232: PUSH
39233: LD_INT 1
39235: ARRAY
39236: PPUSH
39237: CALL_OW 248
39241: PPUSH
39242: LD_INT 0
39244: PPUSH
39245: CALL 41270 0 6
39249: ST_TO_ADDR
// if not hexes then
39250: LD_VAR 0 14
39254: NOT
39255: IFFALSE 39259
// exit ;
39257: GO 40017
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39259: LD_ADDR_VAR 0 17
39263: PUSH
39264: LD_VAR 0 5
39268: PPUSH
39269: LD_INT 22
39271: PUSH
39272: LD_VAR 0 13
39276: PPUSH
39277: CALL_OW 255
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 30
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 30
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PPUSH
39318: CALL_OW 72
39322: ST_TO_ADDR
// for i = 1 to hexes do
39323: LD_ADDR_VAR 0 9
39327: PUSH
39328: DOUBLE
39329: LD_INT 1
39331: DEC
39332: ST_TO_ADDR
39333: LD_VAR 0 14
39337: PUSH
39338: FOR_TO
39339: IFFALSE 40015
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39341: LD_ADDR_VAR 0 13
39345: PUSH
39346: LD_VAR 0 14
39350: PUSH
39351: LD_VAR 0 9
39355: ARRAY
39356: PUSH
39357: LD_INT 1
39359: ARRAY
39360: PPUSH
39361: LD_VAR 0 14
39365: PUSH
39366: LD_VAR 0 9
39370: ARRAY
39371: PUSH
39372: LD_INT 2
39374: ARRAY
39375: PPUSH
39376: CALL_OW 428
39380: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39381: LD_VAR 0 14
39385: PUSH
39386: LD_VAR 0 9
39390: ARRAY
39391: PUSH
39392: LD_INT 1
39394: ARRAY
39395: PPUSH
39396: LD_VAR 0 14
39400: PUSH
39401: LD_VAR 0 9
39405: ARRAY
39406: PUSH
39407: LD_INT 2
39409: ARRAY
39410: PPUSH
39411: CALL_OW 351
39415: PUSH
39416: LD_VAR 0 14
39420: PUSH
39421: LD_VAR 0 9
39425: ARRAY
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: LD_VAR 0 14
39435: PUSH
39436: LD_VAR 0 9
39440: ARRAY
39441: PUSH
39442: LD_INT 2
39444: ARRAY
39445: PPUSH
39446: CALL_OW 488
39450: NOT
39451: OR
39452: PUSH
39453: LD_VAR 0 13
39457: PPUSH
39458: CALL_OW 247
39462: PUSH
39463: LD_INT 3
39465: EQUAL
39466: OR
39467: IFFALSE 39473
// exit ;
39469: POP
39470: POP
39471: GO 40017
// if not tmp then
39473: LD_VAR 0 13
39477: NOT
39478: IFFALSE 39482
// continue ;
39480: GO 39338
// result := true ;
39482: LD_ADDR_VAR 0 8
39486: PUSH
39487: LD_INT 1
39489: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39490: LD_VAR 0 6
39494: PUSH
39495: LD_VAR 0 13
39499: PPUSH
39500: CALL_OW 247
39504: PUSH
39505: LD_INT 2
39507: EQUAL
39508: AND
39509: PUSH
39510: LD_VAR 0 13
39514: PPUSH
39515: CALL_OW 263
39519: PUSH
39520: LD_INT 1
39522: EQUAL
39523: AND
39524: IFFALSE 39688
// begin if IsDrivenBy ( tmp ) then
39526: LD_VAR 0 13
39530: PPUSH
39531: CALL_OW 311
39535: IFFALSE 39539
// continue ;
39537: GO 39338
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39539: LD_VAR 0 6
39543: PPUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 60
39549: PUSH
39550: EMPTY
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: LD_INT 55
39562: PUSH
39563: EMPTY
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PPUSH
39574: CALL_OW 72
39578: IFFALSE 39686
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39580: LD_ADDR_VAR 0 18
39584: PUSH
39585: LD_VAR 0 6
39589: PPUSH
39590: LD_INT 3
39592: PUSH
39593: LD_INT 60
39595: PUSH
39596: EMPTY
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: LD_INT 55
39608: PUSH
39609: EMPTY
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PPUSH
39620: CALL_OW 72
39624: PUSH
39625: LD_INT 1
39627: ARRAY
39628: ST_TO_ADDR
// if IsInUnit ( driver ) then
39629: LD_VAR 0 18
39633: PPUSH
39634: CALL_OW 310
39638: IFFALSE 39649
// ComExit ( driver ) ;
39640: LD_VAR 0 18
39644: PPUSH
39645: CALL 65071 0 1
// AddComEnterUnit ( driver , tmp ) ;
39649: LD_VAR 0 18
39653: PPUSH
39654: LD_VAR 0 13
39658: PPUSH
39659: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39663: LD_VAR 0 18
39667: PPUSH
39668: LD_VAR 0 7
39672: PPUSH
39673: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39677: LD_VAR 0 18
39681: PPUSH
39682: CALL_OW 181
// end ; continue ;
39686: GO 39338
// end ; if not cleaners or not tmp in cleaners then
39688: LD_VAR 0 6
39692: NOT
39693: PUSH
39694: LD_VAR 0 13
39698: PUSH
39699: LD_VAR 0 6
39703: IN
39704: NOT
39705: OR
39706: IFFALSE 40013
// begin if dep then
39708: LD_VAR 0 17
39712: IFFALSE 39848
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39714: LD_ADDR_VAR 0 16
39718: PUSH
39719: LD_VAR 0 17
39723: PUSH
39724: LD_INT 1
39726: ARRAY
39727: PPUSH
39728: CALL_OW 250
39732: PPUSH
39733: LD_VAR 0 17
39737: PUSH
39738: LD_INT 1
39740: ARRAY
39741: PPUSH
39742: CALL_OW 254
39746: PPUSH
39747: LD_INT 5
39749: PPUSH
39750: CALL_OW 272
39754: PUSH
39755: LD_VAR 0 17
39759: PUSH
39760: LD_INT 1
39762: ARRAY
39763: PPUSH
39764: CALL_OW 251
39768: PPUSH
39769: LD_VAR 0 17
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PPUSH
39778: CALL_OW 254
39782: PPUSH
39783: LD_INT 5
39785: PPUSH
39786: CALL_OW 273
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39795: LD_VAR 0 16
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PPUSH
39804: LD_VAR 0 16
39808: PUSH
39809: LD_INT 2
39811: ARRAY
39812: PPUSH
39813: CALL_OW 488
39817: IFFALSE 39848
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39819: LD_VAR 0 13
39823: PPUSH
39824: LD_VAR 0 16
39828: PUSH
39829: LD_INT 1
39831: ARRAY
39832: PPUSH
39833: LD_VAR 0 16
39837: PUSH
39838: LD_INT 2
39840: ARRAY
39841: PPUSH
39842: CALL_OW 111
// continue ;
39846: GO 39338
// end ; end ; r := GetDir ( tmp ) ;
39848: LD_ADDR_VAR 0 15
39852: PUSH
39853: LD_VAR 0 13
39857: PPUSH
39858: CALL_OW 254
39862: ST_TO_ADDR
// if r = 5 then
39863: LD_VAR 0 15
39867: PUSH
39868: LD_INT 5
39870: EQUAL
39871: IFFALSE 39881
// r := 0 ;
39873: LD_ADDR_VAR 0 15
39877: PUSH
39878: LD_INT 0
39880: ST_TO_ADDR
// for j = r to 5 do
39881: LD_ADDR_VAR 0 10
39885: PUSH
39886: DOUBLE
39887: LD_VAR 0 15
39891: DEC
39892: ST_TO_ADDR
39893: LD_INT 5
39895: PUSH
39896: FOR_TO
39897: IFFALSE 40011
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39899: LD_ADDR_VAR 0 11
39903: PUSH
39904: LD_VAR 0 13
39908: PPUSH
39909: CALL_OW 250
39913: PPUSH
39914: LD_VAR 0 10
39918: PPUSH
39919: LD_INT 2
39921: PPUSH
39922: CALL_OW 272
39926: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39927: LD_ADDR_VAR 0 12
39931: PUSH
39932: LD_VAR 0 13
39936: PPUSH
39937: CALL_OW 251
39941: PPUSH
39942: LD_VAR 0 10
39946: PPUSH
39947: LD_INT 2
39949: PPUSH
39950: CALL_OW 273
39954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39955: LD_VAR 0 11
39959: PPUSH
39960: LD_VAR 0 12
39964: PPUSH
39965: CALL_OW 488
39969: PUSH
39970: LD_VAR 0 11
39974: PPUSH
39975: LD_VAR 0 12
39979: PPUSH
39980: CALL_OW 428
39984: NOT
39985: AND
39986: IFFALSE 40009
// begin ComMoveXY ( tmp , _x , _y ) ;
39988: LD_VAR 0 13
39992: PPUSH
39993: LD_VAR 0 11
39997: PPUSH
39998: LD_VAR 0 12
40002: PPUSH
40003: CALL_OW 111
// break ;
40007: GO 40011
// end ; end ;
40009: GO 39896
40011: POP
40012: POP
// end ; end ;
40013: GO 39338
40015: POP
40016: POP
// end ;
40017: LD_VAR 0 8
40021: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40022: LD_INT 0
40024: PPUSH
// result := true ;
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 1
40032: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40033: LD_VAR 0 2
40037: PUSH
40038: LD_INT 24
40040: DOUBLE
40041: EQUAL
40042: IFTRUE 40052
40044: LD_INT 33
40046: DOUBLE
40047: EQUAL
40048: IFTRUE 40052
40050: GO 40077
40052: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40053: LD_ADDR_VAR 0 3
40057: PUSH
40058: LD_INT 32
40060: PPUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 321
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: ST_TO_ADDR
40075: GO 40393
40077: LD_INT 20
40079: DOUBLE
40080: EQUAL
40081: IFTRUE 40085
40083: GO 40110
40085: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40086: LD_ADDR_VAR 0 3
40090: PUSH
40091: LD_INT 6
40093: PPUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 321
40103: PUSH
40104: LD_INT 2
40106: EQUAL
40107: ST_TO_ADDR
40108: GO 40393
40110: LD_INT 22
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40124
40116: LD_INT 36
40118: DOUBLE
40119: EQUAL
40120: IFTRUE 40124
40122: GO 40149
40124: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_INT 15
40132: PPUSH
40133: LD_VAR 0 1
40137: PPUSH
40138: CALL_OW 321
40142: PUSH
40143: LD_INT 2
40145: EQUAL
40146: ST_TO_ADDR
40147: GO 40393
40149: LD_INT 30
40151: DOUBLE
40152: EQUAL
40153: IFTRUE 40157
40155: GO 40182
40157: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_INT 20
40165: PPUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 321
40175: PUSH
40176: LD_INT 2
40178: EQUAL
40179: ST_TO_ADDR
40180: GO 40393
40182: LD_INT 28
40184: DOUBLE
40185: EQUAL
40186: IFTRUE 40196
40188: LD_INT 21
40190: DOUBLE
40191: EQUAL
40192: IFTRUE 40196
40194: GO 40221
40196: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40197: LD_ADDR_VAR 0 3
40201: PUSH
40202: LD_INT 21
40204: PPUSH
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 321
40214: PUSH
40215: LD_INT 2
40217: EQUAL
40218: ST_TO_ADDR
40219: GO 40393
40221: LD_INT 16
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40254
40229: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 84
40237: PPUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 321
40247: PUSH
40248: LD_INT 2
40250: EQUAL
40251: ST_TO_ADDR
40252: GO 40393
40254: LD_INT 19
40256: DOUBLE
40257: EQUAL
40258: IFTRUE 40268
40260: LD_INT 23
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40293
40268: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 83
40276: PPUSH
40277: LD_VAR 0 1
40281: PPUSH
40282: CALL_OW 321
40286: PUSH
40287: LD_INT 2
40289: EQUAL
40290: ST_TO_ADDR
40291: GO 40393
40293: LD_INT 17
40295: DOUBLE
40296: EQUAL
40297: IFTRUE 40301
40299: GO 40326
40301: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40302: LD_ADDR_VAR 0 3
40306: PUSH
40307: LD_INT 39
40309: PPUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 321
40319: PUSH
40320: LD_INT 2
40322: EQUAL
40323: ST_TO_ADDR
40324: GO 40393
40326: LD_INT 18
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40359
40334: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 40
40342: PPUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 321
40352: PUSH
40353: LD_INT 2
40355: EQUAL
40356: ST_TO_ADDR
40357: GO 40393
40359: LD_INT 27
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40392
40367: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 35
40375: PPUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 321
40385: PUSH
40386: LD_INT 2
40388: EQUAL
40389: ST_TO_ADDR
40390: GO 40393
40392: POP
// end ;
40393: LD_VAR 0 3
40397: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40398: LD_INT 0
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
// result := false ;
40411: LD_ADDR_VAR 0 6
40415: PUSH
40416: LD_INT 0
40418: ST_TO_ADDR
// if btype = b_depot then
40419: LD_VAR 0 2
40423: PUSH
40424: LD_INT 0
40426: EQUAL
40427: IFFALSE 40439
// begin result := true ;
40429: LD_ADDR_VAR 0 6
40433: PUSH
40434: LD_INT 1
40436: ST_TO_ADDR
// exit ;
40437: GO 41265
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40439: LD_VAR 0 1
40443: NOT
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL_OW 266
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: IN
40465: NOT
40466: OR
40467: PUSH
40468: LD_VAR 0 2
40472: NOT
40473: OR
40474: PUSH
40475: LD_VAR 0 5
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: LD_INT 4
40494: PUSH
40495: LD_INT 5
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: IN
40506: NOT
40507: OR
40508: PUSH
40509: LD_VAR 0 3
40513: PPUSH
40514: LD_VAR 0 4
40518: PPUSH
40519: CALL_OW 488
40523: NOT
40524: OR
40525: IFFALSE 40529
// exit ;
40527: GO 41265
// side := GetSide ( depot ) ;
40529: LD_ADDR_VAR 0 9
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 255
40543: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40544: LD_VAR 0 9
40548: PPUSH
40549: LD_VAR 0 2
40553: PPUSH
40554: CALL 40022 0 2
40558: NOT
40559: IFFALSE 40563
// exit ;
40561: GO 41265
// pom := GetBase ( depot ) ;
40563: LD_ADDR_VAR 0 10
40567: PUSH
40568: LD_VAR 0 1
40572: PPUSH
40573: CALL_OW 274
40577: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40578: LD_ADDR_VAR 0 11
40582: PUSH
40583: LD_VAR 0 2
40587: PPUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 248
40597: PPUSH
40598: CALL_OW 450
40602: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40603: LD_VAR 0 10
40607: PPUSH
40608: LD_INT 1
40610: PPUSH
40611: CALL_OW 275
40615: PUSH
40616: LD_VAR 0 11
40620: PUSH
40621: LD_INT 1
40623: ARRAY
40624: GREATEREQUAL
40625: PUSH
40626: LD_VAR 0 10
40630: PPUSH
40631: LD_INT 2
40633: PPUSH
40634: CALL_OW 275
40638: PUSH
40639: LD_VAR 0 11
40643: PUSH
40644: LD_INT 2
40646: ARRAY
40647: GREATEREQUAL
40648: AND
40649: PUSH
40650: LD_VAR 0 10
40654: PPUSH
40655: LD_INT 3
40657: PPUSH
40658: CALL_OW 275
40662: PUSH
40663: LD_VAR 0 11
40667: PUSH
40668: LD_INT 3
40670: ARRAY
40671: GREATEREQUAL
40672: AND
40673: NOT
40674: IFFALSE 40678
// exit ;
40676: GO 41265
// if GetBType ( depot ) = b_depot then
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 266
40687: PUSH
40688: LD_INT 0
40690: EQUAL
40691: IFFALSE 40703
// dist := 28 else
40693: LD_ADDR_VAR 0 14
40697: PUSH
40698: LD_INT 28
40700: ST_TO_ADDR
40701: GO 40711
// dist := 36 ;
40703: LD_ADDR_VAR 0 14
40707: PUSH
40708: LD_INT 36
40710: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40711: LD_VAR 0 1
40715: PPUSH
40716: LD_VAR 0 3
40720: PPUSH
40721: LD_VAR 0 4
40725: PPUSH
40726: CALL_OW 297
40730: PUSH
40731: LD_VAR 0 14
40735: GREATER
40736: IFFALSE 40740
// exit ;
40738: GO 41265
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40740: LD_ADDR_VAR 0 12
40744: PUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: LD_VAR 0 3
40754: PPUSH
40755: LD_VAR 0 4
40759: PPUSH
40760: LD_VAR 0 5
40764: PPUSH
40765: LD_VAR 0 1
40769: PPUSH
40770: CALL_OW 248
40774: PPUSH
40775: LD_INT 0
40777: PPUSH
40778: CALL 41270 0 6
40782: ST_TO_ADDR
// if not hexes then
40783: LD_VAR 0 12
40787: NOT
40788: IFFALSE 40792
// exit ;
40790: GO 41265
// hex := GetHexInfo ( x , y ) ;
40792: LD_ADDR_VAR 0 15
40796: PUSH
40797: LD_VAR 0 3
40801: PPUSH
40802: LD_VAR 0 4
40806: PPUSH
40807: CALL_OW 546
40811: ST_TO_ADDR
// if hex [ 1 ] then
40812: LD_VAR 0 15
40816: PUSH
40817: LD_INT 1
40819: ARRAY
40820: IFFALSE 40824
// exit ;
40822: GO 41265
// height := hex [ 2 ] ;
40824: LD_ADDR_VAR 0 13
40828: PUSH
40829: LD_VAR 0 15
40833: PUSH
40834: LD_INT 2
40836: ARRAY
40837: ST_TO_ADDR
// for i = 1 to hexes do
40838: LD_ADDR_VAR 0 7
40842: PUSH
40843: DOUBLE
40844: LD_INT 1
40846: DEC
40847: ST_TO_ADDR
40848: LD_VAR 0 12
40852: PUSH
40853: FOR_TO
40854: IFFALSE 41184
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40856: LD_VAR 0 12
40860: PUSH
40861: LD_VAR 0 7
40865: ARRAY
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 12
40875: PUSH
40876: LD_VAR 0 7
40880: ARRAY
40881: PUSH
40882: LD_INT 2
40884: ARRAY
40885: PPUSH
40886: CALL_OW 488
40890: NOT
40891: PUSH
40892: LD_VAR 0 12
40896: PUSH
40897: LD_VAR 0 7
40901: ARRAY
40902: PUSH
40903: LD_INT 1
40905: ARRAY
40906: PPUSH
40907: LD_VAR 0 12
40911: PUSH
40912: LD_VAR 0 7
40916: ARRAY
40917: PUSH
40918: LD_INT 2
40920: ARRAY
40921: PPUSH
40922: CALL_OW 428
40926: PUSH
40927: LD_INT 0
40929: GREATER
40930: OR
40931: PUSH
40932: LD_VAR 0 12
40936: PUSH
40937: LD_VAR 0 7
40941: ARRAY
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 12
40951: PUSH
40952: LD_VAR 0 7
40956: ARRAY
40957: PUSH
40958: LD_INT 2
40960: ARRAY
40961: PPUSH
40962: CALL_OW 351
40966: OR
40967: IFFALSE 40973
// exit ;
40969: POP
40970: POP
40971: GO 41265
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40973: LD_ADDR_VAR 0 8
40977: PUSH
40978: LD_VAR 0 12
40982: PUSH
40983: LD_VAR 0 7
40987: ARRAY
40988: PUSH
40989: LD_INT 1
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 12
40997: PUSH
40998: LD_VAR 0 7
41002: ARRAY
41003: PUSH
41004: LD_INT 2
41006: ARRAY
41007: PPUSH
41008: CALL_OW 546
41012: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41013: LD_VAR 0 8
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: PUSH
41022: LD_VAR 0 8
41026: PUSH
41027: LD_INT 2
41029: ARRAY
41030: PUSH
41031: LD_VAR 0 13
41035: PUSH
41036: LD_INT 2
41038: PLUS
41039: GREATER
41040: OR
41041: PUSH
41042: LD_VAR 0 8
41046: PUSH
41047: LD_INT 2
41049: ARRAY
41050: PUSH
41051: LD_VAR 0 13
41055: PUSH
41056: LD_INT 2
41058: MINUS
41059: LESS
41060: OR
41061: PUSH
41062: LD_VAR 0 8
41066: PUSH
41067: LD_INT 3
41069: ARRAY
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 8
41076: PUSH
41077: LD_INT 9
41079: PUSH
41080: LD_INT 10
41082: PUSH
41083: LD_INT 11
41085: PUSH
41086: LD_INT 12
41088: PUSH
41089: LD_INT 13
41091: PUSH
41092: LD_INT 16
41094: PUSH
41095: LD_INT 17
41097: PUSH
41098: LD_INT 18
41100: PUSH
41101: LD_INT 19
41103: PUSH
41104: LD_INT 20
41106: PUSH
41107: LD_INT 21
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: IN
41125: NOT
41126: OR
41127: PUSH
41128: LD_VAR 0 8
41132: PUSH
41133: LD_INT 5
41135: ARRAY
41136: NOT
41137: OR
41138: PUSH
41139: LD_VAR 0 8
41143: PUSH
41144: LD_INT 6
41146: ARRAY
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 7
41156: PUSH
41157: LD_INT 9
41159: PUSH
41160: LD_INT 10
41162: PUSH
41163: LD_INT 11
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: IN
41174: NOT
41175: OR
41176: IFFALSE 41182
// exit ;
41178: POP
41179: POP
41180: GO 41265
// end ;
41182: GO 40853
41184: POP
41185: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41186: LD_VAR 0 9
41190: PPUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: LD_INT 20
41203: PPUSH
41204: CALL 33188 0 4
41208: PUSH
41209: LD_INT 4
41211: ARRAY
41212: IFFALSE 41216
// exit ;
41214: GO 41265
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41216: LD_VAR 0 2
41220: PUSH
41221: LD_INT 29
41223: PUSH
41224: LD_INT 30
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: IN
41231: PUSH
41232: LD_VAR 0 3
41236: PPUSH
41237: LD_VAR 0 4
41241: PPUSH
41242: LD_VAR 0 9
41246: PPUSH
41247: CALL_OW 440
41251: NOT
41252: AND
41253: IFFALSE 41257
// exit ;
41255: GO 41265
// result := true ;
41257: LD_ADDR_VAR 0 6
41261: PUSH
41262: LD_INT 1
41264: ST_TO_ADDR
// end ;
41265: LD_VAR 0 6
41269: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41270: LD_INT 0
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
// result = [ ] ;
41330: LD_ADDR_VAR 0 7
41334: PUSH
41335: EMPTY
41336: ST_TO_ADDR
// temp_list = [ ] ;
41337: LD_ADDR_VAR 0 9
41341: PUSH
41342: EMPTY
41343: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: IN
41375: NOT
41376: PUSH
41377: LD_VAR 0 1
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: IN
41392: PUSH
41393: LD_VAR 0 5
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: IN
41412: NOT
41413: AND
41414: OR
41415: IFFALSE 41419
// exit ;
41417: GO 59810
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41419: LD_VAR 0 1
41423: PUSH
41424: LD_INT 6
41426: PUSH
41427: LD_INT 7
41429: PUSH
41430: LD_INT 8
41432: PUSH
41433: LD_INT 13
41435: PUSH
41436: LD_INT 12
41438: PUSH
41439: LD_INT 15
41441: PUSH
41442: LD_INT 11
41444: PUSH
41445: LD_INT 14
41447: PUSH
41448: LD_INT 10
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: IN
41462: IFFALSE 41472
// btype = b_lab ;
41464: LD_ADDR_VAR 0 1
41468: PUSH
41469: LD_INT 6
41471: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41472: LD_VAR 0 6
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: IN
41491: NOT
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: LD_INT 6
41512: PUSH
41513: LD_INT 36
41515: PUSH
41516: LD_INT 4
41518: PUSH
41519: LD_INT 5
41521: PUSH
41522: LD_INT 31
41524: PUSH
41525: LD_INT 32
41527: PUSH
41528: LD_INT 33
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: IN
41544: NOT
41545: PUSH
41546: LD_VAR 0 6
41550: PUSH
41551: LD_INT 1
41553: EQUAL
41554: AND
41555: OR
41556: PUSH
41557: LD_VAR 0 1
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 3
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: IN
41572: NOT
41573: PUSH
41574: LD_VAR 0 6
41578: PUSH
41579: LD_INT 2
41581: EQUAL
41582: AND
41583: OR
41584: IFFALSE 41594
// mode = 0 ;
41586: LD_ADDR_VAR 0 6
41590: PUSH
41591: LD_INT 0
41593: ST_TO_ADDR
// case mode of 0 :
41594: LD_VAR 0 6
41598: PUSH
41599: LD_INT 0
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 53060
41607: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41608: LD_ADDR_VAR 0 11
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41801: LD_ADDR_VAR 0 12
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41997: LD_ADDR_VAR 0 13
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 3
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: NEG
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42196: LD_ADDR_VAR 0 14
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 3
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42392: LD_ADDR_VAR 0 15
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42585: LD_ADDR_VAR 0 16
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42778: LD_ADDR_VAR 0 17
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43008: LD_ADDR_VAR 0 18
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43238: LD_ADDR_VAR 0 19
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43468: LD_ADDR_VAR 0 20
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43698: LD_ADDR_VAR 0 21
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43928: LD_ADDR_VAR 0 22
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44158: LD_ADDR_VAR 0 23
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 3
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44438: LD_ADDR_VAR 0 24
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44714: LD_ADDR_VAR 0 25
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 3
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44988: LD_ADDR_VAR 0 26
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45264: LD_ADDR_VAR 0 27
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45544: LD_ADDR_VAR 0 28
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 2
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45826: LD_ADDR_VAR 0 29
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 3
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46105: LD_ADDR_VAR 0 30
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46383: LD_ADDR_VAR 0 31
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46661: LD_ADDR_VAR 0 32
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 2
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46939: LD_ADDR_VAR 0 33
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: LD_INT 3
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47218: LD_ADDR_VAR 0 34
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 3
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47498: LD_ADDR_VAR 0 35
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47610: LD_ADDR_VAR 0 36
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47722: LD_ADDR_VAR 0 37
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47834: LD_ADDR_VAR 0 38
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47946: LD_ADDR_VAR 0 39
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48058: LD_ADDR_VAR 0 40
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48170: LD_ADDR_VAR 0 41
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48520: LD_ADDR_VAR 0 42
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48870: LD_ADDR_VAR 0 43
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49218: LD_ADDR_VAR 0 44
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49568: LD_ADDR_VAR 0 45
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 3
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49918: LD_ADDR_VAR 0 46
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50266: LD_ADDR_VAR 0 47
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50417: LD_ADDR_VAR 0 48
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50564: LD_ADDR_VAR 0 49
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50708: LD_ADDR_VAR 0 50
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50852: LD_ADDR_VAR 0 51
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50999: LD_ADDR_VAR 0 52
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51150: LD_ADDR_VAR 0 53
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51380: LD_ADDR_VAR 0 54
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51610: LD_ADDR_VAR 0 55
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 2
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51840: LD_ADDR_VAR 0 56
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52070: LD_ADDR_VAR 0 57
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52300: LD_ADDR_VAR 0 58
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52530: LD_ADDR_VAR 0 59
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52618: LD_ADDR_VAR 0 60
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52706: LD_ADDR_VAR 0 61
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52794: LD_ADDR_VAR 0 62
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52882: LD_ADDR_VAR 0 63
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52970: LD_ADDR_VAR 0 64
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// end ; 1 :
53058: GO 58955
53060: LD_INT 1
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 55691
53068: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53069: LD_ADDR_VAR 0 11
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 3
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53113: LD_ADDR_VAR 0 12
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: LIST
53153: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53154: LD_ADDR_VAR 0 13
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53194: LD_ADDR_VAR 0 14
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53235: LD_ADDR_VAR 0 15
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53279: LD_ADDR_VAR 0 16
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53325: LD_ADDR_VAR 0 17
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53369: LD_ADDR_VAR 0 18
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53410: LD_ADDR_VAR 0 19
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53450: LD_ADDR_VAR 0 20
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53491: LD_ADDR_VAR 0 21
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53535: LD_ADDR_VAR 0 22
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 3
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53581: LD_ADDR_VAR 0 23
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 4
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53625: LD_ADDR_VAR 0 24
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53666: LD_ADDR_VAR 0 25
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 4
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 4
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53706: LD_ADDR_VAR 0 26
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 4
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53747: LD_ADDR_VAR 0 27
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 4
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53791: LD_ADDR_VAR 0 28
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: LD_INT 4
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53837: LD_ADDR_VAR 0 29
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 4
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 5
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 5
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 4
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 6
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 6
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 5
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53992: LD_ADDR_VAR 0 30
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 4
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 4
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 5
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 5
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 6
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 6
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54135: LD_ADDR_VAR 0 31
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 4
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: PUSH
54183: LD_INT 4
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 4
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 5
54202: PUSH
54203: LD_INT 4
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 5
54212: PUSH
54213: LD_INT 5
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 4
54222: PUSH
54223: LD_INT 5
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 6
54232: PUSH
54233: LD_INT 5
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 6
54242: PUSH
54243: LD_INT 6
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 5
54252: PUSH
54253: LD_INT 6
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54274: LD_ADDR_VAR 0 32
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 5
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 5
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 6
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 6
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 5
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54417: LD_ADDR_VAR 0 33
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 4
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 4
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 5
54503: NEG
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 5
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 5
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 6
54537: NEG
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 6
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54572: LD_ADDR_VAR 0 34
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 4
54639: NEG
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 5
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 5
54663: NEG
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 5
54675: NEG
54676: PUSH
54677: LD_INT 5
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: NEG
54688: PUSH
54689: LD_INT 6
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 6
54699: NEG
54700: PUSH
54701: LD_INT 5
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 6
54711: NEG
54712: PUSH
54713: LD_INT 6
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54735: LD_ADDR_VAR 0 41
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54779: LD_ADDR_VAR 0 42
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54820: LD_ADDR_VAR 0 43
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54860: LD_ADDR_VAR 0 44
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54901: LD_ADDR_VAR 0 45
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54945: LD_ADDR_VAR 0 46
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54991: LD_ADDR_VAR 0 47
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55024: LD_ADDR_VAR 0 48
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55055: LD_ADDR_VAR 0 49
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55084: LD_ADDR_VAR 0 50
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 3
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55113: LD_ADDR_VAR 0 51
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55144: LD_ADDR_VAR 0 52
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55177: LD_ADDR_VAR 0 53
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55221: LD_ADDR_VAR 0 54
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55262: LD_ADDR_VAR 0 55
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55302: LD_ADDR_VAR 0 56
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55343: LD_ADDR_VAR 0 57
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55387: LD_ADDR_VAR 0 58
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55433: LD_ADDR_VAR 0 59
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55477: LD_ADDR_VAR 0 60
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55518: LD_ADDR_VAR 0 61
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55558: LD_ADDR_VAR 0 62
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55599: LD_ADDR_VAR 0 63
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55643: LD_ADDR_VAR 0 64
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// end ; 2 :
55689: GO 58955
55691: LD_INT 2
55693: DOUBLE
55694: EQUAL
55695: IFTRUE 55699
55697: GO 58954
55699: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55700: LD_ADDR_VAR 0 29
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 4
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 5
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: LD_INT 2
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 4
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 4
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 4
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 4
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 5
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 4
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 4
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: NEG
56098: PUSH
56099: LD_INT 5
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: NEG
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: NEG
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 5
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56238: LD_ADDR_VAR 0 30
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 5
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 4
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 4
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: LD_INT 4
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 4
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 4
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 5
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 5
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 5
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 4
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 4
56602: NEG
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 4
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 5
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 4
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 4
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 5
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 5
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56785: LD_ADDR_VAR 0 31
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 4
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 5
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 5
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 3
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 4
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 4
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: LD_INT 4
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 5
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 5
57059: NEG
57060: PUSH
57061: LD_INT 5
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 5
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 5
57083: NEG
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 4
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 3
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 4
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 5
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 5
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 4
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57335: LD_ADDR_VAR 0 32
57339: PUSH
57340: LD_INT 4
57342: NEG
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 4
57387: NEG
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 5
57398: NEG
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 5
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: NEG
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 4
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 4
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 5
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 3
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 4
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 5
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 5
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 4
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: LD_INT 4
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: LD_INT 3
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 5
57777: PUSH
57778: LD_INT 5
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 4
57787: PUSH
57788: LD_INT 5
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57882: LD_ADDR_VAR 0 33
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: LD_INT 5
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 4
57937: NEG
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 5
57949: NEG
57950: PUSH
57951: LD_INT 4
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: NEG
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 5
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 5
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: LD_INT 4
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 5
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 5
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: LD_INT 3
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 4
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 4
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 4
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 3
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 5
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 5
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: NEG
58333: PUSH
58334: LD_INT 4
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58420: LD_ADDR_VAR 0 34
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 5
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 4
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 5
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 5
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 4
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: LD_INT 4
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 4
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 5
58642: PUSH
58643: LD_INT 4
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 5
58652: PUSH
58653: LD_INT 5
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 4
58662: PUSH
58663: LD_INT 5
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: LD_INT 4
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 5
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: PUSH
58703: LD_INT 5
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 4
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 4
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 5
58861: NEG
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 5
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 5
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 3
58896: NEG
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// end ; end ;
58952: GO 58955
58954: POP
// case btype of b_depot , b_warehouse :
58955: LD_VAR 0 1
58959: PUSH
58960: LD_INT 0
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 58974
58966: LD_INT 1
58968: DOUBLE
58969: EQUAL
58970: IFTRUE 58974
58972: GO 59175
58974: POP
// case nation of nation_american :
58975: LD_VAR 0 5
58979: PUSH
58980: LD_INT 1
58982: DOUBLE
58983: EQUAL
58984: IFTRUE 58988
58986: GO 59044
58988: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58989: LD_ADDR_VAR 0 9
58993: PUSH
58994: LD_VAR 0 11
58998: PUSH
58999: LD_VAR 0 12
59003: PUSH
59004: LD_VAR 0 13
59008: PUSH
59009: LD_VAR 0 14
59013: PUSH
59014: LD_VAR 0 15
59018: PUSH
59019: LD_VAR 0 16
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: PUSH
59032: LD_VAR 0 4
59036: PUSH
59037: LD_INT 1
59039: PLUS
59040: ARRAY
59041: ST_TO_ADDR
59042: GO 59173
59044: LD_INT 2
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59052
59050: GO 59108
59052: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59053: LD_ADDR_VAR 0 9
59057: PUSH
59058: LD_VAR 0 17
59062: PUSH
59063: LD_VAR 0 18
59067: PUSH
59068: LD_VAR 0 19
59072: PUSH
59073: LD_VAR 0 20
59077: PUSH
59078: LD_VAR 0 21
59082: PUSH
59083: LD_VAR 0 22
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: PUSH
59096: LD_VAR 0 4
59100: PUSH
59101: LD_INT 1
59103: PLUS
59104: ARRAY
59105: ST_TO_ADDR
59106: GO 59173
59108: LD_INT 3
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59172
59116: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59117: LD_ADDR_VAR 0 9
59121: PUSH
59122: LD_VAR 0 23
59126: PUSH
59127: LD_VAR 0 24
59131: PUSH
59132: LD_VAR 0 25
59136: PUSH
59137: LD_VAR 0 26
59141: PUSH
59142: LD_VAR 0 27
59146: PUSH
59147: LD_VAR 0 28
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: PUSH
59160: LD_VAR 0 4
59164: PUSH
59165: LD_INT 1
59167: PLUS
59168: ARRAY
59169: ST_TO_ADDR
59170: GO 59173
59172: POP
59173: GO 59728
59175: LD_INT 2
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59189
59181: LD_INT 3
59183: DOUBLE
59184: EQUAL
59185: IFTRUE 59189
59187: GO 59245
59189: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59190: LD_ADDR_VAR 0 9
59194: PUSH
59195: LD_VAR 0 29
59199: PUSH
59200: LD_VAR 0 30
59204: PUSH
59205: LD_VAR 0 31
59209: PUSH
59210: LD_VAR 0 32
59214: PUSH
59215: LD_VAR 0 33
59219: PUSH
59220: LD_VAR 0 34
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: LD_VAR 0 4
59237: PUSH
59238: LD_INT 1
59240: PLUS
59241: ARRAY
59242: ST_TO_ADDR
59243: GO 59728
59245: LD_INT 16
59247: DOUBLE
59248: EQUAL
59249: IFTRUE 59307
59251: LD_INT 17
59253: DOUBLE
59254: EQUAL
59255: IFTRUE 59307
59257: LD_INT 18
59259: DOUBLE
59260: EQUAL
59261: IFTRUE 59307
59263: LD_INT 19
59265: DOUBLE
59266: EQUAL
59267: IFTRUE 59307
59269: LD_INT 22
59271: DOUBLE
59272: EQUAL
59273: IFTRUE 59307
59275: LD_INT 20
59277: DOUBLE
59278: EQUAL
59279: IFTRUE 59307
59281: LD_INT 21
59283: DOUBLE
59284: EQUAL
59285: IFTRUE 59307
59287: LD_INT 23
59289: DOUBLE
59290: EQUAL
59291: IFTRUE 59307
59293: LD_INT 24
59295: DOUBLE
59296: EQUAL
59297: IFTRUE 59307
59299: LD_INT 25
59301: DOUBLE
59302: EQUAL
59303: IFTRUE 59307
59305: GO 59363
59307: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59308: LD_ADDR_VAR 0 9
59312: PUSH
59313: LD_VAR 0 35
59317: PUSH
59318: LD_VAR 0 36
59322: PUSH
59323: LD_VAR 0 37
59327: PUSH
59328: LD_VAR 0 38
59332: PUSH
59333: LD_VAR 0 39
59337: PUSH
59338: LD_VAR 0 40
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: PUSH
59351: LD_VAR 0 4
59355: PUSH
59356: LD_INT 1
59358: PLUS
59359: ARRAY
59360: ST_TO_ADDR
59361: GO 59728
59363: LD_INT 6
59365: DOUBLE
59366: EQUAL
59367: IFTRUE 59419
59369: LD_INT 7
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59419
59375: LD_INT 8
59377: DOUBLE
59378: EQUAL
59379: IFTRUE 59419
59381: LD_INT 13
59383: DOUBLE
59384: EQUAL
59385: IFTRUE 59419
59387: LD_INT 12
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59419
59393: LD_INT 15
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59419
59399: LD_INT 11
59401: DOUBLE
59402: EQUAL
59403: IFTRUE 59419
59405: LD_INT 14
59407: DOUBLE
59408: EQUAL
59409: IFTRUE 59419
59411: LD_INT 10
59413: DOUBLE
59414: EQUAL
59415: IFTRUE 59419
59417: GO 59475
59419: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59420: LD_ADDR_VAR 0 9
59424: PUSH
59425: LD_VAR 0 41
59429: PUSH
59430: LD_VAR 0 42
59434: PUSH
59435: LD_VAR 0 43
59439: PUSH
59440: LD_VAR 0 44
59444: PUSH
59445: LD_VAR 0 45
59449: PUSH
59450: LD_VAR 0 46
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: PUSH
59463: LD_VAR 0 4
59467: PUSH
59468: LD_INT 1
59470: PLUS
59471: ARRAY
59472: ST_TO_ADDR
59473: GO 59728
59475: LD_INT 36
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59483
59481: GO 59539
59483: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59484: LD_ADDR_VAR 0 9
59488: PUSH
59489: LD_VAR 0 47
59493: PUSH
59494: LD_VAR 0 48
59498: PUSH
59499: LD_VAR 0 49
59503: PUSH
59504: LD_VAR 0 50
59508: PUSH
59509: LD_VAR 0 51
59513: PUSH
59514: LD_VAR 0 52
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: PUSH
59527: LD_VAR 0 4
59531: PUSH
59532: LD_INT 1
59534: PLUS
59535: ARRAY
59536: ST_TO_ADDR
59537: GO 59728
59539: LD_INT 4
59541: DOUBLE
59542: EQUAL
59543: IFTRUE 59565
59545: LD_INT 5
59547: DOUBLE
59548: EQUAL
59549: IFTRUE 59565
59551: LD_INT 34
59553: DOUBLE
59554: EQUAL
59555: IFTRUE 59565
59557: LD_INT 37
59559: DOUBLE
59560: EQUAL
59561: IFTRUE 59565
59563: GO 59621
59565: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59566: LD_ADDR_VAR 0 9
59570: PUSH
59571: LD_VAR 0 53
59575: PUSH
59576: LD_VAR 0 54
59580: PUSH
59581: LD_VAR 0 55
59585: PUSH
59586: LD_VAR 0 56
59590: PUSH
59591: LD_VAR 0 57
59595: PUSH
59596: LD_VAR 0 58
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: PUSH
59609: LD_VAR 0 4
59613: PUSH
59614: LD_INT 1
59616: PLUS
59617: ARRAY
59618: ST_TO_ADDR
59619: GO 59728
59621: LD_INT 31
59623: DOUBLE
59624: EQUAL
59625: IFTRUE 59671
59627: LD_INT 32
59629: DOUBLE
59630: EQUAL
59631: IFTRUE 59671
59633: LD_INT 33
59635: DOUBLE
59636: EQUAL
59637: IFTRUE 59671
59639: LD_INT 27
59641: DOUBLE
59642: EQUAL
59643: IFTRUE 59671
59645: LD_INT 26
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59671
59651: LD_INT 28
59653: DOUBLE
59654: EQUAL
59655: IFTRUE 59671
59657: LD_INT 29
59659: DOUBLE
59660: EQUAL
59661: IFTRUE 59671
59663: LD_INT 30
59665: DOUBLE
59666: EQUAL
59667: IFTRUE 59671
59669: GO 59727
59671: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59672: LD_ADDR_VAR 0 9
59676: PUSH
59677: LD_VAR 0 59
59681: PUSH
59682: LD_VAR 0 60
59686: PUSH
59687: LD_VAR 0 61
59691: PUSH
59692: LD_VAR 0 62
59696: PUSH
59697: LD_VAR 0 63
59701: PUSH
59702: LD_VAR 0 64
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: PUSH
59715: LD_VAR 0 4
59719: PUSH
59720: LD_INT 1
59722: PLUS
59723: ARRAY
59724: ST_TO_ADDR
59725: GO 59728
59727: POP
// temp_list2 = [ ] ;
59728: LD_ADDR_VAR 0 10
59732: PUSH
59733: EMPTY
59734: ST_TO_ADDR
// for i in temp_list do
59735: LD_ADDR_VAR 0 8
59739: PUSH
59740: LD_VAR 0 9
59744: PUSH
59745: FOR_IN
59746: IFFALSE 59798
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59748: LD_ADDR_VAR 0 10
59752: PUSH
59753: LD_VAR 0 10
59757: PUSH
59758: LD_VAR 0 8
59762: PUSH
59763: LD_INT 1
59765: ARRAY
59766: PUSH
59767: LD_VAR 0 2
59771: PLUS
59772: PUSH
59773: LD_VAR 0 8
59777: PUSH
59778: LD_INT 2
59780: ARRAY
59781: PUSH
59782: LD_VAR 0 3
59786: PLUS
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: ADD
59795: ST_TO_ADDR
59796: GO 59745
59798: POP
59799: POP
// result = temp_list2 ;
59800: LD_ADDR_VAR 0 7
59804: PUSH
59805: LD_VAR 0 10
59809: ST_TO_ADDR
// end ;
59810: LD_VAR 0 7
59814: RET
// export function EnemyInRange ( unit , dist ) ; begin
59815: LD_INT 0
59817: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59818: LD_ADDR_VAR 0 3
59822: PUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: CALL_OW 255
59832: PPUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 250
59842: PPUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: CALL_OW 251
59852: PPUSH
59853: LD_VAR 0 2
59857: PPUSH
59858: CALL 33188 0 4
59862: PUSH
59863: LD_INT 4
59865: ARRAY
59866: ST_TO_ADDR
// end ;
59867: LD_VAR 0 3
59871: RET
// export function PlayerSeeMe ( unit ) ; begin
59872: LD_INT 0
59874: PPUSH
// result := See ( your_side , unit ) ;
59875: LD_ADDR_VAR 0 2
59879: PUSH
59880: LD_OWVAR 2
59884: PPUSH
59885: LD_VAR 0 1
59889: PPUSH
59890: CALL_OW 292
59894: ST_TO_ADDR
// end ;
59895: LD_VAR 0 2
59899: RET
// export function ReverseDir ( unit ) ; begin
59900: LD_INT 0
59902: PPUSH
// if not unit then
59903: LD_VAR 0 1
59907: NOT
59908: IFFALSE 59912
// exit ;
59910: GO 59935
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59912: LD_ADDR_VAR 0 2
59916: PUSH
59917: LD_VAR 0 1
59921: PPUSH
59922: CALL_OW 254
59926: PUSH
59927: LD_INT 3
59929: PLUS
59930: PUSH
59931: LD_INT 6
59933: MOD
59934: ST_TO_ADDR
// end ;
59935: LD_VAR 0 2
59939: RET
// export function ReverseArray ( array ) ; var i ; begin
59940: LD_INT 0
59942: PPUSH
59943: PPUSH
// if not array then
59944: LD_VAR 0 1
59948: NOT
59949: IFFALSE 59953
// exit ;
59951: GO 60008
// result := [ ] ;
59953: LD_ADDR_VAR 0 2
59957: PUSH
59958: EMPTY
59959: ST_TO_ADDR
// for i := array downto 1 do
59960: LD_ADDR_VAR 0 3
59964: PUSH
59965: DOUBLE
59966: LD_VAR 0 1
59970: INC
59971: ST_TO_ADDR
59972: LD_INT 1
59974: PUSH
59975: FOR_DOWNTO
59976: IFFALSE 60006
// result := Join ( result , array [ i ] ) ;
59978: LD_ADDR_VAR 0 2
59982: PUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: LD_VAR 0 1
59992: PUSH
59993: LD_VAR 0 3
59997: ARRAY
59998: PPUSH
59999: CALL 64673 0 2
60003: ST_TO_ADDR
60004: GO 59975
60006: POP
60007: POP
// end ;
60008: LD_VAR 0 2
60012: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60013: LD_INT 0
60015: PPUSH
60016: PPUSH
60017: PPUSH
60018: PPUSH
60019: PPUSH
60020: PPUSH
// if not unit or not hexes then
60021: LD_VAR 0 1
60025: NOT
60026: PUSH
60027: LD_VAR 0 2
60031: NOT
60032: OR
60033: IFFALSE 60037
// exit ;
60035: GO 60160
// dist := 9999 ;
60037: LD_ADDR_VAR 0 5
60041: PUSH
60042: LD_INT 9999
60044: ST_TO_ADDR
// for i = 1 to hexes do
60045: LD_ADDR_VAR 0 4
60049: PUSH
60050: DOUBLE
60051: LD_INT 1
60053: DEC
60054: ST_TO_ADDR
60055: LD_VAR 0 2
60059: PUSH
60060: FOR_TO
60061: IFFALSE 60148
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60063: LD_ADDR_VAR 0 6
60067: PUSH
60068: LD_VAR 0 1
60072: PPUSH
60073: LD_VAR 0 2
60077: PUSH
60078: LD_VAR 0 4
60082: ARRAY
60083: PUSH
60084: LD_INT 1
60086: ARRAY
60087: PPUSH
60088: LD_VAR 0 2
60092: PUSH
60093: LD_VAR 0 4
60097: ARRAY
60098: PUSH
60099: LD_INT 2
60101: ARRAY
60102: PPUSH
60103: CALL_OW 297
60107: ST_TO_ADDR
// if tdist < dist then
60108: LD_VAR 0 6
60112: PUSH
60113: LD_VAR 0 5
60117: LESS
60118: IFFALSE 60146
// begin hex := hexes [ i ] ;
60120: LD_ADDR_VAR 0 8
60124: PUSH
60125: LD_VAR 0 2
60129: PUSH
60130: LD_VAR 0 4
60134: ARRAY
60135: ST_TO_ADDR
// dist := tdist ;
60136: LD_ADDR_VAR 0 5
60140: PUSH
60141: LD_VAR 0 6
60145: ST_TO_ADDR
// end ; end ;
60146: GO 60060
60148: POP
60149: POP
// result := hex ;
60150: LD_ADDR_VAR 0 3
60154: PUSH
60155: LD_VAR 0 8
60159: ST_TO_ADDR
// end ;
60160: LD_VAR 0 3
60164: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60165: LD_INT 0
60167: PPUSH
60168: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60169: LD_VAR 0 1
60173: NOT
60174: PUSH
60175: LD_VAR 0 1
60179: PUSH
60180: LD_INT 21
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 23
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PPUSH
60204: CALL_OW 69
60208: IN
60209: NOT
60210: OR
60211: IFFALSE 60215
// exit ;
60213: GO 60262
// for i = 1 to 3 do
60215: LD_ADDR_VAR 0 3
60219: PUSH
60220: DOUBLE
60221: LD_INT 1
60223: DEC
60224: ST_TO_ADDR
60225: LD_INT 3
60227: PUSH
60228: FOR_TO
60229: IFFALSE 60260
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60231: LD_VAR 0 1
60235: PPUSH
60236: CALL_OW 250
60240: PPUSH
60241: LD_VAR 0 1
60245: PPUSH
60246: CALL_OW 251
60250: PPUSH
60251: LD_INT 1
60253: PPUSH
60254: CALL_OW 453
60258: GO 60228
60260: POP
60261: POP
// end ;
60262: LD_VAR 0 2
60266: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60267: LD_INT 0
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
60273: PPUSH
60274: PPUSH
// if not unit or not enemy_unit then
60275: LD_VAR 0 1
60279: NOT
60280: PUSH
60281: LD_VAR 0 2
60285: NOT
60286: OR
60287: IFFALSE 60291
// exit ;
60289: GO 60758
// if GetLives ( i ) < 250 then
60291: LD_VAR 0 4
60295: PPUSH
60296: CALL_OW 256
60300: PUSH
60301: LD_INT 250
60303: LESS
60304: IFFALSE 60317
// begin ComAutodestruct ( i ) ;
60306: LD_VAR 0 4
60310: PPUSH
60311: CALL 60165 0 1
// exit ;
60315: GO 60758
// end ; x := GetX ( enemy_unit ) ;
60317: LD_ADDR_VAR 0 7
60321: PUSH
60322: LD_VAR 0 2
60326: PPUSH
60327: CALL_OW 250
60331: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60332: LD_ADDR_VAR 0 8
60336: PUSH
60337: LD_VAR 0 2
60341: PPUSH
60342: CALL_OW 251
60346: ST_TO_ADDR
// if not x or not y then
60347: LD_VAR 0 7
60351: NOT
60352: PUSH
60353: LD_VAR 0 8
60357: NOT
60358: OR
60359: IFFALSE 60363
// exit ;
60361: GO 60758
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60363: LD_ADDR_VAR 0 6
60367: PUSH
60368: LD_VAR 0 7
60372: PPUSH
60373: LD_INT 0
60375: PPUSH
60376: LD_INT 4
60378: PPUSH
60379: CALL_OW 272
60383: PUSH
60384: LD_VAR 0 8
60388: PPUSH
60389: LD_INT 0
60391: PPUSH
60392: LD_INT 4
60394: PPUSH
60395: CALL_OW 273
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 7
60408: PPUSH
60409: LD_INT 1
60411: PPUSH
60412: LD_INT 4
60414: PPUSH
60415: CALL_OW 272
60419: PUSH
60420: LD_VAR 0 8
60424: PPUSH
60425: LD_INT 1
60427: PPUSH
60428: LD_INT 4
60430: PPUSH
60431: CALL_OW 273
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_VAR 0 7
60444: PPUSH
60445: LD_INT 2
60447: PPUSH
60448: LD_INT 4
60450: PPUSH
60451: CALL_OW 272
60455: PUSH
60456: LD_VAR 0 8
60460: PPUSH
60461: LD_INT 2
60463: PPUSH
60464: LD_INT 4
60466: PPUSH
60467: CALL_OW 273
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_VAR 0 7
60480: PPUSH
60481: LD_INT 3
60483: PPUSH
60484: LD_INT 4
60486: PPUSH
60487: CALL_OW 272
60491: PUSH
60492: LD_VAR 0 8
60496: PPUSH
60497: LD_INT 3
60499: PPUSH
60500: LD_INT 4
60502: PPUSH
60503: CALL_OW 273
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_VAR 0 7
60516: PPUSH
60517: LD_INT 4
60519: PPUSH
60520: LD_INT 4
60522: PPUSH
60523: CALL_OW 272
60527: PUSH
60528: LD_VAR 0 8
60532: PPUSH
60533: LD_INT 4
60535: PPUSH
60536: LD_INT 4
60538: PPUSH
60539: CALL_OW 273
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_VAR 0 7
60552: PPUSH
60553: LD_INT 5
60555: PPUSH
60556: LD_INT 4
60558: PPUSH
60559: CALL_OW 272
60563: PUSH
60564: LD_VAR 0 8
60568: PPUSH
60569: LD_INT 5
60571: PPUSH
60572: LD_INT 4
60574: PPUSH
60575: CALL_OW 273
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// for i = tmp downto 1 do
60592: LD_ADDR_VAR 0 4
60596: PUSH
60597: DOUBLE
60598: LD_VAR 0 6
60602: INC
60603: ST_TO_ADDR
60604: LD_INT 1
60606: PUSH
60607: FOR_DOWNTO
60608: IFFALSE 60709
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60610: LD_VAR 0 6
60614: PUSH
60615: LD_VAR 0 4
60619: ARRAY
60620: PUSH
60621: LD_INT 1
60623: ARRAY
60624: PPUSH
60625: LD_VAR 0 6
60629: PUSH
60630: LD_VAR 0 4
60634: ARRAY
60635: PUSH
60636: LD_INT 2
60638: ARRAY
60639: PPUSH
60640: CALL_OW 488
60644: NOT
60645: PUSH
60646: LD_VAR 0 6
60650: PUSH
60651: LD_VAR 0 4
60655: ARRAY
60656: PUSH
60657: LD_INT 1
60659: ARRAY
60660: PPUSH
60661: LD_VAR 0 6
60665: PUSH
60666: LD_VAR 0 4
60670: ARRAY
60671: PUSH
60672: LD_INT 2
60674: ARRAY
60675: PPUSH
60676: CALL_OW 428
60680: PUSH
60681: LD_INT 0
60683: NONEQUAL
60684: OR
60685: IFFALSE 60707
// tmp := Delete ( tmp , i ) ;
60687: LD_ADDR_VAR 0 6
60691: PUSH
60692: LD_VAR 0 6
60696: PPUSH
60697: LD_VAR 0 4
60701: PPUSH
60702: CALL_OW 3
60706: ST_TO_ADDR
60707: GO 60607
60709: POP
60710: POP
// j := GetClosestHex ( unit , tmp ) ;
60711: LD_ADDR_VAR 0 5
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: LD_VAR 0 6
60725: PPUSH
60726: CALL 60013 0 2
60730: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_VAR 0 5
60740: PUSH
60741: LD_INT 1
60743: ARRAY
60744: PPUSH
60745: LD_VAR 0 5
60749: PUSH
60750: LD_INT 2
60752: ARRAY
60753: PPUSH
60754: CALL_OW 111
// end ;
60758: LD_VAR 0 3
60762: RET
// export function PrepareApemanSoldier ( ) ; begin
60763: LD_INT 0
60765: PPUSH
// uc_nation := 0 ;
60766: LD_ADDR_OWVAR 21
60770: PUSH
60771: LD_INT 0
60773: ST_TO_ADDR
// hc_sex := sex_male ;
60774: LD_ADDR_OWVAR 27
60778: PUSH
60779: LD_INT 1
60781: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60782: LD_ADDR_OWVAR 28
60786: PUSH
60787: LD_INT 15
60789: ST_TO_ADDR
// hc_gallery :=  ;
60790: LD_ADDR_OWVAR 33
60794: PUSH
60795: LD_STRING 
60797: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60798: LD_ADDR_OWVAR 31
60802: PUSH
60803: LD_INT 0
60805: PPUSH
60806: LD_INT 3
60808: PPUSH
60809: CALL_OW 12
60813: PUSH
60814: LD_INT 0
60816: PPUSH
60817: LD_INT 3
60819: PPUSH
60820: CALL_OW 12
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: ST_TO_ADDR
// end ;
60837: LD_VAR 0 1
60841: RET
// export function PrepareApemanEngineer ( ) ; begin
60842: LD_INT 0
60844: PPUSH
// uc_nation := 0 ;
60845: LD_ADDR_OWVAR 21
60849: PUSH
60850: LD_INT 0
60852: ST_TO_ADDR
// hc_sex := sex_male ;
60853: LD_ADDR_OWVAR 27
60857: PUSH
60858: LD_INT 1
60860: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60861: LD_ADDR_OWVAR 28
60865: PUSH
60866: LD_INT 16
60868: ST_TO_ADDR
// hc_gallery :=  ;
60869: LD_ADDR_OWVAR 33
60873: PUSH
60874: LD_STRING 
60876: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60877: LD_ADDR_OWVAR 31
60881: PUSH
60882: LD_INT 0
60884: PPUSH
60885: LD_INT 3
60887: PPUSH
60888: CALL_OW 12
60892: PUSH
60893: LD_INT 0
60895: PPUSH
60896: LD_INT 3
60898: PPUSH
60899: CALL_OW 12
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// end ;
60916: LD_VAR 0 1
60920: RET
// export function PrepareApeman ( agressivity ) ; begin
60921: LD_INT 0
60923: PPUSH
// uc_side := 0 ;
60924: LD_ADDR_OWVAR 20
60928: PUSH
60929: LD_INT 0
60931: ST_TO_ADDR
// uc_nation := 0 ;
60932: LD_ADDR_OWVAR 21
60936: PUSH
60937: LD_INT 0
60939: ST_TO_ADDR
// hc_sex := sex_male ;
60940: LD_ADDR_OWVAR 27
60944: PUSH
60945: LD_INT 1
60947: ST_TO_ADDR
// hc_class := class_apeman ;
60948: LD_ADDR_OWVAR 28
60952: PUSH
60953: LD_INT 12
60955: ST_TO_ADDR
// hc_gallery :=  ;
60956: LD_ADDR_OWVAR 33
60960: PUSH
60961: LD_STRING 
60963: ST_TO_ADDR
// if agressivity = 0 then
60964: LD_VAR 0 1
60968: PUSH
60969: LD_INT 0
60971: EQUAL
60972: IFFALSE 60984
// hc_agressivity := 0 else
60974: LD_ADDR_OWVAR 35
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
60982: GO 61005
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60984: LD_ADDR_OWVAR 35
60988: PUSH
60989: LD_VAR 0 1
60993: NEG
60994: PPUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL_OW 12
61004: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61005: LD_ADDR_OWVAR 31
61009: PUSH
61010: LD_INT 0
61012: PPUSH
61013: LD_INT 3
61015: PPUSH
61016: CALL_OW 12
61020: PUSH
61021: LD_INT 0
61023: PPUSH
61024: LD_INT 3
61026: PPUSH
61027: CALL_OW 12
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: ST_TO_ADDR
// end ;
61044: LD_VAR 0 2
61048: RET
// export function PrepareTiger ( agressivity ) ; begin
61049: LD_INT 0
61051: PPUSH
// uc_side := 0 ;
61052: LD_ADDR_OWVAR 20
61056: PUSH
61057: LD_INT 0
61059: ST_TO_ADDR
// uc_nation := 0 ;
61060: LD_ADDR_OWVAR 21
61064: PUSH
61065: LD_INT 0
61067: ST_TO_ADDR
// hc_class := class_tiger ;
61068: LD_ADDR_OWVAR 28
61072: PUSH
61073: LD_INT 14
61075: ST_TO_ADDR
// hc_gallery :=  ;
61076: LD_ADDR_OWVAR 33
61080: PUSH
61081: LD_STRING 
61083: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61084: LD_ADDR_OWVAR 35
61088: PUSH
61089: LD_VAR 0 1
61093: NEG
61094: PPUSH
61095: LD_VAR 0 1
61099: PPUSH
61100: CALL_OW 12
61104: ST_TO_ADDR
// end ;
61105: LD_VAR 0 2
61109: RET
// export function PrepareEnchidna ( ) ; begin
61110: LD_INT 0
61112: PPUSH
// uc_side := 0 ;
61113: LD_ADDR_OWVAR 20
61117: PUSH
61118: LD_INT 0
61120: ST_TO_ADDR
// uc_nation := 0 ;
61121: LD_ADDR_OWVAR 21
61125: PUSH
61126: LD_INT 0
61128: ST_TO_ADDR
// hc_class := class_baggie ;
61129: LD_ADDR_OWVAR 28
61133: PUSH
61134: LD_INT 13
61136: ST_TO_ADDR
// hc_gallery :=  ;
61137: LD_ADDR_OWVAR 33
61141: PUSH
61142: LD_STRING 
61144: ST_TO_ADDR
// end ;
61145: LD_VAR 0 1
61149: RET
// export function PrepareFrog ( ) ; begin
61150: LD_INT 0
61152: PPUSH
// uc_side := 0 ;
61153: LD_ADDR_OWVAR 20
61157: PUSH
61158: LD_INT 0
61160: ST_TO_ADDR
// uc_nation := 0 ;
61161: LD_ADDR_OWVAR 21
61165: PUSH
61166: LD_INT 0
61168: ST_TO_ADDR
// hc_class := class_frog ;
61169: LD_ADDR_OWVAR 28
61173: PUSH
61174: LD_INT 19
61176: ST_TO_ADDR
// hc_gallery :=  ;
61177: LD_ADDR_OWVAR 33
61181: PUSH
61182: LD_STRING 
61184: ST_TO_ADDR
// end ;
61185: LD_VAR 0 1
61189: RET
// export function PrepareFish ( ) ; begin
61190: LD_INT 0
61192: PPUSH
// uc_side := 0 ;
61193: LD_ADDR_OWVAR 20
61197: PUSH
61198: LD_INT 0
61200: ST_TO_ADDR
// uc_nation := 0 ;
61201: LD_ADDR_OWVAR 21
61205: PUSH
61206: LD_INT 0
61208: ST_TO_ADDR
// hc_class := class_fish ;
61209: LD_ADDR_OWVAR 28
61213: PUSH
61214: LD_INT 20
61216: ST_TO_ADDR
// hc_gallery :=  ;
61217: LD_ADDR_OWVAR 33
61221: PUSH
61222: LD_STRING 
61224: ST_TO_ADDR
// end ;
61225: LD_VAR 0 1
61229: RET
// export function PrepareBird ( ) ; begin
61230: LD_INT 0
61232: PPUSH
// uc_side := 0 ;
61233: LD_ADDR_OWVAR 20
61237: PUSH
61238: LD_INT 0
61240: ST_TO_ADDR
// uc_nation := 0 ;
61241: LD_ADDR_OWVAR 21
61245: PUSH
61246: LD_INT 0
61248: ST_TO_ADDR
// hc_class := class_phororhacos ;
61249: LD_ADDR_OWVAR 28
61253: PUSH
61254: LD_INT 18
61256: ST_TO_ADDR
// hc_gallery :=  ;
61257: LD_ADDR_OWVAR 33
61261: PUSH
61262: LD_STRING 
61264: ST_TO_ADDR
// end ;
61265: LD_VAR 0 1
61269: RET
// export function PrepareHorse ( ) ; begin
61270: LD_INT 0
61272: PPUSH
// uc_side := 0 ;
61273: LD_ADDR_OWVAR 20
61277: PUSH
61278: LD_INT 0
61280: ST_TO_ADDR
// uc_nation := 0 ;
61281: LD_ADDR_OWVAR 21
61285: PUSH
61286: LD_INT 0
61288: ST_TO_ADDR
// hc_class := class_horse ;
61289: LD_ADDR_OWVAR 28
61293: PUSH
61294: LD_INT 21
61296: ST_TO_ADDR
// hc_gallery :=  ;
61297: LD_ADDR_OWVAR 33
61301: PUSH
61302: LD_STRING 
61304: ST_TO_ADDR
// end ;
61305: LD_VAR 0 1
61309: RET
// export function PrepareMastodont ( ) ; begin
61310: LD_INT 0
61312: PPUSH
// uc_side := 0 ;
61313: LD_ADDR_OWVAR 20
61317: PUSH
61318: LD_INT 0
61320: ST_TO_ADDR
// uc_nation := 0 ;
61321: LD_ADDR_OWVAR 21
61325: PUSH
61326: LD_INT 0
61328: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61329: LD_ADDR_OWVAR 37
61333: PUSH
61334: LD_INT 31
61336: ST_TO_ADDR
// vc_control := control_rider ;
61337: LD_ADDR_OWVAR 38
61341: PUSH
61342: LD_INT 4
61344: ST_TO_ADDR
// end ;
61345: LD_VAR 0 1
61349: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61350: LD_INT 0
61352: PPUSH
61353: PPUSH
61354: PPUSH
// uc_side = 0 ;
61355: LD_ADDR_OWVAR 20
61359: PUSH
61360: LD_INT 0
61362: ST_TO_ADDR
// uc_nation = 0 ;
61363: LD_ADDR_OWVAR 21
61367: PUSH
61368: LD_INT 0
61370: ST_TO_ADDR
// InitHc_All ( ) ;
61371: CALL_OW 584
// InitVc ;
61375: CALL_OW 20
// if mastodonts then
61379: LD_VAR 0 6
61383: IFFALSE 61450
// for i = 1 to mastodonts do
61385: LD_ADDR_VAR 0 11
61389: PUSH
61390: DOUBLE
61391: LD_INT 1
61393: DEC
61394: ST_TO_ADDR
61395: LD_VAR 0 6
61399: PUSH
61400: FOR_TO
61401: IFFALSE 61448
// begin vc_chassis := 31 ;
61403: LD_ADDR_OWVAR 37
61407: PUSH
61408: LD_INT 31
61410: ST_TO_ADDR
// vc_control := control_rider ;
61411: LD_ADDR_OWVAR 38
61415: PUSH
61416: LD_INT 4
61418: ST_TO_ADDR
// animal := CreateVehicle ;
61419: LD_ADDR_VAR 0 12
61423: PUSH
61424: CALL_OW 45
61428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61429: LD_VAR 0 12
61433: PPUSH
61434: LD_VAR 0 8
61438: PPUSH
61439: LD_INT 0
61441: PPUSH
61442: CALL 63578 0 3
// end ;
61446: GO 61400
61448: POP
61449: POP
// if horses then
61450: LD_VAR 0 5
61454: IFFALSE 61521
// for i = 1 to horses do
61456: LD_ADDR_VAR 0 11
61460: PUSH
61461: DOUBLE
61462: LD_INT 1
61464: DEC
61465: ST_TO_ADDR
61466: LD_VAR 0 5
61470: PUSH
61471: FOR_TO
61472: IFFALSE 61519
// begin hc_class := 21 ;
61474: LD_ADDR_OWVAR 28
61478: PUSH
61479: LD_INT 21
61481: ST_TO_ADDR
// hc_gallery :=  ;
61482: LD_ADDR_OWVAR 33
61486: PUSH
61487: LD_STRING 
61489: ST_TO_ADDR
// animal := CreateHuman ;
61490: LD_ADDR_VAR 0 12
61494: PUSH
61495: CALL_OW 44
61499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61500: LD_VAR 0 12
61504: PPUSH
61505: LD_VAR 0 8
61509: PPUSH
61510: LD_INT 0
61512: PPUSH
61513: CALL 63578 0 3
// end ;
61517: GO 61471
61519: POP
61520: POP
// if birds then
61521: LD_VAR 0 1
61525: IFFALSE 61592
// for i = 1 to birds do
61527: LD_ADDR_VAR 0 11
61531: PUSH
61532: DOUBLE
61533: LD_INT 1
61535: DEC
61536: ST_TO_ADDR
61537: LD_VAR 0 1
61541: PUSH
61542: FOR_TO
61543: IFFALSE 61590
// begin hc_class := 18 ;
61545: LD_ADDR_OWVAR 28
61549: PUSH
61550: LD_INT 18
61552: ST_TO_ADDR
// hc_gallery =  ;
61553: LD_ADDR_OWVAR 33
61557: PUSH
61558: LD_STRING 
61560: ST_TO_ADDR
// animal := CreateHuman ;
61561: LD_ADDR_VAR 0 12
61565: PUSH
61566: CALL_OW 44
61570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61571: LD_VAR 0 12
61575: PPUSH
61576: LD_VAR 0 8
61580: PPUSH
61581: LD_INT 0
61583: PPUSH
61584: CALL 63578 0 3
// end ;
61588: GO 61542
61590: POP
61591: POP
// if tigers then
61592: LD_VAR 0 2
61596: IFFALSE 61680
// for i = 1 to tigers do
61598: LD_ADDR_VAR 0 11
61602: PUSH
61603: DOUBLE
61604: LD_INT 1
61606: DEC
61607: ST_TO_ADDR
61608: LD_VAR 0 2
61612: PUSH
61613: FOR_TO
61614: IFFALSE 61678
// begin hc_class = class_tiger ;
61616: LD_ADDR_OWVAR 28
61620: PUSH
61621: LD_INT 14
61623: ST_TO_ADDR
// hc_gallery =  ;
61624: LD_ADDR_OWVAR 33
61628: PUSH
61629: LD_STRING 
61631: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61632: LD_ADDR_OWVAR 35
61636: PUSH
61637: LD_INT 7
61639: NEG
61640: PPUSH
61641: LD_INT 7
61643: PPUSH
61644: CALL_OW 12
61648: ST_TO_ADDR
// animal := CreateHuman ;
61649: LD_ADDR_VAR 0 12
61653: PUSH
61654: CALL_OW 44
61658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61659: LD_VAR 0 12
61663: PPUSH
61664: LD_VAR 0 8
61668: PPUSH
61669: LD_INT 0
61671: PPUSH
61672: CALL 63578 0 3
// end ;
61676: GO 61613
61678: POP
61679: POP
// if apemans then
61680: LD_VAR 0 3
61684: IFFALSE 61807
// for i = 1 to apemans do
61686: LD_ADDR_VAR 0 11
61690: PUSH
61691: DOUBLE
61692: LD_INT 1
61694: DEC
61695: ST_TO_ADDR
61696: LD_VAR 0 3
61700: PUSH
61701: FOR_TO
61702: IFFALSE 61805
// begin hc_class = class_apeman ;
61704: LD_ADDR_OWVAR 28
61708: PUSH
61709: LD_INT 12
61711: ST_TO_ADDR
// hc_gallery =  ;
61712: LD_ADDR_OWVAR 33
61716: PUSH
61717: LD_STRING 
61719: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61720: LD_ADDR_OWVAR 35
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PPUSH
61729: LD_INT 2
61731: PPUSH
61732: CALL_OW 12
61736: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61737: LD_ADDR_OWVAR 31
61741: PUSH
61742: LD_INT 1
61744: PPUSH
61745: LD_INT 3
61747: PPUSH
61748: CALL_OW 12
61752: PUSH
61753: LD_INT 1
61755: PPUSH
61756: LD_INT 3
61758: PPUSH
61759: CALL_OW 12
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: ST_TO_ADDR
// animal := CreateHuman ;
61776: LD_ADDR_VAR 0 12
61780: PUSH
61781: CALL_OW 44
61785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61786: LD_VAR 0 12
61790: PPUSH
61791: LD_VAR 0 8
61795: PPUSH
61796: LD_INT 0
61798: PPUSH
61799: CALL 63578 0 3
// end ;
61803: GO 61701
61805: POP
61806: POP
// if enchidnas then
61807: LD_VAR 0 4
61811: IFFALSE 61878
// for i = 1 to enchidnas do
61813: LD_ADDR_VAR 0 11
61817: PUSH
61818: DOUBLE
61819: LD_INT 1
61821: DEC
61822: ST_TO_ADDR
61823: LD_VAR 0 4
61827: PUSH
61828: FOR_TO
61829: IFFALSE 61876
// begin hc_class = 13 ;
61831: LD_ADDR_OWVAR 28
61835: PUSH
61836: LD_INT 13
61838: ST_TO_ADDR
// hc_gallery =  ;
61839: LD_ADDR_OWVAR 33
61843: PUSH
61844: LD_STRING 
61846: ST_TO_ADDR
// animal := CreateHuman ;
61847: LD_ADDR_VAR 0 12
61851: PUSH
61852: CALL_OW 44
61856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61857: LD_VAR 0 12
61861: PPUSH
61862: LD_VAR 0 8
61866: PPUSH
61867: LD_INT 0
61869: PPUSH
61870: CALL 63578 0 3
// end ;
61874: GO 61828
61876: POP
61877: POP
// if fishes then
61878: LD_VAR 0 7
61882: IFFALSE 61949
// for i = 1 to fishes do
61884: LD_ADDR_VAR 0 11
61888: PUSH
61889: DOUBLE
61890: LD_INT 1
61892: DEC
61893: ST_TO_ADDR
61894: LD_VAR 0 7
61898: PUSH
61899: FOR_TO
61900: IFFALSE 61947
// begin hc_class = 20 ;
61902: LD_ADDR_OWVAR 28
61906: PUSH
61907: LD_INT 20
61909: ST_TO_ADDR
// hc_gallery =  ;
61910: LD_ADDR_OWVAR 33
61914: PUSH
61915: LD_STRING 
61917: ST_TO_ADDR
// animal := CreateHuman ;
61918: LD_ADDR_VAR 0 12
61922: PUSH
61923: CALL_OW 44
61927: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61928: LD_VAR 0 12
61932: PPUSH
61933: LD_VAR 0 9
61937: PPUSH
61938: LD_INT 0
61940: PPUSH
61941: CALL 63578 0 3
// end ;
61945: GO 61899
61947: POP
61948: POP
// end ;
61949: LD_VAR 0 10
61953: RET
// export function WantHeal ( sci , unit ) ; begin
61954: LD_INT 0
61956: PPUSH
// if GetTaskList ( sci ) > 0 then
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 437
61966: PUSH
61967: LD_INT 0
61969: GREATER
61970: IFFALSE 62040
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 437
61981: PUSH
61982: LD_INT 1
61984: ARRAY
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PUSH
61990: LD_STRING l
61992: EQUAL
61993: PUSH
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL_OW 437
62003: PUSH
62004: LD_INT 1
62006: ARRAY
62007: PUSH
62008: LD_INT 4
62010: ARRAY
62011: PUSH
62012: LD_VAR 0 2
62016: EQUAL
62017: AND
62018: IFFALSE 62030
// result := true else
62020: LD_ADDR_VAR 0 3
62024: PUSH
62025: LD_INT 1
62027: ST_TO_ADDR
62028: GO 62038
// result := false ;
62030: LD_ADDR_VAR 0 3
62034: PUSH
62035: LD_INT 0
62037: ST_TO_ADDR
// end else
62038: GO 62048
// result := false ;
62040: LD_ADDR_VAR 0 3
62044: PUSH
62045: LD_INT 0
62047: ST_TO_ADDR
// end ;
62048: LD_VAR 0 3
62052: RET
// export function HealTarget ( sci ) ; begin
62053: LD_INT 0
62055: PPUSH
// if not sci then
62056: LD_VAR 0 1
62060: NOT
62061: IFFALSE 62065
// exit ;
62063: GO 62130
// result := 0 ;
62065: LD_ADDR_VAR 0 2
62069: PUSH
62070: LD_INT 0
62072: ST_TO_ADDR
// if GetTaskList ( sci ) then
62073: LD_VAR 0 1
62077: PPUSH
62078: CALL_OW 437
62082: IFFALSE 62130
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62084: LD_VAR 0 1
62088: PPUSH
62089: CALL_OW 437
62093: PUSH
62094: LD_INT 1
62096: ARRAY
62097: PUSH
62098: LD_INT 1
62100: ARRAY
62101: PUSH
62102: LD_STRING l
62104: EQUAL
62105: IFFALSE 62130
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: LD_VAR 0 1
62116: PPUSH
62117: CALL_OW 437
62121: PUSH
62122: LD_INT 1
62124: ARRAY
62125: PUSH
62126: LD_INT 4
62128: ARRAY
62129: ST_TO_ADDR
// end ;
62130: LD_VAR 0 2
62134: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62135: LD_INT 0
62137: PPUSH
62138: PPUSH
62139: PPUSH
62140: PPUSH
// if not base_units then
62141: LD_VAR 0 1
62145: NOT
62146: IFFALSE 62150
// exit ;
62148: GO 62237
// result := false ;
62150: LD_ADDR_VAR 0 2
62154: PUSH
62155: LD_INT 0
62157: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62158: LD_ADDR_VAR 0 5
62162: PUSH
62163: LD_VAR 0 1
62167: PPUSH
62168: LD_INT 21
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 72
62182: ST_TO_ADDR
// if not tmp then
62183: LD_VAR 0 5
62187: NOT
62188: IFFALSE 62192
// exit ;
62190: GO 62237
// for i in tmp do
62192: LD_ADDR_VAR 0 3
62196: PUSH
62197: LD_VAR 0 5
62201: PUSH
62202: FOR_IN
62203: IFFALSE 62235
// begin result := EnemyInRange ( i , 22 ) ;
62205: LD_ADDR_VAR 0 2
62209: PUSH
62210: LD_VAR 0 3
62214: PPUSH
62215: LD_INT 22
62217: PPUSH
62218: CALL 59815 0 2
62222: ST_TO_ADDR
// if result then
62223: LD_VAR 0 2
62227: IFFALSE 62233
// exit ;
62229: POP
62230: POP
62231: GO 62237
// end ;
62233: GO 62202
62235: POP
62236: POP
// end ;
62237: LD_VAR 0 2
62241: RET
// export function FilterByTag ( units , tag ) ; begin
62242: LD_INT 0
62244: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62245: LD_ADDR_VAR 0 3
62249: PUSH
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_INT 120
62257: PUSH
62258: LD_VAR 0 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PPUSH
62267: CALL_OW 72
62271: ST_TO_ADDR
// end ;
62272: LD_VAR 0 3
62276: RET
// export function IsDriver ( un ) ; begin
62277: LD_INT 0
62279: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62280: LD_ADDR_VAR 0 2
62284: PUSH
62285: LD_VAR 0 1
62289: PUSH
62290: LD_INT 55
62292: PUSH
62293: EMPTY
62294: LIST
62295: PPUSH
62296: CALL_OW 69
62300: IN
62301: ST_TO_ADDR
// end ;
62302: LD_VAR 0 2
62306: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
// list := [ ] ;
62311: LD_ADDR_VAR 0 5
62315: PUSH
62316: EMPTY
62317: ST_TO_ADDR
// case d of 0 :
62318: LD_VAR 0 3
62322: PUSH
62323: LD_INT 0
62325: DOUBLE
62326: EQUAL
62327: IFTRUE 62331
62329: GO 62464
62331: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62332: LD_ADDR_VAR 0 5
62336: PUSH
62337: LD_VAR 0 1
62341: PUSH
62342: LD_INT 4
62344: MINUS
62345: PUSH
62346: LD_VAR 0 2
62350: PUSH
62351: LD_INT 4
62353: MINUS
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: PUSH
62363: LD_VAR 0 1
62367: PUSH
62368: LD_INT 3
62370: MINUS
62371: PUSH
62372: LD_VAR 0 2
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: LIST
62384: PUSH
62385: LD_VAR 0 1
62389: PUSH
62390: LD_INT 4
62392: PLUS
62393: PUSH
62394: LD_VAR 0 2
62398: PUSH
62399: LD_INT 4
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: PUSH
62407: LD_VAR 0 1
62411: PUSH
62412: LD_INT 3
62414: PLUS
62415: PUSH
62416: LD_VAR 0 2
62420: PUSH
62421: LD_INT 3
62423: PLUS
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: LIST
62432: PUSH
62433: LD_VAR 0 1
62437: PUSH
62438: LD_VAR 0 2
62442: PUSH
62443: LD_INT 4
62445: PLUS
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: ST_TO_ADDR
// end ; 1 :
62462: GO 63162
62464: LD_INT 1
62466: DOUBLE
62467: EQUAL
62468: IFTRUE 62472
62470: GO 62605
62472: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62473: LD_ADDR_VAR 0 5
62477: PUSH
62478: LD_VAR 0 1
62482: PUSH
62483: LD_VAR 0 2
62487: PUSH
62488: LD_INT 4
62490: MINUS
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: LIST
62499: PUSH
62500: LD_VAR 0 1
62504: PUSH
62505: LD_INT 3
62507: MINUS
62508: PUSH
62509: LD_VAR 0 2
62513: PUSH
62514: LD_INT 3
62516: MINUS
62517: PUSH
62518: LD_INT 2
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: PUSH
62526: LD_VAR 0 1
62530: PUSH
62531: LD_INT 4
62533: MINUS
62534: PUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: LIST
62547: PUSH
62548: LD_VAR 0 1
62552: PUSH
62553: LD_VAR 0 2
62557: PUSH
62558: LD_INT 3
62560: PLUS
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: PUSH
62570: LD_VAR 0 1
62574: PUSH
62575: LD_INT 4
62577: PLUS
62578: PUSH
62579: LD_VAR 0 2
62583: PUSH
62584: LD_INT 4
62586: PLUS
62587: PUSH
62588: LD_INT 5
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// end ; 2 :
62603: GO 63162
62605: LD_INT 2
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62742
62613: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62614: LD_ADDR_VAR 0 5
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_VAR 0 2
62628: PUSH
62629: LD_INT 3
62631: MINUS
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: PUSH
62641: LD_VAR 0 1
62645: PUSH
62646: LD_INT 4
62648: PLUS
62649: PUSH
62650: LD_VAR 0 2
62654: PUSH
62655: LD_INT 4
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: PUSH
62663: LD_VAR 0 1
62667: PUSH
62668: LD_VAR 0 2
62672: PUSH
62673: LD_INT 4
62675: PLUS
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: PUSH
62685: LD_VAR 0 1
62689: PUSH
62690: LD_INT 3
62692: MINUS
62693: PUSH
62694: LD_VAR 0 2
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: PUSH
62707: LD_VAR 0 1
62711: PUSH
62712: LD_INT 4
62714: MINUS
62715: PUSH
62716: LD_VAR 0 2
62720: PUSH
62721: LD_INT 4
62723: MINUS
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: ST_TO_ADDR
// end ; 3 :
62740: GO 63162
62742: LD_INT 3
62744: DOUBLE
62745: EQUAL
62746: IFTRUE 62750
62748: GO 62883
62750: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62751: LD_ADDR_VAR 0 5
62755: PUSH
62756: LD_VAR 0 1
62760: PUSH
62761: LD_INT 3
62763: PLUS
62764: PUSH
62765: LD_VAR 0 2
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: PUSH
62778: LD_VAR 0 1
62782: PUSH
62783: LD_INT 4
62785: PLUS
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: LD_INT 4
62794: PLUS
62795: PUSH
62796: LD_INT 5
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: LIST
62803: PUSH
62804: LD_VAR 0 1
62808: PUSH
62809: LD_INT 4
62811: MINUS
62812: PUSH
62813: LD_VAR 0 2
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: PUSH
62826: LD_VAR 0 1
62830: PUSH
62831: LD_VAR 0 2
62835: PUSH
62836: LD_INT 4
62838: MINUS
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: PUSH
62848: LD_VAR 0 1
62852: PUSH
62853: LD_INT 3
62855: MINUS
62856: PUSH
62857: LD_VAR 0 2
62861: PUSH
62862: LD_INT 3
62864: MINUS
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: ST_TO_ADDR
// end ; 4 :
62881: GO 63162
62883: LD_INT 4
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62891
62889: GO 63024
62891: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62892: LD_ADDR_VAR 0 5
62896: PUSH
62897: LD_VAR 0 1
62901: PUSH
62902: LD_VAR 0 2
62906: PUSH
62907: LD_INT 4
62909: PLUS
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: LD_VAR 0 1
62923: PUSH
62924: LD_INT 3
62926: PLUS
62927: PUSH
62928: LD_VAR 0 2
62932: PUSH
62933: LD_INT 3
62935: PLUS
62936: PUSH
62937: LD_INT 5
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: PUSH
62945: LD_VAR 0 1
62949: PUSH
62950: LD_INT 4
62952: PLUS
62953: PUSH
62954: LD_VAR 0 2
62958: PUSH
62959: LD_INT 4
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: PUSH
62967: LD_VAR 0 1
62971: PUSH
62972: LD_VAR 0 2
62976: PUSH
62977: LD_INT 3
62979: MINUS
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: PUSH
62989: LD_VAR 0 1
62993: PUSH
62994: LD_INT 4
62996: MINUS
62997: PUSH
62998: LD_VAR 0 2
63002: PUSH
63003: LD_INT 4
63005: MINUS
63006: PUSH
63007: LD_INT 2
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: ST_TO_ADDR
// end ; 5 :
63022: GO 63162
63024: LD_INT 5
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63032
63030: GO 63161
63032: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63033: LD_ADDR_VAR 0 5
63037: PUSH
63038: LD_VAR 0 1
63042: PUSH
63043: LD_INT 4
63045: MINUS
63046: PUSH
63047: LD_VAR 0 2
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: LIST
63059: PUSH
63060: LD_VAR 0 1
63064: PUSH
63065: LD_VAR 0 2
63069: PUSH
63070: LD_INT 4
63072: MINUS
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: PUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 4
63089: PLUS
63090: PUSH
63091: LD_VAR 0 2
63095: PUSH
63096: LD_INT 4
63098: PLUS
63099: PUSH
63100: LD_INT 5
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: PUSH
63108: LD_VAR 0 1
63112: PUSH
63113: LD_INT 3
63115: PLUS
63116: PUSH
63117: LD_VAR 0 2
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: LD_VAR 0 1
63134: PUSH
63135: LD_VAR 0 2
63139: PUSH
63140: LD_INT 3
63142: PLUS
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// end ; end ;
63159: GO 63162
63161: POP
// result := list ;
63162: LD_ADDR_VAR 0 4
63166: PUSH
63167: LD_VAR 0 5
63171: ST_TO_ADDR
// end ;
63172: LD_VAR 0 4
63176: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63177: LD_INT 0
63179: PPUSH
63180: PPUSH
63181: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63182: LD_VAR 0 1
63186: NOT
63187: PUSH
63188: LD_VAR 0 2
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 4
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: IN
63211: NOT
63212: OR
63213: IFFALSE 63217
// exit ;
63215: GO 63300
// tmp := [ ] ;
63217: LD_ADDR_VAR 0 5
63221: PUSH
63222: EMPTY
63223: ST_TO_ADDR
// for i in units do
63224: LD_ADDR_VAR 0 4
63228: PUSH
63229: LD_VAR 0 1
63233: PUSH
63234: FOR_IN
63235: IFFALSE 63269
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63237: LD_ADDR_VAR 0 5
63241: PUSH
63242: LD_VAR 0 5
63246: PPUSH
63247: LD_VAR 0 4
63251: PPUSH
63252: LD_VAR 0 2
63256: PPUSH
63257: CALL_OW 259
63261: PPUSH
63262: CALL 64673 0 2
63266: ST_TO_ADDR
63267: GO 63234
63269: POP
63270: POP
// if not tmp then
63271: LD_VAR 0 5
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63300
// result := SortListByListDesc ( units , tmp ) ;
63280: LD_ADDR_VAR 0 3
63284: PUSH
63285: LD_VAR 0 1
63289: PPUSH
63290: LD_VAR 0 5
63294: PPUSH
63295: CALL_OW 77
63299: ST_TO_ADDR
// end ;
63300: LD_VAR 0 3
63304: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63305: LD_INT 0
63307: PPUSH
63308: PPUSH
63309: PPUSH
// result := false ;
63310: LD_ADDR_VAR 0 3
63314: PUSH
63315: LD_INT 0
63317: ST_TO_ADDR
// if not building then
63318: LD_VAR 0 2
63322: NOT
63323: IFFALSE 63327
// exit ;
63325: GO 63465
// x := GetX ( building ) ;
63327: LD_ADDR_VAR 0 4
63331: PUSH
63332: LD_VAR 0 2
63336: PPUSH
63337: CALL_OW 250
63341: ST_TO_ADDR
// y := GetY ( building ) ;
63342: LD_ADDR_VAR 0 5
63346: PUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: CALL_OW 251
63356: ST_TO_ADDR
// if not x or not y then
63357: LD_VAR 0 4
63361: NOT
63362: PUSH
63363: LD_VAR 0 5
63367: NOT
63368: OR
63369: IFFALSE 63373
// exit ;
63371: GO 63465
// if GetTaskList ( unit ) then
63373: LD_VAR 0 1
63377: PPUSH
63378: CALL_OW 437
63382: IFFALSE 63465
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63384: LD_STRING e
63386: PUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: CALL_OW 437
63396: PUSH
63397: LD_INT 1
63399: ARRAY
63400: PUSH
63401: LD_INT 1
63403: ARRAY
63404: EQUAL
63405: PUSH
63406: LD_VAR 0 4
63410: PUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 437
63420: PUSH
63421: LD_INT 1
63423: ARRAY
63424: PUSH
63425: LD_INT 2
63427: ARRAY
63428: EQUAL
63429: AND
63430: PUSH
63431: LD_VAR 0 5
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: CALL_OW 437
63445: PUSH
63446: LD_INT 1
63448: ARRAY
63449: PUSH
63450: LD_INT 3
63452: ARRAY
63453: EQUAL
63454: AND
63455: IFFALSE 63465
// result := true end ;
63457: LD_ADDR_VAR 0 3
63461: PUSH
63462: LD_INT 1
63464: ST_TO_ADDR
// end ;
63465: LD_VAR 0 3
63469: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63470: LD_INT 0
63472: PPUSH
// result := false ;
63473: LD_ADDR_VAR 0 4
63477: PUSH
63478: LD_INT 0
63480: ST_TO_ADDR
// if GetTaskList ( unit ) then
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 437
63490: IFFALSE 63573
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63492: LD_STRING M
63494: PUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: CALL_OW 437
63504: PUSH
63505: LD_INT 1
63507: ARRAY
63508: PUSH
63509: LD_INT 1
63511: ARRAY
63512: EQUAL
63513: PUSH
63514: LD_VAR 0 2
63518: PUSH
63519: LD_VAR 0 1
63523: PPUSH
63524: CALL_OW 437
63528: PUSH
63529: LD_INT 1
63531: ARRAY
63532: PUSH
63533: LD_INT 2
63535: ARRAY
63536: EQUAL
63537: AND
63538: PUSH
63539: LD_VAR 0 3
63543: PUSH
63544: LD_VAR 0 1
63548: PPUSH
63549: CALL_OW 437
63553: PUSH
63554: LD_INT 1
63556: ARRAY
63557: PUSH
63558: LD_INT 3
63560: ARRAY
63561: EQUAL
63562: AND
63563: IFFALSE 63573
// result := true ;
63565: LD_ADDR_VAR 0 4
63569: PUSH
63570: LD_INT 1
63572: ST_TO_ADDR
// end ; end ;
63573: LD_VAR 0 4
63577: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
63582: PPUSH
63583: PPUSH
// if not unit or not area then
63584: LD_VAR 0 1
63588: NOT
63589: PUSH
63590: LD_VAR 0 2
63594: NOT
63595: OR
63596: IFFALSE 63600
// exit ;
63598: GO 63776
// tmp := AreaToList ( area , i ) ;
63600: LD_ADDR_VAR 0 6
63604: PUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 5
63614: PPUSH
63615: CALL_OW 517
63619: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63620: LD_ADDR_VAR 0 5
63624: PUSH
63625: DOUBLE
63626: LD_INT 1
63628: DEC
63629: ST_TO_ADDR
63630: LD_VAR 0 6
63634: PUSH
63635: LD_INT 1
63637: ARRAY
63638: PUSH
63639: FOR_TO
63640: IFFALSE 63774
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63642: LD_ADDR_VAR 0 7
63646: PUSH
63647: LD_VAR 0 6
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PUSH
63656: LD_VAR 0 5
63660: ARRAY
63661: PUSH
63662: LD_VAR 0 6
63666: PUSH
63667: LD_INT 2
63669: ARRAY
63670: PUSH
63671: LD_VAR 0 5
63675: ARRAY
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63681: LD_INT 92
63683: PUSH
63684: LD_VAR 0 7
63688: PUSH
63689: LD_INT 1
63691: ARRAY
63692: PUSH
63693: LD_VAR 0 7
63697: PUSH
63698: LD_INT 2
63700: ARRAY
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: PPUSH
63711: CALL_OW 69
63715: PUSH
63716: LD_INT 0
63718: EQUAL
63719: IFFALSE 63772
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63721: LD_VAR 0 1
63725: PPUSH
63726: LD_VAR 0 7
63730: PUSH
63731: LD_INT 1
63733: ARRAY
63734: PPUSH
63735: LD_VAR 0 7
63739: PUSH
63740: LD_INT 2
63742: ARRAY
63743: PPUSH
63744: LD_VAR 0 3
63748: PPUSH
63749: CALL_OW 48
// result := IsPlaced ( unit ) ;
63753: LD_ADDR_VAR 0 4
63757: PUSH
63758: LD_VAR 0 1
63762: PPUSH
63763: CALL_OW 305
63767: ST_TO_ADDR
// exit ;
63768: POP
63769: POP
63770: GO 63776
// end ; end ;
63772: GO 63639
63774: POP
63775: POP
// end ;
63776: LD_VAR 0 4
63780: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63781: LD_INT 0
63783: PPUSH
63784: PPUSH
63785: PPUSH
// if not side or side > 8 then
63786: LD_VAR 0 1
63790: NOT
63791: PUSH
63792: LD_VAR 0 1
63796: PUSH
63797: LD_INT 8
63799: GREATER
63800: OR
63801: IFFALSE 63805
// exit ;
63803: GO 63992
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63805: LD_ADDR_VAR 0 4
63809: PUSH
63810: LD_INT 22
63812: PUSH
63813: LD_VAR 0 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 21
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PPUSH
63836: CALL_OW 69
63840: ST_TO_ADDR
// if not tmp then
63841: LD_VAR 0 4
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 63992
// enable_addtolog := true ;
63850: LD_ADDR_OWVAR 81
63854: PUSH
63855: LD_INT 1
63857: ST_TO_ADDR
// AddToLog ( [ ) ;
63858: LD_STRING [
63860: PPUSH
63861: CALL_OW 561
// for i in tmp do
63865: LD_ADDR_VAR 0 3
63869: PUSH
63870: LD_VAR 0 4
63874: PUSH
63875: FOR_IN
63876: IFFALSE 63983
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63878: LD_STRING [
63880: PUSH
63881: LD_VAR 0 3
63885: PPUSH
63886: CALL_OW 266
63890: STR
63891: PUSH
63892: LD_STRING , 
63894: STR
63895: PUSH
63896: LD_VAR 0 3
63900: PPUSH
63901: CALL_OW 250
63905: STR
63906: PUSH
63907: LD_STRING , 
63909: STR
63910: PUSH
63911: LD_VAR 0 3
63915: PPUSH
63916: CALL_OW 251
63920: STR
63921: PUSH
63922: LD_STRING , 
63924: STR
63925: PUSH
63926: LD_VAR 0 3
63930: PPUSH
63931: CALL_OW 254
63935: STR
63936: PUSH
63937: LD_STRING , 
63939: STR
63940: PUSH
63941: LD_VAR 0 3
63945: PPUSH
63946: LD_INT 1
63948: PPUSH
63949: CALL_OW 268
63953: STR
63954: PUSH
63955: LD_STRING , 
63957: STR
63958: PUSH
63959: LD_VAR 0 3
63963: PPUSH
63964: LD_INT 2
63966: PPUSH
63967: CALL_OW 268
63971: STR
63972: PUSH
63973: LD_STRING ],
63975: STR
63976: PPUSH
63977: CALL_OW 561
// end ;
63981: GO 63875
63983: POP
63984: POP
// AddToLog ( ]; ) ;
63985: LD_STRING ];
63987: PPUSH
63988: CALL_OW 561
// end ;
63992: LD_VAR 0 2
63996: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63997: LD_INT 0
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
// if not area or not rate or not max then
64004: LD_VAR 0 1
64008: NOT
64009: PUSH
64010: LD_VAR 0 2
64014: NOT
64015: OR
64016: PUSH
64017: LD_VAR 0 4
64021: NOT
64022: OR
64023: IFFALSE 64027
// exit ;
64025: GO 64216
// while 1 do
64027: LD_INT 1
64029: IFFALSE 64216
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64031: LD_ADDR_VAR 0 9
64035: PUSH
64036: LD_VAR 0 1
64040: PPUSH
64041: LD_INT 1
64043: PPUSH
64044: CALL_OW 287
64048: PUSH
64049: LD_INT 10
64051: MUL
64052: ST_TO_ADDR
// r := rate / 10 ;
64053: LD_ADDR_VAR 0 7
64057: PUSH
64058: LD_VAR 0 2
64062: PUSH
64063: LD_INT 10
64065: DIVREAL
64066: ST_TO_ADDR
// time := 1 1$00 ;
64067: LD_ADDR_VAR 0 8
64071: PUSH
64072: LD_INT 2100
64074: ST_TO_ADDR
// if amount < min then
64075: LD_VAR 0 9
64079: PUSH
64080: LD_VAR 0 3
64084: LESS
64085: IFFALSE 64103
// r := r * 2 else
64087: LD_ADDR_VAR 0 7
64091: PUSH
64092: LD_VAR 0 7
64096: PUSH
64097: LD_INT 2
64099: MUL
64100: ST_TO_ADDR
64101: GO 64129
// if amount > max then
64103: LD_VAR 0 9
64107: PUSH
64108: LD_VAR 0 4
64112: GREATER
64113: IFFALSE 64129
// r := r / 2 ;
64115: LD_ADDR_VAR 0 7
64119: PUSH
64120: LD_VAR 0 7
64124: PUSH
64125: LD_INT 2
64127: DIVREAL
64128: ST_TO_ADDR
// time := time / r ;
64129: LD_ADDR_VAR 0 8
64133: PUSH
64134: LD_VAR 0 8
64138: PUSH
64139: LD_VAR 0 7
64143: DIVREAL
64144: ST_TO_ADDR
// if time < 0 then
64145: LD_VAR 0 8
64149: PUSH
64150: LD_INT 0
64152: LESS
64153: IFFALSE 64170
// time := time * - 1 ;
64155: LD_ADDR_VAR 0 8
64159: PUSH
64160: LD_VAR 0 8
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: MUL
64169: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64170: LD_VAR 0 8
64174: PUSH
64175: LD_INT 35
64177: PPUSH
64178: LD_INT 875
64180: PPUSH
64181: CALL_OW 12
64185: PLUS
64186: PPUSH
64187: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64191: LD_INT 1
64193: PPUSH
64194: LD_INT 5
64196: PPUSH
64197: CALL_OW 12
64201: PPUSH
64202: LD_VAR 0 1
64206: PPUSH
64207: LD_INT 1
64209: PPUSH
64210: CALL_OW 55
// end ;
64214: GO 64027
// end ;
64216: LD_VAR 0 5
64220: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64221: LD_INT 0
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
64228: PPUSH
64229: PPUSH
64230: PPUSH
// if not turrets or not factories then
64231: LD_VAR 0 1
64235: NOT
64236: PUSH
64237: LD_VAR 0 2
64241: NOT
64242: OR
64243: IFFALSE 64247
// exit ;
64245: GO 64554
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64247: LD_ADDR_VAR 0 10
64251: PUSH
64252: LD_INT 5
64254: PUSH
64255: LD_INT 6
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 4
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: LD_INT 5
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 24
64289: PUSH
64290: LD_INT 25
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 23
64299: PUSH
64300: LD_INT 27
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 42
64313: PUSH
64314: LD_INT 43
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 44
64323: PUSH
64324: LD_INT 46
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 45
64333: PUSH
64334: LD_INT 47
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// result := [ ] ;
64351: LD_ADDR_VAR 0 3
64355: PUSH
64356: EMPTY
64357: ST_TO_ADDR
// for i in turrets do
64358: LD_ADDR_VAR 0 4
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: FOR_IN
64369: IFFALSE 64552
// begin nat := GetNation ( i ) ;
64371: LD_ADDR_VAR 0 7
64375: PUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: CALL_OW 248
64385: ST_TO_ADDR
// weapon := 0 ;
64386: LD_ADDR_VAR 0 8
64390: PUSH
64391: LD_INT 0
64393: ST_TO_ADDR
// if not nat then
64394: LD_VAR 0 7
64398: NOT
64399: IFFALSE 64403
// continue ;
64401: GO 64368
// for j in list [ nat ] do
64403: LD_ADDR_VAR 0 5
64407: PUSH
64408: LD_VAR 0 10
64412: PUSH
64413: LD_VAR 0 7
64417: ARRAY
64418: PUSH
64419: FOR_IN
64420: IFFALSE 64461
// if GetBWeapon ( i ) = j [ 1 ] then
64422: LD_VAR 0 4
64426: PPUSH
64427: CALL_OW 269
64431: PUSH
64432: LD_VAR 0 5
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: EQUAL
64441: IFFALSE 64459
// begin weapon := j [ 2 ] ;
64443: LD_ADDR_VAR 0 8
64447: PUSH
64448: LD_VAR 0 5
64452: PUSH
64453: LD_INT 2
64455: ARRAY
64456: ST_TO_ADDR
// break ;
64457: GO 64461
// end ;
64459: GO 64419
64461: POP
64462: POP
// if not weapon then
64463: LD_VAR 0 8
64467: NOT
64468: IFFALSE 64472
// continue ;
64470: GO 64368
// for k in factories do
64472: LD_ADDR_VAR 0 6
64476: PUSH
64477: LD_VAR 0 2
64481: PUSH
64482: FOR_IN
64483: IFFALSE 64548
// begin weapons := AvailableWeaponList ( k ) ;
64485: LD_ADDR_VAR 0 9
64489: PUSH
64490: LD_VAR 0 6
64494: PPUSH
64495: CALL_OW 478
64499: ST_TO_ADDR
// if not weapons then
64500: LD_VAR 0 9
64504: NOT
64505: IFFALSE 64509
// continue ;
64507: GO 64482
// if weapon in weapons then
64509: LD_VAR 0 8
64513: PUSH
64514: LD_VAR 0 9
64518: IN
64519: IFFALSE 64546
// begin result := [ i , weapon ] ;
64521: LD_ADDR_VAR 0 3
64525: PUSH
64526: LD_VAR 0 4
64530: PUSH
64531: LD_VAR 0 8
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: ST_TO_ADDR
// exit ;
64540: POP
64541: POP
64542: POP
64543: POP
64544: GO 64554
// end ; end ;
64546: GO 64482
64548: POP
64549: POP
// end ;
64550: GO 64368
64552: POP
64553: POP
// end ;
64554: LD_VAR 0 3
64558: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64559: LD_INT 0
64561: PPUSH
// if not side or side > 8 then
64562: LD_VAR 0 3
64566: NOT
64567: PUSH
64568: LD_VAR 0 3
64572: PUSH
64573: LD_INT 8
64575: GREATER
64576: OR
64577: IFFALSE 64581
// exit ;
64579: GO 64640
// if not range then
64581: LD_VAR 0 4
64585: NOT
64586: IFFALSE 64597
// range := - 12 ;
64588: LD_ADDR_VAR 0 4
64592: PUSH
64593: LD_INT 12
64595: NEG
64596: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_VAR 0 2
64606: PPUSH
64607: LD_VAR 0 3
64611: PPUSH
64612: LD_VAR 0 4
64616: PPUSH
64617: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: LD_VAR 0 3
64635: PPUSH
64636: CALL_OW 331
// end ;
64640: LD_VAR 0 5
64644: RET
// export function Video ( mode ) ; begin
64645: LD_INT 0
64647: PPUSH
// ingame_video = mode ;
64648: LD_ADDR_OWVAR 52
64652: PUSH
64653: LD_VAR 0 1
64657: ST_TO_ADDR
// interface_hidden = mode ;
64658: LD_ADDR_OWVAR 54
64662: PUSH
64663: LD_VAR 0 1
64667: ST_TO_ADDR
// end ;
64668: LD_VAR 0 2
64672: RET
// export function Join ( array , element ) ; begin
64673: LD_INT 0
64675: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64676: LD_ADDR_VAR 0 3
64680: PUSH
64681: LD_VAR 0 1
64685: PPUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 1
64693: PLUS
64694: PPUSH
64695: LD_VAR 0 2
64699: PPUSH
64700: CALL_OW 1
64704: ST_TO_ADDR
// end ;
64705: LD_VAR 0 3
64709: RET
// export function JoinUnion ( array , element ) ; begin
64710: LD_INT 0
64712: PPUSH
// result := array union element ;
64713: LD_ADDR_VAR 0 3
64717: PUSH
64718: LD_VAR 0 1
64722: PUSH
64723: LD_VAR 0 2
64727: UNION
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 3
64733: RET
// export function GetBehemoths ( side ) ; begin
64734: LD_INT 0
64736: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64737: LD_ADDR_VAR 0 2
64741: PUSH
64742: LD_INT 22
64744: PUSH
64745: LD_VAR 0 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 31
64756: PUSH
64757: LD_INT 25
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PPUSH
64768: CALL_OW 69
64772: ST_TO_ADDR
// end ;
64773: LD_VAR 0 2
64777: RET
// export function Shuffle ( array ) ; var i , index ; begin
64778: LD_INT 0
64780: PPUSH
64781: PPUSH
64782: PPUSH
// result := [ ] ;
64783: LD_ADDR_VAR 0 2
64787: PUSH
64788: EMPTY
64789: ST_TO_ADDR
// if not array then
64790: LD_VAR 0 1
64794: NOT
64795: IFFALSE 64799
// exit ;
64797: GO 64898
// Randomize ;
64799: CALL_OW 10
// for i = array downto 1 do
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: DOUBLE
64809: LD_VAR 0 1
64813: INC
64814: ST_TO_ADDR
64815: LD_INT 1
64817: PUSH
64818: FOR_DOWNTO
64819: IFFALSE 64896
// begin index := rand ( 1 , array ) ;
64821: LD_ADDR_VAR 0 4
64825: PUSH
64826: LD_INT 1
64828: PPUSH
64829: LD_VAR 0 1
64833: PPUSH
64834: CALL_OW 12
64838: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64839: LD_ADDR_VAR 0 2
64843: PUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: LD_VAR 0 2
64853: PUSH
64854: LD_INT 1
64856: PLUS
64857: PPUSH
64858: LD_VAR 0 1
64862: PUSH
64863: LD_VAR 0 4
64867: ARRAY
64868: PPUSH
64869: CALL_OW 2
64873: ST_TO_ADDR
// array := Delete ( array , index ) ;
64874: LD_ADDR_VAR 0 1
64878: PUSH
64879: LD_VAR 0 1
64883: PPUSH
64884: LD_VAR 0 4
64888: PPUSH
64889: CALL_OW 3
64893: ST_TO_ADDR
// end ;
64894: GO 64818
64896: POP
64897: POP
// end ;
64898: LD_VAR 0 2
64902: RET
// export function GetBaseMaterials ( base ) ; begin
64903: LD_INT 0
64905: PPUSH
// result := [ 0 , 0 , 0 ] ;
64906: LD_ADDR_VAR 0 2
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: ST_TO_ADDR
// if not base then
64925: LD_VAR 0 1
64929: NOT
64930: IFFALSE 64934
// exit ;
64932: GO 64983
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64934: LD_ADDR_VAR 0 2
64938: PUSH
64939: LD_VAR 0 1
64943: PPUSH
64944: LD_INT 1
64946: PPUSH
64947: CALL_OW 275
64951: PUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: LD_INT 2
64959: PPUSH
64960: CALL_OW 275
64964: PUSH
64965: LD_VAR 0 1
64969: PPUSH
64970: LD_INT 3
64972: PPUSH
64973: CALL_OW 275
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// end ;
64983: LD_VAR 0 2
64987: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64988: LD_INT 0
64990: PPUSH
64991: PPUSH
// result := array ;
64992: LD_ADDR_VAR 0 3
64996: PUSH
64997: LD_VAR 0 1
65001: ST_TO_ADDR
// if size >= result then
65002: LD_VAR 0 2
65006: PUSH
65007: LD_VAR 0 3
65011: GREATEREQUAL
65012: IFFALSE 65016
// exit ;
65014: GO 65066
// if size then
65016: LD_VAR 0 2
65020: IFFALSE 65066
// for i := array downto size do
65022: LD_ADDR_VAR 0 4
65026: PUSH
65027: DOUBLE
65028: LD_VAR 0 1
65032: INC
65033: ST_TO_ADDR
65034: LD_VAR 0 2
65038: PUSH
65039: FOR_DOWNTO
65040: IFFALSE 65064
// result := Delete ( result , result ) ;
65042: LD_ADDR_VAR 0 3
65046: PUSH
65047: LD_VAR 0 3
65051: PPUSH
65052: LD_VAR 0 3
65056: PPUSH
65057: CALL_OW 3
65061: ST_TO_ADDR
65062: GO 65039
65064: POP
65065: POP
// end ;
65066: LD_VAR 0 3
65070: RET
// export function ComExit ( unit ) ; var tmp ; begin
65071: LD_INT 0
65073: PPUSH
65074: PPUSH
// if not IsInUnit ( unit ) then
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL_OW 310
65084: NOT
65085: IFFALSE 65089
// exit ;
65087: GO 65149
// tmp := IsInUnit ( unit ) ;
65089: LD_ADDR_VAR 0 3
65093: PUSH
65094: LD_VAR 0 1
65098: PPUSH
65099: CALL_OW 310
65103: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65104: LD_VAR 0 3
65108: PPUSH
65109: CALL_OW 247
65113: PUSH
65114: LD_INT 2
65116: EQUAL
65117: IFFALSE 65130
// ComExitVehicle ( unit ) else
65119: LD_VAR 0 1
65123: PPUSH
65124: CALL_OW 121
65128: GO 65139
// ComExitBuilding ( unit ) ;
65130: LD_VAR 0 1
65134: PPUSH
65135: CALL_OW 122
// result := tmp ;
65139: LD_ADDR_VAR 0 2
65143: PUSH
65144: LD_VAR 0 3
65148: ST_TO_ADDR
// end ;
65149: LD_VAR 0 2
65153: RET
// export function ComExitAll ( units ) ; var i ; begin
65154: LD_INT 0
65156: PPUSH
65157: PPUSH
// if not units then
65158: LD_VAR 0 1
65162: NOT
65163: IFFALSE 65167
// exit ;
65165: GO 65193
// for i in units do
65167: LD_ADDR_VAR 0 3
65171: PUSH
65172: LD_VAR 0 1
65176: PUSH
65177: FOR_IN
65178: IFFALSE 65191
// ComExit ( i ) ;
65180: LD_VAR 0 3
65184: PPUSH
65185: CALL 65071 0 1
65189: GO 65177
65191: POP
65192: POP
// end ;
65193: LD_VAR 0 2
65197: RET
// export function ResetHc ; begin
65198: LD_INT 0
65200: PPUSH
// InitHc ;
65201: CALL_OW 19
// hc_importance := 0 ;
65205: LD_ADDR_OWVAR 32
65209: PUSH
65210: LD_INT 0
65212: ST_TO_ADDR
// end ;
65213: LD_VAR 0 1
65217: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65218: LD_INT 0
65220: PPUSH
65221: PPUSH
65222: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65223: LD_ADDR_VAR 0 6
65227: PUSH
65228: LD_VAR 0 1
65232: PUSH
65233: LD_VAR 0 3
65237: PLUS
65238: PUSH
65239: LD_INT 2
65241: DIV
65242: ST_TO_ADDR
// if _x < 0 then
65243: LD_VAR 0 6
65247: PUSH
65248: LD_INT 0
65250: LESS
65251: IFFALSE 65268
// _x := _x * - 1 ;
65253: LD_ADDR_VAR 0 6
65257: PUSH
65258: LD_VAR 0 6
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: MUL
65267: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65268: LD_ADDR_VAR 0 7
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: LD_VAR 0 4
65282: PLUS
65283: PUSH
65284: LD_INT 2
65286: DIV
65287: ST_TO_ADDR
// if _y < 0 then
65288: LD_VAR 0 7
65292: PUSH
65293: LD_INT 0
65295: LESS
65296: IFFALSE 65313
// _y := _y * - 1 ;
65298: LD_ADDR_VAR 0 7
65302: PUSH
65303: LD_VAR 0 7
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: MUL
65312: ST_TO_ADDR
// result := [ _x , _y ] ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: LD_VAR 0 6
65322: PUSH
65323: LD_VAR 0 7
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// end ;
65332: LD_VAR 0 5
65336: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
65341: PPUSH
65342: PPUSH
// task := GetTaskList ( unit ) ;
65343: LD_ADDR_VAR 0 7
65347: PUSH
65348: LD_VAR 0 1
65352: PPUSH
65353: CALL_OW 437
65357: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65358: LD_VAR 0 7
65362: NOT
65363: PUSH
65364: LD_VAR 0 1
65368: PPUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: CALL_OW 308
65378: NOT
65379: AND
65380: IFFALSE 65384
// exit ;
65382: GO 65502
// if IsInArea ( unit , area ) then
65384: LD_VAR 0 1
65388: PPUSH
65389: LD_VAR 0 2
65393: PPUSH
65394: CALL_OW 308
65398: IFFALSE 65416
// begin ComMoveToArea ( unit , goAway ) ;
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_VAR 0 3
65409: PPUSH
65410: CALL_OW 113
// exit ;
65414: GO 65502
// end ; if task [ 1 ] [ 1 ] <> M then
65416: LD_VAR 0 7
65420: PUSH
65421: LD_INT 1
65423: ARRAY
65424: PUSH
65425: LD_INT 1
65427: ARRAY
65428: PUSH
65429: LD_STRING M
65431: NONEQUAL
65432: IFFALSE 65436
// exit ;
65434: GO 65502
// x := task [ 1 ] [ 2 ] ;
65436: LD_ADDR_VAR 0 5
65440: PUSH
65441: LD_VAR 0 7
65445: PUSH
65446: LD_INT 1
65448: ARRAY
65449: PUSH
65450: LD_INT 2
65452: ARRAY
65453: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65454: LD_ADDR_VAR 0 6
65458: PUSH
65459: LD_VAR 0 7
65463: PUSH
65464: LD_INT 1
65466: ARRAY
65467: PUSH
65468: LD_INT 3
65470: ARRAY
65471: ST_TO_ADDR
// if InArea ( x , y , area ) then
65472: LD_VAR 0 5
65476: PPUSH
65477: LD_VAR 0 6
65481: PPUSH
65482: LD_VAR 0 2
65486: PPUSH
65487: CALL_OW 309
65491: IFFALSE 65502
// ComStop ( unit ) ;
65493: LD_VAR 0 1
65497: PPUSH
65498: CALL_OW 141
// end ;
65502: LD_VAR 0 4
65506: RET
// export function Abs ( value ) ; begin
65507: LD_INT 0
65509: PPUSH
// result := value ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_VAR 0 1
65519: ST_TO_ADDR
// if value < 0 then
65520: LD_VAR 0 1
65524: PUSH
65525: LD_INT 0
65527: LESS
65528: IFFALSE 65545
// result := value * - 1 ;
65530: LD_ADDR_VAR 0 2
65534: PUSH
65535: LD_VAR 0 1
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: MUL
65544: ST_TO_ADDR
// end ;
65545: LD_VAR 0 2
65549: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65550: LD_INT 0
65552: PPUSH
65553: PPUSH
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
65558: PPUSH
65559: PPUSH
// if not unit or not building then
65560: LD_VAR 0 1
65564: NOT
65565: PUSH
65566: LD_VAR 0 2
65570: NOT
65571: OR
65572: IFFALSE 65576
// exit ;
65574: GO 65802
// x := GetX ( building ) ;
65576: LD_ADDR_VAR 0 4
65580: PUSH
65581: LD_VAR 0 2
65585: PPUSH
65586: CALL_OW 250
65590: ST_TO_ADDR
// y := GetY ( building ) ;
65591: LD_ADDR_VAR 0 6
65595: PUSH
65596: LD_VAR 0 2
65600: PPUSH
65601: CALL_OW 251
65605: ST_TO_ADDR
// d := GetDir ( building ) ;
65606: LD_ADDR_VAR 0 8
65610: PUSH
65611: LD_VAR 0 2
65615: PPUSH
65616: CALL_OW 254
65620: ST_TO_ADDR
// r := 4 ;
65621: LD_ADDR_VAR 0 9
65625: PUSH
65626: LD_INT 4
65628: ST_TO_ADDR
// for i := 1 to 5 do
65629: LD_ADDR_VAR 0 10
65633: PUSH
65634: DOUBLE
65635: LD_INT 1
65637: DEC
65638: ST_TO_ADDR
65639: LD_INT 5
65641: PUSH
65642: FOR_TO
65643: IFFALSE 65800
// begin _x := ShiftX ( x , d , r + i ) ;
65645: LD_ADDR_VAR 0 5
65649: PUSH
65650: LD_VAR 0 4
65654: PPUSH
65655: LD_VAR 0 8
65659: PPUSH
65660: LD_VAR 0 9
65664: PUSH
65665: LD_VAR 0 10
65669: PLUS
65670: PPUSH
65671: CALL_OW 272
65675: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65676: LD_ADDR_VAR 0 7
65680: PUSH
65681: LD_VAR 0 6
65685: PPUSH
65686: LD_VAR 0 8
65690: PPUSH
65691: LD_VAR 0 9
65695: PUSH
65696: LD_VAR 0 10
65700: PLUS
65701: PPUSH
65702: CALL_OW 273
65706: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65707: LD_VAR 0 5
65711: PPUSH
65712: LD_VAR 0 7
65716: PPUSH
65717: CALL_OW 488
65721: PUSH
65722: LD_VAR 0 5
65726: PPUSH
65727: LD_VAR 0 7
65731: PPUSH
65732: CALL_OW 428
65736: PPUSH
65737: CALL_OW 247
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: IN
65752: NOT
65753: AND
65754: IFFALSE 65798
// begin ComMoveXY ( unit , _x , _y ) ;
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 5
65765: PPUSH
65766: LD_VAR 0 7
65770: PPUSH
65771: CALL_OW 111
// result := [ _x , _y ] ;
65775: LD_ADDR_VAR 0 3
65779: PUSH
65780: LD_VAR 0 5
65784: PUSH
65785: LD_VAR 0 7
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: ST_TO_ADDR
// exit ;
65794: POP
65795: POP
65796: GO 65802
// end ; end ;
65798: GO 65642
65800: POP
65801: POP
// end ;
65802: LD_VAR 0 3
65806: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65807: LD_INT 0
65809: PPUSH
65810: PPUSH
65811: PPUSH
// result := 0 ;
65812: LD_ADDR_VAR 0 3
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65820: LD_VAR 0 1
65824: PUSH
65825: LD_INT 0
65827: LESS
65828: PUSH
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 8
65836: GREATER
65837: OR
65838: PUSH
65839: LD_VAR 0 2
65843: PUSH
65844: LD_INT 0
65846: LESS
65847: OR
65848: PUSH
65849: LD_VAR 0 2
65853: PUSH
65854: LD_INT 8
65856: GREATER
65857: OR
65858: IFFALSE 65862
// exit ;
65860: GO 65937
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65862: LD_ADDR_VAR 0 4
65866: PUSH
65867: LD_INT 22
65869: PUSH
65870: LD_VAR 0 2
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PPUSH
65879: CALL_OW 69
65883: PUSH
65884: FOR_IN
65885: IFFALSE 65935
// begin un := UnitShoot ( i ) ;
65887: LD_ADDR_VAR 0 5
65891: PUSH
65892: LD_VAR 0 4
65896: PPUSH
65897: CALL_OW 504
65901: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65902: LD_VAR 0 5
65906: PPUSH
65907: CALL_OW 255
65911: PUSH
65912: LD_VAR 0 1
65916: EQUAL
65917: IFFALSE 65933
// begin result := un ;
65919: LD_ADDR_VAR 0 3
65923: PUSH
65924: LD_VAR 0 5
65928: ST_TO_ADDR
// exit ;
65929: POP
65930: POP
65931: GO 65937
// end ; end ;
65933: GO 65884
65935: POP
65936: POP
// end ;
65937: LD_VAR 0 3
65941: RET
// export function GetCargoBay ( units ) ; begin
65942: LD_INT 0
65944: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65945: LD_ADDR_VAR 0 2
65949: PUSH
65950: LD_VAR 0 1
65954: PPUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 34
65960: PUSH
65961: LD_INT 12
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 34
65970: PUSH
65971: LD_INT 51
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 34
65980: PUSH
65981: LD_INT 32
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 34
65990: PUSH
65991: LD_INT 89
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: PPUSH
66005: CALL_OW 72
66009: ST_TO_ADDR
// end ;
66010: LD_VAR 0 2
66014: RET
// export function Negate ( value ) ; begin
66015: LD_INT 0
66017: PPUSH
// result := not value ;
66018: LD_ADDR_VAR 0 2
66022: PUSH
66023: LD_VAR 0 1
66027: NOT
66028: ST_TO_ADDR
// end ;
66029: LD_VAR 0 2
66033: RET
// export function Inc ( value ) ; begin
66034: LD_INT 0
66036: PPUSH
// result := value + 1 ;
66037: LD_ADDR_VAR 0 2
66041: PUSH
66042: LD_VAR 0 1
66046: PUSH
66047: LD_INT 1
66049: PLUS
66050: ST_TO_ADDR
// end ;
66051: LD_VAR 0 2
66055: RET
// export function Dec ( value ) ; begin
66056: LD_INT 0
66058: PPUSH
// result := value - 1 ;
66059: LD_ADDR_VAR 0 2
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 1
66071: MINUS
66072: ST_TO_ADDR
// end ;
66073: LD_VAR 0 2
66077: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66078: LD_INT 0
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
66084: PPUSH
66085: PPUSH
66086: PPUSH
66087: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66088: LD_VAR 0 1
66092: PPUSH
66093: LD_VAR 0 2
66097: PPUSH
66098: CALL_OW 488
66102: NOT
66103: PUSH
66104: LD_VAR 0 3
66108: PPUSH
66109: LD_VAR 0 4
66113: PPUSH
66114: CALL_OW 488
66118: NOT
66119: OR
66120: IFFALSE 66133
// begin result := - 1 ;
66122: LD_ADDR_VAR 0 5
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: ST_TO_ADDR
// exit ;
66131: GO 66368
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66133: LD_ADDR_VAR 0 12
66137: PUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: LD_VAR 0 2
66147: PPUSH
66148: LD_VAR 0 3
66152: PPUSH
66153: LD_VAR 0 4
66157: PPUSH
66158: CALL 65218 0 4
66162: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66163: LD_ADDR_VAR 0 11
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_VAR 0 2
66177: PPUSH
66178: LD_VAR 0 12
66182: PUSH
66183: LD_INT 1
66185: ARRAY
66186: PPUSH
66187: LD_VAR 0 12
66191: PUSH
66192: LD_INT 2
66194: ARRAY
66195: PPUSH
66196: CALL_OW 298
66200: ST_TO_ADDR
// distance := 9999 ;
66201: LD_ADDR_VAR 0 10
66205: PUSH
66206: LD_INT 9999
66208: ST_TO_ADDR
// for i := 0 to 5 do
66209: LD_ADDR_VAR 0 6
66213: PUSH
66214: DOUBLE
66215: LD_INT 0
66217: DEC
66218: ST_TO_ADDR
66219: LD_INT 5
66221: PUSH
66222: FOR_TO
66223: IFFALSE 66366
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66225: LD_ADDR_VAR 0 7
66229: PUSH
66230: LD_VAR 0 1
66234: PPUSH
66235: LD_VAR 0 6
66239: PPUSH
66240: LD_VAR 0 11
66244: PPUSH
66245: CALL_OW 272
66249: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66250: LD_ADDR_VAR 0 8
66254: PUSH
66255: LD_VAR 0 2
66259: PPUSH
66260: LD_VAR 0 6
66264: PPUSH
66265: LD_VAR 0 11
66269: PPUSH
66270: CALL_OW 273
66274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66275: LD_VAR 0 7
66279: PPUSH
66280: LD_VAR 0 8
66284: PPUSH
66285: CALL_OW 488
66289: NOT
66290: IFFALSE 66294
// continue ;
66292: GO 66222
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66294: LD_ADDR_VAR 0 9
66298: PUSH
66299: LD_VAR 0 12
66303: PUSH
66304: LD_INT 1
66306: ARRAY
66307: PPUSH
66308: LD_VAR 0 12
66312: PUSH
66313: LD_INT 2
66315: ARRAY
66316: PPUSH
66317: LD_VAR 0 7
66321: PPUSH
66322: LD_VAR 0 8
66326: PPUSH
66327: CALL_OW 298
66331: ST_TO_ADDR
// if tmp < distance then
66332: LD_VAR 0 9
66336: PUSH
66337: LD_VAR 0 10
66341: LESS
66342: IFFALSE 66364
// begin result := i ;
66344: LD_ADDR_VAR 0 5
66348: PUSH
66349: LD_VAR 0 6
66353: ST_TO_ADDR
// distance := tmp ;
66354: LD_ADDR_VAR 0 10
66358: PUSH
66359: LD_VAR 0 9
66363: ST_TO_ADDR
// end ; end ;
66364: GO 66222
66366: POP
66367: POP
// end ;
66368: LD_VAR 0 5
66372: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66373: LD_INT 0
66375: PPUSH
66376: PPUSH
// if not driver or not IsInUnit ( driver ) then
66377: LD_VAR 0 1
66381: NOT
66382: PUSH
66383: LD_VAR 0 1
66387: PPUSH
66388: CALL_OW 310
66392: NOT
66393: OR
66394: IFFALSE 66398
// exit ;
66396: GO 66488
// vehicle := IsInUnit ( driver ) ;
66398: LD_ADDR_VAR 0 3
66402: PUSH
66403: LD_VAR 0 1
66407: PPUSH
66408: CALL_OW 310
66412: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66413: LD_VAR 0 1
66417: PPUSH
66418: LD_STRING \
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: PUSH
66448: LD_STRING E
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_VAR 0 3
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PPUSH
66484: CALL_OW 446
// end ;
66488: LD_VAR 0 2
66492: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66493: LD_INT 0
66495: PPUSH
66496: PPUSH
// if not driver or not IsInUnit ( driver ) then
66497: LD_VAR 0 1
66501: NOT
66502: PUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: CALL_OW 310
66512: NOT
66513: OR
66514: IFFALSE 66518
// exit ;
66516: GO 66608
// vehicle := IsInUnit ( driver ) ;
66518: LD_ADDR_VAR 0 3
66522: PUSH
66523: LD_VAR 0 1
66527: PPUSH
66528: CALL_OW 310
66532: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66533: LD_VAR 0 1
66537: PPUSH
66538: LD_STRING \
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: PUSH
66568: LD_STRING E
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_VAR 0 3
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PPUSH
66604: CALL_OW 447
// end ;
66608: LD_VAR 0 2
66612: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66613: LD_INT 0
66615: PPUSH
66616: PPUSH
66617: PPUSH
// tmp := [ ] ;
66618: LD_ADDR_VAR 0 5
66622: PUSH
66623: EMPTY
66624: ST_TO_ADDR
// for i in units do
66625: LD_ADDR_VAR 0 4
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: FOR_IN
66636: IFFALSE 66674
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66638: LD_ADDR_VAR 0 5
66642: PUSH
66643: LD_VAR 0 5
66647: PPUSH
66648: LD_VAR 0 5
66652: PUSH
66653: LD_INT 1
66655: PLUS
66656: PPUSH
66657: LD_VAR 0 4
66661: PPUSH
66662: CALL_OW 256
66666: PPUSH
66667: CALL_OW 2
66671: ST_TO_ADDR
66672: GO 66635
66674: POP
66675: POP
// if not tmp then
66676: LD_VAR 0 5
66680: NOT
66681: IFFALSE 66685
// exit ;
66683: GO 66733
// if asc then
66685: LD_VAR 0 2
66689: IFFALSE 66713
// result := SortListByListAsc ( units , tmp ) else
66691: LD_ADDR_VAR 0 3
66695: PUSH
66696: LD_VAR 0 1
66700: PPUSH
66701: LD_VAR 0 5
66705: PPUSH
66706: CALL_OW 76
66710: ST_TO_ADDR
66711: GO 66733
// result := SortListByListDesc ( units , tmp ) ;
66713: LD_ADDR_VAR 0 3
66717: PUSH
66718: LD_VAR 0 1
66722: PPUSH
66723: LD_VAR 0 5
66727: PPUSH
66728: CALL_OW 77
66732: ST_TO_ADDR
// end ;
66733: LD_VAR 0 3
66737: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66738: LD_INT 0
66740: PPUSH
66741: PPUSH
// task := GetTaskList ( mech ) ;
66742: LD_ADDR_VAR 0 4
66746: PUSH
66747: LD_VAR 0 1
66751: PPUSH
66752: CALL_OW 437
66756: ST_TO_ADDR
// if not task then
66757: LD_VAR 0 4
66761: NOT
66762: IFFALSE 66766
// exit ;
66764: GO 66808
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66766: LD_ADDR_VAR 0 3
66770: PUSH
66771: LD_VAR 0 4
66775: PUSH
66776: LD_INT 1
66778: ARRAY
66779: PUSH
66780: LD_INT 1
66782: ARRAY
66783: PUSH
66784: LD_STRING r
66786: EQUAL
66787: PUSH
66788: LD_VAR 0 4
66792: PUSH
66793: LD_INT 1
66795: ARRAY
66796: PUSH
66797: LD_INT 4
66799: ARRAY
66800: PUSH
66801: LD_VAR 0 2
66805: EQUAL
66806: AND
66807: ST_TO_ADDR
// end ;
66808: LD_VAR 0 3
66812: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66813: LD_INT 0
66815: PPUSH
// SetDir ( unit , d ) ;
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_VAR 0 4
66825: PPUSH
66826: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66830: LD_VAR 0 1
66834: PPUSH
66835: LD_VAR 0 2
66839: PPUSH
66840: LD_VAR 0 3
66844: PPUSH
66845: LD_VAR 0 5
66849: PPUSH
66850: CALL_OW 48
// end ;
66854: LD_VAR 0 6
66858: RET
// export function ToNaturalNumber ( number ) ; begin
66859: LD_INT 0
66861: PPUSH
// result := number div 1 ;
66862: LD_ADDR_VAR 0 2
66866: PUSH
66867: LD_VAR 0 1
66871: PUSH
66872: LD_INT 1
66874: DIV
66875: ST_TO_ADDR
// if number < 0 then
66876: LD_VAR 0 1
66880: PUSH
66881: LD_INT 0
66883: LESS
66884: IFFALSE 66894
// result := 0 ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_INT 0
66893: ST_TO_ADDR
// end ;
66894: LD_VAR 0 2
66898: RET
// export function SortByClass ( units , class ) ; var un ; begin
66899: LD_INT 0
66901: PPUSH
66902: PPUSH
// if not units or not class then
66903: LD_VAR 0 1
66907: NOT
66908: PUSH
66909: LD_VAR 0 2
66913: NOT
66914: OR
66915: IFFALSE 66919
// exit ;
66917: GO 67014
// result := [ ] ;
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: EMPTY
66925: ST_TO_ADDR
// for un in units do
66926: LD_ADDR_VAR 0 4
66930: PUSH
66931: LD_VAR 0 1
66935: PUSH
66936: FOR_IN
66937: IFFALSE 67012
// if GetClass ( un ) = class then
66939: LD_VAR 0 4
66943: PPUSH
66944: CALL_OW 257
66948: PUSH
66949: LD_VAR 0 2
66953: EQUAL
66954: IFFALSE 66981
// result := Insert ( result , 1 , un ) else
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: LD_VAR 0 3
66965: PPUSH
66966: LD_INT 1
66968: PPUSH
66969: LD_VAR 0 4
66973: PPUSH
66974: CALL_OW 2
66978: ST_TO_ADDR
66979: GO 67010
// result := Replace ( result , result + 1 , un ) ;
66981: LD_ADDR_VAR 0 3
66985: PUSH
66986: LD_VAR 0 3
66990: PPUSH
66991: LD_VAR 0 3
66995: PUSH
66996: LD_INT 1
66998: PLUS
66999: PPUSH
67000: LD_VAR 0 4
67004: PPUSH
67005: CALL_OW 1
67009: ST_TO_ADDR
67010: GO 66936
67012: POP
67013: POP
// end ;
67014: LD_VAR 0 3
67018: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67019: LD_INT 0
67021: PPUSH
67022: PPUSH
67023: PPUSH
67024: PPUSH
67025: PPUSH
67026: PPUSH
67027: PPUSH
// result := [ ] ;
67028: LD_ADDR_VAR 0 4
67032: PUSH
67033: EMPTY
67034: ST_TO_ADDR
// if x - r < 0 then
67035: LD_VAR 0 1
67039: PUSH
67040: LD_VAR 0 3
67044: MINUS
67045: PUSH
67046: LD_INT 0
67048: LESS
67049: IFFALSE 67061
// min_x := 0 else
67051: LD_ADDR_VAR 0 8
67055: PUSH
67056: LD_INT 0
67058: ST_TO_ADDR
67059: GO 67077
// min_x := x - r ;
67061: LD_ADDR_VAR 0 8
67065: PUSH
67066: LD_VAR 0 1
67070: PUSH
67071: LD_VAR 0 3
67075: MINUS
67076: ST_TO_ADDR
// if y - r < 0 then
67077: LD_VAR 0 2
67081: PUSH
67082: LD_VAR 0 3
67086: MINUS
67087: PUSH
67088: LD_INT 0
67090: LESS
67091: IFFALSE 67103
// min_y := 0 else
67093: LD_ADDR_VAR 0 7
67097: PUSH
67098: LD_INT 0
67100: ST_TO_ADDR
67101: GO 67119
// min_y := y - r ;
67103: LD_ADDR_VAR 0 7
67107: PUSH
67108: LD_VAR 0 2
67112: PUSH
67113: LD_VAR 0 3
67117: MINUS
67118: ST_TO_ADDR
// max_x := x + r ;
67119: LD_ADDR_VAR 0 9
67123: PUSH
67124: LD_VAR 0 1
67128: PUSH
67129: LD_VAR 0 3
67133: PLUS
67134: ST_TO_ADDR
// max_y := y + r ;
67135: LD_ADDR_VAR 0 10
67139: PUSH
67140: LD_VAR 0 2
67144: PUSH
67145: LD_VAR 0 3
67149: PLUS
67150: ST_TO_ADDR
// for _x = min_x to max_x do
67151: LD_ADDR_VAR 0 5
67155: PUSH
67156: DOUBLE
67157: LD_VAR 0 8
67161: DEC
67162: ST_TO_ADDR
67163: LD_VAR 0 9
67167: PUSH
67168: FOR_TO
67169: IFFALSE 67270
// for _y = min_y to max_y do
67171: LD_ADDR_VAR 0 6
67175: PUSH
67176: DOUBLE
67177: LD_VAR 0 7
67181: DEC
67182: ST_TO_ADDR
67183: LD_VAR 0 10
67187: PUSH
67188: FOR_TO
67189: IFFALSE 67266
// begin if not ValidHex ( _x , _y ) then
67191: LD_VAR 0 5
67195: PPUSH
67196: LD_VAR 0 6
67200: PPUSH
67201: CALL_OW 488
67205: NOT
67206: IFFALSE 67210
// continue ;
67208: GO 67188
// if GetResourceTypeXY ( _x , _y ) then
67210: LD_VAR 0 5
67214: PPUSH
67215: LD_VAR 0 6
67219: PPUSH
67220: CALL_OW 283
67224: IFFALSE 67264
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67226: LD_ADDR_VAR 0 4
67230: PUSH
67231: LD_VAR 0 4
67235: PPUSH
67236: LD_VAR 0 4
67240: PUSH
67241: LD_INT 1
67243: PLUS
67244: PPUSH
67245: LD_VAR 0 5
67249: PUSH
67250: LD_VAR 0 6
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PPUSH
67259: CALL_OW 1
67263: ST_TO_ADDR
// end ;
67264: GO 67188
67266: POP
67267: POP
67268: GO 67168
67270: POP
67271: POP
// end ;
67272: LD_VAR 0 4
67276: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67277: LD_INT 0
67279: PPUSH
67280: PPUSH
67281: PPUSH
67282: PPUSH
67283: PPUSH
67284: PPUSH
67285: PPUSH
67286: PPUSH
// if not units then
67287: LD_VAR 0 1
67291: NOT
67292: IFFALSE 67296
// exit ;
67294: GO 67824
// result := UnitFilter ( units , [ f_ok ] ) ;
67296: LD_ADDR_VAR 0 3
67300: PUSH
67301: LD_VAR 0 1
67305: PPUSH
67306: LD_INT 50
67308: PUSH
67309: EMPTY
67310: LIST
67311: PPUSH
67312: CALL_OW 72
67316: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67317: LD_ADDR_VAR 0 8
67321: PUSH
67322: LD_VAR 0 1
67326: PUSH
67327: LD_INT 1
67329: ARRAY
67330: PPUSH
67331: CALL_OW 255
67335: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67336: LD_ADDR_VAR 0 10
67340: PUSH
67341: LD_INT 29
67343: PUSH
67344: LD_INT 91
67346: PUSH
67347: LD_INT 49
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// if not result then
67355: LD_VAR 0 3
67359: NOT
67360: IFFALSE 67364
// exit ;
67362: GO 67824
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67364: LD_ADDR_VAR 0 5
67368: PUSH
67369: LD_INT 81
67371: PUSH
67372: LD_VAR 0 8
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PPUSH
67381: CALL_OW 69
67385: ST_TO_ADDR
// for i in result do
67386: LD_ADDR_VAR 0 4
67390: PUSH
67391: LD_VAR 0 3
67395: PUSH
67396: FOR_IN
67397: IFFALSE 67822
// begin tag := GetTag ( i ) + 1 ;
67399: LD_ADDR_VAR 0 9
67403: PUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: CALL_OW 110
67413: PUSH
67414: LD_INT 1
67416: PLUS
67417: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67418: LD_ADDR_VAR 0 7
67422: PUSH
67423: LD_VAR 0 4
67427: PPUSH
67428: CALL_OW 250
67432: PPUSH
67433: LD_VAR 0 4
67437: PPUSH
67438: CALL_OW 251
67442: PPUSH
67443: LD_INT 4
67445: PPUSH
67446: CALL 67019 0 3
67450: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67451: LD_VAR 0 4
67455: PPUSH
67456: CALL_OW 247
67460: PUSH
67461: LD_INT 2
67463: EQUAL
67464: PUSH
67465: LD_VAR 0 7
67469: PUSH
67470: LD_INT 2
67472: GREATER
67473: AND
67474: PUSH
67475: LD_VAR 0 4
67479: PPUSH
67480: CALL_OW 264
67484: PUSH
67485: LD_VAR 0 10
67489: IN
67490: NOT
67491: AND
67492: IFFALSE 67531
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67494: LD_VAR 0 4
67498: PPUSH
67499: LD_VAR 0 7
67503: PUSH
67504: LD_INT 1
67506: ARRAY
67507: PUSH
67508: LD_INT 1
67510: ARRAY
67511: PPUSH
67512: LD_VAR 0 7
67516: PUSH
67517: LD_INT 1
67519: ARRAY
67520: PUSH
67521: LD_INT 2
67523: ARRAY
67524: PPUSH
67525: CALL_OW 116
67529: GO 67820
// if path > tag then
67531: LD_VAR 0 2
67535: PUSH
67536: LD_VAR 0 9
67540: GREATER
67541: IFFALSE 67749
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67543: LD_ADDR_VAR 0 6
67547: PUSH
67548: LD_VAR 0 5
67552: PPUSH
67553: LD_INT 91
67555: PUSH
67556: LD_VAR 0 4
67560: PUSH
67561: LD_INT 8
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: PPUSH
67569: CALL_OW 72
67573: ST_TO_ADDR
// if nearEnemy then
67574: LD_VAR 0 6
67578: IFFALSE 67647
// begin if GetWeapon ( i ) = ru_time_lapser then
67580: LD_VAR 0 4
67584: PPUSH
67585: CALL_OW 264
67589: PUSH
67590: LD_INT 49
67592: EQUAL
67593: IFFALSE 67621
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67595: LD_VAR 0 4
67599: PPUSH
67600: LD_VAR 0 6
67604: PPUSH
67605: LD_VAR 0 4
67609: PPUSH
67610: CALL_OW 74
67614: PPUSH
67615: CALL_OW 112
67619: GO 67645
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67621: LD_VAR 0 4
67625: PPUSH
67626: LD_VAR 0 6
67630: PPUSH
67631: LD_VAR 0 4
67635: PPUSH
67636: CALL_OW 74
67640: PPUSH
67641: CALL 68895 0 2
// end else
67645: GO 67747
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67647: LD_VAR 0 4
67651: PPUSH
67652: LD_VAR 0 2
67656: PUSH
67657: LD_VAR 0 9
67661: ARRAY
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PPUSH
67667: LD_VAR 0 2
67671: PUSH
67672: LD_VAR 0 9
67676: ARRAY
67677: PUSH
67678: LD_INT 2
67680: ARRAY
67681: PPUSH
67682: CALL_OW 297
67686: PUSH
67687: LD_INT 6
67689: GREATER
67690: IFFALSE 67733
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67692: LD_VAR 0 4
67696: PPUSH
67697: LD_VAR 0 2
67701: PUSH
67702: LD_VAR 0 9
67706: ARRAY
67707: PUSH
67708: LD_INT 1
67710: ARRAY
67711: PPUSH
67712: LD_VAR 0 2
67716: PUSH
67717: LD_VAR 0 9
67721: ARRAY
67722: PUSH
67723: LD_INT 2
67725: ARRAY
67726: PPUSH
67727: CALL_OW 114
67731: GO 67747
// SetTag ( i , tag ) ;
67733: LD_VAR 0 4
67737: PPUSH
67738: LD_VAR 0 9
67742: PPUSH
67743: CALL_OW 109
// end else
67747: GO 67820
// if enemy then
67749: LD_VAR 0 5
67753: IFFALSE 67820
// begin if GetWeapon ( i ) = ru_time_lapser then
67755: LD_VAR 0 4
67759: PPUSH
67760: CALL_OW 264
67764: PUSH
67765: LD_INT 49
67767: EQUAL
67768: IFFALSE 67796
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67770: LD_VAR 0 4
67774: PPUSH
67775: LD_VAR 0 5
67779: PPUSH
67780: LD_VAR 0 4
67784: PPUSH
67785: CALL_OW 74
67789: PPUSH
67790: CALL_OW 112
67794: GO 67820
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67796: LD_VAR 0 4
67800: PPUSH
67801: LD_VAR 0 5
67805: PPUSH
67806: LD_VAR 0 4
67810: PPUSH
67811: CALL_OW 74
67815: PPUSH
67816: CALL 68895 0 2
// end ; end ;
67820: GO 67396
67822: POP
67823: POP
// end ;
67824: LD_VAR 0 3
67828: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67829: LD_INT 0
67831: PPUSH
67832: PPUSH
67833: PPUSH
// if not unit or IsInUnit ( unit ) then
67834: LD_VAR 0 1
67838: NOT
67839: PUSH
67840: LD_VAR 0 1
67844: PPUSH
67845: CALL_OW 310
67849: OR
67850: IFFALSE 67854
// exit ;
67852: GO 67945
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67854: LD_ADDR_VAR 0 4
67858: PUSH
67859: LD_VAR 0 1
67863: PPUSH
67864: CALL_OW 250
67868: PPUSH
67869: LD_VAR 0 2
67873: PPUSH
67874: LD_INT 1
67876: PPUSH
67877: CALL_OW 272
67881: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67882: LD_ADDR_VAR 0 5
67886: PUSH
67887: LD_VAR 0 1
67891: PPUSH
67892: CALL_OW 251
67896: PPUSH
67897: LD_VAR 0 2
67901: PPUSH
67902: LD_INT 1
67904: PPUSH
67905: CALL_OW 273
67909: ST_TO_ADDR
// if ValidHex ( x , y ) then
67910: LD_VAR 0 4
67914: PPUSH
67915: LD_VAR 0 5
67919: PPUSH
67920: CALL_OW 488
67924: IFFALSE 67945
// ComTurnXY ( unit , x , y ) ;
67926: LD_VAR 0 1
67930: PPUSH
67931: LD_VAR 0 4
67935: PPUSH
67936: LD_VAR 0 5
67940: PPUSH
67941: CALL_OW 118
// end ;
67945: LD_VAR 0 3
67949: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67950: LD_INT 0
67952: PPUSH
67953: PPUSH
// result := false ;
67954: LD_ADDR_VAR 0 3
67958: PUSH
67959: LD_INT 0
67961: ST_TO_ADDR
// if not units then
67962: LD_VAR 0 2
67966: NOT
67967: IFFALSE 67971
// exit ;
67969: GO 68016
// for i in units do
67971: LD_ADDR_VAR 0 4
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: FOR_IN
67982: IFFALSE 68014
// if See ( side , i ) then
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 4
67993: PPUSH
67994: CALL_OW 292
67998: IFFALSE 68012
// begin result := true ;
68000: LD_ADDR_VAR 0 3
68004: PUSH
68005: LD_INT 1
68007: ST_TO_ADDR
// exit ;
68008: POP
68009: POP
68010: GO 68016
// end ;
68012: GO 67981
68014: POP
68015: POP
// end ;
68016: LD_VAR 0 3
68020: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68021: LD_INT 0
68023: PPUSH
68024: PPUSH
68025: PPUSH
68026: PPUSH
// if not unit or not points then
68027: LD_VAR 0 1
68031: NOT
68032: PUSH
68033: LD_VAR 0 2
68037: NOT
68038: OR
68039: IFFALSE 68043
// exit ;
68041: GO 68133
// dist := 99999 ;
68043: LD_ADDR_VAR 0 5
68047: PUSH
68048: LD_INT 99999
68050: ST_TO_ADDR
// for i in points do
68051: LD_ADDR_VAR 0 4
68055: PUSH
68056: LD_VAR 0 2
68060: PUSH
68061: FOR_IN
68062: IFFALSE 68131
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68064: LD_ADDR_VAR 0 6
68068: PUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: LD_VAR 0 4
68078: PUSH
68079: LD_INT 1
68081: ARRAY
68082: PPUSH
68083: LD_VAR 0 4
68087: PUSH
68088: LD_INT 2
68090: ARRAY
68091: PPUSH
68092: CALL_OW 297
68096: ST_TO_ADDR
// if tmpDist < dist then
68097: LD_VAR 0 6
68101: PUSH
68102: LD_VAR 0 5
68106: LESS
68107: IFFALSE 68129
// begin result := i ;
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_VAR 0 4
68118: ST_TO_ADDR
// dist := tmpDist ;
68119: LD_ADDR_VAR 0 5
68123: PUSH
68124: LD_VAR 0 6
68128: ST_TO_ADDR
// end ; end ;
68129: GO 68061
68131: POP
68132: POP
// end ;
68133: LD_VAR 0 3
68137: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68138: LD_INT 0
68140: PPUSH
// uc_side := side ;
68141: LD_ADDR_OWVAR 20
68145: PUSH
68146: LD_VAR 0 1
68150: ST_TO_ADDR
// uc_nation := 3 ;
68151: LD_ADDR_OWVAR 21
68155: PUSH
68156: LD_INT 3
68158: ST_TO_ADDR
// vc_chassis := 25 ;
68159: LD_ADDR_OWVAR 37
68163: PUSH
68164: LD_INT 25
68166: ST_TO_ADDR
// vc_engine := engine_siberite ;
68167: LD_ADDR_OWVAR 39
68171: PUSH
68172: LD_INT 3
68174: ST_TO_ADDR
// vc_control := control_computer ;
68175: LD_ADDR_OWVAR 38
68179: PUSH
68180: LD_INT 3
68182: ST_TO_ADDR
// vc_weapon := 59 ;
68183: LD_ADDR_OWVAR 40
68187: PUSH
68188: LD_INT 59
68190: ST_TO_ADDR
// result := CreateVehicle ;
68191: LD_ADDR_VAR 0 5
68195: PUSH
68196: CALL_OW 45
68200: ST_TO_ADDR
// SetDir ( result , d ) ;
68201: LD_VAR 0 5
68205: PPUSH
68206: LD_VAR 0 4
68210: PPUSH
68211: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68215: LD_VAR 0 5
68219: PPUSH
68220: LD_VAR 0 2
68224: PPUSH
68225: LD_VAR 0 3
68229: PPUSH
68230: LD_INT 0
68232: PPUSH
68233: CALL_OW 48
// end ;
68237: LD_VAR 0 5
68241: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68242: LD_INT 0
68244: PPUSH
68245: PPUSH
68246: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68247: LD_ADDR_VAR 0 2
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68270: LD_VAR 0 1
68274: NOT
68275: PUSH
68276: LD_VAR 0 1
68280: PPUSH
68281: CALL_OW 264
68285: PUSH
68286: LD_INT 12
68288: PUSH
68289: LD_INT 51
68291: PUSH
68292: LD_INT 32
68294: PUSH
68295: LD_INT 89
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: IN
68304: NOT
68305: OR
68306: IFFALSE 68310
// exit ;
68308: GO 68408
// for i := 1 to 3 do
68310: LD_ADDR_VAR 0 3
68314: PUSH
68315: DOUBLE
68316: LD_INT 1
68318: DEC
68319: ST_TO_ADDR
68320: LD_INT 3
68322: PUSH
68323: FOR_TO
68324: IFFALSE 68406
// begin tmp := GetCargo ( cargo , i ) ;
68326: LD_ADDR_VAR 0 4
68330: PUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_VAR 0 3
68340: PPUSH
68341: CALL_OW 289
68345: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68346: LD_ADDR_VAR 0 2
68350: PUSH
68351: LD_VAR 0 2
68355: PPUSH
68356: LD_VAR 0 3
68360: PPUSH
68361: LD_VAR 0 4
68365: PPUSH
68366: CALL_OW 1
68370: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68371: LD_ADDR_VAR 0 2
68375: PUSH
68376: LD_VAR 0 2
68380: PPUSH
68381: LD_INT 4
68383: PPUSH
68384: LD_VAR 0 2
68388: PUSH
68389: LD_INT 4
68391: ARRAY
68392: PUSH
68393: LD_VAR 0 4
68397: PLUS
68398: PPUSH
68399: CALL_OW 1
68403: ST_TO_ADDR
// end ;
68404: GO 68323
68406: POP
68407: POP
// end ;
68408: LD_VAR 0 2
68412: RET
// export function Length ( array ) ; begin
68413: LD_INT 0
68415: PPUSH
// result := array + 0 ;
68416: LD_ADDR_VAR 0 2
68420: PUSH
68421: LD_VAR 0 1
68425: PUSH
68426: LD_INT 0
68428: PLUS
68429: ST_TO_ADDR
// end ;
68430: LD_VAR 0 2
68434: RET
// export function PrepareArray ( array ) ; begin
68435: LD_INT 0
68437: PPUSH
// result := array diff 0 ;
68438: LD_ADDR_VAR 0 2
68442: PUSH
68443: LD_VAR 0 1
68447: PUSH
68448: LD_INT 0
68450: DIFF
68451: ST_TO_ADDR
// if not result [ 1 ] then
68452: LD_VAR 0 2
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: NOT
68461: IFFALSE 68481
// result := Delete ( result , 1 ) ;
68463: LD_ADDR_VAR 0 2
68467: PUSH
68468: LD_VAR 0 2
68472: PPUSH
68473: LD_INT 1
68475: PPUSH
68476: CALL_OW 3
68480: ST_TO_ADDR
// end ;
68481: LD_VAR 0 2
68485: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68486: LD_INT 0
68488: PPUSH
68489: PPUSH
68490: PPUSH
68491: PPUSH
// sibRocketRange := 25 ;
68492: LD_ADDR_VAR 0 6
68496: PUSH
68497: LD_INT 25
68499: ST_TO_ADDR
// result := false ;
68500: LD_ADDR_VAR 0 4
68504: PUSH
68505: LD_INT 0
68507: ST_TO_ADDR
// for i := 0 to 5 do
68508: LD_ADDR_VAR 0 5
68512: PUSH
68513: DOUBLE
68514: LD_INT 0
68516: DEC
68517: ST_TO_ADDR
68518: LD_INT 5
68520: PUSH
68521: FOR_TO
68522: IFFALSE 68589
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68524: LD_VAR 0 1
68528: PPUSH
68529: LD_VAR 0 5
68533: PPUSH
68534: LD_VAR 0 6
68538: PPUSH
68539: CALL_OW 272
68543: PPUSH
68544: LD_VAR 0 2
68548: PPUSH
68549: LD_VAR 0 5
68553: PPUSH
68554: LD_VAR 0 6
68558: PPUSH
68559: CALL_OW 273
68563: PPUSH
68564: LD_VAR 0 3
68568: PPUSH
68569: CALL_OW 309
68573: IFFALSE 68587
// begin result := true ;
68575: LD_ADDR_VAR 0 4
68579: PUSH
68580: LD_INT 1
68582: ST_TO_ADDR
// exit ;
68583: POP
68584: POP
68585: GO 68591
// end ;
68587: GO 68521
68589: POP
68590: POP
// end ;
68591: LD_VAR 0 4
68595: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68596: LD_INT 0
68598: PPUSH
68599: PPUSH
68600: PPUSH
// if btype = b_depot then
68601: LD_VAR 0 2
68605: PUSH
68606: LD_INT 0
68608: EQUAL
68609: IFFALSE 68621
// begin result := true ;
68611: LD_ADDR_VAR 0 3
68615: PUSH
68616: LD_INT 1
68618: ST_TO_ADDR
// exit ;
68619: GO 68737
// end ; pom := GetBase ( depot ) ;
68621: LD_ADDR_VAR 0 4
68625: PUSH
68626: LD_VAR 0 1
68630: PPUSH
68631: CALL_OW 274
68635: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68636: LD_ADDR_VAR 0 5
68640: PUSH
68641: LD_VAR 0 2
68645: PPUSH
68646: LD_VAR 0 1
68650: PPUSH
68651: CALL_OW 248
68655: PPUSH
68656: CALL_OW 450
68660: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68661: LD_ADDR_VAR 0 3
68665: PUSH
68666: LD_VAR 0 4
68670: PPUSH
68671: LD_INT 1
68673: PPUSH
68674: CALL_OW 275
68678: PUSH
68679: LD_VAR 0 5
68683: PUSH
68684: LD_INT 1
68686: ARRAY
68687: GREATEREQUAL
68688: PUSH
68689: LD_VAR 0 4
68693: PPUSH
68694: LD_INT 2
68696: PPUSH
68697: CALL_OW 275
68701: PUSH
68702: LD_VAR 0 5
68706: PUSH
68707: LD_INT 2
68709: ARRAY
68710: GREATEREQUAL
68711: AND
68712: PUSH
68713: LD_VAR 0 4
68717: PPUSH
68718: LD_INT 3
68720: PPUSH
68721: CALL_OW 275
68725: PUSH
68726: LD_VAR 0 5
68730: PUSH
68731: LD_INT 3
68733: ARRAY
68734: GREATEREQUAL
68735: AND
68736: ST_TO_ADDR
// end ;
68737: LD_VAR 0 3
68741: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68742: LD_INT 0
68744: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68745: LD_VAR 0 1
68749: PPUSH
68750: LD_VAR 0 2
68754: PPUSH
68755: LD_INT 0
68757: PPUSH
68758: LD_INT 0
68760: PPUSH
68761: LD_INT 1
68763: PPUSH
68764: LD_INT 0
68766: PPUSH
68767: CALL_OW 587
// end ;
68771: LD_VAR 0 3
68775: RET
// export function CenterOnNow ( unit ) ; begin
68776: LD_INT 0
68778: PPUSH
// result := IsInUnit ( unit ) ;
68779: LD_ADDR_VAR 0 2
68783: PUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: CALL_OW 310
68793: ST_TO_ADDR
// if not result then
68794: LD_VAR 0 2
68798: NOT
68799: IFFALSE 68811
// result := unit ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_VAR 0 1
68810: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68811: LD_VAR 0 1
68815: PPUSH
68816: CALL_OW 87
// end ;
68820: LD_VAR 0 2
68824: RET
// export function ComMoveHex ( unit , hex ) ; begin
68825: LD_INT 0
68827: PPUSH
// if not hex then
68828: LD_VAR 0 2
68832: NOT
68833: IFFALSE 68837
// exit ;
68835: GO 68890
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68837: LD_VAR 0 2
68841: PUSH
68842: LD_INT 1
68844: ARRAY
68845: PPUSH
68846: LD_VAR 0 2
68850: PUSH
68851: LD_INT 2
68853: ARRAY
68854: PPUSH
68855: CALL_OW 428
68859: IFFALSE 68863
// exit ;
68861: GO 68890
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68863: LD_VAR 0 1
68867: PPUSH
68868: LD_VAR 0 2
68872: PUSH
68873: LD_INT 1
68875: ARRAY
68876: PPUSH
68877: LD_VAR 0 2
68881: PUSH
68882: LD_INT 2
68884: ARRAY
68885: PPUSH
68886: CALL_OW 111
// end ;
68890: LD_VAR 0 3
68894: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68895: LD_INT 0
68897: PPUSH
68898: PPUSH
68899: PPUSH
// if not unit or not enemy then
68900: LD_VAR 0 1
68904: NOT
68905: PUSH
68906: LD_VAR 0 2
68910: NOT
68911: OR
68912: IFFALSE 68916
// exit ;
68914: GO 69040
// x := GetX ( enemy ) ;
68916: LD_ADDR_VAR 0 4
68920: PUSH
68921: LD_VAR 0 2
68925: PPUSH
68926: CALL_OW 250
68930: ST_TO_ADDR
// y := GetY ( enemy ) ;
68931: LD_ADDR_VAR 0 5
68935: PUSH
68936: LD_VAR 0 2
68940: PPUSH
68941: CALL_OW 251
68945: ST_TO_ADDR
// if ValidHex ( x , y ) then
68946: LD_VAR 0 4
68950: PPUSH
68951: LD_VAR 0 5
68955: PPUSH
68956: CALL_OW 488
68960: IFFALSE 69040
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68962: LD_VAR 0 2
68966: PPUSH
68967: CALL_OW 247
68971: PUSH
68972: LD_INT 3
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: IN
68982: PUSH
68983: LD_VAR 0 1
68987: PPUSH
68988: CALL_OW 255
68992: PPUSH
68993: LD_VAR 0 2
68997: PPUSH
68998: CALL_OW 292
69002: OR
69003: IFFALSE 69021
// ComAttackUnit ( unit , enemy ) else
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: CALL_OW 115
69019: GO 69040
// ComAgressiveMove ( unit , x , y ) ;
69021: LD_VAR 0 1
69025: PPUSH
69026: LD_VAR 0 4
69030: PPUSH
69031: LD_VAR 0 5
69035: PPUSH
69036: CALL_OW 114
// end ;
69040: LD_VAR 0 3
69044: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69045: LD_INT 0
69047: PPUSH
69048: PPUSH
69049: PPUSH
// list := AreaToList ( area , 0 ) ;
69050: LD_ADDR_VAR 0 5
69054: PUSH
69055: LD_VAR 0 1
69059: PPUSH
69060: LD_INT 0
69062: PPUSH
69063: CALL_OW 517
69067: ST_TO_ADDR
// if not list then
69068: LD_VAR 0 5
69072: NOT
69073: IFFALSE 69077
// exit ;
69075: GO 69207
// if all then
69077: LD_VAR 0 2
69081: IFFALSE 69169
// begin for i := 1 to list [ 1 ] do
69083: LD_ADDR_VAR 0 4
69087: PUSH
69088: DOUBLE
69089: LD_INT 1
69091: DEC
69092: ST_TO_ADDR
69093: LD_VAR 0 5
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: FOR_TO
69103: IFFALSE 69165
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69105: LD_ADDR_VAR 0 3
69109: PUSH
69110: LD_VAR 0 3
69114: PPUSH
69115: LD_VAR 0 3
69119: PUSH
69120: LD_INT 1
69122: PLUS
69123: PPUSH
69124: LD_VAR 0 5
69128: PUSH
69129: LD_INT 1
69131: ARRAY
69132: PUSH
69133: LD_VAR 0 4
69137: ARRAY
69138: PUSH
69139: LD_VAR 0 5
69143: PUSH
69144: LD_INT 2
69146: ARRAY
69147: PUSH
69148: LD_VAR 0 4
69152: ARRAY
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PPUSH
69158: CALL_OW 1
69162: ST_TO_ADDR
69163: GO 69102
69165: POP
69166: POP
// exit ;
69167: GO 69207
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69169: LD_ADDR_VAR 0 3
69173: PUSH
69174: LD_VAR 0 5
69178: PUSH
69179: LD_INT 1
69181: ARRAY
69182: PUSH
69183: LD_INT 1
69185: ARRAY
69186: PUSH
69187: LD_VAR 0 5
69191: PUSH
69192: LD_INT 2
69194: ARRAY
69195: PUSH
69196: LD_INT 1
69198: ARRAY
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: EMPTY
69205: LIST
69206: ST_TO_ADDR
// end ;
69207: LD_VAR 0 3
69211: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
// list := AreaToList ( area , 0 ) ;
69216: LD_ADDR_VAR 0 4
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_INT 0
69228: PPUSH
69229: CALL_OW 517
69233: ST_TO_ADDR
// if not list then
69234: LD_VAR 0 4
69238: NOT
69239: IFFALSE 69243
// exit ;
69241: GO 69284
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69243: LD_ADDR_VAR 0 3
69247: PUSH
69248: LD_VAR 0 4
69252: PUSH
69253: LD_INT 1
69255: ARRAY
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: LD_VAR 0 4
69265: PUSH
69266: LD_INT 2
69268: ARRAY
69269: PUSH
69270: LD_INT 1
69272: ARRAY
69273: PUSH
69274: LD_VAR 0 2
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: LIST
69283: ST_TO_ADDR
// end ;
69284: LD_VAR 0 3
69288: RET
// export function First ( array ) ; begin
69289: LD_INT 0
69291: PPUSH
// if not array then
69292: LD_VAR 0 1
69296: NOT
69297: IFFALSE 69301
// exit ;
69299: GO 69315
// result := array [ 1 ] ;
69301: LD_ADDR_VAR 0 2
69305: PUSH
69306: LD_VAR 0 1
69310: PUSH
69311: LD_INT 1
69313: ARRAY
69314: ST_TO_ADDR
// end ;
69315: LD_VAR 0 2
69319: RET
// export function Last ( array ) ; begin
69320: LD_INT 0
69322: PPUSH
// if not array then
69323: LD_VAR 0 1
69327: NOT
69328: IFFALSE 69332
// exit ;
69330: GO 69348
// result := array [ array ] ;
69332: LD_ADDR_VAR 0 2
69336: PUSH
69337: LD_VAR 0 1
69341: PUSH
69342: LD_VAR 0 1
69346: ARRAY
69347: ST_TO_ADDR
// end ;
69348: LD_VAR 0 2
69352: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69353: LD_INT 0
69355: PPUSH
69356: PPUSH
// result := [ ] ;
69357: LD_ADDR_VAR 0 5
69361: PUSH
69362: EMPTY
69363: ST_TO_ADDR
// if not array then
69364: LD_VAR 0 1
69368: NOT
69369: IFFALSE 69373
// exit ;
69371: GO 69485
// for i := 1 to array do
69373: LD_ADDR_VAR 0 6
69377: PUSH
69378: DOUBLE
69379: LD_INT 1
69381: DEC
69382: ST_TO_ADDR
69383: LD_VAR 0 1
69387: PUSH
69388: FOR_TO
69389: IFFALSE 69483
// if array [ i ] [ index ] = value then
69391: LD_VAR 0 1
69395: PUSH
69396: LD_VAR 0 6
69400: ARRAY
69401: PUSH
69402: LD_VAR 0 2
69406: ARRAY
69407: PUSH
69408: LD_VAR 0 3
69412: EQUAL
69413: IFFALSE 69481
// begin if indexColumn then
69415: LD_VAR 0 4
69419: IFFALSE 69455
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69421: LD_ADDR_VAR 0 5
69425: PUSH
69426: LD_VAR 0 5
69430: PPUSH
69431: LD_VAR 0 1
69435: PUSH
69436: LD_VAR 0 6
69440: ARRAY
69441: PUSH
69442: LD_VAR 0 4
69446: ARRAY
69447: PPUSH
69448: CALL 64673 0 2
69452: ST_TO_ADDR
69453: GO 69481
// result := Join ( result , array [ i ] ) ;
69455: LD_ADDR_VAR 0 5
69459: PUSH
69460: LD_VAR 0 5
69464: PPUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_VAR 0 6
69474: ARRAY
69475: PPUSH
69476: CALL 64673 0 2
69480: ST_TO_ADDR
// end ;
69481: GO 69388
69483: POP
69484: POP
// end ;
69485: LD_VAR 0 5
69489: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69490: LD_INT 0
69492: PPUSH
// if not vehicles or not parkingPoint then
69493: LD_VAR 0 1
69497: NOT
69498: PUSH
69499: LD_VAR 0 2
69503: NOT
69504: OR
69505: IFFALSE 69509
// exit ;
69507: GO 69607
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69509: LD_ADDR_VAR 0 1
69513: PUSH
69514: LD_VAR 0 1
69518: PPUSH
69519: LD_INT 50
69521: PUSH
69522: EMPTY
69523: LIST
69524: PUSH
69525: LD_INT 3
69527: PUSH
69528: LD_INT 92
69530: PUSH
69531: LD_VAR 0 2
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PUSH
69540: LD_VAR 0 2
69544: PUSH
69545: LD_INT 2
69547: ARRAY
69548: PUSH
69549: LD_INT 8
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PPUSH
69566: CALL_OW 72
69570: ST_TO_ADDR
// if not vehicles then
69571: LD_VAR 0 1
69575: NOT
69576: IFFALSE 69580
// exit ;
69578: GO 69607
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69580: LD_VAR 0 1
69584: PPUSH
69585: LD_VAR 0 2
69589: PUSH
69590: LD_INT 1
69592: ARRAY
69593: PPUSH
69594: LD_VAR 0 2
69598: PUSH
69599: LD_INT 2
69601: ARRAY
69602: PPUSH
69603: CALL_OW 111
// end ;
69607: LD_VAR 0 3
69611: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69612: LD_INT 0
69614: PPUSH
69615: PPUSH
69616: PPUSH
// if not side or not area then
69617: LD_VAR 0 1
69621: NOT
69622: PUSH
69623: LD_VAR 0 2
69627: NOT
69628: OR
69629: IFFALSE 69633
// exit ;
69631: GO 69752
// tmp := AreaToList ( area , 0 ) ;
69633: LD_ADDR_VAR 0 5
69637: PUSH
69638: LD_VAR 0 2
69642: PPUSH
69643: LD_INT 0
69645: PPUSH
69646: CALL_OW 517
69650: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69651: LD_ADDR_VAR 0 4
69655: PUSH
69656: DOUBLE
69657: LD_INT 1
69659: DEC
69660: ST_TO_ADDR
69661: LD_VAR 0 5
69665: PUSH
69666: LD_INT 1
69668: ARRAY
69669: PUSH
69670: FOR_TO
69671: IFFALSE 69750
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69673: LD_VAR 0 5
69677: PUSH
69678: LD_INT 1
69680: ARRAY
69681: PUSH
69682: LD_VAR 0 4
69686: ARRAY
69687: PPUSH
69688: LD_VAR 0 5
69692: PUSH
69693: LD_INT 2
69695: ARRAY
69696: PUSH
69697: LD_VAR 0 4
69701: ARRAY
69702: PPUSH
69703: CALL_OW 351
69707: IFFALSE 69748
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69709: LD_VAR 0 5
69713: PUSH
69714: LD_INT 1
69716: ARRAY
69717: PUSH
69718: LD_VAR 0 4
69722: ARRAY
69723: PPUSH
69724: LD_VAR 0 5
69728: PUSH
69729: LD_INT 2
69731: ARRAY
69732: PUSH
69733: LD_VAR 0 4
69737: ARRAY
69738: PPUSH
69739: LD_VAR 0 1
69743: PPUSH
69744: CALL_OW 244
// end ;
69748: GO 69670
69750: POP
69751: POP
// end ; end_of_file
69752: LD_VAR 0 3
69756: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
69757: PPOPN 6
69759: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69760: CALL 69789 0 0
// end ; end_of_file
69764: PPOPN 1
69766: END
// every 0 0$1 do
69767: GO 69769
69769: DISABLE
// begin enable ;
69770: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69771: LD_STRING updateTimer(
69773: PUSH
69774: LD_OWVAR 1
69778: STR
69779: PUSH
69780: LD_STRING );
69782: STR
69783: PPUSH
69784: CALL_OW 559
// end ;
69788: END
// export function SOS_MapStart ( ) ; begin
69789: LD_INT 0
69791: PPUSH
// UpdateFactoryWaypoints ( ) ;
69792: CALL 70161 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69796: CALL 70413 0 0
// end ;
69800: LD_VAR 0 1
69804: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69805: LD_INT 0
69807: PPUSH
// end ;
69808: LD_VAR 0 12
69812: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
69813: LD_INT 0
69815: PPUSH
69816: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
69817: LD_VAR 0 1
69821: NOT
69822: PUSH
69823: LD_VAR 0 2
69827: PPUSH
69828: LD_VAR 0 3
69832: PPUSH
69833: CALL_OW 488
69837: NOT
69838: OR
69839: PUSH
69840: LD_VAR 0 1
69844: PPUSH
69845: CALL_OW 266
69849: PUSH
69850: LD_INT 3
69852: NONEQUAL
69853: PUSH
69854: LD_VAR 0 1
69858: PPUSH
69859: CALL_OW 247
69863: PUSH
69864: LD_INT 1
69866: EQUAL
69867: NOT
69868: AND
69869: OR
69870: IFFALSE 69874
// exit ;
69872: GO 70156
// if GetType ( factory ) = unit_human then
69874: LD_VAR 0 1
69878: PPUSH
69879: CALL_OW 247
69883: PUSH
69884: LD_INT 1
69886: EQUAL
69887: IFFALSE 69904
// factory := IsInUnit ( factory ) ;
69889: LD_ADDR_VAR 0 1
69893: PUSH
69894: LD_VAR 0 1
69898: PPUSH
69899: CALL_OW 310
69903: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
69904: LD_VAR 0 1
69908: PPUSH
69909: CALL_OW 266
69913: PUSH
69914: LD_INT 3
69916: NONEQUAL
69917: IFFALSE 69921
// exit ;
69919: GO 70156
// for i := 1 to Count ( factoryWaypoints ) do
69921: LD_ADDR_VAR 0 5
69925: PUSH
69926: DOUBLE
69927: LD_INT 1
69929: DEC
69930: ST_TO_ADDR
69931: LD_EXP 68
69935: PPUSH
69936: CALL 29064 0 1
69940: PUSH
69941: FOR_TO
69942: IFFALSE 70104
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
69944: LD_VAR 0 2
69948: PPUSH
69949: LD_VAR 0 3
69953: PPUSH
69954: CALL_OW 428
69958: PUSH
69959: LD_EXP 68
69963: PUSH
69964: LD_VAR 0 5
69968: ARRAY
69969: PUSH
69970: LD_INT 2
69972: ARRAY
69973: EQUAL
69974: IFFALSE 70006
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
69976: LD_ADDR_EXP 68
69980: PUSH
69981: LD_EXP 68
69985: PPUSH
69986: LD_VAR 0 5
69990: PPUSH
69991: CALL_OW 3
69995: ST_TO_ADDR
// UpdateFactoryWaypoints ;
69996: CALL 70161 0 0
// exit ;
70000: POP
70001: POP
70002: GO 70156
// end else
70004: GO 70102
// if factory = factoryWaypoints [ i ] [ 2 ] then
70006: LD_VAR 0 1
70010: PUSH
70011: LD_EXP 68
70015: PUSH
70016: LD_VAR 0 5
70020: ARRAY
70021: PUSH
70022: LD_INT 2
70024: ARRAY
70025: EQUAL
70026: IFFALSE 70102
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70028: LD_ADDR_EXP 68
70032: PUSH
70033: LD_EXP 68
70037: PPUSH
70038: LD_VAR 0 5
70042: PPUSH
70043: CALL_OW 3
70047: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70048: LD_ADDR_EXP 68
70052: PUSH
70053: LD_EXP 68
70057: PPUSH
70058: LD_VAR 0 1
70062: PPUSH
70063: CALL_OW 255
70067: PUSH
70068: LD_VAR 0 1
70072: PUSH
70073: LD_VAR 0 2
70077: PUSH
70078: LD_VAR 0 3
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: PPUSH
70089: CALL 64673 0 2
70093: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70094: CALL 70161 0 0
// exit ;
70098: POP
70099: POP
70100: GO 70156
// end ; end ;
70102: GO 69941
70104: POP
70105: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70106: LD_ADDR_EXP 68
70110: PUSH
70111: LD_EXP 68
70115: PPUSH
70116: LD_VAR 0 1
70120: PPUSH
70121: CALL_OW 255
70125: PUSH
70126: LD_VAR 0 1
70130: PUSH
70131: LD_VAR 0 2
70135: PUSH
70136: LD_VAR 0 3
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: PPUSH
70147: CALL 64673 0 2
70151: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70152: CALL 70161 0 0
// end ;
70156: LD_VAR 0 4
70160: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
70165: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
70166: LD_STRING resetFactoryWaypoint();
70168: PPUSH
70169: CALL_OW 559
// if factoryWaypoints then
70173: LD_EXP 68
70177: IFFALSE 70298
// begin list := factoryWaypoints ;
70179: LD_ADDR_VAR 0 3
70183: PUSH
70184: LD_EXP 68
70188: ST_TO_ADDR
// for i := 1 to list do
70189: LD_ADDR_VAR 0 2
70193: PUSH
70194: DOUBLE
70195: LD_INT 1
70197: DEC
70198: ST_TO_ADDR
70199: LD_VAR 0 3
70203: PUSH
70204: FOR_TO
70205: IFFALSE 70296
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70207: LD_STRING setFactoryWaypointXY(
70209: PUSH
70210: LD_VAR 0 3
70214: PUSH
70215: LD_VAR 0 2
70219: ARRAY
70220: PUSH
70221: LD_INT 1
70223: ARRAY
70224: STR
70225: PUSH
70226: LD_STRING ,
70228: STR
70229: PUSH
70230: LD_VAR 0 3
70234: PUSH
70235: LD_VAR 0 2
70239: ARRAY
70240: PUSH
70241: LD_INT 2
70243: ARRAY
70244: STR
70245: PUSH
70246: LD_STRING ,
70248: STR
70249: PUSH
70250: LD_VAR 0 3
70254: PUSH
70255: LD_VAR 0 2
70259: ARRAY
70260: PUSH
70261: LD_INT 3
70263: ARRAY
70264: STR
70265: PUSH
70266: LD_STRING ,
70268: STR
70269: PUSH
70270: LD_VAR 0 3
70274: PUSH
70275: LD_VAR 0 2
70279: ARRAY
70280: PUSH
70281: LD_INT 4
70283: ARRAY
70284: STR
70285: PUSH
70286: LD_STRING )
70288: STR
70289: PPUSH
70290: CALL_OW 559
70294: GO 70204
70296: POP
70297: POP
// end ; end ;
70298: LD_VAR 0 1
70302: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
70303: LD_INT 0
70305: PPUSH
// if HexInfo ( x , y ) = warehouse then
70306: LD_VAR 0 2
70310: PPUSH
70311: LD_VAR 0 3
70315: PPUSH
70316: CALL_OW 428
70320: PUSH
70321: LD_VAR 0 1
70325: EQUAL
70326: IFFALSE 70353
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
70328: LD_ADDR_EXP 69
70332: PUSH
70333: LD_EXP 69
70337: PPUSH
70338: LD_VAR 0 1
70342: PPUSH
70343: LD_INT 0
70345: PPUSH
70346: CALL_OW 1
70350: ST_TO_ADDR
70351: GO 70404
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
70353: LD_ADDR_EXP 69
70357: PUSH
70358: LD_EXP 69
70362: PPUSH
70363: LD_VAR 0 1
70367: PPUSH
70368: LD_VAR 0 1
70372: PPUSH
70373: CALL_OW 255
70377: PUSH
70378: LD_VAR 0 1
70382: PUSH
70383: LD_VAR 0 2
70387: PUSH
70388: LD_VAR 0 3
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: PPUSH
70399: CALL_OW 1
70403: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
70404: CALL 70413 0 0
// end ;
70408: LD_VAR 0 4
70412: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
70413: LD_INT 0
70415: PPUSH
70416: PPUSH
70417: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
70418: LD_STRING resetWarehouseGatheringPoints();
70420: PPUSH
70421: CALL_OW 559
// if warehouseGatheringPoints then
70425: LD_EXP 69
70429: IFFALSE 70555
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_EXP 69
70440: PPUSH
70441: CALL 68435 0 1
70445: ST_TO_ADDR
// for i := 1 to list do
70446: LD_ADDR_VAR 0 2
70450: PUSH
70451: DOUBLE
70452: LD_INT 1
70454: DEC
70455: ST_TO_ADDR
70456: LD_VAR 0 3
70460: PUSH
70461: FOR_TO
70462: IFFALSE 70553
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70464: LD_STRING setWarehouseGatheringPointXY(
70466: PUSH
70467: LD_VAR 0 3
70471: PUSH
70472: LD_VAR 0 2
70476: ARRAY
70477: PUSH
70478: LD_INT 1
70480: ARRAY
70481: STR
70482: PUSH
70483: LD_STRING ,
70485: STR
70486: PUSH
70487: LD_VAR 0 3
70491: PUSH
70492: LD_VAR 0 2
70496: ARRAY
70497: PUSH
70498: LD_INT 2
70500: ARRAY
70501: STR
70502: PUSH
70503: LD_STRING ,
70505: STR
70506: PUSH
70507: LD_VAR 0 3
70511: PUSH
70512: LD_VAR 0 2
70516: ARRAY
70517: PUSH
70518: LD_INT 3
70520: ARRAY
70521: STR
70522: PUSH
70523: LD_STRING ,
70525: STR
70526: PUSH
70527: LD_VAR 0 3
70531: PUSH
70532: LD_VAR 0 2
70536: ARRAY
70537: PUSH
70538: LD_INT 4
70540: ARRAY
70541: STR
70542: PUSH
70543: LD_STRING )
70545: STR
70546: PPUSH
70547: CALL_OW 559
70551: GO 70461
70553: POP
70554: POP
// end ; end ;
70555: LD_VAR 0 1
70559: RET
