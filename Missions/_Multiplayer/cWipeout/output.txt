// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 157 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1880 0 1
  44: PPUSH
  45: CALL 5887 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1880 0 1
  56: PPUSH
  57: CALL 10465 0 1
// Multiplayer_Start ;
  61: CALL 3910 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4022 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: PUSH
 134: LD_OWVAR 48
 138: NOT
 139: AND
 140: IFFALSE 156
 142: GO 144
 144: DISABLE
// begin enable ;
 145: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 146: LD_ADDR_OWVAR 47
 150: PUSH
 151: CALL 4823 0 0
 155: ST_TO_ADDR
// end ; end_of_file
 156: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 157: LD_INT 0
 159: PPUSH
 160: PPUSH
 161: PPUSH
 162: PPUSH
 163: PPUSH
// multi_settings_counter := 6 ;
 164: LD_ADDR_EXP 18
 168: PUSH
 169: LD_INT 6
 171: ST_TO_ADDR
// multi_settings := [ ] ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: EMPTY
 178: ST_TO_ADDR
// if Multiplayer then
 179: LD_OWVAR 4
 183: IFFALSE 363
// begin your_side := mp_player_side ;
 185: LD_ADDR_OWVAR 2
 189: PUSH
 190: LD_OWVAR 7
 194: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 195: LD_ADDR_EXP 6
 199: PUSH
 200: LD_OWVAR 6
 204: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 205: LD_ADDR_EXP 7
 209: PUSH
 210: LD_OWVAR 17
 214: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 215: LD_ADDR_EXP 8
 219: PUSH
 220: LD_OWVAR 15
 224: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 225: LD_ADDR_EXP 9
 229: PUSH
 230: LD_OWVAR 16
 234: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 235: LD_ADDR_EXP 10
 239: PUSH
 240: EMPTY
 241: PUSH
 242: EMPTY
 243: LIST
 244: ST_TO_ADDR
// for i in mp_teams do
 245: LD_ADDR_VAR 0 2
 249: PUSH
 250: LD_OWVAR 12
 254: PUSH
 255: FOR_IN
 256: IFFALSE 299
// if i then
 258: LD_VAR 0 2
 262: IFFALSE 297
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 264: LD_ADDR_EXP 10
 268: PUSH
 269: LD_EXP 10
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: LD_EXP 10
 281: PUSH
 282: LD_INT 1
 284: ARRAY
 285: PUSH
 286: LD_VAR 0 2
 290: UNION
 291: PPUSH
 292: CALL_OW 1
 296: ST_TO_ADDR
 297: GO 255
 299: POP
 300: POP
// for i := 1 to multi_settings_counter do
 301: LD_ADDR_VAR 0 2
 305: PUSH
 306: DOUBLE
 307: LD_INT 1
 309: DEC
 310: ST_TO_ADDR
 311: LD_EXP 18
 315: PUSH
 316: FOR_TO
 317: IFFALSE 359
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 319: LD_ADDR_EXP 17
 323: PUSH
 324: LD_EXP 17
 328: PPUSH
 329: LD_EXP 17
 333: PUSH
 334: LD_INT 1
 336: PLUS
 337: PPUSH
 338: LD_VAR 0 2
 342: PPUSH
 343: CALL_OW 426
 347: PUSH
 348: LD_INT 1
 350: PLUS
 351: PPUSH
 352: CALL_OW 1
 356: ST_TO_ADDR
 357: GO 316
 359: POP
 360: POP
// end else
 361: GO 549
// begin your_side := 3 ;
 363: LD_ADDR_OWVAR 2
 367: PUSH
 368: LD_INT 3
 370: ST_TO_ADDR
// multi_gametype := 1 ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 379: LD_ADDR_EXP 7
 383: PUSH
 384: LD_INT 0
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: LD_INT 2
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: LD_INT 0
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 418: LD_ADDR_EXP 8
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: LD_INT 1
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: LD_INT 0
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 457: LD_ADDR_EXP 9
 461: PUSH
 462: LD_INT 0
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 3
 470: PUSH
 471: LD_INT 3
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 496: LD_ADDR_EXP 10
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 5
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 518: LD_ADDR_EXP 17
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 4
 528: PUSH
 529: LD_INT 4
 531: PUSH
 532: LD_INT 3
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: LD_INT 3
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 549: LD_ADDR_EXP 11
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 588: LD_ADDR_EXP 14
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 0
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 627: LD_ADDR_EXP 25
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: LD_INT 0
 646: PUSH
 647: LD_INT 0
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: LD_INT 0
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: ST_TO_ADDR
// multi_teamgame := true ;
 666: LD_ADDR_EXP 15
 670: PUSH
 671: LD_INT 1
 673: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: ST_TO_ADDR
// multi_custom_commanders := true ;
 685: LD_ADDR_EXP 16
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// multi_commanders := [ ] ;
 693: LD_ADDR_EXP 24
 697: PUSH
 698: EMPTY
 699: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 700: LD_ADDR_EXP 27
 704: PUSH
 705: EMPTY
 706: ST_TO_ADDR
// multi_players_amount := 0 ;
 707: LD_ADDR_EXP 26
 711: PUSH
 712: LD_INT 0
 714: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 715: LD_ADDR_EXP 12
 719: PUSH
 720: LD_INT 8
 722: PUSH
 723: LD_INT 9
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 10
 732: PUSH
 733: LD_INT 11
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 12
 742: PUSH
 743: LD_INT 13
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 755: LD_ADDR_EXP 29
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 14
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL 69363 0 2
 773: PUSH
 774: LD_STRING kagan
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 31
 784: PUSH
 785: LD_INT 67
 787: PUSH
 788: LD_INT 102
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 31
 805: PUSH
 806: LD_INT 73
 808: PUSH
 809: LD_INT 103
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 29
 826: PUSH
 827: LD_INT 78
 829: PUSH
 830: LD_INT 112
 832: PUSH
 833: LD_INT 3
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 0
 853: PUSH
 854: LD_INT 15
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL 69363 0 2
 864: PUSH
 865: LD_STRING beria
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 31
 875: PUSH
 876: LD_INT 102
 878: PUSH
 879: LD_INT 86
 881: PUSH
 882: LD_INT 2
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 31
 896: PUSH
 897: LD_INT 98
 899: PUSH
 900: LD_INT 96
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 2
 917: PUSH
 918: LD_INT 115
 920: PUSH
 921: LD_INT 104
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: LD_INT 16
 947: PPUSH
 948: LD_INT 3
 950: PPUSH
 951: CALL 69363 0 2
 955: PUSH
 956: LD_STRING kirov
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 31
 966: PUSH
 967: LD_INT 169
 969: PUSH
 970: LD_INT 101
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 31
 987: PUSH
 988: LD_INT 175
 990: PUSH
 991: LD_INT 123
 993: PUSH
 994: LD_INT 5
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 4
1008: PUSH
1009: LD_INT 166
1011: PUSH
1012: LD_INT 115
1014: PUSH
1015: LD_INT 5
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 6
1029: PUSH
1030: LD_INT 152
1032: PUSH
1033: LD_INT 98
1035: PUSH
1036: LD_INT 3
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: ST_TO_ADDR
// for i := 1 to 8 do
1060: LD_ADDR_VAR 0 2
1064: PUSH
1065: DOUBLE
1066: LD_INT 1
1068: DEC
1069: ST_TO_ADDR
1070: LD_INT 8
1072: PUSH
1073: FOR_TO
1074: IFFALSE 1403
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1076: LD_VAR 0 2
1080: PPUSH
1081: CALL_OW 530
1085: IFFALSE 1243
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1087: LD_ADDR_EXP 11
1091: PUSH
1092: LD_EXP 11
1096: PPUSH
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL_OW 1
1109: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1110: LD_ADDR_EXP 9
1114: PUSH
1115: LD_EXP 9
1119: PPUSH
1120: LD_VAR 0 2
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 1
1132: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_EXP 7
1142: PPUSH
1143: LD_VAR 0 2
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 1
1155: ST_TO_ADDR
// for j = 1 to multi_teams do
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 10
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1241
// begin if i in multi_teams [ j ] then
1174: LD_VAR 0 2
1178: PUSH
1179: LD_EXP 10
1183: PUSH
1184: LD_VAR 0 3
1188: ARRAY
1189: IN
1190: IFFALSE 1239
// begin tmp := multi_teams [ j ] diff i ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_EXP 10
1201: PUSH
1202: LD_VAR 0 3
1206: ARRAY
1207: PUSH
1208: LD_VAR 0 2
1212: DIFF
1213: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1214: LD_ADDR_EXP 10
1218: PUSH
1219: LD_EXP 10
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 5
1233: PPUSH
1234: CALL_OW 1
1238: ST_TO_ADDR
// end ; end ;
1239: GO 1171
1241: POP
1242: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1243: LD_EXP 9
1247: PUSH
1248: LD_VAR 0 2
1252: ARRAY
1253: PUSH
1254: LD_EXP 9
1258: PUSH
1259: LD_VAR 0 2
1263: ARRAY
1264: PUSH
1265: LD_EXP 13
1269: IN
1270: NOT
1271: AND
1272: IFFALSE 1313
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1274: LD_ADDR_EXP 9
1278: PUSH
1279: LD_EXP 9
1283: PPUSH
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_EXP 13
1293: PUSH
1294: LD_INT 1
1296: PPUSH
1297: LD_EXP 13
1301: PPUSH
1302: CALL_OW 12
1306: ARRAY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1313: LD_EXP 9
1317: PUSH
1318: LD_VAR 0 2
1322: ARRAY
1323: NOT
1324: PUSH
1325: LD_EXP 7
1329: PUSH
1330: LD_VAR 0 2
1334: ARRAY
1335: NOT
1336: AND
1337: PUSH
1338: LD_EXP 11
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: NOT
1349: AND
1350: IFFALSE 1375
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1352: LD_ADDR_EXP 14
1356: PUSH
1357: LD_EXP 14
1361: PPUSH
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL_OW 1
1374: ST_TO_ADDR
// if multi_sides [ i ] then
1375: LD_EXP 7
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: IFFALSE 1401
// multi_players_amount := multi_players_amount + 1 ;
1387: LD_ADDR_EXP 26
1391: PUSH
1392: LD_EXP 26
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ST_TO_ADDR
// end ;
1401: GO 1073
1403: POP
1404: POP
// for i in multi_teams do
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: LD_EXP 10
1414: PUSH
1415: FOR_IN
1416: IFFALSE 1524
// begin for j = 2 to i do
1418: LD_ADDR_VAR 0 3
1422: PUSH
1423: DOUBLE
1424: LD_INT 2
1426: DEC
1427: ST_TO_ADDR
1428: LD_VAR 0 2
1432: PUSH
1433: FOR_TO
1434: IFFALSE 1520
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1436: LD_VAR 0 2
1440: PUSH
1441: LD_VAR 0 3
1445: ARRAY
1446: PPUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PPUSH
1456: CALL_OW 343
// for x = 1 to j - 1 do
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: MINUS
1478: PUSH
1479: FOR_TO
1480: IFFALSE 1516
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1482: LD_VAR 0 2
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PPUSH
1493: LD_VAR 0 2
1497: PUSH
1498: LD_VAR 0 4
1502: ARRAY
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 80
1514: GO 1479
1516: POP
1517: POP
// end ;
1518: GO 1433
1520: POP
1521: POP
// end ;
1522: GO 1415
1524: POP
1525: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1526: LD_ADDR_OWVAR 67
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 2
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_EXP 17
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: ARRAY
1554: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: LD_INT 6
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 9
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_EXP 17
1582: PUSH
1583: LD_INT 2
1585: ARRAY
1586: ARRAY
1587: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1588: LD_ADDR_EXP 20
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: LD_INT 4
1601: PUSH
1602: LD_INT 5
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_EXP 17
1615: PUSH
1616: LD_INT 3
1618: ARRAY
1619: ARRAY
1620: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1621: LD_ADDR_EXP 21
1625: PUSH
1626: LD_INT 3000
1628: PUSH
1629: LD_INT 1120
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 5000
1638: PUSH
1639: LD_INT 770
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 6000
1648: PUSH
1649: LD_INT 490
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 8000
1658: PUSH
1659: LD_INT 420
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_EXP 17
1676: PUSH
1677: LD_INT 4
1679: ARRAY
1680: ARRAY
1681: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1682: LD_ADDR_EXP 22
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_EXP 17
1705: PUSH
1706: LD_INT 5
1708: ARRAY
1709: ARRAY
1710: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1711: LD_ADDR_EXP 23
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: LD_EXP 17
1734: PUSH
1735: LD_INT 6
1737: ARRAY
1738: ARRAY
1739: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1740: LD_ADDR_EXP 28
1744: PUSH
1745: LD_INT 10500
1747: PUSH
1748: LD_INT 31500
1750: PUSH
1751: LD_INT 52500
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_OWVAR 67
1763: ARRAY
1764: ST_TO_ADDR
// if multi_extra_oil then
1765: LD_EXP 22
1769: IFFALSE 1830
// begin if multi_extra_oil = 1 then
1771: LD_EXP 22
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1794
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1781: LD_INT 109
1783: PPUSH
1784: LD_INT 130
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1794: LD_EXP 22
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1830
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1804: LD_INT 109
1806: PPUSH
1807: LD_INT 130
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1817: LD_INT 150
1819: PPUSH
1820: LD_INT 112
1822: PPUSH
1823: LD_INT 2
1825: PPUSH
1826: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1830: LD_OWVAR 67
1834: PUSH
1835: LD_INT 1
1837: GREATER
1838: IFFALSE 1875
// for i := 2 to 8 do
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: DOUBLE
1846: LD_INT 2
1848: DEC
1849: ST_TO_ADDR
1850: LD_INT 8
1852: PUSH
1853: FOR_TO
1854: IFFALSE 1873
// SetTech ( tech_advmet , i , state_disabled ) ;
1856: LD_INT 34
1858: PPUSH
1859: LD_VAR 0 2
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 322
1871: GO 1853
1873: POP
1874: POP
// end ;
1875: LD_VAR 0 1
1879: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1880: LD_INT 0
1882: PPUSH
1883: PPUSH
// if not multi_sides [ preferSide ] then
1884: LD_EXP 7
1888: PUSH
1889: LD_VAR 0 1
1893: ARRAY
1894: NOT
1895: IFFALSE 1909
// begin result := preferSide ;
1897: LD_ADDR_VAR 0 2
1901: PUSH
1902: LD_VAR 0 1
1906: ST_TO_ADDR
// exit ;
1907: GO 1956
// end ; for i := 1 to 8 do
1909: LD_ADDR_VAR 0 3
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 8
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1954
// if not multi_sides [ i ] then
1925: LD_EXP 7
1929: PUSH
1930: LD_VAR 0 3
1934: ARRAY
1935: NOT
1936: IFFALSE 1952
// begin result := i ;
1938: LD_ADDR_VAR 0 2
1942: PUSH
1943: LD_VAR 0 3
1947: ST_TO_ADDR
// exit ;
1948: POP
1949: POP
1950: GO 1956
// end ;
1952: GO 1922
1954: POP
1955: POP
// end ;
1956: LD_VAR 0 2
1960: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1961: LD_INT 0
1963: PPUSH
// uc_side := side ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_VAR 0 1
1973: ST_TO_ADDR
// uc_nation := nation_russian ;
1974: LD_ADDR_OWVAR 21
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// hc_importance := 100 ;
1982: LD_ADDR_OWVAR 32
1986: PUSH
1987: LD_INT 100
1989: ST_TO_ADDR
// hc_class := class_soldier ;
1990: LD_ADDR_OWVAR 28
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// if num = 1 then
1998: LD_VAR 0 2
2002: PUSH
2003: LD_INT 1
2005: EQUAL
2006: IFFALSE 2069
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2008: LD_INT 1
2010: PPUSH
2011: LD_EXP 20
2015: PPUSH
2016: CALL_OW 381
// hc_gallery := ru ;
2020: LD_ADDR_OWVAR 33
2024: PUSH
2025: LD_STRING ru
2027: ST_TO_ADDR
// hc_face_number := 10 ;
2028: LD_ADDR_OWVAR 34
2032: PUSH
2033: LD_INT 10
2035: ST_TO_ADDR
// hc_name := Popov ;
2036: LD_ADDR_OWVAR 26
2040: PUSH
2041: LD_STRING Popov
2043: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2044: LD_ADDR_OWVAR 29
2048: PUSH
2049: LD_INT 10
2051: PUSH
2052: LD_INT 10
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: ST_TO_ADDR
// result := CreateHuman ;
2059: LD_ADDR_VAR 0 3
2063: PUSH
2064: CALL_OW 44
2068: ST_TO_ADDR
// end ; if num = 2 then
2069: LD_VAR 0 2
2073: PUSH
2074: LD_INT 2
2076: EQUAL
2077: IFFALSE 2148
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2079: LD_INT 1
2081: PPUSH
2082: LD_EXP 20
2086: PPUSH
2087: CALL_OW 383
// hc_class := class_mechanic ;
2091: LD_ADDR_OWVAR 28
2095: PUSH
2096: LD_INT 3
2098: ST_TO_ADDR
// hc_gallery := ru ;
2099: LD_ADDR_OWVAR 33
2103: PUSH
2104: LD_STRING ru
2106: ST_TO_ADDR
// hc_face_number := 1 ;
2107: LD_ADDR_OWVAR 34
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// hc_name := Burlak ;
2115: LD_ADDR_OWVAR 26
2119: PUSH
2120: LD_STRING Burlak
2122: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2123: LD_ADDR_OWVAR 29
2127: PUSH
2128: LD_INT 10
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: ST_TO_ADDR
// result := CreateHuman ;
2138: LD_ADDR_VAR 0 3
2142: PUSH
2143: CALL_OW 44
2147: ST_TO_ADDR
// end ; if num = 3 then
2148: LD_VAR 0 2
2152: PUSH
2153: LD_INT 3
2155: EQUAL
2156: IFFALSE 2219
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2158: LD_INT 1
2160: PPUSH
2161: LD_EXP 20
2165: PPUSH
2166: CALL_OW 381
// hc_gallery := ru ;
2170: LD_ADDR_OWVAR 33
2174: PUSH
2175: LD_STRING ru
2177: ST_TO_ADDR
// hc_face_number := 8 ;
2178: LD_ADDR_OWVAR 34
2182: PUSH
2183: LD_INT 8
2185: ST_TO_ADDR
// hc_name := Kurin ;
2186: LD_ADDR_OWVAR 26
2190: PUSH
2191: LD_STRING Kurin
2193: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2194: LD_ADDR_OWVAR 29
2198: PUSH
2199: LD_INT 12
2201: PUSH
2202: LD_INT 11
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// result := CreateHuman ;
2209: LD_ADDR_VAR 0 3
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// end ; end ;
2219: LD_VAR 0 3
2223: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2224: LD_INT 0
2226: PPUSH
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
// for i := 1 to 8 do
2236: LD_ADDR_VAR 0 2
2240: PUSH
2241: DOUBLE
2242: LD_INT 1
2244: DEC
2245: ST_TO_ADDR
2246: LD_INT 8
2248: PUSH
2249: FOR_TO
2250: IFFALSE 3579
// begin if not multi_sides [ i ] then
2252: LD_EXP 7
2256: PUSH
2257: LD_VAR 0 2
2261: ARRAY
2262: NOT
2263: IFFALSE 2267
// continue ;
2265: GO 2249
// if multi_buildings [ multi_sides [ i ] ] then
2267: LD_EXP 29
2271: PUSH
2272: LD_EXP 7
2276: PUSH
2277: LD_VAR 0 2
2281: ARRAY
2282: ARRAY
2283: IFFALSE 2596
// begin uc_side := i ;
2285: LD_ADDR_OWVAR 20
2289: PUSH
2290: LD_VAR 0 2
2294: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2295: LD_ADDR_OWVAR 21
2299: PUSH
2300: LD_EXP 9
2304: PUSH
2305: LD_VAR 0 2
2309: ARRAY
2310: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2311: LD_ADDR_VAR 0 3
2315: PUSH
2316: LD_EXP 29
2320: PUSH
2321: LD_EXP 7
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: ARRAY
2332: PUSH
2333: FOR_IN
2334: IFFALSE 2594
// begin if j [ 1 ] = b_oil_mine then
2336: LD_VAR 0 3
2340: PUSH
2341: LD_INT 1
2343: ARRAY
2344: PUSH
2345: LD_INT 29
2347: EQUAL
2348: IFFALSE 2385
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 2
2357: ARRAY
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 3
2367: PUSH
2368: LD_INT 2
2370: ARRAY
2371: PUSH
2372: LD_INT 2
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 2
2380: PPUSH
2381: CALL_OW 441
// bc_type := j [ 1 ] ;
2385: LD_ADDR_OWVAR 42
2389: PUSH
2390: LD_VAR 0 3
2394: PUSH
2395: LD_INT 1
2397: ARRAY
2398: ST_TO_ADDR
// bc_level := 2 ;
2399: LD_ADDR_OWVAR 43
2403: PUSH
2404: LD_INT 2
2406: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2407: LD_VAR 0 3
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PUSH
2416: LD_INT 6
2418: EQUAL
2419: IFFALSE 2437
// begin bc_kind1 := b_lab_basic ;
2421: LD_ADDR_OWVAR 44
2425: PUSH
2426: LD_INT 9
2428: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2429: LD_ADDR_OWVAR 45
2433: PUSH
2434: LD_INT 9
2436: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2437: LD_ADDR_VAR 0 4
2441: PUSH
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 2
2449: ARRAY
2450: PUSH
2451: LD_INT 1
2453: ARRAY
2454: PPUSH
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 2
2462: ARRAY
2463: PUSH
2464: LD_INT 2
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PUSH
2477: LD_INT 3
2479: ARRAY
2480: PPUSH
2481: CALL_OW 47
2485: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2486: LD_VAR 0 3
2490: PUSH
2491: LD_INT 1
2493: ARRAY
2494: PUSH
2495: LD_INT 0
2497: EQUAL
2498: IFFALSE 2592
// begin SetBName ( b , j [ 3 ] ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 3
2512: ARRAY
2513: PPUSH
2514: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: CALL_OW 274
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 320
2533: PUSH
2534: LD_INT 240
2536: PUSH
2537: LD_INT 150
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: PUSH
2545: LD_OWVAR 67
2549: ARRAY
2550: PPUSH
2551: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2555: LD_VAR 0 4
2559: PPUSH
2560: CALL_OW 274
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 160
2570: PUSH
2571: LD_INT 130
2573: PUSH
2574: LD_INT 100
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_OWVAR 67
2586: ARRAY
2587: PPUSH
2588: CALL_OW 277
// end ; end ;
2592: GO 2333
2594: POP
2595: POP
// end ; if multi_custom_commanders then
2596: LD_EXP 16
2600: IFFALSE 2810
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2602: LD_ADDR_VAR 0 6
2606: PUSH
2607: LD_VAR 0 2
2611: PPUSH
2612: LD_EXP 7
2616: PUSH
2617: LD_VAR 0 2
2621: ARRAY
2622: PPUSH
2623: CALL 1961 0 2
2627: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2628: LD_ADDR_EXP 24
2632: PUSH
2633: LD_EXP 24
2637: PPUSH
2638: LD_EXP 24
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: PPUSH
2647: LD_VAR 0 6
2651: PPUSH
2652: CALL_OW 2
2656: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2657: LD_VAR 0 6
2661: PPUSH
2662: CALL_OW 257
2666: PUSH
2667: LD_INT 3
2669: EQUAL
2670: IFFALSE 2775
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2672: LD_INT 22
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_INT 51
2683: PPUSH
2684: LD_INT 100
2686: PPUSH
2687: CALL 31953 0 5
// veh := CreateVehicle ;
2691: LD_ADDR_VAR 0 7
2695: PUSH
2696: CALL_OW 45
2700: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2701: LD_VAR 0 7
2705: PPUSH
2706: LD_INT 2
2708: PPUSH
2709: LD_INT 100
2711: PUSH
2712: LD_INT 20
2714: PUSH
2715: LD_OWVAR 67
2719: MUL
2720: MINUS
2721: PPUSH
2722: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2726: LD_VAR 0 7
2730: PPUSH
2731: LD_EXP 12
2735: PUSH
2736: LD_EXP 7
2740: PUSH
2741: LD_VAR 0 2
2745: ARRAY
2746: ARRAY
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2759: LD_VAR 0 6
2763: PPUSH
2764: LD_VAR 0 7
2768: PPUSH
2769: CALL_OW 52
// end else
2773: GO 2808
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2775: LD_VAR 0 6
2779: PPUSH
2780: LD_EXP 12
2784: PUSH
2785: LD_EXP 7
2789: PUSH
2790: LD_VAR 0 2
2794: ARRAY
2795: ARRAY
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// end else
2808: GO 3021
// begin uc_side := i ;
2810: LD_ADDR_OWVAR 20
2814: PUSH
2815: LD_VAR 0 2
2819: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_EXP 9
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ST_TO_ADDR
// hc_importance := 100 ;
2836: LD_ADDR_OWVAR 32
2840: PUSH
2841: LD_INT 100
2843: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2844: LD_INT 0
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_EXP 20
2854: PPUSH
2855: CALL_OW 380
// if multiplayer then
2859: LD_OWVAR 4
2863: IFFALSE 2921
// begin hc_name := mp_sides_players_names [ i ] ;
2865: LD_ADDR_OWVAR 26
2869: PUSH
2870: LD_OWVAR 19
2874: PUSH
2875: LD_VAR 0 2
2879: ARRAY
2880: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2881: LD_ADDR_OWVAR 33
2885: PUSH
2886: LD_STRING MULTIAVATARS
2888: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2889: LD_ADDR_OWVAR 34
2893: PUSH
2894: LD_VAR 0 2
2898: PPUSH
2899: CALL_OW 525
2903: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2904: LD_ADDR_OWVAR 27
2908: PUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: CALL_OW 526
2918: ST_TO_ADDR
// end else
2919: GO 2953
// begin hc_gallery :=  ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING 
2928: ST_TO_ADDR
// hc_name :=  ;
2929: LD_ADDR_OWVAR 26
2933: PUSH
2934: LD_STRING 
2936: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2937: LD_ADDR_OWVAR 27
2941: PUSH
2942: LD_INT 1
2944: PPUSH
2945: LD_INT 2
2947: PPUSH
2948: CALL_OW 12
2952: ST_TO_ADDR
// end ; un := CreateHuman ;
2953: LD_ADDR_VAR 0 6
2957: PUSH
2958: CALL_OW 44
2962: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2963: LD_VAR 0 6
2967: PPUSH
2968: LD_EXP 12
2972: PUSH
2973: LD_EXP 7
2977: PUSH
2978: LD_VAR 0 2
2982: ARRAY
2983: ARRAY
2984: PUSH
2985: LD_INT 1
2987: ARRAY
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2996: LD_ADDR_EXP 24
3000: PUSH
3001: LD_EXP 24
3005: PPUSH
3006: LD_VAR 0 2
3010: PPUSH
3011: LD_VAR 0 6
3015: PPUSH
3016: CALL_OW 1
3020: ST_TO_ADDR
// end ; InitHc ;
3021: CALL_OW 19
// InitUc ;
3025: CALL_OW 18
// uc_side := i ;
3029: LD_ADDR_OWVAR 20
3033: PUSH
3034: LD_VAR 0 2
3038: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3039: LD_ADDR_OWVAR 21
3043: PUSH
3044: LD_EXP 9
3048: PUSH
3049: LD_VAR 0 2
3053: ARRAY
3054: ST_TO_ADDR
// hc_gallery :=  ;
3055: LD_ADDR_OWVAR 33
3059: PUSH
3060: LD_STRING 
3062: ST_TO_ADDR
// hc_name :=  ;
3063: LD_ADDR_OWVAR 26
3067: PUSH
3068: LD_STRING 
3070: ST_TO_ADDR
// hc_importance := 0 ;
3071: LD_ADDR_OWVAR 32
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// cl := 1 ;
3079: LD_ADDR_VAR 0 5
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: DOUBLE
3093: LD_INT 2
3095: DEC
3096: ST_TO_ADDR
3097: LD_EXP 19
3101: PUSH
3102: FOR_TO
3103: IFFALSE 3575
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3105: LD_VAR 0 3
3109: PUSH
3110: LD_INT 1
3112: MINUS
3113: PUSH
3114: LD_EXP 19
3118: PUSH
3119: LD_INT 1
3121: MINUS
3122: PUSH
3123: LD_INT 4
3125: DIVREAL
3126: MOD
3127: PUSH
3128: LD_INT 0
3130: EQUAL
3131: IFFALSE 3147
// cl := cl + 1 ;
3133: LD_ADDR_VAR 0 5
3137: PUSH
3138: LD_VAR 0 5
3142: PUSH
3143: LD_INT 1
3145: PLUS
3146: ST_TO_ADDR
// if cl > 4 then
3147: LD_VAR 0 5
3151: PUSH
3152: LD_INT 4
3154: GREATER
3155: IFFALSE 3165
// cl := 1 ;
3157: LD_ADDR_VAR 0 5
3161: PUSH
3162: LD_INT 1
3164: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3165: LD_INT 0
3167: PPUSH
3168: LD_VAR 0 5
3172: PPUSH
3173: LD_EXP 20
3177: PPUSH
3178: CALL_OW 380
// un := CreateHuman ;
3182: LD_ADDR_VAR 0 6
3186: PUSH
3187: CALL_OW 44
3191: ST_TO_ADDR
// if j > copy then
3192: LD_VAR 0 3
3196: PUSH
3197: LD_VAR 0 9
3201: GREATER
3202: IFFALSE 3231
// copy := Replace ( copy , j , un ) else
3204: LD_ADDR_VAR 0 9
3208: PUSH
3209: LD_VAR 0 9
3213: PPUSH
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_VAR 0 6
3223: PPUSH
3224: CALL_OW 1
3228: ST_TO_ADDR
3229: GO 3313
// begin CopySkills ( copy [ j ] , un ) ;
3231: LD_VAR 0 9
3235: PUSH
3236: LD_VAR 0 3
3240: ARRAY
3241: PPUSH
3242: LD_VAR 0 6
3246: PPUSH
3247: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3251: LD_VAR 0 6
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: LD_VAR 0 9
3263: PUSH
3264: LD_VAR 0 3
3268: ARRAY
3269: PPUSH
3270: LD_INT 2
3272: PPUSH
3273: CALL_OW 260
3277: PPUSH
3278: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3282: LD_VAR 0 6
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_VAR 0 9
3294: PUSH
3295: LD_VAR 0 3
3299: ARRAY
3300: PPUSH
3301: LD_INT 1
3303: PPUSH
3304: CALL_OW 260
3308: PPUSH
3309: CALL_OW 239
// end ; if multi_pos_area then
3313: LD_EXP 12
3317: IFFALSE 3573
// begin if GetClass ( un ) = 3 then
3319: LD_VAR 0 6
3323: PPUSH
3324: CALL_OW 257
3328: PUSH
3329: LD_INT 3
3331: EQUAL
3332: IFFALSE 3429
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3334: LD_INT 21
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 43
3345: PUSH
3346: LD_INT 42
3348: PUSH
3349: LD_INT 42
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: LD_OWVAR 67
3361: ARRAY
3362: PPUSH
3363: LD_INT 80
3365: PPUSH
3366: CALL 31953 0 5
// veh := CreateVehicle ;
3370: LD_ADDR_VAR 0 7
3374: PUSH
3375: CALL_OW 45
3379: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3380: LD_VAR 0 7
3384: PPUSH
3385: LD_EXP 12
3389: PUSH
3390: LD_EXP 7
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: ARRAY
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3413: LD_VAR 0 6
3417: PPUSH
3418: LD_VAR 0 7
3422: PPUSH
3423: CALL_OW 52
// continue ;
3427: GO 3102
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3429: LD_ADDR_VAR 0 8
3433: PUSH
3434: LD_INT 22
3436: PUSH
3437: LD_VAR 0 2
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PUSH
3446: LD_INT 30
3448: PUSH
3449: LD_INT 31
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 58
3458: PUSH
3459: EMPTY
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: PPUSH
3467: CALL_OW 69
3471: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3472: LD_VAR 0 6
3476: PPUSH
3477: CALL_OW 257
3481: PUSH
3482: LD_INT 1
3484: EQUAL
3485: PUSH
3486: LD_VAR 0 8
3490: AND
3491: IFFALSE 3540
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3493: LD_VAR 0 6
3497: PPUSH
3498: LD_VAR 0 8
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PPUSH
3507: CALL_OW 254
3511: PUSH
3512: LD_INT 3
3514: MINUS
3515: PPUSH
3516: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3520: LD_VAR 0 6
3524: PPUSH
3525: LD_VAR 0 8
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: PPUSH
3534: CALL_OW 52
// continue ;
3538: GO 3102
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3540: LD_VAR 0 6
3544: PPUSH
3545: LD_EXP 12
3549: PUSH
3550: LD_EXP 7
3554: PUSH
3555: LD_VAR 0 2
3559: ARRAY
3560: ARRAY
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: CALL_OW 49
// end ; end ;
3573: GO 3102
3575: POP
3576: POP
// end ;
3577: GO 2249
3579: POP
3580: POP
// end ;
3581: LD_VAR 0 1
3585: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3586: LD_INT 0
3588: PPUSH
3589: PPUSH
3590: PPUSH
3591: PPUSH
3592: PPUSH
// if not multi_support then
3593: LD_EXP 23
3597: NOT
3598: IFFALSE 3602
// exit ;
3600: GO 3905
// result := [ ] ;
3602: LD_ADDR_VAR 0 1
3606: PUSH
3607: EMPTY
3608: ST_TO_ADDR
// for i := 1 to 8 do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 8
3621: PUSH
3622: FOR_TO
3623: IFFALSE 3903
// begin result := Replace ( result , i , [ ] ) ;
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_VAR 0 2
3639: PPUSH
3640: EMPTY
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// if multi_sides [ i ] then
3647: LD_EXP 7
3651: PUSH
3652: LD_VAR 0 2
3656: ARRAY
3657: IFFALSE 3901
// begin tmp := [ ] ;
3659: LD_ADDR_VAR 0 5
3663: PUSH
3664: EMPTY
3665: ST_TO_ADDR
// if multi_support = 1 then
3666: LD_EXP 23
3670: PUSH
3671: LD_INT 1
3673: EQUAL
3674: IFFALSE 3771
// begin uc_side := i ;
3676: LD_ADDR_OWVAR 20
3680: PUSH
3681: LD_VAR 0 2
3685: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3686: LD_ADDR_OWVAR 21
3690: PUSH
3691: LD_EXP 9
3695: PUSH
3696: LD_VAR 0 2
3700: ARRAY
3701: ST_TO_ADDR
// for j := 1 to 3 do
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_INT 3
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3769
// begin InitHC_All ( ) ;
3718: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: CALL_OW 12
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 4
3741: PPUSH
3742: CALL_OW 12
3746: PPUSH
3747: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 5
3760: PUSH
3761: CALL_OW 44
3765: ADD
3766: ST_TO_ADDR
// end ;
3767: GO 3715
3769: POP
3770: POP
// end ; if multi_support = 2 then
3771: LD_EXP 23
3775: PUSH
3776: LD_INT 2
3778: EQUAL
3779: IFFALSE 3876
// begin uc_side := i ;
3781: LD_ADDR_OWVAR 20
3785: PUSH
3786: LD_VAR 0 2
3790: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3791: LD_ADDR_OWVAR 21
3795: PUSH
3796: LD_EXP 9
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: ST_TO_ADDR
// for j := 1 to 5 do
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_INT 5
3819: PUSH
3820: FOR_TO
3821: IFFALSE 3874
// begin InitHC_All ( ) ;
3823: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3827: LD_INT 0
3829: PPUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 4
3835: PPUSH
3836: CALL_OW 12
3840: PPUSH
3841: LD_INT 2
3843: PPUSH
3844: LD_INT 4
3846: PPUSH
3847: CALL_OW 12
3851: PPUSH
3852: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3856: LD_ADDR_VAR 0 5
3860: PUSH
3861: LD_VAR 0 5
3865: PUSH
3866: CALL_OW 44
3870: ADD
3871: ST_TO_ADDR
// end ;
3872: GO 3820
3874: POP
3875: POP
// end ; result := Replace ( result , i , tmp ) ;
3876: LD_ADDR_VAR 0 1
3880: PUSH
3881: LD_VAR 0 1
3885: PPUSH
3886: LD_VAR 0 2
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ; end ;
3901: GO 3622
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export function Multiplayer_Start ( ) ; begin
3910: LD_INT 0
3912: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3913: CALL 2224 0 0
// Multiplayer_InitPointSystem ( ) ;
3917: CALL 4912 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3921: LD_INT 20
3923: PPUSH
3924: CALL 5088 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3928: LD_INT 150
3930: PPUSH
3931: CALL 5088 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3935: LD_INT 5
3937: PPUSH
3938: CALL 5088 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3942: LD_INT 40
3944: NEG
3945: PPUSH
3946: CALL 5088 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3950: LD_INT 200
3952: PPUSH
3953: CALL 5088 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3957: LD_INT 2
3959: PPUSH
3960: CALL 5088 0 1
// if multi_support then
3964: LD_EXP 23
3968: IFFALSE 3980
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3970: LD_ADDR_EXP 27
3974: PUSH
3975: CALL 3586 0 0
3979: ST_TO_ADDR
// if multi_sides [ your_side ] then
3980: LD_EXP 7
3984: PUSH
3985: LD_OWVAR 2
3989: ARRAY
3990: IFFALSE 4017
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3992: LD_INT 22
3994: PUSH
3995: LD_OWVAR 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PPUSH
4004: CALL_OW 69
4008: PUSH
4009: LD_INT 1
4011: ARRAY
4012: PPUSH
4013: CALL_OW 87
// end ;
4017: LD_VAR 0 1
4021: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
4029: PPUSH
4030: PPUSH
// tmp := [ ] ;
4031: LD_ADDR_VAR 0 6
4035: PUSH
4036: EMPTY
4037: ST_TO_ADDR
// for i := 1 to 8 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_INT 8
4050: PUSH
4051: FOR_TO
4052: IFFALSE 4088
// if multi_sides [ i ] then
4054: LD_EXP 7
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: IFFALSE 4086
// tmp := Join ( tmp , i ) ;
4066: LD_ADDR_VAR 0 6
4070: PUSH
4071: LD_VAR 0 6
4075: PPUSH
4076: LD_VAR 0 2
4080: PPUSH
4081: CALL 64824 0 2
4085: ST_TO_ADDR
4086: GO 4051
4088: POP
4089: POP
// repeat wait ( 0 0$1 ) ;
4090: LD_INT 35
4092: PPUSH
4093: CALL_OW 67
// if tick = 10 10$00 then
4097: LD_OWVAR 1
4101: PUSH
4102: LD_INT 21000
4104: EQUAL
4105: IFFALSE 4276
// begin for i := 1 to 8 do
4107: LD_ADDR_VAR 0 2
4111: PUSH
4112: DOUBLE
4113: LD_INT 1
4115: DEC
4116: ST_TO_ADDR
4117: LD_INT 8
4119: PUSH
4120: FOR_TO
4121: IFFALSE 4274
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4123: LD_EXP 7
4127: PUSH
4128: LD_VAR 0 2
4132: ARRAY
4133: PUSH
4134: LD_EXP 25
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: NOT
4145: AND
4146: IFFALSE 4272
// begin uc_side := i ;
4148: LD_ADDR_OWVAR 20
4152: PUSH
4153: LD_VAR 0 2
4157: ST_TO_ADDR
// uc_nation := nation_russian ;
4158: LD_ADDR_OWVAR 21
4162: PUSH
4163: LD_INT 3
4165: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4166: LD_INT 22
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: LD_INT 1
4174: PPUSH
4175: LD_INT 44
4177: PUSH
4178: LD_INT 44
4180: PUSH
4181: LD_INT 42
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_OWVAR 67
4193: ARRAY
4194: PPUSH
4195: LD_INT 30
4197: PPUSH
4198: CALL 31953 0 5
// veh := CreateVehicle ;
4202: LD_ADDR_VAR 0 7
4206: PUSH
4207: CALL_OW 45
4211: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4212: LD_VAR 0 7
4216: PPUSH
4217: LD_INT 32
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4227: LD_INT 0
4229: PPUSH
4230: LD_INT 5
4232: PUSH
4233: LD_OWVAR 67
4237: MINUS
4238: PPUSH
4239: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4243: CALL_OW 44
4247: PPUSH
4248: LD_VAR 0 7
4252: PPUSH
4253: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4257: LD_VAR 0 7
4261: PPUSH
4262: LD_INT 158
4264: PPUSH
4265: LD_INT 106
4267: PPUSH
4268: CALL_OW 111
// end ; end ;
4272: GO 4120
4274: POP
4275: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4276: LD_OWVAR 1
4280: PUSH
4281: LD_EXP 28
4285: GREATER
4286: PUSH
4287: LD_EXP 23
4291: AND
4292: IFFALSE 4480
// begin if tick mod 2 2$00 = 0 then
4294: LD_OWVAR 1
4298: PUSH
4299: LD_INT 4200
4301: MOD
4302: PUSH
4303: LD_INT 0
4305: EQUAL
4306: IFFALSE 4480
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4308: LD_ADDR_VAR 0 6
4312: PUSH
4313: LD_VAR 0 6
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: LD_VAR 0 6
4325: PPUSH
4326: CALL 29215 0 1
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: CALL 31493 0 4
4338: ST_TO_ADDR
// for s := 1 to tmp do
4339: LD_ADDR_VAR 0 5
4343: PUSH
4344: DOUBLE
4345: LD_INT 1
4347: DEC
4348: ST_TO_ADDR
4349: LD_VAR 0 6
4353: PUSH
4354: FOR_TO
4355: IFFALSE 4478
// begin i := tmp [ s ] ;
4357: LD_ADDR_VAR 0 2
4361: PUSH
4362: LD_VAR 0 6
4366: PUSH
4367: LD_VAR 0 5
4371: ARRAY
4372: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4373: LD_EXP 7
4377: PUSH
4378: LD_VAR 0 2
4382: ARRAY
4383: PUSH
4384: LD_EXP 25
4388: PUSH
4389: LD_VAR 0 2
4393: ARRAY
4394: NOT
4395: AND
4396: PUSH
4397: LD_EXP 27
4401: PUSH
4402: LD_VAR 0 2
4406: ARRAY
4407: AND
4408: IFFALSE 4476
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4410: LD_EXP 27
4414: PUSH
4415: LD_VAR 0 2
4419: ARRAY
4420: PUSH
4421: LD_INT 1
4423: ARRAY
4424: PPUSH
4425: LD_INT 7
4427: PPUSH
4428: LD_INT 1
4430: PPUSH
4431: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4435: LD_ADDR_EXP 27
4439: PUSH
4440: LD_EXP 27
4444: PPUSH
4445: LD_VAR 0 2
4449: PPUSH
4450: LD_EXP 27
4454: PUSH
4455: LD_VAR 0 2
4459: ARRAY
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: CALL_OW 3
4468: PPUSH
4469: CALL_OW 1
4473: ST_TO_ADDR
// break ;
4474: GO 4478
// end ; end ;
4476: GO 4354
4478: POP
4479: POP
// end ; end ; if not multi_custom_commanders then
4480: LD_EXP 16
4484: NOT
4485: IFFALSE 4598
// begin for i := 1 to 8 do
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: DOUBLE
4493: LD_INT 1
4495: DEC
4496: ST_TO_ADDR
4497: LD_INT 8
4499: PUSH
4500: FOR_TO
4501: IFFALSE 4572
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4503: LD_INT 22
4505: PUSH
4506: LD_VAR 0 2
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PPUSH
4515: CALL_OW 69
4519: PUSH
4520: LD_INT 0
4522: EQUAL
4523: PUSH
4524: LD_EXP 25
4528: PUSH
4529: LD_VAR 0 2
4533: ARRAY
4534: NOT
4535: AND
4536: IFFALSE 4570
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4538: LD_ADDR_EXP 25
4542: PUSH
4543: LD_EXP 25
4547: PPUSH
4548: LD_VAR 0 2
4552: PPUSH
4553: LD_INT 1
4555: PPUSH
4556: CALL_OW 1
4560: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4561: LD_VAR 0 2
4565: PPUSH
4566: CALL 5158 0 1
// end ; end ;
4570: GO 4500
4572: POP
4573: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4574: LD_EXP 25
4578: PPUSH
4579: CALL 29215 0 1
4583: PUSH
4584: LD_EXP 7
4588: PPUSH
4589: CALL 29215 0 1
4593: EQUAL
4594: IFFALSE 4598
// break ;
4596: GO 4618
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4598: CALL 4732 0 0
4602: NOT
4603: PUSH
4604: LD_EXP 2
4608: AND
4609: PUSH
4610: LD_EXP 24
4614: NOT
4615: OR
4616: IFFALSE 4090
// game := false ;
4618: LD_ADDR_EXP 2
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// for i := 1 to 8 do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: DOUBLE
4632: LD_INT 1
4634: DEC
4635: ST_TO_ADDR
4636: LD_INT 8
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4676
// begin if multi_sides [ i ] then
4642: LD_EXP 7
4646: PUSH
4647: LD_VAR 0 2
4651: ARRAY
4652: IFFALSE 4674
// SetMultiScore ( i , multi_points [ i ] ) ;
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_EXP 30
4663: PUSH
4664: LD_VAR 0 2
4668: ARRAY
4669: PPUSH
4670: CALL_OW 506
// end ;
4674: GO 4639
4676: POP
4677: POP
// if multi_loosers [ your_side ] then
4678: LD_EXP 25
4682: PUSH
4683: LD_OWVAR 2
4687: ARRAY
4688: IFFALSE 4711
// begin if Multiplayer then
4690: LD_OWVAR 4
4694: IFFALSE 4702
// YouLostInMultiplayer else
4696: CALL_OW 107
4700: GO 4709
// YouLost (  ) ;
4702: LD_STRING 
4704: PPUSH
4705: CALL_OW 104
// end else
4709: GO 4727
// begin if Multiplayer then
4711: LD_OWVAR 4
4715: IFFALSE 4723
// YouWinInMultiplayer else
4717: CALL_OW 106
4721: GO 4727
// YouWin ;
4723: CALL_OW 103
// end ; end ;
4727: LD_VAR 0 1
4731: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4732: LD_INT 0
4734: PPUSH
4735: PPUSH
// result := false ;
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_INT 0
4743: ST_TO_ADDR
// for side in botSides do
4744: LD_ADDR_VAR 0 2
4748: PUSH
4749: LD_EXP 3
4753: PUSH
4754: FOR_IN
4755: IFFALSE 4816
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4757: LD_ADDR_VAR 0 1
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 21
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 50
4786: PUSH
4787: EMPTY
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: PPUSH
4795: CALL_OW 69
4799: PUSH
4800: LD_INT 0
4802: GREATER
4803: ST_TO_ADDR
// if result then
4804: LD_VAR 0 1
4808: IFFALSE 4814
// exit ;
4810: POP
4811: POP
4812: GO 4818
// end ;
4814: GO 4754
4816: POP
4817: POP
// end ;
4818: LD_VAR 0 1
4822: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4823: LD_INT 0
4825: PPUSH
4826: PPUSH
// result := [ ] ;
4827: LD_ADDR_VAR 0 1
4831: PUSH
4832: EMPTY
4833: ST_TO_ADDR
// for i := 1 to 8 do
4834: LD_ADDR_VAR 0 2
4838: PUSH
4839: DOUBLE
4840: LD_INT 1
4842: DEC
4843: ST_TO_ADDR
4844: LD_INT 8
4846: PUSH
4847: FOR_TO
4848: IFFALSE 4905
// begin if multi_sides [ i ] then
4850: LD_EXP 7
4854: PUSH
4855: LD_VAR 0 2
4859: ARRAY
4860: IFFALSE 4903
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4862: LD_ADDR_VAR 0 1
4866: PUSH
4867: LD_VAR 0 1
4871: PUSH
4872: LD_STRING #coop-points
4874: PUSH
4875: LD_VAR 0 2
4879: PUSH
4880: LD_VAR 0 2
4884: PUSH
4885: LD_EXP 30
4889: PUSH
4890: LD_VAR 0 2
4894: ARRAY
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ADD
4902: ST_TO_ADDR
// end ; end ;
4903: GO 4847
4905: POP
4906: POP
// end ;
4907: LD_VAR 0 1
4911: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4916: LD_ADDR_EXP 30
4920: PUSH
4921: LD_INT 0
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 0
4932: PUSH
4933: LD_INT 0
4935: PUSH
4936: LD_INT 0
4938: PUSH
4939: LD_INT 0
4941: PUSH
4942: LD_INT 0
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4955: LD_ADDR_EXP 31
4959: PUSH
4960: EMPTY
4961: ST_TO_ADDR
// end ;
4962: LD_VAR 0 1
4966: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4967: LD_INT 0
4969: PPUSH
// if not multi_points or not side or side > 8 then
4970: LD_EXP 30
4974: NOT
4975: PUSH
4976: LD_VAR 0 1
4980: NOT
4981: OR
4982: PUSH
4983: LD_VAR 0 1
4987: PUSH
4988: LD_INT 8
4990: GREATER
4991: OR
4992: IFFALSE 4996
// exit ;
4994: GO 5033
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4996: LD_ADDR_EXP 30
5000: PUSH
5001: LD_EXP 30
5005: PPUSH
5006: LD_VAR 0 1
5010: PPUSH
5011: LD_EXP 30
5015: PUSH
5016: LD_VAR 0 1
5020: ARRAY
5021: PUSH
5022: LD_VAR 0 2
5026: PLUS
5027: PPUSH
5028: CALL_OW 1
5032: ST_TO_ADDR
// end ;
5033: LD_VAR 0 3
5037: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5038: LD_INT 0
5040: PPUSH
// if not multi_points or not side or side > 8 then
5041: LD_EXP 30
5045: NOT
5046: PUSH
5047: LD_VAR 0 1
5051: NOT
5052: OR
5053: PUSH
5054: LD_VAR 0 1
5058: PUSH
5059: LD_INT 8
5061: GREATER
5062: OR
5063: IFFALSE 5067
// exit ;
5065: GO 5083
// result := multi_points [ side ] ;
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: LD_EXP 30
5076: PUSH
5077: LD_VAR 0 1
5081: ARRAY
5082: ST_TO_ADDR
// end ;
5083: LD_VAR 0 2
5087: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5088: LD_INT 0
5090: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5091: LD_ADDR_EXP 31
5095: PUSH
5096: LD_EXP 31
5100: PPUSH
5101: LD_EXP 31
5105: PUSH
5106: LD_INT 1
5108: PLUS
5109: PPUSH
5110: LD_VAR 0 1
5114: PPUSH
5115: CALL_OW 1
5119: ST_TO_ADDR
// end ;
5120: LD_VAR 0 2
5124: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5125: LD_INT 0
5127: PPUSH
// if not id then
5128: LD_VAR 0 1
5132: NOT
5133: IFFALSE 5137
// exit ;
5135: GO 5153
// result := multi_points_conditions [ id ] ;
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: LD_EXP 31
5146: PUSH
5147: LD_VAR 0 1
5151: ARRAY
5152: ST_TO_ADDR
// end ;
5153: LD_VAR 0 2
5157: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5158: LD_INT 0
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
// players := [ ] ;
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: EMPTY
5171: ST_TO_ADDR
// for i = 1 to 8 do
5172: LD_ADDR_VAR 0 4
5176: PUSH
5177: DOUBLE
5178: LD_INT 1
5180: DEC
5181: ST_TO_ADDR
5182: LD_INT 8
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5245
// begin if i = side then
5188: LD_VAR 0 4
5192: PUSH
5193: LD_VAR 0 1
5197: EQUAL
5198: IFFALSE 5202
// continue ;
5200: GO 5185
// if multi_sides [ i ] and not multi_loosers [ i ] then
5202: LD_EXP 7
5206: PUSH
5207: LD_VAR 0 4
5211: ARRAY
5212: PUSH
5213: LD_EXP 25
5217: PUSH
5218: LD_VAR 0 4
5222: ARRAY
5223: NOT
5224: AND
5225: IFFALSE 5243
// players := players ^ i ;
5227: LD_ADDR_VAR 0 3
5231: PUSH
5232: LD_VAR 0 3
5236: PUSH
5237: LD_VAR 0 4
5241: ADD
5242: ST_TO_ADDR
// end ;
5243: GO 5185
5245: POP
5246: POP
// if not players then
5247: LD_VAR 0 3
5251: NOT
5252: IFFALSE 5256
// exit ;
5254: GO 5523
// if players = 1 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 1
5263: EQUAL
5264: IFFALSE 5325
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5266: LD_ADDR_VAR 0 4
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 51
5285: PUSH
5286: EMPTY
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PPUSH
5293: CALL_OW 69
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5321
// SetSide ( i , players [ 1 ] ) ;
5301: LD_VAR 0 4
5305: PPUSH
5306: LD_VAR 0 3
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: PPUSH
5315: CALL_OW 235
5319: GO 5298
5321: POP
5322: POP
// end else
5323: GO 5523
// begin j := 1 ;
5325: LD_ADDR_VAR 0 5
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_VAR 0 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: LD_INT 21
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: PUSH
5363: LD_INT 51
5365: PUSH
5366: EMPTY
5367: LIST
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 2
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: CALL_OW 69
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5521
// begin SetSide ( i , players [ j ] ) ;
5400: LD_VAR 0 4
5404: PPUSH
5405: LD_VAR 0 3
5409: PUSH
5410: LD_VAR 0 5
5414: ARRAY
5415: PPUSH
5416: CALL_OW 235
// if IsDrivenBy ( i ) then
5420: LD_VAR 0 4
5424: PPUSH
5425: CALL_OW 311
5429: IFFALSE 5456
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5431: LD_VAR 0 4
5435: PPUSH
5436: CALL_OW 311
5440: PPUSH
5441: LD_VAR 0 3
5445: PUSH
5446: LD_VAR 0 5
5450: ARRAY
5451: PPUSH
5452: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5456: LD_VAR 0 4
5460: PPUSH
5461: CALL_OW 310
5465: PPUSH
5466: CALL_OW 247
5470: PUSH
5471: LD_INT 3
5473: EQUAL
5474: IFFALSE 5485
// ComExitBuilding ( i ) ;
5476: LD_VAR 0 4
5480: PPUSH
5481: CALL_OW 122
// j := j + 1 ;
5485: LD_ADDR_VAR 0 5
5489: PUSH
5490: LD_VAR 0 5
5494: PUSH
5495: LD_INT 1
5497: PLUS
5498: ST_TO_ADDR
// if j > players then
5499: LD_VAR 0 5
5503: PUSH
5504: LD_VAR 0 3
5508: GREATER
5509: IFFALSE 5519
// j := 1 ;
5511: LD_ADDR_VAR 0 5
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// end ;
5519: GO 5397
5521: POP
5522: POP
// end ; end ;
5523: LD_VAR 0 2
5527: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
5532: PPUSH
// i := 3 ;
5533: LD_ADDR_VAR 0 2
5537: PUSH
5538: LD_INT 3
5540: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5541: LD_ADDR_VAR 0 3
5545: PUSH
5546: LD_INT 5
5548: PUSH
5549: LD_INT 10
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 120
5558: PUSH
5559: LD_INT 2
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 101
5568: PUSH
5569: LD_INT 8
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 27
5578: PUSH
5579: LD_INT 4
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5592: LD_INT 4
5594: PPUSH
5595: LD_INT 5
5597: PPUSH
5598: LD_VAR 0 3
5602: PUSH
5603: LD_VAR 0 2
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 3
5617: PUSH
5618: LD_VAR 0 2
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: LD_INT 0
5630: PPUSH
5631: CALL_OW 58
// end ;
5635: LD_VAR 0 1
5639: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5640: LD_INT 0
5642: PPUSH
// if not side or side > 8 then
5643: LD_VAR 0 1
5647: NOT
5648: PUSH
5649: LD_VAR 0 1
5653: PUSH
5654: LD_INT 8
5656: GREATER
5657: OR
5658: IFFALSE 5662
// exit ;
5660: GO 5679
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5662: LD_VAR 0 1
5666: PPUSH
5667: LD_INT 6
5669: PPUSH
5670: CALL 5125 0 1
5674: PPUSH
5675: CALL 4967 0 2
// end ;
5679: LD_VAR 0 2
5683: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5684: LD_INT 0
5686: PPUSH
// if not side or side > 8 then
5687: LD_VAR 0 1
5691: NOT
5692: PUSH
5693: LD_VAR 0 1
5697: PUSH
5698: LD_INT 8
5700: GREATER
5701: OR
5702: IFFALSE 5706
// exit ;
5704: GO 5723
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5706: LD_VAR 0 1
5710: PPUSH
5711: LD_INT 4
5713: PPUSH
5714: CALL 5125 0 1
5718: PPUSH
5719: CALL 4967 0 2
// end ;
5723: LD_VAR 0 2
5727: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5728: LD_INT 0
5730: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5731: LD_VAR 0 1
5735: NOT
5736: PUSH
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 8
5744: GREATER
5745: OR
5746: PUSH
5747: LD_VAR 0 2
5751: PUSH
5752: LD_INT 2
5754: PUSH
5755: LD_INT 6
5757: PUSH
5758: LD_INT 36
5760: PUSH
5761: LD_INT 0
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: IN
5770: NOT
5771: OR
5772: IFFALSE 5776
// exit ;
5774: GO 5793
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5776: LD_VAR 0 1
5780: PPUSH
5781: LD_INT 3
5783: PPUSH
5784: CALL 5125 0 1
5788: PPUSH
5789: CALL 4967 0 2
// end ;
5793: LD_VAR 0 3
5797: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5798: LD_INT 0
5800: PPUSH
5801: PPUSH
// if not un then
5802: LD_VAR 0 1
5806: NOT
5807: IFFALSE 5811
// exit ;
5809: GO 5857
// if not points then
5811: LD_VAR 0 3
5815: NOT
5816: IFFALSE 5833
// gained_points := Multiplayer_GetCondition ( 1 ) else
5818: LD_ADDR_VAR 0 5
5822: PUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL 5125 0 1
5830: ST_TO_ADDR
5831: GO 5843
// gained_points := points ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: LD_VAR 0 3
5842: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5843: LD_VAR 0 2
5847: PPUSH
5848: LD_VAR 0 5
5852: PPUSH
5853: CALL 4967 0 2
5857: LD_VAR 0 4
5861: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5862: LD_INT 0
5864: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5865: LD_VAR 0 1
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL 5125 0 1
5877: PPUSH
5878: CALL 4967 0 2
// end ; end_of_file
5882: LD_VAR 0 2
5886: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5887: LD_INT 0
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
5897: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5898: LD_ADDR_EXP 33
5902: PUSH
5903: LD_VAR 0 1
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_INT 1
5913: PPUSH
5914: CALL 27176 0 3
5918: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5919: LD_ADDR_EXP 34
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 1
5929: PUSH
5930: LD_INT 1
5932: PUSH
5933: LD_INT 6
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 3
5944: PUSH
5945: LD_INT 1
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 5
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 4
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 2
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: LD_INT 4
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 2
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: LD_INT 1
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: ST_TO_ADDR
// amBuildings := [ ] ;
6021: LD_ADDR_EXP 35
6025: PUSH
6026: EMPTY
6027: ST_TO_ADDR
// amVehicles := [ ] ;
6028: LD_ADDR_EXP 36
6032: PUSH
6033: EMPTY
6034: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6035: LD_ADDR_EXP 37
6039: PUSH
6040: EMPTY
6041: ST_TO_ADDR
// amDrivers := [ ] ;
6042: LD_ADDR_EXP 38
6046: PUSH
6047: EMPTY
6048: ST_TO_ADDR
// amVehiclesCounter := 2 ;
6049: LD_ADDR_EXP 39
6053: PUSH
6054: LD_INT 2
6056: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6057: LD_ADDR_EXP 42
6061: PUSH
6062: LD_INT 6
6064: PUSH
6065: LD_INT 8
6067: PUSH
6068: LD_INT 10
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_OWVAR 67
6080: ARRAY
6081: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6082: LD_ADDR_VAR 0 8
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 4
6092: PUSH
6093: LD_INT 5
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: LD_OWVAR 67
6105: ARRAY
6106: ST_TO_ADDR
// uc_side := side ;
6107: LD_ADDR_OWVAR 20
6111: PUSH
6112: LD_VAR 0 1
6116: ST_TO_ADDR
// uc_nation := nation_american ;
6117: LD_ADDR_OWVAR 21
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// hc_gallery := us ;
6125: LD_ADDR_OWVAR 33
6129: PUSH
6130: LD_STRING us
6132: ST_TO_ADDR
// hc_face_number := 19 ;
6133: LD_ADDR_OWVAR 34
6137: PUSH
6138: LD_INT 19
6140: ST_TO_ADDR
// hc_importance := 100 ;
6141: LD_ADDR_OWVAR 32
6145: PUSH
6146: LD_INT 100
6148: ST_TO_ADDR
// hc_name := Sikorski ;
6149: LD_ADDR_OWVAR 26
6153: PUSH
6154: LD_STRING Sikorski
6156: ST_TO_ADDR
// hc_sex := sex_male ;
6157: LD_ADDR_OWVAR 27
6161: PUSH
6162: LD_INT 1
6164: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6165: LD_ADDR_OWVAR 31
6169: PUSH
6170: LD_INT 5
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6188: LD_ADDR_OWVAR 29
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: LD_INT 11
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: ST_TO_ADDR
// Sikorski := CreateHuman ;
6203: LD_ADDR_EXP 32
6207: PUSH
6208: CALL_OW 44
6212: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6213: LD_EXP 32
6217: PPUSH
6218: LD_INT 1
6220: PPUSH
6221: CALL_OW 52
// InitHC_All ( ) ;
6225: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6229: LD_ADDR_EXP 40
6233: PUSH
6234: LD_INT 1
6236: PPUSH
6237: LD_INT 3
6239: PPUSH
6240: LD_STRING 
6242: PPUSH
6243: LD_VAR 0 8
6247: PPUSH
6248: LD_INT 800
6250: PUSH
6251: LD_INT 120
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: LD_INT 10
6264: PUSH
6265: LD_INT 11
6267: PUSH
6268: LD_INT 12
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_OWVAR 67
6280: ARRAY
6281: PUSH
6282: LD_INT 4
6284: PUSH
6285: LD_INT 6
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL 35774 0 6
6301: ST_TO_ADDR
// amForceTmp := [ ] ;
6302: LD_ADDR_EXP 41
6306: PUSH
6307: EMPTY
6308: ST_TO_ADDR
// if Difficulty = 3 then
6309: LD_OWVAR 67
6313: PUSH
6314: LD_INT 3
6316: EQUAL
6317: IFFALSE 6348
// begin bc_type := b_breastwork ;
6319: LD_ADDR_OWVAR 42
6323: PUSH
6324: LD_INT 31
6326: ST_TO_ADDR
// bc_level := 7 ;
6327: LD_ADDR_OWVAR 43
6331: PUSH
6332: LD_INT 7
6334: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6335: LD_INT 79
6337: PPUSH
6338: LD_INT 72
6340: PPUSH
6341: LD_INT 5
6343: PPUSH
6344: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 22
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 31
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: LD_INT 95
6380: PUSH
6381: LD_INT 3
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 58
6394: PUSH
6395: EMPTY
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: PUSH
6409: FOR_IN
6410: IFFALSE 6539
// begin d := GetDir ( i ) ;
6412: LD_ADDR_VAR 0 4
6416: PUSH
6417: LD_VAR 0 3
6421: PPUSH
6422: CALL_OW 254
6426: ST_TO_ADDR
// if d < 3 then
6427: LD_VAR 0 4
6431: PUSH
6432: LD_INT 3
6434: LESS
6435: IFFALSE 6453
// d := d + 3 else
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_VAR 0 4
6446: PUSH
6447: LD_INT 3
6449: PLUS
6450: ST_TO_ADDR
6451: GO 6467
// d := d - 3 ;
6453: LD_ADDR_VAR 0 4
6457: PUSH
6458: LD_VAR 0 4
6462: PUSH
6463: LD_INT 3
6465: MINUS
6466: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6467: LD_INT 0
6469: PPUSH
6470: LD_VAR 0 8
6474: PPUSH
6475: CALL_OW 381
// un := CreateHuman ;
6479: LD_ADDR_VAR 0 6
6483: PUSH
6484: CALL_OW 44
6488: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6489: LD_ADDR_EXP 41
6493: PUSH
6494: LD_EXP 41
6498: PPUSH
6499: LD_VAR 0 6
6503: PPUSH
6504: CALL 64824 0 2
6508: ST_TO_ADDR
// SetDir ( un , d ) ;
6509: LD_VAR 0 6
6513: PPUSH
6514: LD_VAR 0 4
6518: PPUSH
6519: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6523: LD_VAR 0 6
6527: PPUSH
6528: LD_VAR 0 3
6532: PPUSH
6533: CALL_OW 52
// end ;
6537: GO 6409
6539: POP
6540: POP
// for i := 1 to 3 do
6541: LD_ADDR_VAR 0 3
6545: PUSH
6546: DOUBLE
6547: LD_INT 1
6549: DEC
6550: ST_TO_ADDR
6551: LD_INT 3
6553: PUSH
6554: FOR_TO
6555: IFFALSE 6616
// begin PrepareEngineer ( false , skill ) ;
6557: LD_INT 0
6559: PPUSH
6560: LD_VAR 0 8
6564: PPUSH
6565: CALL_OW 382
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 6
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6579: LD_VAR 0 6
6583: PPUSH
6584: LD_INT 29
6586: PPUSH
6587: LD_INT 0
6589: PPUSH
6590: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6594: LD_ADDR_EXP 41
6598: PUSH
6599: LD_EXP 41
6603: PPUSH
6604: LD_VAR 0 6
6608: PPUSH
6609: CALL 64824 0 2
6613: ST_TO_ADDR
// end ;
6614: GO 6554
6616: POP
6617: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 21
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PPUSH
6649: CALL_OW 69
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6688
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: LD_INT 7
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_OWVAR 67
6680: ARRAY
6681: PPUSH
6682: CALL_OW 241
6686: GO 6654
6688: POP
6689: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_VAR 0 1
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 32
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: FOR_IN
6727: IFFALSE 6768
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6729: LD_VAR 0 3
6733: PPUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 4
6739: PUSH
6740: LD_INT 5
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: PUSH
6748: LD_VAR 0 3
6752: PUSH
6753: LD_INT 3
6755: MOD
6756: PUSH
6757: LD_INT 1
6759: PLUS
6760: ARRAY
6761: PPUSH
6762: CALL_OW 431
6766: GO 6726
6768: POP
6769: POP
// end ;
6770: LD_VAR 0 2
6774: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
6780: PPUSH
6781: PPUSH
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
6801: PPUSH
6802: PPUSH
6803: PPUSH
// enable ;
6804: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: LD_INT 81
6812: PUSH
6813: LD_VAR 0 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if tmp then
6827: LD_VAR 0 11
6831: IFFALSE 6852
// enemySide := GetSide ( tmp [ 1 ] ) ;
6833: LD_ADDR_VAR 0 35
6837: PUSH
6838: LD_VAR 0 11
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: CALL_OW 255
6851: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
6852: LD_ADDR_VAR 0 23
6856: PUSH
6857: LD_VAR 0 4
6861: PPUSH
6862: LD_INT 81
6864: PUSH
6865: LD_VAR 0 1
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 70
6878: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6879: LD_ADDR_VAR 0 24
6883: PUSH
6884: LD_VAR 0 5
6888: PPUSH
6889: LD_INT 81
6891: PUSH
6892: LD_VAR 0 1
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 70
6905: ST_TO_ADDR
// vehicles := amVehicles ;
6906: LD_ADDR_VAR 0 27
6910: PUSH
6911: LD_EXP 36
6915: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6916: LD_ADDR_VAR 0 33
6920: PUSH
6921: LD_VAR 0 3
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: LD_INT 30
6943: PUSH
6944: LD_INT 0
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 30
6953: PUSH
6954: LD_INT 1
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 70
6974: ST_TO_ADDR
// if depot then
6975: LD_VAR 0 33
6979: IFFALSE 6995
// depot := depot [ 1 ] ;
6981: LD_ADDR_VAR 0 33
6985: PUSH
6986: LD_VAR 0 33
6990: PUSH
6991: LD_INT 1
6993: ARRAY
6994: ST_TO_ADDR
// if amTech then
6995: LD_EXP 33
6999: IFFALSE 7158
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7001: LD_ADDR_VAR 0 13
7005: PUSH
7006: LD_VAR 0 3
7010: PPUSH
7011: LD_INT 22
7013: PUSH
7014: LD_VAR 0 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 50
7025: PUSH
7026: EMPTY
7027: LIST
7028: PUSH
7029: LD_INT 2
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 6
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 7
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 8
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 70
7077: ST_TO_ADDR
// if lab then
7078: LD_VAR 0 13
7082: IFFALSE 7158
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7084: LD_VAR 0 13
7088: PUSH
7089: LD_INT 1
7091: ARRAY
7092: PPUSH
7093: CALL_OW 461
7097: PUSH
7098: LD_INT 2
7100: EQUAL
7101: IFFALSE 7158
// begin for i in amTech do
7103: LD_ADDR_VAR 0 10
7107: PUSH
7108: LD_EXP 33
7112: PUSH
7113: FOR_IN
7114: IFFALSE 7156
// if CanBeResearched ( lab [ 1 ] , i ) then
7116: LD_VAR 0 13
7120: PUSH
7121: LD_INT 1
7123: ARRAY
7124: PPUSH
7125: LD_VAR 0 10
7129: PPUSH
7130: CALL_OW 430
7134: IFFALSE 7154
// begin AddComResearch ( lab [ 1 ] , i ) ;
7136: LD_VAR 0 13
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 10
7149: PPUSH
7150: CALL_OW 184
// end ;
7154: GO 7113
7156: POP
7157: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7158: LD_ADDR_VAR 0 30
7162: PUSH
7163: LD_VAR 0 3
7167: PPUSH
7168: LD_INT 22
7170: PUSH
7171: LD_VAR 0 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 50
7192: PUSH
7193: EMPTY
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PPUSH
7201: CALL_OW 70
7205: ST_TO_ADDR
// if fac then
7206: LD_VAR 0 30
7210: IFFALSE 7545
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7212: LD_VAR 0 30
7216: PUSH
7217: LD_INT 1
7219: ARRAY
7220: PPUSH
7221: CALL_OW 461
7225: PUSH
7226: LD_INT 2
7228: EQUAL
7229: IFFALSE 7545
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7231: LD_ADDR_VAR 0 31
7235: PUSH
7236: LD_VAR 0 3
7240: PPUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 30
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 30
7256: PUSH
7257: LD_INT 33
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 35
7271: PUSH
7272: LD_INT 0
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: ST_TO_ADDR
// if emptyTowers then
7288: LD_VAR 0 31
7292: IFFALSE 7342
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7294: LD_ADDR_VAR 0 32
7298: PUSH
7299: LD_VAR 0 31
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PPUSH
7308: LD_VAR 0 3
7312: PPUSH
7313: CALL 37460 0 2
7317: ST_TO_ADDR
// if weapon then
7318: LD_VAR 0 32
7322: IFFALSE 7342
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7324: LD_VAR 0 31
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_VAR 0 32
7337: PPUSH
7338: CALL_OW 148
// end ; if amConstructList then
7342: LD_EXP 34
7346: IFFALSE 7545
// for i := 1 to Count ( amConstructList ) do
7348: LD_ADDR_VAR 0 10
7352: PUSH
7353: DOUBLE
7354: LD_INT 1
7356: DEC
7357: ST_TO_ADDR
7358: LD_EXP 34
7362: PPUSH
7363: CALL 29215 0 1
7367: PUSH
7368: FOR_TO
7369: IFFALSE 7543
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7371: LD_VAR 0 30
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: LD_EXP 34
7384: PUSH
7385: LD_VAR 0 10
7389: ARRAY
7390: PUSH
7391: LD_INT 1
7393: ARRAY
7394: PPUSH
7395: LD_EXP 34
7399: PUSH
7400: LD_VAR 0 10
7404: ARRAY
7405: PUSH
7406: LD_INT 2
7408: ARRAY
7409: PPUSH
7410: LD_EXP 34
7414: PUSH
7415: LD_VAR 0 10
7419: ARRAY
7420: PUSH
7421: LD_INT 3
7423: ARRAY
7424: PPUSH
7425: LD_EXP 34
7429: PUSH
7430: LD_VAR 0 10
7434: ARRAY
7435: PUSH
7436: LD_INT 4
7438: ARRAY
7439: PPUSH
7440: CALL_OW 448
7444: IFFALSE 7541
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7446: LD_VAR 0 30
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_EXP 34
7459: PUSH
7460: LD_VAR 0 10
7464: ARRAY
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PPUSH
7470: LD_EXP 34
7474: PUSH
7475: LD_VAR 0 10
7479: ARRAY
7480: PUSH
7481: LD_INT 2
7483: ARRAY
7484: PPUSH
7485: LD_EXP 34
7489: PUSH
7490: LD_VAR 0 10
7494: ARRAY
7495: PUSH
7496: LD_INT 3
7498: ARRAY
7499: PPUSH
7500: LD_EXP 34
7504: PUSH
7505: LD_VAR 0 10
7509: ARRAY
7510: PUSH
7511: LD_INT 4
7513: ARRAY
7514: PPUSH
7515: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7519: LD_ADDR_EXP 34
7523: PUSH
7524: LD_EXP 34
7528: PPUSH
7529: LD_VAR 0 10
7533: PPUSH
7534: CALL_OW 3
7538: ST_TO_ADDR
// break ;
7539: GO 7543
// end ; end ;
7541: GO 7368
7543: POP
7544: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7545: LD_ADDR_VAR 0 11
7549: PUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_INT 22
7557: PUSH
7558: LD_VAR 0 1
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: LD_INT 57
7582: PUSH
7583: EMPTY
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 3
7592: PUSH
7593: LD_INT 24
7595: PUSH
7596: LD_INT 1000
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 70
7617: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7618: LD_ADDR_VAR 0 18
7622: PUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 435
7632: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7633: LD_ADDR_VAR 0 15
7637: PUSH
7638: LD_VAR 0 6
7642: PPUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: LD_INT 50
7655: PUSH
7656: EMPTY
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 72
7667: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7668: LD_VAR 0 15
7672: PPUSH
7673: LD_INT 3
7675: PUSH
7676: LD_INT 120
7678: PUSH
7679: LD_INT 7
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 3
7692: PUSH
7693: LD_INT 54
7695: PUSH
7696: EMPTY
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 72
7711: PUSH
7712: LD_VAR 0 30
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: CALL_OW 302
7725: AND
7726: IFFALSE 7785
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7728: LD_VAR 0 15
7732: PPUSH
7733: LD_INT 3
7735: PUSH
7736: LD_INT 120
7738: PUSH
7739: LD_INT 7
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 3
7752: PUSH
7753: LD_INT 54
7755: PUSH
7756: EMPTY
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: PPUSH
7772: LD_VAR 0 30
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7785: LD_ADDR_VAR 0 19
7789: PUSH
7790: LD_VAR 0 6
7794: PPUSH
7795: LD_INT 25
7797: PUSH
7798: LD_INT 4
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 50
7807: PUSH
7808: EMPTY
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PPUSH
7815: CALL_OW 72
7819: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7820: LD_ADDR_VAR 0 13
7824: PUSH
7825: LD_VAR 0 3
7829: PPUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 30
7835: PUSH
7836: LD_INT 6
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 30
7845: PUSH
7846: LD_INT 7
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 30
7855: PUSH
7856: LD_INT 8
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 70
7873: ST_TO_ADDR
// if sci then
7874: LD_VAR 0 19
7878: IFFALSE 8039
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7880: LD_ADDR_VAR 0 21
7884: PUSH
7885: LD_VAR 0 6
7889: PPUSH
7890: LD_INT 95
7892: PUSH
7893: LD_VAR 0 3
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 120
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 72
7920: ST_TO_ADDR
// if hurtUnits then
7921: LD_VAR 0 21
7925: IFFALSE 7986
// begin for i in sci do
7927: LD_ADDR_VAR 0 10
7931: PUSH
7932: LD_VAR 0 19
7936: PUSH
7937: FOR_IN
7938: IFFALSE 7982
// if IsInUnit ( i ) then
7940: LD_VAR 0 10
7944: PPUSH
7945: CALL_OW 310
7949: IFFALSE 7962
// ComExitBuilding ( i ) else
7951: LD_VAR 0 10
7955: PPUSH
7956: CALL_OW 122
7960: GO 7980
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7962: LD_VAR 0 10
7966: PPUSH
7967: LD_VAR 0 21
7971: PUSH
7972: LD_INT 1
7974: ARRAY
7975: PPUSH
7976: CALL_OW 128
7980: GO 7937
7982: POP
7983: POP
// end else
7984: GO 8039
// if lab then
7986: LD_VAR 0 13
7990: IFFALSE 8039
// begin for i in sci do
7992: LD_ADDR_VAR 0 10
7996: PUSH
7997: LD_VAR 0 19
8001: PUSH
8002: FOR_IN
8003: IFFALSE 8037
// if not IsInUnit ( i ) then
8005: LD_VAR 0 10
8009: PPUSH
8010: CALL_OW 310
8014: NOT
8015: IFFALSE 8035
// ComEnterUnit ( i , lab [ 1 ] ) ;
8017: LD_VAR 0 10
8021: PPUSH
8022: LD_VAR 0 13
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PPUSH
8031: CALL_OW 120
8035: GO 8002
8037: POP
8038: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8039: LD_ADDR_VAR 0 14
8043: PUSH
8044: LD_VAR 0 6
8048: PPUSH
8049: LD_INT 25
8051: PUSH
8052: LD_INT 2
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 72
8063: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8064: LD_ADDR_VAR 0 34
8068: PUSH
8069: LD_EXP 35
8073: ST_TO_ADDR
// if eng then
8074: LD_VAR 0 14
8078: IFFALSE 8912
// begin for i in eng do
8080: LD_ADDR_VAR 0 10
8084: PUSH
8085: LD_VAR 0 14
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8910
// begin tag := GetTag ( i ) ;
8093: LD_ADDR_VAR 0 16
8097: PUSH
8098: LD_VAR 0 10
8102: PPUSH
8103: CALL_OW 110
8107: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8108: LD_VAR 0 10
8112: PPUSH
8113: LD_VAR 0 5
8117: PPUSH
8118: CALL_OW 308
8122: IFFALSE 8153
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8124: LD_VAR 0 10
8128: PPUSH
8129: LD_VAR 0 8
8133: PUSH
8134: LD_INT 1
8136: ARRAY
8137: PPUSH
8138: LD_VAR 0 8
8142: PUSH
8143: LD_INT 2
8145: ARRAY
8146: PPUSH
8147: CALL_OW 111
// continue ;
8151: GO 8090
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8153: LD_VAR 0 10
8157: PPUSH
8158: CALL_OW 256
8162: PUSH
8163: LD_INT 800
8165: LESS
8166: PUSH
8167: LD_VAR 0 16
8171: PUSH
8172: LD_INT 1
8174: NONEQUAL
8175: AND
8176: IFFALSE 8226
// begin SetTag ( i , tHeal ) ;
8178: LD_VAR 0 10
8182: PPUSH
8183: LD_INT 1
8185: PPUSH
8186: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8190: LD_VAR 0 10
8194: PPUSH
8195: LD_VAR 0 7
8199: PUSH
8200: LD_INT 1
8202: ARRAY
8203: PPUSH
8204: LD_VAR 0 7
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PPUSH
8213: CALL_OW 111
// AddComHold ( i ) ;
8217: LD_VAR 0 10
8221: PPUSH
8222: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8226: LD_VAR 0 16
8230: PUSH
8231: LD_INT 1
8233: EQUAL
8234: PUSH
8235: LD_VAR 0 10
8239: PPUSH
8240: CALL_OW 256
8244: PUSH
8245: LD_INT 1000
8247: EQUAL
8248: AND
8249: IFFALSE 8263
// SetTag ( i , 0 ) ;
8251: LD_VAR 0 10
8255: PPUSH
8256: LD_INT 0
8258: PPUSH
8259: CALL_OW 109
// if not tag then
8263: LD_VAR 0 16
8267: NOT
8268: IFFALSE 8435
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8270: LD_ADDR_VAR 0 12
8274: PUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_INT 57
8282: PUSH
8283: EMPTY
8284: LIST
8285: PPUSH
8286: CALL_OW 70
8290: ST_TO_ADDR
// if undone then
8291: LD_VAR 0 12
8295: IFFALSE 8317
// begin ComComplete ( i , undone [ 1 ] ) ;
8297: LD_VAR 0 10
8301: PPUSH
8302: LD_VAR 0 12
8306: PUSH
8307: LD_INT 1
8309: ARRAY
8310: PPUSH
8311: CALL 35313 0 2
// continue ;
8315: GO 8090
// end ; if cr or tmp or buildingsToBuild then
8317: LD_VAR 0 18
8321: PUSH
8322: LD_VAR 0 11
8326: OR
8327: PUSH
8328: LD_VAR 0 34
8332: OR
8333: IFFALSE 8409
// begin if IsInUnit ( i ) then
8335: LD_VAR 0 10
8339: PPUSH
8340: CALL_OW 310
8344: IFFALSE 8355
// ComExitBuilding ( i ) ;
8346: LD_VAR 0 10
8350: PPUSH
8351: CALL_OW 122
// if tmp then
8355: LD_VAR 0 11
8359: IFFALSE 8375
// SetTag ( i , tRepair ) else
8361: LD_VAR 0 10
8365: PPUSH
8366: LD_INT 3
8368: PPUSH
8369: CALL_OW 109
8373: GO 8407
// if cr then
8375: LD_VAR 0 18
8379: IFFALSE 8395
// SetTag ( i , tCrates ) else
8381: LD_VAR 0 10
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 109
8393: GO 8407
// SetTag ( i , tBuild ) ;
8395: LD_VAR 0 10
8399: PPUSH
8400: LD_INT 5
8402: PPUSH
8403: CALL_OW 109
// end else
8407: GO 8435
// if not IsInUnit ( i ) then
8409: LD_VAR 0 10
8413: PPUSH
8414: CALL_OW 310
8418: NOT
8419: IFFALSE 8435
// ComEnterUnit ( i , depot ) ;
8421: LD_VAR 0 10
8425: PPUSH
8426: LD_VAR 0 33
8430: PPUSH
8431: CALL_OW 120
// end ; if tag = tRepair then
8435: LD_VAR 0 16
8439: PUSH
8440: LD_INT 3
8442: EQUAL
8443: IFFALSE 8549
// begin if IsInUnit ( i ) then
8445: LD_VAR 0 10
8449: PPUSH
8450: CALL_OW 310
8454: IFFALSE 8467
// begin ComExitBuilding ( i ) ;
8456: LD_VAR 0 10
8460: PPUSH
8461: CALL_OW 122
// continue ;
8465: GO 8090
// end ; if not tmp then
8467: LD_VAR 0 11
8471: NOT
8472: IFFALSE 8488
// begin SetTag ( i , 0 ) ;
8474: LD_VAR 0 10
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 109
// continue ;
8486: GO 8090
// end ; if not HasTask ( i ) then
8488: LD_VAR 0 10
8492: PPUSH
8493: CALL_OW 314
8497: NOT
8498: IFFALSE 8518
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8500: LD_VAR 0 10
8504: PPUSH
8505: LD_VAR 0 11
8509: PUSH
8510: LD_INT 1
8512: ARRAY
8513: PPUSH
8514: CALL_OW 130
// if not IsInarea ( i , area ) then
8518: LD_VAR 0 10
8522: PPUSH
8523: LD_VAR 0 3
8527: PPUSH
8528: CALL_OW 308
8532: NOT
8533: IFFALSE 8549
// ComMoveToarea ( i , area ) ;
8535: LD_VAR 0 10
8539: PPUSH
8540: LD_VAR 0 3
8544: PPUSH
8545: CALL_OW 113
// end ; if tag = tBuild then
8549: LD_VAR 0 16
8553: PUSH
8554: LD_INT 5
8556: EQUAL
8557: IFFALSE 8763
// begin if IsInUnit ( i ) then
8559: LD_VAR 0 10
8563: PPUSH
8564: CALL_OW 310
8568: IFFALSE 8581
// begin ComExitBuilding ( i ) ;
8570: LD_VAR 0 10
8574: PPUSH
8575: CALL_OW 122
// continue ;
8579: GO 8090
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8581: LD_VAR 0 34
8585: NOT
8586: PUSH
8587: LD_VAR 0 23
8591: OR
8592: PUSH
8593: LD_VAR 0 24
8597: OR
8598: IFFALSE 8616
// begin SetTag ( i , 0 ) ;
8600: LD_VAR 0 10
8604: PPUSH
8605: LD_INT 0
8607: PPUSH
8608: CALL_OW 109
// continue ;
8612: GO 8090
// end else
8614: GO 8655
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8616: LD_VAR 0 33
8620: PPUSH
8621: LD_VAR 0 34
8625: PUSH
8626: LD_INT 1
8628: ARRAY
8629: PUSH
8630: LD_INT 1
8632: ARRAY
8633: PPUSH
8634: CALL 68747 0 2
8638: NOT
8639: IFFALSE 8655
// begin SetTag ( i , 0 ) ;
8641: LD_VAR 0 10
8645: PPUSH
8646: LD_INT 0
8648: PPUSH
8649: CALL_OW 109
// continue ;
8653: GO 8090
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8655: LD_ADDR_VAR 0 12
8659: PUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: LD_INT 57
8667: PUSH
8668: EMPTY
8669: LIST
8670: PPUSH
8671: CALL_OW 70
8675: ST_TO_ADDR
// if undone then
8676: LD_VAR 0 12
8680: IFFALSE 8702
// begin ComComplete ( i , undone [ 1 ] ) ;
8682: LD_VAR 0 10
8686: PPUSH
8687: LD_VAR 0 12
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PPUSH
8696: CALL 35313 0 2
// continue ;
8700: GO 8090
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8702: LD_VAR 0 10
8706: PPUSH
8707: LD_VAR 0 34
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 34
8724: PUSH
8725: LD_INT 1
8727: ARRAY
8728: PUSH
8729: LD_INT 2
8731: ARRAY
8732: PPUSH
8733: LD_VAR 0 34
8737: PUSH
8738: LD_INT 1
8740: ARRAY
8741: PUSH
8742: LD_INT 3
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 34
8750: PUSH
8751: LD_INT 1
8753: ARRAY
8754: PUSH
8755: LD_INT 4
8757: ARRAY
8758: PPUSH
8759: CALL_OW 145
// end ; if tag = tCrates then
8763: LD_VAR 0 16
8767: PUSH
8768: LD_INT 2
8770: EQUAL
8771: IFFALSE 8908
// begin if IsInUnit ( i ) then
8773: LD_VAR 0 10
8777: PPUSH
8778: CALL_OW 310
8782: IFFALSE 8795
// begin ComExitBuilding ( i ) ;
8784: LD_VAR 0 10
8788: PPUSH
8789: CALL_OW 122
// continue ;
8793: GO 8090
// end ; if not cr then
8795: LD_VAR 0 18
8799: NOT
8800: IFFALSE 8816
// begin SetTag ( i , 0 ) ;
8802: LD_VAR 0 10
8806: PPUSH
8807: LD_INT 0
8809: PPUSH
8810: CALL_OW 109
// continue ;
8814: GO 8090
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8816: LD_VAR 0 10
8820: PPUSH
8821: CALL_OW 314
8825: NOT
8826: PUSH
8827: LD_INT 81
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 92
8841: PUSH
8842: LD_VAR 0 18
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PUSH
8851: LD_VAR 0 18
8855: PUSH
8856: LD_INT 2
8858: ARRAY
8859: PUSH
8860: LD_INT 12
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 69
8877: NOT
8878: AND
8879: IFFALSE 8908
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8881: LD_VAR 0 10
8885: PPUSH
8886: LD_VAR 0 18
8890: PUSH
8891: LD_INT 1
8893: ARRAY
8894: PPUSH
8895: LD_VAR 0 18
8899: PUSH
8900: LD_INT 2
8902: ARRAY
8903: PPUSH
8904: CALL_OW 117
// end ; end ;
8908: GO 8090
8910: POP
8911: POP
// end ; if vehicles then
8912: LD_VAR 0 27
8916: IFFALSE 9716
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8918: LD_ADDR_VAR 0 27
8922: PUSH
8923: LD_VAR 0 27
8927: PPUSH
8928: LD_INT 3
8930: PUSH
8931: LD_INT 2
8933: PUSH
8934: LD_INT 34
8936: PUSH
8937: LD_INT 13
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 34
8946: PUSH
8947: LD_INT 12
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 50
8965: PUSH
8966: EMPTY
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 72
8977: ST_TO_ADDR
// if vehicles then
8978: LD_VAR 0 27
8982: IFFALSE 9716
// begin for i in vehicles do
8984: LD_ADDR_VAR 0 10
8988: PUSH
8989: LD_VAR 0 27
8993: PUSH
8994: FOR_IN
8995: IFFALSE 9714
// begin tag := GetTag ( i ) ;
8997: LD_ADDR_VAR 0 16
9001: PUSH
9002: LD_VAR 0 10
9006: PPUSH
9007: CALL_OW 110
9011: ST_TO_ADDR
// if not tag then
9012: LD_VAR 0 16
9016: NOT
9017: IFFALSE 9163
// begin if GetControl ( i ) = control_manual then
9019: LD_VAR 0 10
9023: PPUSH
9024: CALL_OW 263
9028: PUSH
9029: LD_INT 1
9031: EQUAL
9032: IFFALSE 9149
// begin drivers := amDrivers ;
9034: LD_ADDR_VAR 0 25
9038: PUSH
9039: LD_EXP 38
9043: ST_TO_ADDR
// if not drivers then
9044: LD_VAR 0 25
9048: NOT
9049: IFFALSE 9129
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9051: LD_ADDR_VAR 0 25
9055: PUSH
9056: LD_VAR 0 15
9060: PPUSH
9061: LD_INT 3
9063: PUSH
9064: LD_INT 120
9066: PUSH
9067: LD_INT 7
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PPUSH
9078: CALL_OW 72
9082: ST_TO_ADDR
// if drivers then
9083: LD_VAR 0 25
9087: IFFALSE 9129
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9089: LD_VAR 0 25
9093: PUSH
9094: LD_INT 1
9096: ARRAY
9097: PPUSH
9098: LD_INT 7
9100: PPUSH
9101: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9105: LD_ADDR_EXP 38
9109: PUSH
9110: LD_EXP 38
9114: PPUSH
9115: LD_VAR 0 25
9119: PUSH
9120: LD_INT 1
9122: ARRAY
9123: PPUSH
9124: CALL 64824 0 2
9128: ST_TO_ADDR
// end ; end ; if drivers then
9129: LD_VAR 0 25
9133: IFFALSE 9147
// SetTag ( i , tBusy ) ;
9135: LD_VAR 0 10
9139: PPUSH
9140: LD_INT 8
9142: PPUSH
9143: CALL_OW 109
// continue ;
9147: GO 8994
// end ; SetTag ( i , tBusy ) ;
9149: LD_VAR 0 10
9153: PPUSH
9154: LD_INT 8
9156: PPUSH
9157: CALL_OW 109
// end else
9161: GO 9712
// if tag = tBusy then
9163: LD_VAR 0 16
9167: PUSH
9168: LD_INT 8
9170: EQUAL
9171: IFFALSE 9383
// begin if GetLives ( i ) = 1000 then
9173: LD_VAR 0 10
9177: PPUSH
9178: CALL_OW 256
9182: PUSH
9183: LD_INT 1000
9185: EQUAL
9186: IFFALSE 9381
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9188: LD_VAR 0 10
9192: PPUSH
9193: CALL_OW 263
9197: PUSH
9198: LD_INT 1
9200: EQUAL
9201: PUSH
9202: LD_VAR 0 10
9206: PPUSH
9207: CALL_OW 311
9211: NOT
9212: AND
9213: IFFALSE 9369
// begin drivers := amDrivers ;
9215: LD_ADDR_VAR 0 25
9219: PUSH
9220: LD_EXP 38
9224: ST_TO_ADDR
// if not drivers then
9225: LD_VAR 0 25
9229: NOT
9230: IFFALSE 9246
// begin SetTag ( i , 0 ) ;
9232: LD_VAR 0 10
9236: PPUSH
9237: LD_INT 0
9239: PPUSH
9240: CALL_OW 109
// continue ;
9244: GO 8994
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9246: LD_VAR 0 25
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: CALL_OW 310
9259: PUSH
9260: LD_VAR 0 25
9264: PUSH
9265: LD_INT 1
9267: ARRAY
9268: PPUSH
9269: CALL 62428 0 1
9273: NOT
9274: AND
9275: IFFALSE 9290
// ComExitBuilding ( drivers [ 1 ] ) ;
9277: LD_VAR 0 25
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9290: LD_VAR 0 27
9294: PPUSH
9295: LD_INT 120
9297: PUSH
9298: LD_INT 3
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 72
9309: PUSH
9310: LD_VAR 0 25
9314: PUSH
9315: LD_INT 1
9317: ARRAY
9318: PPUSH
9319: CALL_OW 314
9323: NOT
9324: AND
9325: PUSH
9326: LD_VAR 0 27
9330: PPUSH
9331: LD_INT 120
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 72
9345: NOT
9346: OR
9347: IFFALSE 9367
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9349: LD_VAR 0 25
9353: PUSH
9354: LD_INT 1
9356: ARRAY
9357: PPUSH
9358: LD_VAR 0 10
9362: PPUSH
9363: CALL_OW 120
// continue ;
9367: GO 8994
// end ; SetTag ( i , tAttack ) ;
9369: LD_VAR 0 10
9373: PPUSH
9374: LD_INT 13
9376: PPUSH
9377: CALL_OW 109
// end ; end else
9381: GO 9712
// if tag = tAttack then
9383: LD_VAR 0 16
9387: PUSH
9388: LD_INT 13
9390: EQUAL
9391: IFFALSE 9571
// begin enemy := enemyInBase ;
9393: LD_ADDR_VAR 0 22
9397: PUSH
9398: LD_VAR 0 23
9402: ST_TO_ADDR
// if not enemy then
9403: LD_VAR 0 22
9407: NOT
9408: IFFALSE 9420
// enemy := enemyOuterBase ;
9410: LD_ADDR_VAR 0 22
9414: PUSH
9415: LD_VAR 0 24
9419: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9420: LD_VAR 0 22
9424: NOT
9425: PUSH
9426: LD_VAR 0 10
9430: PPUSH
9431: LD_VAR 0 8
9435: PUSH
9436: LD_INT 1
9438: ARRAY
9439: PPUSH
9440: LD_VAR 0 8
9444: PUSH
9445: LD_INT 2
9447: ARRAY
9448: PPUSH
9449: CALL_OW 297
9453: PUSH
9454: LD_INT 10
9456: GREATER
9457: AND
9458: IFFALSE 9489
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9460: LD_VAR 0 10
9464: PPUSH
9465: LD_VAR 0 8
9469: PUSH
9470: LD_INT 1
9472: ARRAY
9473: PPUSH
9474: LD_VAR 0 8
9478: PUSH
9479: LD_INT 2
9481: ARRAY
9482: PPUSH
9483: CALL_OW 111
// continue ;
9487: GO 8994
// end ; if GetLives ( i ) < 650 then
9489: LD_VAR 0 10
9493: PPUSH
9494: CALL_OW 256
9498: PUSH
9499: LD_INT 650
9501: LESS
9502: IFFALSE 9545
// begin SetTag ( i , tVehRepair ) ;
9504: LD_VAR 0 10
9508: PPUSH
9509: LD_INT 9
9511: PPUSH
9512: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9516: LD_VAR 0 10
9520: PPUSH
9521: LD_VAR 0 8
9525: PUSH
9526: LD_INT 1
9528: ARRAY
9529: PPUSH
9530: LD_VAR 0 8
9534: PUSH
9535: LD_INT 2
9537: ARRAY
9538: PPUSH
9539: CALL_OW 111
// continue ;
9543: GO 8994
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9545: LD_VAR 0 10
9549: PPUSH
9550: LD_VAR 0 22
9554: PPUSH
9555: LD_VAR 0 10
9559: PPUSH
9560: CALL_OW 74
9564: PPUSH
9565: CALL_OW 115
// end else
9569: GO 9712
// if tag = tVehRepair then
9571: LD_VAR 0 16
9575: PUSH
9576: LD_INT 9
9578: EQUAL
9579: IFFALSE 9712
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9581: LD_VAR 0 10
9585: PPUSH
9586: LD_VAR 0 8
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: LD_VAR 0 8
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: CALL_OW 297
9608: PUSH
9609: LD_INT 10
9611: GREATER
9612: IFFALSE 9643
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9614: LD_VAR 0 10
9618: PPUSH
9619: LD_VAR 0 8
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 8
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 111
// continue ;
9641: GO 8994
// end ; if GetLives ( i ) = 1000 then
9643: LD_VAR 0 10
9647: PPUSH
9648: CALL_OW 256
9652: PUSH
9653: LD_INT 1000
9655: EQUAL
9656: IFFALSE 9672
// begin SetTag ( i , tBusy ) ;
9658: LD_VAR 0 10
9662: PPUSH
9663: LD_INT 8
9665: PPUSH
9666: CALL_OW 109
// continue ;
9670: GO 8994
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9672: LD_VAR 0 10
9676: PPUSH
9677: CALL_OW 263
9681: PUSH
9682: LD_INT 1
9684: EQUAL
9685: PUSH
9686: LD_VAR 0 10
9690: PPUSH
9691: CALL_OW 311
9695: AND
9696: IFFALSE 9712
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9698: LD_VAR 0 10
9702: PPUSH
9703: CALL_OW 311
9707: PPUSH
9708: CALL 66524 0 1
// end ; end ;
9712: GO 8994
9714: POP
9715: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9716: LD_ADDR_VAR 0 20
9720: PUSH
9721: LD_VAR 0 6
9725: PPUSH
9726: LD_INT 2
9728: PUSH
9729: LD_INT 25
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 25
9741: PUSH
9742: LD_INT 8
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 25
9751: PUSH
9752: LD_INT 5
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 9
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 50
9778: PUSH
9779: EMPTY
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: ST_TO_ADDR
// if sol then
9791: LD_VAR 0 20
9795: IFFALSE 10303
// begin if enemyInBase then
9797: LD_VAR 0 23
9801: IFFALSE 9980
// begin for i in sol do
9803: LD_ADDR_VAR 0 10
9807: PUSH
9808: LD_VAR 0 20
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9976
// begin tw := IsInUnit ( i ) ;
9816: LD_ADDR_VAR 0 17
9820: PUSH
9821: LD_VAR 0 10
9825: PPUSH
9826: CALL_OW 310
9830: ST_TO_ADDR
// if tw then
9831: LD_VAR 0 17
9835: IFFALSE 9918
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9837: LD_VAR 0 17
9841: PUSH
9842: LD_INT 22
9844: PUSH
9845: LD_VAR 0 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 101
9856: PUSH
9857: LD_VAR 0 35
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 2
9868: PUSH
9869: LD_INT 30
9871: PUSH
9872: LD_INT 32
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 31
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: IN
9904: NOT
9905: IFFALSE 9916
// ComExitBuilding ( i ) ;
9907: LD_VAR 0 10
9911: PPUSH
9912: CALL_OW 122
// end else
9916: GO 9974
// if IsInarea ( i , area ) then
9918: LD_VAR 0 10
9922: PPUSH
9923: LD_VAR 0 3
9927: PPUSH
9928: CALL_OW 308
9932: IFFALSE 9960
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9934: LD_VAR 0 10
9938: PPUSH
9939: LD_VAR 0 23
9943: PPUSH
9944: LD_VAR 0 10
9948: PPUSH
9949: CALL_OW 74
9953: PPUSH
9954: CALL_OW 115
9958: GO 9974
// ComMoveToarea ( i , area ) ;
9960: LD_VAR 0 10
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: CALL_OW 113
// end ;
9974: GO 9813
9976: POP
9977: POP
// end else
9978: GO 10303
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9980: LD_ADDR_VAR 0 29
9984: PUSH
9985: LD_VAR 0 3
9989: PPUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 62
9995: PUSH
9996: EMPTY
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 2
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 32
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 30
10018: PUSH
10019: LD_INT 4
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 30
10028: PUSH
10029: LD_INT 5
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 30
10038: PUSH
10039: LD_INT 31
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 70
10061: ST_TO_ADDR
// if empty then
10062: LD_VAR 0 29
10066: IFFALSE 10083
// empty := ReverseArray ( empty ) ;
10068: LD_ADDR_VAR 0 29
10072: PUSH
10073: LD_VAR 0 29
10077: PPUSH
10078: CALL 60091 0 1
10082: ST_TO_ADDR
// for i in sol do
10083: LD_ADDR_VAR 0 10
10087: PUSH
10088: LD_VAR 0 20
10092: PUSH
10093: FOR_IN
10094: IFFALSE 10301
// begin tag := GetTag ( i ) ;
10096: LD_ADDR_VAR 0 16
10100: PUSH
10101: LD_VAR 0 10
10105: PPUSH
10106: CALL_OW 110
10110: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10111: LD_VAR 0 10
10115: PPUSH
10116: CALL_OW 256
10120: PUSH
10121: LD_INT 1000
10123: LESS
10124: PUSH
10125: LD_VAR 0 16
10129: PUSH
10130: LD_INT 1
10132: NONEQUAL
10133: AND
10134: IFFALSE 10186
// begin SetTag ( i , tHeal ) ;
10136: LD_VAR 0 10
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10148: LD_VAR 0 10
10152: PPUSH
10153: LD_VAR 0 7
10157: PUSH
10158: LD_INT 1
10160: ARRAY
10161: PPUSH
10162: LD_VAR 0 7
10166: PUSH
10167: LD_INT 2
10169: ARRAY
10170: PPUSH
10171: CALL_OW 111
// AddComHold ( i ) ;
10175: LD_VAR 0 10
10179: PPUSH
10180: CALL_OW 200
// continue ;
10184: GO 10093
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10186: LD_VAR 0 10
10190: PPUSH
10191: CALL_OW 256
10195: PUSH
10196: LD_INT 1000
10198: EQUAL
10199: PUSH
10200: LD_VAR 0 16
10204: PUSH
10205: LD_INT 1
10207: EQUAL
10208: AND
10209: IFFALSE 10225
// begin SetTag ( i , 0 ) ;
10211: LD_VAR 0 10
10215: PPUSH
10216: LD_INT 0
10218: PPUSH
10219: CALL_OW 109
// continue ;
10223: GO 10093
// end ; if HasTask ( i ) then
10225: LD_VAR 0 10
10229: PPUSH
10230: CALL_OW 314
10234: IFFALSE 10238
// continue ;
10236: GO 10093
// if not IsInUnit ( i ) and not tag and empty then
10238: LD_VAR 0 10
10242: PPUSH
10243: CALL_OW 310
10247: NOT
10248: PUSH
10249: LD_VAR 0 16
10253: NOT
10254: AND
10255: PUSH
10256: LD_VAR 0 29
10260: AND
10261: IFFALSE 10299
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10263: LD_VAR 0 10
10267: PPUSH
10268: LD_VAR 0 29
10272: PUSH
10273: LD_INT 1
10275: ARRAY
10276: PPUSH
10277: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10281: LD_ADDR_VAR 0 29
10285: PUSH
10286: LD_VAR 0 29
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 3
10298: ST_TO_ADDR
// end ; end ;
10299: GO 10093
10301: POP
10302: POP
// end ; end ; end ;
10303: LD_VAR 0 9
10307: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10308: LD_EXP 40
10312: PPUSH
10313: LD_INT 50
10315: PUSH
10316: EMPTY
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: IFFALSE 10379
10325: GO 10327
10327: DISABLE
// begin enable ;
10328: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10329: LD_EXP 3
10333: PUSH
10334: LD_INT 1
10336: ARRAY
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: LD_INT 3
10343: PPUSH
10344: LD_INT 33
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: LD_EXP 40
10354: PPUSH
10355: LD_INT 27
10357: PUSH
10358: LD_INT 33
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PPUSH
10365: LD_INT 22
10367: PUSH
10368: LD_INT 17
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL 6775 0 8
// end ;
10379: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 302
10387: PUSH
10388: LD_EXP 34
10392: NOT
10393: AND
10394: IFFALSE 10464
10396: GO 10398
10398: DISABLE
// begin enable ;
10399: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10400: LD_ADDR_EXP 34
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: LD_INT 5
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 4
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 1
10449: PUSH
10450: LD_INT 6
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// end ; end_of_file
10464: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10465: LD_INT 0
10467: PPUSH
10468: PPUSH
10469: PPUSH
10470: PPUSH
10471: PPUSH
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10476: LD_ADDR_EXP 43
10480: PUSH
10481: LD_VAR 0 1
10485: PPUSH
10486: LD_INT 2
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL 27176 0 3
10496: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10497: LD_ADDR_EXP 44
10501: PUSH
10502: LD_INT 13
10504: PUSH
10505: LD_INT 1
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: LD_INT 27
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 13
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: LD_INT 27
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 13
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 26
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 13
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 13
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: LD_INT 1
10582: PUSH
10583: LD_INT 27
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: ST_TO_ADDR
// arBuildings := [ ] ;
10599: LD_ADDR_EXP 45
10603: PUSH
10604: EMPTY
10605: ST_TO_ADDR
// arVehicles := [ ] ;
10606: LD_ADDR_EXP 46
10610: PUSH
10611: EMPTY
10612: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10613: LD_ADDR_EXP 47
10617: PUSH
10618: EMPTY
10619: ST_TO_ADDR
// arDrivers := [ ] ;
10620: LD_ADDR_EXP 48
10624: PUSH
10625: EMPTY
10626: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10627: LD_ADDR_EXP 50
10631: PUSH
10632: LD_INT 2
10634: ST_TO_ADDR
// arMinesList := [ ] ;
10635: LD_ADDR_EXP 51
10639: PUSH
10640: EMPTY
10641: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10642: LD_ADDR_EXP 49
10646: PUSH
10647: LD_INT 8
10649: PUSH
10650: LD_INT 11
10652: PUSH
10653: LD_INT 12
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_OWVAR 67
10665: ARRAY
10666: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_INT 24
10674: PPUSH
10675: CALL 69763 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10679: LD_INT 23
10681: PPUSH
10682: LD_INT 7
10684: PUSH
10685: LD_INT 9
10687: PUSH
10688: LD_INT 11
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_OWVAR 67
10700: ARRAY
10701: PPUSH
10702: CALL 11267 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10706: LD_ADDR_VAR 0 8
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: LD_INT 4
10716: PUSH
10717: LD_INT 5
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: LD_OWVAR 67
10729: ARRAY
10730: ST_TO_ADDR
// uc_side := side ;
10731: LD_ADDR_OWVAR 20
10735: PUSH
10736: LD_VAR 0 1
10740: ST_TO_ADDR
// uc_nation := 2 ;
10741: LD_ADDR_OWVAR 21
10745: PUSH
10746: LD_INT 2
10748: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10749: LD_ADDR_EXP 52
10753: PUSH
10754: LD_INT 32
10756: PPUSH
10757: LD_INT 5
10759: PPUSH
10760: LD_STRING 
10762: PPUSH
10763: LD_VAR 0 8
10767: PPUSH
10768: LD_INT 800
10770: PUSH
10771: LD_INT 120
10773: PUSH
10774: LD_INT 0
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: PPUSH
10782: LD_INT 10
10784: PUSH
10785: LD_INT 11
10787: PUSH
10788: LD_INT 12
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_OWVAR 67
10800: ARRAY
10801: PUSH
10802: LD_INT 4
10804: PUSH
10805: LD_INT 6
10807: PUSH
10808: LD_INT 3
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL 35774 0 6
10821: ST_TO_ADDR
// arForceTmp := [ ] ;
10822: LD_ADDR_EXP 53
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10829: LD_ADDR_VAR 0 3
10833: PUSH
10834: LD_INT 22
10836: PUSH
10837: LD_VAR 0 1
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 30
10848: PUSH
10849: LD_INT 31
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: LD_INT 95
10861: PUSH
10862: LD_INT 5
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 58
10875: PUSH
10876: EMPTY
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: PPUSH
10885: CALL_OW 69
10889: PUSH
10890: FOR_IN
10891: IFFALSE 11020
// begin d := GetDir ( i ) ;
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: CALL_OW 254
10907: ST_TO_ADDR
// if d < 3 then
10908: LD_VAR 0 4
10912: PUSH
10913: LD_INT 3
10915: LESS
10916: IFFALSE 10934
// d := d + 3 else
10918: LD_ADDR_VAR 0 4
10922: PUSH
10923: LD_VAR 0 4
10927: PUSH
10928: LD_INT 3
10930: PLUS
10931: ST_TO_ADDR
10932: GO 10948
// d := d - 3 ;
10934: LD_ADDR_VAR 0 4
10938: PUSH
10939: LD_VAR 0 4
10943: PUSH
10944: LD_INT 3
10946: MINUS
10947: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10948: LD_INT 0
10950: PPUSH
10951: LD_VAR 0 8
10955: PPUSH
10956: CALL_OW 381
// un := CreateHuman ;
10960: LD_ADDR_VAR 0 6
10964: PUSH
10965: CALL_OW 44
10969: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10970: LD_ADDR_EXP 53
10974: PUSH
10975: LD_EXP 53
10979: PPUSH
10980: LD_VAR 0 6
10984: PPUSH
10985: CALL 64824 0 2
10989: ST_TO_ADDR
// SetDir ( un , d ) ;
10990: LD_VAR 0 6
10994: PPUSH
10995: LD_VAR 0 4
10999: PPUSH
11000: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11004: LD_VAR 0 6
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: CALL_OW 52
// end ;
11018: GO 10890
11020: POP
11021: POP
// for i := 1 to Difficulty do
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: DOUBLE
11028: LD_INT 1
11030: DEC
11031: ST_TO_ADDR
11032: LD_OWVAR 67
11036: PUSH
11037: FOR_TO
11038: IFFALSE 11104
// begin PrepareSoldier ( false , skill ) ;
11040: LD_INT 0
11042: PPUSH
11043: LD_VAR 0 8
11047: PPUSH
11048: CALL_OW 381
// un := CreateHuman ;
11052: LD_ADDR_VAR 0 6
11056: PUSH
11057: CALL_OW 44
11061: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11062: LD_ADDR_EXP 53
11066: PUSH
11067: LD_EXP 53
11071: PPUSH
11072: LD_VAR 0 6
11076: PPUSH
11077: CALL 64824 0 2
11081: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11082: LD_VAR 0 6
11086: PPUSH
11087: LD_INT 215
11089: PPUSH
11090: LD_INT 102
11092: PPUSH
11093: CALL_OW 428
11097: PPUSH
11098: CALL_OW 52
// end ;
11102: GO 11037
11104: POP
11105: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11106: LD_ADDR_VAR 0 3
11110: PUSH
11111: LD_INT 22
11113: PUSH
11114: LD_VAR 0 1
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 21
11125: PUSH
11126: LD_INT 3
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PPUSH
11137: CALL_OW 69
11141: PUSH
11142: FOR_IN
11143: IFFALSE 11176
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11145: LD_VAR 0 3
11149: PPUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 5
11155: PUSH
11156: LD_INT 7
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: PPUSH
11170: CALL_OW 241
11174: GO 11142
11176: POP
11177: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 1
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 30
11197: PUSH
11198: LD_INT 32
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PPUSH
11209: CALL_OW 69
11213: PUSH
11214: FOR_IN
11215: IFFALSE 11260
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11217: LD_VAR 0 3
11221: PPUSH
11222: LD_INT 27
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 24
11230: PUSH
11231: LD_INT 27
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: PUSH
11240: LD_VAR 0 3
11244: PUSH
11245: LD_INT 4
11247: MOD
11248: PUSH
11249: LD_INT 1
11251: PLUS
11252: ARRAY
11253: PPUSH
11254: CALL_OW 431
11258: GO 11214
11260: POP
11261: POP
// end ;
11262: LD_VAR 0 2
11266: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11267: LD_INT 0
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11273: LD_ADDR_VAR 0 5
11277: PUSH
11278: LD_VAR 0 1
11282: PPUSH
11283: LD_INT 0
11285: PPUSH
11286: CALL_OW 517
11290: ST_TO_ADDR
// if not tmp then
11291: LD_VAR 0 5
11295: NOT
11296: IFFALSE 11300
// exit ;
11298: GO 11542
// for i := 1 to n do
11300: LD_ADDR_VAR 0 4
11304: PUSH
11305: DOUBLE
11306: LD_INT 1
11308: DEC
11309: ST_TO_ADDR
11310: LD_VAR 0 2
11314: PUSH
11315: FOR_TO
11316: IFFALSE 11540
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11318: LD_ADDR_VAR 0 6
11322: PUSH
11323: LD_INT 1
11325: PPUSH
11326: LD_VAR 0 5
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: CALL_OW 12
11339: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11340: LD_VAR 0 5
11344: PUSH
11345: LD_INT 1
11347: ARRAY
11348: PUSH
11349: LD_VAR 0 6
11353: ARRAY
11354: PPUSH
11355: LD_VAR 0 5
11359: PUSH
11360: LD_INT 2
11362: ARRAY
11363: PUSH
11364: LD_VAR 0 6
11368: ARRAY
11369: PPUSH
11370: LD_EXP 3
11374: PUSH
11375: LD_INT 2
11377: ARRAY
11378: PPUSH
11379: LD_INT 0
11381: PPUSH
11382: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11386: LD_ADDR_EXP 51
11390: PUSH
11391: LD_EXP 51
11395: PPUSH
11396: LD_EXP 51
11400: PUSH
11401: LD_INT 1
11403: PLUS
11404: PPUSH
11405: LD_VAR 0 5
11409: PUSH
11410: LD_INT 1
11412: ARRAY
11413: PUSH
11414: LD_VAR 0 6
11418: ARRAY
11419: PPUSH
11420: CALL_OW 2
11424: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11425: LD_ADDR_EXP 51
11429: PUSH
11430: LD_EXP 51
11434: PPUSH
11435: LD_EXP 51
11439: PUSH
11440: LD_INT 1
11442: PLUS
11443: PPUSH
11444: LD_VAR 0 5
11448: PUSH
11449: LD_INT 2
11451: ARRAY
11452: PUSH
11453: LD_VAR 0 6
11457: ARRAY
11458: PPUSH
11459: CALL_OW 2
11463: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11464: LD_ADDR_VAR 0 5
11468: PUSH
11469: LD_VAR 0 5
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: LD_VAR 0 5
11481: PUSH
11482: LD_INT 1
11484: ARRAY
11485: PPUSH
11486: LD_VAR 0 6
11490: PPUSH
11491: CALL_OW 3
11495: PPUSH
11496: CALL_OW 1
11500: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11501: LD_ADDR_VAR 0 5
11505: PUSH
11506: LD_VAR 0 5
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: LD_VAR 0 5
11518: PUSH
11519: LD_INT 2
11521: ARRAY
11522: PPUSH
11523: LD_VAR 0 6
11527: PPUSH
11528: CALL_OW 3
11532: PPUSH
11533: CALL_OW 1
11537: ST_TO_ADDR
// end ;
11538: GO 11315
11540: POP
11541: POP
// end ;
11542: LD_VAR 0 3
11546: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
11567: PPUSH
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
// enable ;
11576: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11577: LD_ADDR_VAR 0 10
11581: PUSH
11582: LD_INT 81
11584: PUSH
11585: LD_VAR 0 1
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 69
11598: ST_TO_ADDR
// if tmp then
11599: LD_VAR 0 10
11603: IFFALSE 11624
// enemySide := GetSide ( tmp [ 1 ] ) ;
11605: LD_ADDR_VAR 0 34
11609: PUSH
11610: LD_VAR 0 10
11614: PUSH
11615: LD_INT 1
11617: ARRAY
11618: PPUSH
11619: CALL_OW 255
11623: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11624: LD_ADDR_VAR 0 22
11628: PUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 81
11636: PUSH
11637: LD_VAR 0 1
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 70
11650: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11651: LD_ADDR_VAR 0 23
11655: PUSH
11656: LD_VAR 0 4
11660: PPUSH
11661: LD_INT 81
11663: PUSH
11664: LD_VAR 0 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 70
11677: ST_TO_ADDR
// vehicles := arVehicles ;
11678: LD_ADDR_VAR 0 26
11682: PUSH
11683: LD_EXP 46
11687: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11688: LD_ADDR_VAR 0 32
11692: PUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 22
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 30
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 70
11746: ST_TO_ADDR
// if depot then
11747: LD_VAR 0 32
11751: IFFALSE 11767
// depot := depot [ 1 ] ;
11753: LD_ADDR_VAR 0 32
11757: PUSH
11758: LD_VAR 0 32
11762: PUSH
11763: LD_INT 1
11765: ARRAY
11766: ST_TO_ADDR
// if arTech then
11767: LD_EXP 43
11771: IFFALSE 11930
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11773: LD_ADDR_VAR 0 12
11777: PUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 22
11785: PUSH
11786: LD_VAR 0 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 50
11797: PUSH
11798: EMPTY
11799: LIST
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 6
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 30
11816: PUSH
11817: LD_INT 7
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 8
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 70
11849: ST_TO_ADDR
// if lab then
11850: LD_VAR 0 12
11854: IFFALSE 11930
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11856: LD_VAR 0 12
11860: PUSH
11861: LD_INT 1
11863: ARRAY
11864: PPUSH
11865: CALL_OW 461
11869: PUSH
11870: LD_INT 2
11872: EQUAL
11873: IFFALSE 11930
// begin for i in arTech do
11875: LD_ADDR_VAR 0 9
11879: PUSH
11880: LD_EXP 43
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11928
// if CanBeResearched ( lab [ 1 ] , i ) then
11888: LD_VAR 0 12
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: LD_VAR 0 9
11901: PPUSH
11902: CALL_OW 430
11906: IFFALSE 11926
// begin AddComResearch ( lab [ 1 ] , i ) ;
11908: LD_VAR 0 12
11912: PUSH
11913: LD_INT 1
11915: ARRAY
11916: PPUSH
11917: LD_VAR 0 9
11921: PPUSH
11922: CALL_OW 184
// end ;
11926: GO 11885
11928: POP
11929: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11930: LD_ADDR_VAR 0 29
11934: PUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 22
11942: PUSH
11943: LD_VAR 0 1
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 30
11954: PUSH
11955: LD_INT 3
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 50
11964: PUSH
11965: EMPTY
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 70
11977: ST_TO_ADDR
// if fac then
11978: LD_VAR 0 29
11982: IFFALSE 12317
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11984: LD_VAR 0 29
11988: PUSH
11989: LD_INT 1
11991: ARRAY
11992: PPUSH
11993: CALL_OW 461
11997: PUSH
11998: LD_INT 2
12000: EQUAL
12001: IFFALSE 12317
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12003: LD_ADDR_VAR 0 30
12007: PUSH
12008: LD_VAR 0 3
12012: PPUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 30
12018: PUSH
12019: LD_INT 32
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: LD_INT 33
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 35
12043: PUSH
12044: LD_INT 0
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PPUSH
12055: CALL_OW 70
12059: ST_TO_ADDR
// if emptyTowers then
12060: LD_VAR 0 30
12064: IFFALSE 12114
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12066: LD_ADDR_VAR 0 31
12070: PUSH
12071: LD_VAR 0 30
12075: PUSH
12076: LD_INT 1
12078: ARRAY
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: CALL 37460 0 2
12089: ST_TO_ADDR
// if weapon then
12090: LD_VAR 0 31
12094: IFFALSE 12114
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12096: LD_VAR 0 30
12100: PUSH
12101: LD_INT 1
12103: ARRAY
12104: PPUSH
12105: LD_VAR 0 31
12109: PPUSH
12110: CALL_OW 148
// end ; if arConstructList then
12114: LD_EXP 44
12118: IFFALSE 12317
// for i := 1 to Count ( arConstructList ) do
12120: LD_ADDR_VAR 0 9
12124: PUSH
12125: DOUBLE
12126: LD_INT 1
12128: DEC
12129: ST_TO_ADDR
12130: LD_EXP 44
12134: PPUSH
12135: CALL 29215 0 1
12139: PUSH
12140: FOR_TO
12141: IFFALSE 12315
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12143: LD_VAR 0 29
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_EXP 44
12156: PUSH
12157: LD_VAR 0 9
12161: ARRAY
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: PPUSH
12167: LD_EXP 44
12171: PUSH
12172: LD_VAR 0 9
12176: ARRAY
12177: PUSH
12178: LD_INT 2
12180: ARRAY
12181: PPUSH
12182: LD_EXP 44
12186: PUSH
12187: LD_VAR 0 9
12191: ARRAY
12192: PUSH
12193: LD_INT 3
12195: ARRAY
12196: PPUSH
12197: LD_EXP 44
12201: PUSH
12202: LD_VAR 0 9
12206: ARRAY
12207: PUSH
12208: LD_INT 4
12210: ARRAY
12211: PPUSH
12212: CALL_OW 448
12216: IFFALSE 12313
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12218: LD_VAR 0 29
12222: PUSH
12223: LD_INT 1
12225: ARRAY
12226: PPUSH
12227: LD_EXP 44
12231: PUSH
12232: LD_VAR 0 9
12236: ARRAY
12237: PUSH
12238: LD_INT 1
12240: ARRAY
12241: PPUSH
12242: LD_EXP 44
12246: PUSH
12247: LD_VAR 0 9
12251: ARRAY
12252: PUSH
12253: LD_INT 2
12255: ARRAY
12256: PPUSH
12257: LD_EXP 44
12261: PUSH
12262: LD_VAR 0 9
12266: ARRAY
12267: PUSH
12268: LD_INT 3
12270: ARRAY
12271: PPUSH
12272: LD_EXP 44
12276: PUSH
12277: LD_VAR 0 9
12281: ARRAY
12282: PUSH
12283: LD_INT 4
12285: ARRAY
12286: PPUSH
12287: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12291: LD_ADDR_EXP 44
12295: PUSH
12296: LD_EXP 44
12300: PPUSH
12301: LD_VAR 0 9
12305: PPUSH
12306: CALL_OW 3
12310: ST_TO_ADDR
// break ;
12311: GO 12315
// end ; end ;
12313: GO 12140
12315: POP
12316: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12317: LD_ADDR_VAR 0 10
12321: PUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 22
12329: PUSH
12330: LD_VAR 0 1
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 21
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 3
12351: PUSH
12352: LD_INT 57
12354: PUSH
12355: EMPTY
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 3
12364: PUSH
12365: LD_INT 24
12367: PUSH
12368: LD_INT 1000
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 70
12389: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12390: LD_ADDR_VAR 0 17
12394: PUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: CALL_OW 435
12404: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12405: LD_ADDR_VAR 0 14
12409: PUSH
12410: LD_VAR 0 5
12414: PPUSH
12415: LD_INT 25
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 50
12427: PUSH
12428: EMPTY
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PPUSH
12435: CALL_OW 72
12439: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12440: LD_VAR 0 14
12444: PPUSH
12445: LD_INT 3
12447: PUSH
12448: LD_INT 120
12450: PUSH
12451: LD_INT 7
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: LD_INT 54
12467: PUSH
12468: EMPTY
12469: LIST
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 72
12483: PUSH
12484: LD_VAR 0 29
12488: PUSH
12489: LD_INT 1
12491: ARRAY
12492: PPUSH
12493: CALL_OW 302
12497: AND
12498: IFFALSE 12557
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12500: LD_VAR 0 14
12504: PPUSH
12505: LD_INT 3
12507: PUSH
12508: LD_INT 120
12510: PUSH
12511: LD_INT 7
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: LD_INT 54
12527: PUSH
12528: EMPTY
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 72
12543: PPUSH
12544: LD_VAR 0 29
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PPUSH
12553: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12557: LD_ADDR_VAR 0 18
12561: PUSH
12562: LD_VAR 0 5
12566: PPUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 4
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 50
12579: PUSH
12580: EMPTY
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 72
12591: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12592: LD_ADDR_VAR 0 12
12596: PUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 30
12607: PUSH
12608: LD_INT 6
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 30
12617: PUSH
12618: LD_INT 7
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 8
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 70
12645: ST_TO_ADDR
// if sci then
12646: LD_VAR 0 18
12650: IFFALSE 12811
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12652: LD_ADDR_VAR 0 20
12656: PUSH
12657: LD_VAR 0 5
12661: PPUSH
12662: LD_INT 95
12664: PUSH
12665: LD_VAR 0 3
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 120
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PPUSH
12688: CALL_OW 72
12692: ST_TO_ADDR
// if hurtUnits then
12693: LD_VAR 0 20
12697: IFFALSE 12758
// begin for i in sci do
12699: LD_ADDR_VAR 0 9
12703: PUSH
12704: LD_VAR 0 18
12708: PUSH
12709: FOR_IN
12710: IFFALSE 12754
// if IsInUnit ( i ) then
12712: LD_VAR 0 9
12716: PPUSH
12717: CALL_OW 310
12721: IFFALSE 12734
// ComExitBuilding ( i ) else
12723: LD_VAR 0 9
12727: PPUSH
12728: CALL_OW 122
12732: GO 12752
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12734: LD_VAR 0 9
12738: PPUSH
12739: LD_VAR 0 20
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PPUSH
12748: CALL_OW 128
12752: GO 12709
12754: POP
12755: POP
// end else
12756: GO 12811
// if lab then
12758: LD_VAR 0 12
12762: IFFALSE 12811
// begin for i in sci do
12764: LD_ADDR_VAR 0 9
12768: PUSH
12769: LD_VAR 0 18
12773: PUSH
12774: FOR_IN
12775: IFFALSE 12809
// if not IsInUnit ( i ) then
12777: LD_VAR 0 9
12781: PPUSH
12782: CALL_OW 310
12786: NOT
12787: IFFALSE 12807
// ComEnterUnit ( i , lab [ 1 ] ) ;
12789: LD_VAR 0 9
12793: PPUSH
12794: LD_VAR 0 12
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: CALL_OW 120
12807: GO 12774
12809: POP
12810: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12811: LD_ADDR_VAR 0 13
12815: PUSH
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 25
12823: PUSH
12824: LD_INT 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 72
12835: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12836: LD_ADDR_VAR 0 33
12840: PUSH
12841: LD_EXP 45
12845: ST_TO_ADDR
// if eng then
12846: LD_VAR 0 13
12850: IFFALSE 13684
// begin for i in eng do
12852: LD_ADDR_VAR 0 9
12856: PUSH
12857: LD_VAR 0 13
12861: PUSH
12862: FOR_IN
12863: IFFALSE 13682
// begin tag := GetTag ( i ) ;
12865: LD_ADDR_VAR 0 15
12869: PUSH
12870: LD_VAR 0 9
12874: PPUSH
12875: CALL_OW 110
12879: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12880: LD_VAR 0 9
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: CALL_OW 308
12894: IFFALSE 12925
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12896: LD_VAR 0 9
12900: PPUSH
12901: LD_VAR 0 7
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 7
12914: PUSH
12915: LD_INT 2
12917: ARRAY
12918: PPUSH
12919: CALL_OW 111
// continue ;
12923: GO 12862
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12925: LD_VAR 0 9
12929: PPUSH
12930: CALL_OW 256
12934: PUSH
12935: LD_INT 800
12937: LESS
12938: PUSH
12939: LD_VAR 0 15
12943: PUSH
12944: LD_INT 1
12946: NONEQUAL
12947: AND
12948: IFFALSE 12998
// begin SetTag ( i , tHeal ) ;
12950: LD_VAR 0 9
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12962: LD_VAR 0 9
12966: PPUSH
12967: LD_VAR 0 6
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_VAR 0 6
12980: PUSH
12981: LD_INT 2
12983: ARRAY
12984: PPUSH
12985: CALL_OW 111
// AddComHold ( i ) ;
12989: LD_VAR 0 9
12993: PPUSH
12994: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12998: LD_VAR 0 15
13002: PUSH
13003: LD_INT 1
13005: EQUAL
13006: PUSH
13007: LD_VAR 0 9
13011: PPUSH
13012: CALL_OW 256
13016: PUSH
13017: LD_INT 1000
13019: EQUAL
13020: AND
13021: IFFALSE 13035
// SetTag ( i , 0 ) ;
13023: LD_VAR 0 9
13027: PPUSH
13028: LD_INT 0
13030: PPUSH
13031: CALL_OW 109
// if not tag then
13035: LD_VAR 0 15
13039: NOT
13040: IFFALSE 13207
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13042: LD_ADDR_VAR 0 11
13046: PUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 57
13054: PUSH
13055: EMPTY
13056: LIST
13057: PPUSH
13058: CALL_OW 70
13062: ST_TO_ADDR
// if undone then
13063: LD_VAR 0 11
13067: IFFALSE 13089
// begin ComComplete ( i , undone [ 1 ] ) ;
13069: LD_VAR 0 9
13073: PPUSH
13074: LD_VAR 0 11
13078: PUSH
13079: LD_INT 1
13081: ARRAY
13082: PPUSH
13083: CALL 35313 0 2
// continue ;
13087: GO 12862
// end ; if cr or tmp or buildingsToBuild then
13089: LD_VAR 0 17
13093: PUSH
13094: LD_VAR 0 10
13098: OR
13099: PUSH
13100: LD_VAR 0 33
13104: OR
13105: IFFALSE 13181
// begin if IsInUnit ( i ) then
13107: LD_VAR 0 9
13111: PPUSH
13112: CALL_OW 310
13116: IFFALSE 13127
// ComExitBuilding ( i ) ;
13118: LD_VAR 0 9
13122: PPUSH
13123: CALL_OW 122
// if tmp then
13127: LD_VAR 0 10
13131: IFFALSE 13147
// SetTag ( i , tRepair ) else
13133: LD_VAR 0 9
13137: PPUSH
13138: LD_INT 3
13140: PPUSH
13141: CALL_OW 109
13145: GO 13179
// if cr then
13147: LD_VAR 0 17
13151: IFFALSE 13167
// SetTag ( i , tCrates ) else
13153: LD_VAR 0 9
13157: PPUSH
13158: LD_INT 2
13160: PPUSH
13161: CALL_OW 109
13165: GO 13179
// SetTag ( i , tBuild ) ;
13167: LD_VAR 0 9
13171: PPUSH
13172: LD_INT 5
13174: PPUSH
13175: CALL_OW 109
// end else
13179: GO 13207
// if not IsInUnit ( i ) then
13181: LD_VAR 0 9
13185: PPUSH
13186: CALL_OW 310
13190: NOT
13191: IFFALSE 13207
// ComEnterUnit ( i , depot ) ;
13193: LD_VAR 0 9
13197: PPUSH
13198: LD_VAR 0 32
13202: PPUSH
13203: CALL_OW 120
// end ; if tag = tRepair then
13207: LD_VAR 0 15
13211: PUSH
13212: LD_INT 3
13214: EQUAL
13215: IFFALSE 13321
// begin if IsInUnit ( i ) then
13217: LD_VAR 0 9
13221: PPUSH
13222: CALL_OW 310
13226: IFFALSE 13239
// begin ComExitBuilding ( i ) ;
13228: LD_VAR 0 9
13232: PPUSH
13233: CALL_OW 122
// continue ;
13237: GO 12862
// end ; if not tmp then
13239: LD_VAR 0 10
13243: NOT
13244: IFFALSE 13260
// begin SetTag ( i , 0 ) ;
13246: LD_VAR 0 9
13250: PPUSH
13251: LD_INT 0
13253: PPUSH
13254: CALL_OW 109
// continue ;
13258: GO 12862
// end ; if not HasTask ( i ) then
13260: LD_VAR 0 9
13264: PPUSH
13265: CALL_OW 314
13269: NOT
13270: IFFALSE 13290
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 10
13281: PUSH
13282: LD_INT 1
13284: ARRAY
13285: PPUSH
13286: CALL_OW 130
// if not IsInArea ( i , area ) then
13290: LD_VAR 0 9
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: CALL_OW 308
13304: NOT
13305: IFFALSE 13321
// ComMoveToArea ( i , area ) ;
13307: LD_VAR 0 9
13311: PPUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: CALL_OW 113
// end ; if tag = tBuild then
13321: LD_VAR 0 15
13325: PUSH
13326: LD_INT 5
13328: EQUAL
13329: IFFALSE 13535
// begin if IsInUnit ( i ) then
13331: LD_VAR 0 9
13335: PPUSH
13336: CALL_OW 310
13340: IFFALSE 13353
// begin ComExitBuilding ( i ) ;
13342: LD_VAR 0 9
13346: PPUSH
13347: CALL_OW 122
// continue ;
13351: GO 12862
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13353: LD_VAR 0 33
13357: NOT
13358: PUSH
13359: LD_VAR 0 22
13363: OR
13364: PUSH
13365: LD_VAR 0 23
13369: OR
13370: IFFALSE 13388
// begin SetTag ( i , 0 ) ;
13372: LD_VAR 0 9
13376: PPUSH
13377: LD_INT 0
13379: PPUSH
13380: CALL_OW 109
// continue ;
13384: GO 12862
// end else
13386: GO 13427
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13388: LD_VAR 0 32
13392: PPUSH
13393: LD_VAR 0 33
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PUSH
13402: LD_INT 1
13404: ARRAY
13405: PPUSH
13406: CALL 68747 0 2
13410: NOT
13411: IFFALSE 13427
// begin SetTag ( i , 0 ) ;
13413: LD_VAR 0 9
13417: PPUSH
13418: LD_INT 0
13420: PPUSH
13421: CALL_OW 109
// continue ;
13425: GO 12862
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13427: LD_ADDR_VAR 0 11
13431: PUSH
13432: LD_VAR 0 3
13436: PPUSH
13437: LD_INT 57
13439: PUSH
13440: EMPTY
13441: LIST
13442: PPUSH
13443: CALL_OW 70
13447: ST_TO_ADDR
// if undone then
13448: LD_VAR 0 11
13452: IFFALSE 13474
// begin ComComplete ( i , undone [ 1 ] ) ;
13454: LD_VAR 0 9
13458: PPUSH
13459: LD_VAR 0 11
13463: PUSH
13464: LD_INT 1
13466: ARRAY
13467: PPUSH
13468: CALL 35313 0 2
// continue ;
13472: GO 12862
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13474: LD_VAR 0 9
13478: PPUSH
13479: LD_VAR 0 33
13483: PUSH
13484: LD_INT 1
13486: ARRAY
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: LD_VAR 0 33
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PUSH
13501: LD_INT 2
13503: ARRAY
13504: PPUSH
13505: LD_VAR 0 33
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PUSH
13514: LD_INT 3
13516: ARRAY
13517: PPUSH
13518: LD_VAR 0 33
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PUSH
13527: LD_INT 4
13529: ARRAY
13530: PPUSH
13531: CALL_OW 145
// end ; if tag = tCrates then
13535: LD_VAR 0 15
13539: PUSH
13540: LD_INT 2
13542: EQUAL
13543: IFFALSE 13680
// begin if IsInUnit ( i ) then
13545: LD_VAR 0 9
13549: PPUSH
13550: CALL_OW 310
13554: IFFALSE 13567
// begin ComExitBuilding ( i ) ;
13556: LD_VAR 0 9
13560: PPUSH
13561: CALL_OW 122
// continue ;
13565: GO 12862
// end ; if not cr then
13567: LD_VAR 0 17
13571: NOT
13572: IFFALSE 13588
// begin SetTag ( i , 0 ) ;
13574: LD_VAR 0 9
13578: PPUSH
13579: LD_INT 0
13581: PPUSH
13582: CALL_OW 109
// continue ;
13586: GO 12862
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13588: LD_VAR 0 9
13592: PPUSH
13593: CALL_OW 314
13597: NOT
13598: PUSH
13599: LD_INT 81
13601: PUSH
13602: LD_VAR 0 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 92
13613: PUSH
13614: LD_VAR 0 17
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PUSH
13623: LD_VAR 0 17
13627: PUSH
13628: LD_INT 2
13630: ARRAY
13631: PUSH
13632: LD_INT 12
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: NOT
13650: AND
13651: IFFALSE 13680
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13653: LD_VAR 0 9
13657: PPUSH
13658: LD_VAR 0 17
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_VAR 0 17
13671: PUSH
13672: LD_INT 2
13674: ARRAY
13675: PPUSH
13676: CALL_OW 117
// end ; end ;
13680: GO 12862
13682: POP
13683: POP
// end ; if vehicles then
13684: LD_VAR 0 26
13688: IFFALSE 14488
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13690: LD_ADDR_VAR 0 26
13694: PUSH
13695: LD_VAR 0 26
13699: PPUSH
13700: LD_INT 3
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 88
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 32
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 50
13737: PUSH
13738: EMPTY
13739: LIST
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PPUSH
13745: CALL_OW 72
13749: ST_TO_ADDR
// if vehicles then
13750: LD_VAR 0 26
13754: IFFALSE 14488
// begin for i in vehicles do
13756: LD_ADDR_VAR 0 9
13760: PUSH
13761: LD_VAR 0 26
13765: PUSH
13766: FOR_IN
13767: IFFALSE 14486
// begin tag := GetTag ( i ) ;
13769: LD_ADDR_VAR 0 15
13773: PUSH
13774: LD_VAR 0 9
13778: PPUSH
13779: CALL_OW 110
13783: ST_TO_ADDR
// if not tag then
13784: LD_VAR 0 15
13788: NOT
13789: IFFALSE 13935
// begin if GetControl ( i ) = control_manual then
13791: LD_VAR 0 9
13795: PPUSH
13796: CALL_OW 263
13800: PUSH
13801: LD_INT 1
13803: EQUAL
13804: IFFALSE 13921
// begin drivers := arDrivers ;
13806: LD_ADDR_VAR 0 24
13810: PUSH
13811: LD_EXP 48
13815: ST_TO_ADDR
// if not drivers then
13816: LD_VAR 0 24
13820: NOT
13821: IFFALSE 13901
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13823: LD_ADDR_VAR 0 24
13827: PUSH
13828: LD_VAR 0 14
13832: PPUSH
13833: LD_INT 3
13835: PUSH
13836: LD_INT 120
13838: PUSH
13839: LD_INT 7
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PPUSH
13850: CALL_OW 72
13854: ST_TO_ADDR
// if drivers then
13855: LD_VAR 0 24
13859: IFFALSE 13901
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13861: LD_VAR 0 24
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: LD_INT 7
13872: PPUSH
13873: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13877: LD_ADDR_EXP 48
13881: PUSH
13882: LD_EXP 48
13886: PPUSH
13887: LD_VAR 0 24
13891: PUSH
13892: LD_INT 1
13894: ARRAY
13895: PPUSH
13896: CALL 64824 0 2
13900: ST_TO_ADDR
// end ; end ; if drivers then
13901: LD_VAR 0 24
13905: IFFALSE 13919
// SetTag ( i , tBusy ) ;
13907: LD_VAR 0 9
13911: PPUSH
13912: LD_INT 8
13914: PPUSH
13915: CALL_OW 109
// continue ;
13919: GO 13766
// end ; SetTag ( i , tBusy ) ;
13921: LD_VAR 0 9
13925: PPUSH
13926: LD_INT 8
13928: PPUSH
13929: CALL_OW 109
// end else
13933: GO 14484
// if tag = tBusy then
13935: LD_VAR 0 15
13939: PUSH
13940: LD_INT 8
13942: EQUAL
13943: IFFALSE 14155
// begin if GetLives ( i ) = 1000 then
13945: LD_VAR 0 9
13949: PPUSH
13950: CALL_OW 256
13954: PUSH
13955: LD_INT 1000
13957: EQUAL
13958: IFFALSE 14153
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13960: LD_VAR 0 9
13964: PPUSH
13965: CALL_OW 263
13969: PUSH
13970: LD_INT 1
13972: EQUAL
13973: PUSH
13974: LD_VAR 0 9
13978: PPUSH
13979: CALL_OW 311
13983: NOT
13984: AND
13985: IFFALSE 14141
// begin drivers := arDrivers ;
13987: LD_ADDR_VAR 0 24
13991: PUSH
13992: LD_EXP 48
13996: ST_TO_ADDR
// if not drivers then
13997: LD_VAR 0 24
14001: NOT
14002: IFFALSE 14018
// begin SetTag ( i , 0 ) ;
14004: LD_VAR 0 9
14008: PPUSH
14009: LD_INT 0
14011: PPUSH
14012: CALL_OW 109
// continue ;
14016: GO 13766
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14018: LD_VAR 0 24
14022: PUSH
14023: LD_INT 1
14025: ARRAY
14026: PPUSH
14027: CALL_OW 310
14031: PUSH
14032: LD_VAR 0 24
14036: PUSH
14037: LD_INT 1
14039: ARRAY
14040: PPUSH
14041: CALL 62428 0 1
14045: NOT
14046: AND
14047: IFFALSE 14062
// ComExitBuilding ( drivers [ 1 ] ) ;
14049: LD_VAR 0 24
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14062: LD_VAR 0 26
14066: PPUSH
14067: LD_INT 120
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 72
14081: PUSH
14082: LD_VAR 0 24
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: CALL_OW 314
14095: NOT
14096: AND
14097: PUSH
14098: LD_VAR 0 26
14102: PPUSH
14103: LD_INT 120
14105: PUSH
14106: LD_INT 3
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 72
14117: NOT
14118: OR
14119: IFFALSE 14139
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14121: LD_VAR 0 24
14125: PUSH
14126: LD_INT 1
14128: ARRAY
14129: PPUSH
14130: LD_VAR 0 9
14134: PPUSH
14135: CALL_OW 120
// continue ;
14139: GO 13766
// end ; SetTag ( i , tAttack ) ;
14141: LD_VAR 0 9
14145: PPUSH
14146: LD_INT 13
14148: PPUSH
14149: CALL_OW 109
// end ; end else
14153: GO 14484
// if tag = tAttack then
14155: LD_VAR 0 15
14159: PUSH
14160: LD_INT 13
14162: EQUAL
14163: IFFALSE 14343
// begin enemy := enemyInBase ;
14165: LD_ADDR_VAR 0 21
14169: PUSH
14170: LD_VAR 0 22
14174: ST_TO_ADDR
// if not enemy then
14175: LD_VAR 0 21
14179: NOT
14180: IFFALSE 14192
// enemy := enemyOuterBase ;
14182: LD_ADDR_VAR 0 21
14186: PUSH
14187: LD_VAR 0 23
14191: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14192: LD_VAR 0 21
14196: NOT
14197: PUSH
14198: LD_VAR 0 9
14202: PPUSH
14203: LD_VAR 0 7
14207: PUSH
14208: LD_INT 1
14210: ARRAY
14211: PPUSH
14212: LD_VAR 0 7
14216: PUSH
14217: LD_INT 2
14219: ARRAY
14220: PPUSH
14221: CALL_OW 297
14225: PUSH
14226: LD_INT 10
14228: GREATER
14229: AND
14230: IFFALSE 14261
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14232: LD_VAR 0 9
14236: PPUSH
14237: LD_VAR 0 7
14241: PUSH
14242: LD_INT 1
14244: ARRAY
14245: PPUSH
14246: LD_VAR 0 7
14250: PUSH
14251: LD_INT 2
14253: ARRAY
14254: PPUSH
14255: CALL_OW 111
// continue ;
14259: GO 13766
// end ; if GetLives ( i ) < 650 then
14261: LD_VAR 0 9
14265: PPUSH
14266: CALL_OW 256
14270: PUSH
14271: LD_INT 650
14273: LESS
14274: IFFALSE 14317
// begin SetTag ( i , tVehRepair ) ;
14276: LD_VAR 0 9
14280: PPUSH
14281: LD_INT 9
14283: PPUSH
14284: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14288: LD_VAR 0 9
14292: PPUSH
14293: LD_VAR 0 7
14297: PUSH
14298: LD_INT 1
14300: ARRAY
14301: PPUSH
14302: LD_VAR 0 7
14306: PUSH
14307: LD_INT 2
14309: ARRAY
14310: PPUSH
14311: CALL_OW 111
// continue ;
14315: GO 13766
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14317: LD_VAR 0 9
14321: PPUSH
14322: LD_VAR 0 21
14326: PPUSH
14327: LD_VAR 0 9
14331: PPUSH
14332: CALL_OW 74
14336: PPUSH
14337: CALL_OW 115
// end else
14341: GO 14484
// if tag = tVehRepair then
14343: LD_VAR 0 15
14347: PUSH
14348: LD_INT 9
14350: EQUAL
14351: IFFALSE 14484
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14353: LD_VAR 0 9
14357: PPUSH
14358: LD_VAR 0 7
14362: PUSH
14363: LD_INT 1
14365: ARRAY
14366: PPUSH
14367: LD_VAR 0 7
14371: PUSH
14372: LD_INT 2
14374: ARRAY
14375: PPUSH
14376: CALL_OW 297
14380: PUSH
14381: LD_INT 10
14383: GREATER
14384: IFFALSE 14415
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14386: LD_VAR 0 9
14390: PPUSH
14391: LD_VAR 0 7
14395: PUSH
14396: LD_INT 1
14398: ARRAY
14399: PPUSH
14400: LD_VAR 0 7
14404: PUSH
14405: LD_INT 2
14407: ARRAY
14408: PPUSH
14409: CALL_OW 111
// continue ;
14413: GO 13766
// end ; if GetLives ( i ) = 1000 then
14415: LD_VAR 0 9
14419: PPUSH
14420: CALL_OW 256
14424: PUSH
14425: LD_INT 1000
14427: EQUAL
14428: IFFALSE 14444
// begin SetTag ( i , tBusy ) ;
14430: LD_VAR 0 9
14434: PPUSH
14435: LD_INT 8
14437: PPUSH
14438: CALL_OW 109
// continue ;
14442: GO 13766
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14444: LD_VAR 0 9
14448: PPUSH
14449: CALL_OW 263
14453: PUSH
14454: LD_INT 1
14456: EQUAL
14457: PUSH
14458: LD_VAR 0 9
14462: PPUSH
14463: CALL_OW 311
14467: AND
14468: IFFALSE 14484
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14470: LD_VAR 0 9
14474: PPUSH
14475: CALL_OW 311
14479: PPUSH
14480: CALL 66524 0 1
// end ; end ;
14484: GO 13766
14486: POP
14487: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14488: LD_ADDR_VAR 0 19
14492: PUSH
14493: LD_VAR 0 5
14497: PPUSH
14498: LD_INT 2
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 1
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 8
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 25
14523: PUSH
14524: LD_INT 5
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 25
14533: PUSH
14534: LD_INT 9
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 50
14550: PUSH
14551: EMPTY
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PPUSH
14558: CALL_OW 72
14562: ST_TO_ADDR
// if sol then
14563: LD_VAR 0 19
14567: IFFALSE 15075
// begin if enemyInBase then
14569: LD_VAR 0 22
14573: IFFALSE 14752
// begin for i in sol do
14575: LD_ADDR_VAR 0 9
14579: PUSH
14580: LD_VAR 0 19
14584: PUSH
14585: FOR_IN
14586: IFFALSE 14748
// begin tw := IsInUnit ( i ) ;
14588: LD_ADDR_VAR 0 16
14592: PUSH
14593: LD_VAR 0 9
14597: PPUSH
14598: CALL_OW 310
14602: ST_TO_ADDR
// if tw then
14603: LD_VAR 0 16
14607: IFFALSE 14690
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14609: LD_VAR 0 16
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_VAR 0 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 101
14628: PUSH
14629: LD_VAR 0 34
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 32
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 30
14653: PUSH
14654: LD_INT 31
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 69
14675: IN
14676: NOT
14677: IFFALSE 14688
// ComExitBuilding ( i ) ;
14679: LD_VAR 0 9
14683: PPUSH
14684: CALL_OW 122
// end else
14688: GO 14746
// if IsInArea ( i , area ) then
14690: LD_VAR 0 9
14694: PPUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: CALL_OW 308
14704: IFFALSE 14732
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14706: LD_VAR 0 9
14710: PPUSH
14711: LD_VAR 0 22
14715: PPUSH
14716: LD_VAR 0 9
14720: PPUSH
14721: CALL_OW 74
14725: PPUSH
14726: CALL_OW 115
14730: GO 14746
// ComMoveToArea ( i , area ) ;
14732: LD_VAR 0 9
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: CALL_OW 113
// end ;
14746: GO 14585
14748: POP
14749: POP
// end else
14750: GO 15075
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14752: LD_ADDR_VAR 0 28
14756: PUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: LD_INT 3
14764: PUSH
14765: LD_INT 62
14767: PUSH
14768: EMPTY
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 32
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 30
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 30
14800: PUSH
14801: LD_INT 5
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 30
14810: PUSH
14811: LD_INT 31
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 70
14833: ST_TO_ADDR
// if empty then
14834: LD_VAR 0 28
14838: IFFALSE 14855
// empty := ReverseArray ( empty ) ;
14840: LD_ADDR_VAR 0 28
14844: PUSH
14845: LD_VAR 0 28
14849: PPUSH
14850: CALL 60091 0 1
14854: ST_TO_ADDR
// for i in sol do
14855: LD_ADDR_VAR 0 9
14859: PUSH
14860: LD_VAR 0 19
14864: PUSH
14865: FOR_IN
14866: IFFALSE 15073
// begin tag := GetTag ( i ) ;
14868: LD_ADDR_VAR 0 15
14872: PUSH
14873: LD_VAR 0 9
14877: PPUSH
14878: CALL_OW 110
14882: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14883: LD_VAR 0 9
14887: PPUSH
14888: CALL_OW 256
14892: PUSH
14893: LD_INT 1000
14895: LESS
14896: PUSH
14897: LD_VAR 0 15
14901: PUSH
14902: LD_INT 1
14904: NONEQUAL
14905: AND
14906: IFFALSE 14958
// begin SetTag ( i , tHeal ) ;
14908: LD_VAR 0 9
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14920: LD_VAR 0 9
14924: PPUSH
14925: LD_VAR 0 6
14929: PUSH
14930: LD_INT 1
14932: ARRAY
14933: PPUSH
14934: LD_VAR 0 6
14938: PUSH
14939: LD_INT 2
14941: ARRAY
14942: PPUSH
14943: CALL_OW 111
// AddComHold ( i ) ;
14947: LD_VAR 0 9
14951: PPUSH
14952: CALL_OW 200
// continue ;
14956: GO 14865
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14958: LD_VAR 0 9
14962: PPUSH
14963: CALL_OW 256
14967: PUSH
14968: LD_INT 1000
14970: EQUAL
14971: PUSH
14972: LD_VAR 0 15
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: IFFALSE 14997
// begin SetTag ( i , 0 ) ;
14983: LD_VAR 0 9
14987: PPUSH
14988: LD_INT 0
14990: PPUSH
14991: CALL_OW 109
// continue ;
14995: GO 14865
// end ; if HasTask ( i ) then
14997: LD_VAR 0 9
15001: PPUSH
15002: CALL_OW 314
15006: IFFALSE 15010
// continue ;
15008: GO 14865
// if not IsInUnit ( i ) and not tag and empty then
15010: LD_VAR 0 9
15014: PPUSH
15015: CALL_OW 310
15019: NOT
15020: PUSH
15021: LD_VAR 0 15
15025: NOT
15026: AND
15027: PUSH
15028: LD_VAR 0 28
15032: AND
15033: IFFALSE 15071
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15035: LD_VAR 0 9
15039: PPUSH
15040: LD_VAR 0 28
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15053: LD_ADDR_VAR 0 28
15057: PUSH
15058: LD_VAR 0 28
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 3
15070: ST_TO_ADDR
// end ; end ;
15071: GO 14865
15073: POP
15074: POP
// end ; end ; end ;
15075: LD_VAR 0 8
15079: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15080: LD_EXP 52
15084: PPUSH
15085: LD_INT 50
15087: PUSH
15088: EMPTY
15089: LIST
15090: PPUSH
15091: CALL_OW 72
15095: IFFALSE 15148
15097: GO 15099
15099: DISABLE
// begin enable ;
15100: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15101: LD_EXP 3
15105: PUSH
15106: LD_INT 2
15108: ARRAY
15109: PPUSH
15110: LD_INT 2
15112: PPUSH
15113: LD_INT 5
15115: PPUSH
15116: LD_INT 6
15118: PPUSH
15119: LD_EXP 52
15123: PPUSH
15124: LD_INT 210
15126: PUSH
15127: LD_INT 43
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PPUSH
15134: LD_INT 194
15136: PUSH
15137: LD_INT 28
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL 11547 0 7
// end ;
15148: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15149: LD_EXP 51
15153: IFFALSE 15373
15155: GO 15157
15157: DISABLE
15158: LD_INT 0
15160: PPUSH
15161: PPUSH
15162: PPUSH
// begin enable ;
15163: ENABLE
// p := 1 ;
15164: LD_ADDR_VAR 0 2
15168: PUSH
15169: LD_INT 1
15171: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15172: LD_ADDR_VAR 0 1
15176: PUSH
15177: DOUBLE
15178: LD_INT 1
15180: DEC
15181: ST_TO_ADDR
15182: LD_EXP 51
15186: PPUSH
15187: CALL 29215 0 1
15191: PUSH
15192: LD_INT 2
15194: DIV
15195: PUSH
15196: FOR_TO
15197: IFFALSE 15371
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: LD_EXP 51
15208: PUSH
15209: LD_VAR 0 2
15213: ARRAY
15214: PPUSH
15215: LD_EXP 51
15219: PUSH
15220: LD_VAR 0 2
15224: PUSH
15225: LD_INT 1
15227: PLUS
15228: ARRAY
15229: PPUSH
15230: CALL_OW 428
15234: ST_TO_ADDR
// if tmp then
15235: LD_VAR 0 3
15239: IFFALSE 15355
// if GetSide ( tmp ) <> botSides [ 2 ] then
15241: LD_VAR 0 3
15245: PPUSH
15246: CALL_OW 255
15250: PUSH
15251: LD_EXP 3
15255: PUSH
15256: LD_INT 2
15258: ARRAY
15259: NONEQUAL
15260: IFFALSE 15355
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15262: LD_EXP 51
15266: PUSH
15267: LD_VAR 0 2
15271: ARRAY
15272: PPUSH
15273: LD_EXP 51
15277: PUSH
15278: LD_VAR 0 2
15282: PUSH
15283: LD_INT 1
15285: PLUS
15286: ARRAY
15287: PPUSH
15288: LD_EXP 3
15292: PUSH
15293: LD_INT 2
15295: ARRAY
15296: PPUSH
15297: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15301: LD_ADDR_EXP 51
15305: PUSH
15306: LD_EXP 51
15310: PPUSH
15311: LD_VAR 0 2
15315: PPUSH
15316: CALL_OW 3
15320: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15321: LD_ADDR_EXP 51
15325: PUSH
15326: LD_EXP 51
15330: PPUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: CALL_OW 3
15340: ST_TO_ADDR
// p := p - 2 ;
15341: LD_ADDR_VAR 0 2
15345: PUSH
15346: LD_VAR 0 2
15350: PUSH
15351: LD_INT 2
15353: MINUS
15354: ST_TO_ADDR
// end ; p := p + 2 ;
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: LD_INT 2
15367: PLUS
15368: ST_TO_ADDR
// end ;
15369: GO 15196
15371: POP
15372: POP
// end ;
15373: PPOPN 3
15375: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15376: LD_INT 32
15378: PPUSH
15379: CALL_OW 302
15383: PUSH
15384: LD_EXP 44
15388: NOT
15389: AND
15390: IFFALSE 15460
15392: GO 15394
15394: DISABLE
// begin enable ;
15395: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15396: LD_ADDR_EXP 44
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: LD_INT 27
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 14
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: LD_INT 26
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 14
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: LD_INT 1
15445: PUSH
15446: LD_INT 27
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: LIST
15459: ST_TO_ADDR
// end ; end_of_file
15460: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15461: LD_VAR 0 1
15465: PPUSH
15466: CALL_OW 255
15470: PUSH
15471: LD_EXP 3
15475: IN
15476: NOT
15477: IFFALSE 15481
// exit ;
15479: GO 15538
// if not un in [ Sikorski ] then
15481: LD_VAR 0 1
15485: PUSH
15486: LD_EXP 32
15490: PUSH
15491: EMPTY
15492: LIST
15493: IN
15494: NOT
15495: IFFALSE 15516
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_VAR 0 2
15506: PPUSH
15507: LD_INT 0
15509: PPUSH
15510: CALL 5798 0 3
15514: GO 15538
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15516: LD_VAR 0 1
15520: PPUSH
15521: LD_VAR 0 2
15525: PPUSH
15526: LD_INT 5
15528: PPUSH
15529: CALL 5125 0 1
15533: PPUSH
15534: CALL 5798 0 3
// end ;
15538: PPOPN 3
15540: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15541: LD_INT 0
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL 21808 0 1
// side := GetSide ( un ) ;
15562: LD_ADDR_VAR 0 3
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 255
15576: ST_TO_ADDR
// if multi_sides [ side ] then
15577: LD_EXP 7
15581: PUSH
15582: LD_VAR 0 3
15586: ARRAY
15587: IFFALSE 15613
// if GetType ( un ) = unit_human then
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL_OW 247
15598: PUSH
15599: LD_INT 1
15601: EQUAL
15602: IFFALSE 15613
// MultiplayerEvent_HumanLost ( side ) ;
15604: LD_VAR 0 3
15608: PPUSH
15609: CALL 5684 0 1
// if side in botSides then
15613: LD_VAR 0 3
15617: PUSH
15618: LD_EXP 3
15622: IN
15623: IFFALSE 16750
// begin if side = botSides [ 1 ] then
15625: LD_VAR 0 3
15629: PUSH
15630: LD_EXP 3
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: EQUAL
15639: IFFALSE 16180
// begin if un in amForce then
15641: LD_VAR 0 1
15645: PUSH
15646: LD_EXP 40
15650: IN
15651: IFFALSE 15669
// amForce := amForce diff un ;
15653: LD_ADDR_EXP 40
15657: PUSH
15658: LD_EXP 40
15662: PUSH
15663: LD_VAR 0 1
15667: DIFF
15668: ST_TO_ADDR
// if un in amAttackersVeh then
15669: LD_VAR 0 1
15673: PUSH
15674: LD_EXP 57
15678: IN
15679: IFFALSE 15697
// amAttackersVeh := amAttackersVeh diff un ;
15681: LD_ADDR_EXP 57
15685: PUSH
15686: LD_EXP 57
15690: PUSH
15691: LD_VAR 0 1
15695: DIFF
15696: ST_TO_ADDR
// if un in amAttackersInf then
15697: LD_VAR 0 1
15701: PUSH
15702: LD_EXP 56
15706: IN
15707: IFFALSE 15725
// amAttackersInf := amAttackersInf diff un ;
15709: LD_ADDR_EXP 56
15713: PUSH
15714: LD_EXP 56
15718: PUSH
15719: LD_VAR 0 1
15723: DIFF
15724: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15725: LD_VAR 0 1
15729: PPUSH
15730: CALL_OW 257
15734: PUSH
15735: LD_INT 3
15737: EQUAL
15738: PUSH
15739: LD_EXP 42
15743: AND
15744: IFFALSE 15885
// begin if not IsOk ( amDep ) then
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 302
15753: NOT
15754: IFFALSE 15758
// exit ;
15756: GO 16851
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15758: LD_ADDR_EXP 42
15762: PUSH
15763: LD_EXP 42
15767: PPUSH
15768: CALL 66207 0 1
15772: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15773: LD_ADDR_OWVAR 20
15777: PUSH
15778: LD_EXP 3
15782: PUSH
15783: LD_INT 1
15785: ARRAY
15786: ST_TO_ADDR
// uc_nation := nation_american ;
15787: LD_ADDR_OWVAR 21
15791: PUSH
15792: LD_INT 1
15794: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15795: LD_INT 0
15797: PPUSH
15798: LD_INT 1
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 3
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: PUSH
15812: LD_OWVAR 67
15816: ARRAY
15817: PPUSH
15818: CALL_OW 383
// un := CreateHuman ;
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: CALL_OW 44
15831: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 52
15839: PPUSH
15840: LD_INT 2
15842: PPUSH
15843: LD_INT 0
15845: PPUSH
15846: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15850: LD_VAR 0 1
15854: PPUSH
15855: LD_INT 23
15857: PPUSH
15858: LD_INT 19
15860: PPUSH
15861: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15865: LD_ADDR_EXP 40
15869: PUSH
15870: LD_EXP 40
15874: PPUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL 64824 0 2
15884: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 247
15894: PUSH
15895: LD_INT 3
15897: EQUAL
15898: IFFALSE 16041
// begin btype := GetBType ( un ) ;
15900: LD_ADDR_VAR 0 11
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 266
15914: ST_TO_ADDR
// if btype = b_barracks then
15915: LD_VAR 0 11
15919: PUSH
15920: LD_INT 5
15922: EQUAL
15923: IFFALSE 15933
// btype := b_armoury ;
15925: LD_ADDR_VAR 0 11
15929: PUSH
15930: LD_INT 4
15932: ST_TO_ADDR
// if btype = b_factory then
15933: LD_VAR 0 11
15937: PUSH
15938: LD_INT 3
15940: EQUAL
15941: IFFALSE 15951
// btype := b_workshop ;
15943: LD_ADDR_VAR 0 11
15947: PUSH
15948: LD_INT 2
15950: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15951: LD_VAR 0 11
15955: PUSH
15956: LD_INT 8
15958: PUSH
15959: LD_INT 7
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: IN
15966: IFFALSE 15976
// btype := b_lab ;
15968: LD_ADDR_VAR 0 11
15972: PUSH
15973: LD_INT 6
15975: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15976: LD_ADDR_EXP 35
15980: PUSH
15981: LD_EXP 35
15985: PPUSH
15986: LD_EXP 35
15990: PUSH
15991: LD_INT 1
15993: PLUS
15994: PPUSH
15995: LD_VAR 0 11
15999: PUSH
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 250
16009: PUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 251
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 254
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PPUSH
16036: CALL_OW 1
16040: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 247
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: IFFALSE 16180
// begin chassis := GetChassis ( un ) ;
16056: LD_ADDR_VAR 0 5
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 265
16070: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16071: LD_ADDR_VAR 0 6
16075: PUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 262
16085: ST_TO_ADDR
// control := GetControl ( un ) ;
16086: LD_ADDR_VAR 0 7
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 263
16100: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16101: LD_ADDR_VAR 0 8
16105: PUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16116: LD_ADDR_VAR 0 9
16120: PUSH
16121: LD_VAR 0 10
16125: PPUSH
16126: LD_VAR 0 5
16130: PPUSH
16131: LD_VAR 0 6
16135: PPUSH
16136: LD_VAR 0 7
16140: PPUSH
16141: LD_VAR 0 8
16145: PPUSH
16146: CALL 29573 0 5
16150: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16151: LD_ADDR_EXP 34
16155: PUSH
16156: LD_EXP 34
16160: PPUSH
16161: LD_EXP 34
16165: PUSH
16166: LD_INT 1
16168: PLUS
16169: PPUSH
16170: LD_VAR 0 9
16174: PPUSH
16175: CALL_OW 1
16179: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_EXP 3
16189: PUSH
16190: LD_INT 2
16192: ARRAY
16193: EQUAL
16194: IFFALSE 16750
// begin if un in arForce then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_EXP 52
16205: IN
16206: IFFALSE 16224
// arForce := arForce diff un ;
16208: LD_ADDR_EXP 52
16212: PUSH
16213: LD_EXP 52
16217: PUSH
16218: LD_VAR 0 1
16222: DIFF
16223: ST_TO_ADDR
// if un in arAttackersVeh then
16224: LD_VAR 0 1
16228: PUSH
16229: LD_EXP 55
16233: IN
16234: IFFALSE 16252
// arAttackersVeh := arAttackersVeh diff un ;
16236: LD_ADDR_EXP 55
16240: PUSH
16241: LD_EXP 55
16245: PUSH
16246: LD_VAR 0 1
16250: DIFF
16251: ST_TO_ADDR
// if un in arAttackersInf then
16252: LD_VAR 0 1
16256: PUSH
16257: LD_EXP 54
16261: IN
16262: IFFALSE 16280
// arAttackersInf := arAttackersInf diff un ;
16264: LD_ADDR_EXP 54
16268: PUSH
16269: LD_EXP 54
16273: PUSH
16274: LD_VAR 0 1
16278: DIFF
16279: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 257
16289: PUSH
16290: LD_INT 3
16292: EQUAL
16293: PUSH
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 110
16303: PUSH
16304: LD_INT 999
16306: LESS
16307: AND
16308: PUSH
16309: LD_EXP 49
16313: AND
16314: IFFALSE 16455
// begin if not IsOk ( arDep ) then
16316: LD_INT 32
16318: PPUSH
16319: CALL_OW 302
16323: NOT
16324: IFFALSE 16328
// exit ;
16326: GO 16851
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16328: LD_ADDR_EXP 49
16332: PUSH
16333: LD_EXP 49
16337: PPUSH
16338: CALL 66207 0 1
16342: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16343: LD_ADDR_OWVAR 20
16347: PUSH
16348: LD_EXP 3
16352: PUSH
16353: LD_INT 2
16355: ARRAY
16356: ST_TO_ADDR
// uc_nation := nation_arabian ;
16357: LD_ADDR_OWVAR 21
16361: PUSH
16362: LD_INT 2
16364: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16365: LD_INT 0
16367: PPUSH
16368: LD_INT 1
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: LD_INT 3
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: LD_OWVAR 67
16386: ARRAY
16387: PPUSH
16388: CALL_OW 383
// un := CreateHuman ;
16392: LD_ADDR_VAR 0 1
16396: PUSH
16397: CALL_OW 44
16401: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 178
16409: PPUSH
16410: LD_INT 2
16412: PPUSH
16413: LD_INT 0
16415: PPUSH
16416: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 204
16427: PPUSH
16428: LD_INT 35
16430: PPUSH
16431: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16435: LD_ADDR_EXP 52
16439: PUSH
16440: LD_EXP 52
16444: PPUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL 64824 0 2
16454: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 247
16464: PUSH
16465: LD_INT 3
16467: EQUAL
16468: IFFALSE 16611
// begin btype := GetBType ( un ) ;
16470: LD_ADDR_VAR 0 11
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 266
16484: ST_TO_ADDR
// if btype = b_barracks then
16485: LD_VAR 0 11
16489: PUSH
16490: LD_INT 5
16492: EQUAL
16493: IFFALSE 16503
// btype := b_armoury ;
16495: LD_ADDR_VAR 0 11
16499: PUSH
16500: LD_INT 4
16502: ST_TO_ADDR
// if btype = b_factory then
16503: LD_VAR 0 11
16507: PUSH
16508: LD_INT 3
16510: EQUAL
16511: IFFALSE 16521
// btype := b_workshop ;
16513: LD_ADDR_VAR 0 11
16517: PUSH
16518: LD_INT 2
16520: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16521: LD_VAR 0 11
16525: PUSH
16526: LD_INT 8
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: IN
16536: IFFALSE 16546
// btype := b_lab ;
16538: LD_ADDR_VAR 0 11
16542: PUSH
16543: LD_INT 6
16545: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16546: LD_ADDR_EXP 45
16550: PUSH
16551: LD_EXP 45
16555: PPUSH
16556: LD_EXP 45
16560: PUSH
16561: LD_INT 1
16563: PLUS
16564: PPUSH
16565: LD_VAR 0 11
16569: PUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 250
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 251
16589: PUSH
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 254
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PPUSH
16606: CALL_OW 1
16610: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 247
16620: PUSH
16621: LD_INT 2
16623: EQUAL
16624: IFFALSE 16750
// begin chassis := GetChassis ( un ) ;
16626: LD_ADDR_VAR 0 5
16630: PUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL_OW 265
16640: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16641: LD_ADDR_VAR 0 6
16645: PUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 262
16655: ST_TO_ADDR
// control := GetControl ( un ) ;
16656: LD_ADDR_VAR 0 7
16660: PUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 263
16670: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16671: LD_ADDR_VAR 0 8
16675: PUSH
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 264
16685: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16686: LD_ADDR_VAR 0 9
16690: PUSH
16691: LD_VAR 0 10
16695: PPUSH
16696: LD_VAR 0 5
16700: PPUSH
16701: LD_VAR 0 6
16705: PPUSH
16706: LD_VAR 0 7
16710: PPUSH
16711: LD_VAR 0 8
16715: PPUSH
16716: CALL 29573 0 5
16720: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16721: LD_ADDR_EXP 44
16725: PUSH
16726: LD_EXP 44
16730: PPUSH
16731: LD_EXP 44
16735: PUSH
16736: LD_INT 1
16738: PLUS
16739: PPUSH
16740: LD_VAR 0 9
16744: PPUSH
16745: CALL_OW 1
16749: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
16750: LD_EXP 24
16754: PUSH
16755: LD_EXP 16
16759: AND
16760: PUSH
16761: LD_EXP 25
16765: PUSH
16766: LD_VAR 0 3
16770: ARRAY
16771: NOT
16772: AND
16773: IFFALSE 16851
// if un in multi_commanders then
16775: LD_VAR 0 1
16779: PUSH
16780: LD_EXP 24
16784: IN
16785: IFFALSE 16851
// begin if side = your_side then
16787: LD_VAR 0 3
16791: PUSH
16792: LD_OWVAR 2
16796: EQUAL
16797: IFFALSE 16803
// Multiplayer_Loose_Message ;
16799: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16803: LD_ADDR_EXP 25
16807: PUSH
16808: LD_EXP 25
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 1
16825: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16826: LD_ADDR_EXP 24
16830: PUSH
16831: LD_EXP 24
16835: PUSH
16836: LD_VAR 0 1
16840: DIFF
16841: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16842: LD_VAR 0 3
16846: PPUSH
16847: CALL 5158 0 1
// end ; end ;
16851: PPOPN 11
16853: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
16854: LD_INT 0
16856: PPUSH
16857: PPUSH
16858: PPUSH
16859: PPUSH
// begin side := GetSide ( building ) ;
16860: LD_ADDR_VAR 0 4
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 255
16874: ST_TO_ADDR
// if multi_sides [ side ] then
16875: LD_EXP 7
16879: PUSH
16880: LD_VAR 0 4
16884: ARRAY
16885: IFFALSE 16906
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 266
16901: PPUSH
16902: CALL 5728 0 2
// if side = botSides [ 1 ] then
16906: LD_VAR 0 4
16910: PUSH
16911: LD_EXP 3
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: EQUAL
16920: IFFALSE 17004
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16922: LD_ADDR_EXP 35
16926: PUSH
16927: LD_EXP 35
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 3
16939: ST_TO_ADDR
// btype := GetBType ( building ) ;
16940: LD_ADDR_VAR 0 5
16944: PUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 266
16954: ST_TO_ADDR
// case btype of b_workshop :
16955: LD_VAR 0 5
16959: PUSH
16960: LD_INT 2
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16980
16968: POP
// ComUpgrade ( building ) ; b_lab :
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 146
16978: GO 17004
16980: LD_INT 6
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 17003
16988: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_INT 10
16996: PPUSH
16997: CALL_OW 207
// end ; end ;
17001: GO 17004
17003: POP
// end ; if side = botSides [ 2 ] then
17004: LD_VAR 0 4
17008: PUSH
17009: LD_EXP 3
17013: PUSH
17014: LD_INT 2
17016: ARRAY
17017: EQUAL
17018: IFFALSE 17114
// begin arBuildings := Delete ( arBuildings , 1 ) ;
17020: LD_ADDR_EXP 45
17024: PUSH
17025: LD_EXP 45
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 3
17037: ST_TO_ADDR
// btype := GetBType ( building ) ;
17038: LD_ADDR_VAR 0 5
17042: PUSH
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 266
17052: ST_TO_ADDR
// case btype of b_workshop :
17053: LD_VAR 0 5
17057: PUSH
17058: LD_INT 2
17060: DOUBLE
17061: EQUAL
17062: IFTRUE 17066
17064: GO 17078
17066: POP
// ComUpgrade ( building ) ; b_lab :
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL_OW 146
17076: GO 17114
17078: LD_INT 6
17080: DOUBLE
17081: EQUAL
17082: IFTRUE 17086
17084: GO 17113
17086: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_INT 10
17094: PPUSH
17095: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
17099: LD_VAR 0 1
17103: PPUSH
17104: LD_INT 15
17106: PPUSH
17107: CALL_OW 207
// end ; end ;
17111: GO 17114
17113: POP
// end ; end ;
17114: PPOPN 5
17116: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
17117: LD_VAR 0 2
17121: PPUSH
17122: CALL_OW 255
17126: PUSH
17127: LD_EXP 3
17131: IN
17132: NOT
17133: IFFALSE 17137
// exit ;
17135: GO 17300
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17137: LD_VAR 0 2
17141: PUSH
17142: LD_EXP 53
17146: IN
17147: PUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 31
17160: EQUAL
17161: AND
17162: IFFALSE 17186
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_INT 215
17171: PPUSH
17172: LD_INT 102
17174: PPUSH
17175: CALL_OW 428
17179: PPUSH
17180: CALL_OW 120
// exit ;
17184: GO 17300
// end ; if HexInfo ( 44 , 78 ) then
17186: LD_INT 44
17188: PPUSH
17189: LD_INT 78
17191: PPUSH
17192: CALL_OW 428
17196: IFFALSE 17235
// begin ComMoveXY ( unit , 26 , 40 ) ;
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_INT 26
17205: PPUSH
17206: LD_INT 40
17208: PPUSH
17209: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17213: LD_ADDR_EXP 40
17217: PUSH
17218: LD_EXP 40
17222: PPUSH
17223: LD_VAR 0 2
17227: PPUSH
17228: CALL 64824 0 2
17232: ST_TO_ADDR
// exit ;
17233: GO 17300
// end ; if GetX ( building ) > 71 then
17235: LD_VAR 0 1
17239: PPUSH
17240: CALL_OW 250
17244: PUSH
17245: LD_INT 71
17247: GREATER
17248: IFFALSE 17300
// begin ComMoveXY ( unit , 69 , 39 ) ;
17250: LD_VAR 0 2
17254: PPUSH
17255: LD_INT 69
17257: PPUSH
17258: LD_INT 39
17260: PPUSH
17261: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 26
17272: PPUSH
17273: LD_INT 40
17275: PPUSH
17276: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17280: LD_ADDR_EXP 40
17284: PUSH
17285: LD_EXP 40
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL 64824 0 2
17299: ST_TO_ADDR
// end ; end ;
17300: PPOPN 2
17302: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17303: LD_INT 0
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17311: LD_VAR 0 1
17315: PPUSH
17316: LD_VAR 0 2
17320: PPUSH
17321: CALL 21866 0 2
// side := GetSide ( vehicle ) ;
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 255
17339: ST_TO_ADDR
// if multi_sides [ side ] then
17340: LD_EXP 7
17344: PUSH
17345: LD_VAR 0 4
17349: ARRAY
17350: IFFALSE 17361
// MultiplayerEvent_Produced ( side ) ;
17352: LD_VAR 0 4
17356: PPUSH
17357: CALL 5640 0 1
// if side = botSides [ 1 ] then
17361: LD_VAR 0 4
17365: PUSH
17366: LD_EXP 3
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: EQUAL
17375: IFFALSE 17511
// begin driver := IsDrivenBy ( vehicle ) ;
17377: LD_ADDR_VAR 0 8
17381: PUSH
17382: LD_VAR 0 1
17386: PPUSH
17387: CALL_OW 311
17391: ST_TO_ADDR
// if driver then
17392: LD_VAR 0 8
17396: IFFALSE 17430
// begin SetTag ( driver , tMech ) ;
17398: LD_VAR 0 8
17402: PPUSH
17403: LD_INT 7
17405: PPUSH
17406: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17410: LD_ADDR_EXP 38
17414: PUSH
17415: LD_EXP 38
17419: PPUSH
17420: LD_VAR 0 8
17424: PPUSH
17425: CALL 64824 0 2
17429: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17430: LD_EXP 39
17434: PUSH
17435: LD_EXP 36
17439: PPUSH
17440: CALL 29215 0 1
17444: GREATER
17445: PUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 266
17455: PUSH
17456: LD_INT 12
17458: PUSH
17459: LD_INT 13
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: IN
17466: OR
17467: IFFALSE 17491
// amVehicles := Join ( amVehicles , vehicle ) else
17469: LD_ADDR_EXP 36
17473: PUSH
17474: LD_EXP 36
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL 64824 0 2
17488: ST_TO_ADDR
17489: GO 17511
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17491: LD_ADDR_EXP 37
17495: PUSH
17496: LD_EXP 37
17500: PPUSH
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL 64824 0 2
17510: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17511: LD_VAR 0 4
17515: PUSH
17516: LD_EXP 3
17520: PUSH
17521: LD_INT 2
17523: ARRAY
17524: EQUAL
17525: IFFALSE 17661
// begin driver := IsDrivenBy ( vehicle ) ;
17527: LD_ADDR_VAR 0 8
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 311
17541: ST_TO_ADDR
// if driver then
17542: LD_VAR 0 8
17546: IFFALSE 17580
// begin SetTag ( driver , tMech ) ;
17548: LD_VAR 0 8
17552: PPUSH
17553: LD_INT 7
17555: PPUSH
17556: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17560: LD_ADDR_EXP 48
17564: PUSH
17565: LD_EXP 48
17569: PPUSH
17570: LD_VAR 0 8
17574: PPUSH
17575: CALL 64824 0 2
17579: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17580: LD_EXP 50
17584: PUSH
17585: LD_EXP 46
17589: PPUSH
17590: CALL 29215 0 1
17594: GREATER
17595: PUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 266
17605: PUSH
17606: LD_INT 32
17608: PUSH
17609: LD_INT 88
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: IN
17616: OR
17617: IFFALSE 17641
// arVehicles := Join ( arVehicles , vehicle ) else
17619: LD_ADDR_EXP 46
17623: PUSH
17624: LD_EXP 46
17628: PPUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL 64824 0 2
17638: ST_TO_ADDR
17639: GO 17661
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17641: LD_ADDR_EXP 47
17645: PUSH
17646: LD_EXP 47
17650: PPUSH
17651: LD_VAR 0 1
17655: PPUSH
17656: CALL 64824 0 2
17660: ST_TO_ADDR
// end ; end ;
17661: PPOPN 8
17663: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 110
17673: PUSH
17674: LD_INT 7
17676: EQUAL
17677: IFFALSE 17691
// SetTag ( driver , 0 ) ;
17679: LD_VAR 0 1
17683: PPUSH
17684: LD_INT 0
17686: PPUSH
17687: CALL_OW 109
// end ;
17691: PPOPN 4
17693: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17694: LD_VAR 0 2
17698: PPUSH
17699: CALL_OW 255
17703: PUSH
17704: LD_EXP 3
17708: PUSH
17709: LD_INT 1
17711: ARRAY
17712: EQUAL
17713: IFFALSE 17743
// if tech in amTech then
17715: LD_VAR 0 1
17719: PUSH
17720: LD_EXP 33
17724: IN
17725: IFFALSE 17743
// amTech := amTech diff tech ;
17727: LD_ADDR_EXP 33
17731: PUSH
17732: LD_EXP 33
17736: PUSH
17737: LD_VAR 0 1
17741: DIFF
17742: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 255
17752: PUSH
17753: LD_EXP 3
17757: PUSH
17758: LD_INT 2
17760: ARRAY
17761: EQUAL
17762: IFFALSE 17792
// if tech in arTech then
17764: LD_VAR 0 1
17768: PUSH
17769: LD_EXP 43
17773: IN
17774: IFFALSE 17792
// arTech := arTech diff tech ;
17776: LD_ADDR_EXP 43
17780: PUSH
17781: LD_EXP 43
17785: PUSH
17786: LD_VAR 0 1
17790: DIFF
17791: ST_TO_ADDR
// end ; end_of_file
17792: PPOPN 2
17794: END
// every 10 10$00 trigger IsOk ( amDep ) do
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 302
17802: IFFALSE 17815
17804: GO 17806
17806: DISABLE
// activeAmerAttacks := true ;
17807: LD_ADDR_EXP 5
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
17815: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17816: LD_INT 32
17818: PPUSH
17819: CALL_OW 302
17823: PUSH
17824: LD_INT 32
17826: PPUSH
17827: CALL_OW 255
17831: PUSH
17832: LD_EXP 3
17836: PUSH
17837: LD_INT 2
17839: ARRAY
17840: EQUAL
17841: AND
17842: IFFALSE 17879
17844: GO 17846
17846: DISABLE
// begin activeArabAttacks := true ;
17847: LD_ADDR_EXP 4
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
17855: LD_INT 73500
17857: PUSH
17858: LD_INT 2100
17860: PUSH
17861: LD_OWVAR 67
17865: MUL
17866: MINUS
17867: PPUSH
17868: CALL_OW 67
// ArabAttack ( 0 ) ;
17872: LD_INT 0
17874: PPUSH
17875: CALL 17936 0 1
// end ;
17879: END
// every 19 19$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 302
17887: PUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 255
17895: PUSH
17896: LD_EXP 3
17900: PUSH
17901: LD_INT 1
17903: ARRAY
17904: EQUAL
17905: AND
17906: IFFALSE 17935
17908: GO 17910
17910: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
17911: LD_INT 10500
17913: PUSH
17914: LD_INT 2100
17916: PUSH
17917: LD_OWVAR 67
17921: MUL
17922: MINUS
17923: PPUSH
17924: CALL_OW 67
// AmericanAttack ( 0 ) ;
17928: LD_INT 0
17930: PPUSH
17931: CALL 19957 0 1
// end ;
17935: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17936: LD_INT 0
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
// uc_side := botSides [ 2 ] ;
17943: LD_ADDR_OWVAR 20
17947: PUSH
17948: LD_EXP 3
17952: PUSH
17953: LD_INT 2
17955: ARRAY
17956: ST_TO_ADDR
// uc_nation := nation_arabian ;
17957: LD_ADDR_OWVAR 21
17961: PUSH
17962: LD_INT 2
17964: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17965: LD_ADDR_VAR 0 4
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: LD_INT 4
17975: PUSH
17976: LD_INT 5
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_OWVAR 67
17988: ARRAY
17989: ST_TO_ADDR
// arAttackersInf := [ ] ;
17990: LD_ADDR_EXP 54
17994: PUSH
17995: EMPTY
17996: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17997: LD_ADDR_EXP 55
18001: PUSH
18002: EMPTY
18003: ST_TO_ADDR
// InitHC_All ( ) ;
18004: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
18008: LD_ADDR_VAR 0 3
18012: PUSH
18013: DOUBLE
18014: LD_INT 1
18016: DEC
18017: ST_TO_ADDR
18018: LD_INT 3
18020: PUSH
18021: LD_INT 4
18023: PUSH
18024: LD_INT 5
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: PUSH
18032: LD_OWVAR 67
18036: ARRAY
18037: PUSH
18038: LD_VAR 0 1
18042: PLUS
18043: PUSH
18044: FOR_TO
18045: IFFALSE 18147
// begin PrepareSoldier ( false , skill ) ;
18047: LD_INT 0
18049: PPUSH
18050: LD_VAR 0 4
18054: PPUSH
18055: CALL_OW 381
// un := CreateHuman ;
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: CALL_OW 44
18068: ST_TO_ADDR
// if i mod 2 = 0 then
18069: LD_VAR 0 3
18073: PUSH
18074: LD_INT 2
18076: MOD
18077: PUSH
18078: LD_INT 0
18080: EQUAL
18081: IFFALSE 18095
// SetClass ( un , class_mortar ) ;
18083: LD_VAR 0 5
18087: PPUSH
18088: LD_INT 8
18090: PPUSH
18091: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
18095: LD_VAR 0 5
18099: PPUSH
18100: LD_INT 25
18102: PPUSH
18103: LD_INT 0
18105: PPUSH
18106: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
18110: LD_ADDR_EXP 54
18114: PUSH
18115: LD_EXP 54
18119: PPUSH
18120: LD_VAR 0 5
18124: PPUSH
18125: CALL 64824 0 2
18129: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18130: LD_VAR 0 5
18134: PPUSH
18135: LD_INT 230
18137: PPUSH
18138: LD_INT 143
18140: PPUSH
18141: CALL_OW 114
// end ;
18145: GO 18044
18147: POP
18148: POP
// for i := 1 to 3 + v do
18149: LD_ADDR_VAR 0 3
18153: PUSH
18154: DOUBLE
18155: LD_INT 1
18157: DEC
18158: ST_TO_ADDR
18159: LD_INT 3
18161: PUSH
18162: LD_VAR 0 1
18166: PLUS
18167: PUSH
18168: FOR_TO
18169: IFFALSE 18333
// begin PrepareMechanic ( false , skill ) ;
18171: LD_INT 0
18173: PPUSH
18174: LD_VAR 0 4
18178: PPUSH
18179: CALL_OW 383
// un := CreateHuman ;
18183: LD_ADDR_VAR 0 5
18187: PUSH
18188: CALL_OW 44
18192: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18193: LD_VAR 0 5
18197: PPUSH
18198: LD_INT 999
18200: PPUSH
18201: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18205: LD_INT 14
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: LD_INT 27
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_VAR 0 3
18228: PUSH
18229: LD_INT 2
18231: MOD
18232: PUSH
18233: LD_INT 1
18235: PLUS
18236: ARRAY
18237: PPUSH
18238: LD_INT 80
18240: PPUSH
18241: CALL 31953 0 5
// veh := CreateVehicle ;
18245: LD_ADDR_VAR 0 6
18249: PUSH
18250: CALL_OW 45
18254: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18255: LD_VAR 0 6
18259: PPUSH
18260: LD_INT 5
18262: PPUSH
18263: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18267: LD_VAR 0 6
18271: PPUSH
18272: LD_INT 26
18274: PPUSH
18275: LD_INT 0
18277: PPUSH
18278: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18282: LD_VAR 0 5
18286: PPUSH
18287: LD_VAR 0 6
18291: PPUSH
18292: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18296: LD_VAR 0 5
18300: PPUSH
18301: LD_INT 236
18303: PPUSH
18304: LD_INT 127
18306: PPUSH
18307: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18311: LD_ADDR_EXP 55
18315: PUSH
18316: LD_EXP 55
18320: PPUSH
18321: LD_VAR 0 6
18325: PPUSH
18326: CALL 64824 0 2
18330: ST_TO_ADDR
// end ;
18331: GO 18168
18333: POP
18334: POP
// wait ( 0 0$2 ) ;
18335: LD_INT 70
18337: PPUSH
18338: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18342: LD_ADDR_VAR 0 3
18346: PUSH
18347: DOUBLE
18348: LD_INT 1
18350: DEC
18351: ST_TO_ADDR
18352: LD_INT 1
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: LD_OWVAR 67
18370: ARRAY
18371: PUSH
18372: FOR_TO
18373: IFFALSE 18516
// begin PrepareMechanic ( false , skill ) ;
18375: LD_INT 0
18377: PPUSH
18378: LD_VAR 0 4
18382: PPUSH
18383: CALL_OW 383
// un := CreateHuman ;
18387: LD_ADDR_VAR 0 5
18391: PUSH
18392: CALL_OW 44
18396: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18397: LD_VAR 0 5
18401: PPUSH
18402: LD_INT 999
18404: PPUSH
18405: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18409: LD_INT 14
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 1
18417: PPUSH
18418: LD_INT 26
18420: PPUSH
18421: LD_INT 80
18423: PPUSH
18424: CALL 31953 0 5
// veh := CreateVehicle ;
18428: LD_ADDR_VAR 0 6
18432: PUSH
18433: CALL_OW 45
18437: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18438: LD_VAR 0 6
18442: PPUSH
18443: LD_INT 5
18445: PPUSH
18446: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18450: LD_VAR 0 6
18454: PPUSH
18455: LD_INT 26
18457: PPUSH
18458: LD_INT 0
18460: PPUSH
18461: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18465: LD_VAR 0 5
18469: PPUSH
18470: LD_VAR 0 6
18474: PPUSH
18475: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_INT 236
18486: PPUSH
18487: LD_INT 127
18489: PPUSH
18490: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18494: LD_ADDR_EXP 55
18498: PUSH
18499: LD_EXP 55
18503: PPUSH
18504: LD_VAR 0 6
18508: PPUSH
18509: CALL 64824 0 2
18513: ST_TO_ADDR
// end ;
18514: GO 18372
18516: POP
18517: POP
// wait ( 0 0$2 ) ;
18518: LD_INT 70
18520: PPUSH
18521: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: DOUBLE
18531: LD_INT 1
18533: DEC
18534: ST_TO_ADDR
18535: LD_INT 1
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: PUSH
18549: LD_OWVAR 67
18553: ARRAY
18554: PUSH
18555: FOR_TO
18556: IFFALSE 18730
// begin PrepareMechanic ( false , skill ) ;
18558: LD_INT 0
18560: PPUSH
18561: LD_VAR 0 4
18565: PPUSH
18566: CALL_OW 383
// un := CreateHuman ;
18570: LD_ADDR_VAR 0 5
18574: PUSH
18575: CALL_OW 44
18579: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18580: LD_VAR 0 5
18584: PPUSH
18585: LD_INT 999
18587: PPUSH
18588: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18592: LD_INT 14
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: LD_INT 28
18603: PPUSH
18604: LD_INT 80
18606: PPUSH
18607: CALL 31953 0 5
// veh := CreateVehicle ;
18611: LD_ADDR_VAR 0 6
18615: PUSH
18616: CALL_OW 45
18620: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18621: LD_VAR 0 6
18625: PPUSH
18626: LD_INT 4
18628: PPUSH
18629: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18633: LD_VAR 0 6
18637: PPUSH
18638: LD_INT 26
18640: PPUSH
18641: LD_INT 0
18643: PPUSH
18644: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18648: LD_VAR 0 5
18652: PPUSH
18653: LD_VAR 0 6
18657: PPUSH
18658: CALL_OW 52
// if i mod 2 = 0 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 2
18669: MOD
18670: PUSH
18671: LD_INT 0
18673: EQUAL
18674: IFFALSE 18693
// ComMoveXY ( un , 136 , 61 ) else
18676: LD_VAR 0 5
18680: PPUSH
18681: LD_INT 136
18683: PPUSH
18684: LD_INT 61
18686: PPUSH
18687: CALL_OW 111
18691: GO 18708
// ComMoveXY ( un , 137 , 41 ) ;
18693: LD_VAR 0 5
18697: PPUSH
18698: LD_INT 137
18700: PPUSH
18701: LD_INT 41
18703: PPUSH
18704: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18708: LD_ADDR_EXP 55
18712: PUSH
18713: LD_EXP 55
18717: PPUSH
18718: LD_VAR 0 6
18722: PPUSH
18723: CALL 64824 0 2
18727: ST_TO_ADDR
// end ;
18728: GO 18555
18730: POP
18731: POP
// end ;
18732: LD_VAR 0 2
18736: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18737: LD_EXP 54
18741: IFFALSE 19112
18743: GO 18745
18745: DISABLE
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
18750: PPUSH
18751: PPUSH
// begin enable ;
18752: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18753: LD_ADDR_VAR 0 2
18757: PUSH
18758: LD_EXP 54
18762: PPUSH
18763: LD_INT 50
18765: PUSH
18766: EMPTY
18767: LIST
18768: PPUSH
18769: CALL_OW 72
18773: ST_TO_ADDR
// arAttackersInf := [ ] ;
18774: LD_ADDR_EXP 54
18778: PUSH
18779: EMPTY
18780: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18781: LD_VAR 0 2
18785: PPUSH
18786: LD_INT 173
18788: PPUSH
18789: LD_INT 139
18791: PPUSH
18792: CALL_OW 111
// wait ( 0 0$10 ) ;
18796: LD_INT 350
18798: PPUSH
18799: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18803: LD_ADDR_VAR 0 1
18807: PUSH
18808: LD_VAR 0 2
18812: PPUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 72
18827: PUSH
18828: FOR_IN
18829: IFFALSE 18960
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 81
18838: PUSH
18839: LD_EXP 3
18843: PUSH
18844: LD_INT 2
18846: ARRAY
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 3
18854: PUSH
18855: LD_INT 120
18857: PUSH
18858: LD_INT 11
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 21
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 21
18884: PUSH
18885: LD_INT 3
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: PPUSH
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL_OW 74
18916: ST_TO_ADDR
// if not nearest then
18917: LD_VAR 0 3
18921: NOT
18922: IFFALSE 18926
// break ;
18924: GO 18960
// SetTag ( nearest , tMined ) ;
18926: LD_VAR 0 3
18930: PPUSH
18931: LD_INT 11
18933: PPUSH
18934: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 0
18945: PPUSH
18946: LD_INT 0
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: CALL_OW 192
// end ;
18958: GO 18828
18960: POP
18961: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18962: LD_ADDR_VAR 0 2
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: LD_INT 50
18974: PUSH
18975: EMPTY
18976: LIST
18977: PPUSH
18978: CALL_OW 72
18982: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18983: LD_VAR 0 2
18987: PPUSH
18988: LD_INT 155
18990: PPUSH
18991: LD_INT 119
18993: PPUSH
18994: CALL_OW 171
// repeat wait ( 0 0$3 ) ;
18998: LD_INT 105
19000: PPUSH
19001: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_INT 50
19017: PUSH
19018: EMPTY
19019: LIST
19020: PPUSH
19021: CALL_OW 72
19025: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19026: LD_ADDR_VAR 0 4
19030: PUSH
19031: LD_INT 81
19033: PUSH
19034: LD_EXP 3
19038: PUSH
19039: LD_INT 2
19041: ARRAY
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 69
19051: ST_TO_ADDR
// for i in tmp do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_VAR 0 2
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19103
// if not HasTask ( i ) then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 314
19074: NOT
19075: IFFALSE 19101
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) until not tmp ;
19077: LD_VAR 0 1
19081: PPUSH
19082: LD_VAR 0 4
19086: PPUSH
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL_OW 74
19096: PPUSH
19097: CALL_OW 115
19101: GO 19062
19103: POP
19104: POP
19105: LD_VAR 0 2
19109: NOT
19110: IFFALSE 18998
// end ;
19112: PPOPN 4
19114: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19115: LD_EXP 55
19119: IFFALSE 19231
19121: GO 19123
19123: DISABLE
19124: LD_INT 0
19126: PPUSH
19127: PPUSH
// begin enable ;
19128: ENABLE
// tmp := arAttackersVeh ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_EXP 55
19138: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19139: LD_ADDR_EXP 55
19143: PUSH
19144: EMPTY
19145: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19146: LD_INT 70
19148: PPUSH
19149: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19153: LD_ADDR_VAR 0 2
19157: PUSH
19158: LD_VAR 0 2
19162: PPUSH
19163: LD_INT 50
19165: PUSH
19166: EMPTY
19167: LIST
19168: PPUSH
19169: CALL_OW 72
19173: ST_TO_ADDR
// for i in tmp do
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_VAR 0 2
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19222
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19187: LD_VAR 0 1
19191: PPUSH
19192: LD_INT 207
19194: PUSH
19195: LD_INT 125
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 185
19204: PUSH
19205: LD_INT 114
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL 67428 0 2
19220: GO 19184
19222: POP
19223: POP
19224: LD_VAR 0 2
19228: NOT
19229: IFFALSE 19146
// end ;
19231: PPOPN 2
19233: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19234: LD_EXP 47
19238: PUSH
19239: LD_EXP 4
19243: AND
19244: IFFALSE 19834
19246: GO 19248
19248: DISABLE
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
19253: PPUSH
// begin enable ;
19254: ENABLE
// if not arVehiclesAtttackers then
19255: LD_EXP 47
19259: NOT
19260: IFFALSE 19264
// exit ;
19262: GO 19834
// for i in arVehiclesAtttackers do
19264: LD_ADDR_VAR 0 1
19268: PUSH
19269: LD_EXP 47
19273: PUSH
19274: FOR_IN
19275: IFFALSE 19832
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 302
19286: NOT
19287: PUSH
19288: LD_VAR 0 1
19292: PPUSH
19293: CALL_OW 255
19297: PUSH
19298: LD_EXP 3
19302: PUSH
19303: LD_INT 2
19305: ARRAY
19306: NONEQUAL
19307: OR
19308: IFFALSE 19328
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19310: LD_ADDR_EXP 47
19314: PUSH
19315: LD_EXP 47
19319: PUSH
19320: LD_VAR 0 1
19324: DIFF
19325: ST_TO_ADDR
// continue ;
19326: GO 19274
// end ; if GetTag ( i ) = 300 then
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL_OW 110
19337: PUSH
19338: LD_INT 300
19340: EQUAL
19341: IFFALSE 19456
// begin if GetFuel ( i ) < 50 then
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL_OW 261
19352: PUSH
19353: LD_INT 50
19355: LESS
19356: IFFALSE 19415
// begin ComMoveXY ( i , 198 , 28 ) ;
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_INT 198
19365: PPUSH
19366: LD_INT 28
19368: PPUSH
19369: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19373: LD_INT 35
19375: PPUSH
19376: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19380: LD_VAR 0 1
19384: PPUSH
19385: LD_INT 198
19387: PPUSH
19388: LD_INT 28
19390: PPUSH
19391: CALL_OW 297
19395: PUSH
19396: LD_INT 4
19398: LESS
19399: IFFALSE 19373
// SetFuel ( i , 100 ) ;
19401: LD_VAR 0 1
19405: PPUSH
19406: LD_INT 100
19408: PPUSH
19409: CALL_OW 240
// end else
19413: GO 19456
// if not IsInArea ( i , arParkingArea ) then
19415: LD_VAR 0 1
19419: PPUSH
19420: LD_INT 28
19422: PPUSH
19423: CALL_OW 308
19427: NOT
19428: IFFALSE 19444
// ComMoveToArea ( i , arParkingArea ) else
19430: LD_VAR 0 1
19434: PPUSH
19435: LD_INT 28
19437: PPUSH
19438: CALL_OW 113
19442: GO 19456
// SetTag ( i , 301 ) ;
19444: LD_VAR 0 1
19448: PPUSH
19449: LD_INT 301
19451: PPUSH
19452: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19456: LD_VAR 0 1
19460: PPUSH
19461: CALL_OW 110
19465: PUSH
19466: LD_INT 301
19468: EQUAL
19469: IFFALSE 19611
// begin if GetLives ( i ) < 1000 then
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 256
19480: PUSH
19481: LD_INT 1000
19483: LESS
19484: IFFALSE 19588
// begin if not IsDrivenBy ( i ) then
19486: LD_VAR 0 1
19490: PPUSH
19491: CALL_OW 311
19495: NOT
19496: IFFALSE 19500
// continue ;
19498: GO 19274
// mech := IsDrivenBy ( i ) ;
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_VAR 0 1
19509: PPUSH
19510: CALL_OW 311
19514: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19515: LD_VAR 0 2
19519: PPUSH
19520: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19524: LD_VAR 0 2
19528: PPUSH
19529: LD_VAR 0 1
19533: PPUSH
19534: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19538: LD_INT 35
19540: PPUSH
19541: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 256
19554: PUSH
19555: LD_INT 1000
19557: EQUAL
19558: IFFALSE 19538
// SetLives ( mech , 1000 ) ;
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_INT 1000
19567: PPUSH
19568: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19572: LD_VAR 0 2
19576: PPUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 120
// end else
19586: GO 19611
// if IsDrivenBy ( i ) then
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 311
19597: IFFALSE 19611
// SetTag ( i , 0 ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: LD_INT 0
19606: PPUSH
19607: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 110
19620: PUSH
19621: LD_INT 300
19623: LESS
19624: IFFALSE 19830
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
19626: LD_ADDR_VAR 0 3
19630: PUSH
19631: LD_INT 5
19633: PPUSH
19634: LD_INT 81
19636: PUSH
19637: LD_EXP 3
19641: PUSH
19642: LD_INT 2
19644: ARRAY
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL_OW 70
19654: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 256
19664: PUSH
19665: LD_INT 650
19667: LESS
19668: IFFALSE 19693
// begin ComStop ( i ) ;
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 141
// SetTag ( i , 300 ) ;
19679: LD_VAR 0 1
19683: PPUSH
19684: LD_INT 300
19686: PPUSH
19687: CALL_OW 109
// continue ;
19691: GO 19274
// end ; if enemy then
19693: LD_VAR 0 3
19697: IFFALSE 19737
// begin if not HasTask ( i ) then
19699: LD_VAR 0 1
19703: PPUSH
19704: CALL_OW 314
19708: NOT
19709: IFFALSE 19735
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19711: LD_VAR 0 1
19715: PPUSH
19716: LD_VAR 0 3
19720: PPUSH
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL_OW 74
19730: PPUSH
19731: CALL_OW 115
// end else
19735: GO 19830
// if arVehiclesAtttackers then
19737: LD_EXP 47
19741: IFFALSE 19830
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_INT 81
19750: PUSH
19751: LD_EXP 3
19755: PUSH
19756: LD_INT 2
19758: ARRAY
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: ST_TO_ADDR
// if enemy then
19769: LD_VAR 0 3
19773: IFFALSE 19830
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19775: LD_VAR 0 1
19779: PPUSH
19780: LD_INT 215
19782: PUSH
19783: LD_INT 88
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 197
19792: PUSH
19793: LD_INT 90
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 178
19802: PUSH
19803: LD_INT 90
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 169
19812: PUSH
19813: LD_INT 104
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PPUSH
19826: CALL 67428 0 2
// end ; end ; end ;
19830: GO 19274
19832: POP
19833: POP
// end ;
19834: PPOPN 3
19836: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19837: LD_INT 22
19839: PUSH
19840: LD_EXP 3
19844: PUSH
19845: LD_INT 2
19847: ARRAY
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 32
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PPUSH
19867: CALL_OW 69
19871: IFFALSE 19954
19873: GO 19875
19875: DISABLE
19876: LD_INT 0
19878: PPUSH
// begin enable ;
19879: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19880: LD_ADDR_VAR 0 1
19884: PUSH
19885: LD_INT 22
19887: PUSH
19888: LD_EXP 3
19892: PUSH
19893: LD_INT 2
19895: ARRAY
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 32
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 69
19919: PUSH
19920: FOR_IN
19921: IFFALSE 19952
// if GetFuel ( i ) < 3 then
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 261
19932: PUSH
19933: LD_INT 3
19935: LESS
19936: IFFALSE 19950
// SetFuel ( i , 3 ) ;
19938: LD_VAR 0 1
19942: PPUSH
19943: LD_INT 3
19945: PPUSH
19946: CALL_OW 240
19950: GO 19920
19952: POP
19953: POP
// end ;
19954: PPOPN 1
19956: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
// uc_side := botSides [ 1 ] ;
19964: LD_ADDR_OWVAR 20
19968: PUSH
19969: LD_EXP 3
19973: PUSH
19974: LD_INT 1
19976: ARRAY
19977: ST_TO_ADDR
// uc_nation := nation_american ;
19978: LD_ADDR_OWVAR 21
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19986: LD_ADDR_VAR 0 4
19990: PUSH
19991: LD_INT 3
19993: PUSH
19994: LD_INT 4
19996: PUSH
19997: LD_INT 5
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: LD_OWVAR 67
20009: ARRAY
20010: ST_TO_ADDR
// amAttackersInf := [ ] ;
20011: LD_ADDR_EXP 56
20015: PUSH
20016: EMPTY
20017: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20018: LD_ADDR_EXP 57
20022: PUSH
20023: EMPTY
20024: ST_TO_ADDR
// InitHC_All ( ) ;
20025: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: DOUBLE
20035: LD_INT 1
20037: DEC
20038: ST_TO_ADDR
20039: LD_INT 2
20041: PUSH
20042: LD_INT 3
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: LD_OWVAR 67
20057: ARRAY
20058: PUSH
20059: LD_VAR 0 1
20063: PLUS
20064: PUSH
20065: FOR_TO
20066: IFFALSE 20142
// begin PrepareSoldier ( false , skill ) ;
20068: LD_INT 0
20070: PPUSH
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 381
// un := CreateHuman ;
20080: LD_ADDR_VAR 0 5
20084: PUSH
20085: CALL_OW 44
20089: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
20090: LD_VAR 0 5
20094: PPUSH
20095: LD_INT 30
20097: PPUSH
20098: LD_INT 0
20100: PPUSH
20101: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
20105: LD_ADDR_EXP 56
20109: PUSH
20110: LD_EXP 56
20114: PPUSH
20115: LD_VAR 0 5
20119: PPUSH
20120: CALL 64824 0 2
20124: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
20125: LD_VAR 0 5
20129: PPUSH
20130: LD_INT 110
20132: PPUSH
20133: LD_INT 129
20135: PPUSH
20136: CALL_OW 114
// end ;
20140: GO 20065
20142: POP
20143: POP
// for i := 1 to 2 + v do
20144: LD_ADDR_VAR 0 3
20148: PUSH
20149: DOUBLE
20150: LD_INT 1
20152: DEC
20153: ST_TO_ADDR
20154: LD_INT 2
20156: PUSH
20157: LD_VAR 0 1
20161: PLUS
20162: PUSH
20163: FOR_TO
20164: IFFALSE 20332
// begin PrepareMechanic ( false , skill ) ;
20166: LD_INT 0
20168: PPUSH
20169: LD_VAR 0 4
20173: PPUSH
20174: CALL_OW 383
// un := CreateHuman ;
20178: LD_ADDR_VAR 0 5
20182: PUSH
20183: CALL_OW 44
20187: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20188: LD_VAR 0 5
20192: PPUSH
20193: LD_INT 999
20195: PPUSH
20196: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20200: LD_INT 3
20202: PPUSH
20203: LD_INT 1
20205: PPUSH
20206: LD_INT 1
20208: PPUSH
20209: LD_INT 3
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: LD_INT 4
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: PUSH
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 3
20230: MOD
20231: PUSH
20232: LD_INT 1
20234: PLUS
20235: ARRAY
20236: PPUSH
20237: LD_INT 80
20239: PPUSH
20240: CALL 31953 0 5
// veh := CreateVehicle ;
20244: LD_ADDR_VAR 0 6
20248: PUSH
20249: CALL_OW 45
20253: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20254: LD_VAR 0 6
20258: PPUSH
20259: LD_INT 0
20261: PPUSH
20262: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20266: LD_VAR 0 6
20270: PPUSH
20271: LD_INT 31
20273: PPUSH
20274: LD_INT 0
20276: PPUSH
20277: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20281: LD_VAR 0 5
20285: PPUSH
20286: LD_VAR 0 6
20290: PPUSH
20291: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20295: LD_VAR 0 5
20299: PPUSH
20300: LD_INT 96
20302: PPUSH
20303: LD_INT 137
20305: PPUSH
20306: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20310: LD_ADDR_EXP 57
20314: PUSH
20315: LD_EXP 57
20319: PPUSH
20320: LD_VAR 0 6
20324: PPUSH
20325: CALL 64824 0 2
20329: ST_TO_ADDR
// end ;
20330: GO 20163
20332: POP
20333: POP
// end ;
20334: LD_VAR 0 2
20338: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20339: LD_EXP 57
20343: IFFALSE 20479
20345: GO 20347
20347: DISABLE
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
// begin enable ;
20352: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_EXP 57
20362: PUSH
20363: LD_EXP 56
20367: UNION
20368: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20369: LD_ADDR_EXP 55
20373: PUSH
20374: EMPTY
20375: ST_TO_ADDR
// amAttackersInf := [ ] ;
20376: LD_ADDR_EXP 56
20380: PUSH
20381: EMPTY
20382: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20383: LD_INT 70
20385: PPUSH
20386: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_VAR 0 2
20399: PPUSH
20400: LD_INT 50
20402: PUSH
20403: EMPTY
20404: LIST
20405: PPUSH
20406: CALL_OW 72
20410: ST_TO_ADDR
// for i in tmp do
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20470
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20424: LD_VAR 0 1
20428: PPUSH
20429: LD_INT 96
20431: PUSH
20432: LD_INT 145
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 99
20441: PUSH
20442: LD_INT 130
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 87
20451: PUSH
20452: LD_INT 103
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: PPUSH
20464: CALL 67428 0 2
20468: GO 20421
20470: POP
20471: POP
20472: LD_VAR 0 2
20476: NOT
20477: IFFALSE 20383
// end ;
20479: PPOPN 2
20481: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20482: LD_EXP 37
20486: PUSH
20487: LD_EXP 5
20491: AND
20492: IFFALSE 21071
20494: GO 20496
20496: DISABLE
20497: LD_INT 0
20499: PPUSH
20500: PPUSH
20501: PPUSH
// begin enable ;
20502: ENABLE
// if not amVehiclesAtttackers then
20503: LD_EXP 37
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 21071
// for i in amVehiclesAtttackers do
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_EXP 37
20521: PUSH
20522: FOR_IN
20523: IFFALSE 21069
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 302
20534: NOT
20535: PUSH
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 255
20545: PUSH
20546: LD_EXP 3
20550: PUSH
20551: LD_INT 1
20553: ARRAY
20554: NONEQUAL
20555: OR
20556: IFFALSE 20576
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20558: LD_ADDR_EXP 37
20562: PUSH
20563: LD_EXP 37
20567: PUSH
20568: LD_VAR 0 1
20572: DIFF
20573: ST_TO_ADDR
// continue ;
20574: GO 20522
// end ; if GetTag ( i ) = 300 then
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 110
20585: PUSH
20586: LD_INT 300
20588: EQUAL
20589: IFFALSE 20704
// begin if GetFuel ( i ) < 50 then
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 261
20600: PUSH
20601: LD_INT 50
20603: LESS
20604: IFFALSE 20663
// begin ComMoveXY ( i , 24 , 36 ) ;
20606: LD_VAR 0 1
20610: PPUSH
20611: LD_INT 24
20613: PPUSH
20614: LD_INT 36
20616: PPUSH
20617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20621: LD_INT 35
20623: PPUSH
20624: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
20628: LD_VAR 0 1
20632: PPUSH
20633: LD_INT 24
20635: PPUSH
20636: LD_INT 36
20638: PPUSH
20639: CALL_OW 297
20643: PUSH
20644: LD_INT 4
20646: LESS
20647: IFFALSE 20621
// SetFuel ( i , 100 ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 100
20656: PPUSH
20657: CALL_OW 240
// end else
20661: GO 20704
// if not IsInArea ( i , amParkingArea ) then
20663: LD_VAR 0 1
20667: PPUSH
20668: LD_INT 27
20670: PPUSH
20671: CALL_OW 308
20675: NOT
20676: IFFALSE 20692
// ComMoveToArea ( i , amParkingArea ) else
20678: LD_VAR 0 1
20682: PPUSH
20683: LD_INT 27
20685: PPUSH
20686: CALL_OW 113
20690: GO 20704
// SetTag ( i , 301 ) ;
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_INT 301
20699: PPUSH
20700: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 110
20713: PUSH
20714: LD_INT 301
20716: EQUAL
20717: IFFALSE 20859
// begin if GetLives ( i ) < 1000 then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 256
20728: PUSH
20729: LD_INT 1000
20731: LESS
20732: IFFALSE 20836
// begin if not IsDrivenBy ( i ) then
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL_OW 311
20743: NOT
20744: IFFALSE 20748
// continue ;
20746: GO 20522
// mech := IsDrivenBy ( i ) ;
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 311
20762: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20763: LD_VAR 0 2
20767: PPUSH
20768: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20772: LD_VAR 0 2
20776: PPUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20786: LD_INT 35
20788: PPUSH
20789: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 256
20802: PUSH
20803: LD_INT 1000
20805: EQUAL
20806: IFFALSE 20786
// SetLives ( mech , 1000 ) ;
20808: LD_VAR 0 2
20812: PPUSH
20813: LD_INT 1000
20815: PPUSH
20816: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20820: LD_VAR 0 2
20824: PPUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: CALL_OW 120
// end else
20834: GO 20859
// if IsDrivenBy ( i ) then
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL_OW 311
20845: IFFALSE 20859
// SetTag ( i , 0 ) ;
20847: LD_VAR 0 1
20851: PPUSH
20852: LD_INT 0
20854: PPUSH
20855: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 110
20868: PUSH
20869: LD_INT 300
20871: LESS
20872: IFFALSE 21067
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20874: LD_ADDR_VAR 0 3
20878: PUSH
20879: LD_INT 3
20881: PPUSH
20882: LD_INT 81
20884: PUSH
20885: LD_EXP 3
20889: PUSH
20890: LD_INT 1
20892: ARRAY
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 70
20902: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 256
20912: PUSH
20913: LD_INT 650
20915: LESS
20916: IFFALSE 20941
// begin ComStop ( i ) ;
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL_OW 141
// SetTag ( i , 300 ) ;
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_INT 300
20934: PPUSH
20935: CALL_OW 109
// continue ;
20939: GO 20522
// end ; if enemy then
20941: LD_VAR 0 3
20945: IFFALSE 20985
// begin if not HasTask ( i ) then
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 314
20956: NOT
20957: IFFALSE 20983
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20959: LD_VAR 0 1
20963: PPUSH
20964: LD_VAR 0 3
20968: PPUSH
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 74
20978: PPUSH
20979: CALL_OW 115
// end else
20983: GO 21067
// if amVehiclesAtttackers then
20985: LD_EXP 37
20989: IFFALSE 21067
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20991: LD_ADDR_VAR 0 3
20995: PUSH
20996: LD_INT 81
20998: PUSH
20999: LD_EXP 3
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PPUSH
21012: CALL_OW 69
21016: ST_TO_ADDR
// if enemy then
21017: LD_VAR 0 3
21021: IFFALSE 21067
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_INT 49
21030: PUSH
21031: LD_INT 43
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 63
21040: PUSH
21041: LD_INT 56
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 72
21050: PUSH
21051: LD_INT 67
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL 67428 0 2
// end ; end ; end ;
21067: GO 20522
21069: POP
21070: POP
// end ;
21071: PPOPN 3
21073: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21074: LD_INT 22
21076: PUSH
21077: LD_EXP 3
21081: PUSH
21082: LD_INT 1
21084: ARRAY
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 32
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 69
21108: IFFALSE 21191
21110: GO 21112
21112: DISABLE
21113: LD_INT 0
21115: PPUSH
// begin enable ;
21116: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21117: LD_ADDR_VAR 0 1
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_EXP 3
21129: PUSH
21130: LD_INT 1
21132: ARRAY
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 32
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 69
21156: PUSH
21157: FOR_IN
21158: IFFALSE 21189
// if GetFuel ( i ) < 3 then
21160: LD_VAR 0 1
21164: PPUSH
21165: CALL_OW 261
21169: PUSH
21170: LD_INT 3
21172: LESS
21173: IFFALSE 21187
// SetFuel ( i , 3 ) ;
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_INT 3
21182: PPUSH
21183: CALL_OW 240
21187: GO 21157
21189: POP
21190: POP
// end ; end_of_file
21191: PPOPN 1
21193: END
// every 0 0$20 trigger game do
21194: LD_EXP 2
21198: IFFALSE 21247
21200: GO 21202
21202: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21203: LD_INT 20
21205: PUSH
21206: LD_INT 22
21208: PUSH
21209: LD_INT 21
21211: PUSH
21212: LD_INT 3
21214: PUSH
21215: LD_INT 5
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: PPUSH
21225: LD_EXP 21
21229: PUSH
21230: LD_INT 2
21232: ARRAY
21233: PPUSH
21234: LD_EXP 21
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: CALL 21248 0 3
21247: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
// if not areas then
21254: LD_VAR 0 1
21258: NOT
21259: IFFALSE 21263
// exit ;
21261: GO 21640
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21263: LD_ADDR_VAR 0 7
21267: PUSH
21268: LD_INT 17
21270: PUSH
21271: LD_INT 18
21273: PUSH
21274: LD_INT 19
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: ST_TO_ADDR
// x := 5 ;
21282: LD_ADDR_VAR 0 6
21286: PUSH
21287: LD_INT 5
21289: ST_TO_ADDR
// repeat wait ( time ) ;
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21299: LD_OWVAR 1
21303: PUSH
21304: LD_INT 37800
21306: PUSH
21307: LD_INT 31500
21309: PUSH
21310: LD_INT 25200
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: LIST
21317: PUSH
21318: LD_OWVAR 67
21322: ARRAY
21323: LESS
21324: IFFALSE 21463
// begin for i := 1 to multi_sides do
21326: LD_ADDR_VAR 0 5
21330: PUSH
21331: DOUBLE
21332: LD_INT 1
21334: DEC
21335: ST_TO_ADDR
21336: LD_EXP 7
21340: PUSH
21341: FOR_TO
21342: IFFALSE 21454
// if multi_sides [ i ] then
21344: LD_EXP 7
21348: PUSH
21349: LD_VAR 0 5
21353: ARRAY
21354: IFFALSE 21452
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21356: LD_VAR 0 7
21360: PUSH
21361: LD_EXP 7
21365: PUSH
21366: LD_VAR 0 5
21370: ARRAY
21371: ARRAY
21372: PPUSH
21373: LD_INT 1
21375: PPUSH
21376: CALL_OW 287
21380: PUSH
21381: LD_INT 32
21383: PUSH
21384: LD_INT 25
21386: PUSH
21387: LD_INT 23
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: LD_OWVAR 67
21399: ARRAY
21400: LESS
21401: IFFALSE 21452
// begin amount := amount - ( x * 10 ) ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_VAR 0 3
21412: PUSH
21413: LD_VAR 0 6
21417: PUSH
21418: LD_INT 10
21420: MUL
21421: MINUS
21422: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21423: LD_VAR 0 6
21427: PPUSH
21428: LD_VAR 0 7
21432: PUSH
21433: LD_EXP 7
21437: PUSH
21438: LD_VAR 0 5
21442: ARRAY
21443: ARRAY
21444: PPUSH
21445: LD_INT 1
21447: PPUSH
21448: CALL_OW 55
// end ; end ;
21452: GO 21341
21454: POP
21455: POP
// wait ( 0 0$2 ) ;
21456: LD_INT 70
21458: PPUSH
21459: CALL_OW 67
// end ; for i in areas do
21463: LD_ADDR_VAR 0 5
21467: PUSH
21468: LD_VAR 0 1
21472: PUSH
21473: FOR_IN
21474: IFFALSE 21557
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21476: LD_VAR 0 5
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: CALL_OW 287
21488: PUSH
21489: LD_INT 25
21491: PUSH
21492: LD_INT 22
21494: PUSH
21495: LD_INT 20
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: PUSH
21503: LD_OWVAR 67
21507: ARRAY
21508: LESS
21509: IFFALSE 21555
// begin wait ( 0 0$5 ) ;
21511: LD_INT 175
21513: PPUSH
21514: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21518: LD_VAR 0 6
21522: PPUSH
21523: LD_VAR 0 5
21527: PPUSH
21528: LD_INT 1
21530: PPUSH
21531: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21535: LD_ADDR_VAR 0 3
21539: PUSH
21540: LD_VAR 0 3
21544: PUSH
21545: LD_VAR 0 6
21549: PUSH
21550: LD_INT 10
21552: MUL
21553: MINUS
21554: ST_TO_ADDR
// end ; end ;
21555: GO 21473
21557: POP
21558: POP
// time := time + 0 0$2 ;
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: LD_VAR 0 2
21568: PUSH
21569: LD_INT 70
21571: PLUS
21572: ST_TO_ADDR
// x := x - 1 ;
21573: LD_ADDR_VAR 0 6
21577: PUSH
21578: LD_VAR 0 6
21582: PUSH
21583: LD_INT 1
21585: MINUS
21586: ST_TO_ADDR
// if x = 0 then
21587: LD_VAR 0 6
21591: PUSH
21592: LD_INT 0
21594: EQUAL
21595: IFFALSE 21605
// x := 5 ;
21597: LD_ADDR_VAR 0 6
21601: PUSH
21602: LD_INT 5
21604: ST_TO_ADDR
// if time > 2 2$00 then
21605: LD_VAR 0 2
21609: PUSH
21610: LD_INT 4200
21612: GREATER
21613: IFFALSE 21623
// time := 0 0$30 ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_INT 1050
21622: ST_TO_ADDR
// until not game or amount <= 0 ;
21623: LD_EXP 2
21627: NOT
21628: PUSH
21629: LD_VAR 0 3
21633: PUSH
21634: LD_INT 0
21636: LESSEQUAL
21637: OR
21638: IFFALSE 21290
// end ; end_of_file
21640: LD_VAR 0 4
21644: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21645: LD_VAR 0 1
21649: PUSH
21650: LD_INT 200
21652: DOUBLE
21653: GREATEREQUAL
21654: IFFALSE 21662
21656: LD_INT 299
21658: DOUBLE
21659: LESSEQUAL
21660: IFTRUE 21664
21662: GO 21696
21664: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21665: LD_VAR 0 1
21669: PPUSH
21670: LD_VAR 0 2
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: LD_VAR 0 4
21684: PPUSH
21685: LD_VAR 0 5
21689: PPUSH
21690: CALL 22393 0 5
21694: GO 21773
21696: LD_INT 300
21698: DOUBLE
21699: GREATEREQUAL
21700: IFFALSE 21708
21702: LD_INT 399
21704: DOUBLE
21705: LESSEQUAL
21706: IFTRUE 21710
21708: GO 21772
21710: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_VAR 0 2
21720: PPUSH
21721: LD_VAR 0 3
21725: PPUSH
21726: LD_VAR 0 4
21730: PPUSH
21731: LD_VAR 0 5
21735: PPUSH
21736: LD_VAR 0 6
21740: PPUSH
21741: LD_VAR 0 7
21745: PPUSH
21746: LD_VAR 0 8
21750: PPUSH
21751: LD_VAR 0 9
21755: PPUSH
21756: LD_VAR 0 10
21760: PPUSH
21761: LD_VAR 0 11
21765: PPUSH
21766: CALL 69956 0 11
21770: GO 21773
21772: POP
// end ;
21773: PPOPN 11
21775: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21776: LD_VAR 0 1
21780: PPUSH
21781: LD_VAR 0 2
21785: PPUSH
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_VAR 0 4
21795: PPUSH
21796: LD_VAR 0 5
21800: PPUSH
21801: CALL 21858 0 5
// end ; end_of_file
21805: PPOPN 5
21807: END
// export function SOS_UnitDestroyed ( un ) ; begin
21808: LD_INT 0
21810: PPUSH
// ComRadiation ( un ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL 22797 0 1
// end ;
21820: LD_VAR 0 2
21824: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21825: LD_INT 0
21827: PPUSH
// ComRadiation ( un ) ;
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL 22797 0 1
// end ;
21837: LD_VAR 0 2
21841: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21842: LD_INT 0
21844: PPUSH
// end ;
21845: LD_VAR 0 4
21849: RET
// export function SOS_Command ( cmd ) ; begin
21850: LD_INT 0
21852: PPUSH
// end ;
21853: LD_VAR 0 2
21857: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21858: LD_INT 0
21860: PPUSH
// end ;
21861: LD_VAR 0 6
21865: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
21866: LD_INT 0
21868: PPUSH
21869: PPUSH
21870: PPUSH
21871: PPUSH
21872: PPUSH
// if not vehicle or not factory then
21873: LD_VAR 0 1
21877: NOT
21878: PUSH
21879: LD_VAR 0 2
21883: NOT
21884: OR
21885: IFFALSE 21889
// exit ;
21887: GO 22388
// if not factoryWaypoints then
21889: LD_EXP 68
21893: NOT
21894: IFFALSE 21898
// exit ;
21896: GO 22388
// for i := 1 to Count ( factoryWaypoints ) do
21898: LD_ADDR_VAR 0 4
21902: PUSH
21903: DOUBLE
21904: LD_INT 1
21906: DEC
21907: ST_TO_ADDR
21908: LD_EXP 68
21912: PPUSH
21913: CALL 29215 0 1
21917: PUSH
21918: FOR_TO
21919: IFFALSE 22386
// if factoryWaypoints [ i ] [ 2 ] = factory then
21921: LD_EXP 68
21925: PUSH
21926: LD_VAR 0 4
21930: ARRAY
21931: PUSH
21932: LD_INT 2
21934: ARRAY
21935: PUSH
21936: LD_VAR 0 2
21940: EQUAL
21941: IFFALSE 22384
// begin if GetControl ( vehicle ) = control_manual then
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 263
21952: PUSH
21953: LD_INT 1
21955: EQUAL
21956: IFFALSE 22267
// begin driver := IsDrivenBy ( vehicle ) ;
21958: LD_ADDR_VAR 0 6
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 311
21972: ST_TO_ADDR
// tag := GetTag ( driver ) ;
21973: LD_ADDR_VAR 0 5
21977: PUSH
21978: LD_VAR 0 6
21982: PPUSH
21983: CALL_OW 110
21987: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
21988: LD_VAR 0 5
21992: PUSH
21993: LD_INT 501
21995: EQUAL
21996: PUSH
21997: LD_VAR 0 1
22001: PPUSH
22002: CALL_OW 110
22006: PUSH
22007: LD_INT 501
22009: EQUAL
22010: OR
22011: IFFALSE 22017
// exit ;
22013: POP
22014: POP
22015: GO 22388
// if not HasTask ( driver ) then
22017: LD_VAR 0 6
22021: PPUSH
22022: CALL_OW 314
22026: NOT
22027: IFFALSE 22265
// begin SetTag ( driver , tDriver ) ;
22029: LD_VAR 0 6
22033: PPUSH
22034: LD_INT 501
22036: PPUSH
22037: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_INT 501
22048: PPUSH
22049: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22053: LD_ADDR_VAR 0 7
22057: PUSH
22058: LD_EXP 68
22062: PUSH
22063: LD_VAR 0 4
22067: ARRAY
22068: PUSH
22069: LD_INT 3
22071: ARRAY
22072: PPUSH
22073: LD_EXP 68
22077: PUSH
22078: LD_VAR 0 4
22082: ARRAY
22083: PUSH
22084: LD_INT 4
22086: ARRAY
22087: PPUSH
22088: CALL_OW 428
22092: ST_TO_ADDR
// if hex then
22093: LD_VAR 0 7
22097: IFFALSE 22115
// ComMoveUnit ( driver , hex ) else
22099: LD_VAR 0 6
22103: PPUSH
22104: LD_VAR 0 7
22108: PPUSH
22109: CALL_OW 112
22113: GO 22154
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22115: LD_VAR 0 6
22119: PPUSH
22120: LD_EXP 68
22124: PUSH
22125: LD_VAR 0 4
22129: ARRAY
22130: PUSH
22131: LD_INT 3
22133: ARRAY
22134: PPUSH
22135: LD_EXP 68
22139: PUSH
22140: LD_VAR 0 4
22144: ARRAY
22145: PUSH
22146: LD_INT 4
22148: ARRAY
22149: PPUSH
22150: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22154: LD_VAR 0 6
22158: PPUSH
22159: CALL_OW 181
// if Multiplayer then
22163: LD_OWVAR 4
22167: IFFALSE 22216
// begin repeat wait ( 10 ) ;
22169: LD_INT 10
22171: PPUSH
22172: CALL_OW 67
// until not IsInUnit ( driver ) ;
22176: LD_VAR 0 6
22180: PPUSH
22181: CALL_OW 310
22185: NOT
22186: IFFALSE 22169
// if not HasTask ( driver ) then
22188: LD_VAR 0 6
22192: PPUSH
22193: CALL_OW 314
22197: NOT
22198: IFFALSE 22214
// ComEnterUnit ( driver , factory ) ;
22200: LD_VAR 0 6
22204: PPUSH
22205: LD_VAR 0 2
22209: PPUSH
22210: CALL_OW 120
// end else
22214: GO 22230
// AddComEnterUnit ( driver , factory ) ;
22216: LD_VAR 0 6
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: CALL_OW 180
// wait ( 0 0$1 ) ;
22230: LD_INT 35
22232: PPUSH
22233: CALL_OW 67
// SetTag ( driver , tag ) ;
22237: LD_VAR 0 6
22241: PPUSH
22242: LD_VAR 0 5
22246: PPUSH
22247: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
22251: LD_VAR 0 1
22255: PPUSH
22256: LD_INT 0
22258: PPUSH
22259: CALL_OW 109
// break ;
22263: GO 22386
// end ; end else
22265: GO 22384
// if GetControl ( vehicle ) = control_remote then
22267: LD_VAR 0 1
22271: PPUSH
22272: CALL_OW 263
22276: PUSH
22277: LD_INT 2
22279: EQUAL
22280: IFFALSE 22343
// begin wait ( 0 0$2 ) ;
22282: LD_INT 70
22284: PPUSH
22285: CALL_OW 67
// if Connect ( vehicle ) then
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL 35421 0 1
22298: IFFALSE 22339
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22300: LD_VAR 0 1
22304: PPUSH
22305: LD_EXP 68
22309: PUSH
22310: LD_VAR 0 4
22314: ARRAY
22315: PUSH
22316: LD_INT 3
22318: ARRAY
22319: PPUSH
22320: LD_EXP 68
22324: PUSH
22325: LD_VAR 0 4
22329: ARRAY
22330: PUSH
22331: LD_INT 4
22333: ARRAY
22334: PPUSH
22335: CALL_OW 171
// break ;
22339: GO 22386
// end else
22341: GO 22384
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_EXP 68
22352: PUSH
22353: LD_VAR 0 4
22357: ARRAY
22358: PUSH
22359: LD_INT 3
22361: ARRAY
22362: PPUSH
22363: LD_EXP 68
22367: PUSH
22368: LD_VAR 0 4
22372: ARRAY
22373: PUSH
22374: LD_INT 4
22376: ARRAY
22377: PPUSH
22378: CALL_OW 171
// break ;
22382: GO 22386
// end ; end ;
22384: GO 21918
22386: POP
22387: POP
// end ;
22388: LD_VAR 0 3
22392: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22393: LD_INT 0
22395: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22396: LD_VAR 0 1
22400: PUSH
22401: LD_INT 250
22403: EQUAL
22404: PUSH
22405: LD_VAR 0 2
22409: PPUSH
22410: CALL_OW 264
22414: PUSH
22415: LD_INT 81
22417: EQUAL
22418: AND
22419: IFFALSE 22440
// MinerPlaceMine ( unit , x , y ) ;
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: LD_VAR 0 5
22435: PPUSH
22436: CALL 25532 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22440: LD_VAR 0 1
22444: PUSH
22445: LD_INT 251
22447: EQUAL
22448: PUSH
22449: LD_VAR 0 2
22453: PPUSH
22454: CALL_OW 264
22458: PUSH
22459: LD_INT 81
22461: EQUAL
22462: AND
22463: IFFALSE 22484
// MinerDetonateMine ( unit , x , y ) ;
22465: LD_VAR 0 2
22469: PPUSH
22470: LD_VAR 0 4
22474: PPUSH
22475: LD_VAR 0 5
22479: PPUSH
22480: CALL 25807 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22484: LD_VAR 0 1
22488: PUSH
22489: LD_INT 252
22491: EQUAL
22492: PUSH
22493: LD_VAR 0 2
22497: PPUSH
22498: CALL_OW 264
22502: PUSH
22503: LD_INT 81
22505: EQUAL
22506: AND
22507: IFFALSE 22528
// MinerCreateMinefield ( unit , x , y ) ;
22509: LD_VAR 0 2
22513: PPUSH
22514: LD_VAR 0 4
22518: PPUSH
22519: LD_VAR 0 5
22523: PPUSH
22524: CALL 26224 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22528: LD_VAR 0 1
22532: PUSH
22533: LD_INT 253
22535: EQUAL
22536: PUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: CALL_OW 257
22546: PUSH
22547: LD_INT 5
22549: EQUAL
22550: AND
22551: IFFALSE 22572
// ComBinocular ( unit , x , y ) ;
22553: LD_VAR 0 2
22557: PPUSH
22558: LD_VAR 0 4
22562: PPUSH
22563: LD_VAR 0 5
22567: PPUSH
22568: CALL 26593 0 3
// if selectedUnit then
22572: LD_VAR 0 3
22576: IFFALSE 22632
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22578: LD_VAR 0 1
22582: PUSH
22583: LD_INT 254
22585: EQUAL
22586: PUSH
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 264
22596: PUSH
22597: LD_INT 99
22599: EQUAL
22600: AND
22601: PUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: CALL_OW 263
22611: PUSH
22612: LD_INT 3
22614: EQUAL
22615: AND
22616: IFFALSE 22632
// HackDestroyVehicle ( unit , selectedUnit ) ;
22618: LD_VAR 0 2
22622: PPUSH
22623: LD_VAR 0 3
22627: PPUSH
22628: CALL 24896 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22632: LD_VAR 0 1
22636: PUSH
22637: LD_INT 255
22639: EQUAL
22640: PUSH
22641: LD_VAR 0 2
22645: PPUSH
22646: CALL_OW 264
22650: PUSH
22651: LD_INT 14
22653: PUSH
22654: LD_INT 53
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: IN
22661: AND
22662: PUSH
22663: LD_VAR 0 4
22667: PPUSH
22668: LD_VAR 0 5
22672: PPUSH
22673: CALL_OW 488
22677: AND
22678: IFFALSE 22702
// CutTreeXYR ( unit , x , y , 12 ) ;
22680: LD_VAR 0 2
22684: PPUSH
22685: LD_VAR 0 4
22689: PPUSH
22690: LD_VAR 0 5
22694: PPUSH
22695: LD_INT 12
22697: PPUSH
22698: CALL 22893 0 4
// if cmd = 256 then
22702: LD_VAR 0 1
22706: PUSH
22707: LD_INT 256
22709: EQUAL
22710: IFFALSE 22731
// SetFactoryWaypoint ( unit , x , y ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_VAR 0 4
22721: PPUSH
22722: LD_VAR 0 5
22726: PPUSH
22727: CALL 69964 0 3
// if cmd = 257 then
22731: LD_VAR 0 1
22735: PUSH
22736: LD_INT 257
22738: EQUAL
22739: IFFALSE 22760
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22741: LD_VAR 0 2
22745: PPUSH
22746: LD_VAR 0 4
22750: PPUSH
22751: LD_VAR 0 5
22755: PPUSH
22756: CALL 70454 0 3
// if cmd = 258 then
22760: LD_VAR 0 1
22764: PUSH
22765: LD_INT 258
22767: EQUAL
22768: IFFALSE 22792
// BurnTreeXYR ( unit , x , y , 8 ) ;
22770: LD_VAR 0 2
22774: PPUSH
22775: LD_VAR 0 4
22779: PPUSH
22780: LD_VAR 0 5
22784: PPUSH
22785: LD_INT 8
22787: PPUSH
22788: CALL 23287 0 4
// end ;
22792: LD_VAR 0 6
22796: RET
// export function ComRadiation ( un ) ; var eff ; begin
22797: LD_INT 0
22799: PPUSH
22800: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 264
22810: PUSH
22811: LD_INT 91
22813: NONEQUAL
22814: IFFALSE 22818
// exit ;
22816: GO 22888
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22818: LD_INT 68
22820: PPUSH
22821: LD_VAR 0 1
22825: PPUSH
22826: CALL_OW 255
22830: PPUSH
22831: CALL_OW 321
22835: PUSH
22836: LD_INT 2
22838: EQUAL
22839: IFFALSE 22851
// eff := 70 else
22841: LD_ADDR_VAR 0 3
22845: PUSH
22846: LD_INT 70
22848: ST_TO_ADDR
22849: GO 22859
// eff := 30 ;
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_INT 30
22858: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 250
22868: PPUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 251
22878: PPUSH
22879: LD_VAR 0 3
22883: PPUSH
22884: CALL_OW 495
// end ;
22888: LD_VAR 0 2
22892: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22904: LD_VAR 0 1
22908: PPUSH
22909: CALL_OW 302
22913: NOT
22914: PUSH
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_VAR 0 3
22924: PPUSH
22925: CALL_OW 488
22929: NOT
22930: OR
22931: PUSH
22932: LD_VAR 0 4
22936: NOT
22937: OR
22938: IFFALSE 22942
// exit ;
22940: GO 23282
// list := [ ] ;
22942: LD_ADDR_VAR 0 13
22946: PUSH
22947: EMPTY
22948: ST_TO_ADDR
// if x - r < 0 then
22949: LD_VAR 0 2
22953: PUSH
22954: LD_VAR 0 4
22958: MINUS
22959: PUSH
22960: LD_INT 0
22962: LESS
22963: IFFALSE 22975
// min_x := 0 else
22965: LD_ADDR_VAR 0 7
22969: PUSH
22970: LD_INT 0
22972: ST_TO_ADDR
22973: GO 22991
// min_x := x - r ;
22975: LD_ADDR_VAR 0 7
22979: PUSH
22980: LD_VAR 0 2
22984: PUSH
22985: LD_VAR 0 4
22989: MINUS
22990: ST_TO_ADDR
// if y - r < 0 then
22991: LD_VAR 0 3
22995: PUSH
22996: LD_VAR 0 4
23000: MINUS
23001: PUSH
23002: LD_INT 0
23004: LESS
23005: IFFALSE 23017
// min_y := 0 else
23007: LD_ADDR_VAR 0 8
23011: PUSH
23012: LD_INT 0
23014: ST_TO_ADDR
23015: GO 23033
// min_y := y - r ;
23017: LD_ADDR_VAR 0 8
23021: PUSH
23022: LD_VAR 0 3
23026: PUSH
23027: LD_VAR 0 4
23031: MINUS
23032: ST_TO_ADDR
// max_x := x + r ;
23033: LD_ADDR_VAR 0 9
23037: PUSH
23038: LD_VAR 0 2
23042: PUSH
23043: LD_VAR 0 4
23047: PLUS
23048: ST_TO_ADDR
// max_y := y + r ;
23049: LD_ADDR_VAR 0 10
23053: PUSH
23054: LD_VAR 0 3
23058: PUSH
23059: LD_VAR 0 4
23063: PLUS
23064: ST_TO_ADDR
// for _x = min_x to max_x do
23065: LD_ADDR_VAR 0 11
23069: PUSH
23070: DOUBLE
23071: LD_VAR 0 7
23075: DEC
23076: ST_TO_ADDR
23077: LD_VAR 0 9
23081: PUSH
23082: FOR_TO
23083: IFFALSE 23200
// for _y = min_y to max_y do
23085: LD_ADDR_VAR 0 12
23089: PUSH
23090: DOUBLE
23091: LD_VAR 0 8
23095: DEC
23096: ST_TO_ADDR
23097: LD_VAR 0 10
23101: PUSH
23102: FOR_TO
23103: IFFALSE 23196
// begin if not ValidHex ( _x , _y ) then
23105: LD_VAR 0 11
23109: PPUSH
23110: LD_VAR 0 12
23114: PPUSH
23115: CALL_OW 488
23119: NOT
23120: IFFALSE 23124
// continue ;
23122: GO 23102
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23124: LD_VAR 0 11
23128: PPUSH
23129: LD_VAR 0 12
23133: PPUSH
23134: CALL_OW 351
23138: PUSH
23139: LD_VAR 0 11
23143: PPUSH
23144: LD_VAR 0 12
23148: PPUSH
23149: CALL_OW 554
23153: AND
23154: IFFALSE 23194
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23156: LD_ADDR_VAR 0 13
23160: PUSH
23161: LD_VAR 0 13
23165: PPUSH
23166: LD_VAR 0 13
23170: PUSH
23171: LD_INT 1
23173: PLUS
23174: PPUSH
23175: LD_VAR 0 11
23179: PUSH
23180: LD_VAR 0 12
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: CALL_OW 2
23193: ST_TO_ADDR
// end ;
23194: GO 23102
23196: POP
23197: POP
23198: GO 23082
23200: POP
23201: POP
// if not list then
23202: LD_VAR 0 13
23206: NOT
23207: IFFALSE 23211
// exit ;
23209: GO 23282
// for i in list do
23211: LD_ADDR_VAR 0 6
23215: PUSH
23216: LD_VAR 0 13
23220: PUSH
23221: FOR_IN
23222: IFFALSE 23280
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23224: LD_VAR 0 1
23228: PPUSH
23229: LD_STRING M
23231: PUSH
23232: LD_VAR 0 6
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PUSH
23241: LD_VAR 0 6
23245: PUSH
23246: LD_INT 2
23248: ARRAY
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: PPUSH
23274: CALL_OW 447
23278: GO 23221
23280: POP
23281: POP
// end ;
23282: LD_VAR 0 5
23286: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23287: LD_INT 0
23289: PPUSH
23290: PPUSH
23291: PPUSH
23292: PPUSH
23293: PPUSH
23294: PPUSH
23295: PPUSH
23296: PPUSH
23297: PPUSH
23298: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23299: LD_VAR 0 1
23303: PPUSH
23304: CALL_OW 302
23308: NOT
23309: PUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_VAR 0 3
23319: PPUSH
23320: CALL_OW 488
23324: NOT
23325: OR
23326: PUSH
23327: LD_VAR 0 4
23331: NOT
23332: OR
23333: IFFALSE 23337
// exit ;
23335: GO 23850
// list := [ ] ;
23337: LD_ADDR_VAR 0 13
23341: PUSH
23342: EMPTY
23343: ST_TO_ADDR
// if x - r < 0 then
23344: LD_VAR 0 2
23348: PUSH
23349: LD_VAR 0 4
23353: MINUS
23354: PUSH
23355: LD_INT 0
23357: LESS
23358: IFFALSE 23370
// min_x := 0 else
23360: LD_ADDR_VAR 0 7
23364: PUSH
23365: LD_INT 0
23367: ST_TO_ADDR
23368: GO 23386
// min_x := x - r ;
23370: LD_ADDR_VAR 0 7
23374: PUSH
23375: LD_VAR 0 2
23379: PUSH
23380: LD_VAR 0 4
23384: MINUS
23385: ST_TO_ADDR
// if y - r < 0 then
23386: LD_VAR 0 3
23390: PUSH
23391: LD_VAR 0 4
23395: MINUS
23396: PUSH
23397: LD_INT 0
23399: LESS
23400: IFFALSE 23412
// min_y := 0 else
23402: LD_ADDR_VAR 0 8
23406: PUSH
23407: LD_INT 0
23409: ST_TO_ADDR
23410: GO 23428
// min_y := y - r ;
23412: LD_ADDR_VAR 0 8
23416: PUSH
23417: LD_VAR 0 3
23421: PUSH
23422: LD_VAR 0 4
23426: MINUS
23427: ST_TO_ADDR
// max_x := x + r ;
23428: LD_ADDR_VAR 0 9
23432: PUSH
23433: LD_VAR 0 2
23437: PUSH
23438: LD_VAR 0 4
23442: PLUS
23443: ST_TO_ADDR
// max_y := y + r ;
23444: LD_ADDR_VAR 0 10
23448: PUSH
23449: LD_VAR 0 3
23453: PUSH
23454: LD_VAR 0 4
23458: PLUS
23459: ST_TO_ADDR
// for _x = min_x to max_x do
23460: LD_ADDR_VAR 0 11
23464: PUSH
23465: DOUBLE
23466: LD_VAR 0 7
23470: DEC
23471: ST_TO_ADDR
23472: LD_VAR 0 9
23476: PUSH
23477: FOR_TO
23478: IFFALSE 23595
// for _y = min_y to max_y do
23480: LD_ADDR_VAR 0 12
23484: PUSH
23485: DOUBLE
23486: LD_VAR 0 8
23490: DEC
23491: ST_TO_ADDR
23492: LD_VAR 0 10
23496: PUSH
23497: FOR_TO
23498: IFFALSE 23591
// begin if not ValidHex ( _x , _y ) then
23500: LD_VAR 0 11
23504: PPUSH
23505: LD_VAR 0 12
23509: PPUSH
23510: CALL_OW 488
23514: NOT
23515: IFFALSE 23519
// continue ;
23517: GO 23497
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23519: LD_VAR 0 11
23523: PPUSH
23524: LD_VAR 0 12
23528: PPUSH
23529: CALL_OW 351
23533: PUSH
23534: LD_VAR 0 11
23538: PPUSH
23539: LD_VAR 0 12
23543: PPUSH
23544: CALL_OW 554
23548: AND
23549: IFFALSE 23589
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23551: LD_ADDR_VAR 0 13
23555: PUSH
23556: LD_VAR 0 13
23560: PPUSH
23561: LD_VAR 0 13
23565: PUSH
23566: LD_INT 1
23568: PLUS
23569: PPUSH
23570: LD_VAR 0 11
23574: PUSH
23575: LD_VAR 0 12
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PPUSH
23584: CALL_OW 2
23588: ST_TO_ADDR
// end ;
23589: GO 23497
23591: POP
23592: POP
23593: GO 23477
23595: POP
23596: POP
// if not list then
23597: LD_VAR 0 13
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 23850
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23606: LD_ADDR_VAR 0 13
23610: PUSH
23611: LD_VAR 0 1
23615: PPUSH
23616: LD_VAR 0 13
23620: PPUSH
23621: LD_INT 1
23623: PPUSH
23624: LD_INT 1
23626: PPUSH
23627: CALL 32563 0 4
23631: ST_TO_ADDR
// ComStop ( flame ) ;
23632: LD_VAR 0 1
23636: PPUSH
23637: CALL_OW 141
// for i in list do
23641: LD_ADDR_VAR 0 6
23645: PUSH
23646: LD_VAR 0 13
23650: PUSH
23651: FOR_IN
23652: IFFALSE 23683
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23654: LD_VAR 0 1
23658: PPUSH
23659: LD_VAR 0 6
23663: PUSH
23664: LD_INT 1
23666: ARRAY
23667: PPUSH
23668: LD_VAR 0 6
23672: PUSH
23673: LD_INT 2
23675: ARRAY
23676: PPUSH
23677: CALL_OW 176
23681: GO 23651
23683: POP
23684: POP
// repeat wait ( 0 0$1 ) ;
23685: LD_INT 35
23687: PPUSH
23688: CALL_OW 67
// task := GetTaskList ( flame ) ;
23692: LD_ADDR_VAR 0 14
23696: PUSH
23697: LD_VAR 0 1
23701: PPUSH
23702: CALL_OW 437
23706: ST_TO_ADDR
// if not task then
23707: LD_VAR 0 14
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 23850
// if task [ 1 ] [ 1 ] <> | then
23716: LD_VAR 0 14
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PUSH
23725: LD_INT 1
23727: ARRAY
23728: PUSH
23729: LD_STRING |
23731: NONEQUAL
23732: IFFALSE 23736
// exit ;
23734: GO 23850
// _x := task [ 1 ] [ 2 ] ;
23736: LD_ADDR_VAR 0 11
23740: PUSH
23741: LD_VAR 0 14
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PUSH
23750: LD_INT 2
23752: ARRAY
23753: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23754: LD_ADDR_VAR 0 12
23758: PUSH
23759: LD_VAR 0 14
23763: PUSH
23764: LD_INT 1
23766: ARRAY
23767: PUSH
23768: LD_INT 3
23770: ARRAY
23771: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23772: LD_VAR 0 11
23776: PPUSH
23777: LD_VAR 0 12
23781: PPUSH
23782: CALL_OW 351
23786: NOT
23787: PUSH
23788: LD_VAR 0 11
23792: PPUSH
23793: LD_VAR 0 12
23797: PPUSH
23798: CALL_OW 554
23802: NOT
23803: OR
23804: IFFALSE 23838
// begin task := Delete ( task , 1 ) ;
23806: LD_ADDR_VAR 0 14
23810: PUSH
23811: LD_VAR 0 14
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: CALL_OW 3
23823: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23824: LD_VAR 0 1
23828: PPUSH
23829: LD_VAR 0 14
23833: PPUSH
23834: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 314
23847: NOT
23848: IFFALSE 23685
// end ;
23850: LD_VAR 0 5
23854: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23855: LD_EXP 58
23859: NOT
23860: IFFALSE 23910
23862: GO 23864
23864: DISABLE
// begin initHack := true ;
23865: LD_ADDR_EXP 58
23869: PUSH
23870: LD_INT 1
23872: ST_TO_ADDR
// hackTanks := [ ] ;
23873: LD_ADDR_EXP 59
23877: PUSH
23878: EMPTY
23879: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23880: LD_ADDR_EXP 60
23884: PUSH
23885: EMPTY
23886: ST_TO_ADDR
// hackLimit := 3 ;
23887: LD_ADDR_EXP 61
23891: PUSH
23892: LD_INT 3
23894: ST_TO_ADDR
// hackDist := 12 ;
23895: LD_ADDR_EXP 62
23899: PUSH
23900: LD_INT 12
23902: ST_TO_ADDR
// hackCounter := [ ] ;
23903: LD_ADDR_EXP 63
23907: PUSH
23908: EMPTY
23909: ST_TO_ADDR
// end ;
23910: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23911: LD_EXP 58
23915: PUSH
23916: LD_INT 34
23918: PUSH
23919: LD_INT 99
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PPUSH
23926: CALL_OW 69
23930: AND
23931: IFFALSE 24184
23933: GO 23935
23935: DISABLE
23936: LD_INT 0
23938: PPUSH
23939: PPUSH
// begin enable ;
23940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23941: LD_ADDR_VAR 0 1
23945: PUSH
23946: LD_INT 34
23948: PUSH
23949: LD_INT 99
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 69
23960: PUSH
23961: FOR_IN
23962: IFFALSE 24182
// begin if not i in hackTanks then
23964: LD_VAR 0 1
23968: PUSH
23969: LD_EXP 59
23973: IN
23974: NOT
23975: IFFALSE 24058
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23977: LD_ADDR_EXP 59
23981: PUSH
23982: LD_EXP 59
23986: PPUSH
23987: LD_EXP 59
23991: PUSH
23992: LD_INT 1
23994: PLUS
23995: PPUSH
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 1
24005: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24006: LD_ADDR_EXP 60
24010: PUSH
24011: LD_EXP 60
24015: PPUSH
24016: LD_EXP 60
24020: PUSH
24021: LD_INT 1
24023: PLUS
24024: PPUSH
24025: EMPTY
24026: PPUSH
24027: CALL_OW 1
24031: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24032: LD_ADDR_EXP 63
24036: PUSH
24037: LD_EXP 63
24041: PPUSH
24042: LD_EXP 63
24046: PUSH
24047: LD_INT 1
24049: PLUS
24050: PPUSH
24051: EMPTY
24052: PPUSH
24053: CALL_OW 1
24057: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 302
24067: NOT
24068: IFFALSE 24081
// begin HackUnlinkAll ( i ) ;
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL 24187 0 1
// continue ;
24079: GO 23961
// end ; HackCheckCapturedStatus ( i ) ;
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL 24630 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24090: LD_ADDR_VAR 0 2
24094: PUSH
24095: LD_INT 81
24097: PUSH
24098: LD_VAR 0 1
24102: PPUSH
24103: CALL_OW 255
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 33
24114: PUSH
24115: LD_INT 3
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 91
24124: PUSH
24125: LD_VAR 0 1
24129: PUSH
24130: LD_EXP 62
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 50
24142: PUSH
24143: EMPTY
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 2
24161: NOT
24162: IFFALSE 24166
// continue ;
24164: GO 23961
// HackLink ( i , tmp ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_VAR 0 2
24175: PPUSH
24176: CALL 24323 0 2
// end ;
24180: GO 23961
24182: POP
24183: POP
// end ;
24184: PPOPN 2
24186: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24187: LD_INT 0
24189: PPUSH
24190: PPUSH
24191: PPUSH
// if not hack in hackTanks then
24192: LD_VAR 0 1
24196: PUSH
24197: LD_EXP 59
24201: IN
24202: NOT
24203: IFFALSE 24207
// exit ;
24205: GO 24318
// index := GetElementIndex ( hackTanks , hack ) ;
24207: LD_ADDR_VAR 0 4
24211: PUSH
24212: LD_EXP 59
24216: PPUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL 31860 0 2
24226: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24227: LD_EXP 60
24231: PUSH
24232: LD_VAR 0 4
24236: ARRAY
24237: IFFALSE 24318
// begin for i in hackTanksCaptured [ index ] do
24239: LD_ADDR_VAR 0 3
24243: PUSH
24244: LD_EXP 60
24248: PUSH
24249: LD_VAR 0 4
24253: ARRAY
24254: PUSH
24255: FOR_IN
24256: IFFALSE 24282
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24258: LD_VAR 0 3
24262: PUSH
24263: LD_INT 1
24265: ARRAY
24266: PPUSH
24267: LD_VAR 0 3
24271: PUSH
24272: LD_INT 2
24274: ARRAY
24275: PPUSH
24276: CALL_OW 235
24280: GO 24255
24282: POP
24283: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24284: LD_ADDR_EXP 60
24288: PUSH
24289: LD_EXP 60
24293: PPUSH
24294: LD_VAR 0 4
24298: PPUSH
24299: EMPTY
24300: PPUSH
24301: CALL_OW 1
24305: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24306: LD_VAR 0 1
24310: PPUSH
24311: LD_INT 0
24313: PPUSH
24314: CALL_OW 505
// end ; end ;
24318: LD_VAR 0 2
24322: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24323: LD_INT 0
24325: PPUSH
24326: PPUSH
24327: PPUSH
// if not hack in hackTanks or not vehicles then
24328: LD_VAR 0 1
24332: PUSH
24333: LD_EXP 59
24337: IN
24338: NOT
24339: PUSH
24340: LD_VAR 0 2
24344: NOT
24345: OR
24346: IFFALSE 24350
// exit ;
24348: GO 24625
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24350: LD_ADDR_VAR 0 2
24354: PUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_VAR 0 2
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: LD_INT 1
24370: PPUSH
24371: CALL 32510 0 4
24375: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24376: LD_ADDR_VAR 0 5
24380: PUSH
24381: LD_EXP 59
24385: PPUSH
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL 31860 0 2
24395: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24396: LD_EXP 60
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_EXP 61
24411: LESS
24412: IFFALSE 24601
// begin for i := 1 to vehicles do
24414: LD_ADDR_VAR 0 4
24418: PUSH
24419: DOUBLE
24420: LD_INT 1
24422: DEC
24423: ST_TO_ADDR
24424: LD_VAR 0 2
24428: PUSH
24429: FOR_TO
24430: IFFALSE 24599
// begin if hackTanksCaptured [ index ] = hackLimit then
24432: LD_EXP 60
24436: PUSH
24437: LD_VAR 0 5
24441: ARRAY
24442: PUSH
24443: LD_EXP 61
24447: EQUAL
24448: IFFALSE 24452
// break ;
24450: GO 24599
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24452: LD_ADDR_EXP 63
24456: PUSH
24457: LD_EXP 63
24461: PPUSH
24462: LD_VAR 0 5
24466: PPUSH
24467: LD_EXP 63
24471: PUSH
24472: LD_VAR 0 5
24476: ARRAY
24477: PUSH
24478: LD_INT 1
24480: PLUS
24481: PPUSH
24482: CALL_OW 1
24486: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24487: LD_ADDR_EXP 60
24491: PUSH
24492: LD_EXP 60
24496: PPUSH
24497: LD_VAR 0 5
24501: PUSH
24502: LD_EXP 60
24506: PUSH
24507: LD_VAR 0 5
24511: ARRAY
24512: PUSH
24513: LD_INT 1
24515: PLUS
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PPUSH
24521: LD_VAR 0 2
24525: PUSH
24526: LD_VAR 0 4
24530: ARRAY
24531: PUSH
24532: LD_VAR 0 2
24536: PUSH
24537: LD_VAR 0 4
24541: ARRAY
24542: PPUSH
24543: CALL_OW 255
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL 32075 0 3
24556: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24557: LD_VAR 0 2
24561: PUSH
24562: LD_VAR 0 4
24566: ARRAY
24567: PPUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: PPUSH
24578: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24582: LD_VAR 0 2
24586: PUSH
24587: LD_VAR 0 4
24591: ARRAY
24592: PPUSH
24593: CALL_OW 141
// end ;
24597: GO 24429
24599: POP
24600: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24601: LD_VAR 0 1
24605: PPUSH
24606: LD_EXP 60
24610: PUSH
24611: LD_VAR 0 5
24615: ARRAY
24616: PUSH
24617: LD_INT 0
24619: PLUS
24620: PPUSH
24621: CALL_OW 505
// end ;
24625: LD_VAR 0 3
24629: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24630: LD_INT 0
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
// if not hack in hackTanks then
24636: LD_VAR 0 1
24640: PUSH
24641: LD_EXP 59
24645: IN
24646: NOT
24647: IFFALSE 24651
// exit ;
24649: GO 24891
// index := GetElementIndex ( hackTanks , hack ) ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_EXP 59
24660: PPUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL 31860 0 2
24670: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: DOUBLE
24677: LD_EXP 60
24681: PUSH
24682: LD_VAR 0 4
24686: ARRAY
24687: INC
24688: ST_TO_ADDR
24689: LD_INT 1
24691: PUSH
24692: FOR_DOWNTO
24693: IFFALSE 24865
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24695: LD_ADDR_VAR 0 5
24699: PUSH
24700: LD_EXP 60
24704: PUSH
24705: LD_VAR 0 4
24709: ARRAY
24710: PUSH
24711: LD_VAR 0 3
24715: ARRAY
24716: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24717: LD_VAR 0 5
24721: PUSH
24722: LD_INT 1
24724: ARRAY
24725: PPUSH
24726: CALL_OW 302
24730: NOT
24731: PUSH
24732: LD_VAR 0 5
24736: PUSH
24737: LD_INT 1
24739: ARRAY
24740: PPUSH
24741: CALL_OW 255
24745: PUSH
24746: LD_VAR 0 1
24750: PPUSH
24751: CALL_OW 255
24755: NONEQUAL
24756: OR
24757: IFFALSE 24863
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24759: LD_VAR 0 5
24763: PUSH
24764: LD_INT 1
24766: ARRAY
24767: PPUSH
24768: CALL_OW 305
24772: PUSH
24773: LD_VAR 0 5
24777: PUSH
24778: LD_INT 1
24780: ARRAY
24781: PPUSH
24782: CALL_OW 255
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: CALL_OW 255
24796: EQUAL
24797: AND
24798: IFFALSE 24822
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24800: LD_VAR 0 5
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PPUSH
24809: LD_VAR 0 5
24813: PUSH
24814: LD_INT 2
24816: ARRAY
24817: PPUSH
24818: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24822: LD_ADDR_EXP 60
24826: PUSH
24827: LD_EXP 60
24831: PPUSH
24832: LD_VAR 0 4
24836: PPUSH
24837: LD_EXP 60
24841: PUSH
24842: LD_VAR 0 4
24846: ARRAY
24847: PPUSH
24848: LD_VAR 0 3
24852: PPUSH
24853: CALL_OW 3
24857: PPUSH
24858: CALL_OW 1
24862: ST_TO_ADDR
// end ; end ;
24863: GO 24692
24865: POP
24866: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24867: LD_VAR 0 1
24871: PPUSH
24872: LD_EXP 60
24876: PUSH
24877: LD_VAR 0 4
24881: ARRAY
24882: PUSH
24883: LD_INT 0
24885: PLUS
24886: PPUSH
24887: CALL_OW 505
// end ;
24891: LD_VAR 0 2
24895: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24896: LD_INT 0
24898: PPUSH
24899: PPUSH
24900: PPUSH
24901: PPUSH
// if not hack in hackTanks then
24902: LD_VAR 0 1
24906: PUSH
24907: LD_EXP 59
24911: IN
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 25002
// index := GetElementIndex ( hackTanks , hack ) ;
24917: LD_ADDR_VAR 0 5
24921: PUSH
24922: LD_EXP 59
24926: PPUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL 31860 0 2
24936: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24937: LD_ADDR_VAR 0 4
24941: PUSH
24942: DOUBLE
24943: LD_INT 1
24945: DEC
24946: ST_TO_ADDR
24947: LD_EXP 60
24951: PUSH
24952: LD_VAR 0 5
24956: ARRAY
24957: PUSH
24958: FOR_TO
24959: IFFALSE 25000
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24961: LD_EXP 60
24965: PUSH
24966: LD_VAR 0 5
24970: ARRAY
24971: PUSH
24972: LD_VAR 0 4
24976: ARRAY
24977: PUSH
24978: LD_INT 1
24980: ARRAY
24981: PUSH
24982: LD_VAR 0 2
24986: EQUAL
24987: IFFALSE 24998
// KillUnit ( vehicle ) ;
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 66
24998: GO 24958
25000: POP
25001: POP
// end ;
25002: LD_VAR 0 3
25006: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25007: LD_EXP 64
25011: NOT
25012: IFFALSE 25047
25014: GO 25016
25016: DISABLE
// begin initMiner := true ;
25017: LD_ADDR_EXP 64
25021: PUSH
25022: LD_INT 1
25024: ST_TO_ADDR
// minersList := [ ] ;
25025: LD_ADDR_EXP 65
25029: PUSH
25030: EMPTY
25031: ST_TO_ADDR
// minerMinesList := [ ] ;
25032: LD_ADDR_EXP 66
25036: PUSH
25037: EMPTY
25038: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25039: LD_ADDR_EXP 67
25043: PUSH
25044: LD_INT 5
25046: ST_TO_ADDR
// end ;
25047: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25048: LD_EXP 64
25052: PUSH
25053: LD_INT 34
25055: PUSH
25056: LD_INT 81
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: AND
25068: IFFALSE 25529
25070: GO 25072
25072: DISABLE
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
// begin enable ;
25079: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25080: LD_ADDR_VAR 0 1
25084: PUSH
25085: LD_INT 34
25087: PUSH
25088: LD_INT 81
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PPUSH
25095: CALL_OW 69
25099: PUSH
25100: FOR_IN
25101: IFFALSE 25173
// begin if not i in minersList then
25103: LD_VAR 0 1
25107: PUSH
25108: LD_EXP 65
25112: IN
25113: NOT
25114: IFFALSE 25171
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25116: LD_ADDR_EXP 65
25120: PUSH
25121: LD_EXP 65
25125: PPUSH
25126: LD_EXP 65
25130: PUSH
25131: LD_INT 1
25133: PLUS
25134: PPUSH
25135: LD_VAR 0 1
25139: PPUSH
25140: CALL_OW 1
25144: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25145: LD_ADDR_EXP 66
25149: PUSH
25150: LD_EXP 66
25154: PPUSH
25155: LD_EXP 66
25159: PUSH
25160: LD_INT 1
25162: PLUS
25163: PPUSH
25164: EMPTY
25165: PPUSH
25166: CALL_OW 1
25170: ST_TO_ADDR
// end end ;
25171: GO 25100
25173: POP
25174: POP
// for i := minerMinesList downto 1 do
25175: LD_ADDR_VAR 0 1
25179: PUSH
25180: DOUBLE
25181: LD_EXP 66
25185: INC
25186: ST_TO_ADDR
25187: LD_INT 1
25189: PUSH
25190: FOR_DOWNTO
25191: IFFALSE 25527
// begin if IsLive ( minersList [ i ] ) then
25193: LD_EXP 65
25197: PUSH
25198: LD_VAR 0 1
25202: ARRAY
25203: PPUSH
25204: CALL_OW 300
25208: IFFALSE 25236
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25210: LD_EXP 65
25214: PUSH
25215: LD_VAR 0 1
25219: ARRAY
25220: PPUSH
25221: LD_EXP 66
25225: PUSH
25226: LD_VAR 0 1
25230: ARRAY
25231: PPUSH
25232: CALL_OW 505
// if not minerMinesList [ i ] then
25236: LD_EXP 66
25240: PUSH
25241: LD_VAR 0 1
25245: ARRAY
25246: NOT
25247: IFFALSE 25251
// continue ;
25249: GO 25190
// for j := minerMinesList [ i ] downto 1 do
25251: LD_ADDR_VAR 0 2
25255: PUSH
25256: DOUBLE
25257: LD_EXP 66
25261: PUSH
25262: LD_VAR 0 1
25266: ARRAY
25267: INC
25268: ST_TO_ADDR
25269: LD_INT 1
25271: PUSH
25272: FOR_DOWNTO
25273: IFFALSE 25523
// begin side := GetSide ( minersList [ i ] ) ;
25275: LD_ADDR_VAR 0 3
25279: PUSH
25280: LD_EXP 65
25284: PUSH
25285: LD_VAR 0 1
25289: ARRAY
25290: PPUSH
25291: CALL_OW 255
25295: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25296: LD_ADDR_VAR 0 4
25300: PUSH
25301: LD_EXP 66
25305: PUSH
25306: LD_VAR 0 1
25310: ARRAY
25311: PUSH
25312: LD_VAR 0 2
25316: ARRAY
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: LD_EXP 66
25326: PUSH
25327: LD_VAR 0 1
25331: ARRAY
25332: PUSH
25333: LD_VAR 0 2
25337: ARRAY
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PPUSH
25343: CALL_OW 428
25347: ST_TO_ADDR
// if not tmp then
25348: LD_VAR 0 4
25352: NOT
25353: IFFALSE 25357
// continue ;
25355: GO 25272
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25357: LD_VAR 0 4
25361: PUSH
25362: LD_INT 81
25364: PUSH
25365: LD_VAR 0 3
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: IN
25379: PUSH
25380: LD_EXP 66
25384: PUSH
25385: LD_VAR 0 1
25389: ARRAY
25390: PUSH
25391: LD_VAR 0 2
25395: ARRAY
25396: PUSH
25397: LD_INT 1
25399: ARRAY
25400: PPUSH
25401: LD_EXP 66
25405: PUSH
25406: LD_VAR 0 1
25410: ARRAY
25411: PUSH
25412: LD_VAR 0 2
25416: ARRAY
25417: PUSH
25418: LD_INT 2
25420: ARRAY
25421: PPUSH
25422: CALL_OW 458
25426: AND
25427: IFFALSE 25521
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25429: LD_EXP 66
25433: PUSH
25434: LD_VAR 0 1
25438: ARRAY
25439: PUSH
25440: LD_VAR 0 2
25444: ARRAY
25445: PUSH
25446: LD_INT 1
25448: ARRAY
25449: PPUSH
25450: LD_EXP 66
25454: PUSH
25455: LD_VAR 0 1
25459: ARRAY
25460: PUSH
25461: LD_VAR 0 2
25465: ARRAY
25466: PUSH
25467: LD_INT 2
25469: ARRAY
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25480: LD_ADDR_EXP 66
25484: PUSH
25485: LD_EXP 66
25489: PPUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_EXP 66
25499: PUSH
25500: LD_VAR 0 1
25504: ARRAY
25505: PPUSH
25506: LD_VAR 0 2
25510: PPUSH
25511: CALL_OW 3
25515: PPUSH
25516: CALL_OW 1
25520: ST_TO_ADDR
// end ; end ;
25521: GO 25272
25523: POP
25524: POP
// end ;
25525: GO 25190
25527: POP
25528: POP
// end ;
25529: PPOPN 4
25531: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
// result := false ;
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 264
25553: PUSH
25554: LD_INT 81
25556: EQUAL
25557: NOT
25558: IFFALSE 25562
// exit ;
25560: GO 25802
// index := GetElementIndex ( minersList , unit ) ;
25562: LD_ADDR_VAR 0 5
25566: PUSH
25567: LD_EXP 65
25571: PPUSH
25572: LD_VAR 0 1
25576: PPUSH
25577: CALL 31860 0 2
25581: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25582: LD_EXP 66
25586: PUSH
25587: LD_VAR 0 5
25591: ARRAY
25592: PUSH
25593: LD_EXP 67
25597: GREATEREQUAL
25598: IFFALSE 25602
// exit ;
25600: GO 25802
// ComMoveXY ( unit , x , y ) ;
25602: LD_VAR 0 1
25606: PPUSH
25607: LD_VAR 0 2
25611: PPUSH
25612: LD_VAR 0 3
25616: PPUSH
25617: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25621: LD_INT 35
25623: PPUSH
25624: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25628: LD_VAR 0 1
25632: PPUSH
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_VAR 0 3
25642: PPUSH
25643: CALL 63621 0 3
25647: NOT
25648: PUSH
25649: LD_VAR 0 1
25653: PPUSH
25654: CALL_OW 314
25658: AND
25659: IFFALSE 25663
// exit ;
25661: GO 25802
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: CALL_OW 428
25677: PUSH
25678: LD_VAR 0 1
25682: EQUAL
25683: PUSH
25684: LD_VAR 0 1
25688: PPUSH
25689: CALL_OW 314
25693: NOT
25694: AND
25695: IFFALSE 25621
// PlaySoundXY ( x , y , PlantMine ) ;
25697: LD_VAR 0 2
25701: PPUSH
25702: LD_VAR 0 3
25706: PPUSH
25707: LD_STRING PlantMine
25709: PPUSH
25710: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25714: LD_VAR 0 2
25718: PPUSH
25719: LD_VAR 0 3
25723: PPUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 255
25733: PPUSH
25734: LD_INT 0
25736: PPUSH
25737: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25741: LD_ADDR_EXP 66
25745: PUSH
25746: LD_EXP 66
25750: PPUSH
25751: LD_VAR 0 5
25755: PUSH
25756: LD_EXP 66
25760: PUSH
25761: LD_VAR 0 5
25765: ARRAY
25766: PUSH
25767: LD_INT 1
25769: PLUS
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: LD_VAR 0 2
25779: PUSH
25780: LD_VAR 0 3
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PPUSH
25789: CALL 32075 0 3
25793: ST_TO_ADDR
// result := true ;
25794: LD_ADDR_VAR 0 4
25798: PUSH
25799: LD_INT 1
25801: ST_TO_ADDR
// end ;
25802: LD_VAR 0 4
25806: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
// if not unit in minersList then
25812: LD_VAR 0 1
25816: PUSH
25817: LD_EXP 65
25821: IN
25822: NOT
25823: IFFALSE 25827
// exit ;
25825: GO 26219
// index := GetElementIndex ( minersList , unit ) ;
25827: LD_ADDR_VAR 0 6
25831: PUSH
25832: LD_EXP 65
25836: PPUSH
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL 31860 0 2
25846: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25847: LD_ADDR_VAR 0 5
25851: PUSH
25852: DOUBLE
25853: LD_EXP 66
25857: PUSH
25858: LD_VAR 0 6
25862: ARRAY
25863: INC
25864: ST_TO_ADDR
25865: LD_INT 1
25867: PUSH
25868: FOR_DOWNTO
25869: IFFALSE 26030
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25871: LD_EXP 66
25875: PUSH
25876: LD_VAR 0 6
25880: ARRAY
25881: PUSH
25882: LD_VAR 0 5
25886: ARRAY
25887: PUSH
25888: LD_INT 1
25890: ARRAY
25891: PUSH
25892: LD_VAR 0 2
25896: EQUAL
25897: PUSH
25898: LD_EXP 66
25902: PUSH
25903: LD_VAR 0 6
25907: ARRAY
25908: PUSH
25909: LD_VAR 0 5
25913: ARRAY
25914: PUSH
25915: LD_INT 2
25917: ARRAY
25918: PUSH
25919: LD_VAR 0 3
25923: EQUAL
25924: AND
25925: IFFALSE 26028
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25927: LD_EXP 66
25931: PUSH
25932: LD_VAR 0 6
25936: ARRAY
25937: PUSH
25938: LD_VAR 0 5
25942: ARRAY
25943: PUSH
25944: LD_INT 1
25946: ARRAY
25947: PPUSH
25948: LD_EXP 66
25952: PUSH
25953: LD_VAR 0 6
25957: ARRAY
25958: PUSH
25959: LD_VAR 0 5
25963: ARRAY
25964: PUSH
25965: LD_INT 2
25967: ARRAY
25968: PPUSH
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL_OW 255
25978: PPUSH
25979: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25983: LD_ADDR_EXP 66
25987: PUSH
25988: LD_EXP 66
25992: PPUSH
25993: LD_VAR 0 6
25997: PPUSH
25998: LD_EXP 66
26002: PUSH
26003: LD_VAR 0 6
26007: ARRAY
26008: PPUSH
26009: LD_VAR 0 5
26013: PPUSH
26014: CALL_OW 3
26018: PPUSH
26019: CALL_OW 1
26023: ST_TO_ADDR
// exit ;
26024: POP
26025: POP
26026: GO 26219
// end ; end ;
26028: GO 25868
26030: POP
26031: POP
// for i := minerMinesList [ index ] downto 1 do
26032: LD_ADDR_VAR 0 5
26036: PUSH
26037: DOUBLE
26038: LD_EXP 66
26042: PUSH
26043: LD_VAR 0 6
26047: ARRAY
26048: INC
26049: ST_TO_ADDR
26050: LD_INT 1
26052: PUSH
26053: FOR_DOWNTO
26054: IFFALSE 26217
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26056: LD_EXP 66
26060: PUSH
26061: LD_VAR 0 6
26065: ARRAY
26066: PUSH
26067: LD_VAR 0 5
26071: ARRAY
26072: PUSH
26073: LD_INT 1
26075: ARRAY
26076: PPUSH
26077: LD_EXP 66
26081: PUSH
26082: LD_VAR 0 6
26086: ARRAY
26087: PUSH
26088: LD_VAR 0 5
26092: ARRAY
26093: PUSH
26094: LD_INT 2
26096: ARRAY
26097: PPUSH
26098: LD_VAR 0 2
26102: PPUSH
26103: LD_VAR 0 3
26107: PPUSH
26108: CALL_OW 298
26112: PUSH
26113: LD_INT 6
26115: LESS
26116: IFFALSE 26215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26118: LD_EXP 66
26122: PUSH
26123: LD_VAR 0 6
26127: ARRAY
26128: PUSH
26129: LD_VAR 0 5
26133: ARRAY
26134: PUSH
26135: LD_INT 1
26137: ARRAY
26138: PPUSH
26139: LD_EXP 66
26143: PUSH
26144: LD_VAR 0 6
26148: ARRAY
26149: PUSH
26150: LD_VAR 0 5
26154: ARRAY
26155: PUSH
26156: LD_INT 2
26158: ARRAY
26159: PPUSH
26160: LD_VAR 0 1
26164: PPUSH
26165: CALL_OW 255
26169: PPUSH
26170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26174: LD_ADDR_EXP 66
26178: PUSH
26179: LD_EXP 66
26183: PPUSH
26184: LD_VAR 0 6
26188: PPUSH
26189: LD_EXP 66
26193: PUSH
26194: LD_VAR 0 6
26198: ARRAY
26199: PPUSH
26200: LD_VAR 0 5
26204: PPUSH
26205: CALL_OW 3
26209: PPUSH
26210: CALL_OW 1
26214: ST_TO_ADDR
// end ; end ;
26215: GO 26053
26217: POP
26218: POP
// end ;
26219: LD_VAR 0 4
26223: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26224: LD_INT 0
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26235: LD_VAR 0 1
26239: PPUSH
26240: CALL_OW 264
26244: PUSH
26245: LD_INT 81
26247: EQUAL
26248: NOT
26249: PUSH
26250: LD_VAR 0 1
26254: PUSH
26255: LD_EXP 65
26259: IN
26260: NOT
26261: OR
26262: IFFALSE 26266
// exit ;
26264: GO 26588
// index := GetElementIndex ( minersList , unit ) ;
26266: LD_ADDR_VAR 0 6
26270: PUSH
26271: LD_EXP 65
26275: PPUSH
26276: LD_VAR 0 1
26280: PPUSH
26281: CALL 31860 0 2
26285: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26286: LD_ADDR_VAR 0 8
26290: PUSH
26291: LD_EXP 67
26295: PUSH
26296: LD_EXP 66
26300: PUSH
26301: LD_VAR 0 6
26305: ARRAY
26306: MINUS
26307: ST_TO_ADDR
// if not minesFreeAmount then
26308: LD_VAR 0 8
26312: NOT
26313: IFFALSE 26317
// exit ;
26315: GO 26588
// tmp := [ ] ;
26317: LD_ADDR_VAR 0 7
26321: PUSH
26322: EMPTY
26323: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26324: LD_ADDR_VAR 0 5
26328: PUSH
26329: DOUBLE
26330: LD_INT 1
26332: DEC
26333: ST_TO_ADDR
26334: LD_VAR 0 8
26338: PUSH
26339: FOR_TO
26340: IFFALSE 26535
// begin _d := rand ( 0 , 5 ) ;
26342: LD_ADDR_VAR 0 11
26346: PUSH
26347: LD_INT 0
26349: PPUSH
26350: LD_INT 5
26352: PPUSH
26353: CALL_OW 12
26357: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26358: LD_ADDR_VAR 0 12
26362: PUSH
26363: LD_INT 2
26365: PPUSH
26366: LD_INT 6
26368: PPUSH
26369: CALL_OW 12
26373: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26374: LD_ADDR_VAR 0 9
26378: PUSH
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 11
26388: PPUSH
26389: LD_VAR 0 12
26393: PPUSH
26394: CALL_OW 272
26398: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26399: LD_ADDR_VAR 0 10
26403: PUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: LD_VAR 0 11
26413: PPUSH
26414: LD_VAR 0 12
26418: PPUSH
26419: CALL_OW 273
26423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26424: LD_VAR 0 9
26428: PPUSH
26429: LD_VAR 0 10
26433: PPUSH
26434: CALL_OW 488
26438: PUSH
26439: LD_VAR 0 9
26443: PUSH
26444: LD_VAR 0 10
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_VAR 0 7
26457: IN
26458: NOT
26459: AND
26460: PUSH
26461: LD_VAR 0 9
26465: PPUSH
26466: LD_VAR 0 10
26470: PPUSH
26471: CALL_OW 458
26475: NOT
26476: AND
26477: IFFALSE 26519
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26479: LD_ADDR_VAR 0 7
26483: PUSH
26484: LD_VAR 0 7
26488: PPUSH
26489: LD_VAR 0 7
26493: PUSH
26494: LD_INT 1
26496: PLUS
26497: PPUSH
26498: LD_VAR 0 9
26502: PUSH
26503: LD_VAR 0 10
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 1
26516: ST_TO_ADDR
26517: GO 26533
// i := i - 1 ;
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: LD_VAR 0 5
26528: PUSH
26529: LD_INT 1
26531: MINUS
26532: ST_TO_ADDR
// end ;
26533: GO 26339
26535: POP
26536: POP
// for i in tmp do
26537: LD_ADDR_VAR 0 5
26541: PUSH
26542: LD_VAR 0 7
26546: PUSH
26547: FOR_IN
26548: IFFALSE 26586
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_VAR 0 5
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: PPUSH
26564: LD_VAR 0 5
26568: PUSH
26569: LD_INT 2
26571: ARRAY
26572: PPUSH
26573: CALL 25532 0 3
26577: NOT
26578: IFFALSE 26584
// exit ;
26580: POP
26581: POP
26582: GO 26588
26584: GO 26547
26586: POP
26587: POP
// end ;
26588: LD_VAR 0 4
26592: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26593: LD_INT 0
26595: PPUSH
26596: PPUSH
26597: PPUSH
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
// if GetClass ( unit ) <> class_sniper then
26604: LD_VAR 0 1
26608: PPUSH
26609: CALL_OW 257
26613: PUSH
26614: LD_INT 5
26616: NONEQUAL
26617: IFFALSE 26621
// exit ;
26619: GO 27087
// dist := 8 ;
26621: LD_ADDR_VAR 0 5
26625: PUSH
26626: LD_INT 8
26628: ST_TO_ADDR
// viewRange := 12 ;
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_INT 12
26636: ST_TO_ADDR
// side := GetSide ( unit ) ;
26637: LD_ADDR_VAR 0 6
26641: PUSH
26642: LD_VAR 0 1
26646: PPUSH
26647: CALL_OW 255
26651: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26652: LD_INT 61
26654: PPUSH
26655: LD_VAR 0 6
26659: PPUSH
26660: CALL_OW 321
26664: PUSH
26665: LD_INT 2
26667: EQUAL
26668: IFFALSE 26678
// viewRange := 16 ;
26670: LD_ADDR_VAR 0 8
26674: PUSH
26675: LD_INT 16
26677: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26678: LD_VAR 0 1
26682: PPUSH
26683: LD_VAR 0 2
26687: PPUSH
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL_OW 297
26697: PUSH
26698: LD_VAR 0 5
26702: GREATER
26703: IFFALSE 26782
// begin ComMoveXY ( unit , x , y ) ;
26705: LD_VAR 0 1
26709: PPUSH
26710: LD_VAR 0 2
26714: PPUSH
26715: LD_VAR 0 3
26719: PPUSH
26720: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26724: LD_INT 35
26726: PPUSH
26727: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26731: LD_VAR 0 1
26735: PPUSH
26736: LD_VAR 0 2
26740: PPUSH
26741: LD_VAR 0 3
26745: PPUSH
26746: CALL 63621 0 3
26750: NOT
26751: IFFALSE 26755
// exit ;
26753: GO 27087
// until GetDistUnitXY ( unit , x , y ) < dist ;
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_VAR 0 2
26764: PPUSH
26765: LD_VAR 0 3
26769: PPUSH
26770: CALL_OW 297
26774: PUSH
26775: LD_VAR 0 5
26779: LESS
26780: IFFALSE 26724
// end ; ComTurnXY ( unit , x , y ) ;
26782: LD_VAR 0 1
26786: PPUSH
26787: LD_VAR 0 2
26791: PPUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 118
// repeat if Multiplayer then
26801: LD_OWVAR 4
26805: IFFALSE 26816
// wait ( 35 ) else
26807: LD_INT 35
26809: PPUSH
26810: CALL_OW 67
26814: GO 26823
// wait ( 5 ) ;
26816: LD_INT 5
26818: PPUSH
26819: CALL_OW 67
// _d := GetDir ( unit ) ;
26823: LD_ADDR_VAR 0 11
26827: PUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 254
26837: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 250
26852: PPUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 251
26862: PPUSH
26863: LD_VAR 0 2
26867: PPUSH
26868: LD_VAR 0 3
26872: PPUSH
26873: CALL 66229 0 4
26877: ST_TO_ADDR
// until dir = _d ;
26878: LD_VAR 0 7
26882: PUSH
26883: LD_VAR 0 11
26887: EQUAL
26888: IFFALSE 26801
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26890: LD_ADDR_VAR 0 9
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 250
26904: PPUSH
26905: LD_VAR 0 7
26909: PPUSH
26910: LD_VAR 0 5
26914: PPUSH
26915: CALL_OW 272
26919: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26920: LD_ADDR_VAR 0 10
26924: PUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL_OW 251
26934: PPUSH
26935: LD_VAR 0 7
26939: PPUSH
26940: LD_VAR 0 5
26944: PPUSH
26945: CALL_OW 273
26949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26950: LD_VAR 0 9
26954: PPUSH
26955: LD_VAR 0 10
26959: PPUSH
26960: CALL_OW 488
26964: NOT
26965: IFFALSE 26969
// exit ;
26967: GO 27087
// ComAnimCustom ( unit , 1 ) ;
26969: LD_VAR 0 1
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 592
// p := 0 ;
26981: LD_ADDR_VAR 0 12
26985: PUSH
26986: LD_INT 0
26988: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26989: LD_VAR 0 9
26993: PPUSH
26994: LD_VAR 0 10
26998: PPUSH
26999: LD_VAR 0 6
27003: PPUSH
27004: LD_VAR 0 8
27008: PPUSH
27009: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27013: LD_INT 35
27015: PPUSH
27016: CALL_OW 67
// p := Inc ( p ) ;
27020: LD_ADDR_VAR 0 12
27024: PUSH
27025: LD_VAR 0 12
27029: PPUSH
27030: CALL 66185 0 1
27034: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27035: LD_VAR 0 12
27039: PUSH
27040: LD_INT 3
27042: EQUAL
27043: PUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 302
27053: NOT
27054: OR
27055: PUSH
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL_OW 301
27065: OR
27066: IFFALSE 27013
// RemoveSeeing ( _x , _y , side ) ;
27068: LD_VAR 0 9
27072: PPUSH
27073: LD_VAR 0 10
27077: PPUSH
27078: LD_VAR 0 6
27082: PPUSH
27083: CALL_OW 331
// end ; end_of_file
27087: LD_VAR 0 4
27091: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
// if exist_mode then
27096: LD_VAR 0 2
27100: IFFALSE 27146
// begin unit := CreateCharacter ( prefix & ident ) ;
27102: LD_ADDR_VAR 0 5
27106: PUSH
27107: LD_VAR 0 3
27111: PUSH
27112: LD_VAR 0 1
27116: STR
27117: PPUSH
27118: CALL_OW 34
27122: ST_TO_ADDR
// if unit then
27123: LD_VAR 0 5
27127: IFFALSE 27144
// DeleteCharacters ( prefix & ident ) ;
27129: LD_VAR 0 3
27133: PUSH
27134: LD_VAR 0 1
27138: STR
27139: PPUSH
27140: CALL_OW 40
// end else
27144: GO 27161
// unit := NewCharacter ( ident ) ;
27146: LD_ADDR_VAR 0 5
27150: PUSH
27151: LD_VAR 0 1
27155: PPUSH
27156: CALL_OW 25
27160: ST_TO_ADDR
// result := unit ;
27161: LD_ADDR_VAR 0 4
27165: PUSH
27166: LD_VAR 0 5
27170: ST_TO_ADDR
// end ;
27171: LD_VAR 0 4
27175: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27176: LD_INT 0
27178: PPUSH
27179: PPUSH
// if not side or not nation then
27180: LD_VAR 0 1
27184: NOT
27185: PUSH
27186: LD_VAR 0 2
27190: NOT
27191: OR
27192: IFFALSE 27196
// exit ;
27194: GO 27964
// case nation of nation_american :
27196: LD_VAR 0 2
27200: PUSH
27201: LD_INT 1
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27423
27209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_INT 35
27217: PUSH
27218: LD_INT 45
27220: PUSH
27221: LD_INT 46
27223: PUSH
27224: LD_INT 47
27226: PUSH
27227: LD_INT 82
27229: PUSH
27230: LD_INT 83
27232: PUSH
27233: LD_INT 84
27235: PUSH
27236: LD_INT 85
27238: PUSH
27239: LD_INT 86
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 6
27250: PUSH
27251: LD_INT 15
27253: PUSH
27254: LD_INT 16
27256: PUSH
27257: LD_INT 7
27259: PUSH
27260: LD_INT 12
27262: PUSH
27263: LD_INT 13
27265: PUSH
27266: LD_INT 10
27268: PUSH
27269: LD_INT 14
27271: PUSH
27272: LD_INT 20
27274: PUSH
27275: LD_INT 21
27277: PUSH
27278: LD_INT 22
27280: PUSH
27281: LD_INT 25
27283: PUSH
27284: LD_INT 32
27286: PUSH
27287: LD_INT 27
27289: PUSH
27290: LD_INT 36
27292: PUSH
27293: LD_INT 69
27295: PUSH
27296: LD_INT 39
27298: PUSH
27299: LD_INT 34
27301: PUSH
27302: LD_INT 40
27304: PUSH
27305: LD_INT 48
27307: PUSH
27308: LD_INT 49
27310: PUSH
27311: LD_INT 50
27313: PUSH
27314: LD_INT 51
27316: PUSH
27317: LD_INT 52
27319: PUSH
27320: LD_INT 53
27322: PUSH
27323: LD_INT 54
27325: PUSH
27326: LD_INT 55
27328: PUSH
27329: LD_INT 56
27331: PUSH
27332: LD_INT 57
27334: PUSH
27335: LD_INT 58
27337: PUSH
27338: LD_INT 59
27340: PUSH
27341: LD_INT 60
27343: PUSH
27344: LD_INT 61
27346: PUSH
27347: LD_INT 62
27349: PUSH
27350: LD_INT 80
27352: PUSH
27353: LD_INT 82
27355: PUSH
27356: LD_INT 83
27358: PUSH
27359: LD_INT 84
27361: PUSH
27362: LD_INT 85
27364: PUSH
27365: LD_INT 86
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
27421: GO 27888
27423: LD_INT 2
27425: DOUBLE
27426: EQUAL
27427: IFTRUE 27431
27429: GO 27657
27431: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27432: LD_ADDR_VAR 0 4
27436: PUSH
27437: LD_INT 35
27439: PUSH
27440: LD_INT 45
27442: PUSH
27443: LD_INT 46
27445: PUSH
27446: LD_INT 47
27448: PUSH
27449: LD_INT 82
27451: PUSH
27452: LD_INT 83
27454: PUSH
27455: LD_INT 84
27457: PUSH
27458: LD_INT 85
27460: PUSH
27461: LD_INT 87
27463: PUSH
27464: LD_INT 70
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 11
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: LD_INT 4
27478: PUSH
27479: LD_INT 5
27481: PUSH
27482: LD_INT 6
27484: PUSH
27485: LD_INT 15
27487: PUSH
27488: LD_INT 18
27490: PUSH
27491: LD_INT 7
27493: PUSH
27494: LD_INT 17
27496: PUSH
27497: LD_INT 8
27499: PUSH
27500: LD_INT 20
27502: PUSH
27503: LD_INT 21
27505: PUSH
27506: LD_INT 22
27508: PUSH
27509: LD_INT 72
27511: PUSH
27512: LD_INT 26
27514: PUSH
27515: LD_INT 69
27517: PUSH
27518: LD_INT 39
27520: PUSH
27521: LD_INT 40
27523: PUSH
27524: LD_INT 41
27526: PUSH
27527: LD_INT 42
27529: PUSH
27530: LD_INT 43
27532: PUSH
27533: LD_INT 48
27535: PUSH
27536: LD_INT 49
27538: PUSH
27539: LD_INT 50
27541: PUSH
27542: LD_INT 51
27544: PUSH
27545: LD_INT 52
27547: PUSH
27548: LD_INT 53
27550: PUSH
27551: LD_INT 54
27553: PUSH
27554: LD_INT 55
27556: PUSH
27557: LD_INT 56
27559: PUSH
27560: LD_INT 60
27562: PUSH
27563: LD_INT 61
27565: PUSH
27566: LD_INT 62
27568: PUSH
27569: LD_INT 66
27571: PUSH
27572: LD_INT 67
27574: PUSH
27575: LD_INT 68
27577: PUSH
27578: LD_INT 81
27580: PUSH
27581: LD_INT 82
27583: PUSH
27584: LD_INT 83
27586: PUSH
27587: LD_INT 84
27589: PUSH
27590: LD_INT 85
27592: PUSH
27593: LD_INT 87
27595: PUSH
27596: LD_INT 88
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
27655: GO 27888
27657: LD_INT 3
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27665
27663: GO 27887
27665: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27666: LD_ADDR_VAR 0 4
27670: PUSH
27671: LD_INT 46
27673: PUSH
27674: LD_INT 47
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 2
27682: PUSH
27683: LD_INT 82
27685: PUSH
27686: LD_INT 83
27688: PUSH
27689: LD_INT 84
27691: PUSH
27692: LD_INT 85
27694: PUSH
27695: LD_INT 86
27697: PUSH
27698: LD_INT 11
27700: PUSH
27701: LD_INT 9
27703: PUSH
27704: LD_INT 20
27706: PUSH
27707: LD_INT 19
27709: PUSH
27710: LD_INT 21
27712: PUSH
27713: LD_INT 24
27715: PUSH
27716: LD_INT 22
27718: PUSH
27719: LD_INT 25
27721: PUSH
27722: LD_INT 28
27724: PUSH
27725: LD_INT 29
27727: PUSH
27728: LD_INT 30
27730: PUSH
27731: LD_INT 31
27733: PUSH
27734: LD_INT 37
27736: PUSH
27737: LD_INT 38
27739: PUSH
27740: LD_INT 32
27742: PUSH
27743: LD_INT 27
27745: PUSH
27746: LD_INT 33
27748: PUSH
27749: LD_INT 69
27751: PUSH
27752: LD_INT 39
27754: PUSH
27755: LD_INT 34
27757: PUSH
27758: LD_INT 40
27760: PUSH
27761: LD_INT 71
27763: PUSH
27764: LD_INT 23
27766: PUSH
27767: LD_INT 44
27769: PUSH
27770: LD_INT 48
27772: PUSH
27773: LD_INT 49
27775: PUSH
27776: LD_INT 50
27778: PUSH
27779: LD_INT 51
27781: PUSH
27782: LD_INT 52
27784: PUSH
27785: LD_INT 53
27787: PUSH
27788: LD_INT 54
27790: PUSH
27791: LD_INT 55
27793: PUSH
27794: LD_INT 56
27796: PUSH
27797: LD_INT 57
27799: PUSH
27800: LD_INT 58
27802: PUSH
27803: LD_INT 59
27805: PUSH
27806: LD_INT 63
27808: PUSH
27809: LD_INT 64
27811: PUSH
27812: LD_INT 65
27814: PUSH
27815: LD_INT 82
27817: PUSH
27818: LD_INT 83
27820: PUSH
27821: LD_INT 84
27823: PUSH
27824: LD_INT 85
27826: PUSH
27827: LD_INT 86
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
27885: GO 27888
27887: POP
// if state > - 1 and state < 3 then
27888: LD_VAR 0 3
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: GREATER
27897: PUSH
27898: LD_VAR 0 3
27902: PUSH
27903: LD_INT 3
27905: LESS
27906: AND
27907: IFFALSE 27964
// for i in result do
27909: LD_ADDR_VAR 0 5
27913: PUSH
27914: LD_VAR 0 4
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27962
// if GetTech ( i , side ) <> state then
27922: LD_VAR 0 5
27926: PPUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 321
27936: PUSH
27937: LD_VAR 0 3
27941: NONEQUAL
27942: IFFALSE 27960
// result := result diff i ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_VAR 0 4
27953: PUSH
27954: LD_VAR 0 5
27958: DIFF
27959: ST_TO_ADDR
27960: GO 27919
27962: POP
27963: POP
// end ;
27964: LD_VAR 0 4
27968: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27969: LD_INT 0
27971: PPUSH
27972: PPUSH
27973: PPUSH
// result := true ;
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: LD_INT 1
27981: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27982: LD_ADDR_VAR 0 5
27986: PUSH
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 480
27996: ST_TO_ADDR
// if not tmp then
27997: LD_VAR 0 5
28001: NOT
28002: IFFALSE 28006
// exit ;
28004: GO 28055
// for i in tmp do
28006: LD_ADDR_VAR 0 4
28010: PUSH
28011: LD_VAR 0 5
28015: PUSH
28016: FOR_IN
28017: IFFALSE 28053
// if GetTech ( i , side ) <> state_researched then
28019: LD_VAR 0 4
28023: PPUSH
28024: LD_VAR 0 1
28028: PPUSH
28029: CALL_OW 321
28033: PUSH
28034: LD_INT 2
28036: NONEQUAL
28037: IFFALSE 28051
// begin result := false ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_INT 0
28046: ST_TO_ADDR
// exit ;
28047: POP
28048: POP
28049: GO 28055
// end ;
28051: GO 28016
28053: POP
28054: POP
// end ;
28055: LD_VAR 0 3
28059: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28060: LD_INT 0
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28075: LD_VAR 0 1
28079: NOT
28080: PUSH
28081: LD_VAR 0 1
28085: PPUSH
28086: CALL_OW 257
28090: PUSH
28091: LD_INT 9
28093: NONEQUAL
28094: OR
28095: IFFALSE 28099
// exit ;
28097: GO 28672
// side := GetSide ( unit ) ;
28099: LD_ADDR_VAR 0 9
28103: PUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 255
28113: ST_TO_ADDR
// tech_space := tech_spacanom ;
28114: LD_ADDR_VAR 0 12
28118: PUSH
28119: LD_INT 29
28121: ST_TO_ADDR
// tech_time := tech_taurad ;
28122: LD_ADDR_VAR 0 13
28126: PUSH
28127: LD_INT 28
28129: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28130: LD_ADDR_VAR 0 11
28134: PUSH
28135: LD_VAR 0 1
28139: PPUSH
28140: CALL_OW 310
28144: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28145: LD_VAR 0 11
28149: PPUSH
28150: CALL_OW 247
28154: PUSH
28155: LD_INT 2
28157: EQUAL
28158: IFFALSE 28162
// exit ;
28160: GO 28672
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28162: LD_ADDR_VAR 0 8
28166: PUSH
28167: LD_INT 81
28169: PUSH
28170: LD_VAR 0 9
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 21
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PPUSH
28200: CALL_OW 69
28204: ST_TO_ADDR
// if not tmp then
28205: LD_VAR 0 8
28209: NOT
28210: IFFALSE 28214
// exit ;
28212: GO 28672
// if in_unit then
28214: LD_VAR 0 11
28218: IFFALSE 28242
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28220: LD_ADDR_VAR 0 10
28224: PUSH
28225: LD_VAR 0 8
28229: PPUSH
28230: LD_VAR 0 11
28234: PPUSH
28235: CALL_OW 74
28239: ST_TO_ADDR
28240: GO 28262
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28242: LD_ADDR_VAR 0 10
28246: PUSH
28247: LD_VAR 0 8
28251: PPUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 74
28261: ST_TO_ADDR
// if not enemy then
28262: LD_VAR 0 10
28266: NOT
28267: IFFALSE 28271
// exit ;
28269: GO 28672
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28271: LD_VAR 0 11
28275: PUSH
28276: LD_VAR 0 11
28280: PPUSH
28281: LD_VAR 0 10
28285: PPUSH
28286: CALL_OW 296
28290: PUSH
28291: LD_INT 13
28293: GREATER
28294: AND
28295: PUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: LD_VAR 0 10
28305: PPUSH
28306: CALL_OW 296
28310: PUSH
28311: LD_INT 12
28313: GREATER
28314: OR
28315: IFFALSE 28319
// exit ;
28317: GO 28672
// missile := [ 1 ] ;
28319: LD_ADDR_VAR 0 14
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28330: LD_VAR 0 9
28334: PPUSH
28335: LD_VAR 0 12
28339: PPUSH
28340: CALL_OW 325
28344: IFFALSE 28373
// missile := Replace ( missile , missile + 1 , 2 ) ;
28346: LD_ADDR_VAR 0 14
28350: PUSH
28351: LD_VAR 0 14
28355: PPUSH
28356: LD_VAR 0 14
28360: PUSH
28361: LD_INT 1
28363: PLUS
28364: PPUSH
28365: LD_INT 2
28367: PPUSH
28368: CALL_OW 1
28372: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28373: LD_VAR 0 9
28377: PPUSH
28378: LD_VAR 0 13
28382: PPUSH
28383: CALL_OW 325
28387: PUSH
28388: LD_VAR 0 10
28392: PPUSH
28393: CALL_OW 255
28397: PPUSH
28398: LD_VAR 0 13
28402: PPUSH
28403: CALL_OW 325
28407: NOT
28408: AND
28409: IFFALSE 28438
// missile := Replace ( missile , missile + 1 , 3 ) ;
28411: LD_ADDR_VAR 0 14
28415: PUSH
28416: LD_VAR 0 14
28420: PPUSH
28421: LD_VAR 0 14
28425: PUSH
28426: LD_INT 1
28428: PLUS
28429: PPUSH
28430: LD_INT 3
28432: PPUSH
28433: CALL_OW 1
28437: ST_TO_ADDR
// if missile < 2 then
28438: LD_VAR 0 14
28442: PUSH
28443: LD_INT 2
28445: LESS
28446: IFFALSE 28450
// exit ;
28448: GO 28672
// x := GetX ( enemy ) ;
28450: LD_ADDR_VAR 0 4
28454: PUSH
28455: LD_VAR 0 10
28459: PPUSH
28460: CALL_OW 250
28464: ST_TO_ADDR
// y := GetY ( enemy ) ;
28465: LD_ADDR_VAR 0 5
28469: PUSH
28470: LD_VAR 0 10
28474: PPUSH
28475: CALL_OW 251
28479: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28480: LD_ADDR_VAR 0 6
28484: PUSH
28485: LD_VAR 0 4
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL_OW 12
28501: PLUS
28502: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28503: LD_ADDR_VAR 0 7
28507: PUSH
28508: LD_VAR 0 5
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PPUSH
28517: LD_INT 1
28519: PPUSH
28520: CALL_OW 12
28524: PLUS
28525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28526: LD_VAR 0 6
28530: PPUSH
28531: LD_VAR 0 7
28535: PPUSH
28536: CALL_OW 488
28540: NOT
28541: IFFALSE 28563
// begin _x := x ;
28543: LD_ADDR_VAR 0 6
28547: PUSH
28548: LD_VAR 0 4
28552: ST_TO_ADDR
// _y := y ;
28553: LD_ADDR_VAR 0 7
28557: PUSH
28558: LD_VAR 0 5
28562: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28563: LD_ADDR_VAR 0 3
28567: PUSH
28568: LD_INT 1
28570: PPUSH
28571: LD_VAR 0 14
28575: PPUSH
28576: CALL_OW 12
28580: ST_TO_ADDR
// case i of 1 :
28581: LD_VAR 0 3
28585: PUSH
28586: LD_INT 1
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28611
28594: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_VAR 0 10
28604: PPUSH
28605: CALL_OW 115
28609: GO 28672
28611: LD_INT 2
28613: DOUBLE
28614: EQUAL
28615: IFTRUE 28619
28617: GO 28641
28619: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_VAR 0 6
28629: PPUSH
28630: LD_VAR 0 7
28634: PPUSH
28635: CALL_OW 153
28639: GO 28672
28641: LD_INT 3
28643: DOUBLE
28644: EQUAL
28645: IFTRUE 28649
28647: GO 28671
28649: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28650: LD_VAR 0 1
28654: PPUSH
28655: LD_VAR 0 6
28659: PPUSH
28660: LD_VAR 0 7
28664: PPUSH
28665: CALL_OW 154
28669: GO 28672
28671: POP
// end ;
28672: LD_VAR 0 2
28676: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28677: LD_INT 0
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
// if not unit or not building then
28685: LD_VAR 0 1
28689: NOT
28690: PUSH
28691: LD_VAR 0 2
28695: NOT
28696: OR
28697: IFFALSE 28701
// exit ;
28699: GO 28859
// x := GetX ( building ) ;
28701: LD_ADDR_VAR 0 5
28705: PUSH
28706: LD_VAR 0 2
28710: PPUSH
28711: CALL_OW 250
28715: ST_TO_ADDR
// y := GetY ( building ) ;
28716: LD_ADDR_VAR 0 6
28720: PUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: CALL_OW 251
28730: ST_TO_ADDR
// for i = 0 to 5 do
28731: LD_ADDR_VAR 0 4
28735: PUSH
28736: DOUBLE
28737: LD_INT 0
28739: DEC
28740: ST_TO_ADDR
28741: LD_INT 5
28743: PUSH
28744: FOR_TO
28745: IFFALSE 28857
// begin _x := ShiftX ( x , i , 3 ) ;
28747: LD_ADDR_VAR 0 7
28751: PUSH
28752: LD_VAR 0 5
28756: PPUSH
28757: LD_VAR 0 4
28761: PPUSH
28762: LD_INT 3
28764: PPUSH
28765: CALL_OW 272
28769: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28770: LD_ADDR_VAR 0 8
28774: PUSH
28775: LD_VAR 0 6
28779: PPUSH
28780: LD_VAR 0 4
28784: PPUSH
28785: LD_INT 3
28787: PPUSH
28788: CALL_OW 273
28792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28793: LD_VAR 0 7
28797: PPUSH
28798: LD_VAR 0 8
28802: PPUSH
28803: CALL_OW 488
28807: NOT
28808: IFFALSE 28812
// continue ;
28810: GO 28744
// if HexInfo ( _x , _y ) = 0 then
28812: LD_VAR 0 7
28816: PPUSH
28817: LD_VAR 0 8
28821: PPUSH
28822: CALL_OW 428
28826: PUSH
28827: LD_INT 0
28829: EQUAL
28830: IFFALSE 28855
// begin ComMoveXY ( unit , _x , _y ) ;
28832: LD_VAR 0 1
28836: PPUSH
28837: LD_VAR 0 7
28841: PPUSH
28842: LD_VAR 0 8
28846: PPUSH
28847: CALL_OW 111
// exit ;
28851: POP
28852: POP
28853: GO 28859
// end ; end ;
28855: GO 28744
28857: POP
28858: POP
// end ;
28859: LD_VAR 0 3
28863: RET
// export function ScanBase ( side , base_area ) ; begin
28864: LD_INT 0
28866: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28867: LD_ADDR_VAR 0 3
28871: PUSH
28872: LD_VAR 0 2
28876: PPUSH
28877: LD_INT 81
28879: PUSH
28880: LD_VAR 0 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 70
28893: ST_TO_ADDR
// end ;
28894: LD_VAR 0 3
28898: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
// result := false ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: LD_INT 0
28912: ST_TO_ADDR
// side := GetSide ( unit ) ;
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 255
28927: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28928: LD_ADDR_VAR 0 4
28932: PUSH
28933: LD_VAR 0 1
28937: PPUSH
28938: CALL_OW 248
28942: ST_TO_ADDR
// case nat of 1 :
28943: LD_VAR 0 4
28947: PUSH
28948: LD_INT 1
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 28967
28956: POP
// tech := tech_lassight ; 2 :
28957: LD_ADDR_VAR 0 5
28961: PUSH
28962: LD_INT 12
28964: ST_TO_ADDR
28965: GO 29006
28967: LD_INT 2
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 28986
28975: POP
// tech := tech_mortar ; 3 :
28976: LD_ADDR_VAR 0 5
28980: PUSH
28981: LD_INT 41
28983: ST_TO_ADDR
28984: GO 29006
28986: LD_INT 3
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29005
28994: POP
// tech := tech_bazooka ; end ;
28995: LD_ADDR_VAR 0 5
28999: PUSH
29000: LD_INT 44
29002: ST_TO_ADDR
29003: GO 29006
29005: POP
// if Researched ( side , tech ) then
29006: LD_VAR 0 3
29010: PPUSH
29011: LD_VAR 0 5
29015: PPUSH
29016: CALL_OW 325
29020: IFFALSE 29047
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29022: LD_ADDR_VAR 0 2
29026: PUSH
29027: LD_INT 5
29029: PUSH
29030: LD_INT 8
29032: PUSH
29033: LD_INT 9
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: PUSH
29041: LD_VAR 0 4
29045: ARRAY
29046: ST_TO_ADDR
// end ;
29047: LD_VAR 0 2
29051: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29052: LD_INT 0
29054: PPUSH
29055: PPUSH
29056: PPUSH
// if not mines then
29057: LD_VAR 0 2
29061: NOT
29062: IFFALSE 29066
// exit ;
29064: GO 29210
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_INT 81
29073: PUSH
29074: LD_VAR 0 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: LD_INT 21
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PPUSH
29104: CALL_OW 69
29108: ST_TO_ADDR
// for i in mines do
29109: LD_ADDR_VAR 0 4
29113: PUSH
29114: LD_VAR 0 2
29118: PUSH
29119: FOR_IN
29120: IFFALSE 29208
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 1
29129: ARRAY
29130: PPUSH
29131: LD_VAR 0 4
29135: PUSH
29136: LD_INT 2
29138: ARRAY
29139: PPUSH
29140: CALL_OW 458
29144: NOT
29145: IFFALSE 29149
// continue ;
29147: GO 29119
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29149: LD_VAR 0 4
29153: PUSH
29154: LD_INT 1
29156: ARRAY
29157: PPUSH
29158: LD_VAR 0 4
29162: PUSH
29163: LD_INT 2
29165: ARRAY
29166: PPUSH
29167: CALL_OW 428
29171: PUSH
29172: LD_VAR 0 5
29176: IN
29177: IFFALSE 29206
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29179: LD_VAR 0 4
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 4
29192: PUSH
29193: LD_INT 2
29195: ARRAY
29196: PPUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 456
// end ;
29206: GO 29119
29208: POP
29209: POP
// end ;
29210: LD_VAR 0 3
29214: RET
// export function Count ( array ) ; begin
29215: LD_INT 0
29217: PPUSH
// result := array + 0 ;
29218: LD_ADDR_VAR 0 2
29222: PUSH
29223: LD_VAR 0 1
29227: PUSH
29228: LD_INT 0
29230: PLUS
29231: ST_TO_ADDR
// end ;
29232: LD_VAR 0 2
29236: RET
// export function IsEmpty ( building ) ; begin
29237: LD_INT 0
29239: PPUSH
// if not building then
29240: LD_VAR 0 1
29244: NOT
29245: IFFALSE 29249
// exit ;
29247: GO 29292
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_VAR 0 1
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_VAR 0 1
29266: PPUSH
29267: CALL_OW 255
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 58
29278: PUSH
29279: EMPTY
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PPUSH
29286: CALL_OW 69
29290: IN
29291: ST_TO_ADDR
// end ;
29292: LD_VAR 0 2
29296: RET
// export function IsNotFull ( building ) ; var places ; begin
29297: LD_INT 0
29299: PPUSH
29300: PPUSH
// if not building then
29301: LD_VAR 0 1
29305: NOT
29306: IFFALSE 29310
// exit ;
29308: GO 29338
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29310: LD_ADDR_VAR 0 2
29314: PUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 62
29325: PUSH
29326: EMPTY
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 72
29337: ST_TO_ADDR
// end ;
29338: LD_VAR 0 2
29342: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29343: LD_INT 0
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// tmp := [ ] ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: EMPTY
29355: ST_TO_ADDR
// list := [ ] ;
29356: LD_ADDR_VAR 0 5
29360: PUSH
29361: EMPTY
29362: ST_TO_ADDR
// for i = 16 to 25 do
29363: LD_ADDR_VAR 0 4
29367: PUSH
29368: DOUBLE
29369: LD_INT 16
29371: DEC
29372: ST_TO_ADDR
29373: LD_INT 25
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29450
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29379: LD_ADDR_VAR 0 3
29383: PUSH
29384: LD_VAR 0 3
29388: PUSH
29389: LD_INT 22
29391: PUSH
29392: LD_VAR 0 1
29396: PPUSH
29397: CALL_OW 255
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 91
29408: PUSH
29409: LD_VAR 0 1
29413: PUSH
29414: LD_INT 6
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 30
29424: PUSH
29425: LD_VAR 0 4
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: PUSH
29439: EMPTY
29440: LIST
29441: PPUSH
29442: CALL_OW 69
29446: ADD
29447: ST_TO_ADDR
29448: GO 29376
29450: POP
29451: POP
// for i = 1 to tmp do
29452: LD_ADDR_VAR 0 4
29456: PUSH
29457: DOUBLE
29458: LD_INT 1
29460: DEC
29461: ST_TO_ADDR
29462: LD_VAR 0 3
29466: PUSH
29467: FOR_TO
29468: IFFALSE 29556
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 5
29479: PUSH
29480: LD_VAR 0 3
29484: PUSH
29485: LD_VAR 0 4
29489: ARRAY
29490: PPUSH
29491: CALL_OW 266
29495: PUSH
29496: LD_VAR 0 3
29500: PUSH
29501: LD_VAR 0 4
29505: ARRAY
29506: PPUSH
29507: CALL_OW 250
29511: PUSH
29512: LD_VAR 0 3
29516: PUSH
29517: LD_VAR 0 4
29521: ARRAY
29522: PPUSH
29523: CALL_OW 251
29527: PUSH
29528: LD_VAR 0 3
29532: PUSH
29533: LD_VAR 0 4
29537: ARRAY
29538: PPUSH
29539: CALL_OW 254
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: ADD
29553: ST_TO_ADDR
29554: GO 29467
29556: POP
29557: POP
// result := list ;
29558: LD_ADDR_VAR 0 2
29562: PUSH
29563: LD_VAR 0 5
29567: ST_TO_ADDR
// end ;
29568: LD_VAR 0 2
29572: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29573: LD_INT 0
29575: PPUSH
29576: PPUSH
29577: PPUSH
29578: PPUSH
29579: PPUSH
29580: PPUSH
29581: PPUSH
// if not factory then
29582: LD_VAR 0 1
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 30184
// if control = control_apeman then
29591: LD_VAR 0 4
29595: PUSH
29596: LD_INT 5
29598: EQUAL
29599: IFFALSE 29708
// begin tmp := UnitsInside ( factory ) ;
29601: LD_ADDR_VAR 0 8
29605: PUSH
29606: LD_VAR 0 1
29610: PPUSH
29611: CALL_OW 313
29615: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29616: LD_VAR 0 8
29620: PPUSH
29621: LD_INT 25
29623: PUSH
29624: LD_INT 12
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PPUSH
29631: CALL_OW 72
29635: NOT
29636: IFFALSE 29646
// control := control_manual ;
29638: LD_ADDR_VAR 0 4
29642: PUSH
29643: LD_INT 1
29645: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29646: LD_ADDR_VAR 0 8
29650: PUSH
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL 29343 0 1
29660: ST_TO_ADDR
// if tmp then
29661: LD_VAR 0 8
29665: IFFALSE 29708
// begin for i in tmp do
29667: LD_ADDR_VAR 0 7
29671: PUSH
29672: LD_VAR 0 8
29676: PUSH
29677: FOR_IN
29678: IFFALSE 29706
// if i [ 1 ] = b_ext_radio then
29680: LD_VAR 0 7
29684: PUSH
29685: LD_INT 1
29687: ARRAY
29688: PUSH
29689: LD_INT 22
29691: EQUAL
29692: IFFALSE 29704
// begin control := control_remote ;
29694: LD_ADDR_VAR 0 4
29698: PUSH
29699: LD_INT 2
29701: ST_TO_ADDR
// break ;
29702: GO 29706
// end ;
29704: GO 29677
29706: POP
29707: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29708: LD_VAR 0 1
29712: PPUSH
29713: LD_VAR 0 2
29717: PPUSH
29718: LD_VAR 0 3
29722: PPUSH
29723: LD_VAR 0 4
29727: PPUSH
29728: LD_VAR 0 5
29732: PPUSH
29733: CALL_OW 448
29737: IFFALSE 29772
// begin result := [ chassis , engine , control , weapon ] ;
29739: LD_ADDR_VAR 0 6
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: LD_VAR 0 3
29753: PUSH
29754: LD_VAR 0 4
29758: PUSH
29759: LD_VAR 0 5
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
// exit ;
29770: GO 30184
// end ; _chassis := AvailableChassisList ( factory ) ;
29772: LD_ADDR_VAR 0 9
29776: PUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 475
29786: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29787: LD_ADDR_VAR 0 11
29791: PUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 476
29801: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29802: LD_ADDR_VAR 0 12
29806: PUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 477
29816: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29817: LD_ADDR_VAR 0 10
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 478
29831: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29832: LD_VAR 0 9
29836: NOT
29837: PUSH
29838: LD_VAR 0 11
29842: NOT
29843: OR
29844: PUSH
29845: LD_VAR 0 12
29849: NOT
29850: OR
29851: PUSH
29852: LD_VAR 0 10
29856: NOT
29857: OR
29858: IFFALSE 29893
// begin result := [ chassis , engine , control , weapon ] ;
29860: LD_ADDR_VAR 0 6
29864: PUSH
29865: LD_VAR 0 2
29869: PUSH
29870: LD_VAR 0 3
29874: PUSH
29875: LD_VAR 0 4
29879: PUSH
29880: LD_VAR 0 5
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// exit ;
29891: GO 30184
// end ; if not chassis in _chassis then
29893: LD_VAR 0 2
29897: PUSH
29898: LD_VAR 0 9
29902: IN
29903: NOT
29904: IFFALSE 29930
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29906: LD_ADDR_VAR 0 2
29910: PUSH
29911: LD_VAR 0 9
29915: PUSH
29916: LD_INT 1
29918: PPUSH
29919: LD_VAR 0 9
29923: PPUSH
29924: CALL_OW 12
29928: ARRAY
29929: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29930: LD_VAR 0 2
29934: PPUSH
29935: LD_VAR 0 3
29939: PPUSH
29940: CALL 30189 0 2
29944: NOT
29945: IFFALSE 30004
// repeat engine := _engine [ 1 ] ;
29947: LD_ADDR_VAR 0 3
29951: PUSH
29952: LD_VAR 0 11
29956: PUSH
29957: LD_INT 1
29959: ARRAY
29960: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29961: LD_ADDR_VAR 0 11
29965: PUSH
29966: LD_VAR 0 11
29970: PPUSH
29971: LD_INT 1
29973: PPUSH
29974: CALL_OW 3
29978: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29979: LD_VAR 0 2
29983: PPUSH
29984: LD_VAR 0 3
29988: PPUSH
29989: CALL 30189 0 2
29993: PUSH
29994: LD_VAR 0 11
29998: PUSH
29999: EMPTY
30000: EQUAL
30001: OR
30002: IFFALSE 29947
// if not control in _control then
30004: LD_VAR 0 4
30008: PUSH
30009: LD_VAR 0 12
30013: IN
30014: NOT
30015: IFFALSE 30041
// control := _control [ rand ( 1 , _control ) ] ;
30017: LD_ADDR_VAR 0 4
30021: PUSH
30022: LD_VAR 0 12
30026: PUSH
30027: LD_INT 1
30029: PPUSH
30030: LD_VAR 0 12
30034: PPUSH
30035: CALL_OW 12
30039: ARRAY
30040: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30041: LD_VAR 0 2
30045: PPUSH
30046: LD_VAR 0 5
30050: PPUSH
30051: CALL 30409 0 2
30055: NOT
30056: IFFALSE 30115
// repeat weapon := _weapon [ 1 ] ;
30058: LD_ADDR_VAR 0 5
30062: PUSH
30063: LD_VAR 0 10
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30072: LD_ADDR_VAR 0 10
30076: PUSH
30077: LD_VAR 0 10
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 3
30089: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30090: LD_VAR 0 2
30094: PPUSH
30095: LD_VAR 0 5
30099: PPUSH
30100: CALL 30409 0 2
30104: PUSH
30105: LD_VAR 0 10
30109: PUSH
30110: EMPTY
30111: EQUAL
30112: OR
30113: IFFALSE 30058
// result := [ ] ;
30115: LD_ADDR_VAR 0 6
30119: PUSH
30120: EMPTY
30121: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30122: LD_VAR 0 1
30126: PPUSH
30127: LD_VAR 0 2
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: LD_VAR 0 4
30141: PPUSH
30142: LD_VAR 0 5
30146: PPUSH
30147: CALL_OW 448
30151: IFFALSE 30184
// result := [ chassis , engine , control , weapon ] ;
30153: LD_ADDR_VAR 0 6
30157: PUSH
30158: LD_VAR 0 2
30162: PUSH
30163: LD_VAR 0 3
30167: PUSH
30168: LD_VAR 0 4
30172: PUSH
30173: LD_VAR 0 5
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: ST_TO_ADDR
// end ;
30184: LD_VAR 0 6
30188: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30189: LD_INT 0
30191: PPUSH
// if not chassis or not engine then
30192: LD_VAR 0 1
30196: NOT
30197: PUSH
30198: LD_VAR 0 2
30202: NOT
30203: OR
30204: IFFALSE 30208
// exit ;
30206: GO 30404
// case engine of engine_solar :
30208: LD_VAR 0 2
30212: PUSH
30213: LD_INT 2
30215: DOUBLE
30216: EQUAL
30217: IFTRUE 30221
30219: GO 30259
30221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30222: LD_ADDR_VAR 0 3
30226: PUSH
30227: LD_INT 11
30229: PUSH
30230: LD_INT 12
30232: PUSH
30233: LD_INT 13
30235: PUSH
30236: LD_INT 14
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: ST_TO_ADDR
30257: GO 30388
30259: LD_INT 1
30261: DOUBLE
30262: EQUAL
30263: IFTRUE 30267
30265: GO 30329
30267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30268: LD_ADDR_VAR 0 3
30272: PUSH
30273: LD_INT 11
30275: PUSH
30276: LD_INT 12
30278: PUSH
30279: LD_INT 13
30281: PUSH
30282: LD_INT 14
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 4
30296: PUSH
30297: LD_INT 5
30299: PUSH
30300: LD_INT 21
30302: PUSH
30303: LD_INT 23
30305: PUSH
30306: LD_INT 22
30308: PUSH
30309: LD_INT 24
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
30327: GO 30388
30329: LD_INT 3
30331: DOUBLE
30332: EQUAL
30333: IFTRUE 30337
30335: GO 30387
30337: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_INT 13
30345: PUSH
30346: LD_INT 14
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 3
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: LD_INT 5
30360: PUSH
30361: LD_INT 21
30363: PUSH
30364: LD_INT 22
30366: PUSH
30367: LD_INT 23
30369: PUSH
30370: LD_INT 24
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
30385: GO 30388
30387: POP
// result := ( chassis in result ) ;
30388: LD_ADDR_VAR 0 3
30392: PUSH
30393: LD_VAR 0 1
30397: PUSH
30398: LD_VAR 0 3
30402: IN
30403: ST_TO_ADDR
// end ;
30404: LD_VAR 0 3
30408: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30409: LD_INT 0
30411: PPUSH
// if not chassis or not weapon then
30412: LD_VAR 0 1
30416: NOT
30417: PUSH
30418: LD_VAR 0 2
30422: NOT
30423: OR
30424: IFFALSE 30428
// exit ;
30426: GO 31488
// case weapon of us_machine_gun :
30428: LD_VAR 0 2
30432: PUSH
30433: LD_INT 2
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30471
30441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: ST_TO_ADDR
30469: GO 31472
30471: LD_INT 3
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30509
30479: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30480: LD_ADDR_VAR 0 3
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: LD_INT 3
30493: PUSH
30494: LD_INT 4
30496: PUSH
30497: LD_INT 5
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: ST_TO_ADDR
30507: GO 31472
30509: LD_INT 11
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30547
30517: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30518: LD_ADDR_VAR 0 3
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 3
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
30545: GO 31472
30547: LD_INT 4
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30581
30555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30556: LD_ADDR_VAR 0 3
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: LD_INT 4
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
30579: GO 31472
30581: LD_INT 5
30583: DOUBLE
30584: EQUAL
30585: IFTRUE 30589
30587: GO 30615
30589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: LD_INT 4
30603: PUSH
30604: LD_INT 5
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
30613: GO 31472
30615: LD_INT 9
30617: DOUBLE
30618: EQUAL
30619: IFTRUE 30623
30621: GO 30649
30623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: LD_INT 4
30637: PUSH
30638: LD_INT 5
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: ST_TO_ADDR
30647: GO 31472
30649: LD_INT 7
30651: DOUBLE
30652: EQUAL
30653: IFTRUE 30657
30655: GO 30683
30657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30658: LD_ADDR_VAR 0 3
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: LD_INT 4
30671: PUSH
30672: LD_INT 5
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: ST_TO_ADDR
30681: GO 31472
30683: LD_INT 12
30685: DOUBLE
30686: EQUAL
30687: IFTRUE 30691
30689: GO 30717
30691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30692: LD_ADDR_VAR 0 3
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: LD_INT 4
30705: PUSH
30706: LD_INT 5
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
30715: GO 31472
30717: LD_INT 13
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 30751
30725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30726: LD_ADDR_VAR 0 3
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: LD_INT 5
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
30749: GO 31472
30751: LD_INT 14
30753: DOUBLE
30754: EQUAL
30755: IFTRUE 30759
30757: GO 30777
30759: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 4
30767: PUSH
30768: LD_INT 5
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: ST_TO_ADDR
30775: GO 31472
30777: LD_INT 6
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30803
30785: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: LD_INT 4
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: ST_TO_ADDR
30801: GO 31472
30803: LD_INT 10
30805: DOUBLE
30806: EQUAL
30807: IFTRUE 30811
30809: GO 30829
30811: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30812: LD_ADDR_VAR 0 3
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: LD_INT 5
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 31472
30829: LD_INT 22
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30863
30837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_INT 11
30845: PUSH
30846: LD_INT 12
30848: PUSH
30849: LD_INT 13
30851: PUSH
30852: LD_INT 14
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31472
30863: LD_INT 23
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30897
30871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 11
30879: PUSH
30880: LD_INT 12
30882: PUSH
30883: LD_INT 13
30885: PUSH
30886: LD_INT 14
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31472
30897: LD_INT 24
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30931
30905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 11
30913: PUSH
30914: LD_INT 12
30916: PUSH
30917: LD_INT 13
30919: PUSH
30920: LD_INT 14
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
30929: GO 31472
30931: LD_INT 30
30933: DOUBLE
30934: EQUAL
30935: IFTRUE 30939
30937: GO 30965
30939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_INT 11
30947: PUSH
30948: LD_INT 12
30950: PUSH
30951: LD_INT 13
30953: PUSH
30954: LD_INT 14
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
30963: GO 31472
30965: LD_INT 25
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30991
30973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30974: LD_ADDR_VAR 0 3
30978: PUSH
30979: LD_INT 13
30981: PUSH
30982: LD_INT 14
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: ST_TO_ADDR
30989: GO 31472
30991: LD_INT 27
30993: DOUBLE
30994: EQUAL
30995: IFTRUE 30999
30997: GO 31017
30999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_INT 13
31007: PUSH
31008: LD_INT 14
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: ST_TO_ADDR
31015: GO 31472
31017: LD_INT 92
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31051
31025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_INT 11
31033: PUSH
31034: LD_INT 12
31036: PUSH
31037: LD_INT 13
31039: PUSH
31040: LD_INT 14
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
31049: GO 31472
31051: LD_INT 28
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31077
31059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31060: LD_ADDR_VAR 0 3
31064: PUSH
31065: LD_INT 13
31067: PUSH
31068: LD_INT 14
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: ST_TO_ADDR
31075: GO 31472
31077: LD_INT 29
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31103
31085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_INT 13
31093: PUSH
31094: LD_INT 14
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31472
31103: LD_INT 31
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31129
31111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 13
31119: PUSH
31120: LD_INT 14
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: ST_TO_ADDR
31127: GO 31472
31129: LD_INT 26
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31155
31137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: LD_INT 13
31145: PUSH
31146: LD_INT 14
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31472
31155: LD_INT 42
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 21
31171: PUSH
31172: LD_INT 22
31174: PUSH
31175: LD_INT 23
31177: PUSH
31178: LD_INT 24
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31472
31189: LD_INT 43
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 21
31205: PUSH
31206: LD_INT 22
31208: PUSH
31209: LD_INT 23
31211: PUSH
31212: LD_INT 24
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31472
31223: LD_INT 44
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31257
31231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 21
31239: PUSH
31240: LD_INT 22
31242: PUSH
31243: LD_INT 23
31245: PUSH
31246: LD_INT 24
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31472
31257: LD_INT 45
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31291
31265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 21
31273: PUSH
31274: LD_INT 22
31276: PUSH
31277: LD_INT 23
31279: PUSH
31280: LD_INT 24
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: ST_TO_ADDR
31289: GO 31472
31291: LD_INT 49
31293: DOUBLE
31294: EQUAL
31295: IFTRUE 31299
31297: GO 31325
31299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_INT 21
31307: PUSH
31308: LD_INT 22
31310: PUSH
31311: LD_INT 23
31313: PUSH
31314: LD_INT 24
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
31323: GO 31472
31325: LD_INT 51
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31359
31333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31334: LD_ADDR_VAR 0 3
31338: PUSH
31339: LD_INT 21
31341: PUSH
31342: LD_INT 22
31344: PUSH
31345: LD_INT 23
31347: PUSH
31348: LD_INT 24
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: ST_TO_ADDR
31357: GO 31472
31359: LD_INT 52
31361: DOUBLE
31362: EQUAL
31363: IFTRUE 31367
31365: GO 31393
31367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_INT 21
31375: PUSH
31376: LD_INT 22
31378: PUSH
31379: LD_INT 23
31381: PUSH
31382: LD_INT 24
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: ST_TO_ADDR
31391: GO 31472
31393: LD_INT 53
31395: DOUBLE
31396: EQUAL
31397: IFTRUE 31401
31399: GO 31419
31401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31402: LD_ADDR_VAR 0 3
31406: PUSH
31407: LD_INT 23
31409: PUSH
31410: LD_INT 24
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: ST_TO_ADDR
31417: GO 31472
31419: LD_INT 46
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31445
31427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31428: LD_ADDR_VAR 0 3
31432: PUSH
31433: LD_INT 23
31435: PUSH
31436: LD_INT 24
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: ST_TO_ADDR
31443: GO 31472
31445: LD_INT 47
31447: DOUBLE
31448: EQUAL
31449: IFTRUE 31453
31451: GO 31471
31453: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31454: LD_ADDR_VAR 0 3
31458: PUSH
31459: LD_INT 23
31461: PUSH
31462: LD_INT 24
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: ST_TO_ADDR
31469: GO 31472
31471: POP
// result := ( chassis in result ) ;
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: LD_VAR 0 1
31481: PUSH
31482: LD_VAR 0 3
31486: IN
31487: ST_TO_ADDR
// end ;
31488: LD_VAR 0 3
31492: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31493: LD_INT 0
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
// result := array ;
31502: LD_ADDR_VAR 0 5
31506: PUSH
31507: LD_VAR 0 1
31511: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31512: LD_VAR 0 1
31516: NOT
31517: PUSH
31518: LD_VAR 0 2
31522: NOT
31523: OR
31524: PUSH
31525: LD_VAR 0 3
31529: NOT
31530: OR
31531: PUSH
31532: LD_VAR 0 2
31536: PUSH
31537: LD_VAR 0 1
31541: GREATER
31542: OR
31543: PUSH
31544: LD_VAR 0 3
31548: PUSH
31549: LD_VAR 0 1
31553: GREATER
31554: OR
31555: IFFALSE 31559
// exit ;
31557: GO 31855
// if direction then
31559: LD_VAR 0 4
31563: IFFALSE 31627
// begin d := 1 ;
31565: LD_ADDR_VAR 0 9
31569: PUSH
31570: LD_INT 1
31572: ST_TO_ADDR
// if i_from > i_to then
31573: LD_VAR 0 2
31577: PUSH
31578: LD_VAR 0 3
31582: GREATER
31583: IFFALSE 31609
// length := ( array - i_from ) + i_to else
31585: LD_ADDR_VAR 0 11
31589: PUSH
31590: LD_VAR 0 1
31594: PUSH
31595: LD_VAR 0 2
31599: MINUS
31600: PUSH
31601: LD_VAR 0 3
31605: PLUS
31606: ST_TO_ADDR
31607: GO 31625
// length := i_to - i_from ;
31609: LD_ADDR_VAR 0 11
31613: PUSH
31614: LD_VAR 0 3
31618: PUSH
31619: LD_VAR 0 2
31623: MINUS
31624: ST_TO_ADDR
// end else
31625: GO 31688
// begin d := - 1 ;
31627: LD_ADDR_VAR 0 9
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: ST_TO_ADDR
// if i_from > i_to then
31636: LD_VAR 0 2
31640: PUSH
31641: LD_VAR 0 3
31645: GREATER
31646: IFFALSE 31666
// length := i_from - i_to else
31648: LD_ADDR_VAR 0 11
31652: PUSH
31653: LD_VAR 0 2
31657: PUSH
31658: LD_VAR 0 3
31662: MINUS
31663: ST_TO_ADDR
31664: GO 31688
// length := ( array - i_to ) + i_from ;
31666: LD_ADDR_VAR 0 11
31670: PUSH
31671: LD_VAR 0 1
31675: PUSH
31676: LD_VAR 0 3
31680: MINUS
31681: PUSH
31682: LD_VAR 0 2
31686: PLUS
31687: ST_TO_ADDR
// end ; if not length then
31688: LD_VAR 0 11
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 31855
// tmp := array ;
31697: LD_ADDR_VAR 0 10
31701: PUSH
31702: LD_VAR 0 1
31706: ST_TO_ADDR
// for i = 1 to length do
31707: LD_ADDR_VAR 0 6
31711: PUSH
31712: DOUBLE
31713: LD_INT 1
31715: DEC
31716: ST_TO_ADDR
31717: LD_VAR 0 11
31721: PUSH
31722: FOR_TO
31723: IFFALSE 31843
// begin for j = 1 to array do
31725: LD_ADDR_VAR 0 7
31729: PUSH
31730: DOUBLE
31731: LD_INT 1
31733: DEC
31734: ST_TO_ADDR
31735: LD_VAR 0 1
31739: PUSH
31740: FOR_TO
31741: IFFALSE 31829
// begin k := j + d ;
31743: LD_ADDR_VAR 0 8
31747: PUSH
31748: LD_VAR 0 7
31752: PUSH
31753: LD_VAR 0 9
31757: PLUS
31758: ST_TO_ADDR
// if k > array then
31759: LD_VAR 0 8
31763: PUSH
31764: LD_VAR 0 1
31768: GREATER
31769: IFFALSE 31779
// k := 1 ;
31771: LD_ADDR_VAR 0 8
31775: PUSH
31776: LD_INT 1
31778: ST_TO_ADDR
// if not k then
31779: LD_VAR 0 8
31783: NOT
31784: IFFALSE 31796
// k := array ;
31786: LD_ADDR_VAR 0 8
31790: PUSH
31791: LD_VAR 0 1
31795: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31796: LD_ADDR_VAR 0 10
31800: PUSH
31801: LD_VAR 0 10
31805: PPUSH
31806: LD_VAR 0 8
31810: PPUSH
31811: LD_VAR 0 1
31815: PUSH
31816: LD_VAR 0 7
31820: ARRAY
31821: PPUSH
31822: CALL_OW 1
31826: ST_TO_ADDR
// end ;
31827: GO 31740
31829: POP
31830: POP
// array := tmp ;
31831: LD_ADDR_VAR 0 1
31835: PUSH
31836: LD_VAR 0 10
31840: ST_TO_ADDR
// end ;
31841: GO 31722
31843: POP
31844: POP
// result := array ;
31845: LD_ADDR_VAR 0 5
31849: PUSH
31850: LD_VAR 0 1
31854: ST_TO_ADDR
// end ;
31855: LD_VAR 0 5
31859: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31860: LD_INT 0
31862: PPUSH
31863: PPUSH
// result := 0 ;
31864: LD_ADDR_VAR 0 3
31868: PUSH
31869: LD_INT 0
31871: ST_TO_ADDR
// if not array or not value in array then
31872: LD_VAR 0 1
31876: NOT
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: LD_VAR 0 1
31887: IN
31888: NOT
31889: OR
31890: IFFALSE 31894
// exit ;
31892: GO 31948
// for i = 1 to array do
31894: LD_ADDR_VAR 0 4
31898: PUSH
31899: DOUBLE
31900: LD_INT 1
31902: DEC
31903: ST_TO_ADDR
31904: LD_VAR 0 1
31908: PUSH
31909: FOR_TO
31910: IFFALSE 31946
// if value = array [ i ] then
31912: LD_VAR 0 2
31916: PUSH
31917: LD_VAR 0 1
31921: PUSH
31922: LD_VAR 0 4
31926: ARRAY
31927: EQUAL
31928: IFFALSE 31944
// begin result := i ;
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_VAR 0 4
31939: ST_TO_ADDR
// exit ;
31940: POP
31941: POP
31942: GO 31948
// end ;
31944: GO 31909
31946: POP
31947: POP
// end ;
31948: LD_VAR 0 3
31952: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31953: LD_INT 0
31955: PPUSH
// vc_chassis := chassis ;
31956: LD_ADDR_OWVAR 37
31960: PUSH
31961: LD_VAR 0 1
31965: ST_TO_ADDR
// vc_engine := engine ;
31966: LD_ADDR_OWVAR 39
31970: PUSH
31971: LD_VAR 0 2
31975: ST_TO_ADDR
// vc_control := control ;
31976: LD_ADDR_OWVAR 38
31980: PUSH
31981: LD_VAR 0 3
31985: ST_TO_ADDR
// vc_weapon := weapon ;
31986: LD_ADDR_OWVAR 40
31990: PUSH
31991: LD_VAR 0 4
31995: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31996: LD_ADDR_OWVAR 41
32000: PUSH
32001: LD_VAR 0 5
32005: ST_TO_ADDR
// end ;
32006: LD_VAR 0 6
32010: RET
// export function WantPlant ( unit ) ; var task ; begin
32011: LD_INT 0
32013: PPUSH
32014: PPUSH
// result := false ;
32015: LD_ADDR_VAR 0 2
32019: PUSH
32020: LD_INT 0
32022: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32023: LD_ADDR_VAR 0 3
32027: PUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 437
32037: ST_TO_ADDR
// if task then
32038: LD_VAR 0 3
32042: IFFALSE 32070
// if task [ 1 ] [ 1 ] = p then
32044: LD_VAR 0 3
32048: PUSH
32049: LD_INT 1
32051: ARRAY
32052: PUSH
32053: LD_INT 1
32055: ARRAY
32056: PUSH
32057: LD_STRING p
32059: EQUAL
32060: IFFALSE 32070
// result := true ;
32062: LD_ADDR_VAR 0 2
32066: PUSH
32067: LD_INT 1
32069: ST_TO_ADDR
// end ;
32070: LD_VAR 0 2
32074: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32075: LD_INT 0
32077: PPUSH
32078: PPUSH
32079: PPUSH
32080: PPUSH
// if pos < 1 then
32081: LD_VAR 0 2
32085: PUSH
32086: LD_INT 1
32088: LESS
32089: IFFALSE 32093
// exit ;
32091: GO 32396
// if pos = 1 then
32093: LD_VAR 0 2
32097: PUSH
32098: LD_INT 1
32100: EQUAL
32101: IFFALSE 32134
// result := Replace ( arr , pos [ 1 ] , value ) else
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_VAR 0 1
32112: PPUSH
32113: LD_VAR 0 2
32117: PUSH
32118: LD_INT 1
32120: ARRAY
32121: PPUSH
32122: LD_VAR 0 3
32126: PPUSH
32127: CALL_OW 1
32131: ST_TO_ADDR
32132: GO 32396
// begin tmp := arr ;
32134: LD_ADDR_VAR 0 6
32138: PUSH
32139: LD_VAR 0 1
32143: ST_TO_ADDR
// s_arr := [ tmp ] ;
32144: LD_ADDR_VAR 0 7
32148: PUSH
32149: LD_VAR 0 6
32153: PUSH
32154: EMPTY
32155: LIST
32156: ST_TO_ADDR
// for i = 1 to pos - 1 do
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: DOUBLE
32163: LD_INT 1
32165: DEC
32166: ST_TO_ADDR
32167: LD_VAR 0 2
32171: PUSH
32172: LD_INT 1
32174: MINUS
32175: PUSH
32176: FOR_TO
32177: IFFALSE 32222
// begin tmp := tmp [ pos [ i ] ] ;
32179: LD_ADDR_VAR 0 6
32183: PUSH
32184: LD_VAR 0 6
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: LD_VAR 0 5
32198: ARRAY
32199: ARRAY
32200: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32201: LD_ADDR_VAR 0 7
32205: PUSH
32206: LD_VAR 0 7
32210: PUSH
32211: LD_VAR 0 6
32215: PUSH
32216: EMPTY
32217: LIST
32218: ADD
32219: ST_TO_ADDR
// end ;
32220: GO 32176
32222: POP
32223: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32224: LD_ADDR_VAR 0 6
32228: PUSH
32229: LD_VAR 0 6
32233: PPUSH
32234: LD_VAR 0 2
32238: PUSH
32239: LD_VAR 0 2
32243: ARRAY
32244: PPUSH
32245: LD_VAR 0 3
32249: PPUSH
32250: CALL_OW 1
32254: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32255: LD_ADDR_VAR 0 7
32259: PUSH
32260: LD_VAR 0 7
32264: PPUSH
32265: LD_VAR 0 7
32269: PPUSH
32270: LD_VAR 0 6
32274: PPUSH
32275: CALL_OW 1
32279: ST_TO_ADDR
// for i = s_arr downto 2 do
32280: LD_ADDR_VAR 0 5
32284: PUSH
32285: DOUBLE
32286: LD_VAR 0 7
32290: INC
32291: ST_TO_ADDR
32292: LD_INT 2
32294: PUSH
32295: FOR_DOWNTO
32296: IFFALSE 32380
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32298: LD_ADDR_VAR 0 6
32302: PUSH
32303: LD_VAR 0 7
32307: PUSH
32308: LD_VAR 0 5
32312: PUSH
32313: LD_INT 1
32315: MINUS
32316: ARRAY
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_VAR 0 5
32327: PUSH
32328: LD_INT 1
32330: MINUS
32331: ARRAY
32332: PPUSH
32333: LD_VAR 0 7
32337: PUSH
32338: LD_VAR 0 5
32342: ARRAY
32343: PPUSH
32344: CALL_OW 1
32348: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32349: LD_ADDR_VAR 0 7
32353: PUSH
32354: LD_VAR 0 7
32358: PPUSH
32359: LD_VAR 0 5
32363: PUSH
32364: LD_INT 1
32366: MINUS
32367: PPUSH
32368: LD_VAR 0 6
32372: PPUSH
32373: CALL_OW 1
32377: ST_TO_ADDR
// end ;
32378: GO 32295
32380: POP
32381: POP
// result := s_arr [ 1 ] ;
32382: LD_ADDR_VAR 0 4
32386: PUSH
32387: LD_VAR 0 7
32391: PUSH
32392: LD_INT 1
32394: ARRAY
32395: ST_TO_ADDR
// end ; end ;
32396: LD_VAR 0 4
32400: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32401: LD_INT 0
32403: PPUSH
32404: PPUSH
// if not list then
32405: LD_VAR 0 1
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 32505
// i := list [ pos1 ] ;
32414: LD_ADDR_VAR 0 5
32418: PUSH
32419: LD_VAR 0 1
32423: PUSH
32424: LD_VAR 0 2
32428: ARRAY
32429: ST_TO_ADDR
// if not i then
32430: LD_VAR 0 5
32434: NOT
32435: IFFALSE 32439
// exit ;
32437: GO 32505
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32439: LD_ADDR_VAR 0 1
32443: PUSH
32444: LD_VAR 0 1
32448: PPUSH
32449: LD_VAR 0 2
32453: PPUSH
32454: LD_VAR 0 1
32458: PUSH
32459: LD_VAR 0 3
32463: ARRAY
32464: PPUSH
32465: CALL_OW 1
32469: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32470: LD_ADDR_VAR 0 1
32474: PUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: LD_VAR 0 3
32484: PPUSH
32485: LD_VAR 0 5
32489: PPUSH
32490: CALL_OW 1
32494: ST_TO_ADDR
// result := list ;
32495: LD_ADDR_VAR 0 4
32499: PUSH
32500: LD_VAR 0 1
32504: ST_TO_ADDR
// end ;
32505: LD_VAR 0 4
32509: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32510: LD_INT 0
32512: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32513: LD_ADDR_VAR 0 5
32517: PUSH
32518: LD_VAR 0 1
32522: PPUSH
32523: CALL_OW 250
32527: PPUSH
32528: LD_VAR 0 1
32532: PPUSH
32533: CALL_OW 251
32537: PPUSH
32538: LD_VAR 0 2
32542: PPUSH
32543: LD_VAR 0 3
32547: PPUSH
32548: LD_VAR 0 4
32552: PPUSH
32553: CALL 32931 0 5
32557: ST_TO_ADDR
// end ;
32558: LD_VAR 0 5
32562: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32563: LD_INT 0
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
// if not list or not unit then
32569: LD_VAR 0 2
32573: NOT
32574: PUSH
32575: LD_VAR 0 1
32579: NOT
32580: OR
32581: IFFALSE 32585
// exit ;
32583: GO 32926
// result := [ ] ;
32585: LD_ADDR_VAR 0 5
32589: PUSH
32590: EMPTY
32591: ST_TO_ADDR
// for i in list do
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 2
32601: PUSH
32602: FOR_IN
32603: IFFALSE 32821
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32605: LD_ADDR_VAR 0 8
32609: PUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: LD_VAR 0 6
32619: PUSH
32620: LD_INT 1
32622: ARRAY
32623: PPUSH
32624: LD_VAR 0 6
32628: PUSH
32629: LD_INT 2
32631: ARRAY
32632: PPUSH
32633: CALL_OW 297
32637: ST_TO_ADDR
// if not Count ( result ) then
32638: LD_VAR 0 5
32642: PPUSH
32643: CALL 29215 0 1
32647: NOT
32648: IFFALSE 32681
// begin result := Join ( result , [ i , tmp ] ) ;
32650: LD_ADDR_VAR 0 5
32654: PUSH
32655: LD_VAR 0 5
32659: PPUSH
32660: LD_VAR 0 6
32664: PUSH
32665: LD_VAR 0 8
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PPUSH
32674: CALL 64824 0 2
32678: ST_TO_ADDR
// continue ;
32679: GO 32602
// end ; if result [ result ] [ 2 ] <= tmp then
32681: LD_VAR 0 5
32685: PUSH
32686: LD_VAR 0 5
32690: ARRAY
32691: PUSH
32692: LD_INT 2
32694: ARRAY
32695: PUSH
32696: LD_VAR 0 8
32700: LESSEQUAL
32701: IFFALSE 32734
// result := Join ( result , [ i , tmp ] ) else
32703: LD_ADDR_VAR 0 5
32707: PUSH
32708: LD_VAR 0 5
32712: PPUSH
32713: LD_VAR 0 6
32717: PUSH
32718: LD_VAR 0 8
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PPUSH
32727: CALL 64824 0 2
32731: ST_TO_ADDR
32732: GO 32819
// begin for j := 1 to Count ( result ) do
32734: LD_ADDR_VAR 0 7
32738: PUSH
32739: DOUBLE
32740: LD_INT 1
32742: DEC
32743: ST_TO_ADDR
32744: LD_VAR 0 5
32748: PPUSH
32749: CALL 29215 0 1
32753: PUSH
32754: FOR_TO
32755: IFFALSE 32817
// begin if tmp < result [ j ] [ 2 ] then
32757: LD_VAR 0 8
32761: PUSH
32762: LD_VAR 0 5
32766: PUSH
32767: LD_VAR 0 7
32771: ARRAY
32772: PUSH
32773: LD_INT 2
32775: ARRAY
32776: LESS
32777: IFFALSE 32815
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32779: LD_ADDR_VAR 0 5
32783: PUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_VAR 0 7
32793: PPUSH
32794: LD_VAR 0 6
32798: PUSH
32799: LD_VAR 0 8
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PPUSH
32808: CALL_OW 2
32812: ST_TO_ADDR
// break ;
32813: GO 32817
// end ; end ;
32815: GO 32754
32817: POP
32818: POP
// end ; end ;
32819: GO 32602
32821: POP
32822: POP
// if result and not asc then
32823: LD_VAR 0 5
32827: PUSH
32828: LD_VAR 0 3
32832: NOT
32833: AND
32834: IFFALSE 32851
// result := ReverseArray ( result ) ;
32836: LD_ADDR_VAR 0 5
32840: PUSH
32841: LD_VAR 0 5
32845: PPUSH
32846: CALL 60091 0 1
32850: ST_TO_ADDR
// tmp := [ ] ;
32851: LD_ADDR_VAR 0 8
32855: PUSH
32856: EMPTY
32857: ST_TO_ADDR
// if mode then
32858: LD_VAR 0 4
32862: IFFALSE 32926
// begin for i := 1 to result do
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: DOUBLE
32870: LD_INT 1
32872: DEC
32873: ST_TO_ADDR
32874: LD_VAR 0 5
32878: PUSH
32879: FOR_TO
32880: IFFALSE 32914
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32882: LD_ADDR_VAR 0 8
32886: PUSH
32887: LD_VAR 0 8
32891: PPUSH
32892: LD_VAR 0 5
32896: PUSH
32897: LD_VAR 0 6
32901: ARRAY
32902: PUSH
32903: LD_INT 1
32905: ARRAY
32906: PPUSH
32907: CALL 64824 0 2
32911: ST_TO_ADDR
32912: GO 32879
32914: POP
32915: POP
// result := tmp ;
32916: LD_ADDR_VAR 0 5
32920: PUSH
32921: LD_VAR 0 8
32925: ST_TO_ADDR
// end ; end ;
32926: LD_VAR 0 5
32930: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
// if not list then
32937: LD_VAR 0 3
32941: NOT
32942: IFFALSE 32946
// exit ;
32944: GO 33334
// result := [ ] ;
32946: LD_ADDR_VAR 0 6
32950: PUSH
32951: EMPTY
32952: ST_TO_ADDR
// for i in list do
32953: LD_ADDR_VAR 0 7
32957: PUSH
32958: LD_VAR 0 3
32962: PUSH
32963: FOR_IN
32964: IFFALSE 33166
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32966: LD_ADDR_VAR 0 9
32970: PUSH
32971: LD_VAR 0 7
32975: PPUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: LD_VAR 0 2
32985: PPUSH
32986: CALL_OW 297
32990: ST_TO_ADDR
// if not result then
32991: LD_VAR 0 6
32995: NOT
32996: IFFALSE 33022
// result := [ [ i , tmp ] ] else
32998: LD_ADDR_VAR 0 6
33002: PUSH
33003: LD_VAR 0 7
33007: PUSH
33008: LD_VAR 0 9
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: ST_TO_ADDR
33020: GO 33164
// begin if result [ result ] [ 2 ] <= tmp then
33022: LD_VAR 0 6
33026: PUSH
33027: LD_VAR 0 6
33031: ARRAY
33032: PUSH
33033: LD_INT 2
33035: ARRAY
33036: PUSH
33037: LD_VAR 0 9
33041: LESSEQUAL
33042: IFFALSE 33084
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33044: LD_ADDR_VAR 0 6
33048: PUSH
33049: LD_VAR 0 6
33053: PPUSH
33054: LD_VAR 0 6
33058: PUSH
33059: LD_INT 1
33061: PLUS
33062: PPUSH
33063: LD_VAR 0 7
33067: PUSH
33068: LD_VAR 0 9
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PPUSH
33077: CALL_OW 2
33081: ST_TO_ADDR
33082: GO 33164
// for j := 1 to result do
33084: LD_ADDR_VAR 0 8
33088: PUSH
33089: DOUBLE
33090: LD_INT 1
33092: DEC
33093: ST_TO_ADDR
33094: LD_VAR 0 6
33098: PUSH
33099: FOR_TO
33100: IFFALSE 33162
// begin if tmp < result [ j ] [ 2 ] then
33102: LD_VAR 0 9
33106: PUSH
33107: LD_VAR 0 6
33111: PUSH
33112: LD_VAR 0 8
33116: ARRAY
33117: PUSH
33118: LD_INT 2
33120: ARRAY
33121: LESS
33122: IFFALSE 33160
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33124: LD_ADDR_VAR 0 6
33128: PUSH
33129: LD_VAR 0 6
33133: PPUSH
33134: LD_VAR 0 8
33138: PPUSH
33139: LD_VAR 0 7
33143: PUSH
33144: LD_VAR 0 9
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PPUSH
33153: CALL_OW 2
33157: ST_TO_ADDR
// break ;
33158: GO 33162
// end ; end ;
33160: GO 33099
33162: POP
33163: POP
// end ; end ;
33164: GO 32963
33166: POP
33167: POP
// if result and not asc then
33168: LD_VAR 0 6
33172: PUSH
33173: LD_VAR 0 4
33177: NOT
33178: AND
33179: IFFALSE 33254
// begin tmp := result ;
33181: LD_ADDR_VAR 0 9
33185: PUSH
33186: LD_VAR 0 6
33190: ST_TO_ADDR
// for i = tmp downto 1 do
33191: LD_ADDR_VAR 0 7
33195: PUSH
33196: DOUBLE
33197: LD_VAR 0 9
33201: INC
33202: ST_TO_ADDR
33203: LD_INT 1
33205: PUSH
33206: FOR_DOWNTO
33207: IFFALSE 33252
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33209: LD_ADDR_VAR 0 6
33213: PUSH
33214: LD_VAR 0 6
33218: PPUSH
33219: LD_VAR 0 9
33223: PUSH
33224: LD_VAR 0 7
33228: MINUS
33229: PUSH
33230: LD_INT 1
33232: PLUS
33233: PPUSH
33234: LD_VAR 0 9
33238: PUSH
33239: LD_VAR 0 7
33243: ARRAY
33244: PPUSH
33245: CALL_OW 1
33249: ST_TO_ADDR
33250: GO 33206
33252: POP
33253: POP
// end ; tmp := [ ] ;
33254: LD_ADDR_VAR 0 9
33258: PUSH
33259: EMPTY
33260: ST_TO_ADDR
// if mode then
33261: LD_VAR 0 5
33265: IFFALSE 33334
// begin for i = 1 to result do
33267: LD_ADDR_VAR 0 7
33271: PUSH
33272: DOUBLE
33273: LD_INT 1
33275: DEC
33276: ST_TO_ADDR
33277: LD_VAR 0 6
33281: PUSH
33282: FOR_TO
33283: IFFALSE 33322
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_VAR 0 9
33294: PPUSH
33295: LD_VAR 0 7
33299: PPUSH
33300: LD_VAR 0 6
33304: PUSH
33305: LD_VAR 0 7
33309: ARRAY
33310: PUSH
33311: LD_INT 1
33313: ARRAY
33314: PPUSH
33315: CALL_OW 1
33319: ST_TO_ADDR
33320: GO 33282
33322: POP
33323: POP
// result := tmp ;
33324: LD_ADDR_VAR 0 6
33328: PUSH
33329: LD_VAR 0 9
33333: ST_TO_ADDR
// end ; end ;
33334: LD_VAR 0 6
33338: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33339: LD_INT 0
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33347: LD_ADDR_VAR 0 5
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// if not x or not y then
33369: LD_VAR 0 2
33373: NOT
33374: PUSH
33375: LD_VAR 0 3
33379: NOT
33380: OR
33381: IFFALSE 33385
// exit ;
33383: GO 35035
// if not range then
33385: LD_VAR 0 4
33389: NOT
33390: IFFALSE 33400
// range := 10 ;
33392: LD_ADDR_VAR 0 4
33396: PUSH
33397: LD_INT 10
33399: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33400: LD_ADDR_VAR 0 8
33404: PUSH
33405: LD_INT 81
33407: PUSH
33408: LD_VAR 0 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 92
33419: PUSH
33420: LD_VAR 0 2
33424: PUSH
33425: LD_VAR 0 3
33429: PUSH
33430: LD_VAR 0 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 21
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: PPUSH
33463: CALL_OW 69
33467: ST_TO_ADDR
// if not tmp then
33468: LD_VAR 0 8
33472: NOT
33473: IFFALSE 33477
// exit ;
33475: GO 35035
// for i in tmp do
33477: LD_ADDR_VAR 0 6
33481: PUSH
33482: LD_VAR 0 8
33486: PUSH
33487: FOR_IN
33488: IFFALSE 35010
// begin points := [ 0 , 0 , 0 ] ;
33490: LD_ADDR_VAR 0 9
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: ST_TO_ADDR
// bpoints := 1 ;
33509: LD_ADDR_VAR 0 10
33513: PUSH
33514: LD_INT 1
33516: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33517: LD_VAR 0 6
33521: PPUSH
33522: CALL_OW 247
33526: PUSH
33527: LD_INT 1
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 34113
33535: POP
// begin if GetClass ( i ) = 1 then
33536: LD_VAR 0 6
33540: PPUSH
33541: CALL_OW 257
33545: PUSH
33546: LD_INT 1
33548: EQUAL
33549: IFFALSE 33570
// points := [ 10 , 5 , 3 ] ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_INT 10
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 257
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: LD_INT 4
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: IN
33594: IFFALSE 33615
// points := [ 3 , 2 , 1 ] ;
33596: LD_ADDR_VAR 0 9
33600: PUSH
33601: LD_INT 3
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33615: LD_VAR 0 6
33619: PPUSH
33620: CALL_OW 257
33624: PUSH
33625: LD_INT 5
33627: EQUAL
33628: IFFALSE 33649
// points := [ 130 , 5 , 2 ] ;
33630: LD_ADDR_VAR 0 9
33634: PUSH
33635: LD_INT 130
33637: PUSH
33638: LD_INT 5
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33649: LD_VAR 0 6
33653: PPUSH
33654: CALL_OW 257
33658: PUSH
33659: LD_INT 8
33661: EQUAL
33662: IFFALSE 33683
// points := [ 35 , 35 , 30 ] ;
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_INT 35
33671: PUSH
33672: LD_INT 35
33674: PUSH
33675: LD_INT 30
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33683: LD_VAR 0 6
33687: PPUSH
33688: CALL_OW 257
33692: PUSH
33693: LD_INT 9
33695: EQUAL
33696: IFFALSE 33717
// points := [ 20 , 55 , 40 ] ;
33698: LD_ADDR_VAR 0 9
33702: PUSH
33703: LD_INT 20
33705: PUSH
33706: LD_INT 55
33708: PUSH
33709: LD_INT 40
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33717: LD_VAR 0 6
33721: PPUSH
33722: CALL_OW 257
33726: PUSH
33727: LD_INT 12
33729: PUSH
33730: LD_INT 16
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: IN
33737: IFFALSE 33758
// points := [ 5 , 3 , 2 ] ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: LD_INT 3
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33758: LD_VAR 0 6
33762: PPUSH
33763: CALL_OW 257
33767: PUSH
33768: LD_INT 17
33770: EQUAL
33771: IFFALSE 33792
// points := [ 100 , 50 , 75 ] ;
33773: LD_ADDR_VAR 0 9
33777: PUSH
33778: LD_INT 100
33780: PUSH
33781: LD_INT 50
33783: PUSH
33784: LD_INT 75
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33792: LD_VAR 0 6
33796: PPUSH
33797: CALL_OW 257
33801: PUSH
33802: LD_INT 15
33804: EQUAL
33805: IFFALSE 33826
// points := [ 10 , 5 , 3 ] ;
33807: LD_ADDR_VAR 0 9
33811: PUSH
33812: LD_INT 10
33814: PUSH
33815: LD_INT 5
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33826: LD_VAR 0 6
33830: PPUSH
33831: CALL_OW 257
33835: PUSH
33836: LD_INT 14
33838: EQUAL
33839: IFFALSE 33860
// points := [ 10 , 0 , 0 ] ;
33841: LD_ADDR_VAR 0 9
33845: PUSH
33846: LD_INT 10
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33860: LD_VAR 0 6
33864: PPUSH
33865: CALL_OW 257
33869: PUSH
33870: LD_INT 11
33872: EQUAL
33873: IFFALSE 33894
// points := [ 30 , 10 , 5 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 30
33882: PUSH
33883: LD_INT 10
33885: PUSH
33886: LD_INT 5
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33894: LD_VAR 0 1
33898: PPUSH
33899: LD_INT 5
33901: PPUSH
33902: CALL_OW 321
33906: PUSH
33907: LD_INT 2
33909: EQUAL
33910: IFFALSE 33927
// bpoints := bpoints * 1.8 ;
33912: LD_ADDR_VAR 0 10
33916: PUSH
33917: LD_VAR 0 10
33921: PUSH
33922: LD_REAL  1.80000000000000E+0000
33925: MUL
33926: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33927: LD_VAR 0 6
33931: PPUSH
33932: CALL_OW 257
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: LD_INT 3
33945: PUSH
33946: LD_INT 4
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: IN
33955: PUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: LD_INT 51
33963: PPUSH
33964: CALL_OW 321
33968: PUSH
33969: LD_INT 2
33971: EQUAL
33972: AND
33973: IFFALSE 33990
// bpoints := bpoints * 1.2 ;
33975: LD_ADDR_VAR 0 10
33979: PUSH
33980: LD_VAR 0 10
33984: PUSH
33985: LD_REAL  1.20000000000000E+0000
33988: MUL
33989: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33990: LD_VAR 0 6
33994: PPUSH
33995: CALL_OW 257
33999: PUSH
34000: LD_INT 5
34002: PUSH
34003: LD_INT 7
34005: PUSH
34006: LD_INT 9
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: IN
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: LD_INT 52
34022: PPUSH
34023: CALL_OW 321
34027: PUSH
34028: LD_INT 2
34030: EQUAL
34031: AND
34032: IFFALSE 34049
// bpoints := bpoints * 1.5 ;
34034: LD_ADDR_VAR 0 10
34038: PUSH
34039: LD_VAR 0 10
34043: PUSH
34044: LD_REAL  1.50000000000000E+0000
34047: MUL
34048: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34049: LD_VAR 0 1
34053: PPUSH
34054: LD_INT 66
34056: PPUSH
34057: CALL_OW 321
34061: PUSH
34062: LD_INT 2
34064: EQUAL
34065: IFFALSE 34082
// bpoints := bpoints * 1.1 ;
34067: LD_ADDR_VAR 0 10
34071: PUSH
34072: LD_VAR 0 10
34076: PUSH
34077: LD_REAL  1.10000000000000E+0000
34080: MUL
34081: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34082: LD_ADDR_VAR 0 10
34086: PUSH
34087: LD_VAR 0 10
34091: PUSH
34092: LD_VAR 0 6
34096: PPUSH
34097: LD_INT 1
34099: PPUSH
34100: CALL_OW 259
34104: PUSH
34105: LD_REAL  1.15000000000000E+0000
34108: MUL
34109: MUL
34110: ST_TO_ADDR
// end ; unit_vehicle :
34111: GO 34939
34113: LD_INT 2
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34121
34119: GO 34927
34121: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34122: LD_VAR 0 6
34126: PPUSH
34127: CALL_OW 264
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 42
34137: PUSH
34138: LD_INT 24
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: IN
34146: IFFALSE 34167
// points := [ 25 , 5 , 3 ] ;
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_INT 25
34155: PUSH
34156: LD_INT 5
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34167: LD_VAR 0 6
34171: PPUSH
34172: CALL_OW 264
34176: PUSH
34177: LD_INT 4
34179: PUSH
34180: LD_INT 43
34182: PUSH
34183: LD_INT 25
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: IN
34191: IFFALSE 34212
// points := [ 40 , 15 , 5 ] ;
34193: LD_ADDR_VAR 0 9
34197: PUSH
34198: LD_INT 40
34200: PUSH
34201: LD_INT 15
34203: PUSH
34204: LD_INT 5
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34212: LD_VAR 0 6
34216: PPUSH
34217: CALL_OW 264
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 23
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: IN
34232: IFFALSE 34253
// points := [ 7 , 25 , 8 ] ;
34234: LD_ADDR_VAR 0 9
34238: PUSH
34239: LD_INT 7
34241: PUSH
34242: LD_INT 25
34244: PUSH
34245: LD_INT 8
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34253: LD_VAR 0 6
34257: PPUSH
34258: CALL_OW 264
34262: PUSH
34263: LD_INT 5
34265: PUSH
34266: LD_INT 27
34268: PUSH
34269: LD_INT 44
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: IN
34277: IFFALSE 34298
// points := [ 14 , 50 , 16 ] ;
34279: LD_ADDR_VAR 0 9
34283: PUSH
34284: LD_INT 14
34286: PUSH
34287: LD_INT 50
34289: PUSH
34290: LD_INT 16
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34298: LD_VAR 0 6
34302: PPUSH
34303: CALL_OW 264
34307: PUSH
34308: LD_INT 6
34310: PUSH
34311: LD_INT 46
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: IN
34318: IFFALSE 34339
// points := [ 32 , 120 , 70 ] ;
34320: LD_ADDR_VAR 0 9
34324: PUSH
34325: LD_INT 32
34327: PUSH
34328: LD_INT 120
34330: PUSH
34331: LD_INT 70
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34339: LD_VAR 0 6
34343: PPUSH
34344: CALL_OW 264
34348: PUSH
34349: LD_INT 7
34351: PUSH
34352: LD_INT 28
34354: PUSH
34355: LD_INT 45
34357: PUSH
34358: LD_INT 92
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: IN
34367: IFFALSE 34388
// points := [ 35 , 20 , 45 ] ;
34369: LD_ADDR_VAR 0 9
34373: PUSH
34374: LD_INT 35
34376: PUSH
34377: LD_INT 20
34379: PUSH
34380: LD_INT 45
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 264
34397: PUSH
34398: LD_INT 47
34400: PUSH
34401: EMPTY
34402: LIST
34403: IN
34404: IFFALSE 34425
// points := [ 67 , 45 , 75 ] ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_INT 67
34413: PUSH
34414: LD_INT 45
34416: PUSH
34417: LD_INT 75
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 264
34434: PUSH
34435: LD_INT 26
34437: PUSH
34438: EMPTY
34439: LIST
34440: IN
34441: IFFALSE 34462
// points := [ 120 , 30 , 80 ] ;
34443: LD_ADDR_VAR 0 9
34447: PUSH
34448: LD_INT 120
34450: PUSH
34451: LD_INT 30
34453: PUSH
34454: LD_INT 80
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34462: LD_VAR 0 6
34466: PPUSH
34467: CALL_OW 264
34471: PUSH
34472: LD_INT 22
34474: PUSH
34475: EMPTY
34476: LIST
34477: IN
34478: IFFALSE 34499
// points := [ 40 , 1 , 1 ] ;
34480: LD_ADDR_VAR 0 9
34484: PUSH
34485: LD_INT 40
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34499: LD_VAR 0 6
34503: PPUSH
34504: CALL_OW 264
34508: PUSH
34509: LD_INT 29
34511: PUSH
34512: EMPTY
34513: LIST
34514: IN
34515: IFFALSE 34536
// points := [ 70 , 200 , 400 ] ;
34517: LD_ADDR_VAR 0 9
34521: PUSH
34522: LD_INT 70
34524: PUSH
34525: LD_INT 200
34527: PUSH
34528: LD_INT 400
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34536: LD_VAR 0 6
34540: PPUSH
34541: CALL_OW 264
34545: PUSH
34546: LD_INT 14
34548: PUSH
34549: LD_INT 53
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: IN
34556: IFFALSE 34577
// points := [ 40 , 10 , 20 ] ;
34558: LD_ADDR_VAR 0 9
34562: PUSH
34563: LD_INT 40
34565: PUSH
34566: LD_INT 10
34568: PUSH
34569: LD_INT 20
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34577: LD_VAR 0 6
34581: PPUSH
34582: CALL_OW 264
34586: PUSH
34587: LD_INT 9
34589: PUSH
34590: EMPTY
34591: LIST
34592: IN
34593: IFFALSE 34614
// points := [ 5 , 70 , 20 ] ;
34595: LD_ADDR_VAR 0 9
34599: PUSH
34600: LD_INT 5
34602: PUSH
34603: LD_INT 70
34605: PUSH
34606: LD_INT 20
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34614: LD_VAR 0 6
34618: PPUSH
34619: CALL_OW 264
34623: PUSH
34624: LD_INT 10
34626: PUSH
34627: EMPTY
34628: LIST
34629: IN
34630: IFFALSE 34651
// points := [ 35 , 110 , 70 ] ;
34632: LD_ADDR_VAR 0 9
34636: PUSH
34637: LD_INT 35
34639: PUSH
34640: LD_INT 110
34642: PUSH
34643: LD_INT 70
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34651: LD_VAR 0 6
34655: PPUSH
34656: CALL_OW 265
34660: PUSH
34661: LD_INT 25
34663: EQUAL
34664: IFFALSE 34685
// points := [ 80 , 65 , 100 ] ;
34666: LD_ADDR_VAR 0 9
34670: PUSH
34671: LD_INT 80
34673: PUSH
34674: LD_INT 65
34676: PUSH
34677: LD_INT 100
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34685: LD_VAR 0 6
34689: PPUSH
34690: CALL_OW 263
34694: PUSH
34695: LD_INT 1
34697: EQUAL
34698: IFFALSE 34733
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34700: LD_ADDR_VAR 0 10
34704: PUSH
34705: LD_VAR 0 10
34709: PUSH
34710: LD_VAR 0 6
34714: PPUSH
34715: CALL_OW 311
34719: PPUSH
34720: LD_INT 3
34722: PPUSH
34723: CALL_OW 259
34727: PUSH
34728: LD_INT 4
34730: MUL
34731: MUL
34732: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34733: LD_VAR 0 6
34737: PPUSH
34738: CALL_OW 263
34742: PUSH
34743: LD_INT 2
34745: EQUAL
34746: IFFALSE 34797
// begin j := IsControledBy ( i ) ;
34748: LD_ADDR_VAR 0 7
34752: PUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 312
34762: ST_TO_ADDR
// if j then
34763: LD_VAR 0 7
34767: IFFALSE 34797
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34769: LD_ADDR_VAR 0 10
34773: PUSH
34774: LD_VAR 0 10
34778: PUSH
34779: LD_VAR 0 7
34783: PPUSH
34784: LD_INT 3
34786: PPUSH
34787: CALL_OW 259
34791: PUSH
34792: LD_INT 3
34794: MUL
34795: MUL
34796: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34797: LD_VAR 0 6
34801: PPUSH
34802: CALL_OW 264
34806: PUSH
34807: LD_INT 5
34809: PUSH
34810: LD_INT 6
34812: PUSH
34813: LD_INT 46
34815: PUSH
34816: LD_INT 44
34818: PUSH
34819: LD_INT 47
34821: PUSH
34822: LD_INT 45
34824: PUSH
34825: LD_INT 28
34827: PUSH
34828: LD_INT 7
34830: PUSH
34831: LD_INT 27
34833: PUSH
34834: LD_INT 29
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: IN
34849: PUSH
34850: LD_VAR 0 1
34854: PPUSH
34855: LD_INT 52
34857: PPUSH
34858: CALL_OW 321
34862: PUSH
34863: LD_INT 2
34865: EQUAL
34866: AND
34867: IFFALSE 34884
// bpoints := bpoints * 1.2 ;
34869: LD_ADDR_VAR 0 10
34873: PUSH
34874: LD_VAR 0 10
34878: PUSH
34879: LD_REAL  1.20000000000000E+0000
34882: MUL
34883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34884: LD_VAR 0 6
34888: PPUSH
34889: CALL_OW 264
34893: PUSH
34894: LD_INT 6
34896: PUSH
34897: LD_INT 46
34899: PUSH
34900: LD_INT 47
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: LIST
34907: IN
34908: IFFALSE 34925
// bpoints := bpoints * 1.2 ;
34910: LD_ADDR_VAR 0 10
34914: PUSH
34915: LD_VAR 0 10
34919: PUSH
34920: LD_REAL  1.20000000000000E+0000
34923: MUL
34924: ST_TO_ADDR
// end ; unit_building :
34925: GO 34939
34927: LD_INT 3
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34938
34935: POP
// ; end ;
34936: GO 34939
34938: POP
// for j = 1 to 3 do
34939: LD_ADDR_VAR 0 7
34943: PUSH
34944: DOUBLE
34945: LD_INT 1
34947: DEC
34948: ST_TO_ADDR
34949: LD_INT 3
34951: PUSH
34952: FOR_TO
34953: IFFALSE 35006
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34955: LD_ADDR_VAR 0 5
34959: PUSH
34960: LD_VAR 0 5
34964: PPUSH
34965: LD_VAR 0 7
34969: PPUSH
34970: LD_VAR 0 5
34974: PUSH
34975: LD_VAR 0 7
34979: ARRAY
34980: PUSH
34981: LD_VAR 0 9
34985: PUSH
34986: LD_VAR 0 7
34990: ARRAY
34991: PUSH
34992: LD_VAR 0 10
34996: MUL
34997: PLUS
34998: PPUSH
34999: CALL_OW 1
35003: ST_TO_ADDR
35004: GO 34952
35006: POP
35007: POP
// end ;
35008: GO 33487
35010: POP
35011: POP
// result := Replace ( result , 4 , tmp ) ;
35012: LD_ADDR_VAR 0 5
35016: PUSH
35017: LD_VAR 0 5
35021: PPUSH
35022: LD_INT 4
35024: PPUSH
35025: LD_VAR 0 8
35029: PPUSH
35030: CALL_OW 1
35034: ST_TO_ADDR
// end ;
35035: LD_VAR 0 5
35039: RET
// export function DangerAtRange ( unit , range ) ; begin
35040: LD_INT 0
35042: PPUSH
// if not unit then
35043: LD_VAR 0 1
35047: NOT
35048: IFFALSE 35052
// exit ;
35050: GO 35097
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35052: LD_ADDR_VAR 0 3
35056: PUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 255
35066: PPUSH
35067: LD_VAR 0 1
35071: PPUSH
35072: CALL_OW 250
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 251
35086: PPUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL 33339 0 4
35096: ST_TO_ADDR
// end ;
35097: LD_VAR 0 3
35101: RET
// export function DangerInArea ( side , area ) ; begin
35102: LD_INT 0
35104: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_INT 81
35117: PUSH
35118: LD_VAR 0 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PPUSH
35127: CALL_OW 70
35131: ST_TO_ADDR
// end ;
35132: LD_VAR 0 3
35136: RET
// export function IsExtension ( b ) ; begin
35137: LD_INT 0
35139: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35140: LD_ADDR_VAR 0 2
35144: PUSH
35145: LD_VAR 0 1
35149: PUSH
35150: LD_INT 23
35152: PUSH
35153: LD_INT 20
35155: PUSH
35156: LD_INT 22
35158: PUSH
35159: LD_INT 17
35161: PUSH
35162: LD_INT 24
35164: PUSH
35165: LD_INT 21
35167: PUSH
35168: LD_INT 19
35170: PUSH
35171: LD_INT 16
35173: PUSH
35174: LD_INT 25
35176: PUSH
35177: LD_INT 18
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: IN
35192: ST_TO_ADDR
// end ;
35193: LD_VAR 0 2
35197: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
35202: PPUSH
// result := [ ] ;
35203: LD_ADDR_VAR 0 4
35207: PUSH
35208: EMPTY
35209: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35210: LD_ADDR_VAR 0 5
35214: PUSH
35215: LD_VAR 0 2
35219: PPUSH
35220: LD_INT 21
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PPUSH
35230: CALL_OW 70
35234: ST_TO_ADDR
// if not tmp then
35235: LD_VAR 0 5
35239: NOT
35240: IFFALSE 35244
// exit ;
35242: GO 35308
// if checkLink then
35244: LD_VAR 0 3
35248: IFFALSE 35298
// begin for i in tmp do
35250: LD_ADDR_VAR 0 6
35254: PUSH
35255: LD_VAR 0 5
35259: PUSH
35260: FOR_IN
35261: IFFALSE 35296
// if GetBase ( i ) <> base then
35263: LD_VAR 0 6
35267: PPUSH
35268: CALL_OW 274
35272: PUSH
35273: LD_VAR 0 1
35277: NONEQUAL
35278: IFFALSE 35294
// ComLinkToBase ( base , i ) ;
35280: LD_VAR 0 1
35284: PPUSH
35285: LD_VAR 0 6
35289: PPUSH
35290: CALL_OW 169
35294: GO 35260
35296: POP
35297: POP
// end ; result := tmp ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_VAR 0 5
35307: ST_TO_ADDR
// end ;
35308: LD_VAR 0 4
35312: RET
// export function ComComplete ( units , b ) ; var i ; begin
35313: LD_INT 0
35315: PPUSH
35316: PPUSH
// if not units then
35317: LD_VAR 0 1
35321: NOT
35322: IFFALSE 35326
// exit ;
35324: GO 35416
// for i in units do
35326: LD_ADDR_VAR 0 4
35330: PUSH
35331: LD_VAR 0 1
35335: PUSH
35336: FOR_IN
35337: IFFALSE 35414
// if BuildingStatus ( b ) = bs_build then
35339: LD_VAR 0 2
35343: PPUSH
35344: CALL_OW 461
35348: PUSH
35349: LD_INT 1
35351: EQUAL
35352: IFFALSE 35412
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35354: LD_VAR 0 4
35358: PPUSH
35359: LD_STRING h
35361: PUSH
35362: LD_VAR 0 2
35366: PPUSH
35367: CALL_OW 250
35371: PUSH
35372: LD_VAR 0 2
35376: PPUSH
35377: CALL_OW 251
35381: PUSH
35382: LD_VAR 0 2
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: PPUSH
35408: CALL_OW 446
35412: GO 35336
35414: POP
35415: POP
// end ;
35416: LD_VAR 0 3
35420: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35421: LD_INT 0
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35429: LD_VAR 0 1
35433: NOT
35434: PUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 263
35444: PUSH
35445: LD_INT 2
35447: NONEQUAL
35448: OR
35449: IFFALSE 35453
// exit ;
35451: GO 35769
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35453: LD_ADDR_VAR 0 6
35457: PUSH
35458: LD_INT 22
35460: PUSH
35461: LD_VAR 0 1
35465: PPUSH
35466: CALL_OW 255
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 30
35480: PUSH
35481: LD_INT 36
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 34
35490: PUSH
35491: LD_INT 31
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PPUSH
35507: CALL_OW 69
35511: ST_TO_ADDR
// if not tmp then
35512: LD_VAR 0 6
35516: NOT
35517: IFFALSE 35521
// exit ;
35519: GO 35769
// result := [ ] ;
35521: LD_ADDR_VAR 0 2
35525: PUSH
35526: EMPTY
35527: ST_TO_ADDR
// for i in tmp do
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_VAR 0 6
35537: PUSH
35538: FOR_IN
35539: IFFALSE 35610
// begin t := UnitsInside ( i ) ;
35541: LD_ADDR_VAR 0 4
35545: PUSH
35546: LD_VAR 0 3
35550: PPUSH
35551: CALL_OW 313
35555: ST_TO_ADDR
// if t then
35556: LD_VAR 0 4
35560: IFFALSE 35608
// for j in t do
35562: LD_ADDR_VAR 0 7
35566: PUSH
35567: LD_VAR 0 4
35571: PUSH
35572: FOR_IN
35573: IFFALSE 35606
// result := Replace ( result , result + 1 , j ) ;
35575: LD_ADDR_VAR 0 2
35579: PUSH
35580: LD_VAR 0 2
35584: PPUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_INT 1
35592: PLUS
35593: PPUSH
35594: LD_VAR 0 7
35598: PPUSH
35599: CALL_OW 1
35603: ST_TO_ADDR
35604: GO 35572
35606: POP
35607: POP
// end ;
35608: GO 35538
35610: POP
35611: POP
// if not result then
35612: LD_VAR 0 2
35616: NOT
35617: IFFALSE 35621
// exit ;
35619: GO 35769
// mech := result [ 1 ] ;
35621: LD_ADDR_VAR 0 5
35625: PUSH
35626: LD_VAR 0 2
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: ST_TO_ADDR
// if result > 1 then
35635: LD_VAR 0 2
35639: PUSH
35640: LD_INT 1
35642: GREATER
35643: IFFALSE 35755
// begin for i = 2 to result do
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: DOUBLE
35651: LD_INT 2
35653: DEC
35654: ST_TO_ADDR
35655: LD_VAR 0 2
35659: PUSH
35660: FOR_TO
35661: IFFALSE 35753
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35663: LD_ADDR_VAR 0 4
35667: PUSH
35668: LD_VAR 0 2
35672: PUSH
35673: LD_VAR 0 3
35677: ARRAY
35678: PPUSH
35679: LD_INT 3
35681: PPUSH
35682: CALL_OW 259
35686: PUSH
35687: LD_VAR 0 2
35691: PUSH
35692: LD_VAR 0 3
35696: ARRAY
35697: PPUSH
35698: CALL_OW 432
35702: MINUS
35703: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35704: LD_VAR 0 4
35708: PUSH
35709: LD_VAR 0 5
35713: PPUSH
35714: LD_INT 3
35716: PPUSH
35717: CALL_OW 259
35721: PUSH
35722: LD_VAR 0 5
35726: PPUSH
35727: CALL_OW 432
35731: MINUS
35732: GREATEREQUAL
35733: IFFALSE 35751
// mech := result [ i ] ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 2
35744: PUSH
35745: LD_VAR 0 3
35749: ARRAY
35750: ST_TO_ADDR
// end ;
35751: GO 35660
35753: POP
35754: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35755: LD_VAR 0 1
35759: PPUSH
35760: LD_VAR 0 5
35764: PPUSH
35765: CALL_OW 135
// end ;
35769: LD_VAR 0 2
35773: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35774: LD_INT 0
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
// result := [ ] ;
35789: LD_ADDR_VAR 0 7
35793: PUSH
35794: EMPTY
35795: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 266
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: IN
35816: NOT
35817: IFFALSE 35821
// exit ;
35819: GO 37455
// if name then
35821: LD_VAR 0 3
35825: IFFALSE 35841
// SetBName ( base_dep , name ) ;
35827: LD_VAR 0 1
35831: PPUSH
35832: LD_VAR 0 3
35836: PPUSH
35837: CALL_OW 500
// base := GetBase ( base_dep ) ;
35841: LD_ADDR_VAR 0 15
35845: PUSH
35846: LD_VAR 0 1
35850: PPUSH
35851: CALL_OW 274
35855: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35856: LD_ADDR_VAR 0 16
35860: PUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 255
35870: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35871: LD_ADDR_VAR 0 17
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 248
35885: ST_TO_ADDR
// if sources then
35886: LD_VAR 0 5
35890: IFFALSE 35937
// for i = 1 to 3 do
35892: LD_ADDR_VAR 0 8
35896: PUSH
35897: DOUBLE
35898: LD_INT 1
35900: DEC
35901: ST_TO_ADDR
35902: LD_INT 3
35904: PUSH
35905: FOR_TO
35906: IFFALSE 35935
// AddResourceType ( base , i , sources [ i ] ) ;
35908: LD_VAR 0 15
35912: PPUSH
35913: LD_VAR 0 8
35917: PPUSH
35918: LD_VAR 0 5
35922: PUSH
35923: LD_VAR 0 8
35927: ARRAY
35928: PPUSH
35929: CALL_OW 276
35933: GO 35905
35935: POP
35936: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35937: LD_ADDR_VAR 0 18
35941: PUSH
35942: LD_VAR 0 15
35946: PPUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_INT 1
35954: PPUSH
35955: CALL 35198 0 3
35959: ST_TO_ADDR
// InitHc ;
35960: CALL_OW 19
// InitUc ;
35964: CALL_OW 18
// uc_side := side ;
35968: LD_ADDR_OWVAR 20
35972: PUSH
35973: LD_VAR 0 16
35977: ST_TO_ADDR
// uc_nation := nation ;
35978: LD_ADDR_OWVAR 21
35982: PUSH
35983: LD_VAR 0 17
35987: ST_TO_ADDR
// if buildings then
35988: LD_VAR 0 18
35992: IFFALSE 37314
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35994: LD_ADDR_VAR 0 19
35998: PUSH
35999: LD_VAR 0 18
36003: PPUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 30
36009: PUSH
36010: LD_INT 29
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 30
36019: PUSH
36020: LD_INT 30
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: PPUSH
36032: CALL_OW 72
36036: ST_TO_ADDR
// if tmp then
36037: LD_VAR 0 19
36041: IFFALSE 36089
// for i in tmp do
36043: LD_ADDR_VAR 0 8
36047: PUSH
36048: LD_VAR 0 19
36052: PUSH
36053: FOR_IN
36054: IFFALSE 36087
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36056: LD_VAR 0 8
36060: PPUSH
36061: CALL_OW 250
36065: PPUSH
36066: LD_VAR 0 8
36070: PPUSH
36071: CALL_OW 251
36075: PPUSH
36076: LD_VAR 0 16
36080: PPUSH
36081: CALL_OW 441
36085: GO 36053
36087: POP
36088: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36089: LD_VAR 0 18
36093: PPUSH
36094: LD_INT 2
36096: PUSH
36097: LD_INT 30
36099: PUSH
36100: LD_INT 32
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 30
36109: PUSH
36110: LD_INT 33
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: PPUSH
36122: CALL_OW 72
36126: IFFALSE 36214
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36128: LD_ADDR_VAR 0 8
36132: PUSH
36133: LD_VAR 0 18
36137: PPUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 30
36143: PUSH
36144: LD_INT 32
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 30
36153: PUSH
36154: LD_INT 33
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: PPUSH
36166: CALL_OW 72
36170: PUSH
36171: FOR_IN
36172: IFFALSE 36212
// begin if not GetBWeapon ( i ) then
36174: LD_VAR 0 8
36178: PPUSH
36179: CALL_OW 269
36183: NOT
36184: IFFALSE 36210
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36186: LD_VAR 0 8
36190: PPUSH
36191: LD_VAR 0 8
36195: PPUSH
36196: LD_VAR 0 2
36200: PPUSH
36201: CALL 37460 0 2
36205: PPUSH
36206: CALL_OW 431
// end ;
36210: GO 36171
36212: POP
36213: POP
// end ; for i = 1 to personel do
36214: LD_ADDR_VAR 0 8
36218: PUSH
36219: DOUBLE
36220: LD_INT 1
36222: DEC
36223: ST_TO_ADDR
36224: LD_VAR 0 6
36228: PUSH
36229: FOR_TO
36230: IFFALSE 37294
// begin if i > 4 then
36232: LD_VAR 0 8
36236: PUSH
36237: LD_INT 4
36239: GREATER
36240: IFFALSE 36244
// break ;
36242: GO 37294
// case i of 1 :
36244: LD_VAR 0 8
36248: PUSH
36249: LD_INT 1
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36337
36257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36258: LD_ADDR_VAR 0 12
36262: PUSH
36263: LD_VAR 0 18
36267: PPUSH
36268: LD_INT 22
36270: PUSH
36271: LD_VAR 0 16
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 58
36282: PUSH
36283: EMPTY
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 30
36291: PUSH
36292: LD_INT 32
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 30
36301: PUSH
36302: LD_INT 4
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 30
36311: PUSH
36312: LD_INT 5
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: PPUSH
36330: CALL_OW 72
36334: ST_TO_ADDR
36335: GO 36559
36337: LD_INT 2
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36345
36343: GO 36407
36345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36346: LD_ADDR_VAR 0 12
36350: PUSH
36351: LD_VAR 0 18
36355: PPUSH
36356: LD_INT 22
36358: PUSH
36359: LD_VAR 0 16
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 30
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 30
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PPUSH
36400: CALL_OW 72
36404: ST_TO_ADDR
36405: GO 36559
36407: LD_INT 3
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36477
36415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36416: LD_ADDR_VAR 0 12
36420: PUSH
36421: LD_VAR 0 18
36425: PPUSH
36426: LD_INT 22
36428: PUSH
36429: LD_VAR 0 16
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 30
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 30
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PPUSH
36470: CALL_OW 72
36474: ST_TO_ADDR
36475: GO 36559
36477: LD_INT 4
36479: DOUBLE
36480: EQUAL
36481: IFTRUE 36485
36483: GO 36558
36485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36486: LD_ADDR_VAR 0 12
36490: PUSH
36491: LD_VAR 0 18
36495: PPUSH
36496: LD_INT 22
36498: PUSH
36499: LD_VAR 0 16
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 30
36513: PUSH
36514: LD_INT 6
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 30
36523: PUSH
36524: LD_INT 7
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 30
36533: PUSH
36534: LD_INT 8
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PPUSH
36551: CALL_OW 72
36555: ST_TO_ADDR
36556: GO 36559
36558: POP
// if i = 1 then
36559: LD_VAR 0 8
36563: PUSH
36564: LD_INT 1
36566: EQUAL
36567: IFFALSE 36678
// begin tmp := [ ] ;
36569: LD_ADDR_VAR 0 19
36573: PUSH
36574: EMPTY
36575: ST_TO_ADDR
// for j in f do
36576: LD_ADDR_VAR 0 9
36580: PUSH
36581: LD_VAR 0 12
36585: PUSH
36586: FOR_IN
36587: IFFALSE 36660
// if GetBType ( j ) = b_bunker then
36589: LD_VAR 0 9
36593: PPUSH
36594: CALL_OW 266
36598: PUSH
36599: LD_INT 32
36601: EQUAL
36602: IFFALSE 36629
// tmp := Insert ( tmp , 1 , j ) else
36604: LD_ADDR_VAR 0 19
36608: PUSH
36609: LD_VAR 0 19
36613: PPUSH
36614: LD_INT 1
36616: PPUSH
36617: LD_VAR 0 9
36621: PPUSH
36622: CALL_OW 2
36626: ST_TO_ADDR
36627: GO 36658
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36629: LD_ADDR_VAR 0 19
36633: PUSH
36634: LD_VAR 0 19
36638: PPUSH
36639: LD_VAR 0 19
36643: PUSH
36644: LD_INT 1
36646: PLUS
36647: PPUSH
36648: LD_VAR 0 9
36652: PPUSH
36653: CALL_OW 2
36657: ST_TO_ADDR
36658: GO 36586
36660: POP
36661: POP
// if tmp then
36662: LD_VAR 0 19
36666: IFFALSE 36678
// f := tmp ;
36668: LD_ADDR_VAR 0 12
36672: PUSH
36673: LD_VAR 0 19
36677: ST_TO_ADDR
// end ; x := personel [ i ] ;
36678: LD_ADDR_VAR 0 13
36682: PUSH
36683: LD_VAR 0 6
36687: PUSH
36688: LD_VAR 0 8
36692: ARRAY
36693: ST_TO_ADDR
// if x = - 1 then
36694: LD_VAR 0 13
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: EQUAL
36703: IFFALSE 36912
// begin for j in f do
36705: LD_ADDR_VAR 0 9
36709: PUSH
36710: LD_VAR 0 12
36714: PUSH
36715: FOR_IN
36716: IFFALSE 36908
// repeat InitHc ;
36718: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36722: LD_VAR 0 9
36726: PPUSH
36727: CALL_OW 266
36731: PUSH
36732: LD_INT 5
36734: EQUAL
36735: IFFALSE 36805
// begin if UnitsInside ( j ) < 3 then
36737: LD_VAR 0 9
36741: PPUSH
36742: CALL_OW 313
36746: PUSH
36747: LD_INT 3
36749: LESS
36750: IFFALSE 36786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36752: LD_INT 0
36754: PPUSH
36755: LD_INT 5
36757: PUSH
36758: LD_INT 8
36760: PUSH
36761: LD_INT 9
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: PUSH
36769: LD_VAR 0 17
36773: ARRAY
36774: PPUSH
36775: LD_VAR 0 4
36779: PPUSH
36780: CALL_OW 380
36784: GO 36803
// PrepareHuman ( false , i , skill ) ;
36786: LD_INT 0
36788: PPUSH
36789: LD_VAR 0 8
36793: PPUSH
36794: LD_VAR 0 4
36798: PPUSH
36799: CALL_OW 380
// end else
36803: GO 36822
// PrepareHuman ( false , i , skill ) ;
36805: LD_INT 0
36807: PPUSH
36808: LD_VAR 0 8
36812: PPUSH
36813: LD_VAR 0 4
36817: PPUSH
36818: CALL_OW 380
// un := CreateHuman ;
36822: LD_ADDR_VAR 0 14
36826: PUSH
36827: CALL_OW 44
36831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36832: LD_ADDR_VAR 0 7
36836: PUSH
36837: LD_VAR 0 7
36841: PPUSH
36842: LD_INT 1
36844: PPUSH
36845: LD_VAR 0 14
36849: PPUSH
36850: CALL_OW 2
36854: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36855: LD_VAR 0 14
36859: PPUSH
36860: LD_VAR 0 9
36864: PPUSH
36865: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36869: LD_VAR 0 9
36873: PPUSH
36874: CALL_OW 313
36878: PUSH
36879: LD_INT 6
36881: EQUAL
36882: PUSH
36883: LD_VAR 0 9
36887: PPUSH
36888: CALL_OW 266
36892: PUSH
36893: LD_INT 32
36895: PUSH
36896: LD_INT 31
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: IN
36903: OR
36904: IFFALSE 36718
36906: GO 36715
36908: POP
36909: POP
// end else
36910: GO 37292
// for j = 1 to x do
36912: LD_ADDR_VAR 0 9
36916: PUSH
36917: DOUBLE
36918: LD_INT 1
36920: DEC
36921: ST_TO_ADDR
36922: LD_VAR 0 13
36926: PUSH
36927: FOR_TO
36928: IFFALSE 37290
// begin InitHc ;
36930: CALL_OW 19
// if not f then
36934: LD_VAR 0 12
36938: NOT
36939: IFFALSE 37028
// begin PrepareHuman ( false , i , skill ) ;
36941: LD_INT 0
36943: PPUSH
36944: LD_VAR 0 8
36948: PPUSH
36949: LD_VAR 0 4
36953: PPUSH
36954: CALL_OW 380
// un := CreateHuman ;
36958: LD_ADDR_VAR 0 14
36962: PUSH
36963: CALL_OW 44
36967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36968: LD_ADDR_VAR 0 7
36972: PUSH
36973: LD_VAR 0 7
36977: PPUSH
36978: LD_INT 1
36980: PPUSH
36981: LD_VAR 0 14
36985: PPUSH
36986: CALL_OW 2
36990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36991: LD_VAR 0 14
36995: PPUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 250
37005: PPUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 251
37015: PPUSH
37016: LD_INT 10
37018: PPUSH
37019: LD_INT 0
37021: PPUSH
37022: CALL_OW 50
// continue ;
37026: GO 36927
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37028: LD_VAR 0 12
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: PPUSH
37037: CALL_OW 313
37041: PUSH
37042: LD_VAR 0 12
37046: PUSH
37047: LD_INT 1
37049: ARRAY
37050: PPUSH
37051: CALL_OW 266
37055: PUSH
37056: LD_INT 32
37058: PUSH
37059: LD_INT 31
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: IN
37066: AND
37067: PUSH
37068: LD_VAR 0 12
37072: PUSH
37073: LD_INT 1
37075: ARRAY
37076: PPUSH
37077: CALL_OW 313
37081: PUSH
37082: LD_INT 6
37084: EQUAL
37085: OR
37086: IFFALSE 37106
// f := Delete ( f , 1 ) ;
37088: LD_ADDR_VAR 0 12
37092: PUSH
37093: LD_VAR 0 12
37097: PPUSH
37098: LD_INT 1
37100: PPUSH
37101: CALL_OW 3
37105: ST_TO_ADDR
// if not f then
37106: LD_VAR 0 12
37110: NOT
37111: IFFALSE 37129
// begin x := x + 2 ;
37113: LD_ADDR_VAR 0 13
37117: PUSH
37118: LD_VAR 0 13
37122: PUSH
37123: LD_INT 2
37125: PLUS
37126: ST_TO_ADDR
// continue ;
37127: GO 36927
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37129: LD_VAR 0 12
37133: PUSH
37134: LD_INT 1
37136: ARRAY
37137: PPUSH
37138: CALL_OW 266
37142: PUSH
37143: LD_INT 5
37145: EQUAL
37146: IFFALSE 37220
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37148: LD_VAR 0 12
37152: PUSH
37153: LD_INT 1
37155: ARRAY
37156: PPUSH
37157: CALL_OW 313
37161: PUSH
37162: LD_INT 3
37164: LESS
37165: IFFALSE 37201
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37167: LD_INT 0
37169: PPUSH
37170: LD_INT 5
37172: PUSH
37173: LD_INT 8
37175: PUSH
37176: LD_INT 9
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: PUSH
37184: LD_VAR 0 17
37188: ARRAY
37189: PPUSH
37190: LD_VAR 0 4
37194: PPUSH
37195: CALL_OW 380
37199: GO 37218
// PrepareHuman ( false , i , skill ) ;
37201: LD_INT 0
37203: PPUSH
37204: LD_VAR 0 8
37208: PPUSH
37209: LD_VAR 0 4
37213: PPUSH
37214: CALL_OW 380
// end else
37218: GO 37237
// PrepareHuman ( false , i , skill ) ;
37220: LD_INT 0
37222: PPUSH
37223: LD_VAR 0 8
37227: PPUSH
37228: LD_VAR 0 4
37232: PPUSH
37233: CALL_OW 380
// un := CreateHuman ;
37237: LD_ADDR_VAR 0 14
37241: PUSH
37242: CALL_OW 44
37246: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37247: LD_ADDR_VAR 0 7
37251: PUSH
37252: LD_VAR 0 7
37256: PPUSH
37257: LD_INT 1
37259: PPUSH
37260: LD_VAR 0 14
37264: PPUSH
37265: CALL_OW 2
37269: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37270: LD_VAR 0 14
37274: PPUSH
37275: LD_VAR 0 12
37279: PUSH
37280: LD_INT 1
37282: ARRAY
37283: PPUSH
37284: CALL_OW 52
// end ;
37288: GO 36927
37290: POP
37291: POP
// end ;
37292: GO 36229
37294: POP
37295: POP
// result := result ^ buildings ;
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: LD_VAR 0 7
37305: PUSH
37306: LD_VAR 0 18
37310: ADD
37311: ST_TO_ADDR
// end else
37312: GO 37455
// begin for i = 1 to personel do
37314: LD_ADDR_VAR 0 8
37318: PUSH
37319: DOUBLE
37320: LD_INT 1
37322: DEC
37323: ST_TO_ADDR
37324: LD_VAR 0 6
37328: PUSH
37329: FOR_TO
37330: IFFALSE 37453
// begin if i > 4 then
37332: LD_VAR 0 8
37336: PUSH
37337: LD_INT 4
37339: GREATER
37340: IFFALSE 37344
// break ;
37342: GO 37453
// x := personel [ i ] ;
37344: LD_ADDR_VAR 0 13
37348: PUSH
37349: LD_VAR 0 6
37353: PUSH
37354: LD_VAR 0 8
37358: ARRAY
37359: ST_TO_ADDR
// if x = - 1 then
37360: LD_VAR 0 13
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: EQUAL
37369: IFFALSE 37373
// continue ;
37371: GO 37329
// PrepareHuman ( false , i , skill ) ;
37373: LD_INT 0
37375: PPUSH
37376: LD_VAR 0 8
37380: PPUSH
37381: LD_VAR 0 4
37385: PPUSH
37386: CALL_OW 380
// un := CreateHuman ;
37390: LD_ADDR_VAR 0 14
37394: PUSH
37395: CALL_OW 44
37399: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37400: LD_VAR 0 14
37404: PPUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 250
37414: PPUSH
37415: LD_VAR 0 1
37419: PPUSH
37420: CALL_OW 251
37424: PPUSH
37425: LD_INT 10
37427: PPUSH
37428: LD_INT 0
37430: PPUSH
37431: CALL_OW 50
// result := result ^ un ;
37435: LD_ADDR_VAR 0 7
37439: PUSH
37440: LD_VAR 0 7
37444: PUSH
37445: LD_VAR 0 14
37449: ADD
37450: ST_TO_ADDR
// end ;
37451: GO 37329
37453: POP
37454: POP
// end ; end ;
37455: LD_VAR 0 7
37459: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37460: LD_INT 0
37462: PPUSH
37463: PPUSH
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
// result := false ;
37478: LD_ADDR_VAR 0 3
37482: PUSH
37483: LD_INT 0
37485: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37486: LD_VAR 0 1
37490: NOT
37491: PUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL_OW 266
37501: PUSH
37502: LD_INT 32
37504: PUSH
37505: LD_INT 33
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: IN
37512: NOT
37513: OR
37514: IFFALSE 37518
// exit ;
37516: GO 38627
// nat := GetNation ( tower ) ;
37518: LD_ADDR_VAR 0 12
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 248
37532: ST_TO_ADDR
// side := GetSide ( tower ) ;
37533: LD_ADDR_VAR 0 16
37537: PUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 255
37547: ST_TO_ADDR
// x := GetX ( tower ) ;
37548: LD_ADDR_VAR 0 10
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 250
37562: ST_TO_ADDR
// y := GetY ( tower ) ;
37563: LD_ADDR_VAR 0 11
37567: PUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 251
37577: ST_TO_ADDR
// if not x or not y then
37578: LD_VAR 0 10
37582: NOT
37583: PUSH
37584: LD_VAR 0 11
37588: NOT
37589: OR
37590: IFFALSE 37594
// exit ;
37592: GO 38627
// weapon := 0 ;
37594: LD_ADDR_VAR 0 18
37598: PUSH
37599: LD_INT 0
37601: ST_TO_ADDR
// fac_list := [ ] ;
37602: LD_ADDR_VAR 0 17
37606: PUSH
37607: EMPTY
37608: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37609: LD_ADDR_VAR 0 6
37613: PUSH
37614: LD_VAR 0 1
37618: PPUSH
37619: CALL_OW 274
37623: PPUSH
37624: LD_VAR 0 2
37628: PPUSH
37629: LD_INT 0
37631: PPUSH
37632: CALL 35198 0 3
37636: PPUSH
37637: LD_INT 30
37639: PUSH
37640: LD_INT 3
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PPUSH
37647: CALL_OW 72
37651: ST_TO_ADDR
// if not factories then
37652: LD_VAR 0 6
37656: NOT
37657: IFFALSE 37661
// exit ;
37659: GO 38627
// for i in factories do
37661: LD_ADDR_VAR 0 8
37665: PUSH
37666: LD_VAR 0 6
37670: PUSH
37671: FOR_IN
37672: IFFALSE 37697
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37674: LD_ADDR_VAR 0 17
37678: PUSH
37679: LD_VAR 0 17
37683: PUSH
37684: LD_VAR 0 8
37688: PPUSH
37689: CALL_OW 478
37693: UNION
37694: ST_TO_ADDR
37695: GO 37671
37697: POP
37698: POP
// if not fac_list then
37699: LD_VAR 0 17
37703: NOT
37704: IFFALSE 37708
// exit ;
37706: GO 38627
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37708: LD_ADDR_VAR 0 5
37712: PUSH
37713: LD_INT 4
37715: PUSH
37716: LD_INT 5
37718: PUSH
37719: LD_INT 9
37721: PUSH
37722: LD_INT 10
37724: PUSH
37725: LD_INT 6
37727: PUSH
37728: LD_INT 7
37730: PUSH
37731: LD_INT 11
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 27
37745: PUSH
37746: LD_INT 28
37748: PUSH
37749: LD_INT 26
37751: PUSH
37752: LD_INT 30
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 43
37763: PUSH
37764: LD_INT 44
37766: PUSH
37767: LD_INT 46
37769: PUSH
37770: LD_INT 45
37772: PUSH
37773: LD_INT 47
37775: PUSH
37776: LD_INT 49
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: LD_VAR 0 12
37796: ARRAY
37797: ST_TO_ADDR
// list := list isect fac_list ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_VAR 0 5
37807: PUSH
37808: LD_VAR 0 17
37812: ISECT
37813: ST_TO_ADDR
// if not list then
37814: LD_VAR 0 5
37818: NOT
37819: IFFALSE 37823
// exit ;
37821: GO 38627
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37823: LD_VAR 0 12
37827: PUSH
37828: LD_INT 3
37830: EQUAL
37831: PUSH
37832: LD_INT 49
37834: PUSH
37835: LD_VAR 0 5
37839: IN
37840: AND
37841: PUSH
37842: LD_INT 31
37844: PPUSH
37845: LD_VAR 0 16
37849: PPUSH
37850: CALL_OW 321
37854: PUSH
37855: LD_INT 2
37857: EQUAL
37858: AND
37859: IFFALSE 37919
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37861: LD_INT 22
37863: PUSH
37864: LD_VAR 0 16
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 35
37875: PUSH
37876: LD_INT 49
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 91
37885: PUSH
37886: LD_VAR 0 1
37890: PUSH
37891: LD_INT 10
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: PPUSH
37904: CALL_OW 69
37908: NOT
37909: IFFALSE 37919
// weapon := ru_time_lapser ;
37911: LD_ADDR_VAR 0 18
37915: PUSH
37916: LD_INT 49
37918: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37919: LD_VAR 0 12
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: IN
37934: PUSH
37935: LD_INT 11
37937: PUSH
37938: LD_VAR 0 5
37942: IN
37943: PUSH
37944: LD_INT 30
37946: PUSH
37947: LD_VAR 0 5
37951: IN
37952: OR
37953: AND
37954: PUSH
37955: LD_INT 6
37957: PPUSH
37958: LD_VAR 0 16
37962: PPUSH
37963: CALL_OW 321
37967: PUSH
37968: LD_INT 2
37970: EQUAL
37971: AND
37972: IFFALSE 38137
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37974: LD_INT 22
37976: PUSH
37977: LD_VAR 0 16
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 35
37991: PUSH
37992: LD_INT 11
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 35
38001: PUSH
38002: LD_INT 30
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 91
38016: PUSH
38017: LD_VAR 0 1
38021: PUSH
38022: LD_INT 18
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: LIST
38034: PPUSH
38035: CALL_OW 69
38039: NOT
38040: PUSH
38041: LD_INT 22
38043: PUSH
38044: LD_VAR 0 16
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 30
38058: PUSH
38059: LD_INT 32
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 30
38068: PUSH
38069: LD_INT 33
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 91
38083: PUSH
38084: LD_VAR 0 1
38088: PUSH
38089: LD_INT 12
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: PPUSH
38105: CALL_OW 69
38109: PUSH
38110: LD_INT 2
38112: GREATER
38113: AND
38114: IFFALSE 38137
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38116: LD_ADDR_VAR 0 18
38120: PUSH
38121: LD_INT 11
38123: PUSH
38124: LD_INT 30
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_VAR 0 12
38135: ARRAY
38136: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38137: LD_VAR 0 18
38141: NOT
38142: PUSH
38143: LD_INT 40
38145: PPUSH
38146: LD_VAR 0 16
38150: PPUSH
38151: CALL_OW 321
38155: PUSH
38156: LD_INT 2
38158: EQUAL
38159: AND
38160: PUSH
38161: LD_INT 7
38163: PUSH
38164: LD_VAR 0 5
38168: IN
38169: PUSH
38170: LD_INT 28
38172: PUSH
38173: LD_VAR 0 5
38177: IN
38178: OR
38179: PUSH
38180: LD_INT 45
38182: PUSH
38183: LD_VAR 0 5
38187: IN
38188: OR
38189: AND
38190: IFFALSE 38444
// begin hex := GetHexInfo ( x , y ) ;
38192: LD_ADDR_VAR 0 4
38196: PUSH
38197: LD_VAR 0 10
38201: PPUSH
38202: LD_VAR 0 11
38206: PPUSH
38207: CALL_OW 546
38211: ST_TO_ADDR
// if hex [ 1 ] then
38212: LD_VAR 0 4
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: IFFALSE 38224
// exit ;
38222: GO 38627
// height := hex [ 2 ] ;
38224: LD_ADDR_VAR 0 15
38228: PUSH
38229: LD_VAR 0 4
38233: PUSH
38234: LD_INT 2
38236: ARRAY
38237: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38238: LD_ADDR_VAR 0 14
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: LD_INT 5
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// for i in tmp do
38261: LD_ADDR_VAR 0 8
38265: PUSH
38266: LD_VAR 0 14
38270: PUSH
38271: FOR_IN
38272: IFFALSE 38442
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38274: LD_ADDR_VAR 0 9
38278: PUSH
38279: LD_VAR 0 10
38283: PPUSH
38284: LD_VAR 0 8
38288: PPUSH
38289: LD_INT 5
38291: PPUSH
38292: CALL_OW 272
38296: PUSH
38297: LD_VAR 0 11
38301: PPUSH
38302: LD_VAR 0 8
38306: PPUSH
38307: LD_INT 5
38309: PPUSH
38310: CALL_OW 273
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38319: LD_VAR 0 9
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PPUSH
38328: LD_VAR 0 9
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: CALL_OW 488
38341: IFFALSE 38440
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38343: LD_ADDR_VAR 0 4
38347: PUSH
38348: LD_VAR 0 9
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 9
38361: PUSH
38362: LD_INT 2
38364: ARRAY
38365: PPUSH
38366: CALL_OW 546
38370: ST_TO_ADDR
// if hex [ 1 ] then
38371: LD_VAR 0 4
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: IFFALSE 38383
// continue ;
38381: GO 38271
// h := hex [ 2 ] ;
38383: LD_ADDR_VAR 0 13
38387: PUSH
38388: LD_VAR 0 4
38392: PUSH
38393: LD_INT 2
38395: ARRAY
38396: ST_TO_ADDR
// if h + 7 < height then
38397: LD_VAR 0 13
38401: PUSH
38402: LD_INT 7
38404: PLUS
38405: PUSH
38406: LD_VAR 0 15
38410: LESS
38411: IFFALSE 38440
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38413: LD_ADDR_VAR 0 18
38417: PUSH
38418: LD_INT 7
38420: PUSH
38421: LD_INT 28
38423: PUSH
38424: LD_INT 45
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PUSH
38432: LD_VAR 0 12
38436: ARRAY
38437: ST_TO_ADDR
// break ;
38438: GO 38442
// end ; end ; end ;
38440: GO 38271
38442: POP
38443: POP
// end ; if not weapon then
38444: LD_VAR 0 18
38448: NOT
38449: IFFALSE 38509
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38451: LD_ADDR_VAR 0 5
38455: PUSH
38456: LD_VAR 0 5
38460: PUSH
38461: LD_INT 11
38463: PUSH
38464: LD_INT 30
38466: PUSH
38467: LD_INT 49
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: DIFF
38475: ST_TO_ADDR
// if not list then
38476: LD_VAR 0 5
38480: NOT
38481: IFFALSE 38485
// exit ;
38483: GO 38627
// weapon := list [ rand ( 1 , list ) ] ;
38485: LD_ADDR_VAR 0 18
38489: PUSH
38490: LD_VAR 0 5
38494: PUSH
38495: LD_INT 1
38497: PPUSH
38498: LD_VAR 0 5
38502: PPUSH
38503: CALL_OW 12
38507: ARRAY
38508: ST_TO_ADDR
// end ; if weapon then
38509: LD_VAR 0 18
38513: IFFALSE 38627
// begin tmp := CostOfWeapon ( weapon ) ;
38515: LD_ADDR_VAR 0 14
38519: PUSH
38520: LD_VAR 0 18
38524: PPUSH
38525: CALL_OW 451
38529: ST_TO_ADDR
// j := GetBase ( tower ) ;
38530: LD_ADDR_VAR 0 9
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 274
38544: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38545: LD_VAR 0 9
38549: PPUSH
38550: LD_INT 1
38552: PPUSH
38553: CALL_OW 275
38557: PUSH
38558: LD_VAR 0 14
38562: PUSH
38563: LD_INT 1
38565: ARRAY
38566: GREATEREQUAL
38567: PUSH
38568: LD_VAR 0 9
38572: PPUSH
38573: LD_INT 2
38575: PPUSH
38576: CALL_OW 275
38580: PUSH
38581: LD_VAR 0 14
38585: PUSH
38586: LD_INT 2
38588: ARRAY
38589: GREATEREQUAL
38590: AND
38591: PUSH
38592: LD_VAR 0 9
38596: PPUSH
38597: LD_INT 3
38599: PPUSH
38600: CALL_OW 275
38604: PUSH
38605: LD_VAR 0 14
38609: PUSH
38610: LD_INT 3
38612: ARRAY
38613: GREATEREQUAL
38614: AND
38615: IFFALSE 38627
// result := weapon ;
38617: LD_ADDR_VAR 0 3
38621: PUSH
38622: LD_VAR 0 18
38626: ST_TO_ADDR
// end ; end ;
38627: LD_VAR 0 3
38631: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38632: LD_INT 0
38634: PPUSH
38635: PPUSH
// result := true ;
38636: LD_ADDR_VAR 0 3
38640: PUSH
38641: LD_INT 1
38643: ST_TO_ADDR
// if array1 = array2 then
38644: LD_VAR 0 1
38648: PUSH
38649: LD_VAR 0 2
38653: EQUAL
38654: IFFALSE 38714
// begin for i = 1 to array1 do
38656: LD_ADDR_VAR 0 4
38660: PUSH
38661: DOUBLE
38662: LD_INT 1
38664: DEC
38665: ST_TO_ADDR
38666: LD_VAR 0 1
38670: PUSH
38671: FOR_TO
38672: IFFALSE 38710
// if array1 [ i ] <> array2 [ i ] then
38674: LD_VAR 0 1
38678: PUSH
38679: LD_VAR 0 4
38683: ARRAY
38684: PUSH
38685: LD_VAR 0 2
38689: PUSH
38690: LD_VAR 0 4
38694: ARRAY
38695: NONEQUAL
38696: IFFALSE 38708
// begin result := false ;
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_INT 0
38705: ST_TO_ADDR
// break ;
38706: GO 38710
// end ;
38708: GO 38671
38710: POP
38711: POP
// end else
38712: GO 38722
// result := false ;
38714: LD_ADDR_VAR 0 3
38718: PUSH
38719: LD_INT 0
38721: ST_TO_ADDR
// end ;
38722: LD_VAR 0 3
38726: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38727: LD_INT 0
38729: PPUSH
38730: PPUSH
// if not array1 or not array2 then
38731: LD_VAR 0 1
38735: NOT
38736: PUSH
38737: LD_VAR 0 2
38741: NOT
38742: OR
38743: IFFALSE 38747
// exit ;
38745: GO 38811
// result := true ;
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_INT 1
38754: ST_TO_ADDR
// for i = 1 to array1 do
38755: LD_ADDR_VAR 0 4
38759: PUSH
38760: DOUBLE
38761: LD_INT 1
38763: DEC
38764: ST_TO_ADDR
38765: LD_VAR 0 1
38769: PUSH
38770: FOR_TO
38771: IFFALSE 38809
// if array1 [ i ] <> array2 [ i ] then
38773: LD_VAR 0 1
38777: PUSH
38778: LD_VAR 0 4
38782: ARRAY
38783: PUSH
38784: LD_VAR 0 2
38788: PUSH
38789: LD_VAR 0 4
38793: ARRAY
38794: NONEQUAL
38795: IFFALSE 38807
// begin result := false ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 0
38804: ST_TO_ADDR
// break ;
38805: GO 38809
// end ;
38807: GO 38770
38809: POP
38810: POP
// end ;
38811: LD_VAR 0 3
38815: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38816: LD_INT 0
38818: PPUSH
38819: PPUSH
38820: PPUSH
// pom := GetBase ( fac ) ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 274
38835: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38836: LD_ADDR_VAR 0 4
38840: PUSH
38841: LD_VAR 0 2
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: PPUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 2
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_INT 3
38866: ARRAY
38867: PPUSH
38868: LD_VAR 0 2
38872: PUSH
38873: LD_INT 4
38875: ARRAY
38876: PPUSH
38877: CALL_OW 449
38881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38882: LD_ADDR_VAR 0 3
38886: PUSH
38887: LD_VAR 0 5
38891: PPUSH
38892: LD_INT 1
38894: PPUSH
38895: CALL_OW 275
38899: PUSH
38900: LD_VAR 0 4
38904: PUSH
38905: LD_INT 1
38907: ARRAY
38908: GREATEREQUAL
38909: PUSH
38910: LD_VAR 0 5
38914: PPUSH
38915: LD_INT 2
38917: PPUSH
38918: CALL_OW 275
38922: PUSH
38923: LD_VAR 0 4
38927: PUSH
38928: LD_INT 2
38930: ARRAY
38931: GREATEREQUAL
38932: AND
38933: PUSH
38934: LD_VAR 0 5
38938: PPUSH
38939: LD_INT 3
38941: PPUSH
38942: CALL_OW 275
38946: PUSH
38947: LD_VAR 0 4
38951: PUSH
38952: LD_INT 3
38954: ARRAY
38955: GREATEREQUAL
38956: AND
38957: ST_TO_ADDR
// end ;
38958: LD_VAR 0 3
38962: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
// pom := GetBase ( building ) ;
38969: LD_ADDR_VAR 0 3
38973: PUSH
38974: LD_VAR 0 1
38978: PPUSH
38979: CALL_OW 274
38983: ST_TO_ADDR
// if not pom then
38984: LD_VAR 0 3
38988: NOT
38989: IFFALSE 38993
// exit ;
38991: GO 39163
// btype := GetBType ( building ) ;
38993: LD_ADDR_VAR 0 5
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 266
39007: ST_TO_ADDR
// if btype = b_armoury then
39008: LD_VAR 0 5
39012: PUSH
39013: LD_INT 4
39015: EQUAL
39016: IFFALSE 39026
// btype := b_barracks ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: LD_INT 5
39025: ST_TO_ADDR
// if btype = b_depot then
39026: LD_VAR 0 5
39030: PUSH
39031: LD_INT 0
39033: EQUAL
39034: IFFALSE 39044
// btype := b_warehouse ;
39036: LD_ADDR_VAR 0 5
39040: PUSH
39041: LD_INT 1
39043: ST_TO_ADDR
// if btype = b_workshop then
39044: LD_VAR 0 5
39048: PUSH
39049: LD_INT 2
39051: EQUAL
39052: IFFALSE 39062
// btype := b_factory ;
39054: LD_ADDR_VAR 0 5
39058: PUSH
39059: LD_INT 3
39061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39062: LD_ADDR_VAR 0 4
39066: PUSH
39067: LD_VAR 0 5
39071: PPUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 248
39081: PPUSH
39082: CALL_OW 450
39086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39087: LD_ADDR_VAR 0 2
39091: PUSH
39092: LD_VAR 0 3
39096: PPUSH
39097: LD_INT 1
39099: PPUSH
39100: CALL_OW 275
39104: PUSH
39105: LD_VAR 0 4
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: GREATEREQUAL
39114: PUSH
39115: LD_VAR 0 3
39119: PPUSH
39120: LD_INT 2
39122: PPUSH
39123: CALL_OW 275
39127: PUSH
39128: LD_VAR 0 4
39132: PUSH
39133: LD_INT 2
39135: ARRAY
39136: GREATEREQUAL
39137: AND
39138: PUSH
39139: LD_VAR 0 3
39143: PPUSH
39144: LD_INT 3
39146: PPUSH
39147: CALL_OW 275
39151: PUSH
39152: LD_VAR 0 4
39156: PUSH
39157: LD_INT 3
39159: ARRAY
39160: GREATEREQUAL
39161: AND
39162: ST_TO_ADDR
// end ;
39163: LD_VAR 0 2
39167: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39168: LD_INT 0
39170: PPUSH
39171: PPUSH
39172: PPUSH
// pom := GetBase ( building ) ;
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: LD_VAR 0 1
39182: PPUSH
39183: CALL_OW 274
39187: ST_TO_ADDR
// if not pom then
39188: LD_VAR 0 4
39192: NOT
39193: IFFALSE 39197
// exit ;
39195: GO 39298
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39197: LD_ADDR_VAR 0 5
39201: PUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: LD_VAR 0 1
39211: PPUSH
39212: CALL_OW 248
39216: PPUSH
39217: CALL_OW 450
39221: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39222: LD_ADDR_VAR 0 3
39226: PUSH
39227: LD_VAR 0 4
39231: PPUSH
39232: LD_INT 1
39234: PPUSH
39235: CALL_OW 275
39239: PUSH
39240: LD_VAR 0 5
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: GREATEREQUAL
39249: PUSH
39250: LD_VAR 0 4
39254: PPUSH
39255: LD_INT 2
39257: PPUSH
39258: CALL_OW 275
39262: PUSH
39263: LD_VAR 0 5
39267: PUSH
39268: LD_INT 2
39270: ARRAY
39271: GREATEREQUAL
39272: AND
39273: PUSH
39274: LD_VAR 0 4
39278: PPUSH
39279: LD_INT 3
39281: PPUSH
39282: CALL_OW 275
39286: PUSH
39287: LD_VAR 0 5
39291: PUSH
39292: LD_INT 3
39294: ARRAY
39295: GREATEREQUAL
39296: AND
39297: ST_TO_ADDR
// end ;
39298: LD_VAR 0 3
39302: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
// result := false ;
39316: LD_ADDR_VAR 0 8
39320: PUSH
39321: LD_INT 0
39323: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39324: LD_VAR 0 5
39328: NOT
39329: PUSH
39330: LD_VAR 0 1
39334: NOT
39335: OR
39336: PUSH
39337: LD_VAR 0 2
39341: NOT
39342: OR
39343: PUSH
39344: LD_VAR 0 3
39348: NOT
39349: OR
39350: IFFALSE 39354
// exit ;
39352: GO 40168
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39354: LD_ADDR_VAR 0 14
39358: PUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: LD_VAR 0 2
39368: PPUSH
39369: LD_VAR 0 3
39373: PPUSH
39374: LD_VAR 0 4
39378: PPUSH
39379: LD_VAR 0 5
39383: PUSH
39384: LD_INT 1
39386: ARRAY
39387: PPUSH
39388: CALL_OW 248
39392: PPUSH
39393: LD_INT 0
39395: PPUSH
39396: CALL 41421 0 6
39400: ST_TO_ADDR
// if not hexes then
39401: LD_VAR 0 14
39405: NOT
39406: IFFALSE 39410
// exit ;
39408: GO 40168
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39410: LD_ADDR_VAR 0 17
39414: PUSH
39415: LD_VAR 0 5
39419: PPUSH
39420: LD_INT 22
39422: PUSH
39423: LD_VAR 0 13
39427: PPUSH
39428: CALL_OW 255
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 30
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PPUSH
39469: CALL_OW 72
39473: ST_TO_ADDR
// for i = 1 to hexes do
39474: LD_ADDR_VAR 0 9
39478: PUSH
39479: DOUBLE
39480: LD_INT 1
39482: DEC
39483: ST_TO_ADDR
39484: LD_VAR 0 14
39488: PUSH
39489: FOR_TO
39490: IFFALSE 40166
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39492: LD_ADDR_VAR 0 13
39496: PUSH
39497: LD_VAR 0 14
39501: PUSH
39502: LD_VAR 0 9
39506: ARRAY
39507: PUSH
39508: LD_INT 1
39510: ARRAY
39511: PPUSH
39512: LD_VAR 0 14
39516: PUSH
39517: LD_VAR 0 9
39521: ARRAY
39522: PUSH
39523: LD_INT 2
39525: ARRAY
39526: PPUSH
39527: CALL_OW 428
39531: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39532: LD_VAR 0 14
39536: PUSH
39537: LD_VAR 0 9
39541: ARRAY
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: PPUSH
39547: LD_VAR 0 14
39551: PUSH
39552: LD_VAR 0 9
39556: ARRAY
39557: PUSH
39558: LD_INT 2
39560: ARRAY
39561: PPUSH
39562: CALL_OW 351
39566: PUSH
39567: LD_VAR 0 14
39571: PUSH
39572: LD_VAR 0 9
39576: ARRAY
39577: PUSH
39578: LD_INT 1
39580: ARRAY
39581: PPUSH
39582: LD_VAR 0 14
39586: PUSH
39587: LD_VAR 0 9
39591: ARRAY
39592: PUSH
39593: LD_INT 2
39595: ARRAY
39596: PPUSH
39597: CALL_OW 488
39601: NOT
39602: OR
39603: PUSH
39604: LD_VAR 0 13
39608: PPUSH
39609: CALL_OW 247
39613: PUSH
39614: LD_INT 3
39616: EQUAL
39617: OR
39618: IFFALSE 39624
// exit ;
39620: POP
39621: POP
39622: GO 40168
// if not tmp then
39624: LD_VAR 0 13
39628: NOT
39629: IFFALSE 39633
// continue ;
39631: GO 39489
// result := true ;
39633: LD_ADDR_VAR 0 8
39637: PUSH
39638: LD_INT 1
39640: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39641: LD_VAR 0 6
39645: PUSH
39646: LD_VAR 0 13
39650: PPUSH
39651: CALL_OW 247
39655: PUSH
39656: LD_INT 2
39658: EQUAL
39659: AND
39660: PUSH
39661: LD_VAR 0 13
39665: PPUSH
39666: CALL_OW 263
39670: PUSH
39671: LD_INT 1
39673: EQUAL
39674: AND
39675: IFFALSE 39839
// begin if IsDrivenBy ( tmp ) then
39677: LD_VAR 0 13
39681: PPUSH
39682: CALL_OW 311
39686: IFFALSE 39690
// continue ;
39688: GO 39489
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39690: LD_VAR 0 6
39694: PPUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 60
39700: PUSH
39701: EMPTY
39702: LIST
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: LD_INT 55
39713: PUSH
39714: EMPTY
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PPUSH
39725: CALL_OW 72
39729: IFFALSE 39837
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39731: LD_ADDR_VAR 0 18
39735: PUSH
39736: LD_VAR 0 6
39740: PPUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 60
39746: PUSH
39747: EMPTY
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: LD_INT 55
39759: PUSH
39760: EMPTY
39761: LIST
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PPUSH
39771: CALL_OW 72
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: ST_TO_ADDR
// if IsInUnit ( driver ) then
39780: LD_VAR 0 18
39784: PPUSH
39785: CALL_OW 310
39789: IFFALSE 39800
// ComExit ( driver ) ;
39791: LD_VAR 0 18
39795: PPUSH
39796: CALL 65222 0 1
// AddComEnterUnit ( driver , tmp ) ;
39800: LD_VAR 0 18
39804: PPUSH
39805: LD_VAR 0 13
39809: PPUSH
39810: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39814: LD_VAR 0 18
39818: PPUSH
39819: LD_VAR 0 7
39823: PPUSH
39824: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39828: LD_VAR 0 18
39832: PPUSH
39833: CALL_OW 181
// end ; continue ;
39837: GO 39489
// end ; if not cleaners or not tmp in cleaners then
39839: LD_VAR 0 6
39843: NOT
39844: PUSH
39845: LD_VAR 0 13
39849: PUSH
39850: LD_VAR 0 6
39854: IN
39855: NOT
39856: OR
39857: IFFALSE 40164
// begin if dep then
39859: LD_VAR 0 17
39863: IFFALSE 39999
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39865: LD_ADDR_VAR 0 16
39869: PUSH
39870: LD_VAR 0 17
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: PPUSH
39879: CALL_OW 250
39883: PPUSH
39884: LD_VAR 0 17
39888: PUSH
39889: LD_INT 1
39891: ARRAY
39892: PPUSH
39893: CALL_OW 254
39897: PPUSH
39898: LD_INT 5
39900: PPUSH
39901: CALL_OW 272
39905: PUSH
39906: LD_VAR 0 17
39910: PUSH
39911: LD_INT 1
39913: ARRAY
39914: PPUSH
39915: CALL_OW 251
39919: PPUSH
39920: LD_VAR 0 17
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: CALL_OW 254
39933: PPUSH
39934: LD_INT 5
39936: PPUSH
39937: CALL_OW 273
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39946: LD_VAR 0 16
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PPUSH
39955: LD_VAR 0 16
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: PPUSH
39964: CALL_OW 488
39968: IFFALSE 39999
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39970: LD_VAR 0 13
39974: PPUSH
39975: LD_VAR 0 16
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: LD_VAR 0 16
39988: PUSH
39989: LD_INT 2
39991: ARRAY
39992: PPUSH
39993: CALL_OW 111
// continue ;
39997: GO 39489
// end ; end ; r := GetDir ( tmp ) ;
39999: LD_ADDR_VAR 0 15
40003: PUSH
40004: LD_VAR 0 13
40008: PPUSH
40009: CALL_OW 254
40013: ST_TO_ADDR
// if r = 5 then
40014: LD_VAR 0 15
40018: PUSH
40019: LD_INT 5
40021: EQUAL
40022: IFFALSE 40032
// r := 0 ;
40024: LD_ADDR_VAR 0 15
40028: PUSH
40029: LD_INT 0
40031: ST_TO_ADDR
// for j = r to 5 do
40032: LD_ADDR_VAR 0 10
40036: PUSH
40037: DOUBLE
40038: LD_VAR 0 15
40042: DEC
40043: ST_TO_ADDR
40044: LD_INT 5
40046: PUSH
40047: FOR_TO
40048: IFFALSE 40162
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40050: LD_ADDR_VAR 0 11
40054: PUSH
40055: LD_VAR 0 13
40059: PPUSH
40060: CALL_OW 250
40064: PPUSH
40065: LD_VAR 0 10
40069: PPUSH
40070: LD_INT 2
40072: PPUSH
40073: CALL_OW 272
40077: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40078: LD_ADDR_VAR 0 12
40082: PUSH
40083: LD_VAR 0 13
40087: PPUSH
40088: CALL_OW 251
40092: PPUSH
40093: LD_VAR 0 10
40097: PPUSH
40098: LD_INT 2
40100: PPUSH
40101: CALL_OW 273
40105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40106: LD_VAR 0 11
40110: PPUSH
40111: LD_VAR 0 12
40115: PPUSH
40116: CALL_OW 488
40120: PUSH
40121: LD_VAR 0 11
40125: PPUSH
40126: LD_VAR 0 12
40130: PPUSH
40131: CALL_OW 428
40135: NOT
40136: AND
40137: IFFALSE 40160
// begin ComMoveXY ( tmp , _x , _y ) ;
40139: LD_VAR 0 13
40143: PPUSH
40144: LD_VAR 0 11
40148: PPUSH
40149: LD_VAR 0 12
40153: PPUSH
40154: CALL_OW 111
// break ;
40158: GO 40162
// end ; end ;
40160: GO 40047
40162: POP
40163: POP
// end ; end ;
40164: GO 39489
40166: POP
40167: POP
// end ;
40168: LD_VAR 0 8
40172: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40173: LD_INT 0
40175: PPUSH
// result := true ;
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 1
40183: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40184: LD_VAR 0 2
40188: PUSH
40189: LD_INT 24
40191: DOUBLE
40192: EQUAL
40193: IFTRUE 40203
40195: LD_INT 33
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40203
40201: GO 40228
40203: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40204: LD_ADDR_VAR 0 3
40208: PUSH
40209: LD_INT 32
40211: PPUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 321
40221: PUSH
40222: LD_INT 2
40224: EQUAL
40225: ST_TO_ADDR
40226: GO 40544
40228: LD_INT 20
40230: DOUBLE
40231: EQUAL
40232: IFTRUE 40236
40234: GO 40261
40236: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40237: LD_ADDR_VAR 0 3
40241: PUSH
40242: LD_INT 6
40244: PPUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: CALL_OW 321
40254: PUSH
40255: LD_INT 2
40257: EQUAL
40258: ST_TO_ADDR
40259: GO 40544
40261: LD_INT 22
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40275
40267: LD_INT 36
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40300
40275: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 15
40283: PPUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 321
40293: PUSH
40294: LD_INT 2
40296: EQUAL
40297: ST_TO_ADDR
40298: GO 40544
40300: LD_INT 30
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40333
40308: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 20
40316: PPUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 321
40326: PUSH
40327: LD_INT 2
40329: EQUAL
40330: ST_TO_ADDR
40331: GO 40544
40333: LD_INT 28
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40347
40339: LD_INT 21
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40347
40345: GO 40372
40347: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_INT 21
40355: PPUSH
40356: LD_VAR 0 1
40360: PPUSH
40361: CALL_OW 321
40365: PUSH
40366: LD_INT 2
40368: EQUAL
40369: ST_TO_ADDR
40370: GO 40544
40372: LD_INT 16
40374: DOUBLE
40375: EQUAL
40376: IFTRUE 40380
40378: GO 40405
40380: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40381: LD_ADDR_VAR 0 3
40385: PUSH
40386: LD_INT 84
40388: PPUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: CALL_OW 321
40398: PUSH
40399: LD_INT 2
40401: EQUAL
40402: ST_TO_ADDR
40403: GO 40544
40405: LD_INT 19
40407: DOUBLE
40408: EQUAL
40409: IFTRUE 40419
40411: LD_INT 23
40413: DOUBLE
40414: EQUAL
40415: IFTRUE 40419
40417: GO 40444
40419: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40420: LD_ADDR_VAR 0 3
40424: PUSH
40425: LD_INT 83
40427: PPUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: CALL_OW 321
40437: PUSH
40438: LD_INT 2
40440: EQUAL
40441: ST_TO_ADDR
40442: GO 40544
40444: LD_INT 17
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40477
40452: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_INT 39
40460: PPUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 321
40470: PUSH
40471: LD_INT 2
40473: EQUAL
40474: ST_TO_ADDR
40475: GO 40544
40477: LD_INT 18
40479: DOUBLE
40480: EQUAL
40481: IFTRUE 40485
40483: GO 40510
40485: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40486: LD_ADDR_VAR 0 3
40490: PUSH
40491: LD_INT 40
40493: PPUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 321
40503: PUSH
40504: LD_INT 2
40506: EQUAL
40507: ST_TO_ADDR
40508: GO 40544
40510: LD_INT 27
40512: DOUBLE
40513: EQUAL
40514: IFTRUE 40518
40516: GO 40543
40518: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_INT 35
40526: PPUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 321
40536: PUSH
40537: LD_INT 2
40539: EQUAL
40540: ST_TO_ADDR
40541: GO 40544
40543: POP
// end ;
40544: LD_VAR 0 3
40548: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40549: LD_INT 0
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
// result := false ;
40562: LD_ADDR_VAR 0 6
40566: PUSH
40567: LD_INT 0
40569: ST_TO_ADDR
// if btype = b_depot then
40570: LD_VAR 0 2
40574: PUSH
40575: LD_INT 0
40577: EQUAL
40578: IFFALSE 40590
// begin result := true ;
40580: LD_ADDR_VAR 0 6
40584: PUSH
40585: LD_INT 1
40587: ST_TO_ADDR
// exit ;
40588: GO 41416
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40590: LD_VAR 0 1
40594: NOT
40595: PUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 266
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: IN
40616: NOT
40617: OR
40618: PUSH
40619: LD_VAR 0 2
40623: NOT
40624: OR
40625: PUSH
40626: LD_VAR 0 5
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: LD_INT 5
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: IN
40657: NOT
40658: OR
40659: PUSH
40660: LD_VAR 0 3
40664: PPUSH
40665: LD_VAR 0 4
40669: PPUSH
40670: CALL_OW 488
40674: NOT
40675: OR
40676: IFFALSE 40680
// exit ;
40678: GO 41416
// side := GetSide ( depot ) ;
40680: LD_ADDR_VAR 0 9
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 255
40694: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40695: LD_VAR 0 9
40699: PPUSH
40700: LD_VAR 0 2
40704: PPUSH
40705: CALL 40173 0 2
40709: NOT
40710: IFFALSE 40714
// exit ;
40712: GO 41416
// pom := GetBase ( depot ) ;
40714: LD_ADDR_VAR 0 10
40718: PUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 274
40728: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40729: LD_ADDR_VAR 0 11
40733: PUSH
40734: LD_VAR 0 2
40738: PPUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 248
40748: PPUSH
40749: CALL_OW 450
40753: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40754: LD_VAR 0 10
40758: PPUSH
40759: LD_INT 1
40761: PPUSH
40762: CALL_OW 275
40766: PUSH
40767: LD_VAR 0 11
40771: PUSH
40772: LD_INT 1
40774: ARRAY
40775: GREATEREQUAL
40776: PUSH
40777: LD_VAR 0 10
40781: PPUSH
40782: LD_INT 2
40784: PPUSH
40785: CALL_OW 275
40789: PUSH
40790: LD_VAR 0 11
40794: PUSH
40795: LD_INT 2
40797: ARRAY
40798: GREATEREQUAL
40799: AND
40800: PUSH
40801: LD_VAR 0 10
40805: PPUSH
40806: LD_INT 3
40808: PPUSH
40809: CALL_OW 275
40813: PUSH
40814: LD_VAR 0 11
40818: PUSH
40819: LD_INT 3
40821: ARRAY
40822: GREATEREQUAL
40823: AND
40824: NOT
40825: IFFALSE 40829
// exit ;
40827: GO 41416
// if GetBType ( depot ) = b_depot then
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 266
40838: PUSH
40839: LD_INT 0
40841: EQUAL
40842: IFFALSE 40854
// dist := 28 else
40844: LD_ADDR_VAR 0 14
40848: PUSH
40849: LD_INT 28
40851: ST_TO_ADDR
40852: GO 40862
// dist := 36 ;
40854: LD_ADDR_VAR 0 14
40858: PUSH
40859: LD_INT 36
40861: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40862: LD_VAR 0 1
40866: PPUSH
40867: LD_VAR 0 3
40871: PPUSH
40872: LD_VAR 0 4
40876: PPUSH
40877: CALL_OW 297
40881: PUSH
40882: LD_VAR 0 14
40886: GREATER
40887: IFFALSE 40891
// exit ;
40889: GO 41416
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40891: LD_ADDR_VAR 0 12
40895: PUSH
40896: LD_VAR 0 2
40900: PPUSH
40901: LD_VAR 0 3
40905: PPUSH
40906: LD_VAR 0 4
40910: PPUSH
40911: LD_VAR 0 5
40915: PPUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 248
40925: PPUSH
40926: LD_INT 0
40928: PPUSH
40929: CALL 41421 0 6
40933: ST_TO_ADDR
// if not hexes then
40934: LD_VAR 0 12
40938: NOT
40939: IFFALSE 40943
// exit ;
40941: GO 41416
// hex := GetHexInfo ( x , y ) ;
40943: LD_ADDR_VAR 0 15
40947: PUSH
40948: LD_VAR 0 3
40952: PPUSH
40953: LD_VAR 0 4
40957: PPUSH
40958: CALL_OW 546
40962: ST_TO_ADDR
// if hex [ 1 ] then
40963: LD_VAR 0 15
40967: PUSH
40968: LD_INT 1
40970: ARRAY
40971: IFFALSE 40975
// exit ;
40973: GO 41416
// height := hex [ 2 ] ;
40975: LD_ADDR_VAR 0 13
40979: PUSH
40980: LD_VAR 0 15
40984: PUSH
40985: LD_INT 2
40987: ARRAY
40988: ST_TO_ADDR
// for i = 1 to hexes do
40989: LD_ADDR_VAR 0 7
40993: PUSH
40994: DOUBLE
40995: LD_INT 1
40997: DEC
40998: ST_TO_ADDR
40999: LD_VAR 0 12
41003: PUSH
41004: FOR_TO
41005: IFFALSE 41335
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41007: LD_VAR 0 12
41011: PUSH
41012: LD_VAR 0 7
41016: ARRAY
41017: PUSH
41018: LD_INT 1
41020: ARRAY
41021: PPUSH
41022: LD_VAR 0 12
41026: PUSH
41027: LD_VAR 0 7
41031: ARRAY
41032: PUSH
41033: LD_INT 2
41035: ARRAY
41036: PPUSH
41037: CALL_OW 488
41041: NOT
41042: PUSH
41043: LD_VAR 0 12
41047: PUSH
41048: LD_VAR 0 7
41052: ARRAY
41053: PUSH
41054: LD_INT 1
41056: ARRAY
41057: PPUSH
41058: LD_VAR 0 12
41062: PUSH
41063: LD_VAR 0 7
41067: ARRAY
41068: PUSH
41069: LD_INT 2
41071: ARRAY
41072: PPUSH
41073: CALL_OW 428
41077: PUSH
41078: LD_INT 0
41080: GREATER
41081: OR
41082: PUSH
41083: LD_VAR 0 12
41087: PUSH
41088: LD_VAR 0 7
41092: ARRAY
41093: PUSH
41094: LD_INT 1
41096: ARRAY
41097: PPUSH
41098: LD_VAR 0 12
41102: PUSH
41103: LD_VAR 0 7
41107: ARRAY
41108: PUSH
41109: LD_INT 2
41111: ARRAY
41112: PPUSH
41113: CALL_OW 351
41117: OR
41118: IFFALSE 41124
// exit ;
41120: POP
41121: POP
41122: GO 41416
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41124: LD_ADDR_VAR 0 8
41128: PUSH
41129: LD_VAR 0 12
41133: PUSH
41134: LD_VAR 0 7
41138: ARRAY
41139: PUSH
41140: LD_INT 1
41142: ARRAY
41143: PPUSH
41144: LD_VAR 0 12
41148: PUSH
41149: LD_VAR 0 7
41153: ARRAY
41154: PUSH
41155: LD_INT 2
41157: ARRAY
41158: PPUSH
41159: CALL_OW 546
41163: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41164: LD_VAR 0 8
41168: PUSH
41169: LD_INT 1
41171: ARRAY
41172: PUSH
41173: LD_VAR 0 8
41177: PUSH
41178: LD_INT 2
41180: ARRAY
41181: PUSH
41182: LD_VAR 0 13
41186: PUSH
41187: LD_INT 2
41189: PLUS
41190: GREATER
41191: OR
41192: PUSH
41193: LD_VAR 0 8
41197: PUSH
41198: LD_INT 2
41200: ARRAY
41201: PUSH
41202: LD_VAR 0 13
41206: PUSH
41207: LD_INT 2
41209: MINUS
41210: LESS
41211: OR
41212: PUSH
41213: LD_VAR 0 8
41217: PUSH
41218: LD_INT 3
41220: ARRAY
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 8
41227: PUSH
41228: LD_INT 9
41230: PUSH
41231: LD_INT 10
41233: PUSH
41234: LD_INT 11
41236: PUSH
41237: LD_INT 12
41239: PUSH
41240: LD_INT 13
41242: PUSH
41243: LD_INT 16
41245: PUSH
41246: LD_INT 17
41248: PUSH
41249: LD_INT 18
41251: PUSH
41252: LD_INT 19
41254: PUSH
41255: LD_INT 20
41257: PUSH
41258: LD_INT 21
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: IN
41276: NOT
41277: OR
41278: PUSH
41279: LD_VAR 0 8
41283: PUSH
41284: LD_INT 5
41286: ARRAY
41287: NOT
41288: OR
41289: PUSH
41290: LD_VAR 0 8
41294: PUSH
41295: LD_INT 6
41297: ARRAY
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 7
41307: PUSH
41308: LD_INT 9
41310: PUSH
41311: LD_INT 10
41313: PUSH
41314: LD_INT 11
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: IN
41325: NOT
41326: OR
41327: IFFALSE 41333
// exit ;
41329: POP
41330: POP
41331: GO 41416
// end ;
41333: GO 41004
41335: POP
41336: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41337: LD_VAR 0 9
41341: PPUSH
41342: LD_VAR 0 3
41346: PPUSH
41347: LD_VAR 0 4
41351: PPUSH
41352: LD_INT 20
41354: PPUSH
41355: CALL 33339 0 4
41359: PUSH
41360: LD_INT 4
41362: ARRAY
41363: IFFALSE 41367
// exit ;
41365: GO 41416
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41367: LD_VAR 0 2
41371: PUSH
41372: LD_INT 29
41374: PUSH
41375: LD_INT 30
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: IN
41382: PUSH
41383: LD_VAR 0 3
41387: PPUSH
41388: LD_VAR 0 4
41392: PPUSH
41393: LD_VAR 0 9
41397: PPUSH
41398: CALL_OW 440
41402: NOT
41403: AND
41404: IFFALSE 41408
// exit ;
41406: GO 41416
// result := true ;
41408: LD_ADDR_VAR 0 6
41412: PUSH
41413: LD_INT 1
41415: ST_TO_ADDR
// end ;
41416: LD_VAR 0 6
41420: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
// result = [ ] ;
41481: LD_ADDR_VAR 0 7
41485: PUSH
41486: EMPTY
41487: ST_TO_ADDR
// temp_list = [ ] ;
41488: LD_ADDR_VAR 0 9
41492: PUSH
41493: EMPTY
41494: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41495: LD_VAR 0 4
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: LD_INT 4
41514: PUSH
41515: LD_INT 5
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: IN
41526: NOT
41527: PUSH
41528: LD_VAR 0 1
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: IN
41543: PUSH
41544: LD_VAR 0 5
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: IN
41563: NOT
41564: AND
41565: OR
41566: IFFALSE 41570
// exit ;
41568: GO 59961
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41570: LD_VAR 0 1
41574: PUSH
41575: LD_INT 6
41577: PUSH
41578: LD_INT 7
41580: PUSH
41581: LD_INT 8
41583: PUSH
41584: LD_INT 13
41586: PUSH
41587: LD_INT 12
41589: PUSH
41590: LD_INT 15
41592: PUSH
41593: LD_INT 11
41595: PUSH
41596: LD_INT 14
41598: PUSH
41599: LD_INT 10
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: IN
41613: IFFALSE 41623
// btype = b_lab ;
41615: LD_ADDR_VAR 0 1
41619: PUSH
41620: LD_INT 6
41622: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41623: LD_VAR 0 6
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: IN
41642: NOT
41643: PUSH
41644: LD_VAR 0 1
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 3
41660: PUSH
41661: LD_INT 6
41663: PUSH
41664: LD_INT 36
41666: PUSH
41667: LD_INT 4
41669: PUSH
41670: LD_INT 5
41672: PUSH
41673: LD_INT 31
41675: PUSH
41676: LD_INT 32
41678: PUSH
41679: LD_INT 33
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: IN
41695: NOT
41696: PUSH
41697: LD_VAR 0 6
41701: PUSH
41702: LD_INT 1
41704: EQUAL
41705: AND
41706: OR
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: IN
41723: NOT
41724: PUSH
41725: LD_VAR 0 6
41729: PUSH
41730: LD_INT 2
41732: EQUAL
41733: AND
41734: OR
41735: IFFALSE 41745
// mode = 0 ;
41737: LD_ADDR_VAR 0 6
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// case mode of 0 :
41745: LD_VAR 0 6
41749: PUSH
41750: LD_INT 0
41752: DOUBLE
41753: EQUAL
41754: IFTRUE 41758
41756: GO 53211
41758: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41759: LD_ADDR_VAR 0 11
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41952: LD_ADDR_VAR 0 12
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42148: LD_ADDR_VAR 0 13
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: LD_INT 3
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42347: LD_ADDR_VAR 0 14
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 3
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42543: LD_ADDR_VAR 0 15
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 3
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42736: LD_ADDR_VAR 0 16
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42929: LD_ADDR_VAR 0 17
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43159: LD_ADDR_VAR 0 18
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43389: LD_ADDR_VAR 0 19
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43619: LD_ADDR_VAR 0 20
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43849: LD_ADDR_VAR 0 21
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44079: LD_ADDR_VAR 0 22
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44309: LD_ADDR_VAR 0 23
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44589: LD_ADDR_VAR 0 24
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44865: LD_ADDR_VAR 0 25
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45139: LD_ADDR_VAR 0 26
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45415: LD_ADDR_VAR 0 27
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45695: LD_ADDR_VAR 0 28
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: NEG
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45977: LD_ADDR_VAR 0 29
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46256: LD_ADDR_VAR 0 30
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 3
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46534: LD_ADDR_VAR 0 31
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46812: LD_ADDR_VAR 0 32
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47090: LD_ADDR_VAR 0 33
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47369: LD_ADDR_VAR 0 34
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47649: LD_ADDR_VAR 0 35
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47761: LD_ADDR_VAR 0 36
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47873: LD_ADDR_VAR 0 37
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47985: LD_ADDR_VAR 0 38
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48097: LD_ADDR_VAR 0 39
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48209: LD_ADDR_VAR 0 40
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48321: LD_ADDR_VAR 0 41
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 3
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48671: LD_ADDR_VAR 0 42
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: LD_INT 3
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 3
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49021: LD_ADDR_VAR 0 43
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 3
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49369: LD_ADDR_VAR 0 44
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 3
49678: NEG
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49719: LD_ADDR_VAR 0 45
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 3
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50069: LD_ADDR_VAR 0 46
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 2
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 3
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 3
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50417: LD_ADDR_VAR 0 47
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50568: LD_ADDR_VAR 0 48
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50715: LD_ADDR_VAR 0 49
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50859: LD_ADDR_VAR 0 50
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51003: LD_ADDR_VAR 0 51
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51150: LD_ADDR_VAR 0 52
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51301: LD_ADDR_VAR 0 53
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51531: LD_ADDR_VAR 0 54
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51761: LD_ADDR_VAR 0 55
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51991: LD_ADDR_VAR 0 56
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52221: LD_ADDR_VAR 0 57
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52451: LD_ADDR_VAR 0 58
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52681: LD_ADDR_VAR 0 59
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52769: LD_ADDR_VAR 0 60
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52857: LD_ADDR_VAR 0 61
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52945: LD_ADDR_VAR 0 62
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53033: LD_ADDR_VAR 0 63
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53121: LD_ADDR_VAR 0 64
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// end ; 1 :
53209: GO 59106
53211: LD_INT 1
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53219
53217: GO 55842
53219: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53220: LD_ADDR_VAR 0 11
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53264: LD_ADDR_VAR 0 12
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53305: LD_ADDR_VAR 0 13
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53345: LD_ADDR_VAR 0 14
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53386: LD_ADDR_VAR 0 15
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53430: LD_ADDR_VAR 0 16
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53476: LD_ADDR_VAR 0 17
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53520: LD_ADDR_VAR 0 18
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53561: LD_ADDR_VAR 0 19
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53601: LD_ADDR_VAR 0 20
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53642: LD_ADDR_VAR 0 21
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53686: LD_ADDR_VAR 0 22
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53732: LD_ADDR_VAR 0 23
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 4
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53776: LD_ADDR_VAR 0 24
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 3
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 4
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53817: LD_ADDR_VAR 0 25
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 4
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53857: LD_ADDR_VAR 0 26
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53898: LD_ADDR_VAR 0 27
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 4
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53942: LD_ADDR_VAR 0 28
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: LD_INT 4
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: NEG
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53988: LD_ADDR_VAR 0 29
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 4
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 5
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 6
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 6
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 5
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54143: LD_ADDR_VAR 0 30
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 4
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 4
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 5
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 6
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 6
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54286: LD_ADDR_VAR 0 31
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 4
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 4
54333: PUSH
54334: LD_INT 4
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: LD_INT 4
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 5
54363: PUSH
54364: LD_INT 5
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 4
54373: PUSH
54374: LD_INT 5
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 6
54383: PUSH
54384: LD_INT 5
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 6
54393: PUSH
54394: LD_INT 6
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 5
54403: PUSH
54404: LD_INT 6
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54425: LD_ADDR_VAR 0 32
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 4
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 5
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 5
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 4
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 6
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 6
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 5
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54568: LD_ADDR_VAR 0 33
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 4
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 5
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 6
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 6
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54723: LD_ADDR_VAR 0 34
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 4
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 4
54778: NEG
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 4
54790: NEG
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: LD_INT 5
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 5
54814: NEG
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 5
54826: NEG
54827: PUSH
54828: LD_INT 5
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: NEG
54839: PUSH
54840: LD_INT 6
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 6
54850: NEG
54851: PUSH
54852: LD_INT 5
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 6
54862: NEG
54863: PUSH
54864: LD_INT 6
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54886: LD_ADDR_VAR 0 41
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54930: LD_ADDR_VAR 0 42
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54971: LD_ADDR_VAR 0 43
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55011: LD_ADDR_VAR 0 44
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55052: LD_ADDR_VAR 0 45
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55096: LD_ADDR_VAR 0 46
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55142: LD_ADDR_VAR 0 47
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55175: LD_ADDR_VAR 0 48
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55206: LD_ADDR_VAR 0 49
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55235: LD_ADDR_VAR 0 50
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 3
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55264: LD_ADDR_VAR 0 51
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55295: LD_ADDR_VAR 0 52
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55328: LD_ADDR_VAR 0 53
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55372: LD_ADDR_VAR 0 54
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55413: LD_ADDR_VAR 0 55
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55453: LD_ADDR_VAR 0 56
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55494: LD_ADDR_VAR 0 57
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55538: LD_ADDR_VAR 0 58
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55584: LD_ADDR_VAR 0 59
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55628: LD_ADDR_VAR 0 60
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55669: LD_ADDR_VAR 0 61
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55709: LD_ADDR_VAR 0 62
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55750: LD_ADDR_VAR 0 63
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55794: LD_ADDR_VAR 0 64
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// end ; 2 :
55840: GO 59106
55842: LD_INT 2
55844: DOUBLE
55845: EQUAL
55846: IFTRUE 55850
55848: GO 59105
55850: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55851: LD_ADDR_VAR 0 29
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 5
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 5
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 4
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 5
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 4
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: LD_INT 4
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 5
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 5
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 4
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 5
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 4
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 4
56236: NEG
56237: PUSH
56238: LD_INT 4
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: LD_INT 5
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 4
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 5
56296: NEG
56297: PUSH
56298: LD_INT 4
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 5
56308: NEG
56309: PUSH
56310: LD_INT 5
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 5
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 5
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56389: LD_ADDR_VAR 0 30
56393: PUSH
56394: LD_INT 4
56396: PUSH
56397: LD_INT 4
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: LD_INT 4
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 5
56426: PUSH
56427: LD_INT 5
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 4
56436: PUSH
56437: LD_INT 5
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: LD_INT 4
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 5
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 3
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 4
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 5
56635: NEG
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 5
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: LD_INT 4
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 4
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 4
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 5
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 5
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 5
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56936: LD_ADDR_VAR 0 31
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 4
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 4
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 5
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 5
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 5
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 4
57092: NEG
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 4
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 4
57115: NEG
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 4
57138: NEG
57139: PUSH
57140: LD_INT 4
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 4
57150: NEG
57151: PUSH
57152: LD_INT 5
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 5
57198: NEG
57199: PUSH
57200: LD_INT 4
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: NEG
57211: PUSH
57212: LD_INT 5
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: LD_INT 5
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: NEG
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 3
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 4
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 4
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 4
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 5
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57486: LD_ADDR_VAR 0 32
57490: PUSH
57491: LD_INT 4
57493: NEG
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 5
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 5
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 3
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 4
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: NEG
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 4
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 5
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 4
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 5
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 5
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 5
57918: PUSH
57919: LD_INT 4
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 5
57928: PUSH
57929: LD_INT 5
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: PUSH
57939: LD_INT 5
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 5
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: LD_INT 5
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58033: LD_ADDR_VAR 0 33
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: LD_INT 4
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 4
58052: NEG
58053: PUSH
58054: LD_INT 5
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 5
58100: NEG
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 5
58112: NEG
58113: PUSH
58114: LD_INT 5
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 4
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 3
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 4
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 4
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 4
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 5
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 4
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 4
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 5
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58571: LD_ADDR_VAR 0 34
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 5
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 4
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 5
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 5
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 4
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 4
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 5
58803: PUSH
58804: LD_INT 5
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 4
58813: PUSH
58814: LD_INT 5
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: LD_INT 4
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: LD_INT 5
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 3
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: LD_INT 4
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 4
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 5
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: NEG
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// end ; end ;
59103: GO 59106
59105: POP
// case btype of b_depot , b_warehouse :
59106: LD_VAR 0 1
59110: PUSH
59111: LD_INT 0
59113: DOUBLE
59114: EQUAL
59115: IFTRUE 59125
59117: LD_INT 1
59119: DOUBLE
59120: EQUAL
59121: IFTRUE 59125
59123: GO 59326
59125: POP
// case nation of nation_american :
59126: LD_VAR 0 5
59130: PUSH
59131: LD_INT 1
59133: DOUBLE
59134: EQUAL
59135: IFTRUE 59139
59137: GO 59195
59139: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59140: LD_ADDR_VAR 0 9
59144: PUSH
59145: LD_VAR 0 11
59149: PUSH
59150: LD_VAR 0 12
59154: PUSH
59155: LD_VAR 0 13
59159: PUSH
59160: LD_VAR 0 14
59164: PUSH
59165: LD_VAR 0 15
59169: PUSH
59170: LD_VAR 0 16
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: PUSH
59183: LD_VAR 0 4
59187: PUSH
59188: LD_INT 1
59190: PLUS
59191: ARRAY
59192: ST_TO_ADDR
59193: GO 59324
59195: LD_INT 2
59197: DOUBLE
59198: EQUAL
59199: IFTRUE 59203
59201: GO 59259
59203: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59204: LD_ADDR_VAR 0 9
59208: PUSH
59209: LD_VAR 0 17
59213: PUSH
59214: LD_VAR 0 18
59218: PUSH
59219: LD_VAR 0 19
59223: PUSH
59224: LD_VAR 0 20
59228: PUSH
59229: LD_VAR 0 21
59233: PUSH
59234: LD_VAR 0 22
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: PUSH
59247: LD_VAR 0 4
59251: PUSH
59252: LD_INT 1
59254: PLUS
59255: ARRAY
59256: ST_TO_ADDR
59257: GO 59324
59259: LD_INT 3
59261: DOUBLE
59262: EQUAL
59263: IFTRUE 59267
59265: GO 59323
59267: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59268: LD_ADDR_VAR 0 9
59272: PUSH
59273: LD_VAR 0 23
59277: PUSH
59278: LD_VAR 0 24
59282: PUSH
59283: LD_VAR 0 25
59287: PUSH
59288: LD_VAR 0 26
59292: PUSH
59293: LD_VAR 0 27
59297: PUSH
59298: LD_VAR 0 28
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: PUSH
59311: LD_VAR 0 4
59315: PUSH
59316: LD_INT 1
59318: PLUS
59319: ARRAY
59320: ST_TO_ADDR
59321: GO 59324
59323: POP
59324: GO 59879
59326: LD_INT 2
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59340
59332: LD_INT 3
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59396
59340: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59341: LD_ADDR_VAR 0 9
59345: PUSH
59346: LD_VAR 0 29
59350: PUSH
59351: LD_VAR 0 30
59355: PUSH
59356: LD_VAR 0 31
59360: PUSH
59361: LD_VAR 0 32
59365: PUSH
59366: LD_VAR 0 33
59370: PUSH
59371: LD_VAR 0 34
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: PUSH
59384: LD_VAR 0 4
59388: PUSH
59389: LD_INT 1
59391: PLUS
59392: ARRAY
59393: ST_TO_ADDR
59394: GO 59879
59396: LD_INT 16
59398: DOUBLE
59399: EQUAL
59400: IFTRUE 59458
59402: LD_INT 17
59404: DOUBLE
59405: EQUAL
59406: IFTRUE 59458
59408: LD_INT 18
59410: DOUBLE
59411: EQUAL
59412: IFTRUE 59458
59414: LD_INT 19
59416: DOUBLE
59417: EQUAL
59418: IFTRUE 59458
59420: LD_INT 22
59422: DOUBLE
59423: EQUAL
59424: IFTRUE 59458
59426: LD_INT 20
59428: DOUBLE
59429: EQUAL
59430: IFTRUE 59458
59432: LD_INT 21
59434: DOUBLE
59435: EQUAL
59436: IFTRUE 59458
59438: LD_INT 23
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59458
59444: LD_INT 24
59446: DOUBLE
59447: EQUAL
59448: IFTRUE 59458
59450: LD_INT 25
59452: DOUBLE
59453: EQUAL
59454: IFTRUE 59458
59456: GO 59514
59458: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59459: LD_ADDR_VAR 0 9
59463: PUSH
59464: LD_VAR 0 35
59468: PUSH
59469: LD_VAR 0 36
59473: PUSH
59474: LD_VAR 0 37
59478: PUSH
59479: LD_VAR 0 38
59483: PUSH
59484: LD_VAR 0 39
59488: PUSH
59489: LD_VAR 0 40
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: PUSH
59502: LD_VAR 0 4
59506: PUSH
59507: LD_INT 1
59509: PLUS
59510: ARRAY
59511: ST_TO_ADDR
59512: GO 59879
59514: LD_INT 6
59516: DOUBLE
59517: EQUAL
59518: IFTRUE 59570
59520: LD_INT 7
59522: DOUBLE
59523: EQUAL
59524: IFTRUE 59570
59526: LD_INT 8
59528: DOUBLE
59529: EQUAL
59530: IFTRUE 59570
59532: LD_INT 13
59534: DOUBLE
59535: EQUAL
59536: IFTRUE 59570
59538: LD_INT 12
59540: DOUBLE
59541: EQUAL
59542: IFTRUE 59570
59544: LD_INT 15
59546: DOUBLE
59547: EQUAL
59548: IFTRUE 59570
59550: LD_INT 11
59552: DOUBLE
59553: EQUAL
59554: IFTRUE 59570
59556: LD_INT 14
59558: DOUBLE
59559: EQUAL
59560: IFTRUE 59570
59562: LD_INT 10
59564: DOUBLE
59565: EQUAL
59566: IFTRUE 59570
59568: GO 59626
59570: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59571: LD_ADDR_VAR 0 9
59575: PUSH
59576: LD_VAR 0 41
59580: PUSH
59581: LD_VAR 0 42
59585: PUSH
59586: LD_VAR 0 43
59590: PUSH
59591: LD_VAR 0 44
59595: PUSH
59596: LD_VAR 0 45
59600: PUSH
59601: LD_VAR 0 46
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: PUSH
59614: LD_VAR 0 4
59618: PUSH
59619: LD_INT 1
59621: PLUS
59622: ARRAY
59623: ST_TO_ADDR
59624: GO 59879
59626: LD_INT 36
59628: DOUBLE
59629: EQUAL
59630: IFTRUE 59634
59632: GO 59690
59634: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59635: LD_ADDR_VAR 0 9
59639: PUSH
59640: LD_VAR 0 47
59644: PUSH
59645: LD_VAR 0 48
59649: PUSH
59650: LD_VAR 0 49
59654: PUSH
59655: LD_VAR 0 50
59659: PUSH
59660: LD_VAR 0 51
59664: PUSH
59665: LD_VAR 0 52
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: PUSH
59678: LD_VAR 0 4
59682: PUSH
59683: LD_INT 1
59685: PLUS
59686: ARRAY
59687: ST_TO_ADDR
59688: GO 59879
59690: LD_INT 4
59692: DOUBLE
59693: EQUAL
59694: IFTRUE 59716
59696: LD_INT 5
59698: DOUBLE
59699: EQUAL
59700: IFTRUE 59716
59702: LD_INT 34
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59716
59708: LD_INT 37
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59716
59714: GO 59772
59716: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59717: LD_ADDR_VAR 0 9
59721: PUSH
59722: LD_VAR 0 53
59726: PUSH
59727: LD_VAR 0 54
59731: PUSH
59732: LD_VAR 0 55
59736: PUSH
59737: LD_VAR 0 56
59741: PUSH
59742: LD_VAR 0 57
59746: PUSH
59747: LD_VAR 0 58
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: PUSH
59760: LD_VAR 0 4
59764: PUSH
59765: LD_INT 1
59767: PLUS
59768: ARRAY
59769: ST_TO_ADDR
59770: GO 59879
59772: LD_INT 31
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59822
59778: LD_INT 32
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59822
59784: LD_INT 33
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59822
59790: LD_INT 27
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59822
59796: LD_INT 26
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59822
59802: LD_INT 28
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59822
59808: LD_INT 29
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59822
59814: LD_INT 30
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59822
59820: GO 59878
59822: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59823: LD_ADDR_VAR 0 9
59827: PUSH
59828: LD_VAR 0 59
59832: PUSH
59833: LD_VAR 0 60
59837: PUSH
59838: LD_VAR 0 61
59842: PUSH
59843: LD_VAR 0 62
59847: PUSH
59848: LD_VAR 0 63
59852: PUSH
59853: LD_VAR 0 64
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: PUSH
59866: LD_VAR 0 4
59870: PUSH
59871: LD_INT 1
59873: PLUS
59874: ARRAY
59875: ST_TO_ADDR
59876: GO 59879
59878: POP
// temp_list2 = [ ] ;
59879: LD_ADDR_VAR 0 10
59883: PUSH
59884: EMPTY
59885: ST_TO_ADDR
// for i in temp_list do
59886: LD_ADDR_VAR 0 8
59890: PUSH
59891: LD_VAR 0 9
59895: PUSH
59896: FOR_IN
59897: IFFALSE 59949
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59899: LD_ADDR_VAR 0 10
59903: PUSH
59904: LD_VAR 0 10
59908: PUSH
59909: LD_VAR 0 8
59913: PUSH
59914: LD_INT 1
59916: ARRAY
59917: PUSH
59918: LD_VAR 0 2
59922: PLUS
59923: PUSH
59924: LD_VAR 0 8
59928: PUSH
59929: LD_INT 2
59931: ARRAY
59932: PUSH
59933: LD_VAR 0 3
59937: PLUS
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: EMPTY
59944: LIST
59945: ADD
59946: ST_TO_ADDR
59947: GO 59896
59949: POP
59950: POP
// result = temp_list2 ;
59951: LD_ADDR_VAR 0 7
59955: PUSH
59956: LD_VAR 0 10
59960: ST_TO_ADDR
// end ;
59961: LD_VAR 0 7
59965: RET
// export function EnemyInRange ( unit , dist ) ; begin
59966: LD_INT 0
59968: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59969: LD_ADDR_VAR 0 3
59973: PUSH
59974: LD_VAR 0 1
59978: PPUSH
59979: CALL_OW 255
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 250
59993: PPUSH
59994: LD_VAR 0 1
59998: PPUSH
59999: CALL_OW 251
60003: PPUSH
60004: LD_VAR 0 2
60008: PPUSH
60009: CALL 33339 0 4
60013: PUSH
60014: LD_INT 4
60016: ARRAY
60017: ST_TO_ADDR
// end ;
60018: LD_VAR 0 3
60022: RET
// export function PlayerSeeMe ( unit ) ; begin
60023: LD_INT 0
60025: PPUSH
// result := See ( your_side , unit ) ;
60026: LD_ADDR_VAR 0 2
60030: PUSH
60031: LD_OWVAR 2
60035: PPUSH
60036: LD_VAR 0 1
60040: PPUSH
60041: CALL_OW 292
60045: ST_TO_ADDR
// end ;
60046: LD_VAR 0 2
60050: RET
// export function ReverseDir ( unit ) ; begin
60051: LD_INT 0
60053: PPUSH
// if not unit then
60054: LD_VAR 0 1
60058: NOT
60059: IFFALSE 60063
// exit ;
60061: GO 60086
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60063: LD_ADDR_VAR 0 2
60067: PUSH
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL_OW 254
60077: PUSH
60078: LD_INT 3
60080: PLUS
60081: PUSH
60082: LD_INT 6
60084: MOD
60085: ST_TO_ADDR
// end ;
60086: LD_VAR 0 2
60090: RET
// export function ReverseArray ( array ) ; var i ; begin
60091: LD_INT 0
60093: PPUSH
60094: PPUSH
// if not array then
60095: LD_VAR 0 1
60099: NOT
60100: IFFALSE 60104
// exit ;
60102: GO 60159
// result := [ ] ;
60104: LD_ADDR_VAR 0 2
60108: PUSH
60109: EMPTY
60110: ST_TO_ADDR
// for i := array downto 1 do
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: DOUBLE
60117: LD_VAR 0 1
60121: INC
60122: ST_TO_ADDR
60123: LD_INT 1
60125: PUSH
60126: FOR_DOWNTO
60127: IFFALSE 60157
// result := Join ( result , array [ i ] ) ;
60129: LD_ADDR_VAR 0 2
60133: PUSH
60134: LD_VAR 0 2
60138: PPUSH
60139: LD_VAR 0 1
60143: PUSH
60144: LD_VAR 0 3
60148: ARRAY
60149: PPUSH
60150: CALL 64824 0 2
60154: ST_TO_ADDR
60155: GO 60126
60157: POP
60158: POP
// end ;
60159: LD_VAR 0 2
60163: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60164: LD_INT 0
60166: PPUSH
60167: PPUSH
60168: PPUSH
60169: PPUSH
60170: PPUSH
60171: PPUSH
// if not unit or not hexes then
60172: LD_VAR 0 1
60176: NOT
60177: PUSH
60178: LD_VAR 0 2
60182: NOT
60183: OR
60184: IFFALSE 60188
// exit ;
60186: GO 60311
// dist := 9999 ;
60188: LD_ADDR_VAR 0 5
60192: PUSH
60193: LD_INT 9999
60195: ST_TO_ADDR
// for i = 1 to hexes do
60196: LD_ADDR_VAR 0 4
60200: PUSH
60201: DOUBLE
60202: LD_INT 1
60204: DEC
60205: ST_TO_ADDR
60206: LD_VAR 0 2
60210: PUSH
60211: FOR_TO
60212: IFFALSE 60299
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60214: LD_ADDR_VAR 0 6
60218: PUSH
60219: LD_VAR 0 1
60223: PPUSH
60224: LD_VAR 0 2
60228: PUSH
60229: LD_VAR 0 4
60233: ARRAY
60234: PUSH
60235: LD_INT 1
60237: ARRAY
60238: PPUSH
60239: LD_VAR 0 2
60243: PUSH
60244: LD_VAR 0 4
60248: ARRAY
60249: PUSH
60250: LD_INT 2
60252: ARRAY
60253: PPUSH
60254: CALL_OW 297
60258: ST_TO_ADDR
// if tdist < dist then
60259: LD_VAR 0 6
60263: PUSH
60264: LD_VAR 0 5
60268: LESS
60269: IFFALSE 60297
// begin hex := hexes [ i ] ;
60271: LD_ADDR_VAR 0 8
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_VAR 0 4
60285: ARRAY
60286: ST_TO_ADDR
// dist := tdist ;
60287: LD_ADDR_VAR 0 5
60291: PUSH
60292: LD_VAR 0 6
60296: ST_TO_ADDR
// end ; end ;
60297: GO 60211
60299: POP
60300: POP
// result := hex ;
60301: LD_ADDR_VAR 0 3
60305: PUSH
60306: LD_VAR 0 8
60310: ST_TO_ADDR
// end ;
60311: LD_VAR 0 3
60315: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60316: LD_INT 0
60318: PPUSH
60319: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60320: LD_VAR 0 1
60324: NOT
60325: PUSH
60326: LD_VAR 0 1
60330: PUSH
60331: LD_INT 21
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 23
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PPUSH
60355: CALL_OW 69
60359: IN
60360: NOT
60361: OR
60362: IFFALSE 60366
// exit ;
60364: GO 60413
// for i = 1 to 3 do
60366: LD_ADDR_VAR 0 3
60370: PUSH
60371: DOUBLE
60372: LD_INT 1
60374: DEC
60375: ST_TO_ADDR
60376: LD_INT 3
60378: PUSH
60379: FOR_TO
60380: IFFALSE 60411
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60382: LD_VAR 0 1
60386: PPUSH
60387: CALL_OW 250
60391: PPUSH
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL_OW 251
60401: PPUSH
60402: LD_INT 1
60404: PPUSH
60405: CALL_OW 453
60409: GO 60379
60411: POP
60412: POP
// end ;
60413: LD_VAR 0 2
60417: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60418: LD_INT 0
60420: PPUSH
60421: PPUSH
60422: PPUSH
60423: PPUSH
60424: PPUSH
60425: PPUSH
// if not unit or not enemy_unit then
60426: LD_VAR 0 1
60430: NOT
60431: PUSH
60432: LD_VAR 0 2
60436: NOT
60437: OR
60438: IFFALSE 60442
// exit ;
60440: GO 60909
// if GetLives ( i ) < 250 then
60442: LD_VAR 0 4
60446: PPUSH
60447: CALL_OW 256
60451: PUSH
60452: LD_INT 250
60454: LESS
60455: IFFALSE 60468
// begin ComAutodestruct ( i ) ;
60457: LD_VAR 0 4
60461: PPUSH
60462: CALL 60316 0 1
// exit ;
60466: GO 60909
// end ; x := GetX ( enemy_unit ) ;
60468: LD_ADDR_VAR 0 7
60472: PUSH
60473: LD_VAR 0 2
60477: PPUSH
60478: CALL_OW 250
60482: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60483: LD_ADDR_VAR 0 8
60487: PUSH
60488: LD_VAR 0 2
60492: PPUSH
60493: CALL_OW 251
60497: ST_TO_ADDR
// if not x or not y then
60498: LD_VAR 0 7
60502: NOT
60503: PUSH
60504: LD_VAR 0 8
60508: NOT
60509: OR
60510: IFFALSE 60514
// exit ;
60512: GO 60909
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60514: LD_ADDR_VAR 0 6
60518: PUSH
60519: LD_VAR 0 7
60523: PPUSH
60524: LD_INT 0
60526: PPUSH
60527: LD_INT 4
60529: PPUSH
60530: CALL_OW 272
60534: PUSH
60535: LD_VAR 0 8
60539: PPUSH
60540: LD_INT 0
60542: PPUSH
60543: LD_INT 4
60545: PPUSH
60546: CALL_OW 273
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_VAR 0 7
60559: PPUSH
60560: LD_INT 1
60562: PPUSH
60563: LD_INT 4
60565: PPUSH
60566: CALL_OW 272
60570: PUSH
60571: LD_VAR 0 8
60575: PPUSH
60576: LD_INT 1
60578: PPUSH
60579: LD_INT 4
60581: PPUSH
60582: CALL_OW 273
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_VAR 0 7
60595: PPUSH
60596: LD_INT 2
60598: PPUSH
60599: LD_INT 4
60601: PPUSH
60602: CALL_OW 272
60606: PUSH
60607: LD_VAR 0 8
60611: PPUSH
60612: LD_INT 2
60614: PPUSH
60615: LD_INT 4
60617: PPUSH
60618: CALL_OW 273
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 7
60631: PPUSH
60632: LD_INT 3
60634: PPUSH
60635: LD_INT 4
60637: PPUSH
60638: CALL_OW 272
60642: PUSH
60643: LD_VAR 0 8
60647: PPUSH
60648: LD_INT 3
60650: PPUSH
60651: LD_INT 4
60653: PPUSH
60654: CALL_OW 273
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_VAR 0 7
60667: PPUSH
60668: LD_INT 4
60670: PPUSH
60671: LD_INT 4
60673: PPUSH
60674: CALL_OW 272
60678: PUSH
60679: LD_VAR 0 8
60683: PPUSH
60684: LD_INT 4
60686: PPUSH
60687: LD_INT 4
60689: PPUSH
60690: CALL_OW 273
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_VAR 0 7
60703: PPUSH
60704: LD_INT 5
60706: PPUSH
60707: LD_INT 4
60709: PPUSH
60710: CALL_OW 272
60714: PUSH
60715: LD_VAR 0 8
60719: PPUSH
60720: LD_INT 5
60722: PPUSH
60723: LD_INT 4
60725: PPUSH
60726: CALL_OW 273
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: ST_TO_ADDR
// for i = tmp downto 1 do
60743: LD_ADDR_VAR 0 4
60747: PUSH
60748: DOUBLE
60749: LD_VAR 0 6
60753: INC
60754: ST_TO_ADDR
60755: LD_INT 1
60757: PUSH
60758: FOR_DOWNTO
60759: IFFALSE 60860
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60761: LD_VAR 0 6
60765: PUSH
60766: LD_VAR 0 4
60770: ARRAY
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PPUSH
60776: LD_VAR 0 6
60780: PUSH
60781: LD_VAR 0 4
60785: ARRAY
60786: PUSH
60787: LD_INT 2
60789: ARRAY
60790: PPUSH
60791: CALL_OW 488
60795: NOT
60796: PUSH
60797: LD_VAR 0 6
60801: PUSH
60802: LD_VAR 0 4
60806: ARRAY
60807: PUSH
60808: LD_INT 1
60810: ARRAY
60811: PPUSH
60812: LD_VAR 0 6
60816: PUSH
60817: LD_VAR 0 4
60821: ARRAY
60822: PUSH
60823: LD_INT 2
60825: ARRAY
60826: PPUSH
60827: CALL_OW 428
60831: PUSH
60832: LD_INT 0
60834: NONEQUAL
60835: OR
60836: IFFALSE 60858
// tmp := Delete ( tmp , i ) ;
60838: LD_ADDR_VAR 0 6
60842: PUSH
60843: LD_VAR 0 6
60847: PPUSH
60848: LD_VAR 0 4
60852: PPUSH
60853: CALL_OW 3
60857: ST_TO_ADDR
60858: GO 60758
60860: POP
60861: POP
// j := GetClosestHex ( unit , tmp ) ;
60862: LD_ADDR_VAR 0 5
60866: PUSH
60867: LD_VAR 0 1
60871: PPUSH
60872: LD_VAR 0 6
60876: PPUSH
60877: CALL 60164 0 2
60881: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60882: LD_VAR 0 1
60886: PPUSH
60887: LD_VAR 0 5
60891: PUSH
60892: LD_INT 1
60894: ARRAY
60895: PPUSH
60896: LD_VAR 0 5
60900: PUSH
60901: LD_INT 2
60903: ARRAY
60904: PPUSH
60905: CALL_OW 111
// end ;
60909: LD_VAR 0 3
60913: RET
// export function PrepareApemanSoldier ( ) ; begin
60914: LD_INT 0
60916: PPUSH
// uc_nation := 0 ;
60917: LD_ADDR_OWVAR 21
60921: PUSH
60922: LD_INT 0
60924: ST_TO_ADDR
// hc_sex := sex_male ;
60925: LD_ADDR_OWVAR 27
60929: PUSH
60930: LD_INT 1
60932: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60933: LD_ADDR_OWVAR 28
60937: PUSH
60938: LD_INT 15
60940: ST_TO_ADDR
// hc_gallery :=  ;
60941: LD_ADDR_OWVAR 33
60945: PUSH
60946: LD_STRING 
60948: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60949: LD_ADDR_OWVAR 31
60953: PUSH
60954: LD_INT 0
60956: PPUSH
60957: LD_INT 3
60959: PPUSH
60960: CALL_OW 12
60964: PUSH
60965: LD_INT 0
60967: PPUSH
60968: LD_INT 3
60970: PPUSH
60971: CALL_OW 12
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// end ;
60988: LD_VAR 0 1
60992: RET
// export function PrepareApemanEngineer ( ) ; begin
60993: LD_INT 0
60995: PPUSH
// uc_nation := 0 ;
60996: LD_ADDR_OWVAR 21
61000: PUSH
61001: LD_INT 0
61003: ST_TO_ADDR
// hc_sex := sex_male ;
61004: LD_ADDR_OWVAR 27
61008: PUSH
61009: LD_INT 1
61011: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61012: LD_ADDR_OWVAR 28
61016: PUSH
61017: LD_INT 16
61019: ST_TO_ADDR
// hc_gallery :=  ;
61020: LD_ADDR_OWVAR 33
61024: PUSH
61025: LD_STRING 
61027: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61028: LD_ADDR_OWVAR 31
61032: PUSH
61033: LD_INT 0
61035: PPUSH
61036: LD_INT 3
61038: PPUSH
61039: CALL_OW 12
61043: PUSH
61044: LD_INT 0
61046: PPUSH
61047: LD_INT 3
61049: PPUSH
61050: CALL_OW 12
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: ST_TO_ADDR
// end ;
61067: LD_VAR 0 1
61071: RET
// export function PrepareApeman ( agressivity ) ; begin
61072: LD_INT 0
61074: PPUSH
// uc_side := 0 ;
61075: LD_ADDR_OWVAR 20
61079: PUSH
61080: LD_INT 0
61082: ST_TO_ADDR
// uc_nation := 0 ;
61083: LD_ADDR_OWVAR 21
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// hc_sex := sex_male ;
61091: LD_ADDR_OWVAR 27
61095: PUSH
61096: LD_INT 1
61098: ST_TO_ADDR
// hc_class := class_apeman ;
61099: LD_ADDR_OWVAR 28
61103: PUSH
61104: LD_INT 12
61106: ST_TO_ADDR
// hc_gallery :=  ;
61107: LD_ADDR_OWVAR 33
61111: PUSH
61112: LD_STRING 
61114: ST_TO_ADDR
// if agressivity = 0 then
61115: LD_VAR 0 1
61119: PUSH
61120: LD_INT 0
61122: EQUAL
61123: IFFALSE 61135
// hc_agressivity := 0 else
61125: LD_ADDR_OWVAR 35
61129: PUSH
61130: LD_INT 0
61132: ST_TO_ADDR
61133: GO 61156
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61135: LD_ADDR_OWVAR 35
61139: PUSH
61140: LD_VAR 0 1
61144: NEG
61145: PPUSH
61146: LD_VAR 0 1
61150: PPUSH
61151: CALL_OW 12
61155: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61156: LD_ADDR_OWVAR 31
61160: PUSH
61161: LD_INT 0
61163: PPUSH
61164: LD_INT 3
61166: PPUSH
61167: CALL_OW 12
61171: PUSH
61172: LD_INT 0
61174: PPUSH
61175: LD_INT 3
61177: PPUSH
61178: CALL_OW 12
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: ST_TO_ADDR
// end ;
61195: LD_VAR 0 2
61199: RET
// export function PrepareTiger ( agressivity ) ; begin
61200: LD_INT 0
61202: PPUSH
// uc_side := 0 ;
61203: LD_ADDR_OWVAR 20
61207: PUSH
61208: LD_INT 0
61210: ST_TO_ADDR
// uc_nation := 0 ;
61211: LD_ADDR_OWVAR 21
61215: PUSH
61216: LD_INT 0
61218: ST_TO_ADDR
// hc_class := class_tiger ;
61219: LD_ADDR_OWVAR 28
61223: PUSH
61224: LD_INT 14
61226: ST_TO_ADDR
// hc_gallery :=  ;
61227: LD_ADDR_OWVAR 33
61231: PUSH
61232: LD_STRING 
61234: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61235: LD_ADDR_OWVAR 35
61239: PUSH
61240: LD_VAR 0 1
61244: NEG
61245: PPUSH
61246: LD_VAR 0 1
61250: PPUSH
61251: CALL_OW 12
61255: ST_TO_ADDR
// end ;
61256: LD_VAR 0 2
61260: RET
// export function PrepareEnchidna ( ) ; begin
61261: LD_INT 0
61263: PPUSH
// uc_side := 0 ;
61264: LD_ADDR_OWVAR 20
61268: PUSH
61269: LD_INT 0
61271: ST_TO_ADDR
// uc_nation := 0 ;
61272: LD_ADDR_OWVAR 21
61276: PUSH
61277: LD_INT 0
61279: ST_TO_ADDR
// hc_class := class_baggie ;
61280: LD_ADDR_OWVAR 28
61284: PUSH
61285: LD_INT 13
61287: ST_TO_ADDR
// hc_gallery :=  ;
61288: LD_ADDR_OWVAR 33
61292: PUSH
61293: LD_STRING 
61295: ST_TO_ADDR
// end ;
61296: LD_VAR 0 1
61300: RET
// export function PrepareFrog ( ) ; begin
61301: LD_INT 0
61303: PPUSH
// uc_side := 0 ;
61304: LD_ADDR_OWVAR 20
61308: PUSH
61309: LD_INT 0
61311: ST_TO_ADDR
// uc_nation := 0 ;
61312: LD_ADDR_OWVAR 21
61316: PUSH
61317: LD_INT 0
61319: ST_TO_ADDR
// hc_class := class_frog ;
61320: LD_ADDR_OWVAR 28
61324: PUSH
61325: LD_INT 19
61327: ST_TO_ADDR
// hc_gallery :=  ;
61328: LD_ADDR_OWVAR 33
61332: PUSH
61333: LD_STRING 
61335: ST_TO_ADDR
// end ;
61336: LD_VAR 0 1
61340: RET
// export function PrepareFish ( ) ; begin
61341: LD_INT 0
61343: PPUSH
// uc_side := 0 ;
61344: LD_ADDR_OWVAR 20
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// uc_nation := 0 ;
61352: LD_ADDR_OWVAR 21
61356: PUSH
61357: LD_INT 0
61359: ST_TO_ADDR
// hc_class := class_fish ;
61360: LD_ADDR_OWVAR 28
61364: PUSH
61365: LD_INT 20
61367: ST_TO_ADDR
// hc_gallery :=  ;
61368: LD_ADDR_OWVAR 33
61372: PUSH
61373: LD_STRING 
61375: ST_TO_ADDR
// end ;
61376: LD_VAR 0 1
61380: RET
// export function PrepareBird ( ) ; begin
61381: LD_INT 0
61383: PPUSH
// uc_side := 0 ;
61384: LD_ADDR_OWVAR 20
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// uc_nation := 0 ;
61392: LD_ADDR_OWVAR 21
61396: PUSH
61397: LD_INT 0
61399: ST_TO_ADDR
// hc_class := class_phororhacos ;
61400: LD_ADDR_OWVAR 28
61404: PUSH
61405: LD_INT 18
61407: ST_TO_ADDR
// hc_gallery :=  ;
61408: LD_ADDR_OWVAR 33
61412: PUSH
61413: LD_STRING 
61415: ST_TO_ADDR
// end ;
61416: LD_VAR 0 1
61420: RET
// export function PrepareHorse ( ) ; begin
61421: LD_INT 0
61423: PPUSH
// uc_side := 0 ;
61424: LD_ADDR_OWVAR 20
61428: PUSH
61429: LD_INT 0
61431: ST_TO_ADDR
// uc_nation := 0 ;
61432: LD_ADDR_OWVAR 21
61436: PUSH
61437: LD_INT 0
61439: ST_TO_ADDR
// hc_class := class_horse ;
61440: LD_ADDR_OWVAR 28
61444: PUSH
61445: LD_INT 21
61447: ST_TO_ADDR
// hc_gallery :=  ;
61448: LD_ADDR_OWVAR 33
61452: PUSH
61453: LD_STRING 
61455: ST_TO_ADDR
// end ;
61456: LD_VAR 0 1
61460: RET
// export function PrepareMastodont ( ) ; begin
61461: LD_INT 0
61463: PPUSH
// uc_side := 0 ;
61464: LD_ADDR_OWVAR 20
61468: PUSH
61469: LD_INT 0
61471: ST_TO_ADDR
// uc_nation := 0 ;
61472: LD_ADDR_OWVAR 21
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61480: LD_ADDR_OWVAR 37
61484: PUSH
61485: LD_INT 31
61487: ST_TO_ADDR
// vc_control := control_rider ;
61488: LD_ADDR_OWVAR 38
61492: PUSH
61493: LD_INT 4
61495: ST_TO_ADDR
// end ;
61496: LD_VAR 0 1
61500: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61501: LD_INT 0
61503: PPUSH
61504: PPUSH
61505: PPUSH
// uc_side = 0 ;
61506: LD_ADDR_OWVAR 20
61510: PUSH
61511: LD_INT 0
61513: ST_TO_ADDR
// uc_nation = 0 ;
61514: LD_ADDR_OWVAR 21
61518: PUSH
61519: LD_INT 0
61521: ST_TO_ADDR
// InitHc_All ( ) ;
61522: CALL_OW 584
// InitVc ;
61526: CALL_OW 20
// if mastodonts then
61530: LD_VAR 0 6
61534: IFFALSE 61601
// for i = 1 to mastodonts do
61536: LD_ADDR_VAR 0 11
61540: PUSH
61541: DOUBLE
61542: LD_INT 1
61544: DEC
61545: ST_TO_ADDR
61546: LD_VAR 0 6
61550: PUSH
61551: FOR_TO
61552: IFFALSE 61599
// begin vc_chassis := 31 ;
61554: LD_ADDR_OWVAR 37
61558: PUSH
61559: LD_INT 31
61561: ST_TO_ADDR
// vc_control := control_rider ;
61562: LD_ADDR_OWVAR 38
61566: PUSH
61567: LD_INT 4
61569: ST_TO_ADDR
// animal := CreateVehicle ;
61570: LD_ADDR_VAR 0 12
61574: PUSH
61575: CALL_OW 45
61579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61580: LD_VAR 0 12
61584: PPUSH
61585: LD_VAR 0 8
61589: PPUSH
61590: LD_INT 0
61592: PPUSH
61593: CALL 63729 0 3
// end ;
61597: GO 61551
61599: POP
61600: POP
// if horses then
61601: LD_VAR 0 5
61605: IFFALSE 61672
// for i = 1 to horses do
61607: LD_ADDR_VAR 0 11
61611: PUSH
61612: DOUBLE
61613: LD_INT 1
61615: DEC
61616: ST_TO_ADDR
61617: LD_VAR 0 5
61621: PUSH
61622: FOR_TO
61623: IFFALSE 61670
// begin hc_class := 21 ;
61625: LD_ADDR_OWVAR 28
61629: PUSH
61630: LD_INT 21
61632: ST_TO_ADDR
// hc_gallery :=  ;
61633: LD_ADDR_OWVAR 33
61637: PUSH
61638: LD_STRING 
61640: ST_TO_ADDR
// animal := CreateHuman ;
61641: LD_ADDR_VAR 0 12
61645: PUSH
61646: CALL_OW 44
61650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61651: LD_VAR 0 12
61655: PPUSH
61656: LD_VAR 0 8
61660: PPUSH
61661: LD_INT 0
61663: PPUSH
61664: CALL 63729 0 3
// end ;
61668: GO 61622
61670: POP
61671: POP
// if birds then
61672: LD_VAR 0 1
61676: IFFALSE 61743
// for i = 1 to birds do
61678: LD_ADDR_VAR 0 11
61682: PUSH
61683: DOUBLE
61684: LD_INT 1
61686: DEC
61687: ST_TO_ADDR
61688: LD_VAR 0 1
61692: PUSH
61693: FOR_TO
61694: IFFALSE 61741
// begin hc_class := 18 ;
61696: LD_ADDR_OWVAR 28
61700: PUSH
61701: LD_INT 18
61703: ST_TO_ADDR
// hc_gallery =  ;
61704: LD_ADDR_OWVAR 33
61708: PUSH
61709: LD_STRING 
61711: ST_TO_ADDR
// animal := CreateHuman ;
61712: LD_ADDR_VAR 0 12
61716: PUSH
61717: CALL_OW 44
61721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61722: LD_VAR 0 12
61726: PPUSH
61727: LD_VAR 0 8
61731: PPUSH
61732: LD_INT 0
61734: PPUSH
61735: CALL 63729 0 3
// end ;
61739: GO 61693
61741: POP
61742: POP
// if tigers then
61743: LD_VAR 0 2
61747: IFFALSE 61831
// for i = 1 to tigers do
61749: LD_ADDR_VAR 0 11
61753: PUSH
61754: DOUBLE
61755: LD_INT 1
61757: DEC
61758: ST_TO_ADDR
61759: LD_VAR 0 2
61763: PUSH
61764: FOR_TO
61765: IFFALSE 61829
// begin hc_class = class_tiger ;
61767: LD_ADDR_OWVAR 28
61771: PUSH
61772: LD_INT 14
61774: ST_TO_ADDR
// hc_gallery =  ;
61775: LD_ADDR_OWVAR 33
61779: PUSH
61780: LD_STRING 
61782: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61783: LD_ADDR_OWVAR 35
61787: PUSH
61788: LD_INT 7
61790: NEG
61791: PPUSH
61792: LD_INT 7
61794: PPUSH
61795: CALL_OW 12
61799: ST_TO_ADDR
// animal := CreateHuman ;
61800: LD_ADDR_VAR 0 12
61804: PUSH
61805: CALL_OW 44
61809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61810: LD_VAR 0 12
61814: PPUSH
61815: LD_VAR 0 8
61819: PPUSH
61820: LD_INT 0
61822: PPUSH
61823: CALL 63729 0 3
// end ;
61827: GO 61764
61829: POP
61830: POP
// if apemans then
61831: LD_VAR 0 3
61835: IFFALSE 61958
// for i = 1 to apemans do
61837: LD_ADDR_VAR 0 11
61841: PUSH
61842: DOUBLE
61843: LD_INT 1
61845: DEC
61846: ST_TO_ADDR
61847: LD_VAR 0 3
61851: PUSH
61852: FOR_TO
61853: IFFALSE 61956
// begin hc_class = class_apeman ;
61855: LD_ADDR_OWVAR 28
61859: PUSH
61860: LD_INT 12
61862: ST_TO_ADDR
// hc_gallery =  ;
61863: LD_ADDR_OWVAR 33
61867: PUSH
61868: LD_STRING 
61870: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61871: LD_ADDR_OWVAR 35
61875: PUSH
61876: LD_INT 2
61878: NEG
61879: PPUSH
61880: LD_INT 2
61882: PPUSH
61883: CALL_OW 12
61887: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61888: LD_ADDR_OWVAR 31
61892: PUSH
61893: LD_INT 1
61895: PPUSH
61896: LD_INT 3
61898: PPUSH
61899: CALL_OW 12
61903: PUSH
61904: LD_INT 1
61906: PPUSH
61907: LD_INT 3
61909: PPUSH
61910: CALL_OW 12
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// animal := CreateHuman ;
61927: LD_ADDR_VAR 0 12
61931: PUSH
61932: CALL_OW 44
61936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61937: LD_VAR 0 12
61941: PPUSH
61942: LD_VAR 0 8
61946: PPUSH
61947: LD_INT 0
61949: PPUSH
61950: CALL 63729 0 3
// end ;
61954: GO 61852
61956: POP
61957: POP
// if enchidnas then
61958: LD_VAR 0 4
61962: IFFALSE 62029
// for i = 1 to enchidnas do
61964: LD_ADDR_VAR 0 11
61968: PUSH
61969: DOUBLE
61970: LD_INT 1
61972: DEC
61973: ST_TO_ADDR
61974: LD_VAR 0 4
61978: PUSH
61979: FOR_TO
61980: IFFALSE 62027
// begin hc_class = 13 ;
61982: LD_ADDR_OWVAR 28
61986: PUSH
61987: LD_INT 13
61989: ST_TO_ADDR
// hc_gallery =  ;
61990: LD_ADDR_OWVAR 33
61994: PUSH
61995: LD_STRING 
61997: ST_TO_ADDR
// animal := CreateHuman ;
61998: LD_ADDR_VAR 0 12
62002: PUSH
62003: CALL_OW 44
62007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62008: LD_VAR 0 12
62012: PPUSH
62013: LD_VAR 0 8
62017: PPUSH
62018: LD_INT 0
62020: PPUSH
62021: CALL 63729 0 3
// end ;
62025: GO 61979
62027: POP
62028: POP
// if fishes then
62029: LD_VAR 0 7
62033: IFFALSE 62100
// for i = 1 to fishes do
62035: LD_ADDR_VAR 0 11
62039: PUSH
62040: DOUBLE
62041: LD_INT 1
62043: DEC
62044: ST_TO_ADDR
62045: LD_VAR 0 7
62049: PUSH
62050: FOR_TO
62051: IFFALSE 62098
// begin hc_class = 20 ;
62053: LD_ADDR_OWVAR 28
62057: PUSH
62058: LD_INT 20
62060: ST_TO_ADDR
// hc_gallery =  ;
62061: LD_ADDR_OWVAR 33
62065: PUSH
62066: LD_STRING 
62068: ST_TO_ADDR
// animal := CreateHuman ;
62069: LD_ADDR_VAR 0 12
62073: PUSH
62074: CALL_OW 44
62078: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62079: LD_VAR 0 12
62083: PPUSH
62084: LD_VAR 0 9
62088: PPUSH
62089: LD_INT 0
62091: PPUSH
62092: CALL 63729 0 3
// end ;
62096: GO 62050
62098: POP
62099: POP
// end ;
62100: LD_VAR 0 10
62104: RET
// export function WantHeal ( sci , unit ) ; begin
62105: LD_INT 0
62107: PPUSH
// if GetTaskList ( sci ) > 0 then
62108: LD_VAR 0 1
62112: PPUSH
62113: CALL_OW 437
62117: PUSH
62118: LD_INT 0
62120: GREATER
62121: IFFALSE 62191
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62123: LD_VAR 0 1
62127: PPUSH
62128: CALL_OW 437
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PUSH
62141: LD_STRING l
62143: EQUAL
62144: PUSH
62145: LD_VAR 0 1
62149: PPUSH
62150: CALL_OW 437
62154: PUSH
62155: LD_INT 1
62157: ARRAY
62158: PUSH
62159: LD_INT 4
62161: ARRAY
62162: PUSH
62163: LD_VAR 0 2
62167: EQUAL
62168: AND
62169: IFFALSE 62181
// result := true else
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: LD_INT 1
62178: ST_TO_ADDR
62179: GO 62189
// result := false ;
62181: LD_ADDR_VAR 0 3
62185: PUSH
62186: LD_INT 0
62188: ST_TO_ADDR
// end else
62189: GO 62199
// result := false ;
62191: LD_ADDR_VAR 0 3
62195: PUSH
62196: LD_INT 0
62198: ST_TO_ADDR
// end ;
62199: LD_VAR 0 3
62203: RET
// export function HealTarget ( sci ) ; begin
62204: LD_INT 0
62206: PPUSH
// if not sci then
62207: LD_VAR 0 1
62211: NOT
62212: IFFALSE 62216
// exit ;
62214: GO 62281
// result := 0 ;
62216: LD_ADDR_VAR 0 2
62220: PUSH
62221: LD_INT 0
62223: ST_TO_ADDR
// if GetTaskList ( sci ) then
62224: LD_VAR 0 1
62228: PPUSH
62229: CALL_OW 437
62233: IFFALSE 62281
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 437
62244: PUSH
62245: LD_INT 1
62247: ARRAY
62248: PUSH
62249: LD_INT 1
62251: ARRAY
62252: PUSH
62253: LD_STRING l
62255: EQUAL
62256: IFFALSE 62281
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62258: LD_ADDR_VAR 0 2
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: CALL_OW 437
62272: PUSH
62273: LD_INT 1
62275: ARRAY
62276: PUSH
62277: LD_INT 4
62279: ARRAY
62280: ST_TO_ADDR
// end ;
62281: LD_VAR 0 2
62285: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62286: LD_INT 0
62288: PPUSH
62289: PPUSH
62290: PPUSH
62291: PPUSH
// if not base_units then
62292: LD_VAR 0 1
62296: NOT
62297: IFFALSE 62301
// exit ;
62299: GO 62388
// result := false ;
62301: LD_ADDR_VAR 0 2
62305: PUSH
62306: LD_INT 0
62308: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62309: LD_ADDR_VAR 0 5
62313: PUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: LD_INT 21
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PPUSH
62329: CALL_OW 72
62333: ST_TO_ADDR
// if not tmp then
62334: LD_VAR 0 5
62338: NOT
62339: IFFALSE 62343
// exit ;
62341: GO 62388
// for i in tmp do
62343: LD_ADDR_VAR 0 3
62347: PUSH
62348: LD_VAR 0 5
62352: PUSH
62353: FOR_IN
62354: IFFALSE 62386
// begin result := EnemyInRange ( i , 22 ) ;
62356: LD_ADDR_VAR 0 2
62360: PUSH
62361: LD_VAR 0 3
62365: PPUSH
62366: LD_INT 22
62368: PPUSH
62369: CALL 59966 0 2
62373: ST_TO_ADDR
// if result then
62374: LD_VAR 0 2
62378: IFFALSE 62384
// exit ;
62380: POP
62381: POP
62382: GO 62388
// end ;
62384: GO 62353
62386: POP
62387: POP
// end ;
62388: LD_VAR 0 2
62392: RET
// export function FilterByTag ( units , tag ) ; begin
62393: LD_INT 0
62395: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62396: LD_ADDR_VAR 0 3
62400: PUSH
62401: LD_VAR 0 1
62405: PPUSH
62406: LD_INT 120
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PPUSH
62418: CALL_OW 72
62422: ST_TO_ADDR
// end ;
62423: LD_VAR 0 3
62427: RET
// export function IsDriver ( un ) ; begin
62428: LD_INT 0
62430: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62431: LD_ADDR_VAR 0 2
62435: PUSH
62436: LD_VAR 0 1
62440: PUSH
62441: LD_INT 55
62443: PUSH
62444: EMPTY
62445: LIST
62446: PPUSH
62447: CALL_OW 69
62451: IN
62452: ST_TO_ADDR
// end ;
62453: LD_VAR 0 2
62457: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62458: LD_INT 0
62460: PPUSH
62461: PPUSH
// list := [ ] ;
62462: LD_ADDR_VAR 0 5
62466: PUSH
62467: EMPTY
62468: ST_TO_ADDR
// case d of 0 :
62469: LD_VAR 0 3
62473: PUSH
62474: LD_INT 0
62476: DOUBLE
62477: EQUAL
62478: IFTRUE 62482
62480: GO 62615
62482: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62483: LD_ADDR_VAR 0 5
62487: PUSH
62488: LD_VAR 0 1
62492: PUSH
62493: LD_INT 4
62495: MINUS
62496: PUSH
62497: LD_VAR 0 2
62501: PUSH
62502: LD_INT 4
62504: MINUS
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 3
62521: MINUS
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 4
62543: PLUS
62544: PUSH
62545: LD_VAR 0 2
62549: PUSH
62550: LD_INT 4
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_INT 3
62565: PLUS
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: LD_INT 3
62574: PLUS
62575: PUSH
62576: LD_INT 5
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: PUSH
62584: LD_VAR 0 1
62588: PUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_INT 4
62596: PLUS
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: ST_TO_ADDR
// end ; 1 :
62613: GO 63313
62615: LD_INT 1
62617: DOUBLE
62618: EQUAL
62619: IFTRUE 62623
62621: GO 62756
62623: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62624: LD_ADDR_VAR 0 5
62628: PUSH
62629: LD_VAR 0 1
62633: PUSH
62634: LD_VAR 0 2
62638: PUSH
62639: LD_INT 4
62641: MINUS
62642: PUSH
62643: LD_INT 3
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: LD_VAR 0 1
62655: PUSH
62656: LD_INT 3
62658: MINUS
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 3
62667: MINUS
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 4
62684: MINUS
62685: PUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: PUSH
62699: LD_VAR 0 1
62703: PUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 3
62711: PLUS
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: LD_VAR 0 1
62725: PUSH
62726: LD_INT 4
62728: PLUS
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 4
62737: PLUS
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// end ; 2 :
62754: GO 63313
62756: LD_INT 2
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62764
62762: GO 62893
62764: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62765: LD_ADDR_VAR 0 5
62769: PUSH
62770: LD_VAR 0 1
62774: PUSH
62775: LD_VAR 0 2
62779: PUSH
62780: LD_INT 3
62782: MINUS
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: PUSH
62792: LD_VAR 0 1
62796: PUSH
62797: LD_INT 4
62799: PLUS
62800: PUSH
62801: LD_VAR 0 2
62805: PUSH
62806: LD_INT 4
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: LD_VAR 0 1
62818: PUSH
62819: LD_VAR 0 2
62823: PUSH
62824: LD_INT 4
62826: PLUS
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: LIST
62835: PUSH
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 3
62843: MINUS
62844: PUSH
62845: LD_VAR 0 2
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: PUSH
62858: LD_VAR 0 1
62862: PUSH
62863: LD_INT 4
62865: MINUS
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: LD_INT 4
62874: MINUS
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// end ; 3 :
62891: GO 63313
62893: LD_INT 3
62895: DOUBLE
62896: EQUAL
62897: IFTRUE 62901
62899: GO 63034
62901: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62902: LD_ADDR_VAR 0 5
62906: PUSH
62907: LD_VAR 0 1
62911: PUSH
62912: LD_INT 3
62914: PLUS
62915: PUSH
62916: LD_VAR 0 2
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: PUSH
62929: LD_VAR 0 1
62933: PUSH
62934: LD_INT 4
62936: PLUS
62937: PUSH
62938: LD_VAR 0 2
62942: PUSH
62943: LD_INT 4
62945: PLUS
62946: PUSH
62947: LD_INT 5
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 1
62959: PUSH
62960: LD_INT 4
62962: MINUS
62963: PUSH
62964: LD_VAR 0 2
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: PUSH
62977: LD_VAR 0 1
62981: PUSH
62982: LD_VAR 0 2
62986: PUSH
62987: LD_INT 4
62989: MINUS
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: LD_VAR 0 1
63003: PUSH
63004: LD_INT 3
63006: MINUS
63007: PUSH
63008: LD_VAR 0 2
63012: PUSH
63013: LD_INT 3
63015: MINUS
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// end ; 4 :
63032: GO 63313
63034: LD_INT 4
63036: DOUBLE
63037: EQUAL
63038: IFTRUE 63042
63040: GO 63175
63042: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_VAR 0 1
63052: PUSH
63053: LD_VAR 0 2
63057: PUSH
63058: LD_INT 4
63060: PLUS
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: PUSH
63070: LD_VAR 0 1
63074: PUSH
63075: LD_INT 3
63077: PLUS
63078: PUSH
63079: LD_VAR 0 2
63083: PUSH
63084: LD_INT 3
63086: PLUS
63087: PUSH
63088: LD_INT 5
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: PUSH
63096: LD_VAR 0 1
63100: PUSH
63101: LD_INT 4
63103: PLUS
63104: PUSH
63105: LD_VAR 0 2
63109: PUSH
63110: LD_INT 4
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: PUSH
63118: LD_VAR 0 1
63122: PUSH
63123: LD_VAR 0 2
63127: PUSH
63128: LD_INT 3
63130: MINUS
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: PUSH
63140: LD_VAR 0 1
63144: PUSH
63145: LD_INT 4
63147: MINUS
63148: PUSH
63149: LD_VAR 0 2
63153: PUSH
63154: LD_INT 4
63156: MINUS
63157: PUSH
63158: LD_INT 2
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// end ; 5 :
63173: GO 63313
63175: LD_INT 5
63177: DOUBLE
63178: EQUAL
63179: IFTRUE 63183
63181: GO 63312
63183: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63184: LD_ADDR_VAR 0 5
63188: PUSH
63189: LD_VAR 0 1
63193: PUSH
63194: LD_INT 4
63196: MINUS
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: LIST
63210: PUSH
63211: LD_VAR 0 1
63215: PUSH
63216: LD_VAR 0 2
63220: PUSH
63221: LD_INT 4
63223: MINUS
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: PUSH
63233: LD_VAR 0 1
63237: PUSH
63238: LD_INT 4
63240: PLUS
63241: PUSH
63242: LD_VAR 0 2
63246: PUSH
63247: LD_INT 4
63249: PLUS
63250: PUSH
63251: LD_INT 5
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: PUSH
63259: LD_VAR 0 1
63263: PUSH
63264: LD_INT 3
63266: PLUS
63267: PUSH
63268: LD_VAR 0 2
63272: PUSH
63273: LD_INT 4
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: PUSH
63281: LD_VAR 0 1
63285: PUSH
63286: LD_VAR 0 2
63290: PUSH
63291: LD_INT 3
63293: PLUS
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: ST_TO_ADDR
// end ; end ;
63310: GO 63313
63312: POP
// result := list ;
63313: LD_ADDR_VAR 0 4
63317: PUSH
63318: LD_VAR 0 5
63322: ST_TO_ADDR
// end ;
63323: LD_VAR 0 4
63327: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63328: LD_INT 0
63330: PPUSH
63331: PPUSH
63332: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63333: LD_VAR 0 1
63337: NOT
63338: PUSH
63339: LD_VAR 0 2
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: LD_INT 4
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: IN
63362: NOT
63363: OR
63364: IFFALSE 63368
// exit ;
63366: GO 63451
// tmp := [ ] ;
63368: LD_ADDR_VAR 0 5
63372: PUSH
63373: EMPTY
63374: ST_TO_ADDR
// for i in units do
63375: LD_ADDR_VAR 0 4
63379: PUSH
63380: LD_VAR 0 1
63384: PUSH
63385: FOR_IN
63386: IFFALSE 63420
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63388: LD_ADDR_VAR 0 5
63392: PUSH
63393: LD_VAR 0 5
63397: PPUSH
63398: LD_VAR 0 4
63402: PPUSH
63403: LD_VAR 0 2
63407: PPUSH
63408: CALL_OW 259
63412: PPUSH
63413: CALL 64824 0 2
63417: ST_TO_ADDR
63418: GO 63385
63420: POP
63421: POP
// if not tmp then
63422: LD_VAR 0 5
63426: NOT
63427: IFFALSE 63431
// exit ;
63429: GO 63451
// result := SortListByListDesc ( units , tmp ) ;
63431: LD_ADDR_VAR 0 3
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: LD_VAR 0 5
63445: PPUSH
63446: CALL_OW 77
63450: ST_TO_ADDR
// end ;
63451: LD_VAR 0 3
63455: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63456: LD_INT 0
63458: PPUSH
63459: PPUSH
63460: PPUSH
// result := false ;
63461: LD_ADDR_VAR 0 3
63465: PUSH
63466: LD_INT 0
63468: ST_TO_ADDR
// if not building then
63469: LD_VAR 0 2
63473: NOT
63474: IFFALSE 63478
// exit ;
63476: GO 63616
// x := GetX ( building ) ;
63478: LD_ADDR_VAR 0 4
63482: PUSH
63483: LD_VAR 0 2
63487: PPUSH
63488: CALL_OW 250
63492: ST_TO_ADDR
// y := GetY ( building ) ;
63493: LD_ADDR_VAR 0 5
63497: PUSH
63498: LD_VAR 0 2
63502: PPUSH
63503: CALL_OW 251
63507: ST_TO_ADDR
// if not x or not y then
63508: LD_VAR 0 4
63512: NOT
63513: PUSH
63514: LD_VAR 0 5
63518: NOT
63519: OR
63520: IFFALSE 63524
// exit ;
63522: GO 63616
// if GetTaskList ( unit ) then
63524: LD_VAR 0 1
63528: PPUSH
63529: CALL_OW 437
63533: IFFALSE 63616
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63535: LD_STRING e
63537: PUSH
63538: LD_VAR 0 1
63542: PPUSH
63543: CALL_OW 437
63547: PUSH
63548: LD_INT 1
63550: ARRAY
63551: PUSH
63552: LD_INT 1
63554: ARRAY
63555: EQUAL
63556: PUSH
63557: LD_VAR 0 4
63561: PUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: CALL_OW 437
63571: PUSH
63572: LD_INT 1
63574: ARRAY
63575: PUSH
63576: LD_INT 2
63578: ARRAY
63579: EQUAL
63580: AND
63581: PUSH
63582: LD_VAR 0 5
63586: PUSH
63587: LD_VAR 0 1
63591: PPUSH
63592: CALL_OW 437
63596: PUSH
63597: LD_INT 1
63599: ARRAY
63600: PUSH
63601: LD_INT 3
63603: ARRAY
63604: EQUAL
63605: AND
63606: IFFALSE 63616
// result := true end ;
63608: LD_ADDR_VAR 0 3
63612: PUSH
63613: LD_INT 1
63615: ST_TO_ADDR
// end ;
63616: LD_VAR 0 3
63620: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63621: LD_INT 0
63623: PPUSH
// result := false ;
63624: LD_ADDR_VAR 0 4
63628: PUSH
63629: LD_INT 0
63631: ST_TO_ADDR
// if GetTaskList ( unit ) then
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 437
63641: IFFALSE 63724
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63643: LD_STRING M
63645: PUSH
63646: LD_VAR 0 1
63650: PPUSH
63651: CALL_OW 437
63655: PUSH
63656: LD_INT 1
63658: ARRAY
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: EQUAL
63664: PUSH
63665: LD_VAR 0 2
63669: PUSH
63670: LD_VAR 0 1
63674: PPUSH
63675: CALL_OW 437
63679: PUSH
63680: LD_INT 1
63682: ARRAY
63683: PUSH
63684: LD_INT 2
63686: ARRAY
63687: EQUAL
63688: AND
63689: PUSH
63690: LD_VAR 0 3
63694: PUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: CALL_OW 437
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PUSH
63709: LD_INT 3
63711: ARRAY
63712: EQUAL
63713: AND
63714: IFFALSE 63724
// result := true ;
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_INT 1
63723: ST_TO_ADDR
// end ; end ;
63724: LD_VAR 0 4
63728: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63729: LD_INT 0
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
// if not unit or not area then
63735: LD_VAR 0 1
63739: NOT
63740: PUSH
63741: LD_VAR 0 2
63745: NOT
63746: OR
63747: IFFALSE 63751
// exit ;
63749: GO 63927
// tmp := AreaToList ( area , i ) ;
63751: LD_ADDR_VAR 0 6
63755: PUSH
63756: LD_VAR 0 2
63760: PPUSH
63761: LD_VAR 0 5
63765: PPUSH
63766: CALL_OW 517
63770: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63771: LD_ADDR_VAR 0 5
63775: PUSH
63776: DOUBLE
63777: LD_INT 1
63779: DEC
63780: ST_TO_ADDR
63781: LD_VAR 0 6
63785: PUSH
63786: LD_INT 1
63788: ARRAY
63789: PUSH
63790: FOR_TO
63791: IFFALSE 63925
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63793: LD_ADDR_VAR 0 7
63797: PUSH
63798: LD_VAR 0 6
63802: PUSH
63803: LD_INT 1
63805: ARRAY
63806: PUSH
63807: LD_VAR 0 5
63811: ARRAY
63812: PUSH
63813: LD_VAR 0 6
63817: PUSH
63818: LD_INT 2
63820: ARRAY
63821: PUSH
63822: LD_VAR 0 5
63826: ARRAY
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63832: LD_INT 92
63834: PUSH
63835: LD_VAR 0 7
63839: PUSH
63840: LD_INT 1
63842: ARRAY
63843: PUSH
63844: LD_VAR 0 7
63848: PUSH
63849: LD_INT 2
63851: ARRAY
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: PPUSH
63862: CALL_OW 69
63866: PUSH
63867: LD_INT 0
63869: EQUAL
63870: IFFALSE 63923
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_VAR 0 7
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: PPUSH
63886: LD_VAR 0 7
63890: PUSH
63891: LD_INT 2
63893: ARRAY
63894: PPUSH
63895: LD_VAR 0 3
63899: PPUSH
63900: CALL_OW 48
// result := IsPlaced ( unit ) ;
63904: LD_ADDR_VAR 0 4
63908: PUSH
63909: LD_VAR 0 1
63913: PPUSH
63914: CALL_OW 305
63918: ST_TO_ADDR
// exit ;
63919: POP
63920: POP
63921: GO 63927
// end ; end ;
63923: GO 63790
63925: POP
63926: POP
// end ;
63927: LD_VAR 0 4
63931: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
63936: PPUSH
// if not side or side > 8 then
63937: LD_VAR 0 1
63941: NOT
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_INT 8
63950: GREATER
63951: OR
63952: IFFALSE 63956
// exit ;
63954: GO 64143
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63956: LD_ADDR_VAR 0 4
63960: PUSH
63961: LD_INT 22
63963: PUSH
63964: LD_VAR 0 1
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 21
63975: PUSH
63976: LD_INT 3
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PPUSH
63987: CALL_OW 69
63991: ST_TO_ADDR
// if not tmp then
63992: LD_VAR 0 4
63996: NOT
63997: IFFALSE 64001
// exit ;
63999: GO 64143
// enable_addtolog := true ;
64001: LD_ADDR_OWVAR 81
64005: PUSH
64006: LD_INT 1
64008: ST_TO_ADDR
// AddToLog ( [ ) ;
64009: LD_STRING [
64011: PPUSH
64012: CALL_OW 561
// for i in tmp do
64016: LD_ADDR_VAR 0 3
64020: PUSH
64021: LD_VAR 0 4
64025: PUSH
64026: FOR_IN
64027: IFFALSE 64134
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64029: LD_STRING [
64031: PUSH
64032: LD_VAR 0 3
64036: PPUSH
64037: CALL_OW 266
64041: STR
64042: PUSH
64043: LD_STRING , 
64045: STR
64046: PUSH
64047: LD_VAR 0 3
64051: PPUSH
64052: CALL_OW 250
64056: STR
64057: PUSH
64058: LD_STRING , 
64060: STR
64061: PUSH
64062: LD_VAR 0 3
64066: PPUSH
64067: CALL_OW 251
64071: STR
64072: PUSH
64073: LD_STRING , 
64075: STR
64076: PUSH
64077: LD_VAR 0 3
64081: PPUSH
64082: CALL_OW 254
64086: STR
64087: PUSH
64088: LD_STRING , 
64090: STR
64091: PUSH
64092: LD_VAR 0 3
64096: PPUSH
64097: LD_INT 1
64099: PPUSH
64100: CALL_OW 268
64104: STR
64105: PUSH
64106: LD_STRING , 
64108: STR
64109: PUSH
64110: LD_VAR 0 3
64114: PPUSH
64115: LD_INT 2
64117: PPUSH
64118: CALL_OW 268
64122: STR
64123: PUSH
64124: LD_STRING ],
64126: STR
64127: PPUSH
64128: CALL_OW 561
// end ;
64132: GO 64026
64134: POP
64135: POP
// AddToLog ( ]; ) ;
64136: LD_STRING ];
64138: PPUSH
64139: CALL_OW 561
// end ;
64143: LD_VAR 0 2
64147: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64148: LD_INT 0
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
64154: PPUSH
// if not area or not rate or not max then
64155: LD_VAR 0 1
64159: NOT
64160: PUSH
64161: LD_VAR 0 2
64165: NOT
64166: OR
64167: PUSH
64168: LD_VAR 0 4
64172: NOT
64173: OR
64174: IFFALSE 64178
// exit ;
64176: GO 64367
// while 1 do
64178: LD_INT 1
64180: IFFALSE 64367
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64182: LD_ADDR_VAR 0 9
64186: PUSH
64187: LD_VAR 0 1
64191: PPUSH
64192: LD_INT 1
64194: PPUSH
64195: CALL_OW 287
64199: PUSH
64200: LD_INT 10
64202: MUL
64203: ST_TO_ADDR
// r := rate / 10 ;
64204: LD_ADDR_VAR 0 7
64208: PUSH
64209: LD_VAR 0 2
64213: PUSH
64214: LD_INT 10
64216: DIVREAL
64217: ST_TO_ADDR
// time := 1 1$00 ;
64218: LD_ADDR_VAR 0 8
64222: PUSH
64223: LD_INT 2100
64225: ST_TO_ADDR
// if amount < min then
64226: LD_VAR 0 9
64230: PUSH
64231: LD_VAR 0 3
64235: LESS
64236: IFFALSE 64254
// r := r * 2 else
64238: LD_ADDR_VAR 0 7
64242: PUSH
64243: LD_VAR 0 7
64247: PUSH
64248: LD_INT 2
64250: MUL
64251: ST_TO_ADDR
64252: GO 64280
// if amount > max then
64254: LD_VAR 0 9
64258: PUSH
64259: LD_VAR 0 4
64263: GREATER
64264: IFFALSE 64280
// r := r / 2 ;
64266: LD_ADDR_VAR 0 7
64270: PUSH
64271: LD_VAR 0 7
64275: PUSH
64276: LD_INT 2
64278: DIVREAL
64279: ST_TO_ADDR
// time := time / r ;
64280: LD_ADDR_VAR 0 8
64284: PUSH
64285: LD_VAR 0 8
64289: PUSH
64290: LD_VAR 0 7
64294: DIVREAL
64295: ST_TO_ADDR
// if time < 0 then
64296: LD_VAR 0 8
64300: PUSH
64301: LD_INT 0
64303: LESS
64304: IFFALSE 64321
// time := time * - 1 ;
64306: LD_ADDR_VAR 0 8
64310: PUSH
64311: LD_VAR 0 8
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: MUL
64320: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64321: LD_VAR 0 8
64325: PUSH
64326: LD_INT 35
64328: PPUSH
64329: LD_INT 875
64331: PPUSH
64332: CALL_OW 12
64336: PLUS
64337: PPUSH
64338: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64342: LD_INT 1
64344: PPUSH
64345: LD_INT 5
64347: PPUSH
64348: CALL_OW 12
64352: PPUSH
64353: LD_VAR 0 1
64357: PPUSH
64358: LD_INT 1
64360: PPUSH
64361: CALL_OW 55
// end ;
64365: GO 64178
// end ;
64367: LD_VAR 0 5
64371: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64372: LD_INT 0
64374: PPUSH
64375: PPUSH
64376: PPUSH
64377: PPUSH
64378: PPUSH
64379: PPUSH
64380: PPUSH
64381: PPUSH
// if not turrets or not factories then
64382: LD_VAR 0 1
64386: NOT
64387: PUSH
64388: LD_VAR 0 2
64392: NOT
64393: OR
64394: IFFALSE 64398
// exit ;
64396: GO 64705
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64398: LD_ADDR_VAR 0 10
64402: PUSH
64403: LD_INT 5
64405: PUSH
64406: LD_INT 6
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: LD_INT 5
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 24
64440: PUSH
64441: LD_INT 25
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 23
64450: PUSH
64451: LD_INT 27
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 42
64464: PUSH
64465: LD_INT 43
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 44
64474: PUSH
64475: LD_INT 46
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 45
64484: PUSH
64485: LD_INT 47
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: ST_TO_ADDR
// result := [ ] ;
64502: LD_ADDR_VAR 0 3
64506: PUSH
64507: EMPTY
64508: ST_TO_ADDR
// for i in turrets do
64509: LD_ADDR_VAR 0 4
64513: PUSH
64514: LD_VAR 0 1
64518: PUSH
64519: FOR_IN
64520: IFFALSE 64703
// begin nat := GetNation ( i ) ;
64522: LD_ADDR_VAR 0 7
64526: PUSH
64527: LD_VAR 0 4
64531: PPUSH
64532: CALL_OW 248
64536: ST_TO_ADDR
// weapon := 0 ;
64537: LD_ADDR_VAR 0 8
64541: PUSH
64542: LD_INT 0
64544: ST_TO_ADDR
// if not nat then
64545: LD_VAR 0 7
64549: NOT
64550: IFFALSE 64554
// continue ;
64552: GO 64519
// for j in list [ nat ] do
64554: LD_ADDR_VAR 0 5
64558: PUSH
64559: LD_VAR 0 10
64563: PUSH
64564: LD_VAR 0 7
64568: ARRAY
64569: PUSH
64570: FOR_IN
64571: IFFALSE 64612
// if GetBWeapon ( i ) = j [ 1 ] then
64573: LD_VAR 0 4
64577: PPUSH
64578: CALL_OW 269
64582: PUSH
64583: LD_VAR 0 5
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: EQUAL
64592: IFFALSE 64610
// begin weapon := j [ 2 ] ;
64594: LD_ADDR_VAR 0 8
64598: PUSH
64599: LD_VAR 0 5
64603: PUSH
64604: LD_INT 2
64606: ARRAY
64607: ST_TO_ADDR
// break ;
64608: GO 64612
// end ;
64610: GO 64570
64612: POP
64613: POP
// if not weapon then
64614: LD_VAR 0 8
64618: NOT
64619: IFFALSE 64623
// continue ;
64621: GO 64519
// for k in factories do
64623: LD_ADDR_VAR 0 6
64627: PUSH
64628: LD_VAR 0 2
64632: PUSH
64633: FOR_IN
64634: IFFALSE 64699
// begin weapons := AvailableWeaponList ( k ) ;
64636: LD_ADDR_VAR 0 9
64640: PUSH
64641: LD_VAR 0 6
64645: PPUSH
64646: CALL_OW 478
64650: ST_TO_ADDR
// if not weapons then
64651: LD_VAR 0 9
64655: NOT
64656: IFFALSE 64660
// continue ;
64658: GO 64633
// if weapon in weapons then
64660: LD_VAR 0 8
64664: PUSH
64665: LD_VAR 0 9
64669: IN
64670: IFFALSE 64697
// begin result := [ i , weapon ] ;
64672: LD_ADDR_VAR 0 3
64676: PUSH
64677: LD_VAR 0 4
64681: PUSH
64682: LD_VAR 0 8
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// exit ;
64691: POP
64692: POP
64693: POP
64694: POP
64695: GO 64705
// end ; end ;
64697: GO 64633
64699: POP
64700: POP
// end ;
64701: GO 64519
64703: POP
64704: POP
// end ;
64705: LD_VAR 0 3
64709: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64710: LD_INT 0
64712: PPUSH
// if not side or side > 8 then
64713: LD_VAR 0 3
64717: NOT
64718: PUSH
64719: LD_VAR 0 3
64723: PUSH
64724: LD_INT 8
64726: GREATER
64727: OR
64728: IFFALSE 64732
// exit ;
64730: GO 64791
// if not range then
64732: LD_VAR 0 4
64736: NOT
64737: IFFALSE 64748
// range := - 12 ;
64739: LD_ADDR_VAR 0 4
64743: PUSH
64744: LD_INT 12
64746: NEG
64747: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_VAR 0 2
64757: PPUSH
64758: LD_VAR 0 3
64762: PPUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: LD_VAR 0 3
64786: PPUSH
64787: CALL_OW 331
// end ;
64791: LD_VAR 0 5
64795: RET
// export function Video ( mode ) ; begin
64796: LD_INT 0
64798: PPUSH
// ingame_video = mode ;
64799: LD_ADDR_OWVAR 52
64803: PUSH
64804: LD_VAR 0 1
64808: ST_TO_ADDR
// interface_hidden = mode ;
64809: LD_ADDR_OWVAR 54
64813: PUSH
64814: LD_VAR 0 1
64818: ST_TO_ADDR
// end ;
64819: LD_VAR 0 2
64823: RET
// export function Join ( array , element ) ; begin
64824: LD_INT 0
64826: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64827: LD_ADDR_VAR 0 3
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 1
64844: PLUS
64845: PPUSH
64846: LD_VAR 0 2
64850: PPUSH
64851: CALL_OW 1
64855: ST_TO_ADDR
// end ;
64856: LD_VAR 0 3
64860: RET
// export function JoinUnion ( array , element ) ; begin
64861: LD_INT 0
64863: PPUSH
// result := array union element ;
64864: LD_ADDR_VAR 0 3
64868: PUSH
64869: LD_VAR 0 1
64873: PUSH
64874: LD_VAR 0 2
64878: UNION
64879: ST_TO_ADDR
// end ;
64880: LD_VAR 0 3
64884: RET
// export function GetBehemoths ( side ) ; begin
64885: LD_INT 0
64887: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64888: LD_ADDR_VAR 0 2
64892: PUSH
64893: LD_INT 22
64895: PUSH
64896: LD_VAR 0 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 31
64907: PUSH
64908: LD_INT 25
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PPUSH
64919: CALL_OW 69
64923: ST_TO_ADDR
// end ;
64924: LD_VAR 0 2
64928: RET
// export function Shuffle ( array ) ; var i , index ; begin
64929: LD_INT 0
64931: PPUSH
64932: PPUSH
64933: PPUSH
// result := [ ] ;
64934: LD_ADDR_VAR 0 2
64938: PUSH
64939: EMPTY
64940: ST_TO_ADDR
// if not array then
64941: LD_VAR 0 1
64945: NOT
64946: IFFALSE 64950
// exit ;
64948: GO 65049
// Randomize ;
64950: CALL_OW 10
// for i = array downto 1 do
64954: LD_ADDR_VAR 0 3
64958: PUSH
64959: DOUBLE
64960: LD_VAR 0 1
64964: INC
64965: ST_TO_ADDR
64966: LD_INT 1
64968: PUSH
64969: FOR_DOWNTO
64970: IFFALSE 65047
// begin index := rand ( 1 , array ) ;
64972: LD_ADDR_VAR 0 4
64976: PUSH
64977: LD_INT 1
64979: PPUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: CALL_OW 12
64989: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64990: LD_ADDR_VAR 0 2
64994: PUSH
64995: LD_VAR 0 2
64999: PPUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 1
65007: PLUS
65008: PPUSH
65009: LD_VAR 0 1
65013: PUSH
65014: LD_VAR 0 4
65018: ARRAY
65019: PPUSH
65020: CALL_OW 2
65024: ST_TO_ADDR
// array := Delete ( array , index ) ;
65025: LD_ADDR_VAR 0 1
65029: PUSH
65030: LD_VAR 0 1
65034: PPUSH
65035: LD_VAR 0 4
65039: PPUSH
65040: CALL_OW 3
65044: ST_TO_ADDR
// end ;
65045: GO 64969
65047: POP
65048: POP
// end ;
65049: LD_VAR 0 2
65053: RET
// export function GetBaseMaterials ( base ) ; begin
65054: LD_INT 0
65056: PPUSH
// result := [ 0 , 0 , 0 ] ;
65057: LD_ADDR_VAR 0 2
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: ST_TO_ADDR
// if not base then
65076: LD_VAR 0 1
65080: NOT
65081: IFFALSE 65085
// exit ;
65083: GO 65134
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65085: LD_ADDR_VAR 0 2
65089: PUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: LD_INT 1
65097: PPUSH
65098: CALL_OW 275
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_INT 2
65110: PPUSH
65111: CALL_OW 275
65115: PUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: LD_INT 3
65123: PPUSH
65124: CALL_OW 275
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: ST_TO_ADDR
// end ;
65134: LD_VAR 0 2
65138: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65139: LD_INT 0
65141: PPUSH
65142: PPUSH
// result := array ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 1
65152: ST_TO_ADDR
// if size >= result then
65153: LD_VAR 0 2
65157: PUSH
65158: LD_VAR 0 3
65162: GREATEREQUAL
65163: IFFALSE 65167
// exit ;
65165: GO 65217
// if size then
65167: LD_VAR 0 2
65171: IFFALSE 65217
// for i := array downto size do
65173: LD_ADDR_VAR 0 4
65177: PUSH
65178: DOUBLE
65179: LD_VAR 0 1
65183: INC
65184: ST_TO_ADDR
65185: LD_VAR 0 2
65189: PUSH
65190: FOR_DOWNTO
65191: IFFALSE 65215
// result := Delete ( result , result ) ;
65193: LD_ADDR_VAR 0 3
65197: PUSH
65198: LD_VAR 0 3
65202: PPUSH
65203: LD_VAR 0 3
65207: PPUSH
65208: CALL_OW 3
65212: ST_TO_ADDR
65213: GO 65190
65215: POP
65216: POP
// end ;
65217: LD_VAR 0 3
65221: RET
// export function ComExit ( unit ) ; var tmp ; begin
65222: LD_INT 0
65224: PPUSH
65225: PPUSH
// if not IsInUnit ( unit ) then
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 310
65235: NOT
65236: IFFALSE 65240
// exit ;
65238: GO 65300
// tmp := IsInUnit ( unit ) ;
65240: LD_ADDR_VAR 0 3
65244: PUSH
65245: LD_VAR 0 1
65249: PPUSH
65250: CALL_OW 310
65254: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65255: LD_VAR 0 3
65259: PPUSH
65260: CALL_OW 247
65264: PUSH
65265: LD_INT 2
65267: EQUAL
65268: IFFALSE 65281
// ComExitVehicle ( unit ) else
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 121
65279: GO 65290
// ComExitBuilding ( unit ) ;
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 122
// result := tmp ;
65290: LD_ADDR_VAR 0 2
65294: PUSH
65295: LD_VAR 0 3
65299: ST_TO_ADDR
// end ;
65300: LD_VAR 0 2
65304: RET
// export function ComExitAll ( units ) ; var i ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
// if not units then
65309: LD_VAR 0 1
65313: NOT
65314: IFFALSE 65318
// exit ;
65316: GO 65344
// for i in units do
65318: LD_ADDR_VAR 0 3
65322: PUSH
65323: LD_VAR 0 1
65327: PUSH
65328: FOR_IN
65329: IFFALSE 65342
// ComExit ( i ) ;
65331: LD_VAR 0 3
65335: PPUSH
65336: CALL 65222 0 1
65340: GO 65328
65342: POP
65343: POP
// end ;
65344: LD_VAR 0 2
65348: RET
// export function ResetHc ; begin
65349: LD_INT 0
65351: PPUSH
// InitHc ;
65352: CALL_OW 19
// hc_importance := 0 ;
65356: LD_ADDR_OWVAR 32
65360: PUSH
65361: LD_INT 0
65363: ST_TO_ADDR
// end ;
65364: LD_VAR 0 1
65368: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
65373: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65374: LD_ADDR_VAR 0 6
65378: PUSH
65379: LD_VAR 0 1
65383: PUSH
65384: LD_VAR 0 3
65388: PLUS
65389: PUSH
65390: LD_INT 2
65392: DIV
65393: ST_TO_ADDR
// if _x < 0 then
65394: LD_VAR 0 6
65398: PUSH
65399: LD_INT 0
65401: LESS
65402: IFFALSE 65419
// _x := _x * - 1 ;
65404: LD_ADDR_VAR 0 6
65408: PUSH
65409: LD_VAR 0 6
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: MUL
65418: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65419: LD_ADDR_VAR 0 7
65423: PUSH
65424: LD_VAR 0 2
65428: PUSH
65429: LD_VAR 0 4
65433: PLUS
65434: PUSH
65435: LD_INT 2
65437: DIV
65438: ST_TO_ADDR
// if _y < 0 then
65439: LD_VAR 0 7
65443: PUSH
65444: LD_INT 0
65446: LESS
65447: IFFALSE 65464
// _y := _y * - 1 ;
65449: LD_ADDR_VAR 0 7
65453: PUSH
65454: LD_VAR 0 7
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: MUL
65463: ST_TO_ADDR
// result := [ _x , _y ] ;
65464: LD_ADDR_VAR 0 5
65468: PUSH
65469: LD_VAR 0 6
65473: PUSH
65474: LD_VAR 0 7
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: ST_TO_ADDR
// end ;
65483: LD_VAR 0 5
65487: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
// task := GetTaskList ( unit ) ;
65494: LD_ADDR_VAR 0 7
65498: PUSH
65499: LD_VAR 0 1
65503: PPUSH
65504: CALL_OW 437
65508: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65509: LD_VAR 0 7
65513: NOT
65514: PUSH
65515: LD_VAR 0 1
65519: PPUSH
65520: LD_VAR 0 2
65524: PPUSH
65525: CALL_OW 308
65529: NOT
65530: AND
65531: IFFALSE 65535
// exit ;
65533: GO 65653
// if IsInArea ( unit , area ) then
65535: LD_VAR 0 1
65539: PPUSH
65540: LD_VAR 0 2
65544: PPUSH
65545: CALL_OW 308
65549: IFFALSE 65567
// begin ComMoveToArea ( unit , goAway ) ;
65551: LD_VAR 0 1
65555: PPUSH
65556: LD_VAR 0 3
65560: PPUSH
65561: CALL_OW 113
// exit ;
65565: GO 65653
// end ; if task [ 1 ] [ 1 ] <> M then
65567: LD_VAR 0 7
65571: PUSH
65572: LD_INT 1
65574: ARRAY
65575: PUSH
65576: LD_INT 1
65578: ARRAY
65579: PUSH
65580: LD_STRING M
65582: NONEQUAL
65583: IFFALSE 65587
// exit ;
65585: GO 65653
// x := task [ 1 ] [ 2 ] ;
65587: LD_ADDR_VAR 0 5
65591: PUSH
65592: LD_VAR 0 7
65596: PUSH
65597: LD_INT 1
65599: ARRAY
65600: PUSH
65601: LD_INT 2
65603: ARRAY
65604: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65605: LD_ADDR_VAR 0 6
65609: PUSH
65610: LD_VAR 0 7
65614: PUSH
65615: LD_INT 1
65617: ARRAY
65618: PUSH
65619: LD_INT 3
65621: ARRAY
65622: ST_TO_ADDR
// if InArea ( x , y , area ) then
65623: LD_VAR 0 5
65627: PPUSH
65628: LD_VAR 0 6
65632: PPUSH
65633: LD_VAR 0 2
65637: PPUSH
65638: CALL_OW 309
65642: IFFALSE 65653
// ComStop ( unit ) ;
65644: LD_VAR 0 1
65648: PPUSH
65649: CALL_OW 141
// end ;
65653: LD_VAR 0 4
65657: RET
// export function Abs ( value ) ; begin
65658: LD_INT 0
65660: PPUSH
// result := value ;
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: LD_VAR 0 1
65670: ST_TO_ADDR
// if value < 0 then
65671: LD_VAR 0 1
65675: PUSH
65676: LD_INT 0
65678: LESS
65679: IFFALSE 65696
// result := value * - 1 ;
65681: LD_ADDR_VAR 0 2
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: MUL
65695: ST_TO_ADDR
// end ;
65696: LD_VAR 0 2
65700: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65701: LD_INT 0
65703: PPUSH
65704: PPUSH
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
// if not unit or not building then
65711: LD_VAR 0 1
65715: NOT
65716: PUSH
65717: LD_VAR 0 2
65721: NOT
65722: OR
65723: IFFALSE 65727
// exit ;
65725: GO 65953
// x := GetX ( building ) ;
65727: LD_ADDR_VAR 0 4
65731: PUSH
65732: LD_VAR 0 2
65736: PPUSH
65737: CALL_OW 250
65741: ST_TO_ADDR
// y := GetY ( building ) ;
65742: LD_ADDR_VAR 0 6
65746: PUSH
65747: LD_VAR 0 2
65751: PPUSH
65752: CALL_OW 251
65756: ST_TO_ADDR
// d := GetDir ( building ) ;
65757: LD_ADDR_VAR 0 8
65761: PUSH
65762: LD_VAR 0 2
65766: PPUSH
65767: CALL_OW 254
65771: ST_TO_ADDR
// r := 4 ;
65772: LD_ADDR_VAR 0 9
65776: PUSH
65777: LD_INT 4
65779: ST_TO_ADDR
// for i := 1 to 5 do
65780: LD_ADDR_VAR 0 10
65784: PUSH
65785: DOUBLE
65786: LD_INT 1
65788: DEC
65789: ST_TO_ADDR
65790: LD_INT 5
65792: PUSH
65793: FOR_TO
65794: IFFALSE 65951
// begin _x := ShiftX ( x , d , r + i ) ;
65796: LD_ADDR_VAR 0 5
65800: PUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: LD_VAR 0 8
65810: PPUSH
65811: LD_VAR 0 9
65815: PUSH
65816: LD_VAR 0 10
65820: PLUS
65821: PPUSH
65822: CALL_OW 272
65826: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65827: LD_ADDR_VAR 0 7
65831: PUSH
65832: LD_VAR 0 6
65836: PPUSH
65837: LD_VAR 0 8
65841: PPUSH
65842: LD_VAR 0 9
65846: PUSH
65847: LD_VAR 0 10
65851: PLUS
65852: PPUSH
65853: CALL_OW 273
65857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65858: LD_VAR 0 5
65862: PPUSH
65863: LD_VAR 0 7
65867: PPUSH
65868: CALL_OW 488
65872: PUSH
65873: LD_VAR 0 5
65877: PPUSH
65878: LD_VAR 0 7
65882: PPUSH
65883: CALL_OW 428
65887: PPUSH
65888: CALL_OW 247
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: IN
65903: NOT
65904: AND
65905: IFFALSE 65949
// begin ComMoveXY ( unit , _x , _y ) ;
65907: LD_VAR 0 1
65911: PPUSH
65912: LD_VAR 0 5
65916: PPUSH
65917: LD_VAR 0 7
65921: PPUSH
65922: CALL_OW 111
// result := [ _x , _y ] ;
65926: LD_ADDR_VAR 0 3
65930: PUSH
65931: LD_VAR 0 5
65935: PUSH
65936: LD_VAR 0 7
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: ST_TO_ADDR
// exit ;
65945: POP
65946: POP
65947: GO 65953
// end ; end ;
65949: GO 65793
65951: POP
65952: POP
// end ;
65953: LD_VAR 0 3
65957: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65958: LD_INT 0
65960: PPUSH
65961: PPUSH
65962: PPUSH
// result := 0 ;
65963: LD_ADDR_VAR 0 3
65967: PUSH
65968: LD_INT 0
65970: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65971: LD_VAR 0 1
65975: PUSH
65976: LD_INT 0
65978: LESS
65979: PUSH
65980: LD_VAR 0 1
65984: PUSH
65985: LD_INT 8
65987: GREATER
65988: OR
65989: PUSH
65990: LD_VAR 0 2
65994: PUSH
65995: LD_INT 0
65997: LESS
65998: OR
65999: PUSH
66000: LD_VAR 0 2
66004: PUSH
66005: LD_INT 8
66007: GREATER
66008: OR
66009: IFFALSE 66013
// exit ;
66011: GO 66088
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66013: LD_ADDR_VAR 0 4
66017: PUSH
66018: LD_INT 22
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PPUSH
66030: CALL_OW 69
66034: PUSH
66035: FOR_IN
66036: IFFALSE 66086
// begin un := UnitShoot ( i ) ;
66038: LD_ADDR_VAR 0 5
66042: PUSH
66043: LD_VAR 0 4
66047: PPUSH
66048: CALL_OW 504
66052: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66053: LD_VAR 0 5
66057: PPUSH
66058: CALL_OW 255
66062: PUSH
66063: LD_VAR 0 1
66067: EQUAL
66068: IFFALSE 66084
// begin result := un ;
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_VAR 0 5
66079: ST_TO_ADDR
// exit ;
66080: POP
66081: POP
66082: GO 66088
// end ; end ;
66084: GO 66035
66086: POP
66087: POP
// end ;
66088: LD_VAR 0 3
66092: RET
// export function GetCargoBay ( units ) ; begin
66093: LD_INT 0
66095: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_VAR 0 1
66105: PPUSH
66106: LD_INT 2
66108: PUSH
66109: LD_INT 34
66111: PUSH
66112: LD_INT 12
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 34
66121: PUSH
66122: LD_INT 51
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 34
66131: PUSH
66132: LD_INT 32
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 34
66141: PUSH
66142: LD_INT 89
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: PPUSH
66156: CALL_OW 72
66160: ST_TO_ADDR
// end ;
66161: LD_VAR 0 2
66165: RET
// export function Negate ( value ) ; begin
66166: LD_INT 0
66168: PPUSH
// result := not value ;
66169: LD_ADDR_VAR 0 2
66173: PUSH
66174: LD_VAR 0 1
66178: NOT
66179: ST_TO_ADDR
// end ;
66180: LD_VAR 0 2
66184: RET
// export function Inc ( value ) ; begin
66185: LD_INT 0
66187: PPUSH
// result := value + 1 ;
66188: LD_ADDR_VAR 0 2
66192: PUSH
66193: LD_VAR 0 1
66197: PUSH
66198: LD_INT 1
66200: PLUS
66201: ST_TO_ADDR
// end ;
66202: LD_VAR 0 2
66206: RET
// export function Dec ( value ) ; begin
66207: LD_INT 0
66209: PPUSH
// result := value - 1 ;
66210: LD_ADDR_VAR 0 2
66214: PUSH
66215: LD_VAR 0 1
66219: PUSH
66220: LD_INT 1
66222: MINUS
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 2
66228: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
66233: PPUSH
66234: PPUSH
66235: PPUSH
66236: PPUSH
66237: PPUSH
66238: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66239: LD_VAR 0 1
66243: PPUSH
66244: LD_VAR 0 2
66248: PPUSH
66249: CALL_OW 488
66253: NOT
66254: PUSH
66255: LD_VAR 0 3
66259: PPUSH
66260: LD_VAR 0 4
66264: PPUSH
66265: CALL_OW 488
66269: NOT
66270: OR
66271: IFFALSE 66284
// begin result := - 1 ;
66273: LD_ADDR_VAR 0 5
66277: PUSH
66278: LD_INT 1
66280: NEG
66281: ST_TO_ADDR
// exit ;
66282: GO 66519
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66284: LD_ADDR_VAR 0 12
66288: PUSH
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_VAR 0 2
66298: PPUSH
66299: LD_VAR 0 3
66303: PPUSH
66304: LD_VAR 0 4
66308: PPUSH
66309: CALL 65369 0 4
66313: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66314: LD_ADDR_VAR 0 11
66318: PUSH
66319: LD_VAR 0 1
66323: PPUSH
66324: LD_VAR 0 2
66328: PPUSH
66329: LD_VAR 0 12
66333: PUSH
66334: LD_INT 1
66336: ARRAY
66337: PPUSH
66338: LD_VAR 0 12
66342: PUSH
66343: LD_INT 2
66345: ARRAY
66346: PPUSH
66347: CALL_OW 298
66351: ST_TO_ADDR
// distance := 9999 ;
66352: LD_ADDR_VAR 0 10
66356: PUSH
66357: LD_INT 9999
66359: ST_TO_ADDR
// for i := 0 to 5 do
66360: LD_ADDR_VAR 0 6
66364: PUSH
66365: DOUBLE
66366: LD_INT 0
66368: DEC
66369: ST_TO_ADDR
66370: LD_INT 5
66372: PUSH
66373: FOR_TO
66374: IFFALSE 66517
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66376: LD_ADDR_VAR 0 7
66380: PUSH
66381: LD_VAR 0 1
66385: PPUSH
66386: LD_VAR 0 6
66390: PPUSH
66391: LD_VAR 0 11
66395: PPUSH
66396: CALL_OW 272
66400: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66401: LD_ADDR_VAR 0 8
66405: PUSH
66406: LD_VAR 0 2
66410: PPUSH
66411: LD_VAR 0 6
66415: PPUSH
66416: LD_VAR 0 11
66420: PPUSH
66421: CALL_OW 273
66425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66426: LD_VAR 0 7
66430: PPUSH
66431: LD_VAR 0 8
66435: PPUSH
66436: CALL_OW 488
66440: NOT
66441: IFFALSE 66445
// continue ;
66443: GO 66373
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66445: LD_ADDR_VAR 0 9
66449: PUSH
66450: LD_VAR 0 12
66454: PUSH
66455: LD_INT 1
66457: ARRAY
66458: PPUSH
66459: LD_VAR 0 12
66463: PUSH
66464: LD_INT 2
66466: ARRAY
66467: PPUSH
66468: LD_VAR 0 7
66472: PPUSH
66473: LD_VAR 0 8
66477: PPUSH
66478: CALL_OW 298
66482: ST_TO_ADDR
// if tmp < distance then
66483: LD_VAR 0 9
66487: PUSH
66488: LD_VAR 0 10
66492: LESS
66493: IFFALSE 66515
// begin result := i ;
66495: LD_ADDR_VAR 0 5
66499: PUSH
66500: LD_VAR 0 6
66504: ST_TO_ADDR
// distance := tmp ;
66505: LD_ADDR_VAR 0 10
66509: PUSH
66510: LD_VAR 0 9
66514: ST_TO_ADDR
// end ; end ;
66515: GO 66373
66517: POP
66518: POP
// end ;
66519: LD_VAR 0 5
66523: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66524: LD_INT 0
66526: PPUSH
66527: PPUSH
// if not driver or not IsInUnit ( driver ) then
66528: LD_VAR 0 1
66532: NOT
66533: PUSH
66534: LD_VAR 0 1
66538: PPUSH
66539: CALL_OW 310
66543: NOT
66544: OR
66545: IFFALSE 66549
// exit ;
66547: GO 66639
// vehicle := IsInUnit ( driver ) ;
66549: LD_ADDR_VAR 0 3
66553: PUSH
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 310
66563: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66564: LD_VAR 0 1
66568: PPUSH
66569: LD_STRING \
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: PUSH
66599: LD_STRING E
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_VAR 0 3
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PPUSH
66635: CALL_OW 446
// end ;
66639: LD_VAR 0 2
66643: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66644: LD_INT 0
66646: PPUSH
66647: PPUSH
// if not driver or not IsInUnit ( driver ) then
66648: LD_VAR 0 1
66652: NOT
66653: PUSH
66654: LD_VAR 0 1
66658: PPUSH
66659: CALL_OW 310
66663: NOT
66664: OR
66665: IFFALSE 66669
// exit ;
66667: GO 66759
// vehicle := IsInUnit ( driver ) ;
66669: LD_ADDR_VAR 0 3
66673: PUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: CALL_OW 310
66683: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66684: LD_VAR 0 1
66688: PPUSH
66689: LD_STRING \
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: PUSH
66719: LD_STRING E
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_VAR 0 3
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PPUSH
66755: CALL_OW 447
// end ;
66759: LD_VAR 0 2
66763: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66764: LD_INT 0
66766: PPUSH
66767: PPUSH
66768: PPUSH
// tmp := [ ] ;
66769: LD_ADDR_VAR 0 5
66773: PUSH
66774: EMPTY
66775: ST_TO_ADDR
// for i in units do
66776: LD_ADDR_VAR 0 4
66780: PUSH
66781: LD_VAR 0 1
66785: PUSH
66786: FOR_IN
66787: IFFALSE 66825
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66789: LD_ADDR_VAR 0 5
66793: PUSH
66794: LD_VAR 0 5
66798: PPUSH
66799: LD_VAR 0 5
66803: PUSH
66804: LD_INT 1
66806: PLUS
66807: PPUSH
66808: LD_VAR 0 4
66812: PPUSH
66813: CALL_OW 256
66817: PPUSH
66818: CALL_OW 2
66822: ST_TO_ADDR
66823: GO 66786
66825: POP
66826: POP
// if not tmp then
66827: LD_VAR 0 5
66831: NOT
66832: IFFALSE 66836
// exit ;
66834: GO 66884
// if asc then
66836: LD_VAR 0 2
66840: IFFALSE 66864
// result := SortListByListAsc ( units , tmp ) else
66842: LD_ADDR_VAR 0 3
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: LD_VAR 0 5
66856: PPUSH
66857: CALL_OW 76
66861: ST_TO_ADDR
66862: GO 66884
// result := SortListByListDesc ( units , tmp ) ;
66864: LD_ADDR_VAR 0 3
66868: PUSH
66869: LD_VAR 0 1
66873: PPUSH
66874: LD_VAR 0 5
66878: PPUSH
66879: CALL_OW 77
66883: ST_TO_ADDR
// end ;
66884: LD_VAR 0 3
66888: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66889: LD_INT 0
66891: PPUSH
66892: PPUSH
// task := GetTaskList ( mech ) ;
66893: LD_ADDR_VAR 0 4
66897: PUSH
66898: LD_VAR 0 1
66902: PPUSH
66903: CALL_OW 437
66907: ST_TO_ADDR
// if not task then
66908: LD_VAR 0 4
66912: NOT
66913: IFFALSE 66917
// exit ;
66915: GO 66959
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66917: LD_ADDR_VAR 0 3
66921: PUSH
66922: LD_VAR 0 4
66926: PUSH
66927: LD_INT 1
66929: ARRAY
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: PUSH
66935: LD_STRING r
66937: EQUAL
66938: PUSH
66939: LD_VAR 0 4
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: PUSH
66948: LD_INT 4
66950: ARRAY
66951: PUSH
66952: LD_VAR 0 2
66956: EQUAL
66957: AND
66958: ST_TO_ADDR
// end ;
66959: LD_VAR 0 3
66963: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66964: LD_INT 0
66966: PPUSH
// SetDir ( unit , d ) ;
66967: LD_VAR 0 1
66971: PPUSH
66972: LD_VAR 0 4
66976: PPUSH
66977: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66981: LD_VAR 0 1
66985: PPUSH
66986: LD_VAR 0 2
66990: PPUSH
66991: LD_VAR 0 3
66995: PPUSH
66996: LD_VAR 0 5
67000: PPUSH
67001: CALL_OW 48
// end ;
67005: LD_VAR 0 6
67009: RET
// export function ToNaturalNumber ( number ) ; begin
67010: LD_INT 0
67012: PPUSH
// result := number div 1 ;
67013: LD_ADDR_VAR 0 2
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_INT 1
67025: DIV
67026: ST_TO_ADDR
// if number < 0 then
67027: LD_VAR 0 1
67031: PUSH
67032: LD_INT 0
67034: LESS
67035: IFFALSE 67045
// result := 0 ;
67037: LD_ADDR_VAR 0 2
67041: PUSH
67042: LD_INT 0
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 2
67049: RET
// export function SortByClass ( units , class ) ; var un ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
// if not units or not class then
67054: LD_VAR 0 1
67058: NOT
67059: PUSH
67060: LD_VAR 0 2
67064: NOT
67065: OR
67066: IFFALSE 67070
// exit ;
67068: GO 67165
// result := [ ] ;
67070: LD_ADDR_VAR 0 3
67074: PUSH
67075: EMPTY
67076: ST_TO_ADDR
// for un in units do
67077: LD_ADDR_VAR 0 4
67081: PUSH
67082: LD_VAR 0 1
67086: PUSH
67087: FOR_IN
67088: IFFALSE 67163
// if GetClass ( un ) = class then
67090: LD_VAR 0 4
67094: PPUSH
67095: CALL_OW 257
67099: PUSH
67100: LD_VAR 0 2
67104: EQUAL
67105: IFFALSE 67132
// result := Insert ( result , 1 , un ) else
67107: LD_ADDR_VAR 0 3
67111: PUSH
67112: LD_VAR 0 3
67116: PPUSH
67117: LD_INT 1
67119: PPUSH
67120: LD_VAR 0 4
67124: PPUSH
67125: CALL_OW 2
67129: ST_TO_ADDR
67130: GO 67161
// result := Replace ( result , result + 1 , un ) ;
67132: LD_ADDR_VAR 0 3
67136: PUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: LD_VAR 0 3
67146: PUSH
67147: LD_INT 1
67149: PLUS
67150: PPUSH
67151: LD_VAR 0 4
67155: PPUSH
67156: CALL_OW 1
67160: ST_TO_ADDR
67161: GO 67087
67163: POP
67164: POP
// end ;
67165: LD_VAR 0 3
67169: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67170: LD_INT 0
67172: PPUSH
67173: PPUSH
67174: PPUSH
67175: PPUSH
67176: PPUSH
67177: PPUSH
67178: PPUSH
// result := [ ] ;
67179: LD_ADDR_VAR 0 4
67183: PUSH
67184: EMPTY
67185: ST_TO_ADDR
// if x - r < 0 then
67186: LD_VAR 0 1
67190: PUSH
67191: LD_VAR 0 3
67195: MINUS
67196: PUSH
67197: LD_INT 0
67199: LESS
67200: IFFALSE 67212
// min_x := 0 else
67202: LD_ADDR_VAR 0 8
67206: PUSH
67207: LD_INT 0
67209: ST_TO_ADDR
67210: GO 67228
// min_x := x - r ;
67212: LD_ADDR_VAR 0 8
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_VAR 0 3
67226: MINUS
67227: ST_TO_ADDR
// if y - r < 0 then
67228: LD_VAR 0 2
67232: PUSH
67233: LD_VAR 0 3
67237: MINUS
67238: PUSH
67239: LD_INT 0
67241: LESS
67242: IFFALSE 67254
// min_y := 0 else
67244: LD_ADDR_VAR 0 7
67248: PUSH
67249: LD_INT 0
67251: ST_TO_ADDR
67252: GO 67270
// min_y := y - r ;
67254: LD_ADDR_VAR 0 7
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: LD_VAR 0 3
67268: MINUS
67269: ST_TO_ADDR
// max_x := x + r ;
67270: LD_ADDR_VAR 0 9
67274: PUSH
67275: LD_VAR 0 1
67279: PUSH
67280: LD_VAR 0 3
67284: PLUS
67285: ST_TO_ADDR
// max_y := y + r ;
67286: LD_ADDR_VAR 0 10
67290: PUSH
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 3
67300: PLUS
67301: ST_TO_ADDR
// for _x = min_x to max_x do
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: DOUBLE
67308: LD_VAR 0 8
67312: DEC
67313: ST_TO_ADDR
67314: LD_VAR 0 9
67318: PUSH
67319: FOR_TO
67320: IFFALSE 67421
// for _y = min_y to max_y do
67322: LD_ADDR_VAR 0 6
67326: PUSH
67327: DOUBLE
67328: LD_VAR 0 7
67332: DEC
67333: ST_TO_ADDR
67334: LD_VAR 0 10
67338: PUSH
67339: FOR_TO
67340: IFFALSE 67417
// begin if not ValidHex ( _x , _y ) then
67342: LD_VAR 0 5
67346: PPUSH
67347: LD_VAR 0 6
67351: PPUSH
67352: CALL_OW 488
67356: NOT
67357: IFFALSE 67361
// continue ;
67359: GO 67339
// if GetResourceTypeXY ( _x , _y ) then
67361: LD_VAR 0 5
67365: PPUSH
67366: LD_VAR 0 6
67370: PPUSH
67371: CALL_OW 283
67375: IFFALSE 67415
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67377: LD_ADDR_VAR 0 4
67381: PUSH
67382: LD_VAR 0 4
67386: PPUSH
67387: LD_VAR 0 4
67391: PUSH
67392: LD_INT 1
67394: PLUS
67395: PPUSH
67396: LD_VAR 0 5
67400: PUSH
67401: LD_VAR 0 6
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PPUSH
67410: CALL_OW 1
67414: ST_TO_ADDR
// end ;
67415: GO 67339
67417: POP
67418: POP
67419: GO 67319
67421: POP
67422: POP
// end ;
67423: LD_VAR 0 4
67427: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67428: LD_INT 0
67430: PPUSH
67431: PPUSH
67432: PPUSH
67433: PPUSH
67434: PPUSH
67435: PPUSH
67436: PPUSH
67437: PPUSH
// if not units then
67438: LD_VAR 0 1
67442: NOT
67443: IFFALSE 67447
// exit ;
67445: GO 67975
// result := UnitFilter ( units , [ f_ok ] ) ;
67447: LD_ADDR_VAR 0 3
67451: PUSH
67452: LD_VAR 0 1
67456: PPUSH
67457: LD_INT 50
67459: PUSH
67460: EMPTY
67461: LIST
67462: PPUSH
67463: CALL_OW 72
67467: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67468: LD_ADDR_VAR 0 8
67472: PUSH
67473: LD_VAR 0 1
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PPUSH
67482: CALL_OW 255
67486: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67487: LD_ADDR_VAR 0 10
67491: PUSH
67492: LD_INT 29
67494: PUSH
67495: LD_INT 91
67497: PUSH
67498: LD_INT 49
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// if not result then
67506: LD_VAR 0 3
67510: NOT
67511: IFFALSE 67515
// exit ;
67513: GO 67975
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67515: LD_ADDR_VAR 0 5
67519: PUSH
67520: LD_INT 81
67522: PUSH
67523: LD_VAR 0 8
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PPUSH
67532: CALL_OW 69
67536: ST_TO_ADDR
// for i in result do
67537: LD_ADDR_VAR 0 4
67541: PUSH
67542: LD_VAR 0 3
67546: PUSH
67547: FOR_IN
67548: IFFALSE 67973
// begin tag := GetTag ( i ) + 1 ;
67550: LD_ADDR_VAR 0 9
67554: PUSH
67555: LD_VAR 0 4
67559: PPUSH
67560: CALL_OW 110
67564: PUSH
67565: LD_INT 1
67567: PLUS
67568: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67569: LD_ADDR_VAR 0 7
67573: PUSH
67574: LD_VAR 0 4
67578: PPUSH
67579: CALL_OW 250
67583: PPUSH
67584: LD_VAR 0 4
67588: PPUSH
67589: CALL_OW 251
67593: PPUSH
67594: LD_INT 4
67596: PPUSH
67597: CALL 67170 0 3
67601: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67602: LD_VAR 0 4
67606: PPUSH
67607: CALL_OW 247
67611: PUSH
67612: LD_INT 2
67614: EQUAL
67615: PUSH
67616: LD_VAR 0 7
67620: PUSH
67621: LD_INT 2
67623: GREATER
67624: AND
67625: PUSH
67626: LD_VAR 0 4
67630: PPUSH
67631: CALL_OW 264
67635: PUSH
67636: LD_VAR 0 10
67640: IN
67641: NOT
67642: AND
67643: IFFALSE 67682
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67645: LD_VAR 0 4
67649: PPUSH
67650: LD_VAR 0 7
67654: PUSH
67655: LD_INT 1
67657: ARRAY
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PPUSH
67663: LD_VAR 0 7
67667: PUSH
67668: LD_INT 1
67670: ARRAY
67671: PUSH
67672: LD_INT 2
67674: ARRAY
67675: PPUSH
67676: CALL_OW 116
67680: GO 67971
// if path > tag then
67682: LD_VAR 0 2
67686: PUSH
67687: LD_VAR 0 9
67691: GREATER
67692: IFFALSE 67900
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67694: LD_ADDR_VAR 0 6
67698: PUSH
67699: LD_VAR 0 5
67703: PPUSH
67704: LD_INT 91
67706: PUSH
67707: LD_VAR 0 4
67711: PUSH
67712: LD_INT 8
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: PPUSH
67720: CALL_OW 72
67724: ST_TO_ADDR
// if nearEnemy then
67725: LD_VAR 0 6
67729: IFFALSE 67798
// begin if GetWeapon ( i ) = ru_time_lapser then
67731: LD_VAR 0 4
67735: PPUSH
67736: CALL_OW 264
67740: PUSH
67741: LD_INT 49
67743: EQUAL
67744: IFFALSE 67772
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67746: LD_VAR 0 4
67750: PPUSH
67751: LD_VAR 0 6
67755: PPUSH
67756: LD_VAR 0 4
67760: PPUSH
67761: CALL_OW 74
67765: PPUSH
67766: CALL_OW 112
67770: GO 67796
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67772: LD_VAR 0 4
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_VAR 0 4
67786: PPUSH
67787: CALL_OW 74
67791: PPUSH
67792: CALL 69046 0 2
// end else
67796: GO 67898
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67798: LD_VAR 0 4
67802: PPUSH
67803: LD_VAR 0 2
67807: PUSH
67808: LD_VAR 0 9
67812: ARRAY
67813: PUSH
67814: LD_INT 1
67816: ARRAY
67817: PPUSH
67818: LD_VAR 0 2
67822: PUSH
67823: LD_VAR 0 9
67827: ARRAY
67828: PUSH
67829: LD_INT 2
67831: ARRAY
67832: PPUSH
67833: CALL_OW 297
67837: PUSH
67838: LD_INT 6
67840: GREATER
67841: IFFALSE 67884
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67843: LD_VAR 0 4
67847: PPUSH
67848: LD_VAR 0 2
67852: PUSH
67853: LD_VAR 0 9
67857: ARRAY
67858: PUSH
67859: LD_INT 1
67861: ARRAY
67862: PPUSH
67863: LD_VAR 0 2
67867: PUSH
67868: LD_VAR 0 9
67872: ARRAY
67873: PUSH
67874: LD_INT 2
67876: ARRAY
67877: PPUSH
67878: CALL_OW 114
67882: GO 67898
// SetTag ( i , tag ) ;
67884: LD_VAR 0 4
67888: PPUSH
67889: LD_VAR 0 9
67893: PPUSH
67894: CALL_OW 109
// end else
67898: GO 67971
// if enemy then
67900: LD_VAR 0 5
67904: IFFALSE 67971
// begin if GetWeapon ( i ) = ru_time_lapser then
67906: LD_VAR 0 4
67910: PPUSH
67911: CALL_OW 264
67915: PUSH
67916: LD_INT 49
67918: EQUAL
67919: IFFALSE 67947
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67921: LD_VAR 0 4
67925: PPUSH
67926: LD_VAR 0 5
67930: PPUSH
67931: LD_VAR 0 4
67935: PPUSH
67936: CALL_OW 74
67940: PPUSH
67941: CALL_OW 112
67945: GO 67971
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67947: LD_VAR 0 4
67951: PPUSH
67952: LD_VAR 0 5
67956: PPUSH
67957: LD_VAR 0 4
67961: PPUSH
67962: CALL_OW 74
67966: PPUSH
67967: CALL 69046 0 2
// end ; end ;
67971: GO 67547
67973: POP
67974: POP
// end ;
67975: LD_VAR 0 3
67979: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
67984: PPUSH
// if not unit or IsInUnit ( unit ) then
67985: LD_VAR 0 1
67989: NOT
67990: PUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: CALL_OW 310
68000: OR
68001: IFFALSE 68005
// exit ;
68003: GO 68096
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68005: LD_ADDR_VAR 0 4
68009: PUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: CALL_OW 250
68019: PPUSH
68020: LD_VAR 0 2
68024: PPUSH
68025: LD_INT 1
68027: PPUSH
68028: CALL_OW 272
68032: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68033: LD_ADDR_VAR 0 5
68037: PUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: CALL_OW 251
68047: PPUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: LD_INT 1
68055: PPUSH
68056: CALL_OW 273
68060: ST_TO_ADDR
// if ValidHex ( x , y ) then
68061: LD_VAR 0 4
68065: PPUSH
68066: LD_VAR 0 5
68070: PPUSH
68071: CALL_OW 488
68075: IFFALSE 68096
// ComTurnXY ( unit , x , y ) ;
68077: LD_VAR 0 1
68081: PPUSH
68082: LD_VAR 0 4
68086: PPUSH
68087: LD_VAR 0 5
68091: PPUSH
68092: CALL_OW 118
// end ;
68096: LD_VAR 0 3
68100: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68101: LD_INT 0
68103: PPUSH
68104: PPUSH
// result := false ;
68105: LD_ADDR_VAR 0 3
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// if not units then
68113: LD_VAR 0 2
68117: NOT
68118: IFFALSE 68122
// exit ;
68120: GO 68167
// for i in units do
68122: LD_ADDR_VAR 0 4
68126: PUSH
68127: LD_VAR 0 2
68131: PUSH
68132: FOR_IN
68133: IFFALSE 68165
// if See ( side , i ) then
68135: LD_VAR 0 1
68139: PPUSH
68140: LD_VAR 0 4
68144: PPUSH
68145: CALL_OW 292
68149: IFFALSE 68163
// begin result := true ;
68151: LD_ADDR_VAR 0 3
68155: PUSH
68156: LD_INT 1
68158: ST_TO_ADDR
// exit ;
68159: POP
68160: POP
68161: GO 68167
// end ;
68163: GO 68132
68165: POP
68166: POP
// end ;
68167: LD_VAR 0 3
68171: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68172: LD_INT 0
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
// if not unit or not points then
68178: LD_VAR 0 1
68182: NOT
68183: PUSH
68184: LD_VAR 0 2
68188: NOT
68189: OR
68190: IFFALSE 68194
// exit ;
68192: GO 68284
// dist := 99999 ;
68194: LD_ADDR_VAR 0 5
68198: PUSH
68199: LD_INT 99999
68201: ST_TO_ADDR
// for i in points do
68202: LD_ADDR_VAR 0 4
68206: PUSH
68207: LD_VAR 0 2
68211: PUSH
68212: FOR_IN
68213: IFFALSE 68282
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68215: LD_ADDR_VAR 0 6
68219: PUSH
68220: LD_VAR 0 1
68224: PPUSH
68225: LD_VAR 0 4
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: PPUSH
68234: LD_VAR 0 4
68238: PUSH
68239: LD_INT 2
68241: ARRAY
68242: PPUSH
68243: CALL_OW 297
68247: ST_TO_ADDR
// if tmpDist < dist then
68248: LD_VAR 0 6
68252: PUSH
68253: LD_VAR 0 5
68257: LESS
68258: IFFALSE 68280
// begin result := i ;
68260: LD_ADDR_VAR 0 3
68264: PUSH
68265: LD_VAR 0 4
68269: ST_TO_ADDR
// dist := tmpDist ;
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: LD_VAR 0 6
68279: ST_TO_ADDR
// end ; end ;
68280: GO 68212
68282: POP
68283: POP
// end ;
68284: LD_VAR 0 3
68288: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68289: LD_INT 0
68291: PPUSH
// uc_side := side ;
68292: LD_ADDR_OWVAR 20
68296: PUSH
68297: LD_VAR 0 1
68301: ST_TO_ADDR
// uc_nation := 3 ;
68302: LD_ADDR_OWVAR 21
68306: PUSH
68307: LD_INT 3
68309: ST_TO_ADDR
// vc_chassis := 25 ;
68310: LD_ADDR_OWVAR 37
68314: PUSH
68315: LD_INT 25
68317: ST_TO_ADDR
// vc_engine := engine_siberite ;
68318: LD_ADDR_OWVAR 39
68322: PUSH
68323: LD_INT 3
68325: ST_TO_ADDR
// vc_control := control_computer ;
68326: LD_ADDR_OWVAR 38
68330: PUSH
68331: LD_INT 3
68333: ST_TO_ADDR
// vc_weapon := 59 ;
68334: LD_ADDR_OWVAR 40
68338: PUSH
68339: LD_INT 59
68341: ST_TO_ADDR
// result := CreateVehicle ;
68342: LD_ADDR_VAR 0 5
68346: PUSH
68347: CALL_OW 45
68351: ST_TO_ADDR
// SetDir ( result , d ) ;
68352: LD_VAR 0 5
68356: PPUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68366: LD_VAR 0 5
68370: PPUSH
68371: LD_VAR 0 2
68375: PPUSH
68376: LD_VAR 0 3
68380: PPUSH
68381: LD_INT 0
68383: PPUSH
68384: CALL_OW 48
// end ;
68388: LD_VAR 0 5
68392: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68393: LD_INT 0
68395: PPUSH
68396: PPUSH
68397: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68398: LD_ADDR_VAR 0 2
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: LD_INT 0
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68421: LD_VAR 0 1
68425: NOT
68426: PUSH
68427: LD_VAR 0 1
68431: PPUSH
68432: CALL_OW 264
68436: PUSH
68437: LD_INT 12
68439: PUSH
68440: LD_INT 51
68442: PUSH
68443: LD_INT 32
68445: PUSH
68446: LD_INT 89
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: IN
68455: NOT
68456: OR
68457: IFFALSE 68461
// exit ;
68459: GO 68559
// for i := 1 to 3 do
68461: LD_ADDR_VAR 0 3
68465: PUSH
68466: DOUBLE
68467: LD_INT 1
68469: DEC
68470: ST_TO_ADDR
68471: LD_INT 3
68473: PUSH
68474: FOR_TO
68475: IFFALSE 68557
// begin tmp := GetCargo ( cargo , i ) ;
68477: LD_ADDR_VAR 0 4
68481: PUSH
68482: LD_VAR 0 1
68486: PPUSH
68487: LD_VAR 0 3
68491: PPUSH
68492: CALL_OW 289
68496: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68497: LD_ADDR_VAR 0 2
68501: PUSH
68502: LD_VAR 0 2
68506: PPUSH
68507: LD_VAR 0 3
68511: PPUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: CALL_OW 1
68521: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68522: LD_ADDR_VAR 0 2
68526: PUSH
68527: LD_VAR 0 2
68531: PPUSH
68532: LD_INT 4
68534: PPUSH
68535: LD_VAR 0 2
68539: PUSH
68540: LD_INT 4
68542: ARRAY
68543: PUSH
68544: LD_VAR 0 4
68548: PLUS
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// end ;
68555: GO 68474
68557: POP
68558: POP
// end ;
68559: LD_VAR 0 2
68563: RET
// export function Length ( array ) ; begin
68564: LD_INT 0
68566: PPUSH
// result := array + 0 ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_VAR 0 1
68576: PUSH
68577: LD_INT 0
68579: PLUS
68580: ST_TO_ADDR
// end ;
68581: LD_VAR 0 2
68585: RET
// export function PrepareArray ( array ) ; begin
68586: LD_INT 0
68588: PPUSH
// result := array diff 0 ;
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: LD_VAR 0 1
68598: PUSH
68599: LD_INT 0
68601: DIFF
68602: ST_TO_ADDR
// if not result [ 1 ] then
68603: LD_VAR 0 2
68607: PUSH
68608: LD_INT 1
68610: ARRAY
68611: NOT
68612: IFFALSE 68632
// result := Delete ( result , 1 ) ;
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: LD_INT 1
68626: PPUSH
68627: CALL_OW 3
68631: ST_TO_ADDR
// end ;
68632: LD_VAR 0 2
68636: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68637: LD_INT 0
68639: PPUSH
68640: PPUSH
68641: PPUSH
68642: PPUSH
// sibRocketRange := 25 ;
68643: LD_ADDR_VAR 0 6
68647: PUSH
68648: LD_INT 25
68650: ST_TO_ADDR
// result := false ;
68651: LD_ADDR_VAR 0 4
68655: PUSH
68656: LD_INT 0
68658: ST_TO_ADDR
// for i := 0 to 5 do
68659: LD_ADDR_VAR 0 5
68663: PUSH
68664: DOUBLE
68665: LD_INT 0
68667: DEC
68668: ST_TO_ADDR
68669: LD_INT 5
68671: PUSH
68672: FOR_TO
68673: IFFALSE 68740
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_VAR 0 5
68684: PPUSH
68685: LD_VAR 0 6
68689: PPUSH
68690: CALL_OW 272
68694: PPUSH
68695: LD_VAR 0 2
68699: PPUSH
68700: LD_VAR 0 5
68704: PPUSH
68705: LD_VAR 0 6
68709: PPUSH
68710: CALL_OW 273
68714: PPUSH
68715: LD_VAR 0 3
68719: PPUSH
68720: CALL_OW 309
68724: IFFALSE 68738
// begin result := true ;
68726: LD_ADDR_VAR 0 4
68730: PUSH
68731: LD_INT 1
68733: ST_TO_ADDR
// exit ;
68734: POP
68735: POP
68736: GO 68742
// end ;
68738: GO 68672
68740: POP
68741: POP
// end ;
68742: LD_VAR 0 4
68746: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68747: LD_INT 0
68749: PPUSH
68750: PPUSH
68751: PPUSH
// if btype = b_depot then
68752: LD_VAR 0 2
68756: PUSH
68757: LD_INT 0
68759: EQUAL
68760: IFFALSE 68772
// begin result := true ;
68762: LD_ADDR_VAR 0 3
68766: PUSH
68767: LD_INT 1
68769: ST_TO_ADDR
// exit ;
68770: GO 68888
// end ; pom := GetBase ( depot ) ;
68772: LD_ADDR_VAR 0 4
68776: PUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: CALL_OW 274
68786: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68787: LD_ADDR_VAR 0 5
68791: PUSH
68792: LD_VAR 0 2
68796: PPUSH
68797: LD_VAR 0 1
68801: PPUSH
68802: CALL_OW 248
68806: PPUSH
68807: CALL_OW 450
68811: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68812: LD_ADDR_VAR 0 3
68816: PUSH
68817: LD_VAR 0 4
68821: PPUSH
68822: LD_INT 1
68824: PPUSH
68825: CALL_OW 275
68829: PUSH
68830: LD_VAR 0 5
68834: PUSH
68835: LD_INT 1
68837: ARRAY
68838: GREATEREQUAL
68839: PUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: LD_INT 2
68847: PPUSH
68848: CALL_OW 275
68852: PUSH
68853: LD_VAR 0 5
68857: PUSH
68858: LD_INT 2
68860: ARRAY
68861: GREATEREQUAL
68862: AND
68863: PUSH
68864: LD_VAR 0 4
68868: PPUSH
68869: LD_INT 3
68871: PPUSH
68872: CALL_OW 275
68876: PUSH
68877: LD_VAR 0 5
68881: PUSH
68882: LD_INT 3
68884: ARRAY
68885: GREATEREQUAL
68886: AND
68887: ST_TO_ADDR
// end ;
68888: LD_VAR 0 3
68892: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68893: LD_INT 0
68895: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68896: LD_VAR 0 1
68900: PPUSH
68901: LD_VAR 0 2
68905: PPUSH
68906: LD_INT 0
68908: PPUSH
68909: LD_INT 0
68911: PPUSH
68912: LD_INT 1
68914: PPUSH
68915: LD_INT 0
68917: PPUSH
68918: CALL_OW 587
// end ;
68922: LD_VAR 0 3
68926: RET
// export function CenterOnNow ( unit ) ; begin
68927: LD_INT 0
68929: PPUSH
// result := IsInUnit ( unit ) ;
68930: LD_ADDR_VAR 0 2
68934: PUSH
68935: LD_VAR 0 1
68939: PPUSH
68940: CALL_OW 310
68944: ST_TO_ADDR
// if not result then
68945: LD_VAR 0 2
68949: NOT
68950: IFFALSE 68962
// result := unit ;
68952: LD_ADDR_VAR 0 2
68956: PUSH
68957: LD_VAR 0 1
68961: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68962: LD_VAR 0 1
68966: PPUSH
68967: CALL_OW 87
// end ;
68971: LD_VAR 0 2
68975: RET
// export function ComMoveHex ( unit , hex ) ; begin
68976: LD_INT 0
68978: PPUSH
// if not hex then
68979: LD_VAR 0 2
68983: NOT
68984: IFFALSE 68988
// exit ;
68986: GO 69041
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68988: LD_VAR 0 2
68992: PUSH
68993: LD_INT 1
68995: ARRAY
68996: PPUSH
68997: LD_VAR 0 2
69001: PUSH
69002: LD_INT 2
69004: ARRAY
69005: PPUSH
69006: CALL_OW 428
69010: IFFALSE 69014
// exit ;
69012: GO 69041
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_VAR 0 2
69023: PUSH
69024: LD_INT 1
69026: ARRAY
69027: PPUSH
69028: LD_VAR 0 2
69032: PUSH
69033: LD_INT 2
69035: ARRAY
69036: PPUSH
69037: CALL_OW 111
// end ;
69041: LD_VAR 0 3
69045: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69046: LD_INT 0
69048: PPUSH
69049: PPUSH
69050: PPUSH
// if not unit or not enemy then
69051: LD_VAR 0 1
69055: NOT
69056: PUSH
69057: LD_VAR 0 2
69061: NOT
69062: OR
69063: IFFALSE 69067
// exit ;
69065: GO 69191
// x := GetX ( enemy ) ;
69067: LD_ADDR_VAR 0 4
69071: PUSH
69072: LD_VAR 0 2
69076: PPUSH
69077: CALL_OW 250
69081: ST_TO_ADDR
// y := GetY ( enemy ) ;
69082: LD_ADDR_VAR 0 5
69086: PUSH
69087: LD_VAR 0 2
69091: PPUSH
69092: CALL_OW 251
69096: ST_TO_ADDR
// if ValidHex ( x , y ) then
69097: LD_VAR 0 4
69101: PPUSH
69102: LD_VAR 0 5
69106: PPUSH
69107: CALL_OW 488
69111: IFFALSE 69191
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69113: LD_VAR 0 2
69117: PPUSH
69118: CALL_OW 247
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: LD_INT 2
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: IN
69133: PUSH
69134: LD_VAR 0 1
69138: PPUSH
69139: CALL_OW 255
69143: PPUSH
69144: LD_VAR 0 2
69148: PPUSH
69149: CALL_OW 292
69153: OR
69154: IFFALSE 69172
// ComAttackUnit ( unit , enemy ) else
69156: LD_VAR 0 1
69160: PPUSH
69161: LD_VAR 0 2
69165: PPUSH
69166: CALL_OW 115
69170: GO 69191
// ComAgressiveMove ( unit , x , y ) ;
69172: LD_VAR 0 1
69176: PPUSH
69177: LD_VAR 0 4
69181: PPUSH
69182: LD_VAR 0 5
69186: PPUSH
69187: CALL_OW 114
// end ;
69191: LD_VAR 0 3
69195: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69196: LD_INT 0
69198: PPUSH
69199: PPUSH
69200: PPUSH
// list := AreaToList ( area , 0 ) ;
69201: LD_ADDR_VAR 0 5
69205: PUSH
69206: LD_VAR 0 1
69210: PPUSH
69211: LD_INT 0
69213: PPUSH
69214: CALL_OW 517
69218: ST_TO_ADDR
// if not list then
69219: LD_VAR 0 5
69223: NOT
69224: IFFALSE 69228
// exit ;
69226: GO 69358
// if all then
69228: LD_VAR 0 2
69232: IFFALSE 69320
// begin for i := 1 to list [ 1 ] do
69234: LD_ADDR_VAR 0 4
69238: PUSH
69239: DOUBLE
69240: LD_INT 1
69242: DEC
69243: ST_TO_ADDR
69244: LD_VAR 0 5
69248: PUSH
69249: LD_INT 1
69251: ARRAY
69252: PUSH
69253: FOR_TO
69254: IFFALSE 69316
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69256: LD_ADDR_VAR 0 3
69260: PUSH
69261: LD_VAR 0 3
69265: PPUSH
69266: LD_VAR 0 3
69270: PUSH
69271: LD_INT 1
69273: PLUS
69274: PPUSH
69275: LD_VAR 0 5
69279: PUSH
69280: LD_INT 1
69282: ARRAY
69283: PUSH
69284: LD_VAR 0 4
69288: ARRAY
69289: PUSH
69290: LD_VAR 0 5
69294: PUSH
69295: LD_INT 2
69297: ARRAY
69298: PUSH
69299: LD_VAR 0 4
69303: ARRAY
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PPUSH
69309: CALL_OW 1
69313: ST_TO_ADDR
69314: GO 69253
69316: POP
69317: POP
// exit ;
69318: GO 69358
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69320: LD_ADDR_VAR 0 3
69324: PUSH
69325: LD_VAR 0 5
69329: PUSH
69330: LD_INT 1
69332: ARRAY
69333: PUSH
69334: LD_INT 1
69336: ARRAY
69337: PUSH
69338: LD_VAR 0 5
69342: PUSH
69343: LD_INT 2
69345: ARRAY
69346: PUSH
69347: LD_INT 1
69349: ARRAY
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: EMPTY
69356: LIST
69357: ST_TO_ADDR
// end ;
69358: LD_VAR 0 3
69362: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69363: LD_INT 0
69365: PPUSH
69366: PPUSH
// list := AreaToList ( area , 0 ) ;
69367: LD_ADDR_VAR 0 4
69371: PUSH
69372: LD_VAR 0 1
69376: PPUSH
69377: LD_INT 0
69379: PPUSH
69380: CALL_OW 517
69384: ST_TO_ADDR
// if not list then
69385: LD_VAR 0 4
69389: NOT
69390: IFFALSE 69394
// exit ;
69392: GO 69435
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69394: LD_ADDR_VAR 0 3
69398: PUSH
69399: LD_VAR 0 4
69403: PUSH
69404: LD_INT 1
69406: ARRAY
69407: PUSH
69408: LD_INT 1
69410: ARRAY
69411: PUSH
69412: LD_VAR 0 4
69416: PUSH
69417: LD_INT 2
69419: ARRAY
69420: PUSH
69421: LD_INT 1
69423: ARRAY
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: ST_TO_ADDR
// end ;
69435: LD_VAR 0 3
69439: RET
// export function First ( array ) ; begin
69440: LD_INT 0
69442: PPUSH
// if not array then
69443: LD_VAR 0 1
69447: NOT
69448: IFFALSE 69452
// exit ;
69450: GO 69466
// result := array [ 1 ] ;
69452: LD_ADDR_VAR 0 2
69456: PUSH
69457: LD_VAR 0 1
69461: PUSH
69462: LD_INT 1
69464: ARRAY
69465: ST_TO_ADDR
// end ;
69466: LD_VAR 0 2
69470: RET
// export function Last ( array ) ; begin
69471: LD_INT 0
69473: PPUSH
// if not array then
69474: LD_VAR 0 1
69478: NOT
69479: IFFALSE 69483
// exit ;
69481: GO 69499
// result := array [ array ] ;
69483: LD_ADDR_VAR 0 2
69487: PUSH
69488: LD_VAR 0 1
69492: PUSH
69493: LD_VAR 0 1
69497: ARRAY
69498: ST_TO_ADDR
// end ;
69499: LD_VAR 0 2
69503: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69504: LD_INT 0
69506: PPUSH
69507: PPUSH
// result := [ ] ;
69508: LD_ADDR_VAR 0 5
69512: PUSH
69513: EMPTY
69514: ST_TO_ADDR
// if not array then
69515: LD_VAR 0 1
69519: NOT
69520: IFFALSE 69524
// exit ;
69522: GO 69636
// for i := 1 to array do
69524: LD_ADDR_VAR 0 6
69528: PUSH
69529: DOUBLE
69530: LD_INT 1
69532: DEC
69533: ST_TO_ADDR
69534: LD_VAR 0 1
69538: PUSH
69539: FOR_TO
69540: IFFALSE 69634
// if array [ i ] [ index ] = value then
69542: LD_VAR 0 1
69546: PUSH
69547: LD_VAR 0 6
69551: ARRAY
69552: PUSH
69553: LD_VAR 0 2
69557: ARRAY
69558: PUSH
69559: LD_VAR 0 3
69563: EQUAL
69564: IFFALSE 69632
// begin if indexColumn then
69566: LD_VAR 0 4
69570: IFFALSE 69606
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69572: LD_ADDR_VAR 0 5
69576: PUSH
69577: LD_VAR 0 5
69581: PPUSH
69582: LD_VAR 0 1
69586: PUSH
69587: LD_VAR 0 6
69591: ARRAY
69592: PUSH
69593: LD_VAR 0 4
69597: ARRAY
69598: PPUSH
69599: CALL 64824 0 2
69603: ST_TO_ADDR
69604: GO 69632
// result := Join ( result , array [ i ] ) ;
69606: LD_ADDR_VAR 0 5
69610: PUSH
69611: LD_VAR 0 5
69615: PPUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_VAR 0 6
69625: ARRAY
69626: PPUSH
69627: CALL 64824 0 2
69631: ST_TO_ADDR
// end ;
69632: GO 69539
69634: POP
69635: POP
// end ;
69636: LD_VAR 0 5
69640: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69641: LD_INT 0
69643: PPUSH
// if not vehicles or not parkingPoint then
69644: LD_VAR 0 1
69648: NOT
69649: PUSH
69650: LD_VAR 0 2
69654: NOT
69655: OR
69656: IFFALSE 69660
// exit ;
69658: GO 69758
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69660: LD_ADDR_VAR 0 1
69664: PUSH
69665: LD_VAR 0 1
69669: PPUSH
69670: LD_INT 50
69672: PUSH
69673: EMPTY
69674: LIST
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: LD_INT 92
69681: PUSH
69682: LD_VAR 0 2
69686: PUSH
69687: LD_INT 1
69689: ARRAY
69690: PUSH
69691: LD_VAR 0 2
69695: PUSH
69696: LD_INT 2
69698: ARRAY
69699: PUSH
69700: LD_INT 8
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PPUSH
69717: CALL_OW 72
69721: ST_TO_ADDR
// if not vehicles then
69722: LD_VAR 0 1
69726: NOT
69727: IFFALSE 69731
// exit ;
69729: GO 69758
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69731: LD_VAR 0 1
69735: PPUSH
69736: LD_VAR 0 2
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PPUSH
69745: LD_VAR 0 2
69749: PUSH
69750: LD_INT 2
69752: ARRAY
69753: PPUSH
69754: CALL_OW 111
// end ;
69758: LD_VAR 0 3
69762: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69763: LD_INT 0
69765: PPUSH
69766: PPUSH
69767: PPUSH
// if not side or not area then
69768: LD_VAR 0 1
69772: NOT
69773: PUSH
69774: LD_VAR 0 2
69778: NOT
69779: OR
69780: IFFALSE 69784
// exit ;
69782: GO 69903
// tmp := AreaToList ( area , 0 ) ;
69784: LD_ADDR_VAR 0 5
69788: PUSH
69789: LD_VAR 0 2
69793: PPUSH
69794: LD_INT 0
69796: PPUSH
69797: CALL_OW 517
69801: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69802: LD_ADDR_VAR 0 4
69806: PUSH
69807: DOUBLE
69808: LD_INT 1
69810: DEC
69811: ST_TO_ADDR
69812: LD_VAR 0 5
69816: PUSH
69817: LD_INT 1
69819: ARRAY
69820: PUSH
69821: FOR_TO
69822: IFFALSE 69901
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69824: LD_VAR 0 5
69828: PUSH
69829: LD_INT 1
69831: ARRAY
69832: PUSH
69833: LD_VAR 0 4
69837: ARRAY
69838: PPUSH
69839: LD_VAR 0 5
69843: PUSH
69844: LD_INT 2
69846: ARRAY
69847: PUSH
69848: LD_VAR 0 4
69852: ARRAY
69853: PPUSH
69854: CALL_OW 351
69858: IFFALSE 69899
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69860: LD_VAR 0 5
69864: PUSH
69865: LD_INT 1
69867: ARRAY
69868: PUSH
69869: LD_VAR 0 4
69873: ARRAY
69874: PPUSH
69875: LD_VAR 0 5
69879: PUSH
69880: LD_INT 2
69882: ARRAY
69883: PUSH
69884: LD_VAR 0 4
69888: ARRAY
69889: PPUSH
69890: LD_VAR 0 1
69894: PPUSH
69895: CALL_OW 244
// end ;
69899: GO 69821
69901: POP
69902: POP
// end ; end_of_file
69903: LD_VAR 0 3
69907: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
69908: PPOPN 6
69910: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69911: CALL 69940 0 0
// end ; end_of_file
69915: PPOPN 1
69917: END
// every 0 0$1 do
69918: GO 69920
69920: DISABLE
// begin enable ;
69921: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
69922: LD_STRING updateTimer(
69924: PUSH
69925: LD_OWVAR 1
69929: STR
69930: PUSH
69931: LD_STRING );
69933: STR
69934: PPUSH
69935: CALL_OW 559
// end ;
69939: END
// export function SOS_MapStart ( ) ; begin
69940: LD_INT 0
69942: PPUSH
// UpdateFactoryWaypoints ( ) ;
69943: CALL 70312 0 0
// UpdateWarehouseGatheringPoints ( ) ;
69947: CALL 70564 0 0
// end ;
69951: LD_VAR 0 1
69955: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69956: LD_INT 0
69958: PPUSH
// end ;
69959: LD_VAR 0 12
69963: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
69964: LD_INT 0
69966: PPUSH
69967: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
69968: LD_VAR 0 1
69972: NOT
69973: PUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: LD_VAR 0 3
69983: PPUSH
69984: CALL_OW 488
69988: NOT
69989: OR
69990: PUSH
69991: LD_VAR 0 1
69995: PPUSH
69996: CALL_OW 266
70000: PUSH
70001: LD_INT 3
70003: NONEQUAL
70004: PUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: CALL_OW 247
70014: PUSH
70015: LD_INT 1
70017: EQUAL
70018: NOT
70019: AND
70020: OR
70021: IFFALSE 70025
// exit ;
70023: GO 70307
// if GetType ( factory ) = unit_human then
70025: LD_VAR 0 1
70029: PPUSH
70030: CALL_OW 247
70034: PUSH
70035: LD_INT 1
70037: EQUAL
70038: IFFALSE 70055
// factory := IsInUnit ( factory ) ;
70040: LD_ADDR_VAR 0 1
70044: PUSH
70045: LD_VAR 0 1
70049: PPUSH
70050: CALL_OW 310
70054: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
70055: LD_VAR 0 1
70059: PPUSH
70060: CALL_OW 266
70064: PUSH
70065: LD_INT 3
70067: NONEQUAL
70068: IFFALSE 70072
// exit ;
70070: GO 70307
// for i := 1 to Count ( factoryWaypoints ) do
70072: LD_ADDR_VAR 0 5
70076: PUSH
70077: DOUBLE
70078: LD_INT 1
70080: DEC
70081: ST_TO_ADDR
70082: LD_EXP 68
70086: PPUSH
70087: CALL 29215 0 1
70091: PUSH
70092: FOR_TO
70093: IFFALSE 70255
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
70095: LD_VAR 0 2
70099: PPUSH
70100: LD_VAR 0 3
70104: PPUSH
70105: CALL_OW 428
70109: PUSH
70110: LD_EXP 68
70114: PUSH
70115: LD_VAR 0 5
70119: ARRAY
70120: PUSH
70121: LD_INT 2
70123: ARRAY
70124: EQUAL
70125: IFFALSE 70157
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70127: LD_ADDR_EXP 68
70131: PUSH
70132: LD_EXP 68
70136: PPUSH
70137: LD_VAR 0 5
70141: PPUSH
70142: CALL_OW 3
70146: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70147: CALL 70312 0 0
// exit ;
70151: POP
70152: POP
70153: GO 70307
// end else
70155: GO 70253
// if factory = factoryWaypoints [ i ] [ 2 ] then
70157: LD_VAR 0 1
70161: PUSH
70162: LD_EXP 68
70166: PUSH
70167: LD_VAR 0 5
70171: ARRAY
70172: PUSH
70173: LD_INT 2
70175: ARRAY
70176: EQUAL
70177: IFFALSE 70253
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
70179: LD_ADDR_EXP 68
70183: PUSH
70184: LD_EXP 68
70188: PPUSH
70189: LD_VAR 0 5
70193: PPUSH
70194: CALL_OW 3
70198: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70199: LD_ADDR_EXP 68
70203: PUSH
70204: LD_EXP 68
70208: PPUSH
70209: LD_VAR 0 1
70213: PPUSH
70214: CALL_OW 255
70218: PUSH
70219: LD_VAR 0 1
70223: PUSH
70224: LD_VAR 0 2
70228: PUSH
70229: LD_VAR 0 3
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL 64824 0 2
70244: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70245: CALL 70312 0 0
// exit ;
70249: POP
70250: POP
70251: GO 70307
// end ; end ;
70253: GO 70092
70255: POP
70256: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
70257: LD_ADDR_EXP 68
70261: PUSH
70262: LD_EXP 68
70266: PPUSH
70267: LD_VAR 0 1
70271: PPUSH
70272: CALL_OW 255
70276: PUSH
70277: LD_VAR 0 1
70281: PUSH
70282: LD_VAR 0 2
70286: PUSH
70287: LD_VAR 0 3
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: PPUSH
70298: CALL 64824 0 2
70302: ST_TO_ADDR
// UpdateFactoryWaypoints ;
70303: CALL 70312 0 0
// end ;
70307: LD_VAR 0 4
70311: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
70312: LD_INT 0
70314: PPUSH
70315: PPUSH
70316: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
70317: LD_STRING resetFactoryWaypoint();
70319: PPUSH
70320: CALL_OW 559
// if factoryWaypoints then
70324: LD_EXP 68
70328: IFFALSE 70449
// begin list := factoryWaypoints ;
70330: LD_ADDR_VAR 0 3
70334: PUSH
70335: LD_EXP 68
70339: ST_TO_ADDR
// for i := 1 to list do
70340: LD_ADDR_VAR 0 2
70344: PUSH
70345: DOUBLE
70346: LD_INT 1
70348: DEC
70349: ST_TO_ADDR
70350: LD_VAR 0 3
70354: PUSH
70355: FOR_TO
70356: IFFALSE 70447
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70358: LD_STRING setFactoryWaypointXY(
70360: PUSH
70361: LD_VAR 0 3
70365: PUSH
70366: LD_VAR 0 2
70370: ARRAY
70371: PUSH
70372: LD_INT 1
70374: ARRAY
70375: STR
70376: PUSH
70377: LD_STRING ,
70379: STR
70380: PUSH
70381: LD_VAR 0 3
70385: PUSH
70386: LD_VAR 0 2
70390: ARRAY
70391: PUSH
70392: LD_INT 2
70394: ARRAY
70395: STR
70396: PUSH
70397: LD_STRING ,
70399: STR
70400: PUSH
70401: LD_VAR 0 3
70405: PUSH
70406: LD_VAR 0 2
70410: ARRAY
70411: PUSH
70412: LD_INT 3
70414: ARRAY
70415: STR
70416: PUSH
70417: LD_STRING ,
70419: STR
70420: PUSH
70421: LD_VAR 0 3
70425: PUSH
70426: LD_VAR 0 2
70430: ARRAY
70431: PUSH
70432: LD_INT 4
70434: ARRAY
70435: STR
70436: PUSH
70437: LD_STRING )
70439: STR
70440: PPUSH
70441: CALL_OW 559
70445: GO 70355
70447: POP
70448: POP
// end ; end ;
70449: LD_VAR 0 1
70453: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
70454: LD_INT 0
70456: PPUSH
// if HexInfo ( x , y ) = warehouse then
70457: LD_VAR 0 2
70461: PPUSH
70462: LD_VAR 0 3
70466: PPUSH
70467: CALL_OW 428
70471: PUSH
70472: LD_VAR 0 1
70476: EQUAL
70477: IFFALSE 70504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
70479: LD_ADDR_EXP 69
70483: PUSH
70484: LD_EXP 69
70488: PPUSH
70489: LD_VAR 0 1
70493: PPUSH
70494: LD_INT 0
70496: PPUSH
70497: CALL_OW 1
70501: ST_TO_ADDR
70502: GO 70555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
70504: LD_ADDR_EXP 69
70508: PUSH
70509: LD_EXP 69
70513: PPUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL_OW 255
70528: PUSH
70529: LD_VAR 0 1
70533: PUSH
70534: LD_VAR 0 2
70538: PUSH
70539: LD_VAR 0 3
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: PPUSH
70550: CALL_OW 1
70554: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
70555: CALL 70564 0 0
// end ;
70559: LD_VAR 0 4
70563: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
70568: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
70569: LD_STRING resetWarehouseGatheringPoints();
70571: PPUSH
70572: CALL_OW 559
// if warehouseGatheringPoints then
70576: LD_EXP 69
70580: IFFALSE 70706
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
70582: LD_ADDR_VAR 0 3
70586: PUSH
70587: LD_EXP 69
70591: PPUSH
70592: CALL 68586 0 1
70596: ST_TO_ADDR
// for i := 1 to list do
70597: LD_ADDR_VAR 0 2
70601: PUSH
70602: DOUBLE
70603: LD_INT 1
70605: DEC
70606: ST_TO_ADDR
70607: LD_VAR 0 3
70611: PUSH
70612: FOR_TO
70613: IFFALSE 70704
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
70615: LD_STRING setWarehouseGatheringPointXY(
70617: PUSH
70618: LD_VAR 0 3
70622: PUSH
70623: LD_VAR 0 2
70627: ARRAY
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: STR
70633: PUSH
70634: LD_STRING ,
70636: STR
70637: PUSH
70638: LD_VAR 0 3
70642: PUSH
70643: LD_VAR 0 2
70647: ARRAY
70648: PUSH
70649: LD_INT 2
70651: ARRAY
70652: STR
70653: PUSH
70654: LD_STRING ,
70656: STR
70657: PUSH
70658: LD_VAR 0 3
70662: PUSH
70663: LD_VAR 0 2
70667: ARRAY
70668: PUSH
70669: LD_INT 3
70671: ARRAY
70672: STR
70673: PUSH
70674: LD_STRING ,
70676: STR
70677: PUSH
70678: LD_VAR 0 3
70682: PUSH
70683: LD_VAR 0 2
70687: ARRAY
70688: PUSH
70689: LD_INT 4
70691: ARRAY
70692: STR
70693: PUSH
70694: LD_STRING )
70696: STR
70697: PPUSH
70698: CALL_OW 559
70702: GO 70612
70704: POP
70705: POP
// end ; end ;
70706: LD_VAR 0 1
70710: RET
