// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 159 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1906 0 1
  44: PPUSH
  45: CALL 6507 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1906 0 1
  56: PPUSH
  57: CALL 11232 0 1
// Multiplayer_Start ;
  61: CALL 3922 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4034 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: IFFALSE 142
 135: PUSH
 136: LD_OWVAR 48
 140: NOT
 141: AND
 142: IFFALSE 158
 144: GO 146
 146: DISABLE
// begin enable ;
 147: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 148: LD_ADDR_OWVAR 47
 152: PUSH
 153: CALL 5425 0 0
 157: ST_TO_ADDR
// end ; end_of_file
 158: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
 163: PPUSH
 164: PPUSH
 165: PPUSH
// mpGameType := GameTypeCoop ;
 166: LD_ADDR_EXP 30
 170: PUSH
 171: LD_INT 4
 173: ST_TO_ADDR
// multi_settings_counter := 6 ;
 174: LD_ADDR_EXP 18
 178: PUSH
 179: LD_INT 6
 181: ST_TO_ADDR
// multi_settings := [ ] ;
 182: LD_ADDR_EXP 17
 186: PUSH
 187: EMPTY
 188: ST_TO_ADDR
// if Multiplayer then
 189: LD_OWVAR 4
 193: IFFALSE 373
// begin your_side := mp_player_side ;
 195: LD_ADDR_OWVAR 2
 199: PUSH
 200: LD_OWVAR 7
 204: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_OWVAR 6
 214: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 215: LD_ADDR_EXP 7
 219: PUSH
 220: LD_OWVAR 17
 224: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 225: LD_ADDR_EXP 8
 229: PUSH
 230: LD_OWVAR 15
 234: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 235: LD_ADDR_EXP 9
 239: PUSH
 240: LD_OWVAR 16
 244: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 245: LD_ADDR_EXP 10
 249: PUSH
 250: EMPTY
 251: PUSH
 252: EMPTY
 253: LIST
 254: ST_TO_ADDR
// for i in mp_teams do
 255: LD_ADDR_VAR 0 2
 259: PUSH
 260: LD_OWVAR 12
 264: PUSH
 265: FOR_IN
 266: IFFALSE 309
// if i then
 268: LD_VAR 0 2
 272: IFFALSE 307
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 274: LD_ADDR_EXP 10
 278: PUSH
 279: LD_EXP 10
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_EXP 10
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PUSH
 296: LD_VAR 0 2
 300: UNION
 301: PPUSH
 302: CALL_OW 1
 306: ST_TO_ADDR
 307: GO 265
 309: POP
 310: POP
// for i := 1 to multi_settings_counter do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_EXP 18
 325: PUSH
 326: FOR_TO
 327: IFFALSE 369
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 329: LD_ADDR_EXP 17
 333: PUSH
 334: LD_EXP 17
 338: PPUSH
 339: LD_EXP 17
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: PPUSH
 348: LD_VAR 0 2
 352: PPUSH
 353: CALL_OW 426
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
 367: GO 326
 369: POP
 370: POP
// end else
 371: GO 559
// begin your_side := 3 ;
 373: LD_ADDR_OWVAR 2
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// multi_gametype := 1 ;
 381: LD_ADDR_EXP 6
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 389: LD_ADDR_EXP 7
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: LD_INT 1
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 428: LD_ADDR_EXP 8
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 467: LD_ADDR_EXP 9
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: LD_INT 3
 483: PUSH
 484: LD_INT 3
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_INT 3
 513: PUSH
 514: LD_INT 4
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 4
 538: PUSH
 539: LD_INT 4
 541: PUSH
 542: LD_INT 3
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 559: LD_ADDR_EXP 31
 563: PUSH
 564: LD_EXP 7
 568: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 569: LD_ADDR_EXP 11
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 0
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 14
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 647: LD_ADDR_EXP 25
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: LD_INT 0
 657: PUSH
 658: LD_INT 0
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 0
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// multi_teamgame := true ;
 686: LD_ADDR_EXP 15
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 694: LD_ADDR_EXP 13
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: EMPTY
 703: LIST
 704: ST_TO_ADDR
// multi_custom_commanders := true ;
 705: LD_ADDR_EXP 16
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// multi_commanders := [ ] ;
 713: LD_ADDR_EXP 24
 717: PUSH
 718: EMPTY
 719: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 720: LD_ADDR_EXP 27
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// multi_players_amount := 0 ;
 727: LD_ADDR_EXP 26
 731: PUSH
 732: LD_INT 0
 734: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 735: LD_ADDR_EXP 12
 739: PUSH
 740: LD_INT 8
 742: PUSH
 743: LD_INT 9
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 10
 752: PUSH
 753: LD_INT 11
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 12
 762: PUSH
 763: LD_INT 13
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 775: LD_ADDR_EXP 29
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 14
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: CALL 73091 0 2
 793: PUSH
 794: LD_STRING kagan
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 31
 804: PUSH
 805: LD_INT 67
 807: PUSH
 808: LD_INT 102
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 31
 825: PUSH
 826: LD_INT 73
 828: PUSH
 829: LD_INT 103
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 29
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: LD_INT 112
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_INT 0
 873: PUSH
 874: LD_INT 15
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL 73091 0 2
 884: PUSH
 885: LD_STRING beria
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 31
 895: PUSH
 896: LD_INT 102
 898: PUSH
 899: LD_INT 86
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 31
 916: PUSH
 917: LD_INT 98
 919: PUSH
 920: LD_INT 96
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 115
 940: PUSH
 941: LD_INT 104
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 16
 967: PPUSH
 968: LD_INT 3
 970: PPUSH
 971: CALL 73091 0 2
 975: PUSH
 976: LD_STRING kirov
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 31
 986: PUSH
 987: LD_INT 169
 989: PUSH
 990: LD_INT 101
 992: PUSH
 993: LD_INT 4
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 31
1007: PUSH
1008: LD_INT 175
1010: PUSH
1011: LD_INT 123
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 4
1028: PUSH
1029: LD_INT 166
1031: PUSH
1032: LD_INT 115
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: LD_INT 152
1052: PUSH
1053: LD_INT 98
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: ST_TO_ADDR
// for i := 1 to 8 do
1080: LD_ADDR_VAR 0 2
1084: PUSH
1085: DOUBLE
1086: LD_INT 1
1088: DEC
1089: ST_TO_ADDR
1090: LD_INT 8
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1429
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1096: LD_VAR 0 2
1100: PPUSH
1101: CALL_OW 530
1105: IFFALSE 1263
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1107: LD_ADDR_EXP 11
1111: PUSH
1112: LD_EXP 11
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1130: LD_ADDR_EXP 9
1134: PUSH
1135: LD_EXP 9
1139: PPUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 1
1152: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1153: LD_ADDR_EXP 7
1157: PUSH
1158: LD_EXP 7
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 1
1175: ST_TO_ADDR
// for j = 1 to multi_teams do
1176: LD_ADDR_VAR 0 3
1180: PUSH
1181: DOUBLE
1182: LD_INT 1
1184: DEC
1185: ST_TO_ADDR
1186: LD_EXP 10
1190: PUSH
1191: FOR_TO
1192: IFFALSE 1261
// begin if i in multi_teams [ j ] then
1194: LD_VAR 0 2
1198: PUSH
1199: LD_EXP 10
1203: PUSH
1204: LD_VAR 0 3
1208: ARRAY
1209: IN
1210: IFFALSE 1259
// begin tmp := multi_teams [ j ] diff i ;
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_EXP 10
1221: PUSH
1222: LD_VAR 0 3
1226: ARRAY
1227: PUSH
1228: LD_VAR 0 2
1232: DIFF
1233: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1234: LD_ADDR_EXP 10
1238: PUSH
1239: LD_EXP 10
1243: PPUSH
1244: LD_VAR 0 3
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// end ; end ;
1259: GO 1191
1261: POP
1262: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1263: LD_EXP 9
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: IFFALSE 1294
1275: PUSH
1276: LD_EXP 9
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_EXP 13
1291: IN
1292: NOT
1293: AND
1294: IFFALSE 1335
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1296: LD_ADDR_EXP 9
1300: PUSH
1301: LD_EXP 9
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: LD_EXP 13
1315: PUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_EXP 13
1323: PPUSH
1324: CALL_OW 12
1328: ARRAY
1329: PPUSH
1330: CALL_OW 1
1334: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1335: LD_EXP 9
1339: PUSH
1340: LD_VAR 0 2
1344: ARRAY
1345: NOT
1346: IFFALSE 1361
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: NOT
1360: AND
1361: IFFALSE 1376
1363: PUSH
1364: LD_EXP 11
1368: PUSH
1369: LD_VAR 0 2
1373: ARRAY
1374: NOT
1375: AND
1376: IFFALSE 1401
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1378: LD_ADDR_EXP 14
1382: PUSH
1383: LD_EXP 14
1387: PPUSH
1388: LD_VAR 0 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL_OW 1
1400: ST_TO_ADDR
// if multi_sides [ i ] then
1401: LD_EXP 7
1405: PUSH
1406: LD_VAR 0 2
1410: ARRAY
1411: IFFALSE 1427
// multi_players_amount := multi_players_amount + 1 ;
1413: LD_ADDR_EXP 26
1417: PUSH
1418: LD_EXP 26
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ST_TO_ADDR
// end ;
1427: GO 1093
1429: POP
1430: POP
// for i in multi_teams do
1431: LD_ADDR_VAR 0 2
1435: PUSH
1436: LD_EXP 10
1440: PUSH
1441: FOR_IN
1442: IFFALSE 1550
// begin for j = 2 to i do
1444: LD_ADDR_VAR 0 3
1448: PUSH
1449: DOUBLE
1450: LD_INT 2
1452: DEC
1453: ST_TO_ADDR
1454: LD_VAR 0 2
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1546
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1462: LD_VAR 0 2
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PPUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 343
// for x = 1 to j - 1 do
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_VAR 0 3
1500: PUSH
1501: LD_INT 1
1503: MINUS
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1542
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1508: LD_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_VAR 0 4
1528: ARRAY
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 80
1540: GO 1505
1542: POP
1543: POP
// end ;
1544: GO 1459
1546: POP
1547: POP
// end ;
1548: GO 1441
1550: POP
1551: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1552: LD_ADDR_OWVAR 67
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 3
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_EXP 17
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: ARRAY
1580: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1581: LD_ADDR_EXP 19
1585: PUSH
1586: LD_INT 6
1588: PUSH
1589: LD_INT 7
1591: PUSH
1592: LD_INT 8
1594: PUSH
1595: LD_INT 9
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 17
1608: PUSH
1609: LD_INT 2
1611: ARRAY
1612: ARRAY
1613: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 4
1627: PUSH
1628: LD_INT 5
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_EXP 17
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ARRAY
1646: ST_TO_ADDR
// multi_crates_spawn := [ [ 3600 , 0 0$32 ] , [ 5600 , 0 0$22 ] , [ 6800 , 0 0$14 ] , [ 9000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1647: LD_ADDR_EXP 21
1651: PUSH
1652: LD_INT 3600
1654: PUSH
1655: LD_INT 1120
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 5600
1664: PUSH
1665: LD_INT 770
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 6800
1674: PUSH
1675: LD_INT 490
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 9000
1684: PUSH
1685: LD_INT 420
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_EXP 17
1702: PUSH
1703: LD_INT 4
1705: ARRAY
1706: ARRAY
1707: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1708: LD_ADDR_EXP 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_EXP 17
1731: PUSH
1732: LD_INT 5
1734: ARRAY
1735: ARRAY
1736: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1737: LD_ADDR_EXP 23
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_EXP 17
1760: PUSH
1761: LD_INT 6
1763: ARRAY
1764: ARRAY
1765: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1766: LD_ADDR_EXP 28
1770: PUSH
1771: LD_INT 10500
1773: PUSH
1774: LD_INT 31500
1776: PUSH
1777: LD_INT 52500
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: ST_TO_ADDR
// if multi_extra_oil then
1791: LD_EXP 22
1795: IFFALSE 1856
// begin if multi_extra_oil = 1 then
1797: LD_EXP 22
1801: PUSH
1802: LD_INT 1
1804: EQUAL
1805: IFFALSE 1820
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1807: LD_INT 109
1809: PPUSH
1810: LD_INT 130
1812: PPUSH
1813: LD_INT 2
1815: PPUSH
1816: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1820: LD_EXP 22
1824: PUSH
1825: LD_INT 2
1827: EQUAL
1828: IFFALSE 1856
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1830: LD_INT 109
1832: PPUSH
1833: LD_INT 130
1835: PPUSH
1836: LD_INT 2
1838: PPUSH
1839: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1843: LD_INT 150
1845: PPUSH
1846: LD_INT 112
1848: PPUSH
1849: LD_INT 2
1851: PPUSH
1852: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 1
1863: GREATER
1864: IFFALSE 1901
// for i := 2 to 8 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 2
1874: DEC
1875: ST_TO_ADDR
1876: LD_INT 8
1878: PUSH
1879: FOR_TO
1880: IFFALSE 1899
// SetTech ( tech_advmet , i , state_disabled ) ;
1882: LD_INT 34
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 322
1897: GO 1879
1899: POP
1900: POP
// end ;
1901: LD_VAR 0 1
1905: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1906: LD_INT 0
1908: PPUSH
1909: PPUSH
// if not multi_sides [ preferSide ] then
1910: LD_EXP 7
1914: PUSH
1915: LD_VAR 0 1
1919: ARRAY
1920: NOT
1921: IFFALSE 1935
// begin result := preferSide ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_VAR 0 1
1932: ST_TO_ADDR
// exit ;
1933: GO 1982
// end ; for i := 1 to 8 do
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: DOUBLE
1941: LD_INT 1
1943: DEC
1944: ST_TO_ADDR
1945: LD_INT 8
1947: PUSH
1948: FOR_TO
1949: IFFALSE 1980
// if not multi_sides [ i ] then
1951: LD_EXP 7
1955: PUSH
1956: LD_VAR 0 3
1960: ARRAY
1961: NOT
1962: IFFALSE 1978
// begin result := i ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 3
1973: ST_TO_ADDR
// exit ;
1974: POP
1975: POP
1976: GO 1982
// end ;
1978: GO 1948
1980: POP
1981: POP
// end ;
1982: LD_VAR 0 2
1986: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1987: LD_INT 0
1989: PPUSH
// uc_side := side ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// uc_nation := nation_russian ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// hc_importance := 100 ;
2008: LD_ADDR_OWVAR 32
2012: PUSH
2013: LD_INT 100
2015: ST_TO_ADDR
// hc_class := class_soldier ;
2016: LD_ADDR_OWVAR 28
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// if num = 1 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 1
2031: EQUAL
2032: IFFALSE 2095
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 381
// hc_gallery := ru ;
2046: LD_ADDR_OWVAR 33
2050: PUSH
2051: LD_STRING ru
2053: ST_TO_ADDR
// hc_face_number := 10 ;
2054: LD_ADDR_OWVAR 34
2058: PUSH
2059: LD_INT 10
2061: ST_TO_ADDR
// hc_name := Popov ;
2062: LD_ADDR_OWVAR 26
2066: PUSH
2067: LD_STRING Popov
2069: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2070: LD_ADDR_OWVAR 29
2074: PUSH
2075: LD_INT 10
2077: PUSH
2078: LD_INT 10
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// result := CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// end ; if num = 2 then
2095: LD_VAR 0 2
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2174
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2105: LD_INT 1
2107: PPUSH
2108: LD_EXP 20
2112: PPUSH
2113: CALL_OW 383
// hc_class := class_mechanic ;
2117: LD_ADDR_OWVAR 28
2121: PUSH
2122: LD_INT 3
2124: ST_TO_ADDR
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 1 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// hc_name := Burlak ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Burlak
2148: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; if num = 3 then
2174: LD_VAR 0 2
2178: PUSH
2179: LD_INT 3
2181: EQUAL
2182: IFFALSE 2245
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2184: LD_INT 1
2186: PPUSH
2187: LD_EXP 20
2191: PPUSH
2192: CALL_OW 381
// hc_gallery := ru ;
2196: LD_ADDR_OWVAR 33
2200: PUSH
2201: LD_STRING ru
2203: ST_TO_ADDR
// hc_face_number := 8 ;
2204: LD_ADDR_OWVAR 34
2208: PUSH
2209: LD_INT 8
2211: ST_TO_ADDR
// hc_name := Kurin ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_STRING Kurin
2219: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2220: LD_ADDR_OWVAR 29
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 11
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: ST_TO_ADDR
// result := CreateHuman ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: CALL_OW 44
2244: ST_TO_ADDR
// end ; end ;
2245: LD_VAR 0 3
2249: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// for i := 1 to 8 do
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: DOUBLE
2268: LD_INT 1
2270: DEC
2271: ST_TO_ADDR
2272: LD_INT 8
2274: PUSH
2275: FOR_TO
2276: IFFALSE 3607
// begin if not multi_sides [ i ] then
2278: LD_EXP 7
2282: PUSH
2283: LD_VAR 0 2
2287: ARRAY
2288: NOT
2289: IFFALSE 2293
// continue ;
2291: GO 2275
// if multi_buildings [ multi_sides [ i ] ] then
2293: LD_EXP 29
2297: PUSH
2298: LD_EXP 7
2302: PUSH
2303: LD_VAR 0 2
2307: ARRAY
2308: ARRAY
2309: IFFALSE 2622
// begin uc_side := i ;
2311: LD_ADDR_OWVAR 20
2315: PUSH
2316: LD_VAR 0 2
2320: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2321: LD_ADDR_OWVAR 21
2325: PUSH
2326: LD_EXP 9
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_EXP 29
2346: PUSH
2347: LD_EXP 7
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: ARRAY
2358: PUSH
2359: FOR_IN
2360: IFFALSE 2620
// begin if j [ 1 ] = b_oil_mine then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 29
2373: EQUAL
2374: IFFALSE 2411
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 2
2396: ARRAY
2397: PUSH
2398: LD_INT 2
2400: ARRAY
2401: PPUSH
2402: LD_VAR 0 2
2406: PPUSH
2407: CALL_OW 441
// bc_type := j [ 1 ] ;
2411: LD_ADDR_OWVAR 42
2415: PUSH
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: ST_TO_ADDR
// bc_level := 2 ;
2425: LD_ADDR_OWVAR 43
2429: PUSH
2430: LD_INT 2
2432: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PUSH
2442: LD_INT 6
2444: EQUAL
2445: IFFALSE 2463
// begin bc_kind1 := b_lab_basic ;
2447: LD_ADDR_OWVAR 44
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2455: LD_ADDR_OWVAR 45
2459: PUSH
2460: LD_INT 9
2462: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2463: LD_ADDR_VAR 0 4
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PUSH
2477: LD_INT 1
2479: ARRAY
2480: PPUSH
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: PUSH
2490: LD_INT 2
2492: ARRAY
2493: PPUSH
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 2
2501: ARRAY
2502: PUSH
2503: LD_INT 3
2505: ARRAY
2506: PPUSH
2507: CALL_OW 47
2511: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PUSH
2521: LD_INT 0
2523: EQUAL
2524: IFFALSE 2618
// begin SetBName ( b , j [ 3 ] ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 3
2538: ARRAY
2539: PPUSH
2540: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 320
2559: PUSH
2560: LD_INT 240
2562: PUSH
2563: LD_INT 150
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 274
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: LD_INT 160
2596: PUSH
2597: LD_INT 130
2599: PUSH
2600: LD_INT 100
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_OWVAR 67
2612: ARRAY
2613: PPUSH
2614: CALL_OW 277
// end ; end ;
2618: GO 2359
2620: POP
2621: POP
// end ; if multi_custom_commanders then
2622: LD_EXP 16
2626: IFFALSE 2836
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2628: LD_ADDR_VAR 0 6
2632: PUSH
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_EXP 7
2642: PUSH
2643: LD_VAR 0 2
2647: ARRAY
2648: PPUSH
2649: CALL 1987 0 2
2653: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2654: LD_ADDR_EXP 24
2658: PUSH
2659: LD_EXP 24
2663: PPUSH
2664: LD_EXP 24
2668: PUSH
2669: LD_INT 1
2671: PLUS
2672: PPUSH
2673: LD_VAR 0 6
2677: PPUSH
2678: CALL_OW 2
2682: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2683: LD_VAR 0 6
2687: PPUSH
2688: CALL_OW 257
2692: PUSH
2693: LD_INT 3
2695: EQUAL
2696: IFFALSE 2801
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2698: LD_INT 22
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 51
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 35192 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2727: LD_VAR 0 7
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 100
2737: PUSH
2738: LD_INT 20
2740: PUSH
2741: LD_OWVAR 67
2745: MUL
2746: MINUS
2747: PPUSH
2748: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_EXP 12
2761: PUSH
2762: LD_EXP 7
2766: PUSH
2767: LD_VAR 0 2
2771: ARRAY
2772: ARRAY
2773: PUSH
2774: LD_INT 2
2776: ARRAY
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2785: LD_VAR 0 6
2789: PPUSH
2790: LD_VAR 0 7
2794: PPUSH
2795: CALL_OW 52
// end else
2799: GO 2834
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2801: LD_VAR 0 6
2805: PPUSH
2806: LD_EXP 12
2810: PUSH
2811: LD_EXP 7
2815: PUSH
2816: LD_VAR 0 2
2820: ARRAY
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// end else
2834: GO 3047
// begin uc_side := i ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_VAR 0 2
2845: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_EXP 9
2855: PUSH
2856: LD_VAR 0 2
2860: ARRAY
2861: ST_TO_ADDR
// hc_importance := 100 ;
2862: LD_ADDR_OWVAR 32
2866: PUSH
2867: LD_INT 100
2869: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2870: LD_INT 0
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: LD_EXP 20
2880: PPUSH
2881: CALL_OW 380
// if multiplayer then
2885: LD_OWVAR 4
2889: IFFALSE 2947
// begin hc_name := mp_sides_players_names [ i ] ;
2891: LD_ADDR_OWVAR 26
2895: PUSH
2896: LD_OWVAR 19
2900: PUSH
2901: LD_VAR 0 2
2905: ARRAY
2906: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2907: LD_ADDR_OWVAR 33
2911: PUSH
2912: LD_STRING MULTIAVATARS
2914: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2915: LD_ADDR_OWVAR 34
2919: PUSH
2920: LD_VAR 0 2
2924: PPUSH
2925: CALL_OW 525
2929: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2930: LD_ADDR_OWVAR 27
2934: PUSH
2935: LD_VAR 0 2
2939: PPUSH
2940: CALL_OW 526
2944: ST_TO_ADDR
// end else
2945: GO 2979
// begin hc_gallery :=  ;
2947: LD_ADDR_OWVAR 33
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_name :=  ;
2955: LD_ADDR_OWVAR 26
2959: PUSH
2960: LD_STRING 
2962: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 2
2973: PPUSH
2974: CALL_OW 12
2978: ST_TO_ADDR
// end ; un := CreateHuman ;
2979: LD_ADDR_VAR 0 6
2983: PUSH
2984: CALL_OW 44
2988: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2989: LD_VAR 0 6
2993: PPUSH
2994: LD_EXP 12
2998: PUSH
2999: LD_EXP 7
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_EXP 24
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 6
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// end ; InitHc ;
3047: CALL_OW 19
// InitUc ;
3051: CALL_OW 18
// uc_side := i ;
3055: LD_ADDR_OWVAR 20
3059: PUSH
3060: LD_VAR 0 2
3064: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3065: LD_ADDR_OWVAR 21
3069: PUSH
3070: LD_EXP 9
3074: PUSH
3075: LD_VAR 0 2
3079: ARRAY
3080: ST_TO_ADDR
// hc_gallery :=  ;
3081: LD_ADDR_OWVAR 33
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_name :=  ;
3089: LD_ADDR_OWVAR 26
3093: PUSH
3094: LD_STRING 
3096: ST_TO_ADDR
// hc_importance := 0 ;
3097: LD_ADDR_OWVAR 32
3101: PUSH
3102: LD_INT 0
3104: ST_TO_ADDR
// cl := 1 ;
3105: LD_ADDR_VAR 0 5
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: DOUBLE
3119: LD_INT 2
3121: DEC
3122: ST_TO_ADDR
3123: LD_EXP 19
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3603
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 1
3138: MINUS
3139: PUSH
3140: LD_EXP 19
3144: PUSH
3145: LD_INT 1
3147: MINUS
3148: PUSH
3149: LD_INT 4
3151: DIVREAL
3152: MOD
3153: PUSH
3154: LD_INT 0
3156: EQUAL
3157: IFFALSE 3173
// cl := cl + 1 ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_VAR 0 5
3168: PUSH
3169: LD_INT 1
3171: PLUS
3172: ST_TO_ADDR
// if cl > 4 then
3173: LD_VAR 0 5
3177: PUSH
3178: LD_INT 4
3180: GREATER
3181: IFFALSE 3191
// cl := 1 ;
3183: LD_ADDR_VAR 0 5
3187: PUSH
3188: LD_INT 1
3190: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3191: LD_INT 0
3193: PPUSH
3194: LD_VAR 0 5
3198: PPUSH
3199: LD_EXP 20
3203: PPUSH
3204: CALL_OW 380
// un := CreateHuman ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: CALL_OW 44
3217: ST_TO_ADDR
// if j > copy then
3218: LD_VAR 0 3
3222: PUSH
3223: LD_VAR 0 9
3227: GREATER
3228: IFFALSE 3257
// copy := Replace ( copy , j , un ) else
3230: LD_ADDR_VAR 0 9
3234: PUSH
3235: LD_VAR 0 9
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 1
3254: ST_TO_ADDR
3255: GO 3339
// begin CopySkills ( copy [ j ] , un ) ;
3257: LD_VAR 0 9
3261: PUSH
3262: LD_VAR 0 3
3266: ARRAY
3267: PPUSH
3268: LD_VAR 0 6
3272: PPUSH
3273: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3277: LD_VAR 0 6
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: LD_VAR 0 9
3289: PUSH
3290: LD_VAR 0 3
3294: ARRAY
3295: PPUSH
3296: LD_INT 2
3298: PPUSH
3299: CALL_OW 260
3303: PPUSH
3304: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3308: LD_VAR 0 6
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_VAR 0 9
3320: PUSH
3321: LD_VAR 0 3
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if multi_pos_area then
3339: LD_EXP 12
3343: IFFALSE 3601
// begin if GetClass ( un ) = 3 then
3345: LD_VAR 0 6
3349: PPUSH
3350: CALL_OW 257
3354: PUSH
3355: LD_INT 3
3357: EQUAL
3358: IFFALSE 3455
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3360: LD_INT 21
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: LD_INT 43
3371: PUSH
3372: LD_INT 42
3374: PUSH
3375: LD_INT 42
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_OWVAR 67
3387: ARRAY
3388: PPUSH
3389: LD_INT 80
3391: PPUSH
3392: CALL 35192 0 5
// veh := CreateVehicle ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 45
3405: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3406: LD_VAR 0 7
3410: PPUSH
3411: LD_EXP 12
3415: PUSH
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3439: LD_VAR 0 6
3443: PPUSH
3444: LD_VAR 0 7
3448: PPUSH
3449: CALL_OW 52
// continue ;
3453: GO 3128
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 30
3474: PUSH
3475: LD_INT 31
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 58
3484: PUSH
3485: EMPTY
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 69
3497: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3498: LD_VAR 0 6
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 1
3510: EQUAL
3511: IFFALSE 3519
3513: PUSH
3514: LD_VAR 0 8
3518: AND
3519: IFFALSE 3568
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 8
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: CALL_OW 254
3539: PUSH
3540: LD_INT 3
3542: MINUS
3543: PPUSH
3544: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3548: LD_VAR 0 6
3552: PPUSH
3553: LD_VAR 0 8
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 52
// continue ;
3566: GO 3128
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_EXP 12
3577: PUSH
3578: LD_EXP 7
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: ARRAY
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// end ; end ;
3601: GO 3128
3603: POP
3604: POP
// end ;
3605: GO 2275
3607: POP
3608: POP
// end ;
3609: LD_VAR 0 1
3613: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
// if not multi_support then
3621: LD_EXP 23
3625: NOT
3626: IFFALSE 3630
// exit ;
3628: GO 3917
// result := [ ] ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: EMPTY
3636: ST_TO_ADDR
// for i := 1 to 8 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 8
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3915
// begin result := Replace ( result , i , [ ] ) ;
3653: LD_ADDR_VAR 0 1
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: EMPTY
3669: PPUSH
3670: CALL_OW 1
3674: ST_TO_ADDR
// if multi_sides [ i ] then
3675: LD_EXP 7
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: IFFALSE 3913
// begin tmp := [ ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: EMPTY
3693: ST_TO_ADDR
// if multi_support = 1 then
3694: LD_EXP 23
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: IFFALSE 3791
// begin uc_side := i ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_VAR 0 2
3713: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3714: LD_ADDR_OWVAR 21
3718: PUSH
3719: LD_EXP 9
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: ST_TO_ADDR
// for j := 1 to 3 do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: DOUBLE
3736: LD_INT 1
3738: DEC
3739: ST_TO_ADDR
3740: LD_INT 3
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3789
// begin InitHC_All ( ) ;
3746: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 3 ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: LD_INT 3
3766: PPUSH
3767: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_VAR 0 5
3780: PUSH
3781: CALL_OW 44
3785: ADD
3786: ST_TO_ADDR
// end ;
3787: GO 3743
3789: POP
3790: POP
// end ; if multi_support = 2 then
3791: LD_EXP 23
3795: PUSH
3796: LD_INT 2
3798: EQUAL
3799: IFFALSE 3888
// begin uc_side := i ;
3801: LD_ADDR_OWVAR 20
3805: PUSH
3806: LD_VAR 0 2
3810: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3811: LD_ADDR_OWVAR 21
3815: PUSH
3816: LD_EXP 9
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: ST_TO_ADDR
// for j := 1 to 5 do
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 5
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3886
// begin InitHC_All ( ) ;
3843: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
3847: LD_INT 0
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: LD_INT 4
3855: PPUSH
3856: CALL_OW 12
3860: PPUSH
3861: LD_INT 5
3863: PPUSH
3864: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3868: LD_ADDR_VAR 0 5
3872: PUSH
3873: LD_VAR 0 5
3877: PUSH
3878: CALL_OW 44
3882: ADD
3883: ST_TO_ADDR
// end ;
3884: GO 3840
3886: POP
3887: POP
// end ; result := Replace ( result , i , tmp ) ;
3888: LD_ADDR_VAR 0 1
3892: PUSH
3893: LD_VAR 0 1
3897: PPUSH
3898: LD_VAR 0 2
3902: PPUSH
3903: LD_VAR 0 5
3907: PPUSH
3908: CALL_OW 1
3912: ST_TO_ADDR
// end ; end ;
3913: GO 3650
3915: POP
3916: POP
// end ;
3917: LD_VAR 0 1
3921: RET
// export function Multiplayer_Start ( ) ; begin
3922: LD_INT 0
3924: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3925: CALL 2250 0 0
// Multiplayer_InitPointSystem ( ) ;
3929: CALL 5514 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3933: LD_INT 20
3935: PPUSH
3936: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3940: LD_INT 150
3942: PPUSH
3943: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3947: LD_INT 5
3949: PPUSH
3950: CALL 5698 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3954: LD_INT 40
3956: NEG
3957: PPUSH
3958: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3962: LD_INT 200
3964: PPUSH
3965: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3969: LD_INT 2
3971: PPUSH
3972: CALL 5698 0 1
// if multi_support then
3976: LD_EXP 23
3980: IFFALSE 3992
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3982: LD_ADDR_EXP 27
3986: PUSH
3987: CALL 3614 0 0
3991: ST_TO_ADDR
// if multi_sides [ your_side ] then
3992: LD_EXP 7
3996: PUSH
3997: LD_OWVAR 2
4001: ARRAY
4002: IFFALSE 4029
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4004: LD_INT 22
4006: PUSH
4007: LD_OWVAR 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 69
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 87
// end ;
4029: LD_VAR 0 1
4033: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
4042: PPUSH
// tmp := [ ] ;
4043: LD_ADDR_VAR 0 6
4047: PUSH
4048: EMPTY
4049: ST_TO_ADDR
// for i := 1 to 8 do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: DOUBLE
4056: LD_INT 1
4058: DEC
4059: ST_TO_ADDR
4060: LD_INT 8
4062: PUSH
4063: FOR_TO
4064: IFFALSE 4100
// if multi_sides [ i ] then
4066: LD_EXP 7
4070: PUSH
4071: LD_VAR 0 2
4075: ARRAY
4076: IFFALSE 4098
// tmp := Join ( tmp , i ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_VAR 0 2
4092: PPUSH
4093: CALL 68372 0 2
4097: ST_TO_ADDR
4098: GO 4063
4100: POP
4101: POP
// repeat wait ( 0 0$1 ) ;
4102: LD_INT 35
4104: PPUSH
4105: CALL_OW 67
// if tick = 10 10$00 and multi_support then
4109: LD_OWVAR 1
4113: PUSH
4114: LD_INT 21000
4116: EQUAL
4117: IFFALSE 4125
4119: PUSH
4120: LD_EXP 23
4124: AND
4125: IFFALSE 4345
// begin for i := 1 to 8 do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: DOUBLE
4133: LD_INT 1
4135: DEC
4136: ST_TO_ADDR
4137: LD_INT 8
4139: PUSH
4140: FOR_TO
4141: IFFALSE 4343
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4143: LD_EXP 7
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: IFFALSE 4168
4155: PUSH
4156: LD_EXP 25
4160: PUSH
4161: LD_VAR 0 2
4165: ARRAY
4166: NOT
4167: AND
4168: IFFALSE 4341
// begin for j := 1 to 2 do
4170: LD_ADDR_VAR 0 3
4174: PUSH
4175: DOUBLE
4176: LD_INT 1
4178: DEC
4179: ST_TO_ADDR
4180: LD_INT 2
4182: PUSH
4183: FOR_TO
4184: IFFALSE 4339
// begin uc_side := i ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_VAR 0 2
4195: ST_TO_ADDR
// uc_nation := nation_russian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4204: LD_INT 21
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 44
4215: PUSH
4216: LD_INT 43
4218: PUSH
4219: LD_INT 42
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: LD_OWVAR 67
4231: ARRAY
4232: PPUSH
4233: LD_INT 30
4235: PPUSH
4236: CALL 35192 0 5
// veh := CreateVehicle ;
4240: LD_ADDR_VAR 0 7
4244: PUSH
4245: CALL_OW 45
4249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4250: LD_INT 35
4252: PPUSH
4253: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4257: LD_VAR 0 7
4261: PPUSH
4262: LD_INT 31
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL_OW 49
4272: IFFALSE 4250
// uc_side := i ;
4274: LD_ADDR_OWVAR 20
4278: PUSH
4279: LD_VAR 0 2
4283: ST_TO_ADDR
// uc_nation := nation_russian ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// PrepareMechanic ( false , 5 - Difficulty ) ;
4292: LD_INT 0
4294: PPUSH
4295: LD_INT 5
4297: PUSH
4298: LD_OWVAR 67
4302: MINUS
4303: PPUSH
4304: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4308: CALL_OW 44
4312: PPUSH
4313: LD_VAR 0 7
4317: PPUSH
4318: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4322: LD_VAR 0 7
4326: PPUSH
4327: LD_INT 158
4329: PPUSH
4330: LD_INT 106
4332: PPUSH
4333: CALL_OW 111
// end ;
4337: GO 4183
4339: POP
4340: POP
// end ; end ;
4341: GO 4140
4343: POP
4344: POP
// end ; if tick = 20 20$00 and multi_support then
4345: LD_OWVAR 1
4349: PUSH
4350: LD_INT 42000
4352: EQUAL
4353: IFFALSE 4361
4355: PUSH
4356: LD_EXP 23
4360: AND
4361: IFFALSE 4564
// begin for i := 1 to 8 do
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: DOUBLE
4369: LD_INT 1
4371: DEC
4372: ST_TO_ADDR
4373: LD_INT 8
4375: PUSH
4376: FOR_TO
4377: IFFALSE 4562
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4379: LD_EXP 7
4383: PUSH
4384: LD_VAR 0 2
4388: ARRAY
4389: IFFALSE 4404
4391: PUSH
4392: LD_EXP 25
4396: PUSH
4397: LD_VAR 0 2
4401: ARRAY
4402: NOT
4403: AND
4404: IFFALSE 4560
// begin for j := 1 to 2 do
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_INT 2
4418: PUSH
4419: FOR_TO
4420: IFFALSE 4558
// begin uc_side := i ;
4422: LD_ADDR_OWVAR 20
4426: PUSH
4427: LD_VAR 0 2
4431: ST_TO_ADDR
// uc_nation := nation_russian ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 3
4439: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
4440: LD_INT 22
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 44
4451: PPUSH
4452: LD_INT 30
4454: PPUSH
4455: CALL 35192 0 5
// veh := CreateVehicle ;
4459: LD_ADDR_VAR 0 7
4463: PUSH
4464: CALL_OW 45
4468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4469: LD_INT 35
4471: PPUSH
4472: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4476: LD_VAR 0 7
4480: PPUSH
4481: LD_INT 31
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: CALL_OW 49
4491: IFFALSE 4469
// uc_side := i ;
4493: LD_ADDR_OWVAR 20
4497: PUSH
4498: LD_VAR 0 2
4502: ST_TO_ADDR
// uc_nation := nation_russian ;
4503: LD_ADDR_OWVAR 21
4507: PUSH
4508: LD_INT 3
4510: ST_TO_ADDR
// PrepareMechanic ( false , 6 - Difficulty ) ;
4511: LD_INT 0
4513: PPUSH
4514: LD_INT 6
4516: PUSH
4517: LD_OWVAR 67
4521: MINUS
4522: PPUSH
4523: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4527: CALL_OW 44
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4541: LD_VAR 0 7
4545: PPUSH
4546: LD_INT 158
4548: PPUSH
4549: LD_INT 106
4551: PPUSH
4552: CALL_OW 111
// end ;
4556: GO 4419
4558: POP
4559: POP
// end ; end ;
4560: GO 4376
4562: POP
4563: POP
// end ; if tick = 30 30$00 and multi_support then
4564: LD_OWVAR 1
4568: PUSH
4569: LD_INT 63000
4571: EQUAL
4572: IFFALSE 4580
4574: PUSH
4575: LD_EXP 23
4579: AND
4580: IFFALSE 4866
// begin for i := 1 to 8 do
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: DOUBLE
4588: LD_INT 1
4590: DEC
4591: ST_TO_ADDR
4592: LD_INT 8
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4864
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4598: LD_EXP 7
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: IFFALSE 4623
4610: PUSH
4611: LD_EXP 25
4615: PUSH
4616: LD_VAR 0 2
4620: ARRAY
4621: NOT
4622: AND
4623: IFFALSE 4862
// begin uc_side := i ;
4625: LD_ADDR_OWVAR 20
4629: PUSH
4630: LD_VAR 0 2
4634: ST_TO_ADDR
// uc_nation := nation_russian ;
4635: LD_ADDR_OWVAR 21
4639: PUSH
4640: LD_INT 3
4642: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun , 30 ) ;
4643: LD_INT 24
4645: PPUSH
4646: LD_INT 1
4648: PPUSH
4649: LD_INT 1
4651: PPUSH
4652: LD_INT 46
4654: PPUSH
4655: LD_INT 30
4657: PPUSH
4658: CALL 35192 0 5
// veh := CreateVehicle ;
4662: LD_ADDR_VAR 0 7
4666: PUSH
4667: CALL_OW 45
4671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4672: LD_INT 35
4674: PPUSH
4675: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4679: LD_VAR 0 7
4683: PPUSH
4684: LD_INT 31
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 49
4694: IFFALSE 4672
// uc_side := i ;
4696: LD_ADDR_OWVAR 20
4700: PUSH
4701: LD_VAR 0 2
4705: ST_TO_ADDR
// uc_nation := nation_russian ;
4706: LD_ADDR_OWVAR 21
4710: PUSH
4711: LD_INT 3
4713: ST_TO_ADDR
// PrepareMechanic ( false , 7 - Difficulty ) ;
4714: LD_INT 0
4716: PPUSH
4717: LD_INT 7
4719: PUSH
4720: LD_OWVAR 67
4724: MINUS
4725: PPUSH
4726: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4730: CALL_OW 44
4734: PPUSH
4735: LD_VAR 0 7
4739: PPUSH
4740: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4744: LD_VAR 0 7
4748: PPUSH
4749: LD_INT 158
4751: PPUSH
4752: LD_INT 106
4754: PPUSH
4755: CALL_OW 111
// for j := 1 to 2 do
4759: LD_ADDR_VAR 0 3
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 2
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4860
// begin uc_side := i ;
4775: LD_ADDR_OWVAR 20
4779: PUSH
4780: LD_VAR 0 2
4784: ST_TO_ADDR
// uc_nation := nation_russian ;
4785: LD_ADDR_OWVAR 21
4789: PUSH
4790: LD_INT 3
4792: ST_TO_ADDR
// PrepareSoldier ( false , 7 - Difficulty ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 7
4798: PUSH
4799: LD_OWVAR 67
4803: MINUS
4804: PPUSH
4805: CALL_OW 381
// un := CreateHuman ;
4809: LD_ADDR_VAR 0 4
4813: PUSH
4814: CALL_OW 44
4818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4819: LD_INT 35
4821: PPUSH
4822: CALL_OW 67
// until PlaceUnitArea ( un , southSpawnArea , false ) ;
4826: LD_VAR 0 4
4830: PPUSH
4831: LD_INT 31
4833: PPUSH
4834: LD_INT 0
4836: PPUSH
4837: CALL_OW 49
4841: IFFALSE 4819
// ComMoveXY ( un , 158 , 106 ) ;
4843: LD_VAR 0 4
4847: PPUSH
4848: LD_INT 158
4850: PPUSH
4851: LD_INT 106
4853: PPUSH
4854: CALL_OW 111
// end ;
4858: GO 4772
4860: POP
4861: POP
// end ; end ;
4862: GO 4595
4864: POP
4865: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4866: LD_OWVAR 1
4870: PUSH
4871: LD_EXP 28
4875: GREATER
4876: IFFALSE 4884
4878: PUSH
4879: LD_EXP 23
4883: AND
4884: IFFALSE 5076
// begin if tick mod 2 2$00 = 0 then
4886: LD_OWVAR 1
4890: PUSH
4891: LD_INT 4200
4893: MOD
4894: PUSH
4895: LD_INT 0
4897: EQUAL
4898: IFFALSE 5076
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_VAR 0 6
4909: PPUSH
4910: LD_INT 1
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: CALL 32396 0 1
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: CALL 34722 0 4
4930: ST_TO_ADDR
// for s := 1 to tmp do
4931: LD_ADDR_VAR 0 5
4935: PUSH
4936: DOUBLE
4937: LD_INT 1
4939: DEC
4940: ST_TO_ADDR
4941: LD_VAR 0 6
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5074
// begin i := tmp [ s ] ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_VAR 0 6
4958: PUSH
4959: LD_VAR 0 5
4963: ARRAY
4964: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4965: LD_EXP 7
4969: PUSH
4970: LD_VAR 0 2
4974: ARRAY
4975: IFFALSE 4990
4977: PUSH
4978: LD_EXP 25
4982: PUSH
4983: LD_VAR 0 2
4987: ARRAY
4988: NOT
4989: AND
4990: IFFALSE 5004
4992: PUSH
4993: LD_EXP 27
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: AND
5004: IFFALSE 5072
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
5006: LD_EXP 27
5010: PUSH
5011: LD_VAR 0 2
5015: ARRAY
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: LD_INT 7
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
5031: LD_ADDR_EXP 27
5035: PUSH
5036: LD_EXP 27
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_EXP 27
5050: PUSH
5051: LD_VAR 0 2
5055: ARRAY
5056: PPUSH
5057: LD_INT 1
5059: PPUSH
5060: CALL_OW 3
5064: PPUSH
5065: CALL_OW 1
5069: ST_TO_ADDR
// break ;
5070: GO 5074
// end ; end ;
5072: GO 4946
5074: POP
5075: POP
// end ; end ; if not multi_custom_commanders then
5076: LD_EXP 16
5080: NOT
5081: IFFALSE 5196
// begin for i := 1 to 8 do
5083: LD_ADDR_VAR 0 2
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 8
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
5099: LD_INT 22
5101: PUSH
5102: LD_VAR 0 2
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 69
5115: PUSH
5116: LD_INT 0
5118: EQUAL
5119: IFFALSE 5134
5121: PUSH
5122: LD_EXP 25
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: NOT
5133: AND
5134: IFFALSE 5168
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
5136: LD_ADDR_EXP 25
5140: PUSH
5141: LD_EXP 25
5145: PPUSH
5146: LD_VAR 0 2
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 1
5158: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
5159: LD_VAR 0 2
5163: PPUSH
5164: CALL 5768 0 1
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
5172: LD_EXP 25
5176: PPUSH
5177: CALL 32396 0 1
5181: PUSH
5182: LD_EXP 7
5186: PPUSH
5187: CALL 32396 0 1
5191: EQUAL
5192: IFFALSE 5196
// break ;
5194: GO 5220
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
5196: CALL 5334 0 0
5200: NOT
5201: IFFALSE 5209
5203: PUSH
5204: LD_EXP 2
5208: AND
5209: IFTRUE 5218
5211: PUSH
5212: LD_EXP 24
5216: NOT
5217: OR
5218: IFFALSE 4102
// game := false ;
5220: LD_ADDR_EXP 2
5224: PUSH
5225: LD_INT 0
5227: ST_TO_ADDR
// for i := 1 to 8 do
5228: LD_ADDR_VAR 0 2
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 8
5240: PUSH
5241: FOR_TO
5242: IFFALSE 5278
// begin if multi_sides [ i ] then
5244: LD_EXP 7
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: IFFALSE 5276
// SetMultiScore ( i , multi_points [ i ] ) ;
5256: LD_VAR 0 2
5260: PPUSH
5261: LD_EXP 32
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PPUSH
5272: CALL_OW 506
// end ;
5276: GO 5241
5278: POP
5279: POP
// if multi_loosers [ your_side ] then
5280: LD_EXP 25
5284: PUSH
5285: LD_OWVAR 2
5289: ARRAY
5290: IFFALSE 5313
// begin if Multiplayer then
5292: LD_OWVAR 4
5296: IFFALSE 5304
// YouLostInMultiplayer else
5298: CALL_OW 107
5302: GO 5311
// YouLost (  ) ;
5304: LD_STRING 
5306: PPUSH
5307: CALL_OW 104
// end else
5311: GO 5329
// begin if Multiplayer then
5313: LD_OWVAR 4
5317: IFFALSE 5325
// YouWinInMultiplayer else
5319: CALL_OW 106
5323: GO 5329
// YouWin ;
5325: CALL_OW 103
// end ; end ;
5329: LD_VAR 0 1
5333: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
5334: LD_INT 0
5336: PPUSH
5337: PPUSH
// result := false ;
5338: LD_ADDR_VAR 0 1
5342: PUSH
5343: LD_INT 0
5345: ST_TO_ADDR
// for side in botSides do
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_EXP 3
5355: PUSH
5356: FOR_IN
5357: IFFALSE 5418
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: LD_INT 22
5366: PUSH
5367: LD_VAR 0 2
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 50
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL_OW 69
5401: PUSH
5402: LD_INT 0
5404: GREATER
5405: ST_TO_ADDR
// if result then
5406: LD_VAR 0 1
5410: IFFALSE 5416
// exit ;
5412: POP
5413: POP
5414: GO 5420
// end ;
5416: GO 5356
5418: POP
5419: POP
// end ;
5420: LD_VAR 0 1
5424: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
// result := [ ] ;
5429: LD_ADDR_VAR 0 1
5433: PUSH
5434: EMPTY
5435: ST_TO_ADDR
// for i := 1 to 8 do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: DOUBLE
5442: LD_INT 1
5444: DEC
5445: ST_TO_ADDR
5446: LD_INT 8
5448: PUSH
5449: FOR_TO
5450: IFFALSE 5507
// begin if multi_sides [ i ] then
5452: LD_EXP 7
5456: PUSH
5457: LD_VAR 0 2
5461: ARRAY
5462: IFFALSE 5505
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
5464: LD_ADDR_VAR 0 1
5468: PUSH
5469: LD_VAR 0 1
5473: PUSH
5474: LD_STRING #coop-points
5476: PUSH
5477: LD_VAR 0 2
5481: PUSH
5482: LD_VAR 0 2
5486: PUSH
5487: LD_EXP 32
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: ADD
5504: ST_TO_ADDR
// end ; end ;
5505: GO 5449
5507: POP
5508: POP
// end ;
5509: LD_VAR 0 1
5513: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
5514: LD_INT 0
5516: PPUSH
5517: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5518: LD_ADDR_EXP 32
5522: PUSH
5523: LD_INT 0
5525: PUSH
5526: LD_INT 0
5528: PUSH
5529: LD_INT 0
5531: PUSH
5532: LD_INT 0
5534: PUSH
5535: LD_INT 0
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: LD_INT 0
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// multi_points_conditions := [ ] ;
5557: LD_ADDR_EXP 33
5561: PUSH
5562: EMPTY
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 1
5568: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
5569: LD_INT 0
5571: PPUSH
// if not multi_points or not side or side > 8 then
5572: LD_EXP 32
5576: NOT
5577: IFTRUE 5586
5579: PUSH
5580: LD_VAR 0 1
5584: NOT
5585: OR
5586: IFTRUE 5598
5588: PUSH
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 8
5596: GREATER
5597: OR
5598: IFFALSE 5602
// exit ;
5600: GO 5639
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5602: LD_ADDR_EXP 32
5606: PUSH
5607: LD_EXP 32
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: LD_EXP 32
5621: PUSH
5622: LD_VAR 0 1
5626: ARRAY
5627: PUSH
5628: LD_VAR 0 2
5632: PLUS
5633: PPUSH
5634: CALL_OW 1
5638: ST_TO_ADDR
// end ;
5639: LD_VAR 0 3
5643: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5644: LD_INT 0
5646: PPUSH
// if not multi_points or not side or side > 8 then
5647: LD_EXP 32
5651: NOT
5652: IFTRUE 5661
5654: PUSH
5655: LD_VAR 0 1
5659: NOT
5660: OR
5661: IFTRUE 5673
5663: PUSH
5664: LD_VAR 0 1
5668: PUSH
5669: LD_INT 8
5671: GREATER
5672: OR
5673: IFFALSE 5677
// exit ;
5675: GO 5693
// result := multi_points [ side ] ;
5677: LD_ADDR_VAR 0 2
5681: PUSH
5682: LD_EXP 32
5686: PUSH
5687: LD_VAR 0 1
5691: ARRAY
5692: ST_TO_ADDR
// end ;
5693: LD_VAR 0 2
5697: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5698: LD_INT 0
5700: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5701: LD_ADDR_EXP 33
5705: PUSH
5706: LD_EXP 33
5710: PPUSH
5711: LD_EXP 33
5715: PUSH
5716: LD_INT 1
5718: PLUS
5719: PPUSH
5720: LD_VAR 0 1
5724: PPUSH
5725: CALL_OW 1
5729: ST_TO_ADDR
// end ;
5730: LD_VAR 0 2
5734: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5735: LD_INT 0
5737: PPUSH
// if not id then
5738: LD_VAR 0 1
5742: NOT
5743: IFFALSE 5747
// exit ;
5745: GO 5763
// result := multi_points_conditions [ id ] ;
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: LD_EXP 33
5756: PUSH
5757: LD_VAR 0 1
5761: ARRAY
5762: ST_TO_ADDR
// end ;
5763: LD_VAR 0 2
5767: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5768: LD_INT 0
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
// players := [ ] ;
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: EMPTY
5781: ST_TO_ADDR
// for i = 1 to 8 do
5782: LD_ADDR_VAR 0 4
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 8
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5857
// begin if i = side then
5798: LD_VAR 0 4
5802: PUSH
5803: LD_VAR 0 1
5807: EQUAL
5808: IFFALSE 5812
// continue ;
5810: GO 5795
// if multi_sides [ i ] and not multi_loosers [ i ] then
5812: LD_EXP 7
5816: PUSH
5817: LD_VAR 0 4
5821: ARRAY
5822: IFFALSE 5837
5824: PUSH
5825: LD_EXP 25
5829: PUSH
5830: LD_VAR 0 4
5834: ARRAY
5835: NOT
5836: AND
5837: IFFALSE 5855
// players := players ^ i ;
5839: LD_ADDR_VAR 0 3
5843: PUSH
5844: LD_VAR 0 3
5848: PUSH
5849: LD_VAR 0 4
5853: ADD
5854: ST_TO_ADDR
// end ;
5855: GO 5795
5857: POP
5858: POP
// if not players then
5859: LD_VAR 0 3
5863: NOT
5864: IFFALSE 5868
// exit ;
5866: GO 6135
// if players = 1 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 1
5875: EQUAL
5876: IFFALSE 5937
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5878: LD_ADDR_VAR 0 4
5882: PUSH
5883: LD_INT 22
5885: PUSH
5886: LD_VAR 0 1
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 51
5897: PUSH
5898: EMPTY
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 69
5909: PUSH
5910: FOR_IN
5911: IFFALSE 5933
// SetSide ( i , players [ 1 ] ) ;
5913: LD_VAR 0 4
5917: PPUSH
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 235
5931: GO 5910
5933: POP
5934: POP
// end else
5935: GO 6135
// begin j := 1 ;
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5945: LD_ADDR_VAR 0 4
5949: PUSH
5950: LD_INT 22
5952: PUSH
5953: LD_VAR 0 1
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 2
5964: PUSH
5965: LD_INT 21
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 51
5977: PUSH
5978: EMPTY
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 21
5987: PUSH
5988: LD_INT 2
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 69
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6133
// begin SetSide ( i , players [ j ] ) ;
6012: LD_VAR 0 4
6016: PPUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 5
6026: ARRAY
6027: PPUSH
6028: CALL_OW 235
// if IsDrivenBy ( i ) then
6032: LD_VAR 0 4
6036: PPUSH
6037: CALL_OW 311
6041: IFFALSE 6068
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: CALL_OW 311
6052: PPUSH
6053: LD_VAR 0 3
6057: PUSH
6058: LD_VAR 0 5
6062: ARRAY
6063: PPUSH
6064: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
6068: LD_VAR 0 4
6072: PPUSH
6073: CALL_OW 310
6077: PPUSH
6078: CALL_OW 247
6082: PUSH
6083: LD_INT 3
6085: EQUAL
6086: IFFALSE 6097
// ComExitBuilding ( i ) ;
6088: LD_VAR 0 4
6092: PPUSH
6093: CALL_OW 122
// j := j + 1 ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_VAR 0 5
6106: PUSH
6107: LD_INT 1
6109: PLUS
6110: ST_TO_ADDR
// if j > players then
6111: LD_VAR 0 5
6115: PUSH
6116: LD_VAR 0 3
6120: GREATER
6121: IFFALSE 6131
// j := 1 ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// end ;
6131: GO 6009
6133: POP
6134: POP
// end ; end ;
6135: LD_VAR 0 2
6139: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
6140: LD_INT 0
6142: PPUSH
6143: PPUSH
6144: PPUSH
// i := 3 ;
6145: LD_ADDR_VAR 0 2
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
6153: LD_ADDR_VAR 0 3
6157: PUSH
6158: LD_INT 5
6160: PUSH
6161: LD_INT 10
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 120
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 101
6180: PUSH
6181: LD_INT 8
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 27
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
6204: LD_INT 4
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_VAR 0 2
6219: ARRAY
6220: PUSH
6221: LD_INT 1
6223: ARRAY
6224: PPUSH
6225: LD_VAR 0 3
6229: PUSH
6230: LD_VAR 0 2
6234: ARRAY
6235: PUSH
6236: LD_INT 2
6238: ARRAY
6239: PPUSH
6240: LD_INT 0
6242: PPUSH
6243: CALL_OW 58
// end ;
6247: LD_VAR 0 1
6251: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
6252: LD_INT 0
6254: PPUSH
// if not side or side > 8 then
6255: LD_VAR 0 1
6259: NOT
6260: IFTRUE 6272
6262: PUSH
6263: LD_VAR 0 1
6267: PUSH
6268: LD_INT 8
6270: GREATER
6271: OR
6272: IFFALSE 6276
// exit ;
6274: GO 6293
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
6276: LD_VAR 0 1
6280: PPUSH
6281: LD_INT 6
6283: PPUSH
6284: CALL 5735 0 1
6288: PPUSH
6289: CALL 5569 0 2
// end ;
6293: LD_VAR 0 2
6297: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
6298: LD_INT 0
6300: PPUSH
// if not side or side > 8 then
6301: LD_VAR 0 1
6305: NOT
6306: IFTRUE 6318
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 8
6316: GREATER
6317: OR
6318: IFFALSE 6322
// exit ;
6320: GO 6339
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
6322: LD_VAR 0 1
6326: PPUSH
6327: LD_INT 4
6329: PPUSH
6330: CALL 5735 0 1
6334: PPUSH
6335: CALL 5569 0 2
// end ;
6339: LD_VAR 0 2
6343: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
6344: LD_INT 0
6346: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
6347: LD_VAR 0 1
6351: NOT
6352: IFTRUE 6364
6354: PUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_INT 8
6362: GREATER
6363: OR
6364: IFTRUE 6392
6366: PUSH
6367: LD_VAR 0 2
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_INT 6
6377: PUSH
6378: LD_INT 36
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: IN
6390: NOT
6391: OR
6392: IFFALSE 6396
// exit ;
6394: GO 6413
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
6396: LD_VAR 0 1
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL 5735 0 1
6408: PPUSH
6409: CALL 5569 0 2
// end ;
6413: LD_VAR 0 3
6417: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
6418: LD_INT 0
6420: PPUSH
6421: PPUSH
// if not un then
6422: LD_VAR 0 1
6426: NOT
6427: IFFALSE 6431
// exit ;
6429: GO 6477
// if not points then
6431: LD_VAR 0 3
6435: NOT
6436: IFFALSE 6453
// gained_points := Multiplayer_GetCondition ( 1 ) else
6438: LD_ADDR_VAR 0 5
6442: PUSH
6443: LD_INT 1
6445: PPUSH
6446: CALL 5735 0 1
6450: ST_TO_ADDR
6451: GO 6463
// gained_points := points ;
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: LD_VAR 0 3
6462: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
6463: LD_VAR 0 2
6467: PPUSH
6468: LD_VAR 0 5
6472: PPUSH
6473: CALL 5569 0 2
6477: LD_VAR 0 4
6481: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
6482: LD_INT 0
6484: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL 5735 0 1
6497: PPUSH
6498: CALL 5569 0 2
// end ; end_of_file
6502: LD_VAR 0 2
6506: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
6515: PPUSH
6516: PPUSH
6517: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
6518: LD_ADDR_EXP 35
6522: PUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: LD_INT 1
6530: PPUSH
6531: LD_INT 1
6533: PPUSH
6534: CALL 30319 0 3
6538: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
6539: LD_ADDR_EXP 36
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: LD_INT 6
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 3
6564: PUSH
6565: LD_INT 1
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: LD_INT 5
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: LD_INT 1
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: LD_INT 4
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 1
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: LD_INT 4
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: LD_INT 1
6621: PUSH
6622: LD_INT 1
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: ST_TO_ADDR
// amBuildings := [ ] ;
6641: LD_ADDR_EXP 37
6645: PUSH
6646: EMPTY
6647: ST_TO_ADDR
// amVehicles := [ ] ;
6648: LD_ADDR_EXP 38
6652: PUSH
6653: EMPTY
6654: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6655: LD_ADDR_EXP 39
6659: PUSH
6660: EMPTY
6661: ST_TO_ADDR
// amDrivers := [ ] ;
6662: LD_ADDR_EXP 40
6666: PUSH
6667: EMPTY
6668: ST_TO_ADDR
// amVehiclesCounter := 1 ;
6669: LD_ADDR_EXP 41
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6677: LD_ADDR_EXP 44
6681: PUSH
6682: LD_INT 6
6684: PUSH
6685: LD_INT 8
6687: PUSH
6688: LD_INT 10
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_OWVAR 67
6700: ARRAY
6701: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6702: LD_ADDR_VAR 0 8
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PUSH
6721: LD_OWVAR 67
6725: ARRAY
6726: ST_TO_ADDR
// uc_side := side ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_VAR 0 1
6736: ST_TO_ADDR
// uc_nation := nation_american ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// hc_gallery := us ;
6745: LD_ADDR_OWVAR 33
6749: PUSH
6750: LD_STRING us
6752: ST_TO_ADDR
// hc_face_number := 19 ;
6753: LD_ADDR_OWVAR 34
6757: PUSH
6758: LD_INT 19
6760: ST_TO_ADDR
// hc_importance := 100 ;
6761: LD_ADDR_OWVAR 32
6765: PUSH
6766: LD_INT 100
6768: ST_TO_ADDR
// hc_name := Sikorski ;
6769: LD_ADDR_OWVAR 26
6773: PUSH
6774: LD_STRING Sikorski
6776: ST_TO_ADDR
// hc_sex := sex_male ;
6777: LD_ADDR_OWVAR 27
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6785: LD_ADDR_OWVAR 31
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 3
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6808: LD_ADDR_OWVAR 29
6812: PUSH
6813: LD_INT 10
6815: PUSH
6816: LD_INT 11
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: ST_TO_ADDR
// Sikorski := CreateHuman ;
6823: LD_ADDR_EXP 34
6827: PUSH
6828: CALL_OW 44
6832: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , HexInfo ( 35 , 45 ) ) ;
6833: LD_EXP 34
6837: PPUSH
6838: LD_INT 35
6840: PPUSH
6841: LD_INT 45
6843: PPUSH
6844: CALL_OW 428
6848: PPUSH
6849: CALL_OW 52
// InitHC_All ( ) ;
6853: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 6 , 6 , 3 ] ) ;
6857: LD_ADDR_EXP 42
6861: PUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 3
6867: PPUSH
6868: LD_STRING 
6870: PPUSH
6871: LD_VAR 0 8
6875: PPUSH
6876: LD_INT 800
6878: PUSH
6879: LD_INT 120
6881: PUSH
6882: LD_INT 0
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: PPUSH
6890: LD_INT 10
6892: PUSH
6893: LD_INT 11
6895: PUSH
6896: LD_INT 12
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_OWVAR 67
6908: ARRAY
6909: PUSH
6910: LD_INT 6
6912: PUSH
6913: LD_INT 6
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL 39029 0 6
6929: ST_TO_ADDR
// amForceTmp := [ ] ;
6930: LD_ADDR_EXP 43
6934: PUSH
6935: EMPTY
6936: ST_TO_ADDR
// if Difficulty = 3 then
6937: LD_OWVAR 67
6941: PUSH
6942: LD_INT 3
6944: EQUAL
6945: IFFALSE 6976
// begin bc_type := b_breastwork ;
6947: LD_ADDR_OWVAR 42
6951: PUSH
6952: LD_INT 31
6954: ST_TO_ADDR
// bc_level := 7 ;
6955: LD_ADDR_OWVAR 43
6959: PUSH
6960: LD_INT 7
6962: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6963: LD_INT 79
6965: PPUSH
6966: LD_INT 72
6968: PPUSH
6969: LD_INT 5
6971: PPUSH
6972: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 31
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: LD_INT 95
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 58
7022: PUSH
7023: EMPTY
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 69
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7167
// begin d := GetDir ( i ) ;
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 254
7054: ST_TO_ADDR
// if d < 3 then
7055: LD_VAR 0 4
7059: PUSH
7060: LD_INT 3
7062: LESS
7063: IFFALSE 7081
// d := d + 3 else
7065: LD_ADDR_VAR 0 4
7069: PUSH
7070: LD_VAR 0 4
7074: PUSH
7075: LD_INT 3
7077: PLUS
7078: ST_TO_ADDR
7079: GO 7095
// d := d - 3 ;
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: LD_VAR 0 4
7090: PUSH
7091: LD_INT 3
7093: MINUS
7094: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_VAR 0 8
7102: PPUSH
7103: CALL_OW 381
// un := CreateHuman ;
7107: LD_ADDR_VAR 0 6
7111: PUSH
7112: CALL_OW 44
7116: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
7117: LD_ADDR_EXP 43
7121: PUSH
7122: LD_EXP 43
7126: PPUSH
7127: LD_VAR 0 6
7131: PPUSH
7132: CALL 68372 0 2
7136: ST_TO_ADDR
// SetDir ( un , d ) ;
7137: LD_VAR 0 6
7141: PPUSH
7142: LD_VAR 0 4
7146: PPUSH
7147: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
7151: LD_VAR 0 6
7155: PPUSH
7156: LD_VAR 0 3
7160: PPUSH
7161: CALL_OW 52
// end ;
7165: GO 7037
7167: POP
7168: POP
// for i := 1 to 3 do
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: DOUBLE
7175: LD_INT 1
7177: DEC
7178: ST_TO_ADDR
7179: LD_INT 3
7181: PUSH
7182: FOR_TO
7183: IFFALSE 7244
// begin PrepareEngineer ( false , skill ) ;
7185: LD_INT 0
7187: PPUSH
7188: LD_VAR 0 8
7192: PPUSH
7193: CALL_OW 382
// un := CreateHuman ;
7197: LD_ADDR_VAR 0 6
7201: PUSH
7202: CALL_OW 44
7206: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
7207: LD_VAR 0 6
7211: PPUSH
7212: LD_INT 29
7214: PPUSH
7215: LD_INT 0
7217: PPUSH
7218: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
7222: LD_ADDR_EXP 43
7226: PUSH
7227: LD_EXP 43
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL 68372 0 2
7241: ST_TO_ADDR
// end ;
7242: GO 7182
7244: POP
7245: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 21
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: PUSH
7282: FOR_IN
7283: IFFALSE 7316
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
7285: LD_VAR 0 3
7289: PPUSH
7290: LD_INT 3
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: LD_INT 7
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PUSH
7304: LD_OWVAR 67
7308: ARRAY
7309: PPUSH
7310: CALL_OW 241
7314: GO 7282
7316: POP
7317: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_INT 22
7325: PUSH
7326: LD_VAR 0 1
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 32
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 69
7353: PUSH
7354: FOR_IN
7355: IFFALSE 7396
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_INT 5
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 5
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 3
7383: MOD
7384: PUSH
7385: LD_INT 1
7387: PLUS
7388: ARRAY
7389: PPUSH
7390: CALL_OW 431
7394: GO 7354
7396: POP
7397: POP
// end ;
7398: LD_VAR 0 2
7402: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7403: LD_INT 0
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
7418: PPUSH
7419: PPUSH
7420: PPUSH
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// enable ;
7432: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7433: LD_ADDR_VAR 0 11
7437: PUSH
7438: LD_INT 81
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// if tmp then
7455: LD_VAR 0 11
7459: IFFALSE 7480
// enemySide := GetSide ( tmp [ 1 ] ) ;
7461: LD_ADDR_VAR 0 35
7465: PUSH
7466: LD_VAR 0 11
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 255
7479: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
7480: LD_ADDR_VAR 0 23
7484: PUSH
7485: LD_VAR 0 4
7489: PPUSH
7490: LD_INT 81
7492: PUSH
7493: LD_VAR 0 1
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PPUSH
7502: CALL_OW 70
7506: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7507: LD_ADDR_VAR 0 24
7511: PUSH
7512: LD_VAR 0 5
7516: PPUSH
7517: LD_INT 81
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PPUSH
7529: CALL_OW 70
7533: ST_TO_ADDR
// vehicles := amVehicles ;
7534: LD_ADDR_VAR 0 27
7538: PUSH
7539: LD_EXP 38
7543: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7544: LD_ADDR_VAR 0 33
7548: PUSH
7549: LD_VAR 0 3
7553: PPUSH
7554: LD_INT 22
7556: PUSH
7557: LD_VAR 0 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: LD_INT 30
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 30
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 70
7602: ST_TO_ADDR
// if depot then
7603: LD_VAR 0 33
7607: IFFALSE 7623
// depot := depot [ 1 ] ;
7609: LD_ADDR_VAR 0 33
7613: PUSH
7614: LD_VAR 0 33
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: ST_TO_ADDR
// if amTech then
7623: LD_EXP 35
7627: IFFALSE 7786
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7629: LD_ADDR_VAR 0 13
7633: PUSH
7634: LD_VAR 0 3
7638: PPUSH
7639: LD_INT 22
7641: PUSH
7642: LD_VAR 0 1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 50
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: LD_INT 2
7659: PUSH
7660: LD_INT 30
7662: PUSH
7663: LD_INT 6
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 30
7672: PUSH
7673: LD_INT 7
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 8
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 70
7705: ST_TO_ADDR
// if lab then
7706: LD_VAR 0 13
7710: IFFALSE 7786
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7712: LD_VAR 0 13
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: CALL_OW 461
7725: PUSH
7726: LD_INT 2
7728: EQUAL
7729: IFFALSE 7786
// begin for i in amTech do
7731: LD_ADDR_VAR 0 10
7735: PUSH
7736: LD_EXP 35
7740: PUSH
7741: FOR_IN
7742: IFFALSE 7784
// if CanBeResearched ( lab [ 1 ] , i ) then
7744: LD_VAR 0 13
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: LD_VAR 0 10
7757: PPUSH
7758: CALL_OW 430
7762: IFFALSE 7782
// begin AddComResearch ( lab [ 1 ] , i ) ;
7764: LD_VAR 0 13
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_VAR 0 10
7777: PPUSH
7778: CALL_OW 184
// end ;
7782: GO 7741
7784: POP
7785: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7786: LD_ADDR_VAR 0 30
7790: PUSH
7791: LD_VAR 0 3
7795: PPUSH
7796: LD_INT 22
7798: PUSH
7799: LD_VAR 0 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 30
7810: PUSH
7811: LD_INT 3
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 50
7820: PUSH
7821: EMPTY
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 70
7833: ST_TO_ADDR
// if fac then
7834: LD_VAR 0 30
7838: IFFALSE 8173
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7840: LD_VAR 0 30
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: CALL_OW 461
7853: PUSH
7854: LD_INT 2
7856: EQUAL
7857: IFFALSE 8173
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7859: LD_ADDR_VAR 0 31
7863: PUSH
7864: LD_VAR 0 3
7868: PPUSH
7869: LD_INT 2
7871: PUSH
7872: LD_INT 30
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 30
7884: PUSH
7885: LD_INT 33
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 35
7899: PUSH
7900: LD_INT 0
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PPUSH
7911: CALL_OW 70
7915: ST_TO_ADDR
// if emptyTowers then
7916: LD_VAR 0 31
7920: IFFALSE 7970
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7922: LD_ADDR_VAR 0 32
7926: PUSH
7927: LD_VAR 0 31
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PPUSH
7936: LD_VAR 0 3
7940: PPUSH
7941: CALL 40721 0 2
7945: ST_TO_ADDR
// if weapon then
7946: LD_VAR 0 32
7950: IFFALSE 7970
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7952: LD_VAR 0 31
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 32
7965: PPUSH
7966: CALL_OW 148
// end ; if amConstructList then
7970: LD_EXP 36
7974: IFFALSE 8173
// for i := 1 to Count ( amConstructList ) do
7976: LD_ADDR_VAR 0 10
7980: PUSH
7981: DOUBLE
7982: LD_INT 1
7984: DEC
7985: ST_TO_ADDR
7986: LD_EXP 36
7990: PPUSH
7991: CALL 32396 0 1
7995: PUSH
7996: FOR_TO
7997: IFFALSE 8171
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7999: LD_VAR 0 30
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PPUSH
8008: LD_EXP 36
8012: PUSH
8013: LD_VAR 0 10
8017: ARRAY
8018: PUSH
8019: LD_INT 1
8021: ARRAY
8022: PPUSH
8023: LD_EXP 36
8027: PUSH
8028: LD_VAR 0 10
8032: ARRAY
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PPUSH
8038: LD_EXP 36
8042: PUSH
8043: LD_VAR 0 10
8047: ARRAY
8048: PUSH
8049: LD_INT 3
8051: ARRAY
8052: PPUSH
8053: LD_EXP 36
8057: PUSH
8058: LD_VAR 0 10
8062: ARRAY
8063: PUSH
8064: LD_INT 4
8066: ARRAY
8067: PPUSH
8068: CALL_OW 448
8072: IFFALSE 8169
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
8074: LD_VAR 0 30
8078: PUSH
8079: LD_INT 1
8081: ARRAY
8082: PPUSH
8083: LD_EXP 36
8087: PUSH
8088: LD_VAR 0 10
8092: ARRAY
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PPUSH
8098: LD_EXP 36
8102: PUSH
8103: LD_VAR 0 10
8107: ARRAY
8108: PUSH
8109: LD_INT 2
8111: ARRAY
8112: PPUSH
8113: LD_EXP 36
8117: PUSH
8118: LD_VAR 0 10
8122: ARRAY
8123: PUSH
8124: LD_INT 3
8126: ARRAY
8127: PPUSH
8128: LD_EXP 36
8132: PUSH
8133: LD_VAR 0 10
8137: ARRAY
8138: PUSH
8139: LD_INT 4
8141: ARRAY
8142: PPUSH
8143: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
8147: LD_ADDR_EXP 36
8151: PUSH
8152: LD_EXP 36
8156: PPUSH
8157: LD_VAR 0 10
8161: PPUSH
8162: CALL_OW 3
8166: ST_TO_ADDR
// break ;
8167: GO 8171
// end ; end ;
8169: GO 7996
8171: POP
8172: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8173: LD_ADDR_VAR 0 11
8177: PUSH
8178: LD_VAR 0 3
8182: PPUSH
8183: LD_INT 22
8185: PUSH
8186: LD_VAR 0 1
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 21
8197: PUSH
8198: LD_INT 3
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 57
8210: PUSH
8211: EMPTY
8212: LIST
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: LD_INT 24
8223: PUSH
8224: LD_INT 1000
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8246: LD_ADDR_VAR 0 18
8250: PUSH
8251: LD_VAR 0 3
8255: PPUSH
8256: CALL_OW 435
8260: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8261: LD_ADDR_VAR 0 15
8265: PUSH
8266: LD_VAR 0 6
8270: PPUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 3
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 50
8283: PUSH
8284: EMPTY
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 72
8295: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
8296: LD_VAR 0 15
8300: PPUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 120
8306: PUSH
8307: LD_INT 7
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 54
8323: PUSH
8324: EMPTY
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 72
8339: IFFALSE 8356
8341: PUSH
8342: LD_VAR 0 30
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 302
8355: AND
8356: IFFALSE 8415
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
8358: LD_VAR 0 15
8362: PPUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 120
8368: PUSH
8369: LD_INT 7
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 54
8385: PUSH
8386: EMPTY
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 72
8401: PPUSH
8402: LD_VAR 0 30
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8415: LD_ADDR_VAR 0 19
8419: PUSH
8420: LD_VAR 0 6
8424: PPUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 50
8437: PUSH
8438: EMPTY
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 72
8449: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8450: LD_ADDR_VAR 0 13
8454: PUSH
8455: LD_VAR 0 3
8459: PPUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 30
8465: PUSH
8466: LD_INT 6
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 30
8475: PUSH
8476: LD_INT 7
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: ST_TO_ADDR
// if sci then
8504: LD_VAR 0 19
8508: IFFALSE 8669
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8510: LD_ADDR_VAR 0 21
8514: PUSH
8515: LD_VAR 0 6
8519: PPUSH
8520: LD_INT 95
8522: PUSH
8523: LD_VAR 0 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 120
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: ST_TO_ADDR
// if hurtUnits then
8551: LD_VAR 0 21
8555: IFFALSE 8616
// begin for i in sci do
8557: LD_ADDR_VAR 0 10
8561: PUSH
8562: LD_VAR 0 19
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8612
// if IsInUnit ( i ) then
8570: LD_VAR 0 10
8574: PPUSH
8575: CALL_OW 310
8579: IFFALSE 8592
// ComExitBuilding ( i ) else
8581: LD_VAR 0 10
8585: PPUSH
8586: CALL_OW 122
8590: GO 8610
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8592: LD_VAR 0 10
8596: PPUSH
8597: LD_VAR 0 21
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: CALL_OW 128
8610: GO 8567
8612: POP
8613: POP
// end else
8614: GO 8669
// if lab then
8616: LD_VAR 0 13
8620: IFFALSE 8669
// begin for i in sci do
8622: LD_ADDR_VAR 0 10
8626: PUSH
8627: LD_VAR 0 19
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8667
// if not IsInUnit ( i ) then
8635: LD_VAR 0 10
8639: PPUSH
8640: CALL_OW 310
8644: NOT
8645: IFFALSE 8665
// ComEnterUnit ( i , lab [ 1 ] ) ;
8647: LD_VAR 0 10
8651: PPUSH
8652: LD_VAR 0 13
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: CALL_OW 120
8665: GO 8632
8667: POP
8668: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8669: LD_ADDR_VAR 0 14
8673: PUSH
8674: LD_VAR 0 6
8678: PPUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 2
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 72
8693: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8694: LD_ADDR_VAR 0 34
8698: PUSH
8699: LD_EXP 37
8703: ST_TO_ADDR
// if eng then
8704: LD_VAR 0 14
8708: IFFALSE 9556
// begin for i in eng do
8710: LD_ADDR_VAR 0 10
8714: PUSH
8715: LD_VAR 0 14
8719: PUSH
8720: FOR_IN
8721: IFFALSE 9554
// begin tag := GetTag ( i ) ;
8723: LD_ADDR_VAR 0 16
8727: PUSH
8728: LD_VAR 0 10
8732: PPUSH
8733: CALL_OW 110
8737: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8738: LD_VAR 0 10
8742: PPUSH
8743: LD_VAR 0 5
8747: PPUSH
8748: CALL_OW 308
8752: IFFALSE 8783
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8754: LD_VAR 0 10
8758: PPUSH
8759: LD_VAR 0 8
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PPUSH
8768: LD_VAR 0 8
8772: PUSH
8773: LD_INT 2
8775: ARRAY
8776: PPUSH
8777: CALL_OW 111
// continue ;
8781: GO 8720
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8783: LD_VAR 0 10
8787: PPUSH
8788: CALL_OW 256
8792: PUSH
8793: LD_INT 800
8795: LESS
8796: IFFALSE 8808
8798: PUSH
8799: LD_VAR 0 16
8803: PUSH
8804: LD_INT 1
8806: NONEQUAL
8807: AND
8808: IFFALSE 8858
// begin SetTag ( i , tHeal ) ;
8810: LD_VAR 0 10
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8822: LD_VAR 0 10
8826: PPUSH
8827: LD_VAR 0 7
8831: PUSH
8832: LD_INT 1
8834: ARRAY
8835: PPUSH
8836: LD_VAR 0 7
8840: PUSH
8841: LD_INT 2
8843: ARRAY
8844: PPUSH
8845: CALL_OW 111
// AddComHold ( i ) ;
8849: LD_VAR 0 10
8853: PPUSH
8854: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8858: LD_VAR 0 16
8862: PUSH
8863: LD_INT 1
8865: EQUAL
8866: IFFALSE 8883
8868: PUSH
8869: LD_VAR 0 10
8873: PPUSH
8874: CALL_OW 256
8878: PUSH
8879: LD_INT 1000
8881: EQUAL
8882: AND
8883: IFFALSE 8897
// SetTag ( i , 0 ) ;
8885: LD_VAR 0 10
8889: PPUSH
8890: LD_INT 0
8892: PPUSH
8893: CALL_OW 109
// if not tag then
8897: LD_VAR 0 16
8901: NOT
8902: IFFALSE 9073
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8904: LD_ADDR_VAR 0 12
8908: PUSH
8909: LD_VAR 0 3
8913: PPUSH
8914: LD_INT 57
8916: PUSH
8917: EMPTY
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: ST_TO_ADDR
// if undone then
8925: LD_VAR 0 12
8929: IFFALSE 8951
// begin ComComplete ( i , undone [ 1 ] ) ;
8931: LD_VAR 0 10
8935: PPUSH
8936: LD_VAR 0 12
8940: PUSH
8941: LD_INT 1
8943: ARRAY
8944: PPUSH
8945: CALL 38566 0 2
// continue ;
8949: GO 8720
// end ; if cr or tmp or buildingsToBuild then
8951: LD_VAR 0 18
8955: IFTRUE 8963
8957: PUSH
8958: LD_VAR 0 11
8962: OR
8963: IFTRUE 8971
8965: PUSH
8966: LD_VAR 0 34
8970: OR
8971: IFFALSE 9047
// begin if IsInUnit ( i ) then
8973: LD_VAR 0 10
8977: PPUSH
8978: CALL_OW 310
8982: IFFALSE 8993
// ComExitBuilding ( i ) ;
8984: LD_VAR 0 10
8988: PPUSH
8989: CALL_OW 122
// if tmp then
8993: LD_VAR 0 11
8997: IFFALSE 9013
// SetTag ( i , tRepair ) else
8999: LD_VAR 0 10
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 109
9011: GO 9045
// if cr then
9013: LD_VAR 0 18
9017: IFFALSE 9033
// SetTag ( i , tCrates ) else
9019: LD_VAR 0 10
9023: PPUSH
9024: LD_INT 2
9026: PPUSH
9027: CALL_OW 109
9031: GO 9045
// SetTag ( i , tBuild ) ;
9033: LD_VAR 0 10
9037: PPUSH
9038: LD_INT 5
9040: PPUSH
9041: CALL_OW 109
// end else
9045: GO 9073
// if not IsInUnit ( i ) then
9047: LD_VAR 0 10
9051: PPUSH
9052: CALL_OW 310
9056: NOT
9057: IFFALSE 9073
// ComEnterUnit ( i , depot ) ;
9059: LD_VAR 0 10
9063: PPUSH
9064: LD_VAR 0 33
9068: PPUSH
9069: CALL_OW 120
// end ; if tag = tRepair then
9073: LD_VAR 0 16
9077: PUSH
9078: LD_INT 3
9080: EQUAL
9081: IFFALSE 9187
// begin if IsInUnit ( i ) then
9083: LD_VAR 0 10
9087: PPUSH
9088: CALL_OW 310
9092: IFFALSE 9105
// begin ComExitBuilding ( i ) ;
9094: LD_VAR 0 10
9098: PPUSH
9099: CALL_OW 122
// continue ;
9103: GO 8720
// end ; if not tmp then
9105: LD_VAR 0 11
9109: NOT
9110: IFFALSE 9126
// begin SetTag ( i , 0 ) ;
9112: LD_VAR 0 10
9116: PPUSH
9117: LD_INT 0
9119: PPUSH
9120: CALL_OW 109
// continue ;
9124: GO 8720
// end ; if not HasTask ( i ) then
9126: LD_VAR 0 10
9130: PPUSH
9131: CALL_OW 314
9135: NOT
9136: IFFALSE 9156
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9138: LD_VAR 0 10
9142: PPUSH
9143: LD_VAR 0 11
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PPUSH
9152: CALL_OW 130
// if not IsInarea ( i , area ) then
9156: LD_VAR 0 10
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: CALL_OW 308
9170: NOT
9171: IFFALSE 9187
// ComMoveToarea ( i , area ) ;
9173: LD_VAR 0 10
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 113
// end ; if tag = tBuild then
9187: LD_VAR 0 16
9191: PUSH
9192: LD_INT 5
9194: EQUAL
9195: IFFALSE 9405
// begin if IsInUnit ( i ) then
9197: LD_VAR 0 10
9201: PPUSH
9202: CALL_OW 310
9206: IFFALSE 9219
// begin ComExitBuilding ( i ) ;
9208: LD_VAR 0 10
9212: PPUSH
9213: CALL_OW 122
// continue ;
9217: GO 8720
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9219: LD_VAR 0 34
9223: NOT
9224: IFTRUE 9232
9226: PUSH
9227: LD_VAR 0 23
9231: OR
9232: IFTRUE 9240
9234: PUSH
9235: LD_VAR 0 24
9239: OR
9240: IFFALSE 9258
// begin SetTag ( i , 0 ) ;
9242: LD_VAR 0 10
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 109
// continue ;
9254: GO 8720
// end else
9256: GO 9297
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9258: LD_VAR 0 33
9262: PPUSH
9263: LD_VAR 0 34
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: CALL 72467 0 2
9280: NOT
9281: IFFALSE 9297
// begin SetTag ( i , 0 ) ;
9283: LD_VAR 0 10
9287: PPUSH
9288: LD_INT 0
9290: PPUSH
9291: CALL_OW 109
// continue ;
9295: GO 8720
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
9297: LD_ADDR_VAR 0 12
9301: PUSH
9302: LD_VAR 0 3
9306: PPUSH
9307: LD_INT 57
9309: PUSH
9310: EMPTY
9311: LIST
9312: PPUSH
9313: CALL_OW 70
9317: ST_TO_ADDR
// if undone then
9318: LD_VAR 0 12
9322: IFFALSE 9344
// begin ComComplete ( i , undone [ 1 ] ) ;
9324: LD_VAR 0 10
9328: PPUSH
9329: LD_VAR 0 12
9333: PUSH
9334: LD_INT 1
9336: ARRAY
9337: PPUSH
9338: CALL 38566 0 2
// continue ;
9342: GO 8720
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9344: LD_VAR 0 10
9348: PPUSH
9349: LD_VAR 0 34
9353: PUSH
9354: LD_INT 1
9356: ARRAY
9357: PUSH
9358: LD_INT 1
9360: ARRAY
9361: PPUSH
9362: LD_VAR 0 34
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PUSH
9371: LD_INT 2
9373: ARRAY
9374: PPUSH
9375: LD_VAR 0 34
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PUSH
9384: LD_INT 3
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 34
9392: PUSH
9393: LD_INT 1
9395: ARRAY
9396: PUSH
9397: LD_INT 4
9399: ARRAY
9400: PPUSH
9401: CALL_OW 145
// end ; if tag = tCrates then
9405: LD_VAR 0 16
9409: PUSH
9410: LD_INT 2
9412: EQUAL
9413: IFFALSE 9552
// begin if IsInUnit ( i ) then
9415: LD_VAR 0 10
9419: PPUSH
9420: CALL_OW 310
9424: IFFALSE 9437
// begin ComExitBuilding ( i ) ;
9426: LD_VAR 0 10
9430: PPUSH
9431: CALL_OW 122
// continue ;
9435: GO 8720
// end ; if not cr then
9437: LD_VAR 0 18
9441: NOT
9442: IFFALSE 9458
// begin SetTag ( i , 0 ) ;
9444: LD_VAR 0 10
9448: PPUSH
9449: LD_INT 0
9451: PPUSH
9452: CALL_OW 109
// continue ;
9456: GO 8720
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9458: LD_VAR 0 10
9462: PPUSH
9463: CALL_OW 314
9467: NOT
9468: IFFALSE 9523
9470: PUSH
9471: LD_INT 81
9473: PUSH
9474: LD_VAR 0 1
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 92
9485: PUSH
9486: LD_VAR 0 18
9490: PUSH
9491: LD_INT 1
9493: ARRAY
9494: PUSH
9495: LD_VAR 0 18
9499: PUSH
9500: LD_INT 2
9502: ARRAY
9503: PUSH
9504: LD_INT 12
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: NOT
9522: AND
9523: IFFALSE 9552
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9525: LD_VAR 0 10
9529: PPUSH
9530: LD_VAR 0 18
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: LD_VAR 0 18
9543: PUSH
9544: LD_INT 2
9546: ARRAY
9547: PPUSH
9548: CALL_OW 117
// end ; end ;
9552: GO 8720
9554: POP
9555: POP
// end ; if vehicles then
9556: LD_VAR 0 27
9560: IFFALSE 10372
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
9562: LD_ADDR_VAR 0 27
9566: PUSH
9567: LD_VAR 0 27
9571: PPUSH
9572: LD_INT 3
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 34
9580: PUSH
9581: LD_INT 13
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 34
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 50
9609: PUSH
9610: EMPTY
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 72
9621: ST_TO_ADDR
// if vehicles then
9622: LD_VAR 0 27
9626: IFFALSE 10372
// begin for i in vehicles do
9628: LD_ADDR_VAR 0 10
9632: PUSH
9633: LD_VAR 0 27
9637: PUSH
9638: FOR_IN
9639: IFFALSE 10370
// begin tag := GetTag ( i ) ;
9641: LD_ADDR_VAR 0 16
9645: PUSH
9646: LD_VAR 0 10
9650: PPUSH
9651: CALL_OW 110
9655: ST_TO_ADDR
// if not tag then
9656: LD_VAR 0 16
9660: NOT
9661: IFFALSE 9807
// begin if GetControl ( i ) = control_manual then
9663: LD_VAR 0 10
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9793
// begin drivers := amDrivers ;
9678: LD_ADDR_VAR 0 25
9682: PUSH
9683: LD_EXP 40
9687: ST_TO_ADDR
// if not drivers then
9688: LD_VAR 0 25
9692: NOT
9693: IFFALSE 9773
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9695: LD_ADDR_VAR 0 25
9699: PUSH
9700: LD_VAR 0 15
9704: PPUSH
9705: LD_INT 3
9707: PUSH
9708: LD_INT 120
9710: PUSH
9711: LD_INT 7
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL_OW 72
9726: ST_TO_ADDR
// if drivers then
9727: LD_VAR 0 25
9731: IFFALSE 9773
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9733: LD_VAR 0 25
9737: PUSH
9738: LD_INT 1
9740: ARRAY
9741: PPUSH
9742: LD_INT 7
9744: PPUSH
9745: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9749: LD_ADDR_EXP 40
9753: PUSH
9754: LD_EXP 40
9758: PPUSH
9759: LD_VAR 0 25
9763: PUSH
9764: LD_INT 1
9766: ARRAY
9767: PPUSH
9768: CALL 68372 0 2
9772: ST_TO_ADDR
// end ; end ; if drivers then
9773: LD_VAR 0 25
9777: IFFALSE 9791
// SetTag ( i , tBusy ) ;
9779: LD_VAR 0 10
9783: PPUSH
9784: LD_INT 8
9786: PPUSH
9787: CALL_OW 109
// continue ;
9791: GO 9638
// end ; SetTag ( i , tBusy ) ;
9793: LD_VAR 0 10
9797: PPUSH
9798: LD_INT 8
9800: PPUSH
9801: CALL_OW 109
// end else
9805: GO 10368
// if tag = tBusy then
9807: LD_VAR 0 16
9811: PUSH
9812: LD_INT 8
9814: EQUAL
9815: IFFALSE 10035
// begin if GetLives ( i ) = 1000 then
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 256
9826: PUSH
9827: LD_INT 1000
9829: EQUAL
9830: IFFALSE 10033
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9832: LD_VAR 0 10
9836: PPUSH
9837: CALL_OW 263
9841: PUSH
9842: LD_INT 1
9844: EQUAL
9845: IFFALSE 9859
9847: PUSH
9848: LD_VAR 0 10
9852: PPUSH
9853: CALL_OW 311
9857: NOT
9858: AND
9859: IFFALSE 10021
// begin drivers := amDrivers ;
9861: LD_ADDR_VAR 0 25
9865: PUSH
9866: LD_EXP 40
9870: ST_TO_ADDR
// if not drivers then
9871: LD_VAR 0 25
9875: NOT
9876: IFFALSE 9892
// begin SetTag ( i , 0 ) ;
9878: LD_VAR 0 10
9882: PPUSH
9883: LD_INT 0
9885: PPUSH
9886: CALL_OW 109
// continue ;
9890: GO 9638
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9892: LD_VAR 0 25
9896: PUSH
9897: LD_INT 1
9899: ARRAY
9900: PPUSH
9901: CALL_OW 310
9905: IFFALSE 9923
9907: PUSH
9908: LD_VAR 0 25
9912: PUSH
9913: LD_INT 1
9915: ARRAY
9916: PPUSH
9917: CALL 65952 0 1
9921: NOT
9922: AND
9923: IFFALSE 9938
// ComExitBuilding ( drivers [ 1 ] ) ;
9925: LD_VAR 0 25
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9938: LD_VAR 0 27
9942: PPUSH
9943: LD_INT 120
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PPUSH
9953: CALL_OW 72
9957: IFFALSE 9975
9959: PUSH
9960: LD_VAR 0 25
9964: PUSH
9965: LD_INT 1
9967: ARRAY
9968: PPUSH
9969: CALL_OW 314
9973: NOT
9974: AND
9975: IFTRUE 9999
9977: PUSH
9978: LD_VAR 0 27
9982: PPUSH
9983: LD_INT 120
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 72
9997: NOT
9998: OR
9999: IFFALSE 10019
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10001: LD_VAR 0 25
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_VAR 0 10
10014: PPUSH
10015: CALL_OW 120
// continue ;
10019: GO 9638
// end ; SetTag ( i , tAttack ) ;
10021: LD_VAR 0 10
10025: PPUSH
10026: LD_INT 13
10028: PPUSH
10029: CALL_OW 109
// end ; end else
10033: GO 10368
// if tag = tAttack then
10035: LD_VAR 0 16
10039: PUSH
10040: LD_INT 13
10042: EQUAL
10043: IFFALSE 10225
// begin enemy := enemyInBase ;
10045: LD_ADDR_VAR 0 22
10049: PUSH
10050: LD_VAR 0 23
10054: ST_TO_ADDR
// if not enemy then
10055: LD_VAR 0 22
10059: NOT
10060: IFFALSE 10072
// enemy := enemyOuterBase ;
10062: LD_ADDR_VAR 0 22
10066: PUSH
10067: LD_VAR 0 24
10071: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10072: LD_VAR 0 22
10076: NOT
10077: IFFALSE 10112
10079: PUSH
10080: LD_VAR 0 10
10084: PPUSH
10085: LD_VAR 0 8
10089: PUSH
10090: LD_INT 1
10092: ARRAY
10093: PPUSH
10094: LD_VAR 0 8
10098: PUSH
10099: LD_INT 2
10101: ARRAY
10102: PPUSH
10103: CALL_OW 297
10107: PUSH
10108: LD_INT 10
10110: GREATER
10111: AND
10112: IFFALSE 10143
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10114: LD_VAR 0 10
10118: PPUSH
10119: LD_VAR 0 8
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_VAR 0 8
10132: PUSH
10133: LD_INT 2
10135: ARRAY
10136: PPUSH
10137: CALL_OW 111
// continue ;
10141: GO 9638
// end ; if GetLives ( i ) < 650 then
10143: LD_VAR 0 10
10147: PPUSH
10148: CALL_OW 256
10152: PUSH
10153: LD_INT 650
10155: LESS
10156: IFFALSE 10199
// begin SetTag ( i , tVehRepair ) ;
10158: LD_VAR 0 10
10162: PPUSH
10163: LD_INT 9
10165: PPUSH
10166: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10170: LD_VAR 0 10
10174: PPUSH
10175: LD_VAR 0 8
10179: PUSH
10180: LD_INT 1
10182: ARRAY
10183: PPUSH
10184: LD_VAR 0 8
10188: PUSH
10189: LD_INT 2
10191: ARRAY
10192: PPUSH
10193: CALL_OW 111
// continue ;
10197: GO 9638
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10199: LD_VAR 0 10
10203: PPUSH
10204: LD_VAR 0 22
10208: PPUSH
10209: LD_VAR 0 10
10213: PPUSH
10214: CALL_OW 74
10218: PPUSH
10219: CALL_OW 115
// end else
10223: GO 10368
// if tag = tVehRepair then
10225: LD_VAR 0 16
10229: PUSH
10230: LD_INT 9
10232: EQUAL
10233: IFFALSE 10368
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10235: LD_VAR 0 10
10239: PPUSH
10240: LD_VAR 0 8
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: LD_VAR 0 8
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: PPUSH
10258: CALL_OW 297
10262: PUSH
10263: LD_INT 10
10265: GREATER
10266: IFFALSE 10297
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10268: LD_VAR 0 10
10272: PPUSH
10273: LD_VAR 0 8
10277: PUSH
10278: LD_INT 1
10280: ARRAY
10281: PPUSH
10282: LD_VAR 0 8
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PPUSH
10291: CALL_OW 111
// continue ;
10295: GO 9638
// end ; if GetLives ( i ) = 1000 then
10297: LD_VAR 0 10
10301: PPUSH
10302: CALL_OW 256
10306: PUSH
10307: LD_INT 1000
10309: EQUAL
10310: IFFALSE 10326
// begin SetTag ( i , tBusy ) ;
10312: LD_VAR 0 10
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 109
// continue ;
10324: GO 9638
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10326: LD_VAR 0 10
10330: PPUSH
10331: CALL_OW 263
10335: PUSH
10336: LD_INT 1
10338: EQUAL
10339: IFFALSE 10352
10341: PUSH
10342: LD_VAR 0 10
10346: PPUSH
10347: CALL_OW 311
10351: AND
10352: IFFALSE 10368
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10354: LD_VAR 0 10
10358: PPUSH
10359: CALL_OW 311
10363: PPUSH
10364: CALL 70086 0 1
// end ; end ;
10368: GO 9638
10370: POP
10371: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10372: LD_ADDR_VAR 0 20
10376: PUSH
10377: LD_VAR 0 6
10381: PPUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 25
10387: PUSH
10388: LD_INT 1
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 25
10397: PUSH
10398: LD_INT 8
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 25
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 25
10417: PUSH
10418: LD_INT 9
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 50
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 72
10446: ST_TO_ADDR
// if sol then
10447: LD_VAR 0 20
10451: IFFALSE 10967
// begin if enemyInBase then
10453: LD_VAR 0 23
10457: IFFALSE 10636
// begin for i in sol do
10459: LD_ADDR_VAR 0 10
10463: PUSH
10464: LD_VAR 0 20
10468: PUSH
10469: FOR_IN
10470: IFFALSE 10632
// begin tw := IsInUnit ( i ) ;
10472: LD_ADDR_VAR 0 17
10476: PUSH
10477: LD_VAR 0 10
10481: PPUSH
10482: CALL_OW 310
10486: ST_TO_ADDR
// if tw then
10487: LD_VAR 0 17
10491: IFFALSE 10574
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
10493: LD_VAR 0 17
10497: PUSH
10498: LD_INT 22
10500: PUSH
10501: LD_VAR 0 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 101
10512: PUSH
10513: LD_VAR 0 35
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 30
10527: PUSH
10528: LD_INT 32
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 30
10537: PUSH
10538: LD_INT 31
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: IN
10560: NOT
10561: IFFALSE 10572
// ComExitBuilding ( i ) ;
10563: LD_VAR 0 10
10567: PPUSH
10568: CALL_OW 122
// end else
10572: GO 10630
// if IsInArea ( i , area ) then
10574: LD_VAR 0 10
10578: PPUSH
10579: LD_VAR 0 3
10583: PPUSH
10584: CALL_OW 308
10588: IFFALSE 10616
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
10590: LD_VAR 0 10
10594: PPUSH
10595: LD_VAR 0 23
10599: PPUSH
10600: LD_VAR 0 10
10604: PPUSH
10605: CALL_OW 74
10609: PPUSH
10610: CALL_OW 115
10614: GO 10630
// ComMoveToarea ( i , area ) ;
10616: LD_VAR 0 10
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: CALL_OW 113
// end ;
10630: GO 10469
10632: POP
10633: POP
// end else
10634: GO 10967
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
10636: LD_ADDR_VAR 0 29
10640: PUSH
10641: LD_VAR 0 3
10645: PPUSH
10646: LD_INT 3
10648: PUSH
10649: LD_INT 62
10651: PUSH
10652: EMPTY
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 30
10664: PUSH
10665: LD_INT 32
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 31
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: ST_TO_ADDR
// if empty then
10718: LD_VAR 0 29
10722: IFFALSE 10739
// empty := ReverseArray ( empty ) ;
10724: LD_ADDR_VAR 0 29
10728: PUSH
10729: LD_VAR 0 29
10733: PPUSH
10734: CALL 63452 0 1
10738: ST_TO_ADDR
// for i in sol do
10739: LD_ADDR_VAR 0 10
10743: PUSH
10744: LD_VAR 0 20
10748: PUSH
10749: FOR_IN
10750: IFFALSE 10965
// begin tag := GetTag ( i ) ;
10752: LD_ADDR_VAR 0 16
10756: PUSH
10757: LD_VAR 0 10
10761: PPUSH
10762: CALL_OW 110
10766: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10767: LD_VAR 0 10
10771: PPUSH
10772: CALL_OW 256
10776: PUSH
10777: LD_INT 1000
10779: LESS
10780: IFFALSE 10792
10782: PUSH
10783: LD_VAR 0 16
10787: PUSH
10788: LD_INT 1
10790: NONEQUAL
10791: AND
10792: IFFALSE 10844
// begin SetTag ( i , tHeal ) ;
10794: LD_VAR 0 10
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10806: LD_VAR 0 10
10810: PPUSH
10811: LD_VAR 0 7
10815: PUSH
10816: LD_INT 1
10818: ARRAY
10819: PPUSH
10820: LD_VAR 0 7
10824: PUSH
10825: LD_INT 2
10827: ARRAY
10828: PPUSH
10829: CALL_OW 111
// AddComHold ( i ) ;
10833: LD_VAR 0 10
10837: PPUSH
10838: CALL_OW 200
// continue ;
10842: GO 10749
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10844: LD_VAR 0 10
10848: PPUSH
10849: CALL_OW 256
10853: PUSH
10854: LD_INT 1000
10856: EQUAL
10857: IFFALSE 10869
10859: PUSH
10860: LD_VAR 0 16
10864: PUSH
10865: LD_INT 1
10867: EQUAL
10868: AND
10869: IFFALSE 10885
// begin SetTag ( i , 0 ) ;
10871: LD_VAR 0 10
10875: PPUSH
10876: LD_INT 0
10878: PPUSH
10879: CALL_OW 109
// continue ;
10883: GO 10749
// end ; if HasTask ( i ) then
10885: LD_VAR 0 10
10889: PPUSH
10890: CALL_OW 314
10894: IFFALSE 10898
// continue ;
10896: GO 10749
// if not IsInUnit ( i ) and not tag and empty then
10898: LD_VAR 0 10
10902: PPUSH
10903: CALL_OW 310
10907: NOT
10908: IFFALSE 10917
10910: PUSH
10911: LD_VAR 0 16
10915: NOT
10916: AND
10917: IFFALSE 10925
10919: PUSH
10920: LD_VAR 0 29
10924: AND
10925: IFFALSE 10963
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10927: LD_VAR 0 10
10931: PPUSH
10932: LD_VAR 0 29
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10945: LD_ADDR_VAR 0 29
10949: PUSH
10950: LD_VAR 0 29
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 3
10962: ST_TO_ADDR
// end ; end ;
10963: GO 10749
10965: POP
10966: POP
// end ; end ; end ;
10967: LD_VAR 0 9
10971: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10972: LD_EXP 42
10976: PPUSH
10977: LD_INT 50
10979: PUSH
10980: EMPTY
10981: LIST
10982: PPUSH
10983: CALL_OW 72
10987: IFFALSE 11043
10989: GO 10991
10991: DISABLE
// begin BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10992: LD_EXP 3
10996: PUSH
10997: LD_INT 1
10999: ARRAY
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 32
11009: PPUSH
11010: LD_INT 4
11012: PPUSH
11013: LD_EXP 42
11017: PPUSH
11018: LD_INT 27
11020: PUSH
11021: LD_INT 33
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: LD_INT 22
11030: PUSH
11031: LD_INT 17
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL 7403 0 8
// enable ;
11042: ENABLE
// end ;
11043: END
// every 3 3$00 trigger IsOk ( amDep ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) do var i ;
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 302
11051: IFFALSE 11083
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 30
11066: PUSH
11067: LD_INT 3
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: AND
11083: IFFALSE 11229
11085: GO 11087
11087: DISABLE
11088: LD_INT 0
11090: PPUSH
// begin enable ;
11091: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) do
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PUSH
11126: FOR_IN
11127: IFFALSE 11227
// if BuildingStatus ( i ) = bs_idle and UnitsInside ( i ) > 0 then
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 461
11138: PUSH
11139: LD_INT 2
11141: EQUAL
11142: IFFALSE 11159
11144: PUSH
11145: LD_VAR 0 1
11149: PPUSH
11150: CALL_OW 313
11154: PUSH
11155: LD_INT 0
11157: GREATER
11158: AND
11159: IFFALSE 11225
// begin amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
11161: LD_ADDR_EXP 36
11165: PUSH
11166: LD_INT 3
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: LD_INT 5
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 3
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: LD_INT 4
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 6
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: ST_TO_ADDR
// end ;
11225: GO 11126
11227: POP
11228: POP
// end ; end_of_file
11229: PPOPN 1
11231: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
11232: LD_INT 0
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
11243: LD_ADDR_EXP 45
11247: PUSH
11248: LD_VAR 0 1
11252: PPUSH
11253: LD_INT 2
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL 30319 0 3
11263: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
11264: LD_ADDR_EXP 46
11268: PUSH
11269: LD_INT 13
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: LD_INT 27
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 13
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: LD_INT 1
11295: PUSH
11296: LD_INT 27
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 13
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 26
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 13
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 13
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: ST_TO_ADDR
// arBuildings := [ ] ;
11366: LD_ADDR_EXP 47
11370: PUSH
11371: EMPTY
11372: ST_TO_ADDR
// arVehicles := [ ] ;
11373: LD_ADDR_EXP 48
11377: PUSH
11378: EMPTY
11379: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
11380: LD_ADDR_EXP 49
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// arDrivers := [ ] ;
11387: LD_ADDR_EXP 50
11391: PUSH
11392: EMPTY
11393: ST_TO_ADDR
// arVehiclesCounter := 1 ;
11394: LD_ADDR_EXP 52
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// arMinesList := [ ] ;
11402: LD_ADDR_EXP 53
11406: PUSH
11407: EMPTY
11408: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
11409: LD_ADDR_EXP 51
11413: PUSH
11414: LD_INT 8
11416: PUSH
11417: LD_INT 11
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: LD_OWVAR 67
11432: ARRAY
11433: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
11434: LD_VAR 0 1
11438: PPUSH
11439: LD_INT 24
11441: PPUSH
11442: CALL 73493 0 2
// PlaceMines ( minefieldArea , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
11446: LD_INT 23
11448: PPUSH
11449: LD_INT 12
11451: PUSH
11452: LD_INT 14
11454: PUSH
11455: LD_INT 16
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_OWVAR 67
11467: ARRAY
11468: PPUSH
11469: CALL 12034 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_INT 3
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: LD_INT 5
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_OWVAR 67
11496: ARRAY
11497: ST_TO_ADDR
// uc_side := side ;
11498: LD_ADDR_OWVAR 20
11502: PUSH
11503: LD_VAR 0 1
11507: ST_TO_ADDR
// uc_nation := 2 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 2
11515: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 6 , 6 , 3 ] ) ;
11516: LD_ADDR_EXP 54
11520: PUSH
11521: LD_INT 32
11523: PPUSH
11524: LD_INT 5
11526: PPUSH
11527: LD_STRING 
11529: PPUSH
11530: LD_VAR 0 8
11534: PPUSH
11535: LD_INT 800
11537: PUSH
11538: LD_INT 120
11540: PUSH
11541: LD_INT 0
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: LD_INT 10
11551: PUSH
11552: LD_INT 11
11554: PUSH
11555: LD_INT 12
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_OWVAR 67
11567: ARRAY
11568: PUSH
11569: LD_INT 6
11571: PUSH
11572: LD_INT 6
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL 39029 0 6
11588: ST_TO_ADDR
// arForceTmp := [ ] ;
11589: LD_ADDR_EXP 55
11593: PUSH
11594: EMPTY
11595: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_VAR 0 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 30
11615: PUSH
11616: LD_INT 31
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 95
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 58
11642: PUSH
11643: EMPTY
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 69
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11787
// begin d := GetDir ( i ) ;
11660: LD_ADDR_VAR 0 4
11664: PUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: CALL_OW 254
11674: ST_TO_ADDR
// if d < 3 then
11675: LD_VAR 0 4
11679: PUSH
11680: LD_INT 3
11682: LESS
11683: IFFALSE 11701
// d := d + 3 else
11685: LD_ADDR_VAR 0 4
11689: PUSH
11690: LD_VAR 0 4
11694: PUSH
11695: LD_INT 3
11697: PLUS
11698: ST_TO_ADDR
11699: GO 11715
// d := d - 3 ;
11701: LD_ADDR_VAR 0 4
11705: PUSH
11706: LD_VAR 0 4
11710: PUSH
11711: LD_INT 3
11713: MINUS
11714: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
11715: LD_INT 0
11717: PPUSH
11718: LD_VAR 0 8
11722: PPUSH
11723: CALL_OW 381
// un := CreateHuman ;
11727: LD_ADDR_VAR 0 6
11731: PUSH
11732: CALL_OW 44
11736: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11737: LD_ADDR_EXP 55
11741: PUSH
11742: LD_EXP 55
11746: PPUSH
11747: LD_VAR 0 6
11751: PPUSH
11752: CALL 68372 0 2
11756: ST_TO_ADDR
// SetDir ( un , d ) ;
11757: LD_VAR 0 6
11761: PPUSH
11762: LD_VAR 0 4
11766: PPUSH
11767: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11771: LD_VAR 0 6
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: CALL_OW 52
// end ;
11785: GO 11657
11787: POP
11788: POP
// for i := 1 to Difficulty do
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: DOUBLE
11795: LD_INT 1
11797: DEC
11798: ST_TO_ADDR
11799: LD_OWVAR 67
11803: PUSH
11804: FOR_TO
11805: IFFALSE 11871
// begin PrepareSoldier ( false , skill ) ;
11807: LD_INT 0
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: CALL_OW 381
// un := CreateHuman ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: CALL_OW 44
11828: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11829: LD_ADDR_EXP 55
11833: PUSH
11834: LD_EXP 55
11838: PPUSH
11839: LD_VAR 0 6
11843: PPUSH
11844: CALL 68372 0 2
11848: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11849: LD_VAR 0 6
11853: PPUSH
11854: LD_INT 215
11856: PPUSH
11857: LD_INT 102
11859: PPUSH
11860: CALL_OW 428
11864: PPUSH
11865: CALL_OW 52
// end ;
11869: GO 11804
11871: POP
11872: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_VAR 0 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 3
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: PUSH
11909: FOR_IN
11910: IFFALSE 11943
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 5
11922: PUSH
11923: LD_INT 7
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PUSH
11931: LD_OWVAR 67
11935: ARRAY
11936: PPUSH
11937: CALL_OW 241
11941: GO 11909
11943: POP
11944: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11945: LD_ADDR_VAR 0 3
11949: PUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 30
11964: PUSH
11965: LD_INT 32
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12027
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 27
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 24
11997: PUSH
11998: LD_INT 27
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 4
12014: MOD
12015: PUSH
12016: LD_INT 1
12018: PLUS
12019: ARRAY
12020: PPUSH
12021: CALL_OW 431
12025: GO 11981
12027: POP
12028: POP
// end ;
12029: LD_VAR 0 2
12033: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
12039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
12040: LD_ADDR_VAR 0 5
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: CALL_OW 517
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 5
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12309
// for i := 1 to n do
12067: LD_ADDR_VAR 0 4
12071: PUSH
12072: DOUBLE
12073: LD_INT 1
12075: DEC
12076: ST_TO_ADDR
12077: LD_VAR 0 2
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12307
// begin r := rand ( 1 , tmp [ 1 ] ) ;
12085: LD_ADDR_VAR 0 6
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: LD_VAR 0 5
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PPUSH
12102: CALL_OW 12
12106: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
12107: LD_VAR 0 5
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PUSH
12116: LD_VAR 0 6
12120: ARRAY
12121: PPUSH
12122: LD_VAR 0 5
12126: PUSH
12127: LD_INT 2
12129: ARRAY
12130: PUSH
12131: LD_VAR 0 6
12135: ARRAY
12136: PPUSH
12137: LD_EXP 3
12141: PUSH
12142: LD_INT 2
12144: ARRAY
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
12153: LD_ADDR_EXP 53
12157: PUSH
12158: LD_EXP 53
12162: PPUSH
12163: LD_EXP 53
12167: PUSH
12168: LD_INT 1
12170: PLUS
12171: PPUSH
12172: LD_VAR 0 5
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PUSH
12181: LD_VAR 0 6
12185: ARRAY
12186: PPUSH
12187: CALL_OW 2
12191: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
12192: LD_ADDR_EXP 53
12196: PUSH
12197: LD_EXP 53
12201: PPUSH
12202: LD_EXP 53
12206: PUSH
12207: LD_INT 1
12209: PLUS
12210: PPUSH
12211: LD_VAR 0 5
12215: PUSH
12216: LD_INT 2
12218: ARRAY
12219: PUSH
12220: LD_VAR 0 6
12224: ARRAY
12225: PPUSH
12226: CALL_OW 2
12230: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
12231: LD_ADDR_VAR 0 5
12235: PUSH
12236: LD_VAR 0 5
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 5
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: LD_VAR 0 6
12257: PPUSH
12258: CALL_OW 3
12262: PPUSH
12263: CALL_OW 1
12267: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
12268: LD_ADDR_VAR 0 5
12272: PUSH
12273: LD_VAR 0 5
12277: PPUSH
12278: LD_INT 2
12280: PPUSH
12281: LD_VAR 0 5
12285: PUSH
12286: LD_INT 2
12288: ARRAY
12289: PPUSH
12290: LD_VAR 0 6
12294: PPUSH
12295: CALL_OW 3
12299: PPUSH
12300: CALL_OW 1
12304: ST_TO_ADDR
// end ;
12305: GO 12082
12307: POP
12308: POP
// end ;
12309: LD_VAR 0 3
12313: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
// enable ;
12343: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
12344: LD_ADDR_VAR 0 10
12348: PUSH
12349: LD_INT 81
12351: PUSH
12352: LD_VAR 0 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: ST_TO_ADDR
// if tmp then
12366: LD_VAR 0 10
12370: IFFALSE 12391
// enemySide := GetSide ( tmp [ 1 ] ) ;
12372: LD_ADDR_VAR 0 34
12376: PUSH
12377: LD_VAR 0 10
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: CALL_OW 255
12390: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12391: LD_ADDR_VAR 0 22
12395: PUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 81
12403: PUSH
12404: LD_VAR 0 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PPUSH
12413: CALL_OW 70
12417: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
12418: LD_ADDR_VAR 0 23
12422: PUSH
12423: LD_VAR 0 4
12427: PPUSH
12428: LD_INT 81
12430: PUSH
12431: LD_VAR 0 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 70
12444: ST_TO_ADDR
// vehicles := arVehicles ;
12445: LD_ADDR_VAR 0 26
12449: PUSH
12450: LD_EXP 48
12454: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12455: LD_ADDR_VAR 0 32
12459: PUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 0
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 70
12513: ST_TO_ADDR
// if depot then
12514: LD_VAR 0 32
12518: IFFALSE 12534
// depot := depot [ 1 ] ;
12520: LD_ADDR_VAR 0 32
12524: PUSH
12525: LD_VAR 0 32
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: ST_TO_ADDR
// if arTech then
12534: LD_EXP 45
12538: IFFALSE 12697
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12540: LD_ADDR_VAR 0 12
12544: PUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 50
12564: PUSH
12565: EMPTY
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 6
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 7
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 8
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 70
12616: ST_TO_ADDR
// if lab then
12617: LD_VAR 0 12
12621: IFFALSE 12697
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
12623: LD_VAR 0 12
12627: PUSH
12628: LD_INT 1
12630: ARRAY
12631: PPUSH
12632: CALL_OW 461
12636: PUSH
12637: LD_INT 2
12639: EQUAL
12640: IFFALSE 12697
// begin for i in arTech do
12642: LD_ADDR_VAR 0 9
12646: PUSH
12647: LD_EXP 45
12651: PUSH
12652: FOR_IN
12653: IFFALSE 12695
// if CanBeResearched ( lab [ 1 ] , i ) then
12655: LD_VAR 0 12
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 9
12668: PPUSH
12669: CALL_OW 430
12673: IFFALSE 12693
// begin AddComResearch ( lab [ 1 ] , i ) ;
12675: LD_VAR 0 12
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 9
12688: PPUSH
12689: CALL_OW 184
// end ;
12693: GO 12652
12695: POP
12696: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12697: LD_ADDR_VAR 0 29
12701: PUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 22
12709: PUSH
12710: LD_VAR 0 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 50
12731: PUSH
12732: EMPTY
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: PPUSH
12740: CALL_OW 70
12744: ST_TO_ADDR
// if fac then
12745: LD_VAR 0 29
12749: IFFALSE 13084
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12751: LD_VAR 0 29
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: CALL_OW 461
12764: PUSH
12765: LD_INT 2
12767: EQUAL
12768: IFFALSE 13084
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12770: LD_ADDR_VAR 0 30
12774: PUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 30
12785: PUSH
12786: LD_INT 32
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: LD_INT 33
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 35
12810: PUSH
12811: LD_INT 0
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 70
12826: ST_TO_ADDR
// if emptyTowers then
12827: LD_VAR 0 30
12831: IFFALSE 12881
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12833: LD_ADDR_VAR 0 31
12837: PUSH
12838: LD_VAR 0 30
12842: PUSH
12843: LD_INT 1
12845: ARRAY
12846: PPUSH
12847: LD_VAR 0 3
12851: PPUSH
12852: CALL 40721 0 2
12856: ST_TO_ADDR
// if weapon then
12857: LD_VAR 0 31
12861: IFFALSE 12881
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12863: LD_VAR 0 30
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: LD_VAR 0 31
12876: PPUSH
12877: CALL_OW 148
// end ; if arConstructList then
12881: LD_EXP 46
12885: IFFALSE 13084
// for i := 1 to Count ( arConstructList ) do
12887: LD_ADDR_VAR 0 9
12891: PUSH
12892: DOUBLE
12893: LD_INT 1
12895: DEC
12896: ST_TO_ADDR
12897: LD_EXP 46
12901: PPUSH
12902: CALL 32396 0 1
12906: PUSH
12907: FOR_TO
12908: IFFALSE 13082
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12910: LD_VAR 0 29
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_EXP 46
12923: PUSH
12924: LD_VAR 0 9
12928: ARRAY
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_EXP 46
12938: PUSH
12939: LD_VAR 0 9
12943: ARRAY
12944: PUSH
12945: LD_INT 2
12947: ARRAY
12948: PPUSH
12949: LD_EXP 46
12953: PUSH
12954: LD_VAR 0 9
12958: ARRAY
12959: PUSH
12960: LD_INT 3
12962: ARRAY
12963: PPUSH
12964: LD_EXP 46
12968: PUSH
12969: LD_VAR 0 9
12973: ARRAY
12974: PUSH
12975: LD_INT 4
12977: ARRAY
12978: PPUSH
12979: CALL_OW 448
12983: IFFALSE 13080
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12985: LD_VAR 0 29
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_EXP 46
12998: PUSH
12999: LD_VAR 0 9
13003: ARRAY
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PPUSH
13009: LD_EXP 46
13013: PUSH
13014: LD_VAR 0 9
13018: ARRAY
13019: PUSH
13020: LD_INT 2
13022: ARRAY
13023: PPUSH
13024: LD_EXP 46
13028: PUSH
13029: LD_VAR 0 9
13033: ARRAY
13034: PUSH
13035: LD_INT 3
13037: ARRAY
13038: PPUSH
13039: LD_EXP 46
13043: PUSH
13044: LD_VAR 0 9
13048: ARRAY
13049: PUSH
13050: LD_INT 4
13052: ARRAY
13053: PPUSH
13054: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
13058: LD_ADDR_EXP 46
13062: PUSH
13063: LD_EXP 46
13067: PPUSH
13068: LD_VAR 0 9
13072: PPUSH
13073: CALL_OW 3
13077: ST_TO_ADDR
// break ;
13078: GO 13082
// end ; end ;
13080: GO 12907
13082: POP
13083: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13084: LD_ADDR_VAR 0 10
13088: PUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 22
13096: PUSH
13097: LD_VAR 0 1
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 3
13118: PUSH
13119: LD_INT 57
13121: PUSH
13122: EMPTY
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: LD_INT 24
13134: PUSH
13135: LD_INT 1000
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 70
13156: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
13157: LD_ADDR_VAR 0 17
13161: PUSH
13162: LD_VAR 0 3
13166: PPUSH
13167: CALL_OW 435
13171: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
13172: LD_ADDR_VAR 0 14
13176: PUSH
13177: LD_VAR 0 5
13181: PPUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 3
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 50
13194: PUSH
13195: EMPTY
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 72
13206: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
13207: LD_VAR 0 14
13211: PPUSH
13212: LD_INT 3
13214: PUSH
13215: LD_INT 120
13217: PUSH
13218: LD_INT 7
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 3
13231: PUSH
13232: LD_INT 54
13234: PUSH
13235: EMPTY
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 72
13250: IFFALSE 13267
13252: PUSH
13253: LD_VAR 0 29
13257: PUSH
13258: LD_INT 1
13260: ARRAY
13261: PPUSH
13262: CALL_OW 302
13266: AND
13267: IFFALSE 13326
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
13269: LD_VAR 0 14
13273: PPUSH
13274: LD_INT 3
13276: PUSH
13277: LD_INT 120
13279: PUSH
13280: LD_INT 7
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 54
13296: PUSH
13297: EMPTY
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 72
13312: PPUSH
13313: LD_VAR 0 29
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PPUSH
13322: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
13326: LD_ADDR_VAR 0 18
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_INT 25
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 50
13348: PUSH
13349: EMPTY
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 72
13360: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
13361: LD_ADDR_VAR 0 12
13365: PUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: LD_INT 6
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 7
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 8
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// if sci then
13415: LD_VAR 0 18
13419: IFFALSE 13580
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
13421: LD_ADDR_VAR 0 20
13425: PUSH
13426: LD_VAR 0 5
13430: PPUSH
13431: LD_INT 95
13433: PUSH
13434: LD_VAR 0 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 120
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// if hurtUnits then
13462: LD_VAR 0 20
13466: IFFALSE 13527
// begin for i in sci do
13468: LD_ADDR_VAR 0 9
13472: PUSH
13473: LD_VAR 0 18
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13523
// if IsInUnit ( i ) then
13481: LD_VAR 0 9
13485: PPUSH
13486: CALL_OW 310
13490: IFFALSE 13503
// ComExitBuilding ( i ) else
13492: LD_VAR 0 9
13496: PPUSH
13497: CALL_OW 122
13501: GO 13521
// ComHeal ( i , hurtUnits [ 1 ] ) ;
13503: LD_VAR 0 9
13507: PPUSH
13508: LD_VAR 0 20
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: CALL_OW 128
13521: GO 13478
13523: POP
13524: POP
// end else
13525: GO 13580
// if lab then
13527: LD_VAR 0 12
13531: IFFALSE 13580
// begin for i in sci do
13533: LD_ADDR_VAR 0 9
13537: PUSH
13538: LD_VAR 0 18
13542: PUSH
13543: FOR_IN
13544: IFFALSE 13578
// if not IsInUnit ( i ) then
13546: LD_VAR 0 9
13550: PPUSH
13551: CALL_OW 310
13555: NOT
13556: IFFALSE 13576
// ComEnterUnit ( i , lab [ 1 ] ) ;
13558: LD_VAR 0 9
13562: PPUSH
13563: LD_VAR 0 12
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: CALL_OW 120
13576: GO 13543
13578: POP
13579: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
13580: LD_ADDR_VAR 0 13
13584: PUSH
13585: LD_VAR 0 5
13589: PPUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 72
13604: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
13605: LD_ADDR_VAR 0 33
13609: PUSH
13610: LD_EXP 47
13614: ST_TO_ADDR
// if eng then
13615: LD_VAR 0 13
13619: IFFALSE 14467
// begin for i in eng do
13621: LD_ADDR_VAR 0 9
13625: PUSH
13626: LD_VAR 0 13
13630: PUSH
13631: FOR_IN
13632: IFFALSE 14465
// begin tag := GetTag ( i ) ;
13634: LD_ADDR_VAR 0 15
13638: PUSH
13639: LD_VAR 0 9
13643: PPUSH
13644: CALL_OW 110
13648: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
13649: LD_VAR 0 9
13653: PPUSH
13654: LD_VAR 0 4
13658: PPUSH
13659: CALL_OW 308
13663: IFFALSE 13694
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13665: LD_VAR 0 9
13669: PPUSH
13670: LD_VAR 0 7
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 7
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: PPUSH
13688: CALL_OW 111
// continue ;
13692: GO 13631
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
13694: LD_VAR 0 9
13698: PPUSH
13699: CALL_OW 256
13703: PUSH
13704: LD_INT 800
13706: LESS
13707: IFFALSE 13719
13709: PUSH
13710: LD_VAR 0 15
13714: PUSH
13715: LD_INT 1
13717: NONEQUAL
13718: AND
13719: IFFALSE 13769
// begin SetTag ( i , tHeal ) ;
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13733: LD_VAR 0 9
13737: PPUSH
13738: LD_VAR 0 6
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: PPUSH
13747: LD_VAR 0 6
13751: PUSH
13752: LD_INT 2
13754: ARRAY
13755: PPUSH
13756: CALL_OW 111
// AddComHold ( i ) ;
13760: LD_VAR 0 9
13764: PPUSH
13765: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13769: LD_VAR 0 15
13773: PUSH
13774: LD_INT 1
13776: EQUAL
13777: IFFALSE 13794
13779: PUSH
13780: LD_VAR 0 9
13784: PPUSH
13785: CALL_OW 256
13789: PUSH
13790: LD_INT 1000
13792: EQUAL
13793: AND
13794: IFFALSE 13808
// SetTag ( i , 0 ) ;
13796: LD_VAR 0 9
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 109
// if not tag then
13808: LD_VAR 0 15
13812: NOT
13813: IFFALSE 13984
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13815: LD_ADDR_VAR 0 11
13819: PUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 57
13827: PUSH
13828: EMPTY
13829: LIST
13830: PPUSH
13831: CALL_OW 70
13835: ST_TO_ADDR
// if undone then
13836: LD_VAR 0 11
13840: IFFALSE 13862
// begin ComComplete ( i , undone [ 1 ] ) ;
13842: LD_VAR 0 9
13846: PPUSH
13847: LD_VAR 0 11
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: CALL 38566 0 2
// continue ;
13860: GO 13631
// end ; if cr or tmp or buildingsToBuild then
13862: LD_VAR 0 17
13866: IFTRUE 13874
13868: PUSH
13869: LD_VAR 0 10
13873: OR
13874: IFTRUE 13882
13876: PUSH
13877: LD_VAR 0 33
13881: OR
13882: IFFALSE 13958
// begin if IsInUnit ( i ) then
13884: LD_VAR 0 9
13888: PPUSH
13889: CALL_OW 310
13893: IFFALSE 13904
// ComExitBuilding ( i ) ;
13895: LD_VAR 0 9
13899: PPUSH
13900: CALL_OW 122
// if tmp then
13904: LD_VAR 0 10
13908: IFFALSE 13924
// SetTag ( i , tRepair ) else
13910: LD_VAR 0 9
13914: PPUSH
13915: LD_INT 3
13917: PPUSH
13918: CALL_OW 109
13922: GO 13956
// if cr then
13924: LD_VAR 0 17
13928: IFFALSE 13944
// SetTag ( i , tCrates ) else
13930: LD_VAR 0 9
13934: PPUSH
13935: LD_INT 2
13937: PPUSH
13938: CALL_OW 109
13942: GO 13956
// SetTag ( i , tBuild ) ;
13944: LD_VAR 0 9
13948: PPUSH
13949: LD_INT 5
13951: PPUSH
13952: CALL_OW 109
// end else
13956: GO 13984
// if not IsInUnit ( i ) then
13958: LD_VAR 0 9
13962: PPUSH
13963: CALL_OW 310
13967: NOT
13968: IFFALSE 13984
// ComEnterUnit ( i , depot ) ;
13970: LD_VAR 0 9
13974: PPUSH
13975: LD_VAR 0 32
13979: PPUSH
13980: CALL_OW 120
// end ; if tag = tRepair then
13984: LD_VAR 0 15
13988: PUSH
13989: LD_INT 3
13991: EQUAL
13992: IFFALSE 14098
// begin if IsInUnit ( i ) then
13994: LD_VAR 0 9
13998: PPUSH
13999: CALL_OW 310
14003: IFFALSE 14016
// begin ComExitBuilding ( i ) ;
14005: LD_VAR 0 9
14009: PPUSH
14010: CALL_OW 122
// continue ;
14014: GO 13631
// end ; if not tmp then
14016: LD_VAR 0 10
14020: NOT
14021: IFFALSE 14037
// begin SetTag ( i , 0 ) ;
14023: LD_VAR 0 9
14027: PPUSH
14028: LD_INT 0
14030: PPUSH
14031: CALL_OW 109
// continue ;
14035: GO 13631
// end ; if not HasTask ( i ) then
14037: LD_VAR 0 9
14041: PPUSH
14042: CALL_OW 314
14046: NOT
14047: IFFALSE 14067
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
14049: LD_VAR 0 9
14053: PPUSH
14054: LD_VAR 0 10
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: CALL_OW 130
// if not IsInArea ( i , area ) then
14067: LD_VAR 0 9
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: CALL_OW 308
14081: NOT
14082: IFFALSE 14098
// ComMoveToArea ( i , area ) ;
14084: LD_VAR 0 9
14088: PPUSH
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 113
// end ; if tag = tBuild then
14098: LD_VAR 0 15
14102: PUSH
14103: LD_INT 5
14105: EQUAL
14106: IFFALSE 14316
// begin if IsInUnit ( i ) then
14108: LD_VAR 0 9
14112: PPUSH
14113: CALL_OW 310
14117: IFFALSE 14130
// begin ComExitBuilding ( i ) ;
14119: LD_VAR 0 9
14123: PPUSH
14124: CALL_OW 122
// continue ;
14128: GO 13631
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
14130: LD_VAR 0 33
14134: NOT
14135: IFTRUE 14143
14137: PUSH
14138: LD_VAR 0 22
14142: OR
14143: IFTRUE 14151
14145: PUSH
14146: LD_VAR 0 23
14150: OR
14151: IFFALSE 14169
// begin SetTag ( i , 0 ) ;
14153: LD_VAR 0 9
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 109
// continue ;
14165: GO 13631
// end else
14167: GO 14208
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
14169: LD_VAR 0 32
14173: PPUSH
14174: LD_VAR 0 33
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: CALL 72467 0 2
14191: NOT
14192: IFFALSE 14208
// begin SetTag ( i , 0 ) ;
14194: LD_VAR 0 9
14198: PPUSH
14199: LD_INT 0
14201: PPUSH
14202: CALL_OW 109
// continue ;
14206: GO 13631
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
14208: LD_ADDR_VAR 0 11
14212: PUSH
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_INT 57
14220: PUSH
14221: EMPTY
14222: LIST
14223: PPUSH
14224: CALL_OW 70
14228: ST_TO_ADDR
// if undone then
14229: LD_VAR 0 11
14233: IFFALSE 14255
// begin ComComplete ( i , undone [ 1 ] ) ;
14235: LD_VAR 0 9
14239: PPUSH
14240: LD_VAR 0 11
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: PPUSH
14249: CALL 38566 0 2
// continue ;
14253: GO 13631
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
14255: LD_VAR 0 9
14259: PPUSH
14260: LD_VAR 0 33
14264: PUSH
14265: LD_INT 1
14267: ARRAY
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: LD_VAR 0 33
14277: PUSH
14278: LD_INT 1
14280: ARRAY
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 33
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: PUSH
14295: LD_INT 3
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 33
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PUSH
14308: LD_INT 4
14310: ARRAY
14311: PPUSH
14312: CALL_OW 145
// end ; if tag = tCrates then
14316: LD_VAR 0 15
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: IFFALSE 14463
// begin if IsInUnit ( i ) then
14326: LD_VAR 0 9
14330: PPUSH
14331: CALL_OW 310
14335: IFFALSE 14348
// begin ComExitBuilding ( i ) ;
14337: LD_VAR 0 9
14341: PPUSH
14342: CALL_OW 122
// continue ;
14346: GO 13631
// end ; if not cr then
14348: LD_VAR 0 17
14352: NOT
14353: IFFALSE 14369
// begin SetTag ( i , 0 ) ;
14355: LD_VAR 0 9
14359: PPUSH
14360: LD_INT 0
14362: PPUSH
14363: CALL_OW 109
// continue ;
14367: GO 13631
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
14369: LD_VAR 0 9
14373: PPUSH
14374: CALL_OW 314
14378: NOT
14379: IFFALSE 14434
14381: PUSH
14382: LD_INT 81
14384: PUSH
14385: LD_VAR 0 1
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 92
14396: PUSH
14397: LD_VAR 0 17
14401: PUSH
14402: LD_INT 1
14404: ARRAY
14405: PUSH
14406: LD_VAR 0 17
14410: PUSH
14411: LD_INT 2
14413: ARRAY
14414: PUSH
14415: LD_INT 12
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 69
14432: NOT
14433: AND
14434: IFFALSE 14463
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
14436: LD_VAR 0 9
14440: PPUSH
14441: LD_VAR 0 17
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 17
14454: PUSH
14455: LD_INT 2
14457: ARRAY
14458: PPUSH
14459: CALL_OW 117
// end ; end ;
14463: GO 13631
14465: POP
14466: POP
// end ; if vehicles then
14467: LD_VAR 0 26
14471: IFFALSE 15283
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
14473: LD_ADDR_VAR 0 26
14477: PUSH
14478: LD_VAR 0 26
14482: PPUSH
14483: LD_INT 3
14485: PUSH
14486: LD_INT 2
14488: PUSH
14489: LD_INT 34
14491: PUSH
14492: LD_INT 88
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 34
14501: PUSH
14502: LD_INT 32
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 50
14520: PUSH
14521: EMPTY
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 72
14532: ST_TO_ADDR
// if vehicles then
14533: LD_VAR 0 26
14537: IFFALSE 15283
// begin for i in vehicles do
14539: LD_ADDR_VAR 0 9
14543: PUSH
14544: LD_VAR 0 26
14548: PUSH
14549: FOR_IN
14550: IFFALSE 15281
// begin tag := GetTag ( i ) ;
14552: LD_ADDR_VAR 0 15
14556: PUSH
14557: LD_VAR 0 9
14561: PPUSH
14562: CALL_OW 110
14566: ST_TO_ADDR
// if not tag then
14567: LD_VAR 0 15
14571: NOT
14572: IFFALSE 14718
// begin if GetControl ( i ) = control_manual then
14574: LD_VAR 0 9
14578: PPUSH
14579: CALL_OW 263
14583: PUSH
14584: LD_INT 1
14586: EQUAL
14587: IFFALSE 14704
// begin drivers := arDrivers ;
14589: LD_ADDR_VAR 0 24
14593: PUSH
14594: LD_EXP 50
14598: ST_TO_ADDR
// if not drivers then
14599: LD_VAR 0 24
14603: NOT
14604: IFFALSE 14684
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
14606: LD_ADDR_VAR 0 24
14610: PUSH
14611: LD_VAR 0 14
14615: PPUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 120
14621: PUSH
14622: LD_INT 7
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PPUSH
14633: CALL_OW 72
14637: ST_TO_ADDR
// if drivers then
14638: LD_VAR 0 24
14642: IFFALSE 14684
// begin SetTag ( drivers [ 1 ] , tMech ) ;
14644: LD_VAR 0 24
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: PPUSH
14653: LD_INT 7
14655: PPUSH
14656: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
14660: LD_ADDR_EXP 50
14664: PUSH
14665: LD_EXP 50
14669: PPUSH
14670: LD_VAR 0 24
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: CALL 68372 0 2
14683: ST_TO_ADDR
// end ; end ; if drivers then
14684: LD_VAR 0 24
14688: IFFALSE 14702
// SetTag ( i , tBusy ) ;
14690: LD_VAR 0 9
14694: PPUSH
14695: LD_INT 8
14697: PPUSH
14698: CALL_OW 109
// continue ;
14702: GO 14549
// end ; SetTag ( i , tBusy ) ;
14704: LD_VAR 0 9
14708: PPUSH
14709: LD_INT 8
14711: PPUSH
14712: CALL_OW 109
// end else
14716: GO 15279
// if tag = tBusy then
14718: LD_VAR 0 15
14722: PUSH
14723: LD_INT 8
14725: EQUAL
14726: IFFALSE 14946
// begin if GetLives ( i ) = 1000 then
14728: LD_VAR 0 9
14732: PPUSH
14733: CALL_OW 256
14737: PUSH
14738: LD_INT 1000
14740: EQUAL
14741: IFFALSE 14944
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
14743: LD_VAR 0 9
14747: PPUSH
14748: CALL_OW 263
14752: PUSH
14753: LD_INT 1
14755: EQUAL
14756: IFFALSE 14770
14758: PUSH
14759: LD_VAR 0 9
14763: PPUSH
14764: CALL_OW 311
14768: NOT
14769: AND
14770: IFFALSE 14932
// begin drivers := arDrivers ;
14772: LD_ADDR_VAR 0 24
14776: PUSH
14777: LD_EXP 50
14781: ST_TO_ADDR
// if not drivers then
14782: LD_VAR 0 24
14786: NOT
14787: IFFALSE 14803
// begin SetTag ( i , 0 ) ;
14789: LD_VAR 0 9
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 109
// continue ;
14801: GO 14549
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14803: LD_VAR 0 24
14807: PUSH
14808: LD_INT 1
14810: ARRAY
14811: PPUSH
14812: CALL_OW 310
14816: IFFALSE 14834
14818: PUSH
14819: LD_VAR 0 24
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: PPUSH
14828: CALL 65952 0 1
14832: NOT
14833: AND
14834: IFFALSE 14849
// ComExitBuilding ( drivers [ 1 ] ) ;
14836: LD_VAR 0 24
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: PPUSH
14845: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14849: LD_VAR 0 26
14853: PPUSH
14854: LD_INT 120
14856: PUSH
14857: LD_INT 3
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 72
14868: IFFALSE 14886
14870: PUSH
14871: LD_VAR 0 24
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PPUSH
14880: CALL_OW 314
14884: NOT
14885: AND
14886: IFTRUE 14910
14888: PUSH
14889: LD_VAR 0 26
14893: PPUSH
14894: LD_INT 120
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PPUSH
14904: CALL_OW 72
14908: NOT
14909: OR
14910: IFFALSE 14930
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14912: LD_VAR 0 24
14916: PUSH
14917: LD_INT 1
14919: ARRAY
14920: PPUSH
14921: LD_VAR 0 9
14925: PPUSH
14926: CALL_OW 120
// continue ;
14930: GO 14549
// end ; SetTag ( i , tAttack ) ;
14932: LD_VAR 0 9
14936: PPUSH
14937: LD_INT 13
14939: PPUSH
14940: CALL_OW 109
// end ; end else
14944: GO 15279
// if tag = tAttack then
14946: LD_VAR 0 15
14950: PUSH
14951: LD_INT 13
14953: EQUAL
14954: IFFALSE 15136
// begin enemy := enemyInBase ;
14956: LD_ADDR_VAR 0 21
14960: PUSH
14961: LD_VAR 0 22
14965: ST_TO_ADDR
// if not enemy then
14966: LD_VAR 0 21
14970: NOT
14971: IFFALSE 14983
// enemy := enemyOuterBase ;
14973: LD_ADDR_VAR 0 21
14977: PUSH
14978: LD_VAR 0 23
14982: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14983: LD_VAR 0 21
14987: NOT
14988: IFFALSE 15023
14990: PUSH
14991: LD_VAR 0 9
14995: PPUSH
14996: LD_VAR 0 7
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: LD_VAR 0 7
15009: PUSH
15010: LD_INT 2
15012: ARRAY
15013: PPUSH
15014: CALL_OW 297
15018: PUSH
15019: LD_INT 10
15021: GREATER
15022: AND
15023: IFFALSE 15054
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15025: LD_VAR 0 9
15029: PPUSH
15030: LD_VAR 0 7
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PPUSH
15039: LD_VAR 0 7
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: PPUSH
15048: CALL_OW 111
// continue ;
15052: GO 14549
// end ; if GetLives ( i ) < 650 then
15054: LD_VAR 0 9
15058: PPUSH
15059: CALL_OW 256
15063: PUSH
15064: LD_INT 650
15066: LESS
15067: IFFALSE 15110
// begin SetTag ( i , tVehRepair ) ;
15069: LD_VAR 0 9
15073: PPUSH
15074: LD_INT 9
15076: PPUSH
15077: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15081: LD_VAR 0 9
15085: PPUSH
15086: LD_VAR 0 7
15090: PUSH
15091: LD_INT 1
15093: ARRAY
15094: PPUSH
15095: LD_VAR 0 7
15099: PUSH
15100: LD_INT 2
15102: ARRAY
15103: PPUSH
15104: CALL_OW 111
// continue ;
15108: GO 14549
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
15110: LD_VAR 0 9
15114: PPUSH
15115: LD_VAR 0 21
15119: PPUSH
15120: LD_VAR 0 9
15124: PPUSH
15125: CALL_OW 74
15129: PPUSH
15130: CALL_OW 115
// end else
15134: GO 15279
// if tag = tVehRepair then
15136: LD_VAR 0 15
15140: PUSH
15141: LD_INT 9
15143: EQUAL
15144: IFFALSE 15279
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
15146: LD_VAR 0 9
15150: PPUSH
15151: LD_VAR 0 7
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 7
15164: PUSH
15165: LD_INT 2
15167: ARRAY
15168: PPUSH
15169: CALL_OW 297
15173: PUSH
15174: LD_INT 10
15176: GREATER
15177: IFFALSE 15208
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15179: LD_VAR 0 9
15183: PPUSH
15184: LD_VAR 0 7
15188: PUSH
15189: LD_INT 1
15191: ARRAY
15192: PPUSH
15193: LD_VAR 0 7
15197: PUSH
15198: LD_INT 2
15200: ARRAY
15201: PPUSH
15202: CALL_OW 111
// continue ;
15206: GO 14549
// end ; if GetLives ( i ) = 1000 then
15208: LD_VAR 0 9
15212: PPUSH
15213: CALL_OW 256
15217: PUSH
15218: LD_INT 1000
15220: EQUAL
15221: IFFALSE 15237
// begin SetTag ( i , tBusy ) ;
15223: LD_VAR 0 9
15227: PPUSH
15228: LD_INT 8
15230: PPUSH
15231: CALL_OW 109
// continue ;
15235: GO 14549
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
15237: LD_VAR 0 9
15241: PPUSH
15242: CALL_OW 263
15246: PUSH
15247: LD_INT 1
15249: EQUAL
15250: IFFALSE 15263
15252: PUSH
15253: LD_VAR 0 9
15257: PPUSH
15258: CALL_OW 311
15262: AND
15263: IFFALSE 15279
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
15265: LD_VAR 0 9
15269: PPUSH
15270: CALL_OW 311
15274: PPUSH
15275: CALL 70086 0 1
// end ; end ;
15279: GO 14549
15281: POP
15282: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
15283: LD_ADDR_VAR 0 19
15287: PUSH
15288: LD_VAR 0 5
15292: PPUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 25
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 8
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 5
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 9
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 50
15345: PUSH
15346: EMPTY
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 72
15357: ST_TO_ADDR
// if sol then
15358: LD_VAR 0 19
15362: IFFALSE 15878
// begin if enemyInBase then
15364: LD_VAR 0 22
15368: IFFALSE 15547
// begin for i in sol do
15370: LD_ADDR_VAR 0 9
15374: PUSH
15375: LD_VAR 0 19
15379: PUSH
15380: FOR_IN
15381: IFFALSE 15543
// begin tw := IsInUnit ( i ) ;
15383: LD_ADDR_VAR 0 16
15387: PUSH
15388: LD_VAR 0 9
15392: PPUSH
15393: CALL_OW 310
15397: ST_TO_ADDR
// if tw then
15398: LD_VAR 0 16
15402: IFFALSE 15485
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15404: LD_VAR 0 16
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_VAR 0 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 101
15423: PUSH
15424: LD_VAR 0 34
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 30
15438: PUSH
15439: LD_INT 32
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: IN
15471: NOT
15472: IFFALSE 15483
// ComExitBuilding ( i ) ;
15474: LD_VAR 0 9
15478: PPUSH
15479: CALL_OW 122
// end else
15483: GO 15541
// if IsInArea ( i , area ) then
15485: LD_VAR 0 9
15489: PPUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: CALL_OW 308
15499: IFFALSE 15527
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
15501: LD_VAR 0 9
15505: PPUSH
15506: LD_VAR 0 22
15510: PPUSH
15511: LD_VAR 0 9
15515: PPUSH
15516: CALL_OW 74
15520: PPUSH
15521: CALL_OW 115
15525: GO 15541
// ComMoveToArea ( i , area ) ;
15527: LD_VAR 0 9
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: CALL_OW 113
// end ;
15541: GO 15380
15543: POP
15544: POP
// end else
15545: GO 15878
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
15547: LD_ADDR_VAR 0 28
15551: PUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 3
15559: PUSH
15560: LD_INT 62
15562: PUSH
15563: EMPTY
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: LD_INT 32
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 30
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 5
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 30
15605: PUSH
15606: LD_INT 31
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 70
15628: ST_TO_ADDR
// if empty then
15629: LD_VAR 0 28
15633: IFFALSE 15650
// empty := ReverseArray ( empty ) ;
15635: LD_ADDR_VAR 0 28
15639: PUSH
15640: LD_VAR 0 28
15644: PPUSH
15645: CALL 63452 0 1
15649: ST_TO_ADDR
// for i in sol do
15650: LD_ADDR_VAR 0 9
15654: PUSH
15655: LD_VAR 0 19
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15876
// begin tag := GetTag ( i ) ;
15663: LD_ADDR_VAR 0 15
15667: PUSH
15668: LD_VAR 0 9
15672: PPUSH
15673: CALL_OW 110
15677: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15678: LD_VAR 0 9
15682: PPUSH
15683: CALL_OW 256
15687: PUSH
15688: LD_INT 1000
15690: LESS
15691: IFFALSE 15703
15693: PUSH
15694: LD_VAR 0 15
15698: PUSH
15699: LD_INT 1
15701: NONEQUAL
15702: AND
15703: IFFALSE 15755
// begin SetTag ( i , tHeal ) ;
15705: LD_VAR 0 9
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15717: LD_VAR 0 9
15721: PPUSH
15722: LD_VAR 0 6
15726: PUSH
15727: LD_INT 1
15729: ARRAY
15730: PPUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: PPUSH
15740: CALL_OW 111
// AddComHold ( i ) ;
15744: LD_VAR 0 9
15748: PPUSH
15749: CALL_OW 200
// continue ;
15753: GO 15660
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15755: LD_VAR 0 9
15759: PPUSH
15760: CALL_OW 256
15764: PUSH
15765: LD_INT 1000
15767: EQUAL
15768: IFFALSE 15780
15770: PUSH
15771: LD_VAR 0 15
15775: PUSH
15776: LD_INT 1
15778: EQUAL
15779: AND
15780: IFFALSE 15796
// begin SetTag ( i , 0 ) ;
15782: LD_VAR 0 9
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 109
// continue ;
15794: GO 15660
// end ; if HasTask ( i ) then
15796: LD_VAR 0 9
15800: PPUSH
15801: CALL_OW 314
15805: IFFALSE 15809
// continue ;
15807: GO 15660
// if not IsInUnit ( i ) and not tag and empty then
15809: LD_VAR 0 9
15813: PPUSH
15814: CALL_OW 310
15818: NOT
15819: IFFALSE 15828
15821: PUSH
15822: LD_VAR 0 15
15826: NOT
15827: AND
15828: IFFALSE 15836
15830: PUSH
15831: LD_VAR 0 28
15835: AND
15836: IFFALSE 15874
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15838: LD_VAR 0 9
15842: PPUSH
15843: LD_VAR 0 28
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15856: LD_ADDR_VAR 0 28
15860: PUSH
15861: LD_VAR 0 28
15865: PPUSH
15866: LD_INT 1
15868: PPUSH
15869: CALL_OW 3
15873: ST_TO_ADDR
// end ; end ;
15874: GO 15660
15876: POP
15877: POP
// end ; end ; end ;
15878: LD_VAR 0 8
15882: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15883: LD_EXP 54
15887: PPUSH
15888: LD_INT 50
15890: PUSH
15891: EMPTY
15892: LIST
15893: PPUSH
15894: CALL_OW 72
15898: IFFALSE 15951
15900: GO 15902
15902: DISABLE
// begin BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15903: LD_EXP 3
15907: PUSH
15908: LD_INT 2
15910: ARRAY
15911: PPUSH
15912: LD_INT 2
15914: PPUSH
15915: LD_INT 5
15917: PPUSH
15918: LD_INT 6
15920: PPUSH
15921: LD_EXP 54
15925: PPUSH
15926: LD_INT 210
15928: PUSH
15929: LD_INT 43
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PPUSH
15936: LD_INT 194
15938: PUSH
15939: LD_INT 28
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL 12314 0 7
// enable ;
15950: ENABLE
// end ;
15951: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15952: LD_EXP 53
15956: IFFALSE 16176
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
// begin enable ;
15966: ENABLE
// p := 1 ;
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: DOUBLE
15981: LD_INT 1
15983: DEC
15984: ST_TO_ADDR
15985: LD_EXP 53
15989: PPUSH
15990: CALL 32396 0 1
15994: PUSH
15995: LD_INT 2
15997: DIV
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16174
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
16002: LD_ADDR_VAR 0 3
16006: PUSH
16007: LD_EXP 53
16011: PUSH
16012: LD_VAR 0 2
16016: ARRAY
16017: PPUSH
16018: LD_EXP 53
16022: PUSH
16023: LD_VAR 0 2
16027: PUSH
16028: LD_INT 1
16030: PLUS
16031: ARRAY
16032: PPUSH
16033: CALL_OW 428
16037: ST_TO_ADDR
// if tmp then
16038: LD_VAR 0 3
16042: IFFALSE 16158
// if GetSide ( tmp ) <> botSides [ 2 ] then
16044: LD_VAR 0 3
16048: PPUSH
16049: CALL_OW 255
16053: PUSH
16054: LD_EXP 3
16058: PUSH
16059: LD_INT 2
16061: ARRAY
16062: NONEQUAL
16063: IFFALSE 16158
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
16065: LD_EXP 53
16069: PUSH
16070: LD_VAR 0 2
16074: ARRAY
16075: PPUSH
16076: LD_EXP 53
16080: PUSH
16081: LD_VAR 0 2
16085: PUSH
16086: LD_INT 1
16088: PLUS
16089: ARRAY
16090: PPUSH
16091: LD_EXP 3
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: PPUSH
16100: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
16104: LD_ADDR_EXP 53
16108: PUSH
16109: LD_EXP 53
16113: PPUSH
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL_OW 3
16123: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
16124: LD_ADDR_EXP 53
16128: PUSH
16129: LD_EXP 53
16133: PPUSH
16134: LD_VAR 0 2
16138: PPUSH
16139: CALL_OW 3
16143: ST_TO_ADDR
// p := p - 2 ;
16144: LD_ADDR_VAR 0 2
16148: PUSH
16149: LD_VAR 0 2
16153: PUSH
16154: LD_INT 2
16156: MINUS
16157: ST_TO_ADDR
// end ; p := p + 2 ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: LD_VAR 0 2
16167: PUSH
16168: LD_INT 2
16170: PLUS
16171: ST_TO_ADDR
// end ;
16172: GO 15999
16174: POP
16175: POP
// end ;
16176: PPOPN 3
16178: END
// every 3 3$00 trigger IsOk ( arDep ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do var i ;
16179: LD_INT 32
16181: PPUSH
16182: CALL_OW 302
16186: IFFALSE 16218
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 30
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: AND
16218: IFFALSE 16364
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
// begin enable ;
16226: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_INT 22
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 30
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16362
// if BuildingStatus ( i ) = bs_idle and UnitsInside ( i ) > 0 then
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 461
16273: PUSH
16274: LD_INT 2
16276: EQUAL
16277: IFFALSE 16294
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 313
16289: PUSH
16290: LD_INT 0
16292: GREATER
16293: AND
16294: IFFALSE 16360
// begin arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
16296: LD_ADDR_EXP 46
16300: PUSH
16301: LD_INT 14
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 14
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: LD_INT 26
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 14
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: LD_INT 1
16345: PUSH
16346: LD_INT 27
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// end ;
16360: GO 16261
16362: POP
16363: POP
// end ; end_of_file
16364: PPOPN 1
16366: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 255
16376: PUSH
16377: LD_EXP 3
16381: IN
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16444
// if not un in [ Sikorski ] then
16387: LD_VAR 0 1
16391: PUSH
16392: LD_EXP 34
16396: PUSH
16397: EMPTY
16398: LIST
16399: IN
16400: NOT
16401: IFFALSE 16422
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_INT 0
16415: PPUSH
16416: CALL 6418 0 3
16420: GO 16444
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
16422: LD_VAR 0 1
16426: PPUSH
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: CALL 5735 0 1
16439: PPUSH
16440: CALL 6418 0 3
// end ;
16444: PPOPN 3
16446: END
// on UnitDestroyed ( un ) do var i , skill , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
16447: LD_INT 0
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL 23698 0 1
// side := GetSide ( un ) ;
16469: LD_ADDR_VAR 0 4
16473: PUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 255
16483: ST_TO_ADDR
// skill := tick div 10 10$00 ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_OWVAR 1
16493: PUSH
16494: LD_INT 21000
16496: DIV
16497: ST_TO_ADDR
// if skill < 0 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 0
16505: LESS
16506: IFFALSE 16518
// skill := 0 else
16508: LD_ADDR_VAR 0 3
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
16516: GO 16536
// if skill > 7 then
16518: LD_VAR 0 3
16522: PUSH
16523: LD_INT 7
16525: GREATER
16526: IFFALSE 16536
// skill := 7 ;
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: LD_INT 7
16535: ST_TO_ADDR
// if multi_sides [ side ] then
16536: LD_EXP 7
16540: PUSH
16541: LD_VAR 0 4
16545: ARRAY
16546: IFFALSE 16572
// if GetType ( un ) = unit_human then
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 247
16557: PUSH
16558: LD_INT 1
16560: EQUAL
16561: IFFALSE 16572
// MultiplayerEvent_HumanLost ( side ) ;
16563: LD_VAR 0 4
16567: PPUSH
16568: CALL 6298 0 1
// if un = Sikorski then
16572: LD_VAR 0 1
16576: PUSH
16577: LD_EXP 34
16581: EQUAL
16582: IFFALSE 16593
// AmericanAttack ( Difficulty ) ;
16584: LD_OWVAR 67
16588: PPUSH
16589: CALL 21745 0 1
// if side in botSides then
16593: LD_VAR 0 4
16597: PUSH
16598: LD_EXP 3
16602: IN
16603: IFFALSE 17780
// begin if side = botSides [ 1 ] then
16605: LD_VAR 0 4
16609: PUSH
16610: LD_EXP 3
16614: PUSH
16615: LD_INT 1
16617: ARRAY
16618: EQUAL
16619: IFFALSE 17184
// begin if un in amForce then
16621: LD_VAR 0 1
16625: PUSH
16626: LD_EXP 42
16630: IN
16631: IFFALSE 16649
// amForce := amForce diff un ;
16633: LD_ADDR_EXP 42
16637: PUSH
16638: LD_EXP 42
16642: PUSH
16643: LD_VAR 0 1
16647: DIFF
16648: ST_TO_ADDR
// if un in amAttackersVeh then
16649: LD_VAR 0 1
16653: PUSH
16654: LD_EXP 59
16658: IN
16659: IFFALSE 16677
// amAttackersVeh := amAttackersVeh diff un ;
16661: LD_ADDR_EXP 59
16665: PUSH
16666: LD_EXP 59
16670: PUSH
16671: LD_VAR 0 1
16675: DIFF
16676: ST_TO_ADDR
// if un in amAttackersInf then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_EXP 58
16686: IN
16687: IFFALSE 16705
// amAttackersInf := amAttackersInf diff un ;
16689: LD_ADDR_EXP 58
16693: PUSH
16694: LD_EXP 58
16698: PUSH
16699: LD_VAR 0 1
16703: DIFF
16704: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 257
16714: PUSH
16715: LD_INT 3
16717: EQUAL
16718: IFFALSE 16726
16720: PUSH
16721: LD_EXP 44
16725: AND
16726: IFFALSE 16873
// begin if not IsOk ( amDep ) then
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 302
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 17885
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
16740: LD_ADDR_EXP 44
16744: PUSH
16745: LD_EXP 44
16749: PPUSH
16750: CALL 69767 0 1
16754: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
16755: LD_ADDR_OWVAR 20
16759: PUSH
16760: LD_EXP 3
16764: PUSH
16765: LD_INT 1
16767: ARRAY
16768: ST_TO_ADDR
// uc_nation := nation_american ;
16769: LD_ADDR_OWVAR 21
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 1
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: PUSH
16794: LD_OWVAR 67
16798: ARRAY
16799: PUSH
16800: LD_VAR 0 3
16804: PLUS
16805: PPUSH
16806: CALL_OW 383
// un := CreateHuman ;
16810: LD_ADDR_VAR 0 1
16814: PUSH
16815: CALL_OW 44
16819: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_INT 52
16827: PPUSH
16828: LD_INT 2
16830: PPUSH
16831: LD_INT 0
16833: PPUSH
16834: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
16838: LD_VAR 0 1
16842: PPUSH
16843: LD_INT 23
16845: PPUSH
16846: LD_INT 19
16848: PPUSH
16849: CALL_OW 111
// amForce := Join ( amForce , un ) ;
16853: LD_ADDR_EXP 42
16857: PUSH
16858: LD_EXP 42
16862: PPUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL 68372 0 2
16872: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 247
16882: PUSH
16883: LD_INT 3
16885: EQUAL
16886: IFFALSE 16902
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: LD_INT 3
16896: PPUSH
16897: CALL_OW 308
16901: AND
16902: IFFALSE 17045
// begin btype := GetBType ( un ) ;
16904: LD_ADDR_VAR 0 12
16908: PUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 266
16918: ST_TO_ADDR
// if btype = b_barracks then
16919: LD_VAR 0 12
16923: PUSH
16924: LD_INT 5
16926: EQUAL
16927: IFFALSE 16937
// btype := b_armoury ;
16929: LD_ADDR_VAR 0 12
16933: PUSH
16934: LD_INT 4
16936: ST_TO_ADDR
// if btype = b_factory then
16937: LD_VAR 0 12
16941: PUSH
16942: LD_INT 3
16944: EQUAL
16945: IFFALSE 16955
// btype := b_workshop ;
16947: LD_ADDR_VAR 0 12
16951: PUSH
16952: LD_INT 2
16954: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16955: LD_VAR 0 12
16959: PUSH
16960: LD_INT 8
16962: PUSH
16963: LD_INT 7
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: IN
16970: IFFALSE 16980
// btype := b_lab ;
16972: LD_ADDR_VAR 0 12
16976: PUSH
16977: LD_INT 6
16979: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16980: LD_ADDR_EXP 37
16984: PUSH
16985: LD_EXP 37
16989: PPUSH
16990: LD_EXP 37
16994: PUSH
16995: LD_INT 1
16997: PLUS
16998: PPUSH
16999: LD_VAR 0 12
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 250
17013: PUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 251
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 254
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 1
17044: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 247
17054: PUSH
17055: LD_INT 2
17057: EQUAL
17058: IFFALSE 17184
// begin chassis := GetChassis ( un ) ;
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 265
17074: ST_TO_ADDR
// engine := GetEngine ( un ) ;
17075: LD_ADDR_VAR 0 7
17079: PUSH
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 262
17089: ST_TO_ADDR
// control := GetControl ( un ) ;
17090: LD_ADDR_VAR 0 8
17094: PUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 263
17104: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
17105: LD_ADDR_VAR 0 9
17109: PUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 264
17119: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
17120: LD_ADDR_VAR 0 10
17124: PUSH
17125: LD_VAR 0 11
17129: PPUSH
17130: LD_VAR 0 6
17134: PPUSH
17135: LD_VAR 0 7
17139: PPUSH
17140: LD_VAR 0 8
17144: PPUSH
17145: LD_VAR 0 9
17149: PPUSH
17150: CALL 32754 0 5
17154: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
17155: LD_ADDR_EXP 36
17159: PUSH
17160: LD_EXP 36
17164: PPUSH
17165: LD_EXP 36
17169: PUSH
17170: LD_INT 1
17172: PLUS
17173: PPUSH
17174: LD_VAR 0 10
17178: PPUSH
17179: CALL_OW 1
17183: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
17184: LD_VAR 0 4
17188: PUSH
17189: LD_EXP 3
17193: PUSH
17194: LD_INT 2
17196: ARRAY
17197: EQUAL
17198: IFFALSE 17780
// begin if un in arForce then
17200: LD_VAR 0 1
17204: PUSH
17205: LD_EXP 54
17209: IN
17210: IFFALSE 17228
// arForce := arForce diff un ;
17212: LD_ADDR_EXP 54
17216: PUSH
17217: LD_EXP 54
17221: PUSH
17222: LD_VAR 0 1
17226: DIFF
17227: ST_TO_ADDR
// if un in arAttackersVeh then
17228: LD_VAR 0 1
17232: PUSH
17233: LD_EXP 57
17237: IN
17238: IFFALSE 17256
// arAttackersVeh := arAttackersVeh diff un ;
17240: LD_ADDR_EXP 57
17244: PUSH
17245: LD_EXP 57
17249: PUSH
17250: LD_VAR 0 1
17254: DIFF
17255: ST_TO_ADDR
// if un in arAttackersInf then
17256: LD_VAR 0 1
17260: PUSH
17261: LD_EXP 56
17265: IN
17266: IFFALSE 17284
// arAttackersInf := arAttackersInf diff un ;
17268: LD_ADDR_EXP 56
17272: PUSH
17273: LD_EXP 56
17277: PUSH
17278: LD_VAR 0 1
17282: DIFF
17283: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
17284: LD_VAR 0 1
17288: PPUSH
17289: CALL_OW 257
17293: PUSH
17294: LD_INT 3
17296: EQUAL
17297: IFFALSE 17314
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 110
17309: PUSH
17310: LD_INT 999
17312: LESS
17313: AND
17314: IFFALSE 17322
17316: PUSH
17317: LD_EXP 51
17321: AND
17322: IFFALSE 17469
// begin if not IsOk ( arDep ) then
17324: LD_INT 32
17326: PPUSH
17327: CALL_OW 302
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17885
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
17336: LD_ADDR_EXP 51
17340: PUSH
17341: LD_EXP 51
17345: PPUSH
17346: CALL 69767 0 1
17350: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
17351: LD_ADDR_OWVAR 20
17355: PUSH
17356: LD_EXP 3
17360: PUSH
17361: LD_INT 2
17363: ARRAY
17364: ST_TO_ADDR
// uc_nation := nation_arabian ;
17365: LD_ADDR_OWVAR 21
17369: PUSH
17370: LD_INT 2
17372: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
17373: LD_INT 0
17375: PPUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: PUSH
17390: LD_OWVAR 67
17394: ARRAY
17395: PUSH
17396: LD_VAR 0 3
17400: PLUS
17401: PPUSH
17402: CALL_OW 383
// un := CreateHuman ;
17406: LD_ADDR_VAR 0 1
17410: PUSH
17411: CALL_OW 44
17415: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_INT 178
17423: PPUSH
17424: LD_INT 2
17426: PPUSH
17427: LD_INT 0
17429: PPUSH
17430: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_INT 204
17441: PPUSH
17442: LD_INT 35
17444: PPUSH
17445: CALL_OW 111
// arForce := Join ( arForce , un ) ;
17449: LD_ADDR_EXP 54
17453: PUSH
17454: LD_EXP 54
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL 68372 0 2
17468: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 247
17478: PUSH
17479: LD_INT 3
17481: EQUAL
17482: IFFALSE 17498
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 3
17492: PPUSH
17493: CALL_OW 308
17497: AND
17498: IFFALSE 17641
// begin btype := GetBType ( un ) ;
17500: LD_ADDR_VAR 0 12
17504: PUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 266
17514: ST_TO_ADDR
// if btype = b_barracks then
17515: LD_VAR 0 12
17519: PUSH
17520: LD_INT 5
17522: EQUAL
17523: IFFALSE 17533
// btype := b_armoury ;
17525: LD_ADDR_VAR 0 12
17529: PUSH
17530: LD_INT 4
17532: ST_TO_ADDR
// if btype = b_factory then
17533: LD_VAR 0 12
17537: PUSH
17538: LD_INT 3
17540: EQUAL
17541: IFFALSE 17551
// btype := b_workshop ;
17543: LD_ADDR_VAR 0 12
17547: PUSH
17548: LD_INT 2
17550: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
17551: LD_VAR 0 12
17555: PUSH
17556: LD_INT 8
17558: PUSH
17559: LD_INT 7
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17576
// btype := b_lab ;
17568: LD_ADDR_VAR 0 12
17572: PUSH
17573: LD_INT 6
17575: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
17576: LD_ADDR_EXP 47
17580: PUSH
17581: LD_EXP 47
17585: PPUSH
17586: LD_EXP 47
17590: PUSH
17591: LD_INT 1
17593: PLUS
17594: PPUSH
17595: LD_VAR 0 12
17599: PUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 250
17609: PUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 251
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 254
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PPUSH
17636: CALL_OW 1
17640: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 247
17650: PUSH
17651: LD_INT 2
17653: EQUAL
17654: IFFALSE 17780
// begin chassis := GetChassis ( un ) ;
17656: LD_ADDR_VAR 0 6
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 265
17670: ST_TO_ADDR
// engine := GetEngine ( un ) ;
17671: LD_ADDR_VAR 0 7
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 262
17685: ST_TO_ADDR
// control := GetControl ( un ) ;
17686: LD_ADDR_VAR 0 8
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 263
17700: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 264
17715: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
17716: LD_ADDR_VAR 0 10
17720: PUSH
17721: LD_VAR 0 11
17725: PPUSH
17726: LD_VAR 0 6
17730: PPUSH
17731: LD_VAR 0 7
17735: PPUSH
17736: LD_VAR 0 8
17740: PPUSH
17741: LD_VAR 0 9
17745: PPUSH
17746: CALL 32754 0 5
17750: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
17751: LD_ADDR_EXP 46
17755: PUSH
17756: LD_EXP 46
17760: PPUSH
17761: LD_EXP 46
17765: PUSH
17766: LD_INT 1
17768: PLUS
17769: PPUSH
17770: LD_VAR 0 10
17774: PPUSH
17775: CALL_OW 1
17779: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
17780: LD_EXP 24
17784: IFFALSE 17792
17786: PUSH
17787: LD_EXP 16
17791: AND
17792: IFFALSE 17807
17794: PUSH
17795: LD_EXP 25
17799: PUSH
17800: LD_VAR 0 4
17804: ARRAY
17805: NOT
17806: AND
17807: IFFALSE 17885
// if un in multi_commanders then
17809: LD_VAR 0 1
17813: PUSH
17814: LD_EXP 24
17818: IN
17819: IFFALSE 17885
// begin if side = your_side then
17821: LD_VAR 0 4
17825: PUSH
17826: LD_OWVAR 2
17830: EQUAL
17831: IFFALSE 17837
// Multiplayer_Loose_Message ;
17833: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
17837: LD_ADDR_EXP 25
17841: PUSH
17842: LD_EXP 25
17846: PPUSH
17847: LD_VAR 0 4
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 1
17859: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
17860: LD_ADDR_EXP 24
17864: PUSH
17865: LD_EXP 24
17869: PUSH
17870: LD_VAR 0 1
17874: DIFF
17875: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
17876: LD_VAR 0 4
17880: PPUSH
17881: CALL 5768 0 1
// end ; end ;
17885: PPOPN 12
17887: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
17888: LD_INT 0
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// begin side := GetSide ( building ) ;
17894: LD_ADDR_VAR 0 4
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 255
17908: ST_TO_ADDR
// if multi_sides [ side ] then
17909: LD_EXP 7
17913: PUSH
17914: LD_VAR 0 4
17918: ARRAY
17919: IFFALSE 17940
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
17921: LD_VAR 0 4
17925: PPUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 266
17935: PPUSH
17936: CALL 6344 0 2
// if side = botSides [ 1 ] then
17940: LD_VAR 0 4
17944: PUSH
17945: LD_EXP 3
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: EQUAL
17954: IFFALSE 18038
// begin amBuildings := Delete ( amBuildings , 1 ) ;
17956: LD_ADDR_EXP 37
17960: PUSH
17961: LD_EXP 37
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 3
17973: ST_TO_ADDR
// btype := GetBType ( building ) ;
17974: LD_ADDR_VAR 0 5
17978: PUSH
17979: LD_VAR 0 1
17983: PPUSH
17984: CALL_OW 266
17988: ST_TO_ADDR
// case btype of b_workshop :
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 2
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18014
18002: POP
// ComUpgrade ( building ) ; b_lab :
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 146
18012: GO 18038
18014: LD_INT 6
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18037
18022: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_INT 10
18030: PPUSH
18031: CALL_OW 207
// end ; end ;
18035: GO 18038
18037: POP
// end ; if side = botSides [ 2 ] then
18038: LD_VAR 0 4
18042: PUSH
18043: LD_EXP 3
18047: PUSH
18048: LD_INT 2
18050: ARRAY
18051: EQUAL
18052: IFFALSE 18148
// begin arBuildings := Delete ( arBuildings , 1 ) ;
18054: LD_ADDR_EXP 47
18058: PUSH
18059: LD_EXP 47
18063: PPUSH
18064: LD_INT 1
18066: PPUSH
18067: CALL_OW 3
18071: ST_TO_ADDR
// btype := GetBType ( building ) ;
18072: LD_ADDR_VAR 0 5
18076: PUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 266
18086: ST_TO_ADDR
// case btype of b_workshop :
18087: LD_VAR 0 5
18091: PUSH
18092: LD_INT 2
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18112
18100: POP
// ComUpgrade ( building ) ; b_lab :
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 146
18110: GO 18148
18112: LD_INT 6
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18147
18120: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_INT 10
18128: PPUSH
18129: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
18133: LD_VAR 0 1
18137: PPUSH
18138: LD_INT 15
18140: PPUSH
18141: CALL_OW 207
// end ; end ;
18145: GO 18148
18147: POP
// end ; end ;
18148: PPOPN 5
18150: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 255
18160: PUSH
18161: LD_EXP 3
18165: IN
18166: NOT
18167: IFFALSE 18171
// exit ;
18169: GO 18370
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
18171: LD_VAR 0 2
18175: PUSH
18176: LD_EXP 55
18180: IN
18181: IFFALSE 18198
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 31
18196: EQUAL
18197: AND
18198: IFFALSE 18222
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 215
18207: PPUSH
18208: LD_INT 102
18210: PPUSH
18211: CALL_OW 428
18215: PPUSH
18216: CALL_OW 120
// exit ;
18220: GO 18370
// end ; if HexInfo ( 44 , 78 ) and GetSide ( unit ) = 1 then
18222: LD_INT 44
18224: PPUSH
18225: LD_INT 78
18227: PPUSH
18228: CALL_OW 428
18232: IFFALSE 18249
18234: PUSH
18235: LD_VAR 0 2
18239: PPUSH
18240: CALL_OW 255
18244: PUSH
18245: LD_INT 1
18247: EQUAL
18248: AND
18249: IFFALSE 18288
// begin ComMoveXY ( unit , 26 , 40 ) ;
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_INT 26
18258: PPUSH
18259: LD_INT 40
18261: PPUSH
18262: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
18266: LD_ADDR_EXP 42
18270: PUSH
18271: LD_EXP 42
18275: PPUSH
18276: LD_VAR 0 2
18280: PPUSH
18281: CALL 68372 0 2
18285: ST_TO_ADDR
// exit ;
18286: GO 18370
// end ; if GetX ( building ) > 71 and GetSide ( unit ) = 1 then
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 250
18297: PUSH
18298: LD_INT 71
18300: GREATER
18301: IFFALSE 18318
18303: PUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: CALL_OW 255
18313: PUSH
18314: LD_INT 1
18316: EQUAL
18317: AND
18318: IFFALSE 18370
// begin ComMoveXY ( unit , 69 , 39 ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_INT 69
18327: PPUSH
18328: LD_INT 39
18330: PPUSH
18331: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_INT 26
18342: PPUSH
18343: LD_INT 40
18345: PPUSH
18346: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
18350: LD_ADDR_EXP 42
18354: PUSH
18355: LD_EXP 42
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL 68372 0 2
18369: ST_TO_ADDR
// end ; end ;
18370: PPOPN 2
18372: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
18381: LD_VAR 0 1
18385: PPUSH
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL 23756 0 2
// side := GetSide ( vehicle ) ;
18395: LD_ADDR_VAR 0 4
18399: PUSH
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 255
18409: ST_TO_ADDR
// if multi_sides [ side ] then
18410: LD_EXP 7
18414: PUSH
18415: LD_VAR 0 4
18419: ARRAY
18420: IFFALSE 18431
// MultiplayerEvent_Produced ( side ) ;
18422: LD_VAR 0 4
18426: PPUSH
18427: CALL 6252 0 1
// if side = botSides [ 1 ] then
18431: LD_VAR 0 4
18435: PUSH
18436: LD_EXP 3
18440: PUSH
18441: LD_INT 1
18443: ARRAY
18444: EQUAL
18445: IFFALSE 18583
// begin driver := IsDrivenBy ( vehicle ) ;
18447: LD_ADDR_VAR 0 8
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 311
18461: ST_TO_ADDR
// if driver then
18462: LD_VAR 0 8
18466: IFFALSE 18500
// begin SetTag ( driver , tMech ) ;
18468: LD_VAR 0 8
18472: PPUSH
18473: LD_INT 7
18475: PPUSH
18476: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
18480: LD_ADDR_EXP 40
18484: PUSH
18485: LD_EXP 40
18489: PPUSH
18490: LD_VAR 0 8
18494: PPUSH
18495: CALL 68372 0 2
18499: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
18500: LD_EXP 41
18504: PUSH
18505: LD_EXP 38
18509: PPUSH
18510: CALL 32396 0 1
18514: GREATER
18515: IFTRUE 18539
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 266
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: LD_INT 13
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: IN
18538: OR
18539: IFFALSE 18563
// amVehicles := Join ( amVehicles , vehicle ) else
18541: LD_ADDR_EXP 38
18545: PUSH
18546: LD_EXP 38
18550: PPUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL 68372 0 2
18560: ST_TO_ADDR
18561: GO 18583
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
18563: LD_ADDR_EXP 39
18567: PUSH
18568: LD_EXP 39
18572: PPUSH
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL 68372 0 2
18582: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
18583: LD_VAR 0 4
18587: PUSH
18588: LD_EXP 3
18592: PUSH
18593: LD_INT 2
18595: ARRAY
18596: EQUAL
18597: IFFALSE 18735
// begin driver := IsDrivenBy ( vehicle ) ;
18599: LD_ADDR_VAR 0 8
18603: PUSH
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 311
18613: ST_TO_ADDR
// if driver then
18614: LD_VAR 0 8
18618: IFFALSE 18652
// begin SetTag ( driver , tMech ) ;
18620: LD_VAR 0 8
18624: PPUSH
18625: LD_INT 7
18627: PPUSH
18628: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
18632: LD_ADDR_EXP 50
18636: PUSH
18637: LD_EXP 50
18641: PPUSH
18642: LD_VAR 0 8
18646: PPUSH
18647: CALL 68372 0 2
18651: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
18652: LD_EXP 52
18656: PUSH
18657: LD_EXP 48
18661: PPUSH
18662: CALL 32396 0 1
18666: GREATER
18667: IFTRUE 18691
18669: PUSH
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 266
18679: PUSH
18680: LD_INT 32
18682: PUSH
18683: LD_INT 88
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: IN
18690: OR
18691: IFFALSE 18715
// arVehicles := Join ( arVehicles , vehicle ) else
18693: LD_ADDR_EXP 48
18697: PUSH
18698: LD_EXP 48
18702: PPUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL 68372 0 2
18712: ST_TO_ADDR
18713: GO 18735
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
18715: LD_ADDR_EXP 49
18719: PUSH
18720: LD_EXP 49
18724: PPUSH
18725: LD_VAR 0 1
18729: PPUSH
18730: CALL 68372 0 2
18734: ST_TO_ADDR
// end ; end ;
18735: PPOPN 8
18737: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 110
18747: PUSH
18748: LD_INT 7
18750: EQUAL
18751: IFFALSE 18765
// SetTag ( driver , 0 ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_INT 0
18760: PPUSH
18761: CALL_OW 109
// if GetTag ( driver ) = 999 then
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: PUSH
18775: LD_INT 999
18777: EQUAL
18778: IFFALSE 18906
// begin if GetSide ( driver ) = 1 then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 255
18789: PUSH
18790: LD_INT 1
18792: EQUAL
18793: IFFALSE 18844
// begin SetTag ( driver , 0 ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: LD_INT 0
18802: PPUSH
18803: CALL_OW 109
// ComMoveXY ( driver , 26 , 40 ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_INT 26
18814: PPUSH
18815: LD_INT 40
18817: PPUSH
18818: CALL_OW 111
// amForce := Join ( amForce , driver ) ;
18822: LD_ADDR_EXP 42
18826: PUSH
18827: LD_EXP 42
18831: PPUSH
18832: LD_VAR 0 1
18836: PPUSH
18837: CALL 68372 0 2
18841: ST_TO_ADDR
// end else
18842: GO 18906
// if GetSide ( driver ) = 2 then
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 255
18853: PUSH
18854: LD_INT 2
18856: EQUAL
18857: IFFALSE 18906
// begin SetTag ( driver , 0 ) ;
18859: LD_VAR 0 1
18863: PPUSH
18864: LD_INT 0
18866: PPUSH
18867: CALL_OW 109
// ComMoveXY ( driver , 197 , 30 ) ;
18871: LD_VAR 0 1
18875: PPUSH
18876: LD_INT 197
18878: PPUSH
18879: LD_INT 30
18881: PPUSH
18882: CALL_OW 111
// arForce := Join ( arForce , driver ) ;
18886: LD_ADDR_EXP 54
18890: PUSH
18891: LD_EXP 54
18895: PPUSH
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL 68372 0 2
18905: ST_TO_ADDR
// end ; end ; end ;
18906: PPOPN 4
18908: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
18909: LD_VAR 0 2
18913: PPUSH
18914: CALL_OW 255
18918: PUSH
18919: LD_EXP 3
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: EQUAL
18928: IFFALSE 18958
// if tech in amTech then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_EXP 35
18939: IN
18940: IFFALSE 18958
// amTech := amTech diff tech ;
18942: LD_ADDR_EXP 35
18946: PUSH
18947: LD_EXP 35
18951: PUSH
18952: LD_VAR 0 1
18956: DIFF
18957: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 255
18967: PUSH
18968: LD_EXP 3
18972: PUSH
18973: LD_INT 2
18975: ARRAY
18976: EQUAL
18977: IFFALSE 19007
// if tech in arTech then
18979: LD_VAR 0 1
18983: PUSH
18984: LD_EXP 45
18988: IN
18989: IFFALSE 19007
// arTech := arTech diff tech ;
18991: LD_ADDR_EXP 45
18995: PUSH
18996: LD_EXP 45
19000: PUSH
19001: LD_VAR 0 1
19005: DIFF
19006: ST_TO_ADDR
// end ;
19007: PPOPN 2
19009: END
// on EnterBuilding ( b , un ) do begin if GetSide ( un ) in [ 1 , 2 ] and GetClass ( un ) = class_mechanic then
19010: LD_VAR 0 2
19014: PPUSH
19015: CALL_OW 255
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: IN
19030: IFFALSE 19047
19032: PUSH
19033: LD_VAR 0 2
19037: PPUSH
19038: CALL_OW 257
19042: PUSH
19043: LD_INT 3
19045: EQUAL
19046: AND
19047: IFFALSE 19061
// SetLives ( un , 1000 ) ;
19049: LD_VAR 0 2
19053: PPUSH
19054: LD_INT 1000
19056: PPUSH
19057: CALL_OW 234
// end ;
19061: PPOPN 2
19063: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
19064: LD_INT 0
19066: PPUSH
// begin side := GetSide ( factory ) ;
19067: LD_ADDR_VAR 0 6
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 255
19081: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
19082: LD_VAR 0 5
19086: PUSH
19087: LD_INT 81
19089: EQUAL
19090: IFFALSE 19128
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_VAR 0 6
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 34
19107: PUSH
19108: LD_INT 81
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PPUSH
19119: CALL_OW 69
19123: PUSH
19124: LD_INT 0
19126: GREATER
19127: AND
19128: IFFALSE 19149
// begin ComCancel ( factory ) ;
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
19139: LD_STRING VehLimit
19141: PPUSH
19142: LD_INT 2
19144: PPUSH
19145: CALL_OW 338
// end ; end ; end_of_file
19149: PPOPN 6
19151: END
// every 10 10$00 trigger IsOk ( amDep ) do
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 302
19159: IFFALSE 19196
19161: GO 19163
19163: DISABLE
// begin activeAmerAttacks := true ;
19164: LD_ADDR_EXP 5
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
19172: LD_INT 10500
19174: PUSH
19175: LD_INT 2100
19177: PUSH
19178: LD_OWVAR 67
19182: MUL
19183: MINUS
19184: PPUSH
19185: CALL_OW 67
// AmericanAttack ( 0 ) ;
19189: LD_INT 0
19191: PPUSH
19192: CALL 21745 0 1
// end ;
19196: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
19197: LD_INT 32
19199: PPUSH
19200: CALL_OW 302
19204: IFFALSE 19225
19206: PUSH
19207: LD_INT 32
19209: PPUSH
19210: CALL_OW 255
19214: PUSH
19215: LD_EXP 3
19219: PUSH
19220: LD_INT 2
19222: ARRAY
19223: EQUAL
19224: AND
19225: IFFALSE 19278
19227: GO 19229
19229: DISABLE
// begin activeArabAttacks := true ;
19230: LD_ADDR_EXP 4
19234: PUSH
19235: LD_INT 1
19237: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
19238: LD_INT 73500
19240: PUSH
19241: LD_INT 2100
19243: PUSH
19244: LD_OWVAR 67
19248: MUL
19249: MINUS
19250: PPUSH
19251: CALL_OW 67
// ArabAttack ( 0 ) ;
19255: LD_INT 0
19257: PPUSH
19258: CALL 19323 0 1
// wait ( 30 30$00 ) ;
19262: LD_INT 63000
19264: PPUSH
19265: CALL_OW 67
// ArabAttack ( Difficulty ) ;
19269: LD_OWVAR 67
19273: PPUSH
19274: CALL 19323 0 1
// end ;
19278: END
// every 35 35$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 302
19286: IFFALSE 19307
19288: PUSH
19289: LD_INT 1
19291: PPUSH
19292: CALL_OW 255
19296: PUSH
19297: LD_EXP 3
19301: PUSH
19302: LD_INT 1
19304: ARRAY
19305: EQUAL
19306: AND
19307: IFFALSE 19322
19309: GO 19311
19311: DISABLE
// begin AmericanAttack ( Difficulty ) ;
19312: LD_OWVAR 67
19316: PPUSH
19317: CALL 21745 0 1
// enable ;
19321: ENABLE
// end ;
19322: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
19329: PPUSH
// uc_side := botSides [ 2 ] ;
19330: LD_ADDR_OWVAR 20
19334: PUSH
19335: LD_EXP 3
19339: PUSH
19340: LD_INT 2
19342: ARRAY
19343: ST_TO_ADDR
// uc_nation := nation_arabian ;
19344: LD_ADDR_OWVAR 21
19348: PUSH
19349: LD_INT 2
19351: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19352: LD_ADDR_VAR 0 4
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: LD_INT 4
19362: PUSH
19363: LD_INT 5
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: LD_OWVAR 67
19375: ARRAY
19376: ST_TO_ADDR
// arAttackersInf := [ ] ;
19377: LD_ADDR_EXP 56
19381: PUSH
19382: EMPTY
19383: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19384: LD_ADDR_EXP 57
19388: PUSH
19389: EMPTY
19390: ST_TO_ADDR
// InitHC_All ( ) ;
19391: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: DOUBLE
19401: LD_INT 1
19403: DEC
19404: ST_TO_ADDR
19405: LD_INT 3
19407: PUSH
19408: LD_INT 4
19410: PUSH
19411: LD_INT 5
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_OWVAR 67
19423: ARRAY
19424: PUSH
19425: LD_VAR 0 1
19429: PLUS
19430: PUSH
19431: FOR_TO
19432: IFFALSE 19556
// begin uc_side := botSides [ 2 ] ;
19434: LD_ADDR_OWVAR 20
19438: PUSH
19439: LD_EXP 3
19443: PUSH
19444: LD_INT 2
19446: ARRAY
19447: ST_TO_ADDR
// uc_nation := nation_arabian ;
19448: LD_ADDR_OWVAR 21
19452: PUSH
19453: LD_INT 2
19455: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
19456: LD_INT 0
19458: PPUSH
19459: LD_VAR 0 4
19463: PPUSH
19464: CALL_OW 381
// un := CreateHuman ;
19468: LD_ADDR_VAR 0 5
19472: PUSH
19473: CALL_OW 44
19477: ST_TO_ADDR
// if i mod 2 = 0 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 2
19485: MOD
19486: PUSH
19487: LD_INT 0
19489: EQUAL
19490: IFFALSE 19504
// SetClass ( un , class_mortar ) ;
19492: LD_VAR 0 5
19496: PPUSH
19497: LD_INT 8
19499: PPUSH
19500: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
19504: LD_VAR 0 5
19508: PPUSH
19509: LD_INT 25
19511: PPUSH
19512: LD_INT 0
19514: PPUSH
19515: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
19519: LD_ADDR_EXP 56
19523: PUSH
19524: LD_EXP 56
19528: PPUSH
19529: LD_VAR 0 5
19533: PPUSH
19534: CALL 68372 0 2
19538: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
19539: LD_VAR 0 5
19543: PPUSH
19544: LD_INT 230
19546: PPUSH
19547: LD_INT 143
19549: PPUSH
19550: CALL_OW 114
// end ;
19554: GO 19431
19556: POP
19557: POP
// for i := 1 to 3 + v do
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: DOUBLE
19564: LD_INT 1
19566: DEC
19567: ST_TO_ADDR
19568: LD_INT 3
19570: PUSH
19571: LD_VAR 0 1
19575: PLUS
19576: PUSH
19577: FOR_TO
19578: IFFALSE 19795
// begin uc_side := botSides [ 2 ] ;
19580: LD_ADDR_OWVAR 20
19584: PUSH
19585: LD_EXP 3
19589: PUSH
19590: LD_INT 2
19592: ARRAY
19593: ST_TO_ADDR
// uc_nation := nation_arabian ;
19594: LD_ADDR_OWVAR 21
19598: PUSH
19599: LD_INT 2
19601: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
19602: LD_INT 0
19604: PPUSH
19605: LD_VAR 0 4
19609: PPUSH
19610: CALL_OW 383
// un := CreateHuman ;
19614: LD_ADDR_VAR 0 5
19618: PUSH
19619: CALL_OW 44
19623: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19624: LD_VAR 0 5
19628: PPUSH
19629: LD_INT 999
19631: PPUSH
19632: CALL_OW 109
// uc_side := botSides [ 2 ] ;
19636: LD_ADDR_OWVAR 20
19640: PUSH
19641: LD_EXP 3
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: ST_TO_ADDR
// uc_nation := nation_arabian ;
19650: LD_ADDR_OWVAR 21
19654: PUSH
19655: LD_INT 2
19657: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
19658: LD_INT 14
19660: PPUSH
19661: LD_INT 1
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: LD_INT 27
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 2
19684: MOD
19685: PUSH
19686: LD_INT 1
19688: PLUS
19689: ARRAY
19690: PPUSH
19691: LD_INT 80
19693: PPUSH
19694: CALL 35192 0 5
// veh := CreateVehicle ;
19698: LD_ADDR_VAR 0 6
19702: PUSH
19703: CALL_OW 45
19707: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
19708: LD_VAR 0 6
19712: PPUSH
19713: LD_INT 5
19715: PPUSH
19716: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
19720: LD_INT 35
19722: PPUSH
19723: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
19727: LD_VAR 0 6
19731: PPUSH
19732: LD_INT 26
19734: PPUSH
19735: LD_INT 0
19737: PPUSH
19738: CALL_OW 49
19742: IFFALSE 19720
// PlaceHumanInUnit ( un , veh ) ;
19744: LD_VAR 0 5
19748: PPUSH
19749: LD_VAR 0 6
19753: PPUSH
19754: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
19758: LD_VAR 0 5
19762: PPUSH
19763: LD_INT 236
19765: PPUSH
19766: LD_INT 127
19768: PPUSH
19769: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
19773: LD_ADDR_EXP 57
19777: PUSH
19778: LD_EXP 57
19782: PPUSH
19783: LD_VAR 0 6
19787: PPUSH
19788: CALL 68372 0 2
19792: ST_TO_ADDR
// end ;
19793: GO 19577
19795: POP
19796: POP
// wait ( 0 0$2 ) ;
19797: LD_INT 70
19799: PPUSH
19800: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
19804: LD_ADDR_VAR 0 3
19808: PUSH
19809: DOUBLE
19810: LD_INT 1
19812: DEC
19813: ST_TO_ADDR
19814: LD_INT 1
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: LD_OWVAR 67
19832: ARRAY
19833: PUSH
19834: FOR_TO
19835: IFFALSE 20009
// begin uc_side := botSides [ 2 ] ;
19837: LD_ADDR_OWVAR 20
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: LD_INT 2
19849: ARRAY
19850: ST_TO_ADDR
// uc_nation := nation_arabian ;
19851: LD_ADDR_OWVAR 21
19855: PUSH
19856: LD_INT 2
19858: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
19859: LD_INT 0
19861: PPUSH
19862: LD_VAR 0 4
19866: PPUSH
19867: CALL_OW 383
// un := CreateHuman ;
19871: LD_ADDR_VAR 0 5
19875: PUSH
19876: CALL_OW 44
19880: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19881: LD_VAR 0 5
19885: PPUSH
19886: LD_INT 999
19888: PPUSH
19889: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
19893: LD_INT 14
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_INT 26
19904: PPUSH
19905: LD_INT 80
19907: PPUSH
19908: CALL 35192 0 5
// veh := CreateVehicle ;
19912: LD_ADDR_VAR 0 6
19916: PUSH
19917: CALL_OW 45
19921: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
19922: LD_VAR 0 6
19926: PPUSH
19927: LD_INT 5
19929: PPUSH
19930: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
19934: LD_INT 35
19936: PPUSH
19937: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
19941: LD_VAR 0 6
19945: PPUSH
19946: LD_INT 26
19948: PPUSH
19949: LD_INT 0
19951: PPUSH
19952: CALL_OW 49
19956: IFFALSE 19934
// PlaceHumanInUnit ( un , veh ) ;
19958: LD_VAR 0 5
19962: PPUSH
19963: LD_VAR 0 6
19967: PPUSH
19968: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
19972: LD_VAR 0 5
19976: PPUSH
19977: LD_INT 236
19979: PPUSH
19980: LD_INT 127
19982: PPUSH
19983: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
19987: LD_ADDR_EXP 57
19991: PUSH
19992: LD_EXP 57
19996: PPUSH
19997: LD_VAR 0 6
20001: PPUSH
20002: CALL 68372 0 2
20006: ST_TO_ADDR
// end ;
20007: GO 19834
20009: POP
20010: POP
// wait ( 0 0$2 ) ;
20011: LD_INT 70
20013: PPUSH
20014: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
20018: LD_ADDR_VAR 0 3
20022: PUSH
20023: DOUBLE
20024: LD_INT 1
20026: DEC
20027: ST_TO_ADDR
20028: LD_INT 1
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_OWVAR 67
20046: ARRAY
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20276
// begin uc_side := botSides [ 2 ] ;
20051: LD_ADDR_OWVAR 20
20055: PUSH
20056: LD_EXP 3
20060: PUSH
20061: LD_INT 2
20063: ARRAY
20064: ST_TO_ADDR
// uc_nation := nation_arabian ;
20065: LD_ADDR_OWVAR 21
20069: PUSH
20070: LD_INT 2
20072: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
20073: LD_INT 0
20075: PPUSH
20076: LD_VAR 0 4
20080: PPUSH
20081: CALL_OW 383
// un := CreateHuman ;
20085: LD_ADDR_VAR 0 5
20089: PUSH
20090: CALL_OW 44
20094: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20095: LD_VAR 0 5
20099: PPUSH
20100: LD_INT 999
20102: PPUSH
20103: CALL_OW 109
// uc_side := botSides [ 2 ] ;
20107: LD_ADDR_OWVAR 20
20111: PUSH
20112: LD_EXP 3
20116: PUSH
20117: LD_INT 2
20119: ARRAY
20120: ST_TO_ADDR
// uc_nation := nation_arabian ;
20121: LD_ADDR_OWVAR 21
20125: PUSH
20126: LD_INT 2
20128: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
20129: LD_INT 14
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: LD_INT 28
20140: PPUSH
20141: LD_INT 80
20143: PPUSH
20144: CALL 35192 0 5
// veh := CreateVehicle ;
20148: LD_ADDR_VAR 0 6
20152: PUSH
20153: CALL_OW 45
20157: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
20158: LD_VAR 0 6
20162: PPUSH
20163: LD_INT 4
20165: PPUSH
20166: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
20170: LD_INT 35
20172: PPUSH
20173: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
20177: LD_VAR 0 6
20181: PPUSH
20182: LD_INT 26
20184: PPUSH
20185: LD_INT 0
20187: PPUSH
20188: CALL_OW 49
20192: IFFALSE 20170
// PlaceHumanInUnit ( un , veh ) ;
20194: LD_VAR 0 5
20198: PPUSH
20199: LD_VAR 0 6
20203: PPUSH
20204: CALL_OW 52
// if i mod 2 = 0 then
20208: LD_VAR 0 3
20212: PUSH
20213: LD_INT 2
20215: MOD
20216: PUSH
20217: LD_INT 0
20219: EQUAL
20220: IFFALSE 20239
// ComMoveXY ( un , 136 , 61 ) else
20222: LD_VAR 0 5
20226: PPUSH
20227: LD_INT 136
20229: PPUSH
20230: LD_INT 61
20232: PPUSH
20233: CALL_OW 111
20237: GO 20254
// ComMoveXY ( un , 137 , 41 ) ;
20239: LD_VAR 0 5
20243: PPUSH
20244: LD_INT 137
20246: PPUSH
20247: LD_INT 41
20249: PPUSH
20250: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
20254: LD_ADDR_EXP 57
20258: PUSH
20259: LD_EXP 57
20263: PPUSH
20264: LD_VAR 0 6
20268: PPUSH
20269: CALL 68372 0 2
20273: ST_TO_ADDR
// end ;
20274: GO 20048
20276: POP
20277: POP
// end ;
20278: LD_VAR 0 2
20282: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
20283: LD_EXP 56
20287: IFFALSE 20896
20289: GO 20291
20291: DISABLE
20292: LD_INT 0
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
// begin enable ;
20298: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
20299: LD_ADDR_VAR 0 2
20303: PUSH
20304: LD_EXP 56
20308: PPUSH
20309: LD_INT 50
20311: PUSH
20312: EMPTY
20313: LIST
20314: PPUSH
20315: CALL_OW 72
20319: ST_TO_ADDR
// arAttackersInf := [ ] ;
20320: LD_ADDR_EXP 56
20324: PUSH
20325: EMPTY
20326: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
20327: LD_VAR 0 2
20331: PPUSH
20332: LD_INT 173
20334: PPUSH
20335: LD_INT 139
20337: PPUSH
20338: CALL_OW 111
// wait ( 0 0$10 ) ;
20342: LD_INT 350
20344: PPUSH
20345: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
20349: LD_ADDR_VAR 0 1
20353: PUSH
20354: LD_VAR 0 2
20358: PPUSH
20359: LD_INT 25
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: PUSH
20374: FOR_IN
20375: IFFALSE 20506
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_INT 81
20384: PUSH
20385: LD_EXP 3
20389: PUSH
20390: LD_INT 2
20392: ARRAY
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: LD_INT 120
20403: PUSH
20404: LD_INT 11
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 21
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 21
20430: PUSH
20431: LD_INT 3
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: PPUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 74
20462: ST_TO_ADDR
// if not nearest then
20463: LD_VAR 0 3
20467: NOT
20468: IFFALSE 20472
// break ;
20470: GO 20506
// SetTag ( nearest , tMined ) ;
20472: LD_VAR 0 3
20476: PPUSH
20477: LD_INT 11
20479: PPUSH
20480: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_INT 0
20491: PPUSH
20492: LD_INT 0
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: CALL_OW 192
// end ;
20504: GO 20374
20506: POP
20507: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20508: LD_ADDR_VAR 0 2
20512: PUSH
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 50
20520: PUSH
20521: EMPTY
20522: LIST
20523: PPUSH
20524: CALL_OW 72
20528: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
20529: LD_VAR 0 2
20533: PPUSH
20534: LD_INT 155
20536: PPUSH
20537: LD_INT 119
20539: PPUSH
20540: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
20544: LD_INT 70
20546: PPUSH
20547: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_VAR 0 2
20560: PPUSH
20561: LD_INT 50
20563: PUSH
20564: EMPTY
20565: LIST
20566: PPUSH
20567: CALL_OW 72
20571: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
20572: LD_ADDR_VAR 0 4
20576: PUSH
20577: LD_INT 81
20579: PUSH
20580: LD_EXP 3
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// for i in tmp do
20598: LD_ADDR_VAR 0 1
20602: PUSH
20603: LD_VAR 0 2
20607: PUSH
20608: FOR_IN
20609: IFFALSE 20887
// if GetClass ( i ) <> 1 then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 257
20620: PUSH
20621: LD_INT 1
20623: NONEQUAL
20624: IFFALSE 20664
// begin if not HasTask ( i ) then
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL_OW 314
20635: NOT
20636: IFFALSE 20662
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end else
20638: LD_VAR 0 1
20642: PPUSH
20643: LD_VAR 0 4
20647: PPUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 74
20657: PPUSH
20658: CALL_OW 115
20662: GO 20885
// if not HasTask ( i ) then
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 314
20673: NOT
20674: IFFALSE 20885
// begin if GetTag ( i ) <> tMine then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 110
20685: PUSH
20686: LD_INT 6
20688: NONEQUAL
20689: IFFALSE 20861
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_dist , i , 12 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_VAR 0 4
20700: PPUSH
20701: LD_INT 3
20703: PUSH
20704: LD_INT 120
20706: PUSH
20707: LD_INT 11
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 91
20720: PUSH
20721: LD_VAR 0 1
20725: PUSH
20726: LD_INT 12
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 21
20749: PUSH
20750: LD_INT 3
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: PPUSH
20767: CALL_OW 72
20771: PPUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 74
20781: ST_TO_ADDR
// if not nearest then
20782: LD_VAR 0 3
20786: NOT
20787: IFFALSE 20815
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20789: LD_VAR 0 1
20793: PPUSH
20794: LD_VAR 0 4
20798: PPUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 74
20808: PPUSH
20809: CALL_OW 115
20813: GO 20859
// begin SetTag ( nearest , tMined ) ;
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_INT 11
20822: PPUSH
20823: CALL_OW 109
// SetTag ( i , tMine ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_INT 6
20834: PPUSH
20835: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: LD_INT 0
20846: PPUSH
20847: LD_INT 0
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: CALL_OW 132
// end ; end else
20859: GO 20885
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 74
20880: PPUSH
20881: CALL_OW 115
20885: GO 20608
20887: POP
20888: POP
// until not tmp ;
20889: LD_VAR 0 2
20893: NOT
20894: IFFALSE 20544
// end ;
20896: PPOPN 4
20898: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
20899: LD_EXP 57
20903: IFFALSE 21015
20905: GO 20907
20907: DISABLE
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
// begin enable ;
20912: ENABLE
// tmp := arAttackersVeh ;
20913: LD_ADDR_VAR 0 2
20917: PUSH
20918: LD_EXP 57
20922: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20923: LD_ADDR_EXP 57
20927: PUSH
20928: EMPTY
20929: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20930: LD_INT 70
20932: PPUSH
20933: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_VAR 0 2
20946: PPUSH
20947: LD_INT 50
20949: PUSH
20950: EMPTY
20951: LIST
20952: PPUSH
20953: CALL_OW 72
20957: ST_TO_ADDR
// for i in tmp do
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_VAR 0 2
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21006
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 207
20978: PUSH
20979: LD_INT 125
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 185
20988: PUSH
20989: LD_INT 114
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL 71138 0 2
21004: GO 20968
21006: POP
21007: POP
21008: LD_VAR 0 2
21012: NOT
21013: IFFALSE 20930
// end ;
21015: PPOPN 2
21017: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
21018: LD_EXP 49
21022: IFFALSE 21030
21024: PUSH
21025: LD_EXP 4
21029: AND
21030: IFFALSE 21622
21032: GO 21034
21034: DISABLE
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
21039: PPUSH
// begin enable ;
21040: ENABLE
// if not arVehiclesAtttackers then
21041: LD_EXP 49
21045: NOT
21046: IFFALSE 21050
// exit ;
21048: GO 21622
// for i in arVehiclesAtttackers do
21050: LD_ADDR_VAR 0 1
21054: PUSH
21055: LD_EXP 49
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21620
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 302
21072: NOT
21073: IFTRUE 21096
21075: PUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 255
21085: PUSH
21086: LD_EXP 3
21090: PUSH
21091: LD_INT 2
21093: ARRAY
21094: NONEQUAL
21095: OR
21096: IFFALSE 21116
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
21098: LD_ADDR_EXP 49
21102: PUSH
21103: LD_EXP 49
21107: PUSH
21108: LD_VAR 0 1
21112: DIFF
21113: ST_TO_ADDR
// continue ;
21114: GO 21060
// end ; if GetTag ( i ) = 300 then
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 110
21125: PUSH
21126: LD_INT 300
21128: EQUAL
21129: IFFALSE 21244
// begin if GetFuel ( i ) < 50 then
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 261
21140: PUSH
21141: LD_INT 50
21143: LESS
21144: IFFALSE 21203
// begin ComMoveXY ( i , 198 , 28 ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_INT 198
21153: PPUSH
21154: LD_INT 28
21156: PPUSH
21157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21161: LD_INT 35
21163: PPUSH
21164: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
21168: LD_VAR 0 1
21172: PPUSH
21173: LD_INT 198
21175: PPUSH
21176: LD_INT 28
21178: PPUSH
21179: CALL_OW 297
21183: PUSH
21184: LD_INT 4
21186: LESS
21187: IFFALSE 21161
// SetFuel ( i , 100 ) ;
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_INT 100
21196: PPUSH
21197: CALL_OW 240
// end else
21201: GO 21244
// if not IsInArea ( i , arParkingArea ) then
21203: LD_VAR 0 1
21207: PPUSH
21208: LD_INT 28
21210: PPUSH
21211: CALL_OW 308
21215: NOT
21216: IFFALSE 21232
// ComMoveToArea ( i , arParkingArea ) else
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 28
21225: PPUSH
21226: CALL_OW 113
21230: GO 21244
// SetTag ( i , 301 ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_INT 301
21239: PPUSH
21240: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 110
21253: PUSH
21254: LD_INT 301
21256: EQUAL
21257: IFFALSE 21399
// begin if GetLives ( i ) < 1000 then
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 256
21268: PUSH
21269: LD_INT 1000
21271: LESS
21272: IFFALSE 21376
// begin if not IsDrivenBy ( i ) then
21274: LD_VAR 0 1
21278: PPUSH
21279: CALL_OW 311
21283: NOT
21284: IFFALSE 21288
// continue ;
21286: GO 21060
// mech := IsDrivenBy ( i ) ;
21288: LD_ADDR_VAR 0 2
21292: PUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 311
21302: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21312: LD_VAR 0 2
21316: PPUSH
21317: LD_VAR 0 1
21321: PPUSH
21322: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
21326: LD_INT 35
21328: PPUSH
21329: CALL_OW 67
// until GetLives ( i ) = 1000 ;
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 256
21342: PUSH
21343: LD_INT 1000
21345: EQUAL
21346: IFFALSE 21326
// SetLives ( mech , 1000 ) ;
21348: LD_VAR 0 2
21352: PPUSH
21353: LD_INT 1000
21355: PPUSH
21356: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 120
// end else
21374: GO 21399
// if IsDrivenBy ( i ) then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 311
21385: IFFALSE 21399
// SetTag ( i , 0 ) ;
21387: LD_VAR 0 1
21391: PPUSH
21392: LD_INT 0
21394: PPUSH
21395: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 110
21408: PUSH
21409: LD_INT 300
21411: LESS
21412: IFFALSE 21618
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
21414: LD_ADDR_VAR 0 3
21418: PUSH
21419: LD_INT 5
21421: PPUSH
21422: LD_INT 81
21424: PUSH
21425: LD_EXP 3
21429: PUSH
21430: LD_INT 2
21432: ARRAY
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 70
21442: ST_TO_ADDR
// if GetLives ( i ) < 650 then
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 256
21452: PUSH
21453: LD_INT 650
21455: LESS
21456: IFFALSE 21481
// begin ComStop ( i ) ;
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 141
// SetTag ( i , 300 ) ;
21467: LD_VAR 0 1
21471: PPUSH
21472: LD_INT 300
21474: PPUSH
21475: CALL_OW 109
// continue ;
21479: GO 21060
// end ; if enemy then
21481: LD_VAR 0 3
21485: IFFALSE 21525
// begin if not HasTask ( i ) then
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 314
21496: NOT
21497: IFFALSE 21523
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21499: LD_VAR 0 1
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 74
21518: PPUSH
21519: CALL_OW 115
// end else
21523: GO 21618
// if arVehiclesAtttackers then
21525: LD_EXP 49
21529: IFFALSE 21618
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_INT 81
21538: PUSH
21539: LD_EXP 3
21543: PUSH
21544: LD_INT 2
21546: ARRAY
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PPUSH
21552: CALL_OW 69
21556: ST_TO_ADDR
// if enemy then
21557: LD_VAR 0 3
21561: IFFALSE 21618
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
21563: LD_VAR 0 1
21567: PPUSH
21568: LD_INT 215
21570: PUSH
21571: LD_INT 88
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 197
21580: PUSH
21581: LD_INT 90
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 178
21590: PUSH
21591: LD_INT 90
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 169
21600: PUSH
21601: LD_INT 104
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PPUSH
21614: CALL 71138 0 2
// end ; end ; end ;
21618: GO 21060
21620: POP
21621: POP
// end ;
21622: PPOPN 3
21624: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21625: LD_INT 22
21627: PUSH
21628: LD_EXP 3
21632: PUSH
21633: LD_INT 2
21635: ARRAY
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 32
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: IFFALSE 21742
21661: GO 21663
21663: DISABLE
21664: LD_INT 0
21666: PPUSH
// begin enable ;
21667: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
21668: LD_ADDR_VAR 0 1
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_EXP 3
21680: PUSH
21681: LD_INT 2
21683: ARRAY
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 32
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PPUSH
21703: CALL_OW 69
21707: PUSH
21708: FOR_IN
21709: IFFALSE 21740
// if GetFuel ( i ) < 3 then
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 261
21720: PUSH
21721: LD_INT 3
21723: LESS
21724: IFFALSE 21738
// SetFuel ( i , 3 ) ;
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_INT 3
21733: PPUSH
21734: CALL_OW 240
21738: GO 21708
21740: POP
21741: POP
// end ;
21742: PPOPN 1
21744: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
21745: LD_INT 0
21747: PPUSH
21748: PPUSH
21749: PPUSH
21750: PPUSH
21751: PPUSH
// uc_side := botSides [ 1 ] ;
21752: LD_ADDR_OWVAR 20
21756: PUSH
21757: LD_EXP 3
21761: PUSH
21762: LD_INT 1
21764: ARRAY
21765: ST_TO_ADDR
// uc_nation := nation_american ;
21766: LD_ADDR_OWVAR 21
21770: PUSH
21771: LD_INT 1
21773: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_INT 3
21781: PUSH
21782: LD_INT 4
21784: PUSH
21785: LD_INT 5
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: PUSH
21793: LD_OWVAR 67
21797: ARRAY
21798: ST_TO_ADDR
// amAttackersInf := [ ] ;
21799: LD_ADDR_EXP 58
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// amAttackersVeh := [ ] ;
21806: LD_ADDR_EXP 59
21810: PUSH
21811: EMPTY
21812: ST_TO_ADDR
// InitHC_All ( ) ;
21813: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: DOUBLE
21823: LD_INT 1
21825: DEC
21826: ST_TO_ADDR
21827: LD_INT 2
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: LD_INT 4
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: LD_OWVAR 67
21845: ARRAY
21846: PUSH
21847: LD_VAR 0 1
21851: PLUS
21852: PUSH
21853: FOR_TO
21854: IFFALSE 21961
// begin uc_side := botSides [ 1 ] ;
21856: LD_ADDR_OWVAR 20
21860: PUSH
21861: LD_EXP 3
21865: PUSH
21866: LD_INT 1
21868: ARRAY
21869: ST_TO_ADDR
// uc_nation := nation_american ;
21870: LD_ADDR_OWVAR 21
21874: PUSH
21875: LD_INT 1
21877: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21878: LD_INT 0
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: CALL_OW 381
// un := CreateHuman ;
21890: LD_ADDR_VAR 0 5
21894: PUSH
21895: CALL_OW 44
21899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21900: LD_INT 35
21902: PPUSH
21903: CALL_OW 67
// until PlaceUnitArea ( un , amAttackSpawnArea , false ) ;
21907: LD_VAR 0 5
21911: PPUSH
21912: LD_INT 30
21914: PPUSH
21915: LD_INT 0
21917: PPUSH
21918: CALL_OW 49
21922: IFFALSE 21900
// amAttackersInf := Join ( amAttackersInf , un ) ;
21924: LD_ADDR_EXP 58
21928: PUSH
21929: LD_EXP 58
21933: PPUSH
21934: LD_VAR 0 5
21938: PPUSH
21939: CALL 68372 0 2
21943: ST_TO_ADDR
// ComAgressiveMove ( un , 102 , 23 ) ;
21944: LD_VAR 0 5
21948: PPUSH
21949: LD_INT 102
21951: PPUSH
21952: LD_INT 23
21954: PPUSH
21955: CALL_OW 114
// end ;
21959: GO 21853
21961: POP
21962: POP
// for i := 1 to 2 + v do
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: DOUBLE
21969: LD_INT 1
21971: DEC
21972: ST_TO_ADDR
21973: LD_INT 2
21975: PUSH
21976: LD_VAR 0 1
21980: PLUS
21981: PUSH
21982: FOR_TO
21983: IFFALSE 22204
// begin uc_side := botSides [ 1 ] ;
21985: LD_ADDR_OWVAR 20
21989: PUSH
21990: LD_EXP 3
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: ST_TO_ADDR
// uc_nation := nation_american ;
21999: LD_ADDR_OWVAR 21
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
22007: LD_INT 0
22009: PPUSH
22010: LD_VAR 0 4
22014: PPUSH
22015: CALL_OW 383
// un := CreateHuman ;
22019: LD_ADDR_VAR 0 5
22023: PUSH
22024: CALL_OW 44
22028: ST_TO_ADDR
// SetTag ( un , 999 ) ;
22029: LD_VAR 0 5
22033: PPUSH
22034: LD_INT 999
22036: PPUSH
22037: CALL_OW 109
// uc_side := botSides [ 1 ] ;
22041: LD_ADDR_OWVAR 20
22045: PUSH
22046: LD_EXP 3
22050: PUSH
22051: LD_INT 1
22053: ARRAY
22054: ST_TO_ADDR
// uc_nation := nation_american ;
22055: LD_ADDR_OWVAR 21
22059: PUSH
22060: LD_INT 1
22062: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
22063: LD_INT 3
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: LD_INT 3
22074: PUSH
22075: LD_INT 5
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_VAR 0 3
22090: PUSH
22091: LD_INT 3
22093: MOD
22094: PUSH
22095: LD_INT 1
22097: PLUS
22098: ARRAY
22099: PPUSH
22100: LD_INT 80
22102: PPUSH
22103: CALL 35192 0 5
// veh := CreateVehicle ;
22107: LD_ADDR_VAR 0 6
22111: PUSH
22112: CALL_OW 45
22116: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
22117: LD_VAR 0 6
22121: PPUSH
22122: LD_INT 2
22124: PPUSH
22125: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 67
// until PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
22136: LD_VAR 0 6
22140: PPUSH
22141: LD_INT 30
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 49
22151: IFFALSE 22129
// PlaceHumanInUnit ( un , veh ) ;
22153: LD_VAR 0 5
22157: PPUSH
22158: LD_VAR 0 6
22162: PPUSH
22163: CALL_OW 52
// ComMoveXY ( un , 102 , 19 ) ;
22167: LD_VAR 0 5
22171: PPUSH
22172: LD_INT 102
22174: PPUSH
22175: LD_INT 19
22177: PPUSH
22178: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
22182: LD_ADDR_EXP 59
22186: PUSH
22187: LD_EXP 59
22191: PPUSH
22192: LD_VAR 0 6
22196: PPUSH
22197: CALL 68372 0 2
22201: ST_TO_ADDR
// end ;
22202: GO 21982
22204: POP
22205: POP
// end ;
22206: LD_VAR 0 2
22210: RET
// every 0 0$2 trigger amAttackersVeh or amAttackersInf do var i , tmp ;
22211: LD_EXP 59
22215: IFTRUE 22223
22217: PUSH
22218: LD_EXP 58
22222: OR
22223: IFFALSE 22359
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
// begin enable ;
22232: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: LD_EXP 59
22242: PUSH
22243: LD_EXP 58
22247: UNION
22248: ST_TO_ADDR
// amAttackersVeh := [ ] ;
22249: LD_ADDR_EXP 59
22253: PUSH
22254: EMPTY
22255: ST_TO_ADDR
// amAttackersInf := [ ] ;
22256: LD_ADDR_EXP 58
22260: PUSH
22261: EMPTY
22262: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
22263: LD_INT 70
22265: PPUSH
22266: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_VAR 0 2
22279: PPUSH
22280: LD_INT 50
22282: PUSH
22283: EMPTY
22284: LIST
22285: PPUSH
22286: CALL_OW 72
22290: ST_TO_ADDR
// for i in tmp do
22291: LD_ADDR_VAR 0 1
22295: PUSH
22296: LD_VAR 0 2
22300: PUSH
22301: FOR_IN
22302: IFFALSE 22350
// AgressiveMove ( i , [ [ 111 , 48 ] , [ 120 , 73 ] , [ 123 , 87 ] ] ) until not tmp ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_INT 111
22311: PUSH
22312: LD_INT 48
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 120
22321: PUSH
22322: LD_INT 73
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 123
22331: PUSH
22332: LD_INT 87
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL 71138 0 2
22348: GO 22301
22350: POP
22351: POP
22352: LD_VAR 0 2
22356: NOT
22357: IFFALSE 22263
// end ;
22359: PPOPN 2
22361: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
22362: LD_EXP 39
22366: IFFALSE 22374
22368: PUSH
22369: LD_EXP 5
22373: AND
22374: IFFALSE 22955
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
22382: PPUSH
22383: PPUSH
// begin enable ;
22384: ENABLE
// if not amVehiclesAtttackers then
22385: LD_EXP 39
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 22955
// for i in amVehiclesAtttackers do
22394: LD_ADDR_VAR 0 1
22398: PUSH
22399: LD_EXP 39
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22953
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
22407: LD_VAR 0 1
22411: PPUSH
22412: CALL_OW 302
22416: NOT
22417: IFTRUE 22440
22419: PUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL_OW 255
22429: PUSH
22430: LD_EXP 3
22434: PUSH
22435: LD_INT 1
22437: ARRAY
22438: NONEQUAL
22439: OR
22440: IFFALSE 22460
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
22442: LD_ADDR_EXP 39
22446: PUSH
22447: LD_EXP 39
22451: PUSH
22452: LD_VAR 0 1
22456: DIFF
22457: ST_TO_ADDR
// continue ;
22458: GO 22404
// end ; if GetTag ( i ) = 300 then
22460: LD_VAR 0 1
22464: PPUSH
22465: CALL_OW 110
22469: PUSH
22470: LD_INT 300
22472: EQUAL
22473: IFFALSE 22588
// begin if GetFuel ( i ) < 50 then
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 261
22484: PUSH
22485: LD_INT 50
22487: LESS
22488: IFFALSE 22547
// begin ComMoveXY ( i , 24 , 36 ) ;
22490: LD_VAR 0 1
22494: PPUSH
22495: LD_INT 24
22497: PPUSH
22498: LD_INT 36
22500: PPUSH
22501: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22505: LD_INT 35
22507: PPUSH
22508: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
22512: LD_VAR 0 1
22516: PPUSH
22517: LD_INT 24
22519: PPUSH
22520: LD_INT 36
22522: PPUSH
22523: CALL_OW 297
22527: PUSH
22528: LD_INT 4
22530: LESS
22531: IFFALSE 22505
// SetFuel ( i , 100 ) ;
22533: LD_VAR 0 1
22537: PPUSH
22538: LD_INT 100
22540: PPUSH
22541: CALL_OW 240
// end else
22545: GO 22588
// if not IsInArea ( i , amParkingArea ) then
22547: LD_VAR 0 1
22551: PPUSH
22552: LD_INT 27
22554: PPUSH
22555: CALL_OW 308
22559: NOT
22560: IFFALSE 22576
// ComMoveToArea ( i , amParkingArea ) else
22562: LD_VAR 0 1
22566: PPUSH
22567: LD_INT 27
22569: PPUSH
22570: CALL_OW 113
22574: GO 22588
// SetTag ( i , 301 ) ;
22576: LD_VAR 0 1
22580: PPUSH
22581: LD_INT 301
22583: PPUSH
22584: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 110
22597: PUSH
22598: LD_INT 301
22600: EQUAL
22601: IFFALSE 22743
// begin if GetLives ( i ) < 1000 then
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 256
22612: PUSH
22613: LD_INT 1000
22615: LESS
22616: IFFALSE 22720
// begin if not IsDrivenBy ( i ) then
22618: LD_VAR 0 1
22622: PPUSH
22623: CALL_OW 311
22627: NOT
22628: IFFALSE 22632
// continue ;
22630: GO 22404
// mech := IsDrivenBy ( i ) ;
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_VAR 0 1
22641: PPUSH
22642: CALL_OW 311
22646: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22647: LD_VAR 0 2
22651: PPUSH
22652: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22656: LD_VAR 0 2
22660: PPUSH
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// until GetLives ( i ) = 1000 ;
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 256
22686: PUSH
22687: LD_INT 1000
22689: EQUAL
22690: IFFALSE 22670
// SetLives ( mech , 1000 ) ;
22692: LD_VAR 0 2
22696: PPUSH
22697: LD_INT 1000
22699: PPUSH
22700: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 1
22713: PPUSH
22714: CALL_OW 120
// end else
22718: GO 22743
// if IsDrivenBy ( i ) then
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL_OW 311
22729: IFFALSE 22743
// SetTag ( i , 0 ) ;
22731: LD_VAR 0 1
22735: PPUSH
22736: LD_INT 0
22738: PPUSH
22739: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL_OW 110
22752: PUSH
22753: LD_INT 300
22755: LESS
22756: IFFALSE 22951
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_INT 3
22765: PPUSH
22766: LD_INT 81
22768: PUSH
22769: LD_EXP 3
22773: PUSH
22774: LD_INT 1
22776: ARRAY
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PPUSH
22782: CALL_OW 70
22786: ST_TO_ADDR
// if GetLives ( i ) < 650 then
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 256
22796: PUSH
22797: LD_INT 650
22799: LESS
22800: IFFALSE 22825
// begin ComStop ( i ) ;
22802: LD_VAR 0 1
22806: PPUSH
22807: CALL_OW 141
// SetTag ( i , 300 ) ;
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_INT 300
22818: PPUSH
22819: CALL_OW 109
// continue ;
22823: GO 22404
// end ; if enemy then
22825: LD_VAR 0 3
22829: IFFALSE 22869
// begin if not HasTask ( i ) then
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 314
22840: NOT
22841: IFFALSE 22867
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_VAR 0 3
22852: PPUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 74
22862: PPUSH
22863: CALL_OW 115
// end else
22867: GO 22951
// if amVehiclesAtttackers then
22869: LD_EXP 39
22873: IFFALSE 22951
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
22875: LD_ADDR_VAR 0 3
22879: PUSH
22880: LD_INT 81
22882: PUSH
22883: LD_EXP 3
22887: PUSH
22888: LD_INT 1
22890: ARRAY
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 69
22900: ST_TO_ADDR
// if enemy then
22901: LD_VAR 0 3
22905: IFFALSE 22951
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
22907: LD_VAR 0 1
22911: PPUSH
22912: LD_INT 49
22914: PUSH
22915: LD_INT 43
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 63
22924: PUSH
22925: LD_INT 56
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 72
22934: PUSH
22935: LD_INT 67
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL 71138 0 2
// end ; end ; end ;
22951: GO 22404
22953: POP
22954: POP
// end ;
22955: PPOPN 3
22957: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
22958: LD_INT 22
22960: PUSH
22961: LD_EXP 3
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 32
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PPUSH
22988: CALL_OW 69
22992: IFFALSE 23075
22994: GO 22996
22996: DISABLE
22997: LD_INT 0
22999: PPUSH
// begin enable ;
23000: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
23001: LD_ADDR_VAR 0 1
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_EXP 3
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 32
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: PUSH
23041: FOR_IN
23042: IFFALSE 23073
// if GetFuel ( i ) < 3 then
23044: LD_VAR 0 1
23048: PPUSH
23049: CALL_OW 261
23053: PUSH
23054: LD_INT 3
23056: LESS
23057: IFFALSE 23071
// SetFuel ( i , 3 ) ;
23059: LD_VAR 0 1
23063: PPUSH
23064: LD_INT 3
23066: PPUSH
23067: CALL_OW 240
23071: GO 23041
23073: POP
23074: POP
// end ; end_of_file
23075: PPOPN 1
23077: END
// every 0 0$20 trigger game do
23078: LD_EXP 2
23082: IFFALSE 23135
23084: GO 23086
23086: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesSouthArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
23087: LD_INT 20
23089: PUSH
23090: LD_INT 22
23092: PUSH
23093: LD_INT 33
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 5
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_EXP 21
23117: PUSH
23118: LD_INT 2
23120: ARRAY
23121: PPUSH
23122: LD_EXP 21
23126: PUSH
23127: LD_INT 1
23129: ARRAY
23130: PPUSH
23131: CALL 23136 0 3
23135: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
// if not areas then
23142: LD_VAR 0 1
23146: NOT
23147: IFFALSE 23151
// exit ;
23149: GO 23530
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
23151: LD_ADDR_VAR 0 7
23155: PUSH
23156: LD_INT 17
23158: PUSH
23159: LD_INT 18
23161: PUSH
23162: LD_INT 19
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// x := 5 ;
23170: LD_ADDR_VAR 0 6
23174: PUSH
23175: LD_INT 5
23177: ST_TO_ADDR
// repeat wait ( time ) ;
23178: LD_VAR 0 2
23182: PPUSH
23183: CALL_OW 67
// if tick < [ 21 21$00 , 19 19$00 , 17 17$00 ] [ Difficulty ] then
23187: LD_OWVAR 1
23191: PUSH
23192: LD_INT 44100
23194: PUSH
23195: LD_INT 39900
23197: PUSH
23198: LD_INT 35700
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: LD_OWVAR 67
23210: ARRAY
23211: LESS
23212: IFFALSE 23351
// begin for i := 1 to multi_sides do
23214: LD_ADDR_VAR 0 5
23218: PUSH
23219: DOUBLE
23220: LD_INT 1
23222: DEC
23223: ST_TO_ADDR
23224: LD_EXP 7
23228: PUSH
23229: FOR_TO
23230: IFFALSE 23342
// if multi_sides [ i ] then
23232: LD_EXP 7
23236: PUSH
23237: LD_VAR 0 5
23241: ARRAY
23242: IFFALSE 23340
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 30 , 28 ] [ Difficulty ] then
23244: LD_VAR 0 7
23248: PUSH
23249: LD_EXP 7
23253: PUSH
23254: LD_VAR 0 5
23258: ARRAY
23259: ARRAY
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: CALL_OW 287
23268: PUSH
23269: LD_INT 32
23271: PUSH
23272: LD_INT 30
23274: PUSH
23275: LD_INT 28
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: LD_OWVAR 67
23287: ARRAY
23288: LESS
23289: IFFALSE 23340
// begin amount := amount - ( x * 10 ) ;
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_VAR 0 3
23300: PUSH
23301: LD_VAR 0 6
23305: PUSH
23306: LD_INT 10
23308: MUL
23309: MINUS
23310: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
23311: LD_VAR 0 6
23315: PPUSH
23316: LD_VAR 0 7
23320: PUSH
23321: LD_EXP 7
23325: PUSH
23326: LD_VAR 0 5
23330: ARRAY
23331: ARRAY
23332: PPUSH
23333: LD_INT 1
23335: PPUSH
23336: CALL_OW 55
// end ; end ;
23340: GO 23229
23342: POP
23343: POP
// wait ( 0 0$2 ) ;
23344: LD_INT 70
23346: PPUSH
23347: CALL_OW 67
// end ; for i in areas do
23351: LD_ADDR_VAR 0 5
23355: PUSH
23356: LD_VAR 0 1
23360: PUSH
23361: FOR_IN
23362: IFFALSE 23445
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
23364: LD_VAR 0 5
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 287
23376: PUSH
23377: LD_INT 25
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: LD_OWVAR 67
23395: ARRAY
23396: LESS
23397: IFFALSE 23443
// begin wait ( 0 0$5 ) ;
23399: LD_INT 175
23401: PPUSH
23402: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
23406: LD_VAR 0 6
23410: PPUSH
23411: LD_VAR 0 5
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 55
// amount := amount - ( x * 10 ) ;
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_VAR 0 3
23432: PUSH
23433: LD_VAR 0 6
23437: PUSH
23438: LD_INT 10
23440: MUL
23441: MINUS
23442: ST_TO_ADDR
// end ; end ;
23443: GO 23361
23445: POP
23446: POP
// time := time + 0 0$2 ;
23447: LD_ADDR_VAR 0 2
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_INT 70
23459: PLUS
23460: ST_TO_ADDR
// x := x - 1 ;
23461: LD_ADDR_VAR 0 6
23465: PUSH
23466: LD_VAR 0 6
23470: PUSH
23471: LD_INT 1
23473: MINUS
23474: ST_TO_ADDR
// if x = 0 then
23475: LD_VAR 0 6
23479: PUSH
23480: LD_INT 0
23482: EQUAL
23483: IFFALSE 23493
// x := 5 ;
23485: LD_ADDR_VAR 0 6
23489: PUSH
23490: LD_INT 5
23492: ST_TO_ADDR
// if time > 1 1$30 then
23493: LD_VAR 0 2
23497: PUSH
23498: LD_INT 3150
23500: GREATER
23501: IFFALSE 23511
// time := 0 0$30 ;
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: LD_INT 1050
23510: ST_TO_ADDR
// until not game or amount <= 0 ;
23511: LD_EXP 2
23515: NOT
23516: IFTRUE 23528
23518: PUSH
23519: LD_VAR 0 3
23523: PUSH
23524: LD_INT 0
23526: LESSEQUAL
23527: OR
23528: IFFALSE 23178
// end ; end_of_file
23530: LD_VAR 0 4
23534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23535: LD_VAR 0 1
23539: PUSH
23540: LD_INT 200
23542: DOUBLE
23543: GREATEREQUAL
23544: IFFALSE 23552
23546: LD_INT 299
23548: DOUBLE
23549: LESSEQUAL
23550: IFTRUE 23554
23552: GO 23586
23554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23555: LD_VAR 0 1
23559: PPUSH
23560: LD_VAR 0 2
23564: PPUSH
23565: LD_VAR 0 3
23569: PPUSH
23570: LD_VAR 0 4
23574: PPUSH
23575: LD_VAR 0 5
23579: PPUSH
23580: CALL 24448 0 5
23584: GO 23663
23586: LD_INT 300
23588: DOUBLE
23589: GREATEREQUAL
23590: IFFALSE 23598
23592: LD_INT 399
23594: DOUBLE
23595: LESSEQUAL
23596: IFTRUE 23600
23598: GO 23662
23600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23601: LD_VAR 0 1
23605: PPUSH
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: LD_VAR 0 4
23620: PPUSH
23621: LD_VAR 0 5
23625: PPUSH
23626: LD_VAR 0 6
23630: PPUSH
23631: LD_VAR 0 7
23635: PPUSH
23636: LD_VAR 0 8
23640: PPUSH
23641: LD_VAR 0 9
23645: PPUSH
23646: LD_VAR 0 10
23650: PPUSH
23651: LD_VAR 0 11
23655: PPUSH
23656: CALL 74423 0 11
23660: GO 23663
23662: POP
// end ;
23663: PPOPN 11
23665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23666: LD_VAR 0 1
23670: PPUSH
23671: LD_VAR 0 2
23675: PPUSH
23676: LD_VAR 0 3
23680: PPUSH
23681: LD_VAR 0 4
23685: PPUSH
23686: LD_VAR 0 5
23690: PPUSH
23691: CALL 23748 0 5
// end ; end_of_file
23695: PPOPN 5
23697: END
// export function SOS_UnitDestroyed ( un ) ; begin
23698: LD_INT 0
23700: PPUSH
// ComRadiation ( un ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: CALL 24868 0 1
// end ;
23710: LD_VAR 0 2
23714: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23715: LD_INT 0
23717: PPUSH
// ComRadiation ( un ) ;
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL 24868 0 1
// end ;
23727: LD_VAR 0 2
23731: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23732: LD_INT 0
23734: PPUSH
// end ;
23735: LD_VAR 0 4
23739: RET
// export function SOS_Command ( cmd ) ; begin
23740: LD_INT 0
23742: PPUSH
// end ;
23743: LD_VAR 0 2
23747: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23748: LD_INT 0
23750: PPUSH
// end ;
23751: LD_VAR 0 6
23755: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
// if not vehicle or not factory then
23763: LD_VAR 0 1
23767: NOT
23768: IFTRUE 23777
23770: PUSH
23771: LD_VAR 0 2
23775: NOT
23776: OR
23777: IFFALSE 23781
// exit ;
23779: GO 24443
// weapon := GetWeapon ( vehicle ) ;
23781: LD_ADDR_VAR 0 7
23785: PUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL_OW 264
23795: ST_TO_ADDR
// if weapon = ar_miner then
23796: LD_VAR 0 7
23800: PUSH
23801: LD_INT 81
23803: EQUAL
23804: IFFALSE 23861
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23806: LD_ADDR_EXP 67
23810: PUSH
23811: LD_EXP 67
23815: PPUSH
23816: LD_EXP 67
23820: PUSH
23821: LD_INT 1
23823: PLUS
23824: PPUSH
23825: LD_VAR 0 1
23829: PPUSH
23830: CALL_OW 1
23834: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23835: LD_ADDR_EXP 68
23839: PUSH
23840: LD_EXP 68
23844: PPUSH
23845: LD_EXP 68
23849: PUSH
23850: LD_INT 1
23852: PLUS
23853: PPUSH
23854: EMPTY
23855: PPUSH
23856: CALL_OW 1
23860: ST_TO_ADDR
// end ; if not factoryWaypoints then
23861: LD_EXP 70
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 24443
// for i := 1 to Count ( factoryWaypoints ) do
23870: LD_ADDR_VAR 0 4
23874: PUSH
23875: DOUBLE
23876: LD_INT 1
23878: DEC
23879: ST_TO_ADDR
23880: LD_EXP 70
23884: PPUSH
23885: CALL 32396 0 1
23889: PUSH
23890: FOR_TO
23891: IFFALSE 24441
// if factoryWaypoints [ i ] [ 2 ] = factory then
23893: LD_EXP 70
23897: PUSH
23898: LD_VAR 0 4
23902: ARRAY
23903: PUSH
23904: LD_INT 2
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 2
23912: EQUAL
23913: IFFALSE 24439
// begin if GetControl ( vehicle ) = control_manual then
23915: LD_VAR 0 1
23919: PPUSH
23920: CALL_OW 263
23924: PUSH
23925: LD_INT 1
23927: EQUAL
23928: IFFALSE 24292
// begin driver := IsDrivenBy ( vehicle ) ;
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 311
23944: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23945: LD_VAR 0 5
23949: PUSH
23950: LD_EXP 71
23954: IN
23955: IFTRUE 23969
23957: PUSH
23958: LD_VAR 0 1
23962: PUSH
23963: LD_EXP 71
23967: IN
23968: OR
23969: IFFALSE 23975
// exit ;
23971: POP
23972: POP
23973: GO 24443
// if not HasTask ( driver ) then
23975: LD_VAR 0 5
23979: PPUSH
23980: CALL_OW 314
23984: NOT
23985: IFFALSE 24290
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23987: LD_ADDR_EXP 71
23991: PUSH
23992: LD_EXP 71
23996: PPUSH
23997: LD_VAR 0 5
24001: PPUSH
24002: CALL 68372 0 2
24006: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
24007: LD_ADDR_EXP 71
24011: PUSH
24012: LD_EXP 71
24016: PPUSH
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL 68372 0 2
24026: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24027: LD_ADDR_VAR 0 6
24031: PUSH
24032: LD_EXP 70
24036: PUSH
24037: LD_VAR 0 4
24041: ARRAY
24042: PUSH
24043: LD_INT 3
24045: ARRAY
24046: PPUSH
24047: LD_EXP 70
24051: PUSH
24052: LD_VAR 0 4
24056: ARRAY
24057: PUSH
24058: LD_INT 4
24060: ARRAY
24061: PPUSH
24062: CALL_OW 428
24066: ST_TO_ADDR
// if hex then
24067: LD_VAR 0 6
24071: IFFALSE 24089
// ComMoveUnit ( driver , hex ) else
24073: LD_VAR 0 5
24077: PPUSH
24078: LD_VAR 0 6
24082: PPUSH
24083: CALL_OW 112
24087: GO 24173
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24089: LD_VAR 0 1
24093: PPUSH
24094: LD_EXP 70
24098: PUSH
24099: LD_VAR 0 4
24103: ARRAY
24104: PUSH
24105: LD_INT 3
24107: ARRAY
24108: PPUSH
24109: LD_EXP 70
24113: PUSH
24114: LD_VAR 0 4
24118: ARRAY
24119: PUSH
24120: LD_INT 4
24122: ARRAY
24123: PPUSH
24124: CALL_OW 297
24128: PUSH
24129: LD_INT 0
24131: GREATER
24132: IFFALSE 24173
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24134: LD_VAR 0 5
24138: PPUSH
24139: LD_EXP 70
24143: PUSH
24144: LD_VAR 0 4
24148: ARRAY
24149: PUSH
24150: LD_INT 3
24152: ARRAY
24153: PPUSH
24154: LD_EXP 70
24158: PUSH
24159: LD_VAR 0 4
24163: ARRAY
24164: PUSH
24165: LD_INT 4
24167: ARRAY
24168: PPUSH
24169: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24173: LD_VAR 0 5
24177: PPUSH
24178: CALL_OW 181
// if Multiplayer then
24182: LD_OWVAR 4
24186: IFFALSE 24235
// begin repeat wait ( 10 ) ;
24188: LD_INT 10
24190: PPUSH
24191: CALL_OW 67
// until not IsInUnit ( driver ) ;
24195: LD_VAR 0 5
24199: PPUSH
24200: CALL_OW 310
24204: NOT
24205: IFFALSE 24188
// if not HasTask ( driver ) then
24207: LD_VAR 0 5
24211: PPUSH
24212: CALL_OW 314
24216: NOT
24217: IFFALSE 24233
// ComEnterUnit ( driver , factory ) ;
24219: LD_VAR 0 5
24223: PPUSH
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 120
// end else
24233: GO 24249
// AddComEnterUnit ( driver , factory ) ;
24235: LD_VAR 0 5
24239: PPUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: CALL_OW 180
// wait ( 0 0$1 ) ;
24249: LD_INT 35
24251: PPUSH
24252: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24256: LD_ADDR_EXP 71
24260: PUSH
24261: LD_EXP 71
24265: PUSH
24266: LD_VAR 0 5
24270: DIFF
24271: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24272: LD_ADDR_EXP 71
24276: PUSH
24277: LD_EXP 71
24281: PUSH
24282: LD_VAR 0 1
24286: DIFF
24287: ST_TO_ADDR
// break ;
24288: GO 24441
// end ; end else
24290: GO 24439
// if GetControl ( vehicle ) = control_remote then
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL_OW 263
24301: PUSH
24302: LD_INT 2
24304: EQUAL
24305: IFFALSE 24391
// begin wait ( 0 0$2 ) ;
24307: LD_INT 70
24309: PPUSH
24310: CALL_OW 67
// repeat wait ( 10 ) ;
24314: LD_INT 10
24316: PPUSH
24317: CALL_OW 67
// Connect ( vehicle ) ;
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL 38674 0 1
// until IsControledBy ( vehicle ) ;
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 312
24339: IFFALSE 24314
// wait ( 10 ) ;
24341: LD_INT 10
24343: PPUSH
24344: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_EXP 70
24357: PUSH
24358: LD_VAR 0 4
24362: ARRAY
24363: PUSH
24364: LD_INT 3
24366: ARRAY
24367: PPUSH
24368: LD_EXP 70
24372: PUSH
24373: LD_VAR 0 4
24377: ARRAY
24378: PUSH
24379: LD_INT 4
24381: ARRAY
24382: PPUSH
24383: CALL_OW 111
// break ;
24387: GO 24441
// end else
24389: GO 24439
// begin wait ( 0 0$3 ) ;
24391: LD_INT 105
24393: PPUSH
24394: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24398: LD_VAR 0 1
24402: PPUSH
24403: LD_EXP 70
24407: PUSH
24408: LD_VAR 0 4
24412: ARRAY
24413: PUSH
24414: LD_INT 3
24416: ARRAY
24417: PPUSH
24418: LD_EXP 70
24422: PUSH
24423: LD_VAR 0 4
24427: ARRAY
24428: PUSH
24429: LD_INT 4
24431: ARRAY
24432: PPUSH
24433: CALL_OW 111
// break ;
24437: GO 24441
// end ; end ;
24439: GO 23890
24441: POP
24442: POP
// end ;
24443: LD_VAR 0 3
24447: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24448: LD_INT 0
24450: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24451: LD_VAR 0 1
24455: PUSH
24456: LD_INT 250
24458: EQUAL
24459: IFFALSE 24476
24461: PUSH
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL_OW 264
24471: PUSH
24472: LD_INT 81
24474: EQUAL
24475: AND
24476: IFFALSE 24497
// MinerPlaceMine ( unit , x , y ) ;
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 4
24487: PPUSH
24488: LD_VAR 0 5
24492: PPUSH
24493: CALL 27843 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 251
24504: EQUAL
24505: IFFALSE 24522
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: CALL_OW 264
24517: PUSH
24518: LD_INT 81
24520: EQUAL
24521: AND
24522: IFFALSE 24543
// MinerDetonateMine ( unit , x , y ) ;
24524: LD_VAR 0 2
24528: PPUSH
24529: LD_VAR 0 4
24533: PPUSH
24534: LD_VAR 0 5
24538: PPUSH
24539: CALL 28250 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24543: LD_VAR 0 1
24547: PUSH
24548: LD_INT 252
24550: EQUAL
24551: IFFALSE 24568
24553: PUSH
24554: LD_VAR 0 2
24558: PPUSH
24559: CALL_OW 264
24563: PUSH
24564: LD_INT 81
24566: EQUAL
24567: AND
24568: IFFALSE 24589
// MinerCreateMinefield ( unit , x , y ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 4
24579: PPUSH
24580: LD_VAR 0 5
24584: PPUSH
24585: CALL 28482 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24589: LD_VAR 0 1
24593: PUSH
24594: LD_INT 253
24596: EQUAL
24597: IFFALSE 24614
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: CALL_OW 257
24609: PUSH
24610: LD_INT 5
24612: EQUAL
24613: AND
24614: IFFALSE 24635
// ComBinocular ( unit , x , y ) ;
24616: LD_VAR 0 2
24620: PPUSH
24621: LD_VAR 0 4
24625: PPUSH
24626: LD_VAR 0 5
24630: PPUSH
24631: CALL 28857 0 3
// if selectedUnit then
24635: LD_VAR 0 3
24639: IFFALSE 24699
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24641: LD_VAR 0 1
24645: PUSH
24646: LD_INT 254
24648: EQUAL
24649: IFFALSE 24666
24651: PUSH
24652: LD_VAR 0 2
24656: PPUSH
24657: CALL_OW 264
24661: PUSH
24662: LD_INT 99
24664: EQUAL
24665: AND
24666: IFFALSE 24683
24668: PUSH
24669: LD_VAR 0 3
24673: PPUSH
24674: CALL_OW 263
24678: PUSH
24679: LD_INT 3
24681: EQUAL
24682: AND
24683: IFFALSE 24699
// HackDestroyVehicle ( unit , selectedUnit ) ;
24685: LD_VAR 0 2
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: CALL 27033 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24699: LD_VAR 0 1
24703: PUSH
24704: LD_INT 255
24706: EQUAL
24707: IFFALSE 24731
24709: PUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: CALL_OW 264
24719: PUSH
24720: LD_INT 14
24722: PUSH
24723: LD_INT 53
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: IN
24730: AND
24731: IFFALSE 24749
24733: PUSH
24734: LD_VAR 0 4
24738: PPUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL_OW 488
24748: AND
24749: IFFALSE 24773
// CutTreeXYR ( unit , x , y , 12 ) ;
24751: LD_VAR 0 2
24755: PPUSH
24756: LD_VAR 0 4
24760: PPUSH
24761: LD_VAR 0 5
24765: PPUSH
24766: LD_INT 12
24768: PPUSH
24769: CALL 24964 0 4
// if cmd = 256 then
24773: LD_VAR 0 1
24777: PUSH
24778: LD_INT 256
24780: EQUAL
24781: IFFALSE 24802
// SetFactoryWaypoint ( unit , x , y ) ;
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 4
24792: PPUSH
24793: LD_VAR 0 5
24797: PPUSH
24798: CALL 74431 0 3
// if cmd = 257 then
24802: LD_VAR 0 1
24806: PUSH
24807: LD_INT 257
24809: EQUAL
24810: IFFALSE 24831
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 4
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: CALL 74927 0 3
// if cmd = 258 then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 258
24838: EQUAL
24839: IFFALSE 24863
// BurnTreeXYR ( unit , x , y , 8 ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: LD_INT 8
24858: PPUSH
24859: CALL 25386 0 4
// end ;
24863: LD_VAR 0 6
24867: RET
// export function ComRadiation ( un ) ; var eff ; begin
24868: LD_INT 0
24870: PPUSH
24871: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 264
24881: PUSH
24882: LD_INT 91
24884: NONEQUAL
24885: IFFALSE 24889
// exit ;
24887: GO 24959
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24889: LD_INT 68
24891: PPUSH
24892: LD_VAR 0 1
24896: PPUSH
24897: CALL_OW 255
24901: PPUSH
24902: CALL_OW 321
24906: PUSH
24907: LD_INT 2
24909: EQUAL
24910: IFFALSE 24922
// eff := 50 else
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 50
24919: ST_TO_ADDR
24920: GO 24930
// eff := 25 ;
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: LD_INT 25
24929: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 250
24939: PPUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 251
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: CALL_OW 495
// end ;
24959: LD_VAR 0 2
24963: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24964: LD_INT 0
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24975: LD_VAR 0 1
24979: PPUSH
24980: CALL_OW 302
24984: NOT
24985: IFTRUE 25004
24987: PUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: CALL_OW 488
25002: NOT
25003: OR
25004: IFTRUE 25013
25006: PUSH
25007: LD_VAR 0 4
25011: NOT
25012: OR
25013: IFFALSE 25017
// exit ;
25015: GO 25381
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL_OW 437
25026: PPUSH
25027: CALL 32396 0 1
25031: PUSH
25032: LD_INT 10
25034: GREATER
25035: IFFALSE 25039
// exit ;
25037: GO 25381
// list := [ ] ;
25039: LD_ADDR_VAR 0 13
25043: PUSH
25044: EMPTY
25045: ST_TO_ADDR
// if x - r < 0 then
25046: LD_VAR 0 2
25050: PUSH
25051: LD_VAR 0 4
25055: MINUS
25056: PUSH
25057: LD_INT 0
25059: LESS
25060: IFFALSE 25072
// min_x := 0 else
25062: LD_ADDR_VAR 0 7
25066: PUSH
25067: LD_INT 0
25069: ST_TO_ADDR
25070: GO 25088
// min_x := x - r ;
25072: LD_ADDR_VAR 0 7
25076: PUSH
25077: LD_VAR 0 2
25081: PUSH
25082: LD_VAR 0 4
25086: MINUS
25087: ST_TO_ADDR
// if y - r < 0 then
25088: LD_VAR 0 3
25092: PUSH
25093: LD_VAR 0 4
25097: MINUS
25098: PUSH
25099: LD_INT 0
25101: LESS
25102: IFFALSE 25114
// min_y := 0 else
25104: LD_ADDR_VAR 0 8
25108: PUSH
25109: LD_INT 0
25111: ST_TO_ADDR
25112: GO 25130
// min_y := y - r ;
25114: LD_ADDR_VAR 0 8
25118: PUSH
25119: LD_VAR 0 3
25123: PUSH
25124: LD_VAR 0 4
25128: MINUS
25129: ST_TO_ADDR
// max_x := x + r ;
25130: LD_ADDR_VAR 0 9
25134: PUSH
25135: LD_VAR 0 2
25139: PUSH
25140: LD_VAR 0 4
25144: PLUS
25145: ST_TO_ADDR
// max_y := y + r ;
25146: LD_ADDR_VAR 0 10
25150: PUSH
25151: LD_VAR 0 3
25155: PUSH
25156: LD_VAR 0 4
25160: PLUS
25161: ST_TO_ADDR
// for _x = min_x to max_x do
25162: LD_ADDR_VAR 0 11
25166: PUSH
25167: DOUBLE
25168: LD_VAR 0 7
25172: DEC
25173: ST_TO_ADDR
25174: LD_VAR 0 9
25178: PUSH
25179: FOR_TO
25180: IFFALSE 25299
// for _y = min_y to max_y do
25182: LD_ADDR_VAR 0 12
25186: PUSH
25187: DOUBLE
25188: LD_VAR 0 8
25192: DEC
25193: ST_TO_ADDR
25194: LD_VAR 0 10
25198: PUSH
25199: FOR_TO
25200: IFFALSE 25295
// begin if not ValidHex ( _x , _y ) then
25202: LD_VAR 0 11
25206: PPUSH
25207: LD_VAR 0 12
25211: PPUSH
25212: CALL_OW 488
25216: NOT
25217: IFFALSE 25221
// continue ;
25219: GO 25199
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25221: LD_VAR 0 11
25225: PPUSH
25226: LD_VAR 0 12
25230: PPUSH
25231: CALL_OW 351
25235: IFFALSE 25253
25237: PUSH
25238: LD_VAR 0 11
25242: PPUSH
25243: LD_VAR 0 12
25247: PPUSH
25248: CALL_OW 554
25252: AND
25253: IFFALSE 25293
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25255: LD_ADDR_VAR 0 13
25259: PUSH
25260: LD_VAR 0 13
25264: PPUSH
25265: LD_VAR 0 13
25269: PUSH
25270: LD_INT 1
25272: PLUS
25273: PPUSH
25274: LD_VAR 0 11
25278: PUSH
25279: LD_VAR 0 12
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 2
25292: ST_TO_ADDR
// end ;
25293: GO 25199
25295: POP
25296: POP
25297: GO 25179
25299: POP
25300: POP
// if not list then
25301: LD_VAR 0 13
25305: NOT
25306: IFFALSE 25310
// exit ;
25308: GO 25381
// for i in list do
25310: LD_ADDR_VAR 0 6
25314: PUSH
25315: LD_VAR 0 13
25319: PUSH
25320: FOR_IN
25321: IFFALSE 25379
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25323: LD_VAR 0 1
25327: PPUSH
25328: LD_STRING M
25330: PUSH
25331: LD_VAR 0 6
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PUSH
25340: LD_VAR 0 6
25344: PUSH
25345: LD_INT 2
25347: ARRAY
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: PPUSH
25373: CALL_OW 447
25377: GO 25320
25379: POP
25380: POP
// end ;
25381: LD_VAR 0 5
25385: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25398: LD_VAR 0 1
25402: PPUSH
25403: CALL_OW 302
25407: NOT
25408: IFTRUE 25427
25410: PUSH
25411: LD_VAR 0 2
25415: PPUSH
25416: LD_VAR 0 3
25420: PPUSH
25421: CALL_OW 488
25425: NOT
25426: OR
25427: IFTRUE 25436
25429: PUSH
25430: LD_VAR 0 4
25434: NOT
25435: OR
25436: IFFALSE 25440
// exit ;
25438: GO 25979
// if Count ( GetTaskList ( flame ) ) > 10 then
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 437
25449: PPUSH
25450: CALL 32396 0 1
25454: PUSH
25455: LD_INT 10
25457: GREATER
25458: IFFALSE 25462
// exit ;
25460: GO 25979
// list := [ ] ;
25462: LD_ADDR_VAR 0 13
25466: PUSH
25467: EMPTY
25468: ST_TO_ADDR
// if x - r < 0 then
25469: LD_VAR 0 2
25473: PUSH
25474: LD_VAR 0 4
25478: MINUS
25479: PUSH
25480: LD_INT 0
25482: LESS
25483: IFFALSE 25495
// min_x := 0 else
25485: LD_ADDR_VAR 0 7
25489: PUSH
25490: LD_INT 0
25492: ST_TO_ADDR
25493: GO 25511
// min_x := x - r ;
25495: LD_ADDR_VAR 0 7
25499: PUSH
25500: LD_VAR 0 2
25504: PUSH
25505: LD_VAR 0 4
25509: MINUS
25510: ST_TO_ADDR
// if y - r < 0 then
25511: LD_VAR 0 3
25515: PUSH
25516: LD_VAR 0 4
25520: MINUS
25521: PUSH
25522: LD_INT 0
25524: LESS
25525: IFFALSE 25537
// min_y := 0 else
25527: LD_ADDR_VAR 0 8
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
25535: GO 25553
// min_y := y - r ;
25537: LD_ADDR_VAR 0 8
25541: PUSH
25542: LD_VAR 0 3
25546: PUSH
25547: LD_VAR 0 4
25551: MINUS
25552: ST_TO_ADDR
// max_x := x + r ;
25553: LD_ADDR_VAR 0 9
25557: PUSH
25558: LD_VAR 0 2
25562: PUSH
25563: LD_VAR 0 4
25567: PLUS
25568: ST_TO_ADDR
// max_y := y + r ;
25569: LD_ADDR_VAR 0 10
25573: PUSH
25574: LD_VAR 0 3
25578: PUSH
25579: LD_VAR 0 4
25583: PLUS
25584: ST_TO_ADDR
// for _x = min_x to max_x do
25585: LD_ADDR_VAR 0 11
25589: PUSH
25590: DOUBLE
25591: LD_VAR 0 7
25595: DEC
25596: ST_TO_ADDR
25597: LD_VAR 0 9
25601: PUSH
25602: FOR_TO
25603: IFFALSE 25722
// for _y = min_y to max_y do
25605: LD_ADDR_VAR 0 12
25609: PUSH
25610: DOUBLE
25611: LD_VAR 0 8
25615: DEC
25616: ST_TO_ADDR
25617: LD_VAR 0 10
25621: PUSH
25622: FOR_TO
25623: IFFALSE 25718
// begin if not ValidHex ( _x , _y ) then
25625: LD_VAR 0 11
25629: PPUSH
25630: LD_VAR 0 12
25634: PPUSH
25635: CALL_OW 488
25639: NOT
25640: IFFALSE 25644
// continue ;
25642: GO 25622
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25644: LD_VAR 0 11
25648: PPUSH
25649: LD_VAR 0 12
25653: PPUSH
25654: CALL_OW 351
25658: IFFALSE 25676
25660: PUSH
25661: LD_VAR 0 11
25665: PPUSH
25666: LD_VAR 0 12
25670: PPUSH
25671: CALL_OW 554
25675: AND
25676: IFFALSE 25716
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25678: LD_ADDR_VAR 0 13
25682: PUSH
25683: LD_VAR 0 13
25687: PPUSH
25688: LD_VAR 0 13
25692: PUSH
25693: LD_INT 1
25695: PLUS
25696: PPUSH
25697: LD_VAR 0 11
25701: PUSH
25702: LD_VAR 0 12
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PPUSH
25711: CALL_OW 2
25715: ST_TO_ADDR
// end ;
25716: GO 25622
25718: POP
25719: POP
25720: GO 25602
25722: POP
25723: POP
// if not list then
25724: LD_VAR 0 13
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 25979
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25733: LD_ADDR_VAR 0 13
25737: PUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_VAR 0 13
25747: PPUSH
25748: LD_INT 1
25750: PPUSH
25751: LD_INT 1
25753: PPUSH
25754: CALL 35802 0 4
25758: ST_TO_ADDR
// ComStop ( flame ) ;
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 141
// for i in list do
25768: LD_ADDR_VAR 0 6
25772: PUSH
25773: LD_VAR 0 13
25777: PUSH
25778: FOR_IN
25779: IFFALSE 25810
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25781: LD_VAR 0 1
25785: PPUSH
25786: LD_VAR 0 6
25790: PUSH
25791: LD_INT 1
25793: ARRAY
25794: PPUSH
25795: LD_VAR 0 6
25799: PUSH
25800: LD_INT 2
25802: ARRAY
25803: PPUSH
25804: CALL_OW 176
25808: GO 25778
25810: POP
25811: POP
// repeat wait ( 0 0$1 ) ;
25812: LD_INT 35
25814: PPUSH
25815: CALL_OW 67
// task := GetTaskList ( flame ) ;
25819: LD_ADDR_VAR 0 14
25823: PUSH
25824: LD_VAR 0 1
25828: PPUSH
25829: CALL_OW 437
25833: ST_TO_ADDR
// if not task then
25834: LD_VAR 0 14
25838: NOT
25839: IFFALSE 25843
// exit ;
25841: GO 25979
// if task [ 1 ] [ 1 ] <> | then
25843: LD_VAR 0 14
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PUSH
25852: LD_INT 1
25854: ARRAY
25855: PUSH
25856: LD_STRING |
25858: NONEQUAL
25859: IFFALSE 25863
// exit ;
25861: GO 25979
// _x := task [ 1 ] [ 2 ] ;
25863: LD_ADDR_VAR 0 11
25867: PUSH
25868: LD_VAR 0 14
25872: PUSH
25873: LD_INT 1
25875: ARRAY
25876: PUSH
25877: LD_INT 2
25879: ARRAY
25880: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25881: LD_ADDR_VAR 0 12
25885: PUSH
25886: LD_VAR 0 14
25890: PUSH
25891: LD_INT 1
25893: ARRAY
25894: PUSH
25895: LD_INT 3
25897: ARRAY
25898: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25899: LD_VAR 0 11
25903: PPUSH
25904: LD_VAR 0 12
25908: PPUSH
25909: CALL_OW 351
25913: NOT
25914: IFTRUE 25933
25916: PUSH
25917: LD_VAR 0 11
25921: PPUSH
25922: LD_VAR 0 12
25926: PPUSH
25927: CALL_OW 554
25931: NOT
25932: OR
25933: IFFALSE 25967
// begin task := Delete ( task , 1 ) ;
25935: LD_ADDR_VAR 0 14
25939: PUSH
25940: LD_VAR 0 14
25944: PPUSH
25945: LD_INT 1
25947: PPUSH
25948: CALL_OW 3
25952: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_VAR 0 14
25962: PPUSH
25963: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 314
25976: NOT
25977: IFFALSE 25812
// end ;
25979: LD_VAR 0 5
25983: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25984: LD_EXP 60
25988: NOT
25989: IFFALSE 26039
25991: GO 25993
25993: DISABLE
// begin initHack := true ;
25994: LD_ADDR_EXP 60
25998: PUSH
25999: LD_INT 1
26001: ST_TO_ADDR
// hackTanks := [ ] ;
26002: LD_ADDR_EXP 61
26006: PUSH
26007: EMPTY
26008: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26009: LD_ADDR_EXP 62
26013: PUSH
26014: EMPTY
26015: ST_TO_ADDR
// hackLimit := 3 ;
26016: LD_ADDR_EXP 63
26020: PUSH
26021: LD_INT 3
26023: ST_TO_ADDR
// hackDist := 12 ;
26024: LD_ADDR_EXP 64
26028: PUSH
26029: LD_INT 12
26031: ST_TO_ADDR
// hackCounter := [ ] ;
26032: LD_ADDR_EXP 65
26036: PUSH
26037: EMPTY
26038: ST_TO_ADDR
// end ;
26039: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26040: LD_EXP 60
26044: IFFALSE 26062
26046: PUSH
26047: LD_INT 34
26049: PUSH
26050: LD_INT 99
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PPUSH
26057: CALL_OW 69
26061: AND
26062: IFFALSE 26315
26064: GO 26066
26066: DISABLE
26067: LD_INT 0
26069: PPUSH
26070: PPUSH
// begin enable ;
26071: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_INT 34
26079: PUSH
26080: LD_INT 99
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 69
26091: PUSH
26092: FOR_IN
26093: IFFALSE 26313
// begin if not i in hackTanks then
26095: LD_VAR 0 1
26099: PUSH
26100: LD_EXP 61
26104: IN
26105: NOT
26106: IFFALSE 26189
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26108: LD_ADDR_EXP 61
26112: PUSH
26113: LD_EXP 61
26117: PPUSH
26118: LD_EXP 61
26122: PUSH
26123: LD_INT 1
26125: PLUS
26126: PPUSH
26127: LD_VAR 0 1
26131: PPUSH
26132: CALL_OW 1
26136: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26137: LD_ADDR_EXP 62
26141: PUSH
26142: LD_EXP 62
26146: PPUSH
26147: LD_EXP 62
26151: PUSH
26152: LD_INT 1
26154: PLUS
26155: PPUSH
26156: EMPTY
26157: PPUSH
26158: CALL_OW 1
26162: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26163: LD_ADDR_EXP 65
26167: PUSH
26168: LD_EXP 65
26172: PPUSH
26173: LD_EXP 65
26177: PUSH
26178: LD_INT 1
26180: PLUS
26181: PPUSH
26182: EMPTY
26183: PPUSH
26184: CALL_OW 1
26188: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26189: LD_VAR 0 1
26193: PPUSH
26194: CALL_OW 302
26198: NOT
26199: IFFALSE 26212
// begin HackUnlinkAll ( i ) ;
26201: LD_VAR 0 1
26205: PPUSH
26206: CALL 26318 0 1
// continue ;
26210: GO 26092
// end ; HackCheckCapturedStatus ( i ) ;
26212: LD_VAR 0 1
26216: PPUSH
26217: CALL 26763 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_INT 81
26228: PUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL_OW 255
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 33
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 91
26255: PUSH
26256: LD_VAR 0 1
26260: PUSH
26261: LD_EXP 64
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 50
26273: PUSH
26274: EMPTY
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: PPUSH
26283: CALL_OW 69
26287: ST_TO_ADDR
// if not tmp then
26288: LD_VAR 0 2
26292: NOT
26293: IFFALSE 26297
// continue ;
26295: GO 26092
// HackLink ( i , tmp ) ;
26297: LD_VAR 0 1
26301: PPUSH
26302: LD_VAR 0 2
26306: PPUSH
26307: CALL 26454 0 2
// end ;
26311: GO 26092
26313: POP
26314: POP
// end ;
26315: PPOPN 2
26317: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26318: LD_INT 0
26320: PPUSH
26321: PPUSH
26322: PPUSH
// if not hack in hackTanks then
26323: LD_VAR 0 1
26327: PUSH
26328: LD_EXP 61
26332: IN
26333: NOT
26334: IFFALSE 26338
// exit ;
26336: GO 26449
// index := GetElementIndex ( hackTanks , hack ) ;
26338: LD_ADDR_VAR 0 4
26342: PUSH
26343: LD_EXP 61
26347: PPUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL 35097 0 2
26357: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26358: LD_EXP 62
26362: PUSH
26363: LD_VAR 0 4
26367: ARRAY
26368: IFFALSE 26449
// begin for i in hackTanksCaptured [ index ] do
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_EXP 62
26379: PUSH
26380: LD_VAR 0 4
26384: ARRAY
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26413
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26389: LD_VAR 0 3
26393: PUSH
26394: LD_INT 1
26396: ARRAY
26397: PPUSH
26398: LD_VAR 0 3
26402: PUSH
26403: LD_INT 2
26405: ARRAY
26406: PPUSH
26407: CALL_OW 235
26411: GO 26386
26413: POP
26414: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26415: LD_ADDR_EXP 62
26419: PUSH
26420: LD_EXP 62
26424: PPUSH
26425: LD_VAR 0 4
26429: PPUSH
26430: EMPTY
26431: PPUSH
26432: CALL_OW 1
26436: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_INT 0
26444: PPUSH
26445: CALL_OW 505
// end ; end ;
26449: LD_VAR 0 2
26453: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26454: LD_INT 0
26456: PPUSH
26457: PPUSH
26458: PPUSH
// if not hack in hackTanks or not vehicles then
26459: LD_VAR 0 1
26463: PUSH
26464: LD_EXP 61
26468: IN
26469: NOT
26470: IFTRUE 26479
26472: PUSH
26473: LD_VAR 0 2
26477: NOT
26478: OR
26479: IFFALSE 26483
// exit ;
26481: GO 26758
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26483: LD_ADDR_VAR 0 2
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: LD_VAR 0 2
26497: PPUSH
26498: LD_INT 1
26500: PPUSH
26501: LD_INT 1
26503: PPUSH
26504: CALL 35749 0 4
26508: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_EXP 61
26518: PPUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL 35097 0 2
26528: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26529: LD_EXP 62
26533: PUSH
26534: LD_VAR 0 5
26538: ARRAY
26539: PUSH
26540: LD_EXP 63
26544: LESS
26545: IFFALSE 26734
// begin for i := 1 to vehicles do
26547: LD_ADDR_VAR 0 4
26551: PUSH
26552: DOUBLE
26553: LD_INT 1
26555: DEC
26556: ST_TO_ADDR
26557: LD_VAR 0 2
26561: PUSH
26562: FOR_TO
26563: IFFALSE 26732
// begin if hackTanksCaptured [ index ] = hackLimit then
26565: LD_EXP 62
26569: PUSH
26570: LD_VAR 0 5
26574: ARRAY
26575: PUSH
26576: LD_EXP 63
26580: EQUAL
26581: IFFALSE 26585
// break ;
26583: GO 26732
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26585: LD_ADDR_EXP 65
26589: PUSH
26590: LD_EXP 65
26594: PPUSH
26595: LD_VAR 0 5
26599: PPUSH
26600: LD_EXP 65
26604: PUSH
26605: LD_VAR 0 5
26609: ARRAY
26610: PUSH
26611: LD_INT 1
26613: PLUS
26614: PPUSH
26615: CALL_OW 1
26619: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26620: LD_ADDR_EXP 62
26624: PUSH
26625: LD_EXP 62
26629: PPUSH
26630: LD_VAR 0 5
26634: PUSH
26635: LD_EXP 62
26639: PUSH
26640: LD_VAR 0 5
26644: ARRAY
26645: PUSH
26646: LD_INT 1
26648: PLUS
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PPUSH
26654: LD_VAR 0 2
26658: PUSH
26659: LD_VAR 0 4
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 2
26669: PUSH
26670: LD_VAR 0 4
26674: ARRAY
26675: PPUSH
26676: CALL_OW 255
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL 35314 0 3
26689: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26690: LD_VAR 0 2
26694: PUSH
26695: LD_VAR 0 4
26699: ARRAY
26700: PPUSH
26701: LD_VAR 0 1
26705: PPUSH
26706: CALL_OW 255
26710: PPUSH
26711: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26715: LD_VAR 0 2
26719: PUSH
26720: LD_VAR 0 4
26724: ARRAY
26725: PPUSH
26726: CALL_OW 141
// end ;
26730: GO 26562
26732: POP
26733: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_EXP 62
26743: PUSH
26744: LD_VAR 0 5
26748: ARRAY
26749: PUSH
26750: LD_INT 0
26752: PLUS
26753: PPUSH
26754: CALL_OW 505
// end ;
26758: LD_VAR 0 3
26762: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26763: LD_INT 0
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
// if not hack in hackTanks then
26769: LD_VAR 0 1
26773: PUSH
26774: LD_EXP 61
26778: IN
26779: NOT
26780: IFFALSE 26784
// exit ;
26782: GO 27028
// index := GetElementIndex ( hackTanks , hack ) ;
26784: LD_ADDR_VAR 0 4
26788: PUSH
26789: LD_EXP 61
26793: PPUSH
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL 35097 0 2
26803: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26804: LD_ADDR_VAR 0 3
26808: PUSH
26809: DOUBLE
26810: LD_EXP 62
26814: PUSH
26815: LD_VAR 0 4
26819: ARRAY
26820: INC
26821: ST_TO_ADDR
26822: LD_INT 1
26824: PUSH
26825: FOR_DOWNTO
26826: IFFALSE 27002
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26828: LD_ADDR_VAR 0 5
26832: PUSH
26833: LD_EXP 62
26837: PUSH
26838: LD_VAR 0 4
26842: ARRAY
26843: PUSH
26844: LD_VAR 0 3
26848: ARRAY
26849: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26850: LD_VAR 0 5
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 302
26863: NOT
26864: IFTRUE 26892
26866: PUSH
26867: LD_VAR 0 5
26871: PUSH
26872: LD_INT 1
26874: ARRAY
26875: PPUSH
26876: CALL_OW 255
26880: PUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 255
26890: NONEQUAL
26891: OR
26892: IFFALSE 27000
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26894: LD_VAR 0 5
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: CALL_OW 305
26907: IFFALSE 26935
26909: PUSH
26910: LD_VAR 0 5
26914: PUSH
26915: LD_INT 1
26917: ARRAY
26918: PPUSH
26919: CALL_OW 255
26923: PUSH
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 255
26933: EQUAL
26934: AND
26935: IFFALSE 26959
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26937: LD_VAR 0 5
26941: PUSH
26942: LD_INT 1
26944: ARRAY
26945: PPUSH
26946: LD_VAR 0 5
26950: PUSH
26951: LD_INT 2
26953: ARRAY
26954: PPUSH
26955: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26959: LD_ADDR_EXP 62
26963: PUSH
26964: LD_EXP 62
26968: PPUSH
26969: LD_VAR 0 4
26973: PPUSH
26974: LD_EXP 62
26978: PUSH
26979: LD_VAR 0 4
26983: ARRAY
26984: PPUSH
26985: LD_VAR 0 3
26989: PPUSH
26990: CALL_OW 3
26994: PPUSH
26995: CALL_OW 1
26999: ST_TO_ADDR
// end ; end ;
27000: GO 26825
27002: POP
27003: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27004: LD_VAR 0 1
27008: PPUSH
27009: LD_EXP 62
27013: PUSH
27014: LD_VAR 0 4
27018: ARRAY
27019: PUSH
27020: LD_INT 0
27022: PLUS
27023: PPUSH
27024: CALL_OW 505
// end ;
27028: LD_VAR 0 2
27032: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27033: LD_INT 0
27035: PPUSH
27036: PPUSH
27037: PPUSH
27038: PPUSH
// if not hack in hackTanks then
27039: LD_VAR 0 1
27043: PUSH
27044: LD_EXP 61
27048: IN
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27139
// index := GetElementIndex ( hackTanks , hack ) ;
27054: LD_ADDR_VAR 0 5
27058: PUSH
27059: LD_EXP 61
27063: PPUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL 35097 0 2
27073: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27074: LD_ADDR_VAR 0 4
27078: PUSH
27079: DOUBLE
27080: LD_INT 1
27082: DEC
27083: ST_TO_ADDR
27084: LD_EXP 62
27088: PUSH
27089: LD_VAR 0 5
27093: ARRAY
27094: PUSH
27095: FOR_TO
27096: IFFALSE 27137
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27098: LD_EXP 62
27102: PUSH
27103: LD_VAR 0 5
27107: ARRAY
27108: PUSH
27109: LD_VAR 0 4
27113: ARRAY
27114: PUSH
27115: LD_INT 1
27117: ARRAY
27118: PUSH
27119: LD_VAR 0 2
27123: EQUAL
27124: IFFALSE 27135
// KillUnit ( vehicle ) ;
27126: LD_VAR 0 2
27130: PPUSH
27131: CALL_OW 66
27135: GO 27095
27137: POP
27138: POP
// end ;
27139: LD_VAR 0 3
27143: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27144: LD_EXP 66
27148: NOT
27149: IFFALSE 27282
27151: GO 27153
27153: DISABLE
27154: LD_INT 0
27156: PPUSH
// begin initMiner := true ;
27157: LD_ADDR_EXP 66
27161: PUSH
27162: LD_INT 1
27164: ST_TO_ADDR
// minersList := [ ] ;
27165: LD_ADDR_EXP 67
27169: PUSH
27170: EMPTY
27171: ST_TO_ADDR
// minerMinesList := [ ] ;
27172: LD_ADDR_EXP 68
27176: PUSH
27177: EMPTY
27178: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
27179: LD_ADDR_EXP 69
27183: PUSH
27184: LD_INT 10
27186: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27187: LD_ADDR_VAR 0 1
27191: PUSH
27192: LD_INT 34
27194: PUSH
27195: LD_INT 81
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PPUSH
27202: CALL_OW 69
27206: PUSH
27207: FOR_IN
27208: IFFALSE 27280
// begin if not i in minersList then
27210: LD_VAR 0 1
27214: PUSH
27215: LD_EXP 67
27219: IN
27220: NOT
27221: IFFALSE 27278
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27223: LD_ADDR_EXP 67
27227: PUSH
27228: LD_EXP 67
27232: PPUSH
27233: LD_EXP 67
27237: PUSH
27238: LD_INT 1
27240: PLUS
27241: PPUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 1
27251: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27252: LD_ADDR_EXP 68
27256: PUSH
27257: LD_EXP 68
27261: PPUSH
27262: LD_EXP 68
27266: PUSH
27267: LD_INT 1
27269: PLUS
27270: PPUSH
27271: EMPTY
27272: PPUSH
27273: CALL_OW 1
27277: ST_TO_ADDR
// end end ;
27278: GO 27207
27280: POP
27281: POP
// end ;
27282: PPOPN 1
27284: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27285: LD_EXP 66
27289: IFFALSE 27320
27291: PUSH
27292: LD_EXP 68
27296: PPUSH
27297: CALL 32396 0 1
27301: IFTRUE 27319
27303: PUSH
27304: LD_INT 34
27306: PUSH
27307: LD_INT 81
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PPUSH
27314: CALL_OW 69
27318: OR
27319: AND
27320: IFFALSE 27840
27322: GO 27324
27324: DISABLE
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
// begin enable ;
27331: ENABLE
// for i := minerMinesList downto 1 do
27332: LD_ADDR_VAR 0 1
27336: PUSH
27337: DOUBLE
27338: LD_EXP 68
27342: INC
27343: ST_TO_ADDR
27344: LD_INT 1
27346: PUSH
27347: FOR_DOWNTO
27348: IFFALSE 27838
// begin side := GetSide ( minersList [ i ] ) ;
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: LD_EXP 67
27359: PUSH
27360: LD_VAR 0 1
27364: ARRAY
27365: PPUSH
27366: CALL_OW 255
27370: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
27371: LD_EXP 67
27375: PUSH
27376: LD_VAR 0 1
27380: ARRAY
27381: PPUSH
27382: CALL_OW 300
27386: IFFALSE 27407
27388: PUSH
27389: LD_VAR 0 3
27393: PUSH
27394: LD_OWVAR 2
27398: PUSH
27399: LD_INT 9
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: IN
27406: AND
27407: IFFALSE 27440
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27409: LD_EXP 67
27413: PUSH
27414: LD_VAR 0 1
27418: ARRAY
27419: PPUSH
27420: LD_EXP 68
27424: PUSH
27425: LD_VAR 0 1
27429: ARRAY
27430: PPUSH
27431: CALL 32396 0 1
27435: PPUSH
27436: CALL_OW 505
// if not minerMinesList [ i ] then
27440: LD_EXP 68
27444: PUSH
27445: LD_VAR 0 1
27449: ARRAY
27450: NOT
27451: IFFALSE 27455
// continue ;
27453: GO 27347
// for j := minerMinesList [ i ] downto 1 do
27455: LD_ADDR_VAR 0 2
27459: PUSH
27460: DOUBLE
27461: LD_EXP 68
27465: PUSH
27466: LD_VAR 0 1
27470: ARRAY
27471: INC
27472: ST_TO_ADDR
27473: LD_INT 1
27475: PUSH
27476: FOR_DOWNTO
27477: IFFALSE 27834
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27479: LD_EXP 67
27483: PUSH
27484: LD_VAR 0 1
27488: ARRAY
27489: PPUSH
27490: CALL_OW 301
27494: IFTRUE 27514
27496: PUSH
27497: LD_EXP 67
27501: PUSH
27502: LD_VAR 0 1
27506: ARRAY
27507: PPUSH
27508: CALL_OW 305
27512: NOT
27513: OR
27514: IFFALSE 27605
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27516: LD_EXP 68
27520: PUSH
27521: LD_VAR 0 1
27525: ARRAY
27526: PUSH
27527: LD_VAR 0 2
27531: ARRAY
27532: PUSH
27533: LD_INT 1
27535: ARRAY
27536: PPUSH
27537: LD_EXP 68
27541: PUSH
27542: LD_VAR 0 1
27546: ARRAY
27547: PUSH
27548: LD_VAR 0 2
27552: ARRAY
27553: PUSH
27554: LD_INT 2
27556: ARRAY
27557: PPUSH
27558: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27562: LD_ADDR_EXP 68
27566: PUSH
27567: LD_EXP 68
27571: PPUSH
27572: LD_VAR 0 1
27576: PPUSH
27577: LD_EXP 68
27581: PUSH
27582: LD_VAR 0 1
27586: ARRAY
27587: PPUSH
27588: LD_VAR 0 2
27592: PPUSH
27593: CALL_OW 3
27597: PPUSH
27598: CALL_OW 1
27602: ST_TO_ADDR
// continue ;
27603: GO 27476
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27605: LD_ADDR_VAR 0 4
27609: PUSH
27610: LD_EXP 68
27614: PUSH
27615: LD_VAR 0 1
27619: ARRAY
27620: PUSH
27621: LD_VAR 0 2
27625: ARRAY
27626: PUSH
27627: LD_INT 1
27629: ARRAY
27630: PPUSH
27631: LD_EXP 68
27635: PUSH
27636: LD_VAR 0 1
27640: ARRAY
27641: PUSH
27642: LD_VAR 0 2
27646: ARRAY
27647: PUSH
27648: LD_INT 2
27650: ARRAY
27651: PPUSH
27652: CALL_OW 428
27656: ST_TO_ADDR
// if not tmp then
27657: LD_VAR 0 4
27661: NOT
27662: IFFALSE 27666
// continue ;
27664: GO 27476
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27666: LD_VAR 0 4
27670: PUSH
27671: LD_INT 81
27673: PUSH
27674: LD_VAR 0 3
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PPUSH
27683: CALL_OW 69
27687: IN
27688: IFFALSE 27738
27690: PUSH
27691: LD_EXP 68
27695: PUSH
27696: LD_VAR 0 1
27700: ARRAY
27701: PUSH
27702: LD_VAR 0 2
27706: ARRAY
27707: PUSH
27708: LD_INT 1
27710: ARRAY
27711: PPUSH
27712: LD_EXP 68
27716: PUSH
27717: LD_VAR 0 1
27721: ARRAY
27722: PUSH
27723: LD_VAR 0 2
27727: ARRAY
27728: PUSH
27729: LD_INT 2
27731: ARRAY
27732: PPUSH
27733: CALL_OW 458
27737: AND
27738: IFFALSE 27832
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27740: LD_EXP 68
27744: PUSH
27745: LD_VAR 0 1
27749: ARRAY
27750: PUSH
27751: LD_VAR 0 2
27755: ARRAY
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PPUSH
27761: LD_EXP 68
27765: PUSH
27766: LD_VAR 0 1
27770: ARRAY
27771: PUSH
27772: LD_VAR 0 2
27776: ARRAY
27777: PUSH
27778: LD_INT 2
27780: ARRAY
27781: PPUSH
27782: LD_VAR 0 3
27786: PPUSH
27787: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27791: LD_ADDR_EXP 68
27795: PUSH
27796: LD_EXP 68
27800: PPUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: LD_EXP 68
27810: PUSH
27811: LD_VAR 0 1
27815: ARRAY
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: CALL_OW 3
27826: PPUSH
27827: CALL_OW 1
27831: ST_TO_ADDR
// end ; end ;
27832: GO 27476
27834: POP
27835: POP
// end ;
27836: GO 27347
27838: POP
27839: POP
// end ;
27840: PPOPN 4
27842: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27843: LD_INT 0
27845: PPUSH
27846: PPUSH
27847: PPUSH
27848: PPUSH
// result := false ;
27849: LD_ADDR_VAR 0 4
27853: PUSH
27854: LD_INT 0
27856: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL_OW 264
27866: PUSH
27867: LD_INT 81
27869: EQUAL
27870: NOT
27871: IFFALSE 27875
// exit ;
27873: GO 28245
// side := GetSide ( unit ) ;
27875: LD_ADDR_VAR 0 6
27879: PUSH
27880: LD_VAR 0 1
27884: PPUSH
27885: CALL_OW 255
27889: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27890: LD_ADDR_VAR 0 5
27894: PUSH
27895: LD_EXP 67
27899: PPUSH
27900: LD_VAR 0 1
27904: PPUSH
27905: CALL 35097 0 2
27909: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27910: LD_EXP 68
27914: PUSH
27915: LD_VAR 0 5
27919: ARRAY
27920: PUSH
27921: LD_EXP 69
27925: GREATEREQUAL
27926: IFFALSE 27930
// exit ;
27928: GO 28245
// ComMoveXY ( unit , x , y ) ;
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: LD_VAR 0 3
27944: PPUSH
27945: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27949: LD_INT 35
27951: PPUSH
27952: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27956: LD_VAR 0 1
27960: PPUSH
27961: LD_VAR 0 2
27965: PPUSH
27966: LD_VAR 0 3
27970: PPUSH
27971: CALL 67153 0 3
27975: NOT
27976: IFFALSE 27989
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 314
27988: AND
27989: IFFALSE 27993
// exit ;
27991: GO 28245
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27993: LD_VAR 0 2
27997: PPUSH
27998: LD_VAR 0 3
28002: PPUSH
28003: CALL_OW 428
28007: PUSH
28008: LD_VAR 0 1
28012: EQUAL
28013: IFFALSE 28027
28015: PUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 314
28025: NOT
28026: AND
28027: IFFALSE 27949
// if MineAtPos ( x , y ) then
28029: LD_VAR 0 2
28033: PPUSH
28034: LD_VAR 0 3
28038: PPUSH
28039: CALL_OW 458
28043: IFFALSE 28047
// exit ;
28045: GO 28245
// if your_side = side then
28047: LD_OWVAR 2
28051: PUSH
28052: LD_VAR 0 6
28056: EQUAL
28057: IFFALSE 28076
// PlaySoundXY ( x , y , PlantMine ) ;
28059: LD_VAR 0 2
28063: PPUSH
28064: LD_VAR 0 3
28068: PPUSH
28069: LD_STRING PlantMine
28071: PPUSH
28072: CALL_OW 366
// repeat wait ( 1 ) ;
28076: LD_INT 1
28078: PPUSH
28079: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: LD_VAR 0 6
28097: PPUSH
28098: LD_INT 0
28100: PPUSH
28101: CALL_OW 454
28105: IFFALSE 28076
// if MineAtPos ( x , y ) then
28107: LD_VAR 0 2
28111: PPUSH
28112: LD_VAR 0 3
28116: PPUSH
28117: CALL_OW 458
28121: IFFALSE 28237
// begin for i in minerMinesList [ index ] do
28123: LD_ADDR_VAR 0 7
28127: PUSH
28128: LD_EXP 68
28132: PUSH
28133: LD_VAR 0 5
28137: ARRAY
28138: PUSH
28139: FOR_IN
28140: IFFALSE 28182
// if i [ 1 ] = x and i [ 2 ] = y then
28142: LD_VAR 0 7
28146: PUSH
28147: LD_INT 1
28149: ARRAY
28150: PUSH
28151: LD_VAR 0 2
28155: EQUAL
28156: IFFALSE 28174
28158: PUSH
28159: LD_VAR 0 7
28163: PUSH
28164: LD_INT 2
28166: ARRAY
28167: PUSH
28168: LD_VAR 0 3
28172: EQUAL
28173: AND
28174: IFFALSE 28180
// exit ;
28176: POP
28177: POP
28178: GO 28245
28180: GO 28139
28182: POP
28183: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28184: LD_ADDR_EXP 68
28188: PUSH
28189: LD_EXP 68
28193: PPUSH
28194: LD_VAR 0 5
28198: PUSH
28199: LD_EXP 68
28203: PUSH
28204: LD_VAR 0 5
28208: ARRAY
28209: PUSH
28210: LD_INT 1
28212: PLUS
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PPUSH
28218: LD_VAR 0 2
28222: PUSH
28223: LD_VAR 0 3
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PPUSH
28232: CALL 35314 0 3
28236: ST_TO_ADDR
// end ; result := true ;
28237: LD_ADDR_VAR 0 4
28241: PUSH
28242: LD_INT 1
28244: ST_TO_ADDR
// end ;
28245: LD_VAR 0 4
28249: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
// if not unit in minersList then
28255: LD_VAR 0 1
28259: PUSH
28260: LD_EXP 67
28264: IN
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28477
// index := GetElementIndex ( minersList , unit ) ;
28270: LD_ADDR_VAR 0 6
28274: PUSH
28275: LD_EXP 67
28279: PPUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL 35097 0 2
28289: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28290: LD_ADDR_VAR 0 5
28294: PUSH
28295: DOUBLE
28296: LD_EXP 68
28300: PUSH
28301: LD_VAR 0 6
28305: ARRAY
28306: INC
28307: ST_TO_ADDR
28308: LD_INT 1
28310: PUSH
28311: FOR_DOWNTO
28312: IFFALSE 28475
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28314: LD_EXP 68
28318: PUSH
28319: LD_VAR 0 6
28323: ARRAY
28324: PUSH
28325: LD_VAR 0 5
28329: ARRAY
28330: PUSH
28331: LD_INT 1
28333: ARRAY
28334: PPUSH
28335: LD_EXP 68
28339: PUSH
28340: LD_VAR 0 6
28344: ARRAY
28345: PUSH
28346: LD_VAR 0 5
28350: ARRAY
28351: PUSH
28352: LD_INT 2
28354: ARRAY
28355: PPUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_VAR 0 3
28365: PPUSH
28366: CALL_OW 298
28370: PUSH
28371: LD_INT 6
28373: LESS
28374: IFFALSE 28473
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28376: LD_EXP 68
28380: PUSH
28381: LD_VAR 0 6
28385: ARRAY
28386: PUSH
28387: LD_VAR 0 5
28391: ARRAY
28392: PUSH
28393: LD_INT 1
28395: ARRAY
28396: PPUSH
28397: LD_EXP 68
28401: PUSH
28402: LD_VAR 0 6
28406: ARRAY
28407: PUSH
28408: LD_VAR 0 5
28412: ARRAY
28413: PUSH
28414: LD_INT 2
28416: ARRAY
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 255
28427: PPUSH
28428: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28432: LD_ADDR_EXP 68
28436: PUSH
28437: LD_EXP 68
28441: PPUSH
28442: LD_VAR 0 6
28446: PPUSH
28447: LD_EXP 68
28451: PUSH
28452: LD_VAR 0 6
28456: ARRAY
28457: PPUSH
28458: LD_VAR 0 5
28462: PPUSH
28463: CALL_OW 3
28467: PPUSH
28468: CALL_OW 1
28472: ST_TO_ADDR
// end ; end ;
28473: GO 28311
28475: POP
28476: POP
// end ;
28477: LD_VAR 0 4
28481: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28482: LD_INT 0
28484: PPUSH
28485: PPUSH
28486: PPUSH
28487: PPUSH
28488: PPUSH
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28493: LD_VAR 0 1
28497: PPUSH
28498: CALL_OW 264
28502: PUSH
28503: LD_INT 81
28505: EQUAL
28506: NOT
28507: IFTRUE 28522
28509: PUSH
28510: LD_VAR 0 1
28514: PUSH
28515: LD_EXP 67
28519: IN
28520: NOT
28521: OR
28522: IFFALSE 28526
// exit ;
28524: GO 28852
// index := GetElementIndex ( minersList , unit ) ;
28526: LD_ADDR_VAR 0 6
28530: PUSH
28531: LD_EXP 67
28535: PPUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL 35097 0 2
28545: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28546: LD_ADDR_VAR 0 8
28550: PUSH
28551: LD_EXP 69
28555: PUSH
28556: LD_EXP 68
28560: PUSH
28561: LD_VAR 0 6
28565: ARRAY
28566: MINUS
28567: ST_TO_ADDR
// if not minesFreeAmount then
28568: LD_VAR 0 8
28572: NOT
28573: IFFALSE 28577
// exit ;
28575: GO 28852
// tmp := [ ] ;
28577: LD_ADDR_VAR 0 7
28581: PUSH
28582: EMPTY
28583: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28584: LD_ADDR_VAR 0 5
28588: PUSH
28589: DOUBLE
28590: LD_INT 1
28592: DEC
28593: ST_TO_ADDR
28594: LD_VAR 0 8
28598: PUSH
28599: FOR_TO
28600: IFFALSE 28799
// begin _d := rand ( 0 , 5 ) ;
28602: LD_ADDR_VAR 0 11
28606: PUSH
28607: LD_INT 0
28609: PPUSH
28610: LD_INT 5
28612: PPUSH
28613: CALL_OW 12
28617: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28618: LD_ADDR_VAR 0 12
28622: PUSH
28623: LD_INT 2
28625: PPUSH
28626: LD_INT 6
28628: PPUSH
28629: CALL_OW 12
28633: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28634: LD_ADDR_VAR 0 9
28638: PUSH
28639: LD_VAR 0 2
28643: PPUSH
28644: LD_VAR 0 11
28648: PPUSH
28649: LD_VAR 0 12
28653: PPUSH
28654: CALL_OW 272
28658: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28659: LD_ADDR_VAR 0 10
28663: PUSH
28664: LD_VAR 0 3
28668: PPUSH
28669: LD_VAR 0 11
28673: PPUSH
28674: LD_VAR 0 12
28678: PPUSH
28679: CALL_OW 273
28683: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28684: LD_VAR 0 9
28688: PPUSH
28689: LD_VAR 0 10
28693: PPUSH
28694: CALL_OW 488
28698: IFFALSE 28722
28700: PUSH
28701: LD_VAR 0 9
28705: PUSH
28706: LD_VAR 0 10
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_VAR 0 7
28719: IN
28720: NOT
28721: AND
28722: IFFALSE 28741
28724: PUSH
28725: LD_VAR 0 9
28729: PPUSH
28730: LD_VAR 0 10
28734: PPUSH
28735: CALL_OW 458
28739: NOT
28740: AND
28741: IFFALSE 28783
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28743: LD_ADDR_VAR 0 7
28747: PUSH
28748: LD_VAR 0 7
28752: PPUSH
28753: LD_VAR 0 7
28757: PUSH
28758: LD_INT 1
28760: PLUS
28761: PPUSH
28762: LD_VAR 0 9
28766: PUSH
28767: LD_VAR 0 10
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PPUSH
28776: CALL_OW 1
28780: ST_TO_ADDR
28781: GO 28797
// i := i - 1 ;
28783: LD_ADDR_VAR 0 5
28787: PUSH
28788: LD_VAR 0 5
28792: PUSH
28793: LD_INT 1
28795: MINUS
28796: ST_TO_ADDR
// end ;
28797: GO 28599
28799: POP
28800: POP
// for i in tmp do
28801: LD_ADDR_VAR 0 5
28805: PUSH
28806: LD_VAR 0 7
28810: PUSH
28811: FOR_IN
28812: IFFALSE 28850
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28814: LD_VAR 0 1
28818: PPUSH
28819: LD_VAR 0 5
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 5
28832: PUSH
28833: LD_INT 2
28835: ARRAY
28836: PPUSH
28837: CALL 27843 0 3
28841: NOT
28842: IFFALSE 28848
// exit ;
28844: POP
28845: POP
28846: GO 28852
28848: GO 28811
28850: POP
28851: POP
// end ;
28852: LD_VAR 0 4
28856: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28857: LD_INT 0
28859: PPUSH
28860: PPUSH
28861: PPUSH
28862: PPUSH
28863: PPUSH
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
// if GetClass ( unit ) <> class_sniper then
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 257
28877: PUSH
28878: LD_INT 5
28880: NONEQUAL
28881: IFFALSE 28885
// exit ;
28883: GO 29355
// dist := 8 ;
28885: LD_ADDR_VAR 0 5
28889: PUSH
28890: LD_INT 8
28892: ST_TO_ADDR
// viewRange := 12 ;
28893: LD_ADDR_VAR 0 8
28897: PUSH
28898: LD_INT 12
28900: ST_TO_ADDR
// side := GetSide ( unit ) ;
28901: LD_ADDR_VAR 0 6
28905: PUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 255
28915: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28916: LD_INT 61
28918: PPUSH
28919: LD_VAR 0 6
28923: PPUSH
28924: CALL_OW 321
28928: PUSH
28929: LD_INT 2
28931: EQUAL
28932: IFFALSE 28942
// viewRange := 16 ;
28934: LD_ADDR_VAR 0 8
28938: PUSH
28939: LD_INT 16
28941: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28942: LD_VAR 0 1
28946: PPUSH
28947: LD_VAR 0 2
28951: PPUSH
28952: LD_VAR 0 3
28956: PPUSH
28957: CALL_OW 297
28961: PUSH
28962: LD_VAR 0 5
28966: GREATER
28967: IFFALSE 29046
// begin ComMoveXY ( unit , x , y ) ;
28969: LD_VAR 0 1
28973: PPUSH
28974: LD_VAR 0 2
28978: PPUSH
28979: LD_VAR 0 3
28983: PPUSH
28984: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28988: LD_INT 35
28990: PPUSH
28991: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28995: LD_VAR 0 1
28999: PPUSH
29000: LD_VAR 0 2
29004: PPUSH
29005: LD_VAR 0 3
29009: PPUSH
29010: CALL 67153 0 3
29014: NOT
29015: IFFALSE 29019
// exit ;
29017: GO 29355
// until GetDistUnitXY ( unit , x , y ) < dist ;
29019: LD_VAR 0 1
29023: PPUSH
29024: LD_VAR 0 2
29028: PPUSH
29029: LD_VAR 0 3
29033: PPUSH
29034: CALL_OW 297
29038: PUSH
29039: LD_VAR 0 5
29043: LESS
29044: IFFALSE 28988
// end ; ComTurnXY ( unit , x , y ) ;
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_VAR 0 3
29060: PPUSH
29061: CALL_OW 118
// repeat if Multiplayer then
29065: LD_OWVAR 4
29069: IFFALSE 29080
// wait ( 35 ) else
29071: LD_INT 35
29073: PPUSH
29074: CALL_OW 67
29078: GO 29087
// wait ( 5 ) ;
29080: LD_INT 5
29082: PPUSH
29083: CALL_OW 67
// _d := GetDir ( unit ) ;
29087: LD_ADDR_VAR 0 11
29091: PUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 254
29101: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29102: LD_ADDR_VAR 0 7
29106: PUSH
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 250
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL_OW 251
29126: PPUSH
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL 69789 0 4
29141: ST_TO_ADDR
// until dir = _d ;
29142: LD_VAR 0 7
29146: PUSH
29147: LD_VAR 0 11
29151: EQUAL
29152: IFFALSE 29065
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29154: LD_ADDR_VAR 0 9
29158: PUSH
29159: LD_VAR 0 1
29163: PPUSH
29164: CALL_OW 250
29168: PPUSH
29169: LD_VAR 0 7
29173: PPUSH
29174: LD_VAR 0 5
29178: PPUSH
29179: CALL_OW 272
29183: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29184: LD_ADDR_VAR 0 10
29188: PUSH
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL_OW 251
29198: PPUSH
29199: LD_VAR 0 7
29203: PPUSH
29204: LD_VAR 0 5
29208: PPUSH
29209: CALL_OW 273
29213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29214: LD_VAR 0 9
29218: PPUSH
29219: LD_VAR 0 10
29223: PPUSH
29224: CALL_OW 488
29228: NOT
29229: IFFALSE 29233
// exit ;
29231: GO 29355
// ComAnimCustom ( unit , 1 ) ;
29233: LD_VAR 0 1
29237: PPUSH
29238: LD_INT 1
29240: PPUSH
29241: CALL_OW 592
// p := 0 ;
29245: LD_ADDR_VAR 0 12
29249: PUSH
29250: LD_INT 0
29252: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29253: LD_VAR 0 9
29257: PPUSH
29258: LD_VAR 0 10
29262: PPUSH
29263: LD_VAR 0 6
29267: PPUSH
29268: LD_VAR 0 8
29272: PPUSH
29273: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29277: LD_INT 35
29279: PPUSH
29280: CALL_OW 67
// p := Inc ( p ) ;
29284: LD_ADDR_VAR 0 12
29288: PUSH
29289: LD_VAR 0 12
29293: PPUSH
29294: CALL 69745 0 1
29298: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29299: LD_VAR 0 12
29303: PUSH
29304: LD_INT 3
29306: EQUAL
29307: IFTRUE 29321
29309: PUSH
29310: LD_VAR 0 1
29314: PPUSH
29315: CALL_OW 302
29319: NOT
29320: OR
29321: IFTRUE 29334
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 301
29333: OR
29334: IFFALSE 29277
// RemoveSeeing ( _x , _y , side ) ;
29336: LD_VAR 0 9
29340: PPUSH
29341: LD_VAR 0 10
29345: PPUSH
29346: LD_VAR 0 6
29350: PPUSH
29351: CALL_OW 331
// end ;
29355: LD_VAR 0 4
29359: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
// if not unit then
29373: LD_VAR 0 1
29377: NOT
29378: IFFALSE 29382
// exit ;
29380: GO 29653
// side := GetSide ( unit ) ;
29382: LD_ADDR_VAR 0 3
29386: PUSH
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL_OW 255
29396: ST_TO_ADDR
// x := GetX ( unit ) ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL_OW 250
29411: ST_TO_ADDR
// y := GetY ( unit ) ;
29412: LD_ADDR_VAR 0 6
29416: PUSH
29417: LD_VAR 0 1
29421: PPUSH
29422: CALL_OW 251
29426: ST_TO_ADDR
// r := 8 ;
29427: LD_ADDR_VAR 0 4
29431: PUSH
29432: LD_INT 8
29434: ST_TO_ADDR
// if x - r < 0 then
29435: LD_VAR 0 5
29439: PUSH
29440: LD_VAR 0 4
29444: MINUS
29445: PUSH
29446: LD_INT 0
29448: LESS
29449: IFFALSE 29461
// min_x := 0 else
29451: LD_ADDR_VAR 0 7
29455: PUSH
29456: LD_INT 0
29458: ST_TO_ADDR
29459: GO 29477
// min_x := x - r ;
29461: LD_ADDR_VAR 0 7
29465: PUSH
29466: LD_VAR 0 5
29470: PUSH
29471: LD_VAR 0 4
29475: MINUS
29476: ST_TO_ADDR
// if y - r < 0 then
29477: LD_VAR 0 6
29481: PUSH
29482: LD_VAR 0 4
29486: MINUS
29487: PUSH
29488: LD_INT 0
29490: LESS
29491: IFFALSE 29503
// min_y := 0 else
29493: LD_ADDR_VAR 0 8
29497: PUSH
29498: LD_INT 0
29500: ST_TO_ADDR
29501: GO 29519
// min_y := y - r ;
29503: LD_ADDR_VAR 0 8
29507: PUSH
29508: LD_VAR 0 6
29512: PUSH
29513: LD_VAR 0 4
29517: MINUS
29518: ST_TO_ADDR
// max_x := x + r ;
29519: LD_ADDR_VAR 0 9
29523: PUSH
29524: LD_VAR 0 5
29528: PUSH
29529: LD_VAR 0 4
29533: PLUS
29534: ST_TO_ADDR
// max_y := y + r ;
29535: LD_ADDR_VAR 0 10
29539: PUSH
29540: LD_VAR 0 6
29544: PUSH
29545: LD_VAR 0 4
29549: PLUS
29550: ST_TO_ADDR
// for _x = min_x to max_x do
29551: LD_ADDR_VAR 0 11
29555: PUSH
29556: DOUBLE
29557: LD_VAR 0 7
29561: DEC
29562: ST_TO_ADDR
29563: LD_VAR 0 9
29567: PUSH
29568: FOR_TO
29569: IFFALSE 29651
// for _y = min_y to max_y do
29571: LD_ADDR_VAR 0 12
29575: PUSH
29576: DOUBLE
29577: LD_VAR 0 8
29581: DEC
29582: ST_TO_ADDR
29583: LD_VAR 0 10
29587: PUSH
29588: FOR_TO
29589: IFFALSE 29647
// begin if not ValidHex ( _x , _y ) then
29591: LD_VAR 0 11
29595: PPUSH
29596: LD_VAR 0 12
29600: PPUSH
29601: CALL_OW 488
29605: NOT
29606: IFFALSE 29610
// continue ;
29608: GO 29588
// if MineAtPos ( _x , _y ) then
29610: LD_VAR 0 11
29614: PPUSH
29615: LD_VAR 0 12
29619: PPUSH
29620: CALL_OW 458
29624: IFFALSE 29645
// ViewMineAtPos ( _x , _y , side ) ;
29626: LD_VAR 0 11
29630: PPUSH
29631: LD_VAR 0 12
29635: PPUSH
29636: LD_VAR 0 3
29640: PPUSH
29641: CALL_OW 457
// end ;
29645: GO 29588
29647: POP
29648: POP
29649: GO 29568
29651: POP
29652: POP
// end ;
29653: LD_VAR 0 2
29657: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
// if not units then
29667: LD_VAR 0 1
29671: NOT
29672: IFFALSE 29676
// exit ;
29674: GO 30140
// scaners := [ ] ;
29676: LD_ADDR_VAR 0 6
29680: PUSH
29681: EMPTY
29682: ST_TO_ADDR
// for i in units do
29683: LD_ADDR_VAR 0 3
29687: PUSH
29688: LD_VAR 0 1
29692: PUSH
29693: FOR_IN
29694: IFFALSE 29851
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL_OW 264
29705: PUSH
29706: LD_INT 11
29708: NONEQUAL
29709: IFTRUE 29723
29711: PUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 302
29721: NOT
29722: OR
29723: IFTRUE 29740
29725: PUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: CALL_OW 110
29735: PUSH
29736: LD_INT 502
29738: EQUAL
29739: OR
29740: IFFALSE 29744
// continue ;
29742: GO 29693
// ComStop ( i ) ;
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 141
// x := GetX ( i ) ;
29753: LD_ADDR_VAR 0 4
29757: PUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL_OW 250
29767: ST_TO_ADDR
// y := GetY ( i ) ;
29768: LD_ADDR_VAR 0 5
29772: PUSH
29773: LD_VAR 0 3
29777: PPUSH
29778: CALL_OW 251
29782: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29783: LD_VAR 0 3
29787: PPUSH
29788: CALL_OW 255
29792: PUSH
29793: LD_OWVAR 2
29797: EQUAL
29798: IFFALSE 29817
// PlaySoundXY ( x , y , mineDetector ) ;
29800: LD_VAR 0 4
29804: PPUSH
29805: LD_VAR 0 5
29809: PPUSH
29810: LD_STRING mineDetector
29812: PPUSH
29813: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29817: LD_ADDR_VAR 0 6
29821: PUSH
29822: LD_VAR 0 6
29826: PPUSH
29827: LD_VAR 0 3
29831: PPUSH
29832: CALL 68372 0 2
29836: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29837: LD_VAR 0 3
29841: PPUSH
29842: LD_INT 502
29844: PPUSH
29845: CALL_OW 109
// end ;
29849: GO 29693
29851: POP
29852: POP
// if not scaners then
29853: LD_VAR 0 6
29857: NOT
29858: IFFALSE 29862
// exit ;
29860: GO 30140
// wait ( 3 ) ;
29862: LD_INT 3
29864: PPUSH
29865: CALL_OW 67
// timer := 6 ;
29869: LD_ADDR_VAR 0 7
29873: PUSH
29874: LD_INT 6
29876: ST_TO_ADDR
// repeat for i in scaners do
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_VAR 0 6
29886: PUSH
29887: FOR_IN
29888: IFFALSE 30038
// begin side := GetSide ( i ) ;
29890: LD_ADDR_VAR 0 8
29894: PUSH
29895: LD_VAR 0 3
29899: PPUSH
29900: CALL_OW 255
29904: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29905: LD_VAR 0 3
29909: PPUSH
29910: CALL_OW 302
29914: NOT
29915: IFTRUE 29928
29917: PUSH
29918: LD_VAR 0 3
29922: PPUSH
29923: CALL_OW 314
29927: OR
29928: IFTRUE 29959
29930: PUSH
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 263
29940: PUSH
29941: LD_INT 1
29943: EQUAL
29944: IFFALSE 29958
29946: PUSH
29947: LD_VAR 0 3
29951: PPUSH
29952: CALL_OW 311
29956: NOT
29957: AND
29958: OR
29959: IFFALSE 30003
// begin SetUnitDisplayNumber ( i , 0 ) ;
29961: LD_VAR 0 3
29965: PPUSH
29966: LD_INT 0
29968: PPUSH
29969: CALL_OW 505
// SetTag ( i , 0 ) ;
29973: LD_VAR 0 3
29977: PPUSH
29978: LD_INT 0
29980: PPUSH
29981: CALL_OW 109
// scaners := scaners diff i ;
29985: LD_ADDR_VAR 0 6
29989: PUSH
29990: LD_VAR 0 6
29994: PUSH
29995: LD_VAR 0 3
29999: DIFF
30000: ST_TO_ADDR
// continue ;
30001: GO 29887
// end ; if side in [ your_side , 9 ] then
30003: LD_VAR 0 8
30007: PUSH
30008: LD_OWVAR 2
30012: PUSH
30013: LD_INT 9
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: IN
30020: IFFALSE 30036
// SetUnitDisplayNumber ( i , timer ) ;
30022: LD_VAR 0 3
30026: PPUSH
30027: LD_VAR 0 7
30031: PPUSH
30032: CALL_OW 505
// end ;
30036: GO 29887
30038: POP
30039: POP
// if not scaners then
30040: LD_VAR 0 6
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30140
// timer := Dec ( timer ) ;
30049: LD_ADDR_VAR 0 7
30053: PUSH
30054: LD_VAR 0 7
30058: PPUSH
30059: CALL 69767 0 1
30063: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30064: LD_INT 35
30066: PPUSH
30067: CALL_OW 67
// until timer = 0 ;
30071: LD_VAR 0 7
30075: PUSH
30076: LD_INT 0
30078: EQUAL
30079: IFFALSE 29877
// if not scaners then
30081: LD_VAR 0 6
30085: NOT
30086: IFFALSE 30090
// exit ;
30088: GO 30140
// for i in scaners do
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_VAR 0 6
30099: PUSH
30100: FOR_IN
30101: IFFALSE 30138
// begin SetUnitDisplayNumber ( i , 0 ) ;
30103: LD_VAR 0 3
30107: PPUSH
30108: LD_INT 0
30110: PPUSH
30111: CALL_OW 505
// SetTag ( i , 0 ) ;
30115: LD_VAR 0 3
30119: PPUSH
30120: LD_INT 0
30122: PPUSH
30123: CALL_OW 109
// RevealDetectorMine ( i ) ;
30127: LD_VAR 0 3
30131: PPUSH
30132: CALL 29360 0 1
// end ;
30136: GO 30100
30138: POP
30139: POP
// end ;
30140: LD_VAR 0 2
30144: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30145: LD_INT 0
30147: PPUSH
// if p1 = mine_detector_mode then
30148: LD_VAR 0 2
30152: PUSH
30153: LD_INT 103
30155: EQUAL
30156: IFFALSE 30167
// DetectMine ( units ) ;
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL 29658 0 1
// end ; end_of_file
30167: LD_VAR 0 7
30171: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30172: LD_INT 0
30174: PPUSH
30175: PPUSH
// if exist_mode then
30176: LD_VAR 0 2
30180: IFFALSE 30226
// begin unit := CreateCharacter ( prefix & ident ) ;
30182: LD_ADDR_VAR 0 5
30186: PUSH
30187: LD_VAR 0 3
30191: PUSH
30192: LD_VAR 0 1
30196: STR
30197: PPUSH
30198: CALL_OW 34
30202: ST_TO_ADDR
// if unit then
30203: LD_VAR 0 5
30207: IFFALSE 30224
// DeleteCharacters ( prefix & ident ) ;
30209: LD_VAR 0 3
30213: PUSH
30214: LD_VAR 0 1
30218: STR
30219: PPUSH
30220: CALL_OW 40
// end else
30224: GO 30241
// unit := NewCharacter ( ident ) ;
30226: LD_ADDR_VAR 0 5
30230: PUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 25
30240: ST_TO_ADDR
// result := unit ;
30241: LD_ADDR_VAR 0 4
30245: PUSH
30246: LD_VAR 0 5
30250: ST_TO_ADDR
// end ;
30251: LD_VAR 0 4
30255: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30256: LD_INT 0
30258: PPUSH
30259: PPUSH
// if exist_mode then
30260: LD_VAR 0 2
30264: IFFALSE 30289
// unit := CreateCharacter ( prefix & ident ) else
30266: LD_ADDR_VAR 0 5
30270: PUSH
30271: LD_VAR 0 3
30275: PUSH
30276: LD_VAR 0 1
30280: STR
30281: PPUSH
30282: CALL_OW 34
30286: ST_TO_ADDR
30287: GO 30304
// unit := NewCharacter ( ident ) ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 25
30303: ST_TO_ADDR
// result := unit ;
30304: LD_ADDR_VAR 0 4
30308: PUSH
30309: LD_VAR 0 5
30313: ST_TO_ADDR
// end ;
30314: LD_VAR 0 4
30318: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30319: LD_INT 0
30321: PPUSH
30322: PPUSH
// if not side or not nation then
30323: LD_VAR 0 1
30327: NOT
30328: IFTRUE 30337
30330: PUSH
30331: LD_VAR 0 2
30335: NOT
30336: OR
30337: IFFALSE 30341
// exit ;
30339: GO 31135
// case nation of nation_american :
30341: LD_VAR 0 2
30345: PUSH
30346: LD_INT 1
30348: DOUBLE
30349: EQUAL
30350: IFTRUE 30354
30352: GO 30576
30354: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30355: LD_ADDR_VAR 0 4
30359: PUSH
30360: LD_INT 35
30362: PUSH
30363: LD_INT 45
30365: PUSH
30366: LD_INT 46
30368: PUSH
30369: LD_INT 47
30371: PUSH
30372: LD_INT 82
30374: PUSH
30375: LD_INT 83
30377: PUSH
30378: LD_INT 84
30380: PUSH
30381: LD_INT 85
30383: PUSH
30384: LD_INT 86
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: LD_INT 6
30395: PUSH
30396: LD_INT 15
30398: PUSH
30399: LD_INT 16
30401: PUSH
30402: LD_INT 7
30404: PUSH
30405: LD_INT 12
30407: PUSH
30408: LD_INT 13
30410: PUSH
30411: LD_INT 10
30413: PUSH
30414: LD_INT 14
30416: PUSH
30417: LD_INT 20
30419: PUSH
30420: LD_INT 21
30422: PUSH
30423: LD_INT 22
30425: PUSH
30426: LD_INT 25
30428: PUSH
30429: LD_INT 32
30431: PUSH
30432: LD_INT 27
30434: PUSH
30435: LD_INT 36
30437: PUSH
30438: LD_INT 69
30440: PUSH
30441: LD_INT 39
30443: PUSH
30444: LD_INT 34
30446: PUSH
30447: LD_INT 40
30449: PUSH
30450: LD_INT 48
30452: PUSH
30453: LD_INT 49
30455: PUSH
30456: LD_INT 50
30458: PUSH
30459: LD_INT 51
30461: PUSH
30462: LD_INT 52
30464: PUSH
30465: LD_INT 53
30467: PUSH
30468: LD_INT 54
30470: PUSH
30471: LD_INT 55
30473: PUSH
30474: LD_INT 56
30476: PUSH
30477: LD_INT 57
30479: PUSH
30480: LD_INT 58
30482: PUSH
30483: LD_INT 59
30485: PUSH
30486: LD_INT 60
30488: PUSH
30489: LD_INT 61
30491: PUSH
30492: LD_INT 62
30494: PUSH
30495: LD_INT 80
30497: PUSH
30498: LD_INT 82
30500: PUSH
30501: LD_INT 83
30503: PUSH
30504: LD_INT 84
30506: PUSH
30507: LD_INT 85
30509: PUSH
30510: LD_INT 86
30512: PUSH
30513: LD_INT 90
30515: PUSH
30516: LD_INT 93
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
30574: GO 31057
30576: LD_INT 2
30578: DOUBLE
30579: EQUAL
30580: IFTRUE 30584
30582: GO 30818
30584: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30585: LD_ADDR_VAR 0 4
30589: PUSH
30590: LD_INT 35
30592: PUSH
30593: LD_INT 45
30595: PUSH
30596: LD_INT 46
30598: PUSH
30599: LD_INT 47
30601: PUSH
30602: LD_INT 82
30604: PUSH
30605: LD_INT 83
30607: PUSH
30608: LD_INT 84
30610: PUSH
30611: LD_INT 85
30613: PUSH
30614: LD_INT 87
30616: PUSH
30617: LD_INT 70
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 11
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 4
30631: PUSH
30632: LD_INT 5
30634: PUSH
30635: LD_INT 6
30637: PUSH
30638: LD_INT 15
30640: PUSH
30641: LD_INT 18
30643: PUSH
30644: LD_INT 7
30646: PUSH
30647: LD_INT 17
30649: PUSH
30650: LD_INT 8
30652: PUSH
30653: LD_INT 20
30655: PUSH
30656: LD_INT 21
30658: PUSH
30659: LD_INT 22
30661: PUSH
30662: LD_INT 72
30664: PUSH
30665: LD_INT 26
30667: PUSH
30668: LD_INT 69
30670: PUSH
30671: LD_INT 39
30673: PUSH
30674: LD_INT 40
30676: PUSH
30677: LD_INT 41
30679: PUSH
30680: LD_INT 42
30682: PUSH
30683: LD_INT 43
30685: PUSH
30686: LD_INT 48
30688: PUSH
30689: LD_INT 49
30691: PUSH
30692: LD_INT 50
30694: PUSH
30695: LD_INT 51
30697: PUSH
30698: LD_INT 52
30700: PUSH
30701: LD_INT 53
30703: PUSH
30704: LD_INT 54
30706: PUSH
30707: LD_INT 55
30709: PUSH
30710: LD_INT 56
30712: PUSH
30713: LD_INT 60
30715: PUSH
30716: LD_INT 61
30718: PUSH
30719: LD_INT 62
30721: PUSH
30722: LD_INT 66
30724: PUSH
30725: LD_INT 67
30727: PUSH
30728: LD_INT 68
30730: PUSH
30731: LD_INT 81
30733: PUSH
30734: LD_INT 82
30736: PUSH
30737: LD_INT 83
30739: PUSH
30740: LD_INT 84
30742: PUSH
30743: LD_INT 85
30745: PUSH
30746: LD_INT 87
30748: PUSH
30749: LD_INT 88
30751: PUSH
30752: LD_INT 92
30754: PUSH
30755: LD_INT 94
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
30816: GO 31057
30818: LD_INT 3
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 31056
30826: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30827: LD_ADDR_VAR 0 4
30831: PUSH
30832: LD_INT 46
30834: PUSH
30835: LD_INT 47
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 82
30846: PUSH
30847: LD_INT 83
30849: PUSH
30850: LD_INT 84
30852: PUSH
30853: LD_INT 85
30855: PUSH
30856: LD_INT 86
30858: PUSH
30859: LD_INT 11
30861: PUSH
30862: LD_INT 9
30864: PUSH
30865: LD_INT 20
30867: PUSH
30868: LD_INT 19
30870: PUSH
30871: LD_INT 21
30873: PUSH
30874: LD_INT 24
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_INT 25
30882: PUSH
30883: LD_INT 28
30885: PUSH
30886: LD_INT 29
30888: PUSH
30889: LD_INT 30
30891: PUSH
30892: LD_INT 31
30894: PUSH
30895: LD_INT 37
30897: PUSH
30898: LD_INT 38
30900: PUSH
30901: LD_INT 32
30903: PUSH
30904: LD_INT 27
30906: PUSH
30907: LD_INT 33
30909: PUSH
30910: LD_INT 69
30912: PUSH
30913: LD_INT 39
30915: PUSH
30916: LD_INT 34
30918: PUSH
30919: LD_INT 40
30921: PUSH
30922: LD_INT 71
30924: PUSH
30925: LD_INT 23
30927: PUSH
30928: LD_INT 44
30930: PUSH
30931: LD_INT 48
30933: PUSH
30934: LD_INT 49
30936: PUSH
30937: LD_INT 50
30939: PUSH
30940: LD_INT 51
30942: PUSH
30943: LD_INT 52
30945: PUSH
30946: LD_INT 53
30948: PUSH
30949: LD_INT 54
30951: PUSH
30952: LD_INT 55
30954: PUSH
30955: LD_INT 56
30957: PUSH
30958: LD_INT 57
30960: PUSH
30961: LD_INT 58
30963: PUSH
30964: LD_INT 59
30966: PUSH
30967: LD_INT 63
30969: PUSH
30970: LD_INT 64
30972: PUSH
30973: LD_INT 65
30975: PUSH
30976: LD_INT 82
30978: PUSH
30979: LD_INT 83
30981: PUSH
30982: LD_INT 84
30984: PUSH
30985: LD_INT 85
30987: PUSH
30988: LD_INT 86
30990: PUSH
30991: LD_INT 89
30993: PUSH
30994: LD_INT 91
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
31054: GO 31057
31056: POP
// if state > - 1 and state < 3 then
31057: LD_VAR 0 3
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: GREATER
31066: IFFALSE 31078
31068: PUSH
31069: LD_VAR 0 3
31073: PUSH
31074: LD_INT 3
31076: LESS
31077: AND
31078: IFFALSE 31135
// for i in result do
31080: LD_ADDR_VAR 0 5
31084: PUSH
31085: LD_VAR 0 4
31089: PUSH
31090: FOR_IN
31091: IFFALSE 31133
// if GetTech ( i , side ) <> state then
31093: LD_VAR 0 5
31097: PPUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 321
31107: PUSH
31108: LD_VAR 0 3
31112: NONEQUAL
31113: IFFALSE 31131
// result := result diff i ;
31115: LD_ADDR_VAR 0 4
31119: PUSH
31120: LD_VAR 0 4
31124: PUSH
31125: LD_VAR 0 5
31129: DIFF
31130: ST_TO_ADDR
31131: GO 31090
31133: POP
31134: POP
// end ;
31135: LD_VAR 0 4
31139: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31140: LD_INT 0
31142: PPUSH
31143: PPUSH
31144: PPUSH
// result := true ;
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 1
31152: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_VAR 0 2
31162: PPUSH
31163: CALL_OW 480
31167: ST_TO_ADDR
// if not tmp then
31168: LD_VAR 0 5
31172: NOT
31173: IFFALSE 31177
// exit ;
31175: GO 31226
// for i in tmp do
31177: LD_ADDR_VAR 0 4
31181: PUSH
31182: LD_VAR 0 5
31186: PUSH
31187: FOR_IN
31188: IFFALSE 31224
// if GetTech ( i , side ) <> state_researched then
31190: LD_VAR 0 4
31194: PPUSH
31195: LD_VAR 0 1
31199: PPUSH
31200: CALL_OW 321
31204: PUSH
31205: LD_INT 2
31207: NONEQUAL
31208: IFFALSE 31222
// begin result := false ;
31210: LD_ADDR_VAR 0 3
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// exit ;
31218: POP
31219: POP
31220: GO 31226
// end ;
31222: GO 31187
31224: POP
31225: POP
// end ;
31226: LD_VAR 0 3
31230: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31231: LD_INT 0
31233: PPUSH
31234: PPUSH
31235: PPUSH
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31246: LD_VAR 0 1
31250: NOT
31251: IFTRUE 31268
31253: PUSH
31254: LD_VAR 0 1
31258: PPUSH
31259: CALL_OW 257
31263: PUSH
31264: LD_INT 9
31266: NONEQUAL
31267: OR
31268: IFFALSE 31272
// exit ;
31270: GO 31851
// side := GetSide ( unit ) ;
31272: LD_ADDR_VAR 0 9
31276: PUSH
31277: LD_VAR 0 1
31281: PPUSH
31282: CALL_OW 255
31286: ST_TO_ADDR
// tech_space := tech_spacanom ;
31287: LD_ADDR_VAR 0 12
31291: PUSH
31292: LD_INT 29
31294: ST_TO_ADDR
// tech_time := tech_taurad ;
31295: LD_ADDR_VAR 0 13
31299: PUSH
31300: LD_INT 28
31302: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31303: LD_ADDR_VAR 0 11
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 310
31317: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31318: LD_VAR 0 11
31322: PPUSH
31323: CALL_OW 247
31327: PUSH
31328: LD_INT 2
31330: EQUAL
31331: IFFALSE 31335
// exit ;
31333: GO 31851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31335: LD_ADDR_VAR 0 8
31339: PUSH
31340: LD_INT 81
31342: PUSH
31343: LD_VAR 0 9
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: LD_INT 21
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PPUSH
31373: CALL_OW 69
31377: ST_TO_ADDR
// if not tmp then
31378: LD_VAR 0 8
31382: NOT
31383: IFFALSE 31387
// exit ;
31385: GO 31851
// if in_unit then
31387: LD_VAR 0 11
31391: IFFALSE 31415
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31393: LD_ADDR_VAR 0 10
31397: PUSH
31398: LD_VAR 0 8
31402: PPUSH
31403: LD_VAR 0 11
31407: PPUSH
31408: CALL_OW 74
31412: ST_TO_ADDR
31413: GO 31435
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31415: LD_ADDR_VAR 0 10
31419: PUSH
31420: LD_VAR 0 8
31424: PPUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 74
31434: ST_TO_ADDR
// if not enemy then
31435: LD_VAR 0 10
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 31851
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31444: LD_VAR 0 11
31448: IFFALSE 31470
31450: PUSH
31451: LD_VAR 0 11
31455: PPUSH
31456: LD_VAR 0 10
31460: PPUSH
31461: CALL_OW 296
31465: PUSH
31466: LD_INT 13
31468: GREATER
31469: AND
31470: IFTRUE 31492
31472: PUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_VAR 0 10
31482: PPUSH
31483: CALL_OW 296
31487: PUSH
31488: LD_INT 12
31490: GREATER
31491: OR
31492: IFFALSE 31496
// exit ;
31494: GO 31851
// missile := [ 1 ] ;
31496: LD_ADDR_VAR 0 14
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31507: LD_VAR 0 9
31511: PPUSH
31512: LD_VAR 0 12
31516: PPUSH
31517: CALL_OW 325
31521: IFFALSE 31550
// missile := Replace ( missile , missile + 1 , 2 ) ;
31523: LD_ADDR_VAR 0 14
31527: PUSH
31528: LD_VAR 0 14
31532: PPUSH
31533: LD_VAR 0 14
31537: PUSH
31538: LD_INT 1
31540: PLUS
31541: PPUSH
31542: LD_INT 2
31544: PPUSH
31545: CALL_OW 1
31549: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31550: LD_VAR 0 9
31554: PPUSH
31555: LD_VAR 0 13
31559: PPUSH
31560: CALL_OW 325
31564: IFFALSE 31588
31566: PUSH
31567: LD_VAR 0 10
31571: PPUSH
31572: CALL_OW 255
31576: PPUSH
31577: LD_VAR 0 13
31581: PPUSH
31582: CALL_OW 325
31586: NOT
31587: AND
31588: IFFALSE 31617
// missile := Replace ( missile , missile + 1 , 3 ) ;
31590: LD_ADDR_VAR 0 14
31594: PUSH
31595: LD_VAR 0 14
31599: PPUSH
31600: LD_VAR 0 14
31604: PUSH
31605: LD_INT 1
31607: PLUS
31608: PPUSH
31609: LD_INT 3
31611: PPUSH
31612: CALL_OW 1
31616: ST_TO_ADDR
// if missile < 2 then
31617: LD_VAR 0 14
31621: PUSH
31622: LD_INT 2
31624: LESS
31625: IFFALSE 31629
// exit ;
31627: GO 31851
// x := GetX ( enemy ) ;
31629: LD_ADDR_VAR 0 4
31633: PUSH
31634: LD_VAR 0 10
31638: PPUSH
31639: CALL_OW 250
31643: ST_TO_ADDR
// y := GetY ( enemy ) ;
31644: LD_ADDR_VAR 0 5
31648: PUSH
31649: LD_VAR 0 10
31653: PPUSH
31654: CALL_OW 251
31658: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31659: LD_ADDR_VAR 0 6
31663: PUSH
31664: LD_VAR 0 4
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PPUSH
31673: LD_INT 1
31675: PPUSH
31676: CALL_OW 12
31680: PLUS
31681: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31682: LD_ADDR_VAR 0 7
31686: PUSH
31687: LD_VAR 0 5
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PPUSH
31696: LD_INT 1
31698: PPUSH
31699: CALL_OW 12
31703: PLUS
31704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31705: LD_VAR 0 6
31709: PPUSH
31710: LD_VAR 0 7
31714: PPUSH
31715: CALL_OW 488
31719: NOT
31720: IFFALSE 31742
// begin _x := x ;
31722: LD_ADDR_VAR 0 6
31726: PUSH
31727: LD_VAR 0 4
31731: ST_TO_ADDR
// _y := y ;
31732: LD_ADDR_VAR 0 7
31736: PUSH
31737: LD_VAR 0 5
31741: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_INT 1
31749: PPUSH
31750: LD_VAR 0 14
31754: PPUSH
31755: CALL_OW 12
31759: ST_TO_ADDR
// case i of 1 :
31760: LD_VAR 0 3
31764: PUSH
31765: LD_INT 1
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31790
31773: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31774: LD_VAR 0 1
31778: PPUSH
31779: LD_VAR 0 10
31783: PPUSH
31784: CALL_OW 115
31788: GO 31851
31790: LD_INT 2
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31820
31798: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31799: LD_VAR 0 1
31803: PPUSH
31804: LD_VAR 0 6
31808: PPUSH
31809: LD_VAR 0 7
31813: PPUSH
31814: CALL_OW 153
31818: GO 31851
31820: LD_INT 3
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 31850
31828: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31829: LD_VAR 0 1
31833: PPUSH
31834: LD_VAR 0 6
31838: PPUSH
31839: LD_VAR 0 7
31843: PPUSH
31844: CALL_OW 154
31848: GO 31851
31850: POP
// end ;
31851: LD_VAR 0 2
31855: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31856: LD_INT 0
31858: PPUSH
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
31863: PPUSH
// if not unit or not building then
31864: LD_VAR 0 1
31868: NOT
31869: IFTRUE 31878
31871: PUSH
31872: LD_VAR 0 2
31876: NOT
31877: OR
31878: IFFALSE 31882
// exit ;
31880: GO 32040
// x := GetX ( building ) ;
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: LD_VAR 0 2
31891: PPUSH
31892: CALL_OW 250
31896: ST_TO_ADDR
// y := GetY ( building ) ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_VAR 0 2
31906: PPUSH
31907: CALL_OW 251
31911: ST_TO_ADDR
// for i := 0 to 5 do
31912: LD_ADDR_VAR 0 4
31916: PUSH
31917: DOUBLE
31918: LD_INT 0
31920: DEC
31921: ST_TO_ADDR
31922: LD_INT 5
31924: PUSH
31925: FOR_TO
31926: IFFALSE 32038
// begin _x := ShiftX ( x , i , 3 ) ;
31928: LD_ADDR_VAR 0 7
31932: PUSH
31933: LD_VAR 0 5
31937: PPUSH
31938: LD_VAR 0 4
31942: PPUSH
31943: LD_INT 3
31945: PPUSH
31946: CALL_OW 272
31950: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31951: LD_ADDR_VAR 0 8
31955: PUSH
31956: LD_VAR 0 6
31960: PPUSH
31961: LD_VAR 0 4
31965: PPUSH
31966: LD_INT 3
31968: PPUSH
31969: CALL_OW 273
31973: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31974: LD_VAR 0 7
31978: PPUSH
31979: LD_VAR 0 8
31983: PPUSH
31984: CALL_OW 488
31988: NOT
31989: IFFALSE 31993
// continue ;
31991: GO 31925
// if HexInfo ( _x , _y ) = 0 then
31993: LD_VAR 0 7
31997: PPUSH
31998: LD_VAR 0 8
32002: PPUSH
32003: CALL_OW 428
32007: PUSH
32008: LD_INT 0
32010: EQUAL
32011: IFFALSE 32036
// begin ComMoveXY ( unit , _x , _y ) ;
32013: LD_VAR 0 1
32017: PPUSH
32018: LD_VAR 0 7
32022: PPUSH
32023: LD_VAR 0 8
32027: PPUSH
32028: CALL_OW 111
// exit ;
32032: POP
32033: POP
32034: GO 32040
// end ; end ;
32036: GO 31925
32038: POP
32039: POP
// end ;
32040: LD_VAR 0 3
32044: RET
// export function ScanBase ( side , base_area ) ; begin
32045: LD_INT 0
32047: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32048: LD_ADDR_VAR 0 3
32052: PUSH
32053: LD_VAR 0 2
32057: PPUSH
32058: LD_INT 81
32060: PUSH
32061: LD_VAR 0 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PPUSH
32070: CALL_OW 70
32074: ST_TO_ADDR
// end ;
32075: LD_VAR 0 3
32079: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
// result := false ;
32086: LD_ADDR_VAR 0 2
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// side := GetSide ( unit ) ;
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL_OW 255
32108: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32109: LD_ADDR_VAR 0 4
32113: PUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 248
32123: ST_TO_ADDR
// case nat of 1 :
32124: LD_VAR 0 4
32128: PUSH
32129: LD_INT 1
32131: DOUBLE
32132: EQUAL
32133: IFTRUE 32137
32135: GO 32148
32137: POP
// tech := tech_lassight ; 2 :
32138: LD_ADDR_VAR 0 5
32142: PUSH
32143: LD_INT 12
32145: ST_TO_ADDR
32146: GO 32187
32148: LD_INT 2
32150: DOUBLE
32151: EQUAL
32152: IFTRUE 32156
32154: GO 32167
32156: POP
// tech := tech_mortar ; 3 :
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: LD_INT 41
32164: ST_TO_ADDR
32165: GO 32187
32167: LD_INT 3
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32186
32175: POP
// tech := tech_bazooka ; end ;
32176: LD_ADDR_VAR 0 5
32180: PUSH
32181: LD_INT 44
32183: ST_TO_ADDR
32184: GO 32187
32186: POP
// if Researched ( side , tech ) then
32187: LD_VAR 0 3
32191: PPUSH
32192: LD_VAR 0 5
32196: PPUSH
32197: CALL_OW 325
32201: IFFALSE 32228
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32203: LD_ADDR_VAR 0 2
32207: PUSH
32208: LD_INT 5
32210: PUSH
32211: LD_INT 8
32213: PUSH
32214: LD_INT 9
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: PUSH
32222: LD_VAR 0 4
32226: ARRAY
32227: ST_TO_ADDR
// end ;
32228: LD_VAR 0 2
32232: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32233: LD_INT 0
32235: PPUSH
32236: PPUSH
32237: PPUSH
// if not mines then
32238: LD_VAR 0 2
32242: NOT
32243: IFFALSE 32247
// exit ;
32245: GO 32391
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32247: LD_ADDR_VAR 0 5
32251: PUSH
32252: LD_INT 81
32254: PUSH
32255: LD_VAR 0 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: LD_INT 21
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PPUSH
32285: CALL_OW 69
32289: ST_TO_ADDR
// for i in mines do
32290: LD_ADDR_VAR 0 4
32294: PUSH
32295: LD_VAR 0 2
32299: PUSH
32300: FOR_IN
32301: IFFALSE 32389
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32303: LD_VAR 0 4
32307: PUSH
32308: LD_INT 1
32310: ARRAY
32311: PPUSH
32312: LD_VAR 0 4
32316: PUSH
32317: LD_INT 2
32319: ARRAY
32320: PPUSH
32321: CALL_OW 458
32325: NOT
32326: IFFALSE 32330
// continue ;
32328: GO 32300
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32330: LD_VAR 0 4
32334: PUSH
32335: LD_INT 1
32337: ARRAY
32338: PPUSH
32339: LD_VAR 0 4
32343: PUSH
32344: LD_INT 2
32346: ARRAY
32347: PPUSH
32348: CALL_OW 428
32352: PUSH
32353: LD_VAR 0 5
32357: IN
32358: IFFALSE 32387
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32360: LD_VAR 0 4
32364: PUSH
32365: LD_INT 1
32367: ARRAY
32368: PPUSH
32369: LD_VAR 0 4
32373: PUSH
32374: LD_INT 2
32376: ARRAY
32377: PPUSH
32378: LD_VAR 0 1
32382: PPUSH
32383: CALL_OW 456
// end ;
32387: GO 32300
32389: POP
32390: POP
// end ;
32391: LD_VAR 0 3
32395: RET
// export function Count ( array ) ; begin
32396: LD_INT 0
32398: PPUSH
// result := array + 0 ;
32399: LD_ADDR_VAR 0 2
32403: PUSH
32404: LD_VAR 0 1
32408: PUSH
32409: LD_INT 0
32411: PLUS
32412: ST_TO_ADDR
// end ;
32413: LD_VAR 0 2
32417: RET
// export function IsEmpty ( building ) ; begin
32418: LD_INT 0
32420: PPUSH
// if not building then
32421: LD_VAR 0 1
32425: NOT
32426: IFFALSE 32430
// exit ;
32428: GO 32473
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32430: LD_ADDR_VAR 0 2
32434: PUSH
32435: LD_VAR 0 1
32439: PUSH
32440: LD_INT 22
32442: PUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: CALL_OW 255
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 58
32459: PUSH
32460: EMPTY
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PPUSH
32467: CALL_OW 69
32471: IN
32472: ST_TO_ADDR
// end ;
32473: LD_VAR 0 2
32477: RET
// export function IsNotFull ( building ) ; var places ; begin
32478: LD_INT 0
32480: PPUSH
32481: PPUSH
// if not building then
32482: LD_VAR 0 1
32486: NOT
32487: IFFALSE 32491
// exit ;
32489: GO 32519
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32491: LD_ADDR_VAR 0 2
32495: PUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_INT 3
32503: PUSH
32504: LD_INT 62
32506: PUSH
32507: EMPTY
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 72
32518: ST_TO_ADDR
// end ;
32519: LD_VAR 0 2
32523: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32524: LD_INT 0
32526: PPUSH
32527: PPUSH
32528: PPUSH
32529: PPUSH
// tmp := [ ] ;
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: EMPTY
32536: ST_TO_ADDR
// list := [ ] ;
32537: LD_ADDR_VAR 0 5
32541: PUSH
32542: EMPTY
32543: ST_TO_ADDR
// for i = 16 to 25 do
32544: LD_ADDR_VAR 0 4
32548: PUSH
32549: DOUBLE
32550: LD_INT 16
32552: DEC
32553: ST_TO_ADDR
32554: LD_INT 25
32556: PUSH
32557: FOR_TO
32558: IFFALSE 32631
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32560: LD_ADDR_VAR 0 3
32564: PUSH
32565: LD_VAR 0 3
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 255
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 91
32589: PUSH
32590: LD_VAR 0 1
32594: PUSH
32595: LD_INT 6
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 30
32605: PUSH
32606: LD_VAR 0 4
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: PPUSH
32623: CALL_OW 69
32627: ADD
32628: ST_TO_ADDR
32629: GO 32557
32631: POP
32632: POP
// for i = 1 to tmp do
32633: LD_ADDR_VAR 0 4
32637: PUSH
32638: DOUBLE
32639: LD_INT 1
32641: DEC
32642: ST_TO_ADDR
32643: LD_VAR 0 3
32647: PUSH
32648: FOR_TO
32649: IFFALSE 32737
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32651: LD_ADDR_VAR 0 5
32655: PUSH
32656: LD_VAR 0 5
32660: PUSH
32661: LD_VAR 0 3
32665: PUSH
32666: LD_VAR 0 4
32670: ARRAY
32671: PPUSH
32672: CALL_OW 266
32676: PUSH
32677: LD_VAR 0 3
32681: PUSH
32682: LD_VAR 0 4
32686: ARRAY
32687: PPUSH
32688: CALL_OW 250
32692: PUSH
32693: LD_VAR 0 3
32697: PUSH
32698: LD_VAR 0 4
32702: ARRAY
32703: PPUSH
32704: CALL_OW 251
32708: PUSH
32709: LD_VAR 0 3
32713: PUSH
32714: LD_VAR 0 4
32718: ARRAY
32719: PPUSH
32720: CALL_OW 254
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: ADD
32734: ST_TO_ADDR
32735: GO 32648
32737: POP
32738: POP
// result := list ;
32739: LD_ADDR_VAR 0 2
32743: PUSH
32744: LD_VAR 0 5
32748: ST_TO_ADDR
// end ;
32749: LD_VAR 0 2
32753: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32754: LD_INT 0
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
// if not factory then
32763: LD_VAR 0 1
32767: NOT
32768: IFFALSE 32772
// exit ;
32770: GO 33375
// if control = control_apeman then
32772: LD_VAR 0 4
32776: PUSH
32777: LD_INT 5
32779: EQUAL
32780: IFFALSE 32889
// begin tmp := UnitsInside ( factory ) ;
32782: LD_ADDR_VAR 0 8
32786: PUSH
32787: LD_VAR 0 1
32791: PPUSH
32792: CALL_OW 313
32796: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32797: LD_VAR 0 8
32801: PPUSH
32802: LD_INT 25
32804: PUSH
32805: LD_INT 12
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PPUSH
32812: CALL_OW 72
32816: NOT
32817: IFFALSE 32827
// control := control_manual ;
32819: LD_ADDR_VAR 0 4
32823: PUSH
32824: LD_INT 1
32826: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32827: LD_ADDR_VAR 0 8
32831: PUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: CALL 32524 0 1
32841: ST_TO_ADDR
// if tmp then
32842: LD_VAR 0 8
32846: IFFALSE 32889
// begin for i in tmp do
32848: LD_ADDR_VAR 0 7
32852: PUSH
32853: LD_VAR 0 8
32857: PUSH
32858: FOR_IN
32859: IFFALSE 32887
// if i [ 1 ] = b_ext_radio then
32861: LD_VAR 0 7
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PUSH
32870: LD_INT 22
32872: EQUAL
32873: IFFALSE 32885
// begin control := control_remote ;
32875: LD_ADDR_VAR 0 4
32879: PUSH
32880: LD_INT 2
32882: ST_TO_ADDR
// break ;
32883: GO 32887
// end ;
32885: GO 32858
32887: POP
32888: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32889: LD_VAR 0 1
32893: PPUSH
32894: LD_VAR 0 2
32898: PPUSH
32899: LD_VAR 0 3
32903: PPUSH
32904: LD_VAR 0 4
32908: PPUSH
32909: LD_VAR 0 5
32913: PPUSH
32914: CALL_OW 448
32918: IFFALSE 32953
// begin result := [ chassis , engine , control , weapon ] ;
32920: LD_ADDR_VAR 0 6
32924: PUSH
32925: LD_VAR 0 2
32929: PUSH
32930: LD_VAR 0 3
32934: PUSH
32935: LD_VAR 0 4
32939: PUSH
32940: LD_VAR 0 5
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
// exit ;
32951: GO 33375
// end ; _chassis := AvailableChassisList ( factory ) ;
32953: LD_ADDR_VAR 0 9
32957: PUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL_OW 475
32967: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32968: LD_ADDR_VAR 0 11
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 476
32982: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32983: LD_ADDR_VAR 0 12
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 477
32997: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32998: LD_ADDR_VAR 0 10
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 478
33012: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33013: LD_VAR 0 9
33017: NOT
33018: IFTRUE 33027
33020: PUSH
33021: LD_VAR 0 11
33025: NOT
33026: OR
33027: IFTRUE 33036
33029: PUSH
33030: LD_VAR 0 12
33034: NOT
33035: OR
33036: IFTRUE 33045
33038: PUSH
33039: LD_VAR 0 10
33043: NOT
33044: OR
33045: IFFALSE 33080
// begin result := [ chassis , engine , control , weapon ] ;
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: LD_VAR 0 2
33056: PUSH
33057: LD_VAR 0 3
33061: PUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_VAR 0 5
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// exit ;
33078: GO 33375
// end ; if not chassis in _chassis then
33080: LD_VAR 0 2
33084: PUSH
33085: LD_VAR 0 9
33089: IN
33090: NOT
33091: IFFALSE 33117
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33093: LD_ADDR_VAR 0 2
33097: PUSH
33098: LD_VAR 0 9
33102: PUSH
33103: LD_INT 1
33105: PPUSH
33106: LD_VAR 0 9
33110: PPUSH
33111: CALL_OW 12
33115: ARRAY
33116: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33117: LD_VAR 0 2
33121: PPUSH
33122: LD_VAR 0 3
33126: PPUSH
33127: CALL 33380 0 2
33131: NOT
33132: IFFALSE 33193
// repeat engine := _engine [ 1 ] ;
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_VAR 0 11
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33148: LD_ADDR_VAR 0 11
33152: PUSH
33153: LD_VAR 0 11
33157: PPUSH
33158: LD_INT 1
33160: PPUSH
33161: CALL_OW 3
33165: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33166: LD_VAR 0 2
33170: PPUSH
33171: LD_VAR 0 3
33175: PPUSH
33176: CALL 33380 0 2
33180: IFTRUE 33191
33182: PUSH
33183: LD_VAR 0 11
33187: PUSH
33188: EMPTY
33189: EQUAL
33190: OR
33191: IFFALSE 33134
// if not control in _control then
33193: LD_VAR 0 4
33197: PUSH
33198: LD_VAR 0 12
33202: IN
33203: NOT
33204: IFFALSE 33230
// control := _control [ rand ( 1 , _control ) ] ;
33206: LD_ADDR_VAR 0 4
33210: PUSH
33211: LD_VAR 0 12
33215: PUSH
33216: LD_INT 1
33218: PPUSH
33219: LD_VAR 0 12
33223: PPUSH
33224: CALL_OW 12
33228: ARRAY
33229: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33230: LD_VAR 0 2
33234: PPUSH
33235: LD_VAR 0 5
33239: PPUSH
33240: CALL 33602 0 2
33244: NOT
33245: IFFALSE 33306
// repeat weapon := _weapon [ 1 ] ;
33247: LD_ADDR_VAR 0 5
33251: PUSH
33252: LD_VAR 0 10
33256: PUSH
33257: LD_INT 1
33259: ARRAY
33260: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33261: LD_ADDR_VAR 0 10
33265: PUSH
33266: LD_VAR 0 10
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: CALL_OW 3
33278: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33279: LD_VAR 0 2
33283: PPUSH
33284: LD_VAR 0 5
33288: PPUSH
33289: CALL 33602 0 2
33293: IFTRUE 33304
33295: PUSH
33296: LD_VAR 0 10
33300: PUSH
33301: EMPTY
33302: EQUAL
33303: OR
33304: IFFALSE 33247
// result := [ ] ;
33306: LD_ADDR_VAR 0 6
33310: PUSH
33311: EMPTY
33312: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33313: LD_VAR 0 1
33317: PPUSH
33318: LD_VAR 0 2
33322: PPUSH
33323: LD_VAR 0 3
33327: PPUSH
33328: LD_VAR 0 4
33332: PPUSH
33333: LD_VAR 0 5
33337: PPUSH
33338: CALL_OW 448
33342: IFFALSE 33375
// result := [ chassis , engine , control , weapon ] ;
33344: LD_ADDR_VAR 0 6
33348: PUSH
33349: LD_VAR 0 2
33353: PUSH
33354: LD_VAR 0 3
33358: PUSH
33359: LD_VAR 0 4
33363: PUSH
33364: LD_VAR 0 5
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: ST_TO_ADDR
// end ;
33375: LD_VAR 0 6
33379: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33380: LD_INT 0
33382: PPUSH
// if not chassis or not engine then
33383: LD_VAR 0 1
33387: NOT
33388: IFTRUE 33397
33390: PUSH
33391: LD_VAR 0 2
33395: NOT
33396: OR
33397: IFFALSE 33401
// exit ;
33399: GO 33597
// case engine of engine_solar :
33401: LD_VAR 0 2
33405: PUSH
33406: LD_INT 2
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33452
33414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33415: LD_ADDR_VAR 0 3
33419: PUSH
33420: LD_INT 11
33422: PUSH
33423: LD_INT 12
33425: PUSH
33426: LD_INT 13
33428: PUSH
33429: LD_INT 14
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
33450: GO 33581
33452: LD_INT 1
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33522
33460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 11
33468: PUSH
33469: LD_INT 12
33471: PUSH
33472: LD_INT 13
33474: PUSH
33475: LD_INT 14
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: LD_INT 5
33492: PUSH
33493: LD_INT 21
33495: PUSH
33496: LD_INT 23
33498: PUSH
33499: LD_INT 22
33501: PUSH
33502: LD_INT 24
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
33520: GO 33581
33522: LD_INT 3
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33530
33528: GO 33580
33530: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33531: LD_ADDR_VAR 0 3
33535: PUSH
33536: LD_INT 13
33538: PUSH
33539: LD_INT 14
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: LD_INT 21
33556: PUSH
33557: LD_INT 22
33559: PUSH
33560: LD_INT 23
33562: PUSH
33563: LD_INT 24
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
33578: GO 33581
33580: POP
// result := ( chassis in result ) ;
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_VAR 0 1
33590: PUSH
33591: LD_VAR 0 3
33595: IN
33596: ST_TO_ADDR
// end ;
33597: LD_VAR 0 3
33601: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33602: LD_INT 0
33604: PPUSH
// if not chassis or not weapon then
33605: LD_VAR 0 1
33609: NOT
33610: IFTRUE 33619
33612: PUSH
33613: LD_VAR 0 2
33617: NOT
33618: OR
33619: IFFALSE 33623
// exit ;
33621: GO 34717
// case weapon of us_machine_gun :
33623: LD_VAR 0 2
33627: PUSH
33628: LD_INT 2
33630: DOUBLE
33631: EQUAL
33632: IFTRUE 33636
33634: GO 33666
33636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 4
33653: PUSH
33654: LD_INT 5
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
33664: GO 34701
33666: LD_INT 3
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33674
33672: GO 33704
33674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33675: LD_ADDR_VAR 0 3
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 4
33691: PUSH
33692: LD_INT 5
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
33702: GO 34701
33704: LD_INT 11
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33742
33712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 3
33726: PUSH
33727: LD_INT 4
33729: PUSH
33730: LD_INT 5
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
33740: GO 34701
33742: LD_INT 4
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33776
33750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
33774: GO 34701
33776: LD_INT 5
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33784
33782: GO 33810
33784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33785: LD_ADDR_VAR 0 3
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 5
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34701
33810: LD_INT 9
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33844
33818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 4
33832: PUSH
33833: LD_INT 5
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 34701
33844: LD_INT 7
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33878
33852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
33876: GO 34701
33878: LD_INT 12
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33912
33886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 34701
33912: LD_INT 13
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33946
33920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: LD_INT 4
33934: PUSH
33935: LD_INT 5
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
33944: GO 34701
33946: LD_INT 14
33948: DOUBLE
33949: EQUAL
33950: IFTRUE 33954
33952: GO 33972
33954: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33955: LD_ADDR_VAR 0 3
33959: PUSH
33960: LD_INT 4
33962: PUSH
33963: LD_INT 5
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: ST_TO_ADDR
33970: GO 34701
33972: LD_INT 6
33974: DOUBLE
33975: EQUAL
33976: IFTRUE 33980
33978: GO 33998
33980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33981: LD_ADDR_VAR 0 3
33985: PUSH
33986: LD_INT 4
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: ST_TO_ADDR
33996: GO 34701
33998: LD_INT 10
34000: DOUBLE
34001: EQUAL
34002: IFTRUE 34006
34004: GO 34024
34006: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34007: LD_ADDR_VAR 0 3
34011: PUSH
34012: LD_INT 4
34014: PUSH
34015: LD_INT 5
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: ST_TO_ADDR
34022: GO 34701
34024: LD_INT 22
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34058
34032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 11
34040: PUSH
34041: LD_INT 12
34043: PUSH
34044: LD_INT 13
34046: PUSH
34047: LD_INT 14
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34701
34058: LD_INT 23
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34092
34066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 11
34074: PUSH
34075: LD_INT 12
34077: PUSH
34078: LD_INT 13
34080: PUSH
34081: LD_INT 14
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
34090: GO 34701
34092: LD_INT 24
34094: DOUBLE
34095: EQUAL
34096: IFTRUE 34100
34098: GO 34126
34100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34101: LD_ADDR_VAR 0 3
34105: PUSH
34106: LD_INT 11
34108: PUSH
34109: LD_INT 12
34111: PUSH
34112: LD_INT 13
34114: PUSH
34115: LD_INT 14
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: ST_TO_ADDR
34124: GO 34701
34126: LD_INT 30
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34134
34132: GO 34160
34134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_INT 11
34142: PUSH
34143: LD_INT 12
34145: PUSH
34146: LD_INT 13
34148: PUSH
34149: LD_INT 14
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
34158: GO 34701
34160: LD_INT 25
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34186
34168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_INT 13
34176: PUSH
34177: LD_INT 14
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: ST_TO_ADDR
34184: GO 34701
34186: LD_INT 27
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34212
34194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34195: LD_ADDR_VAR 0 3
34199: PUSH
34200: LD_INT 13
34202: PUSH
34203: LD_INT 14
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: ST_TO_ADDR
34210: GO 34701
34212: LD_INT 92
34214: DOUBLE
34215: EQUAL
34216: IFTRUE 34220
34218: GO 34246
34220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34221: LD_ADDR_VAR 0 3
34225: PUSH
34226: LD_INT 11
34228: PUSH
34229: LD_INT 12
34231: PUSH
34232: LD_INT 13
34234: PUSH
34235: LD_INT 14
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
34244: GO 34701
34246: LD_INT 28
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34272
34254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34255: LD_ADDR_VAR 0 3
34259: PUSH
34260: LD_INT 13
34262: PUSH
34263: LD_INT 14
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: ST_TO_ADDR
34270: GO 34701
34272: LD_INT 29
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34298
34280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 13
34288: PUSH
34289: LD_INT 14
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: ST_TO_ADDR
34296: GO 34701
34298: LD_INT 31
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34306
34304: GO 34324
34306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 13
34314: PUSH
34315: LD_INT 14
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: ST_TO_ADDR
34322: GO 34701
34324: LD_INT 26
34326: DOUBLE
34327: EQUAL
34328: IFTRUE 34332
34330: GO 34350
34332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 13
34340: PUSH
34341: LD_INT 14
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: ST_TO_ADDR
34348: GO 34701
34350: LD_INT 42
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34384
34358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_INT 21
34366: PUSH
34367: LD_INT 22
34369: PUSH
34370: LD_INT 23
34372: PUSH
34373: LD_INT 24
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
34382: GO 34701
34384: LD_INT 43
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34418
34392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 21
34400: PUSH
34401: LD_INT 22
34403: PUSH
34404: LD_INT 23
34406: PUSH
34407: LD_INT 24
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 34701
34418: LD_INT 44
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 21
34434: PUSH
34435: LD_INT 22
34437: PUSH
34438: LD_INT 23
34440: PUSH
34441: LD_INT 24
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34701
34452: LD_INT 45
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34486
34460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 22
34471: PUSH
34472: LD_INT 23
34474: PUSH
34475: LD_INT 24
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
34484: GO 34701
34486: LD_INT 49
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34520
34494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_INT 23
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
34518: GO 34701
34520: LD_INT 51
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34528
34526: GO 34554
34528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34529: LD_ADDR_VAR 0 3
34533: PUSH
34534: LD_INT 21
34536: PUSH
34537: LD_INT 22
34539: PUSH
34540: LD_INT 23
34542: PUSH
34543: LD_INT 24
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
34552: GO 34701
34554: LD_INT 52
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34562
34560: GO 34588
34562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_INT 21
34570: PUSH
34571: LD_INT 22
34573: PUSH
34574: LD_INT 23
34576: PUSH
34577: LD_INT 24
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 34701
34588: LD_INT 53
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34614
34596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34597: LD_ADDR_VAR 0 3
34601: PUSH
34602: LD_INT 23
34604: PUSH
34605: LD_INT 24
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: ST_TO_ADDR
34612: GO 34701
34614: LD_INT 46
34616: DOUBLE
34617: EQUAL
34618: IFTRUE 34622
34620: GO 34640
34622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34623: LD_ADDR_VAR 0 3
34627: PUSH
34628: LD_INT 23
34630: PUSH
34631: LD_INT 24
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: ST_TO_ADDR
34638: GO 34701
34640: LD_INT 47
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34648
34646: GO 34666
34648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34649: LD_ADDR_VAR 0 3
34653: PUSH
34654: LD_INT 23
34656: PUSH
34657: LD_INT 24
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: ST_TO_ADDR
34664: GO 34701
34666: LD_INT 98
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34700
34674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 21
34682: PUSH
34683: LD_INT 22
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: LD_INT 24
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
34698: GO 34701
34700: POP
// result := ( chassis in result ) ;
34701: LD_ADDR_VAR 0 3
34705: PUSH
34706: LD_VAR 0 1
34710: PUSH
34711: LD_VAR 0 3
34715: IN
34716: ST_TO_ADDR
// end ;
34717: LD_VAR 0 3
34721: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
// result := array ;
34731: LD_ADDR_VAR 0 5
34735: PUSH
34736: LD_VAR 0 1
34740: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34741: LD_VAR 0 1
34745: NOT
34746: IFTRUE 34755
34748: PUSH
34749: LD_VAR 0 2
34753: NOT
34754: OR
34755: IFTRUE 34764
34757: PUSH
34758: LD_VAR 0 3
34762: NOT
34763: OR
34764: IFTRUE 34778
34766: PUSH
34767: LD_VAR 0 2
34771: PUSH
34772: LD_VAR 0 1
34776: GREATER
34777: OR
34778: IFTRUE 34792
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 1
34790: GREATER
34791: OR
34792: IFFALSE 34796
// exit ;
34794: GO 35092
// if direction then
34796: LD_VAR 0 4
34800: IFFALSE 34864
// begin d := 1 ;
34802: LD_ADDR_VAR 0 9
34806: PUSH
34807: LD_INT 1
34809: ST_TO_ADDR
// if i_from > i_to then
34810: LD_VAR 0 2
34814: PUSH
34815: LD_VAR 0 3
34819: GREATER
34820: IFFALSE 34846
// length := ( array - i_from ) + i_to else
34822: LD_ADDR_VAR 0 11
34826: PUSH
34827: LD_VAR 0 1
34831: PUSH
34832: LD_VAR 0 2
34836: MINUS
34837: PUSH
34838: LD_VAR 0 3
34842: PLUS
34843: ST_TO_ADDR
34844: GO 34862
// length := i_to - i_from ;
34846: LD_ADDR_VAR 0 11
34850: PUSH
34851: LD_VAR 0 3
34855: PUSH
34856: LD_VAR 0 2
34860: MINUS
34861: ST_TO_ADDR
// end else
34862: GO 34925
// begin d := - 1 ;
34864: LD_ADDR_VAR 0 9
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: ST_TO_ADDR
// if i_from > i_to then
34873: LD_VAR 0 2
34877: PUSH
34878: LD_VAR 0 3
34882: GREATER
34883: IFFALSE 34903
// length := i_from - i_to else
34885: LD_ADDR_VAR 0 11
34889: PUSH
34890: LD_VAR 0 2
34894: PUSH
34895: LD_VAR 0 3
34899: MINUS
34900: ST_TO_ADDR
34901: GO 34925
// length := ( array - i_to ) + i_from ;
34903: LD_ADDR_VAR 0 11
34907: PUSH
34908: LD_VAR 0 1
34912: PUSH
34913: LD_VAR 0 3
34917: MINUS
34918: PUSH
34919: LD_VAR 0 2
34923: PLUS
34924: ST_TO_ADDR
// end ; if not length then
34925: LD_VAR 0 11
34929: NOT
34930: IFFALSE 34934
// exit ;
34932: GO 35092
// tmp := array ;
34934: LD_ADDR_VAR 0 10
34938: PUSH
34939: LD_VAR 0 1
34943: ST_TO_ADDR
// for i = 1 to length do
34944: LD_ADDR_VAR 0 6
34948: PUSH
34949: DOUBLE
34950: LD_INT 1
34952: DEC
34953: ST_TO_ADDR
34954: LD_VAR 0 11
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35080
// begin for j = 1 to array do
34962: LD_ADDR_VAR 0 7
34966: PUSH
34967: DOUBLE
34968: LD_INT 1
34970: DEC
34971: ST_TO_ADDR
34972: LD_VAR 0 1
34976: PUSH
34977: FOR_TO
34978: IFFALSE 35066
// begin k := j + d ;
34980: LD_ADDR_VAR 0 8
34984: PUSH
34985: LD_VAR 0 7
34989: PUSH
34990: LD_VAR 0 9
34994: PLUS
34995: ST_TO_ADDR
// if k > array then
34996: LD_VAR 0 8
35000: PUSH
35001: LD_VAR 0 1
35005: GREATER
35006: IFFALSE 35016
// k := 1 ;
35008: LD_ADDR_VAR 0 8
35012: PUSH
35013: LD_INT 1
35015: ST_TO_ADDR
// if not k then
35016: LD_VAR 0 8
35020: NOT
35021: IFFALSE 35033
// k := array ;
35023: LD_ADDR_VAR 0 8
35027: PUSH
35028: LD_VAR 0 1
35032: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35033: LD_ADDR_VAR 0 10
35037: PUSH
35038: LD_VAR 0 10
35042: PPUSH
35043: LD_VAR 0 8
35047: PPUSH
35048: LD_VAR 0 1
35052: PUSH
35053: LD_VAR 0 7
35057: ARRAY
35058: PPUSH
35059: CALL_OW 1
35063: ST_TO_ADDR
// end ;
35064: GO 34977
35066: POP
35067: POP
// array := tmp ;
35068: LD_ADDR_VAR 0 1
35072: PUSH
35073: LD_VAR 0 10
35077: ST_TO_ADDR
// end ;
35078: GO 34959
35080: POP
35081: POP
// result := array ;
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 1
35091: ST_TO_ADDR
// end ;
35092: LD_VAR 0 5
35096: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35097: LD_INT 0
35099: PPUSH
35100: PPUSH
// result := 0 ;
35101: LD_ADDR_VAR 0 3
35105: PUSH
35106: LD_INT 0
35108: ST_TO_ADDR
// if not array or not value in array then
35109: LD_VAR 0 1
35113: NOT
35114: IFTRUE 35129
35116: PUSH
35117: LD_VAR 0 2
35121: PUSH
35122: LD_VAR 0 1
35126: IN
35127: NOT
35128: OR
35129: IFFALSE 35133
// exit ;
35131: GO 35187
// for i = 1 to array do
35133: LD_ADDR_VAR 0 4
35137: PUSH
35138: DOUBLE
35139: LD_INT 1
35141: DEC
35142: ST_TO_ADDR
35143: LD_VAR 0 1
35147: PUSH
35148: FOR_TO
35149: IFFALSE 35185
// if value = array [ i ] then
35151: LD_VAR 0 2
35155: PUSH
35156: LD_VAR 0 1
35160: PUSH
35161: LD_VAR 0 4
35165: ARRAY
35166: EQUAL
35167: IFFALSE 35183
// begin result := i ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_VAR 0 4
35178: ST_TO_ADDR
// exit ;
35179: POP
35180: POP
35181: GO 35187
// end ;
35183: GO 35148
35185: POP
35186: POP
// end ;
35187: LD_VAR 0 3
35191: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35192: LD_INT 0
35194: PPUSH
// vc_chassis := chassis ;
35195: LD_ADDR_OWVAR 37
35199: PUSH
35200: LD_VAR 0 1
35204: ST_TO_ADDR
// vc_engine := engine ;
35205: LD_ADDR_OWVAR 39
35209: PUSH
35210: LD_VAR 0 2
35214: ST_TO_ADDR
// vc_control := control ;
35215: LD_ADDR_OWVAR 38
35219: PUSH
35220: LD_VAR 0 3
35224: ST_TO_ADDR
// vc_weapon := weapon ;
35225: LD_ADDR_OWVAR 40
35229: PUSH
35230: LD_VAR 0 4
35234: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35235: LD_ADDR_OWVAR 41
35239: PUSH
35240: LD_VAR 0 5
35244: ST_TO_ADDR
// end ;
35245: LD_VAR 0 6
35249: RET
// export function WantPlant ( unit ) ; var task ; begin
35250: LD_INT 0
35252: PPUSH
35253: PPUSH
// result := false ;
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: LD_INT 0
35261: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: LD_VAR 0 1
35271: PPUSH
35272: CALL_OW 437
35276: ST_TO_ADDR
// if task then
35277: LD_VAR 0 3
35281: IFFALSE 35309
// if task [ 1 ] [ 1 ] = p then
35283: LD_VAR 0 3
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: PUSH
35296: LD_STRING p
35298: EQUAL
35299: IFFALSE 35309
// result := true ;
35301: LD_ADDR_VAR 0 2
35305: PUSH
35306: LD_INT 1
35308: ST_TO_ADDR
// end ;
35309: LD_VAR 0 2
35313: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35314: LD_INT 0
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
// if pos < 1 then
35320: LD_VAR 0 2
35324: PUSH
35325: LD_INT 1
35327: LESS
35328: IFFALSE 35332
// exit ;
35330: GO 35635
// if pos = 1 then
35332: LD_VAR 0 2
35336: PUSH
35337: LD_INT 1
35339: EQUAL
35340: IFFALSE 35373
// result := Replace ( arr , pos [ 1 ] , value ) else
35342: LD_ADDR_VAR 0 4
35346: PUSH
35347: LD_VAR 0 1
35351: PPUSH
35352: LD_VAR 0 2
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: PPUSH
35361: LD_VAR 0 3
35365: PPUSH
35366: CALL_OW 1
35370: ST_TO_ADDR
35371: GO 35635
// begin tmp := arr ;
35373: LD_ADDR_VAR 0 6
35377: PUSH
35378: LD_VAR 0 1
35382: ST_TO_ADDR
// s_arr := [ tmp ] ;
35383: LD_ADDR_VAR 0 7
35387: PUSH
35388: LD_VAR 0 6
35392: PUSH
35393: EMPTY
35394: LIST
35395: ST_TO_ADDR
// for i = 1 to pos - 1 do
35396: LD_ADDR_VAR 0 5
35400: PUSH
35401: DOUBLE
35402: LD_INT 1
35404: DEC
35405: ST_TO_ADDR
35406: LD_VAR 0 2
35410: PUSH
35411: LD_INT 1
35413: MINUS
35414: PUSH
35415: FOR_TO
35416: IFFALSE 35461
// begin tmp := tmp [ pos [ i ] ] ;
35418: LD_ADDR_VAR 0 6
35422: PUSH
35423: LD_VAR 0 6
35427: PUSH
35428: LD_VAR 0 2
35432: PUSH
35433: LD_VAR 0 5
35437: ARRAY
35438: ARRAY
35439: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35440: LD_ADDR_VAR 0 7
35444: PUSH
35445: LD_VAR 0 7
35449: PUSH
35450: LD_VAR 0 6
35454: PUSH
35455: EMPTY
35456: LIST
35457: ADD
35458: ST_TO_ADDR
// end ;
35459: GO 35415
35461: POP
35462: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35463: LD_ADDR_VAR 0 6
35467: PUSH
35468: LD_VAR 0 6
35472: PPUSH
35473: LD_VAR 0 2
35477: PUSH
35478: LD_VAR 0 2
35482: ARRAY
35483: PPUSH
35484: LD_VAR 0 3
35488: PPUSH
35489: CALL_OW 1
35493: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35494: LD_ADDR_VAR 0 7
35498: PUSH
35499: LD_VAR 0 7
35503: PPUSH
35504: LD_VAR 0 7
35508: PPUSH
35509: LD_VAR 0 6
35513: PPUSH
35514: CALL_OW 1
35518: ST_TO_ADDR
// for i = s_arr downto 2 do
35519: LD_ADDR_VAR 0 5
35523: PUSH
35524: DOUBLE
35525: LD_VAR 0 7
35529: INC
35530: ST_TO_ADDR
35531: LD_INT 2
35533: PUSH
35534: FOR_DOWNTO
35535: IFFALSE 35619
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 7
35546: PUSH
35547: LD_VAR 0 5
35551: PUSH
35552: LD_INT 1
35554: MINUS
35555: ARRAY
35556: PPUSH
35557: LD_VAR 0 2
35561: PUSH
35562: LD_VAR 0 5
35566: PUSH
35567: LD_INT 1
35569: MINUS
35570: ARRAY
35571: PPUSH
35572: LD_VAR 0 7
35576: PUSH
35577: LD_VAR 0 5
35581: ARRAY
35582: PPUSH
35583: CALL_OW 1
35587: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35588: LD_ADDR_VAR 0 7
35592: PUSH
35593: LD_VAR 0 7
35597: PPUSH
35598: LD_VAR 0 5
35602: PUSH
35603: LD_INT 1
35605: MINUS
35606: PPUSH
35607: LD_VAR 0 6
35611: PPUSH
35612: CALL_OW 1
35616: ST_TO_ADDR
// end ;
35617: GO 35534
35619: POP
35620: POP
// result := s_arr [ 1 ] ;
35621: LD_ADDR_VAR 0 4
35625: PUSH
35626: LD_VAR 0 7
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: ST_TO_ADDR
// end ; end ;
35635: LD_VAR 0 4
35639: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35640: LD_INT 0
35642: PPUSH
35643: PPUSH
// if not list then
35644: LD_VAR 0 1
35648: NOT
35649: IFFALSE 35653
// exit ;
35651: GO 35744
// i := list [ pos1 ] ;
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: LD_VAR 0 1
35662: PUSH
35663: LD_VAR 0 2
35667: ARRAY
35668: ST_TO_ADDR
// if not i then
35669: LD_VAR 0 5
35673: NOT
35674: IFFALSE 35678
// exit ;
35676: GO 35744
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35678: LD_ADDR_VAR 0 1
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: LD_VAR 0 2
35692: PPUSH
35693: LD_VAR 0 1
35697: PUSH
35698: LD_VAR 0 3
35702: ARRAY
35703: PPUSH
35704: CALL_OW 1
35708: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35709: LD_ADDR_VAR 0 1
35713: PUSH
35714: LD_VAR 0 1
35718: PPUSH
35719: LD_VAR 0 3
35723: PPUSH
35724: LD_VAR 0 5
35728: PPUSH
35729: CALL_OW 1
35733: ST_TO_ADDR
// result := list ;
35734: LD_ADDR_VAR 0 4
35738: PUSH
35739: LD_VAR 0 1
35743: ST_TO_ADDR
// end ;
35744: LD_VAR 0 4
35748: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35749: LD_INT 0
35751: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35752: LD_ADDR_VAR 0 5
35756: PUSH
35757: LD_VAR 0 1
35761: PPUSH
35762: CALL_OW 250
35766: PPUSH
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 251
35776: PPUSH
35777: LD_VAR 0 2
35781: PPUSH
35782: LD_VAR 0 3
35786: PPUSH
35787: LD_VAR 0 4
35791: PPUSH
35792: CALL 36174 0 5
35796: ST_TO_ADDR
// end ;
35797: LD_VAR 0 5
35801: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35802: LD_INT 0
35804: PPUSH
35805: PPUSH
35806: PPUSH
35807: PPUSH
// if not list or not unit then
35808: LD_VAR 0 2
35812: NOT
35813: IFTRUE 35822
35815: PUSH
35816: LD_VAR 0 1
35820: NOT
35821: OR
35822: IFFALSE 35826
// exit ;
35824: GO 36169
// result := [ ] ;
35826: LD_ADDR_VAR 0 5
35830: PUSH
35831: EMPTY
35832: ST_TO_ADDR
// for i in list do
35833: LD_ADDR_VAR 0 6
35837: PUSH
35838: LD_VAR 0 2
35842: PUSH
35843: FOR_IN
35844: IFFALSE 36062
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35846: LD_ADDR_VAR 0 8
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: LD_VAR 0 6
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PPUSH
35865: LD_VAR 0 6
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: PPUSH
35874: CALL_OW 297
35878: ST_TO_ADDR
// if not Count ( result ) then
35879: LD_VAR 0 5
35883: PPUSH
35884: CALL 32396 0 1
35888: NOT
35889: IFFALSE 35922
// begin result := Join ( result , [ i , tmp ] ) ;
35891: LD_ADDR_VAR 0 5
35895: PUSH
35896: LD_VAR 0 5
35900: PPUSH
35901: LD_VAR 0 6
35905: PUSH
35906: LD_VAR 0 8
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PPUSH
35915: CALL 68372 0 2
35919: ST_TO_ADDR
// continue ;
35920: GO 35843
// end ; if result [ result ] [ 2 ] <= tmp then
35922: LD_VAR 0 5
35926: PUSH
35927: LD_VAR 0 5
35931: ARRAY
35932: PUSH
35933: LD_INT 2
35935: ARRAY
35936: PUSH
35937: LD_VAR 0 8
35941: LESSEQUAL
35942: IFFALSE 35975
// result := Join ( result , [ i , tmp ] ) else
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 5
35953: PPUSH
35954: LD_VAR 0 6
35958: PUSH
35959: LD_VAR 0 8
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PPUSH
35968: CALL 68372 0 2
35972: ST_TO_ADDR
35973: GO 36060
// begin for j := 1 to Count ( result ) do
35975: LD_ADDR_VAR 0 7
35979: PUSH
35980: DOUBLE
35981: LD_INT 1
35983: DEC
35984: ST_TO_ADDR
35985: LD_VAR 0 5
35989: PPUSH
35990: CALL 32396 0 1
35994: PUSH
35995: FOR_TO
35996: IFFALSE 36058
// begin if tmp < result [ j ] [ 2 ] then
35998: LD_VAR 0 8
36002: PUSH
36003: LD_VAR 0 5
36007: PUSH
36008: LD_VAR 0 7
36012: ARRAY
36013: PUSH
36014: LD_INT 2
36016: ARRAY
36017: LESS
36018: IFFALSE 36056
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36020: LD_ADDR_VAR 0 5
36024: PUSH
36025: LD_VAR 0 5
36029: PPUSH
36030: LD_VAR 0 7
36034: PPUSH
36035: LD_VAR 0 6
36039: PUSH
36040: LD_VAR 0 8
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PPUSH
36049: CALL_OW 2
36053: ST_TO_ADDR
// break ;
36054: GO 36058
// end ; end ;
36056: GO 35995
36058: POP
36059: POP
// end ; end ;
36060: GO 35843
36062: POP
36063: POP
// if result and not asc then
36064: LD_VAR 0 5
36068: IFFALSE 36077
36070: PUSH
36071: LD_VAR 0 3
36075: NOT
36076: AND
36077: IFFALSE 36094
// result := ReverseArray ( result ) ;
36079: LD_ADDR_VAR 0 5
36083: PUSH
36084: LD_VAR 0 5
36088: PPUSH
36089: CALL 63452 0 1
36093: ST_TO_ADDR
// tmp := [ ] ;
36094: LD_ADDR_VAR 0 8
36098: PUSH
36099: EMPTY
36100: ST_TO_ADDR
// if mode then
36101: LD_VAR 0 4
36105: IFFALSE 36169
// begin for i := 1 to result do
36107: LD_ADDR_VAR 0 6
36111: PUSH
36112: DOUBLE
36113: LD_INT 1
36115: DEC
36116: ST_TO_ADDR
36117: LD_VAR 0 5
36121: PUSH
36122: FOR_TO
36123: IFFALSE 36157
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36125: LD_ADDR_VAR 0 8
36129: PUSH
36130: LD_VAR 0 8
36134: PPUSH
36135: LD_VAR 0 5
36139: PUSH
36140: LD_VAR 0 6
36144: ARRAY
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PPUSH
36150: CALL 68372 0 2
36154: ST_TO_ADDR
36155: GO 36122
36157: POP
36158: POP
// result := tmp ;
36159: LD_ADDR_VAR 0 5
36163: PUSH
36164: LD_VAR 0 8
36168: ST_TO_ADDR
// end ; end ;
36169: LD_VAR 0 5
36173: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36174: LD_INT 0
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
// if not list then
36180: LD_VAR 0 3
36184: NOT
36185: IFFALSE 36189
// exit ;
36187: GO 36579
// result := [ ] ;
36189: LD_ADDR_VAR 0 6
36193: PUSH
36194: EMPTY
36195: ST_TO_ADDR
// for i in list do
36196: LD_ADDR_VAR 0 7
36200: PUSH
36201: LD_VAR 0 3
36205: PUSH
36206: FOR_IN
36207: IFFALSE 36409
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_VAR 0 7
36218: PPUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: LD_VAR 0 2
36228: PPUSH
36229: CALL_OW 297
36233: ST_TO_ADDR
// if not result then
36234: LD_VAR 0 6
36238: NOT
36239: IFFALSE 36265
// result := [ [ i , tmp ] ] else
36241: LD_ADDR_VAR 0 6
36245: PUSH
36246: LD_VAR 0 7
36250: PUSH
36251: LD_VAR 0 9
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: EMPTY
36261: LIST
36262: ST_TO_ADDR
36263: GO 36407
// begin if result [ result ] [ 2 ] <= tmp then
36265: LD_VAR 0 6
36269: PUSH
36270: LD_VAR 0 6
36274: ARRAY
36275: PUSH
36276: LD_INT 2
36278: ARRAY
36279: PUSH
36280: LD_VAR 0 9
36284: LESSEQUAL
36285: IFFALSE 36327
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36287: LD_ADDR_VAR 0 6
36291: PUSH
36292: LD_VAR 0 6
36296: PPUSH
36297: LD_VAR 0 6
36301: PUSH
36302: LD_INT 1
36304: PLUS
36305: PPUSH
36306: LD_VAR 0 7
36310: PUSH
36311: LD_VAR 0 9
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PPUSH
36320: CALL_OW 2
36324: ST_TO_ADDR
36325: GO 36407
// for j := 1 to result do
36327: LD_ADDR_VAR 0 8
36331: PUSH
36332: DOUBLE
36333: LD_INT 1
36335: DEC
36336: ST_TO_ADDR
36337: LD_VAR 0 6
36341: PUSH
36342: FOR_TO
36343: IFFALSE 36405
// begin if tmp < result [ j ] [ 2 ] then
36345: LD_VAR 0 9
36349: PUSH
36350: LD_VAR 0 6
36354: PUSH
36355: LD_VAR 0 8
36359: ARRAY
36360: PUSH
36361: LD_INT 2
36363: ARRAY
36364: LESS
36365: IFFALSE 36403
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_VAR 0 6
36376: PPUSH
36377: LD_VAR 0 8
36381: PPUSH
36382: LD_VAR 0 7
36386: PUSH
36387: LD_VAR 0 9
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PPUSH
36396: CALL_OW 2
36400: ST_TO_ADDR
// break ;
36401: GO 36405
// end ; end ;
36403: GO 36342
36405: POP
36406: POP
// end ; end ;
36407: GO 36206
36409: POP
36410: POP
// if result and not asc then
36411: LD_VAR 0 6
36415: IFFALSE 36424
36417: PUSH
36418: LD_VAR 0 4
36422: NOT
36423: AND
36424: IFFALSE 36499
// begin tmp := result ;
36426: LD_ADDR_VAR 0 9
36430: PUSH
36431: LD_VAR 0 6
36435: ST_TO_ADDR
// for i = tmp downto 1 do
36436: LD_ADDR_VAR 0 7
36440: PUSH
36441: DOUBLE
36442: LD_VAR 0 9
36446: INC
36447: ST_TO_ADDR
36448: LD_INT 1
36450: PUSH
36451: FOR_DOWNTO
36452: IFFALSE 36497
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36454: LD_ADDR_VAR 0 6
36458: PUSH
36459: LD_VAR 0 6
36463: PPUSH
36464: LD_VAR 0 9
36468: PUSH
36469: LD_VAR 0 7
36473: MINUS
36474: PUSH
36475: LD_INT 1
36477: PLUS
36478: PPUSH
36479: LD_VAR 0 9
36483: PUSH
36484: LD_VAR 0 7
36488: ARRAY
36489: PPUSH
36490: CALL_OW 1
36494: ST_TO_ADDR
36495: GO 36451
36497: POP
36498: POP
// end ; tmp := [ ] ;
36499: LD_ADDR_VAR 0 9
36503: PUSH
36504: EMPTY
36505: ST_TO_ADDR
// if mode then
36506: LD_VAR 0 5
36510: IFFALSE 36579
// begin for i = 1 to result do
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: DOUBLE
36518: LD_INT 1
36520: DEC
36521: ST_TO_ADDR
36522: LD_VAR 0 6
36526: PUSH
36527: FOR_TO
36528: IFFALSE 36567
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36530: LD_ADDR_VAR 0 9
36534: PUSH
36535: LD_VAR 0 9
36539: PPUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: LD_VAR 0 6
36549: PUSH
36550: LD_VAR 0 7
36554: ARRAY
36555: PUSH
36556: LD_INT 1
36558: ARRAY
36559: PPUSH
36560: CALL_OW 1
36564: ST_TO_ADDR
36565: GO 36527
36567: POP
36568: POP
// result := tmp ;
36569: LD_ADDR_VAR 0 6
36573: PUSH
36574: LD_VAR 0 9
36578: ST_TO_ADDR
// end ; end ;
36579: LD_VAR 0 6
36583: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36584: LD_INT 0
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36592: LD_ADDR_VAR 0 5
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
// if not x or not y then
36614: LD_VAR 0 2
36618: NOT
36619: IFTRUE 36628
36621: PUSH
36622: LD_VAR 0 3
36626: NOT
36627: OR
36628: IFFALSE 36632
// exit ;
36630: GO 38288
// if not range then
36632: LD_VAR 0 4
36636: NOT
36637: IFFALSE 36647
// range := 10 ;
36639: LD_ADDR_VAR 0 4
36643: PUSH
36644: LD_INT 10
36646: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36647: LD_ADDR_VAR 0 8
36651: PUSH
36652: LD_INT 81
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 92
36666: PUSH
36667: LD_VAR 0 2
36671: PUSH
36672: LD_VAR 0 3
36676: PUSH
36677: LD_VAR 0 4
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 3
36690: PUSH
36691: LD_INT 21
36693: PUSH
36694: LD_INT 3
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PPUSH
36710: CALL_OW 69
36714: ST_TO_ADDR
// if not tmp then
36715: LD_VAR 0 8
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 38288
// for i in tmp do
36724: LD_ADDR_VAR 0 6
36728: PUSH
36729: LD_VAR 0 8
36733: PUSH
36734: FOR_IN
36735: IFFALSE 38263
// begin points := [ 0 , 0 , 0 ] ;
36737: LD_ADDR_VAR 0 9
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// bpoints := 1 ;
36756: LD_ADDR_VAR 0 10
36760: PUSH
36761: LD_INT 1
36763: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 247
36773: PUSH
36774: LD_INT 1
36776: DOUBLE
36777: EQUAL
36778: IFTRUE 36782
36780: GO 37364
36782: POP
// begin if GetClass ( i ) = 1 then
36783: LD_VAR 0 6
36787: PPUSH
36788: CALL_OW 257
36792: PUSH
36793: LD_INT 1
36795: EQUAL
36796: IFFALSE 36817
// points := [ 10 , 5 , 3 ] ;
36798: LD_ADDR_VAR 0 9
36802: PUSH
36803: LD_INT 10
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36817: LD_VAR 0 6
36821: PPUSH
36822: CALL_OW 257
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 3
36832: PUSH
36833: LD_INT 4
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: IN
36841: IFFALSE 36862
// points := [ 3 , 2 , 1 ] ;
36843: LD_ADDR_VAR 0 9
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36862: LD_VAR 0 6
36866: PPUSH
36867: CALL_OW 257
36871: PUSH
36872: LD_INT 5
36874: EQUAL
36875: IFFALSE 36896
// points := [ 130 , 5 , 2 ] ;
36877: LD_ADDR_VAR 0 9
36881: PUSH
36882: LD_INT 130
36884: PUSH
36885: LD_INT 5
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36896: LD_VAR 0 6
36900: PPUSH
36901: CALL_OW 257
36905: PUSH
36906: LD_INT 8
36908: EQUAL
36909: IFFALSE 36930
// points := [ 35 , 35 , 30 ] ;
36911: LD_ADDR_VAR 0 9
36915: PUSH
36916: LD_INT 35
36918: PUSH
36919: LD_INT 35
36921: PUSH
36922: LD_INT 30
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36930: LD_VAR 0 6
36934: PPUSH
36935: CALL_OW 257
36939: PUSH
36940: LD_INT 9
36942: EQUAL
36943: IFFALSE 36964
// points := [ 20 , 55 , 40 ] ;
36945: LD_ADDR_VAR 0 9
36949: PUSH
36950: LD_INT 20
36952: PUSH
36953: LD_INT 55
36955: PUSH
36956: LD_INT 40
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: LIST
36963: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36964: LD_VAR 0 6
36968: PPUSH
36969: CALL_OW 257
36973: PUSH
36974: LD_INT 12
36976: PUSH
36977: LD_INT 16
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: IN
36984: IFFALSE 37005
// points := [ 5 , 3 , 2 ] ;
36986: LD_ADDR_VAR 0 9
36990: PUSH
36991: LD_INT 5
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37005: LD_VAR 0 6
37009: PPUSH
37010: CALL_OW 257
37014: PUSH
37015: LD_INT 17
37017: EQUAL
37018: IFFALSE 37039
// points := [ 100 , 50 , 75 ] ;
37020: LD_ADDR_VAR 0 9
37024: PUSH
37025: LD_INT 100
37027: PUSH
37028: LD_INT 50
37030: PUSH
37031: LD_INT 75
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37039: LD_VAR 0 6
37043: PPUSH
37044: CALL_OW 257
37048: PUSH
37049: LD_INT 15
37051: EQUAL
37052: IFFALSE 37073
// points := [ 10 , 5 , 3 ] ;
37054: LD_ADDR_VAR 0 9
37058: PUSH
37059: LD_INT 10
37061: PUSH
37062: LD_INT 5
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL_OW 257
37082: PUSH
37083: LD_INT 14
37085: EQUAL
37086: IFFALSE 37107
// points := [ 10 , 0 , 0 ] ;
37088: LD_ADDR_VAR 0 9
37092: PUSH
37093: LD_INT 10
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37107: LD_VAR 0 6
37111: PPUSH
37112: CALL_OW 257
37116: PUSH
37117: LD_INT 11
37119: EQUAL
37120: IFFALSE 37141
// points := [ 30 , 10 , 5 ] ;
37122: LD_ADDR_VAR 0 9
37126: PUSH
37127: LD_INT 30
37129: PUSH
37130: LD_INT 10
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37141: LD_VAR 0 1
37145: PPUSH
37146: LD_INT 5
37148: PPUSH
37149: CALL_OW 321
37153: PUSH
37154: LD_INT 2
37156: EQUAL
37157: IFFALSE 37174
// bpoints := bpoints * 1.8 ;
37159: LD_ADDR_VAR 0 10
37163: PUSH
37164: LD_VAR 0 10
37168: PUSH
37169: LD_REAL  1.80000000000000E+0000
37172: MUL
37173: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37174: LD_VAR 0 6
37178: PPUSH
37179: CALL_OW 257
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 3
37192: PUSH
37193: LD_INT 4
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: IN
37202: IFFALSE 37222
37204: PUSH
37205: LD_VAR 0 1
37209: PPUSH
37210: LD_INT 51
37212: PPUSH
37213: CALL_OW 321
37217: PUSH
37218: LD_INT 2
37220: EQUAL
37221: AND
37222: IFFALSE 37239
// bpoints := bpoints * 1.2 ;
37224: LD_ADDR_VAR 0 10
37228: PUSH
37229: LD_VAR 0 10
37233: PUSH
37234: LD_REAL  1.20000000000000E+0000
37237: MUL
37238: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37239: LD_VAR 0 6
37243: PPUSH
37244: CALL_OW 257
37248: PUSH
37249: LD_INT 5
37251: PUSH
37252: LD_INT 7
37254: PUSH
37255: LD_INT 9
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: IN
37263: IFFALSE 37283
37265: PUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_INT 52
37273: PPUSH
37274: CALL_OW 321
37278: PUSH
37279: LD_INT 2
37281: EQUAL
37282: AND
37283: IFFALSE 37300
// bpoints := bpoints * 1.5 ;
37285: LD_ADDR_VAR 0 10
37289: PUSH
37290: LD_VAR 0 10
37294: PUSH
37295: LD_REAL  1.50000000000000E+0000
37298: MUL
37299: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_INT 66
37307: PPUSH
37308: CALL_OW 321
37312: PUSH
37313: LD_INT 2
37315: EQUAL
37316: IFFALSE 37333
// bpoints := bpoints * 1.1 ;
37318: LD_ADDR_VAR 0 10
37322: PUSH
37323: LD_VAR 0 10
37327: PUSH
37328: LD_REAL  1.10000000000000E+0000
37331: MUL
37332: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37333: LD_ADDR_VAR 0 10
37337: PUSH
37338: LD_VAR 0 10
37342: PUSH
37343: LD_VAR 0 6
37347: PPUSH
37348: LD_INT 1
37350: PPUSH
37351: CALL_OW 259
37355: PUSH
37356: LD_REAL  1.15000000000000E+0000
37359: MUL
37360: MUL
37361: ST_TO_ADDR
// end ; unit_vehicle :
37362: GO 38192
37364: LD_INT 2
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 38180
37372: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37373: LD_VAR 0 6
37377: PPUSH
37378: CALL_OW 264
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 42
37388: PUSH
37389: LD_INT 24
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: IN
37397: IFFALSE 37418
// points := [ 25 , 5 , 3 ] ;
37399: LD_ADDR_VAR 0 9
37403: PUSH
37404: LD_INT 25
37406: PUSH
37407: LD_INT 5
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37418: LD_VAR 0 6
37422: PPUSH
37423: CALL_OW 264
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: LD_INT 43
37433: PUSH
37434: LD_INT 25
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: IN
37442: IFFALSE 37463
// points := [ 40 , 15 , 5 ] ;
37444: LD_ADDR_VAR 0 9
37448: PUSH
37449: LD_INT 40
37451: PUSH
37452: LD_INT 15
37454: PUSH
37455: LD_INT 5
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37463: LD_VAR 0 6
37467: PPUSH
37468: CALL_OW 264
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: LD_INT 23
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: IN
37483: IFFALSE 37504
// points := [ 7 , 25 , 8 ] ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_INT 7
37492: PUSH
37493: LD_INT 25
37495: PUSH
37496: LD_INT 8
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 264
37513: PUSH
37514: LD_INT 5
37516: PUSH
37517: LD_INT 27
37519: PUSH
37520: LD_INT 44
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: IN
37528: IFFALSE 37549
// points := [ 14 , 50 , 16 ] ;
37530: LD_ADDR_VAR 0 9
37534: PUSH
37535: LD_INT 14
37537: PUSH
37538: LD_INT 50
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37549: LD_VAR 0 6
37553: PPUSH
37554: CALL_OW 264
37558: PUSH
37559: LD_INT 6
37561: PUSH
37562: LD_INT 46
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: IN
37569: IFFALSE 37590
// points := [ 32 , 120 , 70 ] ;
37571: LD_ADDR_VAR 0 9
37575: PUSH
37576: LD_INT 32
37578: PUSH
37579: LD_INT 120
37581: PUSH
37582: LD_INT 70
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37590: LD_VAR 0 6
37594: PPUSH
37595: CALL_OW 264
37599: PUSH
37600: LD_INT 7
37602: PUSH
37603: LD_INT 28
37605: PUSH
37606: LD_INT 45
37608: PUSH
37609: LD_INT 92
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: IN
37618: IFFALSE 37639
// points := [ 35 , 20 , 45 ] ;
37620: LD_ADDR_VAR 0 9
37624: PUSH
37625: LD_INT 35
37627: PUSH
37628: LD_INT 20
37630: PUSH
37631: LD_INT 45
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37639: LD_VAR 0 6
37643: PPUSH
37644: CALL_OW 264
37648: PUSH
37649: LD_INT 47
37651: PUSH
37652: EMPTY
37653: LIST
37654: IN
37655: IFFALSE 37676
// points := [ 67 , 45 , 75 ] ;
37657: LD_ADDR_VAR 0 9
37661: PUSH
37662: LD_INT 67
37664: PUSH
37665: LD_INT 45
37667: PUSH
37668: LD_INT 75
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37676: LD_VAR 0 6
37680: PPUSH
37681: CALL_OW 264
37685: PUSH
37686: LD_INT 26
37688: PUSH
37689: EMPTY
37690: LIST
37691: IN
37692: IFFALSE 37713
// points := [ 120 , 30 , 80 ] ;
37694: LD_ADDR_VAR 0 9
37698: PUSH
37699: LD_INT 120
37701: PUSH
37702: LD_INT 30
37704: PUSH
37705: LD_INT 80
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37713: LD_VAR 0 6
37717: PPUSH
37718: CALL_OW 264
37722: PUSH
37723: LD_INT 22
37725: PUSH
37726: EMPTY
37727: LIST
37728: IN
37729: IFFALSE 37750
// points := [ 40 , 1 , 1 ] ;
37731: LD_ADDR_VAR 0 9
37735: PUSH
37736: LD_INT 40
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37750: LD_VAR 0 6
37754: PPUSH
37755: CALL_OW 264
37759: PUSH
37760: LD_INT 29
37762: PUSH
37763: EMPTY
37764: LIST
37765: IN
37766: IFFALSE 37787
// points := [ 70 , 200 , 400 ] ;
37768: LD_ADDR_VAR 0 9
37772: PUSH
37773: LD_INT 70
37775: PUSH
37776: LD_INT 200
37778: PUSH
37779: LD_INT 400
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37787: LD_VAR 0 6
37791: PPUSH
37792: CALL_OW 264
37796: PUSH
37797: LD_INT 14
37799: PUSH
37800: LD_INT 53
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: IN
37807: IFFALSE 37828
// points := [ 40 , 10 , 20 ] ;
37809: LD_ADDR_VAR 0 9
37813: PUSH
37814: LD_INT 40
37816: PUSH
37817: LD_INT 10
37819: PUSH
37820: LD_INT 20
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37828: LD_VAR 0 6
37832: PPUSH
37833: CALL_OW 264
37837: PUSH
37838: LD_INT 9
37840: PUSH
37841: EMPTY
37842: LIST
37843: IN
37844: IFFALSE 37865
// points := [ 5 , 70 , 20 ] ;
37846: LD_ADDR_VAR 0 9
37850: PUSH
37851: LD_INT 5
37853: PUSH
37854: LD_INT 70
37856: PUSH
37857: LD_INT 20
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37865: LD_VAR 0 6
37869: PPUSH
37870: CALL_OW 264
37874: PUSH
37875: LD_INT 10
37877: PUSH
37878: EMPTY
37879: LIST
37880: IN
37881: IFFALSE 37902
// points := [ 35 , 110 , 70 ] ;
37883: LD_ADDR_VAR 0 9
37887: PUSH
37888: LD_INT 35
37890: PUSH
37891: LD_INT 110
37893: PUSH
37894: LD_INT 70
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37902: LD_VAR 0 6
37906: PPUSH
37907: CALL_OW 265
37911: PUSH
37912: LD_INT 25
37914: EQUAL
37915: IFFALSE 37936
// points := [ 80 , 65 , 100 ] ;
37917: LD_ADDR_VAR 0 9
37921: PUSH
37922: LD_INT 80
37924: PUSH
37925: LD_INT 65
37927: PUSH
37928: LD_INT 100
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37936: LD_VAR 0 6
37940: PPUSH
37941: CALL_OW 263
37945: PUSH
37946: LD_INT 1
37948: EQUAL
37949: IFFALSE 37984
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37951: LD_ADDR_VAR 0 10
37955: PUSH
37956: LD_VAR 0 10
37960: PUSH
37961: LD_VAR 0 6
37965: PPUSH
37966: CALL_OW 311
37970: PPUSH
37971: LD_INT 3
37973: PPUSH
37974: CALL_OW 259
37978: PUSH
37979: LD_INT 4
37981: MUL
37982: MUL
37983: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37984: LD_VAR 0 6
37988: PPUSH
37989: CALL_OW 263
37993: PUSH
37994: LD_INT 2
37996: EQUAL
37997: IFFALSE 38048
// begin j := IsControledBy ( i ) ;
37999: LD_ADDR_VAR 0 7
38003: PUSH
38004: LD_VAR 0 6
38008: PPUSH
38009: CALL_OW 312
38013: ST_TO_ADDR
// if j then
38014: LD_VAR 0 7
38018: IFFALSE 38048
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38020: LD_ADDR_VAR 0 10
38024: PUSH
38025: LD_VAR 0 10
38029: PUSH
38030: LD_VAR 0 7
38034: PPUSH
38035: LD_INT 3
38037: PPUSH
38038: CALL_OW 259
38042: PUSH
38043: LD_INT 3
38045: MUL
38046: MUL
38047: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38048: LD_VAR 0 6
38052: PPUSH
38053: CALL_OW 264
38057: PUSH
38058: LD_INT 5
38060: PUSH
38061: LD_INT 6
38063: PUSH
38064: LD_INT 46
38066: PUSH
38067: LD_INT 44
38069: PUSH
38070: LD_INT 47
38072: PUSH
38073: LD_INT 45
38075: PUSH
38076: LD_INT 28
38078: PUSH
38079: LD_INT 7
38081: PUSH
38082: LD_INT 27
38084: PUSH
38085: LD_INT 29
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: IN
38100: IFFALSE 38120
38102: PUSH
38103: LD_VAR 0 1
38107: PPUSH
38108: LD_INT 52
38110: PPUSH
38111: CALL_OW 321
38115: PUSH
38116: LD_INT 2
38118: EQUAL
38119: AND
38120: IFFALSE 38137
// bpoints := bpoints * 1.2 ;
38122: LD_ADDR_VAR 0 10
38126: PUSH
38127: LD_VAR 0 10
38131: PUSH
38132: LD_REAL  1.20000000000000E+0000
38135: MUL
38136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38137: LD_VAR 0 6
38141: PPUSH
38142: CALL_OW 264
38146: PUSH
38147: LD_INT 6
38149: PUSH
38150: LD_INT 46
38152: PUSH
38153: LD_INT 47
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: IN
38161: IFFALSE 38178
// bpoints := bpoints * 1.2 ;
38163: LD_ADDR_VAR 0 10
38167: PUSH
38168: LD_VAR 0 10
38172: PUSH
38173: LD_REAL  1.20000000000000E+0000
38176: MUL
38177: ST_TO_ADDR
// end ; unit_building :
38178: GO 38192
38180: LD_INT 3
38182: DOUBLE
38183: EQUAL
38184: IFTRUE 38188
38186: GO 38191
38188: POP
// ; end ;
38189: GO 38192
38191: POP
// for j = 1 to 3 do
38192: LD_ADDR_VAR 0 7
38196: PUSH
38197: DOUBLE
38198: LD_INT 1
38200: DEC
38201: ST_TO_ADDR
38202: LD_INT 3
38204: PUSH
38205: FOR_TO
38206: IFFALSE 38259
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38208: LD_ADDR_VAR 0 5
38212: PUSH
38213: LD_VAR 0 5
38217: PPUSH
38218: LD_VAR 0 7
38222: PPUSH
38223: LD_VAR 0 5
38227: PUSH
38228: LD_VAR 0 7
38232: ARRAY
38233: PUSH
38234: LD_VAR 0 9
38238: PUSH
38239: LD_VAR 0 7
38243: ARRAY
38244: PUSH
38245: LD_VAR 0 10
38249: MUL
38250: PLUS
38251: PPUSH
38252: CALL_OW 1
38256: ST_TO_ADDR
38257: GO 38205
38259: POP
38260: POP
// end ;
38261: GO 36734
38263: POP
38264: POP
// result := Replace ( result , 4 , tmp ) ;
38265: LD_ADDR_VAR 0 5
38269: PUSH
38270: LD_VAR 0 5
38274: PPUSH
38275: LD_INT 4
38277: PPUSH
38278: LD_VAR 0 8
38282: PPUSH
38283: CALL_OW 1
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 5
38292: RET
// export function DangerAtRange ( unit , range ) ; begin
38293: LD_INT 0
38295: PPUSH
// if not unit then
38296: LD_VAR 0 1
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 38350
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 255
38319: PPUSH
38320: LD_VAR 0 1
38324: PPUSH
38325: CALL_OW 250
38329: PPUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL_OW 251
38339: PPUSH
38340: LD_VAR 0 2
38344: PPUSH
38345: CALL 36584 0 4
38349: ST_TO_ADDR
// end ;
38350: LD_VAR 0 3
38354: RET
// export function DangerInArea ( side , area ) ; begin
38355: LD_INT 0
38357: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38358: LD_ADDR_VAR 0 3
38362: PUSH
38363: LD_VAR 0 2
38367: PPUSH
38368: LD_INT 81
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PPUSH
38380: CALL_OW 70
38384: ST_TO_ADDR
// end ;
38385: LD_VAR 0 3
38389: RET
// export function IsExtension ( b ) ; begin
38390: LD_INT 0
38392: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38393: LD_ADDR_VAR 0 2
38397: PUSH
38398: LD_VAR 0 1
38402: PUSH
38403: LD_INT 23
38405: PUSH
38406: LD_INT 20
38408: PUSH
38409: LD_INT 22
38411: PUSH
38412: LD_INT 17
38414: PUSH
38415: LD_INT 24
38417: PUSH
38418: LD_INT 21
38420: PUSH
38421: LD_INT 19
38423: PUSH
38424: LD_INT 16
38426: PUSH
38427: LD_INT 25
38429: PUSH
38430: LD_INT 18
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: IN
38445: ST_TO_ADDR
// end ;
38446: LD_VAR 0 2
38450: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38451: LD_INT 0
38453: PPUSH
38454: PPUSH
38455: PPUSH
// result := [ ] ;
38456: LD_ADDR_VAR 0 4
38460: PUSH
38461: EMPTY
38462: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38463: LD_ADDR_VAR 0 5
38467: PUSH
38468: LD_VAR 0 2
38472: PPUSH
38473: LD_INT 21
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PPUSH
38483: CALL_OW 70
38487: ST_TO_ADDR
// if not tmp then
38488: LD_VAR 0 5
38492: NOT
38493: IFFALSE 38497
// exit ;
38495: GO 38561
// if checkLink then
38497: LD_VAR 0 3
38501: IFFALSE 38551
// begin for i in tmp do
38503: LD_ADDR_VAR 0 6
38507: PUSH
38508: LD_VAR 0 5
38512: PUSH
38513: FOR_IN
38514: IFFALSE 38549
// if GetBase ( i ) <> base then
38516: LD_VAR 0 6
38520: PPUSH
38521: CALL_OW 274
38525: PUSH
38526: LD_VAR 0 1
38530: NONEQUAL
38531: IFFALSE 38547
// ComLinkToBase ( base , i ) ;
38533: LD_VAR 0 1
38537: PPUSH
38538: LD_VAR 0 6
38542: PPUSH
38543: CALL_OW 169
38547: GO 38513
38549: POP
38550: POP
// end ; result := tmp ;
38551: LD_ADDR_VAR 0 4
38555: PUSH
38556: LD_VAR 0 5
38560: ST_TO_ADDR
// end ;
38561: LD_VAR 0 4
38565: RET
// export function ComComplete ( units , b ) ; var i ; begin
38566: LD_INT 0
38568: PPUSH
38569: PPUSH
// if not units then
38570: LD_VAR 0 1
38574: NOT
38575: IFFALSE 38579
// exit ;
38577: GO 38669
// for i in units do
38579: LD_ADDR_VAR 0 4
38583: PUSH
38584: LD_VAR 0 1
38588: PUSH
38589: FOR_IN
38590: IFFALSE 38667
// if BuildingStatus ( b ) = bs_build then
38592: LD_VAR 0 2
38596: PPUSH
38597: CALL_OW 461
38601: PUSH
38602: LD_INT 1
38604: EQUAL
38605: IFFALSE 38665
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38607: LD_VAR 0 4
38611: PPUSH
38612: LD_STRING h
38614: PUSH
38615: LD_VAR 0 2
38619: PPUSH
38620: CALL_OW 250
38624: PUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: CALL_OW 251
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: PPUSH
38661: CALL_OW 446
38665: GO 38589
38667: POP
38668: POP
// end ;
38669: LD_VAR 0 3
38673: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38674: LD_INT 0
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38682: LD_VAR 0 1
38686: NOT
38687: IFTRUE 38704
38689: PUSH
38690: LD_VAR 0 1
38694: PPUSH
38695: CALL_OW 263
38699: PUSH
38700: LD_INT 2
38702: NONEQUAL
38703: OR
38704: IFFALSE 38708
// exit ;
38706: GO 39024
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38708: LD_ADDR_VAR 0 6
38712: PUSH
38713: LD_INT 22
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL_OW 255
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 30
38735: PUSH
38736: LD_INT 36
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 34
38745: PUSH
38746: LD_INT 31
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PPUSH
38762: CALL_OW 69
38766: ST_TO_ADDR
// if not tmp then
38767: LD_VAR 0 6
38771: NOT
38772: IFFALSE 38776
// exit ;
38774: GO 39024
// result := [ ] ;
38776: LD_ADDR_VAR 0 2
38780: PUSH
38781: EMPTY
38782: ST_TO_ADDR
// for i in tmp do
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_VAR 0 6
38792: PUSH
38793: FOR_IN
38794: IFFALSE 38865
// begin t := UnitsInside ( i ) ;
38796: LD_ADDR_VAR 0 4
38800: PUSH
38801: LD_VAR 0 3
38805: PPUSH
38806: CALL_OW 313
38810: ST_TO_ADDR
// if t then
38811: LD_VAR 0 4
38815: IFFALSE 38863
// for j in t do
38817: LD_ADDR_VAR 0 7
38821: PUSH
38822: LD_VAR 0 4
38826: PUSH
38827: FOR_IN
38828: IFFALSE 38861
// result := Replace ( result , result + 1 , j ) ;
38830: LD_ADDR_VAR 0 2
38834: PUSH
38835: LD_VAR 0 2
38839: PPUSH
38840: LD_VAR 0 2
38844: PUSH
38845: LD_INT 1
38847: PLUS
38848: PPUSH
38849: LD_VAR 0 7
38853: PPUSH
38854: CALL_OW 1
38858: ST_TO_ADDR
38859: GO 38827
38861: POP
38862: POP
// end ;
38863: GO 38793
38865: POP
38866: POP
// if not result then
38867: LD_VAR 0 2
38871: NOT
38872: IFFALSE 38876
// exit ;
38874: GO 39024
// mech := result [ 1 ] ;
38876: LD_ADDR_VAR 0 5
38880: PUSH
38881: LD_VAR 0 2
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: ST_TO_ADDR
// if result > 1 then
38890: LD_VAR 0 2
38894: PUSH
38895: LD_INT 1
38897: GREATER
38898: IFFALSE 39010
// begin for i = 2 to result do
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: DOUBLE
38906: LD_INT 2
38908: DEC
38909: ST_TO_ADDR
38910: LD_VAR 0 2
38914: PUSH
38915: FOR_TO
38916: IFFALSE 39008
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38918: LD_ADDR_VAR 0 4
38922: PUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_VAR 0 3
38932: ARRAY
38933: PPUSH
38934: LD_INT 3
38936: PPUSH
38937: CALL_OW 259
38941: PUSH
38942: LD_VAR 0 2
38946: PUSH
38947: LD_VAR 0 3
38951: ARRAY
38952: PPUSH
38953: CALL_OW 432
38957: MINUS
38958: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38959: LD_VAR 0 4
38963: PUSH
38964: LD_VAR 0 5
38968: PPUSH
38969: LD_INT 3
38971: PPUSH
38972: CALL_OW 259
38976: PUSH
38977: LD_VAR 0 5
38981: PPUSH
38982: CALL_OW 432
38986: MINUS
38987: GREATEREQUAL
38988: IFFALSE 39006
// mech := result [ i ] ;
38990: LD_ADDR_VAR 0 5
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_VAR 0 3
39004: ARRAY
39005: ST_TO_ADDR
// end ;
39006: GO 38915
39008: POP
39009: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39010: LD_VAR 0 1
39014: PPUSH
39015: LD_VAR 0 5
39019: PPUSH
39020: CALL_OW 135
// end ;
39024: LD_VAR 0 2
39028: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39029: LD_INT 0
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
39043: PPUSH
// result := [ ] ;
39044: LD_ADDR_VAR 0 7
39048: PUSH
39049: EMPTY
39050: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 266
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: IN
39071: NOT
39072: IFFALSE 39076
// exit ;
39074: GO 40716
// if name then
39076: LD_VAR 0 3
39080: IFFALSE 39096
// SetBName ( base_dep , name ) ;
39082: LD_VAR 0 1
39086: PPUSH
39087: LD_VAR 0 3
39091: PPUSH
39092: CALL_OW 500
// base := GetBase ( base_dep ) ;
39096: LD_ADDR_VAR 0 15
39100: PUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL_OW 274
39110: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39111: LD_ADDR_VAR 0 16
39115: PUSH
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 255
39125: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39126: LD_ADDR_VAR 0 17
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 248
39140: ST_TO_ADDR
// if sources then
39141: LD_VAR 0 5
39145: IFFALSE 39192
// for i = 1 to 3 do
39147: LD_ADDR_VAR 0 8
39151: PUSH
39152: DOUBLE
39153: LD_INT 1
39155: DEC
39156: ST_TO_ADDR
39157: LD_INT 3
39159: PUSH
39160: FOR_TO
39161: IFFALSE 39190
// AddResourceType ( base , i , sources [ i ] ) ;
39163: LD_VAR 0 15
39167: PPUSH
39168: LD_VAR 0 8
39172: PPUSH
39173: LD_VAR 0 5
39177: PUSH
39178: LD_VAR 0 8
39182: ARRAY
39183: PPUSH
39184: CALL_OW 276
39188: GO 39160
39190: POP
39191: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39192: LD_ADDR_VAR 0 18
39196: PUSH
39197: LD_VAR 0 15
39201: PPUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: LD_INT 1
39209: PPUSH
39210: CALL 38451 0 3
39214: ST_TO_ADDR
// InitHc ;
39215: CALL_OW 19
// InitUc ;
39219: CALL_OW 18
// uc_side := side ;
39223: LD_ADDR_OWVAR 20
39227: PUSH
39228: LD_VAR 0 16
39232: ST_TO_ADDR
// uc_nation := nation ;
39233: LD_ADDR_OWVAR 21
39237: PUSH
39238: LD_VAR 0 17
39242: ST_TO_ADDR
// if buildings then
39243: LD_VAR 0 18
39247: IFFALSE 40575
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39249: LD_ADDR_VAR 0 19
39253: PUSH
39254: LD_VAR 0 18
39258: PPUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 30
39264: PUSH
39265: LD_INT 29
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 30
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 72
39291: ST_TO_ADDR
// if tmp then
39292: LD_VAR 0 19
39296: IFFALSE 39344
// for i in tmp do
39298: LD_ADDR_VAR 0 8
39302: PUSH
39303: LD_VAR 0 19
39307: PUSH
39308: FOR_IN
39309: IFFALSE 39342
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39311: LD_VAR 0 8
39315: PPUSH
39316: CALL_OW 250
39320: PPUSH
39321: LD_VAR 0 8
39325: PPUSH
39326: CALL_OW 251
39330: PPUSH
39331: LD_VAR 0 16
39335: PPUSH
39336: CALL_OW 441
39340: GO 39308
39342: POP
39343: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39344: LD_VAR 0 18
39348: PPUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 30
39354: PUSH
39355: LD_INT 32
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 30
39364: PUSH
39365: LD_INT 33
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: PPUSH
39377: CALL_OW 72
39381: IFFALSE 39469
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39383: LD_ADDR_VAR 0 8
39387: PUSH
39388: LD_VAR 0 18
39392: PPUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 30
39398: PUSH
39399: LD_INT 32
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 30
39408: PUSH
39409: LD_INT 33
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PPUSH
39421: CALL_OW 72
39425: PUSH
39426: FOR_IN
39427: IFFALSE 39467
// begin if not GetBWeapon ( i ) then
39429: LD_VAR 0 8
39433: PPUSH
39434: CALL_OW 269
39438: NOT
39439: IFFALSE 39465
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39441: LD_VAR 0 8
39445: PPUSH
39446: LD_VAR 0 8
39450: PPUSH
39451: LD_VAR 0 2
39455: PPUSH
39456: CALL 40721 0 2
39460: PPUSH
39461: CALL_OW 431
// end ;
39465: GO 39426
39467: POP
39468: POP
// end ; for i = 1 to personel do
39469: LD_ADDR_VAR 0 8
39473: PUSH
39474: DOUBLE
39475: LD_INT 1
39477: DEC
39478: ST_TO_ADDR
39479: LD_VAR 0 6
39483: PUSH
39484: FOR_TO
39485: IFFALSE 40555
// begin if i > 4 then
39487: LD_VAR 0 8
39491: PUSH
39492: LD_INT 4
39494: GREATER
39495: IFFALSE 39499
// break ;
39497: GO 40555
// case i of 1 :
39499: LD_VAR 0 8
39503: PUSH
39504: LD_INT 1
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 39592
39512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39513: LD_ADDR_VAR 0 12
39517: PUSH
39518: LD_VAR 0 18
39522: PPUSH
39523: LD_INT 22
39525: PUSH
39526: LD_VAR 0 16
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 58
39537: PUSH
39538: EMPTY
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 30
39546: PUSH
39547: LD_INT 32
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 30
39556: PUSH
39557: LD_INT 4
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 30
39566: PUSH
39567: LD_INT 5
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: PPUSH
39585: CALL_OW 72
39589: ST_TO_ADDR
39590: GO 39814
39592: LD_INT 2
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39600
39598: GO 39662
39600: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39601: LD_ADDR_VAR 0 12
39605: PUSH
39606: LD_VAR 0 18
39610: PPUSH
39611: LD_INT 22
39613: PUSH
39614: LD_VAR 0 16
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 30
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 30
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PPUSH
39655: CALL_OW 72
39659: ST_TO_ADDR
39660: GO 39814
39662: LD_INT 3
39664: DOUBLE
39665: EQUAL
39666: IFTRUE 39670
39668: GO 39732
39670: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39671: LD_ADDR_VAR 0 12
39675: PUSH
39676: LD_VAR 0 18
39680: PPUSH
39681: LD_INT 22
39683: PUSH
39684: LD_VAR 0 16
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 30
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 30
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PPUSH
39725: CALL_OW 72
39729: ST_TO_ADDR
39730: GO 39814
39732: LD_INT 4
39734: DOUBLE
39735: EQUAL
39736: IFTRUE 39740
39738: GO 39813
39740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39741: LD_ADDR_VAR 0 12
39745: PUSH
39746: LD_VAR 0 18
39750: PPUSH
39751: LD_INT 22
39753: PUSH
39754: LD_VAR 0 16
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 30
39768: PUSH
39769: LD_INT 6
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 30
39778: PUSH
39779: LD_INT 7
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 30
39788: PUSH
39789: LD_INT 8
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PPUSH
39806: CALL_OW 72
39810: ST_TO_ADDR
39811: GO 39814
39813: POP
// if i = 1 then
39814: LD_VAR 0 8
39818: PUSH
39819: LD_INT 1
39821: EQUAL
39822: IFFALSE 39933
// begin tmp := [ ] ;
39824: LD_ADDR_VAR 0 19
39828: PUSH
39829: EMPTY
39830: ST_TO_ADDR
// for j in f do
39831: LD_ADDR_VAR 0 9
39835: PUSH
39836: LD_VAR 0 12
39840: PUSH
39841: FOR_IN
39842: IFFALSE 39915
// if GetBType ( j ) = b_bunker then
39844: LD_VAR 0 9
39848: PPUSH
39849: CALL_OW 266
39853: PUSH
39854: LD_INT 32
39856: EQUAL
39857: IFFALSE 39884
// tmp := Insert ( tmp , 1 , j ) else
39859: LD_ADDR_VAR 0 19
39863: PUSH
39864: LD_VAR 0 19
39868: PPUSH
39869: LD_INT 1
39871: PPUSH
39872: LD_VAR 0 9
39876: PPUSH
39877: CALL_OW 2
39881: ST_TO_ADDR
39882: GO 39913
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39884: LD_ADDR_VAR 0 19
39888: PUSH
39889: LD_VAR 0 19
39893: PPUSH
39894: LD_VAR 0 19
39898: PUSH
39899: LD_INT 1
39901: PLUS
39902: PPUSH
39903: LD_VAR 0 9
39907: PPUSH
39908: CALL_OW 2
39912: ST_TO_ADDR
39913: GO 39841
39915: POP
39916: POP
// if tmp then
39917: LD_VAR 0 19
39921: IFFALSE 39933
// f := tmp ;
39923: LD_ADDR_VAR 0 12
39927: PUSH
39928: LD_VAR 0 19
39932: ST_TO_ADDR
// end ; x := personel [ i ] ;
39933: LD_ADDR_VAR 0 13
39937: PUSH
39938: LD_VAR 0 6
39942: PUSH
39943: LD_VAR 0 8
39947: ARRAY
39948: ST_TO_ADDR
// if x = - 1 then
39949: LD_VAR 0 13
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: EQUAL
39958: IFFALSE 40169
// begin for j in f do
39960: LD_ADDR_VAR 0 9
39964: PUSH
39965: LD_VAR 0 12
39969: PUSH
39970: FOR_IN
39971: IFFALSE 40165
// repeat InitHc ;
39973: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39977: LD_VAR 0 9
39981: PPUSH
39982: CALL_OW 266
39986: PUSH
39987: LD_INT 5
39989: EQUAL
39990: IFFALSE 40060
// begin if UnitsInside ( j ) < 3 then
39992: LD_VAR 0 9
39996: PPUSH
39997: CALL_OW 313
40001: PUSH
40002: LD_INT 3
40004: LESS
40005: IFFALSE 40041
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40007: LD_INT 0
40009: PPUSH
40010: LD_INT 5
40012: PUSH
40013: LD_INT 8
40015: PUSH
40016: LD_INT 9
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PUSH
40024: LD_VAR 0 17
40028: ARRAY
40029: PPUSH
40030: LD_VAR 0 4
40034: PPUSH
40035: CALL_OW 380
40039: GO 40058
// PrepareHuman ( false , i , skill ) ;
40041: LD_INT 0
40043: PPUSH
40044: LD_VAR 0 8
40048: PPUSH
40049: LD_VAR 0 4
40053: PPUSH
40054: CALL_OW 380
// end else
40058: GO 40077
// PrepareHuman ( false , i , skill ) ;
40060: LD_INT 0
40062: PPUSH
40063: LD_VAR 0 8
40067: PPUSH
40068: LD_VAR 0 4
40072: PPUSH
40073: CALL_OW 380
// un := CreateHuman ;
40077: LD_ADDR_VAR 0 14
40081: PUSH
40082: CALL_OW 44
40086: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40087: LD_ADDR_VAR 0 7
40091: PUSH
40092: LD_VAR 0 7
40096: PPUSH
40097: LD_INT 1
40099: PPUSH
40100: LD_VAR 0 14
40104: PPUSH
40105: CALL_OW 2
40109: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40110: LD_VAR 0 14
40114: PPUSH
40115: LD_VAR 0 9
40119: PPUSH
40120: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40124: LD_VAR 0 9
40128: PPUSH
40129: CALL_OW 313
40133: PUSH
40134: LD_INT 6
40136: EQUAL
40137: IFTRUE 40161
40139: PUSH
40140: LD_VAR 0 9
40144: PPUSH
40145: CALL_OW 266
40149: PUSH
40150: LD_INT 32
40152: PUSH
40153: LD_INT 31
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: IN
40160: OR
40161: IFFALSE 39973
40163: GO 39970
40165: POP
40166: POP
// end else
40167: GO 40553
// for j = 1 to x do
40169: LD_ADDR_VAR 0 9
40173: PUSH
40174: DOUBLE
40175: LD_INT 1
40177: DEC
40178: ST_TO_ADDR
40179: LD_VAR 0 13
40183: PUSH
40184: FOR_TO
40185: IFFALSE 40551
// begin InitHc ;
40187: CALL_OW 19
// if not f then
40191: LD_VAR 0 12
40195: NOT
40196: IFFALSE 40285
// begin PrepareHuman ( false , i , skill ) ;
40198: LD_INT 0
40200: PPUSH
40201: LD_VAR 0 8
40205: PPUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: CALL_OW 380
// un := CreateHuman ;
40215: LD_ADDR_VAR 0 14
40219: PUSH
40220: CALL_OW 44
40224: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40225: LD_ADDR_VAR 0 7
40229: PUSH
40230: LD_VAR 0 7
40234: PPUSH
40235: LD_INT 1
40237: PPUSH
40238: LD_VAR 0 14
40242: PPUSH
40243: CALL_OW 2
40247: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40248: LD_VAR 0 14
40252: PPUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 250
40262: PPUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 251
40272: PPUSH
40273: LD_INT 10
40275: PPUSH
40276: LD_INT 0
40278: PPUSH
40279: CALL_OW 50
// continue ;
40283: GO 40184
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40285: LD_VAR 0 12
40289: PUSH
40290: LD_INT 1
40292: ARRAY
40293: PPUSH
40294: CALL_OW 313
40298: IFFALSE 40326
40300: PUSH
40301: LD_VAR 0 12
40305: PUSH
40306: LD_INT 1
40308: ARRAY
40309: PPUSH
40310: CALL_OW 266
40314: PUSH
40315: LD_INT 32
40317: PUSH
40318: LD_INT 31
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: IN
40325: AND
40326: IFTRUE 40347
40328: PUSH
40329: LD_VAR 0 12
40333: PUSH
40334: LD_INT 1
40336: ARRAY
40337: PPUSH
40338: CALL_OW 313
40342: PUSH
40343: LD_INT 6
40345: EQUAL
40346: OR
40347: IFFALSE 40367
// f := Delete ( f , 1 ) ;
40349: LD_ADDR_VAR 0 12
40353: PUSH
40354: LD_VAR 0 12
40358: PPUSH
40359: LD_INT 1
40361: PPUSH
40362: CALL_OW 3
40366: ST_TO_ADDR
// if not f then
40367: LD_VAR 0 12
40371: NOT
40372: IFFALSE 40390
// begin x := x + 2 ;
40374: LD_ADDR_VAR 0 13
40378: PUSH
40379: LD_VAR 0 13
40383: PUSH
40384: LD_INT 2
40386: PLUS
40387: ST_TO_ADDR
// continue ;
40388: GO 40184
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40390: LD_VAR 0 12
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: CALL_OW 266
40403: PUSH
40404: LD_INT 5
40406: EQUAL
40407: IFFALSE 40481
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40409: LD_VAR 0 12
40413: PUSH
40414: LD_INT 1
40416: ARRAY
40417: PPUSH
40418: CALL_OW 313
40422: PUSH
40423: LD_INT 3
40425: LESS
40426: IFFALSE 40462
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40428: LD_INT 0
40430: PPUSH
40431: LD_INT 5
40433: PUSH
40434: LD_INT 8
40436: PUSH
40437: LD_INT 9
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: PUSH
40445: LD_VAR 0 17
40449: ARRAY
40450: PPUSH
40451: LD_VAR 0 4
40455: PPUSH
40456: CALL_OW 380
40460: GO 40479
// PrepareHuman ( false , i , skill ) ;
40462: LD_INT 0
40464: PPUSH
40465: LD_VAR 0 8
40469: PPUSH
40470: LD_VAR 0 4
40474: PPUSH
40475: CALL_OW 380
// end else
40479: GO 40498
// PrepareHuman ( false , i , skill ) ;
40481: LD_INT 0
40483: PPUSH
40484: LD_VAR 0 8
40488: PPUSH
40489: LD_VAR 0 4
40493: PPUSH
40494: CALL_OW 380
// un := CreateHuman ;
40498: LD_ADDR_VAR 0 14
40502: PUSH
40503: CALL_OW 44
40507: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40508: LD_ADDR_VAR 0 7
40512: PUSH
40513: LD_VAR 0 7
40517: PPUSH
40518: LD_INT 1
40520: PPUSH
40521: LD_VAR 0 14
40525: PPUSH
40526: CALL_OW 2
40530: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40531: LD_VAR 0 14
40535: PPUSH
40536: LD_VAR 0 12
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: PPUSH
40545: CALL_OW 52
// end ;
40549: GO 40184
40551: POP
40552: POP
// end ;
40553: GO 39484
40555: POP
40556: POP
// result := result ^ buildings ;
40557: LD_ADDR_VAR 0 7
40561: PUSH
40562: LD_VAR 0 7
40566: PUSH
40567: LD_VAR 0 18
40571: ADD
40572: ST_TO_ADDR
// end else
40573: GO 40716
// begin for i = 1 to personel do
40575: LD_ADDR_VAR 0 8
40579: PUSH
40580: DOUBLE
40581: LD_INT 1
40583: DEC
40584: ST_TO_ADDR
40585: LD_VAR 0 6
40589: PUSH
40590: FOR_TO
40591: IFFALSE 40714
// begin if i > 4 then
40593: LD_VAR 0 8
40597: PUSH
40598: LD_INT 4
40600: GREATER
40601: IFFALSE 40605
// break ;
40603: GO 40714
// x := personel [ i ] ;
40605: LD_ADDR_VAR 0 13
40609: PUSH
40610: LD_VAR 0 6
40614: PUSH
40615: LD_VAR 0 8
40619: ARRAY
40620: ST_TO_ADDR
// if x = - 1 then
40621: LD_VAR 0 13
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: EQUAL
40630: IFFALSE 40634
// continue ;
40632: GO 40590
// PrepareHuman ( false , i , skill ) ;
40634: LD_INT 0
40636: PPUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: LD_VAR 0 4
40646: PPUSH
40647: CALL_OW 380
// un := CreateHuman ;
40651: LD_ADDR_VAR 0 14
40655: PUSH
40656: CALL_OW 44
40660: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40661: LD_VAR 0 14
40665: PPUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: CALL_OW 250
40675: PPUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 251
40685: PPUSH
40686: LD_INT 10
40688: PPUSH
40689: LD_INT 0
40691: PPUSH
40692: CALL_OW 50
// result := result ^ un ;
40696: LD_ADDR_VAR 0 7
40700: PUSH
40701: LD_VAR 0 7
40705: PUSH
40706: LD_VAR 0 14
40710: ADD
40711: ST_TO_ADDR
// end ;
40712: GO 40590
40714: POP
40715: POP
// end ; end ;
40716: LD_VAR 0 7
40720: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40721: LD_INT 0
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
// result := false ;
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_INT 0
40746: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40747: LD_VAR 0 1
40751: NOT
40752: IFTRUE 40777
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 266
40764: PUSH
40765: LD_INT 32
40767: PUSH
40768: LD_INT 33
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: IN
40775: NOT
40776: OR
40777: IFFALSE 40781
// exit ;
40779: GO 41916
// nat := GetNation ( tower ) ;
40781: LD_ADDR_VAR 0 12
40785: PUSH
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 248
40795: ST_TO_ADDR
// side := GetSide ( tower ) ;
40796: LD_ADDR_VAR 0 16
40800: PUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 255
40810: ST_TO_ADDR
// x := GetX ( tower ) ;
40811: LD_ADDR_VAR 0 10
40815: PUSH
40816: LD_VAR 0 1
40820: PPUSH
40821: CALL_OW 250
40825: ST_TO_ADDR
// y := GetY ( tower ) ;
40826: LD_ADDR_VAR 0 11
40830: PUSH
40831: LD_VAR 0 1
40835: PPUSH
40836: CALL_OW 251
40840: ST_TO_ADDR
// if not x or not y then
40841: LD_VAR 0 10
40845: NOT
40846: IFTRUE 40855
40848: PUSH
40849: LD_VAR 0 11
40853: NOT
40854: OR
40855: IFFALSE 40859
// exit ;
40857: GO 41916
// weapon := 0 ;
40859: LD_ADDR_VAR 0 18
40863: PUSH
40864: LD_INT 0
40866: ST_TO_ADDR
// fac_list := [ ] ;
40867: LD_ADDR_VAR 0 17
40871: PUSH
40872: EMPTY
40873: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40874: LD_ADDR_VAR 0 6
40878: PUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 274
40888: PPUSH
40889: LD_VAR 0 2
40893: PPUSH
40894: LD_INT 0
40896: PPUSH
40897: CALL 38451 0 3
40901: PPUSH
40902: LD_INT 30
40904: PUSH
40905: LD_INT 3
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PPUSH
40912: CALL_OW 72
40916: ST_TO_ADDR
// if not factories then
40917: LD_VAR 0 6
40921: NOT
40922: IFFALSE 40926
// exit ;
40924: GO 41916
// for i in factories do
40926: LD_ADDR_VAR 0 8
40930: PUSH
40931: LD_VAR 0 6
40935: PUSH
40936: FOR_IN
40937: IFFALSE 40962
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40939: LD_ADDR_VAR 0 17
40943: PUSH
40944: LD_VAR 0 17
40948: PUSH
40949: LD_VAR 0 8
40953: PPUSH
40954: CALL_OW 478
40958: UNION
40959: ST_TO_ADDR
40960: GO 40936
40962: POP
40963: POP
// if not fac_list then
40964: LD_VAR 0 17
40968: NOT
40969: IFFALSE 40973
// exit ;
40971: GO 41916
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40973: LD_ADDR_VAR 0 5
40977: PUSH
40978: LD_INT 4
40980: PUSH
40981: LD_INT 5
40983: PUSH
40984: LD_INT 9
40986: PUSH
40987: LD_INT 10
40989: PUSH
40990: LD_INT 6
40992: PUSH
40993: LD_INT 7
40995: PUSH
40996: LD_INT 11
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 27
41010: PUSH
41011: LD_INT 28
41013: PUSH
41014: LD_INT 26
41016: PUSH
41017: LD_INT 30
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 43
41028: PUSH
41029: LD_INT 44
41031: PUSH
41032: LD_INT 46
41034: PUSH
41035: LD_INT 45
41037: PUSH
41038: LD_INT 47
41040: PUSH
41041: LD_INT 49
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: PUSH
41057: LD_VAR 0 12
41061: ARRAY
41062: ST_TO_ADDR
// list := list isect fac_list ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_VAR 0 5
41072: PUSH
41073: LD_VAR 0 17
41077: ISECT
41078: ST_TO_ADDR
// if not list then
41079: LD_VAR 0 5
41083: NOT
41084: IFFALSE 41088
// exit ;
41086: GO 41916
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41088: LD_VAR 0 12
41092: PUSH
41093: LD_INT 3
41095: EQUAL
41096: IFFALSE 41108
41098: PUSH
41099: LD_INT 49
41101: PUSH
41102: LD_VAR 0 5
41106: IN
41107: AND
41108: IFFALSE 41128
41110: PUSH
41111: LD_INT 31
41113: PPUSH
41114: LD_VAR 0 16
41118: PPUSH
41119: CALL_OW 321
41123: PUSH
41124: LD_INT 2
41126: EQUAL
41127: AND
41128: IFFALSE 41188
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41130: LD_INT 22
41132: PUSH
41133: LD_VAR 0 16
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 35
41144: PUSH
41145: LD_INT 49
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 91
41154: PUSH
41155: LD_VAR 0 1
41159: PUSH
41160: LD_INT 10
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: PPUSH
41173: CALL_OW 69
41177: NOT
41178: IFFALSE 41188
// weapon := ru_time_lapser ;
41180: LD_ADDR_VAR 0 18
41184: PUSH
41185: LD_INT 49
41187: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41188: LD_VAR 0 12
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: IN
41203: IFFALSE 41227
41205: PUSH
41206: LD_INT 11
41208: PUSH
41209: LD_VAR 0 5
41213: IN
41214: IFTRUE 41226
41216: PUSH
41217: LD_INT 30
41219: PUSH
41220: LD_VAR 0 5
41224: IN
41225: OR
41226: AND
41227: IFFALSE 41247
41229: PUSH
41230: LD_INT 6
41232: PPUSH
41233: LD_VAR 0 16
41237: PPUSH
41238: CALL_OW 321
41242: PUSH
41243: LD_INT 2
41245: EQUAL
41246: AND
41247: IFFALSE 41414
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41249: LD_INT 22
41251: PUSH
41252: LD_VAR 0 16
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: LD_INT 35
41266: PUSH
41267: LD_INT 11
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 35
41276: PUSH
41277: LD_INT 30
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 91
41291: PUSH
41292: LD_VAR 0 1
41296: PUSH
41297: LD_INT 18
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: PPUSH
41310: CALL_OW 69
41314: NOT
41315: IFFALSE 41391
41317: PUSH
41318: LD_INT 22
41320: PUSH
41321: LD_VAR 0 16
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 30
41335: PUSH
41336: LD_INT 32
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 30
41345: PUSH
41346: LD_INT 33
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 91
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: LD_INT 12
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: PPUSH
41382: CALL_OW 69
41386: PUSH
41387: LD_INT 2
41389: GREATER
41390: AND
41391: IFFALSE 41414
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41393: LD_ADDR_VAR 0 18
41397: PUSH
41398: LD_INT 11
41400: PUSH
41401: LD_INT 30
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_VAR 0 12
41412: ARRAY
41413: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41414: LD_VAR 0 18
41418: NOT
41419: IFFALSE 41439
41421: PUSH
41422: LD_INT 40
41424: PPUSH
41425: LD_VAR 0 16
41429: PPUSH
41430: CALL_OW 321
41434: PUSH
41435: LD_INT 2
41437: EQUAL
41438: AND
41439: IFFALSE 41475
41441: PUSH
41442: LD_INT 7
41444: PUSH
41445: LD_VAR 0 5
41449: IN
41450: IFTRUE 41462
41452: PUSH
41453: LD_INT 28
41455: PUSH
41456: LD_VAR 0 5
41460: IN
41461: OR
41462: IFTRUE 41474
41464: PUSH
41465: LD_INT 45
41467: PUSH
41468: LD_VAR 0 5
41472: IN
41473: OR
41474: AND
41475: IFFALSE 41729
// begin hex := GetHexInfo ( x , y ) ;
41477: LD_ADDR_VAR 0 4
41481: PUSH
41482: LD_VAR 0 10
41486: PPUSH
41487: LD_VAR 0 11
41491: PPUSH
41492: CALL_OW 546
41496: ST_TO_ADDR
// if hex [ 1 ] then
41497: LD_VAR 0 4
41501: PUSH
41502: LD_INT 1
41504: ARRAY
41505: IFFALSE 41509
// exit ;
41507: GO 41916
// height := hex [ 2 ] ;
41509: LD_ADDR_VAR 0 15
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: LD_INT 2
41521: ARRAY
41522: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41523: LD_ADDR_VAR 0 14
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 3
41536: PUSH
41537: LD_INT 5
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: ST_TO_ADDR
// for i in tmp do
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: LD_VAR 0 14
41555: PUSH
41556: FOR_IN
41557: IFFALSE 41727
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41559: LD_ADDR_VAR 0 9
41563: PUSH
41564: LD_VAR 0 10
41568: PPUSH
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_INT 5
41576: PPUSH
41577: CALL_OW 272
41581: PUSH
41582: LD_VAR 0 11
41586: PPUSH
41587: LD_VAR 0 8
41591: PPUSH
41592: LD_INT 5
41594: PPUSH
41595: CALL_OW 273
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41604: LD_VAR 0 9
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: PPUSH
41613: LD_VAR 0 9
41617: PUSH
41618: LD_INT 2
41620: ARRAY
41621: PPUSH
41622: CALL_OW 488
41626: IFFALSE 41725
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41628: LD_ADDR_VAR 0 4
41632: PUSH
41633: LD_VAR 0 9
41637: PUSH
41638: LD_INT 1
41640: ARRAY
41641: PPUSH
41642: LD_VAR 0 9
41646: PUSH
41647: LD_INT 2
41649: ARRAY
41650: PPUSH
41651: CALL_OW 546
41655: ST_TO_ADDR
// if hex [ 1 ] then
41656: LD_VAR 0 4
41660: PUSH
41661: LD_INT 1
41663: ARRAY
41664: IFFALSE 41668
// continue ;
41666: GO 41556
// h := hex [ 2 ] ;
41668: LD_ADDR_VAR 0 13
41672: PUSH
41673: LD_VAR 0 4
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: ST_TO_ADDR
// if h + 7 < height then
41682: LD_VAR 0 13
41686: PUSH
41687: LD_INT 7
41689: PLUS
41690: PUSH
41691: LD_VAR 0 15
41695: LESS
41696: IFFALSE 41725
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41698: LD_ADDR_VAR 0 18
41702: PUSH
41703: LD_INT 7
41705: PUSH
41706: LD_INT 28
41708: PUSH
41709: LD_INT 45
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: PUSH
41717: LD_VAR 0 12
41721: ARRAY
41722: ST_TO_ADDR
// break ;
41723: GO 41727
// end ; end ; end ;
41725: GO 41556
41727: POP
41728: POP
// end ; if not weapon then
41729: LD_VAR 0 18
41733: NOT
41734: IFFALSE 41794
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41736: LD_ADDR_VAR 0 5
41740: PUSH
41741: LD_VAR 0 5
41745: PUSH
41746: LD_INT 11
41748: PUSH
41749: LD_INT 30
41751: PUSH
41752: LD_INT 49
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: DIFF
41760: ST_TO_ADDR
// if not list then
41761: LD_VAR 0 5
41765: NOT
41766: IFFALSE 41770
// exit ;
41768: GO 41916
// weapon := list [ rand ( 1 , list ) ] ;
41770: LD_ADDR_VAR 0 18
41774: PUSH
41775: LD_VAR 0 5
41779: PUSH
41780: LD_INT 1
41782: PPUSH
41783: LD_VAR 0 5
41787: PPUSH
41788: CALL_OW 12
41792: ARRAY
41793: ST_TO_ADDR
// end ; if weapon then
41794: LD_VAR 0 18
41798: IFFALSE 41916
// begin tmp := CostOfWeapon ( weapon ) ;
41800: LD_ADDR_VAR 0 14
41804: PUSH
41805: LD_VAR 0 18
41809: PPUSH
41810: CALL_OW 451
41814: ST_TO_ADDR
// j := GetBase ( tower ) ;
41815: LD_ADDR_VAR 0 9
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 274
41829: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41830: LD_VAR 0 9
41834: PPUSH
41835: LD_INT 1
41837: PPUSH
41838: CALL_OW 275
41842: PUSH
41843: LD_VAR 0 14
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: GREATEREQUAL
41852: IFFALSE 41878
41854: PUSH
41855: LD_VAR 0 9
41859: PPUSH
41860: LD_INT 2
41862: PPUSH
41863: CALL_OW 275
41867: PUSH
41868: LD_VAR 0 14
41872: PUSH
41873: LD_INT 2
41875: ARRAY
41876: GREATEREQUAL
41877: AND
41878: IFFALSE 41904
41880: PUSH
41881: LD_VAR 0 9
41885: PPUSH
41886: LD_INT 3
41888: PPUSH
41889: CALL_OW 275
41893: PUSH
41894: LD_VAR 0 14
41898: PUSH
41899: LD_INT 3
41901: ARRAY
41902: GREATEREQUAL
41903: AND
41904: IFFALSE 41916
// result := weapon ;
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_VAR 0 18
41915: ST_TO_ADDR
// end ; end ;
41916: LD_VAR 0 3
41920: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41921: LD_INT 0
41923: PPUSH
41924: PPUSH
// result := true ;
41925: LD_ADDR_VAR 0 3
41929: PUSH
41930: LD_INT 1
41932: ST_TO_ADDR
// if array1 = array2 then
41933: LD_VAR 0 1
41937: PUSH
41938: LD_VAR 0 2
41942: EQUAL
41943: IFFALSE 42003
// begin for i = 1 to array1 do
41945: LD_ADDR_VAR 0 4
41949: PUSH
41950: DOUBLE
41951: LD_INT 1
41953: DEC
41954: ST_TO_ADDR
41955: LD_VAR 0 1
41959: PUSH
41960: FOR_TO
41961: IFFALSE 41999
// if array1 [ i ] <> array2 [ i ] then
41963: LD_VAR 0 1
41967: PUSH
41968: LD_VAR 0 4
41972: ARRAY
41973: PUSH
41974: LD_VAR 0 2
41978: PUSH
41979: LD_VAR 0 4
41983: ARRAY
41984: NONEQUAL
41985: IFFALSE 41997
// begin result := false ;
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 0
41994: ST_TO_ADDR
// break ;
41995: GO 41999
// end ;
41997: GO 41960
41999: POP
42000: POP
// end else
42001: GO 42011
// result := false ;
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_INT 0
42010: ST_TO_ADDR
// end ;
42011: LD_VAR 0 3
42015: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42016: LD_INT 0
42018: PPUSH
42019: PPUSH
// if not array1 or not array2 then
42020: LD_VAR 0 1
42024: NOT
42025: IFTRUE 42034
42027: PUSH
42028: LD_VAR 0 2
42032: NOT
42033: OR
42034: IFFALSE 42038
// exit ;
42036: GO 42102
// result := true ;
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 1
42045: ST_TO_ADDR
// for i = 1 to array1 do
42046: LD_ADDR_VAR 0 4
42050: PUSH
42051: DOUBLE
42052: LD_INT 1
42054: DEC
42055: ST_TO_ADDR
42056: LD_VAR 0 1
42060: PUSH
42061: FOR_TO
42062: IFFALSE 42100
// if array1 [ i ] <> array2 [ i ] then
42064: LD_VAR 0 1
42068: PUSH
42069: LD_VAR 0 4
42073: ARRAY
42074: PUSH
42075: LD_VAR 0 2
42079: PUSH
42080: LD_VAR 0 4
42084: ARRAY
42085: NONEQUAL
42086: IFFALSE 42098
// begin result := false ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_INT 0
42095: ST_TO_ADDR
// break ;
42096: GO 42100
// end ;
42098: GO 42061
42100: POP
42101: POP
// end ;
42102: LD_VAR 0 3
42106: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42107: LD_INT 0
42109: PPUSH
42110: PPUSH
42111: PPUSH
// pom := GetBase ( fac ) ;
42112: LD_ADDR_VAR 0 5
42116: PUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: CALL_OW 274
42126: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42127: LD_ADDR_VAR 0 4
42131: PUSH
42132: LD_VAR 0 2
42136: PUSH
42137: LD_INT 1
42139: ARRAY
42140: PPUSH
42141: LD_VAR 0 2
42145: PUSH
42146: LD_INT 2
42148: ARRAY
42149: PPUSH
42150: LD_VAR 0 2
42154: PUSH
42155: LD_INT 3
42157: ARRAY
42158: PPUSH
42159: LD_VAR 0 2
42163: PUSH
42164: LD_INT 4
42166: ARRAY
42167: PPUSH
42168: CALL_OW 449
42172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42173: LD_ADDR_VAR 0 3
42177: PUSH
42178: LD_VAR 0 5
42182: PPUSH
42183: LD_INT 1
42185: PPUSH
42186: CALL_OW 275
42190: PUSH
42191: LD_VAR 0 4
42195: PUSH
42196: LD_INT 1
42198: ARRAY
42199: GREATEREQUAL
42200: IFFALSE 42226
42202: PUSH
42203: LD_VAR 0 5
42207: PPUSH
42208: LD_INT 2
42210: PPUSH
42211: CALL_OW 275
42215: PUSH
42216: LD_VAR 0 4
42220: PUSH
42221: LD_INT 2
42223: ARRAY
42224: GREATEREQUAL
42225: AND
42226: IFFALSE 42252
42228: PUSH
42229: LD_VAR 0 5
42233: PPUSH
42234: LD_INT 3
42236: PPUSH
42237: CALL_OW 275
42241: PUSH
42242: LD_VAR 0 4
42246: PUSH
42247: LD_INT 3
42249: ARRAY
42250: GREATEREQUAL
42251: AND
42252: ST_TO_ADDR
// end ;
42253: LD_VAR 0 3
42257: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42258: LD_INT 0
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
// pom := GetBase ( building ) ;
42264: LD_ADDR_VAR 0 3
42268: PUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 274
42278: ST_TO_ADDR
// if not pom then
42279: LD_VAR 0 3
42283: NOT
42284: IFFALSE 42288
// exit ;
42286: GO 42462
// btype := GetBType ( building ) ;
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: CALL_OW 266
42302: ST_TO_ADDR
// if btype = b_armoury then
42303: LD_VAR 0 5
42307: PUSH
42308: LD_INT 4
42310: EQUAL
42311: IFFALSE 42321
// btype := b_barracks ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_INT 5
42320: ST_TO_ADDR
// if btype = b_depot then
42321: LD_VAR 0 5
42325: PUSH
42326: LD_INT 0
42328: EQUAL
42329: IFFALSE 42339
// btype := b_warehouse ;
42331: LD_ADDR_VAR 0 5
42335: PUSH
42336: LD_INT 1
42338: ST_TO_ADDR
// if btype = b_workshop then
42339: LD_VAR 0 5
42343: PUSH
42344: LD_INT 2
42346: EQUAL
42347: IFFALSE 42357
// btype := b_factory ;
42349: LD_ADDR_VAR 0 5
42353: PUSH
42354: LD_INT 3
42356: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42357: LD_ADDR_VAR 0 4
42361: PUSH
42362: LD_VAR 0 5
42366: PPUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 248
42376: PPUSH
42377: CALL_OW 450
42381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42382: LD_ADDR_VAR 0 2
42386: PUSH
42387: LD_VAR 0 3
42391: PPUSH
42392: LD_INT 1
42394: PPUSH
42395: CALL_OW 275
42399: PUSH
42400: LD_VAR 0 4
42404: PUSH
42405: LD_INT 1
42407: ARRAY
42408: GREATEREQUAL
42409: IFFALSE 42435
42411: PUSH
42412: LD_VAR 0 3
42416: PPUSH
42417: LD_INT 2
42419: PPUSH
42420: CALL_OW 275
42424: PUSH
42425: LD_VAR 0 4
42429: PUSH
42430: LD_INT 2
42432: ARRAY
42433: GREATEREQUAL
42434: AND
42435: IFFALSE 42461
42437: PUSH
42438: LD_VAR 0 3
42442: PPUSH
42443: LD_INT 3
42445: PPUSH
42446: CALL_OW 275
42450: PUSH
42451: LD_VAR 0 4
42455: PUSH
42456: LD_INT 3
42458: ARRAY
42459: GREATEREQUAL
42460: AND
42461: ST_TO_ADDR
// end ;
42462: LD_VAR 0 2
42466: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42467: LD_INT 0
42469: PPUSH
42470: PPUSH
42471: PPUSH
// pom := GetBase ( building ) ;
42472: LD_ADDR_VAR 0 4
42476: PUSH
42477: LD_VAR 0 1
42481: PPUSH
42482: CALL_OW 274
42486: ST_TO_ADDR
// if not pom then
42487: LD_VAR 0 4
42491: NOT
42492: IFFALSE 42496
// exit ;
42494: GO 42601
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42496: LD_ADDR_VAR 0 5
42500: PUSH
42501: LD_VAR 0 2
42505: PPUSH
42506: LD_VAR 0 1
42510: PPUSH
42511: CALL_OW 248
42515: PPUSH
42516: CALL_OW 450
42520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42521: LD_ADDR_VAR 0 3
42525: PUSH
42526: LD_VAR 0 4
42530: PPUSH
42531: LD_INT 1
42533: PPUSH
42534: CALL_OW 275
42538: PUSH
42539: LD_VAR 0 5
42543: PUSH
42544: LD_INT 1
42546: ARRAY
42547: GREATEREQUAL
42548: IFFALSE 42574
42550: PUSH
42551: LD_VAR 0 4
42555: PPUSH
42556: LD_INT 2
42558: PPUSH
42559: CALL_OW 275
42563: PUSH
42564: LD_VAR 0 5
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: GREATEREQUAL
42573: AND
42574: IFFALSE 42600
42576: PUSH
42577: LD_VAR 0 4
42581: PPUSH
42582: LD_INT 3
42584: PPUSH
42585: CALL_OW 275
42589: PUSH
42590: LD_VAR 0 5
42594: PUSH
42595: LD_INT 3
42597: ARRAY
42598: GREATEREQUAL
42599: AND
42600: ST_TO_ADDR
// end ;
42601: LD_VAR 0 3
42605: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
// result := false ;
42619: LD_ADDR_VAR 0 8
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42627: LD_VAR 0 5
42631: NOT
42632: IFTRUE 42641
42634: PUSH
42635: LD_VAR 0 1
42639: NOT
42640: OR
42641: IFTRUE 42650
42643: PUSH
42644: LD_VAR 0 2
42648: NOT
42649: OR
42650: IFTRUE 42659
42652: PUSH
42653: LD_VAR 0 3
42657: NOT
42658: OR
42659: IFFALSE 42663
// exit ;
42661: GO 43489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42663: LD_ADDR_VAR 0 14
42667: PUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: LD_VAR 0 2
42677: PPUSH
42678: LD_VAR 0 3
42682: PPUSH
42683: LD_VAR 0 4
42687: PPUSH
42688: LD_VAR 0 5
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: PPUSH
42697: CALL_OW 248
42701: PPUSH
42702: LD_INT 0
42704: PPUSH
42705: CALL 44770 0 6
42709: ST_TO_ADDR
// if not hexes then
42710: LD_VAR 0 14
42714: NOT
42715: IFFALSE 42719
// exit ;
42717: GO 43489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42719: LD_ADDR_VAR 0 17
42723: PUSH
42724: LD_VAR 0 5
42728: PPUSH
42729: LD_INT 22
42731: PUSH
42732: LD_VAR 0 13
42736: PPUSH
42737: CALL_OW 255
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 30
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 30
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PPUSH
42778: CALL_OW 72
42782: ST_TO_ADDR
// for i = 1 to hexes do
42783: LD_ADDR_VAR 0 9
42787: PUSH
42788: DOUBLE
42789: LD_INT 1
42791: DEC
42792: ST_TO_ADDR
42793: LD_VAR 0 14
42797: PUSH
42798: FOR_TO
42799: IFFALSE 43487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42801: LD_ADDR_VAR 0 13
42805: PUSH
42806: LD_VAR 0 14
42810: PUSH
42811: LD_VAR 0 9
42815: ARRAY
42816: PUSH
42817: LD_INT 1
42819: ARRAY
42820: PPUSH
42821: LD_VAR 0 14
42825: PUSH
42826: LD_VAR 0 9
42830: ARRAY
42831: PUSH
42832: LD_INT 2
42834: ARRAY
42835: PPUSH
42836: CALL_OW 428
42840: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42841: LD_VAR 0 14
42845: PUSH
42846: LD_VAR 0 9
42850: ARRAY
42851: PUSH
42852: LD_INT 1
42854: ARRAY
42855: PPUSH
42856: LD_VAR 0 14
42860: PUSH
42861: LD_VAR 0 9
42865: ARRAY
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: PPUSH
42871: CALL_OW 351
42875: IFTRUE 42914
42877: PUSH
42878: LD_VAR 0 14
42882: PUSH
42883: LD_VAR 0 9
42887: ARRAY
42888: PUSH
42889: LD_INT 1
42891: ARRAY
42892: PPUSH
42893: LD_VAR 0 14
42897: PUSH
42898: LD_VAR 0 9
42902: ARRAY
42903: PUSH
42904: LD_INT 2
42906: ARRAY
42907: PPUSH
42908: CALL_OW 488
42912: NOT
42913: OR
42914: IFTRUE 42931
42916: PUSH
42917: LD_VAR 0 13
42921: PPUSH
42922: CALL_OW 247
42926: PUSH
42927: LD_INT 3
42929: EQUAL
42930: OR
42931: IFFALSE 42937
// exit ;
42933: POP
42934: POP
42935: GO 43489
// if not tmp then
42937: LD_VAR 0 13
42941: NOT
42942: IFFALSE 42946
// continue ;
42944: GO 42798
// result := true ;
42946: LD_ADDR_VAR 0 8
42950: PUSH
42951: LD_INT 1
42953: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42954: LD_VAR 0 6
42958: IFFALSE 42975
42960: PUSH
42961: LD_VAR 0 13
42965: PPUSH
42966: CALL_OW 247
42970: PUSH
42971: LD_INT 2
42973: EQUAL
42974: AND
42975: IFFALSE 42992
42977: PUSH
42978: LD_VAR 0 13
42982: PPUSH
42983: CALL_OW 263
42987: PUSH
42988: LD_INT 1
42990: EQUAL
42991: AND
42992: IFFALSE 43156
// begin if IsDrivenBy ( tmp ) then
42994: LD_VAR 0 13
42998: PPUSH
42999: CALL_OW 311
43003: IFFALSE 43007
// continue ;
43005: GO 42798
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43007: LD_VAR 0 6
43011: PPUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 60
43017: PUSH
43018: EMPTY
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: LD_INT 55
43030: PUSH
43031: EMPTY
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PPUSH
43042: CALL_OW 72
43046: IFFALSE 43154
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43048: LD_ADDR_VAR 0 18
43052: PUSH
43053: LD_VAR 0 6
43057: PPUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 60
43063: PUSH
43064: EMPTY
43065: LIST
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: LD_INT 55
43076: PUSH
43077: EMPTY
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PPUSH
43088: CALL_OW 72
43092: PUSH
43093: LD_INT 1
43095: ARRAY
43096: ST_TO_ADDR
// if IsInUnit ( driver ) then
43097: LD_VAR 0 18
43101: PPUSH
43102: CALL_OW 310
43106: IFFALSE 43117
// ComExit ( driver ) ;
43108: LD_VAR 0 18
43112: PPUSH
43113: CALL 68770 0 1
// AddComEnterUnit ( driver , tmp ) ;
43117: LD_VAR 0 18
43121: PPUSH
43122: LD_VAR 0 13
43126: PPUSH
43127: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43131: LD_VAR 0 18
43135: PPUSH
43136: LD_VAR 0 7
43140: PPUSH
43141: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43145: LD_VAR 0 18
43149: PPUSH
43150: CALL_OW 181
// end ; continue ;
43154: GO 42798
// end ; if not cleaners or not tmp in cleaners then
43156: LD_VAR 0 6
43160: NOT
43161: IFTRUE 43176
43163: PUSH
43164: LD_VAR 0 13
43168: PUSH
43169: LD_VAR 0 6
43173: IN
43174: NOT
43175: OR
43176: IFFALSE 43485
// begin if dep then
43178: LD_VAR 0 17
43182: IFFALSE 43318
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43184: LD_ADDR_VAR 0 16
43188: PUSH
43189: LD_VAR 0 17
43193: PUSH
43194: LD_INT 1
43196: ARRAY
43197: PPUSH
43198: CALL_OW 250
43202: PPUSH
43203: LD_VAR 0 17
43207: PUSH
43208: LD_INT 1
43210: ARRAY
43211: PPUSH
43212: CALL_OW 254
43216: PPUSH
43217: LD_INT 5
43219: PPUSH
43220: CALL_OW 272
43224: PUSH
43225: LD_VAR 0 17
43229: PUSH
43230: LD_INT 1
43232: ARRAY
43233: PPUSH
43234: CALL_OW 251
43238: PPUSH
43239: LD_VAR 0 17
43243: PUSH
43244: LD_INT 1
43246: ARRAY
43247: PPUSH
43248: CALL_OW 254
43252: PPUSH
43253: LD_INT 5
43255: PPUSH
43256: CALL_OW 273
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43265: LD_VAR 0 16
43269: PUSH
43270: LD_INT 1
43272: ARRAY
43273: PPUSH
43274: LD_VAR 0 16
43278: PUSH
43279: LD_INT 2
43281: ARRAY
43282: PPUSH
43283: CALL_OW 488
43287: IFFALSE 43318
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43289: LD_VAR 0 13
43293: PPUSH
43294: LD_VAR 0 16
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 16
43307: PUSH
43308: LD_INT 2
43310: ARRAY
43311: PPUSH
43312: CALL_OW 111
// continue ;
43316: GO 42798
// end ; end ; r := GetDir ( tmp ) ;
43318: LD_ADDR_VAR 0 15
43322: PUSH
43323: LD_VAR 0 13
43327: PPUSH
43328: CALL_OW 254
43332: ST_TO_ADDR
// if r = 5 then
43333: LD_VAR 0 15
43337: PUSH
43338: LD_INT 5
43340: EQUAL
43341: IFFALSE 43351
// r := 0 ;
43343: LD_ADDR_VAR 0 15
43347: PUSH
43348: LD_INT 0
43350: ST_TO_ADDR
// for j = r to 5 do
43351: LD_ADDR_VAR 0 10
43355: PUSH
43356: DOUBLE
43357: LD_VAR 0 15
43361: DEC
43362: ST_TO_ADDR
43363: LD_INT 5
43365: PUSH
43366: FOR_TO
43367: IFFALSE 43483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43369: LD_ADDR_VAR 0 11
43373: PUSH
43374: LD_VAR 0 13
43378: PPUSH
43379: CALL_OW 250
43383: PPUSH
43384: LD_VAR 0 10
43388: PPUSH
43389: LD_INT 2
43391: PPUSH
43392: CALL_OW 272
43396: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43397: LD_ADDR_VAR 0 12
43401: PUSH
43402: LD_VAR 0 13
43406: PPUSH
43407: CALL_OW 251
43411: PPUSH
43412: LD_VAR 0 10
43416: PPUSH
43417: LD_INT 2
43419: PPUSH
43420: CALL_OW 273
43424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43425: LD_VAR 0 11
43429: PPUSH
43430: LD_VAR 0 12
43434: PPUSH
43435: CALL_OW 488
43439: IFFALSE 43458
43441: PUSH
43442: LD_VAR 0 11
43446: PPUSH
43447: LD_VAR 0 12
43451: PPUSH
43452: CALL_OW 428
43456: NOT
43457: AND
43458: IFFALSE 43481
// begin ComMoveXY ( tmp , _x , _y ) ;
43460: LD_VAR 0 13
43464: PPUSH
43465: LD_VAR 0 11
43469: PPUSH
43470: LD_VAR 0 12
43474: PPUSH
43475: CALL_OW 111
// break ;
43479: GO 43483
// end ; end ;
43481: GO 43366
43483: POP
43484: POP
// end ; end ;
43485: GO 42798
43487: POP
43488: POP
// end ;
43489: LD_VAR 0 8
43493: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43494: LD_INT 0
43496: PPUSH
// result := true ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 1
43504: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43505: LD_VAR 0 2
43509: PUSH
43510: LD_INT 24
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43524
43516: LD_INT 33
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43549
43524: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 32
43532: PPUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 321
43542: PUSH
43543: LD_INT 2
43545: EQUAL
43546: ST_TO_ADDR
43547: GO 43865
43549: LD_INT 20
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43582
43557: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 6
43565: PPUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 321
43575: PUSH
43576: LD_INT 2
43578: EQUAL
43579: ST_TO_ADDR
43580: GO 43865
43582: LD_INT 22
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43596
43588: LD_INT 36
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43621
43596: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 15
43604: PPUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 321
43614: PUSH
43615: LD_INT 2
43617: EQUAL
43618: ST_TO_ADDR
43619: GO 43865
43621: LD_INT 30
43623: DOUBLE
43624: EQUAL
43625: IFTRUE 43629
43627: GO 43654
43629: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43630: LD_ADDR_VAR 0 3
43634: PUSH
43635: LD_INT 20
43637: PPUSH
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 321
43647: PUSH
43648: LD_INT 2
43650: EQUAL
43651: ST_TO_ADDR
43652: GO 43865
43654: LD_INT 28
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43668
43660: LD_INT 21
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43693
43668: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_INT 21
43676: PPUSH
43677: LD_VAR 0 1
43681: PPUSH
43682: CALL_OW 321
43686: PUSH
43687: LD_INT 2
43689: EQUAL
43690: ST_TO_ADDR
43691: GO 43865
43693: LD_INT 16
43695: DOUBLE
43696: EQUAL
43697: IFTRUE 43701
43699: GO 43726
43701: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43702: LD_ADDR_VAR 0 3
43706: PUSH
43707: LD_INT 84
43709: PPUSH
43710: LD_VAR 0 1
43714: PPUSH
43715: CALL_OW 321
43719: PUSH
43720: LD_INT 2
43722: EQUAL
43723: ST_TO_ADDR
43724: GO 43865
43726: LD_INT 19
43728: DOUBLE
43729: EQUAL
43730: IFTRUE 43740
43732: LD_INT 23
43734: DOUBLE
43735: EQUAL
43736: IFTRUE 43740
43738: GO 43765
43740: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: LD_INT 83
43748: PPUSH
43749: LD_VAR 0 1
43753: PPUSH
43754: CALL_OW 321
43758: PUSH
43759: LD_INT 2
43761: EQUAL
43762: ST_TO_ADDR
43763: GO 43865
43765: LD_INT 17
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43773
43771: GO 43798
43773: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43774: LD_ADDR_VAR 0 3
43778: PUSH
43779: LD_INT 39
43781: PPUSH
43782: LD_VAR 0 1
43786: PPUSH
43787: CALL_OW 321
43791: PUSH
43792: LD_INT 2
43794: EQUAL
43795: ST_TO_ADDR
43796: GO 43865
43798: LD_INT 18
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43831
43806: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 40
43814: PPUSH
43815: LD_VAR 0 1
43819: PPUSH
43820: CALL_OW 321
43824: PUSH
43825: LD_INT 2
43827: EQUAL
43828: ST_TO_ADDR
43829: GO 43865
43831: LD_INT 27
43833: DOUBLE
43834: EQUAL
43835: IFTRUE 43839
43837: GO 43864
43839: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_INT 35
43847: PPUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: CALL_OW 321
43857: PUSH
43858: LD_INT 2
43860: EQUAL
43861: ST_TO_ADDR
43862: GO 43865
43864: POP
// end ;
43865: LD_VAR 0 3
43869: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43870: LD_INT 0
43872: PPUSH
43873: PPUSH
43874: PPUSH
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
// result := false ;
43883: LD_ADDR_VAR 0 6
43887: PUSH
43888: LD_INT 0
43890: ST_TO_ADDR
// if btype = b_depot then
43891: LD_VAR 0 2
43895: PUSH
43896: LD_INT 0
43898: EQUAL
43899: IFFALSE 43911
// begin result := true ;
43901: LD_ADDR_VAR 0 6
43905: PUSH
43906: LD_INT 1
43908: ST_TO_ADDR
// exit ;
43909: GO 44765
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43911: LD_VAR 0 1
43915: NOT
43916: IFTRUE 43941
43918: PUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: CALL_OW 266
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: IN
43939: NOT
43940: OR
43941: IFTRUE 43950
43943: PUSH
43944: LD_VAR 0 2
43948: NOT
43949: OR
43950: IFTRUE 43986
43952: PUSH
43953: LD_VAR 0 5
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 4
43972: PUSH
43973: LD_INT 5
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: IN
43984: NOT
43985: OR
43986: IFTRUE 44005
43988: PUSH
43989: LD_VAR 0 3
43993: PPUSH
43994: LD_VAR 0 4
43998: PPUSH
43999: CALL_OW 488
44003: NOT
44004: OR
44005: IFFALSE 44009
// exit ;
44007: GO 44765
// side := GetSide ( depot ) ;
44009: LD_ADDR_VAR 0 9
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 255
44023: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44024: LD_VAR 0 9
44028: PPUSH
44029: LD_VAR 0 2
44033: PPUSH
44034: CALL 43494 0 2
44038: NOT
44039: IFFALSE 44043
// exit ;
44041: GO 44765
// pom := GetBase ( depot ) ;
44043: LD_ADDR_VAR 0 10
44047: PUSH
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 274
44057: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44058: LD_ADDR_VAR 0 11
44062: PUSH
44063: LD_VAR 0 2
44067: PPUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 248
44077: PPUSH
44078: CALL_OW 450
44082: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44083: LD_VAR 0 10
44087: PPUSH
44088: LD_INT 1
44090: PPUSH
44091: CALL_OW 275
44095: PUSH
44096: LD_VAR 0 11
44100: PUSH
44101: LD_INT 1
44103: ARRAY
44104: GREATEREQUAL
44105: IFFALSE 44131
44107: PUSH
44108: LD_VAR 0 10
44112: PPUSH
44113: LD_INT 2
44115: PPUSH
44116: CALL_OW 275
44120: PUSH
44121: LD_VAR 0 11
44125: PUSH
44126: LD_INT 2
44128: ARRAY
44129: GREATEREQUAL
44130: AND
44131: IFFALSE 44157
44133: PUSH
44134: LD_VAR 0 10
44138: PPUSH
44139: LD_INT 3
44141: PPUSH
44142: CALL_OW 275
44146: PUSH
44147: LD_VAR 0 11
44151: PUSH
44152: LD_INT 3
44154: ARRAY
44155: GREATEREQUAL
44156: AND
44157: NOT
44158: IFFALSE 44162
// exit ;
44160: GO 44765
// if GetBType ( depot ) = b_depot then
44162: LD_VAR 0 1
44166: PPUSH
44167: CALL_OW 266
44171: PUSH
44172: LD_INT 0
44174: EQUAL
44175: IFFALSE 44187
// dist := 28 else
44177: LD_ADDR_VAR 0 14
44181: PUSH
44182: LD_INT 28
44184: ST_TO_ADDR
44185: GO 44195
// dist := 36 ;
44187: LD_ADDR_VAR 0 14
44191: PUSH
44192: LD_INT 36
44194: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44195: LD_VAR 0 1
44199: PPUSH
44200: LD_VAR 0 3
44204: PPUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: CALL_OW 297
44214: PUSH
44215: LD_VAR 0 14
44219: GREATER
44220: IFFALSE 44224
// exit ;
44222: GO 44765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44224: LD_ADDR_VAR 0 12
44228: PUSH
44229: LD_VAR 0 2
44233: PPUSH
44234: LD_VAR 0 3
44238: PPUSH
44239: LD_VAR 0 4
44243: PPUSH
44244: LD_VAR 0 5
44248: PPUSH
44249: LD_VAR 0 1
44253: PPUSH
44254: CALL_OW 248
44258: PPUSH
44259: LD_INT 0
44261: PPUSH
44262: CALL 44770 0 6
44266: ST_TO_ADDR
// if not hexes then
44267: LD_VAR 0 12
44271: NOT
44272: IFFALSE 44276
// exit ;
44274: GO 44765
// hex := GetHexInfo ( x , y ) ;
44276: LD_ADDR_VAR 0 15
44280: PUSH
44281: LD_VAR 0 3
44285: PPUSH
44286: LD_VAR 0 4
44290: PPUSH
44291: CALL_OW 546
44295: ST_TO_ADDR
// if hex [ 1 ] then
44296: LD_VAR 0 15
44300: PUSH
44301: LD_INT 1
44303: ARRAY
44304: IFFALSE 44308
// exit ;
44306: GO 44765
// height := hex [ 2 ] ;
44308: LD_ADDR_VAR 0 13
44312: PUSH
44313: LD_VAR 0 15
44317: PUSH
44318: LD_INT 2
44320: ARRAY
44321: ST_TO_ADDR
// for i = 1 to hexes do
44322: LD_ADDR_VAR 0 7
44326: PUSH
44327: DOUBLE
44328: LD_INT 1
44330: DEC
44331: ST_TO_ADDR
44332: LD_VAR 0 12
44336: PUSH
44337: FOR_TO
44338: IFFALSE 44682
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44340: LD_VAR 0 12
44344: PUSH
44345: LD_VAR 0 7
44349: ARRAY
44350: PUSH
44351: LD_INT 1
44353: ARRAY
44354: PPUSH
44355: LD_VAR 0 12
44359: PUSH
44360: LD_VAR 0 7
44364: ARRAY
44365: PUSH
44366: LD_INT 2
44368: ARRAY
44369: PPUSH
44370: CALL_OW 488
44374: NOT
44375: IFTRUE 44417
44377: PUSH
44378: LD_VAR 0 12
44382: PUSH
44383: LD_VAR 0 7
44387: ARRAY
44388: PUSH
44389: LD_INT 1
44391: ARRAY
44392: PPUSH
44393: LD_VAR 0 12
44397: PUSH
44398: LD_VAR 0 7
44402: ARRAY
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PPUSH
44408: CALL_OW 428
44412: PUSH
44413: LD_INT 0
44415: GREATER
44416: OR
44417: IFTRUE 44455
44419: PUSH
44420: LD_VAR 0 12
44424: PUSH
44425: LD_VAR 0 7
44429: ARRAY
44430: PUSH
44431: LD_INT 1
44433: ARRAY
44434: PPUSH
44435: LD_VAR 0 12
44439: PUSH
44440: LD_VAR 0 7
44444: ARRAY
44445: PUSH
44446: LD_INT 2
44448: ARRAY
44449: PPUSH
44450: CALL_OW 351
44454: OR
44455: IFFALSE 44461
// exit ;
44457: POP
44458: POP
44459: GO 44765
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44461: LD_ADDR_VAR 0 8
44465: PUSH
44466: LD_VAR 0 12
44470: PUSH
44471: LD_VAR 0 7
44475: ARRAY
44476: PUSH
44477: LD_INT 1
44479: ARRAY
44480: PPUSH
44481: LD_VAR 0 12
44485: PUSH
44486: LD_VAR 0 7
44490: ARRAY
44491: PUSH
44492: LD_INT 2
44494: ARRAY
44495: PPUSH
44496: CALL_OW 546
44500: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44501: LD_VAR 0 8
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: IFTRUE 44531
44511: PUSH
44512: LD_VAR 0 8
44516: PUSH
44517: LD_INT 2
44519: ARRAY
44520: PUSH
44521: LD_VAR 0 13
44525: PUSH
44526: LD_INT 2
44528: PLUS
44529: GREATER
44530: OR
44531: IFTRUE 44553
44533: PUSH
44534: LD_VAR 0 8
44538: PUSH
44539: LD_INT 2
44541: ARRAY
44542: PUSH
44543: LD_VAR 0 13
44547: PUSH
44548: LD_INT 2
44550: MINUS
44551: LESS
44552: OR
44553: IFTRUE 44621
44555: PUSH
44556: LD_VAR 0 8
44560: PUSH
44561: LD_INT 3
44563: ARRAY
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 8
44570: PUSH
44571: LD_INT 9
44573: PUSH
44574: LD_INT 10
44576: PUSH
44577: LD_INT 11
44579: PUSH
44580: LD_INT 12
44582: PUSH
44583: LD_INT 13
44585: PUSH
44586: LD_INT 16
44588: PUSH
44589: LD_INT 17
44591: PUSH
44592: LD_INT 18
44594: PUSH
44595: LD_INT 19
44597: PUSH
44598: LD_INT 20
44600: PUSH
44601: LD_INT 21
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: IN
44619: NOT
44620: OR
44621: IFTRUE 44634
44623: PUSH
44624: LD_VAR 0 8
44628: PUSH
44629: LD_INT 5
44631: ARRAY
44632: NOT
44633: OR
44634: IFTRUE 44674
44636: PUSH
44637: LD_VAR 0 8
44641: PUSH
44642: LD_INT 6
44644: ARRAY
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 7
44654: PUSH
44655: LD_INT 9
44657: PUSH
44658: LD_INT 10
44660: PUSH
44661: LD_INT 11
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: IN
44672: NOT
44673: OR
44674: IFFALSE 44680
// exit ;
44676: POP
44677: POP
44678: GO 44765
// end ;
44680: GO 44337
44682: POP
44683: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44684: LD_VAR 0 9
44688: PPUSH
44689: LD_VAR 0 3
44693: PPUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: LD_INT 20
44701: PPUSH
44702: CALL 36584 0 4
44706: PUSH
44707: LD_INT 4
44709: ARRAY
44710: IFFALSE 44714
// exit ;
44712: GO 44765
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44714: LD_VAR 0 2
44718: PUSH
44719: LD_INT 29
44721: PUSH
44722: LD_INT 30
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: IN
44729: IFFALSE 44753
44731: PUSH
44732: LD_VAR 0 3
44736: PPUSH
44737: LD_VAR 0 4
44741: PPUSH
44742: LD_VAR 0 9
44746: PPUSH
44747: CALL_OW 440
44751: NOT
44752: AND
44753: IFFALSE 44757
// exit ;
44755: GO 44765
// result := true ;
44757: LD_ADDR_VAR 0 6
44761: PUSH
44762: LD_INT 1
44764: ST_TO_ADDR
// end ;
44765: LD_VAR 0 6
44769: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44770: LD_INT 0
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
44800: PPUSH
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
// result = [ ] ;
44830: LD_ADDR_VAR 0 7
44834: PUSH
44835: EMPTY
44836: ST_TO_ADDR
// temp_list = [ ] ;
44837: LD_ADDR_VAR 0 9
44841: PUSH
44842: EMPTY
44843: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44844: LD_VAR 0 4
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 4
44863: PUSH
44864: LD_INT 5
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: IN
44875: NOT
44876: IFTRUE 44919
44878: PUSH
44879: LD_VAR 0 1
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: IN
44894: IFFALSE 44918
44896: PUSH
44897: LD_VAR 0 5
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: IN
44916: NOT
44917: AND
44918: OR
44919: IFFALSE 44923
// exit ;
44921: GO 63322
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44923: LD_VAR 0 1
44927: PUSH
44928: LD_INT 6
44930: PUSH
44931: LD_INT 7
44933: PUSH
44934: LD_INT 8
44936: PUSH
44937: LD_INT 13
44939: PUSH
44940: LD_INT 12
44942: PUSH
44943: LD_INT 15
44945: PUSH
44946: LD_INT 11
44948: PUSH
44949: LD_INT 14
44951: PUSH
44952: LD_INT 10
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: IN
44966: IFFALSE 44976
// btype = b_lab ;
44968: LD_ADDR_VAR 0 1
44972: PUSH
44973: LD_INT 6
44975: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44976: LD_VAR 0 6
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: IN
44995: NOT
44996: IFTRUE 45064
44998: PUSH
44999: LD_VAR 0 1
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: LD_INT 6
45018: PUSH
45019: LD_INT 36
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: LD_INT 5
45027: PUSH
45028: LD_INT 31
45030: PUSH
45031: LD_INT 32
45033: PUSH
45034: LD_INT 33
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: IN
45050: NOT
45051: IFFALSE 45063
45053: PUSH
45054: LD_VAR 0 6
45058: PUSH
45059: LD_INT 1
45061: EQUAL
45062: AND
45063: OR
45064: IFTRUE 45096
45066: PUSH
45067: LD_VAR 0 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: IN
45082: NOT
45083: IFFALSE 45095
45085: PUSH
45086: LD_VAR 0 6
45090: PUSH
45091: LD_INT 2
45093: EQUAL
45094: AND
45095: OR
45096: IFFALSE 45106
// mode = 0 ;
45098: LD_ADDR_VAR 0 6
45102: PUSH
45103: LD_INT 0
45105: ST_TO_ADDR
// case mode of 0 :
45106: LD_VAR 0 6
45110: PUSH
45111: LD_INT 0
45113: DOUBLE
45114: EQUAL
45115: IFTRUE 45119
45117: GO 56572
45119: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45120: LD_ADDR_VAR 0 11
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45313: LD_ADDR_VAR 0 12
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: NEG
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 3
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45509: LD_ADDR_VAR 0 13
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45708: LD_ADDR_VAR 0 14
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45904: LD_ADDR_VAR 0 15
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46097: LD_ADDR_VAR 0 16
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 3
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46290: LD_ADDR_VAR 0 17
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46520: LD_ADDR_VAR 0 18
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46750: LD_ADDR_VAR 0 19
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46980: LD_ADDR_VAR 0 20
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47210: LD_ADDR_VAR 0 21
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: NEG
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47440: LD_ADDR_VAR 0 22
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 2
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47670: LD_ADDR_VAR 0 23
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 3
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47950: LD_ADDR_VAR 0 24
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48226: LD_ADDR_VAR 0 25
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48500: LD_ADDR_VAR 0 26
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48776: LD_ADDR_VAR 0 27
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49056: LD_ADDR_VAR 0 28
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 3
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49338: LD_ADDR_VAR 0 29
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49617: LD_ADDR_VAR 0 30
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49895: LD_ADDR_VAR 0 31
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50173: LD_ADDR_VAR 0 32
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 3
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 3
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50451: LD_ADDR_VAR 0 33
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50730: LD_ADDR_VAR 0 34
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51010: LD_ADDR_VAR 0 35
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51122: LD_ADDR_VAR 0 36
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51234: LD_ADDR_VAR 0 37
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51346: LD_ADDR_VAR 0 38
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51458: LD_ADDR_VAR 0 39
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 1
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51570: LD_ADDR_VAR 0 40
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51682: LD_ADDR_VAR 0 41
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: LD_INT 3
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52032: LD_ADDR_VAR 0 42
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 3
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52382: LD_ADDR_VAR 0 43
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 3
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52730: LD_ADDR_VAR 0 44
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 3
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 3
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53080: LD_ADDR_VAR 0 45
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 3
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 3
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53430: LD_ADDR_VAR 0 46
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53778: LD_ADDR_VAR 0 47
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53929: LD_ADDR_VAR 0 48
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54076: LD_ADDR_VAR 0 49
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54220: LD_ADDR_VAR 0 50
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54364: LD_ADDR_VAR 0 51
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54511: LD_ADDR_VAR 0 52
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54662: LD_ADDR_VAR 0 53
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54892: LD_ADDR_VAR 0 54
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55122: LD_ADDR_VAR 0 55
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55352: LD_ADDR_VAR 0 56
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55582: LD_ADDR_VAR 0 57
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55812: LD_ADDR_VAR 0 58
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56042: LD_ADDR_VAR 0 59
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56130: LD_ADDR_VAR 0 60
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56218: LD_ADDR_VAR 0 61
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56306: LD_ADDR_VAR 0 62
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56394: LD_ADDR_VAR 0 63
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56482: LD_ADDR_VAR 0 64
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// end ; 1 :
56570: GO 62467
56572: LD_INT 1
56574: DOUBLE
56575: EQUAL
56576: IFTRUE 56580
56578: GO 59203
56580: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56581: LD_ADDR_VAR 0 11
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56625: LD_ADDR_VAR 0 12
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56666: LD_ADDR_VAR 0 13
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56706: LD_ADDR_VAR 0 14
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56747: LD_ADDR_VAR 0 15
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56791: LD_ADDR_VAR 0 16
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 3
56822: NEG
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56837: LD_ADDR_VAR 0 17
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56881: LD_ADDR_VAR 0 18
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56922: LD_ADDR_VAR 0 19
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56962: LD_ADDR_VAR 0 20
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57003: LD_ADDR_VAR 0 21
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57047: LD_ADDR_VAR 0 22
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 3
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57093: LD_ADDR_VAR 0 23
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 4
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57137: LD_ADDR_VAR 0 24
57141: PUSH
57142: LD_INT 3
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57178: LD_ADDR_VAR 0 25
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: LD_INT 3
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 4
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 4
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57218: LD_ADDR_VAR 0 26
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 4
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57259: LD_ADDR_VAR 0 27
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 4
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: LIST
57302: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57303: LD_ADDR_VAR 0 28
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: LD_INT 4
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57349: LD_ADDR_VAR 0 29
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 3
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 4
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 4
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 3
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 5
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 5
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 4
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 6
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 6
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 5
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57504: LD_ADDR_VAR 0 30
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 4
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 4
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 5
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 5
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 6
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 6
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57647: LD_ADDR_VAR 0 31
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 4
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 5
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 5
57724: PUSH
57725: LD_INT 5
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: LD_INT 5
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 6
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 6
57754: PUSH
57755: LD_INT 6
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: LD_INT 6
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57786: LD_ADDR_VAR 0 32
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 5
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 5
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 6
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 6
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 5
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57929: LD_ADDR_VAR 0 33
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: NEG
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 5
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 5
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 6
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 6
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58084: LD_ADDR_VAR 0 34
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: LD_INT 4
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: LD_INT 5
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 5
58175: NEG
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 5
58187: NEG
58188: PUSH
58189: LD_INT 5
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 5
58199: NEG
58200: PUSH
58201: LD_INT 6
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 6
58211: NEG
58212: PUSH
58213: LD_INT 5
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 6
58223: NEG
58224: PUSH
58225: LD_INT 6
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58247: LD_ADDR_VAR 0 41
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 3
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58291: LD_ADDR_VAR 0 42
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58332: LD_ADDR_VAR 0 43
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58372: LD_ADDR_VAR 0 44
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58413: LD_ADDR_VAR 0 45
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58457: LD_ADDR_VAR 0 46
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: LIST
58502: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58503: LD_ADDR_VAR 0 47
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58536: LD_ADDR_VAR 0 48
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58567: LD_ADDR_VAR 0 49
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58596: LD_ADDR_VAR 0 50
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58625: LD_ADDR_VAR 0 51
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58656: LD_ADDR_VAR 0 52
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58689: LD_ADDR_VAR 0 53
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58733: LD_ADDR_VAR 0 54
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58774: LD_ADDR_VAR 0 55
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58814: LD_ADDR_VAR 0 56
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58855: LD_ADDR_VAR 0 57
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58899: LD_ADDR_VAR 0 58
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58945: LD_ADDR_VAR 0 59
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58989: LD_ADDR_VAR 0 60
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59030: LD_ADDR_VAR 0 61
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59070: LD_ADDR_VAR 0 62
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 2
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59111: LD_ADDR_VAR 0 63
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59155: LD_ADDR_VAR 0 64
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: LIST
59200: ST_TO_ADDR
// end ; 2 :
59201: GO 62467
59203: LD_INT 2
59205: DOUBLE
59206: EQUAL
59207: IFTRUE 59211
59209: GO 62466
59211: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59212: LD_ADDR_VAR 0 29
59216: PUSH
59217: LD_INT 4
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 5
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 3
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 4
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: LD_INT 2
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 4
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: LD_INT 4
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 5
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 4
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 5
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 4
59551: NEG
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: LD_INT 4
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: LD_INT 4
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 3
59633: NEG
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 5
59657: NEG
59658: PUSH
59659: LD_INT 4
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: LD_INT 5
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: LD_INT 5
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 5
59693: NEG
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59750: LD_ADDR_VAR 0 30
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 5
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: LD_INT 5
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: LD_INT 5
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 4
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 4
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: LD_INT 4
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 4
59940: NEG
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 4
59951: NEG
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 5
59996: NEG
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 5
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: NEG
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 4
60102: NEG
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 4
60114: NEG
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: LD_INT 4
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 5
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 4
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 5
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: LD_INT 5
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60297: LD_ADDR_VAR 0 31
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: LD_INT 5
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 5
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 4
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 5
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 4
60453: NEG
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: NEG
60500: PUSH
60501: LD_INT 4
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: NEG
60512: PUSH
60513: LD_INT 5
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: NEG
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 4
60547: NEG
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 5
60559: NEG
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 5
60571: NEG
60572: PUSH
60573: LD_INT 5
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: LD_INT 5
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 5
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 4
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 4
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: LD_INT 4
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 4
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 5
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 5
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 5
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60847: LD_ADDR_VAR 0 32
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 5
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 5
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 5
60933: NEG
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 2
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 4
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 4
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 5
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 4
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 3
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 5
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 4
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: LD_INT 4
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 5
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: LD_INT 4
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 5
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61394: LD_ADDR_VAR 0 33
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: LD_INT 4
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 4
61413: NEG
61414: PUSH
61415: LD_INT 5
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 4
61449: NEG
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 5
61461: NEG
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 5
61473: NEG
61474: PUSH
61475: LD_INT 5
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 5
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 4
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 4
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 3
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 5
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: LD_INT 4
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 4
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 4
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 5
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 5
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 4
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 5
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61932: LD_ADDR_VAR 0 34
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 5
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 4
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 3
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 4
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 5
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 5
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 4
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 4
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 5
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: PUSH
62185: LD_INT 4
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 5
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 4
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 4
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: LD_INT 4
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 4
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 4
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 4
62362: NEG
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 5
62373: NEG
62374: PUSH
62375: LD_INT 0
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 5
62384: NEG
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 5
62396: NEG
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 3
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// end ; end ;
62464: GO 62467
62466: POP
// case btype of b_depot , b_warehouse :
62467: LD_VAR 0 1
62471: PUSH
62472: LD_INT 0
62474: DOUBLE
62475: EQUAL
62476: IFTRUE 62486
62478: LD_INT 1
62480: DOUBLE
62481: EQUAL
62482: IFTRUE 62486
62484: GO 62687
62486: POP
// case nation of nation_american :
62487: LD_VAR 0 5
62491: PUSH
62492: LD_INT 1
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62500
62498: GO 62556
62500: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62501: LD_ADDR_VAR 0 9
62505: PUSH
62506: LD_VAR 0 11
62510: PUSH
62511: LD_VAR 0 12
62515: PUSH
62516: LD_VAR 0 13
62520: PUSH
62521: LD_VAR 0 14
62525: PUSH
62526: LD_VAR 0 15
62530: PUSH
62531: LD_VAR 0 16
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: LD_VAR 0 4
62548: PUSH
62549: LD_INT 1
62551: PLUS
62552: ARRAY
62553: ST_TO_ADDR
62554: GO 62685
62556: LD_INT 2
62558: DOUBLE
62559: EQUAL
62560: IFTRUE 62564
62562: GO 62620
62564: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62565: LD_ADDR_VAR 0 9
62569: PUSH
62570: LD_VAR 0 17
62574: PUSH
62575: LD_VAR 0 18
62579: PUSH
62580: LD_VAR 0 19
62584: PUSH
62585: LD_VAR 0 20
62589: PUSH
62590: LD_VAR 0 21
62594: PUSH
62595: LD_VAR 0 22
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: PUSH
62608: LD_VAR 0 4
62612: PUSH
62613: LD_INT 1
62615: PLUS
62616: ARRAY
62617: ST_TO_ADDR
62618: GO 62685
62620: LD_INT 3
62622: DOUBLE
62623: EQUAL
62624: IFTRUE 62628
62626: GO 62684
62628: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62629: LD_ADDR_VAR 0 9
62633: PUSH
62634: LD_VAR 0 23
62638: PUSH
62639: LD_VAR 0 24
62643: PUSH
62644: LD_VAR 0 25
62648: PUSH
62649: LD_VAR 0 26
62653: PUSH
62654: LD_VAR 0 27
62658: PUSH
62659: LD_VAR 0 28
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: PUSH
62672: LD_VAR 0 4
62676: PUSH
62677: LD_INT 1
62679: PLUS
62680: ARRAY
62681: ST_TO_ADDR
62682: GO 62685
62684: POP
62685: GO 63240
62687: LD_INT 2
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62701
62693: LD_INT 3
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62701
62699: GO 62757
62701: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62702: LD_ADDR_VAR 0 9
62706: PUSH
62707: LD_VAR 0 29
62711: PUSH
62712: LD_VAR 0 30
62716: PUSH
62717: LD_VAR 0 31
62721: PUSH
62722: LD_VAR 0 32
62726: PUSH
62727: LD_VAR 0 33
62731: PUSH
62732: LD_VAR 0 34
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: PUSH
62745: LD_VAR 0 4
62749: PUSH
62750: LD_INT 1
62752: PLUS
62753: ARRAY
62754: ST_TO_ADDR
62755: GO 63240
62757: LD_INT 16
62759: DOUBLE
62760: EQUAL
62761: IFTRUE 62819
62763: LD_INT 17
62765: DOUBLE
62766: EQUAL
62767: IFTRUE 62819
62769: LD_INT 18
62771: DOUBLE
62772: EQUAL
62773: IFTRUE 62819
62775: LD_INT 19
62777: DOUBLE
62778: EQUAL
62779: IFTRUE 62819
62781: LD_INT 22
62783: DOUBLE
62784: EQUAL
62785: IFTRUE 62819
62787: LD_INT 20
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62819
62793: LD_INT 21
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62819
62799: LD_INT 23
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62819
62805: LD_INT 24
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62819
62811: LD_INT 25
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62819
62817: GO 62875
62819: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62820: LD_ADDR_VAR 0 9
62824: PUSH
62825: LD_VAR 0 35
62829: PUSH
62830: LD_VAR 0 36
62834: PUSH
62835: LD_VAR 0 37
62839: PUSH
62840: LD_VAR 0 38
62844: PUSH
62845: LD_VAR 0 39
62849: PUSH
62850: LD_VAR 0 40
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: PUSH
62863: LD_VAR 0 4
62867: PUSH
62868: LD_INT 1
62870: PLUS
62871: ARRAY
62872: ST_TO_ADDR
62873: GO 63240
62875: LD_INT 6
62877: DOUBLE
62878: EQUAL
62879: IFTRUE 62931
62881: LD_INT 7
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62931
62887: LD_INT 8
62889: DOUBLE
62890: EQUAL
62891: IFTRUE 62931
62893: LD_INT 13
62895: DOUBLE
62896: EQUAL
62897: IFTRUE 62931
62899: LD_INT 12
62901: DOUBLE
62902: EQUAL
62903: IFTRUE 62931
62905: LD_INT 15
62907: DOUBLE
62908: EQUAL
62909: IFTRUE 62931
62911: LD_INT 11
62913: DOUBLE
62914: EQUAL
62915: IFTRUE 62931
62917: LD_INT 14
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62931
62923: LD_INT 10
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62931
62929: GO 62987
62931: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62932: LD_ADDR_VAR 0 9
62936: PUSH
62937: LD_VAR 0 41
62941: PUSH
62942: LD_VAR 0 42
62946: PUSH
62947: LD_VAR 0 43
62951: PUSH
62952: LD_VAR 0 44
62956: PUSH
62957: LD_VAR 0 45
62961: PUSH
62962: LD_VAR 0 46
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: PUSH
62975: LD_VAR 0 4
62979: PUSH
62980: LD_INT 1
62982: PLUS
62983: ARRAY
62984: ST_TO_ADDR
62985: GO 63240
62987: LD_INT 36
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 62995
62993: GO 63051
62995: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62996: LD_ADDR_VAR 0 9
63000: PUSH
63001: LD_VAR 0 47
63005: PUSH
63006: LD_VAR 0 48
63010: PUSH
63011: LD_VAR 0 49
63015: PUSH
63016: LD_VAR 0 50
63020: PUSH
63021: LD_VAR 0 51
63025: PUSH
63026: LD_VAR 0 52
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_VAR 0 4
63043: PUSH
63044: LD_INT 1
63046: PLUS
63047: ARRAY
63048: ST_TO_ADDR
63049: GO 63240
63051: LD_INT 4
63053: DOUBLE
63054: EQUAL
63055: IFTRUE 63077
63057: LD_INT 5
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63077
63063: LD_INT 34
63065: DOUBLE
63066: EQUAL
63067: IFTRUE 63077
63069: LD_INT 37
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63077
63075: GO 63133
63077: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63078: LD_ADDR_VAR 0 9
63082: PUSH
63083: LD_VAR 0 53
63087: PUSH
63088: LD_VAR 0 54
63092: PUSH
63093: LD_VAR 0 55
63097: PUSH
63098: LD_VAR 0 56
63102: PUSH
63103: LD_VAR 0 57
63107: PUSH
63108: LD_VAR 0 58
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_INT 1
63128: PLUS
63129: ARRAY
63130: ST_TO_ADDR
63131: GO 63240
63133: LD_INT 31
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63183
63139: LD_INT 32
63141: DOUBLE
63142: EQUAL
63143: IFTRUE 63183
63145: LD_INT 33
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63183
63151: LD_INT 27
63153: DOUBLE
63154: EQUAL
63155: IFTRUE 63183
63157: LD_INT 26
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63183
63163: LD_INT 28
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63183
63169: LD_INT 29
63171: DOUBLE
63172: EQUAL
63173: IFTRUE 63183
63175: LD_INT 30
63177: DOUBLE
63178: EQUAL
63179: IFTRUE 63183
63181: GO 63239
63183: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63184: LD_ADDR_VAR 0 9
63188: PUSH
63189: LD_VAR 0 59
63193: PUSH
63194: LD_VAR 0 60
63198: PUSH
63199: LD_VAR 0 61
63203: PUSH
63204: LD_VAR 0 62
63208: PUSH
63209: LD_VAR 0 63
63213: PUSH
63214: LD_VAR 0 64
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: LD_VAR 0 4
63231: PUSH
63232: LD_INT 1
63234: PLUS
63235: ARRAY
63236: ST_TO_ADDR
63237: GO 63240
63239: POP
// temp_list2 = [ ] ;
63240: LD_ADDR_VAR 0 10
63244: PUSH
63245: EMPTY
63246: ST_TO_ADDR
// for i in temp_list do
63247: LD_ADDR_VAR 0 8
63251: PUSH
63252: LD_VAR 0 9
63256: PUSH
63257: FOR_IN
63258: IFFALSE 63310
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63260: LD_ADDR_VAR 0 10
63264: PUSH
63265: LD_VAR 0 10
63269: PUSH
63270: LD_VAR 0 8
63274: PUSH
63275: LD_INT 1
63277: ARRAY
63278: PUSH
63279: LD_VAR 0 2
63283: PLUS
63284: PUSH
63285: LD_VAR 0 8
63289: PUSH
63290: LD_INT 2
63292: ARRAY
63293: PUSH
63294: LD_VAR 0 3
63298: PLUS
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: ADD
63307: ST_TO_ADDR
63308: GO 63257
63310: POP
63311: POP
// result = temp_list2 ;
63312: LD_ADDR_VAR 0 7
63316: PUSH
63317: LD_VAR 0 10
63321: ST_TO_ADDR
// end ;
63322: LD_VAR 0 7
63326: RET
// export function EnemyInRange ( unit , dist ) ; begin
63327: LD_INT 0
63329: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63330: LD_ADDR_VAR 0 3
63334: PUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: CALL_OW 255
63344: PPUSH
63345: LD_VAR 0 1
63349: PPUSH
63350: CALL_OW 250
63354: PPUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: CALL_OW 251
63364: PPUSH
63365: LD_VAR 0 2
63369: PPUSH
63370: CALL 36584 0 4
63374: PUSH
63375: LD_INT 4
63377: ARRAY
63378: ST_TO_ADDR
// end ;
63379: LD_VAR 0 3
63383: RET
// export function PlayerSeeMe ( unit ) ; begin
63384: LD_INT 0
63386: PPUSH
// result := See ( your_side , unit ) ;
63387: LD_ADDR_VAR 0 2
63391: PUSH
63392: LD_OWVAR 2
63396: PPUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL_OW 292
63406: ST_TO_ADDR
// end ;
63407: LD_VAR 0 2
63411: RET
// export function ReverseDir ( unit ) ; begin
63412: LD_INT 0
63414: PPUSH
// if not unit then
63415: LD_VAR 0 1
63419: NOT
63420: IFFALSE 63424
// exit ;
63422: GO 63447
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL_OW 254
63438: PUSH
63439: LD_INT 3
63441: PLUS
63442: PUSH
63443: LD_INT 6
63445: MOD
63446: ST_TO_ADDR
// end ;
63447: LD_VAR 0 2
63451: RET
// export function ReverseArray ( array ) ; var i ; begin
63452: LD_INT 0
63454: PPUSH
63455: PPUSH
// if not array then
63456: LD_VAR 0 1
63460: NOT
63461: IFFALSE 63465
// exit ;
63463: GO 63520
// result := [ ] ;
63465: LD_ADDR_VAR 0 2
63469: PUSH
63470: EMPTY
63471: ST_TO_ADDR
// for i := array downto 1 do
63472: LD_ADDR_VAR 0 3
63476: PUSH
63477: DOUBLE
63478: LD_VAR 0 1
63482: INC
63483: ST_TO_ADDR
63484: LD_INT 1
63486: PUSH
63487: FOR_DOWNTO
63488: IFFALSE 63518
// result := Join ( result , array [ i ] ) ;
63490: LD_ADDR_VAR 0 2
63494: PUSH
63495: LD_VAR 0 2
63499: PPUSH
63500: LD_VAR 0 1
63504: PUSH
63505: LD_VAR 0 3
63509: ARRAY
63510: PPUSH
63511: CALL 68372 0 2
63515: ST_TO_ADDR
63516: GO 63487
63518: POP
63519: POP
// end ;
63520: LD_VAR 0 2
63524: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
// if not unit or not hexes then
63533: LD_VAR 0 1
63537: NOT
63538: IFTRUE 63547
63540: PUSH
63541: LD_VAR 0 2
63545: NOT
63546: OR
63547: IFFALSE 63551
// exit ;
63549: GO 63674
// dist := 9999 ;
63551: LD_ADDR_VAR 0 5
63555: PUSH
63556: LD_INT 9999
63558: ST_TO_ADDR
// for i = 1 to hexes do
63559: LD_ADDR_VAR 0 4
63563: PUSH
63564: DOUBLE
63565: LD_INT 1
63567: DEC
63568: ST_TO_ADDR
63569: LD_VAR 0 2
63573: PUSH
63574: FOR_TO
63575: IFFALSE 63662
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63577: LD_ADDR_VAR 0 6
63581: PUSH
63582: LD_VAR 0 1
63586: PPUSH
63587: LD_VAR 0 2
63591: PUSH
63592: LD_VAR 0 4
63596: ARRAY
63597: PUSH
63598: LD_INT 1
63600: ARRAY
63601: PPUSH
63602: LD_VAR 0 2
63606: PUSH
63607: LD_VAR 0 4
63611: ARRAY
63612: PUSH
63613: LD_INT 2
63615: ARRAY
63616: PPUSH
63617: CALL_OW 297
63621: ST_TO_ADDR
// if tdist < dist then
63622: LD_VAR 0 6
63626: PUSH
63627: LD_VAR 0 5
63631: LESS
63632: IFFALSE 63660
// begin hex := hexes [ i ] ;
63634: LD_ADDR_VAR 0 8
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: LD_VAR 0 4
63648: ARRAY
63649: ST_TO_ADDR
// dist := tdist ;
63650: LD_ADDR_VAR 0 5
63654: PUSH
63655: LD_VAR 0 6
63659: ST_TO_ADDR
// end ; end ;
63660: GO 63574
63662: POP
63663: POP
// result := hex ;
63664: LD_ADDR_VAR 0 3
63668: PUSH
63669: LD_VAR 0 8
63673: ST_TO_ADDR
// end ;
63674: LD_VAR 0 3
63678: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63679: LD_INT 0
63681: PPUSH
63682: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63683: LD_VAR 0 1
63687: NOT
63688: IFTRUE 63727
63690: PUSH
63691: LD_VAR 0 1
63695: PUSH
63696: LD_INT 21
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 23
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PPUSH
63720: CALL_OW 69
63724: IN
63725: NOT
63726: OR
63727: IFFALSE 63731
// exit ;
63729: GO 63778
// for i = 1 to 3 do
63731: LD_ADDR_VAR 0 3
63735: PUSH
63736: DOUBLE
63737: LD_INT 1
63739: DEC
63740: ST_TO_ADDR
63741: LD_INT 3
63743: PUSH
63744: FOR_TO
63745: IFFALSE 63776
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63747: LD_VAR 0 1
63751: PPUSH
63752: CALL_OW 250
63756: PPUSH
63757: LD_VAR 0 1
63761: PPUSH
63762: CALL_OW 251
63766: PPUSH
63767: LD_INT 1
63769: PPUSH
63770: CALL_OW 453
63774: GO 63744
63776: POP
63777: POP
// end ;
63778: LD_VAR 0 2
63782: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63783: LD_INT 0
63785: PPUSH
63786: PPUSH
63787: PPUSH
63788: PPUSH
63789: PPUSH
63790: PPUSH
// if not unit or not enemy_unit then
63791: LD_VAR 0 1
63795: NOT
63796: IFTRUE 63805
63798: PUSH
63799: LD_VAR 0 2
63803: NOT
63804: OR
63805: IFFALSE 63809
// exit ;
63807: GO 64290
// if GetLives ( i ) < 250 then
63809: LD_VAR 0 4
63813: PPUSH
63814: CALL_OW 256
63818: PUSH
63819: LD_INT 250
63821: LESS
63822: IFFALSE 63835
// begin ComAutodestruct ( i ) ;
63824: LD_VAR 0 4
63828: PPUSH
63829: CALL 63679 0 1
// exit ;
63833: GO 64290
// end ; x := GetX ( enemy_unit ) ;
63835: LD_ADDR_VAR 0 7
63839: PUSH
63840: LD_VAR 0 2
63844: PPUSH
63845: CALL_OW 250
63849: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63850: LD_ADDR_VAR 0 8
63854: PUSH
63855: LD_VAR 0 2
63859: PPUSH
63860: CALL_OW 251
63864: ST_TO_ADDR
// if not x or not y then
63865: LD_VAR 0 7
63869: NOT
63870: IFTRUE 63879
63872: PUSH
63873: LD_VAR 0 8
63877: NOT
63878: OR
63879: IFFALSE 63883
// exit ;
63881: GO 64290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63883: LD_ADDR_VAR 0 6
63887: PUSH
63888: LD_VAR 0 7
63892: PPUSH
63893: LD_INT 0
63895: PPUSH
63896: LD_INT 4
63898: PPUSH
63899: CALL_OW 272
63903: PUSH
63904: LD_VAR 0 8
63908: PPUSH
63909: LD_INT 0
63911: PPUSH
63912: LD_INT 4
63914: PPUSH
63915: CALL_OW 273
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_VAR 0 7
63928: PPUSH
63929: LD_INT 1
63931: PPUSH
63932: LD_INT 4
63934: PPUSH
63935: CALL_OW 272
63939: PUSH
63940: LD_VAR 0 8
63944: PPUSH
63945: LD_INT 1
63947: PPUSH
63948: LD_INT 4
63950: PPUSH
63951: CALL_OW 273
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_VAR 0 7
63964: PPUSH
63965: LD_INT 2
63967: PPUSH
63968: LD_INT 4
63970: PPUSH
63971: CALL_OW 272
63975: PUSH
63976: LD_VAR 0 8
63980: PPUSH
63981: LD_INT 2
63983: PPUSH
63984: LD_INT 4
63986: PPUSH
63987: CALL_OW 273
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_VAR 0 7
64000: PPUSH
64001: LD_INT 3
64003: PPUSH
64004: LD_INT 4
64006: PPUSH
64007: CALL_OW 272
64011: PUSH
64012: LD_VAR 0 8
64016: PPUSH
64017: LD_INT 3
64019: PPUSH
64020: LD_INT 4
64022: PPUSH
64023: CALL_OW 273
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_VAR 0 7
64036: PPUSH
64037: LD_INT 4
64039: PPUSH
64040: LD_INT 4
64042: PPUSH
64043: CALL_OW 272
64047: PUSH
64048: LD_VAR 0 8
64052: PPUSH
64053: LD_INT 4
64055: PPUSH
64056: LD_INT 4
64058: PPUSH
64059: CALL_OW 273
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_VAR 0 7
64072: PPUSH
64073: LD_INT 5
64075: PPUSH
64076: LD_INT 4
64078: PPUSH
64079: CALL_OW 272
64083: PUSH
64084: LD_VAR 0 8
64088: PPUSH
64089: LD_INT 5
64091: PPUSH
64092: LD_INT 4
64094: PPUSH
64095: CALL_OW 273
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// for i = tmp downto 1 do
64112: LD_ADDR_VAR 0 4
64116: PUSH
64117: DOUBLE
64118: LD_VAR 0 6
64122: INC
64123: ST_TO_ADDR
64124: LD_INT 1
64126: PUSH
64127: FOR_DOWNTO
64128: IFFALSE 64231
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64130: LD_VAR 0 6
64134: PUSH
64135: LD_VAR 0 4
64139: ARRAY
64140: PUSH
64141: LD_INT 1
64143: ARRAY
64144: PPUSH
64145: LD_VAR 0 6
64149: PUSH
64150: LD_VAR 0 4
64154: ARRAY
64155: PUSH
64156: LD_INT 2
64158: ARRAY
64159: PPUSH
64160: CALL_OW 488
64164: NOT
64165: IFTRUE 64207
64167: PUSH
64168: LD_VAR 0 6
64172: PUSH
64173: LD_VAR 0 4
64177: ARRAY
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: PPUSH
64183: LD_VAR 0 6
64187: PUSH
64188: LD_VAR 0 4
64192: ARRAY
64193: PUSH
64194: LD_INT 2
64196: ARRAY
64197: PPUSH
64198: CALL_OW 428
64202: PUSH
64203: LD_INT 0
64205: NONEQUAL
64206: OR
64207: IFFALSE 64229
// tmp := Delete ( tmp , i ) ;
64209: LD_ADDR_VAR 0 6
64213: PUSH
64214: LD_VAR 0 6
64218: PPUSH
64219: LD_VAR 0 4
64223: PPUSH
64224: CALL_OW 3
64228: ST_TO_ADDR
64229: GO 64127
64231: POP
64232: POP
// j := GetClosestHex ( unit , tmp ) ;
64233: LD_ADDR_VAR 0 5
64237: PUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: LD_VAR 0 6
64247: PPUSH
64248: CALL 63525 0 2
64252: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64253: LD_VAR 0 1
64257: PPUSH
64258: LD_VAR 0 5
64262: PUSH
64263: LD_INT 1
64265: ARRAY
64266: PPUSH
64267: LD_VAR 0 5
64271: PUSH
64272: LD_INT 2
64274: ARRAY
64275: PPUSH
64276: CALL_OW 111
// result := j ;
64280: LD_ADDR_VAR 0 3
64284: PUSH
64285: LD_VAR 0 5
64289: ST_TO_ADDR
// end ;
64290: LD_VAR 0 3
64294: RET
// export function PrepareApemanSoldier ( ) ; begin
64295: LD_INT 0
64297: PPUSH
// uc_nation := 0 ;
64298: LD_ADDR_OWVAR 21
64302: PUSH
64303: LD_INT 0
64305: ST_TO_ADDR
// hc_sex := sex_male ;
64306: LD_ADDR_OWVAR 27
64310: PUSH
64311: LD_INT 1
64313: ST_TO_ADDR
// hc_name :=  ;
64314: LD_ADDR_OWVAR 26
64318: PUSH
64319: LD_STRING 
64321: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64322: LD_ADDR_OWVAR 28
64326: PUSH
64327: LD_INT 15
64329: ST_TO_ADDR
// hc_gallery :=  ;
64330: LD_ADDR_OWVAR 33
64334: PUSH
64335: LD_STRING 
64337: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64338: LD_ADDR_OWVAR 31
64342: PUSH
64343: LD_INT 0
64345: PPUSH
64346: LD_INT 3
64348: PPUSH
64349: CALL_OW 12
64353: PUSH
64354: LD_INT 0
64356: PPUSH
64357: LD_INT 3
64359: PPUSH
64360: CALL_OW 12
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64377: LD_ADDR_OWVAR 29
64381: PUSH
64382: LD_INT 10
64384: PUSH
64385: LD_INT 12
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// end ;
64392: LD_VAR 0 1
64396: RET
// export function PrepareApemanEngineer ( ) ; begin
64397: LD_INT 0
64399: PPUSH
// uc_nation := 0 ;
64400: LD_ADDR_OWVAR 21
64404: PUSH
64405: LD_INT 0
64407: ST_TO_ADDR
// hc_sex := sex_male ;
64408: LD_ADDR_OWVAR 27
64412: PUSH
64413: LD_INT 1
64415: ST_TO_ADDR
// hc_name :=  ;
64416: LD_ADDR_OWVAR 26
64420: PUSH
64421: LD_STRING 
64423: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64424: LD_ADDR_OWVAR 28
64428: PUSH
64429: LD_INT 16
64431: ST_TO_ADDR
// hc_gallery :=  ;
64432: LD_ADDR_OWVAR 33
64436: PUSH
64437: LD_STRING 
64439: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64440: LD_ADDR_OWVAR 31
64444: PUSH
64445: LD_INT 0
64447: PPUSH
64448: LD_INT 3
64450: PPUSH
64451: CALL_OW 12
64455: PUSH
64456: LD_INT 0
64458: PPUSH
64459: LD_INT 3
64461: PPUSH
64462: CALL_OW 12
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64479: LD_ADDR_OWVAR 29
64483: PUSH
64484: LD_INT 10
64486: PUSH
64487: LD_INT 12
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// end ;
64494: LD_VAR 0 1
64498: RET
// export function PrepareApeman ( agressivity ) ; begin
64499: LD_INT 0
64501: PPUSH
// uc_side := 0 ;
64502: LD_ADDR_OWVAR 20
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// uc_nation := 0 ;
64510: LD_ADDR_OWVAR 21
64514: PUSH
64515: LD_INT 0
64517: ST_TO_ADDR
// hc_sex := sex_male ;
64518: LD_ADDR_OWVAR 27
64522: PUSH
64523: LD_INT 1
64525: ST_TO_ADDR
// hc_class := class_apeman ;
64526: LD_ADDR_OWVAR 28
64530: PUSH
64531: LD_INT 12
64533: ST_TO_ADDR
// hc_gallery :=  ;
64534: LD_ADDR_OWVAR 33
64538: PUSH
64539: LD_STRING 
64541: ST_TO_ADDR
// hc_name :=  ;
64542: LD_ADDR_OWVAR 26
64546: PUSH
64547: LD_STRING 
64549: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64550: LD_ADDR_OWVAR 29
64554: PUSH
64555: LD_INT 10
64557: PUSH
64558: LD_INT 12
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// if agressivity = 0 then
64565: LD_VAR 0 1
64569: PUSH
64570: LD_INT 0
64572: EQUAL
64573: IFFALSE 64585
// hc_agressivity := 0 else
64575: LD_ADDR_OWVAR 35
64579: PUSH
64580: LD_INT 0
64582: ST_TO_ADDR
64583: GO 64606
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64585: LD_ADDR_OWVAR 35
64589: PUSH
64590: LD_VAR 0 1
64594: NEG
64595: PPUSH
64596: LD_VAR 0 1
64600: PPUSH
64601: CALL_OW 12
64605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64606: LD_ADDR_OWVAR 31
64610: PUSH
64611: LD_INT 0
64613: PPUSH
64614: LD_INT 3
64616: PPUSH
64617: CALL_OW 12
64621: PUSH
64622: LD_INT 0
64624: PPUSH
64625: LD_INT 3
64627: PPUSH
64628: CALL_OW 12
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// end ;
64645: LD_VAR 0 2
64649: RET
// export function PrepareTiger ( agressivity ) ; begin
64650: LD_INT 0
64652: PPUSH
// uc_side := 0 ;
64653: LD_ADDR_OWVAR 20
64657: PUSH
64658: LD_INT 0
64660: ST_TO_ADDR
// uc_nation := 0 ;
64661: LD_ADDR_OWVAR 21
64665: PUSH
64666: LD_INT 0
64668: ST_TO_ADDR
// InitHc ;
64669: CALL_OW 19
// hc_class := class_tiger ;
64673: LD_ADDR_OWVAR 28
64677: PUSH
64678: LD_INT 14
64680: ST_TO_ADDR
// hc_gallery :=  ;
64681: LD_ADDR_OWVAR 33
64685: PUSH
64686: LD_STRING 
64688: ST_TO_ADDR
// hc_name :=  ;
64689: LD_ADDR_OWVAR 26
64693: PUSH
64694: LD_STRING 
64696: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64697: LD_ADDR_OWVAR 35
64701: PUSH
64702: LD_VAR 0 1
64706: NEG
64707: PPUSH
64708: LD_VAR 0 1
64712: PPUSH
64713: CALL_OW 12
64717: ST_TO_ADDR
// end ;
64718: LD_VAR 0 2
64722: RET
// export function PrepareEnchidna ( ) ; begin
64723: LD_INT 0
64725: PPUSH
// uc_side := 0 ;
64726: LD_ADDR_OWVAR 20
64730: PUSH
64731: LD_INT 0
64733: ST_TO_ADDR
// uc_nation := 0 ;
64734: LD_ADDR_OWVAR 21
64738: PUSH
64739: LD_INT 0
64741: ST_TO_ADDR
// InitHc ;
64742: CALL_OW 19
// hc_class := class_baggie ;
64746: LD_ADDR_OWVAR 28
64750: PUSH
64751: LD_INT 13
64753: ST_TO_ADDR
// hc_gallery :=  ;
64754: LD_ADDR_OWVAR 33
64758: PUSH
64759: LD_STRING 
64761: ST_TO_ADDR
// hc_name :=  ;
64762: LD_ADDR_OWVAR 26
64766: PUSH
64767: LD_STRING 
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 1
64774: RET
// export function PrepareFrog ( ) ; begin
64775: LD_INT 0
64777: PPUSH
// uc_side := 0 ;
64778: LD_ADDR_OWVAR 20
64782: PUSH
64783: LD_INT 0
64785: ST_TO_ADDR
// uc_nation := 0 ;
64786: LD_ADDR_OWVAR 21
64790: PUSH
64791: LD_INT 0
64793: ST_TO_ADDR
// InitHc ;
64794: CALL_OW 19
// hc_class := class_frog ;
64798: LD_ADDR_OWVAR 28
64802: PUSH
64803: LD_INT 19
64805: ST_TO_ADDR
// hc_gallery :=  ;
64806: LD_ADDR_OWVAR 33
64810: PUSH
64811: LD_STRING 
64813: ST_TO_ADDR
// hc_name :=  ;
64814: LD_ADDR_OWVAR 26
64818: PUSH
64819: LD_STRING 
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 1
64826: RET
// export function PrepareFish ( ) ; begin
64827: LD_INT 0
64829: PPUSH
// uc_side := 0 ;
64830: LD_ADDR_OWVAR 20
64834: PUSH
64835: LD_INT 0
64837: ST_TO_ADDR
// uc_nation := 0 ;
64838: LD_ADDR_OWVAR 21
64842: PUSH
64843: LD_INT 0
64845: ST_TO_ADDR
// InitHc ;
64846: CALL_OW 19
// hc_class := class_fish ;
64850: LD_ADDR_OWVAR 28
64854: PUSH
64855: LD_INT 20
64857: ST_TO_ADDR
// hc_gallery :=  ;
64858: LD_ADDR_OWVAR 33
64862: PUSH
64863: LD_STRING 
64865: ST_TO_ADDR
// hc_name :=  ;
64866: LD_ADDR_OWVAR 26
64870: PUSH
64871: LD_STRING 
64873: ST_TO_ADDR
// end ;
64874: LD_VAR 0 1
64878: RET
// export function PrepareBird ( ) ; begin
64879: LD_INT 0
64881: PPUSH
// uc_side := 0 ;
64882: LD_ADDR_OWVAR 20
64886: PUSH
64887: LD_INT 0
64889: ST_TO_ADDR
// uc_nation := 0 ;
64890: LD_ADDR_OWVAR 21
64894: PUSH
64895: LD_INT 0
64897: ST_TO_ADDR
// InitHc ;
64898: CALL_OW 19
// hc_class := class_phororhacos ;
64902: LD_ADDR_OWVAR 28
64906: PUSH
64907: LD_INT 18
64909: ST_TO_ADDR
// hc_gallery :=  ;
64910: LD_ADDR_OWVAR 33
64914: PUSH
64915: LD_STRING 
64917: ST_TO_ADDR
// hc_name :=  ;
64918: LD_ADDR_OWVAR 26
64922: PUSH
64923: LD_STRING 
64925: ST_TO_ADDR
// end ;
64926: LD_VAR 0 1
64930: RET
// export function PrepareHorse ( ) ; begin
64931: LD_INT 0
64933: PPUSH
// uc_side := 0 ;
64934: LD_ADDR_OWVAR 20
64938: PUSH
64939: LD_INT 0
64941: ST_TO_ADDR
// uc_nation := 0 ;
64942: LD_ADDR_OWVAR 21
64946: PUSH
64947: LD_INT 0
64949: ST_TO_ADDR
// InitHc ;
64950: CALL_OW 19
// hc_class := class_horse ;
64954: LD_ADDR_OWVAR 28
64958: PUSH
64959: LD_INT 21
64961: ST_TO_ADDR
// hc_gallery :=  ;
64962: LD_ADDR_OWVAR 33
64966: PUSH
64967: LD_STRING 
64969: ST_TO_ADDR
// hc_name :=  ;
64970: LD_ADDR_OWVAR 26
64974: PUSH
64975: LD_STRING 
64977: ST_TO_ADDR
// end ;
64978: LD_VAR 0 1
64982: RET
// export function PrepareMastodont ( ) ; begin
64983: LD_INT 0
64985: PPUSH
// uc_side := 0 ;
64986: LD_ADDR_OWVAR 20
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// uc_nation := 0 ;
64994: LD_ADDR_OWVAR 21
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65002: LD_ADDR_OWVAR 37
65006: PUSH
65007: LD_INT 31
65009: ST_TO_ADDR
// vc_control := control_rider ;
65010: LD_ADDR_OWVAR 38
65014: PUSH
65015: LD_INT 4
65017: ST_TO_ADDR
// end ;
65018: LD_VAR 0 1
65022: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65023: LD_INT 0
65025: PPUSH
65026: PPUSH
65027: PPUSH
// uc_side = 0 ;
65028: LD_ADDR_OWVAR 20
65032: PUSH
65033: LD_INT 0
65035: ST_TO_ADDR
// uc_nation = 0 ;
65036: LD_ADDR_OWVAR 21
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// InitHc_All ( ) ;
65044: CALL_OW 584
// InitVc ;
65048: CALL_OW 20
// if mastodonts then
65052: LD_VAR 0 6
65056: IFFALSE 65123
// for i = 1 to mastodonts do
65058: LD_ADDR_VAR 0 11
65062: PUSH
65063: DOUBLE
65064: LD_INT 1
65066: DEC
65067: ST_TO_ADDR
65068: LD_VAR 0 6
65072: PUSH
65073: FOR_TO
65074: IFFALSE 65121
// begin vc_chassis := 31 ;
65076: LD_ADDR_OWVAR 37
65080: PUSH
65081: LD_INT 31
65083: ST_TO_ADDR
// vc_control := control_rider ;
65084: LD_ADDR_OWVAR 38
65088: PUSH
65089: LD_INT 4
65091: ST_TO_ADDR
// animal := CreateVehicle ;
65092: LD_ADDR_VAR 0 12
65096: PUSH
65097: CALL_OW 45
65101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65102: LD_VAR 0 12
65106: PPUSH
65107: LD_VAR 0 8
65111: PPUSH
65112: LD_INT 0
65114: PPUSH
65115: CALL 67265 0 3
// end ;
65119: GO 65073
65121: POP
65122: POP
// if horses then
65123: LD_VAR 0 5
65127: IFFALSE 65194
// for i = 1 to horses do
65129: LD_ADDR_VAR 0 11
65133: PUSH
65134: DOUBLE
65135: LD_INT 1
65137: DEC
65138: ST_TO_ADDR
65139: LD_VAR 0 5
65143: PUSH
65144: FOR_TO
65145: IFFALSE 65192
// begin hc_class := 21 ;
65147: LD_ADDR_OWVAR 28
65151: PUSH
65152: LD_INT 21
65154: ST_TO_ADDR
// hc_gallery :=  ;
65155: LD_ADDR_OWVAR 33
65159: PUSH
65160: LD_STRING 
65162: ST_TO_ADDR
// animal := CreateHuman ;
65163: LD_ADDR_VAR 0 12
65167: PUSH
65168: CALL_OW 44
65172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65173: LD_VAR 0 12
65177: PPUSH
65178: LD_VAR 0 8
65182: PPUSH
65183: LD_INT 0
65185: PPUSH
65186: CALL 67265 0 3
// end ;
65190: GO 65144
65192: POP
65193: POP
// if birds then
65194: LD_VAR 0 1
65198: IFFALSE 65265
// for i = 1 to birds do
65200: LD_ADDR_VAR 0 11
65204: PUSH
65205: DOUBLE
65206: LD_INT 1
65208: DEC
65209: ST_TO_ADDR
65210: LD_VAR 0 1
65214: PUSH
65215: FOR_TO
65216: IFFALSE 65263
// begin hc_class := 18 ;
65218: LD_ADDR_OWVAR 28
65222: PUSH
65223: LD_INT 18
65225: ST_TO_ADDR
// hc_gallery =  ;
65226: LD_ADDR_OWVAR 33
65230: PUSH
65231: LD_STRING 
65233: ST_TO_ADDR
// animal := CreateHuman ;
65234: LD_ADDR_VAR 0 12
65238: PUSH
65239: CALL_OW 44
65243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65244: LD_VAR 0 12
65248: PPUSH
65249: LD_VAR 0 8
65253: PPUSH
65254: LD_INT 0
65256: PPUSH
65257: CALL 67265 0 3
// end ;
65261: GO 65215
65263: POP
65264: POP
// if tigers then
65265: LD_VAR 0 2
65269: IFFALSE 65353
// for i = 1 to tigers do
65271: LD_ADDR_VAR 0 11
65275: PUSH
65276: DOUBLE
65277: LD_INT 1
65279: DEC
65280: ST_TO_ADDR
65281: LD_VAR 0 2
65285: PUSH
65286: FOR_TO
65287: IFFALSE 65351
// begin hc_class = class_tiger ;
65289: LD_ADDR_OWVAR 28
65293: PUSH
65294: LD_INT 14
65296: ST_TO_ADDR
// hc_gallery =  ;
65297: LD_ADDR_OWVAR 33
65301: PUSH
65302: LD_STRING 
65304: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65305: LD_ADDR_OWVAR 35
65309: PUSH
65310: LD_INT 7
65312: NEG
65313: PPUSH
65314: LD_INT 7
65316: PPUSH
65317: CALL_OW 12
65321: ST_TO_ADDR
// animal := CreateHuman ;
65322: LD_ADDR_VAR 0 12
65326: PUSH
65327: CALL_OW 44
65331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65332: LD_VAR 0 12
65336: PPUSH
65337: LD_VAR 0 8
65341: PPUSH
65342: LD_INT 0
65344: PPUSH
65345: CALL 67265 0 3
// end ;
65349: GO 65286
65351: POP
65352: POP
// if apemans then
65353: LD_VAR 0 3
65357: IFFALSE 65480
// for i = 1 to apemans do
65359: LD_ADDR_VAR 0 11
65363: PUSH
65364: DOUBLE
65365: LD_INT 1
65367: DEC
65368: ST_TO_ADDR
65369: LD_VAR 0 3
65373: PUSH
65374: FOR_TO
65375: IFFALSE 65478
// begin hc_class = class_apeman ;
65377: LD_ADDR_OWVAR 28
65381: PUSH
65382: LD_INT 12
65384: ST_TO_ADDR
// hc_gallery =  ;
65385: LD_ADDR_OWVAR 33
65389: PUSH
65390: LD_STRING 
65392: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65393: LD_ADDR_OWVAR 35
65397: PUSH
65398: LD_INT 2
65400: NEG
65401: PPUSH
65402: LD_INT 2
65404: PPUSH
65405: CALL_OW 12
65409: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65410: LD_ADDR_OWVAR 31
65414: PUSH
65415: LD_INT 1
65417: PPUSH
65418: LD_INT 3
65420: PPUSH
65421: CALL_OW 12
65425: PUSH
65426: LD_INT 1
65428: PPUSH
65429: LD_INT 3
65431: PPUSH
65432: CALL_OW 12
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: ST_TO_ADDR
// animal := CreateHuman ;
65449: LD_ADDR_VAR 0 12
65453: PUSH
65454: CALL_OW 44
65458: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65459: LD_VAR 0 12
65463: PPUSH
65464: LD_VAR 0 8
65468: PPUSH
65469: LD_INT 0
65471: PPUSH
65472: CALL 67265 0 3
// end ;
65476: GO 65374
65478: POP
65479: POP
// if enchidnas then
65480: LD_VAR 0 4
65484: IFFALSE 65551
// for i = 1 to enchidnas do
65486: LD_ADDR_VAR 0 11
65490: PUSH
65491: DOUBLE
65492: LD_INT 1
65494: DEC
65495: ST_TO_ADDR
65496: LD_VAR 0 4
65500: PUSH
65501: FOR_TO
65502: IFFALSE 65549
// begin hc_class = 13 ;
65504: LD_ADDR_OWVAR 28
65508: PUSH
65509: LD_INT 13
65511: ST_TO_ADDR
// hc_gallery =  ;
65512: LD_ADDR_OWVAR 33
65516: PUSH
65517: LD_STRING 
65519: ST_TO_ADDR
// animal := CreateHuman ;
65520: LD_ADDR_VAR 0 12
65524: PUSH
65525: CALL_OW 44
65529: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65530: LD_VAR 0 12
65534: PPUSH
65535: LD_VAR 0 8
65539: PPUSH
65540: LD_INT 0
65542: PPUSH
65543: CALL 67265 0 3
// end ;
65547: GO 65501
65549: POP
65550: POP
// if fishes then
65551: LD_VAR 0 7
65555: IFFALSE 65622
// for i = 1 to fishes do
65557: LD_ADDR_VAR 0 11
65561: PUSH
65562: DOUBLE
65563: LD_INT 1
65565: DEC
65566: ST_TO_ADDR
65567: LD_VAR 0 7
65571: PUSH
65572: FOR_TO
65573: IFFALSE 65620
// begin hc_class = 20 ;
65575: LD_ADDR_OWVAR 28
65579: PUSH
65580: LD_INT 20
65582: ST_TO_ADDR
// hc_gallery =  ;
65583: LD_ADDR_OWVAR 33
65587: PUSH
65588: LD_STRING 
65590: ST_TO_ADDR
// animal := CreateHuman ;
65591: LD_ADDR_VAR 0 12
65595: PUSH
65596: CALL_OW 44
65600: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65601: LD_VAR 0 12
65605: PPUSH
65606: LD_VAR 0 9
65610: PPUSH
65611: LD_INT 0
65613: PPUSH
65614: CALL 67265 0 3
// end ;
65618: GO 65572
65620: POP
65621: POP
// end ;
65622: LD_VAR 0 10
65626: RET
// export function WantHeal ( sci , unit ) ; begin
65627: LD_INT 0
65629: PPUSH
// if GetTaskList ( sci ) > 0 then
65630: LD_VAR 0 1
65634: PPUSH
65635: CALL_OW 437
65639: PUSH
65640: LD_INT 0
65642: GREATER
65643: IFFALSE 65715
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 437
65654: PUSH
65655: LD_INT 1
65657: ARRAY
65658: PUSH
65659: LD_INT 1
65661: ARRAY
65662: PUSH
65663: LD_STRING l
65665: EQUAL
65666: IFFALSE 65693
65668: PUSH
65669: LD_VAR 0 1
65673: PPUSH
65674: CALL_OW 437
65678: PUSH
65679: LD_INT 1
65681: ARRAY
65682: PUSH
65683: LD_INT 4
65685: ARRAY
65686: PUSH
65687: LD_VAR 0 2
65691: EQUAL
65692: AND
65693: IFFALSE 65705
// result := true else
65695: LD_ADDR_VAR 0 3
65699: PUSH
65700: LD_INT 1
65702: ST_TO_ADDR
65703: GO 65713
// result := false ;
65705: LD_ADDR_VAR 0 3
65709: PUSH
65710: LD_INT 0
65712: ST_TO_ADDR
// end else
65713: GO 65723
// result := false ;
65715: LD_ADDR_VAR 0 3
65719: PUSH
65720: LD_INT 0
65722: ST_TO_ADDR
// end ;
65723: LD_VAR 0 3
65727: RET
// export function HealTarget ( sci ) ; begin
65728: LD_INT 0
65730: PPUSH
// if not sci then
65731: LD_VAR 0 1
65735: NOT
65736: IFFALSE 65740
// exit ;
65738: GO 65805
// result := 0 ;
65740: LD_ADDR_VAR 0 2
65744: PUSH
65745: LD_INT 0
65747: ST_TO_ADDR
// if GetTaskList ( sci ) then
65748: LD_VAR 0 1
65752: PPUSH
65753: CALL_OW 437
65757: IFFALSE 65805
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65759: LD_VAR 0 1
65763: PPUSH
65764: CALL_OW 437
65768: PUSH
65769: LD_INT 1
65771: ARRAY
65772: PUSH
65773: LD_INT 1
65775: ARRAY
65776: PUSH
65777: LD_STRING l
65779: EQUAL
65780: IFFALSE 65805
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: CALL_OW 437
65796: PUSH
65797: LD_INT 1
65799: ARRAY
65800: PUSH
65801: LD_INT 4
65803: ARRAY
65804: ST_TO_ADDR
// end ;
65805: LD_VAR 0 2
65809: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65810: LD_INT 0
65812: PPUSH
65813: PPUSH
65814: PPUSH
65815: PPUSH
// if not base_units then
65816: LD_VAR 0 1
65820: NOT
65821: IFFALSE 65825
// exit ;
65823: GO 65912
// result := false ;
65825: LD_ADDR_VAR 0 2
65829: PUSH
65830: LD_INT 0
65832: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65833: LD_ADDR_VAR 0 5
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: LD_INT 21
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PPUSH
65853: CALL_OW 72
65857: ST_TO_ADDR
// if not tmp then
65858: LD_VAR 0 5
65862: NOT
65863: IFFALSE 65867
// exit ;
65865: GO 65912
// for i in tmp do
65867: LD_ADDR_VAR 0 3
65871: PUSH
65872: LD_VAR 0 5
65876: PUSH
65877: FOR_IN
65878: IFFALSE 65910
// begin result := EnemyInRange ( i , 22 ) ;
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: LD_VAR 0 3
65889: PPUSH
65890: LD_INT 22
65892: PPUSH
65893: CALL 63327 0 2
65897: ST_TO_ADDR
// if result then
65898: LD_VAR 0 2
65902: IFFALSE 65908
// exit ;
65904: POP
65905: POP
65906: GO 65912
// end ;
65908: GO 65877
65910: POP
65911: POP
// end ;
65912: LD_VAR 0 2
65916: RET
// export function FilterByTag ( units , tag ) ; begin
65917: LD_INT 0
65919: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65920: LD_ADDR_VAR 0 3
65924: PUSH
65925: LD_VAR 0 1
65929: PPUSH
65930: LD_INT 120
65932: PUSH
65933: LD_VAR 0 2
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PPUSH
65942: CALL_OW 72
65946: ST_TO_ADDR
// end ;
65947: LD_VAR 0 3
65951: RET
// export function IsDriver ( un ) ; begin
65952: LD_INT 0
65954: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65955: LD_ADDR_VAR 0 2
65959: PUSH
65960: LD_VAR 0 1
65964: PUSH
65965: LD_INT 55
65967: PUSH
65968: EMPTY
65969: LIST
65970: PPUSH
65971: CALL_OW 69
65975: IN
65976: ST_TO_ADDR
// end ;
65977: LD_VAR 0 2
65981: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
// list := [ ] ;
65986: LD_ADDR_VAR 0 5
65990: PUSH
65991: EMPTY
65992: ST_TO_ADDR
// case d of 0 :
65993: LD_VAR 0 3
65997: PUSH
65998: LD_INT 0
66000: DOUBLE
66001: EQUAL
66002: IFTRUE 66006
66004: GO 66139
66006: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66007: LD_ADDR_VAR 0 5
66011: PUSH
66012: LD_VAR 0 1
66016: PUSH
66017: LD_INT 4
66019: MINUS
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 4
66028: MINUS
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 3
66045: MINUS
66046: PUSH
66047: LD_VAR 0 2
66051: PUSH
66052: LD_INT 1
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: PUSH
66060: LD_VAR 0 1
66064: PUSH
66065: LD_INT 4
66067: PLUS
66068: PUSH
66069: LD_VAR 0 2
66073: PUSH
66074: LD_INT 4
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: LIST
66081: PUSH
66082: LD_VAR 0 1
66086: PUSH
66087: LD_INT 3
66089: PLUS
66090: PUSH
66091: LD_VAR 0 2
66095: PUSH
66096: LD_INT 3
66098: PLUS
66099: PUSH
66100: LD_INT 5
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: LD_VAR 0 1
66112: PUSH
66113: LD_VAR 0 2
66117: PUSH
66118: LD_INT 4
66120: PLUS
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// end ; 1 :
66137: GO 66837
66139: LD_INT 1
66141: DOUBLE
66142: EQUAL
66143: IFTRUE 66147
66145: GO 66280
66147: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66148: LD_ADDR_VAR 0 5
66152: PUSH
66153: LD_VAR 0 1
66157: PUSH
66158: LD_VAR 0 2
66162: PUSH
66163: LD_INT 4
66165: MINUS
66166: PUSH
66167: LD_INT 3
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: PUSH
66175: LD_VAR 0 1
66179: PUSH
66180: LD_INT 3
66182: MINUS
66183: PUSH
66184: LD_VAR 0 2
66188: PUSH
66189: LD_INT 3
66191: MINUS
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: PUSH
66201: LD_VAR 0 1
66205: PUSH
66206: LD_INT 4
66208: MINUS
66209: PUSH
66210: LD_VAR 0 2
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: PUSH
66223: LD_VAR 0 1
66227: PUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_INT 3
66235: PLUS
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: PUSH
66245: LD_VAR 0 1
66249: PUSH
66250: LD_INT 4
66252: PLUS
66253: PUSH
66254: LD_VAR 0 2
66258: PUSH
66259: LD_INT 4
66261: PLUS
66262: PUSH
66263: LD_INT 5
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: ST_TO_ADDR
// end ; 2 :
66278: GO 66837
66280: LD_INT 2
66282: DOUBLE
66283: EQUAL
66284: IFTRUE 66288
66286: GO 66417
66288: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66289: LD_ADDR_VAR 0 5
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_VAR 0 2
66303: PUSH
66304: LD_INT 3
66306: MINUS
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: LIST
66315: PUSH
66316: LD_VAR 0 1
66320: PUSH
66321: LD_INT 4
66323: PLUS
66324: PUSH
66325: LD_VAR 0 2
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: PUSH
66338: LD_VAR 0 1
66342: PUSH
66343: LD_VAR 0 2
66347: PUSH
66348: LD_INT 4
66350: PLUS
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: LIST
66359: PUSH
66360: LD_VAR 0 1
66364: PUSH
66365: LD_INT 3
66367: MINUS
66368: PUSH
66369: LD_VAR 0 2
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: PUSH
66382: LD_VAR 0 1
66386: PUSH
66387: LD_INT 4
66389: MINUS
66390: PUSH
66391: LD_VAR 0 2
66395: PUSH
66396: LD_INT 4
66398: MINUS
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: LIST
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// end ; 3 :
66415: GO 66837
66417: LD_INT 3
66419: DOUBLE
66420: EQUAL
66421: IFTRUE 66425
66423: GO 66558
66425: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66426: LD_ADDR_VAR 0 5
66430: PUSH
66431: LD_VAR 0 1
66435: PUSH
66436: LD_INT 3
66438: PLUS
66439: PUSH
66440: LD_VAR 0 2
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: PUSH
66453: LD_VAR 0 1
66457: PUSH
66458: LD_INT 4
66460: PLUS
66461: PUSH
66462: LD_VAR 0 2
66466: PUSH
66467: LD_INT 4
66469: PLUS
66470: PUSH
66471: LD_INT 5
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: PUSH
66479: LD_VAR 0 1
66483: PUSH
66484: LD_INT 4
66486: MINUS
66487: PUSH
66488: LD_VAR 0 2
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_VAR 0 1
66505: PUSH
66506: LD_VAR 0 2
66510: PUSH
66511: LD_INT 4
66513: MINUS
66514: PUSH
66515: LD_INT 3
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: LD_VAR 0 1
66527: PUSH
66528: LD_INT 3
66530: MINUS
66531: PUSH
66532: LD_VAR 0 2
66536: PUSH
66537: LD_INT 3
66539: MINUS
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: ST_TO_ADDR
// end ; 4 :
66556: GO 66837
66558: LD_INT 4
66560: DOUBLE
66561: EQUAL
66562: IFTRUE 66566
66564: GO 66699
66566: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66567: LD_ADDR_VAR 0 5
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_VAR 0 2
66581: PUSH
66582: LD_INT 4
66584: PLUS
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: PUSH
66594: LD_VAR 0 1
66598: PUSH
66599: LD_INT 3
66601: PLUS
66602: PUSH
66603: LD_VAR 0 2
66607: PUSH
66608: LD_INT 3
66610: PLUS
66611: PUSH
66612: LD_INT 5
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 1
66624: PUSH
66625: LD_INT 4
66627: PLUS
66628: PUSH
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 4
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: LIST
66641: PUSH
66642: LD_VAR 0 1
66646: PUSH
66647: LD_VAR 0 2
66651: PUSH
66652: LD_INT 3
66654: MINUS
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: PUSH
66664: LD_VAR 0 1
66668: PUSH
66669: LD_INT 4
66671: MINUS
66672: PUSH
66673: LD_VAR 0 2
66677: PUSH
66678: LD_INT 4
66680: MINUS
66681: PUSH
66682: LD_INT 2
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// end ; 5 :
66697: GO 66837
66699: LD_INT 5
66701: DOUBLE
66702: EQUAL
66703: IFTRUE 66707
66705: GO 66836
66707: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66708: LD_ADDR_VAR 0 5
66712: PUSH
66713: LD_VAR 0 1
66717: PUSH
66718: LD_INT 4
66720: MINUS
66721: PUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: PUSH
66735: LD_VAR 0 1
66739: PUSH
66740: LD_VAR 0 2
66744: PUSH
66745: LD_INT 4
66747: MINUS
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: PUSH
66757: LD_VAR 0 1
66761: PUSH
66762: LD_INT 4
66764: PLUS
66765: PUSH
66766: LD_VAR 0 2
66770: PUSH
66771: LD_INT 4
66773: PLUS
66774: PUSH
66775: LD_INT 5
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: PUSH
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 3
66790: PLUS
66791: PUSH
66792: LD_VAR 0 2
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: PUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_VAR 0 2
66814: PUSH
66815: LD_INT 3
66817: PLUS
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// end ; end ;
66834: GO 66837
66836: POP
// result := list ;
66837: LD_ADDR_VAR 0 4
66841: PUSH
66842: LD_VAR 0 5
66846: ST_TO_ADDR
// end ;
66847: LD_VAR 0 4
66851: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66852: LD_INT 0
66854: PPUSH
66855: PPUSH
66856: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66857: LD_VAR 0 1
66861: NOT
66862: IFTRUE 66890
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 4
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: IN
66888: NOT
66889: OR
66890: IFFALSE 66894
// exit ;
66892: GO 66977
// tmp := [ ] ;
66894: LD_ADDR_VAR 0 5
66898: PUSH
66899: EMPTY
66900: ST_TO_ADDR
// for i in units do
66901: LD_ADDR_VAR 0 4
66905: PUSH
66906: LD_VAR 0 1
66910: PUSH
66911: FOR_IN
66912: IFFALSE 66946
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66914: LD_ADDR_VAR 0 5
66918: PUSH
66919: LD_VAR 0 5
66923: PPUSH
66924: LD_VAR 0 4
66928: PPUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: CALL_OW 259
66938: PPUSH
66939: CALL 68372 0 2
66943: ST_TO_ADDR
66944: GO 66911
66946: POP
66947: POP
// if not tmp then
66948: LD_VAR 0 5
66952: NOT
66953: IFFALSE 66957
// exit ;
66955: GO 66977
// result := SortListByListDesc ( units , tmp ) ;
66957: LD_ADDR_VAR 0 3
66961: PUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: LD_VAR 0 5
66971: PPUSH
66972: CALL_OW 77
66976: ST_TO_ADDR
// end ;
66977: LD_VAR 0 3
66981: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66982: LD_INT 0
66984: PPUSH
66985: PPUSH
66986: PPUSH
// result := false ;
66987: LD_ADDR_VAR 0 3
66991: PUSH
66992: LD_INT 0
66994: ST_TO_ADDR
// if not building then
66995: LD_VAR 0 2
66999: NOT
67000: IFFALSE 67004
// exit ;
67002: GO 67148
// x := GetX ( building ) ;
67004: LD_ADDR_VAR 0 4
67008: PUSH
67009: LD_VAR 0 2
67013: PPUSH
67014: CALL_OW 250
67018: ST_TO_ADDR
// y := GetY ( building ) ;
67019: LD_ADDR_VAR 0 5
67023: PUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: CALL_OW 251
67033: ST_TO_ADDR
// if not x or not y then
67034: LD_VAR 0 4
67038: NOT
67039: IFTRUE 67048
67041: PUSH
67042: LD_VAR 0 5
67046: NOT
67047: OR
67048: IFFALSE 67052
// exit ;
67050: GO 67148
// if GetTaskList ( unit ) then
67052: LD_VAR 0 1
67056: PPUSH
67057: CALL_OW 437
67061: IFFALSE 67148
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67063: LD_STRING e
67065: PUSH
67066: LD_VAR 0 1
67070: PPUSH
67071: CALL_OW 437
67075: PUSH
67076: LD_INT 1
67078: ARRAY
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: EQUAL
67084: IFFALSE 67111
67086: PUSH
67087: LD_VAR 0 4
67091: PUSH
67092: LD_VAR 0 1
67096: PPUSH
67097: CALL_OW 437
67101: PUSH
67102: LD_INT 1
67104: ARRAY
67105: PUSH
67106: LD_INT 2
67108: ARRAY
67109: EQUAL
67110: AND
67111: IFFALSE 67138
67113: PUSH
67114: LD_VAR 0 5
67118: PUSH
67119: LD_VAR 0 1
67123: PPUSH
67124: CALL_OW 437
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: PUSH
67133: LD_INT 3
67135: ARRAY
67136: EQUAL
67137: AND
67138: IFFALSE 67148
// result := true end ;
67140: LD_ADDR_VAR 0 3
67144: PUSH
67145: LD_INT 1
67147: ST_TO_ADDR
// end ;
67148: LD_VAR 0 3
67152: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67153: LD_INT 0
67155: PPUSH
// result := false ;
67156: LD_ADDR_VAR 0 4
67160: PUSH
67161: LD_INT 0
67163: ST_TO_ADDR
// if GetTaskList ( unit ) then
67164: LD_VAR 0 1
67168: PPUSH
67169: CALL_OW 437
67173: IFFALSE 67260
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67175: LD_STRING M
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: CALL_OW 437
67187: PUSH
67188: LD_INT 1
67190: ARRAY
67191: PUSH
67192: LD_INT 1
67194: ARRAY
67195: EQUAL
67196: IFFALSE 67223
67198: PUSH
67199: LD_VAR 0 2
67203: PUSH
67204: LD_VAR 0 1
67208: PPUSH
67209: CALL_OW 437
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: PUSH
67218: LD_INT 2
67220: ARRAY
67221: EQUAL
67222: AND
67223: IFFALSE 67250
67225: PUSH
67226: LD_VAR 0 3
67230: PUSH
67231: LD_VAR 0 1
67235: PPUSH
67236: CALL_OW 437
67240: PUSH
67241: LD_INT 1
67243: ARRAY
67244: PUSH
67245: LD_INT 3
67247: ARRAY
67248: EQUAL
67249: AND
67250: IFFALSE 67260
// result := true ;
67252: LD_ADDR_VAR 0 4
67256: PUSH
67257: LD_INT 1
67259: ST_TO_ADDR
// end ; end ;
67260: LD_VAR 0 4
67264: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67265: LD_INT 0
67267: PPUSH
67268: PPUSH
67269: PPUSH
67270: PPUSH
// if not unit or not area then
67271: LD_VAR 0 1
67275: NOT
67276: IFTRUE 67285
67278: PUSH
67279: LD_VAR 0 2
67283: NOT
67284: OR
67285: IFFALSE 67289
// exit ;
67287: GO 67465
// tmp := AreaToList ( area , i ) ;
67289: LD_ADDR_VAR 0 6
67293: PUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: LD_VAR 0 5
67303: PPUSH
67304: CALL_OW 517
67308: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67309: LD_ADDR_VAR 0 5
67313: PUSH
67314: DOUBLE
67315: LD_INT 1
67317: DEC
67318: ST_TO_ADDR
67319: LD_VAR 0 6
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PUSH
67328: FOR_TO
67329: IFFALSE 67463
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67331: LD_ADDR_VAR 0 7
67335: PUSH
67336: LD_VAR 0 6
67340: PUSH
67341: LD_INT 1
67343: ARRAY
67344: PUSH
67345: LD_VAR 0 5
67349: ARRAY
67350: PUSH
67351: LD_VAR 0 6
67355: PUSH
67356: LD_INT 2
67358: ARRAY
67359: PUSH
67360: LD_VAR 0 5
67364: ARRAY
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67370: LD_INT 92
67372: PUSH
67373: LD_VAR 0 7
67377: PUSH
67378: LD_INT 1
67380: ARRAY
67381: PUSH
67382: LD_VAR 0 7
67386: PUSH
67387: LD_INT 2
67389: ARRAY
67390: PUSH
67391: LD_INT 2
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: PPUSH
67400: CALL_OW 69
67404: PUSH
67405: LD_INT 0
67407: EQUAL
67408: IFFALSE 67461
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67410: LD_VAR 0 1
67414: PPUSH
67415: LD_VAR 0 7
67419: PUSH
67420: LD_INT 1
67422: ARRAY
67423: PPUSH
67424: LD_VAR 0 7
67428: PUSH
67429: LD_INT 2
67431: ARRAY
67432: PPUSH
67433: LD_VAR 0 3
67437: PPUSH
67438: CALL_OW 48
// result := IsPlaced ( unit ) ;
67442: LD_ADDR_VAR 0 4
67446: PUSH
67447: LD_VAR 0 1
67451: PPUSH
67452: CALL_OW 305
67456: ST_TO_ADDR
// exit ;
67457: POP
67458: POP
67459: GO 67465
// end ; end ;
67461: GO 67328
67463: POP
67464: POP
// end ;
67465: LD_VAR 0 4
67469: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67470: LD_INT 0
67472: PPUSH
67473: PPUSH
67474: PPUSH
// if not side or side > 8 then
67475: LD_VAR 0 1
67479: NOT
67480: IFTRUE 67492
67482: PUSH
67483: LD_VAR 0 1
67487: PUSH
67488: LD_INT 8
67490: GREATER
67491: OR
67492: IFFALSE 67496
// exit ;
67494: GO 67683
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67496: LD_ADDR_VAR 0 4
67500: PUSH
67501: LD_INT 22
67503: PUSH
67504: LD_VAR 0 1
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 21
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PPUSH
67527: CALL_OW 69
67531: ST_TO_ADDR
// if not tmp then
67532: LD_VAR 0 4
67536: NOT
67537: IFFALSE 67541
// exit ;
67539: GO 67683
// enable_addtolog := true ;
67541: LD_ADDR_OWVAR 81
67545: PUSH
67546: LD_INT 1
67548: ST_TO_ADDR
// AddToLog ( [ ) ;
67549: LD_STRING [
67551: PPUSH
67552: CALL_OW 561
// for i in tmp do
67556: LD_ADDR_VAR 0 3
67560: PUSH
67561: LD_VAR 0 4
67565: PUSH
67566: FOR_IN
67567: IFFALSE 67674
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67569: LD_STRING [
67571: PUSH
67572: LD_VAR 0 3
67576: PPUSH
67577: CALL_OW 266
67581: STR
67582: PUSH
67583: LD_STRING , 
67585: STR
67586: PUSH
67587: LD_VAR 0 3
67591: PPUSH
67592: CALL_OW 250
67596: STR
67597: PUSH
67598: LD_STRING , 
67600: STR
67601: PUSH
67602: LD_VAR 0 3
67606: PPUSH
67607: CALL_OW 251
67611: STR
67612: PUSH
67613: LD_STRING , 
67615: STR
67616: PUSH
67617: LD_VAR 0 3
67621: PPUSH
67622: CALL_OW 254
67626: STR
67627: PUSH
67628: LD_STRING , 
67630: STR
67631: PUSH
67632: LD_VAR 0 3
67636: PPUSH
67637: LD_INT 1
67639: PPUSH
67640: CALL_OW 268
67644: STR
67645: PUSH
67646: LD_STRING , 
67648: STR
67649: PUSH
67650: LD_VAR 0 3
67654: PPUSH
67655: LD_INT 2
67657: PPUSH
67658: CALL_OW 268
67662: STR
67663: PUSH
67664: LD_STRING ],
67666: STR
67667: PPUSH
67668: CALL_OW 561
// end ;
67672: GO 67566
67674: POP
67675: POP
// AddToLog ( ]; ) ;
67676: LD_STRING ];
67678: PPUSH
67679: CALL_OW 561
// end ;
67683: LD_VAR 0 2
67687: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67688: LD_INT 0
67690: PPUSH
67691: PPUSH
67692: PPUSH
67693: PPUSH
67694: PPUSH
// if not area or not rate or not max then
67695: LD_VAR 0 1
67699: NOT
67700: IFTRUE 67709
67702: PUSH
67703: LD_VAR 0 2
67707: NOT
67708: OR
67709: IFTRUE 67718
67711: PUSH
67712: LD_VAR 0 4
67716: NOT
67717: OR
67718: IFFALSE 67722
// exit ;
67720: GO 67911
// while 1 do
67722: LD_INT 1
67724: IFFALSE 67911
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67726: LD_ADDR_VAR 0 9
67730: PUSH
67731: LD_VAR 0 1
67735: PPUSH
67736: LD_INT 1
67738: PPUSH
67739: CALL_OW 287
67743: PUSH
67744: LD_INT 10
67746: MUL
67747: ST_TO_ADDR
// r := rate / 10 ;
67748: LD_ADDR_VAR 0 7
67752: PUSH
67753: LD_VAR 0 2
67757: PUSH
67758: LD_INT 10
67760: DIVREAL
67761: ST_TO_ADDR
// time := 1 1$00 ;
67762: LD_ADDR_VAR 0 8
67766: PUSH
67767: LD_INT 2100
67769: ST_TO_ADDR
// if amount < min then
67770: LD_VAR 0 9
67774: PUSH
67775: LD_VAR 0 3
67779: LESS
67780: IFFALSE 67798
// r := r * 2 else
67782: LD_ADDR_VAR 0 7
67786: PUSH
67787: LD_VAR 0 7
67791: PUSH
67792: LD_INT 2
67794: MUL
67795: ST_TO_ADDR
67796: GO 67824
// if amount > max then
67798: LD_VAR 0 9
67802: PUSH
67803: LD_VAR 0 4
67807: GREATER
67808: IFFALSE 67824
// r := r / 2 ;
67810: LD_ADDR_VAR 0 7
67814: PUSH
67815: LD_VAR 0 7
67819: PUSH
67820: LD_INT 2
67822: DIVREAL
67823: ST_TO_ADDR
// time := time / r ;
67824: LD_ADDR_VAR 0 8
67828: PUSH
67829: LD_VAR 0 8
67833: PUSH
67834: LD_VAR 0 7
67838: DIVREAL
67839: ST_TO_ADDR
// if time < 0 then
67840: LD_VAR 0 8
67844: PUSH
67845: LD_INT 0
67847: LESS
67848: IFFALSE 67865
// time := time * - 1 ;
67850: LD_ADDR_VAR 0 8
67854: PUSH
67855: LD_VAR 0 8
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: MUL
67864: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67865: LD_VAR 0 8
67869: PUSH
67870: LD_INT 35
67872: PPUSH
67873: LD_INT 875
67875: PPUSH
67876: CALL_OW 12
67880: PLUS
67881: PPUSH
67882: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67886: LD_INT 1
67888: PPUSH
67889: LD_INT 5
67891: PPUSH
67892: CALL_OW 12
67896: PPUSH
67897: LD_VAR 0 1
67901: PPUSH
67902: LD_INT 1
67904: PPUSH
67905: CALL_OW 55
// end ;
67909: GO 67722
// end ;
67911: LD_VAR 0 5
67915: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67916: LD_INT 0
67918: PPUSH
67919: PPUSH
67920: PPUSH
67921: PPUSH
67922: PPUSH
67923: PPUSH
67924: PPUSH
67925: PPUSH
// if not turrets or not factories then
67926: LD_VAR 0 1
67930: NOT
67931: IFTRUE 67940
67933: PUSH
67934: LD_VAR 0 2
67938: NOT
67939: OR
67940: IFFALSE 67944
// exit ;
67942: GO 68251
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67944: LD_ADDR_VAR 0 10
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: LD_INT 6
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: LD_INT 4
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: LD_INT 5
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 24
67986: PUSH
67987: LD_INT 25
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 23
67996: PUSH
67997: LD_INT 27
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 42
68010: PUSH
68011: LD_INT 43
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 44
68020: PUSH
68021: LD_INT 46
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 45
68030: PUSH
68031: LD_INT 47
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: LIST
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// result := [ ] ;
68048: LD_ADDR_VAR 0 3
68052: PUSH
68053: EMPTY
68054: ST_TO_ADDR
// for i in turrets do
68055: LD_ADDR_VAR 0 4
68059: PUSH
68060: LD_VAR 0 1
68064: PUSH
68065: FOR_IN
68066: IFFALSE 68249
// begin nat := GetNation ( i ) ;
68068: LD_ADDR_VAR 0 7
68072: PUSH
68073: LD_VAR 0 4
68077: PPUSH
68078: CALL_OW 248
68082: ST_TO_ADDR
// weapon := 0 ;
68083: LD_ADDR_VAR 0 8
68087: PUSH
68088: LD_INT 0
68090: ST_TO_ADDR
// if not nat then
68091: LD_VAR 0 7
68095: NOT
68096: IFFALSE 68100
// continue ;
68098: GO 68065
// for j in list [ nat ] do
68100: LD_ADDR_VAR 0 5
68104: PUSH
68105: LD_VAR 0 10
68109: PUSH
68110: LD_VAR 0 7
68114: ARRAY
68115: PUSH
68116: FOR_IN
68117: IFFALSE 68158
// if GetBWeapon ( i ) = j [ 1 ] then
68119: LD_VAR 0 4
68123: PPUSH
68124: CALL_OW 269
68128: PUSH
68129: LD_VAR 0 5
68133: PUSH
68134: LD_INT 1
68136: ARRAY
68137: EQUAL
68138: IFFALSE 68156
// begin weapon := j [ 2 ] ;
68140: LD_ADDR_VAR 0 8
68144: PUSH
68145: LD_VAR 0 5
68149: PUSH
68150: LD_INT 2
68152: ARRAY
68153: ST_TO_ADDR
// break ;
68154: GO 68158
// end ;
68156: GO 68116
68158: POP
68159: POP
// if not weapon then
68160: LD_VAR 0 8
68164: NOT
68165: IFFALSE 68169
// continue ;
68167: GO 68065
// for k in factories do
68169: LD_ADDR_VAR 0 6
68173: PUSH
68174: LD_VAR 0 2
68178: PUSH
68179: FOR_IN
68180: IFFALSE 68245
// begin weapons := AvailableWeaponList ( k ) ;
68182: LD_ADDR_VAR 0 9
68186: PUSH
68187: LD_VAR 0 6
68191: PPUSH
68192: CALL_OW 478
68196: ST_TO_ADDR
// if not weapons then
68197: LD_VAR 0 9
68201: NOT
68202: IFFALSE 68206
// continue ;
68204: GO 68179
// if weapon in weapons then
68206: LD_VAR 0 8
68210: PUSH
68211: LD_VAR 0 9
68215: IN
68216: IFFALSE 68243
// begin result := [ i , weapon ] ;
68218: LD_ADDR_VAR 0 3
68222: PUSH
68223: LD_VAR 0 4
68227: PUSH
68228: LD_VAR 0 8
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: ST_TO_ADDR
// exit ;
68237: POP
68238: POP
68239: POP
68240: POP
68241: GO 68251
// end ; end ;
68243: GO 68179
68245: POP
68246: POP
// end ;
68247: GO 68065
68249: POP
68250: POP
// end ;
68251: LD_VAR 0 3
68255: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68256: LD_INT 0
68258: PPUSH
// if not side or side > 8 then
68259: LD_VAR 0 3
68263: NOT
68264: IFTRUE 68276
68266: PUSH
68267: LD_VAR 0 3
68271: PUSH
68272: LD_INT 8
68274: GREATER
68275: OR
68276: IFFALSE 68280
// exit ;
68278: GO 68339
// if not range then
68280: LD_VAR 0 4
68284: NOT
68285: IFFALSE 68296
// range := - 12 ;
68287: LD_ADDR_VAR 0 4
68291: PUSH
68292: LD_INT 12
68294: NEG
68295: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68296: LD_VAR 0 1
68300: PPUSH
68301: LD_VAR 0 2
68305: PPUSH
68306: LD_VAR 0 3
68310: PPUSH
68311: LD_VAR 0 4
68315: PPUSH
68316: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68320: LD_VAR 0 1
68324: PPUSH
68325: LD_VAR 0 2
68329: PPUSH
68330: LD_VAR 0 3
68334: PPUSH
68335: CALL_OW 331
// end ;
68339: LD_VAR 0 5
68343: RET
// export function Video ( mode ) ; begin
68344: LD_INT 0
68346: PPUSH
// ingame_video = mode ;
68347: LD_ADDR_OWVAR 52
68351: PUSH
68352: LD_VAR 0 1
68356: ST_TO_ADDR
// interface_hidden = mode ;
68357: LD_ADDR_OWVAR 54
68361: PUSH
68362: LD_VAR 0 1
68366: ST_TO_ADDR
// end ;
68367: LD_VAR 0 2
68371: RET
// export function Join ( array , element ) ; begin
68372: LD_INT 0
68374: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68375: LD_ADDR_VAR 0 3
68379: PUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: LD_VAR 0 1
68389: PUSH
68390: LD_INT 1
68392: PLUS
68393: PPUSH
68394: LD_VAR 0 2
68398: PPUSH
68399: CALL_OW 1
68403: ST_TO_ADDR
// end ;
68404: LD_VAR 0 3
68408: RET
// export function JoinUnion ( array , element ) ; begin
68409: LD_INT 0
68411: PPUSH
// result := array union element ;
68412: LD_ADDR_VAR 0 3
68416: PUSH
68417: LD_VAR 0 1
68421: PUSH
68422: LD_VAR 0 2
68426: UNION
68427: ST_TO_ADDR
// end ;
68428: LD_VAR 0 3
68432: RET
// export function GetBehemoths ( side ) ; begin
68433: LD_INT 0
68435: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68436: LD_ADDR_VAR 0 2
68440: PUSH
68441: LD_INT 22
68443: PUSH
68444: LD_VAR 0 1
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 31
68455: PUSH
68456: LD_INT 25
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PPUSH
68467: CALL_OW 69
68471: ST_TO_ADDR
// end ;
68472: LD_VAR 0 2
68476: RET
// export function Shuffle ( array ) ; var i , index ; begin
68477: LD_INT 0
68479: PPUSH
68480: PPUSH
68481: PPUSH
// result := [ ] ;
68482: LD_ADDR_VAR 0 2
68486: PUSH
68487: EMPTY
68488: ST_TO_ADDR
// if not array then
68489: LD_VAR 0 1
68493: NOT
68494: IFFALSE 68498
// exit ;
68496: GO 68597
// Randomize ;
68498: CALL_OW 10
// for i = array downto 1 do
68502: LD_ADDR_VAR 0 3
68506: PUSH
68507: DOUBLE
68508: LD_VAR 0 1
68512: INC
68513: ST_TO_ADDR
68514: LD_INT 1
68516: PUSH
68517: FOR_DOWNTO
68518: IFFALSE 68595
// begin index := rand ( 1 , array ) ;
68520: LD_ADDR_VAR 0 4
68524: PUSH
68525: LD_INT 1
68527: PPUSH
68528: LD_VAR 0 1
68532: PPUSH
68533: CALL_OW 12
68537: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68538: LD_ADDR_VAR 0 2
68542: PUSH
68543: LD_VAR 0 2
68547: PPUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_INT 1
68555: PLUS
68556: PPUSH
68557: LD_VAR 0 1
68561: PUSH
68562: LD_VAR 0 4
68566: ARRAY
68567: PPUSH
68568: CALL_OW 2
68572: ST_TO_ADDR
// array := Delete ( array , index ) ;
68573: LD_ADDR_VAR 0 1
68577: PUSH
68578: LD_VAR 0 1
68582: PPUSH
68583: LD_VAR 0 4
68587: PPUSH
68588: CALL_OW 3
68592: ST_TO_ADDR
// end ;
68593: GO 68517
68595: POP
68596: POP
// end ;
68597: LD_VAR 0 2
68601: RET
// export function GetBaseMaterials ( base ) ; begin
68602: LD_INT 0
68604: PPUSH
// result := [ 0 , 0 , 0 ] ;
68605: LD_ADDR_VAR 0 2
68609: PUSH
68610: LD_INT 0
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: LIST
68623: ST_TO_ADDR
// if not base then
68624: LD_VAR 0 1
68628: NOT
68629: IFFALSE 68633
// exit ;
68631: GO 68682
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68633: LD_ADDR_VAR 0 2
68637: PUSH
68638: LD_VAR 0 1
68642: PPUSH
68643: LD_INT 1
68645: PPUSH
68646: CALL_OW 275
68650: PUSH
68651: LD_VAR 0 1
68655: PPUSH
68656: LD_INT 2
68658: PPUSH
68659: CALL_OW 275
68663: PUSH
68664: LD_VAR 0 1
68668: PPUSH
68669: LD_INT 3
68671: PPUSH
68672: CALL_OW 275
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: ST_TO_ADDR
// end ;
68682: LD_VAR 0 2
68686: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68687: LD_INT 0
68689: PPUSH
68690: PPUSH
// result := array ;
68691: LD_ADDR_VAR 0 3
68695: PUSH
68696: LD_VAR 0 1
68700: ST_TO_ADDR
// if size >= result then
68701: LD_VAR 0 2
68705: PUSH
68706: LD_VAR 0 3
68710: GREATEREQUAL
68711: IFFALSE 68715
// exit ;
68713: GO 68765
// if size then
68715: LD_VAR 0 2
68719: IFFALSE 68765
// for i := array downto size do
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: DOUBLE
68727: LD_VAR 0 1
68731: INC
68732: ST_TO_ADDR
68733: LD_VAR 0 2
68737: PUSH
68738: FOR_DOWNTO
68739: IFFALSE 68763
// result := Delete ( result , result ) ;
68741: LD_ADDR_VAR 0 3
68745: PUSH
68746: LD_VAR 0 3
68750: PPUSH
68751: LD_VAR 0 3
68755: PPUSH
68756: CALL_OW 3
68760: ST_TO_ADDR
68761: GO 68738
68763: POP
68764: POP
// end ;
68765: LD_VAR 0 3
68769: RET
// export function ComExit ( unit ) ; var tmp ; begin
68770: LD_INT 0
68772: PPUSH
68773: PPUSH
// if not IsInUnit ( unit ) then
68774: LD_VAR 0 1
68778: PPUSH
68779: CALL_OW 310
68783: NOT
68784: IFFALSE 68788
// exit ;
68786: GO 68848
// tmp := IsInUnit ( unit ) ;
68788: LD_ADDR_VAR 0 3
68792: PUSH
68793: LD_VAR 0 1
68797: PPUSH
68798: CALL_OW 310
68802: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68803: LD_VAR 0 3
68807: PPUSH
68808: CALL_OW 247
68812: PUSH
68813: LD_INT 2
68815: EQUAL
68816: IFFALSE 68829
// ComExitVehicle ( unit ) else
68818: LD_VAR 0 1
68822: PPUSH
68823: CALL_OW 121
68827: GO 68838
// ComExitBuilding ( unit ) ;
68829: LD_VAR 0 1
68833: PPUSH
68834: CALL_OW 122
// result := tmp ;
68838: LD_ADDR_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: ST_TO_ADDR
// end ;
68848: LD_VAR 0 2
68852: RET
// export function ComExitAll ( units ) ; var i ; begin
68853: LD_INT 0
68855: PPUSH
68856: PPUSH
// if not units then
68857: LD_VAR 0 1
68861: NOT
68862: IFFALSE 68866
// exit ;
68864: GO 68892
// for i in units do
68866: LD_ADDR_VAR 0 3
68870: PUSH
68871: LD_VAR 0 1
68875: PUSH
68876: FOR_IN
68877: IFFALSE 68890
// ComExit ( i ) ;
68879: LD_VAR 0 3
68883: PPUSH
68884: CALL 68770 0 1
68888: GO 68876
68890: POP
68891: POP
// end ;
68892: LD_VAR 0 2
68896: RET
// export function ResetHc ; begin
68897: LD_INT 0
68899: PPUSH
// InitHc ;
68900: CALL_OW 19
// hc_importance := 0 ;
68904: LD_ADDR_OWVAR 32
68908: PUSH
68909: LD_INT 0
68911: ST_TO_ADDR
// end ;
68912: LD_VAR 0 1
68916: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68917: LD_INT 0
68919: PPUSH
68920: PPUSH
68921: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68922: LD_ADDR_VAR 0 6
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: LD_VAR 0 3
68936: PLUS
68937: PUSH
68938: LD_INT 2
68940: DIV
68941: ST_TO_ADDR
// if _x < 0 then
68942: LD_VAR 0 6
68946: PUSH
68947: LD_INT 0
68949: LESS
68950: IFFALSE 68967
// _x := _x * - 1 ;
68952: LD_ADDR_VAR 0 6
68956: PUSH
68957: LD_VAR 0 6
68961: PUSH
68962: LD_INT 1
68964: NEG
68965: MUL
68966: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68967: LD_ADDR_VAR 0 7
68971: PUSH
68972: LD_VAR 0 2
68976: PUSH
68977: LD_VAR 0 4
68981: PLUS
68982: PUSH
68983: LD_INT 2
68985: DIV
68986: ST_TO_ADDR
// if _y < 0 then
68987: LD_VAR 0 7
68991: PUSH
68992: LD_INT 0
68994: LESS
68995: IFFALSE 69012
// _y := _y * - 1 ;
68997: LD_ADDR_VAR 0 7
69001: PUSH
69002: LD_VAR 0 7
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: MUL
69011: ST_TO_ADDR
// result := [ _x , _y ] ;
69012: LD_ADDR_VAR 0 5
69016: PUSH
69017: LD_VAR 0 6
69021: PUSH
69022: LD_VAR 0 7
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: ST_TO_ADDR
// end ;
69031: LD_VAR 0 5
69035: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69036: LD_INT 0
69038: PPUSH
69039: PPUSH
69040: PPUSH
69041: PPUSH
// task := GetTaskList ( unit ) ;
69042: LD_ADDR_VAR 0 7
69046: PUSH
69047: LD_VAR 0 1
69051: PPUSH
69052: CALL_OW 437
69056: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69057: LD_VAR 0 7
69061: NOT
69062: IFFALSE 69081
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_VAR 0 2
69074: PPUSH
69075: CALL_OW 308
69079: NOT
69080: AND
69081: IFFALSE 69085
// exit ;
69083: GO 69203
// if IsInArea ( unit , area ) then
69085: LD_VAR 0 1
69089: PPUSH
69090: LD_VAR 0 2
69094: PPUSH
69095: CALL_OW 308
69099: IFFALSE 69117
// begin ComMoveToArea ( unit , goAway ) ;
69101: LD_VAR 0 1
69105: PPUSH
69106: LD_VAR 0 3
69110: PPUSH
69111: CALL_OW 113
// exit ;
69115: GO 69203
// end ; if task [ 1 ] [ 1 ] <> M then
69117: LD_VAR 0 7
69121: PUSH
69122: LD_INT 1
69124: ARRAY
69125: PUSH
69126: LD_INT 1
69128: ARRAY
69129: PUSH
69130: LD_STRING M
69132: NONEQUAL
69133: IFFALSE 69137
// exit ;
69135: GO 69203
// x := task [ 1 ] [ 2 ] ;
69137: LD_ADDR_VAR 0 5
69141: PUSH
69142: LD_VAR 0 7
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PUSH
69151: LD_INT 2
69153: ARRAY
69154: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69155: LD_ADDR_VAR 0 6
69159: PUSH
69160: LD_VAR 0 7
69164: PUSH
69165: LD_INT 1
69167: ARRAY
69168: PUSH
69169: LD_INT 3
69171: ARRAY
69172: ST_TO_ADDR
// if InArea ( x , y , area ) then
69173: LD_VAR 0 5
69177: PPUSH
69178: LD_VAR 0 6
69182: PPUSH
69183: LD_VAR 0 2
69187: PPUSH
69188: CALL_OW 309
69192: IFFALSE 69203
// ComStop ( unit ) ;
69194: LD_VAR 0 1
69198: PPUSH
69199: CALL_OW 141
// end ;
69203: LD_VAR 0 4
69207: RET
// export function Abs ( value ) ; begin
69208: LD_INT 0
69210: PPUSH
// result := value ;
69211: LD_ADDR_VAR 0 2
69215: PUSH
69216: LD_VAR 0 1
69220: ST_TO_ADDR
// if value < 0 then
69221: LD_VAR 0 1
69225: PUSH
69226: LD_INT 0
69228: LESS
69229: IFFALSE 69246
// result := value * - 1 ;
69231: LD_ADDR_VAR 0 2
69235: PUSH
69236: LD_VAR 0 1
69240: PUSH
69241: LD_INT 1
69243: NEG
69244: MUL
69245: ST_TO_ADDR
// end ;
69246: LD_VAR 0 2
69250: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
// if not unit or not building then
69261: LD_VAR 0 1
69265: NOT
69266: IFTRUE 69275
69268: PUSH
69269: LD_VAR 0 2
69273: NOT
69274: OR
69275: IFFALSE 69279
// exit ;
69277: GO 69507
// x := GetX ( building ) ;
69279: LD_ADDR_VAR 0 4
69283: PUSH
69284: LD_VAR 0 2
69288: PPUSH
69289: CALL_OW 250
69293: ST_TO_ADDR
// y := GetY ( building ) ;
69294: LD_ADDR_VAR 0 6
69298: PUSH
69299: LD_VAR 0 2
69303: PPUSH
69304: CALL_OW 251
69308: ST_TO_ADDR
// d := GetDir ( building ) ;
69309: LD_ADDR_VAR 0 8
69313: PUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: CALL_OW 254
69323: ST_TO_ADDR
// r := 4 ;
69324: LD_ADDR_VAR 0 9
69328: PUSH
69329: LD_INT 4
69331: ST_TO_ADDR
// for i := 1 to 5 do
69332: LD_ADDR_VAR 0 10
69336: PUSH
69337: DOUBLE
69338: LD_INT 1
69340: DEC
69341: ST_TO_ADDR
69342: LD_INT 5
69344: PUSH
69345: FOR_TO
69346: IFFALSE 69505
// begin _x := ShiftX ( x , d , r + i ) ;
69348: LD_ADDR_VAR 0 5
69352: PUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: LD_VAR 0 8
69362: PPUSH
69363: LD_VAR 0 9
69367: PUSH
69368: LD_VAR 0 10
69372: PLUS
69373: PPUSH
69374: CALL_OW 272
69378: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69379: LD_ADDR_VAR 0 7
69383: PUSH
69384: LD_VAR 0 6
69388: PPUSH
69389: LD_VAR 0 8
69393: PPUSH
69394: LD_VAR 0 9
69398: PUSH
69399: LD_VAR 0 10
69403: PLUS
69404: PPUSH
69405: CALL_OW 273
69409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69410: LD_VAR 0 5
69414: PPUSH
69415: LD_VAR 0 7
69419: PPUSH
69420: CALL_OW 488
69424: IFFALSE 69459
69426: PUSH
69427: LD_VAR 0 5
69431: PPUSH
69432: LD_VAR 0 7
69436: PPUSH
69437: CALL_OW 428
69441: PPUSH
69442: CALL_OW 247
69446: PUSH
69447: LD_INT 3
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: IN
69457: NOT
69458: AND
69459: IFFALSE 69503
// begin ComMoveXY ( unit , _x , _y ) ;
69461: LD_VAR 0 1
69465: PPUSH
69466: LD_VAR 0 5
69470: PPUSH
69471: LD_VAR 0 7
69475: PPUSH
69476: CALL_OW 111
// result := [ _x , _y ] ;
69480: LD_ADDR_VAR 0 3
69484: PUSH
69485: LD_VAR 0 5
69489: PUSH
69490: LD_VAR 0 7
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: ST_TO_ADDR
// exit ;
69499: POP
69500: POP
69501: GO 69507
// end ; end ;
69503: GO 69345
69505: POP
69506: POP
// end ;
69507: LD_VAR 0 3
69511: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69512: LD_INT 0
69514: PPUSH
69515: PPUSH
69516: PPUSH
// result := 0 ;
69517: LD_ADDR_VAR 0 3
69521: PUSH
69522: LD_INT 0
69524: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69525: LD_VAR 0 1
69529: PUSH
69530: LD_INT 0
69532: LESS
69533: IFTRUE 69545
69535: PUSH
69536: LD_VAR 0 1
69540: PUSH
69541: LD_INT 8
69543: GREATER
69544: OR
69545: IFTRUE 69557
69547: PUSH
69548: LD_VAR 0 2
69552: PUSH
69553: LD_INT 0
69555: LESS
69556: OR
69557: IFTRUE 69569
69559: PUSH
69560: LD_VAR 0 2
69564: PUSH
69565: LD_INT 8
69567: GREATER
69568: OR
69569: IFFALSE 69573
// exit ;
69571: GO 69648
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69573: LD_ADDR_VAR 0 4
69577: PUSH
69578: LD_INT 22
69580: PUSH
69581: LD_VAR 0 2
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PPUSH
69590: CALL_OW 69
69594: PUSH
69595: FOR_IN
69596: IFFALSE 69646
// begin un := UnitShoot ( i ) ;
69598: LD_ADDR_VAR 0 5
69602: PUSH
69603: LD_VAR 0 4
69607: PPUSH
69608: CALL_OW 504
69612: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69613: LD_VAR 0 5
69617: PPUSH
69618: CALL_OW 255
69622: PUSH
69623: LD_VAR 0 1
69627: EQUAL
69628: IFFALSE 69644
// begin result := un ;
69630: LD_ADDR_VAR 0 3
69634: PUSH
69635: LD_VAR 0 5
69639: ST_TO_ADDR
// exit ;
69640: POP
69641: POP
69642: GO 69648
// end ; end ;
69644: GO 69595
69646: POP
69647: POP
// end ;
69648: LD_VAR 0 3
69652: RET
// export function GetCargoBay ( units ) ; begin
69653: LD_INT 0
69655: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69656: LD_ADDR_VAR 0 2
69660: PUSH
69661: LD_VAR 0 1
69665: PPUSH
69666: LD_INT 2
69668: PUSH
69669: LD_INT 34
69671: PUSH
69672: LD_INT 12
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 34
69681: PUSH
69682: LD_INT 51
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 34
69691: PUSH
69692: LD_INT 32
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 34
69701: PUSH
69702: LD_INT 89
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: PPUSH
69716: CALL_OW 72
69720: ST_TO_ADDR
// end ;
69721: LD_VAR 0 2
69725: RET
// export function Negate ( value ) ; begin
69726: LD_INT 0
69728: PPUSH
// result := not value ;
69729: LD_ADDR_VAR 0 2
69733: PUSH
69734: LD_VAR 0 1
69738: NOT
69739: ST_TO_ADDR
// end ;
69740: LD_VAR 0 2
69744: RET
// export function Inc ( value ) ; begin
69745: LD_INT 0
69747: PPUSH
// result := value + 1 ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_VAR 0 1
69757: PUSH
69758: LD_INT 1
69760: PLUS
69761: ST_TO_ADDR
// end ;
69762: LD_VAR 0 2
69766: RET
// export function Dec ( value ) ; begin
69767: LD_INT 0
69769: PPUSH
// result := value - 1 ;
69770: LD_ADDR_VAR 0 2
69774: PUSH
69775: LD_VAR 0 1
69779: PUSH
69780: LD_INT 1
69782: MINUS
69783: ST_TO_ADDR
// end ;
69784: LD_VAR 0 2
69788: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69789: LD_INT 0
69791: PPUSH
69792: PPUSH
69793: PPUSH
69794: PPUSH
69795: PPUSH
69796: PPUSH
69797: PPUSH
69798: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69799: LD_VAR 0 1
69803: PPUSH
69804: LD_VAR 0 2
69808: PPUSH
69809: CALL_OW 488
69813: NOT
69814: IFTRUE 69833
69816: PUSH
69817: LD_VAR 0 3
69821: PPUSH
69822: LD_VAR 0 4
69826: PPUSH
69827: CALL_OW 488
69831: NOT
69832: OR
69833: IFFALSE 69846
// begin result := - 1 ;
69835: LD_ADDR_VAR 0 5
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: ST_TO_ADDR
// exit ;
69844: GO 70081
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69846: LD_ADDR_VAR 0 12
69850: PUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: LD_VAR 0 2
69860: PPUSH
69861: LD_VAR 0 3
69865: PPUSH
69866: LD_VAR 0 4
69870: PPUSH
69871: CALL 68917 0 4
69875: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69876: LD_ADDR_VAR 0 11
69880: PUSH
69881: LD_VAR 0 1
69885: PPUSH
69886: LD_VAR 0 2
69890: PPUSH
69891: LD_VAR 0 12
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: PPUSH
69900: LD_VAR 0 12
69904: PUSH
69905: LD_INT 2
69907: ARRAY
69908: PPUSH
69909: CALL_OW 298
69913: ST_TO_ADDR
// distance := 9999 ;
69914: LD_ADDR_VAR 0 10
69918: PUSH
69919: LD_INT 9999
69921: ST_TO_ADDR
// for i := 0 to 5 do
69922: LD_ADDR_VAR 0 6
69926: PUSH
69927: DOUBLE
69928: LD_INT 0
69930: DEC
69931: ST_TO_ADDR
69932: LD_INT 5
69934: PUSH
69935: FOR_TO
69936: IFFALSE 70079
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69938: LD_ADDR_VAR 0 7
69942: PUSH
69943: LD_VAR 0 1
69947: PPUSH
69948: LD_VAR 0 6
69952: PPUSH
69953: LD_VAR 0 11
69957: PPUSH
69958: CALL_OW 272
69962: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69963: LD_ADDR_VAR 0 8
69967: PUSH
69968: LD_VAR 0 2
69972: PPUSH
69973: LD_VAR 0 6
69977: PPUSH
69978: LD_VAR 0 11
69982: PPUSH
69983: CALL_OW 273
69987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69988: LD_VAR 0 7
69992: PPUSH
69993: LD_VAR 0 8
69997: PPUSH
69998: CALL_OW 488
70002: NOT
70003: IFFALSE 70007
// continue ;
70005: GO 69935
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70007: LD_ADDR_VAR 0 9
70011: PUSH
70012: LD_VAR 0 12
70016: PUSH
70017: LD_INT 1
70019: ARRAY
70020: PPUSH
70021: LD_VAR 0 12
70025: PUSH
70026: LD_INT 2
70028: ARRAY
70029: PPUSH
70030: LD_VAR 0 7
70034: PPUSH
70035: LD_VAR 0 8
70039: PPUSH
70040: CALL_OW 298
70044: ST_TO_ADDR
// if tmp < distance then
70045: LD_VAR 0 9
70049: PUSH
70050: LD_VAR 0 10
70054: LESS
70055: IFFALSE 70077
// begin result := i ;
70057: LD_ADDR_VAR 0 5
70061: PUSH
70062: LD_VAR 0 6
70066: ST_TO_ADDR
// distance := tmp ;
70067: LD_ADDR_VAR 0 10
70071: PUSH
70072: LD_VAR 0 9
70076: ST_TO_ADDR
// end ; end ;
70077: GO 69935
70079: POP
70080: POP
// end ;
70081: LD_VAR 0 5
70085: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70086: LD_INT 0
70088: PPUSH
70089: PPUSH
// if not driver or not IsInUnit ( driver ) then
70090: LD_VAR 0 1
70094: NOT
70095: IFTRUE 70109
70097: PUSH
70098: LD_VAR 0 1
70102: PPUSH
70103: CALL_OW 310
70107: NOT
70108: OR
70109: IFFALSE 70113
// exit ;
70111: GO 70203
// vehicle := IsInUnit ( driver ) ;
70113: LD_ADDR_VAR 0 3
70117: PUSH
70118: LD_VAR 0 1
70122: PPUSH
70123: CALL_OW 310
70127: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70128: LD_VAR 0 1
70132: PPUSH
70133: LD_STRING \
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: PUSH
70163: LD_STRING E
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: LD_INT 0
70171: PUSH
70172: LD_VAR 0 3
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PPUSH
70199: CALL_OW 446
// end ;
70203: LD_VAR 0 2
70207: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70208: LD_INT 0
70210: PPUSH
70211: PPUSH
// if not driver or not IsInUnit ( driver ) then
70212: LD_VAR 0 1
70216: NOT
70217: IFTRUE 70231
70219: PUSH
70220: LD_VAR 0 1
70224: PPUSH
70225: CALL_OW 310
70229: NOT
70230: OR
70231: IFFALSE 70235
// exit ;
70233: GO 70325
// vehicle := IsInUnit ( driver ) ;
70235: LD_ADDR_VAR 0 3
70239: PUSH
70240: LD_VAR 0 1
70244: PPUSH
70245: CALL_OW 310
70249: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70250: LD_VAR 0 1
70254: PPUSH
70255: LD_STRING \
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 0
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: PUSH
70285: LD_STRING E
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: LD_VAR 0 3
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PPUSH
70321: CALL_OW 447
// end ;
70325: LD_VAR 0 2
70329: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70330: LD_INT 0
70332: PPUSH
70333: PPUSH
70334: PPUSH
// tmp := [ ] ;
70335: LD_ADDR_VAR 0 5
70339: PUSH
70340: EMPTY
70341: ST_TO_ADDR
// for i in units do
70342: LD_ADDR_VAR 0 4
70346: PUSH
70347: LD_VAR 0 1
70351: PUSH
70352: FOR_IN
70353: IFFALSE 70391
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70355: LD_ADDR_VAR 0 5
70359: PUSH
70360: LD_VAR 0 5
70364: PPUSH
70365: LD_VAR 0 5
70369: PUSH
70370: LD_INT 1
70372: PLUS
70373: PPUSH
70374: LD_VAR 0 4
70378: PPUSH
70379: CALL_OW 256
70383: PPUSH
70384: CALL_OW 2
70388: ST_TO_ADDR
70389: GO 70352
70391: POP
70392: POP
// if not tmp then
70393: LD_VAR 0 5
70397: NOT
70398: IFFALSE 70402
// exit ;
70400: GO 70450
// if asc then
70402: LD_VAR 0 2
70406: IFFALSE 70430
// result := SortListByListAsc ( units , tmp ) else
70408: LD_ADDR_VAR 0 3
70412: PUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: LD_VAR 0 5
70422: PPUSH
70423: CALL_OW 76
70427: ST_TO_ADDR
70428: GO 70450
// result := SortListByListDesc ( units , tmp ) ;
70430: LD_ADDR_VAR 0 3
70434: PUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: LD_VAR 0 5
70444: PPUSH
70445: CALL_OW 77
70449: ST_TO_ADDR
// end ;
70450: LD_VAR 0 3
70454: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70455: LD_INT 0
70457: PPUSH
70458: PPUSH
// task := GetTaskList ( mech ) ;
70459: LD_ADDR_VAR 0 4
70463: PUSH
70464: LD_VAR 0 1
70468: PPUSH
70469: CALL_OW 437
70473: ST_TO_ADDR
// if not task then
70474: LD_VAR 0 4
70478: NOT
70479: IFFALSE 70483
// exit ;
70481: GO 70527
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70483: LD_ADDR_VAR 0 3
70487: PUSH
70488: LD_VAR 0 4
70492: PUSH
70493: LD_INT 1
70495: ARRAY
70496: PUSH
70497: LD_INT 1
70499: ARRAY
70500: PUSH
70501: LD_STRING r
70503: EQUAL
70504: IFFALSE 70526
70506: PUSH
70507: LD_VAR 0 4
70511: PUSH
70512: LD_INT 1
70514: ARRAY
70515: PUSH
70516: LD_INT 4
70518: ARRAY
70519: PUSH
70520: LD_VAR 0 2
70524: EQUAL
70525: AND
70526: ST_TO_ADDR
// end ;
70527: LD_VAR 0 3
70531: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70532: LD_INT 0
70534: PPUSH
// SetDir ( unit , d ) ;
70535: LD_VAR 0 1
70539: PPUSH
70540: LD_VAR 0 4
70544: PPUSH
70545: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70549: LD_ADDR_VAR 0 6
70553: PUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: LD_VAR 0 2
70563: PPUSH
70564: LD_VAR 0 3
70568: PPUSH
70569: LD_VAR 0 5
70573: PPUSH
70574: CALL_OW 48
70578: ST_TO_ADDR
// end ;
70579: LD_VAR 0 6
70583: RET
// export function ToNaturalNumber ( number ) ; begin
70584: LD_INT 0
70586: PPUSH
// result := number div 1 ;
70587: LD_ADDR_VAR 0 2
70591: PUSH
70592: LD_VAR 0 1
70596: PUSH
70597: LD_INT 1
70599: DIV
70600: ST_TO_ADDR
// if number < 0 then
70601: LD_VAR 0 1
70605: PUSH
70606: LD_INT 0
70608: LESS
70609: IFFALSE 70619
// result := 0 ;
70611: LD_ADDR_VAR 0 2
70615: PUSH
70616: LD_INT 0
70618: ST_TO_ADDR
// end ;
70619: LD_VAR 0 2
70623: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70624: LD_INT 0
70626: PPUSH
70627: PPUSH
70628: PPUSH
// if not buildings then
70629: LD_VAR 0 1
70633: NOT
70634: IFFALSE 70638
// exit ;
70636: GO 70753
// tmp := [ ] ;
70638: LD_ADDR_VAR 0 5
70642: PUSH
70643: EMPTY
70644: ST_TO_ADDR
// for b in buildings do
70645: LD_ADDR_VAR 0 4
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: FOR_IN
70656: IFFALSE 70694
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70658: LD_ADDR_VAR 0 5
70662: PUSH
70663: LD_VAR 0 5
70667: PPUSH
70668: LD_VAR 0 5
70672: PUSH
70673: LD_INT 1
70675: PLUS
70676: PPUSH
70677: LD_VAR 0 4
70681: PPUSH
70682: CALL_OW 266
70686: PPUSH
70687: CALL_OW 1
70691: ST_TO_ADDR
70692: GO 70655
70694: POP
70695: POP
// if not tmp then
70696: LD_VAR 0 5
70700: NOT
70701: IFFALSE 70705
// exit ;
70703: GO 70753
// if asc then
70705: LD_VAR 0 2
70709: IFFALSE 70733
// result := SortListByListAsc ( buildings , tmp ) else
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_VAR 0 1
70720: PPUSH
70721: LD_VAR 0 5
70725: PPUSH
70726: CALL_OW 76
70730: ST_TO_ADDR
70731: GO 70753
// result := SortListByListDesc ( buildings , tmp ) ;
70733: LD_ADDR_VAR 0 3
70737: PUSH
70738: LD_VAR 0 1
70742: PPUSH
70743: LD_VAR 0 5
70747: PPUSH
70748: CALL_OW 77
70752: ST_TO_ADDR
// end ;
70753: LD_VAR 0 3
70757: RET
// export function SortByClass ( units , class ) ; var un ; begin
70758: LD_INT 0
70760: PPUSH
70761: PPUSH
// if not units or not class then
70762: LD_VAR 0 1
70766: NOT
70767: IFTRUE 70776
70769: PUSH
70770: LD_VAR 0 2
70774: NOT
70775: OR
70776: IFFALSE 70780
// exit ;
70778: GO 70875
// result := [ ] ;
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: EMPTY
70786: ST_TO_ADDR
// for un in units do
70787: LD_ADDR_VAR 0 4
70791: PUSH
70792: LD_VAR 0 1
70796: PUSH
70797: FOR_IN
70798: IFFALSE 70873
// if GetClass ( un ) = class then
70800: LD_VAR 0 4
70804: PPUSH
70805: CALL_OW 257
70809: PUSH
70810: LD_VAR 0 2
70814: EQUAL
70815: IFFALSE 70842
// result := Insert ( result , 1 , un ) else
70817: LD_ADDR_VAR 0 3
70821: PUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_INT 1
70829: PPUSH
70830: LD_VAR 0 4
70834: PPUSH
70835: CALL_OW 2
70839: ST_TO_ADDR
70840: GO 70871
// result := Replace ( result , result + 1 , un ) ;
70842: LD_ADDR_VAR 0 3
70846: PUSH
70847: LD_VAR 0 3
70851: PPUSH
70852: LD_VAR 0 3
70856: PUSH
70857: LD_INT 1
70859: PLUS
70860: PPUSH
70861: LD_VAR 0 4
70865: PPUSH
70866: CALL_OW 1
70870: ST_TO_ADDR
70871: GO 70797
70873: POP
70874: POP
// end ;
70875: LD_VAR 0 3
70879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70880: LD_INT 0
70882: PPUSH
70883: PPUSH
70884: PPUSH
70885: PPUSH
70886: PPUSH
70887: PPUSH
70888: PPUSH
// result := [ ] ;
70889: LD_ADDR_VAR 0 4
70893: PUSH
70894: EMPTY
70895: ST_TO_ADDR
// if x - r < 0 then
70896: LD_VAR 0 1
70900: PUSH
70901: LD_VAR 0 3
70905: MINUS
70906: PUSH
70907: LD_INT 0
70909: LESS
70910: IFFALSE 70922
// min_x := 0 else
70912: LD_ADDR_VAR 0 8
70916: PUSH
70917: LD_INT 0
70919: ST_TO_ADDR
70920: GO 70938
// min_x := x - r ;
70922: LD_ADDR_VAR 0 8
70926: PUSH
70927: LD_VAR 0 1
70931: PUSH
70932: LD_VAR 0 3
70936: MINUS
70937: ST_TO_ADDR
// if y - r < 0 then
70938: LD_VAR 0 2
70942: PUSH
70943: LD_VAR 0 3
70947: MINUS
70948: PUSH
70949: LD_INT 0
70951: LESS
70952: IFFALSE 70964
// min_y := 0 else
70954: LD_ADDR_VAR 0 7
70958: PUSH
70959: LD_INT 0
70961: ST_TO_ADDR
70962: GO 70980
// min_y := y - r ;
70964: LD_ADDR_VAR 0 7
70968: PUSH
70969: LD_VAR 0 2
70973: PUSH
70974: LD_VAR 0 3
70978: MINUS
70979: ST_TO_ADDR
// max_x := x + r ;
70980: LD_ADDR_VAR 0 9
70984: PUSH
70985: LD_VAR 0 1
70989: PUSH
70990: LD_VAR 0 3
70994: PLUS
70995: ST_TO_ADDR
// max_y := y + r ;
70996: LD_ADDR_VAR 0 10
71000: PUSH
71001: LD_VAR 0 2
71005: PUSH
71006: LD_VAR 0 3
71010: PLUS
71011: ST_TO_ADDR
// for _x = min_x to max_x do
71012: LD_ADDR_VAR 0 5
71016: PUSH
71017: DOUBLE
71018: LD_VAR 0 8
71022: DEC
71023: ST_TO_ADDR
71024: LD_VAR 0 9
71028: PUSH
71029: FOR_TO
71030: IFFALSE 71131
// for _y = min_y to max_y do
71032: LD_ADDR_VAR 0 6
71036: PUSH
71037: DOUBLE
71038: LD_VAR 0 7
71042: DEC
71043: ST_TO_ADDR
71044: LD_VAR 0 10
71048: PUSH
71049: FOR_TO
71050: IFFALSE 71127
// begin if not ValidHex ( _x , _y ) then
71052: LD_VAR 0 5
71056: PPUSH
71057: LD_VAR 0 6
71061: PPUSH
71062: CALL_OW 488
71066: NOT
71067: IFFALSE 71071
// continue ;
71069: GO 71049
// if GetResourceTypeXY ( _x , _y ) then
71071: LD_VAR 0 5
71075: PPUSH
71076: LD_VAR 0 6
71080: PPUSH
71081: CALL_OW 283
71085: IFFALSE 71125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71087: LD_ADDR_VAR 0 4
71091: PUSH
71092: LD_VAR 0 4
71096: PPUSH
71097: LD_VAR 0 4
71101: PUSH
71102: LD_INT 1
71104: PLUS
71105: PPUSH
71106: LD_VAR 0 5
71110: PUSH
71111: LD_VAR 0 6
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PPUSH
71120: CALL_OW 1
71124: ST_TO_ADDR
// end ;
71125: GO 71049
71127: POP
71128: POP
71129: GO 71029
71131: POP
71132: POP
// end ;
71133: LD_VAR 0 4
71137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71138: LD_INT 0
71140: PPUSH
71141: PPUSH
71142: PPUSH
71143: PPUSH
71144: PPUSH
71145: PPUSH
71146: PPUSH
71147: PPUSH
// if not units then
71148: LD_VAR 0 1
71152: NOT
71153: IFFALSE 71157
// exit ;
71155: GO 71689
// result := UnitFilter ( units , [ f_ok ] ) ;
71157: LD_ADDR_VAR 0 3
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: LD_INT 50
71169: PUSH
71170: EMPTY
71171: LIST
71172: PPUSH
71173: CALL_OW 72
71177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71178: LD_ADDR_VAR 0 8
71182: PUSH
71183: LD_VAR 0 1
71187: PUSH
71188: LD_INT 1
71190: ARRAY
71191: PPUSH
71192: CALL_OW 255
71196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71197: LD_ADDR_VAR 0 10
71201: PUSH
71202: LD_INT 29
71204: PUSH
71205: LD_INT 91
71207: PUSH
71208: LD_INT 49
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: LIST
71215: ST_TO_ADDR
// if not result then
71216: LD_VAR 0 3
71220: NOT
71221: IFFALSE 71225
// exit ;
71223: GO 71689
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71225: LD_ADDR_VAR 0 5
71229: PUSH
71230: LD_INT 81
71232: PUSH
71233: LD_VAR 0 8
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PPUSH
71242: CALL_OW 69
71246: ST_TO_ADDR
// for i in result do
71247: LD_ADDR_VAR 0 4
71251: PUSH
71252: LD_VAR 0 3
71256: PUSH
71257: FOR_IN
71258: IFFALSE 71687
// begin tag := GetTag ( i ) + 1 ;
71260: LD_ADDR_VAR 0 9
71264: PUSH
71265: LD_VAR 0 4
71269: PPUSH
71270: CALL_OW 110
71274: PUSH
71275: LD_INT 1
71277: PLUS
71278: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71279: LD_ADDR_VAR 0 7
71283: PUSH
71284: LD_VAR 0 4
71288: PPUSH
71289: CALL_OW 250
71293: PPUSH
71294: LD_VAR 0 4
71298: PPUSH
71299: CALL_OW 251
71303: PPUSH
71304: LD_INT 4
71306: PPUSH
71307: CALL 70880 0 3
71311: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71312: LD_VAR 0 4
71316: PPUSH
71317: CALL_OW 247
71321: PUSH
71322: LD_INT 2
71324: EQUAL
71325: IFFALSE 71337
71327: PUSH
71328: LD_VAR 0 7
71332: PUSH
71333: LD_INT 2
71335: GREATER
71336: AND
71337: IFFALSE 71357
71339: PUSH
71340: LD_VAR 0 4
71344: PPUSH
71345: CALL_OW 264
71349: PUSH
71350: LD_VAR 0 10
71354: IN
71355: NOT
71356: AND
71357: IFFALSE 71396
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71359: LD_VAR 0 4
71363: PPUSH
71364: LD_VAR 0 7
71368: PUSH
71369: LD_INT 1
71371: ARRAY
71372: PUSH
71373: LD_INT 1
71375: ARRAY
71376: PPUSH
71377: LD_VAR 0 7
71381: PUSH
71382: LD_INT 1
71384: ARRAY
71385: PUSH
71386: LD_INT 2
71388: ARRAY
71389: PPUSH
71390: CALL_OW 116
71394: GO 71685
// if path > tag then
71396: LD_VAR 0 2
71400: PUSH
71401: LD_VAR 0 9
71405: GREATER
71406: IFFALSE 71614
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71408: LD_ADDR_VAR 0 6
71412: PUSH
71413: LD_VAR 0 5
71417: PPUSH
71418: LD_INT 91
71420: PUSH
71421: LD_VAR 0 4
71425: PUSH
71426: LD_INT 8
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: LIST
71433: PPUSH
71434: CALL_OW 72
71438: ST_TO_ADDR
// if nearEnemy then
71439: LD_VAR 0 6
71443: IFFALSE 71512
// begin if GetWeapon ( i ) = ru_time_lapser then
71445: LD_VAR 0 4
71449: PPUSH
71450: CALL_OW 264
71454: PUSH
71455: LD_INT 49
71457: EQUAL
71458: IFFALSE 71486
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71460: LD_VAR 0 4
71464: PPUSH
71465: LD_VAR 0 6
71469: PPUSH
71470: LD_VAR 0 4
71474: PPUSH
71475: CALL_OW 74
71479: PPUSH
71480: CALL_OW 112
71484: GO 71510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71486: LD_VAR 0 4
71490: PPUSH
71491: LD_VAR 0 6
71495: PPUSH
71496: LD_VAR 0 4
71500: PPUSH
71501: CALL_OW 74
71505: PPUSH
71506: CALL 72770 0 2
// end else
71510: GO 71612
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71512: LD_VAR 0 4
71516: PPUSH
71517: LD_VAR 0 2
71521: PUSH
71522: LD_VAR 0 9
71526: ARRAY
71527: PUSH
71528: LD_INT 1
71530: ARRAY
71531: PPUSH
71532: LD_VAR 0 2
71536: PUSH
71537: LD_VAR 0 9
71541: ARRAY
71542: PUSH
71543: LD_INT 2
71545: ARRAY
71546: PPUSH
71547: CALL_OW 297
71551: PUSH
71552: LD_INT 6
71554: GREATER
71555: IFFALSE 71598
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71557: LD_VAR 0 4
71561: PPUSH
71562: LD_VAR 0 2
71566: PUSH
71567: LD_VAR 0 9
71571: ARRAY
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PPUSH
71577: LD_VAR 0 2
71581: PUSH
71582: LD_VAR 0 9
71586: ARRAY
71587: PUSH
71588: LD_INT 2
71590: ARRAY
71591: PPUSH
71592: CALL_OW 114
71596: GO 71612
// SetTag ( i , tag ) ;
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 9
71607: PPUSH
71608: CALL_OW 109
// end else
71612: GO 71685
// if enemy then
71614: LD_VAR 0 5
71618: IFFALSE 71685
// begin if GetWeapon ( i ) = ru_time_lapser then
71620: LD_VAR 0 4
71624: PPUSH
71625: CALL_OW 264
71629: PUSH
71630: LD_INT 49
71632: EQUAL
71633: IFFALSE 71661
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71635: LD_VAR 0 4
71639: PPUSH
71640: LD_VAR 0 5
71644: PPUSH
71645: LD_VAR 0 4
71649: PPUSH
71650: CALL_OW 74
71654: PPUSH
71655: CALL_OW 112
71659: GO 71685
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71661: LD_VAR 0 4
71665: PPUSH
71666: LD_VAR 0 5
71670: PPUSH
71671: LD_VAR 0 4
71675: PPUSH
71676: CALL_OW 74
71680: PPUSH
71681: CALL 72770 0 2
// end ; end ;
71685: GO 71257
71687: POP
71688: POP
// end ;
71689: LD_VAR 0 3
71693: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71694: LD_INT 0
71696: PPUSH
71697: PPUSH
71698: PPUSH
// if not unit or IsInUnit ( unit ) then
71699: LD_VAR 0 1
71703: NOT
71704: IFTRUE 71717
71706: PUSH
71707: LD_VAR 0 1
71711: PPUSH
71712: CALL_OW 310
71716: OR
71717: IFFALSE 71721
// exit ;
71719: GO 71812
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71721: LD_ADDR_VAR 0 4
71725: PUSH
71726: LD_VAR 0 1
71730: PPUSH
71731: CALL_OW 250
71735: PPUSH
71736: LD_VAR 0 2
71740: PPUSH
71741: LD_INT 1
71743: PPUSH
71744: CALL_OW 272
71748: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71749: LD_ADDR_VAR 0 5
71753: PUSH
71754: LD_VAR 0 1
71758: PPUSH
71759: CALL_OW 251
71763: PPUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: LD_INT 1
71771: PPUSH
71772: CALL_OW 273
71776: ST_TO_ADDR
// if ValidHex ( x , y ) then
71777: LD_VAR 0 4
71781: PPUSH
71782: LD_VAR 0 5
71786: PPUSH
71787: CALL_OW 488
71791: IFFALSE 71812
// ComTurnXY ( unit , x , y ) ;
71793: LD_VAR 0 1
71797: PPUSH
71798: LD_VAR 0 4
71802: PPUSH
71803: LD_VAR 0 5
71807: PPUSH
71808: CALL_OW 118
// end ;
71812: LD_VAR 0 3
71816: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71817: LD_INT 0
71819: PPUSH
71820: PPUSH
// result := false ;
71821: LD_ADDR_VAR 0 3
71825: PUSH
71826: LD_INT 0
71828: ST_TO_ADDR
// if not units then
71829: LD_VAR 0 2
71833: NOT
71834: IFFALSE 71838
// exit ;
71836: GO 71883
// for i in units do
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_VAR 0 2
71847: PUSH
71848: FOR_IN
71849: IFFALSE 71881
// if See ( side , i ) then
71851: LD_VAR 0 1
71855: PPUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: CALL_OW 292
71865: IFFALSE 71879
// begin result := true ;
71867: LD_ADDR_VAR 0 3
71871: PUSH
71872: LD_INT 1
71874: ST_TO_ADDR
// exit ;
71875: POP
71876: POP
71877: GO 71883
// end ;
71879: GO 71848
71881: POP
71882: POP
// end ;
71883: LD_VAR 0 3
71887: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71888: LD_INT 0
71890: PPUSH
71891: PPUSH
71892: PPUSH
71893: PPUSH
// if not unit or not points then
71894: LD_VAR 0 1
71898: NOT
71899: IFTRUE 71908
71901: PUSH
71902: LD_VAR 0 2
71906: NOT
71907: OR
71908: IFFALSE 71912
// exit ;
71910: GO 72002
// dist := 99999 ;
71912: LD_ADDR_VAR 0 5
71916: PUSH
71917: LD_INT 99999
71919: ST_TO_ADDR
// for i in points do
71920: LD_ADDR_VAR 0 4
71924: PUSH
71925: LD_VAR 0 2
71929: PUSH
71930: FOR_IN
71931: IFFALSE 72000
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71933: LD_ADDR_VAR 0 6
71937: PUSH
71938: LD_VAR 0 1
71942: PPUSH
71943: LD_VAR 0 4
71947: PUSH
71948: LD_INT 1
71950: ARRAY
71951: PPUSH
71952: LD_VAR 0 4
71956: PUSH
71957: LD_INT 2
71959: ARRAY
71960: PPUSH
71961: CALL_OW 297
71965: ST_TO_ADDR
// if tmpDist < dist then
71966: LD_VAR 0 6
71970: PUSH
71971: LD_VAR 0 5
71975: LESS
71976: IFFALSE 71998
// begin result := i ;
71978: LD_ADDR_VAR 0 3
71982: PUSH
71983: LD_VAR 0 4
71987: ST_TO_ADDR
// dist := tmpDist ;
71988: LD_ADDR_VAR 0 5
71992: PUSH
71993: LD_VAR 0 6
71997: ST_TO_ADDR
// end ; end ;
71998: GO 71930
72000: POP
72001: POP
// end ;
72002: LD_VAR 0 3
72006: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72007: LD_INT 0
72009: PPUSH
// uc_side := side ;
72010: LD_ADDR_OWVAR 20
72014: PUSH
72015: LD_VAR 0 1
72019: ST_TO_ADDR
// uc_nation := 3 ;
72020: LD_ADDR_OWVAR 21
72024: PUSH
72025: LD_INT 3
72027: ST_TO_ADDR
// vc_chassis := 25 ;
72028: LD_ADDR_OWVAR 37
72032: PUSH
72033: LD_INT 25
72035: ST_TO_ADDR
// vc_engine := engine_siberite ;
72036: LD_ADDR_OWVAR 39
72040: PUSH
72041: LD_INT 3
72043: ST_TO_ADDR
// vc_control := control_computer ;
72044: LD_ADDR_OWVAR 38
72048: PUSH
72049: LD_INT 3
72051: ST_TO_ADDR
// vc_weapon := 59 ;
72052: LD_ADDR_OWVAR 40
72056: PUSH
72057: LD_INT 59
72059: ST_TO_ADDR
// result := CreateVehicle ;
72060: LD_ADDR_VAR 0 5
72064: PUSH
72065: CALL_OW 45
72069: ST_TO_ADDR
// SetDir ( result , d ) ;
72070: LD_VAR 0 5
72074: PPUSH
72075: LD_VAR 0 4
72079: PPUSH
72080: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72084: LD_VAR 0 5
72088: PPUSH
72089: LD_VAR 0 2
72093: PPUSH
72094: LD_VAR 0 3
72098: PPUSH
72099: LD_INT 0
72101: PPUSH
72102: CALL_OW 48
// end ;
72106: LD_VAR 0 5
72110: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72111: LD_INT 0
72113: PPUSH
72114: PPUSH
72115: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72116: LD_ADDR_VAR 0 2
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: LD_INT 0
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72139: LD_VAR 0 1
72143: NOT
72144: IFTRUE 72177
72146: PUSH
72147: LD_VAR 0 1
72151: PPUSH
72152: CALL_OW 264
72156: PUSH
72157: LD_INT 12
72159: PUSH
72160: LD_INT 51
72162: PUSH
72163: LD_INT 32
72165: PUSH
72166: LD_INT 89
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: IN
72175: NOT
72176: OR
72177: IFFALSE 72181
// exit ;
72179: GO 72279
// for i := 1 to 3 do
72181: LD_ADDR_VAR 0 3
72185: PUSH
72186: DOUBLE
72187: LD_INT 1
72189: DEC
72190: ST_TO_ADDR
72191: LD_INT 3
72193: PUSH
72194: FOR_TO
72195: IFFALSE 72277
// begin tmp := GetCargo ( cargo , i ) ;
72197: LD_ADDR_VAR 0 4
72201: PUSH
72202: LD_VAR 0 1
72206: PPUSH
72207: LD_VAR 0 3
72211: PPUSH
72212: CALL_OW 289
72216: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72217: LD_ADDR_VAR 0 2
72221: PUSH
72222: LD_VAR 0 2
72226: PPUSH
72227: LD_VAR 0 3
72231: PPUSH
72232: LD_VAR 0 4
72236: PPUSH
72237: CALL_OW 1
72241: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72242: LD_ADDR_VAR 0 2
72246: PUSH
72247: LD_VAR 0 2
72251: PPUSH
72252: LD_INT 4
72254: PPUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 4
72262: ARRAY
72263: PUSH
72264: LD_VAR 0 4
72268: PLUS
72269: PPUSH
72270: CALL_OW 1
72274: ST_TO_ADDR
// end ;
72275: GO 72194
72277: POP
72278: POP
// end ;
72279: LD_VAR 0 2
72283: RET
// export function Length ( array ) ; begin
72284: LD_INT 0
72286: PPUSH
// result := array + 0 ;
72287: LD_ADDR_VAR 0 2
72291: PUSH
72292: LD_VAR 0 1
72296: PUSH
72297: LD_INT 0
72299: PLUS
72300: ST_TO_ADDR
// end ;
72301: LD_VAR 0 2
72305: RET
// export function PrepareArray ( array ) ; begin
72306: LD_INT 0
72308: PPUSH
// result := array diff 0 ;
72309: LD_ADDR_VAR 0 2
72313: PUSH
72314: LD_VAR 0 1
72318: PUSH
72319: LD_INT 0
72321: DIFF
72322: ST_TO_ADDR
// if not result [ 1 ] then
72323: LD_VAR 0 2
72327: PUSH
72328: LD_INT 1
72330: ARRAY
72331: NOT
72332: IFFALSE 72352
// result := Delete ( result , 1 ) ;
72334: LD_ADDR_VAR 0 2
72338: PUSH
72339: LD_VAR 0 2
72343: PPUSH
72344: LD_INT 1
72346: PPUSH
72347: CALL_OW 3
72351: ST_TO_ADDR
// end ;
72352: LD_VAR 0 2
72356: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72357: LD_INT 0
72359: PPUSH
72360: PPUSH
72361: PPUSH
72362: PPUSH
// sibRocketRange := 25 ;
72363: LD_ADDR_VAR 0 6
72367: PUSH
72368: LD_INT 25
72370: ST_TO_ADDR
// result := false ;
72371: LD_ADDR_VAR 0 4
72375: PUSH
72376: LD_INT 0
72378: ST_TO_ADDR
// for i := 0 to 5 do
72379: LD_ADDR_VAR 0 5
72383: PUSH
72384: DOUBLE
72385: LD_INT 0
72387: DEC
72388: ST_TO_ADDR
72389: LD_INT 5
72391: PUSH
72392: FOR_TO
72393: IFFALSE 72460
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72395: LD_VAR 0 1
72399: PPUSH
72400: LD_VAR 0 5
72404: PPUSH
72405: LD_VAR 0 6
72409: PPUSH
72410: CALL_OW 272
72414: PPUSH
72415: LD_VAR 0 2
72419: PPUSH
72420: LD_VAR 0 5
72424: PPUSH
72425: LD_VAR 0 6
72429: PPUSH
72430: CALL_OW 273
72434: PPUSH
72435: LD_VAR 0 3
72439: PPUSH
72440: CALL_OW 309
72444: IFFALSE 72458
// begin result := true ;
72446: LD_ADDR_VAR 0 4
72450: PUSH
72451: LD_INT 1
72453: ST_TO_ADDR
// exit ;
72454: POP
72455: POP
72456: GO 72462
// end ;
72458: GO 72392
72460: POP
72461: POP
// end ;
72462: LD_VAR 0 4
72466: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72467: LD_INT 0
72469: PPUSH
72470: PPUSH
72471: PPUSH
// if btype = b_depot then
72472: LD_VAR 0 2
72476: PUSH
72477: LD_INT 0
72479: EQUAL
72480: IFFALSE 72492
// begin result := true ;
72482: LD_ADDR_VAR 0 3
72486: PUSH
72487: LD_INT 1
72489: ST_TO_ADDR
// exit ;
72490: GO 72612
// end ; pom := GetBase ( depot ) ;
72492: LD_ADDR_VAR 0 4
72496: PUSH
72497: LD_VAR 0 1
72501: PPUSH
72502: CALL_OW 274
72506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72507: LD_ADDR_VAR 0 5
72511: PUSH
72512: LD_VAR 0 2
72516: PPUSH
72517: LD_VAR 0 1
72521: PPUSH
72522: CALL_OW 248
72526: PPUSH
72527: CALL_OW 450
72531: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72532: LD_ADDR_VAR 0 3
72536: PUSH
72537: LD_VAR 0 4
72541: PPUSH
72542: LD_INT 1
72544: PPUSH
72545: CALL_OW 275
72549: PUSH
72550: LD_VAR 0 5
72554: PUSH
72555: LD_INT 1
72557: ARRAY
72558: GREATEREQUAL
72559: IFFALSE 72585
72561: PUSH
72562: LD_VAR 0 4
72566: PPUSH
72567: LD_INT 2
72569: PPUSH
72570: CALL_OW 275
72574: PUSH
72575: LD_VAR 0 5
72579: PUSH
72580: LD_INT 2
72582: ARRAY
72583: GREATEREQUAL
72584: AND
72585: IFFALSE 72611
72587: PUSH
72588: LD_VAR 0 4
72592: PPUSH
72593: LD_INT 3
72595: PPUSH
72596: CALL_OW 275
72600: PUSH
72601: LD_VAR 0 5
72605: PUSH
72606: LD_INT 3
72608: ARRAY
72609: GREATEREQUAL
72610: AND
72611: ST_TO_ADDR
// end ;
72612: LD_VAR 0 3
72616: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72617: LD_INT 0
72619: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_VAR 0 2
72629: PPUSH
72630: LD_INT 0
72632: PPUSH
72633: LD_INT 0
72635: PPUSH
72636: LD_INT 1
72638: PPUSH
72639: LD_INT 0
72641: PPUSH
72642: CALL_OW 587
// end ;
72646: LD_VAR 0 3
72650: RET
// export function CenterOnNow ( unit ) ; begin
72651: LD_INT 0
72653: PPUSH
// result := IsInUnit ( unit ) ;
72654: LD_ADDR_VAR 0 2
72658: PUSH
72659: LD_VAR 0 1
72663: PPUSH
72664: CALL_OW 310
72668: ST_TO_ADDR
// if not result then
72669: LD_VAR 0 2
72673: NOT
72674: IFFALSE 72686
// result := unit ;
72676: LD_ADDR_VAR 0 2
72680: PUSH
72681: LD_VAR 0 1
72685: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72686: LD_VAR 0 1
72690: PPUSH
72691: CALL_OW 87
// end ;
72695: LD_VAR 0 2
72699: RET
// export function ComMoveHex ( unit , hex ) ; begin
72700: LD_INT 0
72702: PPUSH
// if not hex then
72703: LD_VAR 0 2
72707: NOT
72708: IFFALSE 72712
// exit ;
72710: GO 72765
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72712: LD_VAR 0 2
72716: PUSH
72717: LD_INT 1
72719: ARRAY
72720: PPUSH
72721: LD_VAR 0 2
72725: PUSH
72726: LD_INT 2
72728: ARRAY
72729: PPUSH
72730: CALL_OW 428
72734: IFFALSE 72738
// exit ;
72736: GO 72765
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72738: LD_VAR 0 1
72742: PPUSH
72743: LD_VAR 0 2
72747: PUSH
72748: LD_INT 1
72750: ARRAY
72751: PPUSH
72752: LD_VAR 0 2
72756: PUSH
72757: LD_INT 2
72759: ARRAY
72760: PPUSH
72761: CALL_OW 111
// end ;
72765: LD_VAR 0 3
72769: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72770: LD_INT 0
72772: PPUSH
72773: PPUSH
72774: PPUSH
// if not unit or not enemy then
72775: LD_VAR 0 1
72779: NOT
72780: IFTRUE 72789
72782: PUSH
72783: LD_VAR 0 2
72787: NOT
72788: OR
72789: IFFALSE 72793
// exit ;
72791: GO 72919
// x := GetX ( enemy ) ;
72793: LD_ADDR_VAR 0 4
72797: PUSH
72798: LD_VAR 0 2
72802: PPUSH
72803: CALL_OW 250
72807: ST_TO_ADDR
// y := GetY ( enemy ) ;
72808: LD_ADDR_VAR 0 5
72812: PUSH
72813: LD_VAR 0 2
72817: PPUSH
72818: CALL_OW 251
72822: ST_TO_ADDR
// if ValidHex ( x , y ) then
72823: LD_VAR 0 4
72827: PPUSH
72828: LD_VAR 0 5
72832: PPUSH
72833: CALL_OW 488
72837: IFFALSE 72919
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72839: LD_VAR 0 2
72843: PPUSH
72844: CALL_OW 247
72848: PUSH
72849: LD_INT 3
72851: PUSH
72852: LD_INT 2
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: IN
72859: IFTRUE 72882
72861: PUSH
72862: LD_VAR 0 1
72866: PPUSH
72867: CALL_OW 255
72871: PPUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: CALL_OW 292
72881: OR
72882: IFFALSE 72900
// ComAttackUnit ( unit , enemy ) else
72884: LD_VAR 0 1
72888: PPUSH
72889: LD_VAR 0 2
72893: PPUSH
72894: CALL_OW 115
72898: GO 72919
// ComAgressiveMove ( unit , x , y ) ;
72900: LD_VAR 0 1
72904: PPUSH
72905: LD_VAR 0 4
72909: PPUSH
72910: LD_VAR 0 5
72914: PPUSH
72915: CALL_OW 114
// end ;
72919: LD_VAR 0 3
72923: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72924: LD_INT 0
72926: PPUSH
72927: PPUSH
72928: PPUSH
// list := AreaToList ( area , 0 ) ;
72929: LD_ADDR_VAR 0 5
72933: PUSH
72934: LD_VAR 0 1
72938: PPUSH
72939: LD_INT 0
72941: PPUSH
72942: CALL_OW 517
72946: ST_TO_ADDR
// if not list then
72947: LD_VAR 0 5
72951: NOT
72952: IFFALSE 72956
// exit ;
72954: GO 73086
// if all then
72956: LD_VAR 0 2
72960: IFFALSE 73048
// begin for i := 1 to list [ 1 ] do
72962: LD_ADDR_VAR 0 4
72966: PUSH
72967: DOUBLE
72968: LD_INT 1
72970: DEC
72971: ST_TO_ADDR
72972: LD_VAR 0 5
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PUSH
72981: FOR_TO
72982: IFFALSE 73044
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72984: LD_ADDR_VAR 0 3
72988: PUSH
72989: LD_VAR 0 3
72993: PPUSH
72994: LD_VAR 0 3
72998: PUSH
72999: LD_INT 1
73001: PLUS
73002: PPUSH
73003: LD_VAR 0 5
73007: PUSH
73008: LD_INT 1
73010: ARRAY
73011: PUSH
73012: LD_VAR 0 4
73016: ARRAY
73017: PUSH
73018: LD_VAR 0 5
73022: PUSH
73023: LD_INT 2
73025: ARRAY
73026: PUSH
73027: LD_VAR 0 4
73031: ARRAY
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PPUSH
73037: CALL_OW 1
73041: ST_TO_ADDR
73042: GO 72981
73044: POP
73045: POP
// exit ;
73046: GO 73086
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73048: LD_ADDR_VAR 0 3
73052: PUSH
73053: LD_VAR 0 5
73057: PUSH
73058: LD_INT 1
73060: ARRAY
73061: PUSH
73062: LD_INT 1
73064: ARRAY
73065: PUSH
73066: LD_VAR 0 5
73070: PUSH
73071: LD_INT 2
73073: ARRAY
73074: PUSH
73075: LD_INT 1
73077: ARRAY
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: ST_TO_ADDR
// end ;
73086: LD_VAR 0 3
73090: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73091: LD_INT 0
73093: PPUSH
73094: PPUSH
// list := AreaToList ( area , 0 ) ;
73095: LD_ADDR_VAR 0 4
73099: PUSH
73100: LD_VAR 0 1
73104: PPUSH
73105: LD_INT 0
73107: PPUSH
73108: CALL_OW 517
73112: ST_TO_ADDR
// if not list then
73113: LD_VAR 0 4
73117: NOT
73118: IFFALSE 73122
// exit ;
73120: GO 73163
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73122: LD_ADDR_VAR 0 3
73126: PUSH
73127: LD_VAR 0 4
73131: PUSH
73132: LD_INT 1
73134: ARRAY
73135: PUSH
73136: LD_INT 1
73138: ARRAY
73139: PUSH
73140: LD_VAR 0 4
73144: PUSH
73145: LD_INT 2
73147: ARRAY
73148: PUSH
73149: LD_INT 1
73151: ARRAY
73152: PUSH
73153: LD_VAR 0 2
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: ST_TO_ADDR
// end ;
73163: LD_VAR 0 3
73167: RET
// export function First ( array ) ; begin
73168: LD_INT 0
73170: PPUSH
// if not array then
73171: LD_VAR 0 1
73175: NOT
73176: IFFALSE 73180
// exit ;
73178: GO 73194
// result := array [ 1 ] ;
73180: LD_ADDR_VAR 0 2
73184: PUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_INT 1
73192: ARRAY
73193: ST_TO_ADDR
// end ;
73194: LD_VAR 0 2
73198: RET
// export function Last ( array ) ; begin
73199: LD_INT 0
73201: PPUSH
// if not array then
73202: LD_VAR 0 1
73206: NOT
73207: IFFALSE 73211
// exit ;
73209: GO 73227
// result := array [ array ] ;
73211: LD_ADDR_VAR 0 2
73215: PUSH
73216: LD_VAR 0 1
73220: PUSH
73221: LD_VAR 0 1
73225: ARRAY
73226: ST_TO_ADDR
// end ;
73227: LD_VAR 0 2
73231: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73232: LD_INT 0
73234: PPUSH
73235: PPUSH
// result := [ ] ;
73236: LD_ADDR_VAR 0 5
73240: PUSH
73241: EMPTY
73242: ST_TO_ADDR
// if not array then
73243: LD_VAR 0 1
73247: NOT
73248: IFFALSE 73252
// exit ;
73250: GO 73364
// for i := 1 to array do
73252: LD_ADDR_VAR 0 6
73256: PUSH
73257: DOUBLE
73258: LD_INT 1
73260: DEC
73261: ST_TO_ADDR
73262: LD_VAR 0 1
73266: PUSH
73267: FOR_TO
73268: IFFALSE 73362
// if array [ i ] [ index ] = value then
73270: LD_VAR 0 1
73274: PUSH
73275: LD_VAR 0 6
73279: ARRAY
73280: PUSH
73281: LD_VAR 0 2
73285: ARRAY
73286: PUSH
73287: LD_VAR 0 3
73291: EQUAL
73292: IFFALSE 73360
// begin if indexColumn then
73294: LD_VAR 0 4
73298: IFFALSE 73334
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73300: LD_ADDR_VAR 0 5
73304: PUSH
73305: LD_VAR 0 5
73309: PPUSH
73310: LD_VAR 0 1
73314: PUSH
73315: LD_VAR 0 6
73319: ARRAY
73320: PUSH
73321: LD_VAR 0 4
73325: ARRAY
73326: PPUSH
73327: CALL 68372 0 2
73331: ST_TO_ADDR
73332: GO 73360
// result := Join ( result , array [ i ] ) ;
73334: LD_ADDR_VAR 0 5
73338: PUSH
73339: LD_VAR 0 5
73343: PPUSH
73344: LD_VAR 0 1
73348: PUSH
73349: LD_VAR 0 6
73353: ARRAY
73354: PPUSH
73355: CALL 68372 0 2
73359: ST_TO_ADDR
// end ;
73360: GO 73267
73362: POP
73363: POP
// end ;
73364: LD_VAR 0 5
73368: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73369: LD_INT 0
73371: PPUSH
// if not vehicles or not parkingPoint then
73372: LD_VAR 0 1
73376: NOT
73377: IFTRUE 73386
73379: PUSH
73380: LD_VAR 0 2
73384: NOT
73385: OR
73386: IFFALSE 73390
// exit ;
73388: GO 73488
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73390: LD_ADDR_VAR 0 1
73394: PUSH
73395: LD_VAR 0 1
73399: PPUSH
73400: LD_INT 50
73402: PUSH
73403: EMPTY
73404: LIST
73405: PUSH
73406: LD_INT 3
73408: PUSH
73409: LD_INT 92
73411: PUSH
73412: LD_VAR 0 2
73416: PUSH
73417: LD_INT 1
73419: ARRAY
73420: PUSH
73421: LD_VAR 0 2
73425: PUSH
73426: LD_INT 2
73428: ARRAY
73429: PUSH
73430: LD_INT 8
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PPUSH
73447: CALL_OW 72
73451: ST_TO_ADDR
// if not vehicles then
73452: LD_VAR 0 1
73456: NOT
73457: IFFALSE 73461
// exit ;
73459: GO 73488
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73461: LD_VAR 0 1
73465: PPUSH
73466: LD_VAR 0 2
73470: PUSH
73471: LD_INT 1
73473: ARRAY
73474: PPUSH
73475: LD_VAR 0 2
73479: PUSH
73480: LD_INT 2
73482: ARRAY
73483: PPUSH
73484: CALL_OW 111
// end ;
73488: LD_VAR 0 3
73492: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73493: LD_INT 0
73495: PPUSH
73496: PPUSH
73497: PPUSH
// if not side or not area then
73498: LD_VAR 0 1
73502: NOT
73503: IFTRUE 73512
73505: PUSH
73506: LD_VAR 0 2
73510: NOT
73511: OR
73512: IFFALSE 73516
// exit ;
73514: GO 73635
// tmp := AreaToList ( area , 0 ) ;
73516: LD_ADDR_VAR 0 5
73520: PUSH
73521: LD_VAR 0 2
73525: PPUSH
73526: LD_INT 0
73528: PPUSH
73529: CALL_OW 517
73533: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73534: LD_ADDR_VAR 0 4
73538: PUSH
73539: DOUBLE
73540: LD_INT 1
73542: DEC
73543: ST_TO_ADDR
73544: LD_VAR 0 5
73548: PUSH
73549: LD_INT 1
73551: ARRAY
73552: PUSH
73553: FOR_TO
73554: IFFALSE 73633
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73556: LD_VAR 0 5
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PUSH
73565: LD_VAR 0 4
73569: ARRAY
73570: PPUSH
73571: LD_VAR 0 5
73575: PUSH
73576: LD_INT 2
73578: ARRAY
73579: PUSH
73580: LD_VAR 0 4
73584: ARRAY
73585: PPUSH
73586: CALL_OW 351
73590: IFFALSE 73631
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73592: LD_VAR 0 5
73596: PUSH
73597: LD_INT 1
73599: ARRAY
73600: PUSH
73601: LD_VAR 0 4
73605: ARRAY
73606: PPUSH
73607: LD_VAR 0 5
73611: PUSH
73612: LD_INT 2
73614: ARRAY
73615: PUSH
73616: LD_VAR 0 4
73620: ARRAY
73621: PPUSH
73622: LD_VAR 0 1
73626: PPUSH
73627: CALL_OW 244
// end ;
73631: GO 73553
73633: POP
73634: POP
// end ;
73635: LD_VAR 0 3
73639: RET
// export function UniqueArray ( array ) ; var i ; begin
73640: LD_INT 0
73642: PPUSH
73643: PPUSH
// result := [ ] ;
73644: LD_ADDR_VAR 0 2
73648: PUSH
73649: EMPTY
73650: ST_TO_ADDR
// if not array then
73651: LD_VAR 0 1
73655: NOT
73656: IFFALSE 73660
// exit ;
73658: GO 73721
// for i := 1 to array do
73660: LD_ADDR_VAR 0 3
73664: PUSH
73665: DOUBLE
73666: LD_INT 1
73668: DEC
73669: ST_TO_ADDR
73670: LD_VAR 0 1
73674: PUSH
73675: FOR_TO
73676: IFFALSE 73719
// if not array [ i ] in result then
73678: LD_VAR 0 1
73682: PUSH
73683: LD_VAR 0 3
73687: ARRAY
73688: PUSH
73689: LD_VAR 0 2
73693: IN
73694: NOT
73695: IFFALSE 73717
// result := Join ( result , i ) ;
73697: LD_ADDR_VAR 0 2
73701: PUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: LD_VAR 0 3
73711: PPUSH
73712: CALL 68372 0 2
73716: ST_TO_ADDR
73717: GO 73675
73719: POP
73720: POP
// end ; end_of_file
73721: LD_VAR 0 2
73725: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
73726: PPOPN 6
73728: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73729: LD_INT 0
73731: PPUSH
// begin if not units then
73732: LD_VAR 0 1
73736: NOT
73737: IFFALSE 73741
// exit ;
73739: GO 73775
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73741: LD_VAR 0 1
73745: PPUSH
73746: LD_VAR 0 2
73750: PPUSH
73751: LD_VAR 0 3
73755: PPUSH
73756: LD_VAR 0 4
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: LD_VAR 0 6
73770: PPUSH
73771: CALL 30145 0 6
// end ;
73775: PPOPN 7
73777: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
73778: LD_EXP 30
73782: PUSH
73783: LD_INT 4
73785: EQUAL
73786: IFFALSE 73822
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73788: LD_STRING setGameDifficulty(
73790: PUSH
73791: LD_OWVAR 67
73795: STR
73796: PUSH
73797: LD_STRING )
73799: STR
73800: PPUSH
73801: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73805: LD_STRING displayDifficulty(
73807: PUSH
73808: LD_OWVAR 67
73812: STR
73813: PUSH
73814: LD_STRING )
73816: STR
73817: PPUSH
73818: CALL_OW 559
// end ; SOS_MapStart ( ) ;
73822: CALL 73851 0 0
// end ; end_of_file
73826: PPOPN 1
73828: END
// every 0 0$1 do
73829: GO 73831
73831: DISABLE
// begin enable ;
73832: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73833: LD_STRING updateTimer(
73835: PUSH
73836: LD_OWVAR 1
73840: STR
73841: PUSH
73842: LD_STRING );
73844: STR
73845: PPUSH
73846: CALL_OW 559
// end ;
73850: END
// export function SOS_MapStart ( ) ; begin
73851: LD_INT 0
73853: PPUSH
// UpdateFactoryWaypoints ( ) ;
73854: CALL 74785 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73858: CALL 75037 0 0
// ParseMultiDataToLua ( ) ;
73862: CALL 75184 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
73866: LD_STRING setSpecLogoNumber(
73868: PUSH
73869: LD_INT 2
73871: STR
73872: PUSH
73873: LD_STRING ,
73875: STR
73876: PUSH
73877: LD_INT 1
73879: STR
73880: PUSH
73881: LD_STRING )
73883: STR
73884: PPUSH
73885: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
73889: LD_STRING setSpecLogoNumber(
73891: PUSH
73892: LD_INT 3
73894: STR
73895: PUSH
73896: LD_STRING ,
73898: STR
73899: PUSH
73900: LD_INT 2
73902: STR
73903: PUSH
73904: LD_STRING )
73906: STR
73907: PPUSH
73908: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
73912: LD_STRING setSpecLogoNumber(
73914: PUSH
73915: LD_INT 4
73917: STR
73918: PUSH
73919: LD_STRING ,
73921: STR
73922: PUSH
73923: LD_INT 3
73925: STR
73926: PUSH
73927: LD_STRING )
73929: STR
73930: PPUSH
73931: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
73935: LD_STRING setSpecLogoNumber(
73937: PUSH
73938: LD_INT 5
73940: STR
73941: PUSH
73942: LD_STRING ,
73944: STR
73945: PUSH
73946: LD_INT 4
73948: STR
73949: PUSH
73950: LD_STRING )
73952: STR
73953: PPUSH
73954: CALL_OW 559
// end ;
73958: LD_VAR 0 1
73962: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
73963: LD_INT 0
73965: PPUSH
73966: PPUSH
73967: PPUSH
73968: PPUSH
73969: PPUSH
73970: PPUSH
73971: PPUSH
73972: PPUSH
73973: PPUSH
// for i := 1 to 8 do
73974: LD_ADDR_VAR 0 2
73978: PUSH
73979: DOUBLE
73980: LD_INT 1
73982: DEC
73983: ST_TO_ADDR
73984: LD_INT 8
73986: PUSH
73987: FOR_TO
73988: IFFALSE 74373
// begin if mpSidePositions [ i ] then
73990: LD_EXP 31
73994: PUSH
73995: LD_VAR 0 2
73999: ARRAY
74000: IFFALSE 74371
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
74002: LD_ADDR_VAR 0 7
74006: PUSH
74007: LD_INT 22
74009: PUSH
74010: LD_VAR 0 2
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 21
74021: PUSH
74022: LD_INT 1
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PPUSH
74033: CALL_OW 69
74037: PPUSH
74038: CALL 32396 0 1
74042: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74043: LD_ADDR_VAR 0 9
74047: PUSH
74048: LD_INT 22
74050: PUSH
74051: LD_VAR 0 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 2
74062: PUSH
74063: LD_INT 30
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 30
74075: PUSH
74076: LD_INT 1
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: LIST
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PPUSH
74092: CALL_OW 69
74096: ST_TO_ADDR
// crates := 0 ;
74097: LD_ADDR_VAR 0 4
74101: PUSH
74102: LD_INT 0
74104: ST_TO_ADDR
// oil := 0 ;
74105: LD_ADDR_VAR 0 5
74109: PUSH
74110: LD_INT 0
74112: ST_TO_ADDR
// sib := 0 ;
74113: LD_ADDR_VAR 0 6
74117: PUSH
74118: LD_INT 0
74120: ST_TO_ADDR
// if bases then
74121: LD_VAR 0 9
74125: IFFALSE 74231
// begin for j in bases do
74127: LD_ADDR_VAR 0 3
74131: PUSH
74132: LD_VAR 0 9
74136: PUSH
74137: FOR_IN
74138: IFFALSE 74229
// begin base := GetBase ( j ) ;
74140: LD_ADDR_VAR 0 8
74144: PUSH
74145: LD_VAR 0 3
74149: PPUSH
74150: CALL_OW 274
74154: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
74155: LD_ADDR_VAR 0 4
74159: PUSH
74160: LD_VAR 0 4
74164: PUSH
74165: LD_VAR 0 8
74169: PPUSH
74170: LD_INT 1
74172: PPUSH
74173: CALL_OW 275
74177: PLUS
74178: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
74179: LD_ADDR_VAR 0 5
74183: PUSH
74184: LD_VAR 0 5
74188: PUSH
74189: LD_VAR 0 8
74193: PPUSH
74194: LD_INT 2
74196: PPUSH
74197: CALL_OW 275
74201: PLUS
74202: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
74203: LD_ADDR_VAR 0 6
74207: PUSH
74208: LD_VAR 0 6
74212: PUSH
74213: LD_VAR 0 8
74217: PPUSH
74218: LD_INT 3
74220: PPUSH
74221: CALL_OW 275
74225: PLUS
74226: ST_TO_ADDR
// end ;
74227: GO 74137
74229: POP
74230: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
74231: LD_STRING setSpecText(
74233: PUSH
74234: LD_VAR 0 2
74238: STR
74239: PUSH
74240: LD_STRING ,
74242: STR
74243: PUSH
74244: LD_INT 2
74246: STR
74247: PUSH
74248: LD_STRING ,
74250: STR
74251: PUSH
74252: LD_VAR 0 4
74256: STR
74257: PUSH
74258: LD_STRING )
74260: STR
74261: PPUSH
74262: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
74266: LD_STRING setSpecText(
74268: PUSH
74269: LD_VAR 0 2
74273: STR
74274: PUSH
74275: LD_STRING ,
74277: STR
74278: PUSH
74279: LD_INT 3
74281: STR
74282: PUSH
74283: LD_STRING ,
74285: STR
74286: PUSH
74287: LD_VAR 0 5
74291: STR
74292: PUSH
74293: LD_STRING )
74295: STR
74296: PPUSH
74297: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
74301: LD_STRING setSpecText(
74303: PUSH
74304: LD_VAR 0 2
74308: STR
74309: PUSH
74310: LD_STRING ,
74312: STR
74313: PUSH
74314: LD_INT 4
74316: STR
74317: PUSH
74318: LD_STRING ,
74320: STR
74321: PUSH
74322: LD_VAR 0 6
74326: STR
74327: PUSH
74328: LD_STRING )
74330: STR
74331: PPUSH
74332: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
74336: LD_STRING setSpecText(
74338: PUSH
74339: LD_VAR 0 2
74343: STR
74344: PUSH
74345: LD_STRING ,
74347: STR
74348: PUSH
74349: LD_INT 5
74351: STR
74352: PUSH
74353: LD_STRING ,
74355: STR
74356: PUSH
74357: LD_VAR 0 7
74361: STR
74362: PUSH
74363: LD_STRING )
74365: STR
74366: PPUSH
74367: CALL_OW 559
// end ; end ;
74371: GO 73987
74373: POP
74374: POP
// end ;
74375: LD_VAR 0 1
74379: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
74380: LD_INT 2
74382: PUSH
74383: LD_INT 30
74385: PUSH
74386: LD_INT 0
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 30
74395: PUSH
74396: LD_INT 1
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: PPUSH
74408: CALL_OW 69
74412: IFFALSE 74422
74414: GO 74416
74416: DISABLE
// begin enable ;
74417: ENABLE
// UpdateSpectatorBar ;
74418: CALL 73963 0 0
// end ;
74422: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74423: LD_INT 0
74425: PPUSH
// end ;
74426: LD_VAR 0 12
74430: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74431: LD_INT 0
74433: PPUSH
74434: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74435: LD_VAR 0 1
74439: NOT
74440: IFTRUE 74459
74442: PUSH
74443: LD_VAR 0 2
74447: PPUSH
74448: LD_VAR 0 3
74452: PPUSH
74453: CALL_OW 488
74457: NOT
74458: OR
74459: IFTRUE 74494
74461: PUSH
74462: LD_VAR 0 1
74466: PPUSH
74467: CALL_OW 266
74471: PUSH
74472: LD_INT 3
74474: NONEQUAL
74475: IFFALSE 74493
74477: PUSH
74478: LD_VAR 0 1
74482: PPUSH
74483: CALL_OW 247
74487: PUSH
74488: LD_INT 1
74490: EQUAL
74491: NOT
74492: AND
74493: OR
74494: IFFALSE 74498
// exit ;
74496: GO 74780
// if GetType ( factory ) = unit_human then
74498: LD_VAR 0 1
74502: PPUSH
74503: CALL_OW 247
74507: PUSH
74508: LD_INT 1
74510: EQUAL
74511: IFFALSE 74528
// factory := IsInUnit ( factory ) ;
74513: LD_ADDR_VAR 0 1
74517: PUSH
74518: LD_VAR 0 1
74522: PPUSH
74523: CALL_OW 310
74527: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74528: LD_VAR 0 1
74532: PPUSH
74533: CALL_OW 266
74537: PUSH
74538: LD_INT 3
74540: NONEQUAL
74541: IFFALSE 74545
// exit ;
74543: GO 74780
// for i := 1 to Count ( factoryWaypoints ) do
74545: LD_ADDR_VAR 0 5
74549: PUSH
74550: DOUBLE
74551: LD_INT 1
74553: DEC
74554: ST_TO_ADDR
74555: LD_EXP 70
74559: PPUSH
74560: CALL 32396 0 1
74564: PUSH
74565: FOR_TO
74566: IFFALSE 74728
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74568: LD_VAR 0 2
74572: PPUSH
74573: LD_VAR 0 3
74577: PPUSH
74578: CALL_OW 428
74582: PUSH
74583: LD_EXP 70
74587: PUSH
74588: LD_VAR 0 5
74592: ARRAY
74593: PUSH
74594: LD_INT 2
74596: ARRAY
74597: EQUAL
74598: IFFALSE 74630
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74600: LD_ADDR_EXP 70
74604: PUSH
74605: LD_EXP 70
74609: PPUSH
74610: LD_VAR 0 5
74614: PPUSH
74615: CALL_OW 3
74619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74620: CALL 74785 0 0
// exit ;
74624: POP
74625: POP
74626: GO 74780
// end else
74628: GO 74726
// if factory = factoryWaypoints [ i ] [ 2 ] then
74630: LD_VAR 0 1
74634: PUSH
74635: LD_EXP 70
74639: PUSH
74640: LD_VAR 0 5
74644: ARRAY
74645: PUSH
74646: LD_INT 2
74648: ARRAY
74649: EQUAL
74650: IFFALSE 74726
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74652: LD_ADDR_EXP 70
74656: PUSH
74657: LD_EXP 70
74661: PPUSH
74662: LD_VAR 0 5
74666: PPUSH
74667: CALL_OW 3
74671: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74672: LD_ADDR_EXP 70
74676: PUSH
74677: LD_EXP 70
74681: PPUSH
74682: LD_VAR 0 1
74686: PPUSH
74687: CALL_OW 255
74691: PUSH
74692: LD_VAR 0 1
74696: PUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_VAR 0 3
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: PPUSH
74713: CALL 68372 0 2
74717: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74718: CALL 74785 0 0
// exit ;
74722: POP
74723: POP
74724: GO 74780
// end ; end ;
74726: GO 74565
74728: POP
74729: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74730: LD_ADDR_EXP 70
74734: PUSH
74735: LD_EXP 70
74739: PPUSH
74740: LD_VAR 0 1
74744: PPUSH
74745: CALL_OW 255
74749: PUSH
74750: LD_VAR 0 1
74754: PUSH
74755: LD_VAR 0 2
74759: PUSH
74760: LD_VAR 0 3
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: PPUSH
74771: CALL 68372 0 2
74775: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74776: CALL 74785 0 0
// end ;
74780: LD_VAR 0 4
74784: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74785: LD_INT 0
74787: PPUSH
74788: PPUSH
74789: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74790: LD_STRING resetFactoryWaypoint();
74792: PPUSH
74793: CALL_OW 559
// if factoryWaypoints then
74797: LD_EXP 70
74801: IFFALSE 74922
// begin list := factoryWaypoints ;
74803: LD_ADDR_VAR 0 3
74807: PUSH
74808: LD_EXP 70
74812: ST_TO_ADDR
// for i := 1 to list do
74813: LD_ADDR_VAR 0 2
74817: PUSH
74818: DOUBLE
74819: LD_INT 1
74821: DEC
74822: ST_TO_ADDR
74823: LD_VAR 0 3
74827: PUSH
74828: FOR_TO
74829: IFFALSE 74920
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74831: LD_STRING setFactoryWaypointXY(
74833: PUSH
74834: LD_VAR 0 3
74838: PUSH
74839: LD_VAR 0 2
74843: ARRAY
74844: PUSH
74845: LD_INT 1
74847: ARRAY
74848: STR
74849: PUSH
74850: LD_STRING ,
74852: STR
74853: PUSH
74854: LD_VAR 0 3
74858: PUSH
74859: LD_VAR 0 2
74863: ARRAY
74864: PUSH
74865: LD_INT 2
74867: ARRAY
74868: STR
74869: PUSH
74870: LD_STRING ,
74872: STR
74873: PUSH
74874: LD_VAR 0 3
74878: PUSH
74879: LD_VAR 0 2
74883: ARRAY
74884: PUSH
74885: LD_INT 3
74887: ARRAY
74888: STR
74889: PUSH
74890: LD_STRING ,
74892: STR
74893: PUSH
74894: LD_VAR 0 3
74898: PUSH
74899: LD_VAR 0 2
74903: ARRAY
74904: PUSH
74905: LD_INT 4
74907: ARRAY
74908: STR
74909: PUSH
74910: LD_STRING )
74912: STR
74913: PPUSH
74914: CALL_OW 559
74918: GO 74828
74920: POP
74921: POP
// end ; end ;
74922: LD_VAR 0 1
74926: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74927: LD_INT 0
74929: PPUSH
// if HexInfo ( x , y ) = warehouse then
74930: LD_VAR 0 2
74934: PPUSH
74935: LD_VAR 0 3
74939: PPUSH
74940: CALL_OW 428
74944: PUSH
74945: LD_VAR 0 1
74949: EQUAL
74950: IFFALSE 74977
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74952: LD_ADDR_EXP 72
74956: PUSH
74957: LD_EXP 72
74961: PPUSH
74962: LD_VAR 0 1
74966: PPUSH
74967: LD_INT 0
74969: PPUSH
74970: CALL_OW 1
74974: ST_TO_ADDR
74975: GO 75028
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74977: LD_ADDR_EXP 72
74981: PUSH
74982: LD_EXP 72
74986: PPUSH
74987: LD_VAR 0 1
74991: PPUSH
74992: LD_VAR 0 1
74996: PPUSH
74997: CALL_OW 255
75001: PUSH
75002: LD_VAR 0 1
75006: PUSH
75007: LD_VAR 0 2
75011: PUSH
75012: LD_VAR 0 3
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: PPUSH
75023: CALL_OW 1
75027: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
75028: CALL 75037 0 0
// end ;
75032: LD_VAR 0 4
75036: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
75037: LD_INT 0
75039: PPUSH
75040: PPUSH
75041: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
75042: LD_STRING resetWarehouseGatheringPoints();
75044: PPUSH
75045: CALL_OW 559
// if warehouseGatheringPoints then
75049: LD_EXP 72
75053: IFFALSE 75179
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
75055: LD_ADDR_VAR 0 3
75059: PUSH
75060: LD_EXP 72
75064: PPUSH
75065: CALL 72306 0 1
75069: ST_TO_ADDR
// for i := 1 to list do
75070: LD_ADDR_VAR 0 2
75074: PUSH
75075: DOUBLE
75076: LD_INT 1
75078: DEC
75079: ST_TO_ADDR
75080: LD_VAR 0 3
75084: PUSH
75085: FOR_TO
75086: IFFALSE 75177
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75088: LD_STRING setWarehouseGatheringPointXY(
75090: PUSH
75091: LD_VAR 0 3
75095: PUSH
75096: LD_VAR 0 2
75100: ARRAY
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: STR
75106: PUSH
75107: LD_STRING ,
75109: STR
75110: PUSH
75111: LD_VAR 0 3
75115: PUSH
75116: LD_VAR 0 2
75120: ARRAY
75121: PUSH
75122: LD_INT 2
75124: ARRAY
75125: STR
75126: PUSH
75127: LD_STRING ,
75129: STR
75130: PUSH
75131: LD_VAR 0 3
75135: PUSH
75136: LD_VAR 0 2
75140: ARRAY
75141: PUSH
75142: LD_INT 3
75144: ARRAY
75145: STR
75146: PUSH
75147: LD_STRING ,
75149: STR
75150: PUSH
75151: LD_VAR 0 3
75155: PUSH
75156: LD_VAR 0 2
75160: ARRAY
75161: PUSH
75162: LD_INT 4
75164: ARRAY
75165: STR
75166: PUSH
75167: LD_STRING )
75169: STR
75170: PPUSH
75171: CALL_OW 559
75175: GO 75085
75177: POP
75178: POP
// end ; end ;
75179: LD_VAR 0 1
75183: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
75184: LD_INT 0
75186: PPUSH
75187: PPUSH
// if not mpSidePositions then
75188: LD_EXP 31
75192: NOT
75193: IFFALSE 75197
// exit ;
75195: GO 75268
// result :=  ;
75197: LD_ADDR_VAR 0 1
75201: PUSH
75202: LD_STRING 
75204: ST_TO_ADDR
// for i := 1 to 8 do
75205: LD_ADDR_VAR 0 2
75209: PUSH
75210: DOUBLE
75211: LD_INT 1
75213: DEC
75214: ST_TO_ADDR
75215: LD_INT 8
75217: PUSH
75218: FOR_TO
75219: IFFALSE 75249
// begin result := result & mpSidePositions [ i ] & ; ;
75221: LD_ADDR_VAR 0 1
75225: PUSH
75226: LD_VAR 0 1
75230: PUSH
75231: LD_EXP 31
75235: PUSH
75236: LD_VAR 0 2
75240: ARRAY
75241: STR
75242: PUSH
75243: LD_STRING ;
75245: STR
75246: ST_TO_ADDR
// end ;
75247: GO 75218
75249: POP
75250: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
75251: LD_STRING setMultiplayerRealPosition("
75253: PUSH
75254: LD_VAR 0 1
75258: STR
75259: PUSH
75260: LD_STRING ");
75262: STR
75263: PPUSH
75264: CALL_OW 559
// end ;
75268: LD_VAR 0 1
75272: RET
