// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 159 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1906 0 1
  44: PPUSH
  45: CALL 5947 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1906 0 1
  56: PPUSH
  57: CALL 10563 0 1
// Multiplayer_Start ;
  61: CALL 3938 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4050 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: IFFALSE 142
 135: PUSH
 136: LD_OWVAR 48
 140: NOT
 141: AND
 142: IFFALSE 158
 144: GO 146
 146: DISABLE
// begin enable ;
 147: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 148: LD_ADDR_OWVAR 47
 152: PUSH
 153: CALL 4865 0 0
 157: ST_TO_ADDR
// end ; end_of_file
 158: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
 163: PPUSH
 164: PPUSH
 165: PPUSH
// mpGameType := GameTypeCoop ;
 166: LD_ADDR_EXP 30
 170: PUSH
 171: LD_INT 4
 173: ST_TO_ADDR
// multi_settings_counter := 6 ;
 174: LD_ADDR_EXP 18
 178: PUSH
 179: LD_INT 6
 181: ST_TO_ADDR
// multi_settings := [ ] ;
 182: LD_ADDR_EXP 17
 186: PUSH
 187: EMPTY
 188: ST_TO_ADDR
// if Multiplayer then
 189: LD_OWVAR 4
 193: IFFALSE 373
// begin your_side := mp_player_side ;
 195: LD_ADDR_OWVAR 2
 199: PUSH
 200: LD_OWVAR 7
 204: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_OWVAR 6
 214: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 215: LD_ADDR_EXP 7
 219: PUSH
 220: LD_OWVAR 17
 224: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 225: LD_ADDR_EXP 8
 229: PUSH
 230: LD_OWVAR 15
 234: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 235: LD_ADDR_EXP 9
 239: PUSH
 240: LD_OWVAR 16
 244: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 245: LD_ADDR_EXP 10
 249: PUSH
 250: EMPTY
 251: PUSH
 252: EMPTY
 253: LIST
 254: ST_TO_ADDR
// for i in mp_teams do
 255: LD_ADDR_VAR 0 2
 259: PUSH
 260: LD_OWVAR 12
 264: PUSH
 265: FOR_IN
 266: IFFALSE 309
// if i then
 268: LD_VAR 0 2
 272: IFFALSE 307
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 274: LD_ADDR_EXP 10
 278: PUSH
 279: LD_EXP 10
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_EXP 10
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PUSH
 296: LD_VAR 0 2
 300: UNION
 301: PPUSH
 302: CALL_OW 1
 306: ST_TO_ADDR
 307: GO 265
 309: POP
 310: POP
// for i := 1 to multi_settings_counter do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_EXP 18
 325: PUSH
 326: FOR_TO
 327: IFFALSE 369
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 329: LD_ADDR_EXP 17
 333: PUSH
 334: LD_EXP 17
 338: PPUSH
 339: LD_EXP 17
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: PPUSH
 348: LD_VAR 0 2
 352: PPUSH
 353: CALL_OW 426
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
 367: GO 326
 369: POP
 370: POP
// end else
 371: GO 559
// begin your_side := 3 ;
 373: LD_ADDR_OWVAR 2
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// multi_gametype := 1 ;
 381: LD_ADDR_EXP 6
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 389: LD_ADDR_EXP 7
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: LD_INT 1
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 428: LD_ADDR_EXP 8
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 467: LD_ADDR_EXP 9
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: LD_INT 3
 483: PUSH
 484: LD_INT 3
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_INT 3
 513: PUSH
 514: LD_INT 4
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 4
 538: PUSH
 539: LD_INT 4
 541: PUSH
 542: LD_INT 3
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 559: LD_ADDR_EXP 31
 563: PUSH
 564: LD_EXP 7
 568: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 569: LD_ADDR_EXP 11
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 0
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 14
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 647: LD_ADDR_EXP 25
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: LD_INT 0
 657: PUSH
 658: LD_INT 0
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 0
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// multi_teamgame := true ;
 686: LD_ADDR_EXP 15
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 694: LD_ADDR_EXP 13
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: EMPTY
 703: LIST
 704: ST_TO_ADDR
// multi_custom_commanders := true ;
 705: LD_ADDR_EXP 16
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// multi_commanders := [ ] ;
 713: LD_ADDR_EXP 24
 717: PUSH
 718: EMPTY
 719: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 720: LD_ADDR_EXP 27
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// multi_players_amount := 0 ;
 727: LD_ADDR_EXP 26
 731: PUSH
 732: LD_INT 0
 734: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 735: LD_ADDR_EXP 12
 739: PUSH
 740: LD_INT 8
 742: PUSH
 743: LD_INT 9
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 10
 752: PUSH
 753: LD_INT 11
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 12
 762: PUSH
 763: LD_INT 13
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 775: LD_ADDR_EXP 29
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 14
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: CALL 70489 0 2
 793: PUSH
 794: LD_STRING kagan
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 31
 804: PUSH
 805: LD_INT 67
 807: PUSH
 808: LD_INT 102
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 31
 825: PUSH
 826: LD_INT 73
 828: PUSH
 829: LD_INT 103
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 29
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: LD_INT 112
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_INT 0
 873: PUSH
 874: LD_INT 15
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL 70489 0 2
 884: PUSH
 885: LD_STRING beria
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 31
 895: PUSH
 896: LD_INT 102
 898: PUSH
 899: LD_INT 86
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 31
 916: PUSH
 917: LD_INT 98
 919: PUSH
 920: LD_INT 96
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 115
 940: PUSH
 941: LD_INT 104
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 16
 967: PPUSH
 968: LD_INT 3
 970: PPUSH
 971: CALL 70489 0 2
 975: PUSH
 976: LD_STRING kirov
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 31
 986: PUSH
 987: LD_INT 169
 989: PUSH
 990: LD_INT 101
 992: PUSH
 993: LD_INT 4
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 31
1007: PUSH
1008: LD_INT 175
1010: PUSH
1011: LD_INT 123
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 4
1028: PUSH
1029: LD_INT 166
1031: PUSH
1032: LD_INT 115
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: LD_INT 152
1052: PUSH
1053: LD_INT 98
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: ST_TO_ADDR
// for i := 1 to 8 do
1080: LD_ADDR_VAR 0 2
1084: PUSH
1085: DOUBLE
1086: LD_INT 1
1088: DEC
1089: ST_TO_ADDR
1090: LD_INT 8
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1429
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1096: LD_VAR 0 2
1100: PPUSH
1101: CALL_OW 530
1105: IFFALSE 1263
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1107: LD_ADDR_EXP 11
1111: PUSH
1112: LD_EXP 11
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1130: LD_ADDR_EXP 9
1134: PUSH
1135: LD_EXP 9
1139: PPUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 1
1152: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1153: LD_ADDR_EXP 7
1157: PUSH
1158: LD_EXP 7
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 1
1175: ST_TO_ADDR
// for j = 1 to multi_teams do
1176: LD_ADDR_VAR 0 3
1180: PUSH
1181: DOUBLE
1182: LD_INT 1
1184: DEC
1185: ST_TO_ADDR
1186: LD_EXP 10
1190: PUSH
1191: FOR_TO
1192: IFFALSE 1261
// begin if i in multi_teams [ j ] then
1194: LD_VAR 0 2
1198: PUSH
1199: LD_EXP 10
1203: PUSH
1204: LD_VAR 0 3
1208: ARRAY
1209: IN
1210: IFFALSE 1259
// begin tmp := multi_teams [ j ] diff i ;
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_EXP 10
1221: PUSH
1222: LD_VAR 0 3
1226: ARRAY
1227: PUSH
1228: LD_VAR 0 2
1232: DIFF
1233: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1234: LD_ADDR_EXP 10
1238: PUSH
1239: LD_EXP 10
1243: PPUSH
1244: LD_VAR 0 3
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// end ; end ;
1259: GO 1191
1261: POP
1262: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1263: LD_EXP 9
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: IFFALSE 1294
1275: PUSH
1276: LD_EXP 9
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_EXP 13
1291: IN
1292: NOT
1293: AND
1294: IFFALSE 1335
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1296: LD_ADDR_EXP 9
1300: PUSH
1301: LD_EXP 9
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: LD_EXP 13
1315: PUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_EXP 13
1323: PPUSH
1324: CALL_OW 12
1328: ARRAY
1329: PPUSH
1330: CALL_OW 1
1334: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1335: LD_EXP 9
1339: PUSH
1340: LD_VAR 0 2
1344: ARRAY
1345: NOT
1346: IFFALSE 1361
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: NOT
1360: AND
1361: IFFALSE 1376
1363: PUSH
1364: LD_EXP 11
1368: PUSH
1369: LD_VAR 0 2
1373: ARRAY
1374: NOT
1375: AND
1376: IFFALSE 1401
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1378: LD_ADDR_EXP 14
1382: PUSH
1383: LD_EXP 14
1387: PPUSH
1388: LD_VAR 0 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL_OW 1
1400: ST_TO_ADDR
// if multi_sides [ i ] then
1401: LD_EXP 7
1405: PUSH
1406: LD_VAR 0 2
1410: ARRAY
1411: IFFALSE 1427
// multi_players_amount := multi_players_amount + 1 ;
1413: LD_ADDR_EXP 26
1417: PUSH
1418: LD_EXP 26
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ST_TO_ADDR
// end ;
1427: GO 1093
1429: POP
1430: POP
// for i in multi_teams do
1431: LD_ADDR_VAR 0 2
1435: PUSH
1436: LD_EXP 10
1440: PUSH
1441: FOR_IN
1442: IFFALSE 1550
// begin for j = 2 to i do
1444: LD_ADDR_VAR 0 3
1448: PUSH
1449: DOUBLE
1450: LD_INT 2
1452: DEC
1453: ST_TO_ADDR
1454: LD_VAR 0 2
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1546
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1462: LD_VAR 0 2
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PPUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 343
// for x = 1 to j - 1 do
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_VAR 0 3
1500: PUSH
1501: LD_INT 1
1503: MINUS
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1542
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1508: LD_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_VAR 0 4
1528: ARRAY
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 80
1540: GO 1505
1542: POP
1543: POP
// end ;
1544: GO 1459
1546: POP
1547: POP
// end ;
1548: GO 1441
1550: POP
1551: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1552: LD_ADDR_OWVAR 67
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 3
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_EXP 17
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: ARRAY
1580: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1581: LD_ADDR_EXP 19
1585: PUSH
1586: LD_INT 6
1588: PUSH
1589: LD_INT 7
1591: PUSH
1592: LD_INT 8
1594: PUSH
1595: LD_INT 9
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 17
1608: PUSH
1609: LD_INT 2
1611: ARRAY
1612: ARRAY
1613: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 4
1627: PUSH
1628: LD_INT 5
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_EXP 17
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ARRAY
1646: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1647: LD_ADDR_EXP 21
1651: PUSH
1652: LD_INT 3000
1654: PUSH
1655: LD_INT 1120
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 5000
1664: PUSH
1665: LD_INT 770
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 6000
1674: PUSH
1675: LD_INT 490
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 8000
1684: PUSH
1685: LD_INT 420
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_EXP 17
1702: PUSH
1703: LD_INT 4
1705: ARRAY
1706: ARRAY
1707: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1708: LD_ADDR_EXP 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_EXP 17
1731: PUSH
1732: LD_INT 5
1734: ARRAY
1735: ARRAY
1736: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1737: LD_ADDR_EXP 23
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_EXP 17
1760: PUSH
1761: LD_INT 6
1763: ARRAY
1764: ARRAY
1765: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1766: LD_ADDR_EXP 28
1770: PUSH
1771: LD_INT 10500
1773: PUSH
1774: LD_INT 31500
1776: PUSH
1777: LD_INT 52500
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: ST_TO_ADDR
// if multi_extra_oil then
1791: LD_EXP 22
1795: IFFALSE 1856
// begin if multi_extra_oil = 1 then
1797: LD_EXP 22
1801: PUSH
1802: LD_INT 1
1804: EQUAL
1805: IFFALSE 1820
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1807: LD_INT 109
1809: PPUSH
1810: LD_INT 130
1812: PPUSH
1813: LD_INT 2
1815: PPUSH
1816: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1820: LD_EXP 22
1824: PUSH
1825: LD_INT 2
1827: EQUAL
1828: IFFALSE 1856
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1830: LD_INT 109
1832: PPUSH
1833: LD_INT 130
1835: PPUSH
1836: LD_INT 2
1838: PPUSH
1839: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1843: LD_INT 150
1845: PPUSH
1846: LD_INT 112
1848: PPUSH
1849: LD_INT 2
1851: PPUSH
1852: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 1
1863: GREATER
1864: IFFALSE 1901
// for i := 2 to 8 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 2
1874: DEC
1875: ST_TO_ADDR
1876: LD_INT 8
1878: PUSH
1879: FOR_TO
1880: IFFALSE 1899
// SetTech ( tech_advmet , i , state_disabled ) ;
1882: LD_INT 34
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 322
1897: GO 1879
1899: POP
1900: POP
// end ;
1901: LD_VAR 0 1
1905: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1906: LD_INT 0
1908: PPUSH
1909: PPUSH
// if not multi_sides [ preferSide ] then
1910: LD_EXP 7
1914: PUSH
1915: LD_VAR 0 1
1919: ARRAY
1920: NOT
1921: IFFALSE 1935
// begin result := preferSide ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_VAR 0 1
1932: ST_TO_ADDR
// exit ;
1933: GO 1982
// end ; for i := 1 to 8 do
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: DOUBLE
1941: LD_INT 1
1943: DEC
1944: ST_TO_ADDR
1945: LD_INT 8
1947: PUSH
1948: FOR_TO
1949: IFFALSE 1980
// if not multi_sides [ i ] then
1951: LD_EXP 7
1955: PUSH
1956: LD_VAR 0 3
1960: ARRAY
1961: NOT
1962: IFFALSE 1978
// begin result := i ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 3
1973: ST_TO_ADDR
// exit ;
1974: POP
1975: POP
1976: GO 1982
// end ;
1978: GO 1948
1980: POP
1981: POP
// end ;
1982: LD_VAR 0 2
1986: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1987: LD_INT 0
1989: PPUSH
// uc_side := side ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// uc_nation := nation_russian ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// hc_importance := 100 ;
2008: LD_ADDR_OWVAR 32
2012: PUSH
2013: LD_INT 100
2015: ST_TO_ADDR
// hc_class := class_soldier ;
2016: LD_ADDR_OWVAR 28
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// if num = 1 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 1
2031: EQUAL
2032: IFFALSE 2095
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 381
// hc_gallery := ru ;
2046: LD_ADDR_OWVAR 33
2050: PUSH
2051: LD_STRING ru
2053: ST_TO_ADDR
// hc_face_number := 10 ;
2054: LD_ADDR_OWVAR 34
2058: PUSH
2059: LD_INT 10
2061: ST_TO_ADDR
// hc_name := Popov ;
2062: LD_ADDR_OWVAR 26
2066: PUSH
2067: LD_STRING Popov
2069: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2070: LD_ADDR_OWVAR 29
2074: PUSH
2075: LD_INT 10
2077: PUSH
2078: LD_INT 10
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// result := CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// end ; if num = 2 then
2095: LD_VAR 0 2
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2174
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2105: LD_INT 1
2107: PPUSH
2108: LD_EXP 20
2112: PPUSH
2113: CALL_OW 383
// hc_class := class_mechanic ;
2117: LD_ADDR_OWVAR 28
2121: PUSH
2122: LD_INT 3
2124: ST_TO_ADDR
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 1 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// hc_name := Burlak ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Burlak
2148: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; if num = 3 then
2174: LD_VAR 0 2
2178: PUSH
2179: LD_INT 3
2181: EQUAL
2182: IFFALSE 2245
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2184: LD_INT 1
2186: PPUSH
2187: LD_EXP 20
2191: PPUSH
2192: CALL_OW 381
// hc_gallery := ru ;
2196: LD_ADDR_OWVAR 33
2200: PUSH
2201: LD_STRING ru
2203: ST_TO_ADDR
// hc_face_number := 8 ;
2204: LD_ADDR_OWVAR 34
2208: PUSH
2209: LD_INT 8
2211: ST_TO_ADDR
// hc_name := Kurin ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_STRING Kurin
2219: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2220: LD_ADDR_OWVAR 29
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 11
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: ST_TO_ADDR
// result := CreateHuman ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: CALL_OW 44
2244: ST_TO_ADDR
// end ; end ;
2245: LD_VAR 0 3
2249: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// for i := 1 to 8 do
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: DOUBLE
2268: LD_INT 1
2270: DEC
2271: ST_TO_ADDR
2272: LD_INT 8
2274: PUSH
2275: FOR_TO
2276: IFFALSE 3607
// begin if not multi_sides [ i ] then
2278: LD_EXP 7
2282: PUSH
2283: LD_VAR 0 2
2287: ARRAY
2288: NOT
2289: IFFALSE 2293
// continue ;
2291: GO 2275
// if multi_buildings [ multi_sides [ i ] ] then
2293: LD_EXP 29
2297: PUSH
2298: LD_EXP 7
2302: PUSH
2303: LD_VAR 0 2
2307: ARRAY
2308: ARRAY
2309: IFFALSE 2622
// begin uc_side := i ;
2311: LD_ADDR_OWVAR 20
2315: PUSH
2316: LD_VAR 0 2
2320: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2321: LD_ADDR_OWVAR 21
2325: PUSH
2326: LD_EXP 9
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_EXP 29
2346: PUSH
2347: LD_EXP 7
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: ARRAY
2358: PUSH
2359: FOR_IN
2360: IFFALSE 2620
// begin if j [ 1 ] = b_oil_mine then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 29
2373: EQUAL
2374: IFFALSE 2411
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 2
2396: ARRAY
2397: PUSH
2398: LD_INT 2
2400: ARRAY
2401: PPUSH
2402: LD_VAR 0 2
2406: PPUSH
2407: CALL_OW 441
// bc_type := j [ 1 ] ;
2411: LD_ADDR_OWVAR 42
2415: PUSH
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: ST_TO_ADDR
// bc_level := 2 ;
2425: LD_ADDR_OWVAR 43
2429: PUSH
2430: LD_INT 2
2432: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PUSH
2442: LD_INT 6
2444: EQUAL
2445: IFFALSE 2463
// begin bc_kind1 := b_lab_basic ;
2447: LD_ADDR_OWVAR 44
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2455: LD_ADDR_OWVAR 45
2459: PUSH
2460: LD_INT 9
2462: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2463: LD_ADDR_VAR 0 4
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PUSH
2477: LD_INT 1
2479: ARRAY
2480: PPUSH
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: PUSH
2490: LD_INT 2
2492: ARRAY
2493: PPUSH
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 2
2501: ARRAY
2502: PUSH
2503: LD_INT 3
2505: ARRAY
2506: PPUSH
2507: CALL_OW 47
2511: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PUSH
2521: LD_INT 0
2523: EQUAL
2524: IFFALSE 2618
// begin SetBName ( b , j [ 3 ] ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 3
2538: ARRAY
2539: PPUSH
2540: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 320
2559: PUSH
2560: LD_INT 240
2562: PUSH
2563: LD_INT 150
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 274
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: LD_INT 160
2596: PUSH
2597: LD_INT 130
2599: PUSH
2600: LD_INT 100
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_OWVAR 67
2612: ARRAY
2613: PPUSH
2614: CALL_OW 277
// end ; end ;
2618: GO 2359
2620: POP
2621: POP
// end ; if multi_custom_commanders then
2622: LD_EXP 16
2626: IFFALSE 2836
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2628: LD_ADDR_VAR 0 6
2632: PUSH
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_EXP 7
2642: PUSH
2643: LD_VAR 0 2
2647: ARRAY
2648: PPUSH
2649: CALL 1987 0 2
2653: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2654: LD_ADDR_EXP 24
2658: PUSH
2659: LD_EXP 24
2663: PPUSH
2664: LD_EXP 24
2668: PUSH
2669: LD_INT 1
2671: PLUS
2672: PPUSH
2673: LD_VAR 0 6
2677: PPUSH
2678: CALL_OW 2
2682: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2683: LD_VAR 0 6
2687: PPUSH
2688: CALL_OW 257
2692: PUSH
2693: LD_INT 3
2695: EQUAL
2696: IFFALSE 2801
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2698: LD_INT 22
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 51
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 32600 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2727: LD_VAR 0 7
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 100
2737: PUSH
2738: LD_INT 20
2740: PUSH
2741: LD_OWVAR 67
2745: MUL
2746: MINUS
2747: PPUSH
2748: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_EXP 12
2761: PUSH
2762: LD_EXP 7
2766: PUSH
2767: LD_VAR 0 2
2771: ARRAY
2772: ARRAY
2773: PUSH
2774: LD_INT 2
2776: ARRAY
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2785: LD_VAR 0 6
2789: PPUSH
2790: LD_VAR 0 7
2794: PPUSH
2795: CALL_OW 52
// end else
2799: GO 2834
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2801: LD_VAR 0 6
2805: PPUSH
2806: LD_EXP 12
2810: PUSH
2811: LD_EXP 7
2815: PUSH
2816: LD_VAR 0 2
2820: ARRAY
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// end else
2834: GO 3047
// begin uc_side := i ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_VAR 0 2
2845: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_EXP 9
2855: PUSH
2856: LD_VAR 0 2
2860: ARRAY
2861: ST_TO_ADDR
// hc_importance := 100 ;
2862: LD_ADDR_OWVAR 32
2866: PUSH
2867: LD_INT 100
2869: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2870: LD_INT 0
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: LD_EXP 20
2880: PPUSH
2881: CALL_OW 380
// if multiplayer then
2885: LD_OWVAR 4
2889: IFFALSE 2947
// begin hc_name := mp_sides_players_names [ i ] ;
2891: LD_ADDR_OWVAR 26
2895: PUSH
2896: LD_OWVAR 19
2900: PUSH
2901: LD_VAR 0 2
2905: ARRAY
2906: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2907: LD_ADDR_OWVAR 33
2911: PUSH
2912: LD_STRING MULTIAVATARS
2914: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2915: LD_ADDR_OWVAR 34
2919: PUSH
2920: LD_VAR 0 2
2924: PPUSH
2925: CALL_OW 525
2929: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2930: LD_ADDR_OWVAR 27
2934: PUSH
2935: LD_VAR 0 2
2939: PPUSH
2940: CALL_OW 526
2944: ST_TO_ADDR
// end else
2945: GO 2979
// begin hc_gallery :=  ;
2947: LD_ADDR_OWVAR 33
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_name :=  ;
2955: LD_ADDR_OWVAR 26
2959: PUSH
2960: LD_STRING 
2962: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 2
2973: PPUSH
2974: CALL_OW 12
2978: ST_TO_ADDR
// end ; un := CreateHuman ;
2979: LD_ADDR_VAR 0 6
2983: PUSH
2984: CALL_OW 44
2988: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2989: LD_VAR 0 6
2993: PPUSH
2994: LD_EXP 12
2998: PUSH
2999: LD_EXP 7
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_EXP 24
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 6
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// end ; InitHc ;
3047: CALL_OW 19
// InitUc ;
3051: CALL_OW 18
// uc_side := i ;
3055: LD_ADDR_OWVAR 20
3059: PUSH
3060: LD_VAR 0 2
3064: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3065: LD_ADDR_OWVAR 21
3069: PUSH
3070: LD_EXP 9
3074: PUSH
3075: LD_VAR 0 2
3079: ARRAY
3080: ST_TO_ADDR
// hc_gallery :=  ;
3081: LD_ADDR_OWVAR 33
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_name :=  ;
3089: LD_ADDR_OWVAR 26
3093: PUSH
3094: LD_STRING 
3096: ST_TO_ADDR
// hc_importance := 0 ;
3097: LD_ADDR_OWVAR 32
3101: PUSH
3102: LD_INT 0
3104: ST_TO_ADDR
// cl := 1 ;
3105: LD_ADDR_VAR 0 5
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: DOUBLE
3119: LD_INT 2
3121: DEC
3122: ST_TO_ADDR
3123: LD_EXP 19
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3603
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 1
3138: MINUS
3139: PUSH
3140: LD_EXP 19
3144: PUSH
3145: LD_INT 1
3147: MINUS
3148: PUSH
3149: LD_INT 4
3151: DIVREAL
3152: MOD
3153: PUSH
3154: LD_INT 0
3156: EQUAL
3157: IFFALSE 3173
// cl := cl + 1 ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_VAR 0 5
3168: PUSH
3169: LD_INT 1
3171: PLUS
3172: ST_TO_ADDR
// if cl > 4 then
3173: LD_VAR 0 5
3177: PUSH
3178: LD_INT 4
3180: GREATER
3181: IFFALSE 3191
// cl := 1 ;
3183: LD_ADDR_VAR 0 5
3187: PUSH
3188: LD_INT 1
3190: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3191: LD_INT 0
3193: PPUSH
3194: LD_VAR 0 5
3198: PPUSH
3199: LD_EXP 20
3203: PPUSH
3204: CALL_OW 380
// un := CreateHuman ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: CALL_OW 44
3217: ST_TO_ADDR
// if j > copy then
3218: LD_VAR 0 3
3222: PUSH
3223: LD_VAR 0 9
3227: GREATER
3228: IFFALSE 3257
// copy := Replace ( copy , j , un ) else
3230: LD_ADDR_VAR 0 9
3234: PUSH
3235: LD_VAR 0 9
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 1
3254: ST_TO_ADDR
3255: GO 3339
// begin CopySkills ( copy [ j ] , un ) ;
3257: LD_VAR 0 9
3261: PUSH
3262: LD_VAR 0 3
3266: ARRAY
3267: PPUSH
3268: LD_VAR 0 6
3272: PPUSH
3273: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3277: LD_VAR 0 6
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: LD_VAR 0 9
3289: PUSH
3290: LD_VAR 0 3
3294: ARRAY
3295: PPUSH
3296: LD_INT 2
3298: PPUSH
3299: CALL_OW 260
3303: PPUSH
3304: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3308: LD_VAR 0 6
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_VAR 0 9
3320: PUSH
3321: LD_VAR 0 3
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if multi_pos_area then
3339: LD_EXP 12
3343: IFFALSE 3601
// begin if GetClass ( un ) = 3 then
3345: LD_VAR 0 6
3349: PPUSH
3350: CALL_OW 257
3354: PUSH
3355: LD_INT 3
3357: EQUAL
3358: IFFALSE 3455
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3360: LD_INT 21
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: LD_INT 43
3371: PUSH
3372: LD_INT 42
3374: PUSH
3375: LD_INT 42
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_OWVAR 67
3387: ARRAY
3388: PPUSH
3389: LD_INT 80
3391: PPUSH
3392: CALL 32600 0 5
// veh := CreateVehicle ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 45
3405: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3406: LD_VAR 0 7
3410: PPUSH
3411: LD_EXP 12
3415: PUSH
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3439: LD_VAR 0 6
3443: PPUSH
3444: LD_VAR 0 7
3448: PPUSH
3449: CALL_OW 52
// continue ;
3453: GO 3128
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 30
3474: PUSH
3475: LD_INT 31
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 58
3484: PUSH
3485: EMPTY
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 69
3497: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3498: LD_VAR 0 6
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 1
3510: EQUAL
3511: IFFALSE 3519
3513: PUSH
3514: LD_VAR 0 8
3518: AND
3519: IFFALSE 3568
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 8
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: CALL_OW 254
3539: PUSH
3540: LD_INT 3
3542: MINUS
3543: PPUSH
3544: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3548: LD_VAR 0 6
3552: PPUSH
3553: LD_VAR 0 8
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 52
// continue ;
3566: GO 3128
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_EXP 12
3577: PUSH
3578: LD_EXP 7
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: ARRAY
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// end ; end ;
3601: GO 3128
3603: POP
3604: POP
// end ;
3605: GO 2275
3607: POP
3608: POP
// end ;
3609: LD_VAR 0 1
3613: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
// if not multi_support then
3621: LD_EXP 23
3625: NOT
3626: IFFALSE 3630
// exit ;
3628: GO 3933
// result := [ ] ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: EMPTY
3636: ST_TO_ADDR
// for i := 1 to 8 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 8
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3931
// begin result := Replace ( result , i , [ ] ) ;
3653: LD_ADDR_VAR 0 1
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: EMPTY
3669: PPUSH
3670: CALL_OW 1
3674: ST_TO_ADDR
// if multi_sides [ i ] then
3675: LD_EXP 7
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: IFFALSE 3929
// begin tmp := [ ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: EMPTY
3693: ST_TO_ADDR
// if multi_support = 1 then
3694: LD_EXP 23
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: IFFALSE 3799
// begin uc_side := i ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_VAR 0 2
3713: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3714: LD_ADDR_OWVAR 21
3718: PUSH
3719: LD_EXP 9
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: ST_TO_ADDR
// for j := 1 to 3 do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: DOUBLE
3736: LD_INT 1
3738: DEC
3739: ST_TO_ADDR
3740: LD_INT 3
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3797
// begin InitHC_All ( ) ;
3746: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: LD_INT 1
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3779: LD_ADDR_VAR 0 5
3783: PUSH
3784: LD_VAR 0 5
3788: PUSH
3789: CALL_OW 44
3793: ADD
3794: ST_TO_ADDR
// end ;
3795: GO 3743
3797: POP
3798: POP
// end ; if multi_support = 2 then
3799: LD_EXP 23
3803: PUSH
3804: LD_INT 2
3806: EQUAL
3807: IFFALSE 3904
// begin uc_side := i ;
3809: LD_ADDR_OWVAR 20
3813: PUSH
3814: LD_VAR 0 2
3818: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3819: LD_ADDR_OWVAR 21
3823: PUSH
3824: LD_EXP 9
3828: PUSH
3829: LD_VAR 0 2
3833: ARRAY
3834: ST_TO_ADDR
// for j := 1 to 5 do
3835: LD_ADDR_VAR 0 3
3839: PUSH
3840: DOUBLE
3841: LD_INT 1
3843: DEC
3844: ST_TO_ADDR
3845: LD_INT 5
3847: PUSH
3848: FOR_TO
3849: IFFALSE 3902
// begin InitHC_All ( ) ;
3851: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3855: LD_INT 0
3857: PPUSH
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 4
3863: PPUSH
3864: CALL_OW 12
3868: PPUSH
3869: LD_INT 2
3871: PPUSH
3872: LD_INT 4
3874: PPUSH
3875: CALL_OW 12
3879: PPUSH
3880: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3884: LD_ADDR_VAR 0 5
3888: PUSH
3889: LD_VAR 0 5
3893: PUSH
3894: CALL_OW 44
3898: ADD
3899: ST_TO_ADDR
// end ;
3900: GO 3848
3902: POP
3903: POP
// end ; result := Replace ( result , i , tmp ) ;
3904: LD_ADDR_VAR 0 1
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: LD_VAR 0 2
3918: PPUSH
3919: LD_VAR 0 5
3923: PPUSH
3924: CALL_OW 1
3928: ST_TO_ADDR
// end ; end ;
3929: GO 3650
3931: POP
3932: POP
// end ;
3933: LD_VAR 0 1
3937: RET
// export function Multiplayer_Start ( ) ; begin
3938: LD_INT 0
3940: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3941: CALL 2250 0 0
// Multiplayer_InitPointSystem ( ) ;
3945: CALL 4954 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3949: LD_INT 20
3951: PPUSH
3952: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3956: LD_INT 150
3958: PPUSH
3959: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3963: LD_INT 5
3965: PPUSH
3966: CALL 5138 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3970: LD_INT 40
3972: NEG
3973: PPUSH
3974: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3978: LD_INT 200
3980: PPUSH
3981: CALL 5138 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3985: LD_INT 2
3987: PPUSH
3988: CALL 5138 0 1
// if multi_support then
3992: LD_EXP 23
3996: IFFALSE 4008
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3998: LD_ADDR_EXP 27
4002: PUSH
4003: CALL 3614 0 0
4007: ST_TO_ADDR
// if multi_sides [ your_side ] then
4008: LD_EXP 7
4012: PUSH
4013: LD_OWVAR 2
4017: ARRAY
4018: IFFALSE 4045
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4020: LD_INT 22
4022: PUSH
4023: LD_OWVAR 2
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: CALL_OW 87
// end ;
4045: LD_VAR 0 1
4049: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
// tmp := [ ] ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: EMPTY
4065: ST_TO_ADDR
// for i := 1 to 8 do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_INT 8
4078: PUSH
4079: FOR_TO
4080: IFFALSE 4116
// if multi_sides [ i ] then
4082: LD_EXP 7
4086: PUSH
4087: LD_VAR 0 2
4091: ARRAY
4092: IFFALSE 4114
// tmp := Join ( tmp , i ) ;
4094: LD_ADDR_VAR 0 6
4098: PUSH
4099: LD_VAR 0 6
4103: PPUSH
4104: LD_VAR 0 2
4108: PPUSH
4109: CALL 65770 0 2
4113: ST_TO_ADDR
4114: GO 4079
4116: POP
4117: POP
// repeat wait ( 0 0$1 ) ;
4118: LD_INT 35
4120: PPUSH
4121: CALL_OW 67
// if tick = 10 10$00 then
4125: LD_OWVAR 1
4129: PUSH
4130: LD_INT 21000
4132: EQUAL
4133: IFFALSE 4306
// begin for i := 1 to 8 do
4135: LD_ADDR_VAR 0 2
4139: PUSH
4140: DOUBLE
4141: LD_INT 1
4143: DEC
4144: ST_TO_ADDR
4145: LD_INT 8
4147: PUSH
4148: FOR_TO
4149: IFFALSE 4304
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4151: LD_EXP 7
4155: PUSH
4156: LD_VAR 0 2
4160: ARRAY
4161: IFFALSE 4176
4163: PUSH
4164: LD_EXP 25
4168: PUSH
4169: LD_VAR 0 2
4173: ARRAY
4174: NOT
4175: AND
4176: IFFALSE 4302
// begin uc_side := i ;
4178: LD_ADDR_OWVAR 20
4182: PUSH
4183: LD_VAR 0 2
4187: ST_TO_ADDR
// uc_nation := nation_russian ;
4188: LD_ADDR_OWVAR 21
4192: PUSH
4193: LD_INT 3
4195: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4196: LD_INT 22
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_INT 1
4204: PPUSH
4205: LD_INT 44
4207: PUSH
4208: LD_INT 44
4210: PUSH
4211: LD_INT 42
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: PUSH
4219: LD_OWVAR 67
4223: ARRAY
4224: PPUSH
4225: LD_INT 30
4227: PPUSH
4228: CALL 32600 0 5
// veh := CreateVehicle ;
4232: LD_ADDR_VAR 0 7
4236: PUSH
4237: CALL_OW 45
4241: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4242: LD_VAR 0 7
4246: PPUSH
4247: LD_INT 32
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 5
4262: PUSH
4263: LD_OWVAR 67
4267: MINUS
4268: PPUSH
4269: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4273: CALL_OW 44
4277: PPUSH
4278: LD_VAR 0 7
4282: PPUSH
4283: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4287: LD_VAR 0 7
4291: PPUSH
4292: LD_INT 158
4294: PPUSH
4295: LD_INT 106
4297: PPUSH
4298: CALL_OW 111
// end ; end ;
4302: GO 4148
4304: POP
4305: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4306: LD_OWVAR 1
4310: PUSH
4311: LD_EXP 28
4315: GREATER
4316: IFFALSE 4324
4318: PUSH
4319: LD_EXP 23
4323: AND
4324: IFFALSE 4516
// begin if tick mod 2 2$00 = 0 then
4326: LD_OWVAR 1
4330: PUSH
4331: LD_INT 4200
4333: MOD
4334: PUSH
4335: LD_INT 0
4337: EQUAL
4338: IFFALSE 4516
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4340: LD_ADDR_VAR 0 6
4344: PUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: LD_VAR 0 6
4357: PPUSH
4358: CALL 29838 0 1
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL 32130 0 4
4370: ST_TO_ADDR
// for s := 1 to tmp do
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: DOUBLE
4377: LD_INT 1
4379: DEC
4380: ST_TO_ADDR
4381: LD_VAR 0 6
4385: PUSH
4386: FOR_TO
4387: IFFALSE 4514
// begin i := tmp [ s ] ;
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_VAR 0 6
4398: PUSH
4399: LD_VAR 0 5
4403: ARRAY
4404: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4405: LD_EXP 7
4409: PUSH
4410: LD_VAR 0 2
4414: ARRAY
4415: IFFALSE 4430
4417: PUSH
4418: LD_EXP 25
4422: PUSH
4423: LD_VAR 0 2
4427: ARRAY
4428: NOT
4429: AND
4430: IFFALSE 4444
4432: PUSH
4433: LD_EXP 27
4437: PUSH
4438: LD_VAR 0 2
4442: ARRAY
4443: AND
4444: IFFALSE 4512
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4446: LD_EXP 27
4450: PUSH
4451: LD_VAR 0 2
4455: ARRAY
4456: PUSH
4457: LD_INT 1
4459: ARRAY
4460: PPUSH
4461: LD_INT 7
4463: PPUSH
4464: LD_INT 1
4466: PPUSH
4467: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4471: LD_ADDR_EXP 27
4475: PUSH
4476: LD_EXP 27
4480: PPUSH
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 27
4490: PUSH
4491: LD_VAR 0 2
4495: ARRAY
4496: PPUSH
4497: LD_INT 1
4499: PPUSH
4500: CALL_OW 3
4504: PPUSH
4505: CALL_OW 1
4509: ST_TO_ADDR
// break ;
4510: GO 4514
// end ; end ;
4512: GO 4386
4514: POP
4515: POP
// end ; end ; if not multi_custom_commanders then
4516: LD_EXP 16
4520: NOT
4521: IFFALSE 4636
// begin for i := 1 to 8 do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: DOUBLE
4529: LD_INT 1
4531: DEC
4532: ST_TO_ADDR
4533: LD_INT 8
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4610
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4539: LD_INT 22
4541: PUSH
4542: LD_VAR 0 2
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 69
4555: PUSH
4556: LD_INT 0
4558: EQUAL
4559: IFFALSE 4574
4561: PUSH
4562: LD_EXP 25
4566: PUSH
4567: LD_VAR 0 2
4571: ARRAY
4572: NOT
4573: AND
4574: IFFALSE 4608
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4576: LD_ADDR_EXP 25
4580: PUSH
4581: LD_EXP 25
4585: PPUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 1
4598: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4599: LD_VAR 0 2
4603: PPUSH
4604: CALL 5208 0 1
// end ; end ;
4608: GO 4536
4610: POP
4611: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4612: LD_EXP 25
4616: PPUSH
4617: CALL 29838 0 1
4621: PUSH
4622: LD_EXP 7
4626: PPUSH
4627: CALL 29838 0 1
4631: EQUAL
4632: IFFALSE 4636
// break ;
4634: GO 4660
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4636: CALL 4774 0 0
4640: NOT
4641: IFFALSE 4649
4643: PUSH
4644: LD_EXP 2
4648: AND
4649: IFTRUE 4658
4651: PUSH
4652: LD_EXP 24
4656: NOT
4657: OR
4658: IFFALSE 4118
// game := false ;
4660: LD_ADDR_EXP 2
4664: PUSH
4665: LD_INT 0
4667: ST_TO_ADDR
// for i := 1 to 8 do
4668: LD_ADDR_VAR 0 2
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_INT 8
4680: PUSH
4681: FOR_TO
4682: IFFALSE 4718
// begin if multi_sides [ i ] then
4684: LD_EXP 7
4688: PUSH
4689: LD_VAR 0 2
4693: ARRAY
4694: IFFALSE 4716
// SetMultiScore ( i , multi_points [ i ] ) ;
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_EXP 32
4705: PUSH
4706: LD_VAR 0 2
4710: ARRAY
4711: PPUSH
4712: CALL_OW 506
// end ;
4716: GO 4681
4718: POP
4719: POP
// if multi_loosers [ your_side ] then
4720: LD_EXP 25
4724: PUSH
4725: LD_OWVAR 2
4729: ARRAY
4730: IFFALSE 4753
// begin if Multiplayer then
4732: LD_OWVAR 4
4736: IFFALSE 4744
// YouLostInMultiplayer else
4738: CALL_OW 107
4742: GO 4751
// YouLost (  ) ;
4744: LD_STRING 
4746: PPUSH
4747: CALL_OW 104
// end else
4751: GO 4769
// begin if Multiplayer then
4753: LD_OWVAR 4
4757: IFFALSE 4765
// YouWinInMultiplayer else
4759: CALL_OW 106
4763: GO 4769
// YouWin ;
4765: CALL_OW 103
// end ; end ;
4769: LD_VAR 0 1
4773: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
// result := false ;
4778: LD_ADDR_VAR 0 1
4782: PUSH
4783: LD_INT 0
4785: ST_TO_ADDR
// for side in botSides do
4786: LD_ADDR_VAR 0 2
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: FOR_IN
4797: IFFALSE 4858
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4799: LD_ADDR_VAR 0 1
4803: PUSH
4804: LD_INT 22
4806: PUSH
4807: LD_VAR 0 2
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 21
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 50
4828: PUSH
4829: EMPTY
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: PUSH
4842: LD_INT 0
4844: GREATER
4845: ST_TO_ADDR
// if result then
4846: LD_VAR 0 1
4850: IFFALSE 4856
// exit ;
4852: POP
4853: POP
4854: GO 4860
// end ;
4856: GO 4796
4858: POP
4859: POP
// end ;
4860: LD_VAR 0 1
4864: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4865: LD_INT 0
4867: PPUSH
4868: PPUSH
// result := [ ] ;
4869: LD_ADDR_VAR 0 1
4873: PUSH
4874: EMPTY
4875: ST_TO_ADDR
// for i := 1 to 8 do
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: DOUBLE
4882: LD_INT 1
4884: DEC
4885: ST_TO_ADDR
4886: LD_INT 8
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4947
// begin if multi_sides [ i ] then
4892: LD_EXP 7
4896: PUSH
4897: LD_VAR 0 2
4901: ARRAY
4902: IFFALSE 4945
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4904: LD_ADDR_VAR 0 1
4908: PUSH
4909: LD_VAR 0 1
4913: PUSH
4914: LD_STRING #coop-points
4916: PUSH
4917: LD_VAR 0 2
4921: PUSH
4922: LD_VAR 0 2
4926: PUSH
4927: LD_EXP 32
4931: PUSH
4932: LD_VAR 0 2
4936: ARRAY
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: ADD
4944: ST_TO_ADDR
// end ; end ;
4945: GO 4889
4947: POP
4948: POP
// end ;
4949: LD_VAR 0 1
4953: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4958: LD_ADDR_EXP 32
4962: PUSH
4963: LD_INT 0
4965: PUSH
4966: LD_INT 0
4968: PUSH
4969: LD_INT 0
4971: PUSH
4972: LD_INT 0
4974: PUSH
4975: LD_INT 0
4977: PUSH
4978: LD_INT 0
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: LD_INT 0
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4997: LD_ADDR_EXP 33
5001: PUSH
5002: EMPTY
5003: ST_TO_ADDR
// end ;
5004: LD_VAR 0 1
5008: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
5009: LD_INT 0
5011: PPUSH
// if not multi_points or not side or side > 8 then
5012: LD_EXP 32
5016: NOT
5017: IFTRUE 5026
5019: PUSH
5020: LD_VAR 0 1
5024: NOT
5025: OR
5026: IFTRUE 5038
5028: PUSH
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 8
5036: GREATER
5037: OR
5038: IFFALSE 5042
// exit ;
5040: GO 5079
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5042: LD_ADDR_EXP 32
5046: PUSH
5047: LD_EXP 32
5051: PPUSH
5052: LD_VAR 0 1
5056: PPUSH
5057: LD_EXP 32
5061: PUSH
5062: LD_VAR 0 1
5066: ARRAY
5067: PUSH
5068: LD_VAR 0 2
5072: PLUS
5073: PPUSH
5074: CALL_OW 1
5078: ST_TO_ADDR
// end ;
5079: LD_VAR 0 3
5083: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5084: LD_INT 0
5086: PPUSH
// if not multi_points or not side or side > 8 then
5087: LD_EXP 32
5091: NOT
5092: IFTRUE 5101
5094: PUSH
5095: LD_VAR 0 1
5099: NOT
5100: OR
5101: IFTRUE 5113
5103: PUSH
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 8
5111: GREATER
5112: OR
5113: IFFALSE 5117
// exit ;
5115: GO 5133
// result := multi_points [ side ] ;
5117: LD_ADDR_VAR 0 2
5121: PUSH
5122: LD_EXP 32
5126: PUSH
5127: LD_VAR 0 1
5131: ARRAY
5132: ST_TO_ADDR
// end ;
5133: LD_VAR 0 2
5137: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5138: LD_INT 0
5140: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5141: LD_ADDR_EXP 33
5145: PUSH
5146: LD_EXP 33
5150: PPUSH
5151: LD_EXP 33
5155: PUSH
5156: LD_INT 1
5158: PLUS
5159: PPUSH
5160: LD_VAR 0 1
5164: PPUSH
5165: CALL_OW 1
5169: ST_TO_ADDR
// end ;
5170: LD_VAR 0 2
5174: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5175: LD_INT 0
5177: PPUSH
// if not id then
5178: LD_VAR 0 1
5182: NOT
5183: IFFALSE 5187
// exit ;
5185: GO 5203
// result := multi_points_conditions [ id ] ;
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_EXP 33
5196: PUSH
5197: LD_VAR 0 1
5201: ARRAY
5202: ST_TO_ADDR
// end ;
5203: LD_VAR 0 2
5207: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
5212: PPUSH
5213: PPUSH
5214: PPUSH
// players := [ ] ;
5215: LD_ADDR_VAR 0 3
5219: PUSH
5220: EMPTY
5221: ST_TO_ADDR
// for i = 1 to 8 do
5222: LD_ADDR_VAR 0 4
5226: PUSH
5227: DOUBLE
5228: LD_INT 1
5230: DEC
5231: ST_TO_ADDR
5232: LD_INT 8
5234: PUSH
5235: FOR_TO
5236: IFFALSE 5297
// begin if i = side then
5238: LD_VAR 0 4
5242: PUSH
5243: LD_VAR 0 1
5247: EQUAL
5248: IFFALSE 5252
// continue ;
5250: GO 5235
// if multi_sides [ i ] and not multi_loosers [ i ] then
5252: LD_EXP 7
5256: PUSH
5257: LD_VAR 0 4
5261: ARRAY
5262: IFFALSE 5277
5264: PUSH
5265: LD_EXP 25
5269: PUSH
5270: LD_VAR 0 4
5274: ARRAY
5275: NOT
5276: AND
5277: IFFALSE 5295
// players := players ^ i ;
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_VAR 0 3
5288: PUSH
5289: LD_VAR 0 4
5293: ADD
5294: ST_TO_ADDR
// end ;
5295: GO 5235
5297: POP
5298: POP
// if not players then
5299: LD_VAR 0 3
5303: NOT
5304: IFFALSE 5308
// exit ;
5306: GO 5575
// if players = 1 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 1
5315: EQUAL
5316: IFFALSE 5377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5318: LD_ADDR_VAR 0 4
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_VAR 0 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 51
5337: PUSH
5338: EMPTY
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: PUSH
5350: FOR_IN
5351: IFFALSE 5373
// SetSide ( i , players [ 1 ] ) ;
5353: LD_VAR 0 4
5357: PPUSH
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 1
5365: ARRAY
5366: PPUSH
5367: CALL_OW 235
5371: GO 5350
5373: POP
5374: POP
// end else
5375: GO 5575
// begin j := 1 ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_INT 1
5384: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5385: LD_ADDR_VAR 0 4
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_VAR 0 1
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: LD_INT 2
5404: PUSH
5405: LD_INT 21
5407: PUSH
5408: LD_INT 1
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 51
5417: PUSH
5418: EMPTY
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PUSH
5425: LD_INT 21
5427: PUSH
5428: LD_INT 2
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 69
5448: PUSH
5449: FOR_IN
5450: IFFALSE 5573
// begin SetSide ( i , players [ j ] ) ;
5452: LD_VAR 0 4
5456: PPUSH
5457: LD_VAR 0 3
5461: PUSH
5462: LD_VAR 0 5
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// if IsDrivenBy ( i ) then
5472: LD_VAR 0 4
5476: PPUSH
5477: CALL_OW 311
5481: IFFALSE 5508
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5483: LD_VAR 0 4
5487: PPUSH
5488: CALL_OW 311
5492: PPUSH
5493: LD_VAR 0 3
5497: PUSH
5498: LD_VAR 0 5
5502: ARRAY
5503: PPUSH
5504: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5508: LD_VAR 0 4
5512: PPUSH
5513: CALL_OW 310
5517: PPUSH
5518: CALL_OW 247
5522: PUSH
5523: LD_INT 3
5525: EQUAL
5526: IFFALSE 5537
// ComExitBuilding ( i ) ;
5528: LD_VAR 0 4
5532: PPUSH
5533: CALL_OW 122
// j := j + 1 ;
5537: LD_ADDR_VAR 0 5
5541: PUSH
5542: LD_VAR 0 5
5546: PUSH
5547: LD_INT 1
5549: PLUS
5550: ST_TO_ADDR
// if j > players then
5551: LD_VAR 0 5
5555: PUSH
5556: LD_VAR 0 3
5560: GREATER
5561: IFFALSE 5571
// j := 1 ;
5563: LD_ADDR_VAR 0 5
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// end ;
5571: GO 5449
5573: POP
5574: POP
// end ; end ;
5575: LD_VAR 0 2
5579: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5580: LD_INT 0
5582: PPUSH
5583: PPUSH
5584: PPUSH
// i := 3 ;
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: LD_INT 3
5592: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_INT 5
5600: PUSH
5601: LD_INT 10
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 120
5610: PUSH
5611: LD_INT 2
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 101
5620: PUSH
5621: LD_INT 8
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 27
5630: PUSH
5631: LD_INT 4
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5644: LD_INT 4
5646: PPUSH
5647: LD_INT 5
5649: PPUSH
5650: LD_VAR 0 3
5654: PUSH
5655: LD_VAR 0 2
5659: ARRAY
5660: PUSH
5661: LD_INT 1
5663: ARRAY
5664: PPUSH
5665: LD_VAR 0 3
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PUSH
5676: LD_INT 2
5678: ARRAY
5679: PPUSH
5680: LD_INT 0
5682: PPUSH
5683: CALL_OW 58
// end ;
5687: LD_VAR 0 1
5691: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5692: LD_INT 0
5694: PPUSH
// if not side or side > 8 then
5695: LD_VAR 0 1
5699: NOT
5700: IFTRUE 5712
5702: PUSH
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 8
5710: GREATER
5711: OR
5712: IFFALSE 5716
// exit ;
5714: GO 5733
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5716: LD_VAR 0 1
5720: PPUSH
5721: LD_INT 6
5723: PPUSH
5724: CALL 5175 0 1
5728: PPUSH
5729: CALL 5009 0 2
// end ;
5733: LD_VAR 0 2
5737: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5738: LD_INT 0
5740: PPUSH
// if not side or side > 8 then
5741: LD_VAR 0 1
5745: NOT
5746: IFTRUE 5758
5748: PUSH
5749: LD_VAR 0 1
5753: PUSH
5754: LD_INT 8
5756: GREATER
5757: OR
5758: IFFALSE 5762
// exit ;
5760: GO 5779
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5762: LD_VAR 0 1
5766: PPUSH
5767: LD_INT 4
5769: PPUSH
5770: CALL 5175 0 1
5774: PPUSH
5775: CALL 5009 0 2
// end ;
5779: LD_VAR 0 2
5783: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5784: LD_INT 0
5786: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5787: LD_VAR 0 1
5791: NOT
5792: IFTRUE 5804
5794: PUSH
5795: LD_VAR 0 1
5799: PUSH
5800: LD_INT 8
5802: GREATER
5803: OR
5804: IFTRUE 5832
5806: PUSH
5807: LD_VAR 0 2
5811: PUSH
5812: LD_INT 2
5814: PUSH
5815: LD_INT 6
5817: PUSH
5818: LD_INT 36
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: IN
5830: NOT
5831: OR
5832: IFFALSE 5836
// exit ;
5834: GO 5853
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 3
5843: PPUSH
5844: CALL 5175 0 1
5848: PPUSH
5849: CALL 5009 0 2
// end ;
5853: LD_VAR 0 3
5857: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5858: LD_INT 0
5860: PPUSH
5861: PPUSH
// if not un then
5862: LD_VAR 0 1
5866: NOT
5867: IFFALSE 5871
// exit ;
5869: GO 5917
// if not points then
5871: LD_VAR 0 3
5875: NOT
5876: IFFALSE 5893
// gained_points := Multiplayer_GetCondition ( 1 ) else
5878: LD_ADDR_VAR 0 5
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL 5175 0 1
5890: ST_TO_ADDR
5891: GO 5903
// gained_points := points ;
5893: LD_ADDR_VAR 0 5
5897: PUSH
5898: LD_VAR 0 3
5902: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 5
5912: PPUSH
5913: CALL 5009 0 2
5917: LD_VAR 0 4
5921: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5922: LD_INT 0
5924: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5925: LD_VAR 0 1
5929: PPUSH
5930: LD_INT 2
5932: PPUSH
5933: CALL 5175 0 1
5937: PPUSH
5938: CALL 5009 0 2
// end ; end_of_file
5942: LD_VAR 0 2
5946: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
5957: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5958: LD_ADDR_EXP 35
5962: PUSH
5963: LD_VAR 0 1
5967: PPUSH
5968: LD_INT 1
5970: PPUSH
5971: LD_INT 1
5973: PPUSH
5974: CALL 27785 0 3
5978: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5979: LD_ADDR_EXP 36
5983: PUSH
5984: LD_INT 4
5986: PUSH
5987: LD_INT 1
5989: PUSH
5990: LD_INT 1
5992: PUSH
5993: LD_INT 6
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 1
6007: PUSH
6008: LD_INT 1
6010: PUSH
6011: LD_INT 5
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 3
6022: PUSH
6023: LD_INT 1
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 2
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 1
6061: PUSH
6062: LD_INT 1
6064: PUSH
6065: LD_INT 3
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: ST_TO_ADDR
// amBuildings := [ ] ;
6081: LD_ADDR_EXP 37
6085: PUSH
6086: EMPTY
6087: ST_TO_ADDR
// amVehicles := [ ] ;
6088: LD_ADDR_EXP 38
6092: PUSH
6093: EMPTY
6094: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6095: LD_ADDR_EXP 39
6099: PUSH
6100: EMPTY
6101: ST_TO_ADDR
// amDrivers := [ ] ;
6102: LD_ADDR_EXP 40
6106: PUSH
6107: EMPTY
6108: ST_TO_ADDR
// amVehiclesCounter := 2 ;
6109: LD_ADDR_EXP 41
6113: PUSH
6114: LD_INT 2
6116: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6117: LD_ADDR_EXP 44
6121: PUSH
6122: LD_INT 6
6124: PUSH
6125: LD_INT 8
6127: PUSH
6128: LD_INT 10
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_OWVAR 67
6140: ARRAY
6141: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6142: LD_ADDR_VAR 0 8
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_INT 4
6152: PUSH
6153: LD_INT 5
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: LD_OWVAR 67
6165: ARRAY
6166: ST_TO_ADDR
// uc_side := side ;
6167: LD_ADDR_OWVAR 20
6171: PUSH
6172: LD_VAR 0 1
6176: ST_TO_ADDR
// uc_nation := nation_american ;
6177: LD_ADDR_OWVAR 21
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// hc_gallery := us ;
6185: LD_ADDR_OWVAR 33
6189: PUSH
6190: LD_STRING us
6192: ST_TO_ADDR
// hc_face_number := 19 ;
6193: LD_ADDR_OWVAR 34
6197: PUSH
6198: LD_INT 19
6200: ST_TO_ADDR
// hc_importance := 100 ;
6201: LD_ADDR_OWVAR 32
6205: PUSH
6206: LD_INT 100
6208: ST_TO_ADDR
// hc_name := Sikorski ;
6209: LD_ADDR_OWVAR 26
6213: PUSH
6214: LD_STRING Sikorski
6216: ST_TO_ADDR
// hc_sex := sex_male ;
6217: LD_ADDR_OWVAR 27
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6225: LD_ADDR_OWVAR 31
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: LD_INT 3
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6248: LD_ADDR_OWVAR 29
6252: PUSH
6253: LD_INT 10
6255: PUSH
6256: LD_INT 11
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: ST_TO_ADDR
// Sikorski := CreateHuman ;
6263: LD_ADDR_EXP 34
6267: PUSH
6268: CALL_OW 44
6272: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 1
6280: PPUSH
6281: CALL_OW 52
// InitHC_All ( ) ;
6285: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6289: LD_ADDR_EXP 42
6293: PUSH
6294: LD_INT 1
6296: PPUSH
6297: LD_INT 3
6299: PPUSH
6300: LD_STRING 
6302: PPUSH
6303: LD_VAR 0 8
6307: PPUSH
6308: LD_INT 800
6310: PUSH
6311: LD_INT 120
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: PPUSH
6322: LD_INT 10
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_OWVAR 67
6340: ARRAY
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 6
6347: PUSH
6348: LD_INT 3
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL 36437 0 6
6361: ST_TO_ADDR
// amForceTmp := [ ] ;
6362: LD_ADDR_EXP 43
6366: PUSH
6367: EMPTY
6368: ST_TO_ADDR
// if Difficulty = 3 then
6369: LD_OWVAR 67
6373: PUSH
6374: LD_INT 3
6376: EQUAL
6377: IFFALSE 6408
// begin bc_type := b_breastwork ;
6379: LD_ADDR_OWVAR 42
6383: PUSH
6384: LD_INT 31
6386: ST_TO_ADDR
// bc_level := 7 ;
6387: LD_ADDR_OWVAR 43
6391: PUSH
6392: LD_INT 7
6394: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6395: LD_INT 79
6397: PPUSH
6398: LD_INT 72
6400: PPUSH
6401: LD_INT 5
6403: PPUSH
6404: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 30
6427: PUSH
6428: LD_INT 31
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 95
6440: PUSH
6441: LD_INT 3
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 58
6454: PUSH
6455: EMPTY
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 69
6468: PUSH
6469: FOR_IN
6470: IFFALSE 6599
// begin d := GetDir ( i ) ;
6472: LD_ADDR_VAR 0 4
6476: PUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 254
6486: ST_TO_ADDR
// if d < 3 then
6487: LD_VAR 0 4
6491: PUSH
6492: LD_INT 3
6494: LESS
6495: IFFALSE 6513
// d := d + 3 else
6497: LD_ADDR_VAR 0 4
6501: PUSH
6502: LD_VAR 0 4
6506: PUSH
6507: LD_INT 3
6509: PLUS
6510: ST_TO_ADDR
6511: GO 6527
// d := d - 3 ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 3
6525: MINUS
6526: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6527: LD_INT 0
6529: PPUSH
6530: LD_VAR 0 8
6534: PPUSH
6535: CALL_OW 381
// un := CreateHuman ;
6539: LD_ADDR_VAR 0 6
6543: PUSH
6544: CALL_OW 44
6548: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6549: LD_ADDR_EXP 43
6553: PUSH
6554: LD_EXP 43
6558: PPUSH
6559: LD_VAR 0 6
6563: PPUSH
6564: CALL 65770 0 2
6568: ST_TO_ADDR
// SetDir ( un , d ) ;
6569: LD_VAR 0 6
6573: PPUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_VAR 0 3
6592: PPUSH
6593: CALL_OW 52
// end ;
6597: GO 6469
6599: POP
6600: POP
// for i := 1 to 3 do
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: DOUBLE
6607: LD_INT 1
6609: DEC
6610: ST_TO_ADDR
6611: LD_INT 3
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6676
// begin PrepareEngineer ( false , skill ) ;
6617: LD_INT 0
6619: PPUSH
6620: LD_VAR 0 8
6624: PPUSH
6625: CALL_OW 382
// un := CreateHuman ;
6629: LD_ADDR_VAR 0 6
6633: PUSH
6634: CALL_OW 44
6638: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6639: LD_VAR 0 6
6643: PPUSH
6644: LD_INT 29
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6654: LD_ADDR_EXP 43
6658: PUSH
6659: LD_EXP 43
6663: PPUSH
6664: LD_VAR 0 6
6668: PPUSH
6669: CALL 65770 0 2
6673: ST_TO_ADDR
// end ;
6674: GO 6614
6676: POP
6677: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6678: LD_ADDR_VAR 0 3
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_VAR 0 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 21
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 69
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6748
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6717: LD_VAR 0 3
6721: PPUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 5
6727: PUSH
6728: LD_INT 7
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: LD_OWVAR 67
6740: ARRAY
6741: PPUSH
6742: CALL_OW 241
6746: GO 6714
6748: POP
6749: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 69
6785: PUSH
6786: FOR_IN
6787: IFFALSE 6828
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6789: LD_VAR 0 3
6793: PPUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: LD_VAR 0 3
6812: PUSH
6813: LD_INT 3
6815: MOD
6816: PUSH
6817: LD_INT 1
6819: PLUS
6820: ARRAY
6821: PPUSH
6822: CALL_OW 431
6826: GO 6786
6828: POP
6829: POP
// end ;
6830: LD_VAR 0 2
6834: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6835: LD_INT 0
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
6843: PPUSH
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
6862: PPUSH
6863: PPUSH
// enable ;
6864: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6865: LD_ADDR_VAR 0 11
6869: PUSH
6870: LD_INT 81
6872: PUSH
6873: LD_VAR 0 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: ST_TO_ADDR
// if tmp then
6887: LD_VAR 0 11
6891: IFFALSE 6912
// enemySide := GetSide ( tmp [ 1 ] ) ;
6893: LD_ADDR_VAR 0 35
6897: PUSH
6898: LD_VAR 0 11
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: CALL_OW 255
6911: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
6912: LD_ADDR_VAR 0 23
6916: PUSH
6917: LD_VAR 0 4
6921: PPUSH
6922: LD_INT 81
6924: PUSH
6925: LD_VAR 0 1
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 70
6938: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6939: LD_ADDR_VAR 0 24
6943: PUSH
6944: LD_VAR 0 5
6948: PPUSH
6949: LD_INT 81
6951: PUSH
6952: LD_VAR 0 1
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 70
6965: ST_TO_ADDR
// vehicles := amVehicles ;
6966: LD_ADDR_VAR 0 27
6970: PUSH
6971: LD_EXP 38
6975: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6976: LD_ADDR_VAR 0 33
6980: PUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_INT 22
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 30
7003: PUSH
7004: LD_INT 0
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 30
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 70
7034: ST_TO_ADDR
// if depot then
7035: LD_VAR 0 33
7039: IFFALSE 7055
// depot := depot [ 1 ] ;
7041: LD_ADDR_VAR 0 33
7045: PUSH
7046: LD_VAR 0 33
7050: PUSH
7051: LD_INT 1
7053: ARRAY
7054: ST_TO_ADDR
// if amTech then
7055: LD_EXP 35
7059: IFFALSE 7218
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7061: LD_ADDR_VAR 0 13
7065: PUSH
7066: LD_VAR 0 3
7070: PPUSH
7071: LD_INT 22
7073: PUSH
7074: LD_VAR 0 1
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 50
7085: PUSH
7086: EMPTY
7087: LIST
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 30
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 30
7104: PUSH
7105: LD_INT 7
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 30
7114: PUSH
7115: LD_INT 8
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: PPUSH
7133: CALL_OW 70
7137: ST_TO_ADDR
// if lab then
7138: LD_VAR 0 13
7142: IFFALSE 7218
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7144: LD_VAR 0 13
7148: PUSH
7149: LD_INT 1
7151: ARRAY
7152: PPUSH
7153: CALL_OW 461
7157: PUSH
7158: LD_INT 2
7160: EQUAL
7161: IFFALSE 7218
// begin for i in amTech do
7163: LD_ADDR_VAR 0 10
7167: PUSH
7168: LD_EXP 35
7172: PUSH
7173: FOR_IN
7174: IFFALSE 7216
// if CanBeResearched ( lab [ 1 ] , i ) then
7176: LD_VAR 0 13
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 10
7189: PPUSH
7190: CALL_OW 430
7194: IFFALSE 7214
// begin AddComResearch ( lab [ 1 ] , i ) ;
7196: LD_VAR 0 13
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: PPUSH
7205: LD_VAR 0 10
7209: PPUSH
7210: CALL_OW 184
// end ;
7214: GO 7173
7216: POP
7217: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7218: LD_ADDR_VAR 0 30
7222: PUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_INT 22
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 30
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 50
7252: PUSH
7253: EMPTY
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 70
7265: ST_TO_ADDR
// if fac then
7266: LD_VAR 0 30
7270: IFFALSE 7605
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7272: LD_VAR 0 30
7276: PUSH
7277: LD_INT 1
7279: ARRAY
7280: PPUSH
7281: CALL_OW 461
7285: PUSH
7286: LD_INT 2
7288: EQUAL
7289: IFFALSE 7605
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7291: LD_ADDR_VAR 0 31
7295: PUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 32
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 33
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 35
7331: PUSH
7332: LD_INT 0
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL_OW 70
7347: ST_TO_ADDR
// if emptyTowers then
7348: LD_VAR 0 31
7352: IFFALSE 7402
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7354: LD_ADDR_VAR 0 32
7358: PUSH
7359: LD_VAR 0 31
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: CALL 38129 0 2
7377: ST_TO_ADDR
// if weapon then
7378: LD_VAR 0 32
7382: IFFALSE 7402
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7384: LD_VAR 0 31
7388: PUSH
7389: LD_INT 1
7391: ARRAY
7392: PPUSH
7393: LD_VAR 0 32
7397: PPUSH
7398: CALL_OW 148
// end ; if amConstructList then
7402: LD_EXP 36
7406: IFFALSE 7605
// for i := 1 to Count ( amConstructList ) do
7408: LD_ADDR_VAR 0 10
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_EXP 36
7422: PPUSH
7423: CALL 29838 0 1
7427: PUSH
7428: FOR_TO
7429: IFFALSE 7603
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7431: LD_VAR 0 30
7435: PUSH
7436: LD_INT 1
7438: ARRAY
7439: PPUSH
7440: LD_EXP 36
7444: PUSH
7445: LD_VAR 0 10
7449: ARRAY
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_EXP 36
7459: PUSH
7460: LD_VAR 0 10
7464: ARRAY
7465: PUSH
7466: LD_INT 2
7468: ARRAY
7469: PPUSH
7470: LD_EXP 36
7474: PUSH
7475: LD_VAR 0 10
7479: ARRAY
7480: PUSH
7481: LD_INT 3
7483: ARRAY
7484: PPUSH
7485: LD_EXP 36
7489: PUSH
7490: LD_VAR 0 10
7494: ARRAY
7495: PUSH
7496: LD_INT 4
7498: ARRAY
7499: PPUSH
7500: CALL_OW 448
7504: IFFALSE 7601
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7506: LD_VAR 0 30
7510: PUSH
7511: LD_INT 1
7513: ARRAY
7514: PPUSH
7515: LD_EXP 36
7519: PUSH
7520: LD_VAR 0 10
7524: ARRAY
7525: PUSH
7526: LD_INT 1
7528: ARRAY
7529: PPUSH
7530: LD_EXP 36
7534: PUSH
7535: LD_VAR 0 10
7539: ARRAY
7540: PUSH
7541: LD_INT 2
7543: ARRAY
7544: PPUSH
7545: LD_EXP 36
7549: PUSH
7550: LD_VAR 0 10
7554: ARRAY
7555: PUSH
7556: LD_INT 3
7558: ARRAY
7559: PPUSH
7560: LD_EXP 36
7564: PUSH
7565: LD_VAR 0 10
7569: ARRAY
7570: PUSH
7571: LD_INT 4
7573: ARRAY
7574: PPUSH
7575: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7579: LD_ADDR_EXP 36
7583: PUSH
7584: LD_EXP 36
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 3
7598: ST_TO_ADDR
// break ;
7599: GO 7603
// end ; end ;
7601: GO 7428
7603: POP
7604: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7605: LD_ADDR_VAR 0 11
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_INT 22
7617: PUSH
7618: LD_VAR 0 1
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 21
7629: PUSH
7630: LD_INT 3
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 57
7642: PUSH
7643: EMPTY
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: LD_INT 24
7655: PUSH
7656: LD_INT 1000
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 70
7677: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7678: LD_ADDR_VAR 0 18
7682: PUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 435
7692: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7693: LD_ADDR_VAR 0 15
7697: PUSH
7698: LD_VAR 0 6
7702: PPUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 50
7715: PUSH
7716: EMPTY
7717: LIST
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PPUSH
7723: CALL_OW 72
7727: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7728: LD_VAR 0 15
7732: PPUSH
7733: LD_INT 3
7735: PUSH
7736: LD_INT 120
7738: PUSH
7739: LD_INT 7
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 3
7752: PUSH
7753: LD_INT 54
7755: PUSH
7756: EMPTY
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: IFFALSE 7788
7773: PUSH
7774: LD_VAR 0 30
7778: PUSH
7779: LD_INT 1
7781: ARRAY
7782: PPUSH
7783: CALL_OW 302
7787: AND
7788: IFFALSE 7847
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7790: LD_VAR 0 15
7794: PPUSH
7795: LD_INT 3
7797: PUSH
7798: LD_INT 120
7800: PUSH
7801: LD_INT 7
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: LD_INT 54
7817: PUSH
7818: EMPTY
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 72
7833: PPUSH
7834: LD_VAR 0 30
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PPUSH
7843: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7847: LD_ADDR_VAR 0 19
7851: PUSH
7852: LD_VAR 0 6
7856: PPUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 4
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 50
7869: PUSH
7870: EMPTY
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 72
7881: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7882: LD_ADDR_VAR 0 13
7886: PUSH
7887: LD_VAR 0 3
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 30
7897: PUSH
7898: LD_INT 6
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 30
7907: PUSH
7908: LD_INT 7
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 30
7917: PUSH
7918: LD_INT 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PPUSH
7931: CALL_OW 70
7935: ST_TO_ADDR
// if sci then
7936: LD_VAR 0 19
7940: IFFALSE 8101
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7942: LD_ADDR_VAR 0 21
7946: PUSH
7947: LD_VAR 0 6
7951: PPUSH
7952: LD_INT 95
7954: PUSH
7955: LD_VAR 0 3
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 120
7966: PUSH
7967: LD_INT 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 72
7982: ST_TO_ADDR
// if hurtUnits then
7983: LD_VAR 0 21
7987: IFFALSE 8048
// begin for i in sci do
7989: LD_ADDR_VAR 0 10
7993: PUSH
7994: LD_VAR 0 19
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8044
// if IsInUnit ( i ) then
8002: LD_VAR 0 10
8006: PPUSH
8007: CALL_OW 310
8011: IFFALSE 8024
// ComExitBuilding ( i ) else
8013: LD_VAR 0 10
8017: PPUSH
8018: CALL_OW 122
8022: GO 8042
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8024: LD_VAR 0 10
8028: PPUSH
8029: LD_VAR 0 21
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: CALL_OW 128
8042: GO 7999
8044: POP
8045: POP
// end else
8046: GO 8101
// if lab then
8048: LD_VAR 0 13
8052: IFFALSE 8101
// begin for i in sci do
8054: LD_ADDR_VAR 0 10
8058: PUSH
8059: LD_VAR 0 19
8063: PUSH
8064: FOR_IN
8065: IFFALSE 8099
// if not IsInUnit ( i ) then
8067: LD_VAR 0 10
8071: PPUSH
8072: CALL_OW 310
8076: NOT
8077: IFFALSE 8097
// ComEnterUnit ( i , lab [ 1 ] ) ;
8079: LD_VAR 0 10
8083: PPUSH
8084: LD_VAR 0 13
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PPUSH
8093: CALL_OW 120
8097: GO 8064
8099: POP
8100: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8101: LD_ADDR_VAR 0 14
8105: PUSH
8106: LD_VAR 0 6
8110: PPUSH
8111: LD_INT 25
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PPUSH
8121: CALL_OW 72
8125: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8126: LD_ADDR_VAR 0 34
8130: PUSH
8131: LD_EXP 37
8135: ST_TO_ADDR
// if eng then
8136: LD_VAR 0 14
8140: IFFALSE 8988
// begin for i in eng do
8142: LD_ADDR_VAR 0 10
8146: PUSH
8147: LD_VAR 0 14
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8986
// begin tag := GetTag ( i ) ;
8155: LD_ADDR_VAR 0 16
8159: PUSH
8160: LD_VAR 0 10
8164: PPUSH
8165: CALL_OW 110
8169: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8170: LD_VAR 0 10
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 308
8184: IFFALSE 8215
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8186: LD_VAR 0 10
8190: PPUSH
8191: LD_VAR 0 8
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 8
8204: PUSH
8205: LD_INT 2
8207: ARRAY
8208: PPUSH
8209: CALL_OW 111
// continue ;
8213: GO 8152
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8215: LD_VAR 0 10
8219: PPUSH
8220: CALL_OW 256
8224: PUSH
8225: LD_INT 800
8227: LESS
8228: IFFALSE 8240
8230: PUSH
8231: LD_VAR 0 16
8235: PUSH
8236: LD_INT 1
8238: NONEQUAL
8239: AND
8240: IFFALSE 8290
// begin SetTag ( i , tHeal ) ;
8242: LD_VAR 0 10
8246: PPUSH
8247: LD_INT 1
8249: PPUSH
8250: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8254: LD_VAR 0 10
8258: PPUSH
8259: LD_VAR 0 7
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 7
8272: PUSH
8273: LD_INT 2
8275: ARRAY
8276: PPUSH
8277: CALL_OW 111
// AddComHold ( i ) ;
8281: LD_VAR 0 10
8285: PPUSH
8286: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8290: LD_VAR 0 16
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: IFFALSE 8315
8300: PUSH
8301: LD_VAR 0 10
8305: PPUSH
8306: CALL_OW 256
8310: PUSH
8311: LD_INT 1000
8313: EQUAL
8314: AND
8315: IFFALSE 8329
// SetTag ( i , 0 ) ;
8317: LD_VAR 0 10
8321: PPUSH
8322: LD_INT 0
8324: PPUSH
8325: CALL_OW 109
// if not tag then
8329: LD_VAR 0 16
8333: NOT
8334: IFFALSE 8505
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8336: LD_ADDR_VAR 0 12
8340: PUSH
8341: LD_VAR 0 3
8345: PPUSH
8346: LD_INT 57
8348: PUSH
8349: EMPTY
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if undone then
8357: LD_VAR 0 12
8361: IFFALSE 8383
// begin ComComplete ( i , undone [ 1 ] ) ;
8363: LD_VAR 0 10
8367: PPUSH
8368: LD_VAR 0 12
8372: PUSH
8373: LD_INT 1
8375: ARRAY
8376: PPUSH
8377: CALL 35974 0 2
// continue ;
8381: GO 8152
// end ; if cr or tmp or buildingsToBuild then
8383: LD_VAR 0 18
8387: IFTRUE 8395
8389: PUSH
8390: LD_VAR 0 11
8394: OR
8395: IFTRUE 8403
8397: PUSH
8398: LD_VAR 0 34
8402: OR
8403: IFFALSE 8479
// begin if IsInUnit ( i ) then
8405: LD_VAR 0 10
8409: PPUSH
8410: CALL_OW 310
8414: IFFALSE 8425
// ComExitBuilding ( i ) ;
8416: LD_VAR 0 10
8420: PPUSH
8421: CALL_OW 122
// if tmp then
8425: LD_VAR 0 11
8429: IFFALSE 8445
// SetTag ( i , tRepair ) else
8431: LD_VAR 0 10
8435: PPUSH
8436: LD_INT 3
8438: PPUSH
8439: CALL_OW 109
8443: GO 8477
// if cr then
8445: LD_VAR 0 18
8449: IFFALSE 8465
// SetTag ( i , tCrates ) else
8451: LD_VAR 0 10
8455: PPUSH
8456: LD_INT 2
8458: PPUSH
8459: CALL_OW 109
8463: GO 8477
// SetTag ( i , tBuild ) ;
8465: LD_VAR 0 10
8469: PPUSH
8470: LD_INT 5
8472: PPUSH
8473: CALL_OW 109
// end else
8477: GO 8505
// if not IsInUnit ( i ) then
8479: LD_VAR 0 10
8483: PPUSH
8484: CALL_OW 310
8488: NOT
8489: IFFALSE 8505
// ComEnterUnit ( i , depot ) ;
8491: LD_VAR 0 10
8495: PPUSH
8496: LD_VAR 0 33
8500: PPUSH
8501: CALL_OW 120
// end ; if tag = tRepair then
8505: LD_VAR 0 16
8509: PUSH
8510: LD_INT 3
8512: EQUAL
8513: IFFALSE 8619
// begin if IsInUnit ( i ) then
8515: LD_VAR 0 10
8519: PPUSH
8520: CALL_OW 310
8524: IFFALSE 8537
// begin ComExitBuilding ( i ) ;
8526: LD_VAR 0 10
8530: PPUSH
8531: CALL_OW 122
// continue ;
8535: GO 8152
// end ; if not tmp then
8537: LD_VAR 0 11
8541: NOT
8542: IFFALSE 8558
// begin SetTag ( i , 0 ) ;
8544: LD_VAR 0 10
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 109
// continue ;
8556: GO 8152
// end ; if not HasTask ( i ) then
8558: LD_VAR 0 10
8562: PPUSH
8563: CALL_OW 314
8567: NOT
8568: IFFALSE 8588
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8570: LD_VAR 0 10
8574: PPUSH
8575: LD_VAR 0 11
8579: PUSH
8580: LD_INT 1
8582: ARRAY
8583: PPUSH
8584: CALL_OW 130
// if not IsInarea ( i , area ) then
8588: LD_VAR 0 10
8592: PPUSH
8593: LD_VAR 0 3
8597: PPUSH
8598: CALL_OW 308
8602: NOT
8603: IFFALSE 8619
// ComMoveToarea ( i , area ) ;
8605: LD_VAR 0 10
8609: PPUSH
8610: LD_VAR 0 3
8614: PPUSH
8615: CALL_OW 113
// end ; if tag = tBuild then
8619: LD_VAR 0 16
8623: PUSH
8624: LD_INT 5
8626: EQUAL
8627: IFFALSE 8837
// begin if IsInUnit ( i ) then
8629: LD_VAR 0 10
8633: PPUSH
8634: CALL_OW 310
8638: IFFALSE 8651
// begin ComExitBuilding ( i ) ;
8640: LD_VAR 0 10
8644: PPUSH
8645: CALL_OW 122
// continue ;
8649: GO 8152
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8651: LD_VAR 0 34
8655: NOT
8656: IFTRUE 8664
8658: PUSH
8659: LD_VAR 0 23
8663: OR
8664: IFTRUE 8672
8666: PUSH
8667: LD_VAR 0 24
8671: OR
8672: IFFALSE 8690
// begin SetTag ( i , 0 ) ;
8674: LD_VAR 0 10
8678: PPUSH
8679: LD_INT 0
8681: PPUSH
8682: CALL_OW 109
// continue ;
8686: GO 8152
// end else
8688: GO 8729
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8690: LD_VAR 0 33
8694: PPUSH
8695: LD_VAR 0 34
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: PUSH
8704: LD_INT 1
8706: ARRAY
8707: PPUSH
8708: CALL 69865 0 2
8712: NOT
8713: IFFALSE 8729
// begin SetTag ( i , 0 ) ;
8715: LD_VAR 0 10
8719: PPUSH
8720: LD_INT 0
8722: PPUSH
8723: CALL_OW 109
// continue ;
8727: GO 8152
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8729: LD_ADDR_VAR 0 12
8733: PUSH
8734: LD_VAR 0 3
8738: PPUSH
8739: LD_INT 57
8741: PUSH
8742: EMPTY
8743: LIST
8744: PPUSH
8745: CALL_OW 70
8749: ST_TO_ADDR
// if undone then
8750: LD_VAR 0 12
8754: IFFALSE 8776
// begin ComComplete ( i , undone [ 1 ] ) ;
8756: LD_VAR 0 10
8760: PPUSH
8761: LD_VAR 0 12
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: CALL 35974 0 2
// continue ;
8774: GO 8152
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8776: LD_VAR 0 10
8780: PPUSH
8781: LD_VAR 0 34
8785: PUSH
8786: LD_INT 1
8788: ARRAY
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PPUSH
8794: LD_VAR 0 34
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PUSH
8803: LD_INT 2
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 34
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PUSH
8816: LD_INT 3
8818: ARRAY
8819: PPUSH
8820: LD_VAR 0 34
8824: PUSH
8825: LD_INT 1
8827: ARRAY
8828: PUSH
8829: LD_INT 4
8831: ARRAY
8832: PPUSH
8833: CALL_OW 145
// end ; if tag = tCrates then
8837: LD_VAR 0 16
8841: PUSH
8842: LD_INT 2
8844: EQUAL
8845: IFFALSE 8984
// begin if IsInUnit ( i ) then
8847: LD_VAR 0 10
8851: PPUSH
8852: CALL_OW 310
8856: IFFALSE 8869
// begin ComExitBuilding ( i ) ;
8858: LD_VAR 0 10
8862: PPUSH
8863: CALL_OW 122
// continue ;
8867: GO 8152
// end ; if not cr then
8869: LD_VAR 0 18
8873: NOT
8874: IFFALSE 8890
// begin SetTag ( i , 0 ) ;
8876: LD_VAR 0 10
8880: PPUSH
8881: LD_INT 0
8883: PPUSH
8884: CALL_OW 109
// continue ;
8888: GO 8152
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8890: LD_VAR 0 10
8894: PPUSH
8895: CALL_OW 314
8899: NOT
8900: IFFALSE 8955
8902: PUSH
8903: LD_INT 81
8905: PUSH
8906: LD_VAR 0 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 92
8917: PUSH
8918: LD_VAR 0 18
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PUSH
8927: LD_VAR 0 18
8931: PUSH
8932: LD_INT 2
8934: ARRAY
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: NOT
8954: AND
8955: IFFALSE 8984
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8957: LD_VAR 0 10
8961: PPUSH
8962: LD_VAR 0 18
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_VAR 0 18
8975: PUSH
8976: LD_INT 2
8978: ARRAY
8979: PPUSH
8980: CALL_OW 117
// end ; end ;
8984: GO 8152
8986: POP
8987: POP
// end ; if vehicles then
8988: LD_VAR 0 27
8992: IFFALSE 9804
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8994: LD_ADDR_VAR 0 27
8998: PUSH
8999: LD_VAR 0 27
9003: PPUSH
9004: LD_INT 3
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: LD_INT 34
9012: PUSH
9013: LD_INT 13
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 34
9022: PUSH
9023: LD_INT 12
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 50
9041: PUSH
9042: EMPTY
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 72
9053: ST_TO_ADDR
// if vehicles then
9054: LD_VAR 0 27
9058: IFFALSE 9804
// begin for i in vehicles do
9060: LD_ADDR_VAR 0 10
9064: PUSH
9065: LD_VAR 0 27
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9802
// begin tag := GetTag ( i ) ;
9073: LD_ADDR_VAR 0 16
9077: PUSH
9078: LD_VAR 0 10
9082: PPUSH
9083: CALL_OW 110
9087: ST_TO_ADDR
// if not tag then
9088: LD_VAR 0 16
9092: NOT
9093: IFFALSE 9239
// begin if GetControl ( i ) = control_manual then
9095: LD_VAR 0 10
9099: PPUSH
9100: CALL_OW 263
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: IFFALSE 9225
// begin drivers := amDrivers ;
9110: LD_ADDR_VAR 0 25
9114: PUSH
9115: LD_EXP 40
9119: ST_TO_ADDR
// if not drivers then
9120: LD_VAR 0 25
9124: NOT
9125: IFFALSE 9205
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9127: LD_ADDR_VAR 0 25
9131: PUSH
9132: LD_VAR 0 15
9136: PPUSH
9137: LD_INT 3
9139: PUSH
9140: LD_INT 120
9142: PUSH
9143: LD_INT 7
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 72
9158: ST_TO_ADDR
// if drivers then
9159: LD_VAR 0 25
9163: IFFALSE 9205
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9165: LD_VAR 0 25
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_INT 7
9176: PPUSH
9177: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9181: LD_ADDR_EXP 40
9185: PUSH
9186: LD_EXP 40
9190: PPUSH
9191: LD_VAR 0 25
9195: PUSH
9196: LD_INT 1
9198: ARRAY
9199: PPUSH
9200: CALL 65770 0 2
9204: ST_TO_ADDR
// end ; end ; if drivers then
9205: LD_VAR 0 25
9209: IFFALSE 9223
// SetTag ( i , tBusy ) ;
9211: LD_VAR 0 10
9215: PPUSH
9216: LD_INT 8
9218: PPUSH
9219: CALL_OW 109
// continue ;
9223: GO 9070
// end ; SetTag ( i , tBusy ) ;
9225: LD_VAR 0 10
9229: PPUSH
9230: LD_INT 8
9232: PPUSH
9233: CALL_OW 109
// end else
9237: GO 9800
// if tag = tBusy then
9239: LD_VAR 0 16
9243: PUSH
9244: LD_INT 8
9246: EQUAL
9247: IFFALSE 9467
// begin if GetLives ( i ) = 1000 then
9249: LD_VAR 0 10
9253: PPUSH
9254: CALL_OW 256
9258: PUSH
9259: LD_INT 1000
9261: EQUAL
9262: IFFALSE 9465
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9264: LD_VAR 0 10
9268: PPUSH
9269: CALL_OW 263
9273: PUSH
9274: LD_INT 1
9276: EQUAL
9277: IFFALSE 9291
9279: PUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 311
9289: NOT
9290: AND
9291: IFFALSE 9453
// begin drivers := amDrivers ;
9293: LD_ADDR_VAR 0 25
9297: PUSH
9298: LD_EXP 40
9302: ST_TO_ADDR
// if not drivers then
9303: LD_VAR 0 25
9307: NOT
9308: IFFALSE 9324
// begin SetTag ( i , 0 ) ;
9310: LD_VAR 0 10
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: CALL_OW 109
// continue ;
9322: GO 9070
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9324: LD_VAR 0 25
9328: PUSH
9329: LD_INT 1
9331: ARRAY
9332: PPUSH
9333: CALL_OW 310
9337: IFFALSE 9355
9339: PUSH
9340: LD_VAR 0 25
9344: PUSH
9345: LD_INT 1
9347: ARRAY
9348: PPUSH
9349: CALL 63350 0 1
9353: NOT
9354: AND
9355: IFFALSE 9370
// ComExitBuilding ( drivers [ 1 ] ) ;
9357: LD_VAR 0 25
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: PPUSH
9366: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9370: LD_VAR 0 27
9374: PPUSH
9375: LD_INT 120
9377: PUSH
9378: LD_INT 3
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 72
9389: IFFALSE 9407
9391: PUSH
9392: LD_VAR 0 25
9396: PUSH
9397: LD_INT 1
9399: ARRAY
9400: PPUSH
9401: CALL_OW 314
9405: NOT
9406: AND
9407: IFTRUE 9431
9409: PUSH
9410: LD_VAR 0 27
9414: PPUSH
9415: LD_INT 120
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 72
9429: NOT
9430: OR
9431: IFFALSE 9451
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9433: LD_VAR 0 25
9437: PUSH
9438: LD_INT 1
9440: ARRAY
9441: PPUSH
9442: LD_VAR 0 10
9446: PPUSH
9447: CALL_OW 120
// continue ;
9451: GO 9070
// end ; SetTag ( i , tAttack ) ;
9453: LD_VAR 0 10
9457: PPUSH
9458: LD_INT 13
9460: PPUSH
9461: CALL_OW 109
// end ; end else
9465: GO 9800
// if tag = tAttack then
9467: LD_VAR 0 16
9471: PUSH
9472: LD_INT 13
9474: EQUAL
9475: IFFALSE 9657
// begin enemy := enemyInBase ;
9477: LD_ADDR_VAR 0 22
9481: PUSH
9482: LD_VAR 0 23
9486: ST_TO_ADDR
// if not enemy then
9487: LD_VAR 0 22
9491: NOT
9492: IFFALSE 9504
// enemy := enemyOuterBase ;
9494: LD_ADDR_VAR 0 22
9498: PUSH
9499: LD_VAR 0 24
9503: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9504: LD_VAR 0 22
9508: NOT
9509: IFFALSE 9544
9511: PUSH
9512: LD_VAR 0 10
9516: PPUSH
9517: LD_VAR 0 8
9521: PUSH
9522: LD_INT 1
9524: ARRAY
9525: PPUSH
9526: LD_VAR 0 8
9530: PUSH
9531: LD_INT 2
9533: ARRAY
9534: PPUSH
9535: CALL_OW 297
9539: PUSH
9540: LD_INT 10
9542: GREATER
9543: AND
9544: IFFALSE 9575
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9546: LD_VAR 0 10
9550: PPUSH
9551: LD_VAR 0 8
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: LD_VAR 0 8
9564: PUSH
9565: LD_INT 2
9567: ARRAY
9568: PPUSH
9569: CALL_OW 111
// continue ;
9573: GO 9070
// end ; if GetLives ( i ) < 650 then
9575: LD_VAR 0 10
9579: PPUSH
9580: CALL_OW 256
9584: PUSH
9585: LD_INT 650
9587: LESS
9588: IFFALSE 9631
// begin SetTag ( i , tVehRepair ) ;
9590: LD_VAR 0 10
9594: PPUSH
9595: LD_INT 9
9597: PPUSH
9598: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9602: LD_VAR 0 10
9606: PPUSH
9607: LD_VAR 0 8
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: LD_VAR 0 8
9620: PUSH
9621: LD_INT 2
9623: ARRAY
9624: PPUSH
9625: CALL_OW 111
// continue ;
9629: GO 9070
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9631: LD_VAR 0 10
9635: PPUSH
9636: LD_VAR 0 22
9640: PPUSH
9641: LD_VAR 0 10
9645: PPUSH
9646: CALL_OW 74
9650: PPUSH
9651: CALL_OW 115
// end else
9655: GO 9800
// if tag = tVehRepair then
9657: LD_VAR 0 16
9661: PUSH
9662: LD_INT 9
9664: EQUAL
9665: IFFALSE 9800
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9667: LD_VAR 0 10
9671: PPUSH
9672: LD_VAR 0 8
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PPUSH
9681: LD_VAR 0 8
9685: PUSH
9686: LD_INT 2
9688: ARRAY
9689: PPUSH
9690: CALL_OW 297
9694: PUSH
9695: LD_INT 10
9697: GREATER
9698: IFFALSE 9729
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9700: LD_VAR 0 10
9704: PPUSH
9705: LD_VAR 0 8
9709: PUSH
9710: LD_INT 1
9712: ARRAY
9713: PPUSH
9714: LD_VAR 0 8
9718: PUSH
9719: LD_INT 2
9721: ARRAY
9722: PPUSH
9723: CALL_OW 111
// continue ;
9727: GO 9070
// end ; if GetLives ( i ) = 1000 then
9729: LD_VAR 0 10
9733: PPUSH
9734: CALL_OW 256
9738: PUSH
9739: LD_INT 1000
9741: EQUAL
9742: IFFALSE 9758
// begin SetTag ( i , tBusy ) ;
9744: LD_VAR 0 10
9748: PPUSH
9749: LD_INT 8
9751: PPUSH
9752: CALL_OW 109
// continue ;
9756: GO 9070
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9758: LD_VAR 0 10
9762: PPUSH
9763: CALL_OW 263
9767: PUSH
9768: LD_INT 1
9770: EQUAL
9771: IFFALSE 9784
9773: PUSH
9774: LD_VAR 0 10
9778: PPUSH
9779: CALL_OW 311
9783: AND
9784: IFFALSE 9800
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9786: LD_VAR 0 10
9790: PPUSH
9791: CALL_OW 311
9795: PPUSH
9796: CALL 67484 0 1
// end ; end ;
9800: GO 9070
9802: POP
9803: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9804: LD_ADDR_VAR 0 20
9808: PUSH
9809: LD_VAR 0 6
9813: PPUSH
9814: LD_INT 2
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 8
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 25
9839: PUSH
9840: LD_INT 5
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 25
9849: PUSH
9850: LD_INT 9
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 50
9866: PUSH
9867: EMPTY
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 72
9878: ST_TO_ADDR
// if sol then
9879: LD_VAR 0 20
9883: IFFALSE 10399
// begin if enemyInBase then
9885: LD_VAR 0 23
9889: IFFALSE 10068
// begin for i in sol do
9891: LD_ADDR_VAR 0 10
9895: PUSH
9896: LD_VAR 0 20
9900: PUSH
9901: FOR_IN
9902: IFFALSE 10064
// begin tw := IsInUnit ( i ) ;
9904: LD_ADDR_VAR 0 17
9908: PUSH
9909: LD_VAR 0 10
9913: PPUSH
9914: CALL_OW 310
9918: ST_TO_ADDR
// if tw then
9919: LD_VAR 0 17
9923: IFFALSE 10006
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9925: LD_VAR 0 17
9929: PUSH
9930: LD_INT 22
9932: PUSH
9933: LD_VAR 0 1
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 101
9944: PUSH
9945: LD_VAR 0 35
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 32
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 31
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: IN
9992: NOT
9993: IFFALSE 10004
// ComExitBuilding ( i ) ;
9995: LD_VAR 0 10
9999: PPUSH
10000: CALL_OW 122
// end else
10004: GO 10062
// if IsInArea ( i , area ) then
10006: LD_VAR 0 10
10010: PPUSH
10011: LD_VAR 0 3
10015: PPUSH
10016: CALL_OW 308
10020: IFFALSE 10048
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
10022: LD_VAR 0 10
10026: PPUSH
10027: LD_VAR 0 23
10031: PPUSH
10032: LD_VAR 0 10
10036: PPUSH
10037: CALL_OW 74
10041: PPUSH
10042: CALL_OW 115
10046: GO 10062
// ComMoveToarea ( i , area ) ;
10048: LD_VAR 0 10
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: CALL_OW 113
// end ;
10062: GO 9901
10064: POP
10065: POP
// end else
10066: GO 10399
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
10068: LD_ADDR_VAR 0 29
10072: PUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 62
10083: PUSH
10084: EMPTY
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 30
10096: PUSH
10097: LD_INT 32
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 30
10106: PUSH
10107: LD_INT 4
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 5
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 31
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 70
10149: ST_TO_ADDR
// if empty then
10150: LD_VAR 0 29
10154: IFFALSE 10171
// empty := ReverseArray ( empty ) ;
10156: LD_ADDR_VAR 0 29
10160: PUSH
10161: LD_VAR 0 29
10165: PPUSH
10166: CALL 60860 0 1
10170: ST_TO_ADDR
// for i in sol do
10171: LD_ADDR_VAR 0 10
10175: PUSH
10176: LD_VAR 0 20
10180: PUSH
10181: FOR_IN
10182: IFFALSE 10397
// begin tag := GetTag ( i ) ;
10184: LD_ADDR_VAR 0 16
10188: PUSH
10189: LD_VAR 0 10
10193: PPUSH
10194: CALL_OW 110
10198: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10199: LD_VAR 0 10
10203: PPUSH
10204: CALL_OW 256
10208: PUSH
10209: LD_INT 1000
10211: LESS
10212: IFFALSE 10224
10214: PUSH
10215: LD_VAR 0 16
10219: PUSH
10220: LD_INT 1
10222: NONEQUAL
10223: AND
10224: IFFALSE 10276
// begin SetTag ( i , tHeal ) ;
10226: LD_VAR 0 10
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10238: LD_VAR 0 10
10242: PPUSH
10243: LD_VAR 0 7
10247: PUSH
10248: LD_INT 1
10250: ARRAY
10251: PPUSH
10252: LD_VAR 0 7
10256: PUSH
10257: LD_INT 2
10259: ARRAY
10260: PPUSH
10261: CALL_OW 111
// AddComHold ( i ) ;
10265: LD_VAR 0 10
10269: PPUSH
10270: CALL_OW 200
// continue ;
10274: GO 10181
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10276: LD_VAR 0 10
10280: PPUSH
10281: CALL_OW 256
10285: PUSH
10286: LD_INT 1000
10288: EQUAL
10289: IFFALSE 10301
10291: PUSH
10292: LD_VAR 0 16
10296: PUSH
10297: LD_INT 1
10299: EQUAL
10300: AND
10301: IFFALSE 10317
// begin SetTag ( i , 0 ) ;
10303: LD_VAR 0 10
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 109
// continue ;
10315: GO 10181
// end ; if HasTask ( i ) then
10317: LD_VAR 0 10
10321: PPUSH
10322: CALL_OW 314
10326: IFFALSE 10330
// continue ;
10328: GO 10181
// if not IsInUnit ( i ) and not tag and empty then
10330: LD_VAR 0 10
10334: PPUSH
10335: CALL_OW 310
10339: NOT
10340: IFFALSE 10349
10342: PUSH
10343: LD_VAR 0 16
10347: NOT
10348: AND
10349: IFFALSE 10357
10351: PUSH
10352: LD_VAR 0 29
10356: AND
10357: IFFALSE 10395
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10359: LD_VAR 0 10
10363: PPUSH
10364: LD_VAR 0 29
10368: PUSH
10369: LD_INT 1
10371: ARRAY
10372: PPUSH
10373: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10377: LD_ADDR_VAR 0 29
10381: PUSH
10382: LD_VAR 0 29
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 3
10394: ST_TO_ADDR
// end ; end ;
10395: GO 10181
10397: POP
10398: POP
// end ; end ; end ;
10399: LD_VAR 0 9
10403: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10404: LD_EXP 42
10408: PPUSH
10409: LD_INT 50
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 72
10419: IFFALSE 10475
10421: GO 10423
10423: DISABLE
// begin BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10424: LD_EXP 3
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: LD_INT 3
10438: PPUSH
10439: LD_INT 33
10441: PPUSH
10442: LD_INT 4
10444: PPUSH
10445: LD_EXP 42
10449: PPUSH
10450: LD_INT 27
10452: PUSH
10453: LD_INT 33
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PPUSH
10460: LD_INT 22
10462: PUSH
10463: LD_INT 17
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PPUSH
10470: CALL 6835 0 8
// enable ;
10474: ENABLE
// end ;
10475: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 302
10483: IFFALSE 10492
10485: PUSH
10486: LD_EXP 36
10490: NOT
10491: AND
10492: IFFALSE 10562
10494: GO 10496
10496: DISABLE
// begin enable ;
10497: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10498: LD_ADDR_EXP 36
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: LD_INT 1
10544: PUSH
10545: LD_INT 1
10547: PUSH
10548: LD_INT 6
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: ST_TO_ADDR
// end ; end_of_file
10562: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10563: LD_INT 0
10565: PPUSH
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
10571: PPUSH
10572: PPUSH
10573: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10574: LD_ADDR_EXP 45
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 2
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL 27785 0 3
10594: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10595: LD_ADDR_EXP 46
10599: PUSH
10600: LD_INT 13
10602: PUSH
10603: LD_INT 1
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: LD_INT 27
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 13
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: LD_INT 27
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 13
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: LD_INT 26
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 13
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 13
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: LD_INT 27
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: ST_TO_ADDR
// arBuildings := [ ] ;
10697: LD_ADDR_EXP 47
10701: PUSH
10702: EMPTY
10703: ST_TO_ADDR
// arVehicles := [ ] ;
10704: LD_ADDR_EXP 48
10708: PUSH
10709: EMPTY
10710: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10711: LD_ADDR_EXP 49
10715: PUSH
10716: EMPTY
10717: ST_TO_ADDR
// arDrivers := [ ] ;
10718: LD_ADDR_EXP 50
10722: PUSH
10723: EMPTY
10724: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10725: LD_ADDR_EXP 52
10729: PUSH
10730: LD_INT 2
10732: ST_TO_ADDR
// arMinesList := [ ] ;
10733: LD_ADDR_EXP 53
10737: PUSH
10738: EMPTY
10739: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10740: LD_ADDR_EXP 51
10744: PUSH
10745: LD_INT 8
10747: PUSH
10748: LD_INT 11
10750: PUSH
10751: LD_INT 12
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: PUSH
10759: LD_OWVAR 67
10763: ARRAY
10764: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_INT 24
10772: PPUSH
10773: CALL 70891 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10777: LD_INT 23
10779: PPUSH
10780: LD_INT 7
10782: PUSH
10783: LD_INT 9
10785: PUSH
10786: LD_INT 11
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: LD_OWVAR 67
10798: ARRAY
10799: PPUSH
10800: CALL 11365 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10804: LD_ADDR_VAR 0 8
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: LD_INT 4
10814: PUSH
10815: LD_INT 5
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_OWVAR 67
10827: ARRAY
10828: ST_TO_ADDR
// uc_side := side ;
10829: LD_ADDR_OWVAR 20
10833: PUSH
10834: LD_VAR 0 1
10838: ST_TO_ADDR
// uc_nation := 2 ;
10839: LD_ADDR_OWVAR 21
10843: PUSH
10844: LD_INT 2
10846: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10847: LD_ADDR_EXP 54
10851: PUSH
10852: LD_INT 32
10854: PPUSH
10855: LD_INT 5
10857: PPUSH
10858: LD_STRING 
10860: PPUSH
10861: LD_VAR 0 8
10865: PPUSH
10866: LD_INT 800
10868: PUSH
10869: LD_INT 120
10871: PUSH
10872: LD_INT 0
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PPUSH
10880: LD_INT 10
10882: PUSH
10883: LD_INT 11
10885: PUSH
10886: LD_INT 12
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: PUSH
10894: LD_OWVAR 67
10898: ARRAY
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: LD_INT 6
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL 36437 0 6
10919: ST_TO_ADDR
// arForceTmp := [ ] ;
10920: LD_ADDR_EXP 55
10924: PUSH
10925: EMPTY
10926: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_VAR 0 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 30
10946: PUSH
10947: LD_INT 31
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 3
10956: PUSH
10957: LD_INT 95
10959: PUSH
10960: LD_INT 5
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 58
10973: PUSH
10974: EMPTY
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: PPUSH
10983: CALL_OW 69
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11118
// begin d := GetDir ( i ) ;
10991: LD_ADDR_VAR 0 4
10995: PUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: CALL_OW 254
11005: ST_TO_ADDR
// if d < 3 then
11006: LD_VAR 0 4
11010: PUSH
11011: LD_INT 3
11013: LESS
11014: IFFALSE 11032
// d := d + 3 else
11016: LD_ADDR_VAR 0 4
11020: PUSH
11021: LD_VAR 0 4
11025: PUSH
11026: LD_INT 3
11028: PLUS
11029: ST_TO_ADDR
11030: GO 11046
// d := d - 3 ;
11032: LD_ADDR_VAR 0 4
11036: PUSH
11037: LD_VAR 0 4
11041: PUSH
11042: LD_INT 3
11044: MINUS
11045: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
11046: LD_INT 0
11048: PPUSH
11049: LD_VAR 0 8
11053: PPUSH
11054: CALL_OW 381
// un := CreateHuman ;
11058: LD_ADDR_VAR 0 6
11062: PUSH
11063: CALL_OW 44
11067: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11068: LD_ADDR_EXP 55
11072: PUSH
11073: LD_EXP 55
11077: PPUSH
11078: LD_VAR 0 6
11082: PPUSH
11083: CALL 65770 0 2
11087: ST_TO_ADDR
// SetDir ( un , d ) ;
11088: LD_VAR 0 6
11092: PPUSH
11093: LD_VAR 0 4
11097: PPUSH
11098: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11102: LD_VAR 0 6
11106: PPUSH
11107: LD_VAR 0 3
11111: PPUSH
11112: CALL_OW 52
// end ;
11116: GO 10988
11118: POP
11119: POP
// for i := 1 to Difficulty do
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: DOUBLE
11126: LD_INT 1
11128: DEC
11129: ST_TO_ADDR
11130: LD_OWVAR 67
11134: PUSH
11135: FOR_TO
11136: IFFALSE 11202
// begin PrepareSoldier ( false , skill ) ;
11138: LD_INT 0
11140: PPUSH
11141: LD_VAR 0 8
11145: PPUSH
11146: CALL_OW 381
// un := CreateHuman ;
11150: LD_ADDR_VAR 0 6
11154: PUSH
11155: CALL_OW 44
11159: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11160: LD_ADDR_EXP 55
11164: PUSH
11165: LD_EXP 55
11169: PPUSH
11170: LD_VAR 0 6
11174: PPUSH
11175: CALL 65770 0 2
11179: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11180: LD_VAR 0 6
11184: PPUSH
11185: LD_INT 215
11187: PPUSH
11188: LD_INT 102
11190: PPUSH
11191: CALL_OW 428
11195: PPUSH
11196: CALL_OW 52
// end ;
11200: GO 11135
11202: POP
11203: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11204: LD_ADDR_VAR 0 3
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_VAR 0 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: PUSH
11240: FOR_IN
11241: IFFALSE 11274
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 3
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 7
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: LD_OWVAR 67
11266: ARRAY
11267: PPUSH
11268: CALL_OW 241
11272: GO 11240
11274: POP
11275: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11276: LD_ADDR_VAR 0 3
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 30
11295: PUSH
11296: LD_INT 32
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: PUSH
11312: FOR_IN
11313: IFFALSE 11358
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 27
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 24
11328: PUSH
11329: LD_INT 27
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: LD_VAR 0 3
11342: PUSH
11343: LD_INT 4
11345: MOD
11346: PUSH
11347: LD_INT 1
11349: PLUS
11350: ARRAY
11351: PPUSH
11352: CALL_OW 431
11356: GO 11312
11358: POP
11359: POP
// end ;
11360: LD_VAR 0 2
11364: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11365: LD_INT 0
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11371: LD_ADDR_VAR 0 5
11375: PUSH
11376: LD_VAR 0 1
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: CALL_OW 517
11388: ST_TO_ADDR
// if not tmp then
11389: LD_VAR 0 5
11393: NOT
11394: IFFALSE 11398
// exit ;
11396: GO 11640
// for i := 1 to n do
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: DOUBLE
11404: LD_INT 1
11406: DEC
11407: ST_TO_ADDR
11408: LD_VAR 0 2
11412: PUSH
11413: FOR_TO
11414: IFFALSE 11638
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11416: LD_ADDR_VAR 0 6
11420: PUSH
11421: LD_INT 1
11423: PPUSH
11424: LD_VAR 0 5
11428: PUSH
11429: LD_INT 1
11431: ARRAY
11432: PPUSH
11433: CALL_OW 12
11437: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11438: LD_VAR 0 5
11442: PUSH
11443: LD_INT 1
11445: ARRAY
11446: PUSH
11447: LD_VAR 0 6
11451: ARRAY
11452: PPUSH
11453: LD_VAR 0 5
11457: PUSH
11458: LD_INT 2
11460: ARRAY
11461: PUSH
11462: LD_VAR 0 6
11466: ARRAY
11467: PPUSH
11468: LD_EXP 3
11472: PUSH
11473: LD_INT 2
11475: ARRAY
11476: PPUSH
11477: LD_INT 0
11479: PPUSH
11480: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11484: LD_ADDR_EXP 53
11488: PUSH
11489: LD_EXP 53
11493: PPUSH
11494: LD_EXP 53
11498: PUSH
11499: LD_INT 1
11501: PLUS
11502: PPUSH
11503: LD_VAR 0 5
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: PUSH
11512: LD_VAR 0 6
11516: ARRAY
11517: PPUSH
11518: CALL_OW 2
11522: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11523: LD_ADDR_EXP 53
11527: PUSH
11528: LD_EXP 53
11532: PPUSH
11533: LD_EXP 53
11537: PUSH
11538: LD_INT 1
11540: PLUS
11541: PPUSH
11542: LD_VAR 0 5
11546: PUSH
11547: LD_INT 2
11549: ARRAY
11550: PUSH
11551: LD_VAR 0 6
11555: ARRAY
11556: PPUSH
11557: CALL_OW 2
11561: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11562: LD_ADDR_VAR 0 5
11566: PUSH
11567: LD_VAR 0 5
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_VAR 0 5
11579: PUSH
11580: LD_INT 1
11582: ARRAY
11583: PPUSH
11584: LD_VAR 0 6
11588: PPUSH
11589: CALL_OW 3
11593: PPUSH
11594: CALL_OW 1
11598: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11599: LD_ADDR_VAR 0 5
11603: PUSH
11604: LD_VAR 0 5
11608: PPUSH
11609: LD_INT 2
11611: PPUSH
11612: LD_VAR 0 5
11616: PUSH
11617: LD_INT 2
11619: ARRAY
11620: PPUSH
11621: LD_VAR 0 6
11625: PPUSH
11626: CALL_OW 3
11630: PPUSH
11631: CALL_OW 1
11635: ST_TO_ADDR
// end ;
11636: GO 11413
11638: POP
11639: POP
// end ;
11640: LD_VAR 0 3
11644: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
11649: PPUSH
11650: PPUSH
11651: PPUSH
11652: PPUSH
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
11659: PPUSH
11660: PPUSH
11661: PPUSH
11662: PPUSH
11663: PPUSH
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
11671: PPUSH
11672: PPUSH
11673: PPUSH
// enable ;
11674: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11675: LD_ADDR_VAR 0 10
11679: PUSH
11680: LD_INT 81
11682: PUSH
11683: LD_VAR 0 1
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 69
11696: ST_TO_ADDR
// if tmp then
11697: LD_VAR 0 10
11701: IFFALSE 11722
// enemySide := GetSide ( tmp [ 1 ] ) ;
11703: LD_ADDR_VAR 0 34
11707: PUSH
11708: LD_VAR 0 10
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 255
11721: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11722: LD_ADDR_VAR 0 22
11726: PUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 81
11734: PUSH
11735: LD_VAR 0 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 70
11748: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11749: LD_ADDR_VAR 0 23
11753: PUSH
11754: LD_VAR 0 4
11758: PPUSH
11759: LD_INT 81
11761: PUSH
11762: LD_VAR 0 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL_OW 70
11775: ST_TO_ADDR
// vehicles := arVehicles ;
11776: LD_ADDR_VAR 0 26
11780: PUSH
11781: LD_EXP 48
11785: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11786: LD_ADDR_VAR 0 32
11790: PUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 22
11798: PUSH
11799: LD_VAR 0 1
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 2
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 30
11823: PUSH
11824: LD_INT 1
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: ST_TO_ADDR
// if depot then
11845: LD_VAR 0 32
11849: IFFALSE 11865
// depot := depot [ 1 ] ;
11851: LD_ADDR_VAR 0 32
11855: PUSH
11856: LD_VAR 0 32
11860: PUSH
11861: LD_INT 1
11863: ARRAY
11864: ST_TO_ADDR
// if arTech then
11865: LD_EXP 45
11869: IFFALSE 12028
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11871: LD_ADDR_VAR 0 12
11875: PUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 50
11895: PUSH
11896: EMPTY
11897: LIST
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 30
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: LD_INT 7
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 8
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 70
11947: ST_TO_ADDR
// if lab then
11948: LD_VAR 0 12
11952: IFFALSE 12028
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11954: LD_VAR 0 12
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: CALL_OW 461
11967: PUSH
11968: LD_INT 2
11970: EQUAL
11971: IFFALSE 12028
// begin for i in arTech do
11973: LD_ADDR_VAR 0 9
11977: PUSH
11978: LD_EXP 45
11982: PUSH
11983: FOR_IN
11984: IFFALSE 12026
// if CanBeResearched ( lab [ 1 ] , i ) then
11986: LD_VAR 0 12
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 9
11999: PPUSH
12000: CALL_OW 430
12004: IFFALSE 12024
// begin AddComResearch ( lab [ 1 ] , i ) ;
12006: LD_VAR 0 12
12010: PUSH
12011: LD_INT 1
12013: ARRAY
12014: PPUSH
12015: LD_VAR 0 9
12019: PPUSH
12020: CALL_OW 184
// end ;
12024: GO 11983
12026: POP
12027: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12028: LD_ADDR_VAR 0 29
12032: PUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 22
12040: PUSH
12041: LD_VAR 0 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 50
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 70
12075: ST_TO_ADDR
// if fac then
12076: LD_VAR 0 29
12080: IFFALSE 12415
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12082: LD_VAR 0 29
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: CALL_OW 461
12095: PUSH
12096: LD_INT 2
12098: EQUAL
12099: IFFALSE 12415
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12101: LD_ADDR_VAR 0 30
12105: PUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 30
12126: PUSH
12127: LD_INT 33
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 35
12141: PUSH
12142: LD_INT 0
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 70
12157: ST_TO_ADDR
// if emptyTowers then
12158: LD_VAR 0 30
12162: IFFALSE 12212
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12164: LD_ADDR_VAR 0 31
12168: PUSH
12169: LD_VAR 0 30
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: CALL 38129 0 2
12187: ST_TO_ADDR
// if weapon then
12188: LD_VAR 0 31
12192: IFFALSE 12212
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12194: LD_VAR 0 30
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_VAR 0 31
12207: PPUSH
12208: CALL_OW 148
// end ; if arConstructList then
12212: LD_EXP 46
12216: IFFALSE 12415
// for i := 1 to Count ( arConstructList ) do
12218: LD_ADDR_VAR 0 9
12222: PUSH
12223: DOUBLE
12224: LD_INT 1
12226: DEC
12227: ST_TO_ADDR
12228: LD_EXP 46
12232: PPUSH
12233: CALL 29838 0 1
12237: PUSH
12238: FOR_TO
12239: IFFALSE 12413
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12241: LD_VAR 0 29
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: LD_EXP 46
12254: PUSH
12255: LD_VAR 0 9
12259: ARRAY
12260: PUSH
12261: LD_INT 1
12263: ARRAY
12264: PPUSH
12265: LD_EXP 46
12269: PUSH
12270: LD_VAR 0 9
12274: ARRAY
12275: PUSH
12276: LD_INT 2
12278: ARRAY
12279: PPUSH
12280: LD_EXP 46
12284: PUSH
12285: LD_VAR 0 9
12289: ARRAY
12290: PUSH
12291: LD_INT 3
12293: ARRAY
12294: PPUSH
12295: LD_EXP 46
12299: PUSH
12300: LD_VAR 0 9
12304: ARRAY
12305: PUSH
12306: LD_INT 4
12308: ARRAY
12309: PPUSH
12310: CALL_OW 448
12314: IFFALSE 12411
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12316: LD_VAR 0 29
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: LD_EXP 46
12329: PUSH
12330: LD_VAR 0 9
12334: ARRAY
12335: PUSH
12336: LD_INT 1
12338: ARRAY
12339: PPUSH
12340: LD_EXP 46
12344: PUSH
12345: LD_VAR 0 9
12349: ARRAY
12350: PUSH
12351: LD_INT 2
12353: ARRAY
12354: PPUSH
12355: LD_EXP 46
12359: PUSH
12360: LD_VAR 0 9
12364: ARRAY
12365: PUSH
12366: LD_INT 3
12368: ARRAY
12369: PPUSH
12370: LD_EXP 46
12374: PUSH
12375: LD_VAR 0 9
12379: ARRAY
12380: PUSH
12381: LD_INT 4
12383: ARRAY
12384: PPUSH
12385: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12389: LD_ADDR_EXP 46
12393: PUSH
12394: LD_EXP 46
12398: PPUSH
12399: LD_VAR 0 9
12403: PPUSH
12404: CALL_OW 3
12408: ST_TO_ADDR
// break ;
12409: GO 12413
// end ; end ;
12411: GO 12238
12413: POP
12414: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12415: LD_ADDR_VAR 0 10
12419: PUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 22
12427: PUSH
12428: LD_VAR 0 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: LD_INT 57
12452: PUSH
12453: EMPTY
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 24
12465: PUSH
12466: LD_INT 1000
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 70
12487: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12488: LD_ADDR_VAR 0 17
12492: PUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: CALL_OW 435
12502: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12503: LD_ADDR_VAR 0 14
12507: PUSH
12508: LD_VAR 0 5
12512: PPUSH
12513: LD_INT 25
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 50
12525: PUSH
12526: EMPTY
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PPUSH
12533: CALL_OW 72
12537: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12538: LD_VAR 0 14
12542: PPUSH
12543: LD_INT 3
12545: PUSH
12546: LD_INT 120
12548: PUSH
12549: LD_INT 7
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 3
12562: PUSH
12563: LD_INT 54
12565: PUSH
12566: EMPTY
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 72
12581: IFFALSE 12598
12583: PUSH
12584: LD_VAR 0 29
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: CALL_OW 302
12597: AND
12598: IFFALSE 12657
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12600: LD_VAR 0 14
12604: PPUSH
12605: LD_INT 3
12607: PUSH
12608: LD_INT 120
12610: PUSH
12611: LD_INT 7
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: LD_INT 54
12627: PUSH
12628: EMPTY
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PPUSH
12639: CALL_OW 72
12643: PPUSH
12644: LD_VAR 0 29
12648: PUSH
12649: LD_INT 1
12651: ARRAY
12652: PPUSH
12653: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12657: LD_ADDR_VAR 0 18
12661: PUSH
12662: LD_VAR 0 5
12666: PPUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 4
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: EMPTY
12681: LIST
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PPUSH
12687: CALL_OW 72
12691: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12692: LD_ADDR_VAR 0 12
12696: PUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 2
12704: PUSH
12705: LD_INT 30
12707: PUSH
12708: LD_INT 6
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 7
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: LD_INT 8
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 70
12745: ST_TO_ADDR
// if sci then
12746: LD_VAR 0 18
12750: IFFALSE 12911
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12752: LD_ADDR_VAR 0 20
12756: PUSH
12757: LD_VAR 0 5
12761: PPUSH
12762: LD_INT 95
12764: PUSH
12765: LD_VAR 0 3
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 120
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PPUSH
12788: CALL_OW 72
12792: ST_TO_ADDR
// if hurtUnits then
12793: LD_VAR 0 20
12797: IFFALSE 12858
// begin for i in sci do
12799: LD_ADDR_VAR 0 9
12803: PUSH
12804: LD_VAR 0 18
12808: PUSH
12809: FOR_IN
12810: IFFALSE 12854
// if IsInUnit ( i ) then
12812: LD_VAR 0 9
12816: PPUSH
12817: CALL_OW 310
12821: IFFALSE 12834
// ComExitBuilding ( i ) else
12823: LD_VAR 0 9
12827: PPUSH
12828: CALL_OW 122
12832: GO 12852
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12834: LD_VAR 0 9
12838: PPUSH
12839: LD_VAR 0 20
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: PPUSH
12848: CALL_OW 128
12852: GO 12809
12854: POP
12855: POP
// end else
12856: GO 12911
// if lab then
12858: LD_VAR 0 12
12862: IFFALSE 12911
// begin for i in sci do
12864: LD_ADDR_VAR 0 9
12868: PUSH
12869: LD_VAR 0 18
12873: PUSH
12874: FOR_IN
12875: IFFALSE 12909
// if not IsInUnit ( i ) then
12877: LD_VAR 0 9
12881: PPUSH
12882: CALL_OW 310
12886: NOT
12887: IFFALSE 12907
// ComEnterUnit ( i , lab [ 1 ] ) ;
12889: LD_VAR 0 9
12893: PPUSH
12894: LD_VAR 0 12
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: CALL_OW 120
12907: GO 12874
12909: POP
12910: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12911: LD_ADDR_VAR 0 13
12915: PUSH
12916: LD_VAR 0 5
12920: PPUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 72
12935: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12936: LD_ADDR_VAR 0 33
12940: PUSH
12941: LD_EXP 47
12945: ST_TO_ADDR
// if eng then
12946: LD_VAR 0 13
12950: IFFALSE 13798
// begin for i in eng do
12952: LD_ADDR_VAR 0 9
12956: PUSH
12957: LD_VAR 0 13
12961: PUSH
12962: FOR_IN
12963: IFFALSE 13796
// begin tag := GetTag ( i ) ;
12965: LD_ADDR_VAR 0 15
12969: PUSH
12970: LD_VAR 0 9
12974: PPUSH
12975: CALL_OW 110
12979: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12980: LD_VAR 0 9
12984: PPUSH
12985: LD_VAR 0 4
12989: PPUSH
12990: CALL_OW 308
12994: IFFALSE 13025
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12996: LD_VAR 0 9
13000: PPUSH
13001: LD_VAR 0 7
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 7
13014: PUSH
13015: LD_INT 2
13017: ARRAY
13018: PPUSH
13019: CALL_OW 111
// continue ;
13023: GO 12962
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
13025: LD_VAR 0 9
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 800
13037: LESS
13038: IFFALSE 13050
13040: PUSH
13041: LD_VAR 0 15
13045: PUSH
13046: LD_INT 1
13048: NONEQUAL
13049: AND
13050: IFFALSE 13100
// begin SetTag ( i , tHeal ) ;
13052: LD_VAR 0 9
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13064: LD_VAR 0 9
13068: PPUSH
13069: LD_VAR 0 6
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 6
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: CALL_OW 111
// AddComHold ( i ) ;
13091: LD_VAR 0 9
13095: PPUSH
13096: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13100: LD_VAR 0 15
13104: PUSH
13105: LD_INT 1
13107: EQUAL
13108: IFFALSE 13125
13110: PUSH
13111: LD_VAR 0 9
13115: PPUSH
13116: CALL_OW 256
13120: PUSH
13121: LD_INT 1000
13123: EQUAL
13124: AND
13125: IFFALSE 13139
// SetTag ( i , 0 ) ;
13127: LD_VAR 0 9
13131: PPUSH
13132: LD_INT 0
13134: PPUSH
13135: CALL_OW 109
// if not tag then
13139: LD_VAR 0 15
13143: NOT
13144: IFFALSE 13315
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13146: LD_ADDR_VAR 0 11
13150: PUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 57
13158: PUSH
13159: EMPTY
13160: LIST
13161: PPUSH
13162: CALL_OW 70
13166: ST_TO_ADDR
// if undone then
13167: LD_VAR 0 11
13171: IFFALSE 13193
// begin ComComplete ( i , undone [ 1 ] ) ;
13173: LD_VAR 0 9
13177: PPUSH
13178: LD_VAR 0 11
13182: PUSH
13183: LD_INT 1
13185: ARRAY
13186: PPUSH
13187: CALL 35974 0 2
// continue ;
13191: GO 12962
// end ; if cr or tmp or buildingsToBuild then
13193: LD_VAR 0 17
13197: IFTRUE 13205
13199: PUSH
13200: LD_VAR 0 10
13204: OR
13205: IFTRUE 13213
13207: PUSH
13208: LD_VAR 0 33
13212: OR
13213: IFFALSE 13289
// begin if IsInUnit ( i ) then
13215: LD_VAR 0 9
13219: PPUSH
13220: CALL_OW 310
13224: IFFALSE 13235
// ComExitBuilding ( i ) ;
13226: LD_VAR 0 9
13230: PPUSH
13231: CALL_OW 122
// if tmp then
13235: LD_VAR 0 10
13239: IFFALSE 13255
// SetTag ( i , tRepair ) else
13241: LD_VAR 0 9
13245: PPUSH
13246: LD_INT 3
13248: PPUSH
13249: CALL_OW 109
13253: GO 13287
// if cr then
13255: LD_VAR 0 17
13259: IFFALSE 13275
// SetTag ( i , tCrates ) else
13261: LD_VAR 0 9
13265: PPUSH
13266: LD_INT 2
13268: PPUSH
13269: CALL_OW 109
13273: GO 13287
// SetTag ( i , tBuild ) ;
13275: LD_VAR 0 9
13279: PPUSH
13280: LD_INT 5
13282: PPUSH
13283: CALL_OW 109
// end else
13287: GO 13315
// if not IsInUnit ( i ) then
13289: LD_VAR 0 9
13293: PPUSH
13294: CALL_OW 310
13298: NOT
13299: IFFALSE 13315
// ComEnterUnit ( i , depot ) ;
13301: LD_VAR 0 9
13305: PPUSH
13306: LD_VAR 0 32
13310: PPUSH
13311: CALL_OW 120
// end ; if tag = tRepair then
13315: LD_VAR 0 15
13319: PUSH
13320: LD_INT 3
13322: EQUAL
13323: IFFALSE 13429
// begin if IsInUnit ( i ) then
13325: LD_VAR 0 9
13329: PPUSH
13330: CALL_OW 310
13334: IFFALSE 13347
// begin ComExitBuilding ( i ) ;
13336: LD_VAR 0 9
13340: PPUSH
13341: CALL_OW 122
// continue ;
13345: GO 12962
// end ; if not tmp then
13347: LD_VAR 0 10
13351: NOT
13352: IFFALSE 13368
// begin SetTag ( i , 0 ) ;
13354: LD_VAR 0 9
13358: PPUSH
13359: LD_INT 0
13361: PPUSH
13362: CALL_OW 109
// continue ;
13366: GO 12962
// end ; if not HasTask ( i ) then
13368: LD_VAR 0 9
13372: PPUSH
13373: CALL_OW 314
13377: NOT
13378: IFFALSE 13398
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13380: LD_VAR 0 9
13384: PPUSH
13385: LD_VAR 0 10
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: CALL_OW 130
// if not IsInArea ( i , area ) then
13398: LD_VAR 0 9
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 308
13412: NOT
13413: IFFALSE 13429
// ComMoveToArea ( i , area ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 113
// end ; if tag = tBuild then
13429: LD_VAR 0 15
13433: PUSH
13434: LD_INT 5
13436: EQUAL
13437: IFFALSE 13647
// begin if IsInUnit ( i ) then
13439: LD_VAR 0 9
13443: PPUSH
13444: CALL_OW 310
13448: IFFALSE 13461
// begin ComExitBuilding ( i ) ;
13450: LD_VAR 0 9
13454: PPUSH
13455: CALL_OW 122
// continue ;
13459: GO 12962
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13461: LD_VAR 0 33
13465: NOT
13466: IFTRUE 13474
13468: PUSH
13469: LD_VAR 0 22
13473: OR
13474: IFTRUE 13482
13476: PUSH
13477: LD_VAR 0 23
13481: OR
13482: IFFALSE 13500
// begin SetTag ( i , 0 ) ;
13484: LD_VAR 0 9
13488: PPUSH
13489: LD_INT 0
13491: PPUSH
13492: CALL_OW 109
// continue ;
13496: GO 12962
// end else
13498: GO 13539
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13500: LD_VAR 0 32
13504: PPUSH
13505: LD_VAR 0 33
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: CALL 69865 0 2
13522: NOT
13523: IFFALSE 13539
// begin SetTag ( i , 0 ) ;
13525: LD_VAR 0 9
13529: PPUSH
13530: LD_INT 0
13532: PPUSH
13533: CALL_OW 109
// continue ;
13537: GO 12962
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13539: LD_ADDR_VAR 0 11
13543: PUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 57
13551: PUSH
13552: EMPTY
13553: LIST
13554: PPUSH
13555: CALL_OW 70
13559: ST_TO_ADDR
// if undone then
13560: LD_VAR 0 11
13564: IFFALSE 13586
// begin ComComplete ( i , undone [ 1 ] ) ;
13566: LD_VAR 0 9
13570: PPUSH
13571: LD_VAR 0 11
13575: PUSH
13576: LD_INT 1
13578: ARRAY
13579: PPUSH
13580: CALL 35974 0 2
// continue ;
13584: GO 12962
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13586: LD_VAR 0 9
13590: PPUSH
13591: LD_VAR 0 33
13595: PUSH
13596: LD_INT 1
13598: ARRAY
13599: PUSH
13600: LD_INT 1
13602: ARRAY
13603: PPUSH
13604: LD_VAR 0 33
13608: PUSH
13609: LD_INT 1
13611: ARRAY
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 33
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PUSH
13626: LD_INT 3
13628: ARRAY
13629: PPUSH
13630: LD_VAR 0 33
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: PUSH
13639: LD_INT 4
13641: ARRAY
13642: PPUSH
13643: CALL_OW 145
// end ; if tag = tCrates then
13647: LD_VAR 0 15
13651: PUSH
13652: LD_INT 2
13654: EQUAL
13655: IFFALSE 13794
// begin if IsInUnit ( i ) then
13657: LD_VAR 0 9
13661: PPUSH
13662: CALL_OW 310
13666: IFFALSE 13679
// begin ComExitBuilding ( i ) ;
13668: LD_VAR 0 9
13672: PPUSH
13673: CALL_OW 122
// continue ;
13677: GO 12962
// end ; if not cr then
13679: LD_VAR 0 17
13683: NOT
13684: IFFALSE 13700
// begin SetTag ( i , 0 ) ;
13686: LD_VAR 0 9
13690: PPUSH
13691: LD_INT 0
13693: PPUSH
13694: CALL_OW 109
// continue ;
13698: GO 12962
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13700: LD_VAR 0 9
13704: PPUSH
13705: CALL_OW 314
13709: NOT
13710: IFFALSE 13765
13712: PUSH
13713: LD_INT 81
13715: PUSH
13716: LD_VAR 0 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 92
13727: PUSH
13728: LD_VAR 0 17
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PUSH
13737: LD_VAR 0 17
13741: PUSH
13742: LD_INT 2
13744: ARRAY
13745: PUSH
13746: LD_INT 12
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PPUSH
13759: CALL_OW 69
13763: NOT
13764: AND
13765: IFFALSE 13794
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13767: LD_VAR 0 9
13771: PPUSH
13772: LD_VAR 0 17
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: LD_VAR 0 17
13785: PUSH
13786: LD_INT 2
13788: ARRAY
13789: PPUSH
13790: CALL_OW 117
// end ; end ;
13794: GO 12962
13796: POP
13797: POP
// end ; if vehicles then
13798: LD_VAR 0 26
13802: IFFALSE 14614
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13804: LD_ADDR_VAR 0 26
13808: PUSH
13809: LD_VAR 0 26
13813: PPUSH
13814: LD_INT 3
13816: PUSH
13817: LD_INT 2
13819: PUSH
13820: LD_INT 34
13822: PUSH
13823: LD_INT 88
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 34
13832: PUSH
13833: LD_INT 32
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 50
13851: PUSH
13852: EMPTY
13853: LIST
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 72
13863: ST_TO_ADDR
// if vehicles then
13864: LD_VAR 0 26
13868: IFFALSE 14614
// begin for i in vehicles do
13870: LD_ADDR_VAR 0 9
13874: PUSH
13875: LD_VAR 0 26
13879: PUSH
13880: FOR_IN
13881: IFFALSE 14612
// begin tag := GetTag ( i ) ;
13883: LD_ADDR_VAR 0 15
13887: PUSH
13888: LD_VAR 0 9
13892: PPUSH
13893: CALL_OW 110
13897: ST_TO_ADDR
// if not tag then
13898: LD_VAR 0 15
13902: NOT
13903: IFFALSE 14049
// begin if GetControl ( i ) = control_manual then
13905: LD_VAR 0 9
13909: PPUSH
13910: CALL_OW 263
13914: PUSH
13915: LD_INT 1
13917: EQUAL
13918: IFFALSE 14035
// begin drivers := arDrivers ;
13920: LD_ADDR_VAR 0 24
13924: PUSH
13925: LD_EXP 50
13929: ST_TO_ADDR
// if not drivers then
13930: LD_VAR 0 24
13934: NOT
13935: IFFALSE 14015
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13937: LD_ADDR_VAR 0 24
13941: PUSH
13942: LD_VAR 0 14
13946: PPUSH
13947: LD_INT 3
13949: PUSH
13950: LD_INT 120
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 72
13968: ST_TO_ADDR
// if drivers then
13969: LD_VAR 0 24
13973: IFFALSE 14015
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13975: LD_VAR 0 24
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_INT 7
13986: PPUSH
13987: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13991: LD_ADDR_EXP 50
13995: PUSH
13996: LD_EXP 50
14000: PPUSH
14001: LD_VAR 0 24
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL 65770 0 2
14014: ST_TO_ADDR
// end ; end ; if drivers then
14015: LD_VAR 0 24
14019: IFFALSE 14033
// SetTag ( i , tBusy ) ;
14021: LD_VAR 0 9
14025: PPUSH
14026: LD_INT 8
14028: PPUSH
14029: CALL_OW 109
// continue ;
14033: GO 13880
// end ; SetTag ( i , tBusy ) ;
14035: LD_VAR 0 9
14039: PPUSH
14040: LD_INT 8
14042: PPUSH
14043: CALL_OW 109
// end else
14047: GO 14610
// if tag = tBusy then
14049: LD_VAR 0 15
14053: PUSH
14054: LD_INT 8
14056: EQUAL
14057: IFFALSE 14277
// begin if GetLives ( i ) = 1000 then
14059: LD_VAR 0 9
14063: PPUSH
14064: CALL_OW 256
14068: PUSH
14069: LD_INT 1000
14071: EQUAL
14072: IFFALSE 14275
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
14074: LD_VAR 0 9
14078: PPUSH
14079: CALL_OW 263
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: IFFALSE 14101
14089: PUSH
14090: LD_VAR 0 9
14094: PPUSH
14095: CALL_OW 311
14099: NOT
14100: AND
14101: IFFALSE 14263
// begin drivers := arDrivers ;
14103: LD_ADDR_VAR 0 24
14107: PUSH
14108: LD_EXP 50
14112: ST_TO_ADDR
// if not drivers then
14113: LD_VAR 0 24
14117: NOT
14118: IFFALSE 14134
// begin SetTag ( i , 0 ) ;
14120: LD_VAR 0 9
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 109
// continue ;
14132: GO 13880
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14134: LD_VAR 0 24
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PPUSH
14143: CALL_OW 310
14147: IFFALSE 14165
14149: PUSH
14150: LD_VAR 0 24
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: PPUSH
14159: CALL 63350 0 1
14163: NOT
14164: AND
14165: IFFALSE 14180
// ComExitBuilding ( drivers [ 1 ] ) ;
14167: LD_VAR 0 24
14171: PUSH
14172: LD_INT 1
14174: ARRAY
14175: PPUSH
14176: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14180: LD_VAR 0 26
14184: PPUSH
14185: LD_INT 120
14187: PUSH
14188: LD_INT 3
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 72
14199: IFFALSE 14217
14201: PUSH
14202: LD_VAR 0 24
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 314
14215: NOT
14216: AND
14217: IFTRUE 14241
14219: PUSH
14220: LD_VAR 0 26
14224: PPUSH
14225: LD_INT 120
14227: PUSH
14228: LD_INT 3
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 72
14239: NOT
14240: OR
14241: IFFALSE 14261
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14243: LD_VAR 0 24
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: LD_VAR 0 9
14256: PPUSH
14257: CALL_OW 120
// continue ;
14261: GO 13880
// end ; SetTag ( i , tAttack ) ;
14263: LD_VAR 0 9
14267: PPUSH
14268: LD_INT 13
14270: PPUSH
14271: CALL_OW 109
// end ; end else
14275: GO 14610
// if tag = tAttack then
14277: LD_VAR 0 15
14281: PUSH
14282: LD_INT 13
14284: EQUAL
14285: IFFALSE 14467
// begin enemy := enemyInBase ;
14287: LD_ADDR_VAR 0 21
14291: PUSH
14292: LD_VAR 0 22
14296: ST_TO_ADDR
// if not enemy then
14297: LD_VAR 0 21
14301: NOT
14302: IFFALSE 14314
// enemy := enemyOuterBase ;
14304: LD_ADDR_VAR 0 21
14308: PUSH
14309: LD_VAR 0 23
14313: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14314: LD_VAR 0 21
14318: NOT
14319: IFFALSE 14354
14321: PUSH
14322: LD_VAR 0 9
14326: PPUSH
14327: LD_VAR 0 7
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: PPUSH
14336: LD_VAR 0 7
14340: PUSH
14341: LD_INT 2
14343: ARRAY
14344: PPUSH
14345: CALL_OW 297
14349: PUSH
14350: LD_INT 10
14352: GREATER
14353: AND
14354: IFFALSE 14385
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14356: LD_VAR 0 9
14360: PPUSH
14361: LD_VAR 0 7
14365: PUSH
14366: LD_INT 1
14368: ARRAY
14369: PPUSH
14370: LD_VAR 0 7
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: CALL_OW 111
// continue ;
14383: GO 13880
// end ; if GetLives ( i ) < 650 then
14385: LD_VAR 0 9
14389: PPUSH
14390: CALL_OW 256
14394: PUSH
14395: LD_INT 650
14397: LESS
14398: IFFALSE 14441
// begin SetTag ( i , tVehRepair ) ;
14400: LD_VAR 0 9
14404: PPUSH
14405: LD_INT 9
14407: PPUSH
14408: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14412: LD_VAR 0 9
14416: PPUSH
14417: LD_VAR 0 7
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: LD_VAR 0 7
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: CALL_OW 111
// continue ;
14439: GO 13880
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14441: LD_VAR 0 9
14445: PPUSH
14446: LD_VAR 0 21
14450: PPUSH
14451: LD_VAR 0 9
14455: PPUSH
14456: CALL_OW 74
14460: PPUSH
14461: CALL_OW 115
// end else
14465: GO 14610
// if tag = tVehRepair then
14467: LD_VAR 0 15
14471: PUSH
14472: LD_INT 9
14474: EQUAL
14475: IFFALSE 14610
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14477: LD_VAR 0 9
14481: PPUSH
14482: LD_VAR 0 7
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_VAR 0 7
14495: PUSH
14496: LD_INT 2
14498: ARRAY
14499: PPUSH
14500: CALL_OW 297
14504: PUSH
14505: LD_INT 10
14507: GREATER
14508: IFFALSE 14539
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14510: LD_VAR 0 9
14514: PPUSH
14515: LD_VAR 0 7
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: LD_VAR 0 7
14528: PUSH
14529: LD_INT 2
14531: ARRAY
14532: PPUSH
14533: CALL_OW 111
// continue ;
14537: GO 13880
// end ; if GetLives ( i ) = 1000 then
14539: LD_VAR 0 9
14543: PPUSH
14544: CALL_OW 256
14548: PUSH
14549: LD_INT 1000
14551: EQUAL
14552: IFFALSE 14568
// begin SetTag ( i , tBusy ) ;
14554: LD_VAR 0 9
14558: PPUSH
14559: LD_INT 8
14561: PPUSH
14562: CALL_OW 109
// continue ;
14566: GO 13880
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14568: LD_VAR 0 9
14572: PPUSH
14573: CALL_OW 263
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: IFFALSE 14594
14583: PUSH
14584: LD_VAR 0 9
14588: PPUSH
14589: CALL_OW 311
14593: AND
14594: IFFALSE 14610
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14596: LD_VAR 0 9
14600: PPUSH
14601: CALL_OW 311
14605: PPUSH
14606: CALL 67484 0 1
// end ; end ;
14610: GO 13880
14612: POP
14613: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14614: LD_ADDR_VAR 0 19
14618: PUSH
14619: LD_VAR 0 5
14623: PPUSH
14624: LD_INT 2
14626: PUSH
14627: LD_INT 25
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 25
14639: PUSH
14640: LD_INT 8
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 25
14649: PUSH
14650: LD_INT 5
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 25
14659: PUSH
14660: LD_INT 9
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 50
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PPUSH
14684: CALL_OW 72
14688: ST_TO_ADDR
// if sol then
14689: LD_VAR 0 19
14693: IFFALSE 15209
// begin if enemyInBase then
14695: LD_VAR 0 22
14699: IFFALSE 14878
// begin for i in sol do
14701: LD_ADDR_VAR 0 9
14705: PUSH
14706: LD_VAR 0 19
14710: PUSH
14711: FOR_IN
14712: IFFALSE 14874
// begin tw := IsInUnit ( i ) ;
14714: LD_ADDR_VAR 0 16
14718: PUSH
14719: LD_VAR 0 9
14723: PPUSH
14724: CALL_OW 310
14728: ST_TO_ADDR
// if tw then
14729: LD_VAR 0 16
14733: IFFALSE 14816
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14735: LD_VAR 0 16
14739: PUSH
14740: LD_INT 22
14742: PUSH
14743: LD_VAR 0 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 101
14754: PUSH
14755: LD_VAR 0 34
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 2
14766: PUSH
14767: LD_INT 30
14769: PUSH
14770: LD_INT 32
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 30
14779: PUSH
14780: LD_INT 31
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: IN
14802: NOT
14803: IFFALSE 14814
// ComExitBuilding ( i ) ;
14805: LD_VAR 0 9
14809: PPUSH
14810: CALL_OW 122
// end else
14814: GO 14872
// if IsInArea ( i , area ) then
14816: LD_VAR 0 9
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: CALL_OW 308
14830: IFFALSE 14858
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14832: LD_VAR 0 9
14836: PPUSH
14837: LD_VAR 0 22
14841: PPUSH
14842: LD_VAR 0 9
14846: PPUSH
14847: CALL_OW 74
14851: PPUSH
14852: CALL_OW 115
14856: GO 14872
// ComMoveToArea ( i , area ) ;
14858: LD_VAR 0 9
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: CALL_OW 113
// end ;
14872: GO 14711
14874: POP
14875: POP
// end else
14876: GO 15209
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14878: LD_ADDR_VAR 0 28
14882: PUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 3
14890: PUSH
14891: LD_INT 62
14893: PUSH
14894: EMPTY
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 2
14903: PUSH
14904: LD_INT 30
14906: PUSH
14907: LD_INT 32
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 30
14916: PUSH
14917: LD_INT 4
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 30
14926: PUSH
14927: LD_INT 5
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 31
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 70
14959: ST_TO_ADDR
// if empty then
14960: LD_VAR 0 28
14964: IFFALSE 14981
// empty := ReverseArray ( empty ) ;
14966: LD_ADDR_VAR 0 28
14970: PUSH
14971: LD_VAR 0 28
14975: PPUSH
14976: CALL 60860 0 1
14980: ST_TO_ADDR
// for i in sol do
14981: LD_ADDR_VAR 0 9
14985: PUSH
14986: LD_VAR 0 19
14990: PUSH
14991: FOR_IN
14992: IFFALSE 15207
// begin tag := GetTag ( i ) ;
14994: LD_ADDR_VAR 0 15
14998: PUSH
14999: LD_VAR 0 9
15003: PPUSH
15004: CALL_OW 110
15008: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15009: LD_VAR 0 9
15013: PPUSH
15014: CALL_OW 256
15018: PUSH
15019: LD_INT 1000
15021: LESS
15022: IFFALSE 15034
15024: PUSH
15025: LD_VAR 0 15
15029: PUSH
15030: LD_INT 1
15032: NONEQUAL
15033: AND
15034: IFFALSE 15086
// begin SetTag ( i , tHeal ) ;
15036: LD_VAR 0 9
15040: PPUSH
15041: LD_INT 1
15043: PPUSH
15044: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15048: LD_VAR 0 9
15052: PPUSH
15053: LD_VAR 0 6
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 6
15066: PUSH
15067: LD_INT 2
15069: ARRAY
15070: PPUSH
15071: CALL_OW 111
// AddComHold ( i ) ;
15075: LD_VAR 0 9
15079: PPUSH
15080: CALL_OW 200
// continue ;
15084: GO 14991
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15086: LD_VAR 0 9
15090: PPUSH
15091: CALL_OW 256
15095: PUSH
15096: LD_INT 1000
15098: EQUAL
15099: IFFALSE 15111
15101: PUSH
15102: LD_VAR 0 15
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: AND
15111: IFFALSE 15127
// begin SetTag ( i , 0 ) ;
15113: LD_VAR 0 9
15117: PPUSH
15118: LD_INT 0
15120: PPUSH
15121: CALL_OW 109
// continue ;
15125: GO 14991
// end ; if HasTask ( i ) then
15127: LD_VAR 0 9
15131: PPUSH
15132: CALL_OW 314
15136: IFFALSE 15140
// continue ;
15138: GO 14991
// if not IsInUnit ( i ) and not tag and empty then
15140: LD_VAR 0 9
15144: PPUSH
15145: CALL_OW 310
15149: NOT
15150: IFFALSE 15159
15152: PUSH
15153: LD_VAR 0 15
15157: NOT
15158: AND
15159: IFFALSE 15167
15161: PUSH
15162: LD_VAR 0 28
15166: AND
15167: IFFALSE 15205
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15169: LD_VAR 0 9
15173: PPUSH
15174: LD_VAR 0 28
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15187: LD_ADDR_VAR 0 28
15191: PUSH
15192: LD_VAR 0 28
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 3
15204: ST_TO_ADDR
// end ; end ;
15205: GO 14991
15207: POP
15208: POP
// end ; end ; end ;
15209: LD_VAR 0 8
15213: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15214: LD_EXP 54
15218: PPUSH
15219: LD_INT 50
15221: PUSH
15222: EMPTY
15223: LIST
15224: PPUSH
15225: CALL_OW 72
15229: IFFALSE 15282
15231: GO 15233
15233: DISABLE
// begin BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15234: LD_EXP 3
15238: PUSH
15239: LD_INT 2
15241: ARRAY
15242: PPUSH
15243: LD_INT 2
15245: PPUSH
15246: LD_INT 5
15248: PPUSH
15249: LD_INT 6
15251: PPUSH
15252: LD_EXP 54
15256: PPUSH
15257: LD_INT 210
15259: PUSH
15260: LD_INT 43
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PPUSH
15267: LD_INT 194
15269: PUSH
15270: LD_INT 28
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PPUSH
15277: CALL 11645 0 7
// enable ;
15281: ENABLE
// end ;
15282: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15283: LD_EXP 53
15287: IFFALSE 15507
15289: GO 15291
15291: DISABLE
15292: LD_INT 0
15294: PPUSH
15295: PPUSH
15296: PPUSH
// begin enable ;
15297: ENABLE
// p := 1 ;
15298: LD_ADDR_VAR 0 2
15302: PUSH
15303: LD_INT 1
15305: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15306: LD_ADDR_VAR 0 1
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_EXP 53
15320: PPUSH
15321: CALL 29838 0 1
15325: PUSH
15326: LD_INT 2
15328: DIV
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15505
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_EXP 53
15342: PUSH
15343: LD_VAR 0 2
15347: ARRAY
15348: PPUSH
15349: LD_EXP 53
15353: PUSH
15354: LD_VAR 0 2
15358: PUSH
15359: LD_INT 1
15361: PLUS
15362: ARRAY
15363: PPUSH
15364: CALL_OW 428
15368: ST_TO_ADDR
// if tmp then
15369: LD_VAR 0 3
15373: IFFALSE 15489
// if GetSide ( tmp ) <> botSides [ 2 ] then
15375: LD_VAR 0 3
15379: PPUSH
15380: CALL_OW 255
15384: PUSH
15385: LD_EXP 3
15389: PUSH
15390: LD_INT 2
15392: ARRAY
15393: NONEQUAL
15394: IFFALSE 15489
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15396: LD_EXP 53
15400: PUSH
15401: LD_VAR 0 2
15405: ARRAY
15406: PPUSH
15407: LD_EXP 53
15411: PUSH
15412: LD_VAR 0 2
15416: PUSH
15417: LD_INT 1
15419: PLUS
15420: ARRAY
15421: PPUSH
15422: LD_EXP 3
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: PPUSH
15431: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15435: LD_ADDR_EXP 53
15439: PUSH
15440: LD_EXP 53
15444: PPUSH
15445: LD_VAR 0 2
15449: PPUSH
15450: CALL_OW 3
15454: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15455: LD_ADDR_EXP 53
15459: PUSH
15460: LD_EXP 53
15464: PPUSH
15465: LD_VAR 0 2
15469: PPUSH
15470: CALL_OW 3
15474: ST_TO_ADDR
// p := p - 2 ;
15475: LD_ADDR_VAR 0 2
15479: PUSH
15480: LD_VAR 0 2
15484: PUSH
15485: LD_INT 2
15487: MINUS
15488: ST_TO_ADDR
// end ; p := p + 2 ;
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_VAR 0 2
15498: PUSH
15499: LD_INT 2
15501: PLUS
15502: ST_TO_ADDR
// end ;
15503: GO 15330
15505: POP
15506: POP
// end ;
15507: PPOPN 3
15509: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15510: LD_INT 32
15512: PPUSH
15513: CALL_OW 302
15517: IFFALSE 15526
15519: PUSH
15520: LD_EXP 46
15524: NOT
15525: AND
15526: IFFALSE 15596
15528: GO 15530
15530: DISABLE
// begin enable ;
15531: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15532: LD_ADDR_EXP 46
15536: PUSH
15537: LD_INT 14
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: LD_INT 27
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 14
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: LD_INT 26
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 14
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: LD_INT 27
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: ST_TO_ADDR
// end ; end_of_file
15596: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 255
15606: PUSH
15607: LD_EXP 3
15611: IN
15612: NOT
15613: IFFALSE 15617
// exit ;
15615: GO 15674
// if not un in [ Sikorski ] then
15617: LD_VAR 0 1
15621: PUSH
15622: LD_EXP 34
15626: PUSH
15627: EMPTY
15628: LIST
15629: IN
15630: NOT
15631: IFFALSE 15652
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15633: LD_VAR 0 1
15637: PPUSH
15638: LD_VAR 0 2
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL 5858 0 3
15650: GO 15674
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15652: LD_VAR 0 1
15656: PPUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 5
15664: PPUSH
15665: CALL 5175 0 1
15669: PPUSH
15670: CALL 5858 0 3
// end ;
15674: PPOPN 3
15676: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL 22212 0 1
// side := GetSide ( un ) ;
15698: LD_ADDR_VAR 0 3
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 255
15712: ST_TO_ADDR
// if multi_sides [ side ] then
15713: LD_EXP 7
15717: PUSH
15718: LD_VAR 0 3
15722: ARRAY
15723: IFFALSE 15749
// if GetType ( un ) = unit_human then
15725: LD_VAR 0 1
15729: PPUSH
15730: CALL_OW 247
15734: PUSH
15735: LD_INT 1
15737: EQUAL
15738: IFFALSE 15749
// MultiplayerEvent_HumanLost ( side ) ;
15740: LD_VAR 0 3
15744: PPUSH
15745: CALL 5738 0 1
// if side in botSides then
15749: LD_VAR 0 3
15753: PUSH
15754: LD_EXP 3
15758: IN
15759: IFFALSE 16892
// begin if side = botSides [ 1 ] then
15761: LD_VAR 0 3
15765: PUSH
15766: LD_EXP 3
15770: PUSH
15771: LD_INT 1
15773: ARRAY
15774: EQUAL
15775: IFFALSE 16318
// begin if un in amForce then
15777: LD_VAR 0 1
15781: PUSH
15782: LD_EXP 42
15786: IN
15787: IFFALSE 15805
// amForce := amForce diff un ;
15789: LD_ADDR_EXP 42
15793: PUSH
15794: LD_EXP 42
15798: PUSH
15799: LD_VAR 0 1
15803: DIFF
15804: ST_TO_ADDR
// if un in amAttackersVeh then
15805: LD_VAR 0 1
15809: PUSH
15810: LD_EXP 59
15814: IN
15815: IFFALSE 15833
// amAttackersVeh := amAttackersVeh diff un ;
15817: LD_ADDR_EXP 59
15821: PUSH
15822: LD_EXP 59
15826: PUSH
15827: LD_VAR 0 1
15831: DIFF
15832: ST_TO_ADDR
// if un in amAttackersInf then
15833: LD_VAR 0 1
15837: PUSH
15838: LD_EXP 58
15842: IN
15843: IFFALSE 15861
// amAttackersInf := amAttackersInf diff un ;
15845: LD_ADDR_EXP 58
15849: PUSH
15850: LD_EXP 58
15854: PUSH
15855: LD_VAR 0 1
15859: DIFF
15860: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 257
15870: PUSH
15871: LD_INT 3
15873: EQUAL
15874: IFFALSE 15882
15876: PUSH
15877: LD_EXP 44
15881: AND
15882: IFFALSE 16023
// begin if not IsOk ( amDep ) then
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 302
15891: NOT
15892: IFFALSE 15896
// exit ;
15894: GO 16997
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15896: LD_ADDR_EXP 44
15900: PUSH
15901: LD_EXP 44
15905: PPUSH
15906: CALL 67165 0 1
15910: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15911: LD_ADDR_OWVAR 20
15915: PUSH
15916: LD_EXP 3
15920: PUSH
15921: LD_INT 1
15923: ARRAY
15924: ST_TO_ADDR
// uc_nation := nation_american ;
15925: LD_ADDR_OWVAR 21
15929: PUSH
15930: LD_INT 1
15932: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15933: LD_INT 0
15935: PPUSH
15936: LD_INT 1
15938: PUSH
15939: LD_INT 2
15941: PUSH
15942: LD_INT 3
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: PUSH
15950: LD_OWVAR 67
15954: ARRAY
15955: PPUSH
15956: CALL_OW 383
// un := CreateHuman ;
15960: LD_ADDR_VAR 0 1
15964: PUSH
15965: CALL_OW 44
15969: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_INT 52
15977: PPUSH
15978: LD_INT 2
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_INT 23
15995: PPUSH
15996: LD_INT 19
15998: PPUSH
15999: CALL_OW 111
// amForce := Join ( amForce , un ) ;
16003: LD_ADDR_EXP 42
16007: PUSH
16008: LD_EXP 42
16012: PPUSH
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL 65770 0 2
16022: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 247
16032: PUSH
16033: LD_INT 3
16035: EQUAL
16036: IFFALSE 16179
// begin btype := GetBType ( un ) ;
16038: LD_ADDR_VAR 0 11
16042: PUSH
16043: LD_VAR 0 1
16047: PPUSH
16048: CALL_OW 266
16052: ST_TO_ADDR
// if btype = b_barracks then
16053: LD_VAR 0 11
16057: PUSH
16058: LD_INT 5
16060: EQUAL
16061: IFFALSE 16071
// btype := b_armoury ;
16063: LD_ADDR_VAR 0 11
16067: PUSH
16068: LD_INT 4
16070: ST_TO_ADDR
// if btype = b_factory then
16071: LD_VAR 0 11
16075: PUSH
16076: LD_INT 3
16078: EQUAL
16079: IFFALSE 16089
// btype := b_workshop ;
16081: LD_ADDR_VAR 0 11
16085: PUSH
16086: LD_INT 2
16088: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16089: LD_VAR 0 11
16093: PUSH
16094: LD_INT 8
16096: PUSH
16097: LD_INT 7
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: IN
16104: IFFALSE 16114
// btype := b_lab ;
16106: LD_ADDR_VAR 0 11
16110: PUSH
16111: LD_INT 6
16113: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16114: LD_ADDR_EXP 37
16118: PUSH
16119: LD_EXP 37
16123: PPUSH
16124: LD_EXP 37
16128: PUSH
16129: LD_INT 1
16131: PLUS
16132: PPUSH
16133: LD_VAR 0 11
16137: PUSH
16138: LD_VAR 0 1
16142: PPUSH
16143: CALL_OW 250
16147: PUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 251
16157: PUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 254
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL_OW 1
16178: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 247
16188: PUSH
16189: LD_INT 2
16191: EQUAL
16192: IFFALSE 16318
// begin chassis := GetChassis ( un ) ;
16194: LD_ADDR_VAR 0 5
16198: PUSH
16199: LD_VAR 0 1
16203: PPUSH
16204: CALL_OW 265
16208: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16209: LD_ADDR_VAR 0 6
16213: PUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 262
16223: ST_TO_ADDR
// control := GetControl ( un ) ;
16224: LD_ADDR_VAR 0 7
16228: PUSH
16229: LD_VAR 0 1
16233: PPUSH
16234: CALL_OW 263
16238: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16239: LD_ADDR_VAR 0 8
16243: PUSH
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 264
16253: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16254: LD_ADDR_VAR 0 9
16258: PUSH
16259: LD_VAR 0 10
16263: PPUSH
16264: LD_VAR 0 5
16268: PPUSH
16269: LD_VAR 0 6
16273: PPUSH
16274: LD_VAR 0 7
16278: PPUSH
16279: LD_VAR 0 8
16283: PPUSH
16284: CALL 30196 0 5
16288: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
16289: LD_ADDR_EXP 36
16293: PUSH
16294: LD_EXP 36
16298: PPUSH
16299: LD_EXP 36
16303: PUSH
16304: LD_INT 1
16306: PLUS
16307: PPUSH
16308: LD_VAR 0 9
16312: PPUSH
16313: CALL_OW 1
16317: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
16318: LD_VAR 0 3
16322: PUSH
16323: LD_EXP 3
16327: PUSH
16328: LD_INT 2
16330: ARRAY
16331: EQUAL
16332: IFFALSE 16892
// begin if un in arForce then
16334: LD_VAR 0 1
16338: PUSH
16339: LD_EXP 54
16343: IN
16344: IFFALSE 16362
// arForce := arForce diff un ;
16346: LD_ADDR_EXP 54
16350: PUSH
16351: LD_EXP 54
16355: PUSH
16356: LD_VAR 0 1
16360: DIFF
16361: ST_TO_ADDR
// if un in arAttackersVeh then
16362: LD_VAR 0 1
16366: PUSH
16367: LD_EXP 57
16371: IN
16372: IFFALSE 16390
// arAttackersVeh := arAttackersVeh diff un ;
16374: LD_ADDR_EXP 57
16378: PUSH
16379: LD_EXP 57
16383: PUSH
16384: LD_VAR 0 1
16388: DIFF
16389: ST_TO_ADDR
// if un in arAttackersInf then
16390: LD_VAR 0 1
16394: PUSH
16395: LD_EXP 56
16399: IN
16400: IFFALSE 16418
// arAttackersInf := arAttackersInf diff un ;
16402: LD_ADDR_EXP 56
16406: PUSH
16407: LD_EXP 56
16411: PUSH
16412: LD_VAR 0 1
16416: DIFF
16417: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 257
16427: PUSH
16428: LD_INT 3
16430: EQUAL
16431: IFFALSE 16448
16433: PUSH
16434: LD_VAR 0 1
16438: PPUSH
16439: CALL_OW 110
16443: PUSH
16444: LD_INT 999
16446: LESS
16447: AND
16448: IFFALSE 16456
16450: PUSH
16451: LD_EXP 51
16455: AND
16456: IFFALSE 16597
// begin if not IsOk ( arDep ) then
16458: LD_INT 32
16460: PPUSH
16461: CALL_OW 302
16465: NOT
16466: IFFALSE 16470
// exit ;
16468: GO 16997
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16470: LD_ADDR_EXP 51
16474: PUSH
16475: LD_EXP 51
16479: PPUSH
16480: CALL 67165 0 1
16484: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16485: LD_ADDR_OWVAR 20
16489: PUSH
16490: LD_EXP 3
16494: PUSH
16495: LD_INT 2
16497: ARRAY
16498: ST_TO_ADDR
// uc_nation := nation_arabian ;
16499: LD_ADDR_OWVAR 21
16503: PUSH
16504: LD_INT 2
16506: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16507: LD_INT 0
16509: PPUSH
16510: LD_INT 1
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: PUSH
16524: LD_OWVAR 67
16528: ARRAY
16529: PPUSH
16530: CALL_OW 383
// un := CreateHuman ;
16534: LD_ADDR_VAR 0 1
16538: PUSH
16539: CALL_OW 44
16543: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16544: LD_VAR 0 1
16548: PPUSH
16549: LD_INT 178
16551: PPUSH
16552: LD_INT 2
16554: PPUSH
16555: LD_INT 0
16557: PPUSH
16558: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16562: LD_VAR 0 1
16566: PPUSH
16567: LD_INT 204
16569: PPUSH
16570: LD_INT 35
16572: PPUSH
16573: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16577: LD_ADDR_EXP 54
16581: PUSH
16582: LD_EXP 54
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL 65770 0 2
16596: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 247
16606: PUSH
16607: LD_INT 3
16609: EQUAL
16610: IFFALSE 16753
// begin btype := GetBType ( un ) ;
16612: LD_ADDR_VAR 0 11
16616: PUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 266
16626: ST_TO_ADDR
// if btype = b_barracks then
16627: LD_VAR 0 11
16631: PUSH
16632: LD_INT 5
16634: EQUAL
16635: IFFALSE 16645
// btype := b_armoury ;
16637: LD_ADDR_VAR 0 11
16641: PUSH
16642: LD_INT 4
16644: ST_TO_ADDR
// if btype = b_factory then
16645: LD_VAR 0 11
16649: PUSH
16650: LD_INT 3
16652: EQUAL
16653: IFFALSE 16663
// btype := b_workshop ;
16655: LD_ADDR_VAR 0 11
16659: PUSH
16660: LD_INT 2
16662: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16663: LD_VAR 0 11
16667: PUSH
16668: LD_INT 8
16670: PUSH
16671: LD_INT 7
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: IN
16678: IFFALSE 16688
// btype := b_lab ;
16680: LD_ADDR_VAR 0 11
16684: PUSH
16685: LD_INT 6
16687: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16688: LD_ADDR_EXP 47
16692: PUSH
16693: LD_EXP 47
16697: PPUSH
16698: LD_EXP 47
16702: PUSH
16703: LD_INT 1
16705: PLUS
16706: PPUSH
16707: LD_VAR 0 11
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 250
16721: PUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 251
16731: PUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 254
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: PPUSH
16748: CALL_OW 1
16752: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 247
16762: PUSH
16763: LD_INT 2
16765: EQUAL
16766: IFFALSE 16892
// begin chassis := GetChassis ( un ) ;
16768: LD_ADDR_VAR 0 5
16772: PUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 265
16782: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16783: LD_ADDR_VAR 0 6
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 262
16797: ST_TO_ADDR
// control := GetControl ( un ) ;
16798: LD_ADDR_VAR 0 7
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 263
16812: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16813: LD_ADDR_VAR 0 8
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 264
16827: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16828: LD_ADDR_VAR 0 9
16832: PUSH
16833: LD_VAR 0 10
16837: PPUSH
16838: LD_VAR 0 5
16842: PPUSH
16843: LD_VAR 0 6
16847: PPUSH
16848: LD_VAR 0 7
16852: PPUSH
16853: LD_VAR 0 8
16857: PPUSH
16858: CALL 30196 0 5
16862: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16863: LD_ADDR_EXP 46
16867: PUSH
16868: LD_EXP 46
16872: PPUSH
16873: LD_EXP 46
16877: PUSH
16878: LD_INT 1
16880: PLUS
16881: PPUSH
16882: LD_VAR 0 9
16886: PPUSH
16887: CALL_OW 1
16891: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
16892: LD_EXP 24
16896: IFFALSE 16904
16898: PUSH
16899: LD_EXP 16
16903: AND
16904: IFFALSE 16919
16906: PUSH
16907: LD_EXP 25
16911: PUSH
16912: LD_VAR 0 3
16916: ARRAY
16917: NOT
16918: AND
16919: IFFALSE 16997
// if un in multi_commanders then
16921: LD_VAR 0 1
16925: PUSH
16926: LD_EXP 24
16930: IN
16931: IFFALSE 16997
// begin if side = your_side then
16933: LD_VAR 0 3
16937: PUSH
16938: LD_OWVAR 2
16942: EQUAL
16943: IFFALSE 16949
// Multiplayer_Loose_Message ;
16945: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16949: LD_ADDR_EXP 25
16953: PUSH
16954: LD_EXP 25
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 1
16971: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16972: LD_ADDR_EXP 24
16976: PUSH
16977: LD_EXP 24
16981: PUSH
16982: LD_VAR 0 1
16986: DIFF
16987: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16988: LD_VAR 0 3
16992: PPUSH
16993: CALL 5208 0 1
// end ; end ;
16997: PPOPN 11
16999: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
17000: LD_INT 0
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
// begin side := GetSide ( building ) ;
17006: LD_ADDR_VAR 0 4
17010: PUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 255
17020: ST_TO_ADDR
// if multi_sides [ side ] then
17021: LD_EXP 7
17025: PUSH
17026: LD_VAR 0 4
17030: ARRAY
17031: IFFALSE 17052
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
17033: LD_VAR 0 4
17037: PPUSH
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 266
17047: PPUSH
17048: CALL 5784 0 2
// if side = botSides [ 1 ] then
17052: LD_VAR 0 4
17056: PUSH
17057: LD_EXP 3
17061: PUSH
17062: LD_INT 1
17064: ARRAY
17065: EQUAL
17066: IFFALSE 17150
// begin amBuildings := Delete ( amBuildings , 1 ) ;
17068: LD_ADDR_EXP 37
17072: PUSH
17073: LD_EXP 37
17077: PPUSH
17078: LD_INT 1
17080: PPUSH
17081: CALL_OW 3
17085: ST_TO_ADDR
// btype := GetBType ( building ) ;
17086: LD_ADDR_VAR 0 5
17090: PUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 266
17100: ST_TO_ADDR
// case btype of b_workshop :
17101: LD_VAR 0 5
17105: PUSH
17106: LD_INT 2
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17126
17114: POP
// ComUpgrade ( building ) ; b_lab :
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 146
17124: GO 17150
17126: LD_INT 6
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17149
17134: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 10
17142: PPUSH
17143: CALL_OW 207
// end ; end ;
17147: GO 17150
17149: POP
// end ; if side = botSides [ 2 ] then
17150: LD_VAR 0 4
17154: PUSH
17155: LD_EXP 3
17159: PUSH
17160: LD_INT 2
17162: ARRAY
17163: EQUAL
17164: IFFALSE 17260
// begin arBuildings := Delete ( arBuildings , 1 ) ;
17166: LD_ADDR_EXP 47
17170: PUSH
17171: LD_EXP 47
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: CALL_OW 3
17183: ST_TO_ADDR
// btype := GetBType ( building ) ;
17184: LD_ADDR_VAR 0 5
17188: PUSH
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL_OW 266
17198: ST_TO_ADDR
// case btype of b_workshop :
17199: LD_VAR 0 5
17203: PUSH
17204: LD_INT 2
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17224
17212: POP
// ComUpgrade ( building ) ; b_lab :
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 146
17222: GO 17260
17224: LD_INT 6
17226: DOUBLE
17227: EQUAL
17228: IFTRUE 17232
17230: GO 17259
17232: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17233: LD_VAR 0 1
17237: PPUSH
17238: LD_INT 10
17240: PPUSH
17241: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
17245: LD_VAR 0 1
17249: PPUSH
17250: LD_INT 15
17252: PPUSH
17253: CALL_OW 207
// end ; end ;
17257: GO 17260
17259: POP
// end ; end ;
17260: PPOPN 5
17262: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 255
17272: PUSH
17273: LD_EXP 3
17277: IN
17278: NOT
17279: IFFALSE 17283
// exit ;
17281: GO 17448
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
17283: LD_VAR 0 2
17287: PUSH
17288: LD_EXP 55
17292: IN
17293: IFFALSE 17310
17295: PUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 266
17305: PUSH
17306: LD_INT 31
17308: EQUAL
17309: AND
17310: IFFALSE 17334
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
17312: LD_VAR 0 2
17316: PPUSH
17317: LD_INT 215
17319: PPUSH
17320: LD_INT 102
17322: PPUSH
17323: CALL_OW 428
17327: PPUSH
17328: CALL_OW 120
// exit ;
17332: GO 17448
// end ; if HexInfo ( 44 , 78 ) then
17334: LD_INT 44
17336: PPUSH
17337: LD_INT 78
17339: PPUSH
17340: CALL_OW 428
17344: IFFALSE 17383
// begin ComMoveXY ( unit , 26 , 40 ) ;
17346: LD_VAR 0 2
17350: PPUSH
17351: LD_INT 26
17353: PPUSH
17354: LD_INT 40
17356: PPUSH
17357: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
17361: LD_ADDR_EXP 42
17365: PUSH
17366: LD_EXP 42
17370: PPUSH
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL 65770 0 2
17380: ST_TO_ADDR
// exit ;
17381: GO 17448
// end ; if GetX ( building ) > 71 then
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 250
17392: PUSH
17393: LD_INT 71
17395: GREATER
17396: IFFALSE 17448
// begin ComMoveXY ( unit , 69 , 39 ) ;
17398: LD_VAR 0 2
17402: PPUSH
17403: LD_INT 69
17405: PPUSH
17406: LD_INT 39
17408: PPUSH
17409: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
17413: LD_VAR 0 2
17417: PPUSH
17418: LD_INT 26
17420: PPUSH
17421: LD_INT 40
17423: PPUSH
17424: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
17428: LD_ADDR_EXP 42
17432: PUSH
17433: LD_EXP 42
17437: PPUSH
17438: LD_VAR 0 2
17442: PPUSH
17443: CALL 65770 0 2
17447: ST_TO_ADDR
// end ; end ;
17448: PPOPN 2
17450: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17451: LD_INT 0
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17459: LD_VAR 0 1
17463: PPUSH
17464: LD_VAR 0 2
17468: PPUSH
17469: CALL 22270 0 2
// side := GetSide ( vehicle ) ;
17473: LD_ADDR_VAR 0 4
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 255
17487: ST_TO_ADDR
// if multi_sides [ side ] then
17488: LD_EXP 7
17492: PUSH
17493: LD_VAR 0 4
17497: ARRAY
17498: IFFALSE 17509
// MultiplayerEvent_Produced ( side ) ;
17500: LD_VAR 0 4
17504: PPUSH
17505: CALL 5692 0 1
// if side = botSides [ 1 ] then
17509: LD_VAR 0 4
17513: PUSH
17514: LD_EXP 3
17518: PUSH
17519: LD_INT 1
17521: ARRAY
17522: EQUAL
17523: IFFALSE 17661
// begin driver := IsDrivenBy ( vehicle ) ;
17525: LD_ADDR_VAR 0 8
17529: PUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 311
17539: ST_TO_ADDR
// if driver then
17540: LD_VAR 0 8
17544: IFFALSE 17578
// begin SetTag ( driver , tMech ) ;
17546: LD_VAR 0 8
17550: PPUSH
17551: LD_INT 7
17553: PPUSH
17554: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17558: LD_ADDR_EXP 40
17562: PUSH
17563: LD_EXP 40
17567: PPUSH
17568: LD_VAR 0 8
17572: PPUSH
17573: CALL 65770 0 2
17577: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17578: LD_EXP 41
17582: PUSH
17583: LD_EXP 38
17587: PPUSH
17588: CALL 29838 0 1
17592: GREATER
17593: IFTRUE 17617
17595: PUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 266
17605: PUSH
17606: LD_INT 12
17608: PUSH
17609: LD_INT 13
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: IN
17616: OR
17617: IFFALSE 17641
// amVehicles := Join ( amVehicles , vehicle ) else
17619: LD_ADDR_EXP 38
17623: PUSH
17624: LD_EXP 38
17628: PPUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL 65770 0 2
17638: ST_TO_ADDR
17639: GO 17661
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17641: LD_ADDR_EXP 39
17645: PUSH
17646: LD_EXP 39
17650: PPUSH
17651: LD_VAR 0 1
17655: PPUSH
17656: CALL 65770 0 2
17660: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17661: LD_VAR 0 4
17665: PUSH
17666: LD_EXP 3
17670: PUSH
17671: LD_INT 2
17673: ARRAY
17674: EQUAL
17675: IFFALSE 17813
// begin driver := IsDrivenBy ( vehicle ) ;
17677: LD_ADDR_VAR 0 8
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 311
17691: ST_TO_ADDR
// if driver then
17692: LD_VAR 0 8
17696: IFFALSE 17730
// begin SetTag ( driver , tMech ) ;
17698: LD_VAR 0 8
17702: PPUSH
17703: LD_INT 7
17705: PPUSH
17706: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17710: LD_ADDR_EXP 50
17714: PUSH
17715: LD_EXP 50
17719: PPUSH
17720: LD_VAR 0 8
17724: PPUSH
17725: CALL 65770 0 2
17729: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17730: LD_EXP 52
17734: PUSH
17735: LD_EXP 48
17739: PPUSH
17740: CALL 29838 0 1
17744: GREATER
17745: IFTRUE 17769
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 266
17757: PUSH
17758: LD_INT 32
17760: PUSH
17761: LD_INT 88
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: IN
17768: OR
17769: IFFALSE 17793
// arVehicles := Join ( arVehicles , vehicle ) else
17771: LD_ADDR_EXP 48
17775: PUSH
17776: LD_EXP 48
17780: PPUSH
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL 65770 0 2
17790: ST_TO_ADDR
17791: GO 17813
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17793: LD_ADDR_EXP 49
17797: PUSH
17798: LD_EXP 49
17802: PPUSH
17803: LD_VAR 0 1
17807: PPUSH
17808: CALL 65770 0 2
17812: ST_TO_ADDR
// end ; end ;
17813: PPOPN 8
17815: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 110
17825: PUSH
17826: LD_INT 7
17828: EQUAL
17829: IFFALSE 17843
// SetTag ( driver , 0 ) ;
17831: LD_VAR 0 1
17835: PPUSH
17836: LD_INT 0
17838: PPUSH
17839: CALL_OW 109
// end ;
17843: PPOPN 4
17845: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17846: LD_VAR 0 2
17850: PPUSH
17851: CALL_OW 255
17855: PUSH
17856: LD_EXP 3
17860: PUSH
17861: LD_INT 1
17863: ARRAY
17864: EQUAL
17865: IFFALSE 17895
// if tech in amTech then
17867: LD_VAR 0 1
17871: PUSH
17872: LD_EXP 35
17876: IN
17877: IFFALSE 17895
// amTech := amTech diff tech ;
17879: LD_ADDR_EXP 35
17883: PUSH
17884: LD_EXP 35
17888: PUSH
17889: LD_VAR 0 1
17893: DIFF
17894: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17895: LD_VAR 0 2
17899: PPUSH
17900: CALL_OW 255
17904: PUSH
17905: LD_EXP 3
17909: PUSH
17910: LD_INT 2
17912: ARRAY
17913: EQUAL
17914: IFFALSE 17944
// if tech in arTech then
17916: LD_VAR 0 1
17920: PUSH
17921: LD_EXP 45
17925: IN
17926: IFFALSE 17944
// arTech := arTech diff tech ;
17928: LD_ADDR_EXP 45
17932: PUSH
17933: LD_EXP 45
17937: PUSH
17938: LD_VAR 0 1
17942: DIFF
17943: ST_TO_ADDR
// end ; end_of_file
17944: PPOPN 2
17946: END
// every 10 10$00 trigger IsOk ( amDep ) do
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 302
17954: IFFALSE 17967
17956: GO 17958
17958: DISABLE
// activeAmerAttacks := true ;
17959: LD_ADDR_EXP 5
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
17967: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17968: LD_INT 32
17970: PPUSH
17971: CALL_OW 302
17975: IFFALSE 17996
17977: PUSH
17978: LD_INT 32
17980: PPUSH
17981: CALL_OW 255
17985: PUSH
17986: LD_EXP 3
17990: PUSH
17991: LD_INT 2
17993: ARRAY
17994: EQUAL
17995: AND
17996: IFFALSE 18033
17998: GO 18000
18000: DISABLE
// begin activeArabAttacks := true ;
18001: LD_ADDR_EXP 4
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
18009: LD_INT 73500
18011: PUSH
18012: LD_INT 2100
18014: PUSH
18015: LD_OWVAR 67
18019: MUL
18020: MINUS
18021: PPUSH
18022: CALL_OW 67
// ArabAttack ( 0 ) ;
18026: LD_INT 0
18028: PPUSH
18029: CALL 18092 0 1
// end ;
18033: END
// every 19 19$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
18034: LD_INT 1
18036: PPUSH
18037: CALL_OW 302
18041: IFFALSE 18062
18043: PUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 255
18051: PUSH
18052: LD_EXP 3
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: EQUAL
18061: AND
18062: IFFALSE 18091
18064: GO 18066
18066: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
18067: LD_INT 10500
18069: PUSH
18070: LD_INT 2100
18072: PUSH
18073: LD_OWVAR 67
18077: MUL
18078: MINUS
18079: PPUSH
18080: CALL_OW 67
// AmericanAttack ( 0 ) ;
18084: LD_INT 0
18086: PPUSH
18087: CALL 20355 0 1
// end ;
18091: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
18092: LD_INT 0
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
// uc_side := botSides [ 2 ] ;
18099: LD_ADDR_OWVAR 20
18103: PUSH
18104: LD_EXP 3
18108: PUSH
18109: LD_INT 2
18111: ARRAY
18112: ST_TO_ADDR
// uc_nation := nation_arabian ;
18113: LD_ADDR_OWVAR 21
18117: PUSH
18118: LD_INT 2
18120: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
18121: LD_ADDR_VAR 0 4
18125: PUSH
18126: LD_INT 3
18128: PUSH
18129: LD_INT 4
18131: PUSH
18132: LD_INT 5
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: LIST
18139: PUSH
18140: LD_OWVAR 67
18144: ARRAY
18145: ST_TO_ADDR
// arAttackersInf := [ ] ;
18146: LD_ADDR_EXP 56
18150: PUSH
18151: EMPTY
18152: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18153: LD_ADDR_EXP 57
18157: PUSH
18158: EMPTY
18159: ST_TO_ADDR
// InitHC_All ( ) ;
18160: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
18164: LD_ADDR_VAR 0 3
18168: PUSH
18169: DOUBLE
18170: LD_INT 1
18172: DEC
18173: ST_TO_ADDR
18174: LD_INT 3
18176: PUSH
18177: LD_INT 4
18179: PUSH
18180: LD_INT 5
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: PUSH
18188: LD_OWVAR 67
18192: ARRAY
18193: PUSH
18194: LD_VAR 0 1
18198: PLUS
18199: PUSH
18200: FOR_TO
18201: IFFALSE 18303
// begin PrepareSoldier ( false , skill ) ;
18203: LD_INT 0
18205: PPUSH
18206: LD_VAR 0 4
18210: PPUSH
18211: CALL_OW 381
// un := CreateHuman ;
18215: LD_ADDR_VAR 0 5
18219: PUSH
18220: CALL_OW 44
18224: ST_TO_ADDR
// if i mod 2 = 0 then
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 2
18232: MOD
18233: PUSH
18234: LD_INT 0
18236: EQUAL
18237: IFFALSE 18251
// SetClass ( un , class_mortar ) ;
18239: LD_VAR 0 5
18243: PPUSH
18244: LD_INT 8
18246: PPUSH
18247: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
18251: LD_VAR 0 5
18255: PPUSH
18256: LD_INT 25
18258: PPUSH
18259: LD_INT 0
18261: PPUSH
18262: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
18266: LD_ADDR_EXP 56
18270: PUSH
18271: LD_EXP 56
18275: PPUSH
18276: LD_VAR 0 5
18280: PPUSH
18281: CALL 65770 0 2
18285: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
18286: LD_VAR 0 5
18290: PPUSH
18291: LD_INT 230
18293: PPUSH
18294: LD_INT 143
18296: PPUSH
18297: CALL_OW 114
// end ;
18301: GO 18200
18303: POP
18304: POP
// for i := 1 to 3 + v do
18305: LD_ADDR_VAR 0 3
18309: PUSH
18310: DOUBLE
18311: LD_INT 1
18313: DEC
18314: ST_TO_ADDR
18315: LD_INT 3
18317: PUSH
18318: LD_VAR 0 1
18322: PLUS
18323: PUSH
18324: FOR_TO
18325: IFFALSE 18489
// begin PrepareMechanic ( false , skill ) ;
18327: LD_INT 0
18329: PPUSH
18330: LD_VAR 0 4
18334: PPUSH
18335: CALL_OW 383
// un := CreateHuman ;
18339: LD_ADDR_VAR 0 5
18343: PUSH
18344: CALL_OW 44
18348: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18349: LD_VAR 0 5
18353: PPUSH
18354: LD_INT 999
18356: PPUSH
18357: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
18361: LD_INT 14
18363: PPUSH
18364: LD_INT 1
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: LD_INT 27
18372: PUSH
18373: LD_INT 25
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_VAR 0 3
18384: PUSH
18385: LD_INT 2
18387: MOD
18388: PUSH
18389: LD_INT 1
18391: PLUS
18392: ARRAY
18393: PPUSH
18394: LD_INT 80
18396: PPUSH
18397: CALL 32600 0 5
// veh := CreateVehicle ;
18401: LD_ADDR_VAR 0 6
18405: PUSH
18406: CALL_OW 45
18410: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18411: LD_VAR 0 6
18415: PPUSH
18416: LD_INT 5
18418: PPUSH
18419: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18423: LD_VAR 0 6
18427: PPUSH
18428: LD_INT 26
18430: PPUSH
18431: LD_INT 0
18433: PPUSH
18434: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18438: LD_VAR 0 5
18442: PPUSH
18443: LD_VAR 0 6
18447: PPUSH
18448: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18452: LD_VAR 0 5
18456: PPUSH
18457: LD_INT 236
18459: PPUSH
18460: LD_INT 127
18462: PPUSH
18463: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18467: LD_ADDR_EXP 57
18471: PUSH
18472: LD_EXP 57
18476: PPUSH
18477: LD_VAR 0 6
18481: PPUSH
18482: CALL 65770 0 2
18486: ST_TO_ADDR
// end ;
18487: GO 18324
18489: POP
18490: POP
// wait ( 0 0$2 ) ;
18491: LD_INT 70
18493: PPUSH
18494: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: DOUBLE
18504: LD_INT 1
18506: DEC
18507: ST_TO_ADDR
18508: LD_INT 1
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: PUSH
18522: LD_OWVAR 67
18526: ARRAY
18527: PUSH
18528: FOR_TO
18529: IFFALSE 18672
// begin PrepareMechanic ( false , skill ) ;
18531: LD_INT 0
18533: PPUSH
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 383
// un := CreateHuman ;
18543: LD_ADDR_VAR 0 5
18547: PUSH
18548: CALL_OW 44
18552: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18553: LD_VAR 0 5
18557: PPUSH
18558: LD_INT 999
18560: PPUSH
18561: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18565: LD_INT 14
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: LD_INT 26
18576: PPUSH
18577: LD_INT 80
18579: PPUSH
18580: CALL 32600 0 5
// veh := CreateVehicle ;
18584: LD_ADDR_VAR 0 6
18588: PUSH
18589: CALL_OW 45
18593: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18594: LD_VAR 0 6
18598: PPUSH
18599: LD_INT 5
18601: PPUSH
18602: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18606: LD_VAR 0 6
18610: PPUSH
18611: LD_INT 26
18613: PPUSH
18614: LD_INT 0
18616: PPUSH
18617: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18621: LD_VAR 0 5
18625: PPUSH
18626: LD_VAR 0 6
18630: PPUSH
18631: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18635: LD_VAR 0 5
18639: PPUSH
18640: LD_INT 236
18642: PPUSH
18643: LD_INT 127
18645: PPUSH
18646: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18650: LD_ADDR_EXP 57
18654: PUSH
18655: LD_EXP 57
18659: PPUSH
18660: LD_VAR 0 6
18664: PPUSH
18665: CALL 65770 0 2
18669: ST_TO_ADDR
// end ;
18670: GO 18528
18672: POP
18673: POP
// wait ( 0 0$2 ) ;
18674: LD_INT 70
18676: PPUSH
18677: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: DOUBLE
18687: LD_INT 1
18689: DEC
18690: ST_TO_ADDR
18691: LD_INT 1
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: PUSH
18705: LD_OWVAR 67
18709: ARRAY
18710: PUSH
18711: FOR_TO
18712: IFFALSE 18886
// begin PrepareMechanic ( false , skill ) ;
18714: LD_INT 0
18716: PPUSH
18717: LD_VAR 0 4
18721: PPUSH
18722: CALL_OW 383
// un := CreateHuman ;
18726: LD_ADDR_VAR 0 5
18730: PUSH
18731: CALL_OW 44
18735: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18736: LD_VAR 0 5
18740: PPUSH
18741: LD_INT 999
18743: PPUSH
18744: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18748: LD_INT 14
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: LD_INT 1
18756: PPUSH
18757: LD_INT 28
18759: PPUSH
18760: LD_INT 80
18762: PPUSH
18763: CALL 32600 0 5
// veh := CreateVehicle ;
18767: LD_ADDR_VAR 0 6
18771: PUSH
18772: CALL_OW 45
18776: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18777: LD_VAR 0 6
18781: PPUSH
18782: LD_INT 4
18784: PPUSH
18785: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18789: LD_VAR 0 6
18793: PPUSH
18794: LD_INT 26
18796: PPUSH
18797: LD_INT 0
18799: PPUSH
18800: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18804: LD_VAR 0 5
18808: PPUSH
18809: LD_VAR 0 6
18813: PPUSH
18814: CALL_OW 52
// if i mod 2 = 0 then
18818: LD_VAR 0 3
18822: PUSH
18823: LD_INT 2
18825: MOD
18826: PUSH
18827: LD_INT 0
18829: EQUAL
18830: IFFALSE 18849
// ComMoveXY ( un , 136 , 61 ) else
18832: LD_VAR 0 5
18836: PPUSH
18837: LD_INT 136
18839: PPUSH
18840: LD_INT 61
18842: PPUSH
18843: CALL_OW 111
18847: GO 18864
// ComMoveXY ( un , 137 , 41 ) ;
18849: LD_VAR 0 5
18853: PPUSH
18854: LD_INT 137
18856: PPUSH
18857: LD_INT 41
18859: PPUSH
18860: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18864: LD_ADDR_EXP 57
18868: PUSH
18869: LD_EXP 57
18873: PPUSH
18874: LD_VAR 0 6
18878: PPUSH
18879: CALL 65770 0 2
18883: ST_TO_ADDR
// end ;
18884: GO 18711
18886: POP
18887: POP
// end ;
18888: LD_VAR 0 2
18892: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18893: LD_EXP 56
18897: IFFALSE 19506
18899: GO 18901
18901: DISABLE
18902: LD_INT 0
18904: PPUSH
18905: PPUSH
18906: PPUSH
18907: PPUSH
// begin tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: LD_EXP 56
18917: PPUSH
18918: LD_INT 50
18920: PUSH
18921: EMPTY
18922: LIST
18923: PPUSH
18924: CALL_OW 72
18928: ST_TO_ADDR
// arAttackersInf := [ ] ;
18929: LD_ADDR_EXP 56
18933: PUSH
18934: EMPTY
18935: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18936: LD_VAR 0 2
18940: PPUSH
18941: LD_INT 173
18943: PPUSH
18944: LD_INT 139
18946: PPUSH
18947: CALL_OW 111
// wait ( 0 0$10 ) ;
18951: LD_INT 350
18953: PPUSH
18954: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18958: LD_ADDR_VAR 0 1
18962: PUSH
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 72
18982: PUSH
18983: FOR_IN
18984: IFFALSE 19115
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18986: LD_ADDR_VAR 0 3
18990: PUSH
18991: LD_INT 81
18993: PUSH
18994: LD_EXP 3
18998: PUSH
18999: LD_INT 2
19001: ARRAY
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: LD_INT 120
19012: PUSH
19013: LD_INT 11
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: LD_INT 21
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 21
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 69
19061: PPUSH
19062: LD_VAR 0 1
19066: PPUSH
19067: CALL_OW 74
19071: ST_TO_ADDR
// if not nearest then
19072: LD_VAR 0 3
19076: NOT
19077: IFFALSE 19081
// break ;
19079: GO 19115
// SetTag ( nearest , tMined ) ;
19081: LD_VAR 0 3
19085: PPUSH
19086: LD_INT 11
19088: PPUSH
19089: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
19093: LD_VAR 0 1
19097: PPUSH
19098: LD_INT 0
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: CALL_OW 192
// end ;
19113: GO 18983
19115: POP
19116: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19117: LD_ADDR_VAR 0 2
19121: PUSH
19122: LD_VAR 0 2
19126: PPUSH
19127: LD_INT 50
19129: PUSH
19130: EMPTY
19131: LIST
19132: PPUSH
19133: CALL_OW 72
19137: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: LD_INT 155
19145: PPUSH
19146: LD_INT 119
19148: PPUSH
19149: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
19153: LD_INT 70
19155: PPUSH
19156: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_INT 50
19172: PUSH
19173: EMPTY
19174: LIST
19175: PPUSH
19176: CALL_OW 72
19180: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19181: LD_ADDR_VAR 0 4
19185: PUSH
19186: LD_INT 81
19188: PUSH
19189: LD_EXP 3
19193: PUSH
19194: LD_INT 2
19196: ARRAY
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: ST_TO_ADDR
// for i in tmp do
19207: LD_ADDR_VAR 0 1
19211: PUSH
19212: LD_VAR 0 2
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19496
// if GetClass ( i ) <> 1 then
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 257
19229: PUSH
19230: LD_INT 1
19232: NONEQUAL
19233: IFFALSE 19273
// begin if not HasTask ( i ) then
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 314
19244: NOT
19245: IFFALSE 19271
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end else
19247: LD_VAR 0 1
19251: PPUSH
19252: LD_VAR 0 4
19256: PPUSH
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL_OW 74
19266: PPUSH
19267: CALL_OW 115
19271: GO 19494
// if not HasTask ( i ) then
19273: LD_VAR 0 1
19277: PPUSH
19278: CALL_OW 314
19282: NOT
19283: IFFALSE 19494
// begin if GetTag ( i ) <> tMine then
19285: LD_VAR 0 1
19289: PPUSH
19290: CALL_OW 110
19294: PUSH
19295: LD_INT 6
19297: NONEQUAL
19298: IFFALSE 19470
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_dist , i , 12 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
19300: LD_ADDR_VAR 0 3
19304: PUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: LD_INT 3
19312: PUSH
19313: LD_INT 120
19315: PUSH
19316: LD_INT 11
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 91
19329: PUSH
19330: LD_VAR 0 1
19334: PUSH
19335: LD_INT 12
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 21
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 21
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 72
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 74
19390: ST_TO_ADDR
// if not nearest then
19391: LD_VAR 0 3
19395: NOT
19396: IFFALSE 19424
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
19398: LD_VAR 0 1
19402: PPUSH
19403: LD_VAR 0 4
19407: PPUSH
19408: LD_VAR 0 1
19412: PPUSH
19413: CALL_OW 74
19417: PPUSH
19418: CALL_OW 115
19422: GO 19468
// begin SetTag ( nearest , tMined ) ;
19424: LD_VAR 0 3
19428: PPUSH
19429: LD_INT 11
19431: PPUSH
19432: CALL_OW 109
// SetTag ( i , tMine ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_INT 6
19443: PPUSH
19444: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 0
19455: PPUSH
19456: LD_INT 0
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 132
// end ; end else
19468: GO 19494
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_VAR 0 4
19479: PPUSH
19480: LD_VAR 0 1
19484: PPUSH
19485: CALL_OW 74
19489: PPUSH
19490: CALL_OW 115
19494: GO 19217
19496: POP
19497: POP
// until not tmp ;
19498: LD_VAR 0 2
19502: NOT
19503: IFFALSE 19153
// enable ;
19505: ENABLE
// end ;
19506: PPOPN 4
19508: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19509: LD_EXP 57
19513: IFFALSE 19625
19515: GO 19517
19517: DISABLE
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
// begin tmp := arAttackersVeh ;
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: LD_EXP 57
19531: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19532: LD_ADDR_EXP 57
19536: PUSH
19537: EMPTY
19538: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19539: LD_INT 70
19541: PPUSH
19542: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19546: LD_ADDR_VAR 0 2
19550: PUSH
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_INT 50
19558: PUSH
19559: EMPTY
19560: LIST
19561: PPUSH
19562: CALL_OW 72
19566: ST_TO_ADDR
// for i in tmp do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: LD_VAR 0 2
19576: PUSH
19577: FOR_IN
19578: IFFALSE 19615
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19580: LD_VAR 0 1
19584: PPUSH
19585: LD_INT 207
19587: PUSH
19588: LD_INT 125
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 185
19597: PUSH
19598: LD_INT 114
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL 68536 0 2
19613: GO 19577
19615: POP
19616: POP
19617: LD_VAR 0 2
19621: NOT
19622: IFFALSE 19539
// enable ;
19624: ENABLE
// end ;
19625: PPOPN 2
19627: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19628: LD_EXP 49
19632: IFFALSE 19640
19634: PUSH
19635: LD_EXP 4
19639: AND
19640: IFFALSE 20232
19642: GO 19644
19644: DISABLE
19645: LD_INT 0
19647: PPUSH
19648: PPUSH
19649: PPUSH
// begin enable ;
19650: ENABLE
// if not arVehiclesAtttackers then
19651: LD_EXP 49
19655: NOT
19656: IFFALSE 19660
// exit ;
19658: GO 20232
// for i in arVehiclesAtttackers do
19660: LD_ADDR_VAR 0 1
19664: PUSH
19665: LD_EXP 49
19669: PUSH
19670: FOR_IN
19671: IFFALSE 20230
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 302
19682: NOT
19683: IFTRUE 19706
19685: PUSH
19686: LD_VAR 0 1
19690: PPUSH
19691: CALL_OW 255
19695: PUSH
19696: LD_EXP 3
19700: PUSH
19701: LD_INT 2
19703: ARRAY
19704: NONEQUAL
19705: OR
19706: IFFALSE 19726
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19708: LD_ADDR_EXP 49
19712: PUSH
19713: LD_EXP 49
19717: PUSH
19718: LD_VAR 0 1
19722: DIFF
19723: ST_TO_ADDR
// continue ;
19724: GO 19670
// end ; if GetTag ( i ) = 300 then
19726: LD_VAR 0 1
19730: PPUSH
19731: CALL_OW 110
19735: PUSH
19736: LD_INT 300
19738: EQUAL
19739: IFFALSE 19854
// begin if GetFuel ( i ) < 50 then
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 261
19750: PUSH
19751: LD_INT 50
19753: LESS
19754: IFFALSE 19813
// begin ComMoveXY ( i , 198 , 28 ) ;
19756: LD_VAR 0 1
19760: PPUSH
19761: LD_INT 198
19763: PPUSH
19764: LD_INT 28
19766: PPUSH
19767: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19771: LD_INT 35
19773: PPUSH
19774: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_INT 198
19785: PPUSH
19786: LD_INT 28
19788: PPUSH
19789: CALL_OW 297
19793: PUSH
19794: LD_INT 4
19796: LESS
19797: IFFALSE 19771
// SetFuel ( i , 100 ) ;
19799: LD_VAR 0 1
19803: PPUSH
19804: LD_INT 100
19806: PPUSH
19807: CALL_OW 240
// end else
19811: GO 19854
// if not IsInArea ( i , arParkingArea ) then
19813: LD_VAR 0 1
19817: PPUSH
19818: LD_INT 28
19820: PPUSH
19821: CALL_OW 308
19825: NOT
19826: IFFALSE 19842
// ComMoveToArea ( i , arParkingArea ) else
19828: LD_VAR 0 1
19832: PPUSH
19833: LD_INT 28
19835: PPUSH
19836: CALL_OW 113
19840: GO 19854
// SetTag ( i , 301 ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 301
19849: PPUSH
19850: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19854: LD_VAR 0 1
19858: PPUSH
19859: CALL_OW 110
19863: PUSH
19864: LD_INT 301
19866: EQUAL
19867: IFFALSE 20009
// begin if GetLives ( i ) < 1000 then
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 256
19878: PUSH
19879: LD_INT 1000
19881: LESS
19882: IFFALSE 19986
// begin if not IsDrivenBy ( i ) then
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL_OW 311
19893: NOT
19894: IFFALSE 19898
// continue ;
19896: GO 19670
// mech := IsDrivenBy ( i ) ;
19898: LD_ADDR_VAR 0 2
19902: PUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 311
19912: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19913: LD_VAR 0 2
19917: PPUSH
19918: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19922: LD_VAR 0 2
19926: PPUSH
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19936: LD_INT 35
19938: PPUSH
19939: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL_OW 256
19952: PUSH
19953: LD_INT 1000
19955: EQUAL
19956: IFFALSE 19936
// SetLives ( mech , 1000 ) ;
19958: LD_VAR 0 2
19962: PPUSH
19963: LD_INT 1000
19965: PPUSH
19966: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19970: LD_VAR 0 2
19974: PPUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 120
// end else
19984: GO 20009
// if IsDrivenBy ( i ) then
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 311
19995: IFFALSE 20009
// SetTag ( i , 0 ) ;
19997: LD_VAR 0 1
20001: PPUSH
20002: LD_INT 0
20004: PPUSH
20005: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL_OW 110
20018: PUSH
20019: LD_INT 300
20021: LESS
20022: IFFALSE 20228
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: LD_INT 5
20031: PPUSH
20032: LD_INT 81
20034: PUSH
20035: LD_EXP 3
20039: PUSH
20040: LD_INT 2
20042: ARRAY
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PPUSH
20048: CALL_OW 70
20052: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 256
20062: PUSH
20063: LD_INT 650
20065: LESS
20066: IFFALSE 20091
// begin ComStop ( i ) ;
20068: LD_VAR 0 1
20072: PPUSH
20073: CALL_OW 141
// SetTag ( i , 300 ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 300
20084: PPUSH
20085: CALL_OW 109
// continue ;
20089: GO 19670
// end ; if enemy then
20091: LD_VAR 0 3
20095: IFFALSE 20135
// begin if not HasTask ( i ) then
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 314
20106: NOT
20107: IFFALSE 20133
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20109: LD_VAR 0 1
20113: PPUSH
20114: LD_VAR 0 3
20118: PPUSH
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 74
20128: PPUSH
20129: CALL_OW 115
// end else
20133: GO 20228
// if arVehiclesAtttackers then
20135: LD_EXP 49
20139: IFFALSE 20228
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
20141: LD_ADDR_VAR 0 3
20145: PUSH
20146: LD_INT 81
20148: PUSH
20149: LD_EXP 3
20153: PUSH
20154: LD_INT 2
20156: ARRAY
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 69
20166: ST_TO_ADDR
// if enemy then
20167: LD_VAR 0 3
20171: IFFALSE 20228
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
20173: LD_VAR 0 1
20177: PPUSH
20178: LD_INT 215
20180: PUSH
20181: LD_INT 88
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 197
20190: PUSH
20191: LD_INT 90
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 178
20200: PUSH
20201: LD_INT 90
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 169
20210: PUSH
20211: LD_INT 104
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: PPUSH
20224: CALL 68536 0 2
// end ; end ; end ;
20228: GO 19670
20230: POP
20231: POP
// end ;
20232: PPOPN 3
20234: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20235: LD_INT 22
20237: PUSH
20238: LD_EXP 3
20242: PUSH
20243: LD_INT 2
20245: ARRAY
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 32
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 69
20269: IFFALSE 20352
20271: GO 20273
20273: DISABLE
20274: LD_INT 0
20276: PPUSH
// begin enable ;
20277: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
20278: LD_ADDR_VAR 0 1
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_EXP 3
20290: PUSH
20291: LD_INT 2
20293: ARRAY
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 32
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PUSH
20318: FOR_IN
20319: IFFALSE 20350
// if GetFuel ( i ) < 3 then
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 261
20330: PUSH
20331: LD_INT 3
20333: LESS
20334: IFFALSE 20348
// SetFuel ( i , 3 ) ;
20336: LD_VAR 0 1
20340: PPUSH
20341: LD_INT 3
20343: PPUSH
20344: CALL_OW 240
20348: GO 20318
20350: POP
20351: POP
// end ;
20352: PPOPN 1
20354: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
20355: LD_INT 0
20357: PPUSH
20358: PPUSH
20359: PPUSH
20360: PPUSH
20361: PPUSH
// uc_side := botSides [ 1 ] ;
20362: LD_ADDR_OWVAR 20
20366: PUSH
20367: LD_EXP 3
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: ST_TO_ADDR
// uc_nation := nation_american ;
20376: LD_ADDR_OWVAR 21
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
20384: LD_ADDR_VAR 0 4
20388: PUSH
20389: LD_INT 3
20391: PUSH
20392: LD_INT 4
20394: PUSH
20395: LD_INT 5
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_OWVAR 67
20407: ARRAY
20408: ST_TO_ADDR
// amAttackersInf := [ ] ;
20409: LD_ADDR_EXP 58
20413: PUSH
20414: EMPTY
20415: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20416: LD_ADDR_EXP 59
20420: PUSH
20421: EMPTY
20422: ST_TO_ADDR
// InitHC_All ( ) ;
20423: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: DOUBLE
20433: LD_INT 1
20435: DEC
20436: ST_TO_ADDR
20437: LD_INT 2
20439: PUSH
20440: LD_INT 3
20442: PUSH
20443: LD_INT 4
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: LD_OWVAR 67
20455: ARRAY
20456: PUSH
20457: LD_VAR 0 1
20461: PLUS
20462: PUSH
20463: FOR_TO
20464: IFFALSE 20540
// begin PrepareSoldier ( false , skill ) ;
20466: LD_INT 0
20468: PPUSH
20469: LD_VAR 0 4
20473: PPUSH
20474: CALL_OW 381
// un := CreateHuman ;
20478: LD_ADDR_VAR 0 5
20482: PUSH
20483: CALL_OW 44
20487: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
20488: LD_VAR 0 5
20492: PPUSH
20493: LD_INT 30
20495: PPUSH
20496: LD_INT 0
20498: PPUSH
20499: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
20503: LD_ADDR_EXP 58
20507: PUSH
20508: LD_EXP 58
20512: PPUSH
20513: LD_VAR 0 5
20517: PPUSH
20518: CALL 65770 0 2
20522: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
20523: LD_VAR 0 5
20527: PPUSH
20528: LD_INT 110
20530: PPUSH
20531: LD_INT 129
20533: PPUSH
20534: CALL_OW 114
// end ;
20538: GO 20463
20540: POP
20541: POP
// for i := 1 to 2 + v do
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: DOUBLE
20548: LD_INT 1
20550: DEC
20551: ST_TO_ADDR
20552: LD_INT 2
20554: PUSH
20555: LD_VAR 0 1
20559: PLUS
20560: PUSH
20561: FOR_TO
20562: IFFALSE 20730
// begin PrepareMechanic ( false , skill ) ;
20564: LD_INT 0
20566: PPUSH
20567: LD_VAR 0 4
20571: PPUSH
20572: CALL_OW 383
// un := CreateHuman ;
20576: LD_ADDR_VAR 0 5
20580: PUSH
20581: CALL_OW 44
20585: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20586: LD_VAR 0 5
20590: PPUSH
20591: LD_INT 999
20593: PPUSH
20594: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20598: LD_INT 3
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_INT 3
20609: PUSH
20610: LD_INT 5
20612: PUSH
20613: LD_INT 4
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: PUSH
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 3
20628: MOD
20629: PUSH
20630: LD_INT 1
20632: PLUS
20633: ARRAY
20634: PPUSH
20635: LD_INT 80
20637: PPUSH
20638: CALL 32600 0 5
// veh := CreateVehicle ;
20642: LD_ADDR_VAR 0 6
20646: PUSH
20647: CALL_OW 45
20651: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20652: LD_VAR 0 6
20656: PPUSH
20657: LD_INT 0
20659: PPUSH
20660: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20664: LD_VAR 0 6
20668: PPUSH
20669: LD_INT 31
20671: PPUSH
20672: LD_INT 0
20674: PPUSH
20675: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20679: LD_VAR 0 5
20683: PPUSH
20684: LD_VAR 0 6
20688: PPUSH
20689: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20693: LD_VAR 0 5
20697: PPUSH
20698: LD_INT 96
20700: PPUSH
20701: LD_INT 137
20703: PPUSH
20704: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20708: LD_ADDR_EXP 59
20712: PUSH
20713: LD_EXP 59
20717: PPUSH
20718: LD_VAR 0 6
20722: PPUSH
20723: CALL 65770 0 2
20727: ST_TO_ADDR
// end ;
20728: GO 20561
20730: POP
20731: POP
// end ;
20732: LD_VAR 0 2
20736: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20737: LD_EXP 59
20741: IFFALSE 20877
20743: GO 20745
20745: DISABLE
20746: LD_INT 0
20748: PPUSH
20749: PPUSH
// begin tmp := amAttackersVeh union amAttackersInf ;
20750: LD_ADDR_VAR 0 2
20754: PUSH
20755: LD_EXP 59
20759: PUSH
20760: LD_EXP 58
20764: UNION
20765: ST_TO_ADDR
// amAttackersVeh := [ ] ;
20766: LD_ADDR_EXP 59
20770: PUSH
20771: EMPTY
20772: ST_TO_ADDR
// amAttackersInf := [ ] ;
20773: LD_ADDR_EXP 58
20777: PUSH
20778: EMPTY
20779: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20780: LD_INT 70
20782: PPUSH
20783: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20787: LD_ADDR_VAR 0 2
20791: PUSH
20792: LD_VAR 0 2
20796: PPUSH
20797: LD_INT 50
20799: PUSH
20800: EMPTY
20801: LIST
20802: PPUSH
20803: CALL_OW 72
20807: ST_TO_ADDR
// for i in tmp do
20808: LD_ADDR_VAR 0 1
20812: PUSH
20813: LD_VAR 0 2
20817: PUSH
20818: FOR_IN
20819: IFFALSE 20867
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20821: LD_VAR 0 1
20825: PPUSH
20826: LD_INT 96
20828: PUSH
20829: LD_INT 145
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 99
20838: PUSH
20839: LD_INT 130
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 87
20848: PUSH
20849: LD_INT 103
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: PPUSH
20861: CALL 68536 0 2
20865: GO 20818
20867: POP
20868: POP
20869: LD_VAR 0 2
20873: NOT
20874: IFFALSE 20780
// enable ;
20876: ENABLE
// end ;
20877: PPOPN 2
20879: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20880: LD_EXP 39
20884: IFFALSE 20892
20886: PUSH
20887: LD_EXP 5
20891: AND
20892: IFFALSE 21473
20894: GO 20896
20896: DISABLE
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
20901: PPUSH
// begin enable ;
20902: ENABLE
// if not amVehiclesAtttackers then
20903: LD_EXP 39
20907: NOT
20908: IFFALSE 20912
// exit ;
20910: GO 21473
// for i in amVehiclesAtttackers do
20912: LD_ADDR_VAR 0 1
20916: PUSH
20917: LD_EXP 39
20921: PUSH
20922: FOR_IN
20923: IFFALSE 21471
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20925: LD_VAR 0 1
20929: PPUSH
20930: CALL_OW 302
20934: NOT
20935: IFTRUE 20958
20937: PUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 255
20947: PUSH
20948: LD_EXP 3
20952: PUSH
20953: LD_INT 1
20955: ARRAY
20956: NONEQUAL
20957: OR
20958: IFFALSE 20978
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20960: LD_ADDR_EXP 39
20964: PUSH
20965: LD_EXP 39
20969: PUSH
20970: LD_VAR 0 1
20974: DIFF
20975: ST_TO_ADDR
// continue ;
20976: GO 20922
// end ; if GetTag ( i ) = 300 then
20978: LD_VAR 0 1
20982: PPUSH
20983: CALL_OW 110
20987: PUSH
20988: LD_INT 300
20990: EQUAL
20991: IFFALSE 21106
// begin if GetFuel ( i ) < 50 then
20993: LD_VAR 0 1
20997: PPUSH
20998: CALL_OW 261
21002: PUSH
21003: LD_INT 50
21005: LESS
21006: IFFALSE 21065
// begin ComMoveXY ( i , 24 , 36 ) ;
21008: LD_VAR 0 1
21012: PPUSH
21013: LD_INT 24
21015: PPUSH
21016: LD_INT 36
21018: PPUSH
21019: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21023: LD_INT 35
21025: PPUSH
21026: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
21030: LD_VAR 0 1
21034: PPUSH
21035: LD_INT 24
21037: PPUSH
21038: LD_INT 36
21040: PPUSH
21041: CALL_OW 297
21045: PUSH
21046: LD_INT 4
21048: LESS
21049: IFFALSE 21023
// SetFuel ( i , 100 ) ;
21051: LD_VAR 0 1
21055: PPUSH
21056: LD_INT 100
21058: PPUSH
21059: CALL_OW 240
// end else
21063: GO 21106
// if not IsInArea ( i , amParkingArea ) then
21065: LD_VAR 0 1
21069: PPUSH
21070: LD_INT 27
21072: PPUSH
21073: CALL_OW 308
21077: NOT
21078: IFFALSE 21094
// ComMoveToArea ( i , amParkingArea ) else
21080: LD_VAR 0 1
21084: PPUSH
21085: LD_INT 27
21087: PPUSH
21088: CALL_OW 113
21092: GO 21106
// SetTag ( i , 301 ) ;
21094: LD_VAR 0 1
21098: PPUSH
21099: LD_INT 301
21101: PPUSH
21102: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
21106: LD_VAR 0 1
21110: PPUSH
21111: CALL_OW 110
21115: PUSH
21116: LD_INT 301
21118: EQUAL
21119: IFFALSE 21261
// begin if GetLives ( i ) < 1000 then
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 256
21130: PUSH
21131: LD_INT 1000
21133: LESS
21134: IFFALSE 21238
// begin if not IsDrivenBy ( i ) then
21136: LD_VAR 0 1
21140: PPUSH
21141: CALL_OW 311
21145: NOT
21146: IFFALSE 21150
// continue ;
21148: GO 20922
// mech := IsDrivenBy ( i ) ;
21150: LD_ADDR_VAR 0 2
21154: PUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL_OW 311
21164: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21165: LD_VAR 0 2
21169: PPUSH
21170: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21174: LD_VAR 0 2
21178: PPUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
21188: LD_INT 35
21190: PPUSH
21191: CALL_OW 67
// until GetLives ( i ) = 1000 ;
21195: LD_VAR 0 1
21199: PPUSH
21200: CALL_OW 256
21204: PUSH
21205: LD_INT 1000
21207: EQUAL
21208: IFFALSE 21188
// SetLives ( mech , 1000 ) ;
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_INT 1000
21217: PPUSH
21218: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
21222: LD_VAR 0 2
21226: PPUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL_OW 120
// end else
21236: GO 21261
// if IsDrivenBy ( i ) then
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 311
21247: IFFALSE 21261
// SetTag ( i , 0 ) ;
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_INT 0
21256: PPUSH
21257: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL_OW 110
21270: PUSH
21271: LD_INT 300
21273: LESS
21274: IFFALSE 21469
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
21276: LD_ADDR_VAR 0 3
21280: PUSH
21281: LD_INT 3
21283: PPUSH
21284: LD_INT 81
21286: PUSH
21287: LD_EXP 3
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 70
21304: ST_TO_ADDR
// if GetLives ( i ) < 650 then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 256
21314: PUSH
21315: LD_INT 650
21317: LESS
21318: IFFALSE 21343
// begin ComStop ( i ) ;
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 141
// SetTag ( i , 300 ) ;
21329: LD_VAR 0 1
21333: PPUSH
21334: LD_INT 300
21336: PPUSH
21337: CALL_OW 109
// continue ;
21341: GO 20922
// end ; if enemy then
21343: LD_VAR 0 3
21347: IFFALSE 21387
// begin if not HasTask ( i ) then
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 314
21358: NOT
21359: IFFALSE 21385
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21361: LD_VAR 0 1
21365: PPUSH
21366: LD_VAR 0 3
21370: PPUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: CALL_OW 74
21380: PPUSH
21381: CALL_OW 115
// end else
21385: GO 21469
// if amVehiclesAtttackers then
21387: LD_EXP 39
21391: IFFALSE 21469
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_INT 81
21400: PUSH
21401: LD_EXP 3
21405: PUSH
21406: LD_INT 1
21408: ARRAY
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PPUSH
21414: CALL_OW 69
21418: ST_TO_ADDR
// if enemy then
21419: LD_VAR 0 3
21423: IFFALSE 21469
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
21425: LD_VAR 0 1
21429: PPUSH
21430: LD_INT 49
21432: PUSH
21433: LD_INT 43
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 63
21442: PUSH
21443: LD_INT 56
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 72
21452: PUSH
21453: LD_INT 67
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL 68536 0 2
// end ; end ; end ;
21469: GO 20922
21471: POP
21472: POP
// end ;
21473: PPOPN 3
21475: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21476: LD_INT 22
21478: PUSH
21479: LD_EXP 3
21483: PUSH
21484: LD_INT 1
21486: ARRAY
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 32
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PPUSH
21506: CALL_OW 69
21510: IFFALSE 21593
21512: GO 21514
21514: DISABLE
21515: LD_INT 0
21517: PPUSH
// begin enable ;
21518: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_EXP 3
21531: PUSH
21532: LD_INT 1
21534: ARRAY
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 32
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 69
21558: PUSH
21559: FOR_IN
21560: IFFALSE 21591
// if GetFuel ( i ) < 3 then
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 261
21571: PUSH
21572: LD_INT 3
21574: LESS
21575: IFFALSE 21589
// SetFuel ( i , 3 ) ;
21577: LD_VAR 0 1
21581: PPUSH
21582: LD_INT 3
21584: PPUSH
21585: CALL_OW 240
21589: GO 21559
21591: POP
21592: POP
// end ; end_of_file
21593: PPOPN 1
21595: END
// every 0 0$20 trigger game do
21596: LD_EXP 2
21600: IFFALSE 21649
21602: GO 21604
21604: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21605: LD_INT 20
21607: PUSH
21608: LD_INT 22
21610: PUSH
21611: LD_INT 21
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: LD_INT 5
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PPUSH
21627: LD_EXP 21
21631: PUSH
21632: LD_INT 2
21634: ARRAY
21635: PPUSH
21636: LD_EXP 21
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: CALL 21650 0 3
21649: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21650: LD_INT 0
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
// if not areas then
21656: LD_VAR 0 1
21660: NOT
21661: IFFALSE 21665
// exit ;
21663: GO 22044
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21665: LD_ADDR_VAR 0 7
21669: PUSH
21670: LD_INT 17
21672: PUSH
21673: LD_INT 18
21675: PUSH
21676: LD_INT 19
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: ST_TO_ADDR
// x := 5 ;
21684: LD_ADDR_VAR 0 6
21688: PUSH
21689: LD_INT 5
21691: ST_TO_ADDR
// repeat wait ( time ) ;
21692: LD_VAR 0 2
21696: PPUSH
21697: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21701: LD_OWVAR 1
21705: PUSH
21706: LD_INT 37800
21708: PUSH
21709: LD_INT 31500
21711: PUSH
21712: LD_INT 25200
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: LD_OWVAR 67
21724: ARRAY
21725: LESS
21726: IFFALSE 21865
// begin for i := 1 to multi_sides do
21728: LD_ADDR_VAR 0 5
21732: PUSH
21733: DOUBLE
21734: LD_INT 1
21736: DEC
21737: ST_TO_ADDR
21738: LD_EXP 7
21742: PUSH
21743: FOR_TO
21744: IFFALSE 21856
// if multi_sides [ i ] then
21746: LD_EXP 7
21750: PUSH
21751: LD_VAR 0 5
21755: ARRAY
21756: IFFALSE 21854
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21758: LD_VAR 0 7
21762: PUSH
21763: LD_EXP 7
21767: PUSH
21768: LD_VAR 0 5
21772: ARRAY
21773: ARRAY
21774: PPUSH
21775: LD_INT 1
21777: PPUSH
21778: CALL_OW 287
21782: PUSH
21783: LD_INT 32
21785: PUSH
21786: LD_INT 25
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: PUSH
21797: LD_OWVAR 67
21801: ARRAY
21802: LESS
21803: IFFALSE 21854
// begin amount := amount - ( x * 10 ) ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: LD_VAR 0 3
21814: PUSH
21815: LD_VAR 0 6
21819: PUSH
21820: LD_INT 10
21822: MUL
21823: MINUS
21824: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21825: LD_VAR 0 6
21829: PPUSH
21830: LD_VAR 0 7
21834: PUSH
21835: LD_EXP 7
21839: PUSH
21840: LD_VAR 0 5
21844: ARRAY
21845: ARRAY
21846: PPUSH
21847: LD_INT 1
21849: PPUSH
21850: CALL_OW 55
// end ; end ;
21854: GO 21743
21856: POP
21857: POP
// wait ( 0 0$2 ) ;
21858: LD_INT 70
21860: PPUSH
21861: CALL_OW 67
// end ; for i in areas do
21865: LD_ADDR_VAR 0 5
21869: PUSH
21870: LD_VAR 0 1
21874: PUSH
21875: FOR_IN
21876: IFFALSE 21959
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21878: LD_VAR 0 5
21882: PPUSH
21883: LD_INT 1
21885: PPUSH
21886: CALL_OW 287
21890: PUSH
21891: LD_INT 25
21893: PUSH
21894: LD_INT 22
21896: PUSH
21897: LD_INT 20
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: LD_OWVAR 67
21909: ARRAY
21910: LESS
21911: IFFALSE 21957
// begin wait ( 0 0$5 ) ;
21913: LD_INT 175
21915: PPUSH
21916: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21920: LD_VAR 0 6
21924: PPUSH
21925: LD_VAR 0 5
21929: PPUSH
21930: LD_INT 1
21932: PPUSH
21933: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21937: LD_ADDR_VAR 0 3
21941: PUSH
21942: LD_VAR 0 3
21946: PUSH
21947: LD_VAR 0 6
21951: PUSH
21952: LD_INT 10
21954: MUL
21955: MINUS
21956: ST_TO_ADDR
// end ; end ;
21957: GO 21875
21959: POP
21960: POP
// time := time + 0 0$2 ;
21961: LD_ADDR_VAR 0 2
21965: PUSH
21966: LD_VAR 0 2
21970: PUSH
21971: LD_INT 70
21973: PLUS
21974: ST_TO_ADDR
// x := x - 1 ;
21975: LD_ADDR_VAR 0 6
21979: PUSH
21980: LD_VAR 0 6
21984: PUSH
21985: LD_INT 1
21987: MINUS
21988: ST_TO_ADDR
// if x = 0 then
21989: LD_VAR 0 6
21993: PUSH
21994: LD_INT 0
21996: EQUAL
21997: IFFALSE 22007
// x := 5 ;
21999: LD_ADDR_VAR 0 6
22003: PUSH
22004: LD_INT 5
22006: ST_TO_ADDR
// if time > 2 2$00 then
22007: LD_VAR 0 2
22011: PUSH
22012: LD_INT 4200
22014: GREATER
22015: IFFALSE 22025
// time := 0 0$30 ;
22017: LD_ADDR_VAR 0 2
22021: PUSH
22022: LD_INT 1050
22024: ST_TO_ADDR
// until not game or amount <= 0 ;
22025: LD_EXP 2
22029: NOT
22030: IFTRUE 22042
22032: PUSH
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 0
22040: LESSEQUAL
22041: OR
22042: IFFALSE 21692
// end ; end_of_file
22044: LD_VAR 0 4
22048: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22049: LD_VAR 0 1
22053: PUSH
22054: LD_INT 200
22056: DOUBLE
22057: GREATEREQUAL
22058: IFFALSE 22066
22060: LD_INT 299
22062: DOUBLE
22063: LESSEQUAL
22064: IFTRUE 22068
22066: GO 22100
22068: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22069: LD_VAR 0 1
22073: PPUSH
22074: LD_VAR 0 2
22078: PPUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: LD_VAR 0 4
22088: PPUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: CALL 22881 0 5
22098: GO 22177
22100: LD_INT 300
22102: DOUBLE
22103: GREATEREQUAL
22104: IFFALSE 22112
22106: LD_INT 399
22108: DOUBLE
22109: LESSEQUAL
22110: IFTRUE 22114
22112: GO 22176
22114: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22115: LD_VAR 0 1
22119: PPUSH
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_VAR 0 4
22134: PPUSH
22135: LD_VAR 0 5
22139: PPUSH
22140: LD_VAR 0 6
22144: PPUSH
22145: LD_VAR 0 7
22149: PPUSH
22150: LD_VAR 0 8
22154: PPUSH
22155: LD_VAR 0 9
22159: PPUSH
22160: LD_VAR 0 10
22164: PPUSH
22165: LD_VAR 0 11
22169: PPUSH
22170: CALL 71772 0 11
22174: GO 22177
22176: POP
// end ;
22177: PPOPN 11
22179: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22180: LD_VAR 0 1
22184: PPUSH
22185: LD_VAR 0 2
22189: PPUSH
22190: LD_VAR 0 3
22194: PPUSH
22195: LD_VAR 0 4
22199: PPUSH
22200: LD_VAR 0 5
22204: PPUSH
22205: CALL 22262 0 5
// end ; end_of_file
22209: PPOPN 5
22211: END
// export function SOS_UnitDestroyed ( un ) ; begin
22212: LD_INT 0
22214: PPUSH
// ComRadiation ( un ) ;
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL 23301 0 1
// end ;
22224: LD_VAR 0 2
22228: RET
// export function SOS_UnitKamikazed ( un ) ; begin
22229: LD_INT 0
22231: PPUSH
// ComRadiation ( un ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL 23301 0 1
// end ;
22241: LD_VAR 0 2
22245: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22246: LD_INT 0
22248: PPUSH
// end ;
22249: LD_VAR 0 4
22253: RET
// export function SOS_Command ( cmd ) ; begin
22254: LD_INT 0
22256: PPUSH
// end ;
22257: LD_VAR 0 2
22261: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22262: LD_INT 0
22264: PPUSH
// end ;
22265: LD_VAR 0 6
22269: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
22270: LD_INT 0
22272: PPUSH
22273: PPUSH
22274: PPUSH
22275: PPUSH
// if not vehicle or not factory then
22276: LD_VAR 0 1
22280: NOT
22281: IFTRUE 22290
22283: PUSH
22284: LD_VAR 0 2
22288: NOT
22289: OR
22290: IFFALSE 22294
// exit ;
22292: GO 22876
// if not factoryWaypoints then
22294: LD_EXP 70
22298: NOT
22299: IFFALSE 22303
// exit ;
22301: GO 22876
// for i := 1 to Count ( factoryWaypoints ) do
22303: LD_ADDR_VAR 0 4
22307: PUSH
22308: DOUBLE
22309: LD_INT 1
22311: DEC
22312: ST_TO_ADDR
22313: LD_EXP 70
22317: PPUSH
22318: CALL 29838 0 1
22322: PUSH
22323: FOR_TO
22324: IFFALSE 22874
// if factoryWaypoints [ i ] [ 2 ] = factory then
22326: LD_EXP 70
22330: PUSH
22331: LD_VAR 0 4
22335: ARRAY
22336: PUSH
22337: LD_INT 2
22339: ARRAY
22340: PUSH
22341: LD_VAR 0 2
22345: EQUAL
22346: IFFALSE 22872
// begin if GetControl ( vehicle ) = control_manual then
22348: LD_VAR 0 1
22352: PPUSH
22353: CALL_OW 263
22357: PUSH
22358: LD_INT 1
22360: EQUAL
22361: IFFALSE 22725
// begin driver := IsDrivenBy ( vehicle ) ;
22363: LD_ADDR_VAR 0 5
22367: PUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL_OW 311
22377: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22378: LD_VAR 0 5
22382: PUSH
22383: LD_EXP 71
22387: IN
22388: IFTRUE 22402
22390: PUSH
22391: LD_VAR 0 1
22395: PUSH
22396: LD_EXP 71
22400: IN
22401: OR
22402: IFFALSE 22408
// exit ;
22404: POP
22405: POP
22406: GO 22876
// if not HasTask ( driver ) then
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 314
22417: NOT
22418: IFFALSE 22723
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22420: LD_ADDR_EXP 71
22424: PUSH
22425: LD_EXP 71
22429: PPUSH
22430: LD_VAR 0 5
22434: PPUSH
22435: CALL 65770 0 2
22439: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22440: LD_ADDR_EXP 71
22444: PUSH
22445: LD_EXP 71
22449: PPUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL 65770 0 2
22459: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22460: LD_ADDR_VAR 0 6
22464: PUSH
22465: LD_EXP 70
22469: PUSH
22470: LD_VAR 0 4
22474: ARRAY
22475: PUSH
22476: LD_INT 3
22478: ARRAY
22479: PPUSH
22480: LD_EXP 70
22484: PUSH
22485: LD_VAR 0 4
22489: ARRAY
22490: PUSH
22491: LD_INT 4
22493: ARRAY
22494: PPUSH
22495: CALL_OW 428
22499: ST_TO_ADDR
// if hex then
22500: LD_VAR 0 6
22504: IFFALSE 22522
// ComMoveUnit ( driver , hex ) else
22506: LD_VAR 0 5
22510: PPUSH
22511: LD_VAR 0 6
22515: PPUSH
22516: CALL_OW 112
22520: GO 22606
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22522: LD_VAR 0 1
22526: PPUSH
22527: LD_EXP 70
22531: PUSH
22532: LD_VAR 0 4
22536: ARRAY
22537: PUSH
22538: LD_INT 3
22540: ARRAY
22541: PPUSH
22542: LD_EXP 70
22546: PUSH
22547: LD_VAR 0 4
22551: ARRAY
22552: PUSH
22553: LD_INT 4
22555: ARRAY
22556: PPUSH
22557: CALL_OW 297
22561: PUSH
22562: LD_INT 0
22564: GREATER
22565: IFFALSE 22606
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22567: LD_VAR 0 5
22571: PPUSH
22572: LD_EXP 70
22576: PUSH
22577: LD_VAR 0 4
22581: ARRAY
22582: PUSH
22583: LD_INT 3
22585: ARRAY
22586: PPUSH
22587: LD_EXP 70
22591: PUSH
22592: LD_VAR 0 4
22596: ARRAY
22597: PUSH
22598: LD_INT 4
22600: ARRAY
22601: PPUSH
22602: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22606: LD_VAR 0 5
22610: PPUSH
22611: CALL_OW 181
// if Multiplayer then
22615: LD_OWVAR 4
22619: IFFALSE 22668
// begin repeat wait ( 10 ) ;
22621: LD_INT 10
22623: PPUSH
22624: CALL_OW 67
// until not IsInUnit ( driver ) ;
22628: LD_VAR 0 5
22632: PPUSH
22633: CALL_OW 310
22637: NOT
22638: IFFALSE 22621
// if not HasTask ( driver ) then
22640: LD_VAR 0 5
22644: PPUSH
22645: CALL_OW 314
22649: NOT
22650: IFFALSE 22666
// ComEnterUnit ( driver , factory ) ;
22652: LD_VAR 0 5
22656: PPUSH
22657: LD_VAR 0 2
22661: PPUSH
22662: CALL_OW 120
// end else
22666: GO 22682
// AddComEnterUnit ( driver , factory ) ;
22668: LD_VAR 0 5
22672: PPUSH
22673: LD_VAR 0 2
22677: PPUSH
22678: CALL_OW 180
// wait ( 0 0$1 ) ;
22682: LD_INT 35
22684: PPUSH
22685: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22689: LD_ADDR_EXP 71
22693: PUSH
22694: LD_EXP 71
22698: PUSH
22699: LD_VAR 0 5
22703: DIFF
22704: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22705: LD_ADDR_EXP 71
22709: PUSH
22710: LD_EXP 71
22714: PUSH
22715: LD_VAR 0 1
22719: DIFF
22720: ST_TO_ADDR
// break ;
22721: GO 22874
// end ; end else
22723: GO 22872
// if GetControl ( vehicle ) = control_remote then
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 263
22734: PUSH
22735: LD_INT 2
22737: EQUAL
22738: IFFALSE 22824
// begin wait ( 0 0$2 ) ;
22740: LD_INT 70
22742: PPUSH
22743: CALL_OW 67
// repeat wait ( 10 ) ;
22747: LD_INT 10
22749: PPUSH
22750: CALL_OW 67
// Connect ( vehicle ) ;
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL 36082 0 1
// until IsControledBy ( vehicle ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 312
22772: IFFALSE 22747
// wait ( 10 ) ;
22774: LD_INT 10
22776: PPUSH
22777: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22781: LD_VAR 0 1
22785: PPUSH
22786: LD_EXP 70
22790: PUSH
22791: LD_VAR 0 4
22795: ARRAY
22796: PUSH
22797: LD_INT 3
22799: ARRAY
22800: PPUSH
22801: LD_EXP 70
22805: PUSH
22806: LD_VAR 0 4
22810: ARRAY
22811: PUSH
22812: LD_INT 4
22814: ARRAY
22815: PPUSH
22816: CALL_OW 111
// break ;
22820: GO 22874
// end else
22822: GO 22872
// begin wait ( 0 0$3 ) ;
22824: LD_INT 105
22826: PPUSH
22827: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22831: LD_VAR 0 1
22835: PPUSH
22836: LD_EXP 70
22840: PUSH
22841: LD_VAR 0 4
22845: ARRAY
22846: PUSH
22847: LD_INT 3
22849: ARRAY
22850: PPUSH
22851: LD_EXP 70
22855: PUSH
22856: LD_VAR 0 4
22860: ARRAY
22861: PUSH
22862: LD_INT 4
22864: ARRAY
22865: PPUSH
22866: CALL_OW 111
// break ;
22870: GO 22874
// end ; end ;
22872: GO 22323
22874: POP
22875: POP
// end ;
22876: LD_VAR 0 3
22880: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22881: LD_INT 0
22883: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22884: LD_VAR 0 1
22888: PUSH
22889: LD_INT 250
22891: EQUAL
22892: IFFALSE 22909
22894: PUSH
22895: LD_VAR 0 2
22899: PPUSH
22900: CALL_OW 264
22904: PUSH
22905: LD_INT 81
22907: EQUAL
22908: AND
22909: IFFALSE 22930
// MinerPlaceMine ( unit , x , y ) ;
22911: LD_VAR 0 2
22915: PPUSH
22916: LD_VAR 0 4
22920: PPUSH
22921: LD_VAR 0 5
22925: PPUSH
22926: CALL 26062 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22930: LD_VAR 0 1
22934: PUSH
22935: LD_INT 251
22937: EQUAL
22938: IFFALSE 22955
22940: PUSH
22941: LD_VAR 0 2
22945: PPUSH
22946: CALL_OW 264
22950: PUSH
22951: LD_INT 81
22953: EQUAL
22954: AND
22955: IFFALSE 22976
// MinerDetonateMine ( unit , x , y ) ;
22957: LD_VAR 0 2
22961: PPUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_VAR 0 5
22971: PPUSH
22972: CALL 26341 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22976: LD_VAR 0 1
22980: PUSH
22981: LD_INT 252
22983: EQUAL
22984: IFFALSE 23001
22986: PUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: CALL_OW 264
22996: PUSH
22997: LD_INT 81
22999: EQUAL
23000: AND
23001: IFFALSE 23022
// MinerCreateMinefield ( unit , x , y ) ;
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_VAR 0 4
23012: PPUSH
23013: LD_VAR 0 5
23017: PPUSH
23018: CALL 26760 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23022: LD_VAR 0 1
23026: PUSH
23027: LD_INT 253
23029: EQUAL
23030: IFFALSE 23047
23032: PUSH
23033: LD_VAR 0 2
23037: PPUSH
23038: CALL_OW 257
23042: PUSH
23043: LD_INT 5
23045: EQUAL
23046: AND
23047: IFFALSE 23068
// ComBinocular ( unit , x , y ) ;
23049: LD_VAR 0 2
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL 27135 0 3
// if selectedUnit then
23068: LD_VAR 0 3
23072: IFFALSE 23132
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23074: LD_VAR 0 1
23078: PUSH
23079: LD_INT 254
23081: EQUAL
23082: IFFALSE 23099
23084: PUSH
23085: LD_VAR 0 2
23089: PPUSH
23090: CALL_OW 264
23094: PUSH
23095: LD_INT 99
23097: EQUAL
23098: AND
23099: IFFALSE 23116
23101: PUSH
23102: LD_VAR 0 3
23106: PPUSH
23107: CALL_OW 263
23111: PUSH
23112: LD_INT 3
23114: EQUAL
23115: AND
23116: IFFALSE 23132
// HackDestroyVehicle ( unit , selectedUnit ) ;
23118: LD_VAR 0 2
23122: PPUSH
23123: LD_VAR 0 3
23127: PPUSH
23128: CALL 25422 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23132: LD_VAR 0 1
23136: PUSH
23137: LD_INT 255
23139: EQUAL
23140: IFFALSE 23164
23142: PUSH
23143: LD_VAR 0 2
23147: PPUSH
23148: CALL_OW 264
23152: PUSH
23153: LD_INT 14
23155: PUSH
23156: LD_INT 53
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: IN
23163: AND
23164: IFFALSE 23182
23166: PUSH
23167: LD_VAR 0 4
23171: PPUSH
23172: LD_VAR 0 5
23176: PPUSH
23177: CALL_OW 488
23181: AND
23182: IFFALSE 23206
// CutTreeXYR ( unit , x , y , 12 ) ;
23184: LD_VAR 0 2
23188: PPUSH
23189: LD_VAR 0 4
23193: PPUSH
23194: LD_VAR 0 5
23198: PPUSH
23199: LD_INT 12
23201: PPUSH
23202: CALL 23397 0 4
// if cmd = 256 then
23206: LD_VAR 0 1
23210: PUSH
23211: LD_INT 256
23213: EQUAL
23214: IFFALSE 23235
// SetFactoryWaypoint ( unit , x , y ) ;
23216: LD_VAR 0 2
23220: PPUSH
23221: LD_VAR 0 4
23225: PPUSH
23226: LD_VAR 0 5
23230: PPUSH
23231: CALL 71780 0 3
// if cmd = 257 then
23235: LD_VAR 0 1
23239: PUSH
23240: LD_INT 257
23242: EQUAL
23243: IFFALSE 23264
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23245: LD_VAR 0 2
23249: PPUSH
23250: LD_VAR 0 4
23254: PPUSH
23255: LD_VAR 0 5
23259: PPUSH
23260: CALL 72276 0 3
// if cmd = 258 then
23264: LD_VAR 0 1
23268: PUSH
23269: LD_INT 258
23271: EQUAL
23272: IFFALSE 23296
// BurnTreeXYR ( unit , x , y , 8 ) ;
23274: LD_VAR 0 2
23278: PPUSH
23279: LD_VAR 0 4
23283: PPUSH
23284: LD_VAR 0 5
23288: PPUSH
23289: LD_INT 8
23291: PPUSH
23292: CALL 23797 0 4
// end ;
23296: LD_VAR 0 6
23300: RET
// export function ComRadiation ( un ) ; var eff ; begin
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 264
23314: PUSH
23315: LD_INT 91
23317: NONEQUAL
23318: IFFALSE 23322
// exit ;
23320: GO 23392
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23322: LD_INT 68
23324: PPUSH
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 255
23334: PPUSH
23335: CALL_OW 321
23339: PUSH
23340: LD_INT 2
23342: EQUAL
23343: IFFALSE 23355
// eff := 50 else
23345: LD_ADDR_VAR 0 3
23349: PUSH
23350: LD_INT 50
23352: ST_TO_ADDR
23353: GO 23363
// eff := 25 ;
23355: LD_ADDR_VAR 0 3
23359: PUSH
23360: LD_INT 25
23362: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 250
23372: PPUSH
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL_OW 251
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: CALL_OW 495
// end ;
23392: LD_VAR 0 2
23396: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23397: LD_INT 0
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL_OW 302
23417: NOT
23418: IFTRUE 23437
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL_OW 488
23435: NOT
23436: OR
23437: IFTRUE 23446
23439: PUSH
23440: LD_VAR 0 4
23444: NOT
23445: OR
23446: IFFALSE 23450
// exit ;
23448: GO 23792
// list := [ ] ;
23450: LD_ADDR_VAR 0 13
23454: PUSH
23455: EMPTY
23456: ST_TO_ADDR
// if x - r < 0 then
23457: LD_VAR 0 2
23461: PUSH
23462: LD_VAR 0 4
23466: MINUS
23467: PUSH
23468: LD_INT 0
23470: LESS
23471: IFFALSE 23483
// min_x := 0 else
23473: LD_ADDR_VAR 0 7
23477: PUSH
23478: LD_INT 0
23480: ST_TO_ADDR
23481: GO 23499
// min_x := x - r ;
23483: LD_ADDR_VAR 0 7
23487: PUSH
23488: LD_VAR 0 2
23492: PUSH
23493: LD_VAR 0 4
23497: MINUS
23498: ST_TO_ADDR
// if y - r < 0 then
23499: LD_VAR 0 3
23503: PUSH
23504: LD_VAR 0 4
23508: MINUS
23509: PUSH
23510: LD_INT 0
23512: LESS
23513: IFFALSE 23525
// min_y := 0 else
23515: LD_ADDR_VAR 0 8
23519: PUSH
23520: LD_INT 0
23522: ST_TO_ADDR
23523: GO 23541
// min_y := y - r ;
23525: LD_ADDR_VAR 0 8
23529: PUSH
23530: LD_VAR 0 3
23534: PUSH
23535: LD_VAR 0 4
23539: MINUS
23540: ST_TO_ADDR
// max_x := x + r ;
23541: LD_ADDR_VAR 0 9
23545: PUSH
23546: LD_VAR 0 2
23550: PUSH
23551: LD_VAR 0 4
23555: PLUS
23556: ST_TO_ADDR
// max_y := y + r ;
23557: LD_ADDR_VAR 0 10
23561: PUSH
23562: LD_VAR 0 3
23566: PUSH
23567: LD_VAR 0 4
23571: PLUS
23572: ST_TO_ADDR
// for _x = min_x to max_x do
23573: LD_ADDR_VAR 0 11
23577: PUSH
23578: DOUBLE
23579: LD_VAR 0 7
23583: DEC
23584: ST_TO_ADDR
23585: LD_VAR 0 9
23589: PUSH
23590: FOR_TO
23591: IFFALSE 23710
// for _y = min_y to max_y do
23593: LD_ADDR_VAR 0 12
23597: PUSH
23598: DOUBLE
23599: LD_VAR 0 8
23603: DEC
23604: ST_TO_ADDR
23605: LD_VAR 0 10
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23706
// begin if not ValidHex ( _x , _y ) then
23613: LD_VAR 0 11
23617: PPUSH
23618: LD_VAR 0 12
23622: PPUSH
23623: CALL_OW 488
23627: NOT
23628: IFFALSE 23632
// continue ;
23630: GO 23610
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23632: LD_VAR 0 11
23636: PPUSH
23637: LD_VAR 0 12
23641: PPUSH
23642: CALL_OW 351
23646: IFFALSE 23664
23648: PUSH
23649: LD_VAR 0 11
23653: PPUSH
23654: LD_VAR 0 12
23658: PPUSH
23659: CALL_OW 554
23663: AND
23664: IFFALSE 23704
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23666: LD_ADDR_VAR 0 13
23670: PUSH
23671: LD_VAR 0 13
23675: PPUSH
23676: LD_VAR 0 13
23680: PUSH
23681: LD_INT 1
23683: PLUS
23684: PPUSH
23685: LD_VAR 0 11
23689: PUSH
23690: LD_VAR 0 12
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PPUSH
23699: CALL_OW 2
23703: ST_TO_ADDR
// end ;
23704: GO 23610
23706: POP
23707: POP
23708: GO 23590
23710: POP
23711: POP
// if not list then
23712: LD_VAR 0 13
23716: NOT
23717: IFFALSE 23721
// exit ;
23719: GO 23792
// for i in list do
23721: LD_ADDR_VAR 0 6
23725: PUSH
23726: LD_VAR 0 13
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23790
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23734: LD_VAR 0 1
23738: PPUSH
23739: LD_STRING M
23741: PUSH
23742: LD_VAR 0 6
23746: PUSH
23747: LD_INT 1
23749: ARRAY
23750: PUSH
23751: LD_VAR 0 6
23755: PUSH
23756: LD_INT 2
23758: ARRAY
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: PPUSH
23784: CALL_OW 447
23788: GO 23731
23790: POP
23791: POP
// end ;
23792: LD_VAR 0 5
23796: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23797: LD_INT 0
23799: PPUSH
23800: PPUSH
23801: PPUSH
23802: PPUSH
23803: PPUSH
23804: PPUSH
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 302
23818: NOT
23819: IFTRUE 23838
23821: PUSH
23822: LD_VAR 0 2
23826: PPUSH
23827: LD_VAR 0 3
23831: PPUSH
23832: CALL_OW 488
23836: NOT
23837: OR
23838: IFTRUE 23847
23840: PUSH
23841: LD_VAR 0 4
23845: NOT
23846: OR
23847: IFFALSE 23851
// exit ;
23849: GO 24368
// list := [ ] ;
23851: LD_ADDR_VAR 0 13
23855: PUSH
23856: EMPTY
23857: ST_TO_ADDR
// if x - r < 0 then
23858: LD_VAR 0 2
23862: PUSH
23863: LD_VAR 0 4
23867: MINUS
23868: PUSH
23869: LD_INT 0
23871: LESS
23872: IFFALSE 23884
// min_x := 0 else
23874: LD_ADDR_VAR 0 7
23878: PUSH
23879: LD_INT 0
23881: ST_TO_ADDR
23882: GO 23900
// min_x := x - r ;
23884: LD_ADDR_VAR 0 7
23888: PUSH
23889: LD_VAR 0 2
23893: PUSH
23894: LD_VAR 0 4
23898: MINUS
23899: ST_TO_ADDR
// if y - r < 0 then
23900: LD_VAR 0 3
23904: PUSH
23905: LD_VAR 0 4
23909: MINUS
23910: PUSH
23911: LD_INT 0
23913: LESS
23914: IFFALSE 23926
// min_y := 0 else
23916: LD_ADDR_VAR 0 8
23920: PUSH
23921: LD_INT 0
23923: ST_TO_ADDR
23924: GO 23942
// min_y := y - r ;
23926: LD_ADDR_VAR 0 8
23930: PUSH
23931: LD_VAR 0 3
23935: PUSH
23936: LD_VAR 0 4
23940: MINUS
23941: ST_TO_ADDR
// max_x := x + r ;
23942: LD_ADDR_VAR 0 9
23946: PUSH
23947: LD_VAR 0 2
23951: PUSH
23952: LD_VAR 0 4
23956: PLUS
23957: ST_TO_ADDR
// max_y := y + r ;
23958: LD_ADDR_VAR 0 10
23962: PUSH
23963: LD_VAR 0 3
23967: PUSH
23968: LD_VAR 0 4
23972: PLUS
23973: ST_TO_ADDR
// for _x = min_x to max_x do
23974: LD_ADDR_VAR 0 11
23978: PUSH
23979: DOUBLE
23980: LD_VAR 0 7
23984: DEC
23985: ST_TO_ADDR
23986: LD_VAR 0 9
23990: PUSH
23991: FOR_TO
23992: IFFALSE 24111
// for _y = min_y to max_y do
23994: LD_ADDR_VAR 0 12
23998: PUSH
23999: DOUBLE
24000: LD_VAR 0 8
24004: DEC
24005: ST_TO_ADDR
24006: LD_VAR 0 10
24010: PUSH
24011: FOR_TO
24012: IFFALSE 24107
// begin if not ValidHex ( _x , _y ) then
24014: LD_VAR 0 11
24018: PPUSH
24019: LD_VAR 0 12
24023: PPUSH
24024: CALL_OW 488
24028: NOT
24029: IFFALSE 24033
// continue ;
24031: GO 24011
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24033: LD_VAR 0 11
24037: PPUSH
24038: LD_VAR 0 12
24042: PPUSH
24043: CALL_OW 351
24047: IFFALSE 24065
24049: PUSH
24050: LD_VAR 0 11
24054: PPUSH
24055: LD_VAR 0 12
24059: PPUSH
24060: CALL_OW 554
24064: AND
24065: IFFALSE 24105
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24067: LD_ADDR_VAR 0 13
24071: PUSH
24072: LD_VAR 0 13
24076: PPUSH
24077: LD_VAR 0 13
24081: PUSH
24082: LD_INT 1
24084: PLUS
24085: PPUSH
24086: LD_VAR 0 11
24090: PUSH
24091: LD_VAR 0 12
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PPUSH
24100: CALL_OW 2
24104: ST_TO_ADDR
// end ;
24105: GO 24011
24107: POP
24108: POP
24109: GO 23991
24111: POP
24112: POP
// if not list then
24113: LD_VAR 0 13
24117: NOT
24118: IFFALSE 24122
// exit ;
24120: GO 24368
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24122: LD_ADDR_VAR 0 13
24126: PUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: LD_VAR 0 13
24136: PPUSH
24137: LD_INT 1
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL 33210 0 4
24147: ST_TO_ADDR
// ComStop ( flame ) ;
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 141
// for i in list do
24157: LD_ADDR_VAR 0 6
24161: PUSH
24162: LD_VAR 0 13
24166: PUSH
24167: FOR_IN
24168: IFFALSE 24199
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24170: LD_VAR 0 1
24174: PPUSH
24175: LD_VAR 0 6
24179: PUSH
24180: LD_INT 1
24182: ARRAY
24183: PPUSH
24184: LD_VAR 0 6
24188: PUSH
24189: LD_INT 2
24191: ARRAY
24192: PPUSH
24193: CALL_OW 176
24197: GO 24167
24199: POP
24200: POP
// repeat wait ( 0 0$1 ) ;
24201: LD_INT 35
24203: PPUSH
24204: CALL_OW 67
// task := GetTaskList ( flame ) ;
24208: LD_ADDR_VAR 0 14
24212: PUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 437
24222: ST_TO_ADDR
// if not task then
24223: LD_VAR 0 14
24227: NOT
24228: IFFALSE 24232
// exit ;
24230: GO 24368
// if task [ 1 ] [ 1 ] <> | then
24232: LD_VAR 0 14
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: PUSH
24241: LD_INT 1
24243: ARRAY
24244: PUSH
24245: LD_STRING |
24247: NONEQUAL
24248: IFFALSE 24252
// exit ;
24250: GO 24368
// _x := task [ 1 ] [ 2 ] ;
24252: LD_ADDR_VAR 0 11
24256: PUSH
24257: LD_VAR 0 14
24261: PUSH
24262: LD_INT 1
24264: ARRAY
24265: PUSH
24266: LD_INT 2
24268: ARRAY
24269: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24270: LD_ADDR_VAR 0 12
24274: PUSH
24275: LD_VAR 0 14
24279: PUSH
24280: LD_INT 1
24282: ARRAY
24283: PUSH
24284: LD_INT 3
24286: ARRAY
24287: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24288: LD_VAR 0 11
24292: PPUSH
24293: LD_VAR 0 12
24297: PPUSH
24298: CALL_OW 351
24302: NOT
24303: IFTRUE 24322
24305: PUSH
24306: LD_VAR 0 11
24310: PPUSH
24311: LD_VAR 0 12
24315: PPUSH
24316: CALL_OW 554
24320: NOT
24321: OR
24322: IFFALSE 24356
// begin task := Delete ( task , 1 ) ;
24324: LD_ADDR_VAR 0 14
24328: PUSH
24329: LD_VAR 0 14
24333: PPUSH
24334: LD_INT 1
24336: PPUSH
24337: CALL_OW 3
24341: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_VAR 0 14
24351: PPUSH
24352: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24356: LD_VAR 0 1
24360: PPUSH
24361: CALL_OW 314
24365: NOT
24366: IFFALSE 24201
// end ;
24368: LD_VAR 0 5
24372: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24373: LD_EXP 60
24377: NOT
24378: IFFALSE 24428
24380: GO 24382
24382: DISABLE
// begin initHack := true ;
24383: LD_ADDR_EXP 60
24387: PUSH
24388: LD_INT 1
24390: ST_TO_ADDR
// hackTanks := [ ] ;
24391: LD_ADDR_EXP 61
24395: PUSH
24396: EMPTY
24397: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24398: LD_ADDR_EXP 62
24402: PUSH
24403: EMPTY
24404: ST_TO_ADDR
// hackLimit := 3 ;
24405: LD_ADDR_EXP 63
24409: PUSH
24410: LD_INT 3
24412: ST_TO_ADDR
// hackDist := 12 ;
24413: LD_ADDR_EXP 64
24417: PUSH
24418: LD_INT 12
24420: ST_TO_ADDR
// hackCounter := [ ] ;
24421: LD_ADDR_EXP 65
24425: PUSH
24426: EMPTY
24427: ST_TO_ADDR
// end ;
24428: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24429: LD_EXP 60
24433: IFFALSE 24451
24435: PUSH
24436: LD_INT 34
24438: PUSH
24439: LD_INT 99
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PPUSH
24446: CALL_OW 69
24450: AND
24451: IFFALSE 24704
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
// begin enable ;
24460: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24461: LD_ADDR_VAR 0 1
24465: PUSH
24466: LD_INT 34
24468: PUSH
24469: LD_INT 99
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PPUSH
24476: CALL_OW 69
24480: PUSH
24481: FOR_IN
24482: IFFALSE 24702
// begin if not i in hackTanks then
24484: LD_VAR 0 1
24488: PUSH
24489: LD_EXP 61
24493: IN
24494: NOT
24495: IFFALSE 24578
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24497: LD_ADDR_EXP 61
24501: PUSH
24502: LD_EXP 61
24506: PPUSH
24507: LD_EXP 61
24511: PUSH
24512: LD_INT 1
24514: PLUS
24515: PPUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 1
24525: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24526: LD_ADDR_EXP 62
24530: PUSH
24531: LD_EXP 62
24535: PPUSH
24536: LD_EXP 62
24540: PUSH
24541: LD_INT 1
24543: PLUS
24544: PPUSH
24545: EMPTY
24546: PPUSH
24547: CALL_OW 1
24551: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24552: LD_ADDR_EXP 65
24556: PUSH
24557: LD_EXP 65
24561: PPUSH
24562: LD_EXP 65
24566: PUSH
24567: LD_INT 1
24569: PLUS
24570: PPUSH
24571: EMPTY
24572: PPUSH
24573: CALL_OW 1
24577: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 302
24587: NOT
24588: IFFALSE 24601
// begin HackUnlinkAll ( i ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL 24707 0 1
// continue ;
24599: GO 24481
// end ; HackCheckCapturedStatus ( i ) ;
24601: LD_VAR 0 1
24605: PPUSH
24606: CALL 25152 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24610: LD_ADDR_VAR 0 2
24614: PUSH
24615: LD_INT 81
24617: PUSH
24618: LD_VAR 0 1
24622: PPUSH
24623: CALL_OW 255
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 33
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 91
24644: PUSH
24645: LD_VAR 0 1
24649: PUSH
24650: LD_EXP 64
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 50
24662: PUSH
24663: EMPTY
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 69
24676: ST_TO_ADDR
// if not tmp then
24677: LD_VAR 0 2
24681: NOT
24682: IFFALSE 24686
// continue ;
24684: GO 24481
// HackLink ( i , tmp ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_VAR 0 2
24695: PPUSH
24696: CALL 24843 0 2
// end ;
24700: GO 24481
24702: POP
24703: POP
// end ;
24704: PPOPN 2
24706: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24707: LD_INT 0
24709: PPUSH
24710: PPUSH
24711: PPUSH
// if not hack in hackTanks then
24712: LD_VAR 0 1
24716: PUSH
24717: LD_EXP 61
24721: IN
24722: NOT
24723: IFFALSE 24727
// exit ;
24725: GO 24838
// index := GetElementIndex ( hackTanks , hack ) ;
24727: LD_ADDR_VAR 0 4
24731: PUSH
24732: LD_EXP 61
24736: PPUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL 32505 0 2
24746: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24747: LD_EXP 62
24751: PUSH
24752: LD_VAR 0 4
24756: ARRAY
24757: IFFALSE 24838
// begin for i in hackTanksCaptured [ index ] do
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_EXP 62
24768: PUSH
24769: LD_VAR 0 4
24773: ARRAY
24774: PUSH
24775: FOR_IN
24776: IFFALSE 24802
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24778: LD_VAR 0 3
24782: PUSH
24783: LD_INT 1
24785: ARRAY
24786: PPUSH
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 2
24794: ARRAY
24795: PPUSH
24796: CALL_OW 235
24800: GO 24775
24802: POP
24803: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24804: LD_ADDR_EXP 62
24808: PUSH
24809: LD_EXP 62
24813: PPUSH
24814: LD_VAR 0 4
24818: PPUSH
24819: EMPTY
24820: PPUSH
24821: CALL_OW 1
24825: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24826: LD_VAR 0 1
24830: PPUSH
24831: LD_INT 0
24833: PPUSH
24834: CALL_OW 505
// end ; end ;
24838: LD_VAR 0 2
24842: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
24847: PPUSH
// if not hack in hackTanks or not vehicles then
24848: LD_VAR 0 1
24852: PUSH
24853: LD_EXP 61
24857: IN
24858: NOT
24859: IFTRUE 24868
24861: PUSH
24862: LD_VAR 0 2
24866: NOT
24867: OR
24868: IFFALSE 24872
// exit ;
24870: GO 25147
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: LD_VAR 0 2
24886: PPUSH
24887: LD_INT 1
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL 33157 0 4
24897: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24898: LD_ADDR_VAR 0 5
24902: PUSH
24903: LD_EXP 61
24907: PPUSH
24908: LD_VAR 0 1
24912: PPUSH
24913: CALL 32505 0 2
24917: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24918: LD_EXP 62
24922: PUSH
24923: LD_VAR 0 5
24927: ARRAY
24928: PUSH
24929: LD_EXP 63
24933: LESS
24934: IFFALSE 25123
// begin for i := 1 to vehicles do
24936: LD_ADDR_VAR 0 4
24940: PUSH
24941: DOUBLE
24942: LD_INT 1
24944: DEC
24945: ST_TO_ADDR
24946: LD_VAR 0 2
24950: PUSH
24951: FOR_TO
24952: IFFALSE 25121
// begin if hackTanksCaptured [ index ] = hackLimit then
24954: LD_EXP 62
24958: PUSH
24959: LD_VAR 0 5
24963: ARRAY
24964: PUSH
24965: LD_EXP 63
24969: EQUAL
24970: IFFALSE 24974
// break ;
24972: GO 25121
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24974: LD_ADDR_EXP 65
24978: PUSH
24979: LD_EXP 65
24983: PPUSH
24984: LD_VAR 0 5
24988: PPUSH
24989: LD_EXP 65
24993: PUSH
24994: LD_VAR 0 5
24998: ARRAY
24999: PUSH
25000: LD_INT 1
25002: PLUS
25003: PPUSH
25004: CALL_OW 1
25008: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25009: LD_ADDR_EXP 62
25013: PUSH
25014: LD_EXP 62
25018: PPUSH
25019: LD_VAR 0 5
25023: PUSH
25024: LD_EXP 62
25028: PUSH
25029: LD_VAR 0 5
25033: ARRAY
25034: PUSH
25035: LD_INT 1
25037: PLUS
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: LD_VAR 0 2
25047: PUSH
25048: LD_VAR 0 4
25052: ARRAY
25053: PUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_VAR 0 4
25063: ARRAY
25064: PPUSH
25065: CALL_OW 255
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PPUSH
25074: CALL 32722 0 3
25078: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25079: LD_VAR 0 2
25083: PUSH
25084: LD_VAR 0 4
25088: ARRAY
25089: PPUSH
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 255
25099: PPUSH
25100: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25104: LD_VAR 0 2
25108: PUSH
25109: LD_VAR 0 4
25113: ARRAY
25114: PPUSH
25115: CALL_OW 141
// end ;
25119: GO 24951
25121: POP
25122: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_EXP 62
25132: PUSH
25133: LD_VAR 0 5
25137: ARRAY
25138: PUSH
25139: LD_INT 0
25141: PLUS
25142: PPUSH
25143: CALL_OW 505
// end ;
25147: LD_VAR 0 3
25151: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
// if not hack in hackTanks then
25158: LD_VAR 0 1
25162: PUSH
25163: LD_EXP 61
25167: IN
25168: NOT
25169: IFFALSE 25173
// exit ;
25171: GO 25417
// index := GetElementIndex ( hackTanks , hack ) ;
25173: LD_ADDR_VAR 0 4
25177: PUSH
25178: LD_EXP 61
25182: PPUSH
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL 32505 0 2
25192: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25193: LD_ADDR_VAR 0 3
25197: PUSH
25198: DOUBLE
25199: LD_EXP 62
25203: PUSH
25204: LD_VAR 0 4
25208: ARRAY
25209: INC
25210: ST_TO_ADDR
25211: LD_INT 1
25213: PUSH
25214: FOR_DOWNTO
25215: IFFALSE 25391
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25217: LD_ADDR_VAR 0 5
25221: PUSH
25222: LD_EXP 62
25226: PUSH
25227: LD_VAR 0 4
25231: ARRAY
25232: PUSH
25233: LD_VAR 0 3
25237: ARRAY
25238: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25239: LD_VAR 0 5
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: PPUSH
25248: CALL_OW 302
25252: NOT
25253: IFTRUE 25281
25255: PUSH
25256: LD_VAR 0 5
25260: PUSH
25261: LD_INT 1
25263: ARRAY
25264: PPUSH
25265: CALL_OW 255
25269: PUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 255
25279: NONEQUAL
25280: OR
25281: IFFALSE 25389
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25283: LD_VAR 0 5
25287: PUSH
25288: LD_INT 1
25290: ARRAY
25291: PPUSH
25292: CALL_OW 305
25296: IFFALSE 25324
25298: PUSH
25299: LD_VAR 0 5
25303: PUSH
25304: LD_INT 1
25306: ARRAY
25307: PPUSH
25308: CALL_OW 255
25312: PUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: CALL_OW 255
25322: EQUAL
25323: AND
25324: IFFALSE 25348
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25326: LD_VAR 0 5
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: LD_VAR 0 5
25339: PUSH
25340: LD_INT 2
25342: ARRAY
25343: PPUSH
25344: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25348: LD_ADDR_EXP 62
25352: PUSH
25353: LD_EXP 62
25357: PPUSH
25358: LD_VAR 0 4
25362: PPUSH
25363: LD_EXP 62
25367: PUSH
25368: LD_VAR 0 4
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 3
25378: PPUSH
25379: CALL_OW 3
25383: PPUSH
25384: CALL_OW 1
25388: ST_TO_ADDR
// end ; end ;
25389: GO 25214
25391: POP
25392: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25393: LD_VAR 0 1
25397: PPUSH
25398: LD_EXP 62
25402: PUSH
25403: LD_VAR 0 4
25407: ARRAY
25408: PUSH
25409: LD_INT 0
25411: PLUS
25412: PPUSH
25413: CALL_OW 505
// end ;
25417: LD_VAR 0 2
25421: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25422: LD_INT 0
25424: PPUSH
25425: PPUSH
25426: PPUSH
25427: PPUSH
// if not hack in hackTanks then
25428: LD_VAR 0 1
25432: PUSH
25433: LD_EXP 61
25437: IN
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 25528
// index := GetElementIndex ( hackTanks , hack ) ;
25443: LD_ADDR_VAR 0 5
25447: PUSH
25448: LD_EXP 61
25452: PPUSH
25453: LD_VAR 0 1
25457: PPUSH
25458: CALL 32505 0 2
25462: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25463: LD_ADDR_VAR 0 4
25467: PUSH
25468: DOUBLE
25469: LD_INT 1
25471: DEC
25472: ST_TO_ADDR
25473: LD_EXP 62
25477: PUSH
25478: LD_VAR 0 5
25482: ARRAY
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25526
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25487: LD_EXP 62
25491: PUSH
25492: LD_VAR 0 5
25496: ARRAY
25497: PUSH
25498: LD_VAR 0 4
25502: ARRAY
25503: PUSH
25504: LD_INT 1
25506: ARRAY
25507: PUSH
25508: LD_VAR 0 2
25512: EQUAL
25513: IFFALSE 25524
// KillUnit ( vehicle ) ;
25515: LD_VAR 0 2
25519: PPUSH
25520: CALL_OW 66
25524: GO 25484
25526: POP
25527: POP
// end ;
25528: LD_VAR 0 3
25532: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25533: LD_EXP 66
25537: NOT
25538: IFFALSE 25573
25540: GO 25542
25542: DISABLE
// begin initMiner := true ;
25543: LD_ADDR_EXP 66
25547: PUSH
25548: LD_INT 1
25550: ST_TO_ADDR
// minersList := [ ] ;
25551: LD_ADDR_EXP 67
25555: PUSH
25556: EMPTY
25557: ST_TO_ADDR
// minerMinesList := [ ] ;
25558: LD_ADDR_EXP 68
25562: PUSH
25563: EMPTY
25564: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25565: LD_ADDR_EXP 69
25569: PUSH
25570: LD_INT 5
25572: ST_TO_ADDR
// end ;
25573: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25574: LD_EXP 66
25578: IFFALSE 25596
25580: PUSH
25581: LD_INT 34
25583: PUSH
25584: LD_INT 81
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PPUSH
25591: CALL_OW 69
25595: AND
25596: IFFALSE 26059
25598: GO 25600
25600: DISABLE
25601: LD_INT 0
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
// begin enable ;
25607: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25608: LD_ADDR_VAR 0 1
25612: PUSH
25613: LD_INT 34
25615: PUSH
25616: LD_INT 81
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PPUSH
25623: CALL_OW 69
25627: PUSH
25628: FOR_IN
25629: IFFALSE 25701
// begin if not i in minersList then
25631: LD_VAR 0 1
25635: PUSH
25636: LD_EXP 67
25640: IN
25641: NOT
25642: IFFALSE 25699
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25644: LD_ADDR_EXP 67
25648: PUSH
25649: LD_EXP 67
25653: PPUSH
25654: LD_EXP 67
25658: PUSH
25659: LD_INT 1
25661: PLUS
25662: PPUSH
25663: LD_VAR 0 1
25667: PPUSH
25668: CALL_OW 1
25672: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25673: LD_ADDR_EXP 68
25677: PUSH
25678: LD_EXP 68
25682: PPUSH
25683: LD_EXP 68
25687: PUSH
25688: LD_INT 1
25690: PLUS
25691: PPUSH
25692: EMPTY
25693: PPUSH
25694: CALL_OW 1
25698: ST_TO_ADDR
// end end ;
25699: GO 25628
25701: POP
25702: POP
// for i := minerMinesList downto 1 do
25703: LD_ADDR_VAR 0 1
25707: PUSH
25708: DOUBLE
25709: LD_EXP 68
25713: INC
25714: ST_TO_ADDR
25715: LD_INT 1
25717: PUSH
25718: FOR_DOWNTO
25719: IFFALSE 26057
// begin if IsLive ( minersList [ i ] ) then
25721: LD_EXP 67
25725: PUSH
25726: LD_VAR 0 1
25730: ARRAY
25731: PPUSH
25732: CALL_OW 300
25736: IFFALSE 25764
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25738: LD_EXP 67
25742: PUSH
25743: LD_VAR 0 1
25747: ARRAY
25748: PPUSH
25749: LD_EXP 68
25753: PUSH
25754: LD_VAR 0 1
25758: ARRAY
25759: PPUSH
25760: CALL_OW 505
// if not minerMinesList [ i ] then
25764: LD_EXP 68
25768: PUSH
25769: LD_VAR 0 1
25773: ARRAY
25774: NOT
25775: IFFALSE 25779
// continue ;
25777: GO 25718
// for j := minerMinesList [ i ] downto 1 do
25779: LD_ADDR_VAR 0 2
25783: PUSH
25784: DOUBLE
25785: LD_EXP 68
25789: PUSH
25790: LD_VAR 0 1
25794: ARRAY
25795: INC
25796: ST_TO_ADDR
25797: LD_INT 1
25799: PUSH
25800: FOR_DOWNTO
25801: IFFALSE 26053
// begin side := GetSide ( minersList [ i ] ) ;
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: LD_EXP 67
25812: PUSH
25813: LD_VAR 0 1
25817: ARRAY
25818: PPUSH
25819: CALL_OW 255
25823: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25824: LD_ADDR_VAR 0 4
25828: PUSH
25829: LD_EXP 68
25833: PUSH
25834: LD_VAR 0 1
25838: ARRAY
25839: PUSH
25840: LD_VAR 0 2
25844: ARRAY
25845: PUSH
25846: LD_INT 1
25848: ARRAY
25849: PPUSH
25850: LD_EXP 68
25854: PUSH
25855: LD_VAR 0 1
25859: ARRAY
25860: PUSH
25861: LD_VAR 0 2
25865: ARRAY
25866: PUSH
25867: LD_INT 2
25869: ARRAY
25870: PPUSH
25871: CALL_OW 428
25875: ST_TO_ADDR
// if not tmp then
25876: LD_VAR 0 4
25880: NOT
25881: IFFALSE 25885
// continue ;
25883: GO 25800
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25885: LD_VAR 0 4
25889: PUSH
25890: LD_INT 81
25892: PUSH
25893: LD_VAR 0 3
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PPUSH
25902: CALL_OW 69
25906: IN
25907: IFFALSE 25957
25909: PUSH
25910: LD_EXP 68
25914: PUSH
25915: LD_VAR 0 1
25919: ARRAY
25920: PUSH
25921: LD_VAR 0 2
25925: ARRAY
25926: PUSH
25927: LD_INT 1
25929: ARRAY
25930: PPUSH
25931: LD_EXP 68
25935: PUSH
25936: LD_VAR 0 1
25940: ARRAY
25941: PUSH
25942: LD_VAR 0 2
25946: ARRAY
25947: PUSH
25948: LD_INT 2
25950: ARRAY
25951: PPUSH
25952: CALL_OW 458
25956: AND
25957: IFFALSE 26051
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25959: LD_EXP 68
25963: PUSH
25964: LD_VAR 0 1
25968: ARRAY
25969: PUSH
25970: LD_VAR 0 2
25974: ARRAY
25975: PUSH
25976: LD_INT 1
25978: ARRAY
25979: PPUSH
25980: LD_EXP 68
25984: PUSH
25985: LD_VAR 0 1
25989: ARRAY
25990: PUSH
25991: LD_VAR 0 2
25995: ARRAY
25996: PUSH
25997: LD_INT 2
25999: ARRAY
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26010: LD_ADDR_EXP 68
26014: PUSH
26015: LD_EXP 68
26019: PPUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_EXP 68
26029: PUSH
26030: LD_VAR 0 1
26034: ARRAY
26035: PPUSH
26036: LD_VAR 0 2
26040: PPUSH
26041: CALL_OW 3
26045: PPUSH
26046: CALL_OW 1
26050: ST_TO_ADDR
// end ; end ;
26051: GO 25800
26053: POP
26054: POP
// end ;
26055: GO 25718
26057: POP
26058: POP
// end ;
26059: PPOPN 4
26061: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26062: LD_INT 0
26064: PPUSH
26065: PPUSH
// result := false ;
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: LD_INT 0
26073: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26074: LD_VAR 0 1
26078: PPUSH
26079: CALL_OW 264
26083: PUSH
26084: LD_INT 81
26086: EQUAL
26087: NOT
26088: IFFALSE 26092
// exit ;
26090: GO 26336
// index := GetElementIndex ( minersList , unit ) ;
26092: LD_ADDR_VAR 0 5
26096: PUSH
26097: LD_EXP 67
26101: PPUSH
26102: LD_VAR 0 1
26106: PPUSH
26107: CALL 32505 0 2
26111: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26112: LD_EXP 68
26116: PUSH
26117: LD_VAR 0 5
26121: ARRAY
26122: PUSH
26123: LD_EXP 69
26127: GREATEREQUAL
26128: IFFALSE 26132
// exit ;
26130: GO 26336
// ComMoveXY ( unit , x , y ) ;
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26151: LD_INT 35
26153: PPUSH
26154: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26158: LD_VAR 0 1
26162: PPUSH
26163: LD_VAR 0 2
26167: PPUSH
26168: LD_VAR 0 3
26172: PPUSH
26173: CALL 64551 0 3
26177: NOT
26178: IFFALSE 26191
26180: PUSH
26181: LD_VAR 0 1
26185: PPUSH
26186: CALL_OW 314
26190: AND
26191: IFFALSE 26195
// exit ;
26193: GO 26336
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26195: LD_VAR 0 2
26199: PPUSH
26200: LD_VAR 0 3
26204: PPUSH
26205: CALL_OW 428
26209: PUSH
26210: LD_VAR 0 1
26214: EQUAL
26215: IFFALSE 26229
26217: PUSH
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 314
26227: NOT
26228: AND
26229: IFFALSE 26151
// PlaySoundXY ( x , y , PlantMine ) ;
26231: LD_VAR 0 2
26235: PPUSH
26236: LD_VAR 0 3
26240: PPUSH
26241: LD_STRING PlantMine
26243: PPUSH
26244: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26248: LD_VAR 0 2
26252: PPUSH
26253: LD_VAR 0 3
26257: PPUSH
26258: LD_VAR 0 1
26262: PPUSH
26263: CALL_OW 255
26267: PPUSH
26268: LD_INT 0
26270: PPUSH
26271: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26275: LD_ADDR_EXP 68
26279: PUSH
26280: LD_EXP 68
26284: PPUSH
26285: LD_VAR 0 5
26289: PUSH
26290: LD_EXP 68
26294: PUSH
26295: LD_VAR 0 5
26299: ARRAY
26300: PUSH
26301: LD_INT 1
26303: PLUS
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PPUSH
26309: LD_VAR 0 2
26313: PUSH
26314: LD_VAR 0 3
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PPUSH
26323: CALL 32722 0 3
26327: ST_TO_ADDR
// result := true ;
26328: LD_ADDR_VAR 0 4
26332: PUSH
26333: LD_INT 1
26335: ST_TO_ADDR
// end ;
26336: LD_VAR 0 4
26340: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
// if not unit in minersList then
26346: LD_VAR 0 1
26350: PUSH
26351: LD_EXP 67
26355: IN
26356: NOT
26357: IFFALSE 26361
// exit ;
26359: GO 26755
// index := GetElementIndex ( minersList , unit ) ;
26361: LD_ADDR_VAR 0 6
26365: PUSH
26366: LD_EXP 67
26370: PPUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL 32505 0 2
26380: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26381: LD_ADDR_VAR 0 5
26385: PUSH
26386: DOUBLE
26387: LD_EXP 68
26391: PUSH
26392: LD_VAR 0 6
26396: ARRAY
26397: INC
26398: ST_TO_ADDR
26399: LD_INT 1
26401: PUSH
26402: FOR_DOWNTO
26403: IFFALSE 26566
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26405: LD_EXP 68
26409: PUSH
26410: LD_VAR 0 6
26414: ARRAY
26415: PUSH
26416: LD_VAR 0 5
26420: ARRAY
26421: PUSH
26422: LD_INT 1
26424: ARRAY
26425: PUSH
26426: LD_VAR 0 2
26430: EQUAL
26431: IFFALSE 26461
26433: PUSH
26434: LD_EXP 68
26438: PUSH
26439: LD_VAR 0 6
26443: ARRAY
26444: PUSH
26445: LD_VAR 0 5
26449: ARRAY
26450: PUSH
26451: LD_INT 2
26453: ARRAY
26454: PUSH
26455: LD_VAR 0 3
26459: EQUAL
26460: AND
26461: IFFALSE 26564
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26463: LD_EXP 68
26467: PUSH
26468: LD_VAR 0 6
26472: ARRAY
26473: PUSH
26474: LD_VAR 0 5
26478: ARRAY
26479: PUSH
26480: LD_INT 1
26482: ARRAY
26483: PPUSH
26484: LD_EXP 68
26488: PUSH
26489: LD_VAR 0 6
26493: ARRAY
26494: PUSH
26495: LD_VAR 0 5
26499: ARRAY
26500: PUSH
26501: LD_INT 2
26503: ARRAY
26504: PPUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 255
26514: PPUSH
26515: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26519: LD_ADDR_EXP 68
26523: PUSH
26524: LD_EXP 68
26528: PPUSH
26529: LD_VAR 0 6
26533: PPUSH
26534: LD_EXP 68
26538: PUSH
26539: LD_VAR 0 6
26543: ARRAY
26544: PPUSH
26545: LD_VAR 0 5
26549: PPUSH
26550: CALL_OW 3
26554: PPUSH
26555: CALL_OW 1
26559: ST_TO_ADDR
// exit ;
26560: POP
26561: POP
26562: GO 26755
// end ; end ;
26564: GO 26402
26566: POP
26567: POP
// for i := minerMinesList [ index ] downto 1 do
26568: LD_ADDR_VAR 0 5
26572: PUSH
26573: DOUBLE
26574: LD_EXP 68
26578: PUSH
26579: LD_VAR 0 6
26583: ARRAY
26584: INC
26585: ST_TO_ADDR
26586: LD_INT 1
26588: PUSH
26589: FOR_DOWNTO
26590: IFFALSE 26753
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26592: LD_EXP 68
26596: PUSH
26597: LD_VAR 0 6
26601: ARRAY
26602: PUSH
26603: LD_VAR 0 5
26607: ARRAY
26608: PUSH
26609: LD_INT 1
26611: ARRAY
26612: PPUSH
26613: LD_EXP 68
26617: PUSH
26618: LD_VAR 0 6
26622: ARRAY
26623: PUSH
26624: LD_VAR 0 5
26628: ARRAY
26629: PUSH
26630: LD_INT 2
26632: ARRAY
26633: PPUSH
26634: LD_VAR 0 2
26638: PPUSH
26639: LD_VAR 0 3
26643: PPUSH
26644: CALL_OW 298
26648: PUSH
26649: LD_INT 6
26651: LESS
26652: IFFALSE 26751
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26654: LD_EXP 68
26658: PUSH
26659: LD_VAR 0 6
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 5
26669: ARRAY
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: LD_EXP 68
26679: PUSH
26680: LD_VAR 0 6
26684: ARRAY
26685: PUSH
26686: LD_VAR 0 5
26690: ARRAY
26691: PUSH
26692: LD_INT 2
26694: ARRAY
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 255
26705: PPUSH
26706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26710: LD_ADDR_EXP 68
26714: PUSH
26715: LD_EXP 68
26719: PPUSH
26720: LD_VAR 0 6
26724: PPUSH
26725: LD_EXP 68
26729: PUSH
26730: LD_VAR 0 6
26734: ARRAY
26735: PPUSH
26736: LD_VAR 0 5
26740: PPUSH
26741: CALL_OW 3
26745: PPUSH
26746: CALL_OW 1
26750: ST_TO_ADDR
// end ; end ;
26751: GO 26589
26753: POP
26754: POP
// end ;
26755: LD_VAR 0 4
26759: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26760: LD_INT 0
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 264
26780: PUSH
26781: LD_INT 81
26783: EQUAL
26784: NOT
26785: IFTRUE 26800
26787: PUSH
26788: LD_VAR 0 1
26792: PUSH
26793: LD_EXP 67
26797: IN
26798: NOT
26799: OR
26800: IFFALSE 26804
// exit ;
26802: GO 27130
// index := GetElementIndex ( minersList , unit ) ;
26804: LD_ADDR_VAR 0 6
26808: PUSH
26809: LD_EXP 67
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL 32505 0 2
26823: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26824: LD_ADDR_VAR 0 8
26828: PUSH
26829: LD_EXP 69
26833: PUSH
26834: LD_EXP 68
26838: PUSH
26839: LD_VAR 0 6
26843: ARRAY
26844: MINUS
26845: ST_TO_ADDR
// if not minesFreeAmount then
26846: LD_VAR 0 8
26850: NOT
26851: IFFALSE 26855
// exit ;
26853: GO 27130
// tmp := [ ] ;
26855: LD_ADDR_VAR 0 7
26859: PUSH
26860: EMPTY
26861: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26862: LD_ADDR_VAR 0 5
26866: PUSH
26867: DOUBLE
26868: LD_INT 1
26870: DEC
26871: ST_TO_ADDR
26872: LD_VAR 0 8
26876: PUSH
26877: FOR_TO
26878: IFFALSE 27077
// begin _d := rand ( 0 , 5 ) ;
26880: LD_ADDR_VAR 0 11
26884: PUSH
26885: LD_INT 0
26887: PPUSH
26888: LD_INT 5
26890: PPUSH
26891: CALL_OW 12
26895: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26896: LD_ADDR_VAR 0 12
26900: PUSH
26901: LD_INT 2
26903: PPUSH
26904: LD_INT 6
26906: PPUSH
26907: CALL_OW 12
26911: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26912: LD_ADDR_VAR 0 9
26916: PUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: LD_VAR 0 11
26926: PPUSH
26927: LD_VAR 0 12
26931: PPUSH
26932: CALL_OW 272
26936: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26937: LD_ADDR_VAR 0 10
26941: PUSH
26942: LD_VAR 0 3
26946: PPUSH
26947: LD_VAR 0 11
26951: PPUSH
26952: LD_VAR 0 12
26956: PPUSH
26957: CALL_OW 273
26961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26962: LD_VAR 0 9
26966: PPUSH
26967: LD_VAR 0 10
26971: PPUSH
26972: CALL_OW 488
26976: IFFALSE 27000
26978: PUSH
26979: LD_VAR 0 9
26983: PUSH
26984: LD_VAR 0 10
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_VAR 0 7
26997: IN
26998: NOT
26999: AND
27000: IFFALSE 27019
27002: PUSH
27003: LD_VAR 0 9
27007: PPUSH
27008: LD_VAR 0 10
27012: PPUSH
27013: CALL_OW 458
27017: NOT
27018: AND
27019: IFFALSE 27061
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27021: LD_ADDR_VAR 0 7
27025: PUSH
27026: LD_VAR 0 7
27030: PPUSH
27031: LD_VAR 0 7
27035: PUSH
27036: LD_INT 1
27038: PLUS
27039: PPUSH
27040: LD_VAR 0 9
27044: PUSH
27045: LD_VAR 0 10
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PPUSH
27054: CALL_OW 1
27058: ST_TO_ADDR
27059: GO 27075
// i := i - 1 ;
27061: LD_ADDR_VAR 0 5
27065: PUSH
27066: LD_VAR 0 5
27070: PUSH
27071: LD_INT 1
27073: MINUS
27074: ST_TO_ADDR
// end ;
27075: GO 26877
27077: POP
27078: POP
// for i in tmp do
27079: LD_ADDR_VAR 0 5
27083: PUSH
27084: LD_VAR 0 7
27088: PUSH
27089: FOR_IN
27090: IFFALSE 27128
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27092: LD_VAR 0 1
27096: PPUSH
27097: LD_VAR 0 5
27101: PUSH
27102: LD_INT 1
27104: ARRAY
27105: PPUSH
27106: LD_VAR 0 5
27110: PUSH
27111: LD_INT 2
27113: ARRAY
27114: PPUSH
27115: CALL 26062 0 3
27119: NOT
27120: IFFALSE 27126
// exit ;
27122: POP
27123: POP
27124: GO 27130
27126: GO 27089
27128: POP
27129: POP
// end ;
27130: LD_VAR 0 4
27134: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
27135: LD_INT 0
27137: PPUSH
27138: PPUSH
27139: PPUSH
27140: PPUSH
27141: PPUSH
27142: PPUSH
27143: PPUSH
27144: PPUSH
27145: PPUSH
// if GetClass ( unit ) <> class_sniper then
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 257
27155: PUSH
27156: LD_INT 5
27158: NONEQUAL
27159: IFFALSE 27163
// exit ;
27161: GO 27633
// dist := 8 ;
27163: LD_ADDR_VAR 0 5
27167: PUSH
27168: LD_INT 8
27170: ST_TO_ADDR
// viewRange := 12 ;
27171: LD_ADDR_VAR 0 8
27175: PUSH
27176: LD_INT 12
27178: ST_TO_ADDR
// side := GetSide ( unit ) ;
27179: LD_ADDR_VAR 0 6
27183: PUSH
27184: LD_VAR 0 1
27188: PPUSH
27189: CALL_OW 255
27193: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27194: LD_INT 61
27196: PPUSH
27197: LD_VAR 0 6
27201: PPUSH
27202: CALL_OW 321
27206: PUSH
27207: LD_INT 2
27209: EQUAL
27210: IFFALSE 27220
// viewRange := 16 ;
27212: LD_ADDR_VAR 0 8
27216: PUSH
27217: LD_INT 16
27219: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_VAR 0 2
27229: PPUSH
27230: LD_VAR 0 3
27234: PPUSH
27235: CALL_OW 297
27239: PUSH
27240: LD_VAR 0 5
27244: GREATER
27245: IFFALSE 27324
// begin ComMoveXY ( unit , x , y ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: LD_VAR 0 3
27261: PPUSH
27262: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27266: LD_INT 35
27268: PPUSH
27269: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_VAR 0 2
27282: PPUSH
27283: LD_VAR 0 3
27287: PPUSH
27288: CALL 64551 0 3
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27633
// until GetDistUnitXY ( unit , x , y ) < dist ;
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_VAR 0 2
27306: PPUSH
27307: LD_VAR 0 3
27311: PPUSH
27312: CALL_OW 297
27316: PUSH
27317: LD_VAR 0 5
27321: LESS
27322: IFFALSE 27266
// end ; ComTurnXY ( unit , x , y ) ;
27324: LD_VAR 0 1
27328: PPUSH
27329: LD_VAR 0 2
27333: PPUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 118
// repeat if Multiplayer then
27343: LD_OWVAR 4
27347: IFFALSE 27358
// wait ( 35 ) else
27349: LD_INT 35
27351: PPUSH
27352: CALL_OW 67
27356: GO 27365
// wait ( 5 ) ;
27358: LD_INT 5
27360: PPUSH
27361: CALL_OW 67
// _d := GetDir ( unit ) ;
27365: LD_ADDR_VAR 0 11
27369: PUSH
27370: LD_VAR 0 1
27374: PPUSH
27375: CALL_OW 254
27379: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27380: LD_ADDR_VAR 0 7
27384: PUSH
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 250
27394: PPUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 251
27404: PPUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_VAR 0 3
27414: PPUSH
27415: CALL 67187 0 4
27419: ST_TO_ADDR
// until dir = _d ;
27420: LD_VAR 0 7
27424: PUSH
27425: LD_VAR 0 11
27429: EQUAL
27430: IFFALSE 27343
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27432: LD_ADDR_VAR 0 9
27436: PUSH
27437: LD_VAR 0 1
27441: PPUSH
27442: CALL_OW 250
27446: PPUSH
27447: LD_VAR 0 7
27451: PPUSH
27452: LD_VAR 0 5
27456: PPUSH
27457: CALL_OW 272
27461: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27462: LD_ADDR_VAR 0 10
27466: PUSH
27467: LD_VAR 0 1
27471: PPUSH
27472: CALL_OW 251
27476: PPUSH
27477: LD_VAR 0 7
27481: PPUSH
27482: LD_VAR 0 5
27486: PPUSH
27487: CALL_OW 273
27491: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27492: LD_VAR 0 9
27496: PPUSH
27497: LD_VAR 0 10
27501: PPUSH
27502: CALL_OW 488
27506: NOT
27507: IFFALSE 27511
// exit ;
27509: GO 27633
// ComAnimCustom ( unit , 1 ) ;
27511: LD_VAR 0 1
27515: PPUSH
27516: LD_INT 1
27518: PPUSH
27519: CALL_OW 592
// p := 0 ;
27523: LD_ADDR_VAR 0 12
27527: PUSH
27528: LD_INT 0
27530: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27531: LD_VAR 0 9
27535: PPUSH
27536: LD_VAR 0 10
27540: PPUSH
27541: LD_VAR 0 6
27545: PPUSH
27546: LD_VAR 0 8
27550: PPUSH
27551: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27555: LD_INT 35
27557: PPUSH
27558: CALL_OW 67
// p := Inc ( p ) ;
27562: LD_ADDR_VAR 0 12
27566: PUSH
27567: LD_VAR 0 12
27571: PPUSH
27572: CALL 67143 0 1
27576: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27577: LD_VAR 0 12
27581: PUSH
27582: LD_INT 3
27584: EQUAL
27585: IFTRUE 27599
27587: PUSH
27588: LD_VAR 0 1
27592: PPUSH
27593: CALL_OW 302
27597: NOT
27598: OR
27599: IFTRUE 27612
27601: PUSH
27602: LD_VAR 0 1
27606: PPUSH
27607: CALL_OW 301
27611: OR
27612: IFFALSE 27555
// RemoveSeeing ( _x , _y , side ) ;
27614: LD_VAR 0 9
27618: PPUSH
27619: LD_VAR 0 10
27623: PPUSH
27624: LD_VAR 0 6
27628: PPUSH
27629: CALL_OW 331
// end ; end_of_file
27633: LD_VAR 0 4
27637: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// if exist_mode then
27642: LD_VAR 0 2
27646: IFFALSE 27692
// begin unit := CreateCharacter ( prefix & ident ) ;
27648: LD_ADDR_VAR 0 5
27652: PUSH
27653: LD_VAR 0 3
27657: PUSH
27658: LD_VAR 0 1
27662: STR
27663: PPUSH
27664: CALL_OW 34
27668: ST_TO_ADDR
// if unit then
27669: LD_VAR 0 5
27673: IFFALSE 27690
// DeleteCharacters ( prefix & ident ) ;
27675: LD_VAR 0 3
27679: PUSH
27680: LD_VAR 0 1
27684: STR
27685: PPUSH
27686: CALL_OW 40
// end else
27690: GO 27707
// unit := NewCharacter ( ident ) ;
27692: LD_ADDR_VAR 0 5
27696: PUSH
27697: LD_VAR 0 1
27701: PPUSH
27702: CALL_OW 25
27706: ST_TO_ADDR
// result := unit ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_VAR 0 5
27716: ST_TO_ADDR
// end ;
27717: LD_VAR 0 4
27721: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27722: LD_INT 0
27724: PPUSH
27725: PPUSH
// if exist_mode then
27726: LD_VAR 0 2
27730: IFFALSE 27755
// unit := CreateCharacter ( prefix & ident ) else
27732: LD_ADDR_VAR 0 5
27736: PUSH
27737: LD_VAR 0 3
27741: PUSH
27742: LD_VAR 0 1
27746: STR
27747: PPUSH
27748: CALL_OW 34
27752: ST_TO_ADDR
27753: GO 27770
// unit := NewCharacter ( ident ) ;
27755: LD_ADDR_VAR 0 5
27759: PUSH
27760: LD_VAR 0 1
27764: PPUSH
27765: CALL_OW 25
27769: ST_TO_ADDR
// result := unit ;
27770: LD_ADDR_VAR 0 4
27774: PUSH
27775: LD_VAR 0 5
27779: ST_TO_ADDR
// end ;
27780: LD_VAR 0 4
27784: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27785: LD_INT 0
27787: PPUSH
27788: PPUSH
// if not side or not nation then
27789: LD_VAR 0 1
27793: NOT
27794: IFTRUE 27803
27796: PUSH
27797: LD_VAR 0 2
27801: NOT
27802: OR
27803: IFFALSE 27807
// exit ;
27805: GO 28577
// case nation of nation_american :
27807: LD_VAR 0 2
27811: PUSH
27812: LD_INT 1
27814: DOUBLE
27815: EQUAL
27816: IFTRUE 27820
27818: GO 28034
27820: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27821: LD_ADDR_VAR 0 4
27825: PUSH
27826: LD_INT 35
27828: PUSH
27829: LD_INT 45
27831: PUSH
27832: LD_INT 46
27834: PUSH
27835: LD_INT 47
27837: PUSH
27838: LD_INT 82
27840: PUSH
27841: LD_INT 83
27843: PUSH
27844: LD_INT 84
27846: PUSH
27847: LD_INT 85
27849: PUSH
27850: LD_INT 86
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: LD_INT 6
27861: PUSH
27862: LD_INT 15
27864: PUSH
27865: LD_INT 16
27867: PUSH
27868: LD_INT 7
27870: PUSH
27871: LD_INT 12
27873: PUSH
27874: LD_INT 13
27876: PUSH
27877: LD_INT 10
27879: PUSH
27880: LD_INT 14
27882: PUSH
27883: LD_INT 20
27885: PUSH
27886: LD_INT 21
27888: PUSH
27889: LD_INT 22
27891: PUSH
27892: LD_INT 25
27894: PUSH
27895: LD_INT 32
27897: PUSH
27898: LD_INT 27
27900: PUSH
27901: LD_INT 36
27903: PUSH
27904: LD_INT 69
27906: PUSH
27907: LD_INT 39
27909: PUSH
27910: LD_INT 34
27912: PUSH
27913: LD_INT 40
27915: PUSH
27916: LD_INT 48
27918: PUSH
27919: LD_INT 49
27921: PUSH
27922: LD_INT 50
27924: PUSH
27925: LD_INT 51
27927: PUSH
27928: LD_INT 52
27930: PUSH
27931: LD_INT 53
27933: PUSH
27934: LD_INT 54
27936: PUSH
27937: LD_INT 55
27939: PUSH
27940: LD_INT 56
27942: PUSH
27943: LD_INT 57
27945: PUSH
27946: LD_INT 58
27948: PUSH
27949: LD_INT 59
27951: PUSH
27952: LD_INT 60
27954: PUSH
27955: LD_INT 61
27957: PUSH
27958: LD_INT 62
27960: PUSH
27961: LD_INT 80
27963: PUSH
27964: LD_INT 82
27966: PUSH
27967: LD_INT 83
27969: PUSH
27970: LD_INT 84
27972: PUSH
27973: LD_INT 85
27975: PUSH
27976: LD_INT 86
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: ST_TO_ADDR
28032: GO 28499
28034: LD_INT 2
28036: DOUBLE
28037: EQUAL
28038: IFTRUE 28042
28040: GO 28268
28042: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28043: LD_ADDR_VAR 0 4
28047: PUSH
28048: LD_INT 35
28050: PUSH
28051: LD_INT 45
28053: PUSH
28054: LD_INT 46
28056: PUSH
28057: LD_INT 47
28059: PUSH
28060: LD_INT 82
28062: PUSH
28063: LD_INT 83
28065: PUSH
28066: LD_INT 84
28068: PUSH
28069: LD_INT 85
28071: PUSH
28072: LD_INT 87
28074: PUSH
28075: LD_INT 70
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 11
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: LD_INT 4
28089: PUSH
28090: LD_INT 5
28092: PUSH
28093: LD_INT 6
28095: PUSH
28096: LD_INT 15
28098: PUSH
28099: LD_INT 18
28101: PUSH
28102: LD_INT 7
28104: PUSH
28105: LD_INT 17
28107: PUSH
28108: LD_INT 8
28110: PUSH
28111: LD_INT 20
28113: PUSH
28114: LD_INT 21
28116: PUSH
28117: LD_INT 22
28119: PUSH
28120: LD_INT 72
28122: PUSH
28123: LD_INT 26
28125: PUSH
28126: LD_INT 69
28128: PUSH
28129: LD_INT 39
28131: PUSH
28132: LD_INT 40
28134: PUSH
28135: LD_INT 41
28137: PUSH
28138: LD_INT 42
28140: PUSH
28141: LD_INT 43
28143: PUSH
28144: LD_INT 48
28146: PUSH
28147: LD_INT 49
28149: PUSH
28150: LD_INT 50
28152: PUSH
28153: LD_INT 51
28155: PUSH
28156: LD_INT 52
28158: PUSH
28159: LD_INT 53
28161: PUSH
28162: LD_INT 54
28164: PUSH
28165: LD_INT 55
28167: PUSH
28168: LD_INT 56
28170: PUSH
28171: LD_INT 60
28173: PUSH
28174: LD_INT 61
28176: PUSH
28177: LD_INT 62
28179: PUSH
28180: LD_INT 66
28182: PUSH
28183: LD_INT 67
28185: PUSH
28186: LD_INT 68
28188: PUSH
28189: LD_INT 81
28191: PUSH
28192: LD_INT 82
28194: PUSH
28195: LD_INT 83
28197: PUSH
28198: LD_INT 84
28200: PUSH
28201: LD_INT 85
28203: PUSH
28204: LD_INT 87
28206: PUSH
28207: LD_INT 88
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
28266: GO 28499
28268: LD_INT 3
28270: DOUBLE
28271: EQUAL
28272: IFTRUE 28276
28274: GO 28498
28276: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28277: LD_ADDR_VAR 0 4
28281: PUSH
28282: LD_INT 46
28284: PUSH
28285: LD_INT 47
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 82
28296: PUSH
28297: LD_INT 83
28299: PUSH
28300: LD_INT 84
28302: PUSH
28303: LD_INT 85
28305: PUSH
28306: LD_INT 86
28308: PUSH
28309: LD_INT 11
28311: PUSH
28312: LD_INT 9
28314: PUSH
28315: LD_INT 20
28317: PUSH
28318: LD_INT 19
28320: PUSH
28321: LD_INT 21
28323: PUSH
28324: LD_INT 24
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_INT 25
28332: PUSH
28333: LD_INT 28
28335: PUSH
28336: LD_INT 29
28338: PUSH
28339: LD_INT 30
28341: PUSH
28342: LD_INT 31
28344: PUSH
28345: LD_INT 37
28347: PUSH
28348: LD_INT 38
28350: PUSH
28351: LD_INT 32
28353: PUSH
28354: LD_INT 27
28356: PUSH
28357: LD_INT 33
28359: PUSH
28360: LD_INT 69
28362: PUSH
28363: LD_INT 39
28365: PUSH
28366: LD_INT 34
28368: PUSH
28369: LD_INT 40
28371: PUSH
28372: LD_INT 71
28374: PUSH
28375: LD_INT 23
28377: PUSH
28378: LD_INT 44
28380: PUSH
28381: LD_INT 48
28383: PUSH
28384: LD_INT 49
28386: PUSH
28387: LD_INT 50
28389: PUSH
28390: LD_INT 51
28392: PUSH
28393: LD_INT 52
28395: PUSH
28396: LD_INT 53
28398: PUSH
28399: LD_INT 54
28401: PUSH
28402: LD_INT 55
28404: PUSH
28405: LD_INT 56
28407: PUSH
28408: LD_INT 57
28410: PUSH
28411: LD_INT 58
28413: PUSH
28414: LD_INT 59
28416: PUSH
28417: LD_INT 63
28419: PUSH
28420: LD_INT 64
28422: PUSH
28423: LD_INT 65
28425: PUSH
28426: LD_INT 82
28428: PUSH
28429: LD_INT 83
28431: PUSH
28432: LD_INT 84
28434: PUSH
28435: LD_INT 85
28437: PUSH
28438: LD_INT 86
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
28496: GO 28499
28498: POP
// if state > - 1 and state < 3 then
28499: LD_VAR 0 3
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: GREATER
28508: IFFALSE 28520
28510: PUSH
28511: LD_VAR 0 3
28515: PUSH
28516: LD_INT 3
28518: LESS
28519: AND
28520: IFFALSE 28577
// for i in result do
28522: LD_ADDR_VAR 0 5
28526: PUSH
28527: LD_VAR 0 4
28531: PUSH
28532: FOR_IN
28533: IFFALSE 28575
// if GetTech ( i , side ) <> state then
28535: LD_VAR 0 5
28539: PPUSH
28540: LD_VAR 0 1
28544: PPUSH
28545: CALL_OW 321
28549: PUSH
28550: LD_VAR 0 3
28554: NONEQUAL
28555: IFFALSE 28573
// result := result diff i ;
28557: LD_ADDR_VAR 0 4
28561: PUSH
28562: LD_VAR 0 4
28566: PUSH
28567: LD_VAR 0 5
28571: DIFF
28572: ST_TO_ADDR
28573: GO 28532
28575: POP
28576: POP
// end ;
28577: LD_VAR 0 4
28581: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
// result := true ;
28587: LD_ADDR_VAR 0 3
28591: PUSH
28592: LD_INT 1
28594: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_VAR 0 2
28604: PPUSH
28605: CALL_OW 480
28609: ST_TO_ADDR
// if not tmp then
28610: LD_VAR 0 5
28614: NOT
28615: IFFALSE 28619
// exit ;
28617: GO 28668
// for i in tmp do
28619: LD_ADDR_VAR 0 4
28623: PUSH
28624: LD_VAR 0 5
28628: PUSH
28629: FOR_IN
28630: IFFALSE 28666
// if GetTech ( i , side ) <> state_researched then
28632: LD_VAR 0 4
28636: PPUSH
28637: LD_VAR 0 1
28641: PPUSH
28642: CALL_OW 321
28646: PUSH
28647: LD_INT 2
28649: NONEQUAL
28650: IFFALSE 28664
// begin result := false ;
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_INT 0
28659: ST_TO_ADDR
// exit ;
28660: POP
28661: POP
28662: GO 28668
// end ;
28664: GO 28629
28666: POP
28667: POP
// end ;
28668: LD_VAR 0 3
28672: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28673: LD_INT 0
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
28686: PPUSH
28687: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28688: LD_VAR 0 1
28692: NOT
28693: IFTRUE 28710
28695: PUSH
28696: LD_VAR 0 1
28700: PPUSH
28701: CALL_OW 257
28705: PUSH
28706: LD_INT 9
28708: NONEQUAL
28709: OR
28710: IFFALSE 28714
// exit ;
28712: GO 29293
// side := GetSide ( unit ) ;
28714: LD_ADDR_VAR 0 9
28718: PUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL_OW 255
28728: ST_TO_ADDR
// tech_space := tech_spacanom ;
28729: LD_ADDR_VAR 0 12
28733: PUSH
28734: LD_INT 29
28736: ST_TO_ADDR
// tech_time := tech_taurad ;
28737: LD_ADDR_VAR 0 13
28741: PUSH
28742: LD_INT 28
28744: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28745: LD_ADDR_VAR 0 11
28749: PUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 310
28759: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28760: LD_VAR 0 11
28764: PPUSH
28765: CALL_OW 247
28769: PUSH
28770: LD_INT 2
28772: EQUAL
28773: IFFALSE 28777
// exit ;
28775: GO 29293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28777: LD_ADDR_VAR 0 8
28781: PUSH
28782: LD_INT 81
28784: PUSH
28785: LD_VAR 0 9
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 3
28796: PUSH
28797: LD_INT 21
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PPUSH
28815: CALL_OW 69
28819: ST_TO_ADDR
// if not tmp then
28820: LD_VAR 0 8
28824: NOT
28825: IFFALSE 28829
// exit ;
28827: GO 29293
// if in_unit then
28829: LD_VAR 0 11
28833: IFFALSE 28857
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28835: LD_ADDR_VAR 0 10
28839: PUSH
28840: LD_VAR 0 8
28844: PPUSH
28845: LD_VAR 0 11
28849: PPUSH
28850: CALL_OW 74
28854: ST_TO_ADDR
28855: GO 28877
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28857: LD_ADDR_VAR 0 10
28861: PUSH
28862: LD_VAR 0 8
28866: PPUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 74
28876: ST_TO_ADDR
// if not enemy then
28877: LD_VAR 0 10
28881: NOT
28882: IFFALSE 28886
// exit ;
28884: GO 29293
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28886: LD_VAR 0 11
28890: IFFALSE 28912
28892: PUSH
28893: LD_VAR 0 11
28897: PPUSH
28898: LD_VAR 0 10
28902: PPUSH
28903: CALL_OW 296
28907: PUSH
28908: LD_INT 13
28910: GREATER
28911: AND
28912: IFTRUE 28934
28914: PUSH
28915: LD_VAR 0 1
28919: PPUSH
28920: LD_VAR 0 10
28924: PPUSH
28925: CALL_OW 296
28929: PUSH
28930: LD_INT 12
28932: GREATER
28933: OR
28934: IFFALSE 28938
// exit ;
28936: GO 29293
// missile := [ 1 ] ;
28938: LD_ADDR_VAR 0 14
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28949: LD_VAR 0 9
28953: PPUSH
28954: LD_VAR 0 12
28958: PPUSH
28959: CALL_OW 325
28963: IFFALSE 28992
// missile := Replace ( missile , missile + 1 , 2 ) ;
28965: LD_ADDR_VAR 0 14
28969: PUSH
28970: LD_VAR 0 14
28974: PPUSH
28975: LD_VAR 0 14
28979: PUSH
28980: LD_INT 1
28982: PLUS
28983: PPUSH
28984: LD_INT 2
28986: PPUSH
28987: CALL_OW 1
28991: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28992: LD_VAR 0 9
28996: PPUSH
28997: LD_VAR 0 13
29001: PPUSH
29002: CALL_OW 325
29006: IFFALSE 29030
29008: PUSH
29009: LD_VAR 0 10
29013: PPUSH
29014: CALL_OW 255
29018: PPUSH
29019: LD_VAR 0 13
29023: PPUSH
29024: CALL_OW 325
29028: NOT
29029: AND
29030: IFFALSE 29059
// missile := Replace ( missile , missile + 1 , 3 ) ;
29032: LD_ADDR_VAR 0 14
29036: PUSH
29037: LD_VAR 0 14
29041: PPUSH
29042: LD_VAR 0 14
29046: PUSH
29047: LD_INT 1
29049: PLUS
29050: PPUSH
29051: LD_INT 3
29053: PPUSH
29054: CALL_OW 1
29058: ST_TO_ADDR
// if missile < 2 then
29059: LD_VAR 0 14
29063: PUSH
29064: LD_INT 2
29066: LESS
29067: IFFALSE 29071
// exit ;
29069: GO 29293
// x := GetX ( enemy ) ;
29071: LD_ADDR_VAR 0 4
29075: PUSH
29076: LD_VAR 0 10
29080: PPUSH
29081: CALL_OW 250
29085: ST_TO_ADDR
// y := GetY ( enemy ) ;
29086: LD_ADDR_VAR 0 5
29090: PUSH
29091: LD_VAR 0 10
29095: PPUSH
29096: CALL_OW 251
29100: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29101: LD_ADDR_VAR 0 6
29105: PUSH
29106: LD_VAR 0 4
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PPUSH
29115: LD_INT 1
29117: PPUSH
29118: CALL_OW 12
29122: PLUS
29123: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29124: LD_ADDR_VAR 0 7
29128: PUSH
29129: LD_VAR 0 5
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PPUSH
29138: LD_INT 1
29140: PPUSH
29141: CALL_OW 12
29145: PLUS
29146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29147: LD_VAR 0 6
29151: PPUSH
29152: LD_VAR 0 7
29156: PPUSH
29157: CALL_OW 488
29161: NOT
29162: IFFALSE 29184
// begin _x := x ;
29164: LD_ADDR_VAR 0 6
29168: PUSH
29169: LD_VAR 0 4
29173: ST_TO_ADDR
// _y := y ;
29174: LD_ADDR_VAR 0 7
29178: PUSH
29179: LD_VAR 0 5
29183: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_INT 1
29191: PPUSH
29192: LD_VAR 0 14
29196: PPUSH
29197: CALL_OW 12
29201: ST_TO_ADDR
// case i of 1 :
29202: LD_VAR 0 3
29206: PUSH
29207: LD_INT 1
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29232
29215: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_VAR 0 10
29225: PPUSH
29226: CALL_OW 115
29230: GO 29293
29232: LD_INT 2
29234: DOUBLE
29235: EQUAL
29236: IFTRUE 29240
29238: GO 29262
29240: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29241: LD_VAR 0 1
29245: PPUSH
29246: LD_VAR 0 6
29250: PPUSH
29251: LD_VAR 0 7
29255: PPUSH
29256: CALL_OW 153
29260: GO 29293
29262: LD_INT 3
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29292
29270: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: LD_VAR 0 7
29285: PPUSH
29286: CALL_OW 154
29290: GO 29293
29292: POP
// end ;
29293: LD_VAR 0 2
29297: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29298: LD_INT 0
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
// if not unit or not building then
29306: LD_VAR 0 1
29310: NOT
29311: IFTRUE 29320
29313: PUSH
29314: LD_VAR 0 2
29318: NOT
29319: OR
29320: IFFALSE 29324
// exit ;
29322: GO 29482
// x := GetX ( building ) ;
29324: LD_ADDR_VAR 0 5
29328: PUSH
29329: LD_VAR 0 2
29333: PPUSH
29334: CALL_OW 250
29338: ST_TO_ADDR
// y := GetY ( building ) ;
29339: LD_ADDR_VAR 0 6
29343: PUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL_OW 251
29353: ST_TO_ADDR
// for i := 0 to 5 do
29354: LD_ADDR_VAR 0 4
29358: PUSH
29359: DOUBLE
29360: LD_INT 0
29362: DEC
29363: ST_TO_ADDR
29364: LD_INT 5
29366: PUSH
29367: FOR_TO
29368: IFFALSE 29480
// begin _x := ShiftX ( x , i , 3 ) ;
29370: LD_ADDR_VAR 0 7
29374: PUSH
29375: LD_VAR 0 5
29379: PPUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: LD_INT 3
29387: PPUSH
29388: CALL_OW 272
29392: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29393: LD_ADDR_VAR 0 8
29397: PUSH
29398: LD_VAR 0 6
29402: PPUSH
29403: LD_VAR 0 4
29407: PPUSH
29408: LD_INT 3
29410: PPUSH
29411: CALL_OW 273
29415: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29416: LD_VAR 0 7
29420: PPUSH
29421: LD_VAR 0 8
29425: PPUSH
29426: CALL_OW 488
29430: NOT
29431: IFFALSE 29435
// continue ;
29433: GO 29367
// if HexInfo ( _x , _y ) = 0 then
29435: LD_VAR 0 7
29439: PPUSH
29440: LD_VAR 0 8
29444: PPUSH
29445: CALL_OW 428
29449: PUSH
29450: LD_INT 0
29452: EQUAL
29453: IFFALSE 29478
// begin ComMoveXY ( unit , _x , _y ) ;
29455: LD_VAR 0 1
29459: PPUSH
29460: LD_VAR 0 7
29464: PPUSH
29465: LD_VAR 0 8
29469: PPUSH
29470: CALL_OW 111
// exit ;
29474: POP
29475: POP
29476: GO 29482
// end ; end ;
29478: GO 29367
29480: POP
29481: POP
// end ;
29482: LD_VAR 0 3
29486: RET
// export function ScanBase ( side , base_area ) ; begin
29487: LD_INT 0
29489: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: LD_INT 81
29502: PUSH
29503: LD_VAR 0 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PPUSH
29512: CALL_OW 70
29516: ST_TO_ADDR
// end ;
29517: LD_VAR 0 3
29521: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29522: LD_INT 0
29524: PPUSH
29525: PPUSH
29526: PPUSH
29527: PPUSH
// result := false ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_INT 0
29535: ST_TO_ADDR
// side := GetSide ( unit ) ;
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL_OW 255
29550: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29551: LD_ADDR_VAR 0 4
29555: PUSH
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 248
29565: ST_TO_ADDR
// case nat of 1 :
29566: LD_VAR 0 4
29570: PUSH
29571: LD_INT 1
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 29590
29579: POP
// tech := tech_lassight ; 2 :
29580: LD_ADDR_VAR 0 5
29584: PUSH
29585: LD_INT 12
29587: ST_TO_ADDR
29588: GO 29629
29590: LD_INT 2
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29609
29598: POP
// tech := tech_mortar ; 3 :
29599: LD_ADDR_VAR 0 5
29603: PUSH
29604: LD_INT 41
29606: ST_TO_ADDR
29607: GO 29629
29609: LD_INT 3
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29628
29617: POP
// tech := tech_bazooka ; end ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_INT 44
29625: ST_TO_ADDR
29626: GO 29629
29628: POP
// if Researched ( side , tech ) then
29629: LD_VAR 0 3
29633: PPUSH
29634: LD_VAR 0 5
29638: PPUSH
29639: CALL_OW 325
29643: IFFALSE 29670
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29645: LD_ADDR_VAR 0 2
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: LD_INT 8
29655: PUSH
29656: LD_INT 9
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: LIST
29663: PUSH
29664: LD_VAR 0 4
29668: ARRAY
29669: ST_TO_ADDR
// end ;
29670: LD_VAR 0 2
29674: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
29679: PPUSH
// if not mines then
29680: LD_VAR 0 2
29684: NOT
29685: IFFALSE 29689
// exit ;
29687: GO 29833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29689: LD_ADDR_VAR 0 5
29693: PUSH
29694: LD_INT 81
29696: PUSH
29697: LD_VAR 0 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: PUSH
29709: LD_INT 21
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PPUSH
29727: CALL_OW 69
29731: ST_TO_ADDR
// for i in mines do
29732: LD_ADDR_VAR 0 4
29736: PUSH
29737: LD_VAR 0 2
29741: PUSH
29742: FOR_IN
29743: IFFALSE 29831
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29745: LD_VAR 0 4
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: PPUSH
29754: LD_VAR 0 4
29758: PUSH
29759: LD_INT 2
29761: ARRAY
29762: PPUSH
29763: CALL_OW 458
29767: NOT
29768: IFFALSE 29772
// continue ;
29770: GO 29742
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29772: LD_VAR 0 4
29776: PUSH
29777: LD_INT 1
29779: ARRAY
29780: PPUSH
29781: LD_VAR 0 4
29785: PUSH
29786: LD_INT 2
29788: ARRAY
29789: PPUSH
29790: CALL_OW 428
29794: PUSH
29795: LD_VAR 0 5
29799: IN
29800: IFFALSE 29829
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29802: LD_VAR 0 4
29806: PUSH
29807: LD_INT 1
29809: ARRAY
29810: PPUSH
29811: LD_VAR 0 4
29815: PUSH
29816: LD_INT 2
29818: ARRAY
29819: PPUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 456
// end ;
29829: GO 29742
29831: POP
29832: POP
// end ;
29833: LD_VAR 0 3
29837: RET
// export function Count ( array ) ; begin
29838: LD_INT 0
29840: PPUSH
// result := array + 0 ;
29841: LD_ADDR_VAR 0 2
29845: PUSH
29846: LD_VAR 0 1
29850: PUSH
29851: LD_INT 0
29853: PLUS
29854: ST_TO_ADDR
// end ;
29855: LD_VAR 0 2
29859: RET
// export function IsEmpty ( building ) ; begin
29860: LD_INT 0
29862: PPUSH
// if not building then
29863: LD_VAR 0 1
29867: NOT
29868: IFFALSE 29872
// exit ;
29870: GO 29915
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29872: LD_ADDR_VAR 0 2
29876: PUSH
29877: LD_VAR 0 1
29881: PUSH
29882: LD_INT 22
29884: PUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: CALL_OW 255
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 58
29901: PUSH
29902: EMPTY
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: IN
29914: ST_TO_ADDR
// end ;
29915: LD_VAR 0 2
29919: RET
// export function IsNotFull ( building ) ; var places ; begin
29920: LD_INT 0
29922: PPUSH
29923: PPUSH
// if not building then
29924: LD_VAR 0 1
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 29961
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29933: LD_ADDR_VAR 0 2
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: LD_INT 3
29945: PUSH
29946: LD_INT 62
29948: PUSH
29949: EMPTY
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 72
29960: ST_TO_ADDR
// end ;
29961: LD_VAR 0 2
29965: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29966: LD_INT 0
29968: PPUSH
29969: PPUSH
29970: PPUSH
29971: PPUSH
// tmp := [ ] ;
29972: LD_ADDR_VAR 0 3
29976: PUSH
29977: EMPTY
29978: ST_TO_ADDR
// list := [ ] ;
29979: LD_ADDR_VAR 0 5
29983: PUSH
29984: EMPTY
29985: ST_TO_ADDR
// for i = 16 to 25 do
29986: LD_ADDR_VAR 0 4
29990: PUSH
29991: DOUBLE
29992: LD_INT 16
29994: DEC
29995: ST_TO_ADDR
29996: LD_INT 25
29998: PUSH
29999: FOR_TO
30000: IFFALSE 30073
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: LD_VAR 0 3
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: CALL_OW 255
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 91
30031: PUSH
30032: LD_VAR 0 1
30036: PUSH
30037: LD_INT 6
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 30
30047: PUSH
30048: LD_VAR 0 4
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: PPUSH
30065: CALL_OW 69
30069: ADD
30070: ST_TO_ADDR
30071: GO 29999
30073: POP
30074: POP
// for i = 1 to tmp do
30075: LD_ADDR_VAR 0 4
30079: PUSH
30080: DOUBLE
30081: LD_INT 1
30083: DEC
30084: ST_TO_ADDR
30085: LD_VAR 0 3
30089: PUSH
30090: FOR_TO
30091: IFFALSE 30179
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30093: LD_ADDR_VAR 0 5
30097: PUSH
30098: LD_VAR 0 5
30102: PUSH
30103: LD_VAR 0 3
30107: PUSH
30108: LD_VAR 0 4
30112: ARRAY
30113: PPUSH
30114: CALL_OW 266
30118: PUSH
30119: LD_VAR 0 3
30123: PUSH
30124: LD_VAR 0 4
30128: ARRAY
30129: PPUSH
30130: CALL_OW 250
30134: PUSH
30135: LD_VAR 0 3
30139: PUSH
30140: LD_VAR 0 4
30144: ARRAY
30145: PPUSH
30146: CALL_OW 251
30150: PUSH
30151: LD_VAR 0 3
30155: PUSH
30156: LD_VAR 0 4
30160: ARRAY
30161: PPUSH
30162: CALL_OW 254
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: ADD
30176: ST_TO_ADDR
30177: GO 30090
30179: POP
30180: POP
// result := list ;
30181: LD_ADDR_VAR 0 2
30185: PUSH
30186: LD_VAR 0 5
30190: ST_TO_ADDR
// end ;
30191: LD_VAR 0 2
30195: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30196: LD_INT 0
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
30202: PPUSH
30203: PPUSH
30204: PPUSH
// if not factory then
30205: LD_VAR 0 1
30209: NOT
30210: IFFALSE 30214
// exit ;
30212: GO 30817
// if control = control_apeman then
30214: LD_VAR 0 4
30218: PUSH
30219: LD_INT 5
30221: EQUAL
30222: IFFALSE 30331
// begin tmp := UnitsInside ( factory ) ;
30224: LD_ADDR_VAR 0 8
30228: PUSH
30229: LD_VAR 0 1
30233: PPUSH
30234: CALL_OW 313
30238: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30239: LD_VAR 0 8
30243: PPUSH
30244: LD_INT 25
30246: PUSH
30247: LD_INT 12
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 72
30258: NOT
30259: IFFALSE 30269
// control := control_manual ;
30261: LD_ADDR_VAR 0 4
30265: PUSH
30266: LD_INT 1
30268: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30269: LD_ADDR_VAR 0 8
30273: PUSH
30274: LD_VAR 0 1
30278: PPUSH
30279: CALL 29966 0 1
30283: ST_TO_ADDR
// if tmp then
30284: LD_VAR 0 8
30288: IFFALSE 30331
// begin for i in tmp do
30290: LD_ADDR_VAR 0 7
30294: PUSH
30295: LD_VAR 0 8
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30329
// if i [ 1 ] = b_ext_radio then
30303: LD_VAR 0 7
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: PUSH
30312: LD_INT 22
30314: EQUAL
30315: IFFALSE 30327
// begin control := control_remote ;
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: LD_INT 2
30324: ST_TO_ADDR
// break ;
30325: GO 30329
// end ;
30327: GO 30300
30329: POP
30330: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30331: LD_VAR 0 1
30335: PPUSH
30336: LD_VAR 0 2
30340: PPUSH
30341: LD_VAR 0 3
30345: PPUSH
30346: LD_VAR 0 4
30350: PPUSH
30351: LD_VAR 0 5
30355: PPUSH
30356: CALL_OW 448
30360: IFFALSE 30395
// begin result := [ chassis , engine , control , weapon ] ;
30362: LD_ADDR_VAR 0 6
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: LD_VAR 0 3
30376: PUSH
30377: LD_VAR 0 4
30381: PUSH
30382: LD_VAR 0 5
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: ST_TO_ADDR
// exit ;
30393: GO 30817
// end ; _chassis := AvailableChassisList ( factory ) ;
30395: LD_ADDR_VAR 0 9
30399: PUSH
30400: LD_VAR 0 1
30404: PPUSH
30405: CALL_OW 475
30409: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30410: LD_ADDR_VAR 0 11
30414: PUSH
30415: LD_VAR 0 1
30419: PPUSH
30420: CALL_OW 476
30424: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30425: LD_ADDR_VAR 0 12
30429: PUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 477
30439: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30440: LD_ADDR_VAR 0 10
30444: PUSH
30445: LD_VAR 0 1
30449: PPUSH
30450: CALL_OW 478
30454: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30455: LD_VAR 0 9
30459: NOT
30460: IFTRUE 30469
30462: PUSH
30463: LD_VAR 0 11
30467: NOT
30468: OR
30469: IFTRUE 30478
30471: PUSH
30472: LD_VAR 0 12
30476: NOT
30477: OR
30478: IFTRUE 30487
30480: PUSH
30481: LD_VAR 0 10
30485: NOT
30486: OR
30487: IFFALSE 30522
// begin result := [ chassis , engine , control , weapon ] ;
30489: LD_ADDR_VAR 0 6
30493: PUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_VAR 0 3
30503: PUSH
30504: LD_VAR 0 4
30508: PUSH
30509: LD_VAR 0 5
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// exit ;
30520: GO 30817
// end ; if not chassis in _chassis then
30522: LD_VAR 0 2
30526: PUSH
30527: LD_VAR 0 9
30531: IN
30532: NOT
30533: IFFALSE 30559
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30535: LD_ADDR_VAR 0 2
30539: PUSH
30540: LD_VAR 0 9
30544: PUSH
30545: LD_INT 1
30547: PPUSH
30548: LD_VAR 0 9
30552: PPUSH
30553: CALL_OW 12
30557: ARRAY
30558: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30559: LD_VAR 0 2
30563: PPUSH
30564: LD_VAR 0 3
30568: PPUSH
30569: CALL 30822 0 2
30573: NOT
30574: IFFALSE 30635
// repeat engine := _engine [ 1 ] ;
30576: LD_ADDR_VAR 0 3
30580: PUSH
30581: LD_VAR 0 11
30585: PUSH
30586: LD_INT 1
30588: ARRAY
30589: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30590: LD_ADDR_VAR 0 11
30594: PUSH
30595: LD_VAR 0 11
30599: PPUSH
30600: LD_INT 1
30602: PPUSH
30603: CALL_OW 3
30607: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30608: LD_VAR 0 2
30612: PPUSH
30613: LD_VAR 0 3
30617: PPUSH
30618: CALL 30822 0 2
30622: IFTRUE 30633
30624: PUSH
30625: LD_VAR 0 11
30629: PUSH
30630: EMPTY
30631: EQUAL
30632: OR
30633: IFFALSE 30576
// if not control in _control then
30635: LD_VAR 0 4
30639: PUSH
30640: LD_VAR 0 12
30644: IN
30645: NOT
30646: IFFALSE 30672
// control := _control [ rand ( 1 , _control ) ] ;
30648: LD_ADDR_VAR 0 4
30652: PUSH
30653: LD_VAR 0 12
30657: PUSH
30658: LD_INT 1
30660: PPUSH
30661: LD_VAR 0 12
30665: PPUSH
30666: CALL_OW 12
30670: ARRAY
30671: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30672: LD_VAR 0 2
30676: PPUSH
30677: LD_VAR 0 5
30681: PPUSH
30682: CALL 31044 0 2
30686: NOT
30687: IFFALSE 30748
// repeat weapon := _weapon [ 1 ] ;
30689: LD_ADDR_VAR 0 5
30693: PUSH
30694: LD_VAR 0 10
30698: PUSH
30699: LD_INT 1
30701: ARRAY
30702: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30703: LD_ADDR_VAR 0 10
30707: PUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: LD_INT 1
30715: PPUSH
30716: CALL_OW 3
30720: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30721: LD_VAR 0 2
30725: PPUSH
30726: LD_VAR 0 5
30730: PPUSH
30731: CALL 31044 0 2
30735: IFTRUE 30746
30737: PUSH
30738: LD_VAR 0 10
30742: PUSH
30743: EMPTY
30744: EQUAL
30745: OR
30746: IFFALSE 30689
// result := [ ] ;
30748: LD_ADDR_VAR 0 6
30752: PUSH
30753: EMPTY
30754: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30755: LD_VAR 0 1
30759: PPUSH
30760: LD_VAR 0 2
30764: PPUSH
30765: LD_VAR 0 3
30769: PPUSH
30770: LD_VAR 0 4
30774: PPUSH
30775: LD_VAR 0 5
30779: PPUSH
30780: CALL_OW 448
30784: IFFALSE 30817
// result := [ chassis , engine , control , weapon ] ;
30786: LD_ADDR_VAR 0 6
30790: PUSH
30791: LD_VAR 0 2
30795: PUSH
30796: LD_VAR 0 3
30800: PUSH
30801: LD_VAR 0 4
30805: PUSH
30806: LD_VAR 0 5
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// end ;
30817: LD_VAR 0 6
30821: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30822: LD_INT 0
30824: PPUSH
// if not chassis or not engine then
30825: LD_VAR 0 1
30829: NOT
30830: IFTRUE 30839
30832: PUSH
30833: LD_VAR 0 2
30837: NOT
30838: OR
30839: IFFALSE 30843
// exit ;
30841: GO 31039
// case engine of engine_solar :
30843: LD_VAR 0 2
30847: PUSH
30848: LD_INT 2
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 30894
30856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30857: LD_ADDR_VAR 0 3
30861: PUSH
30862: LD_INT 11
30864: PUSH
30865: LD_INT 12
30867: PUSH
30868: LD_INT 13
30870: PUSH
30871: LD_INT 14
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
30892: GO 31023
30894: LD_INT 1
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30964
30902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30903: LD_ADDR_VAR 0 3
30907: PUSH
30908: LD_INT 11
30910: PUSH
30911: LD_INT 12
30913: PUSH
30914: LD_INT 13
30916: PUSH
30917: LD_INT 14
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: LD_INT 4
30931: PUSH
30932: LD_INT 5
30934: PUSH
30935: LD_INT 21
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 22
30943: PUSH
30944: LD_INT 24
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: ST_TO_ADDR
30962: GO 31023
30964: LD_INT 3
30966: DOUBLE
30967: EQUAL
30968: IFTRUE 30972
30970: GO 31022
30972: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30973: LD_ADDR_VAR 0 3
30977: PUSH
30978: LD_INT 13
30980: PUSH
30981: LD_INT 14
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: LD_INT 4
30992: PUSH
30993: LD_INT 5
30995: PUSH
30996: LD_INT 21
30998: PUSH
30999: LD_INT 22
31001: PUSH
31002: LD_INT 23
31004: PUSH
31005: LD_INT 24
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: ST_TO_ADDR
31020: GO 31023
31022: POP
// result := ( chassis in result ) ;
31023: LD_ADDR_VAR 0 3
31027: PUSH
31028: LD_VAR 0 1
31032: PUSH
31033: LD_VAR 0 3
31037: IN
31038: ST_TO_ADDR
// end ;
31039: LD_VAR 0 3
31043: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31044: LD_INT 0
31046: PPUSH
// if not chassis or not weapon then
31047: LD_VAR 0 1
31051: NOT
31052: IFTRUE 31061
31054: PUSH
31055: LD_VAR 0 2
31059: NOT
31060: OR
31061: IFFALSE 31065
// exit ;
31063: GO 32125
// case weapon of us_machine_gun :
31065: LD_VAR 0 2
31069: PUSH
31070: LD_INT 2
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31108
31078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
31106: GO 32109
31108: LD_INT 3
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31146
31116: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31117: LD_ADDR_VAR 0 3
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 4
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
31144: GO 32109
31146: LD_INT 11
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31184
31154: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 3
31168: PUSH
31169: LD_INT 4
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
31182: GO 32109
31184: LD_INT 4
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31218
31192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: LD_INT 5
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
31216: GO 32109
31218: LD_INT 5
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31252
31226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: LD_INT 4
31240: PUSH
31241: LD_INT 5
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
31250: GO 32109
31252: LD_INT 9
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31286
31260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31261: LD_ADDR_VAR 0 3
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: LD_INT 4
31274: PUSH
31275: LD_INT 5
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
31284: GO 32109
31286: LD_INT 7
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31320
31294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: LD_INT 4
31308: PUSH
31309: LD_INT 5
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 32109
31320: LD_INT 12
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31354
31328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: LD_INT 4
31342: PUSH
31343: LD_INT 5
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
31352: GO 32109
31354: LD_INT 13
31356: DOUBLE
31357: EQUAL
31358: IFTRUE 31362
31360: GO 31388
31362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31363: LD_ADDR_VAR 0 3
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: LD_INT 4
31376: PUSH
31377: LD_INT 5
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
31386: GO 32109
31388: LD_INT 14
31390: DOUBLE
31391: EQUAL
31392: IFTRUE 31396
31394: GO 31414
31396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31397: LD_ADDR_VAR 0 3
31401: PUSH
31402: LD_INT 4
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 32109
31414: LD_INT 6
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31440
31422: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 4
31430: PUSH
31431: LD_INT 5
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: ST_TO_ADDR
31438: GO 32109
31440: LD_INT 10
31442: DOUBLE
31443: EQUAL
31444: IFTRUE 31448
31446: GO 31466
31448: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31449: LD_ADDR_VAR 0 3
31453: PUSH
31454: LD_INT 4
31456: PUSH
31457: LD_INT 5
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: ST_TO_ADDR
31464: GO 32109
31466: LD_INT 22
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31500
31474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31475: LD_ADDR_VAR 0 3
31479: PUSH
31480: LD_INT 11
31482: PUSH
31483: LD_INT 12
31485: PUSH
31486: LD_INT 13
31488: PUSH
31489: LD_INT 14
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: ST_TO_ADDR
31498: GO 32109
31500: LD_INT 23
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 31534
31508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31509: LD_ADDR_VAR 0 3
31513: PUSH
31514: LD_INT 11
31516: PUSH
31517: LD_INT 12
31519: PUSH
31520: LD_INT 13
31522: PUSH
31523: LD_INT 14
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: ST_TO_ADDR
31532: GO 32109
31534: LD_INT 24
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31568
31542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31543: LD_ADDR_VAR 0 3
31547: PUSH
31548: LD_INT 11
31550: PUSH
31551: LD_INT 12
31553: PUSH
31554: LD_INT 13
31556: PUSH
31557: LD_INT 14
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
31566: GO 32109
31568: LD_INT 30
31570: DOUBLE
31571: EQUAL
31572: IFTRUE 31576
31574: GO 31602
31576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31577: LD_ADDR_VAR 0 3
31581: PUSH
31582: LD_INT 11
31584: PUSH
31585: LD_INT 12
31587: PUSH
31588: LD_INT 13
31590: PUSH
31591: LD_INT 14
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
31600: GO 32109
31602: LD_INT 25
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31628
31610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31611: LD_ADDR_VAR 0 3
31615: PUSH
31616: LD_INT 13
31618: PUSH
31619: LD_INT 14
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: ST_TO_ADDR
31626: GO 32109
31628: LD_INT 27
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31654
31636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31637: LD_ADDR_VAR 0 3
31641: PUSH
31642: LD_INT 13
31644: PUSH
31645: LD_INT 14
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: ST_TO_ADDR
31652: GO 32109
31654: LD_INT 92
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31688
31662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_INT 11
31670: PUSH
31671: LD_INT 12
31673: PUSH
31674: LD_INT 13
31676: PUSH
31677: LD_INT 14
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: ST_TO_ADDR
31686: GO 32109
31688: LD_INT 28
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31714
31696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31697: LD_ADDR_VAR 0 3
31701: PUSH
31702: LD_INT 13
31704: PUSH
31705: LD_INT 14
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: ST_TO_ADDR
31712: GO 32109
31714: LD_INT 29
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31740
31722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31723: LD_ADDR_VAR 0 3
31727: PUSH
31728: LD_INT 13
31730: PUSH
31731: LD_INT 14
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: ST_TO_ADDR
31738: GO 32109
31740: LD_INT 31
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31766
31748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: LD_INT 13
31756: PUSH
31757: LD_INT 14
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: ST_TO_ADDR
31764: GO 32109
31766: LD_INT 26
31768: DOUBLE
31769: EQUAL
31770: IFTRUE 31774
31772: GO 31792
31774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31775: LD_ADDR_VAR 0 3
31779: PUSH
31780: LD_INT 13
31782: PUSH
31783: LD_INT 14
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: ST_TO_ADDR
31790: GO 32109
31792: LD_INT 42
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31826
31800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31801: LD_ADDR_VAR 0 3
31805: PUSH
31806: LD_INT 21
31808: PUSH
31809: LD_INT 22
31811: PUSH
31812: LD_INT 23
31814: PUSH
31815: LD_INT 24
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
31824: GO 32109
31826: LD_INT 43
31828: DOUBLE
31829: EQUAL
31830: IFTRUE 31834
31832: GO 31860
31834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: LD_INT 21
31842: PUSH
31843: LD_INT 22
31845: PUSH
31846: LD_INT 23
31848: PUSH
31849: LD_INT 24
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
31858: GO 32109
31860: LD_INT 44
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31894
31868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31869: LD_ADDR_VAR 0 3
31873: PUSH
31874: LD_INT 21
31876: PUSH
31877: LD_INT 22
31879: PUSH
31880: LD_INT 23
31882: PUSH
31883: LD_INT 24
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: ST_TO_ADDR
31892: GO 32109
31894: LD_INT 45
31896: DOUBLE
31897: EQUAL
31898: IFTRUE 31902
31900: GO 31928
31902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31903: LD_ADDR_VAR 0 3
31907: PUSH
31908: LD_INT 21
31910: PUSH
31911: LD_INT 22
31913: PUSH
31914: LD_INT 23
31916: PUSH
31917: LD_INT 24
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
31926: GO 32109
31928: LD_INT 49
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31962
31936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31937: LD_ADDR_VAR 0 3
31941: PUSH
31942: LD_INT 21
31944: PUSH
31945: LD_INT 22
31947: PUSH
31948: LD_INT 23
31950: PUSH
31951: LD_INT 24
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
31960: GO 32109
31962: LD_INT 51
31964: DOUBLE
31965: EQUAL
31966: IFTRUE 31970
31968: GO 31996
31970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31971: LD_ADDR_VAR 0 3
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: LD_INT 23
31984: PUSH
31985: LD_INT 24
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
31994: GO 32109
31996: LD_INT 52
31998: DOUBLE
31999: EQUAL
32000: IFTRUE 32004
32002: GO 32030
32004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32005: LD_ADDR_VAR 0 3
32009: PUSH
32010: LD_INT 21
32012: PUSH
32013: LD_INT 22
32015: PUSH
32016: LD_INT 23
32018: PUSH
32019: LD_INT 24
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: ST_TO_ADDR
32028: GO 32109
32030: LD_INT 53
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32056
32038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32039: LD_ADDR_VAR 0 3
32043: PUSH
32044: LD_INT 23
32046: PUSH
32047: LD_INT 24
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: ST_TO_ADDR
32054: GO 32109
32056: LD_INT 46
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32082
32064: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_INT 23
32072: PUSH
32073: LD_INT 24
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: ST_TO_ADDR
32080: GO 32109
32082: LD_INT 47
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32108
32090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 23
32098: PUSH
32099: LD_INT 24
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 32109
32108: POP
// result := ( chassis in result ) ;
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_VAR 0 1
32118: PUSH
32119: LD_VAR 0 3
32123: IN
32124: ST_TO_ADDR
// end ;
32125: LD_VAR 0 3
32129: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
32136: PPUSH
32137: PPUSH
32138: PPUSH
// result := array ;
32139: LD_ADDR_VAR 0 5
32143: PUSH
32144: LD_VAR 0 1
32148: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32149: LD_VAR 0 1
32153: NOT
32154: IFTRUE 32163
32156: PUSH
32157: LD_VAR 0 2
32161: NOT
32162: OR
32163: IFTRUE 32172
32165: PUSH
32166: LD_VAR 0 3
32170: NOT
32171: OR
32172: IFTRUE 32186
32174: PUSH
32175: LD_VAR 0 2
32179: PUSH
32180: LD_VAR 0 1
32184: GREATER
32185: OR
32186: IFTRUE 32200
32188: PUSH
32189: LD_VAR 0 3
32193: PUSH
32194: LD_VAR 0 1
32198: GREATER
32199: OR
32200: IFFALSE 32204
// exit ;
32202: GO 32500
// if direction then
32204: LD_VAR 0 4
32208: IFFALSE 32272
// begin d := 1 ;
32210: LD_ADDR_VAR 0 9
32214: PUSH
32215: LD_INT 1
32217: ST_TO_ADDR
// if i_from > i_to then
32218: LD_VAR 0 2
32222: PUSH
32223: LD_VAR 0 3
32227: GREATER
32228: IFFALSE 32254
// length := ( array - i_from ) + i_to else
32230: LD_ADDR_VAR 0 11
32234: PUSH
32235: LD_VAR 0 1
32239: PUSH
32240: LD_VAR 0 2
32244: MINUS
32245: PUSH
32246: LD_VAR 0 3
32250: PLUS
32251: ST_TO_ADDR
32252: GO 32270
// length := i_to - i_from ;
32254: LD_ADDR_VAR 0 11
32258: PUSH
32259: LD_VAR 0 3
32263: PUSH
32264: LD_VAR 0 2
32268: MINUS
32269: ST_TO_ADDR
// end else
32270: GO 32333
// begin d := - 1 ;
32272: LD_ADDR_VAR 0 9
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: ST_TO_ADDR
// if i_from > i_to then
32281: LD_VAR 0 2
32285: PUSH
32286: LD_VAR 0 3
32290: GREATER
32291: IFFALSE 32311
// length := i_from - i_to else
32293: LD_ADDR_VAR 0 11
32297: PUSH
32298: LD_VAR 0 2
32302: PUSH
32303: LD_VAR 0 3
32307: MINUS
32308: ST_TO_ADDR
32309: GO 32333
// length := ( array - i_to ) + i_from ;
32311: LD_ADDR_VAR 0 11
32315: PUSH
32316: LD_VAR 0 1
32320: PUSH
32321: LD_VAR 0 3
32325: MINUS
32326: PUSH
32327: LD_VAR 0 2
32331: PLUS
32332: ST_TO_ADDR
// end ; if not length then
32333: LD_VAR 0 11
32337: NOT
32338: IFFALSE 32342
// exit ;
32340: GO 32500
// tmp := array ;
32342: LD_ADDR_VAR 0 10
32346: PUSH
32347: LD_VAR 0 1
32351: ST_TO_ADDR
// for i = 1 to length do
32352: LD_ADDR_VAR 0 6
32356: PUSH
32357: DOUBLE
32358: LD_INT 1
32360: DEC
32361: ST_TO_ADDR
32362: LD_VAR 0 11
32366: PUSH
32367: FOR_TO
32368: IFFALSE 32488
// begin for j = 1 to array do
32370: LD_ADDR_VAR 0 7
32374: PUSH
32375: DOUBLE
32376: LD_INT 1
32378: DEC
32379: ST_TO_ADDR
32380: LD_VAR 0 1
32384: PUSH
32385: FOR_TO
32386: IFFALSE 32474
// begin k := j + d ;
32388: LD_ADDR_VAR 0 8
32392: PUSH
32393: LD_VAR 0 7
32397: PUSH
32398: LD_VAR 0 9
32402: PLUS
32403: ST_TO_ADDR
// if k > array then
32404: LD_VAR 0 8
32408: PUSH
32409: LD_VAR 0 1
32413: GREATER
32414: IFFALSE 32424
// k := 1 ;
32416: LD_ADDR_VAR 0 8
32420: PUSH
32421: LD_INT 1
32423: ST_TO_ADDR
// if not k then
32424: LD_VAR 0 8
32428: NOT
32429: IFFALSE 32441
// k := array ;
32431: LD_ADDR_VAR 0 8
32435: PUSH
32436: LD_VAR 0 1
32440: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32441: LD_ADDR_VAR 0 10
32445: PUSH
32446: LD_VAR 0 10
32450: PPUSH
32451: LD_VAR 0 8
32455: PPUSH
32456: LD_VAR 0 1
32460: PUSH
32461: LD_VAR 0 7
32465: ARRAY
32466: PPUSH
32467: CALL_OW 1
32471: ST_TO_ADDR
// end ;
32472: GO 32385
32474: POP
32475: POP
// array := tmp ;
32476: LD_ADDR_VAR 0 1
32480: PUSH
32481: LD_VAR 0 10
32485: ST_TO_ADDR
// end ;
32486: GO 32367
32488: POP
32489: POP
// result := array ;
32490: LD_ADDR_VAR 0 5
32494: PUSH
32495: LD_VAR 0 1
32499: ST_TO_ADDR
// end ;
32500: LD_VAR 0 5
32504: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32505: LD_INT 0
32507: PPUSH
32508: PPUSH
// result := 0 ;
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 0
32516: ST_TO_ADDR
// if not array or not value in array then
32517: LD_VAR 0 1
32521: NOT
32522: IFTRUE 32537
32524: PUSH
32525: LD_VAR 0 2
32529: PUSH
32530: LD_VAR 0 1
32534: IN
32535: NOT
32536: OR
32537: IFFALSE 32541
// exit ;
32539: GO 32595
// for i = 1 to array do
32541: LD_ADDR_VAR 0 4
32545: PUSH
32546: DOUBLE
32547: LD_INT 1
32549: DEC
32550: ST_TO_ADDR
32551: LD_VAR 0 1
32555: PUSH
32556: FOR_TO
32557: IFFALSE 32593
// if value = array [ i ] then
32559: LD_VAR 0 2
32563: PUSH
32564: LD_VAR 0 1
32568: PUSH
32569: LD_VAR 0 4
32573: ARRAY
32574: EQUAL
32575: IFFALSE 32591
// begin result := i ;
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_VAR 0 4
32586: ST_TO_ADDR
// exit ;
32587: POP
32588: POP
32589: GO 32595
// end ;
32591: GO 32556
32593: POP
32594: POP
// end ;
32595: LD_VAR 0 3
32599: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32600: LD_INT 0
32602: PPUSH
// vc_chassis := chassis ;
32603: LD_ADDR_OWVAR 37
32607: PUSH
32608: LD_VAR 0 1
32612: ST_TO_ADDR
// vc_engine := engine ;
32613: LD_ADDR_OWVAR 39
32617: PUSH
32618: LD_VAR 0 2
32622: ST_TO_ADDR
// vc_control := control ;
32623: LD_ADDR_OWVAR 38
32627: PUSH
32628: LD_VAR 0 3
32632: ST_TO_ADDR
// vc_weapon := weapon ;
32633: LD_ADDR_OWVAR 40
32637: PUSH
32638: LD_VAR 0 4
32642: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32643: LD_ADDR_OWVAR 41
32647: PUSH
32648: LD_VAR 0 5
32652: ST_TO_ADDR
// end ;
32653: LD_VAR 0 6
32657: RET
// export function WantPlant ( unit ) ; var task ; begin
32658: LD_INT 0
32660: PPUSH
32661: PPUSH
// result := false ;
32662: LD_ADDR_VAR 0 2
32666: PUSH
32667: LD_INT 0
32669: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 437
32684: ST_TO_ADDR
// if task then
32685: LD_VAR 0 3
32689: IFFALSE 32717
// if task [ 1 ] [ 1 ] = p then
32691: LD_VAR 0 3
32695: PUSH
32696: LD_INT 1
32698: ARRAY
32699: PUSH
32700: LD_INT 1
32702: ARRAY
32703: PUSH
32704: LD_STRING p
32706: EQUAL
32707: IFFALSE 32717
// result := true ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 1
32716: ST_TO_ADDR
// end ;
32717: LD_VAR 0 2
32721: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32722: LD_INT 0
32724: PPUSH
32725: PPUSH
32726: PPUSH
32727: PPUSH
// if pos < 1 then
32728: LD_VAR 0 2
32732: PUSH
32733: LD_INT 1
32735: LESS
32736: IFFALSE 32740
// exit ;
32738: GO 33043
// if pos = 1 then
32740: LD_VAR 0 2
32744: PUSH
32745: LD_INT 1
32747: EQUAL
32748: IFFALSE 32781
// result := Replace ( arr , pos [ 1 ] , value ) else
32750: LD_ADDR_VAR 0 4
32754: PUSH
32755: LD_VAR 0 1
32759: PPUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PPUSH
32769: LD_VAR 0 3
32773: PPUSH
32774: CALL_OW 1
32778: ST_TO_ADDR
32779: GO 33043
// begin tmp := arr ;
32781: LD_ADDR_VAR 0 6
32785: PUSH
32786: LD_VAR 0 1
32790: ST_TO_ADDR
// s_arr := [ tmp ] ;
32791: LD_ADDR_VAR 0 7
32795: PUSH
32796: LD_VAR 0 6
32800: PUSH
32801: EMPTY
32802: LIST
32803: ST_TO_ADDR
// for i = 1 to pos - 1 do
32804: LD_ADDR_VAR 0 5
32808: PUSH
32809: DOUBLE
32810: LD_INT 1
32812: DEC
32813: ST_TO_ADDR
32814: LD_VAR 0 2
32818: PUSH
32819: LD_INT 1
32821: MINUS
32822: PUSH
32823: FOR_TO
32824: IFFALSE 32869
// begin tmp := tmp [ pos [ i ] ] ;
32826: LD_ADDR_VAR 0 6
32830: PUSH
32831: LD_VAR 0 6
32835: PUSH
32836: LD_VAR 0 2
32840: PUSH
32841: LD_VAR 0 5
32845: ARRAY
32846: ARRAY
32847: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32848: LD_ADDR_VAR 0 7
32852: PUSH
32853: LD_VAR 0 7
32857: PUSH
32858: LD_VAR 0 6
32862: PUSH
32863: EMPTY
32864: LIST
32865: ADD
32866: ST_TO_ADDR
// end ;
32867: GO 32823
32869: POP
32870: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32871: LD_ADDR_VAR 0 6
32875: PUSH
32876: LD_VAR 0 6
32880: PPUSH
32881: LD_VAR 0 2
32885: PUSH
32886: LD_VAR 0 2
32890: ARRAY
32891: PPUSH
32892: LD_VAR 0 3
32896: PPUSH
32897: CALL_OW 1
32901: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32902: LD_ADDR_VAR 0 7
32906: PUSH
32907: LD_VAR 0 7
32911: PPUSH
32912: LD_VAR 0 7
32916: PPUSH
32917: LD_VAR 0 6
32921: PPUSH
32922: CALL_OW 1
32926: ST_TO_ADDR
// for i = s_arr downto 2 do
32927: LD_ADDR_VAR 0 5
32931: PUSH
32932: DOUBLE
32933: LD_VAR 0 7
32937: INC
32938: ST_TO_ADDR
32939: LD_INT 2
32941: PUSH
32942: FOR_DOWNTO
32943: IFFALSE 33027
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32945: LD_ADDR_VAR 0 6
32949: PUSH
32950: LD_VAR 0 7
32954: PUSH
32955: LD_VAR 0 5
32959: PUSH
32960: LD_INT 1
32962: MINUS
32963: ARRAY
32964: PPUSH
32965: LD_VAR 0 2
32969: PUSH
32970: LD_VAR 0 5
32974: PUSH
32975: LD_INT 1
32977: MINUS
32978: ARRAY
32979: PPUSH
32980: LD_VAR 0 7
32984: PUSH
32985: LD_VAR 0 5
32989: ARRAY
32990: PPUSH
32991: CALL_OW 1
32995: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32996: LD_ADDR_VAR 0 7
33000: PUSH
33001: LD_VAR 0 7
33005: PPUSH
33006: LD_VAR 0 5
33010: PUSH
33011: LD_INT 1
33013: MINUS
33014: PPUSH
33015: LD_VAR 0 6
33019: PPUSH
33020: CALL_OW 1
33024: ST_TO_ADDR
// end ;
33025: GO 32942
33027: POP
33028: POP
// result := s_arr [ 1 ] ;
33029: LD_ADDR_VAR 0 4
33033: PUSH
33034: LD_VAR 0 7
33038: PUSH
33039: LD_INT 1
33041: ARRAY
33042: ST_TO_ADDR
// end ; end ;
33043: LD_VAR 0 4
33047: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
// if not list then
33052: LD_VAR 0 1
33056: NOT
33057: IFFALSE 33061
// exit ;
33059: GO 33152
// i := list [ pos1 ] ;
33061: LD_ADDR_VAR 0 5
33065: PUSH
33066: LD_VAR 0 1
33070: PUSH
33071: LD_VAR 0 2
33075: ARRAY
33076: ST_TO_ADDR
// if not i then
33077: LD_VAR 0 5
33081: NOT
33082: IFFALSE 33086
// exit ;
33084: GO 33152
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33086: LD_ADDR_VAR 0 1
33090: PUSH
33091: LD_VAR 0 1
33095: PPUSH
33096: LD_VAR 0 2
33100: PPUSH
33101: LD_VAR 0 1
33105: PUSH
33106: LD_VAR 0 3
33110: ARRAY
33111: PPUSH
33112: CALL_OW 1
33116: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33117: LD_ADDR_VAR 0 1
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: LD_VAR 0 3
33131: PPUSH
33132: LD_VAR 0 5
33136: PPUSH
33137: CALL_OW 1
33141: ST_TO_ADDR
// result := list ;
33142: LD_ADDR_VAR 0 4
33146: PUSH
33147: LD_VAR 0 1
33151: ST_TO_ADDR
// end ;
33152: LD_VAR 0 4
33156: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33157: LD_INT 0
33159: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33160: LD_ADDR_VAR 0 5
33164: PUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: CALL_OW 250
33174: PPUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: CALL_OW 251
33184: PPUSH
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 3
33194: PPUSH
33195: LD_VAR 0 4
33199: PPUSH
33200: CALL 33582 0 5
33204: ST_TO_ADDR
// end ;
33205: LD_VAR 0 5
33209: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
33215: PPUSH
// if not list or not unit then
33216: LD_VAR 0 2
33220: NOT
33221: IFTRUE 33230
33223: PUSH
33224: LD_VAR 0 1
33228: NOT
33229: OR
33230: IFFALSE 33234
// exit ;
33232: GO 33577
// result := [ ] ;
33234: LD_ADDR_VAR 0 5
33238: PUSH
33239: EMPTY
33240: ST_TO_ADDR
// for i in list do
33241: LD_ADDR_VAR 0 6
33245: PUSH
33246: LD_VAR 0 2
33250: PUSH
33251: FOR_IN
33252: IFFALSE 33470
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33254: LD_ADDR_VAR 0 8
33258: PUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: LD_VAR 0 6
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 6
33277: PUSH
33278: LD_INT 2
33280: ARRAY
33281: PPUSH
33282: CALL_OW 297
33286: ST_TO_ADDR
// if not Count ( result ) then
33287: LD_VAR 0 5
33291: PPUSH
33292: CALL 29838 0 1
33296: NOT
33297: IFFALSE 33330
// begin result := Join ( result , [ i , tmp ] ) ;
33299: LD_ADDR_VAR 0 5
33303: PUSH
33304: LD_VAR 0 5
33308: PPUSH
33309: LD_VAR 0 6
33313: PUSH
33314: LD_VAR 0 8
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL 65770 0 2
33327: ST_TO_ADDR
// continue ;
33328: GO 33251
// end ; if result [ result ] [ 2 ] <= tmp then
33330: LD_VAR 0 5
33334: PUSH
33335: LD_VAR 0 5
33339: ARRAY
33340: PUSH
33341: LD_INT 2
33343: ARRAY
33344: PUSH
33345: LD_VAR 0 8
33349: LESSEQUAL
33350: IFFALSE 33383
// result := Join ( result , [ i , tmp ] ) else
33352: LD_ADDR_VAR 0 5
33356: PUSH
33357: LD_VAR 0 5
33361: PPUSH
33362: LD_VAR 0 6
33366: PUSH
33367: LD_VAR 0 8
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL 65770 0 2
33380: ST_TO_ADDR
33381: GO 33468
// begin for j := 1 to Count ( result ) do
33383: LD_ADDR_VAR 0 7
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_VAR 0 5
33397: PPUSH
33398: CALL 29838 0 1
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33466
// begin if tmp < result [ j ] [ 2 ] then
33406: LD_VAR 0 8
33410: PUSH
33411: LD_VAR 0 5
33415: PUSH
33416: LD_VAR 0 7
33420: ARRAY
33421: PUSH
33422: LD_INT 2
33424: ARRAY
33425: LESS
33426: IFFALSE 33464
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33428: LD_ADDR_VAR 0 5
33432: PUSH
33433: LD_VAR 0 5
33437: PPUSH
33438: LD_VAR 0 7
33442: PPUSH
33443: LD_VAR 0 6
33447: PUSH
33448: LD_VAR 0 8
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 2
33461: ST_TO_ADDR
// break ;
33462: GO 33466
// end ; end ;
33464: GO 33403
33466: POP
33467: POP
// end ; end ;
33468: GO 33251
33470: POP
33471: POP
// if result and not asc then
33472: LD_VAR 0 5
33476: IFFALSE 33485
33478: PUSH
33479: LD_VAR 0 3
33483: NOT
33484: AND
33485: IFFALSE 33502
// result := ReverseArray ( result ) ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 5
33496: PPUSH
33497: CALL 60860 0 1
33501: ST_TO_ADDR
// tmp := [ ] ;
33502: LD_ADDR_VAR 0 8
33506: PUSH
33507: EMPTY
33508: ST_TO_ADDR
// if mode then
33509: LD_VAR 0 4
33513: IFFALSE 33577
// begin for i := 1 to result do
33515: LD_ADDR_VAR 0 6
33519: PUSH
33520: DOUBLE
33521: LD_INT 1
33523: DEC
33524: ST_TO_ADDR
33525: LD_VAR 0 5
33529: PUSH
33530: FOR_TO
33531: IFFALSE 33565
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33533: LD_ADDR_VAR 0 8
33537: PUSH
33538: LD_VAR 0 8
33542: PPUSH
33543: LD_VAR 0 5
33547: PUSH
33548: LD_VAR 0 6
33552: ARRAY
33553: PUSH
33554: LD_INT 1
33556: ARRAY
33557: PPUSH
33558: CALL 65770 0 2
33562: ST_TO_ADDR
33563: GO 33530
33565: POP
33566: POP
// result := tmp ;
33567: LD_ADDR_VAR 0 5
33571: PUSH
33572: LD_VAR 0 8
33576: ST_TO_ADDR
// end ; end ;
33577: LD_VAR 0 5
33581: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33582: LD_INT 0
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
// if not list then
33588: LD_VAR 0 3
33592: NOT
33593: IFFALSE 33597
// exit ;
33595: GO 33987
// result := [ ] ;
33597: LD_ADDR_VAR 0 6
33601: PUSH
33602: EMPTY
33603: ST_TO_ADDR
// for i in list do
33604: LD_ADDR_VAR 0 7
33608: PUSH
33609: LD_VAR 0 3
33613: PUSH
33614: FOR_IN
33615: IFFALSE 33817
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33617: LD_ADDR_VAR 0 9
33621: PUSH
33622: LD_VAR 0 7
33626: PPUSH
33627: LD_VAR 0 1
33631: PPUSH
33632: LD_VAR 0 2
33636: PPUSH
33637: CALL_OW 297
33641: ST_TO_ADDR
// if not result then
33642: LD_VAR 0 6
33646: NOT
33647: IFFALSE 33673
// result := [ [ i , tmp ] ] else
33649: LD_ADDR_VAR 0 6
33653: PUSH
33654: LD_VAR 0 7
33658: PUSH
33659: LD_VAR 0 9
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: EMPTY
33669: LIST
33670: ST_TO_ADDR
33671: GO 33815
// begin if result [ result ] [ 2 ] <= tmp then
33673: LD_VAR 0 6
33677: PUSH
33678: LD_VAR 0 6
33682: ARRAY
33683: PUSH
33684: LD_INT 2
33686: ARRAY
33687: PUSH
33688: LD_VAR 0 9
33692: LESSEQUAL
33693: IFFALSE 33735
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33695: LD_ADDR_VAR 0 6
33699: PUSH
33700: LD_VAR 0 6
33704: PPUSH
33705: LD_VAR 0 6
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: PPUSH
33714: LD_VAR 0 7
33718: PUSH
33719: LD_VAR 0 9
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PPUSH
33728: CALL_OW 2
33732: ST_TO_ADDR
33733: GO 33815
// for j := 1 to result do
33735: LD_ADDR_VAR 0 8
33739: PUSH
33740: DOUBLE
33741: LD_INT 1
33743: DEC
33744: ST_TO_ADDR
33745: LD_VAR 0 6
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33813
// begin if tmp < result [ j ] [ 2 ] then
33753: LD_VAR 0 9
33757: PUSH
33758: LD_VAR 0 6
33762: PUSH
33763: LD_VAR 0 8
33767: ARRAY
33768: PUSH
33769: LD_INT 2
33771: ARRAY
33772: LESS
33773: IFFALSE 33811
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33775: LD_ADDR_VAR 0 6
33779: PUSH
33780: LD_VAR 0 6
33784: PPUSH
33785: LD_VAR 0 8
33789: PPUSH
33790: LD_VAR 0 7
33794: PUSH
33795: LD_VAR 0 9
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PPUSH
33804: CALL_OW 2
33808: ST_TO_ADDR
// break ;
33809: GO 33813
// end ; end ;
33811: GO 33750
33813: POP
33814: POP
// end ; end ;
33815: GO 33614
33817: POP
33818: POP
// if result and not asc then
33819: LD_VAR 0 6
33823: IFFALSE 33832
33825: PUSH
33826: LD_VAR 0 4
33830: NOT
33831: AND
33832: IFFALSE 33907
// begin tmp := result ;
33834: LD_ADDR_VAR 0 9
33838: PUSH
33839: LD_VAR 0 6
33843: ST_TO_ADDR
// for i = tmp downto 1 do
33844: LD_ADDR_VAR 0 7
33848: PUSH
33849: DOUBLE
33850: LD_VAR 0 9
33854: INC
33855: ST_TO_ADDR
33856: LD_INT 1
33858: PUSH
33859: FOR_DOWNTO
33860: IFFALSE 33905
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33862: LD_ADDR_VAR 0 6
33866: PUSH
33867: LD_VAR 0 6
33871: PPUSH
33872: LD_VAR 0 9
33876: PUSH
33877: LD_VAR 0 7
33881: MINUS
33882: PUSH
33883: LD_INT 1
33885: PLUS
33886: PPUSH
33887: LD_VAR 0 9
33891: PUSH
33892: LD_VAR 0 7
33896: ARRAY
33897: PPUSH
33898: CALL_OW 1
33902: ST_TO_ADDR
33903: GO 33859
33905: POP
33906: POP
// end ; tmp := [ ] ;
33907: LD_ADDR_VAR 0 9
33911: PUSH
33912: EMPTY
33913: ST_TO_ADDR
// if mode then
33914: LD_VAR 0 5
33918: IFFALSE 33987
// begin for i = 1 to result do
33920: LD_ADDR_VAR 0 7
33924: PUSH
33925: DOUBLE
33926: LD_INT 1
33928: DEC
33929: ST_TO_ADDR
33930: LD_VAR 0 6
33934: PUSH
33935: FOR_TO
33936: IFFALSE 33975
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33938: LD_ADDR_VAR 0 9
33942: PUSH
33943: LD_VAR 0 9
33947: PPUSH
33948: LD_VAR 0 7
33952: PPUSH
33953: LD_VAR 0 6
33957: PUSH
33958: LD_VAR 0 7
33962: ARRAY
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
33973: GO 33935
33975: POP
33976: POP
// result := tmp ;
33977: LD_ADDR_VAR 0 6
33981: PUSH
33982: LD_VAR 0 9
33986: ST_TO_ADDR
// end ; end ;
33987: LD_VAR 0 6
33991: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33992: LD_INT 0
33994: PPUSH
33995: PPUSH
33996: PPUSH
33997: PPUSH
33998: PPUSH
33999: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
// if not x or not y then
34022: LD_VAR 0 2
34026: NOT
34027: IFTRUE 34036
34029: PUSH
34030: LD_VAR 0 3
34034: NOT
34035: OR
34036: IFFALSE 34040
// exit ;
34038: GO 35696
// if not range then
34040: LD_VAR 0 4
34044: NOT
34045: IFFALSE 34055
// range := 10 ;
34047: LD_ADDR_VAR 0 4
34051: PUSH
34052: LD_INT 10
34054: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34055: LD_ADDR_VAR 0 8
34059: PUSH
34060: LD_INT 81
34062: PUSH
34063: LD_VAR 0 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 92
34074: PUSH
34075: LD_VAR 0 2
34079: PUSH
34080: LD_VAR 0 3
34084: PUSH
34085: LD_VAR 0 4
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 21
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: PPUSH
34118: CALL_OW 69
34122: ST_TO_ADDR
// if not tmp then
34123: LD_VAR 0 8
34127: NOT
34128: IFFALSE 34132
// exit ;
34130: GO 35696
// for i in tmp do
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: LD_VAR 0 8
34141: PUSH
34142: FOR_IN
34143: IFFALSE 35671
// begin points := [ 0 , 0 , 0 ] ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
// bpoints := 1 ;
34164: LD_ADDR_VAR 0 10
34168: PUSH
34169: LD_INT 1
34171: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34172: LD_VAR 0 6
34176: PPUSH
34177: CALL_OW 247
34181: PUSH
34182: LD_INT 1
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34772
34190: POP
// begin if GetClass ( i ) = 1 then
34191: LD_VAR 0 6
34195: PPUSH
34196: CALL_OW 257
34200: PUSH
34201: LD_INT 1
34203: EQUAL
34204: IFFALSE 34225
// points := [ 10 , 5 , 3 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 10
34213: PUSH
34214: LD_INT 5
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 257
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: LD_INT 4
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: IN
34249: IFFALSE 34270
// points := [ 3 , 2 , 1 ] ;
34251: LD_ADDR_VAR 0 9
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34270: LD_VAR 0 6
34274: PPUSH
34275: CALL_OW 257
34279: PUSH
34280: LD_INT 5
34282: EQUAL
34283: IFFALSE 34304
// points := [ 130 , 5 , 2 ] ;
34285: LD_ADDR_VAR 0 9
34289: PUSH
34290: LD_INT 130
34292: PUSH
34293: LD_INT 5
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34304: LD_VAR 0 6
34308: PPUSH
34309: CALL_OW 257
34313: PUSH
34314: LD_INT 8
34316: EQUAL
34317: IFFALSE 34338
// points := [ 35 , 35 , 30 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 35
34326: PUSH
34327: LD_INT 35
34329: PUSH
34330: LD_INT 30
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 257
34347: PUSH
34348: LD_INT 9
34350: EQUAL
34351: IFFALSE 34372
// points := [ 20 , 55 , 40 ] ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_INT 20
34360: PUSH
34361: LD_INT 55
34363: PUSH
34364: LD_INT 40
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 257
34381: PUSH
34382: LD_INT 12
34384: PUSH
34385: LD_INT 16
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: IN
34392: IFFALSE 34413
// points := [ 5 , 3 , 2 ] ;
34394: LD_ADDR_VAR 0 9
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34413: LD_VAR 0 6
34417: PPUSH
34418: CALL_OW 257
34422: PUSH
34423: LD_INT 17
34425: EQUAL
34426: IFFALSE 34447
// points := [ 100 , 50 , 75 ] ;
34428: LD_ADDR_VAR 0 9
34432: PUSH
34433: LD_INT 100
34435: PUSH
34436: LD_INT 50
34438: PUSH
34439: LD_INT 75
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34447: LD_VAR 0 6
34451: PPUSH
34452: CALL_OW 257
34456: PUSH
34457: LD_INT 15
34459: EQUAL
34460: IFFALSE 34481
// points := [ 10 , 5 , 3 ] ;
34462: LD_ADDR_VAR 0 9
34466: PUSH
34467: LD_INT 10
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34481: LD_VAR 0 6
34485: PPUSH
34486: CALL_OW 257
34490: PUSH
34491: LD_INT 14
34493: EQUAL
34494: IFFALSE 34515
// points := [ 10 , 0 , 0 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 10
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 257
34524: PUSH
34525: LD_INT 11
34527: EQUAL
34528: IFFALSE 34549
// points := [ 30 , 10 , 5 ] ;
34530: LD_ADDR_VAR 0 9
34534: PUSH
34535: LD_INT 30
34537: PUSH
34538: LD_INT 10
34540: PUSH
34541: LD_INT 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34549: LD_VAR 0 1
34553: PPUSH
34554: LD_INT 5
34556: PPUSH
34557: CALL_OW 321
34561: PUSH
34562: LD_INT 2
34564: EQUAL
34565: IFFALSE 34582
// bpoints := bpoints * 1.8 ;
34567: LD_ADDR_VAR 0 10
34571: PUSH
34572: LD_VAR 0 10
34576: PUSH
34577: LD_REAL  1.80000000000000E+0000
34580: MUL
34581: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34582: LD_VAR 0 6
34586: PPUSH
34587: CALL_OW 257
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: IN
34610: IFFALSE 34630
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: LD_INT 51
34620: PPUSH
34621: CALL_OW 321
34625: PUSH
34626: LD_INT 2
34628: EQUAL
34629: AND
34630: IFFALSE 34647
// bpoints := bpoints * 1.2 ;
34632: LD_ADDR_VAR 0 10
34636: PUSH
34637: LD_VAR 0 10
34641: PUSH
34642: LD_REAL  1.20000000000000E+0000
34645: MUL
34646: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34647: LD_VAR 0 6
34651: PPUSH
34652: CALL_OW 257
34656: PUSH
34657: LD_INT 5
34659: PUSH
34660: LD_INT 7
34662: PUSH
34663: LD_INT 9
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: IN
34671: IFFALSE 34691
34673: PUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: LD_INT 52
34681: PPUSH
34682: CALL_OW 321
34686: PUSH
34687: LD_INT 2
34689: EQUAL
34690: AND
34691: IFFALSE 34708
// bpoints := bpoints * 1.5 ;
34693: LD_ADDR_VAR 0 10
34697: PUSH
34698: LD_VAR 0 10
34702: PUSH
34703: LD_REAL  1.50000000000000E+0000
34706: MUL
34707: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34708: LD_VAR 0 1
34712: PPUSH
34713: LD_INT 66
34715: PPUSH
34716: CALL_OW 321
34720: PUSH
34721: LD_INT 2
34723: EQUAL
34724: IFFALSE 34741
// bpoints := bpoints * 1.1 ;
34726: LD_ADDR_VAR 0 10
34730: PUSH
34731: LD_VAR 0 10
34735: PUSH
34736: LD_REAL  1.10000000000000E+0000
34739: MUL
34740: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34741: LD_ADDR_VAR 0 10
34745: PUSH
34746: LD_VAR 0 10
34750: PUSH
34751: LD_VAR 0 6
34755: PPUSH
34756: LD_INT 1
34758: PPUSH
34759: CALL_OW 259
34763: PUSH
34764: LD_REAL  1.15000000000000E+0000
34767: MUL
34768: MUL
34769: ST_TO_ADDR
// end ; unit_vehicle :
34770: GO 35600
34772: LD_INT 2
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 35588
34780: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34781: LD_VAR 0 6
34785: PPUSH
34786: CALL_OW 264
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: LD_INT 42
34796: PUSH
34797: LD_INT 24
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: IN
34805: IFFALSE 34826
// points := [ 25 , 5 , 3 ] ;
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_INT 25
34814: PUSH
34815: LD_INT 5
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34826: LD_VAR 0 6
34830: PPUSH
34831: CALL_OW 264
34835: PUSH
34836: LD_INT 4
34838: PUSH
34839: LD_INT 43
34841: PUSH
34842: LD_INT 25
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: IN
34850: IFFALSE 34871
// points := [ 40 , 15 , 5 ] ;
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_INT 40
34859: PUSH
34860: LD_INT 15
34862: PUSH
34863: LD_INT 5
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34871: LD_VAR 0 6
34875: PPUSH
34876: CALL_OW 264
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: LD_INT 23
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: IN
34891: IFFALSE 34912
// points := [ 7 , 25 , 8 ] ;
34893: LD_ADDR_VAR 0 9
34897: PUSH
34898: LD_INT 7
34900: PUSH
34901: LD_INT 25
34903: PUSH
34904: LD_INT 8
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34912: LD_VAR 0 6
34916: PPUSH
34917: CALL_OW 264
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: LD_INT 27
34927: PUSH
34928: LD_INT 44
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: IN
34936: IFFALSE 34957
// points := [ 14 , 50 , 16 ] ;
34938: LD_ADDR_VAR 0 9
34942: PUSH
34943: LD_INT 14
34945: PUSH
34946: LD_INT 50
34948: PUSH
34949: LD_INT 16
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34957: LD_VAR 0 6
34961: PPUSH
34962: CALL_OW 264
34966: PUSH
34967: LD_INT 6
34969: PUSH
34970: LD_INT 46
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: IN
34977: IFFALSE 34998
// points := [ 32 , 120 , 70 ] ;
34979: LD_ADDR_VAR 0 9
34983: PUSH
34984: LD_INT 32
34986: PUSH
34987: LD_INT 120
34989: PUSH
34990: LD_INT 70
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34998: LD_VAR 0 6
35002: PPUSH
35003: CALL_OW 264
35007: PUSH
35008: LD_INT 7
35010: PUSH
35011: LD_INT 28
35013: PUSH
35014: LD_INT 45
35016: PUSH
35017: LD_INT 92
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: IN
35026: IFFALSE 35047
// points := [ 35 , 20 , 45 ] ;
35028: LD_ADDR_VAR 0 9
35032: PUSH
35033: LD_INT 35
35035: PUSH
35036: LD_INT 20
35038: PUSH
35039: LD_INT 45
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35047: LD_VAR 0 6
35051: PPUSH
35052: CALL_OW 264
35056: PUSH
35057: LD_INT 47
35059: PUSH
35060: EMPTY
35061: LIST
35062: IN
35063: IFFALSE 35084
// points := [ 67 , 45 , 75 ] ;
35065: LD_ADDR_VAR 0 9
35069: PUSH
35070: LD_INT 67
35072: PUSH
35073: LD_INT 45
35075: PUSH
35076: LD_INT 75
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35084: LD_VAR 0 6
35088: PPUSH
35089: CALL_OW 264
35093: PUSH
35094: LD_INT 26
35096: PUSH
35097: EMPTY
35098: LIST
35099: IN
35100: IFFALSE 35121
// points := [ 120 , 30 , 80 ] ;
35102: LD_ADDR_VAR 0 9
35106: PUSH
35107: LD_INT 120
35109: PUSH
35110: LD_INT 30
35112: PUSH
35113: LD_INT 80
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35121: LD_VAR 0 6
35125: PPUSH
35126: CALL_OW 264
35130: PUSH
35131: LD_INT 22
35133: PUSH
35134: EMPTY
35135: LIST
35136: IN
35137: IFFALSE 35158
// points := [ 40 , 1 , 1 ] ;
35139: LD_ADDR_VAR 0 9
35143: PUSH
35144: LD_INT 40
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35158: LD_VAR 0 6
35162: PPUSH
35163: CALL_OW 264
35167: PUSH
35168: LD_INT 29
35170: PUSH
35171: EMPTY
35172: LIST
35173: IN
35174: IFFALSE 35195
// points := [ 70 , 200 , 400 ] ;
35176: LD_ADDR_VAR 0 9
35180: PUSH
35181: LD_INT 70
35183: PUSH
35184: LD_INT 200
35186: PUSH
35187: LD_INT 400
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35195: LD_VAR 0 6
35199: PPUSH
35200: CALL_OW 264
35204: PUSH
35205: LD_INT 14
35207: PUSH
35208: LD_INT 53
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: IN
35215: IFFALSE 35236
// points := [ 40 , 10 , 20 ] ;
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_INT 40
35224: PUSH
35225: LD_INT 10
35227: PUSH
35228: LD_INT 20
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: LIST
35235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35236: LD_VAR 0 6
35240: PPUSH
35241: CALL_OW 264
35245: PUSH
35246: LD_INT 9
35248: PUSH
35249: EMPTY
35250: LIST
35251: IN
35252: IFFALSE 35273
// points := [ 5 , 70 , 20 ] ;
35254: LD_ADDR_VAR 0 9
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: LD_INT 70
35264: PUSH
35265: LD_INT 20
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35273: LD_VAR 0 6
35277: PPUSH
35278: CALL_OW 264
35282: PUSH
35283: LD_INT 10
35285: PUSH
35286: EMPTY
35287: LIST
35288: IN
35289: IFFALSE 35310
// points := [ 35 , 110 , 70 ] ;
35291: LD_ADDR_VAR 0 9
35295: PUSH
35296: LD_INT 35
35298: PUSH
35299: LD_INT 110
35301: PUSH
35302: LD_INT 70
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35310: LD_VAR 0 6
35314: PPUSH
35315: CALL_OW 265
35319: PUSH
35320: LD_INT 25
35322: EQUAL
35323: IFFALSE 35344
// points := [ 80 , 65 , 100 ] ;
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_INT 80
35332: PUSH
35333: LD_INT 65
35335: PUSH
35336: LD_INT 100
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35344: LD_VAR 0 6
35348: PPUSH
35349: CALL_OW 263
35353: PUSH
35354: LD_INT 1
35356: EQUAL
35357: IFFALSE 35392
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35359: LD_ADDR_VAR 0 10
35363: PUSH
35364: LD_VAR 0 10
35368: PUSH
35369: LD_VAR 0 6
35373: PPUSH
35374: CALL_OW 311
35378: PPUSH
35379: LD_INT 3
35381: PPUSH
35382: CALL_OW 259
35386: PUSH
35387: LD_INT 4
35389: MUL
35390: MUL
35391: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35392: LD_VAR 0 6
35396: PPUSH
35397: CALL_OW 263
35401: PUSH
35402: LD_INT 2
35404: EQUAL
35405: IFFALSE 35456
// begin j := IsControledBy ( i ) ;
35407: LD_ADDR_VAR 0 7
35411: PUSH
35412: LD_VAR 0 6
35416: PPUSH
35417: CALL_OW 312
35421: ST_TO_ADDR
// if j then
35422: LD_VAR 0 7
35426: IFFALSE 35456
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35428: LD_ADDR_VAR 0 10
35432: PUSH
35433: LD_VAR 0 10
35437: PUSH
35438: LD_VAR 0 7
35442: PPUSH
35443: LD_INT 3
35445: PPUSH
35446: CALL_OW 259
35450: PUSH
35451: LD_INT 3
35453: MUL
35454: MUL
35455: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35456: LD_VAR 0 6
35460: PPUSH
35461: CALL_OW 264
35465: PUSH
35466: LD_INT 5
35468: PUSH
35469: LD_INT 6
35471: PUSH
35472: LD_INT 46
35474: PUSH
35475: LD_INT 44
35477: PUSH
35478: LD_INT 47
35480: PUSH
35481: LD_INT 45
35483: PUSH
35484: LD_INT 28
35486: PUSH
35487: LD_INT 7
35489: PUSH
35490: LD_INT 27
35492: PUSH
35493: LD_INT 29
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: IN
35508: IFFALSE 35528
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: LD_INT 52
35518: PPUSH
35519: CALL_OW 321
35523: PUSH
35524: LD_INT 2
35526: EQUAL
35527: AND
35528: IFFALSE 35545
// bpoints := bpoints * 1.2 ;
35530: LD_ADDR_VAR 0 10
35534: PUSH
35535: LD_VAR 0 10
35539: PUSH
35540: LD_REAL  1.20000000000000E+0000
35543: MUL
35544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35545: LD_VAR 0 6
35549: PPUSH
35550: CALL_OW 264
35554: PUSH
35555: LD_INT 6
35557: PUSH
35558: LD_INT 46
35560: PUSH
35561: LD_INT 47
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: IN
35569: IFFALSE 35586
// bpoints := bpoints * 1.2 ;
35571: LD_ADDR_VAR 0 10
35575: PUSH
35576: LD_VAR 0 10
35580: PUSH
35581: LD_REAL  1.20000000000000E+0000
35584: MUL
35585: ST_TO_ADDR
// end ; unit_building :
35586: GO 35600
35588: LD_INT 3
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35596
35594: GO 35599
35596: POP
// ; end ;
35597: GO 35600
35599: POP
// for j = 1 to 3 do
35600: LD_ADDR_VAR 0 7
35604: PUSH
35605: DOUBLE
35606: LD_INT 1
35608: DEC
35609: ST_TO_ADDR
35610: LD_INT 3
35612: PUSH
35613: FOR_TO
35614: IFFALSE 35667
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35616: LD_ADDR_VAR 0 5
35620: PUSH
35621: LD_VAR 0 5
35625: PPUSH
35626: LD_VAR 0 7
35630: PPUSH
35631: LD_VAR 0 5
35635: PUSH
35636: LD_VAR 0 7
35640: ARRAY
35641: PUSH
35642: LD_VAR 0 9
35646: PUSH
35647: LD_VAR 0 7
35651: ARRAY
35652: PUSH
35653: LD_VAR 0 10
35657: MUL
35658: PLUS
35659: PPUSH
35660: CALL_OW 1
35664: ST_TO_ADDR
35665: GO 35613
35667: POP
35668: POP
// end ;
35669: GO 34142
35671: POP
35672: POP
// result := Replace ( result , 4 , tmp ) ;
35673: LD_ADDR_VAR 0 5
35677: PUSH
35678: LD_VAR 0 5
35682: PPUSH
35683: LD_INT 4
35685: PPUSH
35686: LD_VAR 0 8
35690: PPUSH
35691: CALL_OW 1
35695: ST_TO_ADDR
// end ;
35696: LD_VAR 0 5
35700: RET
// export function DangerAtRange ( unit , range ) ; begin
35701: LD_INT 0
35703: PPUSH
// if not unit then
35704: LD_VAR 0 1
35708: NOT
35709: IFFALSE 35713
// exit ;
35711: GO 35758
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_VAR 0 1
35722: PPUSH
35723: CALL_OW 255
35727: PPUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: CALL_OW 250
35737: PPUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 251
35747: PPUSH
35748: LD_VAR 0 2
35752: PPUSH
35753: CALL 33992 0 4
35757: ST_TO_ADDR
// end ;
35758: LD_VAR 0 3
35762: RET
// export function DangerInArea ( side , area ) ; begin
35763: LD_INT 0
35765: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_VAR 0 2
35775: PPUSH
35776: LD_INT 81
35778: PUSH
35779: LD_VAR 0 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 70
35792: ST_TO_ADDR
// end ;
35793: LD_VAR 0 3
35797: RET
// export function IsExtension ( b ) ; begin
35798: LD_INT 0
35800: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35801: LD_ADDR_VAR 0 2
35805: PUSH
35806: LD_VAR 0 1
35810: PUSH
35811: LD_INT 23
35813: PUSH
35814: LD_INT 20
35816: PUSH
35817: LD_INT 22
35819: PUSH
35820: LD_INT 17
35822: PUSH
35823: LD_INT 24
35825: PUSH
35826: LD_INT 21
35828: PUSH
35829: LD_INT 19
35831: PUSH
35832: LD_INT 16
35834: PUSH
35835: LD_INT 25
35837: PUSH
35838: LD_INT 18
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: IN
35853: ST_TO_ADDR
// end ;
35854: LD_VAR 0 2
35858: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35859: LD_INT 0
35861: PPUSH
35862: PPUSH
35863: PPUSH
// result := [ ] ;
35864: LD_ADDR_VAR 0 4
35868: PUSH
35869: EMPTY
35870: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 2
35880: PPUSH
35881: LD_INT 21
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PPUSH
35891: CALL_OW 70
35895: ST_TO_ADDR
// if not tmp then
35896: LD_VAR 0 5
35900: NOT
35901: IFFALSE 35905
// exit ;
35903: GO 35969
// if checkLink then
35905: LD_VAR 0 3
35909: IFFALSE 35959
// begin for i in tmp do
35911: LD_ADDR_VAR 0 6
35915: PUSH
35916: LD_VAR 0 5
35920: PUSH
35921: FOR_IN
35922: IFFALSE 35957
// if GetBase ( i ) <> base then
35924: LD_VAR 0 6
35928: PPUSH
35929: CALL_OW 274
35933: PUSH
35934: LD_VAR 0 1
35938: NONEQUAL
35939: IFFALSE 35955
// ComLinkToBase ( base , i ) ;
35941: LD_VAR 0 1
35945: PPUSH
35946: LD_VAR 0 6
35950: PPUSH
35951: CALL_OW 169
35955: GO 35921
35957: POP
35958: POP
// end ; result := tmp ;
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: LD_VAR 0 5
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 4
35973: RET
// export function ComComplete ( units , b ) ; var i ; begin
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
// if not units then
35978: LD_VAR 0 1
35982: NOT
35983: IFFALSE 35987
// exit ;
35985: GO 36077
// for i in units do
35987: LD_ADDR_VAR 0 4
35991: PUSH
35992: LD_VAR 0 1
35996: PUSH
35997: FOR_IN
35998: IFFALSE 36075
// if BuildingStatus ( b ) = bs_build then
36000: LD_VAR 0 2
36004: PPUSH
36005: CALL_OW 461
36009: PUSH
36010: LD_INT 1
36012: EQUAL
36013: IFFALSE 36073
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36015: LD_VAR 0 4
36019: PPUSH
36020: LD_STRING h
36022: PUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: CALL_OW 250
36032: PUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: CALL_OW 251
36042: PUSH
36043: LD_VAR 0 2
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: PUSH
36066: EMPTY
36067: LIST
36068: PPUSH
36069: CALL_OW 446
36073: GO 35997
36075: POP
36076: POP
// end ;
36077: LD_VAR 0 3
36081: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36082: LD_INT 0
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36090: LD_VAR 0 1
36094: NOT
36095: IFTRUE 36112
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: CALL_OW 263
36107: PUSH
36108: LD_INT 2
36110: NONEQUAL
36111: OR
36112: IFFALSE 36116
// exit ;
36114: GO 36432
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36116: LD_ADDR_VAR 0 6
36120: PUSH
36121: LD_INT 22
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 255
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 30
36143: PUSH
36144: LD_INT 36
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 34
36153: PUSH
36154: LD_INT 31
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: ST_TO_ADDR
// if not tmp then
36175: LD_VAR 0 6
36179: NOT
36180: IFFALSE 36184
// exit ;
36182: GO 36432
// result := [ ] ;
36184: LD_ADDR_VAR 0 2
36188: PUSH
36189: EMPTY
36190: ST_TO_ADDR
// for i in tmp do
36191: LD_ADDR_VAR 0 3
36195: PUSH
36196: LD_VAR 0 6
36200: PUSH
36201: FOR_IN
36202: IFFALSE 36273
// begin t := UnitsInside ( i ) ;
36204: LD_ADDR_VAR 0 4
36208: PUSH
36209: LD_VAR 0 3
36213: PPUSH
36214: CALL_OW 313
36218: ST_TO_ADDR
// if t then
36219: LD_VAR 0 4
36223: IFFALSE 36271
// for j in t do
36225: LD_ADDR_VAR 0 7
36229: PUSH
36230: LD_VAR 0 4
36234: PUSH
36235: FOR_IN
36236: IFFALSE 36269
// result := Replace ( result , result + 1 , j ) ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: LD_VAR 0 2
36247: PPUSH
36248: LD_VAR 0 2
36252: PUSH
36253: LD_INT 1
36255: PLUS
36256: PPUSH
36257: LD_VAR 0 7
36261: PPUSH
36262: CALL_OW 1
36266: ST_TO_ADDR
36267: GO 36235
36269: POP
36270: POP
// end ;
36271: GO 36201
36273: POP
36274: POP
// if not result then
36275: LD_VAR 0 2
36279: NOT
36280: IFFALSE 36284
// exit ;
36282: GO 36432
// mech := result [ 1 ] ;
36284: LD_ADDR_VAR 0 5
36288: PUSH
36289: LD_VAR 0 2
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: ST_TO_ADDR
// if result > 1 then
36298: LD_VAR 0 2
36302: PUSH
36303: LD_INT 1
36305: GREATER
36306: IFFALSE 36418
// begin for i = 2 to result do
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: DOUBLE
36314: LD_INT 2
36316: DEC
36317: ST_TO_ADDR
36318: LD_VAR 0 2
36322: PUSH
36323: FOR_TO
36324: IFFALSE 36416
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36326: LD_ADDR_VAR 0 4
36330: PUSH
36331: LD_VAR 0 2
36335: PUSH
36336: LD_VAR 0 3
36340: ARRAY
36341: PPUSH
36342: LD_INT 3
36344: PPUSH
36345: CALL_OW 259
36349: PUSH
36350: LD_VAR 0 2
36354: PUSH
36355: LD_VAR 0 3
36359: ARRAY
36360: PPUSH
36361: CALL_OW 432
36365: MINUS
36366: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36367: LD_VAR 0 4
36371: PUSH
36372: LD_VAR 0 5
36376: PPUSH
36377: LD_INT 3
36379: PPUSH
36380: CALL_OW 259
36384: PUSH
36385: LD_VAR 0 5
36389: PPUSH
36390: CALL_OW 432
36394: MINUS
36395: GREATEREQUAL
36396: IFFALSE 36414
// mech := result [ i ] ;
36398: LD_ADDR_VAR 0 5
36402: PUSH
36403: LD_VAR 0 2
36407: PUSH
36408: LD_VAR 0 3
36412: ARRAY
36413: ST_TO_ADDR
// end ;
36414: GO 36323
36416: POP
36417: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36418: LD_VAR 0 1
36422: PPUSH
36423: LD_VAR 0 5
36427: PPUSH
36428: CALL_OW 135
// end ;
36432: LD_VAR 0 2
36436: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36437: LD_INT 0
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
// result := [ ] ;
36452: LD_ADDR_VAR 0 7
36456: PUSH
36457: EMPTY
36458: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 266
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: IN
36479: NOT
36480: IFFALSE 36484
// exit ;
36482: GO 38124
// if name then
36484: LD_VAR 0 3
36488: IFFALSE 36504
// SetBName ( base_dep , name ) ;
36490: LD_VAR 0 1
36494: PPUSH
36495: LD_VAR 0 3
36499: PPUSH
36500: CALL_OW 500
// base := GetBase ( base_dep ) ;
36504: LD_ADDR_VAR 0 15
36508: PUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 274
36518: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36519: LD_ADDR_VAR 0 16
36523: PUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 255
36533: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36534: LD_ADDR_VAR 0 17
36538: PUSH
36539: LD_VAR 0 1
36543: PPUSH
36544: CALL_OW 248
36548: ST_TO_ADDR
// if sources then
36549: LD_VAR 0 5
36553: IFFALSE 36600
// for i = 1 to 3 do
36555: LD_ADDR_VAR 0 8
36559: PUSH
36560: DOUBLE
36561: LD_INT 1
36563: DEC
36564: ST_TO_ADDR
36565: LD_INT 3
36567: PUSH
36568: FOR_TO
36569: IFFALSE 36598
// AddResourceType ( base , i , sources [ i ] ) ;
36571: LD_VAR 0 15
36575: PPUSH
36576: LD_VAR 0 8
36580: PPUSH
36581: LD_VAR 0 5
36585: PUSH
36586: LD_VAR 0 8
36590: ARRAY
36591: PPUSH
36592: CALL_OW 276
36596: GO 36568
36598: POP
36599: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36600: LD_ADDR_VAR 0 18
36604: PUSH
36605: LD_VAR 0 15
36609: PPUSH
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_INT 1
36617: PPUSH
36618: CALL 35859 0 3
36622: ST_TO_ADDR
// InitHc ;
36623: CALL_OW 19
// InitUc ;
36627: CALL_OW 18
// uc_side := side ;
36631: LD_ADDR_OWVAR 20
36635: PUSH
36636: LD_VAR 0 16
36640: ST_TO_ADDR
// uc_nation := nation ;
36641: LD_ADDR_OWVAR 21
36645: PUSH
36646: LD_VAR 0 17
36650: ST_TO_ADDR
// if buildings then
36651: LD_VAR 0 18
36655: IFFALSE 37983
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36657: LD_ADDR_VAR 0 19
36661: PUSH
36662: LD_VAR 0 18
36666: PPUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 30
36672: PUSH
36673: LD_INT 29
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 30
36682: PUSH
36683: LD_INT 30
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PPUSH
36695: CALL_OW 72
36699: ST_TO_ADDR
// if tmp then
36700: LD_VAR 0 19
36704: IFFALSE 36752
// for i in tmp do
36706: LD_ADDR_VAR 0 8
36710: PUSH
36711: LD_VAR 0 19
36715: PUSH
36716: FOR_IN
36717: IFFALSE 36750
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36719: LD_VAR 0 8
36723: PPUSH
36724: CALL_OW 250
36728: PPUSH
36729: LD_VAR 0 8
36733: PPUSH
36734: CALL_OW 251
36738: PPUSH
36739: LD_VAR 0 16
36743: PPUSH
36744: CALL_OW 441
36748: GO 36716
36750: POP
36751: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36752: LD_VAR 0 18
36756: PPUSH
36757: LD_INT 2
36759: PUSH
36760: LD_INT 30
36762: PUSH
36763: LD_INT 32
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 30
36772: PUSH
36773: LD_INT 33
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: PPUSH
36785: CALL_OW 72
36789: IFFALSE 36877
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36791: LD_ADDR_VAR 0 8
36795: PUSH
36796: LD_VAR 0 18
36800: PPUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 30
36806: PUSH
36807: LD_INT 32
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 30
36816: PUSH
36817: LD_INT 33
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 72
36833: PUSH
36834: FOR_IN
36835: IFFALSE 36875
// begin if not GetBWeapon ( i ) then
36837: LD_VAR 0 8
36841: PPUSH
36842: CALL_OW 269
36846: NOT
36847: IFFALSE 36873
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_VAR 0 8
36858: PPUSH
36859: LD_VAR 0 2
36863: PPUSH
36864: CALL 38129 0 2
36868: PPUSH
36869: CALL_OW 431
// end ;
36873: GO 36834
36875: POP
36876: POP
// end ; for i = 1 to personel do
36877: LD_ADDR_VAR 0 8
36881: PUSH
36882: DOUBLE
36883: LD_INT 1
36885: DEC
36886: ST_TO_ADDR
36887: LD_VAR 0 6
36891: PUSH
36892: FOR_TO
36893: IFFALSE 37963
// begin if i > 4 then
36895: LD_VAR 0 8
36899: PUSH
36900: LD_INT 4
36902: GREATER
36903: IFFALSE 36907
// break ;
36905: GO 37963
// case i of 1 :
36907: LD_VAR 0 8
36911: PUSH
36912: LD_INT 1
36914: DOUBLE
36915: EQUAL
36916: IFTRUE 36920
36918: GO 37000
36920: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36921: LD_ADDR_VAR 0 12
36925: PUSH
36926: LD_VAR 0 18
36930: PPUSH
36931: LD_INT 22
36933: PUSH
36934: LD_VAR 0 16
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 58
36945: PUSH
36946: EMPTY
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 30
36954: PUSH
36955: LD_INT 32
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 30
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 30
36974: PUSH
36975: LD_INT 5
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 72
36997: ST_TO_ADDR
36998: GO 37222
37000: LD_INT 2
37002: DOUBLE
37003: EQUAL
37004: IFTRUE 37008
37006: GO 37070
37008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37009: LD_ADDR_VAR 0 12
37013: PUSH
37014: LD_VAR 0 18
37018: PPUSH
37019: LD_INT 22
37021: PUSH
37022: LD_VAR 0 16
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 30
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PPUSH
37063: CALL_OW 72
37067: ST_TO_ADDR
37068: GO 37222
37070: LD_INT 3
37072: DOUBLE
37073: EQUAL
37074: IFTRUE 37078
37076: GO 37140
37078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37079: LD_ADDR_VAR 0 12
37083: PUSH
37084: LD_VAR 0 18
37088: PPUSH
37089: LD_INT 22
37091: PUSH
37092: LD_VAR 0 16
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 30
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 30
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PPUSH
37133: CALL_OW 72
37137: ST_TO_ADDR
37138: GO 37222
37140: LD_INT 4
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37148
37146: GO 37221
37148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37149: LD_ADDR_VAR 0 12
37153: PUSH
37154: LD_VAR 0 18
37158: PPUSH
37159: LD_INT 22
37161: PUSH
37162: LD_VAR 0 16
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 30
37176: PUSH
37177: LD_INT 6
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 30
37186: PUSH
37187: LD_INT 7
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 30
37196: PUSH
37197: LD_INT 8
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PPUSH
37214: CALL_OW 72
37218: ST_TO_ADDR
37219: GO 37222
37221: POP
// if i = 1 then
37222: LD_VAR 0 8
37226: PUSH
37227: LD_INT 1
37229: EQUAL
37230: IFFALSE 37341
// begin tmp := [ ] ;
37232: LD_ADDR_VAR 0 19
37236: PUSH
37237: EMPTY
37238: ST_TO_ADDR
// for j in f do
37239: LD_ADDR_VAR 0 9
37243: PUSH
37244: LD_VAR 0 12
37248: PUSH
37249: FOR_IN
37250: IFFALSE 37323
// if GetBType ( j ) = b_bunker then
37252: LD_VAR 0 9
37256: PPUSH
37257: CALL_OW 266
37261: PUSH
37262: LD_INT 32
37264: EQUAL
37265: IFFALSE 37292
// tmp := Insert ( tmp , 1 , j ) else
37267: LD_ADDR_VAR 0 19
37271: PUSH
37272: LD_VAR 0 19
37276: PPUSH
37277: LD_INT 1
37279: PPUSH
37280: LD_VAR 0 9
37284: PPUSH
37285: CALL_OW 2
37289: ST_TO_ADDR
37290: GO 37321
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37292: LD_ADDR_VAR 0 19
37296: PUSH
37297: LD_VAR 0 19
37301: PPUSH
37302: LD_VAR 0 19
37306: PUSH
37307: LD_INT 1
37309: PLUS
37310: PPUSH
37311: LD_VAR 0 9
37315: PPUSH
37316: CALL_OW 2
37320: ST_TO_ADDR
37321: GO 37249
37323: POP
37324: POP
// if tmp then
37325: LD_VAR 0 19
37329: IFFALSE 37341
// f := tmp ;
37331: LD_ADDR_VAR 0 12
37335: PUSH
37336: LD_VAR 0 19
37340: ST_TO_ADDR
// end ; x := personel [ i ] ;
37341: LD_ADDR_VAR 0 13
37345: PUSH
37346: LD_VAR 0 6
37350: PUSH
37351: LD_VAR 0 8
37355: ARRAY
37356: ST_TO_ADDR
// if x = - 1 then
37357: LD_VAR 0 13
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: EQUAL
37366: IFFALSE 37577
// begin for j in f do
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: LD_VAR 0 12
37377: PUSH
37378: FOR_IN
37379: IFFALSE 37573
// repeat InitHc ;
37381: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37385: LD_VAR 0 9
37389: PPUSH
37390: CALL_OW 266
37394: PUSH
37395: LD_INT 5
37397: EQUAL
37398: IFFALSE 37468
// begin if UnitsInside ( j ) < 3 then
37400: LD_VAR 0 9
37404: PPUSH
37405: CALL_OW 313
37409: PUSH
37410: LD_INT 3
37412: LESS
37413: IFFALSE 37449
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37415: LD_INT 0
37417: PPUSH
37418: LD_INT 5
37420: PUSH
37421: LD_INT 8
37423: PUSH
37424: LD_INT 9
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: PUSH
37432: LD_VAR 0 17
37436: ARRAY
37437: PPUSH
37438: LD_VAR 0 4
37442: PPUSH
37443: CALL_OW 380
37447: GO 37466
// PrepareHuman ( false , i , skill ) ;
37449: LD_INT 0
37451: PPUSH
37452: LD_VAR 0 8
37456: PPUSH
37457: LD_VAR 0 4
37461: PPUSH
37462: CALL_OW 380
// end else
37466: GO 37485
// PrepareHuman ( false , i , skill ) ;
37468: LD_INT 0
37470: PPUSH
37471: LD_VAR 0 8
37475: PPUSH
37476: LD_VAR 0 4
37480: PPUSH
37481: CALL_OW 380
// un := CreateHuman ;
37485: LD_ADDR_VAR 0 14
37489: PUSH
37490: CALL_OW 44
37494: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37495: LD_ADDR_VAR 0 7
37499: PUSH
37500: LD_VAR 0 7
37504: PPUSH
37505: LD_INT 1
37507: PPUSH
37508: LD_VAR 0 14
37512: PPUSH
37513: CALL_OW 2
37517: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37518: LD_VAR 0 14
37522: PPUSH
37523: LD_VAR 0 9
37527: PPUSH
37528: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37532: LD_VAR 0 9
37536: PPUSH
37537: CALL_OW 313
37541: PUSH
37542: LD_INT 6
37544: EQUAL
37545: IFTRUE 37569
37547: PUSH
37548: LD_VAR 0 9
37552: PPUSH
37553: CALL_OW 266
37557: PUSH
37558: LD_INT 32
37560: PUSH
37561: LD_INT 31
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: IN
37568: OR
37569: IFFALSE 37381
37571: GO 37378
37573: POP
37574: POP
// end else
37575: GO 37961
// for j = 1 to x do
37577: LD_ADDR_VAR 0 9
37581: PUSH
37582: DOUBLE
37583: LD_INT 1
37585: DEC
37586: ST_TO_ADDR
37587: LD_VAR 0 13
37591: PUSH
37592: FOR_TO
37593: IFFALSE 37959
// begin InitHc ;
37595: CALL_OW 19
// if not f then
37599: LD_VAR 0 12
37603: NOT
37604: IFFALSE 37693
// begin PrepareHuman ( false , i , skill ) ;
37606: LD_INT 0
37608: PPUSH
37609: LD_VAR 0 8
37613: PPUSH
37614: LD_VAR 0 4
37618: PPUSH
37619: CALL_OW 380
// un := CreateHuman ;
37623: LD_ADDR_VAR 0 14
37627: PUSH
37628: CALL_OW 44
37632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37633: LD_ADDR_VAR 0 7
37637: PUSH
37638: LD_VAR 0 7
37642: PPUSH
37643: LD_INT 1
37645: PPUSH
37646: LD_VAR 0 14
37650: PPUSH
37651: CALL_OW 2
37655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37656: LD_VAR 0 14
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 250
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 251
37680: PPUSH
37681: LD_INT 10
37683: PPUSH
37684: LD_INT 0
37686: PPUSH
37687: CALL_OW 50
// continue ;
37691: GO 37592
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37693: LD_VAR 0 12
37697: PUSH
37698: LD_INT 1
37700: ARRAY
37701: PPUSH
37702: CALL_OW 313
37706: IFFALSE 37734
37708: PUSH
37709: LD_VAR 0 12
37713: PUSH
37714: LD_INT 1
37716: ARRAY
37717: PPUSH
37718: CALL_OW 266
37722: PUSH
37723: LD_INT 32
37725: PUSH
37726: LD_INT 31
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: IN
37733: AND
37734: IFTRUE 37755
37736: PUSH
37737: LD_VAR 0 12
37741: PUSH
37742: LD_INT 1
37744: ARRAY
37745: PPUSH
37746: CALL_OW 313
37750: PUSH
37751: LD_INT 6
37753: EQUAL
37754: OR
37755: IFFALSE 37775
// f := Delete ( f , 1 ) ;
37757: LD_ADDR_VAR 0 12
37761: PUSH
37762: LD_VAR 0 12
37766: PPUSH
37767: LD_INT 1
37769: PPUSH
37770: CALL_OW 3
37774: ST_TO_ADDR
// if not f then
37775: LD_VAR 0 12
37779: NOT
37780: IFFALSE 37798
// begin x := x + 2 ;
37782: LD_ADDR_VAR 0 13
37786: PUSH
37787: LD_VAR 0 13
37791: PUSH
37792: LD_INT 2
37794: PLUS
37795: ST_TO_ADDR
// continue ;
37796: GO 37592
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37798: LD_VAR 0 12
37802: PUSH
37803: LD_INT 1
37805: ARRAY
37806: PPUSH
37807: CALL_OW 266
37811: PUSH
37812: LD_INT 5
37814: EQUAL
37815: IFFALSE 37889
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37817: LD_VAR 0 12
37821: PUSH
37822: LD_INT 1
37824: ARRAY
37825: PPUSH
37826: CALL_OW 313
37830: PUSH
37831: LD_INT 3
37833: LESS
37834: IFFALSE 37870
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37836: LD_INT 0
37838: PPUSH
37839: LD_INT 5
37841: PUSH
37842: LD_INT 8
37844: PUSH
37845: LD_INT 9
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: PUSH
37853: LD_VAR 0 17
37857: ARRAY
37858: PPUSH
37859: LD_VAR 0 4
37863: PPUSH
37864: CALL_OW 380
37868: GO 37887
// PrepareHuman ( false , i , skill ) ;
37870: LD_INT 0
37872: PPUSH
37873: LD_VAR 0 8
37877: PPUSH
37878: LD_VAR 0 4
37882: PPUSH
37883: CALL_OW 380
// end else
37887: GO 37906
// PrepareHuman ( false , i , skill ) ;
37889: LD_INT 0
37891: PPUSH
37892: LD_VAR 0 8
37896: PPUSH
37897: LD_VAR 0 4
37901: PPUSH
37902: CALL_OW 380
// un := CreateHuman ;
37906: LD_ADDR_VAR 0 14
37910: PUSH
37911: CALL_OW 44
37915: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37916: LD_ADDR_VAR 0 7
37920: PUSH
37921: LD_VAR 0 7
37925: PPUSH
37926: LD_INT 1
37928: PPUSH
37929: LD_VAR 0 14
37933: PPUSH
37934: CALL_OW 2
37938: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37939: LD_VAR 0 14
37943: PPUSH
37944: LD_VAR 0 12
37948: PUSH
37949: LD_INT 1
37951: ARRAY
37952: PPUSH
37953: CALL_OW 52
// end ;
37957: GO 37592
37959: POP
37960: POP
// end ;
37961: GO 36892
37963: POP
37964: POP
// result := result ^ buildings ;
37965: LD_ADDR_VAR 0 7
37969: PUSH
37970: LD_VAR 0 7
37974: PUSH
37975: LD_VAR 0 18
37979: ADD
37980: ST_TO_ADDR
// end else
37981: GO 38124
// begin for i = 1 to personel do
37983: LD_ADDR_VAR 0 8
37987: PUSH
37988: DOUBLE
37989: LD_INT 1
37991: DEC
37992: ST_TO_ADDR
37993: LD_VAR 0 6
37997: PUSH
37998: FOR_TO
37999: IFFALSE 38122
// begin if i > 4 then
38001: LD_VAR 0 8
38005: PUSH
38006: LD_INT 4
38008: GREATER
38009: IFFALSE 38013
// break ;
38011: GO 38122
// x := personel [ i ] ;
38013: LD_ADDR_VAR 0 13
38017: PUSH
38018: LD_VAR 0 6
38022: PUSH
38023: LD_VAR 0 8
38027: ARRAY
38028: ST_TO_ADDR
// if x = - 1 then
38029: LD_VAR 0 13
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: EQUAL
38038: IFFALSE 38042
// continue ;
38040: GO 37998
// PrepareHuman ( false , i , skill ) ;
38042: LD_INT 0
38044: PPUSH
38045: LD_VAR 0 8
38049: PPUSH
38050: LD_VAR 0 4
38054: PPUSH
38055: CALL_OW 380
// un := CreateHuman ;
38059: LD_ADDR_VAR 0 14
38063: PUSH
38064: CALL_OW 44
38068: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38069: LD_VAR 0 14
38073: PPUSH
38074: LD_VAR 0 1
38078: PPUSH
38079: CALL_OW 250
38083: PPUSH
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL_OW 251
38093: PPUSH
38094: LD_INT 10
38096: PPUSH
38097: LD_INT 0
38099: PPUSH
38100: CALL_OW 50
// result := result ^ un ;
38104: LD_ADDR_VAR 0 7
38108: PUSH
38109: LD_VAR 0 7
38113: PUSH
38114: LD_VAR 0 14
38118: ADD
38119: ST_TO_ADDR
// end ;
38120: GO 37998
38122: POP
38123: POP
// end ; end ;
38124: LD_VAR 0 7
38128: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38129: LD_INT 0
38131: PPUSH
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
38145: PPUSH
38146: PPUSH
// result := false ;
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: LD_INT 0
38154: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38155: LD_VAR 0 1
38159: NOT
38160: IFTRUE 38185
38162: PUSH
38163: LD_VAR 0 1
38167: PPUSH
38168: CALL_OW 266
38172: PUSH
38173: LD_INT 32
38175: PUSH
38176: LD_INT 33
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: IN
38183: NOT
38184: OR
38185: IFFALSE 38189
// exit ;
38187: GO 39324
// nat := GetNation ( tower ) ;
38189: LD_ADDR_VAR 0 12
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 248
38203: ST_TO_ADDR
// side := GetSide ( tower ) ;
38204: LD_ADDR_VAR 0 16
38208: PUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: CALL_OW 255
38218: ST_TO_ADDR
// x := GetX ( tower ) ;
38219: LD_ADDR_VAR 0 10
38223: PUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: CALL_OW 250
38233: ST_TO_ADDR
// y := GetY ( tower ) ;
38234: LD_ADDR_VAR 0 11
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 251
38248: ST_TO_ADDR
// if not x or not y then
38249: LD_VAR 0 10
38253: NOT
38254: IFTRUE 38263
38256: PUSH
38257: LD_VAR 0 11
38261: NOT
38262: OR
38263: IFFALSE 38267
// exit ;
38265: GO 39324
// weapon := 0 ;
38267: LD_ADDR_VAR 0 18
38271: PUSH
38272: LD_INT 0
38274: ST_TO_ADDR
// fac_list := [ ] ;
38275: LD_ADDR_VAR 0 17
38279: PUSH
38280: EMPTY
38281: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38282: LD_ADDR_VAR 0 6
38286: PUSH
38287: LD_VAR 0 1
38291: PPUSH
38292: CALL_OW 274
38296: PPUSH
38297: LD_VAR 0 2
38301: PPUSH
38302: LD_INT 0
38304: PPUSH
38305: CALL 35859 0 3
38309: PPUSH
38310: LD_INT 30
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PPUSH
38320: CALL_OW 72
38324: ST_TO_ADDR
// if not factories then
38325: LD_VAR 0 6
38329: NOT
38330: IFFALSE 38334
// exit ;
38332: GO 39324
// for i in factories do
38334: LD_ADDR_VAR 0 8
38338: PUSH
38339: LD_VAR 0 6
38343: PUSH
38344: FOR_IN
38345: IFFALSE 38370
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38347: LD_ADDR_VAR 0 17
38351: PUSH
38352: LD_VAR 0 17
38356: PUSH
38357: LD_VAR 0 8
38361: PPUSH
38362: CALL_OW 478
38366: UNION
38367: ST_TO_ADDR
38368: GO 38344
38370: POP
38371: POP
// if not fac_list then
38372: LD_VAR 0 17
38376: NOT
38377: IFFALSE 38381
// exit ;
38379: GO 39324
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38381: LD_ADDR_VAR 0 5
38385: PUSH
38386: LD_INT 4
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: LD_INT 9
38394: PUSH
38395: LD_INT 10
38397: PUSH
38398: LD_INT 6
38400: PUSH
38401: LD_INT 7
38403: PUSH
38404: LD_INT 11
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 27
38418: PUSH
38419: LD_INT 28
38421: PUSH
38422: LD_INT 26
38424: PUSH
38425: LD_INT 30
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 43
38436: PUSH
38437: LD_INT 44
38439: PUSH
38440: LD_INT 46
38442: PUSH
38443: LD_INT 45
38445: PUSH
38446: LD_INT 47
38448: PUSH
38449: LD_INT 49
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: LD_VAR 0 12
38469: ARRAY
38470: ST_TO_ADDR
// list := list isect fac_list ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_VAR 0 5
38480: PUSH
38481: LD_VAR 0 17
38485: ISECT
38486: ST_TO_ADDR
// if not list then
38487: LD_VAR 0 5
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 39324
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38496: LD_VAR 0 12
38500: PUSH
38501: LD_INT 3
38503: EQUAL
38504: IFFALSE 38516
38506: PUSH
38507: LD_INT 49
38509: PUSH
38510: LD_VAR 0 5
38514: IN
38515: AND
38516: IFFALSE 38536
38518: PUSH
38519: LD_INT 31
38521: PPUSH
38522: LD_VAR 0 16
38526: PPUSH
38527: CALL_OW 321
38531: PUSH
38532: LD_INT 2
38534: EQUAL
38535: AND
38536: IFFALSE 38596
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38538: LD_INT 22
38540: PUSH
38541: LD_VAR 0 16
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 35
38552: PUSH
38553: LD_INT 49
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 91
38562: PUSH
38563: LD_VAR 0 1
38567: PUSH
38568: LD_INT 10
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: PPUSH
38581: CALL_OW 69
38585: NOT
38586: IFFALSE 38596
// weapon := ru_time_lapser ;
38588: LD_ADDR_VAR 0 18
38592: PUSH
38593: LD_INT 49
38595: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38596: LD_VAR 0 12
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: IN
38611: IFFALSE 38635
38613: PUSH
38614: LD_INT 11
38616: PUSH
38617: LD_VAR 0 5
38621: IN
38622: IFTRUE 38634
38624: PUSH
38625: LD_INT 30
38627: PUSH
38628: LD_VAR 0 5
38632: IN
38633: OR
38634: AND
38635: IFFALSE 38655
38637: PUSH
38638: LD_INT 6
38640: PPUSH
38641: LD_VAR 0 16
38645: PPUSH
38646: CALL_OW 321
38650: PUSH
38651: LD_INT 2
38653: EQUAL
38654: AND
38655: IFFALSE 38822
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38657: LD_INT 22
38659: PUSH
38660: LD_VAR 0 16
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 35
38674: PUSH
38675: LD_INT 11
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 35
38684: PUSH
38685: LD_INT 30
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 91
38699: PUSH
38700: LD_VAR 0 1
38704: PUSH
38705: LD_INT 18
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: PPUSH
38718: CALL_OW 69
38722: NOT
38723: IFFALSE 38799
38725: PUSH
38726: LD_INT 22
38728: PUSH
38729: LD_VAR 0 16
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 30
38743: PUSH
38744: LD_INT 32
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 30
38753: PUSH
38754: LD_INT 33
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 91
38768: PUSH
38769: LD_VAR 0 1
38773: PUSH
38774: LD_INT 12
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: PPUSH
38790: CALL_OW 69
38794: PUSH
38795: LD_INT 2
38797: GREATER
38798: AND
38799: IFFALSE 38822
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38801: LD_ADDR_VAR 0 18
38805: PUSH
38806: LD_INT 11
38808: PUSH
38809: LD_INT 30
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_VAR 0 12
38820: ARRAY
38821: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38822: LD_VAR 0 18
38826: NOT
38827: IFFALSE 38847
38829: PUSH
38830: LD_INT 40
38832: PPUSH
38833: LD_VAR 0 16
38837: PPUSH
38838: CALL_OW 321
38842: PUSH
38843: LD_INT 2
38845: EQUAL
38846: AND
38847: IFFALSE 38883
38849: PUSH
38850: LD_INT 7
38852: PUSH
38853: LD_VAR 0 5
38857: IN
38858: IFTRUE 38870
38860: PUSH
38861: LD_INT 28
38863: PUSH
38864: LD_VAR 0 5
38868: IN
38869: OR
38870: IFTRUE 38882
38872: PUSH
38873: LD_INT 45
38875: PUSH
38876: LD_VAR 0 5
38880: IN
38881: OR
38882: AND
38883: IFFALSE 39137
// begin hex := GetHexInfo ( x , y ) ;
38885: LD_ADDR_VAR 0 4
38889: PUSH
38890: LD_VAR 0 10
38894: PPUSH
38895: LD_VAR 0 11
38899: PPUSH
38900: CALL_OW 546
38904: ST_TO_ADDR
// if hex [ 1 ] then
38905: LD_VAR 0 4
38909: PUSH
38910: LD_INT 1
38912: ARRAY
38913: IFFALSE 38917
// exit ;
38915: GO 39324
// height := hex [ 2 ] ;
38917: LD_ADDR_VAR 0 15
38921: PUSH
38922: LD_VAR 0 4
38926: PUSH
38927: LD_INT 2
38929: ARRAY
38930: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38931: LD_ADDR_VAR 0 14
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: LD_INT 3
38944: PUSH
38945: LD_INT 5
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// for i in tmp do
38954: LD_ADDR_VAR 0 8
38958: PUSH
38959: LD_VAR 0 14
38963: PUSH
38964: FOR_IN
38965: IFFALSE 39135
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38967: LD_ADDR_VAR 0 9
38971: PUSH
38972: LD_VAR 0 10
38976: PPUSH
38977: LD_VAR 0 8
38981: PPUSH
38982: LD_INT 5
38984: PPUSH
38985: CALL_OW 272
38989: PUSH
38990: LD_VAR 0 11
38994: PPUSH
38995: LD_VAR 0 8
38999: PPUSH
39000: LD_INT 5
39002: PPUSH
39003: CALL_OW 273
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39012: LD_VAR 0 9
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: PPUSH
39021: LD_VAR 0 9
39025: PUSH
39026: LD_INT 2
39028: ARRAY
39029: PPUSH
39030: CALL_OW 488
39034: IFFALSE 39133
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39036: LD_ADDR_VAR 0 4
39040: PUSH
39041: LD_VAR 0 9
39045: PUSH
39046: LD_INT 1
39048: ARRAY
39049: PPUSH
39050: LD_VAR 0 9
39054: PUSH
39055: LD_INT 2
39057: ARRAY
39058: PPUSH
39059: CALL_OW 546
39063: ST_TO_ADDR
// if hex [ 1 ] then
39064: LD_VAR 0 4
39068: PUSH
39069: LD_INT 1
39071: ARRAY
39072: IFFALSE 39076
// continue ;
39074: GO 38964
// h := hex [ 2 ] ;
39076: LD_ADDR_VAR 0 13
39080: PUSH
39081: LD_VAR 0 4
39085: PUSH
39086: LD_INT 2
39088: ARRAY
39089: ST_TO_ADDR
// if h + 7 < height then
39090: LD_VAR 0 13
39094: PUSH
39095: LD_INT 7
39097: PLUS
39098: PUSH
39099: LD_VAR 0 15
39103: LESS
39104: IFFALSE 39133
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39106: LD_ADDR_VAR 0 18
39110: PUSH
39111: LD_INT 7
39113: PUSH
39114: LD_INT 28
39116: PUSH
39117: LD_INT 45
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: LD_VAR 0 12
39129: ARRAY
39130: ST_TO_ADDR
// break ;
39131: GO 39135
// end ; end ; end ;
39133: GO 38964
39135: POP
39136: POP
// end ; if not weapon then
39137: LD_VAR 0 18
39141: NOT
39142: IFFALSE 39202
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39144: LD_ADDR_VAR 0 5
39148: PUSH
39149: LD_VAR 0 5
39153: PUSH
39154: LD_INT 11
39156: PUSH
39157: LD_INT 30
39159: PUSH
39160: LD_INT 49
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: DIFF
39168: ST_TO_ADDR
// if not list then
39169: LD_VAR 0 5
39173: NOT
39174: IFFALSE 39178
// exit ;
39176: GO 39324
// weapon := list [ rand ( 1 , list ) ] ;
39178: LD_ADDR_VAR 0 18
39182: PUSH
39183: LD_VAR 0 5
39187: PUSH
39188: LD_INT 1
39190: PPUSH
39191: LD_VAR 0 5
39195: PPUSH
39196: CALL_OW 12
39200: ARRAY
39201: ST_TO_ADDR
// end ; if weapon then
39202: LD_VAR 0 18
39206: IFFALSE 39324
// begin tmp := CostOfWeapon ( weapon ) ;
39208: LD_ADDR_VAR 0 14
39212: PUSH
39213: LD_VAR 0 18
39217: PPUSH
39218: CALL_OW 451
39222: ST_TO_ADDR
// j := GetBase ( tower ) ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 274
39237: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39238: LD_VAR 0 9
39242: PPUSH
39243: LD_INT 1
39245: PPUSH
39246: CALL_OW 275
39250: PUSH
39251: LD_VAR 0 14
39255: PUSH
39256: LD_INT 1
39258: ARRAY
39259: GREATEREQUAL
39260: IFFALSE 39286
39262: PUSH
39263: LD_VAR 0 9
39267: PPUSH
39268: LD_INT 2
39270: PPUSH
39271: CALL_OW 275
39275: PUSH
39276: LD_VAR 0 14
39280: PUSH
39281: LD_INT 2
39283: ARRAY
39284: GREATEREQUAL
39285: AND
39286: IFFALSE 39312
39288: PUSH
39289: LD_VAR 0 9
39293: PPUSH
39294: LD_INT 3
39296: PPUSH
39297: CALL_OW 275
39301: PUSH
39302: LD_VAR 0 14
39306: PUSH
39307: LD_INT 3
39309: ARRAY
39310: GREATEREQUAL
39311: AND
39312: IFFALSE 39324
// result := weapon ;
39314: LD_ADDR_VAR 0 3
39318: PUSH
39319: LD_VAR 0 18
39323: ST_TO_ADDR
// end ; end ;
39324: LD_VAR 0 3
39328: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39329: LD_INT 0
39331: PPUSH
39332: PPUSH
// result := true ;
39333: LD_ADDR_VAR 0 3
39337: PUSH
39338: LD_INT 1
39340: ST_TO_ADDR
// if array1 = array2 then
39341: LD_VAR 0 1
39345: PUSH
39346: LD_VAR 0 2
39350: EQUAL
39351: IFFALSE 39411
// begin for i = 1 to array1 do
39353: LD_ADDR_VAR 0 4
39357: PUSH
39358: DOUBLE
39359: LD_INT 1
39361: DEC
39362: ST_TO_ADDR
39363: LD_VAR 0 1
39367: PUSH
39368: FOR_TO
39369: IFFALSE 39407
// if array1 [ i ] <> array2 [ i ] then
39371: LD_VAR 0 1
39375: PUSH
39376: LD_VAR 0 4
39380: ARRAY
39381: PUSH
39382: LD_VAR 0 2
39386: PUSH
39387: LD_VAR 0 4
39391: ARRAY
39392: NONEQUAL
39393: IFFALSE 39405
// begin result := false ;
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_INT 0
39402: ST_TO_ADDR
// break ;
39403: GO 39407
// end ;
39405: GO 39368
39407: POP
39408: POP
// end else
39409: GO 39419
// result := false ;
39411: LD_ADDR_VAR 0 3
39415: PUSH
39416: LD_INT 0
39418: ST_TO_ADDR
// end ;
39419: LD_VAR 0 3
39423: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39424: LD_INT 0
39426: PPUSH
39427: PPUSH
// if not array1 or not array2 then
39428: LD_VAR 0 1
39432: NOT
39433: IFTRUE 39442
39435: PUSH
39436: LD_VAR 0 2
39440: NOT
39441: OR
39442: IFFALSE 39446
// exit ;
39444: GO 39510
// result := true ;
39446: LD_ADDR_VAR 0 3
39450: PUSH
39451: LD_INT 1
39453: ST_TO_ADDR
// for i = 1 to array1 do
39454: LD_ADDR_VAR 0 4
39458: PUSH
39459: DOUBLE
39460: LD_INT 1
39462: DEC
39463: ST_TO_ADDR
39464: LD_VAR 0 1
39468: PUSH
39469: FOR_TO
39470: IFFALSE 39508
// if array1 [ i ] <> array2 [ i ] then
39472: LD_VAR 0 1
39476: PUSH
39477: LD_VAR 0 4
39481: ARRAY
39482: PUSH
39483: LD_VAR 0 2
39487: PUSH
39488: LD_VAR 0 4
39492: ARRAY
39493: NONEQUAL
39494: IFFALSE 39506
// begin result := false ;
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_INT 0
39503: ST_TO_ADDR
// break ;
39504: GO 39508
// end ;
39506: GO 39469
39508: POP
39509: POP
// end ;
39510: LD_VAR 0 3
39514: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39515: LD_INT 0
39517: PPUSH
39518: PPUSH
39519: PPUSH
// pom := GetBase ( fac ) ;
39520: LD_ADDR_VAR 0 5
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: CALL_OW 274
39534: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39535: LD_ADDR_VAR 0 4
39539: PUSH
39540: LD_VAR 0 2
39544: PUSH
39545: LD_INT 1
39547: ARRAY
39548: PPUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 2
39556: ARRAY
39557: PPUSH
39558: LD_VAR 0 2
39562: PUSH
39563: LD_INT 3
39565: ARRAY
39566: PPUSH
39567: LD_VAR 0 2
39571: PUSH
39572: LD_INT 4
39574: ARRAY
39575: PPUSH
39576: CALL_OW 449
39580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_VAR 0 5
39590: PPUSH
39591: LD_INT 1
39593: PPUSH
39594: CALL_OW 275
39598: PUSH
39599: LD_VAR 0 4
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: GREATEREQUAL
39608: IFFALSE 39634
39610: PUSH
39611: LD_VAR 0 5
39615: PPUSH
39616: LD_INT 2
39618: PPUSH
39619: CALL_OW 275
39623: PUSH
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 2
39631: ARRAY
39632: GREATEREQUAL
39633: AND
39634: IFFALSE 39660
39636: PUSH
39637: LD_VAR 0 5
39641: PPUSH
39642: LD_INT 3
39644: PPUSH
39645: CALL_OW 275
39649: PUSH
39650: LD_VAR 0 4
39654: PUSH
39655: LD_INT 3
39657: ARRAY
39658: GREATEREQUAL
39659: AND
39660: ST_TO_ADDR
// end ;
39661: LD_VAR 0 3
39665: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39666: LD_INT 0
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
// pom := GetBase ( building ) ;
39672: LD_ADDR_VAR 0 3
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 274
39686: ST_TO_ADDR
// if not pom then
39687: LD_VAR 0 3
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 39870
// btype := GetBType ( building ) ;
39696: LD_ADDR_VAR 0 5
39700: PUSH
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 266
39710: ST_TO_ADDR
// if btype = b_armoury then
39711: LD_VAR 0 5
39715: PUSH
39716: LD_INT 4
39718: EQUAL
39719: IFFALSE 39729
// btype := b_barracks ;
39721: LD_ADDR_VAR 0 5
39725: PUSH
39726: LD_INT 5
39728: ST_TO_ADDR
// if btype = b_depot then
39729: LD_VAR 0 5
39733: PUSH
39734: LD_INT 0
39736: EQUAL
39737: IFFALSE 39747
// btype := b_warehouse ;
39739: LD_ADDR_VAR 0 5
39743: PUSH
39744: LD_INT 1
39746: ST_TO_ADDR
// if btype = b_workshop then
39747: LD_VAR 0 5
39751: PUSH
39752: LD_INT 2
39754: EQUAL
39755: IFFALSE 39765
// btype := b_factory ;
39757: LD_ADDR_VAR 0 5
39761: PUSH
39762: LD_INT 3
39764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39765: LD_ADDR_VAR 0 4
39769: PUSH
39770: LD_VAR 0 5
39774: PPUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 248
39784: PPUSH
39785: CALL_OW 450
39789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39790: LD_ADDR_VAR 0 2
39794: PUSH
39795: LD_VAR 0 3
39799: PPUSH
39800: LD_INT 1
39802: PPUSH
39803: CALL_OW 275
39807: PUSH
39808: LD_VAR 0 4
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: GREATEREQUAL
39817: IFFALSE 39843
39819: PUSH
39820: LD_VAR 0 3
39824: PPUSH
39825: LD_INT 2
39827: PPUSH
39828: CALL_OW 275
39832: PUSH
39833: LD_VAR 0 4
39837: PUSH
39838: LD_INT 2
39840: ARRAY
39841: GREATEREQUAL
39842: AND
39843: IFFALSE 39869
39845: PUSH
39846: LD_VAR 0 3
39850: PPUSH
39851: LD_INT 3
39853: PPUSH
39854: CALL_OW 275
39858: PUSH
39859: LD_VAR 0 4
39863: PUSH
39864: LD_INT 3
39866: ARRAY
39867: GREATEREQUAL
39868: AND
39869: ST_TO_ADDR
// end ;
39870: LD_VAR 0 2
39874: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39875: LD_INT 0
39877: PPUSH
39878: PPUSH
39879: PPUSH
// pom := GetBase ( building ) ;
39880: LD_ADDR_VAR 0 4
39884: PUSH
39885: LD_VAR 0 1
39889: PPUSH
39890: CALL_OW 274
39894: ST_TO_ADDR
// if not pom then
39895: LD_VAR 0 4
39899: NOT
39900: IFFALSE 39904
// exit ;
39902: GO 40009
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39904: LD_ADDR_VAR 0 5
39908: PUSH
39909: LD_VAR 0 2
39913: PPUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 248
39923: PPUSH
39924: CALL_OW 450
39928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_VAR 0 4
39938: PPUSH
39939: LD_INT 1
39941: PPUSH
39942: CALL_OW 275
39946: PUSH
39947: LD_VAR 0 5
39951: PUSH
39952: LD_INT 1
39954: ARRAY
39955: GREATEREQUAL
39956: IFFALSE 39982
39958: PUSH
39959: LD_VAR 0 4
39963: PPUSH
39964: LD_INT 2
39966: PPUSH
39967: CALL_OW 275
39971: PUSH
39972: LD_VAR 0 5
39976: PUSH
39977: LD_INT 2
39979: ARRAY
39980: GREATEREQUAL
39981: AND
39982: IFFALSE 40008
39984: PUSH
39985: LD_VAR 0 4
39989: PPUSH
39990: LD_INT 3
39992: PPUSH
39993: CALL_OW 275
39997: PUSH
39998: LD_VAR 0 5
40002: PUSH
40003: LD_INT 3
40005: ARRAY
40006: GREATEREQUAL
40007: AND
40008: ST_TO_ADDR
// end ;
40009: LD_VAR 0 3
40013: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40014: LD_INT 0
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
// result := false ;
40027: LD_ADDR_VAR 0 8
40031: PUSH
40032: LD_INT 0
40034: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40035: LD_VAR 0 5
40039: NOT
40040: IFTRUE 40049
40042: PUSH
40043: LD_VAR 0 1
40047: NOT
40048: OR
40049: IFTRUE 40058
40051: PUSH
40052: LD_VAR 0 2
40056: NOT
40057: OR
40058: IFTRUE 40067
40060: PUSH
40061: LD_VAR 0 3
40065: NOT
40066: OR
40067: IFFALSE 40071
// exit ;
40069: GO 40897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40071: LD_ADDR_VAR 0 14
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: LD_VAR 0 2
40085: PPUSH
40086: LD_VAR 0 3
40090: PPUSH
40091: LD_VAR 0 4
40095: PPUSH
40096: LD_VAR 0 5
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: CALL_OW 248
40109: PPUSH
40110: LD_INT 0
40112: PPUSH
40113: CALL 42178 0 6
40117: ST_TO_ADDR
// if not hexes then
40118: LD_VAR 0 14
40122: NOT
40123: IFFALSE 40127
// exit ;
40125: GO 40897
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40127: LD_ADDR_VAR 0 17
40131: PUSH
40132: LD_VAR 0 5
40136: PPUSH
40137: LD_INT 22
40139: PUSH
40140: LD_VAR 0 13
40144: PPUSH
40145: CALL_OW 255
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 30
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 30
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PPUSH
40186: CALL_OW 72
40190: ST_TO_ADDR
// for i = 1 to hexes do
40191: LD_ADDR_VAR 0 9
40195: PUSH
40196: DOUBLE
40197: LD_INT 1
40199: DEC
40200: ST_TO_ADDR
40201: LD_VAR 0 14
40205: PUSH
40206: FOR_TO
40207: IFFALSE 40895
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40209: LD_ADDR_VAR 0 13
40213: PUSH
40214: LD_VAR 0 14
40218: PUSH
40219: LD_VAR 0 9
40223: ARRAY
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: LD_VAR 0 14
40233: PUSH
40234: LD_VAR 0 9
40238: ARRAY
40239: PUSH
40240: LD_INT 2
40242: ARRAY
40243: PPUSH
40244: CALL_OW 428
40248: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40249: LD_VAR 0 14
40253: PUSH
40254: LD_VAR 0 9
40258: ARRAY
40259: PUSH
40260: LD_INT 1
40262: ARRAY
40263: PPUSH
40264: LD_VAR 0 14
40268: PUSH
40269: LD_VAR 0 9
40273: ARRAY
40274: PUSH
40275: LD_INT 2
40277: ARRAY
40278: PPUSH
40279: CALL_OW 351
40283: IFTRUE 40322
40285: PUSH
40286: LD_VAR 0 14
40290: PUSH
40291: LD_VAR 0 9
40295: ARRAY
40296: PUSH
40297: LD_INT 1
40299: ARRAY
40300: PPUSH
40301: LD_VAR 0 14
40305: PUSH
40306: LD_VAR 0 9
40310: ARRAY
40311: PUSH
40312: LD_INT 2
40314: ARRAY
40315: PPUSH
40316: CALL_OW 488
40320: NOT
40321: OR
40322: IFTRUE 40339
40324: PUSH
40325: LD_VAR 0 13
40329: PPUSH
40330: CALL_OW 247
40334: PUSH
40335: LD_INT 3
40337: EQUAL
40338: OR
40339: IFFALSE 40345
// exit ;
40341: POP
40342: POP
40343: GO 40897
// if not tmp then
40345: LD_VAR 0 13
40349: NOT
40350: IFFALSE 40354
// continue ;
40352: GO 40206
// result := true ;
40354: LD_ADDR_VAR 0 8
40358: PUSH
40359: LD_INT 1
40361: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40362: LD_VAR 0 6
40366: IFFALSE 40383
40368: PUSH
40369: LD_VAR 0 13
40373: PPUSH
40374: CALL_OW 247
40378: PUSH
40379: LD_INT 2
40381: EQUAL
40382: AND
40383: IFFALSE 40400
40385: PUSH
40386: LD_VAR 0 13
40390: PPUSH
40391: CALL_OW 263
40395: PUSH
40396: LD_INT 1
40398: EQUAL
40399: AND
40400: IFFALSE 40564
// begin if IsDrivenBy ( tmp ) then
40402: LD_VAR 0 13
40406: PPUSH
40407: CALL_OW 311
40411: IFFALSE 40415
// continue ;
40413: GO 40206
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40415: LD_VAR 0 6
40419: PPUSH
40420: LD_INT 3
40422: PUSH
40423: LD_INT 60
40425: PUSH
40426: EMPTY
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: LD_INT 55
40438: PUSH
40439: EMPTY
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PPUSH
40450: CALL_OW 72
40454: IFFALSE 40562
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40456: LD_ADDR_VAR 0 18
40460: PUSH
40461: LD_VAR 0 6
40465: PPUSH
40466: LD_INT 3
40468: PUSH
40469: LD_INT 60
40471: PUSH
40472: EMPTY
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: LD_INT 55
40484: PUSH
40485: EMPTY
40486: LIST
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PPUSH
40496: CALL_OW 72
40500: PUSH
40501: LD_INT 1
40503: ARRAY
40504: ST_TO_ADDR
// if IsInUnit ( driver ) then
40505: LD_VAR 0 18
40509: PPUSH
40510: CALL_OW 310
40514: IFFALSE 40525
// ComExit ( driver ) ;
40516: LD_VAR 0 18
40520: PPUSH
40521: CALL 66168 0 1
// AddComEnterUnit ( driver , tmp ) ;
40525: LD_VAR 0 18
40529: PPUSH
40530: LD_VAR 0 13
40534: PPUSH
40535: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40539: LD_VAR 0 18
40543: PPUSH
40544: LD_VAR 0 7
40548: PPUSH
40549: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40553: LD_VAR 0 18
40557: PPUSH
40558: CALL_OW 181
// end ; continue ;
40562: GO 40206
// end ; if not cleaners or not tmp in cleaners then
40564: LD_VAR 0 6
40568: NOT
40569: IFTRUE 40584
40571: PUSH
40572: LD_VAR 0 13
40576: PUSH
40577: LD_VAR 0 6
40581: IN
40582: NOT
40583: OR
40584: IFFALSE 40893
// begin if dep then
40586: LD_VAR 0 17
40590: IFFALSE 40726
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40592: LD_ADDR_VAR 0 16
40596: PUSH
40597: LD_VAR 0 17
40601: PUSH
40602: LD_INT 1
40604: ARRAY
40605: PPUSH
40606: CALL_OW 250
40610: PPUSH
40611: LD_VAR 0 17
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: PPUSH
40620: CALL_OW 254
40624: PPUSH
40625: LD_INT 5
40627: PPUSH
40628: CALL_OW 272
40632: PUSH
40633: LD_VAR 0 17
40637: PUSH
40638: LD_INT 1
40640: ARRAY
40641: PPUSH
40642: CALL_OW 251
40646: PPUSH
40647: LD_VAR 0 17
40651: PUSH
40652: LD_INT 1
40654: ARRAY
40655: PPUSH
40656: CALL_OW 254
40660: PPUSH
40661: LD_INT 5
40663: PPUSH
40664: CALL_OW 273
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40673: LD_VAR 0 16
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: PPUSH
40682: LD_VAR 0 16
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: PPUSH
40691: CALL_OW 488
40695: IFFALSE 40726
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40697: LD_VAR 0 13
40701: PPUSH
40702: LD_VAR 0 16
40706: PUSH
40707: LD_INT 1
40709: ARRAY
40710: PPUSH
40711: LD_VAR 0 16
40715: PUSH
40716: LD_INT 2
40718: ARRAY
40719: PPUSH
40720: CALL_OW 111
// continue ;
40724: GO 40206
// end ; end ; r := GetDir ( tmp ) ;
40726: LD_ADDR_VAR 0 15
40730: PUSH
40731: LD_VAR 0 13
40735: PPUSH
40736: CALL_OW 254
40740: ST_TO_ADDR
// if r = 5 then
40741: LD_VAR 0 15
40745: PUSH
40746: LD_INT 5
40748: EQUAL
40749: IFFALSE 40759
// r := 0 ;
40751: LD_ADDR_VAR 0 15
40755: PUSH
40756: LD_INT 0
40758: ST_TO_ADDR
// for j = r to 5 do
40759: LD_ADDR_VAR 0 10
40763: PUSH
40764: DOUBLE
40765: LD_VAR 0 15
40769: DEC
40770: ST_TO_ADDR
40771: LD_INT 5
40773: PUSH
40774: FOR_TO
40775: IFFALSE 40891
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40777: LD_ADDR_VAR 0 11
40781: PUSH
40782: LD_VAR 0 13
40786: PPUSH
40787: CALL_OW 250
40791: PPUSH
40792: LD_VAR 0 10
40796: PPUSH
40797: LD_INT 2
40799: PPUSH
40800: CALL_OW 272
40804: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40805: LD_ADDR_VAR 0 12
40809: PUSH
40810: LD_VAR 0 13
40814: PPUSH
40815: CALL_OW 251
40819: PPUSH
40820: LD_VAR 0 10
40824: PPUSH
40825: LD_INT 2
40827: PPUSH
40828: CALL_OW 273
40832: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40833: LD_VAR 0 11
40837: PPUSH
40838: LD_VAR 0 12
40842: PPUSH
40843: CALL_OW 488
40847: IFFALSE 40866
40849: PUSH
40850: LD_VAR 0 11
40854: PPUSH
40855: LD_VAR 0 12
40859: PPUSH
40860: CALL_OW 428
40864: NOT
40865: AND
40866: IFFALSE 40889
// begin ComMoveXY ( tmp , _x , _y ) ;
40868: LD_VAR 0 13
40872: PPUSH
40873: LD_VAR 0 11
40877: PPUSH
40878: LD_VAR 0 12
40882: PPUSH
40883: CALL_OW 111
// break ;
40887: GO 40891
// end ; end ;
40889: GO 40774
40891: POP
40892: POP
// end ; end ;
40893: GO 40206
40895: POP
40896: POP
// end ;
40897: LD_VAR 0 8
40901: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40902: LD_INT 0
40904: PPUSH
// result := true ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_INT 1
40912: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40913: LD_VAR 0 2
40917: PUSH
40918: LD_INT 24
40920: DOUBLE
40921: EQUAL
40922: IFTRUE 40932
40924: LD_INT 33
40926: DOUBLE
40927: EQUAL
40928: IFTRUE 40932
40930: GO 40957
40932: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40933: LD_ADDR_VAR 0 3
40937: PUSH
40938: LD_INT 32
40940: PPUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 321
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: ST_TO_ADDR
40955: GO 41273
40957: LD_INT 20
40959: DOUBLE
40960: EQUAL
40961: IFTRUE 40965
40963: GO 40990
40965: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40966: LD_ADDR_VAR 0 3
40970: PUSH
40971: LD_INT 6
40973: PPUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: CALL_OW 321
40983: PUSH
40984: LD_INT 2
40986: EQUAL
40987: ST_TO_ADDR
40988: GO 41273
40990: LD_INT 22
40992: DOUBLE
40993: EQUAL
40994: IFTRUE 41004
40996: LD_INT 36
40998: DOUBLE
40999: EQUAL
41000: IFTRUE 41004
41002: GO 41029
41004: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41005: LD_ADDR_VAR 0 3
41009: PUSH
41010: LD_INT 15
41012: PPUSH
41013: LD_VAR 0 1
41017: PPUSH
41018: CALL_OW 321
41022: PUSH
41023: LD_INT 2
41025: EQUAL
41026: ST_TO_ADDR
41027: GO 41273
41029: LD_INT 30
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41037
41035: GO 41062
41037: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_INT 20
41045: PPUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 321
41055: PUSH
41056: LD_INT 2
41058: EQUAL
41059: ST_TO_ADDR
41060: GO 41273
41062: LD_INT 28
41064: DOUBLE
41065: EQUAL
41066: IFTRUE 41076
41068: LD_INT 21
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41076
41074: GO 41101
41076: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_INT 21
41084: PPUSH
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 321
41094: PUSH
41095: LD_INT 2
41097: EQUAL
41098: ST_TO_ADDR
41099: GO 41273
41101: LD_INT 16
41103: DOUBLE
41104: EQUAL
41105: IFTRUE 41109
41107: GO 41134
41109: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41110: LD_ADDR_VAR 0 3
41114: PUSH
41115: LD_INT 84
41117: PPUSH
41118: LD_VAR 0 1
41122: PPUSH
41123: CALL_OW 321
41127: PUSH
41128: LD_INT 2
41130: EQUAL
41131: ST_TO_ADDR
41132: GO 41273
41134: LD_INT 19
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41148
41140: LD_INT 23
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41148
41146: GO 41173
41148: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41149: LD_ADDR_VAR 0 3
41153: PUSH
41154: LD_INT 83
41156: PPUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 321
41166: PUSH
41167: LD_INT 2
41169: EQUAL
41170: ST_TO_ADDR
41171: GO 41273
41173: LD_INT 17
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41181
41179: GO 41206
41181: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41182: LD_ADDR_VAR 0 3
41186: PUSH
41187: LD_INT 39
41189: PPUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: CALL_OW 321
41199: PUSH
41200: LD_INT 2
41202: EQUAL
41203: ST_TO_ADDR
41204: GO 41273
41206: LD_INT 18
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41214
41212: GO 41239
41214: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_INT 40
41222: PPUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 321
41232: PUSH
41233: LD_INT 2
41235: EQUAL
41236: ST_TO_ADDR
41237: GO 41273
41239: LD_INT 27
41241: DOUBLE
41242: EQUAL
41243: IFTRUE 41247
41245: GO 41272
41247: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41248: LD_ADDR_VAR 0 3
41252: PUSH
41253: LD_INT 35
41255: PPUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 321
41265: PUSH
41266: LD_INT 2
41268: EQUAL
41269: ST_TO_ADDR
41270: GO 41273
41272: POP
// end ;
41273: LD_VAR 0 3
41277: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
// result := false ;
41291: LD_ADDR_VAR 0 6
41295: PUSH
41296: LD_INT 0
41298: ST_TO_ADDR
// if btype = b_depot then
41299: LD_VAR 0 2
41303: PUSH
41304: LD_INT 0
41306: EQUAL
41307: IFFALSE 41319
// begin result := true ;
41309: LD_ADDR_VAR 0 6
41313: PUSH
41314: LD_INT 1
41316: ST_TO_ADDR
// exit ;
41317: GO 42173
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41319: LD_VAR 0 1
41323: NOT
41324: IFTRUE 41349
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 266
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: IN
41347: NOT
41348: OR
41349: IFTRUE 41358
41351: PUSH
41352: LD_VAR 0 2
41356: NOT
41357: OR
41358: IFTRUE 41394
41360: PUSH
41361: LD_VAR 0 5
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: LD_INT 5
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: IN
41392: NOT
41393: OR
41394: IFTRUE 41413
41396: PUSH
41397: LD_VAR 0 3
41401: PPUSH
41402: LD_VAR 0 4
41406: PPUSH
41407: CALL_OW 488
41411: NOT
41412: OR
41413: IFFALSE 41417
// exit ;
41415: GO 42173
// side := GetSide ( depot ) ;
41417: LD_ADDR_VAR 0 9
41421: PUSH
41422: LD_VAR 0 1
41426: PPUSH
41427: CALL_OW 255
41431: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41432: LD_VAR 0 9
41436: PPUSH
41437: LD_VAR 0 2
41441: PPUSH
41442: CALL 40902 0 2
41446: NOT
41447: IFFALSE 41451
// exit ;
41449: GO 42173
// pom := GetBase ( depot ) ;
41451: LD_ADDR_VAR 0 10
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 274
41465: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41466: LD_ADDR_VAR 0 11
41470: PUSH
41471: LD_VAR 0 2
41475: PPUSH
41476: LD_VAR 0 1
41480: PPUSH
41481: CALL_OW 248
41485: PPUSH
41486: CALL_OW 450
41490: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41491: LD_VAR 0 10
41495: PPUSH
41496: LD_INT 1
41498: PPUSH
41499: CALL_OW 275
41503: PUSH
41504: LD_VAR 0 11
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: GREATEREQUAL
41513: IFFALSE 41539
41515: PUSH
41516: LD_VAR 0 10
41520: PPUSH
41521: LD_INT 2
41523: PPUSH
41524: CALL_OW 275
41528: PUSH
41529: LD_VAR 0 11
41533: PUSH
41534: LD_INT 2
41536: ARRAY
41537: GREATEREQUAL
41538: AND
41539: IFFALSE 41565
41541: PUSH
41542: LD_VAR 0 10
41546: PPUSH
41547: LD_INT 3
41549: PPUSH
41550: CALL_OW 275
41554: PUSH
41555: LD_VAR 0 11
41559: PUSH
41560: LD_INT 3
41562: ARRAY
41563: GREATEREQUAL
41564: AND
41565: NOT
41566: IFFALSE 41570
// exit ;
41568: GO 42173
// if GetBType ( depot ) = b_depot then
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 266
41579: PUSH
41580: LD_INT 0
41582: EQUAL
41583: IFFALSE 41595
// dist := 28 else
41585: LD_ADDR_VAR 0 14
41589: PUSH
41590: LD_INT 28
41592: ST_TO_ADDR
41593: GO 41603
// dist := 36 ;
41595: LD_ADDR_VAR 0 14
41599: PUSH
41600: LD_INT 36
41602: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41603: LD_VAR 0 1
41607: PPUSH
41608: LD_VAR 0 3
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: CALL_OW 297
41622: PUSH
41623: LD_VAR 0 14
41627: GREATER
41628: IFFALSE 41632
// exit ;
41630: GO 42173
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41632: LD_ADDR_VAR 0 12
41636: PUSH
41637: LD_VAR 0 2
41641: PPUSH
41642: LD_VAR 0 3
41646: PPUSH
41647: LD_VAR 0 4
41651: PPUSH
41652: LD_VAR 0 5
41656: PPUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 248
41666: PPUSH
41667: LD_INT 0
41669: PPUSH
41670: CALL 42178 0 6
41674: ST_TO_ADDR
// if not hexes then
41675: LD_VAR 0 12
41679: NOT
41680: IFFALSE 41684
// exit ;
41682: GO 42173
// hex := GetHexInfo ( x , y ) ;
41684: LD_ADDR_VAR 0 15
41688: PUSH
41689: LD_VAR 0 3
41693: PPUSH
41694: LD_VAR 0 4
41698: PPUSH
41699: CALL_OW 546
41703: ST_TO_ADDR
// if hex [ 1 ] then
41704: LD_VAR 0 15
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: IFFALSE 41716
// exit ;
41714: GO 42173
// height := hex [ 2 ] ;
41716: LD_ADDR_VAR 0 13
41720: PUSH
41721: LD_VAR 0 15
41725: PUSH
41726: LD_INT 2
41728: ARRAY
41729: ST_TO_ADDR
// for i = 1 to hexes do
41730: LD_ADDR_VAR 0 7
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_VAR 0 12
41744: PUSH
41745: FOR_TO
41746: IFFALSE 42090
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41748: LD_VAR 0 12
41752: PUSH
41753: LD_VAR 0 7
41757: ARRAY
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PPUSH
41763: LD_VAR 0 12
41767: PUSH
41768: LD_VAR 0 7
41772: ARRAY
41773: PUSH
41774: LD_INT 2
41776: ARRAY
41777: PPUSH
41778: CALL_OW 488
41782: NOT
41783: IFTRUE 41825
41785: PUSH
41786: LD_VAR 0 12
41790: PUSH
41791: LD_VAR 0 7
41795: ARRAY
41796: PUSH
41797: LD_INT 1
41799: ARRAY
41800: PPUSH
41801: LD_VAR 0 12
41805: PUSH
41806: LD_VAR 0 7
41810: ARRAY
41811: PUSH
41812: LD_INT 2
41814: ARRAY
41815: PPUSH
41816: CALL_OW 428
41820: PUSH
41821: LD_INT 0
41823: GREATER
41824: OR
41825: IFTRUE 41863
41827: PUSH
41828: LD_VAR 0 12
41832: PUSH
41833: LD_VAR 0 7
41837: ARRAY
41838: PUSH
41839: LD_INT 1
41841: ARRAY
41842: PPUSH
41843: LD_VAR 0 12
41847: PUSH
41848: LD_VAR 0 7
41852: ARRAY
41853: PUSH
41854: LD_INT 2
41856: ARRAY
41857: PPUSH
41858: CALL_OW 351
41862: OR
41863: IFFALSE 41869
// exit ;
41865: POP
41866: POP
41867: GO 42173
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41869: LD_ADDR_VAR 0 8
41873: PUSH
41874: LD_VAR 0 12
41878: PUSH
41879: LD_VAR 0 7
41883: ARRAY
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: LD_VAR 0 12
41893: PUSH
41894: LD_VAR 0 7
41898: ARRAY
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: PPUSH
41904: CALL_OW 546
41908: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41909: LD_VAR 0 8
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: IFTRUE 41939
41919: PUSH
41920: LD_VAR 0 8
41924: PUSH
41925: LD_INT 2
41927: ARRAY
41928: PUSH
41929: LD_VAR 0 13
41933: PUSH
41934: LD_INT 2
41936: PLUS
41937: GREATER
41938: OR
41939: IFTRUE 41961
41941: PUSH
41942: LD_VAR 0 8
41946: PUSH
41947: LD_INT 2
41949: ARRAY
41950: PUSH
41951: LD_VAR 0 13
41955: PUSH
41956: LD_INT 2
41958: MINUS
41959: LESS
41960: OR
41961: IFTRUE 42029
41963: PUSH
41964: LD_VAR 0 8
41968: PUSH
41969: LD_INT 3
41971: ARRAY
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 8
41978: PUSH
41979: LD_INT 9
41981: PUSH
41982: LD_INT 10
41984: PUSH
41985: LD_INT 11
41987: PUSH
41988: LD_INT 12
41990: PUSH
41991: LD_INT 13
41993: PUSH
41994: LD_INT 16
41996: PUSH
41997: LD_INT 17
41999: PUSH
42000: LD_INT 18
42002: PUSH
42003: LD_INT 19
42005: PUSH
42006: LD_INT 20
42008: PUSH
42009: LD_INT 21
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: IN
42027: NOT
42028: OR
42029: IFTRUE 42042
42031: PUSH
42032: LD_VAR 0 8
42036: PUSH
42037: LD_INT 5
42039: ARRAY
42040: NOT
42041: OR
42042: IFTRUE 42082
42044: PUSH
42045: LD_VAR 0 8
42049: PUSH
42050: LD_INT 6
42052: ARRAY
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 7
42062: PUSH
42063: LD_INT 9
42065: PUSH
42066: LD_INT 10
42068: PUSH
42069: LD_INT 11
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: IN
42080: NOT
42081: OR
42082: IFFALSE 42088
// exit ;
42084: POP
42085: POP
42086: GO 42173
// end ;
42088: GO 41745
42090: POP
42091: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42092: LD_VAR 0 9
42096: PPUSH
42097: LD_VAR 0 3
42101: PPUSH
42102: LD_VAR 0 4
42106: PPUSH
42107: LD_INT 20
42109: PPUSH
42110: CALL 33992 0 4
42114: PUSH
42115: LD_INT 4
42117: ARRAY
42118: IFFALSE 42122
// exit ;
42120: GO 42173
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 29
42129: PUSH
42130: LD_INT 30
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: IN
42137: IFFALSE 42161
42139: PUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 9
42154: PPUSH
42155: CALL_OW 440
42159: NOT
42160: AND
42161: IFFALSE 42165
// exit ;
42163: GO 42173
// result := true ;
42165: LD_ADDR_VAR 0 6
42169: PUSH
42170: LD_INT 1
42172: ST_TO_ADDR
// end ;
42173: LD_VAR 0 6
42177: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42178: LD_INT 0
42180: PPUSH
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
42236: PPUSH
42237: PPUSH
// result = [ ] ;
42238: LD_ADDR_VAR 0 7
42242: PUSH
42243: EMPTY
42244: ST_TO_ADDR
// temp_list = [ ] ;
42245: LD_ADDR_VAR 0 9
42249: PUSH
42250: EMPTY
42251: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42252: LD_VAR 0 4
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 4
42271: PUSH
42272: LD_INT 5
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: IN
42283: NOT
42284: IFTRUE 42327
42286: PUSH
42287: LD_VAR 0 1
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: IN
42302: IFFALSE 42326
42304: PUSH
42305: LD_VAR 0 5
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 3
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: IN
42324: NOT
42325: AND
42326: OR
42327: IFFALSE 42331
// exit ;
42329: GO 60730
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42331: LD_VAR 0 1
42335: PUSH
42336: LD_INT 6
42338: PUSH
42339: LD_INT 7
42341: PUSH
42342: LD_INT 8
42344: PUSH
42345: LD_INT 13
42347: PUSH
42348: LD_INT 12
42350: PUSH
42351: LD_INT 15
42353: PUSH
42354: LD_INT 11
42356: PUSH
42357: LD_INT 14
42359: PUSH
42360: LD_INT 10
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: IN
42374: IFFALSE 42384
// btype = b_lab ;
42376: LD_ADDR_VAR 0 1
42380: PUSH
42381: LD_INT 6
42383: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42384: LD_VAR 0 6
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: IN
42403: NOT
42404: IFTRUE 42472
42406: PUSH
42407: LD_VAR 0 1
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 6
42426: PUSH
42427: LD_INT 36
42429: PUSH
42430: LD_INT 4
42432: PUSH
42433: LD_INT 5
42435: PUSH
42436: LD_INT 31
42438: PUSH
42439: LD_INT 32
42441: PUSH
42442: LD_INT 33
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: IN
42458: NOT
42459: IFFALSE 42471
42461: PUSH
42462: LD_VAR 0 6
42466: PUSH
42467: LD_INT 1
42469: EQUAL
42470: AND
42471: OR
42472: IFTRUE 42504
42474: PUSH
42475: LD_VAR 0 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: IN
42490: NOT
42491: IFFALSE 42503
42493: PUSH
42494: LD_VAR 0 6
42498: PUSH
42499: LD_INT 2
42501: EQUAL
42502: AND
42503: OR
42504: IFFALSE 42514
// mode = 0 ;
42506: LD_ADDR_VAR 0 6
42510: PUSH
42511: LD_INT 0
42513: ST_TO_ADDR
// case mode of 0 :
42514: LD_VAR 0 6
42518: PUSH
42519: LD_INT 0
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 53980
42527: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42528: LD_ADDR_VAR 0 11
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42721: LD_ADDR_VAR 0 12
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42917: LD_ADDR_VAR 0 13
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 3
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: LD_INT 3
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43116: LD_ADDR_VAR 0 14
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 3
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 3
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43312: LD_ADDR_VAR 0 15
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43505: LD_ADDR_VAR 0 16
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 3
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43698: LD_ADDR_VAR 0 17
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43928: LD_ADDR_VAR 0 18
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44158: LD_ADDR_VAR 0 19
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44388: LD_ADDR_VAR 0 20
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44618: LD_ADDR_VAR 0 21
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44848: LD_ADDR_VAR 0 22
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45078: LD_ADDR_VAR 0 23
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45358: LD_ADDR_VAR 0 24
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45634: LD_ADDR_VAR 0 25
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 2
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45908: LD_ADDR_VAR 0 26
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46184: LD_ADDR_VAR 0 27
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46464: LD_ADDR_VAR 0 28
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46746: LD_ADDR_VAR 0 29
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47025: LD_ADDR_VAR 0 30
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47303: LD_ADDR_VAR 0 31
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: LD_INT 3
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47581: LD_ADDR_VAR 0 32
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47859: LD_ADDR_VAR 0 33
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48138: LD_ADDR_VAR 0 34
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48418: LD_ADDR_VAR 0 35
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48530: LD_ADDR_VAR 0 36
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48642: LD_ADDR_VAR 0 37
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48754: LD_ADDR_VAR 0 38
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48866: LD_ADDR_VAR 0 39
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48978: LD_ADDR_VAR 0 40
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49090: LD_ADDR_VAR 0 41
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 3
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49440: LD_ADDR_VAR 0 42
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 3
49737: NEG
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49790: LD_ADDR_VAR 0 43
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50138: LD_ADDR_VAR 0 44
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: LD_INT 3
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50488: LD_ADDR_VAR 0 45
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 3
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: NEG
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50838: LD_ADDR_VAR 0 46
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51186: LD_ADDR_VAR 0 47
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51337: LD_ADDR_VAR 0 48
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51484: LD_ADDR_VAR 0 49
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51628: LD_ADDR_VAR 0 50
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51772: LD_ADDR_VAR 0 51
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51919: LD_ADDR_VAR 0 52
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52070: LD_ADDR_VAR 0 53
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52300: LD_ADDR_VAR 0 54
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52530: LD_ADDR_VAR 0 55
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52760: LD_ADDR_VAR 0 56
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52990: LD_ADDR_VAR 0 57
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53220: LD_ADDR_VAR 0 58
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 59
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53538: LD_ADDR_VAR 0 60
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53626: LD_ADDR_VAR 0 61
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53714: LD_ADDR_VAR 0 62
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53802: LD_ADDR_VAR 0 63
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53890: LD_ADDR_VAR 0 64
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// end ; 1 :
53978: GO 59875
53980: LD_INT 1
53982: DOUBLE
53983: EQUAL
53984: IFTRUE 53988
53986: GO 56611
53988: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53989: LD_ADDR_VAR 0 11
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54033: LD_ADDR_VAR 0 12
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54074: LD_ADDR_VAR 0 13
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54114: LD_ADDR_VAR 0 14
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54155: LD_ADDR_VAR 0 15
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: LIST
54198: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54199: LD_ADDR_VAR 0 16
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54245: LD_ADDR_VAR 0 17
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54289: LD_ADDR_VAR 0 18
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54330: LD_ADDR_VAR 0 19
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54370: LD_ADDR_VAR 0 20
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54411: LD_ADDR_VAR 0 21
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54455: LD_ADDR_VAR 0 22
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54501: LD_ADDR_VAR 0 23
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 4
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54545: LD_ADDR_VAR 0 24
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 4
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54586: LD_ADDR_VAR 0 25
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54626: LD_ADDR_VAR 0 26
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 4
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54667: LD_ADDR_VAR 0 27
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 4
54696: NEG
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54711: LD_ADDR_VAR 0 28
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: LD_INT 4
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 4
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54757: LD_ADDR_VAR 0 29
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 5
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 5
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 4
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 6
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 6
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 5
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54912: LD_ADDR_VAR 0 30
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 5
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 6
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 6
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55055: LD_ADDR_VAR 0 31
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 4
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 5
55122: PUSH
55123: LD_INT 4
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 5
55132: PUSH
55133: LD_INT 5
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 4
55142: PUSH
55143: LD_INT 5
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 6
55152: PUSH
55153: LD_INT 5
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 6
55162: PUSH
55163: LD_INT 6
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 5
55172: PUSH
55173: LD_INT 6
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55194: LD_ADDR_VAR 0 32
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 4
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 5
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 6
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 6
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 5
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55337: LD_ADDR_VAR 0 33
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 4
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 4
55412: NEG
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: NEG
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 5
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 5
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 6
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 6
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55492: LD_ADDR_VAR 0 34
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 3
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: NEG
55572: PUSH
55573: LD_INT 5
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: LD_INT 4
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: NEG
55596: PUSH
55597: LD_INT 5
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 6
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 6
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 6
55631: NEG
55632: PUSH
55633: LD_INT 6
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55655: LD_ADDR_VAR 0 41
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55699: LD_ADDR_VAR 0 42
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55740: LD_ADDR_VAR 0 43
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55780: LD_ADDR_VAR 0 44
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55821: LD_ADDR_VAR 0 45
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55865: LD_ADDR_VAR 0 46
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 3
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55911: LD_ADDR_VAR 0 47
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55944: LD_ADDR_VAR 0 48
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55975: LD_ADDR_VAR 0 49
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56004: LD_ADDR_VAR 0 50
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56033: LD_ADDR_VAR 0 51
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56064: LD_ADDR_VAR 0 52
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56097: LD_ADDR_VAR 0 53
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 3
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56141: LD_ADDR_VAR 0 54
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56182: LD_ADDR_VAR 0 55
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56222: LD_ADDR_VAR 0 56
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56263: LD_ADDR_VAR 0 57
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56307: LD_ADDR_VAR 0 58
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: NEG
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: NEG
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56353: LD_ADDR_VAR 0 59
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56397: LD_ADDR_VAR 0 60
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56438: LD_ADDR_VAR 0 61
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56478: LD_ADDR_VAR 0 62
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56519: LD_ADDR_VAR 0 63
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56563: LD_ADDR_VAR 0 64
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// end ; 2 :
56609: GO 59875
56611: LD_INT 2
56613: DOUBLE
56614: EQUAL
56615: IFTRUE 56619
56617: GO 59874
56619: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56620: LD_ADDR_VAR 0 29
56624: PUSH
56625: LD_INT 4
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 5
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 4
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 4
56750: PUSH
56751: LD_INT 4
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 4
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: LD_INT 4
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 4
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 5
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 4
56959: NEG
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 4
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 4
57005: NEG
57006: PUSH
57007: LD_INT 4
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 4
57017: NEG
57018: PUSH
57019: LD_INT 5
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: LD_INT 4
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 5
57065: NEG
57066: PUSH
57067: LD_INT 4
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 5
57077: NEG
57078: PUSH
57079: LD_INT 5
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 5
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 5
57101: NEG
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57158: LD_ADDR_VAR 0 30
57162: PUSH
57163: LD_INT 4
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 4
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 5
57185: PUSH
57186: LD_INT 4
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 5
57195: PUSH
57196: LD_INT 5
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: LD_INT 5
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 4
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 5
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 4
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 4
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 3
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 4
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 5
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 5
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 5
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: LD_INT 4
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: NEG
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 4
57522: NEG
57523: PUSH
57524: LD_INT 4
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 4
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 4
57546: NEG
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 4
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 3
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: LD_INT 4
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 5
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57705: LD_ADDR_VAR 0 31
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 4
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 5
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 5
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 5
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 4
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 4
57907: NEG
57908: PUSH
57909: LD_INT 4
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 4
57919: NEG
57920: PUSH
57921: LD_INT 5
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 4
57955: NEG
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 5
57967: NEG
57968: PUSH
57969: LD_INT 4
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: NEG
57980: PUSH
57981: LD_INT 5
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 5
58003: NEG
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 4
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 4
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 4
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 4
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 5
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 4
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58255: LD_ADDR_VAR 0 32
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 4
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 5
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 5
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 4
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: NEG
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: NEG
58437: PUSH
58438: LD_INT 4
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 4
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 4
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 5
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: LD_INT 4
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 3
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 3
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: LD_INT 5
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 5
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 4
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 5
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 5
58697: PUSH
58698: LD_INT 5
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 3
58717: PUSH
58718: LD_INT 4
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: LD_INT 3
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 5
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: LD_INT 5
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58802: LD_ADDR_VAR 0 33
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 4
58821: NEG
58822: PUSH
58823: LD_INT 5
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 3
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 5
58869: NEG
58870: PUSH
58871: LD_INT 4
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: NEG
58882: PUSH
58883: LD_INT 5
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 3
58893: NEG
58894: PUSH
58895: LD_INT 5
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 5
58905: NEG
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 4
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 3
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 4
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 5
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 4
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 4
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 3
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 4
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 5
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 5
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59340: LD_ADDR_VAR 0 34
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 4
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 5
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 4
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 4
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 5
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: LD_INT 5
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 3
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 4
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 4
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 4
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 5
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 5
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: LD_INT 4
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 5
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: LD_INT 5
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 4
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 4
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 4
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 5
59781: NEG
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 5
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// end ; end ;
59872: GO 59875
59874: POP
// case btype of b_depot , b_warehouse :
59875: LD_VAR 0 1
59879: PUSH
59880: LD_INT 0
59882: DOUBLE
59883: EQUAL
59884: IFTRUE 59894
59886: LD_INT 1
59888: DOUBLE
59889: EQUAL
59890: IFTRUE 59894
59892: GO 60095
59894: POP
// case nation of nation_american :
59895: LD_VAR 0 5
59899: PUSH
59900: LD_INT 1
59902: DOUBLE
59903: EQUAL
59904: IFTRUE 59908
59906: GO 59964
59908: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59909: LD_ADDR_VAR 0 9
59913: PUSH
59914: LD_VAR 0 11
59918: PUSH
59919: LD_VAR 0 12
59923: PUSH
59924: LD_VAR 0 13
59928: PUSH
59929: LD_VAR 0 14
59933: PUSH
59934: LD_VAR 0 15
59938: PUSH
59939: LD_VAR 0 16
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: PUSH
59952: LD_VAR 0 4
59956: PUSH
59957: LD_INT 1
59959: PLUS
59960: ARRAY
59961: ST_TO_ADDR
59962: GO 60093
59964: LD_INT 2
59966: DOUBLE
59967: EQUAL
59968: IFTRUE 59972
59970: GO 60028
59972: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59973: LD_ADDR_VAR 0 9
59977: PUSH
59978: LD_VAR 0 17
59982: PUSH
59983: LD_VAR 0 18
59987: PUSH
59988: LD_VAR 0 19
59992: PUSH
59993: LD_VAR 0 20
59997: PUSH
59998: LD_VAR 0 21
60002: PUSH
60003: LD_VAR 0 22
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: PUSH
60016: LD_VAR 0 4
60020: PUSH
60021: LD_INT 1
60023: PLUS
60024: ARRAY
60025: ST_TO_ADDR
60026: GO 60093
60028: LD_INT 3
60030: DOUBLE
60031: EQUAL
60032: IFTRUE 60036
60034: GO 60092
60036: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60037: LD_ADDR_VAR 0 9
60041: PUSH
60042: LD_VAR 0 23
60046: PUSH
60047: LD_VAR 0 24
60051: PUSH
60052: LD_VAR 0 25
60056: PUSH
60057: LD_VAR 0 26
60061: PUSH
60062: LD_VAR 0 27
60066: PUSH
60067: LD_VAR 0 28
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: PUSH
60080: LD_VAR 0 4
60084: PUSH
60085: LD_INT 1
60087: PLUS
60088: ARRAY
60089: ST_TO_ADDR
60090: GO 60093
60092: POP
60093: GO 60648
60095: LD_INT 2
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60109
60101: LD_INT 3
60103: DOUBLE
60104: EQUAL
60105: IFTRUE 60109
60107: GO 60165
60109: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60110: LD_ADDR_VAR 0 9
60114: PUSH
60115: LD_VAR 0 29
60119: PUSH
60120: LD_VAR 0 30
60124: PUSH
60125: LD_VAR 0 31
60129: PUSH
60130: LD_VAR 0 32
60134: PUSH
60135: LD_VAR 0 33
60139: PUSH
60140: LD_VAR 0 34
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: PUSH
60153: LD_VAR 0 4
60157: PUSH
60158: LD_INT 1
60160: PLUS
60161: ARRAY
60162: ST_TO_ADDR
60163: GO 60648
60165: LD_INT 16
60167: DOUBLE
60168: EQUAL
60169: IFTRUE 60227
60171: LD_INT 17
60173: DOUBLE
60174: EQUAL
60175: IFTRUE 60227
60177: LD_INT 18
60179: DOUBLE
60180: EQUAL
60181: IFTRUE 60227
60183: LD_INT 19
60185: DOUBLE
60186: EQUAL
60187: IFTRUE 60227
60189: LD_INT 22
60191: DOUBLE
60192: EQUAL
60193: IFTRUE 60227
60195: LD_INT 20
60197: DOUBLE
60198: EQUAL
60199: IFTRUE 60227
60201: LD_INT 21
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60227
60207: LD_INT 23
60209: DOUBLE
60210: EQUAL
60211: IFTRUE 60227
60213: LD_INT 24
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60227
60219: LD_INT 25
60221: DOUBLE
60222: EQUAL
60223: IFTRUE 60227
60225: GO 60283
60227: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60228: LD_ADDR_VAR 0 9
60232: PUSH
60233: LD_VAR 0 35
60237: PUSH
60238: LD_VAR 0 36
60242: PUSH
60243: LD_VAR 0 37
60247: PUSH
60248: LD_VAR 0 38
60252: PUSH
60253: LD_VAR 0 39
60257: PUSH
60258: LD_VAR 0 40
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_VAR 0 4
60275: PUSH
60276: LD_INT 1
60278: PLUS
60279: ARRAY
60280: ST_TO_ADDR
60281: GO 60648
60283: LD_INT 6
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60339
60289: LD_INT 7
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60339
60295: LD_INT 8
60297: DOUBLE
60298: EQUAL
60299: IFTRUE 60339
60301: LD_INT 13
60303: DOUBLE
60304: EQUAL
60305: IFTRUE 60339
60307: LD_INT 12
60309: DOUBLE
60310: EQUAL
60311: IFTRUE 60339
60313: LD_INT 15
60315: DOUBLE
60316: EQUAL
60317: IFTRUE 60339
60319: LD_INT 11
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60339
60325: LD_INT 14
60327: DOUBLE
60328: EQUAL
60329: IFTRUE 60339
60331: LD_INT 10
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60339
60337: GO 60395
60339: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60340: LD_ADDR_VAR 0 9
60344: PUSH
60345: LD_VAR 0 41
60349: PUSH
60350: LD_VAR 0 42
60354: PUSH
60355: LD_VAR 0 43
60359: PUSH
60360: LD_VAR 0 44
60364: PUSH
60365: LD_VAR 0 45
60369: PUSH
60370: LD_VAR 0 46
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: LD_VAR 0 4
60387: PUSH
60388: LD_INT 1
60390: PLUS
60391: ARRAY
60392: ST_TO_ADDR
60393: GO 60648
60395: LD_INT 36
60397: DOUBLE
60398: EQUAL
60399: IFTRUE 60403
60401: GO 60459
60403: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60404: LD_ADDR_VAR 0 9
60408: PUSH
60409: LD_VAR 0 47
60413: PUSH
60414: LD_VAR 0 48
60418: PUSH
60419: LD_VAR 0 49
60423: PUSH
60424: LD_VAR 0 50
60428: PUSH
60429: LD_VAR 0 51
60433: PUSH
60434: LD_VAR 0 52
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: PUSH
60447: LD_VAR 0 4
60451: PUSH
60452: LD_INT 1
60454: PLUS
60455: ARRAY
60456: ST_TO_ADDR
60457: GO 60648
60459: LD_INT 4
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60485
60465: LD_INT 5
60467: DOUBLE
60468: EQUAL
60469: IFTRUE 60485
60471: LD_INT 34
60473: DOUBLE
60474: EQUAL
60475: IFTRUE 60485
60477: LD_INT 37
60479: DOUBLE
60480: EQUAL
60481: IFTRUE 60485
60483: GO 60541
60485: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60486: LD_ADDR_VAR 0 9
60490: PUSH
60491: LD_VAR 0 53
60495: PUSH
60496: LD_VAR 0 54
60500: PUSH
60501: LD_VAR 0 55
60505: PUSH
60506: LD_VAR 0 56
60510: PUSH
60511: LD_VAR 0 57
60515: PUSH
60516: LD_VAR 0 58
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: PUSH
60529: LD_VAR 0 4
60533: PUSH
60534: LD_INT 1
60536: PLUS
60537: ARRAY
60538: ST_TO_ADDR
60539: GO 60648
60541: LD_INT 31
60543: DOUBLE
60544: EQUAL
60545: IFTRUE 60591
60547: LD_INT 32
60549: DOUBLE
60550: EQUAL
60551: IFTRUE 60591
60553: LD_INT 33
60555: DOUBLE
60556: EQUAL
60557: IFTRUE 60591
60559: LD_INT 27
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60591
60565: LD_INT 26
60567: DOUBLE
60568: EQUAL
60569: IFTRUE 60591
60571: LD_INT 28
60573: DOUBLE
60574: EQUAL
60575: IFTRUE 60591
60577: LD_INT 29
60579: DOUBLE
60580: EQUAL
60581: IFTRUE 60591
60583: LD_INT 30
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60591
60589: GO 60647
60591: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60592: LD_ADDR_VAR 0 9
60596: PUSH
60597: LD_VAR 0 59
60601: PUSH
60602: LD_VAR 0 60
60606: PUSH
60607: LD_VAR 0 61
60611: PUSH
60612: LD_VAR 0 62
60616: PUSH
60617: LD_VAR 0 63
60621: PUSH
60622: LD_VAR 0 64
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: PUSH
60635: LD_VAR 0 4
60639: PUSH
60640: LD_INT 1
60642: PLUS
60643: ARRAY
60644: ST_TO_ADDR
60645: GO 60648
60647: POP
// temp_list2 = [ ] ;
60648: LD_ADDR_VAR 0 10
60652: PUSH
60653: EMPTY
60654: ST_TO_ADDR
// for i in temp_list do
60655: LD_ADDR_VAR 0 8
60659: PUSH
60660: LD_VAR 0 9
60664: PUSH
60665: FOR_IN
60666: IFFALSE 60718
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60668: LD_ADDR_VAR 0 10
60672: PUSH
60673: LD_VAR 0 10
60677: PUSH
60678: LD_VAR 0 8
60682: PUSH
60683: LD_INT 1
60685: ARRAY
60686: PUSH
60687: LD_VAR 0 2
60691: PLUS
60692: PUSH
60693: LD_VAR 0 8
60697: PUSH
60698: LD_INT 2
60700: ARRAY
60701: PUSH
60702: LD_VAR 0 3
60706: PLUS
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: ADD
60715: ST_TO_ADDR
60716: GO 60665
60718: POP
60719: POP
// result = temp_list2 ;
60720: LD_ADDR_VAR 0 7
60724: PUSH
60725: LD_VAR 0 10
60729: ST_TO_ADDR
// end ;
60730: LD_VAR 0 7
60734: RET
// export function EnemyInRange ( unit , dist ) ; begin
60735: LD_INT 0
60737: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60738: LD_ADDR_VAR 0 3
60742: PUSH
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 255
60752: PPUSH
60753: LD_VAR 0 1
60757: PPUSH
60758: CALL_OW 250
60762: PPUSH
60763: LD_VAR 0 1
60767: PPUSH
60768: CALL_OW 251
60772: PPUSH
60773: LD_VAR 0 2
60777: PPUSH
60778: CALL 33992 0 4
60782: PUSH
60783: LD_INT 4
60785: ARRAY
60786: ST_TO_ADDR
// end ;
60787: LD_VAR 0 3
60791: RET
// export function PlayerSeeMe ( unit ) ; begin
60792: LD_INT 0
60794: PPUSH
// result := See ( your_side , unit ) ;
60795: LD_ADDR_VAR 0 2
60799: PUSH
60800: LD_OWVAR 2
60804: PPUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 292
60814: ST_TO_ADDR
// end ;
60815: LD_VAR 0 2
60819: RET
// export function ReverseDir ( unit ) ; begin
60820: LD_INT 0
60822: PPUSH
// if not unit then
60823: LD_VAR 0 1
60827: NOT
60828: IFFALSE 60832
// exit ;
60830: GO 60855
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60832: LD_ADDR_VAR 0 2
60836: PUSH
60837: LD_VAR 0 1
60841: PPUSH
60842: CALL_OW 254
60846: PUSH
60847: LD_INT 3
60849: PLUS
60850: PUSH
60851: LD_INT 6
60853: MOD
60854: ST_TO_ADDR
// end ;
60855: LD_VAR 0 2
60859: RET
// export function ReverseArray ( array ) ; var i ; begin
60860: LD_INT 0
60862: PPUSH
60863: PPUSH
// if not array then
60864: LD_VAR 0 1
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 60928
// result := [ ] ;
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: EMPTY
60879: ST_TO_ADDR
// for i := array downto 1 do
60880: LD_ADDR_VAR 0 3
60884: PUSH
60885: DOUBLE
60886: LD_VAR 0 1
60890: INC
60891: ST_TO_ADDR
60892: LD_INT 1
60894: PUSH
60895: FOR_DOWNTO
60896: IFFALSE 60926
// result := Join ( result , array [ i ] ) ;
60898: LD_ADDR_VAR 0 2
60902: PUSH
60903: LD_VAR 0 2
60907: PPUSH
60908: LD_VAR 0 1
60912: PUSH
60913: LD_VAR 0 3
60917: ARRAY
60918: PPUSH
60919: CALL 65770 0 2
60923: ST_TO_ADDR
60924: GO 60895
60926: POP
60927: POP
// end ;
60928: LD_VAR 0 2
60932: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60933: LD_INT 0
60935: PPUSH
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
// if not unit or not hexes then
60941: LD_VAR 0 1
60945: NOT
60946: IFTRUE 60955
60948: PUSH
60949: LD_VAR 0 2
60953: NOT
60954: OR
60955: IFFALSE 60959
// exit ;
60957: GO 61082
// dist := 9999 ;
60959: LD_ADDR_VAR 0 5
60963: PUSH
60964: LD_INT 9999
60966: ST_TO_ADDR
// for i = 1 to hexes do
60967: LD_ADDR_VAR 0 4
60971: PUSH
60972: DOUBLE
60973: LD_INT 1
60975: DEC
60976: ST_TO_ADDR
60977: LD_VAR 0 2
60981: PUSH
60982: FOR_TO
60983: IFFALSE 61070
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60985: LD_ADDR_VAR 0 6
60989: PUSH
60990: LD_VAR 0 1
60994: PPUSH
60995: LD_VAR 0 2
60999: PUSH
61000: LD_VAR 0 4
61004: ARRAY
61005: PUSH
61006: LD_INT 1
61008: ARRAY
61009: PPUSH
61010: LD_VAR 0 2
61014: PUSH
61015: LD_VAR 0 4
61019: ARRAY
61020: PUSH
61021: LD_INT 2
61023: ARRAY
61024: PPUSH
61025: CALL_OW 297
61029: ST_TO_ADDR
// if tdist < dist then
61030: LD_VAR 0 6
61034: PUSH
61035: LD_VAR 0 5
61039: LESS
61040: IFFALSE 61068
// begin hex := hexes [ i ] ;
61042: LD_ADDR_VAR 0 8
61046: PUSH
61047: LD_VAR 0 2
61051: PUSH
61052: LD_VAR 0 4
61056: ARRAY
61057: ST_TO_ADDR
// dist := tdist ;
61058: LD_ADDR_VAR 0 5
61062: PUSH
61063: LD_VAR 0 6
61067: ST_TO_ADDR
// end ; end ;
61068: GO 60982
61070: POP
61071: POP
// result := hex ;
61072: LD_ADDR_VAR 0 3
61076: PUSH
61077: LD_VAR 0 8
61081: ST_TO_ADDR
// end ;
61082: LD_VAR 0 3
61086: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61087: LD_INT 0
61089: PPUSH
61090: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61091: LD_VAR 0 1
61095: NOT
61096: IFTRUE 61135
61098: PUSH
61099: LD_VAR 0 1
61103: PUSH
61104: LD_INT 21
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 23
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PPUSH
61128: CALL_OW 69
61132: IN
61133: NOT
61134: OR
61135: IFFALSE 61139
// exit ;
61137: GO 61186
// for i = 1 to 3 do
61139: LD_ADDR_VAR 0 3
61143: PUSH
61144: DOUBLE
61145: LD_INT 1
61147: DEC
61148: ST_TO_ADDR
61149: LD_INT 3
61151: PUSH
61152: FOR_TO
61153: IFFALSE 61184
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61155: LD_VAR 0 1
61159: PPUSH
61160: CALL_OW 250
61164: PPUSH
61165: LD_VAR 0 1
61169: PPUSH
61170: CALL_OW 251
61174: PPUSH
61175: LD_INT 1
61177: PPUSH
61178: CALL_OW 453
61182: GO 61152
61184: POP
61185: POP
// end ;
61186: LD_VAR 0 2
61190: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61191: LD_INT 0
61193: PPUSH
61194: PPUSH
61195: PPUSH
61196: PPUSH
61197: PPUSH
61198: PPUSH
// if not unit or not enemy_unit then
61199: LD_VAR 0 1
61203: NOT
61204: IFTRUE 61213
61206: PUSH
61207: LD_VAR 0 2
61211: NOT
61212: OR
61213: IFFALSE 61217
// exit ;
61215: GO 61688
// if GetLives ( i ) < 250 then
61217: LD_VAR 0 4
61221: PPUSH
61222: CALL_OW 256
61226: PUSH
61227: LD_INT 250
61229: LESS
61230: IFFALSE 61243
// begin ComAutodestruct ( i ) ;
61232: LD_VAR 0 4
61236: PPUSH
61237: CALL 61087 0 1
// exit ;
61241: GO 61688
// end ; x := GetX ( enemy_unit ) ;
61243: LD_ADDR_VAR 0 7
61247: PUSH
61248: LD_VAR 0 2
61252: PPUSH
61253: CALL_OW 250
61257: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61258: LD_ADDR_VAR 0 8
61262: PUSH
61263: LD_VAR 0 2
61267: PPUSH
61268: CALL_OW 251
61272: ST_TO_ADDR
// if not x or not y then
61273: LD_VAR 0 7
61277: NOT
61278: IFTRUE 61287
61280: PUSH
61281: LD_VAR 0 8
61285: NOT
61286: OR
61287: IFFALSE 61291
// exit ;
61289: GO 61688
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61291: LD_ADDR_VAR 0 6
61295: PUSH
61296: LD_VAR 0 7
61300: PPUSH
61301: LD_INT 0
61303: PPUSH
61304: LD_INT 4
61306: PPUSH
61307: CALL_OW 272
61311: PUSH
61312: LD_VAR 0 8
61316: PPUSH
61317: LD_INT 0
61319: PPUSH
61320: LD_INT 4
61322: PPUSH
61323: CALL_OW 273
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_VAR 0 7
61336: PPUSH
61337: LD_INT 1
61339: PPUSH
61340: LD_INT 4
61342: PPUSH
61343: CALL_OW 272
61347: PUSH
61348: LD_VAR 0 8
61352: PPUSH
61353: LD_INT 1
61355: PPUSH
61356: LD_INT 4
61358: PPUSH
61359: CALL_OW 273
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_VAR 0 7
61372: PPUSH
61373: LD_INT 2
61375: PPUSH
61376: LD_INT 4
61378: PPUSH
61379: CALL_OW 272
61383: PUSH
61384: LD_VAR 0 8
61388: PPUSH
61389: LD_INT 2
61391: PPUSH
61392: LD_INT 4
61394: PPUSH
61395: CALL_OW 273
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_VAR 0 7
61408: PPUSH
61409: LD_INT 3
61411: PPUSH
61412: LD_INT 4
61414: PPUSH
61415: CALL_OW 272
61419: PUSH
61420: LD_VAR 0 8
61424: PPUSH
61425: LD_INT 3
61427: PPUSH
61428: LD_INT 4
61430: PPUSH
61431: CALL_OW 273
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_VAR 0 7
61444: PPUSH
61445: LD_INT 4
61447: PPUSH
61448: LD_INT 4
61450: PPUSH
61451: CALL_OW 272
61455: PUSH
61456: LD_VAR 0 8
61460: PPUSH
61461: LD_INT 4
61463: PPUSH
61464: LD_INT 4
61466: PPUSH
61467: CALL_OW 273
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_VAR 0 7
61480: PPUSH
61481: LD_INT 5
61483: PPUSH
61484: LD_INT 4
61486: PPUSH
61487: CALL_OW 272
61491: PUSH
61492: LD_VAR 0 8
61496: PPUSH
61497: LD_INT 5
61499: PPUSH
61500: LD_INT 4
61502: PPUSH
61503: CALL_OW 273
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: ST_TO_ADDR
// for i = tmp downto 1 do
61520: LD_ADDR_VAR 0 4
61524: PUSH
61525: DOUBLE
61526: LD_VAR 0 6
61530: INC
61531: ST_TO_ADDR
61532: LD_INT 1
61534: PUSH
61535: FOR_DOWNTO
61536: IFFALSE 61639
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61538: LD_VAR 0 6
61542: PUSH
61543: LD_VAR 0 4
61547: ARRAY
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PPUSH
61553: LD_VAR 0 6
61557: PUSH
61558: LD_VAR 0 4
61562: ARRAY
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: PPUSH
61568: CALL_OW 488
61572: NOT
61573: IFTRUE 61615
61575: PUSH
61576: LD_VAR 0 6
61580: PUSH
61581: LD_VAR 0 4
61585: ARRAY
61586: PUSH
61587: LD_INT 1
61589: ARRAY
61590: PPUSH
61591: LD_VAR 0 6
61595: PUSH
61596: LD_VAR 0 4
61600: ARRAY
61601: PUSH
61602: LD_INT 2
61604: ARRAY
61605: PPUSH
61606: CALL_OW 428
61610: PUSH
61611: LD_INT 0
61613: NONEQUAL
61614: OR
61615: IFFALSE 61637
// tmp := Delete ( tmp , i ) ;
61617: LD_ADDR_VAR 0 6
61621: PUSH
61622: LD_VAR 0 6
61626: PPUSH
61627: LD_VAR 0 4
61631: PPUSH
61632: CALL_OW 3
61636: ST_TO_ADDR
61637: GO 61535
61639: POP
61640: POP
// j := GetClosestHex ( unit , tmp ) ;
61641: LD_ADDR_VAR 0 5
61645: PUSH
61646: LD_VAR 0 1
61650: PPUSH
61651: LD_VAR 0 6
61655: PPUSH
61656: CALL 60933 0 2
61660: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61661: LD_VAR 0 1
61665: PPUSH
61666: LD_VAR 0 5
61670: PUSH
61671: LD_INT 1
61673: ARRAY
61674: PPUSH
61675: LD_VAR 0 5
61679: PUSH
61680: LD_INT 2
61682: ARRAY
61683: PPUSH
61684: CALL_OW 111
// end ;
61688: LD_VAR 0 3
61692: RET
// export function PrepareApemanSoldier ( ) ; begin
61693: LD_INT 0
61695: PPUSH
// uc_nation := 0 ;
61696: LD_ADDR_OWVAR 21
61700: PUSH
61701: LD_INT 0
61703: ST_TO_ADDR
// hc_sex := sex_male ;
61704: LD_ADDR_OWVAR 27
61708: PUSH
61709: LD_INT 1
61711: ST_TO_ADDR
// hc_name :=  ;
61712: LD_ADDR_OWVAR 26
61716: PUSH
61717: LD_STRING 
61719: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61720: LD_ADDR_OWVAR 28
61724: PUSH
61725: LD_INT 15
61727: ST_TO_ADDR
// hc_gallery :=  ;
61728: LD_ADDR_OWVAR 33
61732: PUSH
61733: LD_STRING 
61735: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61736: LD_ADDR_OWVAR 31
61740: PUSH
61741: LD_INT 0
61743: PPUSH
61744: LD_INT 3
61746: PPUSH
61747: CALL_OW 12
61751: PUSH
61752: LD_INT 0
61754: PPUSH
61755: LD_INT 3
61757: PPUSH
61758: CALL_OW 12
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61775: LD_ADDR_OWVAR 29
61779: PUSH
61780: LD_INT 12
61782: PUSH
61783: LD_INT 12
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// end ;
61790: LD_VAR 0 1
61794: RET
// export function PrepareApemanEngineer ( ) ; begin
61795: LD_INT 0
61797: PPUSH
// uc_nation := 0 ;
61798: LD_ADDR_OWVAR 21
61802: PUSH
61803: LD_INT 0
61805: ST_TO_ADDR
// hc_sex := sex_male ;
61806: LD_ADDR_OWVAR 27
61810: PUSH
61811: LD_INT 1
61813: ST_TO_ADDR
// hc_name :=  ;
61814: LD_ADDR_OWVAR 26
61818: PUSH
61819: LD_STRING 
61821: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61822: LD_ADDR_OWVAR 28
61826: PUSH
61827: LD_INT 16
61829: ST_TO_ADDR
// hc_gallery :=  ;
61830: LD_ADDR_OWVAR 33
61834: PUSH
61835: LD_STRING 
61837: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61838: LD_ADDR_OWVAR 31
61842: PUSH
61843: LD_INT 0
61845: PPUSH
61846: LD_INT 3
61848: PPUSH
61849: CALL_OW 12
61853: PUSH
61854: LD_INT 0
61856: PPUSH
61857: LD_INT 3
61859: PPUSH
61860: CALL_OW 12
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61877: LD_ADDR_OWVAR 29
61881: PUSH
61882: LD_INT 12
61884: PUSH
61885: LD_INT 12
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: ST_TO_ADDR
// end ;
61892: LD_VAR 0 1
61896: RET
// export function PrepareApeman ( agressivity ) ; begin
61897: LD_INT 0
61899: PPUSH
// uc_side := 0 ;
61900: LD_ADDR_OWVAR 20
61904: PUSH
61905: LD_INT 0
61907: ST_TO_ADDR
// uc_nation := 0 ;
61908: LD_ADDR_OWVAR 21
61912: PUSH
61913: LD_INT 0
61915: ST_TO_ADDR
// hc_sex := sex_male ;
61916: LD_ADDR_OWVAR 27
61920: PUSH
61921: LD_INT 1
61923: ST_TO_ADDR
// hc_class := class_apeman ;
61924: LD_ADDR_OWVAR 28
61928: PUSH
61929: LD_INT 12
61931: ST_TO_ADDR
// hc_gallery :=  ;
61932: LD_ADDR_OWVAR 33
61936: PUSH
61937: LD_STRING 
61939: ST_TO_ADDR
// hc_name :=  ;
61940: LD_ADDR_OWVAR 26
61944: PUSH
61945: LD_STRING 
61947: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61948: LD_ADDR_OWVAR 29
61952: PUSH
61953: LD_INT 12
61955: PUSH
61956: LD_INT 12
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// if agressivity = 0 then
61963: LD_VAR 0 1
61967: PUSH
61968: LD_INT 0
61970: EQUAL
61971: IFFALSE 61983
// hc_agressivity := 0 else
61973: LD_ADDR_OWVAR 35
61977: PUSH
61978: LD_INT 0
61980: ST_TO_ADDR
61981: GO 62004
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61983: LD_ADDR_OWVAR 35
61987: PUSH
61988: LD_VAR 0 1
61992: NEG
61993: PPUSH
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL_OW 12
62003: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62004: LD_ADDR_OWVAR 31
62008: PUSH
62009: LD_INT 0
62011: PPUSH
62012: LD_INT 3
62014: PPUSH
62015: CALL_OW 12
62019: PUSH
62020: LD_INT 0
62022: PPUSH
62023: LD_INT 3
62025: PPUSH
62026: CALL_OW 12
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: ST_TO_ADDR
// end ;
62043: LD_VAR 0 2
62047: RET
// export function PrepareTiger ( agressivity ) ; begin
62048: LD_INT 0
62050: PPUSH
// uc_side := 0 ;
62051: LD_ADDR_OWVAR 20
62055: PUSH
62056: LD_INT 0
62058: ST_TO_ADDR
// uc_nation := 0 ;
62059: LD_ADDR_OWVAR 21
62063: PUSH
62064: LD_INT 0
62066: ST_TO_ADDR
// InitHc ;
62067: CALL_OW 19
// hc_class := class_tiger ;
62071: LD_ADDR_OWVAR 28
62075: PUSH
62076: LD_INT 14
62078: ST_TO_ADDR
// hc_gallery :=  ;
62079: LD_ADDR_OWVAR 33
62083: PUSH
62084: LD_STRING 
62086: ST_TO_ADDR
// hc_name :=  ;
62087: LD_ADDR_OWVAR 26
62091: PUSH
62092: LD_STRING 
62094: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62095: LD_ADDR_OWVAR 35
62099: PUSH
62100: LD_VAR 0 1
62104: NEG
62105: PPUSH
62106: LD_VAR 0 1
62110: PPUSH
62111: CALL_OW 12
62115: ST_TO_ADDR
// end ;
62116: LD_VAR 0 2
62120: RET
// export function PrepareEnchidna ( ) ; begin
62121: LD_INT 0
62123: PPUSH
// uc_side := 0 ;
62124: LD_ADDR_OWVAR 20
62128: PUSH
62129: LD_INT 0
62131: ST_TO_ADDR
// uc_nation := 0 ;
62132: LD_ADDR_OWVAR 21
62136: PUSH
62137: LD_INT 0
62139: ST_TO_ADDR
// InitHc ;
62140: CALL_OW 19
// hc_class := class_baggie ;
62144: LD_ADDR_OWVAR 28
62148: PUSH
62149: LD_INT 13
62151: ST_TO_ADDR
// hc_gallery :=  ;
62152: LD_ADDR_OWVAR 33
62156: PUSH
62157: LD_STRING 
62159: ST_TO_ADDR
// hc_name :=  ;
62160: LD_ADDR_OWVAR 26
62164: PUSH
62165: LD_STRING 
62167: ST_TO_ADDR
// end ;
62168: LD_VAR 0 1
62172: RET
// export function PrepareFrog ( ) ; begin
62173: LD_INT 0
62175: PPUSH
// uc_side := 0 ;
62176: LD_ADDR_OWVAR 20
62180: PUSH
62181: LD_INT 0
62183: ST_TO_ADDR
// uc_nation := 0 ;
62184: LD_ADDR_OWVAR 21
62188: PUSH
62189: LD_INT 0
62191: ST_TO_ADDR
// InitHc ;
62192: CALL_OW 19
// hc_class := class_frog ;
62196: LD_ADDR_OWVAR 28
62200: PUSH
62201: LD_INT 19
62203: ST_TO_ADDR
// hc_gallery :=  ;
62204: LD_ADDR_OWVAR 33
62208: PUSH
62209: LD_STRING 
62211: ST_TO_ADDR
// hc_name :=  ;
62212: LD_ADDR_OWVAR 26
62216: PUSH
62217: LD_STRING 
62219: ST_TO_ADDR
// end ;
62220: LD_VAR 0 1
62224: RET
// export function PrepareFish ( ) ; begin
62225: LD_INT 0
62227: PPUSH
// uc_side := 0 ;
62228: LD_ADDR_OWVAR 20
62232: PUSH
62233: LD_INT 0
62235: ST_TO_ADDR
// uc_nation := 0 ;
62236: LD_ADDR_OWVAR 21
62240: PUSH
62241: LD_INT 0
62243: ST_TO_ADDR
// InitHc ;
62244: CALL_OW 19
// hc_class := class_fish ;
62248: LD_ADDR_OWVAR 28
62252: PUSH
62253: LD_INT 20
62255: ST_TO_ADDR
// hc_gallery :=  ;
62256: LD_ADDR_OWVAR 33
62260: PUSH
62261: LD_STRING 
62263: ST_TO_ADDR
// hc_name :=  ;
62264: LD_ADDR_OWVAR 26
62268: PUSH
62269: LD_STRING 
62271: ST_TO_ADDR
// end ;
62272: LD_VAR 0 1
62276: RET
// export function PrepareBird ( ) ; begin
62277: LD_INT 0
62279: PPUSH
// uc_side := 0 ;
62280: LD_ADDR_OWVAR 20
62284: PUSH
62285: LD_INT 0
62287: ST_TO_ADDR
// uc_nation := 0 ;
62288: LD_ADDR_OWVAR 21
62292: PUSH
62293: LD_INT 0
62295: ST_TO_ADDR
// InitHc ;
62296: CALL_OW 19
// hc_class := class_phororhacos ;
62300: LD_ADDR_OWVAR 28
62304: PUSH
62305: LD_INT 18
62307: ST_TO_ADDR
// hc_gallery :=  ;
62308: LD_ADDR_OWVAR 33
62312: PUSH
62313: LD_STRING 
62315: ST_TO_ADDR
// hc_name :=  ;
62316: LD_ADDR_OWVAR 26
62320: PUSH
62321: LD_STRING 
62323: ST_TO_ADDR
// end ;
62324: LD_VAR 0 1
62328: RET
// export function PrepareHorse ( ) ; begin
62329: LD_INT 0
62331: PPUSH
// uc_side := 0 ;
62332: LD_ADDR_OWVAR 20
62336: PUSH
62337: LD_INT 0
62339: ST_TO_ADDR
// uc_nation := 0 ;
62340: LD_ADDR_OWVAR 21
62344: PUSH
62345: LD_INT 0
62347: ST_TO_ADDR
// InitHc ;
62348: CALL_OW 19
// hc_class := class_horse ;
62352: LD_ADDR_OWVAR 28
62356: PUSH
62357: LD_INT 21
62359: ST_TO_ADDR
// hc_gallery :=  ;
62360: LD_ADDR_OWVAR 33
62364: PUSH
62365: LD_STRING 
62367: ST_TO_ADDR
// hc_name :=  ;
62368: LD_ADDR_OWVAR 26
62372: PUSH
62373: LD_STRING 
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 1
62380: RET
// export function PrepareMastodont ( ) ; begin
62381: LD_INT 0
62383: PPUSH
// uc_side := 0 ;
62384: LD_ADDR_OWVAR 20
62388: PUSH
62389: LD_INT 0
62391: ST_TO_ADDR
// uc_nation := 0 ;
62392: LD_ADDR_OWVAR 21
62396: PUSH
62397: LD_INT 0
62399: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62400: LD_ADDR_OWVAR 37
62404: PUSH
62405: LD_INT 31
62407: ST_TO_ADDR
// vc_control := control_rider ;
62408: LD_ADDR_OWVAR 38
62412: PUSH
62413: LD_INT 4
62415: ST_TO_ADDR
// end ;
62416: LD_VAR 0 1
62420: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62421: LD_INT 0
62423: PPUSH
62424: PPUSH
62425: PPUSH
// uc_side = 0 ;
62426: LD_ADDR_OWVAR 20
62430: PUSH
62431: LD_INT 0
62433: ST_TO_ADDR
// uc_nation = 0 ;
62434: LD_ADDR_OWVAR 21
62438: PUSH
62439: LD_INT 0
62441: ST_TO_ADDR
// InitHc_All ( ) ;
62442: CALL_OW 584
// InitVc ;
62446: CALL_OW 20
// if mastodonts then
62450: LD_VAR 0 6
62454: IFFALSE 62521
// for i = 1 to mastodonts do
62456: LD_ADDR_VAR 0 11
62460: PUSH
62461: DOUBLE
62462: LD_INT 1
62464: DEC
62465: ST_TO_ADDR
62466: LD_VAR 0 6
62470: PUSH
62471: FOR_TO
62472: IFFALSE 62519
// begin vc_chassis := 31 ;
62474: LD_ADDR_OWVAR 37
62478: PUSH
62479: LD_INT 31
62481: ST_TO_ADDR
// vc_control := control_rider ;
62482: LD_ADDR_OWVAR 38
62486: PUSH
62487: LD_INT 4
62489: ST_TO_ADDR
// animal := CreateVehicle ;
62490: LD_ADDR_VAR 0 12
62494: PUSH
62495: CALL_OW 45
62499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62500: LD_VAR 0 12
62504: PPUSH
62505: LD_VAR 0 8
62509: PPUSH
62510: LD_INT 0
62512: PPUSH
62513: CALL 64663 0 3
// end ;
62517: GO 62471
62519: POP
62520: POP
// if horses then
62521: LD_VAR 0 5
62525: IFFALSE 62592
// for i = 1 to horses do
62527: LD_ADDR_VAR 0 11
62531: PUSH
62532: DOUBLE
62533: LD_INT 1
62535: DEC
62536: ST_TO_ADDR
62537: LD_VAR 0 5
62541: PUSH
62542: FOR_TO
62543: IFFALSE 62590
// begin hc_class := 21 ;
62545: LD_ADDR_OWVAR 28
62549: PUSH
62550: LD_INT 21
62552: ST_TO_ADDR
// hc_gallery :=  ;
62553: LD_ADDR_OWVAR 33
62557: PUSH
62558: LD_STRING 
62560: ST_TO_ADDR
// animal := CreateHuman ;
62561: LD_ADDR_VAR 0 12
62565: PUSH
62566: CALL_OW 44
62570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62571: LD_VAR 0 12
62575: PPUSH
62576: LD_VAR 0 8
62580: PPUSH
62581: LD_INT 0
62583: PPUSH
62584: CALL 64663 0 3
// end ;
62588: GO 62542
62590: POP
62591: POP
// if birds then
62592: LD_VAR 0 1
62596: IFFALSE 62663
// for i = 1 to birds do
62598: LD_ADDR_VAR 0 11
62602: PUSH
62603: DOUBLE
62604: LD_INT 1
62606: DEC
62607: ST_TO_ADDR
62608: LD_VAR 0 1
62612: PUSH
62613: FOR_TO
62614: IFFALSE 62661
// begin hc_class := 18 ;
62616: LD_ADDR_OWVAR 28
62620: PUSH
62621: LD_INT 18
62623: ST_TO_ADDR
// hc_gallery =  ;
62624: LD_ADDR_OWVAR 33
62628: PUSH
62629: LD_STRING 
62631: ST_TO_ADDR
// animal := CreateHuman ;
62632: LD_ADDR_VAR 0 12
62636: PUSH
62637: CALL_OW 44
62641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62642: LD_VAR 0 12
62646: PPUSH
62647: LD_VAR 0 8
62651: PPUSH
62652: LD_INT 0
62654: PPUSH
62655: CALL 64663 0 3
// end ;
62659: GO 62613
62661: POP
62662: POP
// if tigers then
62663: LD_VAR 0 2
62667: IFFALSE 62751
// for i = 1 to tigers do
62669: LD_ADDR_VAR 0 11
62673: PUSH
62674: DOUBLE
62675: LD_INT 1
62677: DEC
62678: ST_TO_ADDR
62679: LD_VAR 0 2
62683: PUSH
62684: FOR_TO
62685: IFFALSE 62749
// begin hc_class = class_tiger ;
62687: LD_ADDR_OWVAR 28
62691: PUSH
62692: LD_INT 14
62694: ST_TO_ADDR
// hc_gallery =  ;
62695: LD_ADDR_OWVAR 33
62699: PUSH
62700: LD_STRING 
62702: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62703: LD_ADDR_OWVAR 35
62707: PUSH
62708: LD_INT 7
62710: NEG
62711: PPUSH
62712: LD_INT 7
62714: PPUSH
62715: CALL_OW 12
62719: ST_TO_ADDR
// animal := CreateHuman ;
62720: LD_ADDR_VAR 0 12
62724: PUSH
62725: CALL_OW 44
62729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62730: LD_VAR 0 12
62734: PPUSH
62735: LD_VAR 0 8
62739: PPUSH
62740: LD_INT 0
62742: PPUSH
62743: CALL 64663 0 3
// end ;
62747: GO 62684
62749: POP
62750: POP
// if apemans then
62751: LD_VAR 0 3
62755: IFFALSE 62878
// for i = 1 to apemans do
62757: LD_ADDR_VAR 0 11
62761: PUSH
62762: DOUBLE
62763: LD_INT 1
62765: DEC
62766: ST_TO_ADDR
62767: LD_VAR 0 3
62771: PUSH
62772: FOR_TO
62773: IFFALSE 62876
// begin hc_class = class_apeman ;
62775: LD_ADDR_OWVAR 28
62779: PUSH
62780: LD_INT 12
62782: ST_TO_ADDR
// hc_gallery =  ;
62783: LD_ADDR_OWVAR 33
62787: PUSH
62788: LD_STRING 
62790: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62791: LD_ADDR_OWVAR 35
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PPUSH
62800: LD_INT 2
62802: PPUSH
62803: CALL_OW 12
62807: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62808: LD_ADDR_OWVAR 31
62812: PUSH
62813: LD_INT 1
62815: PPUSH
62816: LD_INT 3
62818: PPUSH
62819: CALL_OW 12
62823: PUSH
62824: LD_INT 1
62826: PPUSH
62827: LD_INT 3
62829: PPUSH
62830: CALL_OW 12
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: ST_TO_ADDR
// animal := CreateHuman ;
62847: LD_ADDR_VAR 0 12
62851: PUSH
62852: CALL_OW 44
62856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62857: LD_VAR 0 12
62861: PPUSH
62862: LD_VAR 0 8
62866: PPUSH
62867: LD_INT 0
62869: PPUSH
62870: CALL 64663 0 3
// end ;
62874: GO 62772
62876: POP
62877: POP
// if enchidnas then
62878: LD_VAR 0 4
62882: IFFALSE 62949
// for i = 1 to enchidnas do
62884: LD_ADDR_VAR 0 11
62888: PUSH
62889: DOUBLE
62890: LD_INT 1
62892: DEC
62893: ST_TO_ADDR
62894: LD_VAR 0 4
62898: PUSH
62899: FOR_TO
62900: IFFALSE 62947
// begin hc_class = 13 ;
62902: LD_ADDR_OWVAR 28
62906: PUSH
62907: LD_INT 13
62909: ST_TO_ADDR
// hc_gallery =  ;
62910: LD_ADDR_OWVAR 33
62914: PUSH
62915: LD_STRING 
62917: ST_TO_ADDR
// animal := CreateHuman ;
62918: LD_ADDR_VAR 0 12
62922: PUSH
62923: CALL_OW 44
62927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62928: LD_VAR 0 12
62932: PPUSH
62933: LD_VAR 0 8
62937: PPUSH
62938: LD_INT 0
62940: PPUSH
62941: CALL 64663 0 3
// end ;
62945: GO 62899
62947: POP
62948: POP
// if fishes then
62949: LD_VAR 0 7
62953: IFFALSE 63020
// for i = 1 to fishes do
62955: LD_ADDR_VAR 0 11
62959: PUSH
62960: DOUBLE
62961: LD_INT 1
62963: DEC
62964: ST_TO_ADDR
62965: LD_VAR 0 7
62969: PUSH
62970: FOR_TO
62971: IFFALSE 63018
// begin hc_class = 20 ;
62973: LD_ADDR_OWVAR 28
62977: PUSH
62978: LD_INT 20
62980: ST_TO_ADDR
// hc_gallery =  ;
62981: LD_ADDR_OWVAR 33
62985: PUSH
62986: LD_STRING 
62988: ST_TO_ADDR
// animal := CreateHuman ;
62989: LD_ADDR_VAR 0 12
62993: PUSH
62994: CALL_OW 44
62998: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62999: LD_VAR 0 12
63003: PPUSH
63004: LD_VAR 0 9
63008: PPUSH
63009: LD_INT 0
63011: PPUSH
63012: CALL 64663 0 3
// end ;
63016: GO 62970
63018: POP
63019: POP
// end ;
63020: LD_VAR 0 10
63024: RET
// export function WantHeal ( sci , unit ) ; begin
63025: LD_INT 0
63027: PPUSH
// if GetTaskList ( sci ) > 0 then
63028: LD_VAR 0 1
63032: PPUSH
63033: CALL_OW 437
63037: PUSH
63038: LD_INT 0
63040: GREATER
63041: IFFALSE 63113
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63043: LD_VAR 0 1
63047: PPUSH
63048: CALL_OW 437
63052: PUSH
63053: LD_INT 1
63055: ARRAY
63056: PUSH
63057: LD_INT 1
63059: ARRAY
63060: PUSH
63061: LD_STRING l
63063: EQUAL
63064: IFFALSE 63091
63066: PUSH
63067: LD_VAR 0 1
63071: PPUSH
63072: CALL_OW 437
63076: PUSH
63077: LD_INT 1
63079: ARRAY
63080: PUSH
63081: LD_INT 4
63083: ARRAY
63084: PUSH
63085: LD_VAR 0 2
63089: EQUAL
63090: AND
63091: IFFALSE 63103
// result := true else
63093: LD_ADDR_VAR 0 3
63097: PUSH
63098: LD_INT 1
63100: ST_TO_ADDR
63101: GO 63111
// result := false ;
63103: LD_ADDR_VAR 0 3
63107: PUSH
63108: LD_INT 0
63110: ST_TO_ADDR
// end else
63111: GO 63121
// result := false ;
63113: LD_ADDR_VAR 0 3
63117: PUSH
63118: LD_INT 0
63120: ST_TO_ADDR
// end ;
63121: LD_VAR 0 3
63125: RET
// export function HealTarget ( sci ) ; begin
63126: LD_INT 0
63128: PPUSH
// if not sci then
63129: LD_VAR 0 1
63133: NOT
63134: IFFALSE 63138
// exit ;
63136: GO 63203
// result := 0 ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_INT 0
63145: ST_TO_ADDR
// if GetTaskList ( sci ) then
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL_OW 437
63155: IFFALSE 63203
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63157: LD_VAR 0 1
63161: PPUSH
63162: CALL_OW 437
63166: PUSH
63167: LD_INT 1
63169: ARRAY
63170: PUSH
63171: LD_INT 1
63173: ARRAY
63174: PUSH
63175: LD_STRING l
63177: EQUAL
63178: IFFALSE 63203
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63180: LD_ADDR_VAR 0 2
63184: PUSH
63185: LD_VAR 0 1
63189: PPUSH
63190: CALL_OW 437
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PUSH
63199: LD_INT 4
63201: ARRAY
63202: ST_TO_ADDR
// end ;
63203: LD_VAR 0 2
63207: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63208: LD_INT 0
63210: PPUSH
63211: PPUSH
63212: PPUSH
63213: PPUSH
// if not base_units then
63214: LD_VAR 0 1
63218: NOT
63219: IFFALSE 63223
// exit ;
63221: GO 63310
// result := false ;
63223: LD_ADDR_VAR 0 2
63227: PUSH
63228: LD_INT 0
63230: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63231: LD_ADDR_VAR 0 5
63235: PUSH
63236: LD_VAR 0 1
63240: PPUSH
63241: LD_INT 21
63243: PUSH
63244: LD_INT 3
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PPUSH
63251: CALL_OW 72
63255: ST_TO_ADDR
// if not tmp then
63256: LD_VAR 0 5
63260: NOT
63261: IFFALSE 63265
// exit ;
63263: GO 63310
// for i in tmp do
63265: LD_ADDR_VAR 0 3
63269: PUSH
63270: LD_VAR 0 5
63274: PUSH
63275: FOR_IN
63276: IFFALSE 63308
// begin result := EnemyInRange ( i , 22 ) ;
63278: LD_ADDR_VAR 0 2
63282: PUSH
63283: LD_VAR 0 3
63287: PPUSH
63288: LD_INT 22
63290: PPUSH
63291: CALL 60735 0 2
63295: ST_TO_ADDR
// if result then
63296: LD_VAR 0 2
63300: IFFALSE 63306
// exit ;
63302: POP
63303: POP
63304: GO 63310
// end ;
63306: GO 63275
63308: POP
63309: POP
// end ;
63310: LD_VAR 0 2
63314: RET
// export function FilterByTag ( units , tag ) ; begin
63315: LD_INT 0
63317: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63318: LD_ADDR_VAR 0 3
63322: PUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: LD_INT 120
63330: PUSH
63331: LD_VAR 0 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PPUSH
63340: CALL_OW 72
63344: ST_TO_ADDR
// end ;
63345: LD_VAR 0 3
63349: RET
// export function IsDriver ( un ) ; begin
63350: LD_INT 0
63352: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63353: LD_ADDR_VAR 0 2
63357: PUSH
63358: LD_VAR 0 1
63362: PUSH
63363: LD_INT 55
63365: PUSH
63366: EMPTY
63367: LIST
63368: PPUSH
63369: CALL_OW 69
63373: IN
63374: ST_TO_ADDR
// end ;
63375: LD_VAR 0 2
63379: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63380: LD_INT 0
63382: PPUSH
63383: PPUSH
// list := [ ] ;
63384: LD_ADDR_VAR 0 5
63388: PUSH
63389: EMPTY
63390: ST_TO_ADDR
// case d of 0 :
63391: LD_VAR 0 3
63395: PUSH
63396: LD_INT 0
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63404
63402: GO 63537
63404: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: LD_VAR 0 1
63414: PUSH
63415: LD_INT 4
63417: MINUS
63418: PUSH
63419: LD_VAR 0 2
63423: PUSH
63424: LD_INT 4
63426: MINUS
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: PUSH
63436: LD_VAR 0 1
63440: PUSH
63441: LD_INT 3
63443: MINUS
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: PUSH
63458: LD_VAR 0 1
63462: PUSH
63463: LD_INT 4
63465: PLUS
63466: PUSH
63467: LD_VAR 0 2
63471: PUSH
63472: LD_INT 4
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: PUSH
63480: LD_VAR 0 1
63484: PUSH
63485: LD_INT 3
63487: PLUS
63488: PUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_INT 3
63496: PLUS
63497: PUSH
63498: LD_INT 5
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: PUSH
63506: LD_VAR 0 1
63510: PUSH
63511: LD_VAR 0 2
63515: PUSH
63516: LD_INT 4
63518: PLUS
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// end ; 1 :
63535: GO 64235
63537: LD_INT 1
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63545
63543: GO 63678
63545: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63546: LD_ADDR_VAR 0 5
63550: PUSH
63551: LD_VAR 0 1
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 4
63563: MINUS
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: LIST
63572: PUSH
63573: LD_VAR 0 1
63577: PUSH
63578: LD_INT 3
63580: MINUS
63581: PUSH
63582: LD_VAR 0 2
63586: PUSH
63587: LD_INT 3
63589: MINUS
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: LD_VAR 0 1
63603: PUSH
63604: LD_INT 4
63606: MINUS
63607: PUSH
63608: LD_VAR 0 2
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: PUSH
63621: LD_VAR 0 1
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: LD_INT 3
63633: PLUS
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: PUSH
63643: LD_VAR 0 1
63647: PUSH
63648: LD_INT 4
63650: PLUS
63651: PUSH
63652: LD_VAR 0 2
63656: PUSH
63657: LD_INT 4
63659: PLUS
63660: PUSH
63661: LD_INT 5
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// end ; 2 :
63676: GO 64235
63678: LD_INT 2
63680: DOUBLE
63681: EQUAL
63682: IFTRUE 63686
63684: GO 63815
63686: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63687: LD_ADDR_VAR 0 5
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: LD_INT 3
63704: MINUS
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: PUSH
63714: LD_VAR 0 1
63718: PUSH
63719: LD_INT 4
63721: PLUS
63722: PUSH
63723: LD_VAR 0 2
63727: PUSH
63728: LD_INT 4
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: LD_VAR 0 1
63740: PUSH
63741: LD_VAR 0 2
63745: PUSH
63746: LD_INT 4
63748: PLUS
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: PUSH
63758: LD_VAR 0 1
63762: PUSH
63763: LD_INT 3
63765: MINUS
63766: PUSH
63767: LD_VAR 0 2
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: PUSH
63780: LD_VAR 0 1
63784: PUSH
63785: LD_INT 4
63787: MINUS
63788: PUSH
63789: LD_VAR 0 2
63793: PUSH
63794: LD_INT 4
63796: MINUS
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// end ; 3 :
63813: GO 64235
63815: LD_INT 3
63817: DOUBLE
63818: EQUAL
63819: IFTRUE 63823
63821: GO 63956
63823: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63824: LD_ADDR_VAR 0 5
63828: PUSH
63829: LD_VAR 0 1
63833: PUSH
63834: LD_INT 3
63836: PLUS
63837: PUSH
63838: LD_VAR 0 2
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 4
63858: PLUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 4
63867: PLUS
63868: PUSH
63869: LD_INT 5
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: PUSH
63877: LD_VAR 0 1
63881: PUSH
63882: LD_INT 4
63884: MINUS
63885: PUSH
63886: LD_VAR 0 2
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: LIST
63898: PUSH
63899: LD_VAR 0 1
63903: PUSH
63904: LD_VAR 0 2
63908: PUSH
63909: LD_INT 4
63911: MINUS
63912: PUSH
63913: LD_INT 3
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_INT 3
63928: MINUS
63929: PUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_INT 3
63937: MINUS
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: LIST
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// end ; 4 :
63954: GO 64235
63956: LD_INT 4
63958: DOUBLE
63959: EQUAL
63960: IFTRUE 63964
63962: GO 64097
63964: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63965: LD_ADDR_VAR 0 5
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_VAR 0 2
63979: PUSH
63980: LD_INT 4
63982: PLUS
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: PUSH
63992: LD_VAR 0 1
63996: PUSH
63997: LD_INT 3
63999: PLUS
64000: PUSH
64001: LD_VAR 0 2
64005: PUSH
64006: LD_INT 3
64008: PLUS
64009: PUSH
64010: LD_INT 5
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: PUSH
64018: LD_VAR 0 1
64022: PUSH
64023: LD_INT 4
64025: PLUS
64026: PUSH
64027: LD_VAR 0 2
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: LIST
64039: PUSH
64040: LD_VAR 0 1
64044: PUSH
64045: LD_VAR 0 2
64049: PUSH
64050: LD_INT 3
64052: MINUS
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: LIST
64061: PUSH
64062: LD_VAR 0 1
64066: PUSH
64067: LD_INT 4
64069: MINUS
64070: PUSH
64071: LD_VAR 0 2
64075: PUSH
64076: LD_INT 4
64078: MINUS
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: ST_TO_ADDR
// end ; 5 :
64095: GO 64235
64097: LD_INT 5
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64105
64103: GO 64234
64105: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64106: LD_ADDR_VAR 0 5
64110: PUSH
64111: LD_VAR 0 1
64115: PUSH
64116: LD_INT 4
64118: MINUS
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: LIST
64132: PUSH
64133: LD_VAR 0 1
64137: PUSH
64138: LD_VAR 0 2
64142: PUSH
64143: LD_INT 4
64145: MINUS
64146: PUSH
64147: LD_INT 3
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: PUSH
64155: LD_VAR 0 1
64159: PUSH
64160: LD_INT 4
64162: PLUS
64163: PUSH
64164: LD_VAR 0 2
64168: PUSH
64169: LD_INT 4
64171: PLUS
64172: PUSH
64173: LD_INT 5
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: PUSH
64181: LD_VAR 0 1
64185: PUSH
64186: LD_INT 3
64188: PLUS
64189: PUSH
64190: LD_VAR 0 2
64194: PUSH
64195: LD_INT 4
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: PUSH
64203: LD_VAR 0 1
64207: PUSH
64208: LD_VAR 0 2
64212: PUSH
64213: LD_INT 3
64215: PLUS
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// end ; end ;
64232: GO 64235
64234: POP
// result := list ;
64235: LD_ADDR_VAR 0 4
64239: PUSH
64240: LD_VAR 0 5
64244: ST_TO_ADDR
// end ;
64245: LD_VAR 0 4
64249: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
64254: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64255: LD_VAR 0 1
64259: NOT
64260: IFTRUE 64288
64262: PUSH
64263: LD_VAR 0 2
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: LD_INT 4
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: IN
64286: NOT
64287: OR
64288: IFFALSE 64292
// exit ;
64290: GO 64375
// tmp := [ ] ;
64292: LD_ADDR_VAR 0 5
64296: PUSH
64297: EMPTY
64298: ST_TO_ADDR
// for i in units do
64299: LD_ADDR_VAR 0 4
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: FOR_IN
64310: IFFALSE 64344
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64312: LD_ADDR_VAR 0 5
64316: PUSH
64317: LD_VAR 0 5
64321: PPUSH
64322: LD_VAR 0 4
64326: PPUSH
64327: LD_VAR 0 2
64331: PPUSH
64332: CALL_OW 259
64336: PPUSH
64337: CALL 65770 0 2
64341: ST_TO_ADDR
64342: GO 64309
64344: POP
64345: POP
// if not tmp then
64346: LD_VAR 0 5
64350: NOT
64351: IFFALSE 64355
// exit ;
64353: GO 64375
// result := SortListByListDesc ( units , tmp ) ;
64355: LD_ADDR_VAR 0 3
64359: PUSH
64360: LD_VAR 0 1
64364: PPUSH
64365: LD_VAR 0 5
64369: PPUSH
64370: CALL_OW 77
64374: ST_TO_ADDR
// end ;
64375: LD_VAR 0 3
64379: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64380: LD_INT 0
64382: PPUSH
64383: PPUSH
64384: PPUSH
// result := false ;
64385: LD_ADDR_VAR 0 3
64389: PUSH
64390: LD_INT 0
64392: ST_TO_ADDR
// if not building then
64393: LD_VAR 0 2
64397: NOT
64398: IFFALSE 64402
// exit ;
64400: GO 64546
// x := GetX ( building ) ;
64402: LD_ADDR_VAR 0 4
64406: PUSH
64407: LD_VAR 0 2
64411: PPUSH
64412: CALL_OW 250
64416: ST_TO_ADDR
// y := GetY ( building ) ;
64417: LD_ADDR_VAR 0 5
64421: PUSH
64422: LD_VAR 0 2
64426: PPUSH
64427: CALL_OW 251
64431: ST_TO_ADDR
// if not x or not y then
64432: LD_VAR 0 4
64436: NOT
64437: IFTRUE 64446
64439: PUSH
64440: LD_VAR 0 5
64444: NOT
64445: OR
64446: IFFALSE 64450
// exit ;
64448: GO 64546
// if GetTaskList ( unit ) then
64450: LD_VAR 0 1
64454: PPUSH
64455: CALL_OW 437
64459: IFFALSE 64546
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64461: LD_STRING e
64463: PUSH
64464: LD_VAR 0 1
64468: PPUSH
64469: CALL_OW 437
64473: PUSH
64474: LD_INT 1
64476: ARRAY
64477: PUSH
64478: LD_INT 1
64480: ARRAY
64481: EQUAL
64482: IFFALSE 64509
64484: PUSH
64485: LD_VAR 0 4
64489: PUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: CALL_OW 437
64499: PUSH
64500: LD_INT 1
64502: ARRAY
64503: PUSH
64504: LD_INT 2
64506: ARRAY
64507: EQUAL
64508: AND
64509: IFFALSE 64536
64511: PUSH
64512: LD_VAR 0 5
64516: PUSH
64517: LD_VAR 0 1
64521: PPUSH
64522: CALL_OW 437
64526: PUSH
64527: LD_INT 1
64529: ARRAY
64530: PUSH
64531: LD_INT 3
64533: ARRAY
64534: EQUAL
64535: AND
64536: IFFALSE 64546
// result := true end ;
64538: LD_ADDR_VAR 0 3
64542: PUSH
64543: LD_INT 1
64545: ST_TO_ADDR
// end ;
64546: LD_VAR 0 3
64550: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64551: LD_INT 0
64553: PPUSH
// result := false ;
64554: LD_ADDR_VAR 0 4
64558: PUSH
64559: LD_INT 0
64561: ST_TO_ADDR
// if GetTaskList ( unit ) then
64562: LD_VAR 0 1
64566: PPUSH
64567: CALL_OW 437
64571: IFFALSE 64658
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64573: LD_STRING M
64575: PUSH
64576: LD_VAR 0 1
64580: PPUSH
64581: CALL_OW 437
64585: PUSH
64586: LD_INT 1
64588: ARRAY
64589: PUSH
64590: LD_INT 1
64592: ARRAY
64593: EQUAL
64594: IFFALSE 64621
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: LD_VAR 0 1
64606: PPUSH
64607: CALL_OW 437
64611: PUSH
64612: LD_INT 1
64614: ARRAY
64615: PUSH
64616: LD_INT 2
64618: ARRAY
64619: EQUAL
64620: AND
64621: IFFALSE 64648
64623: PUSH
64624: LD_VAR 0 3
64628: PUSH
64629: LD_VAR 0 1
64633: PPUSH
64634: CALL_OW 437
64638: PUSH
64639: LD_INT 1
64641: ARRAY
64642: PUSH
64643: LD_INT 3
64645: ARRAY
64646: EQUAL
64647: AND
64648: IFFALSE 64658
// result := true ;
64650: LD_ADDR_VAR 0 4
64654: PUSH
64655: LD_INT 1
64657: ST_TO_ADDR
// end ; end ;
64658: LD_VAR 0 4
64662: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64663: LD_INT 0
64665: PPUSH
64666: PPUSH
64667: PPUSH
64668: PPUSH
// if not unit or not area then
64669: LD_VAR 0 1
64673: NOT
64674: IFTRUE 64683
64676: PUSH
64677: LD_VAR 0 2
64681: NOT
64682: OR
64683: IFFALSE 64687
// exit ;
64685: GO 64863
// tmp := AreaToList ( area , i ) ;
64687: LD_ADDR_VAR 0 6
64691: PUSH
64692: LD_VAR 0 2
64696: PPUSH
64697: LD_VAR 0 5
64701: PPUSH
64702: CALL_OW 517
64706: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: DOUBLE
64713: LD_INT 1
64715: DEC
64716: ST_TO_ADDR
64717: LD_VAR 0 6
64721: PUSH
64722: LD_INT 1
64724: ARRAY
64725: PUSH
64726: FOR_TO
64727: IFFALSE 64861
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64729: LD_ADDR_VAR 0 7
64733: PUSH
64734: LD_VAR 0 6
64738: PUSH
64739: LD_INT 1
64741: ARRAY
64742: PUSH
64743: LD_VAR 0 5
64747: ARRAY
64748: PUSH
64749: LD_VAR 0 6
64753: PUSH
64754: LD_INT 2
64756: ARRAY
64757: PUSH
64758: LD_VAR 0 5
64762: ARRAY
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64768: LD_INT 92
64770: PUSH
64771: LD_VAR 0 7
64775: PUSH
64776: LD_INT 1
64778: ARRAY
64779: PUSH
64780: LD_VAR 0 7
64784: PUSH
64785: LD_INT 2
64787: ARRAY
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: PPUSH
64798: CALL_OW 69
64802: PUSH
64803: LD_INT 0
64805: EQUAL
64806: IFFALSE 64859
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64808: LD_VAR 0 1
64812: PPUSH
64813: LD_VAR 0 7
64817: PUSH
64818: LD_INT 1
64820: ARRAY
64821: PPUSH
64822: LD_VAR 0 7
64826: PUSH
64827: LD_INT 2
64829: ARRAY
64830: PPUSH
64831: LD_VAR 0 3
64835: PPUSH
64836: CALL_OW 48
// result := IsPlaced ( unit ) ;
64840: LD_ADDR_VAR 0 4
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: CALL_OW 305
64854: ST_TO_ADDR
// exit ;
64855: POP
64856: POP
64857: GO 64863
// end ; end ;
64859: GO 64726
64861: POP
64862: POP
// end ;
64863: LD_VAR 0 4
64867: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64868: LD_INT 0
64870: PPUSH
64871: PPUSH
64872: PPUSH
// if not side or side > 8 then
64873: LD_VAR 0 1
64877: NOT
64878: IFTRUE 64890
64880: PUSH
64881: LD_VAR 0 1
64885: PUSH
64886: LD_INT 8
64888: GREATER
64889: OR
64890: IFFALSE 64894
// exit ;
64892: GO 65081
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64894: LD_ADDR_VAR 0 4
64898: PUSH
64899: LD_INT 22
64901: PUSH
64902: LD_VAR 0 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 21
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PPUSH
64925: CALL_OW 69
64929: ST_TO_ADDR
// if not tmp then
64930: LD_VAR 0 4
64934: NOT
64935: IFFALSE 64939
// exit ;
64937: GO 65081
// enable_addtolog := true ;
64939: LD_ADDR_OWVAR 81
64943: PUSH
64944: LD_INT 1
64946: ST_TO_ADDR
// AddToLog ( [ ) ;
64947: LD_STRING [
64949: PPUSH
64950: CALL_OW 561
// for i in tmp do
64954: LD_ADDR_VAR 0 3
64958: PUSH
64959: LD_VAR 0 4
64963: PUSH
64964: FOR_IN
64965: IFFALSE 65072
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64967: LD_STRING [
64969: PUSH
64970: LD_VAR 0 3
64974: PPUSH
64975: CALL_OW 266
64979: STR
64980: PUSH
64981: LD_STRING , 
64983: STR
64984: PUSH
64985: LD_VAR 0 3
64989: PPUSH
64990: CALL_OW 250
64994: STR
64995: PUSH
64996: LD_STRING , 
64998: STR
64999: PUSH
65000: LD_VAR 0 3
65004: PPUSH
65005: CALL_OW 251
65009: STR
65010: PUSH
65011: LD_STRING , 
65013: STR
65014: PUSH
65015: LD_VAR 0 3
65019: PPUSH
65020: CALL_OW 254
65024: STR
65025: PUSH
65026: LD_STRING , 
65028: STR
65029: PUSH
65030: LD_VAR 0 3
65034: PPUSH
65035: LD_INT 1
65037: PPUSH
65038: CALL_OW 268
65042: STR
65043: PUSH
65044: LD_STRING , 
65046: STR
65047: PUSH
65048: LD_VAR 0 3
65052: PPUSH
65053: LD_INT 2
65055: PPUSH
65056: CALL_OW 268
65060: STR
65061: PUSH
65062: LD_STRING ],
65064: STR
65065: PPUSH
65066: CALL_OW 561
// end ;
65070: GO 64964
65072: POP
65073: POP
// AddToLog ( ]; ) ;
65074: LD_STRING ];
65076: PPUSH
65077: CALL_OW 561
// end ;
65081: LD_VAR 0 2
65085: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
65090: PPUSH
65091: PPUSH
65092: PPUSH
// if not area or not rate or not max then
65093: LD_VAR 0 1
65097: NOT
65098: IFTRUE 65107
65100: PUSH
65101: LD_VAR 0 2
65105: NOT
65106: OR
65107: IFTRUE 65116
65109: PUSH
65110: LD_VAR 0 4
65114: NOT
65115: OR
65116: IFFALSE 65120
// exit ;
65118: GO 65309
// while 1 do
65120: LD_INT 1
65122: IFFALSE 65309
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65124: LD_ADDR_VAR 0 9
65128: PUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: LD_INT 1
65136: PPUSH
65137: CALL_OW 287
65141: PUSH
65142: LD_INT 10
65144: MUL
65145: ST_TO_ADDR
// r := rate / 10 ;
65146: LD_ADDR_VAR 0 7
65150: PUSH
65151: LD_VAR 0 2
65155: PUSH
65156: LD_INT 10
65158: DIVREAL
65159: ST_TO_ADDR
// time := 1 1$00 ;
65160: LD_ADDR_VAR 0 8
65164: PUSH
65165: LD_INT 2100
65167: ST_TO_ADDR
// if amount < min then
65168: LD_VAR 0 9
65172: PUSH
65173: LD_VAR 0 3
65177: LESS
65178: IFFALSE 65196
// r := r * 2 else
65180: LD_ADDR_VAR 0 7
65184: PUSH
65185: LD_VAR 0 7
65189: PUSH
65190: LD_INT 2
65192: MUL
65193: ST_TO_ADDR
65194: GO 65222
// if amount > max then
65196: LD_VAR 0 9
65200: PUSH
65201: LD_VAR 0 4
65205: GREATER
65206: IFFALSE 65222
// r := r / 2 ;
65208: LD_ADDR_VAR 0 7
65212: PUSH
65213: LD_VAR 0 7
65217: PUSH
65218: LD_INT 2
65220: DIVREAL
65221: ST_TO_ADDR
// time := time / r ;
65222: LD_ADDR_VAR 0 8
65226: PUSH
65227: LD_VAR 0 8
65231: PUSH
65232: LD_VAR 0 7
65236: DIVREAL
65237: ST_TO_ADDR
// if time < 0 then
65238: LD_VAR 0 8
65242: PUSH
65243: LD_INT 0
65245: LESS
65246: IFFALSE 65263
// time := time * - 1 ;
65248: LD_ADDR_VAR 0 8
65252: PUSH
65253: LD_VAR 0 8
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: MUL
65262: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65263: LD_VAR 0 8
65267: PUSH
65268: LD_INT 35
65270: PPUSH
65271: LD_INT 875
65273: PPUSH
65274: CALL_OW 12
65278: PLUS
65279: PPUSH
65280: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65284: LD_INT 1
65286: PPUSH
65287: LD_INT 5
65289: PPUSH
65290: CALL_OW 12
65294: PPUSH
65295: LD_VAR 0 1
65299: PPUSH
65300: LD_INT 1
65302: PPUSH
65303: CALL_OW 55
// end ;
65307: GO 65120
// end ;
65309: LD_VAR 0 5
65313: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
65322: PPUSH
65323: PPUSH
// if not turrets or not factories then
65324: LD_VAR 0 1
65328: NOT
65329: IFTRUE 65338
65331: PUSH
65332: LD_VAR 0 2
65336: NOT
65337: OR
65338: IFFALSE 65342
// exit ;
65340: GO 65649
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65342: LD_ADDR_VAR 0 10
65346: PUSH
65347: LD_INT 5
65349: PUSH
65350: LD_INT 6
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: LD_INT 5
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 24
65384: PUSH
65385: LD_INT 25
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 23
65394: PUSH
65395: LD_INT 27
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 42
65408: PUSH
65409: LD_INT 43
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 44
65418: PUSH
65419: LD_INT 46
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 45
65428: PUSH
65429: LD_INT 47
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: ST_TO_ADDR
// result := [ ] ;
65446: LD_ADDR_VAR 0 3
65450: PUSH
65451: EMPTY
65452: ST_TO_ADDR
// for i in turrets do
65453: LD_ADDR_VAR 0 4
65457: PUSH
65458: LD_VAR 0 1
65462: PUSH
65463: FOR_IN
65464: IFFALSE 65647
// begin nat := GetNation ( i ) ;
65466: LD_ADDR_VAR 0 7
65470: PUSH
65471: LD_VAR 0 4
65475: PPUSH
65476: CALL_OW 248
65480: ST_TO_ADDR
// weapon := 0 ;
65481: LD_ADDR_VAR 0 8
65485: PUSH
65486: LD_INT 0
65488: ST_TO_ADDR
// if not nat then
65489: LD_VAR 0 7
65493: NOT
65494: IFFALSE 65498
// continue ;
65496: GO 65463
// for j in list [ nat ] do
65498: LD_ADDR_VAR 0 5
65502: PUSH
65503: LD_VAR 0 10
65507: PUSH
65508: LD_VAR 0 7
65512: ARRAY
65513: PUSH
65514: FOR_IN
65515: IFFALSE 65556
// if GetBWeapon ( i ) = j [ 1 ] then
65517: LD_VAR 0 4
65521: PPUSH
65522: CALL_OW 269
65526: PUSH
65527: LD_VAR 0 5
65531: PUSH
65532: LD_INT 1
65534: ARRAY
65535: EQUAL
65536: IFFALSE 65554
// begin weapon := j [ 2 ] ;
65538: LD_ADDR_VAR 0 8
65542: PUSH
65543: LD_VAR 0 5
65547: PUSH
65548: LD_INT 2
65550: ARRAY
65551: ST_TO_ADDR
// break ;
65552: GO 65556
// end ;
65554: GO 65514
65556: POP
65557: POP
// if not weapon then
65558: LD_VAR 0 8
65562: NOT
65563: IFFALSE 65567
// continue ;
65565: GO 65463
// for k in factories do
65567: LD_ADDR_VAR 0 6
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: FOR_IN
65578: IFFALSE 65643
// begin weapons := AvailableWeaponList ( k ) ;
65580: LD_ADDR_VAR 0 9
65584: PUSH
65585: LD_VAR 0 6
65589: PPUSH
65590: CALL_OW 478
65594: ST_TO_ADDR
// if not weapons then
65595: LD_VAR 0 9
65599: NOT
65600: IFFALSE 65604
// continue ;
65602: GO 65577
// if weapon in weapons then
65604: LD_VAR 0 8
65608: PUSH
65609: LD_VAR 0 9
65613: IN
65614: IFFALSE 65641
// begin result := [ i , weapon ] ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_VAR 0 4
65625: PUSH
65626: LD_VAR 0 8
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// exit ;
65635: POP
65636: POP
65637: POP
65638: POP
65639: GO 65649
// end ; end ;
65641: GO 65577
65643: POP
65644: POP
// end ;
65645: GO 65463
65647: POP
65648: POP
// end ;
65649: LD_VAR 0 3
65653: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65654: LD_INT 0
65656: PPUSH
// if not side or side > 8 then
65657: LD_VAR 0 3
65661: NOT
65662: IFTRUE 65674
65664: PUSH
65665: LD_VAR 0 3
65669: PUSH
65670: LD_INT 8
65672: GREATER
65673: OR
65674: IFFALSE 65678
// exit ;
65676: GO 65737
// if not range then
65678: LD_VAR 0 4
65682: NOT
65683: IFFALSE 65694
// range := - 12 ;
65685: LD_ADDR_VAR 0 4
65689: PUSH
65690: LD_INT 12
65692: NEG
65693: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65694: LD_VAR 0 1
65698: PPUSH
65699: LD_VAR 0 2
65703: PPUSH
65704: LD_VAR 0 3
65708: PPUSH
65709: LD_VAR 0 4
65713: PPUSH
65714: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65718: LD_VAR 0 1
65722: PPUSH
65723: LD_VAR 0 2
65727: PPUSH
65728: LD_VAR 0 3
65732: PPUSH
65733: CALL_OW 331
// end ;
65737: LD_VAR 0 5
65741: RET
// export function Video ( mode ) ; begin
65742: LD_INT 0
65744: PPUSH
// ingame_video = mode ;
65745: LD_ADDR_OWVAR 52
65749: PUSH
65750: LD_VAR 0 1
65754: ST_TO_ADDR
// interface_hidden = mode ;
65755: LD_ADDR_OWVAR 54
65759: PUSH
65760: LD_VAR 0 1
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 2
65769: RET
// export function Join ( array , element ) ; begin
65770: LD_INT 0
65772: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65773: LD_ADDR_VAR 0 3
65777: PUSH
65778: LD_VAR 0 1
65782: PPUSH
65783: LD_VAR 0 1
65787: PUSH
65788: LD_INT 1
65790: PLUS
65791: PPUSH
65792: LD_VAR 0 2
65796: PPUSH
65797: CALL_OW 1
65801: ST_TO_ADDR
// end ;
65802: LD_VAR 0 3
65806: RET
// export function JoinUnion ( array , element ) ; begin
65807: LD_INT 0
65809: PPUSH
// result := array union element ;
65810: LD_ADDR_VAR 0 3
65814: PUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_VAR 0 2
65824: UNION
65825: ST_TO_ADDR
// end ;
65826: LD_VAR 0 3
65830: RET
// export function GetBehemoths ( side ) ; begin
65831: LD_INT 0
65833: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65834: LD_ADDR_VAR 0 2
65838: PUSH
65839: LD_INT 22
65841: PUSH
65842: LD_VAR 0 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 31
65853: PUSH
65854: LD_INT 25
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PPUSH
65865: CALL_OW 69
65869: ST_TO_ADDR
// end ;
65870: LD_VAR 0 2
65874: RET
// export function Shuffle ( array ) ; var i , index ; begin
65875: LD_INT 0
65877: PPUSH
65878: PPUSH
65879: PPUSH
// result := [ ] ;
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: EMPTY
65886: ST_TO_ADDR
// if not array then
65887: LD_VAR 0 1
65891: NOT
65892: IFFALSE 65896
// exit ;
65894: GO 65995
// Randomize ;
65896: CALL_OW 10
// for i = array downto 1 do
65900: LD_ADDR_VAR 0 3
65904: PUSH
65905: DOUBLE
65906: LD_VAR 0 1
65910: INC
65911: ST_TO_ADDR
65912: LD_INT 1
65914: PUSH
65915: FOR_DOWNTO
65916: IFFALSE 65993
// begin index := rand ( 1 , array ) ;
65918: LD_ADDR_VAR 0 4
65922: PUSH
65923: LD_INT 1
65925: PPUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 12
65935: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65936: LD_ADDR_VAR 0 2
65940: PUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 1
65953: PLUS
65954: PPUSH
65955: LD_VAR 0 1
65959: PUSH
65960: LD_VAR 0 4
65964: ARRAY
65965: PPUSH
65966: CALL_OW 2
65970: ST_TO_ADDR
// array := Delete ( array , index ) ;
65971: LD_ADDR_VAR 0 1
65975: PUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: LD_VAR 0 4
65985: PPUSH
65986: CALL_OW 3
65990: ST_TO_ADDR
// end ;
65991: GO 65915
65993: POP
65994: POP
// end ;
65995: LD_VAR 0 2
65999: RET
// export function GetBaseMaterials ( base ) ; begin
66000: LD_INT 0
66002: PPUSH
// result := [ 0 , 0 , 0 ] ;
66003: LD_ADDR_VAR 0 2
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// if not base then
66022: LD_VAR 0 1
66026: NOT
66027: IFFALSE 66031
// exit ;
66029: GO 66080
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66031: LD_ADDR_VAR 0 2
66035: PUSH
66036: LD_VAR 0 1
66040: PPUSH
66041: LD_INT 1
66043: PPUSH
66044: CALL_OW 275
66048: PUSH
66049: LD_VAR 0 1
66053: PPUSH
66054: LD_INT 2
66056: PPUSH
66057: CALL_OW 275
66061: PUSH
66062: LD_VAR 0 1
66066: PPUSH
66067: LD_INT 3
66069: PPUSH
66070: CALL_OW 275
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: ST_TO_ADDR
// end ;
66080: LD_VAR 0 2
66084: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66085: LD_INT 0
66087: PPUSH
66088: PPUSH
// result := array ;
66089: LD_ADDR_VAR 0 3
66093: PUSH
66094: LD_VAR 0 1
66098: ST_TO_ADDR
// if size >= result then
66099: LD_VAR 0 2
66103: PUSH
66104: LD_VAR 0 3
66108: GREATEREQUAL
66109: IFFALSE 66113
// exit ;
66111: GO 66163
// if size then
66113: LD_VAR 0 2
66117: IFFALSE 66163
// for i := array downto size do
66119: LD_ADDR_VAR 0 4
66123: PUSH
66124: DOUBLE
66125: LD_VAR 0 1
66129: INC
66130: ST_TO_ADDR
66131: LD_VAR 0 2
66135: PUSH
66136: FOR_DOWNTO
66137: IFFALSE 66161
// result := Delete ( result , result ) ;
66139: LD_ADDR_VAR 0 3
66143: PUSH
66144: LD_VAR 0 3
66148: PPUSH
66149: LD_VAR 0 3
66153: PPUSH
66154: CALL_OW 3
66158: ST_TO_ADDR
66159: GO 66136
66161: POP
66162: POP
// end ;
66163: LD_VAR 0 3
66167: RET
// export function ComExit ( unit ) ; var tmp ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
// if not IsInUnit ( unit ) then
66172: LD_VAR 0 1
66176: PPUSH
66177: CALL_OW 310
66181: NOT
66182: IFFALSE 66186
// exit ;
66184: GO 66246
// tmp := IsInUnit ( unit ) ;
66186: LD_ADDR_VAR 0 3
66190: PUSH
66191: LD_VAR 0 1
66195: PPUSH
66196: CALL_OW 310
66200: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66201: LD_VAR 0 3
66205: PPUSH
66206: CALL_OW 247
66210: PUSH
66211: LD_INT 2
66213: EQUAL
66214: IFFALSE 66227
// ComExitVehicle ( unit ) else
66216: LD_VAR 0 1
66220: PPUSH
66221: CALL_OW 121
66225: GO 66236
// ComExitBuilding ( unit ) ;
66227: LD_VAR 0 1
66231: PPUSH
66232: CALL_OW 122
// result := tmp ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_VAR 0 3
66245: ST_TO_ADDR
// end ;
66246: LD_VAR 0 2
66250: RET
// export function ComExitAll ( units ) ; var i ; begin
66251: LD_INT 0
66253: PPUSH
66254: PPUSH
// if not units then
66255: LD_VAR 0 1
66259: NOT
66260: IFFALSE 66264
// exit ;
66262: GO 66290
// for i in units do
66264: LD_ADDR_VAR 0 3
66268: PUSH
66269: LD_VAR 0 1
66273: PUSH
66274: FOR_IN
66275: IFFALSE 66288
// ComExit ( i ) ;
66277: LD_VAR 0 3
66281: PPUSH
66282: CALL 66168 0 1
66286: GO 66274
66288: POP
66289: POP
// end ;
66290: LD_VAR 0 2
66294: RET
// export function ResetHc ; begin
66295: LD_INT 0
66297: PPUSH
// InitHc ;
66298: CALL_OW 19
// hc_importance := 0 ;
66302: LD_ADDR_OWVAR 32
66306: PUSH
66307: LD_INT 0
66309: ST_TO_ADDR
// end ;
66310: LD_VAR 0 1
66314: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66315: LD_INT 0
66317: PPUSH
66318: PPUSH
66319: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66320: LD_ADDR_VAR 0 6
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: LD_VAR 0 3
66334: PLUS
66335: PUSH
66336: LD_INT 2
66338: DIV
66339: ST_TO_ADDR
// if _x < 0 then
66340: LD_VAR 0 6
66344: PUSH
66345: LD_INT 0
66347: LESS
66348: IFFALSE 66365
// _x := _x * - 1 ;
66350: LD_ADDR_VAR 0 6
66354: PUSH
66355: LD_VAR 0 6
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: MUL
66364: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66365: LD_ADDR_VAR 0 7
66369: PUSH
66370: LD_VAR 0 2
66374: PUSH
66375: LD_VAR 0 4
66379: PLUS
66380: PUSH
66381: LD_INT 2
66383: DIV
66384: ST_TO_ADDR
// if _y < 0 then
66385: LD_VAR 0 7
66389: PUSH
66390: LD_INT 0
66392: LESS
66393: IFFALSE 66410
// _y := _y * - 1 ;
66395: LD_ADDR_VAR 0 7
66399: PUSH
66400: LD_VAR 0 7
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: MUL
66409: ST_TO_ADDR
// result := [ _x , _y ] ;
66410: LD_ADDR_VAR 0 5
66414: PUSH
66415: LD_VAR 0 6
66419: PUSH
66420: LD_VAR 0 7
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// end ;
66429: LD_VAR 0 5
66433: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66434: LD_INT 0
66436: PPUSH
66437: PPUSH
66438: PPUSH
66439: PPUSH
// task := GetTaskList ( unit ) ;
66440: LD_ADDR_VAR 0 7
66444: PUSH
66445: LD_VAR 0 1
66449: PPUSH
66450: CALL_OW 437
66454: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66455: LD_VAR 0 7
66459: NOT
66460: IFFALSE 66479
66462: PUSH
66463: LD_VAR 0 1
66467: PPUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: CALL_OW 308
66477: NOT
66478: AND
66479: IFFALSE 66483
// exit ;
66481: GO 66601
// if IsInArea ( unit , area ) then
66483: LD_VAR 0 1
66487: PPUSH
66488: LD_VAR 0 2
66492: PPUSH
66493: CALL_OW 308
66497: IFFALSE 66515
// begin ComMoveToArea ( unit , goAway ) ;
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_VAR 0 3
66508: PPUSH
66509: CALL_OW 113
// exit ;
66513: GO 66601
// end ; if task [ 1 ] [ 1 ] <> M then
66515: LD_VAR 0 7
66519: PUSH
66520: LD_INT 1
66522: ARRAY
66523: PUSH
66524: LD_INT 1
66526: ARRAY
66527: PUSH
66528: LD_STRING M
66530: NONEQUAL
66531: IFFALSE 66535
// exit ;
66533: GO 66601
// x := task [ 1 ] [ 2 ] ;
66535: LD_ADDR_VAR 0 5
66539: PUSH
66540: LD_VAR 0 7
66544: PUSH
66545: LD_INT 1
66547: ARRAY
66548: PUSH
66549: LD_INT 2
66551: ARRAY
66552: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66553: LD_ADDR_VAR 0 6
66557: PUSH
66558: LD_VAR 0 7
66562: PUSH
66563: LD_INT 1
66565: ARRAY
66566: PUSH
66567: LD_INT 3
66569: ARRAY
66570: ST_TO_ADDR
// if InArea ( x , y , area ) then
66571: LD_VAR 0 5
66575: PPUSH
66576: LD_VAR 0 6
66580: PPUSH
66581: LD_VAR 0 2
66585: PPUSH
66586: CALL_OW 309
66590: IFFALSE 66601
// ComStop ( unit ) ;
66592: LD_VAR 0 1
66596: PPUSH
66597: CALL_OW 141
// end ;
66601: LD_VAR 0 4
66605: RET
// export function Abs ( value ) ; begin
66606: LD_INT 0
66608: PPUSH
// result := value ;
66609: LD_ADDR_VAR 0 2
66613: PUSH
66614: LD_VAR 0 1
66618: ST_TO_ADDR
// if value < 0 then
66619: LD_VAR 0 1
66623: PUSH
66624: LD_INT 0
66626: LESS
66627: IFFALSE 66644
// result := value * - 1 ;
66629: LD_ADDR_VAR 0 2
66633: PUSH
66634: LD_VAR 0 1
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: MUL
66643: ST_TO_ADDR
// end ;
66644: LD_VAR 0 2
66648: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66649: LD_INT 0
66651: PPUSH
66652: PPUSH
66653: PPUSH
66654: PPUSH
66655: PPUSH
66656: PPUSH
66657: PPUSH
66658: PPUSH
// if not unit or not building then
66659: LD_VAR 0 1
66663: NOT
66664: IFTRUE 66673
66666: PUSH
66667: LD_VAR 0 2
66671: NOT
66672: OR
66673: IFFALSE 66677
// exit ;
66675: GO 66905
// x := GetX ( building ) ;
66677: LD_ADDR_VAR 0 4
66681: PUSH
66682: LD_VAR 0 2
66686: PPUSH
66687: CALL_OW 250
66691: ST_TO_ADDR
// y := GetY ( building ) ;
66692: LD_ADDR_VAR 0 6
66696: PUSH
66697: LD_VAR 0 2
66701: PPUSH
66702: CALL_OW 251
66706: ST_TO_ADDR
// d := GetDir ( building ) ;
66707: LD_ADDR_VAR 0 8
66711: PUSH
66712: LD_VAR 0 2
66716: PPUSH
66717: CALL_OW 254
66721: ST_TO_ADDR
// r := 4 ;
66722: LD_ADDR_VAR 0 9
66726: PUSH
66727: LD_INT 4
66729: ST_TO_ADDR
// for i := 1 to 5 do
66730: LD_ADDR_VAR 0 10
66734: PUSH
66735: DOUBLE
66736: LD_INT 1
66738: DEC
66739: ST_TO_ADDR
66740: LD_INT 5
66742: PUSH
66743: FOR_TO
66744: IFFALSE 66903
// begin _x := ShiftX ( x , d , r + i ) ;
66746: LD_ADDR_VAR 0 5
66750: PUSH
66751: LD_VAR 0 4
66755: PPUSH
66756: LD_VAR 0 8
66760: PPUSH
66761: LD_VAR 0 9
66765: PUSH
66766: LD_VAR 0 10
66770: PLUS
66771: PPUSH
66772: CALL_OW 272
66776: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66777: LD_ADDR_VAR 0 7
66781: PUSH
66782: LD_VAR 0 6
66786: PPUSH
66787: LD_VAR 0 8
66791: PPUSH
66792: LD_VAR 0 9
66796: PUSH
66797: LD_VAR 0 10
66801: PLUS
66802: PPUSH
66803: CALL_OW 273
66807: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66808: LD_VAR 0 5
66812: PPUSH
66813: LD_VAR 0 7
66817: PPUSH
66818: CALL_OW 488
66822: IFFALSE 66857
66824: PUSH
66825: LD_VAR 0 5
66829: PPUSH
66830: LD_VAR 0 7
66834: PPUSH
66835: CALL_OW 428
66839: PPUSH
66840: CALL_OW 247
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: IN
66855: NOT
66856: AND
66857: IFFALSE 66901
// begin ComMoveXY ( unit , _x , _y ) ;
66859: LD_VAR 0 1
66863: PPUSH
66864: LD_VAR 0 5
66868: PPUSH
66869: LD_VAR 0 7
66873: PPUSH
66874: CALL_OW 111
// result := [ _x , _y ] ;
66878: LD_ADDR_VAR 0 3
66882: PUSH
66883: LD_VAR 0 5
66887: PUSH
66888: LD_VAR 0 7
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: ST_TO_ADDR
// exit ;
66897: POP
66898: POP
66899: GO 66905
// end ; end ;
66901: GO 66743
66903: POP
66904: POP
// end ;
66905: LD_VAR 0 3
66909: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66910: LD_INT 0
66912: PPUSH
66913: PPUSH
66914: PPUSH
// result := 0 ;
66915: LD_ADDR_VAR 0 3
66919: PUSH
66920: LD_INT 0
66922: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66923: LD_VAR 0 1
66927: PUSH
66928: LD_INT 0
66930: LESS
66931: IFTRUE 66943
66933: PUSH
66934: LD_VAR 0 1
66938: PUSH
66939: LD_INT 8
66941: GREATER
66942: OR
66943: IFTRUE 66955
66945: PUSH
66946: LD_VAR 0 2
66950: PUSH
66951: LD_INT 0
66953: LESS
66954: OR
66955: IFTRUE 66967
66957: PUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_INT 8
66965: GREATER
66966: OR
66967: IFFALSE 66971
// exit ;
66969: GO 67046
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66971: LD_ADDR_VAR 0 4
66975: PUSH
66976: LD_INT 22
66978: PUSH
66979: LD_VAR 0 2
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PPUSH
66988: CALL_OW 69
66992: PUSH
66993: FOR_IN
66994: IFFALSE 67044
// begin un := UnitShoot ( i ) ;
66996: LD_ADDR_VAR 0 5
67000: PUSH
67001: LD_VAR 0 4
67005: PPUSH
67006: CALL_OW 504
67010: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67011: LD_VAR 0 5
67015: PPUSH
67016: CALL_OW 255
67020: PUSH
67021: LD_VAR 0 1
67025: EQUAL
67026: IFFALSE 67042
// begin result := un ;
67028: LD_ADDR_VAR 0 3
67032: PUSH
67033: LD_VAR 0 5
67037: ST_TO_ADDR
// exit ;
67038: POP
67039: POP
67040: GO 67046
// end ; end ;
67042: GO 66993
67044: POP
67045: POP
// end ;
67046: LD_VAR 0 3
67050: RET
// export function GetCargoBay ( units ) ; begin
67051: LD_INT 0
67053: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67054: LD_ADDR_VAR 0 2
67058: PUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: LD_INT 2
67066: PUSH
67067: LD_INT 34
67069: PUSH
67070: LD_INT 12
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 34
67079: PUSH
67080: LD_INT 51
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 34
67089: PUSH
67090: LD_INT 32
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 34
67099: PUSH
67100: LD_INT 89
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: PPUSH
67114: CALL_OW 72
67118: ST_TO_ADDR
// end ;
67119: LD_VAR 0 2
67123: RET
// export function Negate ( value ) ; begin
67124: LD_INT 0
67126: PPUSH
// result := not value ;
67127: LD_ADDR_VAR 0 2
67131: PUSH
67132: LD_VAR 0 1
67136: NOT
67137: ST_TO_ADDR
// end ;
67138: LD_VAR 0 2
67142: RET
// export function Inc ( value ) ; begin
67143: LD_INT 0
67145: PPUSH
// result := value + 1 ;
67146: LD_ADDR_VAR 0 2
67150: PUSH
67151: LD_VAR 0 1
67155: PUSH
67156: LD_INT 1
67158: PLUS
67159: ST_TO_ADDR
// end ;
67160: LD_VAR 0 2
67164: RET
// export function Dec ( value ) ; begin
67165: LD_INT 0
67167: PPUSH
// result := value - 1 ;
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 1
67180: MINUS
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67187: LD_INT 0
67189: PPUSH
67190: PPUSH
67191: PPUSH
67192: PPUSH
67193: PPUSH
67194: PPUSH
67195: PPUSH
67196: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67197: LD_VAR 0 1
67201: PPUSH
67202: LD_VAR 0 2
67206: PPUSH
67207: CALL_OW 488
67211: NOT
67212: IFTRUE 67231
67214: PUSH
67215: LD_VAR 0 3
67219: PPUSH
67220: LD_VAR 0 4
67224: PPUSH
67225: CALL_OW 488
67229: NOT
67230: OR
67231: IFFALSE 67244
// begin result := - 1 ;
67233: LD_ADDR_VAR 0 5
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: ST_TO_ADDR
// exit ;
67242: GO 67479
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67244: LD_ADDR_VAR 0 12
67248: PUSH
67249: LD_VAR 0 1
67253: PPUSH
67254: LD_VAR 0 2
67258: PPUSH
67259: LD_VAR 0 3
67263: PPUSH
67264: LD_VAR 0 4
67268: PPUSH
67269: CALL 66315 0 4
67273: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67274: LD_ADDR_VAR 0 11
67278: PUSH
67279: LD_VAR 0 1
67283: PPUSH
67284: LD_VAR 0 2
67288: PPUSH
67289: LD_VAR 0 12
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PPUSH
67298: LD_VAR 0 12
67302: PUSH
67303: LD_INT 2
67305: ARRAY
67306: PPUSH
67307: CALL_OW 298
67311: ST_TO_ADDR
// distance := 9999 ;
67312: LD_ADDR_VAR 0 10
67316: PUSH
67317: LD_INT 9999
67319: ST_TO_ADDR
// for i := 0 to 5 do
67320: LD_ADDR_VAR 0 6
67324: PUSH
67325: DOUBLE
67326: LD_INT 0
67328: DEC
67329: ST_TO_ADDR
67330: LD_INT 5
67332: PUSH
67333: FOR_TO
67334: IFFALSE 67477
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67336: LD_ADDR_VAR 0 7
67340: PUSH
67341: LD_VAR 0 1
67345: PPUSH
67346: LD_VAR 0 6
67350: PPUSH
67351: LD_VAR 0 11
67355: PPUSH
67356: CALL_OW 272
67360: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67361: LD_ADDR_VAR 0 8
67365: PUSH
67366: LD_VAR 0 2
67370: PPUSH
67371: LD_VAR 0 6
67375: PPUSH
67376: LD_VAR 0 11
67380: PPUSH
67381: CALL_OW 273
67385: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67386: LD_VAR 0 7
67390: PPUSH
67391: LD_VAR 0 8
67395: PPUSH
67396: CALL_OW 488
67400: NOT
67401: IFFALSE 67405
// continue ;
67403: GO 67333
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67405: LD_ADDR_VAR 0 9
67409: PUSH
67410: LD_VAR 0 12
67414: PUSH
67415: LD_INT 1
67417: ARRAY
67418: PPUSH
67419: LD_VAR 0 12
67423: PUSH
67424: LD_INT 2
67426: ARRAY
67427: PPUSH
67428: LD_VAR 0 7
67432: PPUSH
67433: LD_VAR 0 8
67437: PPUSH
67438: CALL_OW 298
67442: ST_TO_ADDR
// if tmp < distance then
67443: LD_VAR 0 9
67447: PUSH
67448: LD_VAR 0 10
67452: LESS
67453: IFFALSE 67475
// begin result := i ;
67455: LD_ADDR_VAR 0 5
67459: PUSH
67460: LD_VAR 0 6
67464: ST_TO_ADDR
// distance := tmp ;
67465: LD_ADDR_VAR 0 10
67469: PUSH
67470: LD_VAR 0 9
67474: ST_TO_ADDR
// end ; end ;
67475: GO 67333
67477: POP
67478: POP
// end ;
67479: LD_VAR 0 5
67483: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67484: LD_INT 0
67486: PPUSH
67487: PPUSH
// if not driver or not IsInUnit ( driver ) then
67488: LD_VAR 0 1
67492: NOT
67493: IFTRUE 67507
67495: PUSH
67496: LD_VAR 0 1
67500: PPUSH
67501: CALL_OW 310
67505: NOT
67506: OR
67507: IFFALSE 67511
// exit ;
67509: GO 67601
// vehicle := IsInUnit ( driver ) ;
67511: LD_ADDR_VAR 0 3
67515: PUSH
67516: LD_VAR 0 1
67520: PPUSH
67521: CALL_OW 310
67525: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67526: LD_VAR 0 1
67530: PPUSH
67531: LD_STRING \
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: PUSH
67561: LD_STRING E
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_VAR 0 3
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PPUSH
67597: CALL_OW 446
// end ;
67601: LD_VAR 0 2
67605: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67606: LD_INT 0
67608: PPUSH
67609: PPUSH
// if not driver or not IsInUnit ( driver ) then
67610: LD_VAR 0 1
67614: NOT
67615: IFTRUE 67629
67617: PUSH
67618: LD_VAR 0 1
67622: PPUSH
67623: CALL_OW 310
67627: NOT
67628: OR
67629: IFFALSE 67633
// exit ;
67631: GO 67723
// vehicle := IsInUnit ( driver ) ;
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_VAR 0 1
67642: PPUSH
67643: CALL_OW 310
67647: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67648: LD_VAR 0 1
67652: PPUSH
67653: LD_STRING \
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 0
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: PUSH
67683: LD_STRING E
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_VAR 0 3
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PPUSH
67719: CALL_OW 447
// end ;
67723: LD_VAR 0 2
67727: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67728: LD_INT 0
67730: PPUSH
67731: PPUSH
67732: PPUSH
// tmp := [ ] ;
67733: LD_ADDR_VAR 0 5
67737: PUSH
67738: EMPTY
67739: ST_TO_ADDR
// for i in units do
67740: LD_ADDR_VAR 0 4
67744: PUSH
67745: LD_VAR 0 1
67749: PUSH
67750: FOR_IN
67751: IFFALSE 67789
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67753: LD_ADDR_VAR 0 5
67757: PUSH
67758: LD_VAR 0 5
67762: PPUSH
67763: LD_VAR 0 5
67767: PUSH
67768: LD_INT 1
67770: PLUS
67771: PPUSH
67772: LD_VAR 0 4
67776: PPUSH
67777: CALL_OW 256
67781: PPUSH
67782: CALL_OW 2
67786: ST_TO_ADDR
67787: GO 67750
67789: POP
67790: POP
// if not tmp then
67791: LD_VAR 0 5
67795: NOT
67796: IFFALSE 67800
// exit ;
67798: GO 67848
// if asc then
67800: LD_VAR 0 2
67804: IFFALSE 67828
// result := SortListByListAsc ( units , tmp ) else
67806: LD_ADDR_VAR 0 3
67810: PUSH
67811: LD_VAR 0 1
67815: PPUSH
67816: LD_VAR 0 5
67820: PPUSH
67821: CALL_OW 76
67825: ST_TO_ADDR
67826: GO 67848
// result := SortListByListDesc ( units , tmp ) ;
67828: LD_ADDR_VAR 0 3
67832: PUSH
67833: LD_VAR 0 1
67837: PPUSH
67838: LD_VAR 0 5
67842: PPUSH
67843: CALL_OW 77
67847: ST_TO_ADDR
// end ;
67848: LD_VAR 0 3
67852: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67853: LD_INT 0
67855: PPUSH
67856: PPUSH
// task := GetTaskList ( mech ) ;
67857: LD_ADDR_VAR 0 4
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: CALL_OW 437
67871: ST_TO_ADDR
// if not task then
67872: LD_VAR 0 4
67876: NOT
67877: IFFALSE 67881
// exit ;
67879: GO 67925
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67881: LD_ADDR_VAR 0 3
67885: PUSH
67886: LD_VAR 0 4
67890: PUSH
67891: LD_INT 1
67893: ARRAY
67894: PUSH
67895: LD_INT 1
67897: ARRAY
67898: PUSH
67899: LD_STRING r
67901: EQUAL
67902: IFFALSE 67924
67904: PUSH
67905: LD_VAR 0 4
67909: PUSH
67910: LD_INT 1
67912: ARRAY
67913: PUSH
67914: LD_INT 4
67916: ARRAY
67917: PUSH
67918: LD_VAR 0 2
67922: EQUAL
67923: AND
67924: ST_TO_ADDR
// end ;
67925: LD_VAR 0 3
67929: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67930: LD_INT 0
67932: PPUSH
// SetDir ( unit , d ) ;
67933: LD_VAR 0 1
67937: PPUSH
67938: LD_VAR 0 4
67942: PPUSH
67943: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67947: LD_ADDR_VAR 0 6
67951: PUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: LD_VAR 0 2
67961: PPUSH
67962: LD_VAR 0 3
67966: PPUSH
67967: LD_VAR 0 5
67971: PPUSH
67972: CALL_OW 48
67976: ST_TO_ADDR
// end ;
67977: LD_VAR 0 6
67981: RET
// export function ToNaturalNumber ( number ) ; begin
67982: LD_INT 0
67984: PPUSH
// result := number div 1 ;
67985: LD_ADDR_VAR 0 2
67989: PUSH
67990: LD_VAR 0 1
67994: PUSH
67995: LD_INT 1
67997: DIV
67998: ST_TO_ADDR
// if number < 0 then
67999: LD_VAR 0 1
68003: PUSH
68004: LD_INT 0
68006: LESS
68007: IFFALSE 68017
// result := 0 ;
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_INT 0
68016: ST_TO_ADDR
// end ;
68017: LD_VAR 0 2
68021: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
68022: LD_INT 0
68024: PPUSH
68025: PPUSH
68026: PPUSH
// if not buildings then
68027: LD_VAR 0 1
68031: NOT
68032: IFFALSE 68036
// exit ;
68034: GO 68151
// tmp := [ ] ;
68036: LD_ADDR_VAR 0 5
68040: PUSH
68041: EMPTY
68042: ST_TO_ADDR
// for b in buildings do
68043: LD_ADDR_VAR 0 4
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: FOR_IN
68054: IFFALSE 68092
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
68056: LD_ADDR_VAR 0 5
68060: PUSH
68061: LD_VAR 0 5
68065: PPUSH
68066: LD_VAR 0 5
68070: PUSH
68071: LD_INT 1
68073: PLUS
68074: PPUSH
68075: LD_VAR 0 4
68079: PPUSH
68080: CALL_OW 266
68084: PPUSH
68085: CALL_OW 1
68089: ST_TO_ADDR
68090: GO 68053
68092: POP
68093: POP
// if not tmp then
68094: LD_VAR 0 5
68098: NOT
68099: IFFALSE 68103
// exit ;
68101: GO 68151
// if asc then
68103: LD_VAR 0 2
68107: IFFALSE 68131
// result := SortListByListAsc ( buildings , tmp ) else
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_VAR 0 1
68118: PPUSH
68119: LD_VAR 0 5
68123: PPUSH
68124: CALL_OW 76
68128: ST_TO_ADDR
68129: GO 68151
// result := SortListByListDesc ( buildings , tmp ) ;
68131: LD_ADDR_VAR 0 3
68135: PUSH
68136: LD_VAR 0 1
68140: PPUSH
68141: LD_VAR 0 5
68145: PPUSH
68146: CALL_OW 77
68150: ST_TO_ADDR
// end ;
68151: LD_VAR 0 3
68155: RET
// export function SortByClass ( units , class ) ; var un ; begin
68156: LD_INT 0
68158: PPUSH
68159: PPUSH
// if not units or not class then
68160: LD_VAR 0 1
68164: NOT
68165: IFTRUE 68174
68167: PUSH
68168: LD_VAR 0 2
68172: NOT
68173: OR
68174: IFFALSE 68178
// exit ;
68176: GO 68273
// result := [ ] ;
68178: LD_ADDR_VAR 0 3
68182: PUSH
68183: EMPTY
68184: ST_TO_ADDR
// for un in units do
68185: LD_ADDR_VAR 0 4
68189: PUSH
68190: LD_VAR 0 1
68194: PUSH
68195: FOR_IN
68196: IFFALSE 68271
// if GetClass ( un ) = class then
68198: LD_VAR 0 4
68202: PPUSH
68203: CALL_OW 257
68207: PUSH
68208: LD_VAR 0 2
68212: EQUAL
68213: IFFALSE 68240
// result := Insert ( result , 1 , un ) else
68215: LD_ADDR_VAR 0 3
68219: PUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: LD_INT 1
68227: PPUSH
68228: LD_VAR 0 4
68232: PPUSH
68233: CALL_OW 2
68237: ST_TO_ADDR
68238: GO 68269
// result := Replace ( result , result + 1 , un ) ;
68240: LD_ADDR_VAR 0 3
68244: PUSH
68245: LD_VAR 0 3
68249: PPUSH
68250: LD_VAR 0 3
68254: PUSH
68255: LD_INT 1
68257: PLUS
68258: PPUSH
68259: LD_VAR 0 4
68263: PPUSH
68264: CALL_OW 1
68268: ST_TO_ADDR
68269: GO 68195
68271: POP
68272: POP
// end ;
68273: LD_VAR 0 3
68277: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68278: LD_INT 0
68280: PPUSH
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
68286: PPUSH
// result := [ ] ;
68287: LD_ADDR_VAR 0 4
68291: PUSH
68292: EMPTY
68293: ST_TO_ADDR
// if x - r < 0 then
68294: LD_VAR 0 1
68298: PUSH
68299: LD_VAR 0 3
68303: MINUS
68304: PUSH
68305: LD_INT 0
68307: LESS
68308: IFFALSE 68320
// min_x := 0 else
68310: LD_ADDR_VAR 0 8
68314: PUSH
68315: LD_INT 0
68317: ST_TO_ADDR
68318: GO 68336
// min_x := x - r ;
68320: LD_ADDR_VAR 0 8
68324: PUSH
68325: LD_VAR 0 1
68329: PUSH
68330: LD_VAR 0 3
68334: MINUS
68335: ST_TO_ADDR
// if y - r < 0 then
68336: LD_VAR 0 2
68340: PUSH
68341: LD_VAR 0 3
68345: MINUS
68346: PUSH
68347: LD_INT 0
68349: LESS
68350: IFFALSE 68362
// min_y := 0 else
68352: LD_ADDR_VAR 0 7
68356: PUSH
68357: LD_INT 0
68359: ST_TO_ADDR
68360: GO 68378
// min_y := y - r ;
68362: LD_ADDR_VAR 0 7
68366: PUSH
68367: LD_VAR 0 2
68371: PUSH
68372: LD_VAR 0 3
68376: MINUS
68377: ST_TO_ADDR
// max_x := x + r ;
68378: LD_ADDR_VAR 0 9
68382: PUSH
68383: LD_VAR 0 1
68387: PUSH
68388: LD_VAR 0 3
68392: PLUS
68393: ST_TO_ADDR
// max_y := y + r ;
68394: LD_ADDR_VAR 0 10
68398: PUSH
68399: LD_VAR 0 2
68403: PUSH
68404: LD_VAR 0 3
68408: PLUS
68409: ST_TO_ADDR
// for _x = min_x to max_x do
68410: LD_ADDR_VAR 0 5
68414: PUSH
68415: DOUBLE
68416: LD_VAR 0 8
68420: DEC
68421: ST_TO_ADDR
68422: LD_VAR 0 9
68426: PUSH
68427: FOR_TO
68428: IFFALSE 68529
// for _y = min_y to max_y do
68430: LD_ADDR_VAR 0 6
68434: PUSH
68435: DOUBLE
68436: LD_VAR 0 7
68440: DEC
68441: ST_TO_ADDR
68442: LD_VAR 0 10
68446: PUSH
68447: FOR_TO
68448: IFFALSE 68525
// begin if not ValidHex ( _x , _y ) then
68450: LD_VAR 0 5
68454: PPUSH
68455: LD_VAR 0 6
68459: PPUSH
68460: CALL_OW 488
68464: NOT
68465: IFFALSE 68469
// continue ;
68467: GO 68447
// if GetResourceTypeXY ( _x , _y ) then
68469: LD_VAR 0 5
68473: PPUSH
68474: LD_VAR 0 6
68478: PPUSH
68479: CALL_OW 283
68483: IFFALSE 68523
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68485: LD_ADDR_VAR 0 4
68489: PUSH
68490: LD_VAR 0 4
68494: PPUSH
68495: LD_VAR 0 4
68499: PUSH
68500: LD_INT 1
68502: PLUS
68503: PPUSH
68504: LD_VAR 0 5
68508: PUSH
68509: LD_VAR 0 6
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PPUSH
68518: CALL_OW 1
68522: ST_TO_ADDR
// end ;
68523: GO 68447
68525: POP
68526: POP
68527: GO 68427
68529: POP
68530: POP
// end ;
68531: LD_VAR 0 4
68535: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
68544: PPUSH
68545: PPUSH
// if not units then
68546: LD_VAR 0 1
68550: NOT
68551: IFFALSE 68555
// exit ;
68553: GO 69087
// result := UnitFilter ( units , [ f_ok ] ) ;
68555: LD_ADDR_VAR 0 3
68559: PUSH
68560: LD_VAR 0 1
68564: PPUSH
68565: LD_INT 50
68567: PUSH
68568: EMPTY
68569: LIST
68570: PPUSH
68571: CALL_OW 72
68575: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68576: LD_ADDR_VAR 0 8
68580: PUSH
68581: LD_VAR 0 1
68585: PUSH
68586: LD_INT 1
68588: ARRAY
68589: PPUSH
68590: CALL_OW 255
68594: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68595: LD_ADDR_VAR 0 10
68599: PUSH
68600: LD_INT 29
68602: PUSH
68603: LD_INT 91
68605: PUSH
68606: LD_INT 49
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: LIST
68613: ST_TO_ADDR
// if not result then
68614: LD_VAR 0 3
68618: NOT
68619: IFFALSE 68623
// exit ;
68621: GO 69087
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68623: LD_ADDR_VAR 0 5
68627: PUSH
68628: LD_INT 81
68630: PUSH
68631: LD_VAR 0 8
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PPUSH
68640: CALL_OW 69
68644: ST_TO_ADDR
// for i in result do
68645: LD_ADDR_VAR 0 4
68649: PUSH
68650: LD_VAR 0 3
68654: PUSH
68655: FOR_IN
68656: IFFALSE 69085
// begin tag := GetTag ( i ) + 1 ;
68658: LD_ADDR_VAR 0 9
68662: PUSH
68663: LD_VAR 0 4
68667: PPUSH
68668: CALL_OW 110
68672: PUSH
68673: LD_INT 1
68675: PLUS
68676: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68677: LD_ADDR_VAR 0 7
68681: PUSH
68682: LD_VAR 0 4
68686: PPUSH
68687: CALL_OW 250
68691: PPUSH
68692: LD_VAR 0 4
68696: PPUSH
68697: CALL_OW 251
68701: PPUSH
68702: LD_INT 4
68704: PPUSH
68705: CALL 68278 0 3
68709: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68710: LD_VAR 0 4
68714: PPUSH
68715: CALL_OW 247
68719: PUSH
68720: LD_INT 2
68722: EQUAL
68723: IFFALSE 68735
68725: PUSH
68726: LD_VAR 0 7
68730: PUSH
68731: LD_INT 2
68733: GREATER
68734: AND
68735: IFFALSE 68755
68737: PUSH
68738: LD_VAR 0 4
68742: PPUSH
68743: CALL_OW 264
68747: PUSH
68748: LD_VAR 0 10
68752: IN
68753: NOT
68754: AND
68755: IFFALSE 68794
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68757: LD_VAR 0 4
68761: PPUSH
68762: LD_VAR 0 7
68766: PUSH
68767: LD_INT 1
68769: ARRAY
68770: PUSH
68771: LD_INT 1
68773: ARRAY
68774: PPUSH
68775: LD_VAR 0 7
68779: PUSH
68780: LD_INT 1
68782: ARRAY
68783: PUSH
68784: LD_INT 2
68786: ARRAY
68787: PPUSH
68788: CALL_OW 116
68792: GO 69083
// if path > tag then
68794: LD_VAR 0 2
68798: PUSH
68799: LD_VAR 0 9
68803: GREATER
68804: IFFALSE 69012
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68806: LD_ADDR_VAR 0 6
68810: PUSH
68811: LD_VAR 0 5
68815: PPUSH
68816: LD_INT 91
68818: PUSH
68819: LD_VAR 0 4
68823: PUSH
68824: LD_INT 8
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: PPUSH
68832: CALL_OW 72
68836: ST_TO_ADDR
// if nearEnemy then
68837: LD_VAR 0 6
68841: IFFALSE 68910
// begin if GetWeapon ( i ) = ru_time_lapser then
68843: LD_VAR 0 4
68847: PPUSH
68848: CALL_OW 264
68852: PUSH
68853: LD_INT 49
68855: EQUAL
68856: IFFALSE 68884
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68858: LD_VAR 0 4
68862: PPUSH
68863: LD_VAR 0 6
68867: PPUSH
68868: LD_VAR 0 4
68872: PPUSH
68873: CALL_OW 74
68877: PPUSH
68878: CALL_OW 112
68882: GO 68908
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68884: LD_VAR 0 4
68888: PPUSH
68889: LD_VAR 0 6
68893: PPUSH
68894: LD_VAR 0 4
68898: PPUSH
68899: CALL_OW 74
68903: PPUSH
68904: CALL 70168 0 2
// end else
68908: GO 69010
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68910: LD_VAR 0 4
68914: PPUSH
68915: LD_VAR 0 2
68919: PUSH
68920: LD_VAR 0 9
68924: ARRAY
68925: PUSH
68926: LD_INT 1
68928: ARRAY
68929: PPUSH
68930: LD_VAR 0 2
68934: PUSH
68935: LD_VAR 0 9
68939: ARRAY
68940: PUSH
68941: LD_INT 2
68943: ARRAY
68944: PPUSH
68945: CALL_OW 297
68949: PUSH
68950: LD_INT 6
68952: GREATER
68953: IFFALSE 68996
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68955: LD_VAR 0 4
68959: PPUSH
68960: LD_VAR 0 2
68964: PUSH
68965: LD_VAR 0 9
68969: ARRAY
68970: PUSH
68971: LD_INT 1
68973: ARRAY
68974: PPUSH
68975: LD_VAR 0 2
68979: PUSH
68980: LD_VAR 0 9
68984: ARRAY
68985: PUSH
68986: LD_INT 2
68988: ARRAY
68989: PPUSH
68990: CALL_OW 114
68994: GO 69010
// SetTag ( i , tag ) ;
68996: LD_VAR 0 4
69000: PPUSH
69001: LD_VAR 0 9
69005: PPUSH
69006: CALL_OW 109
// end else
69010: GO 69083
// if enemy then
69012: LD_VAR 0 5
69016: IFFALSE 69083
// begin if GetWeapon ( i ) = ru_time_lapser then
69018: LD_VAR 0 4
69022: PPUSH
69023: CALL_OW 264
69027: PUSH
69028: LD_INT 49
69030: EQUAL
69031: IFFALSE 69059
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69033: LD_VAR 0 4
69037: PPUSH
69038: LD_VAR 0 5
69042: PPUSH
69043: LD_VAR 0 4
69047: PPUSH
69048: CALL_OW 74
69052: PPUSH
69053: CALL_OW 112
69057: GO 69083
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69059: LD_VAR 0 4
69063: PPUSH
69064: LD_VAR 0 5
69068: PPUSH
69069: LD_VAR 0 4
69073: PPUSH
69074: CALL_OW 74
69078: PPUSH
69079: CALL 70168 0 2
// end ; end ;
69083: GO 68655
69085: POP
69086: POP
// end ;
69087: LD_VAR 0 3
69091: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69092: LD_INT 0
69094: PPUSH
69095: PPUSH
69096: PPUSH
// if not unit or IsInUnit ( unit ) then
69097: LD_VAR 0 1
69101: NOT
69102: IFTRUE 69115
69104: PUSH
69105: LD_VAR 0 1
69109: PPUSH
69110: CALL_OW 310
69114: OR
69115: IFFALSE 69119
// exit ;
69117: GO 69210
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69119: LD_ADDR_VAR 0 4
69123: PUSH
69124: LD_VAR 0 1
69128: PPUSH
69129: CALL_OW 250
69133: PPUSH
69134: LD_VAR 0 2
69138: PPUSH
69139: LD_INT 1
69141: PPUSH
69142: CALL_OW 272
69146: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69147: LD_ADDR_VAR 0 5
69151: PUSH
69152: LD_VAR 0 1
69156: PPUSH
69157: CALL_OW 251
69161: PPUSH
69162: LD_VAR 0 2
69166: PPUSH
69167: LD_INT 1
69169: PPUSH
69170: CALL_OW 273
69174: ST_TO_ADDR
// if ValidHex ( x , y ) then
69175: LD_VAR 0 4
69179: PPUSH
69180: LD_VAR 0 5
69184: PPUSH
69185: CALL_OW 488
69189: IFFALSE 69210
// ComTurnXY ( unit , x , y ) ;
69191: LD_VAR 0 1
69195: PPUSH
69196: LD_VAR 0 4
69200: PPUSH
69201: LD_VAR 0 5
69205: PPUSH
69206: CALL_OW 118
// end ;
69210: LD_VAR 0 3
69214: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69215: LD_INT 0
69217: PPUSH
69218: PPUSH
// result := false ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: LD_INT 0
69226: ST_TO_ADDR
// if not units then
69227: LD_VAR 0 2
69231: NOT
69232: IFFALSE 69236
// exit ;
69234: GO 69281
// for i in units do
69236: LD_ADDR_VAR 0 4
69240: PUSH
69241: LD_VAR 0 2
69245: PUSH
69246: FOR_IN
69247: IFFALSE 69279
// if See ( side , i ) then
69249: LD_VAR 0 1
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 292
69263: IFFALSE 69277
// begin result := true ;
69265: LD_ADDR_VAR 0 3
69269: PUSH
69270: LD_INT 1
69272: ST_TO_ADDR
// exit ;
69273: POP
69274: POP
69275: GO 69281
// end ;
69277: GO 69246
69279: POP
69280: POP
// end ;
69281: LD_VAR 0 3
69285: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
69290: PPUSH
69291: PPUSH
// if not unit or not points then
69292: LD_VAR 0 1
69296: NOT
69297: IFTRUE 69306
69299: PUSH
69300: LD_VAR 0 2
69304: NOT
69305: OR
69306: IFFALSE 69310
// exit ;
69308: GO 69400
// dist := 99999 ;
69310: LD_ADDR_VAR 0 5
69314: PUSH
69315: LD_INT 99999
69317: ST_TO_ADDR
// for i in points do
69318: LD_ADDR_VAR 0 4
69322: PUSH
69323: LD_VAR 0 2
69327: PUSH
69328: FOR_IN
69329: IFFALSE 69398
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69331: LD_ADDR_VAR 0 6
69335: PUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: LD_VAR 0 4
69345: PUSH
69346: LD_INT 1
69348: ARRAY
69349: PPUSH
69350: LD_VAR 0 4
69354: PUSH
69355: LD_INT 2
69357: ARRAY
69358: PPUSH
69359: CALL_OW 297
69363: ST_TO_ADDR
// if tmpDist < dist then
69364: LD_VAR 0 6
69368: PUSH
69369: LD_VAR 0 5
69373: LESS
69374: IFFALSE 69396
// begin result := i ;
69376: LD_ADDR_VAR 0 3
69380: PUSH
69381: LD_VAR 0 4
69385: ST_TO_ADDR
// dist := tmpDist ;
69386: LD_ADDR_VAR 0 5
69390: PUSH
69391: LD_VAR 0 6
69395: ST_TO_ADDR
// end ; end ;
69396: GO 69328
69398: POP
69399: POP
// end ;
69400: LD_VAR 0 3
69404: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69405: LD_INT 0
69407: PPUSH
// uc_side := side ;
69408: LD_ADDR_OWVAR 20
69412: PUSH
69413: LD_VAR 0 1
69417: ST_TO_ADDR
// uc_nation := 3 ;
69418: LD_ADDR_OWVAR 21
69422: PUSH
69423: LD_INT 3
69425: ST_TO_ADDR
// vc_chassis := 25 ;
69426: LD_ADDR_OWVAR 37
69430: PUSH
69431: LD_INT 25
69433: ST_TO_ADDR
// vc_engine := engine_siberite ;
69434: LD_ADDR_OWVAR 39
69438: PUSH
69439: LD_INT 3
69441: ST_TO_ADDR
// vc_control := control_computer ;
69442: LD_ADDR_OWVAR 38
69446: PUSH
69447: LD_INT 3
69449: ST_TO_ADDR
// vc_weapon := 59 ;
69450: LD_ADDR_OWVAR 40
69454: PUSH
69455: LD_INT 59
69457: ST_TO_ADDR
// result := CreateVehicle ;
69458: LD_ADDR_VAR 0 5
69462: PUSH
69463: CALL_OW 45
69467: ST_TO_ADDR
// SetDir ( result , d ) ;
69468: LD_VAR 0 5
69472: PPUSH
69473: LD_VAR 0 4
69477: PPUSH
69478: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69482: LD_VAR 0 5
69486: PPUSH
69487: LD_VAR 0 2
69491: PPUSH
69492: LD_VAR 0 3
69496: PPUSH
69497: LD_INT 0
69499: PPUSH
69500: CALL_OW 48
// end ;
69504: LD_VAR 0 5
69508: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69509: LD_INT 0
69511: PPUSH
69512: PPUSH
69513: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69514: LD_ADDR_VAR 0 2
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69537: LD_VAR 0 1
69541: NOT
69542: IFTRUE 69575
69544: PUSH
69545: LD_VAR 0 1
69549: PPUSH
69550: CALL_OW 264
69554: PUSH
69555: LD_INT 12
69557: PUSH
69558: LD_INT 51
69560: PUSH
69561: LD_INT 32
69563: PUSH
69564: LD_INT 89
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: IN
69573: NOT
69574: OR
69575: IFFALSE 69579
// exit ;
69577: GO 69677
// for i := 1 to 3 do
69579: LD_ADDR_VAR 0 3
69583: PUSH
69584: DOUBLE
69585: LD_INT 1
69587: DEC
69588: ST_TO_ADDR
69589: LD_INT 3
69591: PUSH
69592: FOR_TO
69593: IFFALSE 69675
// begin tmp := GetCargo ( cargo , i ) ;
69595: LD_ADDR_VAR 0 4
69599: PUSH
69600: LD_VAR 0 1
69604: PPUSH
69605: LD_VAR 0 3
69609: PPUSH
69610: CALL_OW 289
69614: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69615: LD_ADDR_VAR 0 2
69619: PUSH
69620: LD_VAR 0 2
69624: PPUSH
69625: LD_VAR 0 3
69629: PPUSH
69630: LD_VAR 0 4
69634: PPUSH
69635: CALL_OW 1
69639: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69640: LD_ADDR_VAR 0 2
69644: PUSH
69645: LD_VAR 0 2
69649: PPUSH
69650: LD_INT 4
69652: PPUSH
69653: LD_VAR 0 2
69657: PUSH
69658: LD_INT 4
69660: ARRAY
69661: PUSH
69662: LD_VAR 0 4
69666: PLUS
69667: PPUSH
69668: CALL_OW 1
69672: ST_TO_ADDR
// end ;
69673: GO 69592
69675: POP
69676: POP
// end ;
69677: LD_VAR 0 2
69681: RET
// export function Length ( array ) ; begin
69682: LD_INT 0
69684: PPUSH
// result := array + 0 ;
69685: LD_ADDR_VAR 0 2
69689: PUSH
69690: LD_VAR 0 1
69694: PUSH
69695: LD_INT 0
69697: PLUS
69698: ST_TO_ADDR
// end ;
69699: LD_VAR 0 2
69703: RET
// export function PrepareArray ( array ) ; begin
69704: LD_INT 0
69706: PPUSH
// result := array diff 0 ;
69707: LD_ADDR_VAR 0 2
69711: PUSH
69712: LD_VAR 0 1
69716: PUSH
69717: LD_INT 0
69719: DIFF
69720: ST_TO_ADDR
// if not result [ 1 ] then
69721: LD_VAR 0 2
69725: PUSH
69726: LD_INT 1
69728: ARRAY
69729: NOT
69730: IFFALSE 69750
// result := Delete ( result , 1 ) ;
69732: LD_ADDR_VAR 0 2
69736: PUSH
69737: LD_VAR 0 2
69741: PPUSH
69742: LD_INT 1
69744: PPUSH
69745: CALL_OW 3
69749: ST_TO_ADDR
// end ;
69750: LD_VAR 0 2
69754: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69755: LD_INT 0
69757: PPUSH
69758: PPUSH
69759: PPUSH
69760: PPUSH
// sibRocketRange := 25 ;
69761: LD_ADDR_VAR 0 6
69765: PUSH
69766: LD_INT 25
69768: ST_TO_ADDR
// result := false ;
69769: LD_ADDR_VAR 0 4
69773: PUSH
69774: LD_INT 0
69776: ST_TO_ADDR
// for i := 0 to 5 do
69777: LD_ADDR_VAR 0 5
69781: PUSH
69782: DOUBLE
69783: LD_INT 0
69785: DEC
69786: ST_TO_ADDR
69787: LD_INT 5
69789: PUSH
69790: FOR_TO
69791: IFFALSE 69858
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69793: LD_VAR 0 1
69797: PPUSH
69798: LD_VAR 0 5
69802: PPUSH
69803: LD_VAR 0 6
69807: PPUSH
69808: CALL_OW 272
69812: PPUSH
69813: LD_VAR 0 2
69817: PPUSH
69818: LD_VAR 0 5
69822: PPUSH
69823: LD_VAR 0 6
69827: PPUSH
69828: CALL_OW 273
69832: PPUSH
69833: LD_VAR 0 3
69837: PPUSH
69838: CALL_OW 309
69842: IFFALSE 69856
// begin result := true ;
69844: LD_ADDR_VAR 0 4
69848: PUSH
69849: LD_INT 1
69851: ST_TO_ADDR
// exit ;
69852: POP
69853: POP
69854: GO 69860
// end ;
69856: GO 69790
69858: POP
69859: POP
// end ;
69860: LD_VAR 0 4
69864: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69865: LD_INT 0
69867: PPUSH
69868: PPUSH
69869: PPUSH
// if btype = b_depot then
69870: LD_VAR 0 2
69874: PUSH
69875: LD_INT 0
69877: EQUAL
69878: IFFALSE 69890
// begin result := true ;
69880: LD_ADDR_VAR 0 3
69884: PUSH
69885: LD_INT 1
69887: ST_TO_ADDR
// exit ;
69888: GO 70010
// end ; pom := GetBase ( depot ) ;
69890: LD_ADDR_VAR 0 4
69894: PUSH
69895: LD_VAR 0 1
69899: PPUSH
69900: CALL_OW 274
69904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69905: LD_ADDR_VAR 0 5
69909: PUSH
69910: LD_VAR 0 2
69914: PPUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 248
69924: PPUSH
69925: CALL_OW 450
69929: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69930: LD_ADDR_VAR 0 3
69934: PUSH
69935: LD_VAR 0 4
69939: PPUSH
69940: LD_INT 1
69942: PPUSH
69943: CALL_OW 275
69947: PUSH
69948: LD_VAR 0 5
69952: PUSH
69953: LD_INT 1
69955: ARRAY
69956: GREATEREQUAL
69957: IFFALSE 69983
69959: PUSH
69960: LD_VAR 0 4
69964: PPUSH
69965: LD_INT 2
69967: PPUSH
69968: CALL_OW 275
69972: PUSH
69973: LD_VAR 0 5
69977: PUSH
69978: LD_INT 2
69980: ARRAY
69981: GREATEREQUAL
69982: AND
69983: IFFALSE 70009
69985: PUSH
69986: LD_VAR 0 4
69990: PPUSH
69991: LD_INT 3
69993: PPUSH
69994: CALL_OW 275
69998: PUSH
69999: LD_VAR 0 5
70003: PUSH
70004: LD_INT 3
70006: ARRAY
70007: GREATEREQUAL
70008: AND
70009: ST_TO_ADDR
// end ;
70010: LD_VAR 0 3
70014: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70015: LD_INT 0
70017: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70018: LD_VAR 0 1
70022: PPUSH
70023: LD_VAR 0 2
70027: PPUSH
70028: LD_INT 0
70030: PPUSH
70031: LD_INT 0
70033: PPUSH
70034: LD_INT 1
70036: PPUSH
70037: LD_INT 0
70039: PPUSH
70040: CALL_OW 587
// end ;
70044: LD_VAR 0 3
70048: RET
// export function CenterOnNow ( unit ) ; begin
70049: LD_INT 0
70051: PPUSH
// result := IsInUnit ( unit ) ;
70052: LD_ADDR_VAR 0 2
70056: PUSH
70057: LD_VAR 0 1
70061: PPUSH
70062: CALL_OW 310
70066: ST_TO_ADDR
// if not result then
70067: LD_VAR 0 2
70071: NOT
70072: IFFALSE 70084
// result := unit ;
70074: LD_ADDR_VAR 0 2
70078: PUSH
70079: LD_VAR 0 1
70083: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70084: LD_VAR 0 1
70088: PPUSH
70089: CALL_OW 87
// end ;
70093: LD_VAR 0 2
70097: RET
// export function ComMoveHex ( unit , hex ) ; begin
70098: LD_INT 0
70100: PPUSH
// if not hex then
70101: LD_VAR 0 2
70105: NOT
70106: IFFALSE 70110
// exit ;
70108: GO 70163
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70110: LD_VAR 0 2
70114: PUSH
70115: LD_INT 1
70117: ARRAY
70118: PPUSH
70119: LD_VAR 0 2
70123: PUSH
70124: LD_INT 2
70126: ARRAY
70127: PPUSH
70128: CALL_OW 428
70132: IFFALSE 70136
// exit ;
70134: GO 70163
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70136: LD_VAR 0 1
70140: PPUSH
70141: LD_VAR 0 2
70145: PUSH
70146: LD_INT 1
70148: ARRAY
70149: PPUSH
70150: LD_VAR 0 2
70154: PUSH
70155: LD_INT 2
70157: ARRAY
70158: PPUSH
70159: CALL_OW 111
// end ;
70163: LD_VAR 0 3
70167: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70168: LD_INT 0
70170: PPUSH
70171: PPUSH
70172: PPUSH
// if not unit or not enemy then
70173: LD_VAR 0 1
70177: NOT
70178: IFTRUE 70187
70180: PUSH
70181: LD_VAR 0 2
70185: NOT
70186: OR
70187: IFFALSE 70191
// exit ;
70189: GO 70317
// x := GetX ( enemy ) ;
70191: LD_ADDR_VAR 0 4
70195: PUSH
70196: LD_VAR 0 2
70200: PPUSH
70201: CALL_OW 250
70205: ST_TO_ADDR
// y := GetY ( enemy ) ;
70206: LD_ADDR_VAR 0 5
70210: PUSH
70211: LD_VAR 0 2
70215: PPUSH
70216: CALL_OW 251
70220: ST_TO_ADDR
// if ValidHex ( x , y ) then
70221: LD_VAR 0 4
70225: PPUSH
70226: LD_VAR 0 5
70230: PPUSH
70231: CALL_OW 488
70235: IFFALSE 70317
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70237: LD_VAR 0 2
70241: PPUSH
70242: CALL_OW 247
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: LD_INT 2
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: IN
70257: IFTRUE 70280
70259: PUSH
70260: LD_VAR 0 1
70264: PPUSH
70265: CALL_OW 255
70269: PPUSH
70270: LD_VAR 0 2
70274: PPUSH
70275: CALL_OW 292
70279: OR
70280: IFFALSE 70298
// ComAttackUnit ( unit , enemy ) else
70282: LD_VAR 0 1
70286: PPUSH
70287: LD_VAR 0 2
70291: PPUSH
70292: CALL_OW 115
70296: GO 70317
// ComAgressiveMove ( unit , x , y ) ;
70298: LD_VAR 0 1
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: CALL_OW 114
// end ;
70317: LD_VAR 0 3
70321: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70322: LD_INT 0
70324: PPUSH
70325: PPUSH
70326: PPUSH
// list := AreaToList ( area , 0 ) ;
70327: LD_ADDR_VAR 0 5
70331: PUSH
70332: LD_VAR 0 1
70336: PPUSH
70337: LD_INT 0
70339: PPUSH
70340: CALL_OW 517
70344: ST_TO_ADDR
// if not list then
70345: LD_VAR 0 5
70349: NOT
70350: IFFALSE 70354
// exit ;
70352: GO 70484
// if all then
70354: LD_VAR 0 2
70358: IFFALSE 70446
// begin for i := 1 to list [ 1 ] do
70360: LD_ADDR_VAR 0 4
70364: PUSH
70365: DOUBLE
70366: LD_INT 1
70368: DEC
70369: ST_TO_ADDR
70370: LD_VAR 0 5
70374: PUSH
70375: LD_INT 1
70377: ARRAY
70378: PUSH
70379: FOR_TO
70380: IFFALSE 70442
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70382: LD_ADDR_VAR 0 3
70386: PUSH
70387: LD_VAR 0 3
70391: PPUSH
70392: LD_VAR 0 3
70396: PUSH
70397: LD_INT 1
70399: PLUS
70400: PPUSH
70401: LD_VAR 0 5
70405: PUSH
70406: LD_INT 1
70408: ARRAY
70409: PUSH
70410: LD_VAR 0 4
70414: ARRAY
70415: PUSH
70416: LD_VAR 0 5
70420: PUSH
70421: LD_INT 2
70423: ARRAY
70424: PUSH
70425: LD_VAR 0 4
70429: ARRAY
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PPUSH
70435: CALL_OW 1
70439: ST_TO_ADDR
70440: GO 70379
70442: POP
70443: POP
// exit ;
70444: GO 70484
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70446: LD_ADDR_VAR 0 3
70450: PUSH
70451: LD_VAR 0 5
70455: PUSH
70456: LD_INT 1
70458: ARRAY
70459: PUSH
70460: LD_INT 1
70462: ARRAY
70463: PUSH
70464: LD_VAR 0 5
70468: PUSH
70469: LD_INT 2
70471: ARRAY
70472: PUSH
70473: LD_INT 1
70475: ARRAY
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: EMPTY
70482: LIST
70483: ST_TO_ADDR
// end ;
70484: LD_VAR 0 3
70488: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70489: LD_INT 0
70491: PPUSH
70492: PPUSH
// list := AreaToList ( area , 0 ) ;
70493: LD_ADDR_VAR 0 4
70497: PUSH
70498: LD_VAR 0 1
70502: PPUSH
70503: LD_INT 0
70505: PPUSH
70506: CALL_OW 517
70510: ST_TO_ADDR
// if not list then
70511: LD_VAR 0 4
70515: NOT
70516: IFFALSE 70520
// exit ;
70518: GO 70561
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70520: LD_ADDR_VAR 0 3
70524: PUSH
70525: LD_VAR 0 4
70529: PUSH
70530: LD_INT 1
70532: ARRAY
70533: PUSH
70534: LD_INT 1
70536: ARRAY
70537: PUSH
70538: LD_VAR 0 4
70542: PUSH
70543: LD_INT 2
70545: ARRAY
70546: PUSH
70547: LD_INT 1
70549: ARRAY
70550: PUSH
70551: LD_VAR 0 2
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: ST_TO_ADDR
// end ;
70561: LD_VAR 0 3
70565: RET
// export function First ( array ) ; begin
70566: LD_INT 0
70568: PPUSH
// if not array then
70569: LD_VAR 0 1
70573: NOT
70574: IFFALSE 70578
// exit ;
70576: GO 70592
// result := array [ 1 ] ;
70578: LD_ADDR_VAR 0 2
70582: PUSH
70583: LD_VAR 0 1
70587: PUSH
70588: LD_INT 1
70590: ARRAY
70591: ST_TO_ADDR
// end ;
70592: LD_VAR 0 2
70596: RET
// export function Last ( array ) ; begin
70597: LD_INT 0
70599: PPUSH
// if not array then
70600: LD_VAR 0 1
70604: NOT
70605: IFFALSE 70609
// exit ;
70607: GO 70625
// result := array [ array ] ;
70609: LD_ADDR_VAR 0 2
70613: PUSH
70614: LD_VAR 0 1
70618: PUSH
70619: LD_VAR 0 1
70623: ARRAY
70624: ST_TO_ADDR
// end ;
70625: LD_VAR 0 2
70629: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70630: LD_INT 0
70632: PPUSH
70633: PPUSH
// result := [ ] ;
70634: LD_ADDR_VAR 0 5
70638: PUSH
70639: EMPTY
70640: ST_TO_ADDR
// if not array then
70641: LD_VAR 0 1
70645: NOT
70646: IFFALSE 70650
// exit ;
70648: GO 70762
// for i := 1 to array do
70650: LD_ADDR_VAR 0 6
70654: PUSH
70655: DOUBLE
70656: LD_INT 1
70658: DEC
70659: ST_TO_ADDR
70660: LD_VAR 0 1
70664: PUSH
70665: FOR_TO
70666: IFFALSE 70760
// if array [ i ] [ index ] = value then
70668: LD_VAR 0 1
70672: PUSH
70673: LD_VAR 0 6
70677: ARRAY
70678: PUSH
70679: LD_VAR 0 2
70683: ARRAY
70684: PUSH
70685: LD_VAR 0 3
70689: EQUAL
70690: IFFALSE 70758
// begin if indexColumn then
70692: LD_VAR 0 4
70696: IFFALSE 70732
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70698: LD_ADDR_VAR 0 5
70702: PUSH
70703: LD_VAR 0 5
70707: PPUSH
70708: LD_VAR 0 1
70712: PUSH
70713: LD_VAR 0 6
70717: ARRAY
70718: PUSH
70719: LD_VAR 0 4
70723: ARRAY
70724: PPUSH
70725: CALL 65770 0 2
70729: ST_TO_ADDR
70730: GO 70758
// result := Join ( result , array [ i ] ) ;
70732: LD_ADDR_VAR 0 5
70736: PUSH
70737: LD_VAR 0 5
70741: PPUSH
70742: LD_VAR 0 1
70746: PUSH
70747: LD_VAR 0 6
70751: ARRAY
70752: PPUSH
70753: CALL 65770 0 2
70757: ST_TO_ADDR
// end ;
70758: GO 70665
70760: POP
70761: POP
// end ;
70762: LD_VAR 0 5
70766: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70767: LD_INT 0
70769: PPUSH
// if not vehicles or not parkingPoint then
70770: LD_VAR 0 1
70774: NOT
70775: IFTRUE 70784
70777: PUSH
70778: LD_VAR 0 2
70782: NOT
70783: OR
70784: IFFALSE 70788
// exit ;
70786: GO 70886
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70788: LD_ADDR_VAR 0 1
70792: PUSH
70793: LD_VAR 0 1
70797: PPUSH
70798: LD_INT 50
70800: PUSH
70801: EMPTY
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: LD_INT 92
70809: PUSH
70810: LD_VAR 0 2
70814: PUSH
70815: LD_INT 1
70817: ARRAY
70818: PUSH
70819: LD_VAR 0 2
70823: PUSH
70824: LD_INT 2
70826: ARRAY
70827: PUSH
70828: LD_INT 8
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PPUSH
70845: CALL_OW 72
70849: ST_TO_ADDR
// if not vehicles then
70850: LD_VAR 0 1
70854: NOT
70855: IFFALSE 70859
// exit ;
70857: GO 70886
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70859: LD_VAR 0 1
70863: PPUSH
70864: LD_VAR 0 2
70868: PUSH
70869: LD_INT 1
70871: ARRAY
70872: PPUSH
70873: LD_VAR 0 2
70877: PUSH
70878: LD_INT 2
70880: ARRAY
70881: PPUSH
70882: CALL_OW 111
// end ;
70886: LD_VAR 0 3
70890: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70891: LD_INT 0
70893: PPUSH
70894: PPUSH
70895: PPUSH
// if not side or not area then
70896: LD_VAR 0 1
70900: NOT
70901: IFTRUE 70910
70903: PUSH
70904: LD_VAR 0 2
70908: NOT
70909: OR
70910: IFFALSE 70914
// exit ;
70912: GO 71033
// tmp := AreaToList ( area , 0 ) ;
70914: LD_ADDR_VAR 0 5
70918: PUSH
70919: LD_VAR 0 2
70923: PPUSH
70924: LD_INT 0
70926: PPUSH
70927: CALL_OW 517
70931: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70932: LD_ADDR_VAR 0 4
70936: PUSH
70937: DOUBLE
70938: LD_INT 1
70940: DEC
70941: ST_TO_ADDR
70942: LD_VAR 0 5
70946: PUSH
70947: LD_INT 1
70949: ARRAY
70950: PUSH
70951: FOR_TO
70952: IFFALSE 71031
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70954: LD_VAR 0 5
70958: PUSH
70959: LD_INT 1
70961: ARRAY
70962: PUSH
70963: LD_VAR 0 4
70967: ARRAY
70968: PPUSH
70969: LD_VAR 0 5
70973: PUSH
70974: LD_INT 2
70976: ARRAY
70977: PUSH
70978: LD_VAR 0 4
70982: ARRAY
70983: PPUSH
70984: CALL_OW 351
70988: IFFALSE 71029
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70990: LD_VAR 0 5
70994: PUSH
70995: LD_INT 1
70997: ARRAY
70998: PUSH
70999: LD_VAR 0 4
71003: ARRAY
71004: PPUSH
71005: LD_VAR 0 5
71009: PUSH
71010: LD_INT 2
71012: ARRAY
71013: PUSH
71014: LD_VAR 0 4
71018: ARRAY
71019: PPUSH
71020: LD_VAR 0 1
71024: PPUSH
71025: CALL_OW 244
// end ;
71029: GO 70951
71031: POP
71032: POP
// end ;
71033: LD_VAR 0 3
71037: RET
// export function UniqueArray ( array ) ; var i ; begin
71038: LD_INT 0
71040: PPUSH
71041: PPUSH
// result := [ ] ;
71042: LD_ADDR_VAR 0 2
71046: PUSH
71047: EMPTY
71048: ST_TO_ADDR
// if not array then
71049: LD_VAR 0 1
71053: NOT
71054: IFFALSE 71058
// exit ;
71056: GO 71119
// for i := 1 to array do
71058: LD_ADDR_VAR 0 3
71062: PUSH
71063: DOUBLE
71064: LD_INT 1
71066: DEC
71067: ST_TO_ADDR
71068: LD_VAR 0 1
71072: PUSH
71073: FOR_TO
71074: IFFALSE 71117
// if not array [ i ] in result then
71076: LD_VAR 0 1
71080: PUSH
71081: LD_VAR 0 3
71085: ARRAY
71086: PUSH
71087: LD_VAR 0 2
71091: IN
71092: NOT
71093: IFFALSE 71115
// result := Join ( result , i ) ;
71095: LD_ADDR_VAR 0 2
71099: PUSH
71100: LD_VAR 0 2
71104: PPUSH
71105: LD_VAR 0 3
71109: PPUSH
71110: CALL 65770 0 2
71114: ST_TO_ADDR
71115: GO 71073
71117: POP
71118: POP
// end ; end_of_file
71119: LD_VAR 0 2
71123: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
71124: PPOPN 6
71126: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
71127: LD_EXP 30
71131: PUSH
71132: LD_INT 4
71134: EQUAL
71135: IFFALSE 71171
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
71137: LD_STRING setGameDifficulty(
71139: PUSH
71140: LD_OWVAR 67
71144: STR
71145: PUSH
71146: LD_STRING )
71148: STR
71149: PPUSH
71150: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
71154: LD_STRING displayDifficulty(
71156: PUSH
71157: LD_OWVAR 67
71161: STR
71162: PUSH
71163: LD_STRING )
71165: STR
71166: PPUSH
71167: CALL_OW 559
// end ; SOS_MapStart ( ) ;
71171: CALL 71200 0 0
// end ; end_of_file
71175: PPOPN 1
71177: END
// every 0 0$1 do
71178: GO 71180
71180: DISABLE
// begin enable ;
71181: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
71182: LD_STRING updateTimer(
71184: PUSH
71185: LD_OWVAR 1
71189: STR
71190: PUSH
71191: LD_STRING );
71193: STR
71194: PPUSH
71195: CALL_OW 559
// end ;
71199: END
// export function SOS_MapStart ( ) ; begin
71200: LD_INT 0
71202: PPUSH
// UpdateFactoryWaypoints ( ) ;
71203: CALL 72134 0 0
// UpdateWarehouseGatheringPoints ( ) ;
71207: CALL 72386 0 0
// ParseMultiDataToLua ( ) ;
71211: CALL 72533 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
71215: LD_STRING setSpecLogoNumber(
71217: PUSH
71218: LD_INT 2
71220: STR
71221: PUSH
71222: LD_STRING ,
71224: STR
71225: PUSH
71226: LD_INT 1
71228: STR
71229: PUSH
71230: LD_STRING )
71232: STR
71233: PPUSH
71234: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
71238: LD_STRING setSpecLogoNumber(
71240: PUSH
71241: LD_INT 3
71243: STR
71244: PUSH
71245: LD_STRING ,
71247: STR
71248: PUSH
71249: LD_INT 2
71251: STR
71252: PUSH
71253: LD_STRING )
71255: STR
71256: PPUSH
71257: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
71261: LD_STRING setSpecLogoNumber(
71263: PUSH
71264: LD_INT 4
71266: STR
71267: PUSH
71268: LD_STRING ,
71270: STR
71271: PUSH
71272: LD_INT 3
71274: STR
71275: PUSH
71276: LD_STRING )
71278: STR
71279: PPUSH
71280: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
71284: LD_STRING setSpecLogoNumber(
71286: PUSH
71287: LD_INT 5
71289: STR
71290: PUSH
71291: LD_STRING ,
71293: STR
71294: PUSH
71295: LD_INT 4
71297: STR
71298: PUSH
71299: LD_STRING )
71301: STR
71302: PPUSH
71303: CALL_OW 559
// end ;
71307: LD_VAR 0 1
71311: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
71312: LD_INT 0
71314: PPUSH
71315: PPUSH
71316: PPUSH
71317: PPUSH
71318: PPUSH
71319: PPUSH
71320: PPUSH
71321: PPUSH
71322: PPUSH
// for i := 1 to 8 do
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: DOUBLE
71329: LD_INT 1
71331: DEC
71332: ST_TO_ADDR
71333: LD_INT 8
71335: PUSH
71336: FOR_TO
71337: IFFALSE 71722
// begin if mpSidePositions [ i ] then
71339: LD_EXP 31
71343: PUSH
71344: LD_VAR 0 2
71348: ARRAY
71349: IFFALSE 71720
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
71351: LD_ADDR_VAR 0 7
71355: PUSH
71356: LD_INT 22
71358: PUSH
71359: LD_VAR 0 2
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 21
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PPUSH
71382: CALL_OW 69
71386: PPUSH
71387: CALL 29838 0 1
71391: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71392: LD_ADDR_VAR 0 9
71396: PUSH
71397: LD_INT 22
71399: PUSH
71400: LD_VAR 0 2
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 2
71411: PUSH
71412: LD_INT 30
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 30
71424: PUSH
71425: LD_INT 1
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PPUSH
71441: CALL_OW 69
71445: ST_TO_ADDR
// crates := 0 ;
71446: LD_ADDR_VAR 0 4
71450: PUSH
71451: LD_INT 0
71453: ST_TO_ADDR
// oil := 0 ;
71454: LD_ADDR_VAR 0 5
71458: PUSH
71459: LD_INT 0
71461: ST_TO_ADDR
// sib := 0 ;
71462: LD_ADDR_VAR 0 6
71466: PUSH
71467: LD_INT 0
71469: ST_TO_ADDR
// if bases then
71470: LD_VAR 0 9
71474: IFFALSE 71580
// begin for j in bases do
71476: LD_ADDR_VAR 0 3
71480: PUSH
71481: LD_VAR 0 9
71485: PUSH
71486: FOR_IN
71487: IFFALSE 71578
// begin base := GetBase ( j ) ;
71489: LD_ADDR_VAR 0 8
71493: PUSH
71494: LD_VAR 0 3
71498: PPUSH
71499: CALL_OW 274
71503: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
71504: LD_ADDR_VAR 0 4
71508: PUSH
71509: LD_VAR 0 4
71513: PUSH
71514: LD_VAR 0 8
71518: PPUSH
71519: LD_INT 1
71521: PPUSH
71522: CALL_OW 275
71526: PLUS
71527: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
71528: LD_ADDR_VAR 0 5
71532: PUSH
71533: LD_VAR 0 5
71537: PUSH
71538: LD_VAR 0 8
71542: PPUSH
71543: LD_INT 2
71545: PPUSH
71546: CALL_OW 275
71550: PLUS
71551: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
71552: LD_ADDR_VAR 0 6
71556: PUSH
71557: LD_VAR 0 6
71561: PUSH
71562: LD_VAR 0 8
71566: PPUSH
71567: LD_INT 3
71569: PPUSH
71570: CALL_OW 275
71574: PLUS
71575: ST_TO_ADDR
// end ;
71576: GO 71486
71578: POP
71579: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
71580: LD_STRING setSpecText(
71582: PUSH
71583: LD_VAR 0 2
71587: STR
71588: PUSH
71589: LD_STRING ,
71591: STR
71592: PUSH
71593: LD_INT 2
71595: STR
71596: PUSH
71597: LD_STRING ,
71599: STR
71600: PUSH
71601: LD_VAR 0 4
71605: STR
71606: PUSH
71607: LD_STRING )
71609: STR
71610: PPUSH
71611: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
71615: LD_STRING setSpecText(
71617: PUSH
71618: LD_VAR 0 2
71622: STR
71623: PUSH
71624: LD_STRING ,
71626: STR
71627: PUSH
71628: LD_INT 3
71630: STR
71631: PUSH
71632: LD_STRING ,
71634: STR
71635: PUSH
71636: LD_VAR 0 5
71640: STR
71641: PUSH
71642: LD_STRING )
71644: STR
71645: PPUSH
71646: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
71650: LD_STRING setSpecText(
71652: PUSH
71653: LD_VAR 0 2
71657: STR
71658: PUSH
71659: LD_STRING ,
71661: STR
71662: PUSH
71663: LD_INT 4
71665: STR
71666: PUSH
71667: LD_STRING ,
71669: STR
71670: PUSH
71671: LD_VAR 0 6
71675: STR
71676: PUSH
71677: LD_STRING )
71679: STR
71680: PPUSH
71681: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
71685: LD_STRING setSpecText(
71687: PUSH
71688: LD_VAR 0 2
71692: STR
71693: PUSH
71694: LD_STRING ,
71696: STR
71697: PUSH
71698: LD_INT 5
71700: STR
71701: PUSH
71702: LD_STRING ,
71704: STR
71705: PUSH
71706: LD_VAR 0 7
71710: STR
71711: PUSH
71712: LD_STRING )
71714: STR
71715: PPUSH
71716: CALL_OW 559
// end ; end ;
71720: GO 71336
71722: POP
71723: POP
// end ;
71724: LD_VAR 0 1
71728: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
71729: LD_INT 2
71731: PUSH
71732: LD_INT 30
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 30
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: LIST
71756: PPUSH
71757: CALL_OW 69
71761: IFFALSE 71771
71763: GO 71765
71765: DISABLE
// begin enable ;
71766: ENABLE
// UpdateSpectatorBar ;
71767: CALL 71312 0 0
// end ;
71771: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71772: LD_INT 0
71774: PPUSH
// end ;
71775: LD_VAR 0 12
71779: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71780: LD_INT 0
71782: PPUSH
71783: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71784: LD_VAR 0 1
71788: NOT
71789: IFTRUE 71808
71791: PUSH
71792: LD_VAR 0 2
71796: PPUSH
71797: LD_VAR 0 3
71801: PPUSH
71802: CALL_OW 488
71806: NOT
71807: OR
71808: IFTRUE 71843
71810: PUSH
71811: LD_VAR 0 1
71815: PPUSH
71816: CALL_OW 266
71820: PUSH
71821: LD_INT 3
71823: NONEQUAL
71824: IFFALSE 71842
71826: PUSH
71827: LD_VAR 0 1
71831: PPUSH
71832: CALL_OW 247
71836: PUSH
71837: LD_INT 1
71839: EQUAL
71840: NOT
71841: AND
71842: OR
71843: IFFALSE 71847
// exit ;
71845: GO 72129
// if GetType ( factory ) = unit_human then
71847: LD_VAR 0 1
71851: PPUSH
71852: CALL_OW 247
71856: PUSH
71857: LD_INT 1
71859: EQUAL
71860: IFFALSE 71877
// factory := IsInUnit ( factory ) ;
71862: LD_ADDR_VAR 0 1
71866: PUSH
71867: LD_VAR 0 1
71871: PPUSH
71872: CALL_OW 310
71876: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 266
71886: PUSH
71887: LD_INT 3
71889: NONEQUAL
71890: IFFALSE 71894
// exit ;
71892: GO 72129
// for i := 1 to Count ( factoryWaypoints ) do
71894: LD_ADDR_VAR 0 5
71898: PUSH
71899: DOUBLE
71900: LD_INT 1
71902: DEC
71903: ST_TO_ADDR
71904: LD_EXP 70
71908: PPUSH
71909: CALL 29838 0 1
71913: PUSH
71914: FOR_TO
71915: IFFALSE 72077
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
71917: LD_VAR 0 2
71921: PPUSH
71922: LD_VAR 0 3
71926: PPUSH
71927: CALL_OW 428
71931: PUSH
71932: LD_EXP 70
71936: PUSH
71937: LD_VAR 0 5
71941: ARRAY
71942: PUSH
71943: LD_INT 2
71945: ARRAY
71946: EQUAL
71947: IFFALSE 71979
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
71949: LD_ADDR_EXP 70
71953: PUSH
71954: LD_EXP 70
71958: PPUSH
71959: LD_VAR 0 5
71963: PPUSH
71964: CALL_OW 3
71968: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71969: CALL 72134 0 0
// exit ;
71973: POP
71974: POP
71975: GO 72129
// end else
71977: GO 72075
// if factory = factoryWaypoints [ i ] [ 2 ] then
71979: LD_VAR 0 1
71983: PUSH
71984: LD_EXP 70
71988: PUSH
71989: LD_VAR 0 5
71993: ARRAY
71994: PUSH
71995: LD_INT 2
71997: ARRAY
71998: EQUAL
71999: IFFALSE 72075
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
72001: LD_ADDR_EXP 70
72005: PUSH
72006: LD_EXP 70
72010: PPUSH
72011: LD_VAR 0 5
72015: PPUSH
72016: CALL_OW 3
72020: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
72021: LD_ADDR_EXP 70
72025: PUSH
72026: LD_EXP 70
72030: PPUSH
72031: LD_VAR 0 1
72035: PPUSH
72036: CALL_OW 255
72040: PUSH
72041: LD_VAR 0 1
72045: PUSH
72046: LD_VAR 0 2
72050: PUSH
72051: LD_VAR 0 3
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: PPUSH
72062: CALL 65770 0 2
72066: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72067: CALL 72134 0 0
// exit ;
72071: POP
72072: POP
72073: GO 72129
// end ; end ;
72075: GO 71914
72077: POP
72078: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
72079: LD_ADDR_EXP 70
72083: PUSH
72084: LD_EXP 70
72088: PPUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 255
72098: PUSH
72099: LD_VAR 0 1
72103: PUSH
72104: LD_VAR 0 2
72108: PUSH
72109: LD_VAR 0 3
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: PPUSH
72120: CALL 65770 0 2
72124: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72125: CALL 72134 0 0
// end ;
72129: LD_VAR 0 4
72133: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72134: LD_INT 0
72136: PPUSH
72137: PPUSH
72138: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72139: LD_STRING resetFactoryWaypoint();
72141: PPUSH
72142: CALL_OW 559
// if factoryWaypoints then
72146: LD_EXP 70
72150: IFFALSE 72271
// begin list := factoryWaypoints ;
72152: LD_ADDR_VAR 0 3
72156: PUSH
72157: LD_EXP 70
72161: ST_TO_ADDR
// for i := 1 to list do
72162: LD_ADDR_VAR 0 2
72166: PUSH
72167: DOUBLE
72168: LD_INT 1
72170: DEC
72171: ST_TO_ADDR
72172: LD_VAR 0 3
72176: PUSH
72177: FOR_TO
72178: IFFALSE 72269
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72180: LD_STRING setFactoryWaypointXY(
72182: PUSH
72183: LD_VAR 0 3
72187: PUSH
72188: LD_VAR 0 2
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: STR
72198: PUSH
72199: LD_STRING ,
72201: STR
72202: PUSH
72203: LD_VAR 0 3
72207: PUSH
72208: LD_VAR 0 2
72212: ARRAY
72213: PUSH
72214: LD_INT 2
72216: ARRAY
72217: STR
72218: PUSH
72219: LD_STRING ,
72221: STR
72222: PUSH
72223: LD_VAR 0 3
72227: PUSH
72228: LD_VAR 0 2
72232: ARRAY
72233: PUSH
72234: LD_INT 3
72236: ARRAY
72237: STR
72238: PUSH
72239: LD_STRING ,
72241: STR
72242: PUSH
72243: LD_VAR 0 3
72247: PUSH
72248: LD_VAR 0 2
72252: ARRAY
72253: PUSH
72254: LD_INT 4
72256: ARRAY
72257: STR
72258: PUSH
72259: LD_STRING )
72261: STR
72262: PPUSH
72263: CALL_OW 559
72267: GO 72177
72269: POP
72270: POP
// end ; end ;
72271: LD_VAR 0 1
72275: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72276: LD_INT 0
72278: PPUSH
// if HexInfo ( x , y ) = warehouse then
72279: LD_VAR 0 2
72283: PPUSH
72284: LD_VAR 0 3
72288: PPUSH
72289: CALL_OW 428
72293: PUSH
72294: LD_VAR 0 1
72298: EQUAL
72299: IFFALSE 72326
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72301: LD_ADDR_EXP 72
72305: PUSH
72306: LD_EXP 72
72310: PPUSH
72311: LD_VAR 0 1
72315: PPUSH
72316: LD_INT 0
72318: PPUSH
72319: CALL_OW 1
72323: ST_TO_ADDR
72324: GO 72377
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72326: LD_ADDR_EXP 72
72330: PUSH
72331: LD_EXP 72
72335: PPUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 1
72345: PPUSH
72346: CALL_OW 255
72350: PUSH
72351: LD_VAR 0 1
72355: PUSH
72356: LD_VAR 0 2
72360: PUSH
72361: LD_VAR 0 3
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: PPUSH
72372: CALL_OW 1
72376: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72377: CALL 72386 0 0
// end ;
72381: LD_VAR 0 4
72385: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72386: LD_INT 0
72388: PPUSH
72389: PPUSH
72390: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72391: LD_STRING resetWarehouseGatheringPoints();
72393: PPUSH
72394: CALL_OW 559
// if warehouseGatheringPoints then
72398: LD_EXP 72
72402: IFFALSE 72528
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72404: LD_ADDR_VAR 0 3
72408: PUSH
72409: LD_EXP 72
72413: PPUSH
72414: CALL 69704 0 1
72418: ST_TO_ADDR
// for i := 1 to list do
72419: LD_ADDR_VAR 0 2
72423: PUSH
72424: DOUBLE
72425: LD_INT 1
72427: DEC
72428: ST_TO_ADDR
72429: LD_VAR 0 3
72433: PUSH
72434: FOR_TO
72435: IFFALSE 72526
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72437: LD_STRING setWarehouseGatheringPointXY(
72439: PUSH
72440: LD_VAR 0 3
72444: PUSH
72445: LD_VAR 0 2
72449: ARRAY
72450: PUSH
72451: LD_INT 1
72453: ARRAY
72454: STR
72455: PUSH
72456: LD_STRING ,
72458: STR
72459: PUSH
72460: LD_VAR 0 3
72464: PUSH
72465: LD_VAR 0 2
72469: ARRAY
72470: PUSH
72471: LD_INT 2
72473: ARRAY
72474: STR
72475: PUSH
72476: LD_STRING ,
72478: STR
72479: PUSH
72480: LD_VAR 0 3
72484: PUSH
72485: LD_VAR 0 2
72489: ARRAY
72490: PUSH
72491: LD_INT 3
72493: ARRAY
72494: STR
72495: PUSH
72496: LD_STRING ,
72498: STR
72499: PUSH
72500: LD_VAR 0 3
72504: PUSH
72505: LD_VAR 0 2
72509: ARRAY
72510: PUSH
72511: LD_INT 4
72513: ARRAY
72514: STR
72515: PUSH
72516: LD_STRING )
72518: STR
72519: PPUSH
72520: CALL_OW 559
72524: GO 72434
72526: POP
72527: POP
// end ; end ;
72528: LD_VAR 0 1
72532: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
72533: LD_INT 0
72535: PPUSH
72536: PPUSH
// if not mpSidePositions then
72537: LD_EXP 31
72541: NOT
72542: IFFALSE 72546
// exit ;
72544: GO 72617
// result :=  ;
72546: LD_ADDR_VAR 0 1
72550: PUSH
72551: LD_STRING 
72553: ST_TO_ADDR
// for i := 1 to 8 do
72554: LD_ADDR_VAR 0 2
72558: PUSH
72559: DOUBLE
72560: LD_INT 1
72562: DEC
72563: ST_TO_ADDR
72564: LD_INT 8
72566: PUSH
72567: FOR_TO
72568: IFFALSE 72598
// begin result := result & mpSidePositions [ i ] & ; ;
72570: LD_ADDR_VAR 0 1
72574: PUSH
72575: LD_VAR 0 1
72579: PUSH
72580: LD_EXP 31
72584: PUSH
72585: LD_VAR 0 2
72589: ARRAY
72590: STR
72591: PUSH
72592: LD_STRING ;
72594: STR
72595: ST_TO_ADDR
// end ;
72596: GO 72567
72598: POP
72599: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
72600: LD_STRING setMultiplayerRealPosition("
72602: PUSH
72603: LD_VAR 0 1
72607: STR
72608: PUSH
72609: LD_STRING ");
72611: STR
72612: PPUSH
72613: CALL_OW 559
// end ;
72617: LD_VAR 0 1
72621: RET
