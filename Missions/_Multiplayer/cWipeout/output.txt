// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 159 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1906 0 1
  44: PPUSH
  45: CALL 6507 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1906 0 1
  56: PPUSH
  57: CALL 11232 0 1
// Multiplayer_Start ;
  61: CALL 3922 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 4034 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: IFFALSE 142
 135: PUSH
 136: LD_OWVAR 48
 140: NOT
 141: AND
 142: IFFALSE 158
 144: GO 146
 146: DISABLE
// begin enable ;
 147: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 148: LD_ADDR_OWVAR 47
 152: PUSH
 153: CALL 5425 0 0
 157: ST_TO_ADDR
// end ; end_of_file
 158: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
 163: PPUSH
 164: PPUSH
 165: PPUSH
// mpGameType := GameTypeCoop ;
 166: LD_ADDR_EXP 30
 170: PUSH
 171: LD_INT 4
 173: ST_TO_ADDR
// multi_settings_counter := 6 ;
 174: LD_ADDR_EXP 18
 178: PUSH
 179: LD_INT 6
 181: ST_TO_ADDR
// multi_settings := [ ] ;
 182: LD_ADDR_EXP 17
 186: PUSH
 187: EMPTY
 188: ST_TO_ADDR
// if Multiplayer then
 189: LD_OWVAR 4
 193: IFFALSE 373
// begin your_side := mp_player_side ;
 195: LD_ADDR_OWVAR 2
 199: PUSH
 200: LD_OWVAR 7
 204: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_OWVAR 6
 214: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 215: LD_ADDR_EXP 7
 219: PUSH
 220: LD_OWVAR 17
 224: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 225: LD_ADDR_EXP 8
 229: PUSH
 230: LD_OWVAR 15
 234: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 235: LD_ADDR_EXP 9
 239: PUSH
 240: LD_OWVAR 16
 244: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 245: LD_ADDR_EXP 10
 249: PUSH
 250: EMPTY
 251: PUSH
 252: EMPTY
 253: LIST
 254: ST_TO_ADDR
// for i in mp_teams do
 255: LD_ADDR_VAR 0 2
 259: PUSH
 260: LD_OWVAR 12
 264: PUSH
 265: FOR_IN
 266: IFFALSE 309
// if i then
 268: LD_VAR 0 2
 272: IFFALSE 307
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 274: LD_ADDR_EXP 10
 278: PUSH
 279: LD_EXP 10
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_EXP 10
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PUSH
 296: LD_VAR 0 2
 300: UNION
 301: PPUSH
 302: CALL_OW 1
 306: ST_TO_ADDR
 307: GO 265
 309: POP
 310: POP
// for i := 1 to multi_settings_counter do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_EXP 18
 325: PUSH
 326: FOR_TO
 327: IFFALSE 369
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 329: LD_ADDR_EXP 17
 333: PUSH
 334: LD_EXP 17
 338: PPUSH
 339: LD_EXP 17
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: PPUSH
 348: LD_VAR 0 2
 352: PPUSH
 353: CALL_OW 426
 357: PUSH
 358: LD_INT 1
 360: PLUS
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
 367: GO 326
 369: POP
 370: POP
// end else
 371: GO 559
// begin your_side := 3 ;
 373: LD_ADDR_OWVAR 2
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// multi_gametype := 1 ;
 381: LD_ADDR_EXP 6
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 389: LD_ADDR_EXP 7
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: LD_INT 1
 402: PUSH
 403: LD_INT 2
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 428: LD_ADDR_EXP 8
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: LD_INT 1
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 467: LD_ADDR_EXP 9
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: LD_INT 3
 483: PUSH
 484: LD_INT 3
 486: PUSH
 487: LD_INT 0
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_INT 3
 513: PUSH
 514: LD_INT 4
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 528: LD_ADDR_EXP 17
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 4
 538: PUSH
 539: LD_INT 4
 541: PUSH
 542: LD_INT 3
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 559: LD_ADDR_EXP 31
 563: PUSH
 564: LD_EXP 7
 568: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 569: LD_ADDR_EXP 11
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 0
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 608: LD_ADDR_EXP 14
 612: PUSH
 613: LD_INT 0
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 647: LD_ADDR_EXP 25
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: LD_INT 0
 657: PUSH
 658: LD_INT 0
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 0
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// multi_teamgame := true ;
 686: LD_ADDR_EXP 15
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 694: LD_ADDR_EXP 13
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: EMPTY
 703: LIST
 704: ST_TO_ADDR
// multi_custom_commanders := true ;
 705: LD_ADDR_EXP 16
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// multi_commanders := [ ] ;
 713: LD_ADDR_EXP 24
 717: PUSH
 718: EMPTY
 719: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 720: LD_ADDR_EXP 27
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// multi_players_amount := 0 ;
 727: LD_ADDR_EXP 26
 731: PUSH
 732: LD_INT 0
 734: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 735: LD_ADDR_EXP 12
 739: PUSH
 740: LD_INT 8
 742: PUSH
 743: LD_INT 9
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 10
 752: PUSH
 753: LD_INT 11
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 12
 762: PUSH
 763: LD_INT 13
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 775: LD_ADDR_EXP 29
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 14
 785: PPUSH
 786: LD_INT 0
 788: PPUSH
 789: CALL 72981 0 2
 793: PUSH
 794: LD_STRING kagan
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 31
 804: PUSH
 805: LD_INT 67
 807: PUSH
 808: LD_INT 102
 810: PUSH
 811: LD_INT 3
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 31
 825: PUSH
 826: LD_INT 73
 828: PUSH
 829: LD_INT 103
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 29
 846: PUSH
 847: LD_INT 78
 849: PUSH
 850: LD_INT 112
 852: PUSH
 853: LD_INT 3
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_INT 0
 873: PUSH
 874: LD_INT 15
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: CALL 72981 0 2
 884: PUSH
 885: LD_STRING beria
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 31
 895: PUSH
 896: LD_INT 102
 898: PUSH
 899: LD_INT 86
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 31
 916: PUSH
 917: LD_INT 98
 919: PUSH
 920: LD_INT 96
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: LD_INT 115
 940: PUSH
 941: LD_INT 104
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 16
 967: PPUSH
 968: LD_INT 3
 970: PPUSH
 971: CALL 72981 0 2
 975: PUSH
 976: LD_STRING kirov
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 31
 986: PUSH
 987: LD_INT 169
 989: PUSH
 990: LD_INT 101
 992: PUSH
 993: LD_INT 4
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 31
1007: PUSH
1008: LD_INT 175
1010: PUSH
1011: LD_INT 123
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 4
1028: PUSH
1029: LD_INT 166
1031: PUSH
1032: LD_INT 115
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: LD_INT 152
1052: PUSH
1053: LD_INT 98
1055: PUSH
1056: LD_INT 3
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: ST_TO_ADDR
// for i := 1 to 8 do
1080: LD_ADDR_VAR 0 2
1084: PUSH
1085: DOUBLE
1086: LD_INT 1
1088: DEC
1089: ST_TO_ADDR
1090: LD_INT 8
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1429
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1096: LD_VAR 0 2
1100: PPUSH
1101: CALL_OW 530
1105: IFFALSE 1263
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1107: LD_ADDR_EXP 11
1111: PUSH
1112: LD_EXP 11
1116: PPUSH
1117: LD_VAR 0 2
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1130: LD_ADDR_EXP 9
1134: PUSH
1135: LD_EXP 9
1139: PPUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 1
1152: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1153: LD_ADDR_EXP 7
1157: PUSH
1158: LD_EXP 7
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 1
1175: ST_TO_ADDR
// for j = 1 to multi_teams do
1176: LD_ADDR_VAR 0 3
1180: PUSH
1181: DOUBLE
1182: LD_INT 1
1184: DEC
1185: ST_TO_ADDR
1186: LD_EXP 10
1190: PUSH
1191: FOR_TO
1192: IFFALSE 1261
// begin if i in multi_teams [ j ] then
1194: LD_VAR 0 2
1198: PUSH
1199: LD_EXP 10
1203: PUSH
1204: LD_VAR 0 3
1208: ARRAY
1209: IN
1210: IFFALSE 1259
// begin tmp := multi_teams [ j ] diff i ;
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_EXP 10
1221: PUSH
1222: LD_VAR 0 3
1226: ARRAY
1227: PUSH
1228: LD_VAR 0 2
1232: DIFF
1233: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1234: LD_ADDR_EXP 10
1238: PUSH
1239: LD_EXP 10
1243: PPUSH
1244: LD_VAR 0 3
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 1
1258: ST_TO_ADDR
// end ; end ;
1259: GO 1191
1261: POP
1262: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1263: LD_EXP 9
1267: PUSH
1268: LD_VAR 0 2
1272: ARRAY
1273: IFFALSE 1294
1275: PUSH
1276: LD_EXP 9
1280: PUSH
1281: LD_VAR 0 2
1285: ARRAY
1286: PUSH
1287: LD_EXP 13
1291: IN
1292: NOT
1293: AND
1294: IFFALSE 1335
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1296: LD_ADDR_EXP 9
1300: PUSH
1301: LD_EXP 9
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: LD_EXP 13
1315: PUSH
1316: LD_INT 1
1318: PPUSH
1319: LD_EXP 13
1323: PPUSH
1324: CALL_OW 12
1328: ARRAY
1329: PPUSH
1330: CALL_OW 1
1334: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1335: LD_EXP 9
1339: PUSH
1340: LD_VAR 0 2
1344: ARRAY
1345: NOT
1346: IFFALSE 1361
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: NOT
1360: AND
1361: IFFALSE 1376
1363: PUSH
1364: LD_EXP 11
1368: PUSH
1369: LD_VAR 0 2
1373: ARRAY
1374: NOT
1375: AND
1376: IFFALSE 1401
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1378: LD_ADDR_EXP 14
1382: PUSH
1383: LD_EXP 14
1387: PPUSH
1388: LD_VAR 0 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL_OW 1
1400: ST_TO_ADDR
// if multi_sides [ i ] then
1401: LD_EXP 7
1405: PUSH
1406: LD_VAR 0 2
1410: ARRAY
1411: IFFALSE 1427
// multi_players_amount := multi_players_amount + 1 ;
1413: LD_ADDR_EXP 26
1417: PUSH
1418: LD_EXP 26
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ST_TO_ADDR
// end ;
1427: GO 1093
1429: POP
1430: POP
// for i in multi_teams do
1431: LD_ADDR_VAR 0 2
1435: PUSH
1436: LD_EXP 10
1440: PUSH
1441: FOR_IN
1442: IFFALSE 1550
// begin for j = 2 to i do
1444: LD_ADDR_VAR 0 3
1448: PUSH
1449: DOUBLE
1450: LD_INT 2
1452: DEC
1453: ST_TO_ADDR
1454: LD_VAR 0 2
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1546
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1462: LD_VAR 0 2
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PPUSH
1473: LD_VAR 0 2
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 343
// for x = 1 to j - 1 do
1486: LD_ADDR_VAR 0 4
1490: PUSH
1491: DOUBLE
1492: LD_INT 1
1494: DEC
1495: ST_TO_ADDR
1496: LD_VAR 0 3
1500: PUSH
1501: LD_INT 1
1503: MINUS
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1542
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1508: LD_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_VAR 0 4
1528: ARRAY
1529: PPUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 80
1540: GO 1505
1542: POP
1543: POP
// end ;
1544: GO 1459
1546: POP
1547: POP
// end ;
1548: GO 1441
1550: POP
1551: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1552: LD_ADDR_OWVAR 67
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 3
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_EXP 17
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: ARRAY
1580: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1581: LD_ADDR_EXP 19
1585: PUSH
1586: LD_INT 6
1588: PUSH
1589: LD_INT 7
1591: PUSH
1592: LD_INT 8
1594: PUSH
1595: LD_INT 9
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 17
1608: PUSH
1609: LD_INT 2
1611: ARRAY
1612: ARRAY
1613: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 4
1627: PUSH
1628: LD_INT 5
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_EXP 17
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ARRAY
1646: ST_TO_ADDR
// multi_crates_spawn := [ [ 3600 , 0 0$32 ] , [ 5600 , 0 0$22 ] , [ 6800 , 0 0$14 ] , [ 9000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1647: LD_ADDR_EXP 21
1651: PUSH
1652: LD_INT 3600
1654: PUSH
1655: LD_INT 1120
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 5600
1664: PUSH
1665: LD_INT 770
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 6800
1674: PUSH
1675: LD_INT 490
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 9000
1684: PUSH
1685: LD_INT 420
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_EXP 17
1702: PUSH
1703: LD_INT 4
1705: ARRAY
1706: ARRAY
1707: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1708: LD_ADDR_EXP 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_EXP 17
1731: PUSH
1732: LD_INT 5
1734: ARRAY
1735: ARRAY
1736: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1737: LD_ADDR_EXP 23
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 1
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_EXP 17
1760: PUSH
1761: LD_INT 6
1763: ARRAY
1764: ARRAY
1765: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1766: LD_ADDR_EXP 28
1770: PUSH
1771: LD_INT 10500
1773: PUSH
1774: LD_INT 31500
1776: PUSH
1777: LD_INT 52500
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: ST_TO_ADDR
// if multi_extra_oil then
1791: LD_EXP 22
1795: IFFALSE 1856
// begin if multi_extra_oil = 1 then
1797: LD_EXP 22
1801: PUSH
1802: LD_INT 1
1804: EQUAL
1805: IFFALSE 1820
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1807: LD_INT 109
1809: PPUSH
1810: LD_INT 130
1812: PPUSH
1813: LD_INT 2
1815: PPUSH
1816: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1820: LD_EXP 22
1824: PUSH
1825: LD_INT 2
1827: EQUAL
1828: IFFALSE 1856
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1830: LD_INT 109
1832: PPUSH
1833: LD_INT 130
1835: PPUSH
1836: LD_INT 2
1838: PPUSH
1839: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1843: LD_INT 150
1845: PPUSH
1846: LD_INT 112
1848: PPUSH
1849: LD_INT 2
1851: PPUSH
1852: CALL_OW 62
// end ; end ; if Difficulty > 1 then
1856: LD_OWVAR 67
1860: PUSH
1861: LD_INT 1
1863: GREATER
1864: IFFALSE 1901
// for i := 2 to 8 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 2
1874: DEC
1875: ST_TO_ADDR
1876: LD_INT 8
1878: PUSH
1879: FOR_TO
1880: IFFALSE 1899
// SetTech ( tech_advmet , i , state_disabled ) ;
1882: LD_INT 34
1884: PPUSH
1885: LD_VAR 0 2
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 322
1897: GO 1879
1899: POP
1900: POP
// end ;
1901: LD_VAR 0 1
1905: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1906: LD_INT 0
1908: PPUSH
1909: PPUSH
// if not multi_sides [ preferSide ] then
1910: LD_EXP 7
1914: PUSH
1915: LD_VAR 0 1
1919: ARRAY
1920: NOT
1921: IFFALSE 1935
// begin result := preferSide ;
1923: LD_ADDR_VAR 0 2
1927: PUSH
1928: LD_VAR 0 1
1932: ST_TO_ADDR
// exit ;
1933: GO 1982
// end ; for i := 1 to 8 do
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: DOUBLE
1941: LD_INT 1
1943: DEC
1944: ST_TO_ADDR
1945: LD_INT 8
1947: PUSH
1948: FOR_TO
1949: IFFALSE 1980
// if not multi_sides [ i ] then
1951: LD_EXP 7
1955: PUSH
1956: LD_VAR 0 3
1960: ARRAY
1961: NOT
1962: IFFALSE 1978
// begin result := i ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 3
1973: ST_TO_ADDR
// exit ;
1974: POP
1975: POP
1976: GO 1982
// end ;
1978: GO 1948
1980: POP
1981: POP
// end ;
1982: LD_VAR 0 2
1986: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1987: LD_INT 0
1989: PPUSH
// uc_side := side ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// uc_nation := nation_russian ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// hc_importance := 100 ;
2008: LD_ADDR_OWVAR 32
2012: PUSH
2013: LD_INT 100
2015: ST_TO_ADDR
// hc_class := class_soldier ;
2016: LD_ADDR_OWVAR 28
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// if num = 1 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 1
2031: EQUAL
2032: IFFALSE 2095
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 381
// hc_gallery := ru ;
2046: LD_ADDR_OWVAR 33
2050: PUSH
2051: LD_STRING ru
2053: ST_TO_ADDR
// hc_face_number := 10 ;
2054: LD_ADDR_OWVAR 34
2058: PUSH
2059: LD_INT 10
2061: ST_TO_ADDR
// hc_name := Popov ;
2062: LD_ADDR_OWVAR 26
2066: PUSH
2067: LD_STRING Popov
2069: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2070: LD_ADDR_OWVAR 29
2074: PUSH
2075: LD_INT 10
2077: PUSH
2078: LD_INT 10
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// result := CreateHuman ;
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: CALL_OW 44
2094: ST_TO_ADDR
// end ; if num = 2 then
2095: LD_VAR 0 2
2099: PUSH
2100: LD_INT 2
2102: EQUAL
2103: IFFALSE 2174
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2105: LD_INT 1
2107: PPUSH
2108: LD_EXP 20
2112: PPUSH
2113: CALL_OW 383
// hc_class := class_mechanic ;
2117: LD_ADDR_OWVAR 28
2121: PUSH
2122: LD_INT 3
2124: ST_TO_ADDR
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 1 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// hc_name := Burlak ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Burlak
2148: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 10
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; if num = 3 then
2174: LD_VAR 0 2
2178: PUSH
2179: LD_INT 3
2181: EQUAL
2182: IFFALSE 2245
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2184: LD_INT 1
2186: PPUSH
2187: LD_EXP 20
2191: PPUSH
2192: CALL_OW 381
// hc_gallery := ru ;
2196: LD_ADDR_OWVAR 33
2200: PUSH
2201: LD_STRING ru
2203: ST_TO_ADDR
// hc_face_number := 8 ;
2204: LD_ADDR_OWVAR 34
2208: PUSH
2209: LD_INT 8
2211: ST_TO_ADDR
// hc_name := Kurin ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_STRING Kurin
2219: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2220: LD_ADDR_OWVAR 29
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: LD_INT 11
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: ST_TO_ADDR
// result := CreateHuman ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: CALL_OW 44
2244: ST_TO_ADDR
// end ; end ;
2245: LD_VAR 0 3
2249: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// for i := 1 to 8 do
2262: LD_ADDR_VAR 0 2
2266: PUSH
2267: DOUBLE
2268: LD_INT 1
2270: DEC
2271: ST_TO_ADDR
2272: LD_INT 8
2274: PUSH
2275: FOR_TO
2276: IFFALSE 3607
// begin if not multi_sides [ i ] then
2278: LD_EXP 7
2282: PUSH
2283: LD_VAR 0 2
2287: ARRAY
2288: NOT
2289: IFFALSE 2293
// continue ;
2291: GO 2275
// if multi_buildings [ multi_sides [ i ] ] then
2293: LD_EXP 29
2297: PUSH
2298: LD_EXP 7
2302: PUSH
2303: LD_VAR 0 2
2307: ARRAY
2308: ARRAY
2309: IFFALSE 2622
// begin uc_side := i ;
2311: LD_ADDR_OWVAR 20
2315: PUSH
2316: LD_VAR 0 2
2320: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2321: LD_ADDR_OWVAR 21
2325: PUSH
2326: LD_EXP 9
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_EXP 29
2346: PUSH
2347: LD_EXP 7
2351: PUSH
2352: LD_VAR 0 2
2356: ARRAY
2357: ARRAY
2358: PUSH
2359: FOR_IN
2360: IFFALSE 2620
// begin if j [ 1 ] = b_oil_mine then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 29
2373: EQUAL
2374: IFFALSE 2411
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 2
2396: ARRAY
2397: PUSH
2398: LD_INT 2
2400: ARRAY
2401: PPUSH
2402: LD_VAR 0 2
2406: PPUSH
2407: CALL_OW 441
// bc_type := j [ 1 ] ;
2411: LD_ADDR_OWVAR 42
2415: PUSH
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 1
2423: ARRAY
2424: ST_TO_ADDR
// bc_level := 2 ;
2425: LD_ADDR_OWVAR 43
2429: PUSH
2430: LD_INT 2
2432: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PUSH
2442: LD_INT 6
2444: EQUAL
2445: IFFALSE 2463
// begin bc_kind1 := b_lab_basic ;
2447: LD_ADDR_OWVAR 44
2451: PUSH
2452: LD_INT 9
2454: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2455: LD_ADDR_OWVAR 45
2459: PUSH
2460: LD_INT 9
2462: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2463: LD_ADDR_VAR 0 4
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PUSH
2477: LD_INT 1
2479: ARRAY
2480: PPUSH
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 2
2488: ARRAY
2489: PUSH
2490: LD_INT 2
2492: ARRAY
2493: PPUSH
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 2
2501: ARRAY
2502: PUSH
2503: LD_INT 3
2505: ARRAY
2506: PPUSH
2507: CALL_OW 47
2511: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PUSH
2521: LD_INT 0
2523: EQUAL
2524: IFFALSE 2618
// begin SetBName ( b , j [ 3 ] ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 3
2538: ARRAY
2539: PPUSH
2540: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: CALL_OW 274
2553: PPUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 320
2559: PUSH
2560: LD_INT 240
2562: PUSH
2563: LD_INT 150
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_OWVAR 67
2575: ARRAY
2576: PPUSH
2577: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 274
2590: PPUSH
2591: LD_INT 2
2593: PPUSH
2594: LD_INT 160
2596: PUSH
2597: LD_INT 130
2599: PUSH
2600: LD_INT 100
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_OWVAR 67
2612: ARRAY
2613: PPUSH
2614: CALL_OW 277
// end ; end ;
2618: GO 2359
2620: POP
2621: POP
// end ; if multi_custom_commanders then
2622: LD_EXP 16
2626: IFFALSE 2836
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2628: LD_ADDR_VAR 0 6
2632: PUSH
2633: LD_VAR 0 2
2637: PPUSH
2638: LD_EXP 7
2642: PUSH
2643: LD_VAR 0 2
2647: ARRAY
2648: PPUSH
2649: CALL 1987 0 2
2653: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2654: LD_ADDR_EXP 24
2658: PUSH
2659: LD_EXP 24
2663: PPUSH
2664: LD_EXP 24
2668: PUSH
2669: LD_INT 1
2671: PLUS
2672: PPUSH
2673: LD_VAR 0 6
2677: PPUSH
2678: CALL_OW 2
2682: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2683: LD_VAR 0 6
2687: PPUSH
2688: CALL_OW 257
2692: PUSH
2693: LD_INT 3
2695: EQUAL
2696: IFFALSE 2801
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2698: LD_INT 22
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 51
2709: PPUSH
2710: LD_INT 100
2712: PPUSH
2713: CALL 35092 0 5
// veh := CreateVehicle ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: CALL_OW 45
2726: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2727: LD_VAR 0 7
2731: PPUSH
2732: LD_INT 2
2734: PPUSH
2735: LD_INT 100
2737: PUSH
2738: LD_INT 20
2740: PUSH
2741: LD_OWVAR 67
2745: MUL
2746: MINUS
2747: PPUSH
2748: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_EXP 12
2761: PUSH
2762: LD_EXP 7
2766: PUSH
2767: LD_VAR 0 2
2771: ARRAY
2772: ARRAY
2773: PUSH
2774: LD_INT 2
2776: ARRAY
2777: PPUSH
2778: LD_INT 0
2780: PPUSH
2781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2785: LD_VAR 0 6
2789: PPUSH
2790: LD_VAR 0 7
2794: PPUSH
2795: CALL_OW 52
// end else
2799: GO 2834
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2801: LD_VAR 0 6
2805: PPUSH
2806: LD_EXP 12
2810: PUSH
2811: LD_EXP 7
2815: PUSH
2816: LD_VAR 0 2
2820: ARRAY
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// end else
2834: GO 3047
// begin uc_side := i ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_VAR 0 2
2845: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_EXP 9
2855: PUSH
2856: LD_VAR 0 2
2860: ARRAY
2861: ST_TO_ADDR
// hc_importance := 100 ;
2862: LD_ADDR_OWVAR 32
2866: PUSH
2867: LD_INT 100
2869: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2870: LD_INT 0
2872: PPUSH
2873: LD_INT 1
2875: PPUSH
2876: LD_EXP 20
2880: PPUSH
2881: CALL_OW 380
// if multiplayer then
2885: LD_OWVAR 4
2889: IFFALSE 2947
// begin hc_name := mp_sides_players_names [ i ] ;
2891: LD_ADDR_OWVAR 26
2895: PUSH
2896: LD_OWVAR 19
2900: PUSH
2901: LD_VAR 0 2
2905: ARRAY
2906: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2907: LD_ADDR_OWVAR 33
2911: PUSH
2912: LD_STRING MULTIAVATARS
2914: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2915: LD_ADDR_OWVAR 34
2919: PUSH
2920: LD_VAR 0 2
2924: PPUSH
2925: CALL_OW 525
2929: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2930: LD_ADDR_OWVAR 27
2934: PUSH
2935: LD_VAR 0 2
2939: PPUSH
2940: CALL_OW 526
2944: ST_TO_ADDR
// end else
2945: GO 2979
// begin hc_gallery :=  ;
2947: LD_ADDR_OWVAR 33
2951: PUSH
2952: LD_STRING 
2954: ST_TO_ADDR
// hc_name :=  ;
2955: LD_ADDR_OWVAR 26
2959: PUSH
2960: LD_STRING 
2962: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 2
2973: PPUSH
2974: CALL_OW 12
2978: ST_TO_ADDR
// end ; un := CreateHuman ;
2979: LD_ADDR_VAR 0 6
2983: PUSH
2984: CALL_OW 44
2988: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2989: LD_VAR 0 6
2993: PPUSH
2994: LD_EXP 12
2998: PUSH
2999: LD_EXP 7
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ARRAY
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
3022: LD_ADDR_EXP 24
3026: PUSH
3027: LD_EXP 24
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 6
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// end ; InitHc ;
3047: CALL_OW 19
// InitUc ;
3051: CALL_OW 18
// uc_side := i ;
3055: LD_ADDR_OWVAR 20
3059: PUSH
3060: LD_VAR 0 2
3064: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3065: LD_ADDR_OWVAR 21
3069: PUSH
3070: LD_EXP 9
3074: PUSH
3075: LD_VAR 0 2
3079: ARRAY
3080: ST_TO_ADDR
// hc_gallery :=  ;
3081: LD_ADDR_OWVAR 33
3085: PUSH
3086: LD_STRING 
3088: ST_TO_ADDR
// hc_name :=  ;
3089: LD_ADDR_OWVAR 26
3093: PUSH
3094: LD_STRING 
3096: ST_TO_ADDR
// hc_importance := 0 ;
3097: LD_ADDR_OWVAR 32
3101: PUSH
3102: LD_INT 0
3104: ST_TO_ADDR
// cl := 1 ;
3105: LD_ADDR_VAR 0 5
3109: PUSH
3110: LD_INT 1
3112: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: DOUBLE
3119: LD_INT 2
3121: DEC
3122: ST_TO_ADDR
3123: LD_EXP 19
3127: PUSH
3128: FOR_TO
3129: IFFALSE 3603
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3131: LD_VAR 0 3
3135: PUSH
3136: LD_INT 1
3138: MINUS
3139: PUSH
3140: LD_EXP 19
3144: PUSH
3145: LD_INT 1
3147: MINUS
3148: PUSH
3149: LD_INT 4
3151: DIVREAL
3152: MOD
3153: PUSH
3154: LD_INT 0
3156: EQUAL
3157: IFFALSE 3173
// cl := cl + 1 ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_VAR 0 5
3168: PUSH
3169: LD_INT 1
3171: PLUS
3172: ST_TO_ADDR
// if cl > 4 then
3173: LD_VAR 0 5
3177: PUSH
3178: LD_INT 4
3180: GREATER
3181: IFFALSE 3191
// cl := 1 ;
3183: LD_ADDR_VAR 0 5
3187: PUSH
3188: LD_INT 1
3190: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3191: LD_INT 0
3193: PPUSH
3194: LD_VAR 0 5
3198: PPUSH
3199: LD_EXP 20
3203: PPUSH
3204: CALL_OW 380
// un := CreateHuman ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: CALL_OW 44
3217: ST_TO_ADDR
// if j > copy then
3218: LD_VAR 0 3
3222: PUSH
3223: LD_VAR 0 9
3227: GREATER
3228: IFFALSE 3257
// copy := Replace ( copy , j , un ) else
3230: LD_ADDR_VAR 0 9
3234: PUSH
3235: LD_VAR 0 9
3239: PPUSH
3240: LD_VAR 0 3
3244: PPUSH
3245: LD_VAR 0 6
3249: PPUSH
3250: CALL_OW 1
3254: ST_TO_ADDR
3255: GO 3339
// begin CopySkills ( copy [ j ] , un ) ;
3257: LD_VAR 0 9
3261: PUSH
3262: LD_VAR 0 3
3266: ARRAY
3267: PPUSH
3268: LD_VAR 0 6
3272: PPUSH
3273: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3277: LD_VAR 0 6
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: LD_VAR 0 9
3289: PUSH
3290: LD_VAR 0 3
3294: ARRAY
3295: PPUSH
3296: LD_INT 2
3298: PPUSH
3299: CALL_OW 260
3303: PPUSH
3304: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3308: LD_VAR 0 6
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_VAR 0 9
3320: PUSH
3321: LD_VAR 0 3
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if multi_pos_area then
3339: LD_EXP 12
3343: IFFALSE 3601
// begin if GetClass ( un ) = 3 then
3345: LD_VAR 0 6
3349: PPUSH
3350: CALL_OW 257
3354: PUSH
3355: LD_INT 3
3357: EQUAL
3358: IFFALSE 3455
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3360: LD_INT 21
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: LD_INT 43
3371: PUSH
3372: LD_INT 42
3374: PUSH
3375: LD_INT 42
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_OWVAR 67
3387: ARRAY
3388: PPUSH
3389: LD_INT 80
3391: PPUSH
3392: CALL 35092 0 5
// veh := CreateVehicle ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 45
3405: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3406: LD_VAR 0 7
3410: PPUSH
3411: LD_EXP 12
3415: PUSH
3416: LD_EXP 7
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3439: LD_VAR 0 6
3443: PPUSH
3444: LD_VAR 0 7
3448: PPUSH
3449: CALL_OW 52
// continue ;
3453: GO 3128
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_VAR 0 2
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 30
3474: PUSH
3475: LD_INT 31
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 58
3484: PUSH
3485: EMPTY
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 69
3497: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3498: LD_VAR 0 6
3502: PPUSH
3503: CALL_OW 257
3507: PUSH
3508: LD_INT 1
3510: EQUAL
3511: IFFALSE 3519
3513: PUSH
3514: LD_VAR 0 8
3518: AND
3519: IFFALSE 3568
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 8
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: CALL_OW 254
3539: PUSH
3540: LD_INT 3
3542: MINUS
3543: PPUSH
3544: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3548: LD_VAR 0 6
3552: PPUSH
3553: LD_VAR 0 8
3557: PUSH
3558: LD_INT 1
3560: ARRAY
3561: PPUSH
3562: CALL_OW 52
// continue ;
3566: GO 3128
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_EXP 12
3577: PUSH
3578: LD_EXP 7
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: ARRAY
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// end ; end ;
3601: GO 3128
3603: POP
3604: POP
// end ;
3605: GO 2275
3607: POP
3608: POP
// end ;
3609: LD_VAR 0 1
3613: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
// if not multi_support then
3621: LD_EXP 23
3625: NOT
3626: IFFALSE 3630
// exit ;
3628: GO 3917
// result := [ ] ;
3630: LD_ADDR_VAR 0 1
3634: PUSH
3635: EMPTY
3636: ST_TO_ADDR
// for i := 1 to 8 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 8
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3915
// begin result := Replace ( result , i , [ ] ) ;
3653: LD_ADDR_VAR 0 1
3657: PUSH
3658: LD_VAR 0 1
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: EMPTY
3669: PPUSH
3670: CALL_OW 1
3674: ST_TO_ADDR
// if multi_sides [ i ] then
3675: LD_EXP 7
3679: PUSH
3680: LD_VAR 0 2
3684: ARRAY
3685: IFFALSE 3913
// begin tmp := [ ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: EMPTY
3693: ST_TO_ADDR
// if multi_support = 1 then
3694: LD_EXP 23
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: IFFALSE 3791
// begin uc_side := i ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_VAR 0 2
3713: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3714: LD_ADDR_OWVAR 21
3718: PUSH
3719: LD_EXP 9
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: ST_TO_ADDR
// for j := 1 to 3 do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: DOUBLE
3736: LD_INT 1
3738: DEC
3739: ST_TO_ADDR
3740: LD_INT 3
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3789
// begin InitHC_All ( ) ;
3746: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 3 ) ;
3750: LD_INT 0
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 4
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: LD_INT 3
3766: PPUSH
3767: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: LD_VAR 0 5
3780: PUSH
3781: CALL_OW 44
3785: ADD
3786: ST_TO_ADDR
// end ;
3787: GO 3743
3789: POP
3790: POP
// end ; if multi_support = 2 then
3791: LD_EXP 23
3795: PUSH
3796: LD_INT 2
3798: EQUAL
3799: IFFALSE 3888
// begin uc_side := i ;
3801: LD_ADDR_OWVAR 20
3805: PUSH
3806: LD_VAR 0 2
3810: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3811: LD_ADDR_OWVAR 21
3815: PUSH
3816: LD_EXP 9
3820: PUSH
3821: LD_VAR 0 2
3825: ARRAY
3826: ST_TO_ADDR
// for j := 1 to 5 do
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 5
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3886
// begin InitHC_All ( ) ;
3843: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
3847: LD_INT 0
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: LD_INT 4
3855: PPUSH
3856: CALL_OW 12
3860: PPUSH
3861: LD_INT 5
3863: PPUSH
3864: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3868: LD_ADDR_VAR 0 5
3872: PUSH
3873: LD_VAR 0 5
3877: PUSH
3878: CALL_OW 44
3882: ADD
3883: ST_TO_ADDR
// end ;
3884: GO 3840
3886: POP
3887: POP
// end ; result := Replace ( result , i , tmp ) ;
3888: LD_ADDR_VAR 0 1
3892: PUSH
3893: LD_VAR 0 1
3897: PPUSH
3898: LD_VAR 0 2
3902: PPUSH
3903: LD_VAR 0 5
3907: PPUSH
3908: CALL_OW 1
3912: ST_TO_ADDR
// end ; end ;
3913: GO 3650
3915: POP
3916: POP
// end ;
3917: LD_VAR 0 1
3921: RET
// export function Multiplayer_Start ( ) ; begin
3922: LD_INT 0
3924: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3925: CALL 2250 0 0
// Multiplayer_InitPointSystem ( ) ;
3929: CALL 5514 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3933: LD_INT 20
3935: PPUSH
3936: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3940: LD_INT 150
3942: PPUSH
3943: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3947: LD_INT 5
3949: PPUSH
3950: CALL 5698 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3954: LD_INT 40
3956: NEG
3957: PPUSH
3958: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3962: LD_INT 200
3964: PPUSH
3965: CALL 5698 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3969: LD_INT 2
3971: PPUSH
3972: CALL 5698 0 1
// if multi_support then
3976: LD_EXP 23
3980: IFFALSE 3992
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3982: LD_ADDR_EXP 27
3986: PUSH
3987: CALL 3614 0 0
3991: ST_TO_ADDR
// if multi_sides [ your_side ] then
3992: LD_EXP 7
3996: PUSH
3997: LD_OWVAR 2
4001: ARRAY
4002: IFFALSE 4029
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
4004: LD_INT 22
4006: PUSH
4007: LD_OWVAR 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PPUSH
4016: CALL_OW 69
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: CALL_OW 87
// end ;
4029: LD_VAR 0 1
4033: RET
// export function Multiplayer_End ( ) ; var i , j , un , s , tmp , veh ; begin
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
4042: PPUSH
// tmp := [ ] ;
4043: LD_ADDR_VAR 0 6
4047: PUSH
4048: EMPTY
4049: ST_TO_ADDR
// for i := 1 to 8 do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: DOUBLE
4056: LD_INT 1
4058: DEC
4059: ST_TO_ADDR
4060: LD_INT 8
4062: PUSH
4063: FOR_TO
4064: IFFALSE 4100
// if multi_sides [ i ] then
4066: LD_EXP 7
4070: PUSH
4071: LD_VAR 0 2
4075: ARRAY
4076: IFFALSE 4098
// tmp := Join ( tmp , i ) ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PPUSH
4088: LD_VAR 0 2
4092: PPUSH
4093: CALL 68262 0 2
4097: ST_TO_ADDR
4098: GO 4063
4100: POP
4101: POP
// repeat wait ( 0 0$1 ) ;
4102: LD_INT 35
4104: PPUSH
4105: CALL_OW 67
// if tick = 10 10$00 and multi_support then
4109: LD_OWVAR 1
4113: PUSH
4114: LD_INT 21000
4116: EQUAL
4117: IFFALSE 4125
4119: PUSH
4120: LD_EXP 23
4124: AND
4125: IFFALSE 4345
// begin for i := 1 to 8 do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: DOUBLE
4133: LD_INT 1
4135: DEC
4136: ST_TO_ADDR
4137: LD_INT 8
4139: PUSH
4140: FOR_TO
4141: IFFALSE 4343
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4143: LD_EXP 7
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: IFFALSE 4168
4155: PUSH
4156: LD_EXP 25
4160: PUSH
4161: LD_VAR 0 2
4165: ARRAY
4166: NOT
4167: AND
4168: IFFALSE 4341
// begin for j := 1 to 2 do
4170: LD_ADDR_VAR 0 3
4174: PUSH
4175: DOUBLE
4176: LD_INT 1
4178: DEC
4179: ST_TO_ADDR
4180: LD_INT 2
4182: PUSH
4183: FOR_TO
4184: IFFALSE 4339
// begin uc_side := i ;
4186: LD_ADDR_OWVAR 20
4190: PUSH
4191: LD_VAR 0 2
4195: ST_TO_ADDR
// uc_nation := nation_russian ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4204: LD_INT 21
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 44
4215: PUSH
4216: LD_INT 43
4218: PUSH
4219: LD_INT 42
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: LD_OWVAR 67
4231: ARRAY
4232: PPUSH
4233: LD_INT 30
4235: PPUSH
4236: CALL 35092 0 5
// veh := CreateVehicle ;
4240: LD_ADDR_VAR 0 7
4244: PUSH
4245: CALL_OW 45
4249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4250: LD_INT 35
4252: PPUSH
4253: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4257: LD_VAR 0 7
4261: PPUSH
4262: LD_INT 31
4264: PPUSH
4265: LD_INT 0
4267: PPUSH
4268: CALL_OW 49
4272: IFFALSE 4250
// uc_side := i ;
4274: LD_ADDR_OWVAR 20
4278: PUSH
4279: LD_VAR 0 2
4283: ST_TO_ADDR
// uc_nation := nation_russian ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// PrepareMechanic ( false , 5 - Difficulty ) ;
4292: LD_INT 0
4294: PPUSH
4295: LD_INT 5
4297: PUSH
4298: LD_OWVAR 67
4302: MINUS
4303: PPUSH
4304: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4308: CALL_OW 44
4312: PPUSH
4313: LD_VAR 0 7
4317: PPUSH
4318: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4322: LD_VAR 0 7
4326: PPUSH
4327: LD_INT 158
4329: PPUSH
4330: LD_INT 106
4332: PPUSH
4333: CALL_OW 111
// end ;
4337: GO 4183
4339: POP
4340: POP
// end ; end ;
4341: GO 4140
4343: POP
4344: POP
// end ; if tick = 20 20$00 and multi_support then
4345: LD_OWVAR 1
4349: PUSH
4350: LD_INT 42000
4352: EQUAL
4353: IFFALSE 4361
4355: PUSH
4356: LD_EXP 23
4360: AND
4361: IFFALSE 4564
// begin for i := 1 to 8 do
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: DOUBLE
4369: LD_INT 1
4371: DEC
4372: ST_TO_ADDR
4373: LD_INT 8
4375: PUSH
4376: FOR_TO
4377: IFFALSE 4562
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4379: LD_EXP 7
4383: PUSH
4384: LD_VAR 0 2
4388: ARRAY
4389: IFFALSE 4404
4391: PUSH
4392: LD_EXP 25
4396: PUSH
4397: LD_VAR 0 2
4401: ARRAY
4402: NOT
4403: AND
4404: IFFALSE 4560
// begin for j := 1 to 2 do
4406: LD_ADDR_VAR 0 3
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_INT 2
4418: PUSH
4419: FOR_TO
4420: IFFALSE 4558
// begin uc_side := i ;
4422: LD_ADDR_OWVAR 20
4426: PUSH
4427: LD_VAR 0 2
4431: ST_TO_ADDR
// uc_nation := nation_russian ;
4432: LD_ADDR_OWVAR 21
4436: PUSH
4437: LD_INT 3
4439: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
4440: LD_INT 22
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 44
4451: PPUSH
4452: LD_INT 30
4454: PPUSH
4455: CALL 35092 0 5
// veh := CreateVehicle ;
4459: LD_ADDR_VAR 0 7
4463: PUSH
4464: CALL_OW 45
4468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4469: LD_INT 35
4471: PPUSH
4472: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4476: LD_VAR 0 7
4480: PPUSH
4481: LD_INT 31
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: CALL_OW 49
4491: IFFALSE 4469
// uc_side := i ;
4493: LD_ADDR_OWVAR 20
4497: PUSH
4498: LD_VAR 0 2
4502: ST_TO_ADDR
// uc_nation := nation_russian ;
4503: LD_ADDR_OWVAR 21
4507: PUSH
4508: LD_INT 3
4510: ST_TO_ADDR
// PrepareMechanic ( false , 6 - Difficulty ) ;
4511: LD_INT 0
4513: PPUSH
4514: LD_INT 6
4516: PUSH
4517: LD_OWVAR 67
4521: MINUS
4522: PPUSH
4523: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4527: CALL_OW 44
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4541: LD_VAR 0 7
4545: PPUSH
4546: LD_INT 158
4548: PPUSH
4549: LD_INT 106
4551: PPUSH
4552: CALL_OW 111
// end ;
4556: GO 4419
4558: POP
4559: POP
// end ; end ;
4560: GO 4376
4562: POP
4563: POP
// end ; if tick = 30 30$00 and multi_support then
4564: LD_OWVAR 1
4568: PUSH
4569: LD_INT 63000
4571: EQUAL
4572: IFFALSE 4580
4574: PUSH
4575: LD_EXP 23
4579: AND
4580: IFFALSE 4866
// begin for i := 1 to 8 do
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: DOUBLE
4588: LD_INT 1
4590: DEC
4591: ST_TO_ADDR
4592: LD_INT 8
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4864
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4598: LD_EXP 7
4602: PUSH
4603: LD_VAR 0 2
4607: ARRAY
4608: IFFALSE 4623
4610: PUSH
4611: LD_EXP 25
4615: PUSH
4616: LD_VAR 0 2
4620: ARRAY
4621: NOT
4622: AND
4623: IFFALSE 4862
// begin uc_side := i ;
4625: LD_ADDR_OWVAR 20
4629: PUSH
4630: LD_VAR 0 2
4634: ST_TO_ADDR
// uc_nation := nation_russian ;
4635: LD_ADDR_OWVAR 21
4639: PUSH
4640: LD_INT 3
4642: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_heavy_gun , 30 ) ;
4643: LD_INT 24
4645: PPUSH
4646: LD_INT 1
4648: PPUSH
4649: LD_INT 1
4651: PPUSH
4652: LD_INT 46
4654: PPUSH
4655: LD_INT 30
4657: PPUSH
4658: CALL 35092 0 5
// veh := CreateVehicle ;
4662: LD_ADDR_VAR 0 7
4666: PUSH
4667: CALL_OW 45
4671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4672: LD_INT 35
4674: PPUSH
4675: CALL_OW 67
// until PlaceUnitArea ( veh , southSpawnArea , false ) ;
4679: LD_VAR 0 7
4683: PPUSH
4684: LD_INT 31
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 49
4694: IFFALSE 4672
// uc_side := i ;
4696: LD_ADDR_OWVAR 20
4700: PUSH
4701: LD_VAR 0 2
4705: ST_TO_ADDR
// uc_nation := nation_russian ;
4706: LD_ADDR_OWVAR 21
4710: PUSH
4711: LD_INT 3
4713: ST_TO_ADDR
// PrepareMechanic ( false , 7 - Difficulty ) ;
4714: LD_INT 0
4716: PPUSH
4717: LD_INT 7
4719: PUSH
4720: LD_OWVAR 67
4724: MINUS
4725: PPUSH
4726: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4730: CALL_OW 44
4734: PPUSH
4735: LD_VAR 0 7
4739: PPUSH
4740: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4744: LD_VAR 0 7
4748: PPUSH
4749: LD_INT 158
4751: PPUSH
4752: LD_INT 106
4754: PPUSH
4755: CALL_OW 111
// for j := 1 to 2 do
4759: LD_ADDR_VAR 0 3
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 2
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4860
// begin uc_side := i ;
4775: LD_ADDR_OWVAR 20
4779: PUSH
4780: LD_VAR 0 2
4784: ST_TO_ADDR
// uc_nation := nation_russian ;
4785: LD_ADDR_OWVAR 21
4789: PUSH
4790: LD_INT 3
4792: ST_TO_ADDR
// PrepareSoldier ( false , 7 - Difficulty ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 7
4798: PUSH
4799: LD_OWVAR 67
4803: MINUS
4804: PPUSH
4805: CALL_OW 381
// un := CreateHuman ;
4809: LD_ADDR_VAR 0 4
4813: PUSH
4814: CALL_OW 44
4818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4819: LD_INT 35
4821: PPUSH
4822: CALL_OW 67
// until PlaceUnitArea ( un , southSpawnArea , false ) ;
4826: LD_VAR 0 4
4830: PPUSH
4831: LD_INT 31
4833: PPUSH
4834: LD_INT 0
4836: PPUSH
4837: CALL_OW 49
4841: IFFALSE 4819
// ComMoveXY ( un , 158 , 106 ) ;
4843: LD_VAR 0 4
4847: PPUSH
4848: LD_INT 158
4850: PPUSH
4851: LD_INT 106
4853: PPUSH
4854: CALL_OW 111
// end ;
4858: GO 4772
4860: POP
4861: POP
// end ; end ;
4862: GO 4595
4864: POP
4865: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4866: LD_OWVAR 1
4870: PUSH
4871: LD_EXP 28
4875: GREATER
4876: IFFALSE 4884
4878: PUSH
4879: LD_EXP 23
4883: AND
4884: IFFALSE 5076
// begin if tick mod 2 2$00 = 0 then
4886: LD_OWVAR 1
4890: PUSH
4891: LD_INT 4200
4893: MOD
4894: PUSH
4895: LD_INT 0
4897: EQUAL
4898: IFFALSE 5076
// begin tmp := Reindex ( tmp , 1 , Count ( tmp ) , true ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_VAR 0 6
4909: PPUSH
4910: LD_INT 1
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: CALL 32296 0 1
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: CALL 34622 0 4
4930: ST_TO_ADDR
// for s := 1 to tmp do
4931: LD_ADDR_VAR 0 5
4935: PUSH
4936: DOUBLE
4937: LD_INT 1
4939: DEC
4940: ST_TO_ADDR
4941: LD_VAR 0 6
4945: PUSH
4946: FOR_TO
4947: IFFALSE 5074
// begin i := tmp [ s ] ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_VAR 0 6
4958: PUSH
4959: LD_VAR 0 5
4963: ARRAY
4964: ST_TO_ADDR
// if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
4965: LD_EXP 7
4969: PUSH
4970: LD_VAR 0 2
4974: ARRAY
4975: IFFALSE 4990
4977: PUSH
4978: LD_EXP 25
4982: PUSH
4983: LD_VAR 0 2
4987: ARRAY
4988: NOT
4989: AND
4990: IFFALSE 5004
4992: PUSH
4993: LD_EXP 27
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: AND
5004: IFFALSE 5072
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
5006: LD_EXP 27
5010: PUSH
5011: LD_VAR 0 2
5015: ARRAY
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PPUSH
5021: LD_INT 7
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
5031: LD_ADDR_EXP 27
5035: PUSH
5036: LD_EXP 27
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_EXP 27
5050: PUSH
5051: LD_VAR 0 2
5055: ARRAY
5056: PPUSH
5057: LD_INT 1
5059: PPUSH
5060: CALL_OW 3
5064: PPUSH
5065: CALL_OW 1
5069: ST_TO_ADDR
// break ;
5070: GO 5074
// end ; end ;
5072: GO 4946
5074: POP
5075: POP
// end ; end ; if not multi_custom_commanders then
5076: LD_EXP 16
5080: NOT
5081: IFFALSE 5196
// begin for i := 1 to 8 do
5083: LD_ADDR_VAR 0 2
5087: PUSH
5088: DOUBLE
5089: LD_INT 1
5091: DEC
5092: ST_TO_ADDR
5093: LD_INT 8
5095: PUSH
5096: FOR_TO
5097: IFFALSE 5170
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
5099: LD_INT 22
5101: PUSH
5102: LD_VAR 0 2
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 69
5115: PUSH
5116: LD_INT 0
5118: EQUAL
5119: IFFALSE 5134
5121: PUSH
5122: LD_EXP 25
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: NOT
5133: AND
5134: IFFALSE 5168
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
5136: LD_ADDR_EXP 25
5140: PUSH
5141: LD_EXP 25
5145: PPUSH
5146: LD_VAR 0 2
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 1
5158: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
5159: LD_VAR 0 2
5163: PPUSH
5164: CALL 5768 0 1
// end ; end ;
5168: GO 5096
5170: POP
5171: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
5172: LD_EXP 25
5176: PPUSH
5177: CALL 32296 0 1
5181: PUSH
5182: LD_EXP 7
5186: PPUSH
5187: CALL 32296 0 1
5191: EQUAL
5192: IFFALSE 5196
// break ;
5194: GO 5220
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
5196: CALL 5334 0 0
5200: NOT
5201: IFFALSE 5209
5203: PUSH
5204: LD_EXP 2
5208: AND
5209: IFTRUE 5218
5211: PUSH
5212: LD_EXP 24
5216: NOT
5217: OR
5218: IFFALSE 4102
// game := false ;
5220: LD_ADDR_EXP 2
5224: PUSH
5225: LD_INT 0
5227: ST_TO_ADDR
// for i := 1 to 8 do
5228: LD_ADDR_VAR 0 2
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 8
5240: PUSH
5241: FOR_TO
5242: IFFALSE 5278
// begin if multi_sides [ i ] then
5244: LD_EXP 7
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: IFFALSE 5276
// SetMultiScore ( i , multi_points [ i ] ) ;
5256: LD_VAR 0 2
5260: PPUSH
5261: LD_EXP 32
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PPUSH
5272: CALL_OW 506
// end ;
5276: GO 5241
5278: POP
5279: POP
// if multi_loosers [ your_side ] then
5280: LD_EXP 25
5284: PUSH
5285: LD_OWVAR 2
5289: ARRAY
5290: IFFALSE 5313
// begin if Multiplayer then
5292: LD_OWVAR 4
5296: IFFALSE 5304
// YouLostInMultiplayer else
5298: CALL_OW 107
5302: GO 5311
// YouLost (  ) ;
5304: LD_STRING 
5306: PPUSH
5307: CALL_OW 104
// end else
5311: GO 5329
// begin if Multiplayer then
5313: LD_OWVAR 4
5317: IFFALSE 5325
// YouWinInMultiplayer else
5319: CALL_OW 106
5323: GO 5329
// YouWin ;
5325: CALL_OW 103
// end ; end ;
5329: LD_VAR 0 1
5333: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
5334: LD_INT 0
5336: PPUSH
5337: PPUSH
// result := false ;
5338: LD_ADDR_VAR 0 1
5342: PUSH
5343: LD_INT 0
5345: ST_TO_ADDR
// for side in botSides do
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_EXP 3
5355: PUSH
5356: FOR_IN
5357: IFFALSE 5418
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: LD_INT 22
5366: PUSH
5367: LD_VAR 0 2
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 50
5388: PUSH
5389: EMPTY
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL_OW 69
5401: PUSH
5402: LD_INT 0
5404: GREATER
5405: ST_TO_ADDR
// if result then
5406: LD_VAR 0 1
5410: IFFALSE 5416
// exit ;
5412: POP
5413: POP
5414: GO 5420
// end ;
5416: GO 5356
5418: POP
5419: POP
// end ;
5420: LD_VAR 0 1
5424: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
// result := [ ] ;
5429: LD_ADDR_VAR 0 1
5433: PUSH
5434: EMPTY
5435: ST_TO_ADDR
// for i := 1 to 8 do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: DOUBLE
5442: LD_INT 1
5444: DEC
5445: ST_TO_ADDR
5446: LD_INT 8
5448: PUSH
5449: FOR_TO
5450: IFFALSE 5507
// begin if multi_sides [ i ] then
5452: LD_EXP 7
5456: PUSH
5457: LD_VAR 0 2
5461: ARRAY
5462: IFFALSE 5505
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
5464: LD_ADDR_VAR 0 1
5468: PUSH
5469: LD_VAR 0 1
5473: PUSH
5474: LD_STRING #coop-points
5476: PUSH
5477: LD_VAR 0 2
5481: PUSH
5482: LD_VAR 0 2
5486: PUSH
5487: LD_EXP 32
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: ADD
5504: ST_TO_ADDR
// end ; end ;
5505: GO 5449
5507: POP
5508: POP
// end ;
5509: LD_VAR 0 1
5513: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
5514: LD_INT 0
5516: PPUSH
5517: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5518: LD_ADDR_EXP 32
5522: PUSH
5523: LD_INT 0
5525: PUSH
5526: LD_INT 0
5528: PUSH
5529: LD_INT 0
5531: PUSH
5532: LD_INT 0
5534: PUSH
5535: LD_INT 0
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: LD_INT 0
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// multi_points_conditions := [ ] ;
5557: LD_ADDR_EXP 33
5561: PUSH
5562: EMPTY
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 1
5568: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
5569: LD_INT 0
5571: PPUSH
// if not multi_points or not side or side > 8 then
5572: LD_EXP 32
5576: NOT
5577: IFTRUE 5586
5579: PUSH
5580: LD_VAR 0 1
5584: NOT
5585: OR
5586: IFTRUE 5598
5588: PUSH
5589: LD_VAR 0 1
5593: PUSH
5594: LD_INT 8
5596: GREATER
5597: OR
5598: IFFALSE 5602
// exit ;
5600: GO 5639
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
5602: LD_ADDR_EXP 32
5606: PUSH
5607: LD_EXP 32
5611: PPUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: LD_EXP 32
5621: PUSH
5622: LD_VAR 0 1
5626: ARRAY
5627: PUSH
5628: LD_VAR 0 2
5632: PLUS
5633: PPUSH
5634: CALL_OW 1
5638: ST_TO_ADDR
// end ;
5639: LD_VAR 0 3
5643: RET
// export function Multiplayer_GetPoints ( side ) ; begin
5644: LD_INT 0
5646: PPUSH
// if not multi_points or not side or side > 8 then
5647: LD_EXP 32
5651: NOT
5652: IFTRUE 5661
5654: PUSH
5655: LD_VAR 0 1
5659: NOT
5660: OR
5661: IFTRUE 5673
5663: PUSH
5664: LD_VAR 0 1
5668: PUSH
5669: LD_INT 8
5671: GREATER
5672: OR
5673: IFFALSE 5677
// exit ;
5675: GO 5693
// result := multi_points [ side ] ;
5677: LD_ADDR_VAR 0 2
5681: PUSH
5682: LD_EXP 32
5686: PUSH
5687: LD_VAR 0 1
5691: ARRAY
5692: ST_TO_ADDR
// end ;
5693: LD_VAR 0 2
5697: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
5698: LD_INT 0
5700: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
5701: LD_ADDR_EXP 33
5705: PUSH
5706: LD_EXP 33
5710: PPUSH
5711: LD_EXP 33
5715: PUSH
5716: LD_INT 1
5718: PLUS
5719: PPUSH
5720: LD_VAR 0 1
5724: PPUSH
5725: CALL_OW 1
5729: ST_TO_ADDR
// end ;
5730: LD_VAR 0 2
5734: RET
// export function Multiplayer_GetCondition ( id ) ; begin
5735: LD_INT 0
5737: PPUSH
// if not id then
5738: LD_VAR 0 1
5742: NOT
5743: IFFALSE 5747
// exit ;
5745: GO 5763
// result := multi_points_conditions [ id ] ;
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: LD_EXP 33
5756: PUSH
5757: LD_VAR 0 1
5761: ARRAY
5762: ST_TO_ADDR
// end ;
5763: LD_VAR 0 2
5767: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5768: LD_INT 0
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
// players := [ ] ;
5775: LD_ADDR_VAR 0 3
5779: PUSH
5780: EMPTY
5781: ST_TO_ADDR
// for i = 1 to 8 do
5782: LD_ADDR_VAR 0 4
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_INT 8
5794: PUSH
5795: FOR_TO
5796: IFFALSE 5857
// begin if i = side then
5798: LD_VAR 0 4
5802: PUSH
5803: LD_VAR 0 1
5807: EQUAL
5808: IFFALSE 5812
// continue ;
5810: GO 5795
// if multi_sides [ i ] and not multi_loosers [ i ] then
5812: LD_EXP 7
5816: PUSH
5817: LD_VAR 0 4
5821: ARRAY
5822: IFFALSE 5837
5824: PUSH
5825: LD_EXP 25
5829: PUSH
5830: LD_VAR 0 4
5834: ARRAY
5835: NOT
5836: AND
5837: IFFALSE 5855
// players := players ^ i ;
5839: LD_ADDR_VAR 0 3
5843: PUSH
5844: LD_VAR 0 3
5848: PUSH
5849: LD_VAR 0 4
5853: ADD
5854: ST_TO_ADDR
// end ;
5855: GO 5795
5857: POP
5858: POP
// if not players then
5859: LD_VAR 0 3
5863: NOT
5864: IFFALSE 5868
// exit ;
5866: GO 6135
// if players = 1 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 1
5875: EQUAL
5876: IFFALSE 5937
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5878: LD_ADDR_VAR 0 4
5882: PUSH
5883: LD_INT 22
5885: PUSH
5886: LD_VAR 0 1
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 51
5897: PUSH
5898: EMPTY
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 69
5909: PUSH
5910: FOR_IN
5911: IFFALSE 5933
// SetSide ( i , players [ 1 ] ) ;
5913: LD_VAR 0 4
5917: PPUSH
5918: LD_VAR 0 3
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 235
5931: GO 5910
5933: POP
5934: POP
// end else
5935: GO 6135
// begin j := 1 ;
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5945: LD_ADDR_VAR 0 4
5949: PUSH
5950: LD_INT 22
5952: PUSH
5953: LD_VAR 0 1
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 2
5964: PUSH
5965: LD_INT 21
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 51
5977: PUSH
5978: EMPTY
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 21
5987: PUSH
5988: LD_INT 2
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 69
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6133
// begin SetSide ( i , players [ j ] ) ;
6012: LD_VAR 0 4
6016: PPUSH
6017: LD_VAR 0 3
6021: PUSH
6022: LD_VAR 0 5
6026: ARRAY
6027: PPUSH
6028: CALL_OW 235
// if IsDrivenBy ( i ) then
6032: LD_VAR 0 4
6036: PPUSH
6037: CALL_OW 311
6041: IFFALSE 6068
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: CALL_OW 311
6052: PPUSH
6053: LD_VAR 0 3
6057: PUSH
6058: LD_VAR 0 5
6062: ARRAY
6063: PPUSH
6064: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
6068: LD_VAR 0 4
6072: PPUSH
6073: CALL_OW 310
6077: PPUSH
6078: CALL_OW 247
6082: PUSH
6083: LD_INT 3
6085: EQUAL
6086: IFFALSE 6097
// ComExitBuilding ( i ) ;
6088: LD_VAR 0 4
6092: PPUSH
6093: CALL_OW 122
// j := j + 1 ;
6097: LD_ADDR_VAR 0 5
6101: PUSH
6102: LD_VAR 0 5
6106: PUSH
6107: LD_INT 1
6109: PLUS
6110: ST_TO_ADDR
// if j > players then
6111: LD_VAR 0 5
6115: PUSH
6116: LD_VAR 0 3
6120: GREATER
6121: IFFALSE 6131
// j := 1 ;
6123: LD_ADDR_VAR 0 5
6127: PUSH
6128: LD_INT 1
6130: ST_TO_ADDR
// end ;
6131: GO 6009
6133: POP
6134: POP
// end ; end ;
6135: LD_VAR 0 2
6139: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
6140: LD_INT 0
6142: PPUSH
6143: PPUSH
6144: PPUSH
// i := 3 ;
6145: LD_ADDR_VAR 0 2
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
6153: LD_ADDR_VAR 0 3
6157: PUSH
6158: LD_INT 5
6160: PUSH
6161: LD_INT 10
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 120
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 101
6180: PUSH
6181: LD_INT 8
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 27
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
6204: LD_INT 4
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: LD_VAR 0 3
6214: PUSH
6215: LD_VAR 0 2
6219: ARRAY
6220: PUSH
6221: LD_INT 1
6223: ARRAY
6224: PPUSH
6225: LD_VAR 0 3
6229: PUSH
6230: LD_VAR 0 2
6234: ARRAY
6235: PUSH
6236: LD_INT 2
6238: ARRAY
6239: PPUSH
6240: LD_INT 0
6242: PPUSH
6243: CALL_OW 58
// end ;
6247: LD_VAR 0 1
6251: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
6252: LD_INT 0
6254: PPUSH
// if not side or side > 8 then
6255: LD_VAR 0 1
6259: NOT
6260: IFTRUE 6272
6262: PUSH
6263: LD_VAR 0 1
6267: PUSH
6268: LD_INT 8
6270: GREATER
6271: OR
6272: IFFALSE 6276
// exit ;
6274: GO 6293
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
6276: LD_VAR 0 1
6280: PPUSH
6281: LD_INT 6
6283: PPUSH
6284: CALL 5735 0 1
6288: PPUSH
6289: CALL 5569 0 2
// end ;
6293: LD_VAR 0 2
6297: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
6298: LD_INT 0
6300: PPUSH
// if not side or side > 8 then
6301: LD_VAR 0 1
6305: NOT
6306: IFTRUE 6318
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 8
6316: GREATER
6317: OR
6318: IFFALSE 6322
// exit ;
6320: GO 6339
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
6322: LD_VAR 0 1
6326: PPUSH
6327: LD_INT 4
6329: PPUSH
6330: CALL 5735 0 1
6334: PPUSH
6335: CALL 5569 0 2
// end ;
6339: LD_VAR 0 2
6343: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
6344: LD_INT 0
6346: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
6347: LD_VAR 0 1
6351: NOT
6352: IFTRUE 6364
6354: PUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_INT 8
6362: GREATER
6363: OR
6364: IFTRUE 6392
6366: PUSH
6367: LD_VAR 0 2
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_INT 6
6377: PUSH
6378: LD_INT 36
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: IN
6390: NOT
6391: OR
6392: IFFALSE 6396
// exit ;
6394: GO 6413
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
6396: LD_VAR 0 1
6400: PPUSH
6401: LD_INT 3
6403: PPUSH
6404: CALL 5735 0 1
6408: PPUSH
6409: CALL 5569 0 2
// end ;
6413: LD_VAR 0 3
6417: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
6418: LD_INT 0
6420: PPUSH
6421: PPUSH
// if not un then
6422: LD_VAR 0 1
6426: NOT
6427: IFFALSE 6431
// exit ;
6429: GO 6477
// if not points then
6431: LD_VAR 0 3
6435: NOT
6436: IFFALSE 6453
// gained_points := Multiplayer_GetCondition ( 1 ) else
6438: LD_ADDR_VAR 0 5
6442: PUSH
6443: LD_INT 1
6445: PPUSH
6446: CALL 5735 0 1
6450: ST_TO_ADDR
6451: GO 6463
// gained_points := points ;
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: LD_VAR 0 3
6462: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
6463: LD_VAR 0 2
6467: PPUSH
6468: LD_VAR 0 5
6472: PPUSH
6473: CALL 5569 0 2
6477: LD_VAR 0 4
6481: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
6482: LD_INT 0
6484: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
6485: LD_VAR 0 1
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL 5735 0 1
6497: PPUSH
6498: CALL 5569 0 2
// end ; end_of_file
6502: LD_VAR 0 2
6506: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
6515: PPUSH
6516: PPUSH
6517: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
6518: LD_ADDR_EXP 35
6522: PUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: LD_INT 1
6530: PPUSH
6531: LD_INT 1
6533: PPUSH
6534: CALL 30219 0 3
6538: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
6539: LD_ADDR_EXP 36
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: LD_INT 6
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 3
6564: PUSH
6565: LD_INT 1
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: LD_INT 5
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: LD_INT 1
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: LD_INT 4
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 1
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: LD_INT 4
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 2
6618: PUSH
6619: LD_INT 1
6621: PUSH
6622: LD_INT 1
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: ST_TO_ADDR
// amBuildings := [ ] ;
6641: LD_ADDR_EXP 37
6645: PUSH
6646: EMPTY
6647: ST_TO_ADDR
// amVehicles := [ ] ;
6648: LD_ADDR_EXP 38
6652: PUSH
6653: EMPTY
6654: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
6655: LD_ADDR_EXP 39
6659: PUSH
6660: EMPTY
6661: ST_TO_ADDR
// amDrivers := [ ] ;
6662: LD_ADDR_EXP 40
6666: PUSH
6667: EMPTY
6668: ST_TO_ADDR
// amVehiclesCounter := 1 ;
6669: LD_ADDR_EXP 41
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
6677: LD_ADDR_EXP 44
6681: PUSH
6682: LD_INT 6
6684: PUSH
6685: LD_INT 8
6687: PUSH
6688: LD_INT 10
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_OWVAR 67
6700: ARRAY
6701: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
6702: LD_ADDR_VAR 0 8
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PUSH
6721: LD_OWVAR 67
6725: ARRAY
6726: ST_TO_ADDR
// uc_side := side ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_VAR 0 1
6736: ST_TO_ADDR
// uc_nation := nation_american ;
6737: LD_ADDR_OWVAR 21
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// hc_gallery := us ;
6745: LD_ADDR_OWVAR 33
6749: PUSH
6750: LD_STRING us
6752: ST_TO_ADDR
// hc_face_number := 19 ;
6753: LD_ADDR_OWVAR 34
6757: PUSH
6758: LD_INT 19
6760: ST_TO_ADDR
// hc_importance := 100 ;
6761: LD_ADDR_OWVAR 32
6765: PUSH
6766: LD_INT 100
6768: ST_TO_ADDR
// hc_name := Sikorski ;
6769: LD_ADDR_OWVAR 26
6773: PUSH
6774: LD_STRING Sikorski
6776: ST_TO_ADDR
// hc_sex := sex_male ;
6777: LD_ADDR_OWVAR 27
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6785: LD_ADDR_OWVAR 31
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: LD_INT 3
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6808: LD_ADDR_OWVAR 29
6812: PUSH
6813: LD_INT 10
6815: PUSH
6816: LD_INT 11
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: ST_TO_ADDR
// Sikorski := CreateHuman ;
6823: LD_ADDR_EXP 34
6827: PUSH
6828: CALL_OW 44
6832: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , HexInfo ( 35 , 45 ) ) ;
6833: LD_EXP 34
6837: PPUSH
6838: LD_INT 35
6840: PPUSH
6841: LD_INT 45
6843: PPUSH
6844: CALL_OW 428
6848: PPUSH
6849: CALL_OW 52
// InitHC_All ( ) ;
6853: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 6 , 6 , 3 ] ) ;
6857: LD_ADDR_EXP 42
6861: PUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_INT 3
6867: PPUSH
6868: LD_STRING 
6870: PPUSH
6871: LD_VAR 0 8
6875: PPUSH
6876: LD_INT 800
6878: PUSH
6879: LD_INT 120
6881: PUSH
6882: LD_INT 0
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: PPUSH
6890: LD_INT 10
6892: PUSH
6893: LD_INT 11
6895: PUSH
6896: LD_INT 12
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: LD_OWVAR 67
6908: ARRAY
6909: PUSH
6910: LD_INT 6
6912: PUSH
6913: LD_INT 6
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PPUSH
6925: CALL 38929 0 6
6929: ST_TO_ADDR
// amForceTmp := [ ] ;
6930: LD_ADDR_EXP 43
6934: PUSH
6935: EMPTY
6936: ST_TO_ADDR
// if Difficulty = 3 then
6937: LD_OWVAR 67
6941: PUSH
6942: LD_INT 3
6944: EQUAL
6945: IFFALSE 6976
// begin bc_type := b_breastwork ;
6947: LD_ADDR_OWVAR 42
6951: PUSH
6952: LD_INT 31
6954: ST_TO_ADDR
// bc_level := 7 ;
6955: LD_ADDR_OWVAR 43
6959: PUSH
6960: LD_INT 7
6962: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6963: LD_INT 79
6965: PPUSH
6966: LD_INT 72
6968: PPUSH
6969: LD_INT 5
6971: PPUSH
6972: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6976: LD_ADDR_VAR 0 3
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 30
6995: PUSH
6996: LD_INT 31
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: LD_INT 95
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 58
7022: PUSH
7023: EMPTY
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 69
7036: PUSH
7037: FOR_IN
7038: IFFALSE 7167
// begin d := GetDir ( i ) ;
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: CALL_OW 254
7054: ST_TO_ADDR
// if d < 3 then
7055: LD_VAR 0 4
7059: PUSH
7060: LD_INT 3
7062: LESS
7063: IFFALSE 7081
// d := d + 3 else
7065: LD_ADDR_VAR 0 4
7069: PUSH
7070: LD_VAR 0 4
7074: PUSH
7075: LD_INT 3
7077: PLUS
7078: ST_TO_ADDR
7079: GO 7095
// d := d - 3 ;
7081: LD_ADDR_VAR 0 4
7085: PUSH
7086: LD_VAR 0 4
7090: PUSH
7091: LD_INT 3
7093: MINUS
7094: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
7095: LD_INT 0
7097: PPUSH
7098: LD_VAR 0 8
7102: PPUSH
7103: CALL_OW 381
// un := CreateHuman ;
7107: LD_ADDR_VAR 0 6
7111: PUSH
7112: CALL_OW 44
7116: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
7117: LD_ADDR_EXP 43
7121: PUSH
7122: LD_EXP 43
7126: PPUSH
7127: LD_VAR 0 6
7131: PPUSH
7132: CALL 68262 0 2
7136: ST_TO_ADDR
// SetDir ( un , d ) ;
7137: LD_VAR 0 6
7141: PPUSH
7142: LD_VAR 0 4
7146: PPUSH
7147: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
7151: LD_VAR 0 6
7155: PPUSH
7156: LD_VAR 0 3
7160: PPUSH
7161: CALL_OW 52
// end ;
7165: GO 7037
7167: POP
7168: POP
// for i := 1 to 3 do
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: DOUBLE
7175: LD_INT 1
7177: DEC
7178: ST_TO_ADDR
7179: LD_INT 3
7181: PUSH
7182: FOR_TO
7183: IFFALSE 7244
// begin PrepareEngineer ( false , skill ) ;
7185: LD_INT 0
7187: PPUSH
7188: LD_VAR 0 8
7192: PPUSH
7193: CALL_OW 382
// un := CreateHuman ;
7197: LD_ADDR_VAR 0 6
7201: PUSH
7202: CALL_OW 44
7206: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
7207: LD_VAR 0 6
7211: PPUSH
7212: LD_INT 29
7214: PPUSH
7215: LD_INT 0
7217: PPUSH
7218: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
7222: LD_ADDR_EXP 43
7226: PUSH
7227: LD_EXP 43
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL 68262 0 2
7241: ST_TO_ADDR
// end ;
7242: GO 7182
7244: POP
7245: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 21
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: PUSH
7282: FOR_IN
7283: IFFALSE 7316
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
7285: LD_VAR 0 3
7289: PPUSH
7290: LD_INT 3
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: LD_INT 7
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PUSH
7304: LD_OWVAR 67
7308: ARRAY
7309: PPUSH
7310: CALL_OW 241
7314: GO 7282
7316: POP
7317: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_INT 22
7325: PUSH
7326: LD_VAR 0 1
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 32
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PPUSH
7349: CALL_OW 69
7353: PUSH
7354: FOR_IN
7355: IFFALSE 7396
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_INT 5
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 5
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 3
7383: MOD
7384: PUSH
7385: LD_INT 1
7387: PLUS
7388: ARRAY
7389: PPUSH
7390: CALL_OW 431
7394: GO 7354
7396: POP
7397: POP
// end ;
7398: LD_VAR 0 2
7402: RET
// function BaseScript ( side , base , area , innerArea , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7403: LD_INT 0
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
7418: PPUSH
7419: PPUSH
7420: PPUSH
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// enable ;
7432: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7433: LD_ADDR_VAR 0 11
7437: PUSH
7438: LD_INT 81
7440: PUSH
7441: LD_VAR 0 1
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// if tmp then
7455: LD_VAR 0 11
7459: IFFALSE 7480
// enemySide := GetSide ( tmp [ 1 ] ) ;
7461: LD_ADDR_VAR 0 35
7465: PUSH
7466: LD_VAR 0 11
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 255
7479: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
7480: LD_ADDR_VAR 0 23
7484: PUSH
7485: LD_VAR 0 4
7489: PPUSH
7490: LD_INT 81
7492: PUSH
7493: LD_VAR 0 1
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PPUSH
7502: CALL_OW 70
7506: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7507: LD_ADDR_VAR 0 24
7511: PUSH
7512: LD_VAR 0 5
7516: PPUSH
7517: LD_INT 81
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PPUSH
7529: CALL_OW 70
7533: ST_TO_ADDR
// vehicles := amVehicles ;
7534: LD_ADDR_VAR 0 27
7538: PUSH
7539: LD_EXP 38
7543: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7544: LD_ADDR_VAR 0 33
7548: PUSH
7549: LD_VAR 0 3
7553: PPUSH
7554: LD_INT 22
7556: PUSH
7557: LD_VAR 0 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: LD_INT 30
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 30
7581: PUSH
7582: LD_INT 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 70
7602: ST_TO_ADDR
// if depot then
7603: LD_VAR 0 33
7607: IFFALSE 7623
// depot := depot [ 1 ] ;
7609: LD_ADDR_VAR 0 33
7613: PUSH
7614: LD_VAR 0 33
7618: PUSH
7619: LD_INT 1
7621: ARRAY
7622: ST_TO_ADDR
// if amTech then
7623: LD_EXP 35
7627: IFFALSE 7786
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7629: LD_ADDR_VAR 0 13
7633: PUSH
7634: LD_VAR 0 3
7638: PPUSH
7639: LD_INT 22
7641: PUSH
7642: LD_VAR 0 1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 50
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: LD_INT 2
7659: PUSH
7660: LD_INT 30
7662: PUSH
7663: LD_INT 6
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 30
7672: PUSH
7673: LD_INT 7
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 8
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 70
7705: ST_TO_ADDR
// if lab then
7706: LD_VAR 0 13
7710: IFFALSE 7786
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7712: LD_VAR 0 13
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PPUSH
7721: CALL_OW 461
7725: PUSH
7726: LD_INT 2
7728: EQUAL
7729: IFFALSE 7786
// begin for i in amTech do
7731: LD_ADDR_VAR 0 10
7735: PUSH
7736: LD_EXP 35
7740: PUSH
7741: FOR_IN
7742: IFFALSE 7784
// if CanBeResearched ( lab [ 1 ] , i ) then
7744: LD_VAR 0 13
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: LD_VAR 0 10
7757: PPUSH
7758: CALL_OW 430
7762: IFFALSE 7782
// begin AddComResearch ( lab [ 1 ] , i ) ;
7764: LD_VAR 0 13
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_VAR 0 10
7777: PPUSH
7778: CALL_OW 184
// end ;
7782: GO 7741
7784: POP
7785: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7786: LD_ADDR_VAR 0 30
7790: PUSH
7791: LD_VAR 0 3
7795: PPUSH
7796: LD_INT 22
7798: PUSH
7799: LD_VAR 0 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 30
7810: PUSH
7811: LD_INT 3
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 50
7820: PUSH
7821: EMPTY
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: PPUSH
7829: CALL_OW 70
7833: ST_TO_ADDR
// if fac then
7834: LD_VAR 0 30
7838: IFFALSE 8173
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7840: LD_VAR 0 30
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: CALL_OW 461
7853: PUSH
7854: LD_INT 2
7856: EQUAL
7857: IFFALSE 8173
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7859: LD_ADDR_VAR 0 31
7863: PUSH
7864: LD_VAR 0 3
7868: PPUSH
7869: LD_INT 2
7871: PUSH
7872: LD_INT 30
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 30
7884: PUSH
7885: LD_INT 33
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 35
7899: PUSH
7900: LD_INT 0
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PPUSH
7911: CALL_OW 70
7915: ST_TO_ADDR
// if emptyTowers then
7916: LD_VAR 0 31
7920: IFFALSE 7970
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7922: LD_ADDR_VAR 0 32
7926: PUSH
7927: LD_VAR 0 31
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PPUSH
7936: LD_VAR 0 3
7940: PPUSH
7941: CALL 40621 0 2
7945: ST_TO_ADDR
// if weapon then
7946: LD_VAR 0 32
7950: IFFALSE 7970
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7952: LD_VAR 0 31
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 32
7965: PPUSH
7966: CALL_OW 148
// end ; if amConstructList then
7970: LD_EXP 36
7974: IFFALSE 8173
// for i := 1 to Count ( amConstructList ) do
7976: LD_ADDR_VAR 0 10
7980: PUSH
7981: DOUBLE
7982: LD_INT 1
7984: DEC
7985: ST_TO_ADDR
7986: LD_EXP 36
7990: PPUSH
7991: CALL 32296 0 1
7995: PUSH
7996: FOR_TO
7997: IFFALSE 8171
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7999: LD_VAR 0 30
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PPUSH
8008: LD_EXP 36
8012: PUSH
8013: LD_VAR 0 10
8017: ARRAY
8018: PUSH
8019: LD_INT 1
8021: ARRAY
8022: PPUSH
8023: LD_EXP 36
8027: PUSH
8028: LD_VAR 0 10
8032: ARRAY
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PPUSH
8038: LD_EXP 36
8042: PUSH
8043: LD_VAR 0 10
8047: ARRAY
8048: PUSH
8049: LD_INT 3
8051: ARRAY
8052: PPUSH
8053: LD_EXP 36
8057: PUSH
8058: LD_VAR 0 10
8062: ARRAY
8063: PUSH
8064: LD_INT 4
8066: ARRAY
8067: PPUSH
8068: CALL_OW 448
8072: IFFALSE 8169
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
8074: LD_VAR 0 30
8078: PUSH
8079: LD_INT 1
8081: ARRAY
8082: PPUSH
8083: LD_EXP 36
8087: PUSH
8088: LD_VAR 0 10
8092: ARRAY
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PPUSH
8098: LD_EXP 36
8102: PUSH
8103: LD_VAR 0 10
8107: ARRAY
8108: PUSH
8109: LD_INT 2
8111: ARRAY
8112: PPUSH
8113: LD_EXP 36
8117: PUSH
8118: LD_VAR 0 10
8122: ARRAY
8123: PUSH
8124: LD_INT 3
8126: ARRAY
8127: PPUSH
8128: LD_EXP 36
8132: PUSH
8133: LD_VAR 0 10
8137: ARRAY
8138: PUSH
8139: LD_INT 4
8141: ARRAY
8142: PPUSH
8143: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
8147: LD_ADDR_EXP 36
8151: PUSH
8152: LD_EXP 36
8156: PPUSH
8157: LD_VAR 0 10
8161: PPUSH
8162: CALL_OW 3
8166: ST_TO_ADDR
// break ;
8167: GO 8171
// end ; end ;
8169: GO 7996
8171: POP
8172: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8173: LD_ADDR_VAR 0 11
8177: PUSH
8178: LD_VAR 0 3
8182: PPUSH
8183: LD_INT 22
8185: PUSH
8186: LD_VAR 0 1
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 21
8197: PUSH
8198: LD_INT 3
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 57
8210: PUSH
8211: EMPTY
8212: LIST
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: LD_INT 24
8223: PUSH
8224: LD_INT 1000
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8246: LD_ADDR_VAR 0 18
8250: PUSH
8251: LD_VAR 0 3
8255: PPUSH
8256: CALL_OW 435
8260: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8261: LD_ADDR_VAR 0 15
8265: PUSH
8266: LD_VAR 0 6
8270: PPUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 3
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 50
8283: PUSH
8284: EMPTY
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 72
8295: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
8296: LD_VAR 0 15
8300: PPUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 120
8306: PUSH
8307: LD_INT 7
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 54
8323: PUSH
8324: EMPTY
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 72
8339: IFFALSE 8356
8341: PUSH
8342: LD_VAR 0 30
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: CALL_OW 302
8355: AND
8356: IFFALSE 8415
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
8358: LD_VAR 0 15
8362: PPUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 120
8368: PUSH
8369: LD_INT 7
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 54
8385: PUSH
8386: EMPTY
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 72
8401: PPUSH
8402: LD_VAR 0 30
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8415: LD_ADDR_VAR 0 19
8419: PUSH
8420: LD_VAR 0 6
8424: PPUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 50
8437: PUSH
8438: EMPTY
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 72
8449: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8450: LD_ADDR_VAR 0 13
8454: PUSH
8455: LD_VAR 0 3
8459: PPUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 30
8465: PUSH
8466: LD_INT 6
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 30
8475: PUSH
8476: LD_INT 7
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: ST_TO_ADDR
// if sci then
8504: LD_VAR 0 19
8508: IFFALSE 8669
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8510: LD_ADDR_VAR 0 21
8514: PUSH
8515: LD_VAR 0 6
8519: PPUSH
8520: LD_INT 95
8522: PUSH
8523: LD_VAR 0 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 120
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: ST_TO_ADDR
// if hurtUnits then
8551: LD_VAR 0 21
8555: IFFALSE 8616
// begin for i in sci do
8557: LD_ADDR_VAR 0 10
8561: PUSH
8562: LD_VAR 0 19
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8612
// if IsInUnit ( i ) then
8570: LD_VAR 0 10
8574: PPUSH
8575: CALL_OW 310
8579: IFFALSE 8592
// ComExitBuilding ( i ) else
8581: LD_VAR 0 10
8585: PPUSH
8586: CALL_OW 122
8590: GO 8610
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8592: LD_VAR 0 10
8596: PPUSH
8597: LD_VAR 0 21
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: CALL_OW 128
8610: GO 8567
8612: POP
8613: POP
// end else
8614: GO 8669
// if lab then
8616: LD_VAR 0 13
8620: IFFALSE 8669
// begin for i in sci do
8622: LD_ADDR_VAR 0 10
8626: PUSH
8627: LD_VAR 0 19
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8667
// if not IsInUnit ( i ) then
8635: LD_VAR 0 10
8639: PPUSH
8640: CALL_OW 310
8644: NOT
8645: IFFALSE 8665
// ComEnterUnit ( i , lab [ 1 ] ) ;
8647: LD_VAR 0 10
8651: PPUSH
8652: LD_VAR 0 13
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: CALL_OW 120
8665: GO 8632
8667: POP
8668: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8669: LD_ADDR_VAR 0 14
8673: PUSH
8674: LD_VAR 0 6
8678: PPUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 2
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 72
8693: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
8694: LD_ADDR_VAR 0 34
8698: PUSH
8699: LD_EXP 37
8703: ST_TO_ADDR
// if eng then
8704: LD_VAR 0 14
8708: IFFALSE 9556
// begin for i in eng do
8710: LD_ADDR_VAR 0 10
8714: PUSH
8715: LD_VAR 0 14
8719: PUSH
8720: FOR_IN
8721: IFFALSE 9554
// begin tag := GetTag ( i ) ;
8723: LD_ADDR_VAR 0 16
8727: PUSH
8728: LD_VAR 0 10
8732: PPUSH
8733: CALL_OW 110
8737: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
8738: LD_VAR 0 10
8742: PPUSH
8743: LD_VAR 0 5
8747: PPUSH
8748: CALL_OW 308
8752: IFFALSE 8783
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8754: LD_VAR 0 10
8758: PPUSH
8759: LD_VAR 0 8
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PPUSH
8768: LD_VAR 0 8
8772: PUSH
8773: LD_INT 2
8775: ARRAY
8776: PPUSH
8777: CALL_OW 111
// continue ;
8781: GO 8720
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8783: LD_VAR 0 10
8787: PPUSH
8788: CALL_OW 256
8792: PUSH
8793: LD_INT 800
8795: LESS
8796: IFFALSE 8808
8798: PUSH
8799: LD_VAR 0 16
8803: PUSH
8804: LD_INT 1
8806: NONEQUAL
8807: AND
8808: IFFALSE 8858
// begin SetTag ( i , tHeal ) ;
8810: LD_VAR 0 10
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8822: LD_VAR 0 10
8826: PPUSH
8827: LD_VAR 0 7
8831: PUSH
8832: LD_INT 1
8834: ARRAY
8835: PPUSH
8836: LD_VAR 0 7
8840: PUSH
8841: LD_INT 2
8843: ARRAY
8844: PPUSH
8845: CALL_OW 111
// AddComHold ( i ) ;
8849: LD_VAR 0 10
8853: PPUSH
8854: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8858: LD_VAR 0 16
8862: PUSH
8863: LD_INT 1
8865: EQUAL
8866: IFFALSE 8883
8868: PUSH
8869: LD_VAR 0 10
8873: PPUSH
8874: CALL_OW 256
8878: PUSH
8879: LD_INT 1000
8881: EQUAL
8882: AND
8883: IFFALSE 8897
// SetTag ( i , 0 ) ;
8885: LD_VAR 0 10
8889: PPUSH
8890: LD_INT 0
8892: PPUSH
8893: CALL_OW 109
// if not tag then
8897: LD_VAR 0 16
8901: NOT
8902: IFFALSE 9073
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8904: LD_ADDR_VAR 0 12
8908: PUSH
8909: LD_VAR 0 3
8913: PPUSH
8914: LD_INT 57
8916: PUSH
8917: EMPTY
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: ST_TO_ADDR
// if undone then
8925: LD_VAR 0 12
8929: IFFALSE 8951
// begin ComComplete ( i , undone [ 1 ] ) ;
8931: LD_VAR 0 10
8935: PPUSH
8936: LD_VAR 0 12
8940: PUSH
8941: LD_INT 1
8943: ARRAY
8944: PPUSH
8945: CALL 38466 0 2
// continue ;
8949: GO 8720
// end ; if cr or tmp or buildingsToBuild then
8951: LD_VAR 0 18
8955: IFTRUE 8963
8957: PUSH
8958: LD_VAR 0 11
8962: OR
8963: IFTRUE 8971
8965: PUSH
8966: LD_VAR 0 34
8970: OR
8971: IFFALSE 9047
// begin if IsInUnit ( i ) then
8973: LD_VAR 0 10
8977: PPUSH
8978: CALL_OW 310
8982: IFFALSE 8993
// ComExitBuilding ( i ) ;
8984: LD_VAR 0 10
8988: PPUSH
8989: CALL_OW 122
// if tmp then
8993: LD_VAR 0 11
8997: IFFALSE 9013
// SetTag ( i , tRepair ) else
8999: LD_VAR 0 10
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 109
9011: GO 9045
// if cr then
9013: LD_VAR 0 18
9017: IFFALSE 9033
// SetTag ( i , tCrates ) else
9019: LD_VAR 0 10
9023: PPUSH
9024: LD_INT 2
9026: PPUSH
9027: CALL_OW 109
9031: GO 9045
// SetTag ( i , tBuild ) ;
9033: LD_VAR 0 10
9037: PPUSH
9038: LD_INT 5
9040: PPUSH
9041: CALL_OW 109
// end else
9045: GO 9073
// if not IsInUnit ( i ) then
9047: LD_VAR 0 10
9051: PPUSH
9052: CALL_OW 310
9056: NOT
9057: IFFALSE 9073
// ComEnterUnit ( i , depot ) ;
9059: LD_VAR 0 10
9063: PPUSH
9064: LD_VAR 0 33
9068: PPUSH
9069: CALL_OW 120
// end ; if tag = tRepair then
9073: LD_VAR 0 16
9077: PUSH
9078: LD_INT 3
9080: EQUAL
9081: IFFALSE 9187
// begin if IsInUnit ( i ) then
9083: LD_VAR 0 10
9087: PPUSH
9088: CALL_OW 310
9092: IFFALSE 9105
// begin ComExitBuilding ( i ) ;
9094: LD_VAR 0 10
9098: PPUSH
9099: CALL_OW 122
// continue ;
9103: GO 8720
// end ; if not tmp then
9105: LD_VAR 0 11
9109: NOT
9110: IFFALSE 9126
// begin SetTag ( i , 0 ) ;
9112: LD_VAR 0 10
9116: PPUSH
9117: LD_INT 0
9119: PPUSH
9120: CALL_OW 109
// continue ;
9124: GO 8720
// end ; if not HasTask ( i ) then
9126: LD_VAR 0 10
9130: PPUSH
9131: CALL_OW 314
9135: NOT
9136: IFFALSE 9156
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9138: LD_VAR 0 10
9142: PPUSH
9143: LD_VAR 0 11
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PPUSH
9152: CALL_OW 130
// if not IsInarea ( i , area ) then
9156: LD_VAR 0 10
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: CALL_OW 308
9170: NOT
9171: IFFALSE 9187
// ComMoveToarea ( i , area ) ;
9173: LD_VAR 0 10
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 113
// end ; if tag = tBuild then
9187: LD_VAR 0 16
9191: PUSH
9192: LD_INT 5
9194: EQUAL
9195: IFFALSE 9405
// begin if IsInUnit ( i ) then
9197: LD_VAR 0 10
9201: PPUSH
9202: CALL_OW 310
9206: IFFALSE 9219
// begin ComExitBuilding ( i ) ;
9208: LD_VAR 0 10
9212: PPUSH
9213: CALL_OW 122
// continue ;
9217: GO 8720
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9219: LD_VAR 0 34
9223: NOT
9224: IFTRUE 9232
9226: PUSH
9227: LD_VAR 0 23
9231: OR
9232: IFTRUE 9240
9234: PUSH
9235: LD_VAR 0 24
9239: OR
9240: IFFALSE 9258
// begin SetTag ( i , 0 ) ;
9242: LD_VAR 0 10
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 109
// continue ;
9254: GO 8720
// end else
9256: GO 9297
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9258: LD_VAR 0 33
9262: PPUSH
9263: LD_VAR 0 34
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: CALL 72357 0 2
9280: NOT
9281: IFFALSE 9297
// begin SetTag ( i , 0 ) ;
9283: LD_VAR 0 10
9287: PPUSH
9288: LD_INT 0
9290: PPUSH
9291: CALL_OW 109
// continue ;
9295: GO 8720
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
9297: LD_ADDR_VAR 0 12
9301: PUSH
9302: LD_VAR 0 3
9306: PPUSH
9307: LD_INT 57
9309: PUSH
9310: EMPTY
9311: LIST
9312: PPUSH
9313: CALL_OW 70
9317: ST_TO_ADDR
// if undone then
9318: LD_VAR 0 12
9322: IFFALSE 9344
// begin ComComplete ( i , undone [ 1 ] ) ;
9324: LD_VAR 0 10
9328: PPUSH
9329: LD_VAR 0 12
9333: PUSH
9334: LD_INT 1
9336: ARRAY
9337: PPUSH
9338: CALL 38466 0 2
// continue ;
9342: GO 8720
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9344: LD_VAR 0 10
9348: PPUSH
9349: LD_VAR 0 34
9353: PUSH
9354: LD_INT 1
9356: ARRAY
9357: PUSH
9358: LD_INT 1
9360: ARRAY
9361: PPUSH
9362: LD_VAR 0 34
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PUSH
9371: LD_INT 2
9373: ARRAY
9374: PPUSH
9375: LD_VAR 0 34
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PUSH
9384: LD_INT 3
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 34
9392: PUSH
9393: LD_INT 1
9395: ARRAY
9396: PUSH
9397: LD_INT 4
9399: ARRAY
9400: PPUSH
9401: CALL_OW 145
// end ; if tag = tCrates then
9405: LD_VAR 0 16
9409: PUSH
9410: LD_INT 2
9412: EQUAL
9413: IFFALSE 9552
// begin if IsInUnit ( i ) then
9415: LD_VAR 0 10
9419: PPUSH
9420: CALL_OW 310
9424: IFFALSE 9437
// begin ComExitBuilding ( i ) ;
9426: LD_VAR 0 10
9430: PPUSH
9431: CALL_OW 122
// continue ;
9435: GO 8720
// end ; if not cr then
9437: LD_VAR 0 18
9441: NOT
9442: IFFALSE 9458
// begin SetTag ( i , 0 ) ;
9444: LD_VAR 0 10
9448: PPUSH
9449: LD_INT 0
9451: PPUSH
9452: CALL_OW 109
// continue ;
9456: GO 8720
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9458: LD_VAR 0 10
9462: PPUSH
9463: CALL_OW 314
9467: NOT
9468: IFFALSE 9523
9470: PUSH
9471: LD_INT 81
9473: PUSH
9474: LD_VAR 0 1
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 92
9485: PUSH
9486: LD_VAR 0 18
9490: PUSH
9491: LD_INT 1
9493: ARRAY
9494: PUSH
9495: LD_VAR 0 18
9499: PUSH
9500: LD_INT 2
9502: ARRAY
9503: PUSH
9504: LD_INT 12
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: NOT
9522: AND
9523: IFFALSE 9552
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9525: LD_VAR 0 10
9529: PPUSH
9530: LD_VAR 0 18
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: LD_VAR 0 18
9543: PUSH
9544: LD_INT 2
9546: ARRAY
9547: PPUSH
9548: CALL_OW 117
// end ; end ;
9552: GO 8720
9554: POP
9555: POP
// end ; if vehicles then
9556: LD_VAR 0 27
9560: IFFALSE 10372
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
9562: LD_ADDR_VAR 0 27
9566: PUSH
9567: LD_VAR 0 27
9571: PPUSH
9572: LD_INT 3
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 34
9580: PUSH
9581: LD_INT 13
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 34
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 50
9609: PUSH
9610: EMPTY
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 72
9621: ST_TO_ADDR
// if vehicles then
9622: LD_VAR 0 27
9626: IFFALSE 10372
// begin for i in vehicles do
9628: LD_ADDR_VAR 0 10
9632: PUSH
9633: LD_VAR 0 27
9637: PUSH
9638: FOR_IN
9639: IFFALSE 10370
// begin tag := GetTag ( i ) ;
9641: LD_ADDR_VAR 0 16
9645: PUSH
9646: LD_VAR 0 10
9650: PPUSH
9651: CALL_OW 110
9655: ST_TO_ADDR
// if not tag then
9656: LD_VAR 0 16
9660: NOT
9661: IFFALSE 9807
// begin if GetControl ( i ) = control_manual then
9663: LD_VAR 0 10
9667: PPUSH
9668: CALL_OW 263
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9793
// begin drivers := amDrivers ;
9678: LD_ADDR_VAR 0 25
9682: PUSH
9683: LD_EXP 40
9687: ST_TO_ADDR
// if not drivers then
9688: LD_VAR 0 25
9692: NOT
9693: IFFALSE 9773
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
9695: LD_ADDR_VAR 0 25
9699: PUSH
9700: LD_VAR 0 15
9704: PPUSH
9705: LD_INT 3
9707: PUSH
9708: LD_INT 120
9710: PUSH
9711: LD_INT 7
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL_OW 72
9726: ST_TO_ADDR
// if drivers then
9727: LD_VAR 0 25
9731: IFFALSE 9773
// begin SetTag ( drivers [ 1 ] , tMech ) ;
9733: LD_VAR 0 25
9737: PUSH
9738: LD_INT 1
9740: ARRAY
9741: PPUSH
9742: LD_INT 7
9744: PPUSH
9745: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
9749: LD_ADDR_EXP 40
9753: PUSH
9754: LD_EXP 40
9758: PPUSH
9759: LD_VAR 0 25
9763: PUSH
9764: LD_INT 1
9766: ARRAY
9767: PPUSH
9768: CALL 68262 0 2
9772: ST_TO_ADDR
// end ; end ; if drivers then
9773: LD_VAR 0 25
9777: IFFALSE 9791
// SetTag ( i , tBusy ) ;
9779: LD_VAR 0 10
9783: PPUSH
9784: LD_INT 8
9786: PPUSH
9787: CALL_OW 109
// continue ;
9791: GO 9638
// end ; SetTag ( i , tBusy ) ;
9793: LD_VAR 0 10
9797: PPUSH
9798: LD_INT 8
9800: PPUSH
9801: CALL_OW 109
// end else
9805: GO 10368
// if tag = tBusy then
9807: LD_VAR 0 16
9811: PUSH
9812: LD_INT 8
9814: EQUAL
9815: IFFALSE 10035
// begin if GetLives ( i ) = 1000 then
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 256
9826: PUSH
9827: LD_INT 1000
9829: EQUAL
9830: IFFALSE 10033
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9832: LD_VAR 0 10
9836: PPUSH
9837: CALL_OW 263
9841: PUSH
9842: LD_INT 1
9844: EQUAL
9845: IFFALSE 9859
9847: PUSH
9848: LD_VAR 0 10
9852: PPUSH
9853: CALL_OW 311
9857: NOT
9858: AND
9859: IFFALSE 10021
// begin drivers := amDrivers ;
9861: LD_ADDR_VAR 0 25
9865: PUSH
9866: LD_EXP 40
9870: ST_TO_ADDR
// if not drivers then
9871: LD_VAR 0 25
9875: NOT
9876: IFFALSE 9892
// begin SetTag ( i , 0 ) ;
9878: LD_VAR 0 10
9882: PPUSH
9883: LD_INT 0
9885: PPUSH
9886: CALL_OW 109
// continue ;
9890: GO 9638
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9892: LD_VAR 0 25
9896: PUSH
9897: LD_INT 1
9899: ARRAY
9900: PPUSH
9901: CALL_OW 310
9905: IFFALSE 9923
9907: PUSH
9908: LD_VAR 0 25
9912: PUSH
9913: LD_INT 1
9915: ARRAY
9916: PPUSH
9917: CALL 65842 0 1
9921: NOT
9922: AND
9923: IFFALSE 9938
// ComExitBuilding ( drivers [ 1 ] ) ;
9925: LD_VAR 0 25
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9938: LD_VAR 0 27
9942: PPUSH
9943: LD_INT 120
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PPUSH
9953: CALL_OW 72
9957: IFFALSE 9975
9959: PUSH
9960: LD_VAR 0 25
9964: PUSH
9965: LD_INT 1
9967: ARRAY
9968: PPUSH
9969: CALL_OW 314
9973: NOT
9974: AND
9975: IFTRUE 9999
9977: PUSH
9978: LD_VAR 0 27
9982: PPUSH
9983: LD_INT 120
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PPUSH
9993: CALL_OW 72
9997: NOT
9998: OR
9999: IFFALSE 10019
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10001: LD_VAR 0 25
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_VAR 0 10
10014: PPUSH
10015: CALL_OW 120
// continue ;
10019: GO 9638
// end ; SetTag ( i , tAttack ) ;
10021: LD_VAR 0 10
10025: PPUSH
10026: LD_INT 13
10028: PPUSH
10029: CALL_OW 109
// end ; end else
10033: GO 10368
// if tag = tAttack then
10035: LD_VAR 0 16
10039: PUSH
10040: LD_INT 13
10042: EQUAL
10043: IFFALSE 10225
// begin enemy := enemyInBase ;
10045: LD_ADDR_VAR 0 22
10049: PUSH
10050: LD_VAR 0 23
10054: ST_TO_ADDR
// if not enemy then
10055: LD_VAR 0 22
10059: NOT
10060: IFFALSE 10072
// enemy := enemyOuterBase ;
10062: LD_ADDR_VAR 0 22
10066: PUSH
10067: LD_VAR 0 24
10071: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10072: LD_VAR 0 22
10076: NOT
10077: IFFALSE 10112
10079: PUSH
10080: LD_VAR 0 10
10084: PPUSH
10085: LD_VAR 0 8
10089: PUSH
10090: LD_INT 1
10092: ARRAY
10093: PPUSH
10094: LD_VAR 0 8
10098: PUSH
10099: LD_INT 2
10101: ARRAY
10102: PPUSH
10103: CALL_OW 297
10107: PUSH
10108: LD_INT 10
10110: GREATER
10111: AND
10112: IFFALSE 10143
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10114: LD_VAR 0 10
10118: PPUSH
10119: LD_VAR 0 8
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_VAR 0 8
10132: PUSH
10133: LD_INT 2
10135: ARRAY
10136: PPUSH
10137: CALL_OW 111
// continue ;
10141: GO 9638
// end ; if GetLives ( i ) < 650 then
10143: LD_VAR 0 10
10147: PPUSH
10148: CALL_OW 256
10152: PUSH
10153: LD_INT 650
10155: LESS
10156: IFFALSE 10199
// begin SetTag ( i , tVehRepair ) ;
10158: LD_VAR 0 10
10162: PPUSH
10163: LD_INT 9
10165: PPUSH
10166: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10170: LD_VAR 0 10
10174: PPUSH
10175: LD_VAR 0 8
10179: PUSH
10180: LD_INT 1
10182: ARRAY
10183: PPUSH
10184: LD_VAR 0 8
10188: PUSH
10189: LD_INT 2
10191: ARRAY
10192: PPUSH
10193: CALL_OW 111
// continue ;
10197: GO 9638
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10199: LD_VAR 0 10
10203: PPUSH
10204: LD_VAR 0 22
10208: PPUSH
10209: LD_VAR 0 10
10213: PPUSH
10214: CALL_OW 74
10218: PPUSH
10219: CALL_OW 115
// end else
10223: GO 10368
// if tag = tVehRepair then
10225: LD_VAR 0 16
10229: PUSH
10230: LD_INT 9
10232: EQUAL
10233: IFFALSE 10368
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10235: LD_VAR 0 10
10239: PPUSH
10240: LD_VAR 0 8
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: LD_VAR 0 8
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: PPUSH
10258: CALL_OW 297
10262: PUSH
10263: LD_INT 10
10265: GREATER
10266: IFFALSE 10297
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10268: LD_VAR 0 10
10272: PPUSH
10273: LD_VAR 0 8
10277: PUSH
10278: LD_INT 1
10280: ARRAY
10281: PPUSH
10282: LD_VAR 0 8
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PPUSH
10291: CALL_OW 111
// continue ;
10295: GO 9638
// end ; if GetLives ( i ) = 1000 then
10297: LD_VAR 0 10
10301: PPUSH
10302: CALL_OW 256
10306: PUSH
10307: LD_INT 1000
10309: EQUAL
10310: IFFALSE 10326
// begin SetTag ( i , tBusy ) ;
10312: LD_VAR 0 10
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 109
// continue ;
10324: GO 9638
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10326: LD_VAR 0 10
10330: PPUSH
10331: CALL_OW 263
10335: PUSH
10336: LD_INT 1
10338: EQUAL
10339: IFFALSE 10352
10341: PUSH
10342: LD_VAR 0 10
10346: PPUSH
10347: CALL_OW 311
10351: AND
10352: IFFALSE 10368
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10354: LD_VAR 0 10
10358: PPUSH
10359: CALL_OW 311
10363: PPUSH
10364: CALL 69976 0 1
// end ; end ;
10368: GO 9638
10370: POP
10371: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10372: LD_ADDR_VAR 0 20
10376: PUSH
10377: LD_VAR 0 6
10381: PPUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 25
10387: PUSH
10388: LD_INT 1
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 25
10397: PUSH
10398: LD_INT 8
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 25
10407: PUSH
10408: LD_INT 5
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 25
10417: PUSH
10418: LD_INT 9
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 50
10434: PUSH
10435: EMPTY
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 72
10446: ST_TO_ADDR
// if sol then
10447: LD_VAR 0 20
10451: IFFALSE 10967
// begin if enemyInBase then
10453: LD_VAR 0 23
10457: IFFALSE 10636
// begin for i in sol do
10459: LD_ADDR_VAR 0 10
10463: PUSH
10464: LD_VAR 0 20
10468: PUSH
10469: FOR_IN
10470: IFFALSE 10632
// begin tw := IsInUnit ( i ) ;
10472: LD_ADDR_VAR 0 17
10476: PUSH
10477: LD_VAR 0 10
10481: PPUSH
10482: CALL_OW 310
10486: ST_TO_ADDR
// if tw then
10487: LD_VAR 0 17
10491: IFFALSE 10574
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
10493: LD_VAR 0 17
10497: PUSH
10498: LD_INT 22
10500: PUSH
10501: LD_VAR 0 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 101
10512: PUSH
10513: LD_VAR 0 35
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 30
10527: PUSH
10528: LD_INT 32
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 30
10537: PUSH
10538: LD_INT 31
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: IN
10560: NOT
10561: IFFALSE 10572
// ComExitBuilding ( i ) ;
10563: LD_VAR 0 10
10567: PPUSH
10568: CALL_OW 122
// end else
10572: GO 10630
// if IsInArea ( i , area ) then
10574: LD_VAR 0 10
10578: PPUSH
10579: LD_VAR 0 3
10583: PPUSH
10584: CALL_OW 308
10588: IFFALSE 10616
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
10590: LD_VAR 0 10
10594: PPUSH
10595: LD_VAR 0 23
10599: PPUSH
10600: LD_VAR 0 10
10604: PPUSH
10605: CALL_OW 74
10609: PPUSH
10610: CALL_OW 115
10614: GO 10630
// ComMoveToarea ( i , area ) ;
10616: LD_VAR 0 10
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: CALL_OW 113
// end ;
10630: GO 10469
10632: POP
10633: POP
// end else
10634: GO 10967
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
10636: LD_ADDR_VAR 0 29
10640: PUSH
10641: LD_VAR 0 3
10645: PPUSH
10646: LD_INT 3
10648: PUSH
10649: LD_INT 62
10651: PUSH
10652: EMPTY
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 30
10664: PUSH
10665: LD_INT 32
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 31
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL_OW 70
10717: ST_TO_ADDR
// if empty then
10718: LD_VAR 0 29
10722: IFFALSE 10739
// empty := ReverseArray ( empty ) ;
10724: LD_ADDR_VAR 0 29
10728: PUSH
10729: LD_VAR 0 29
10733: PPUSH
10734: CALL 63352 0 1
10738: ST_TO_ADDR
// for i in sol do
10739: LD_ADDR_VAR 0 10
10743: PUSH
10744: LD_VAR 0 20
10748: PUSH
10749: FOR_IN
10750: IFFALSE 10965
// begin tag := GetTag ( i ) ;
10752: LD_ADDR_VAR 0 16
10756: PUSH
10757: LD_VAR 0 10
10761: PPUSH
10762: CALL_OW 110
10766: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
10767: LD_VAR 0 10
10771: PPUSH
10772: CALL_OW 256
10776: PUSH
10777: LD_INT 1000
10779: LESS
10780: IFFALSE 10792
10782: PUSH
10783: LD_VAR 0 16
10787: PUSH
10788: LD_INT 1
10790: NONEQUAL
10791: AND
10792: IFFALSE 10844
// begin SetTag ( i , tHeal ) ;
10794: LD_VAR 0 10
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10806: LD_VAR 0 10
10810: PPUSH
10811: LD_VAR 0 7
10815: PUSH
10816: LD_INT 1
10818: ARRAY
10819: PPUSH
10820: LD_VAR 0 7
10824: PUSH
10825: LD_INT 2
10827: ARRAY
10828: PPUSH
10829: CALL_OW 111
// AddComHold ( i ) ;
10833: LD_VAR 0 10
10837: PPUSH
10838: CALL_OW 200
// continue ;
10842: GO 10749
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10844: LD_VAR 0 10
10848: PPUSH
10849: CALL_OW 256
10853: PUSH
10854: LD_INT 1000
10856: EQUAL
10857: IFFALSE 10869
10859: PUSH
10860: LD_VAR 0 16
10864: PUSH
10865: LD_INT 1
10867: EQUAL
10868: AND
10869: IFFALSE 10885
// begin SetTag ( i , 0 ) ;
10871: LD_VAR 0 10
10875: PPUSH
10876: LD_INT 0
10878: PPUSH
10879: CALL_OW 109
// continue ;
10883: GO 10749
// end ; if HasTask ( i ) then
10885: LD_VAR 0 10
10889: PPUSH
10890: CALL_OW 314
10894: IFFALSE 10898
// continue ;
10896: GO 10749
// if not IsInUnit ( i ) and not tag and empty then
10898: LD_VAR 0 10
10902: PPUSH
10903: CALL_OW 310
10907: NOT
10908: IFFALSE 10917
10910: PUSH
10911: LD_VAR 0 16
10915: NOT
10916: AND
10917: IFFALSE 10925
10919: PUSH
10920: LD_VAR 0 29
10924: AND
10925: IFFALSE 10963
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10927: LD_VAR 0 10
10931: PPUSH
10932: LD_VAR 0 29
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10945: LD_ADDR_VAR 0 29
10949: PUSH
10950: LD_VAR 0 29
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 3
10962: ST_TO_ADDR
// end ; end ;
10963: GO 10749
10965: POP
10966: POP
// end ; end ; end ;
10967: LD_VAR 0 9
10971: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10972: LD_EXP 42
10976: PPUSH
10977: LD_INT 50
10979: PUSH
10980: EMPTY
10981: LIST
10982: PPUSH
10983: CALL_OW 72
10987: IFFALSE 11043
10989: GO 10991
10991: DISABLE
// begin BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseInnerArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10992: LD_EXP 3
10996: PUSH
10997: LD_INT 1
10999: ARRAY
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 32
11009: PPUSH
11010: LD_INT 4
11012: PPUSH
11013: LD_EXP 42
11017: PPUSH
11018: LD_INT 27
11020: PUSH
11021: LD_INT 33
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: LD_INT 22
11030: PUSH
11031: LD_INT 17
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL 7403 0 8
// enable ;
11042: ENABLE
// end ;
11043: END
// every 3 3$00 trigger IsOk ( amDep ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) do var i ;
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 302
11051: IFFALSE 11083
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 30
11066: PUSH
11067: LD_INT 3
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: AND
11083: IFFALSE 11229
11085: GO 11087
11087: DISABLE
11088: LD_INT 0
11090: PPUSH
// begin enable ;
11091: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) do
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PPUSH
11121: CALL_OW 69
11125: PUSH
11126: FOR_IN
11127: IFFALSE 11227
// if BuildingStatus ( i ) = bs_idle and UnitsInside ( i ) > 0 then
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 461
11138: PUSH
11139: LD_INT 2
11141: EQUAL
11142: IFFALSE 11159
11144: PUSH
11145: LD_VAR 0 1
11149: PPUSH
11150: CALL_OW 313
11154: PUSH
11155: LD_INT 0
11157: GREATER
11158: AND
11159: IFFALSE 11225
// begin amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
11161: LD_ADDR_EXP 36
11165: PUSH
11166: LD_INT 3
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: LD_INT 5
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 3
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: LD_INT 4
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 4
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 6
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: ST_TO_ADDR
// end ;
11225: GO 11126
11227: POP
11228: POP
// end ; end_of_file
11229: PPOPN 1
11231: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
11232: LD_INT 0
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
11243: LD_ADDR_EXP 45
11247: PUSH
11248: LD_VAR 0 1
11252: PPUSH
11253: LD_INT 2
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL 30219 0 3
11263: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
11264: LD_ADDR_EXP 46
11268: PUSH
11269: LD_INT 13
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: LD_INT 27
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 13
11289: PUSH
11290: LD_INT 1
11292: PUSH
11293: LD_INT 1
11295: PUSH
11296: LD_INT 27
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 13
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 26
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 13
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 13
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: LD_INT 27
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: ST_TO_ADDR
// arBuildings := [ ] ;
11366: LD_ADDR_EXP 47
11370: PUSH
11371: EMPTY
11372: ST_TO_ADDR
// arVehicles := [ ] ;
11373: LD_ADDR_EXP 48
11377: PUSH
11378: EMPTY
11379: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
11380: LD_ADDR_EXP 49
11384: PUSH
11385: EMPTY
11386: ST_TO_ADDR
// arDrivers := [ ] ;
11387: LD_ADDR_EXP 50
11391: PUSH
11392: EMPTY
11393: ST_TO_ADDR
// arVehiclesCounter := 1 ;
11394: LD_ADDR_EXP 52
11398: PUSH
11399: LD_INT 1
11401: ST_TO_ADDR
// arMinesList := [ ] ;
11402: LD_ADDR_EXP 53
11406: PUSH
11407: EMPTY
11408: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
11409: LD_ADDR_EXP 51
11413: PUSH
11414: LD_INT 8
11416: PUSH
11417: LD_INT 11
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: LD_OWVAR 67
11432: ARRAY
11433: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
11434: LD_VAR 0 1
11438: PPUSH
11439: LD_INT 24
11441: PPUSH
11442: CALL 73383 0 2
// PlaceMines ( minefieldArea , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
11446: LD_INT 23
11448: PPUSH
11449: LD_INT 12
11451: PUSH
11452: LD_INT 14
11454: PUSH
11455: LD_INT 16
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_OWVAR 67
11467: ARRAY
11468: PPUSH
11469: CALL 12034 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
11473: LD_ADDR_VAR 0 8
11477: PUSH
11478: LD_INT 3
11480: PUSH
11481: LD_INT 4
11483: PUSH
11484: LD_INT 5
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_OWVAR 67
11496: ARRAY
11497: ST_TO_ADDR
// uc_side := side ;
11498: LD_ADDR_OWVAR 20
11502: PUSH
11503: LD_VAR 0 1
11507: ST_TO_ADDR
// uc_nation := 2 ;
11508: LD_ADDR_OWVAR 21
11512: PUSH
11513: LD_INT 2
11515: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 6 , 6 , 3 ] ) ;
11516: LD_ADDR_EXP 54
11520: PUSH
11521: LD_INT 32
11523: PPUSH
11524: LD_INT 5
11526: PPUSH
11527: LD_STRING 
11529: PPUSH
11530: LD_VAR 0 8
11534: PPUSH
11535: LD_INT 800
11537: PUSH
11538: LD_INT 120
11540: PUSH
11541: LD_INT 0
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: PPUSH
11549: LD_INT 10
11551: PUSH
11552: LD_INT 11
11554: PUSH
11555: LD_INT 12
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_OWVAR 67
11567: ARRAY
11568: PUSH
11569: LD_INT 6
11571: PUSH
11572: LD_INT 6
11574: PUSH
11575: LD_INT 3
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL 38929 0 6
11588: ST_TO_ADDR
// arForceTmp := [ ] ;
11589: LD_ADDR_EXP 55
11593: PUSH
11594: EMPTY
11595: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: LD_INT 22
11603: PUSH
11604: LD_VAR 0 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 30
11615: PUSH
11616: LD_INT 31
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 95
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 58
11642: PUSH
11643: EMPTY
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 69
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11787
// begin d := GetDir ( i ) ;
11660: LD_ADDR_VAR 0 4
11664: PUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: CALL_OW 254
11674: ST_TO_ADDR
// if d < 3 then
11675: LD_VAR 0 4
11679: PUSH
11680: LD_INT 3
11682: LESS
11683: IFFALSE 11701
// d := d + 3 else
11685: LD_ADDR_VAR 0 4
11689: PUSH
11690: LD_VAR 0 4
11694: PUSH
11695: LD_INT 3
11697: PLUS
11698: ST_TO_ADDR
11699: GO 11715
// d := d - 3 ;
11701: LD_ADDR_VAR 0 4
11705: PUSH
11706: LD_VAR 0 4
11710: PUSH
11711: LD_INT 3
11713: MINUS
11714: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
11715: LD_INT 0
11717: PPUSH
11718: LD_VAR 0 8
11722: PPUSH
11723: CALL_OW 381
// un := CreateHuman ;
11727: LD_ADDR_VAR 0 6
11731: PUSH
11732: CALL_OW 44
11736: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11737: LD_ADDR_EXP 55
11741: PUSH
11742: LD_EXP 55
11746: PPUSH
11747: LD_VAR 0 6
11751: PPUSH
11752: CALL 68262 0 2
11756: ST_TO_ADDR
// SetDir ( un , d ) ;
11757: LD_VAR 0 6
11761: PPUSH
11762: LD_VAR 0 4
11766: PPUSH
11767: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
11771: LD_VAR 0 6
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: CALL_OW 52
// end ;
11785: GO 11657
11787: POP
11788: POP
// for i := 1 to Difficulty do
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: DOUBLE
11795: LD_INT 1
11797: DEC
11798: ST_TO_ADDR
11799: LD_OWVAR 67
11803: PUSH
11804: FOR_TO
11805: IFFALSE 11871
// begin PrepareSoldier ( false , skill ) ;
11807: LD_INT 0
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: CALL_OW 381
// un := CreateHuman ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: CALL_OW 44
11828: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
11829: LD_ADDR_EXP 55
11833: PUSH
11834: LD_EXP 55
11838: PPUSH
11839: LD_VAR 0 6
11843: PPUSH
11844: CALL 68262 0 2
11848: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
11849: LD_VAR 0 6
11853: PPUSH
11854: LD_INT 215
11856: PPUSH
11857: LD_INT 102
11859: PPUSH
11860: CALL_OW 428
11864: PPUSH
11865: CALL_OW 52
// end ;
11869: GO 11804
11871: POP
11872: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_VAR 0 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 3
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: PUSH
11909: FOR_IN
11910: IFFALSE 11943
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 3
11919: PUSH
11920: LD_INT 5
11922: PUSH
11923: LD_INT 7
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PUSH
11931: LD_OWVAR 67
11935: ARRAY
11936: PPUSH
11937: CALL_OW 241
11941: GO 11909
11943: POP
11944: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11945: LD_ADDR_VAR 0 3
11949: PUSH
11950: LD_INT 22
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 30
11964: PUSH
11965: LD_INT 32
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12027
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 27
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 24
11997: PUSH
11998: LD_INT 27
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_VAR 0 3
12011: PUSH
12012: LD_INT 4
12014: MOD
12015: PUSH
12016: LD_INT 1
12018: PLUS
12019: ARRAY
12020: PPUSH
12021: CALL_OW 431
12025: GO 11981
12027: POP
12028: POP
// end ;
12029: LD_VAR 0 2
12033: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
12039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
12040: LD_ADDR_VAR 0 5
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: LD_INT 0
12052: PPUSH
12053: CALL_OW 517
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 5
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12309
// for i := 1 to n do
12067: LD_ADDR_VAR 0 4
12071: PUSH
12072: DOUBLE
12073: LD_INT 1
12075: DEC
12076: ST_TO_ADDR
12077: LD_VAR 0 2
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12307
// begin r := rand ( 1 , tmp [ 1 ] ) ;
12085: LD_ADDR_VAR 0 6
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: LD_VAR 0 5
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PPUSH
12102: CALL_OW 12
12106: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
12107: LD_VAR 0 5
12111: PUSH
12112: LD_INT 1
12114: ARRAY
12115: PUSH
12116: LD_VAR 0 6
12120: ARRAY
12121: PPUSH
12122: LD_VAR 0 5
12126: PUSH
12127: LD_INT 2
12129: ARRAY
12130: PUSH
12131: LD_VAR 0 6
12135: ARRAY
12136: PPUSH
12137: LD_EXP 3
12141: PUSH
12142: LD_INT 2
12144: ARRAY
12145: PPUSH
12146: LD_INT 0
12148: PPUSH
12149: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
12153: LD_ADDR_EXP 53
12157: PUSH
12158: LD_EXP 53
12162: PPUSH
12163: LD_EXP 53
12167: PUSH
12168: LD_INT 1
12170: PLUS
12171: PPUSH
12172: LD_VAR 0 5
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PUSH
12181: LD_VAR 0 6
12185: ARRAY
12186: PPUSH
12187: CALL_OW 2
12191: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
12192: LD_ADDR_EXP 53
12196: PUSH
12197: LD_EXP 53
12201: PPUSH
12202: LD_EXP 53
12206: PUSH
12207: LD_INT 1
12209: PLUS
12210: PPUSH
12211: LD_VAR 0 5
12215: PUSH
12216: LD_INT 2
12218: ARRAY
12219: PUSH
12220: LD_VAR 0 6
12224: ARRAY
12225: PPUSH
12226: CALL_OW 2
12230: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
12231: LD_ADDR_VAR 0 5
12235: PUSH
12236: LD_VAR 0 5
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 5
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: LD_VAR 0 6
12257: PPUSH
12258: CALL_OW 3
12262: PPUSH
12263: CALL_OW 1
12267: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
12268: LD_ADDR_VAR 0 5
12272: PUSH
12273: LD_VAR 0 5
12277: PPUSH
12278: LD_INT 2
12280: PPUSH
12281: LD_VAR 0 5
12285: PUSH
12286: LD_INT 2
12288: ARRAY
12289: PPUSH
12290: LD_VAR 0 6
12294: PPUSH
12295: CALL_OW 3
12299: PPUSH
12300: CALL_OW 1
12304: ST_TO_ADDR
// end ;
12305: GO 12082
12307: POP
12308: POP
// end ;
12309: LD_VAR 0 3
12313: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
// enable ;
12343: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
12344: LD_ADDR_VAR 0 10
12348: PUSH
12349: LD_INT 81
12351: PUSH
12352: LD_VAR 0 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 69
12365: ST_TO_ADDR
// if tmp then
12366: LD_VAR 0 10
12370: IFFALSE 12391
// enemySide := GetSide ( tmp [ 1 ] ) ;
12372: LD_ADDR_VAR 0 34
12376: PUSH
12377: LD_VAR 0 10
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: CALL_OW 255
12390: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12391: LD_ADDR_VAR 0 22
12395: PUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 81
12403: PUSH
12404: LD_VAR 0 1
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PPUSH
12413: CALL_OW 70
12417: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
12418: LD_ADDR_VAR 0 23
12422: PUSH
12423: LD_VAR 0 4
12427: PPUSH
12428: LD_INT 81
12430: PUSH
12431: LD_VAR 0 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 70
12444: ST_TO_ADDR
// vehicles := arVehicles ;
12445: LD_ADDR_VAR 0 26
12449: PUSH
12450: LD_EXP 48
12454: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12455: LD_ADDR_VAR 0 32
12459: PUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 0
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 70
12513: ST_TO_ADDR
// if depot then
12514: LD_VAR 0 32
12518: IFFALSE 12534
// depot := depot [ 1 ] ;
12520: LD_ADDR_VAR 0 32
12524: PUSH
12525: LD_VAR 0 32
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: ST_TO_ADDR
// if arTech then
12534: LD_EXP 45
12538: IFFALSE 12697
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12540: LD_ADDR_VAR 0 12
12544: PUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 50
12564: PUSH
12565: EMPTY
12566: LIST
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 6
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 7
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 8
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 70
12616: ST_TO_ADDR
// if lab then
12617: LD_VAR 0 12
12621: IFFALSE 12697
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
12623: LD_VAR 0 12
12627: PUSH
12628: LD_INT 1
12630: ARRAY
12631: PPUSH
12632: CALL_OW 461
12636: PUSH
12637: LD_INT 2
12639: EQUAL
12640: IFFALSE 12697
// begin for i in arTech do
12642: LD_ADDR_VAR 0 9
12646: PUSH
12647: LD_EXP 45
12651: PUSH
12652: FOR_IN
12653: IFFALSE 12695
// if CanBeResearched ( lab [ 1 ] , i ) then
12655: LD_VAR 0 12
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 9
12668: PPUSH
12669: CALL_OW 430
12673: IFFALSE 12693
// begin AddComResearch ( lab [ 1 ] , i ) ;
12675: LD_VAR 0 12
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 9
12688: PPUSH
12689: CALL_OW 184
// end ;
12693: GO 12652
12695: POP
12696: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12697: LD_ADDR_VAR 0 29
12701: PUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 22
12709: PUSH
12710: LD_VAR 0 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 50
12731: PUSH
12732: EMPTY
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: PPUSH
12740: CALL_OW 70
12744: ST_TO_ADDR
// if fac then
12745: LD_VAR 0 29
12749: IFFALSE 13084
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
12751: LD_VAR 0 29
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: CALL_OW 461
12764: PUSH
12765: LD_INT 2
12767: EQUAL
12768: IFFALSE 13084
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
12770: LD_ADDR_VAR 0 30
12774: PUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 30
12785: PUSH
12786: LD_INT 32
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: LD_INT 33
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 35
12810: PUSH
12811: LD_INT 0
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 70
12826: ST_TO_ADDR
// if emptyTowers then
12827: LD_VAR 0 30
12831: IFFALSE 12881
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
12833: LD_ADDR_VAR 0 31
12837: PUSH
12838: LD_VAR 0 30
12842: PUSH
12843: LD_INT 1
12845: ARRAY
12846: PPUSH
12847: LD_VAR 0 3
12851: PPUSH
12852: CALL 40621 0 2
12856: ST_TO_ADDR
// if weapon then
12857: LD_VAR 0 31
12861: IFFALSE 12881
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
12863: LD_VAR 0 30
12867: PUSH
12868: LD_INT 1
12870: ARRAY
12871: PPUSH
12872: LD_VAR 0 31
12876: PPUSH
12877: CALL_OW 148
// end ; if arConstructList then
12881: LD_EXP 46
12885: IFFALSE 13084
// for i := 1 to Count ( arConstructList ) do
12887: LD_ADDR_VAR 0 9
12891: PUSH
12892: DOUBLE
12893: LD_INT 1
12895: DEC
12896: ST_TO_ADDR
12897: LD_EXP 46
12901: PPUSH
12902: CALL 32296 0 1
12906: PUSH
12907: FOR_TO
12908: IFFALSE 13082
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
12910: LD_VAR 0 29
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_EXP 46
12923: PUSH
12924: LD_VAR 0 9
12928: ARRAY
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_EXP 46
12938: PUSH
12939: LD_VAR 0 9
12943: ARRAY
12944: PUSH
12945: LD_INT 2
12947: ARRAY
12948: PPUSH
12949: LD_EXP 46
12953: PUSH
12954: LD_VAR 0 9
12958: ARRAY
12959: PUSH
12960: LD_INT 3
12962: ARRAY
12963: PPUSH
12964: LD_EXP 46
12968: PUSH
12969: LD_VAR 0 9
12973: ARRAY
12974: PUSH
12975: LD_INT 4
12977: ARRAY
12978: PPUSH
12979: CALL_OW 448
12983: IFFALSE 13080
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12985: LD_VAR 0 29
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_EXP 46
12998: PUSH
12999: LD_VAR 0 9
13003: ARRAY
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PPUSH
13009: LD_EXP 46
13013: PUSH
13014: LD_VAR 0 9
13018: ARRAY
13019: PUSH
13020: LD_INT 2
13022: ARRAY
13023: PPUSH
13024: LD_EXP 46
13028: PUSH
13029: LD_VAR 0 9
13033: ARRAY
13034: PUSH
13035: LD_INT 3
13037: ARRAY
13038: PPUSH
13039: LD_EXP 46
13043: PUSH
13044: LD_VAR 0 9
13048: ARRAY
13049: PUSH
13050: LD_INT 4
13052: ARRAY
13053: PPUSH
13054: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
13058: LD_ADDR_EXP 46
13062: PUSH
13063: LD_EXP 46
13067: PPUSH
13068: LD_VAR 0 9
13072: PPUSH
13073: CALL_OW 3
13077: ST_TO_ADDR
// break ;
13078: GO 13082
// end ; end ;
13080: GO 12907
13082: POP
13083: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13084: LD_ADDR_VAR 0 10
13088: PUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 22
13096: PUSH
13097: LD_VAR 0 1
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 21
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 3
13118: PUSH
13119: LD_INT 57
13121: PUSH
13122: EMPTY
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 3
13131: PUSH
13132: LD_INT 24
13134: PUSH
13135: LD_INT 1000
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 70
13156: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
13157: LD_ADDR_VAR 0 17
13161: PUSH
13162: LD_VAR 0 3
13166: PPUSH
13167: CALL_OW 435
13171: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
13172: LD_ADDR_VAR 0 14
13176: PUSH
13177: LD_VAR 0 5
13181: PPUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 3
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 50
13194: PUSH
13195: EMPTY
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 72
13206: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
13207: LD_VAR 0 14
13211: PPUSH
13212: LD_INT 3
13214: PUSH
13215: LD_INT 120
13217: PUSH
13218: LD_INT 7
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 3
13231: PUSH
13232: LD_INT 54
13234: PUSH
13235: EMPTY
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 72
13250: IFFALSE 13267
13252: PUSH
13253: LD_VAR 0 29
13257: PUSH
13258: LD_INT 1
13260: ARRAY
13261: PPUSH
13262: CALL_OW 302
13266: AND
13267: IFFALSE 13326
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
13269: LD_VAR 0 14
13273: PPUSH
13274: LD_INT 3
13276: PUSH
13277: LD_INT 120
13279: PUSH
13280: LD_INT 7
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 54
13296: PUSH
13297: EMPTY
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 72
13312: PPUSH
13313: LD_VAR 0 29
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PPUSH
13322: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
13326: LD_ADDR_VAR 0 18
13330: PUSH
13331: LD_VAR 0 5
13335: PPUSH
13336: LD_INT 25
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 50
13348: PUSH
13349: EMPTY
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 72
13360: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
13361: LD_ADDR_VAR 0 12
13365: PUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 2
13373: PUSH
13374: LD_INT 30
13376: PUSH
13377: LD_INT 6
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 7
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 8
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: ST_TO_ADDR
// if sci then
13415: LD_VAR 0 18
13419: IFFALSE 13580
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
13421: LD_ADDR_VAR 0 20
13425: PUSH
13426: LD_VAR 0 5
13430: PPUSH
13431: LD_INT 95
13433: PUSH
13434: LD_VAR 0 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 120
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
// if hurtUnits then
13462: LD_VAR 0 20
13466: IFFALSE 13527
// begin for i in sci do
13468: LD_ADDR_VAR 0 9
13472: PUSH
13473: LD_VAR 0 18
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13523
// if IsInUnit ( i ) then
13481: LD_VAR 0 9
13485: PPUSH
13486: CALL_OW 310
13490: IFFALSE 13503
// ComExitBuilding ( i ) else
13492: LD_VAR 0 9
13496: PPUSH
13497: CALL_OW 122
13501: GO 13521
// ComHeal ( i , hurtUnits [ 1 ] ) ;
13503: LD_VAR 0 9
13507: PPUSH
13508: LD_VAR 0 20
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: CALL_OW 128
13521: GO 13478
13523: POP
13524: POP
// end else
13525: GO 13580
// if lab then
13527: LD_VAR 0 12
13531: IFFALSE 13580
// begin for i in sci do
13533: LD_ADDR_VAR 0 9
13537: PUSH
13538: LD_VAR 0 18
13542: PUSH
13543: FOR_IN
13544: IFFALSE 13578
// if not IsInUnit ( i ) then
13546: LD_VAR 0 9
13550: PPUSH
13551: CALL_OW 310
13555: NOT
13556: IFFALSE 13576
// ComEnterUnit ( i , lab [ 1 ] ) ;
13558: LD_VAR 0 9
13562: PPUSH
13563: LD_VAR 0 12
13567: PUSH
13568: LD_INT 1
13570: ARRAY
13571: PPUSH
13572: CALL_OW 120
13576: GO 13543
13578: POP
13579: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
13580: LD_ADDR_VAR 0 13
13584: PUSH
13585: LD_VAR 0 5
13589: PPUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 72
13604: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
13605: LD_ADDR_VAR 0 33
13609: PUSH
13610: LD_EXP 47
13614: ST_TO_ADDR
// if eng then
13615: LD_VAR 0 13
13619: IFFALSE 14467
// begin for i in eng do
13621: LD_ADDR_VAR 0 9
13625: PUSH
13626: LD_VAR 0 13
13630: PUSH
13631: FOR_IN
13632: IFFALSE 14465
// begin tag := GetTag ( i ) ;
13634: LD_ADDR_VAR 0 15
13638: PUSH
13639: LD_VAR 0 9
13643: PPUSH
13644: CALL_OW 110
13648: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
13649: LD_VAR 0 9
13653: PPUSH
13654: LD_VAR 0 4
13658: PPUSH
13659: CALL_OW 308
13663: IFFALSE 13694
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13665: LD_VAR 0 9
13669: PPUSH
13670: LD_VAR 0 7
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 7
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: PPUSH
13688: CALL_OW 111
// continue ;
13692: GO 13631
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
13694: LD_VAR 0 9
13698: PPUSH
13699: CALL_OW 256
13703: PUSH
13704: LD_INT 800
13706: LESS
13707: IFFALSE 13719
13709: PUSH
13710: LD_VAR 0 15
13714: PUSH
13715: LD_INT 1
13717: NONEQUAL
13718: AND
13719: IFFALSE 13769
// begin SetTag ( i , tHeal ) ;
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
13733: LD_VAR 0 9
13737: PPUSH
13738: LD_VAR 0 6
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: PPUSH
13747: LD_VAR 0 6
13751: PUSH
13752: LD_INT 2
13754: ARRAY
13755: PPUSH
13756: CALL_OW 111
// AddComHold ( i ) ;
13760: LD_VAR 0 9
13764: PPUSH
13765: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13769: LD_VAR 0 15
13773: PUSH
13774: LD_INT 1
13776: EQUAL
13777: IFFALSE 13794
13779: PUSH
13780: LD_VAR 0 9
13784: PPUSH
13785: CALL_OW 256
13789: PUSH
13790: LD_INT 1000
13792: EQUAL
13793: AND
13794: IFFALSE 13808
// SetTag ( i , 0 ) ;
13796: LD_VAR 0 9
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 109
// if not tag then
13808: LD_VAR 0 15
13812: NOT
13813: IFFALSE 13984
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13815: LD_ADDR_VAR 0 11
13819: PUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 57
13827: PUSH
13828: EMPTY
13829: LIST
13830: PPUSH
13831: CALL_OW 70
13835: ST_TO_ADDR
// if undone then
13836: LD_VAR 0 11
13840: IFFALSE 13862
// begin ComComplete ( i , undone [ 1 ] ) ;
13842: LD_VAR 0 9
13846: PPUSH
13847: LD_VAR 0 11
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: CALL 38466 0 2
// continue ;
13860: GO 13631
// end ; if cr or tmp or buildingsToBuild then
13862: LD_VAR 0 17
13866: IFTRUE 13874
13868: PUSH
13869: LD_VAR 0 10
13873: OR
13874: IFTRUE 13882
13876: PUSH
13877: LD_VAR 0 33
13881: OR
13882: IFFALSE 13958
// begin if IsInUnit ( i ) then
13884: LD_VAR 0 9
13888: PPUSH
13889: CALL_OW 310
13893: IFFALSE 13904
// ComExitBuilding ( i ) ;
13895: LD_VAR 0 9
13899: PPUSH
13900: CALL_OW 122
// if tmp then
13904: LD_VAR 0 10
13908: IFFALSE 13924
// SetTag ( i , tRepair ) else
13910: LD_VAR 0 9
13914: PPUSH
13915: LD_INT 3
13917: PPUSH
13918: CALL_OW 109
13922: GO 13956
// if cr then
13924: LD_VAR 0 17
13928: IFFALSE 13944
// SetTag ( i , tCrates ) else
13930: LD_VAR 0 9
13934: PPUSH
13935: LD_INT 2
13937: PPUSH
13938: CALL_OW 109
13942: GO 13956
// SetTag ( i , tBuild ) ;
13944: LD_VAR 0 9
13948: PPUSH
13949: LD_INT 5
13951: PPUSH
13952: CALL_OW 109
// end else
13956: GO 13984
// if not IsInUnit ( i ) then
13958: LD_VAR 0 9
13962: PPUSH
13963: CALL_OW 310
13967: NOT
13968: IFFALSE 13984
// ComEnterUnit ( i , depot ) ;
13970: LD_VAR 0 9
13974: PPUSH
13975: LD_VAR 0 32
13979: PPUSH
13980: CALL_OW 120
// end ; if tag = tRepair then
13984: LD_VAR 0 15
13988: PUSH
13989: LD_INT 3
13991: EQUAL
13992: IFFALSE 14098
// begin if IsInUnit ( i ) then
13994: LD_VAR 0 9
13998: PPUSH
13999: CALL_OW 310
14003: IFFALSE 14016
// begin ComExitBuilding ( i ) ;
14005: LD_VAR 0 9
14009: PPUSH
14010: CALL_OW 122
// continue ;
14014: GO 13631
// end ; if not tmp then
14016: LD_VAR 0 10
14020: NOT
14021: IFFALSE 14037
// begin SetTag ( i , 0 ) ;
14023: LD_VAR 0 9
14027: PPUSH
14028: LD_INT 0
14030: PPUSH
14031: CALL_OW 109
// continue ;
14035: GO 13631
// end ; if not HasTask ( i ) then
14037: LD_VAR 0 9
14041: PPUSH
14042: CALL_OW 314
14046: NOT
14047: IFFALSE 14067
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
14049: LD_VAR 0 9
14053: PPUSH
14054: LD_VAR 0 10
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: CALL_OW 130
// if not IsInArea ( i , area ) then
14067: LD_VAR 0 9
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: CALL_OW 308
14081: NOT
14082: IFFALSE 14098
// ComMoveToArea ( i , area ) ;
14084: LD_VAR 0 9
14088: PPUSH
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 113
// end ; if tag = tBuild then
14098: LD_VAR 0 15
14102: PUSH
14103: LD_INT 5
14105: EQUAL
14106: IFFALSE 14316
// begin if IsInUnit ( i ) then
14108: LD_VAR 0 9
14112: PPUSH
14113: CALL_OW 310
14117: IFFALSE 14130
// begin ComExitBuilding ( i ) ;
14119: LD_VAR 0 9
14123: PPUSH
14124: CALL_OW 122
// continue ;
14128: GO 13631
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
14130: LD_VAR 0 33
14134: NOT
14135: IFTRUE 14143
14137: PUSH
14138: LD_VAR 0 22
14142: OR
14143: IFTRUE 14151
14145: PUSH
14146: LD_VAR 0 23
14150: OR
14151: IFFALSE 14169
// begin SetTag ( i , 0 ) ;
14153: LD_VAR 0 9
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 109
// continue ;
14165: GO 13631
// end else
14167: GO 14208
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
14169: LD_VAR 0 32
14173: PPUSH
14174: LD_VAR 0 33
14178: PUSH
14179: LD_INT 1
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: CALL 72357 0 2
14191: NOT
14192: IFFALSE 14208
// begin SetTag ( i , 0 ) ;
14194: LD_VAR 0 9
14198: PPUSH
14199: LD_INT 0
14201: PPUSH
14202: CALL_OW 109
// continue ;
14206: GO 13631
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
14208: LD_ADDR_VAR 0 11
14212: PUSH
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_INT 57
14220: PUSH
14221: EMPTY
14222: LIST
14223: PPUSH
14224: CALL_OW 70
14228: ST_TO_ADDR
// if undone then
14229: LD_VAR 0 11
14233: IFFALSE 14255
// begin ComComplete ( i , undone [ 1 ] ) ;
14235: LD_VAR 0 9
14239: PPUSH
14240: LD_VAR 0 11
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: PPUSH
14249: CALL 38466 0 2
// continue ;
14253: GO 13631
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
14255: LD_VAR 0 9
14259: PPUSH
14260: LD_VAR 0 33
14264: PUSH
14265: LD_INT 1
14267: ARRAY
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: LD_VAR 0 33
14277: PUSH
14278: LD_INT 1
14280: ARRAY
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 33
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: PUSH
14295: LD_INT 3
14297: ARRAY
14298: PPUSH
14299: LD_VAR 0 33
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PUSH
14308: LD_INT 4
14310: ARRAY
14311: PPUSH
14312: CALL_OW 145
// end ; if tag = tCrates then
14316: LD_VAR 0 15
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: IFFALSE 14463
// begin if IsInUnit ( i ) then
14326: LD_VAR 0 9
14330: PPUSH
14331: CALL_OW 310
14335: IFFALSE 14348
// begin ComExitBuilding ( i ) ;
14337: LD_VAR 0 9
14341: PPUSH
14342: CALL_OW 122
// continue ;
14346: GO 13631
// end ; if not cr then
14348: LD_VAR 0 17
14352: NOT
14353: IFFALSE 14369
// begin SetTag ( i , 0 ) ;
14355: LD_VAR 0 9
14359: PPUSH
14360: LD_INT 0
14362: PPUSH
14363: CALL_OW 109
// continue ;
14367: GO 13631
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
14369: LD_VAR 0 9
14373: PPUSH
14374: CALL_OW 314
14378: NOT
14379: IFFALSE 14434
14381: PUSH
14382: LD_INT 81
14384: PUSH
14385: LD_VAR 0 1
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 92
14396: PUSH
14397: LD_VAR 0 17
14401: PUSH
14402: LD_INT 1
14404: ARRAY
14405: PUSH
14406: LD_VAR 0 17
14410: PUSH
14411: LD_INT 2
14413: ARRAY
14414: PUSH
14415: LD_INT 12
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 69
14432: NOT
14433: AND
14434: IFFALSE 14463
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
14436: LD_VAR 0 9
14440: PPUSH
14441: LD_VAR 0 17
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 17
14454: PUSH
14455: LD_INT 2
14457: ARRAY
14458: PPUSH
14459: CALL_OW 117
// end ; end ;
14463: GO 13631
14465: POP
14466: POP
// end ; if vehicles then
14467: LD_VAR 0 26
14471: IFFALSE 15283
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
14473: LD_ADDR_VAR 0 26
14477: PUSH
14478: LD_VAR 0 26
14482: PPUSH
14483: LD_INT 3
14485: PUSH
14486: LD_INT 2
14488: PUSH
14489: LD_INT 34
14491: PUSH
14492: LD_INT 88
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 34
14501: PUSH
14502: LD_INT 32
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 50
14520: PUSH
14521: EMPTY
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 72
14532: ST_TO_ADDR
// if vehicles then
14533: LD_VAR 0 26
14537: IFFALSE 15283
// begin for i in vehicles do
14539: LD_ADDR_VAR 0 9
14543: PUSH
14544: LD_VAR 0 26
14548: PUSH
14549: FOR_IN
14550: IFFALSE 15281
// begin tag := GetTag ( i ) ;
14552: LD_ADDR_VAR 0 15
14556: PUSH
14557: LD_VAR 0 9
14561: PPUSH
14562: CALL_OW 110
14566: ST_TO_ADDR
// if not tag then
14567: LD_VAR 0 15
14571: NOT
14572: IFFALSE 14718
// begin if GetControl ( i ) = control_manual then
14574: LD_VAR 0 9
14578: PPUSH
14579: CALL_OW 263
14583: PUSH
14584: LD_INT 1
14586: EQUAL
14587: IFFALSE 14704
// begin drivers := arDrivers ;
14589: LD_ADDR_VAR 0 24
14593: PUSH
14594: LD_EXP 50
14598: ST_TO_ADDR
// if not drivers then
14599: LD_VAR 0 24
14603: NOT
14604: IFFALSE 14684
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
14606: LD_ADDR_VAR 0 24
14610: PUSH
14611: LD_VAR 0 14
14615: PPUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 120
14621: PUSH
14622: LD_INT 7
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PPUSH
14633: CALL_OW 72
14637: ST_TO_ADDR
// if drivers then
14638: LD_VAR 0 24
14642: IFFALSE 14684
// begin SetTag ( drivers [ 1 ] , tMech ) ;
14644: LD_VAR 0 24
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: PPUSH
14653: LD_INT 7
14655: PPUSH
14656: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
14660: LD_ADDR_EXP 50
14664: PUSH
14665: LD_EXP 50
14669: PPUSH
14670: LD_VAR 0 24
14674: PUSH
14675: LD_INT 1
14677: ARRAY
14678: PPUSH
14679: CALL 68262 0 2
14683: ST_TO_ADDR
// end ; end ; if drivers then
14684: LD_VAR 0 24
14688: IFFALSE 14702
// SetTag ( i , tBusy ) ;
14690: LD_VAR 0 9
14694: PPUSH
14695: LD_INT 8
14697: PPUSH
14698: CALL_OW 109
// continue ;
14702: GO 14549
// end ; SetTag ( i , tBusy ) ;
14704: LD_VAR 0 9
14708: PPUSH
14709: LD_INT 8
14711: PPUSH
14712: CALL_OW 109
// end else
14716: GO 15279
// if tag = tBusy then
14718: LD_VAR 0 15
14722: PUSH
14723: LD_INT 8
14725: EQUAL
14726: IFFALSE 14946
// begin if GetLives ( i ) = 1000 then
14728: LD_VAR 0 9
14732: PPUSH
14733: CALL_OW 256
14737: PUSH
14738: LD_INT 1000
14740: EQUAL
14741: IFFALSE 14944
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
14743: LD_VAR 0 9
14747: PPUSH
14748: CALL_OW 263
14752: PUSH
14753: LD_INT 1
14755: EQUAL
14756: IFFALSE 14770
14758: PUSH
14759: LD_VAR 0 9
14763: PPUSH
14764: CALL_OW 311
14768: NOT
14769: AND
14770: IFFALSE 14932
// begin drivers := arDrivers ;
14772: LD_ADDR_VAR 0 24
14776: PUSH
14777: LD_EXP 50
14781: ST_TO_ADDR
// if not drivers then
14782: LD_VAR 0 24
14786: NOT
14787: IFFALSE 14803
// begin SetTag ( i , 0 ) ;
14789: LD_VAR 0 9
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 109
// continue ;
14801: GO 14549
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
14803: LD_VAR 0 24
14807: PUSH
14808: LD_INT 1
14810: ARRAY
14811: PPUSH
14812: CALL_OW 310
14816: IFFALSE 14834
14818: PUSH
14819: LD_VAR 0 24
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: PPUSH
14828: CALL 65842 0 1
14832: NOT
14833: AND
14834: IFFALSE 14849
// ComExitBuilding ( drivers [ 1 ] ) ;
14836: LD_VAR 0 24
14840: PUSH
14841: LD_INT 1
14843: ARRAY
14844: PPUSH
14845: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
14849: LD_VAR 0 26
14853: PPUSH
14854: LD_INT 120
14856: PUSH
14857: LD_INT 3
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 72
14868: IFFALSE 14886
14870: PUSH
14871: LD_VAR 0 24
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PPUSH
14880: CALL_OW 314
14884: NOT
14885: AND
14886: IFTRUE 14910
14888: PUSH
14889: LD_VAR 0 26
14893: PPUSH
14894: LD_INT 120
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PPUSH
14904: CALL_OW 72
14908: NOT
14909: OR
14910: IFFALSE 14930
// ComEnterUnit ( drivers [ 1 ] , i ) ;
14912: LD_VAR 0 24
14916: PUSH
14917: LD_INT 1
14919: ARRAY
14920: PPUSH
14921: LD_VAR 0 9
14925: PPUSH
14926: CALL_OW 120
// continue ;
14930: GO 14549
// end ; SetTag ( i , tAttack ) ;
14932: LD_VAR 0 9
14936: PPUSH
14937: LD_INT 13
14939: PPUSH
14940: CALL_OW 109
// end ; end else
14944: GO 15279
// if tag = tAttack then
14946: LD_VAR 0 15
14950: PUSH
14951: LD_INT 13
14953: EQUAL
14954: IFFALSE 15136
// begin enemy := enemyInBase ;
14956: LD_ADDR_VAR 0 21
14960: PUSH
14961: LD_VAR 0 22
14965: ST_TO_ADDR
// if not enemy then
14966: LD_VAR 0 21
14970: NOT
14971: IFFALSE 14983
// enemy := enemyOuterBase ;
14973: LD_ADDR_VAR 0 21
14977: PUSH
14978: LD_VAR 0 23
14982: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14983: LD_VAR 0 21
14987: NOT
14988: IFFALSE 15023
14990: PUSH
14991: LD_VAR 0 9
14995: PPUSH
14996: LD_VAR 0 7
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: LD_VAR 0 7
15009: PUSH
15010: LD_INT 2
15012: ARRAY
15013: PPUSH
15014: CALL_OW 297
15018: PUSH
15019: LD_INT 10
15021: GREATER
15022: AND
15023: IFFALSE 15054
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15025: LD_VAR 0 9
15029: PPUSH
15030: LD_VAR 0 7
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PPUSH
15039: LD_VAR 0 7
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: PPUSH
15048: CALL_OW 111
// continue ;
15052: GO 14549
// end ; if GetLives ( i ) < 650 then
15054: LD_VAR 0 9
15058: PPUSH
15059: CALL_OW 256
15063: PUSH
15064: LD_INT 650
15066: LESS
15067: IFFALSE 15110
// begin SetTag ( i , tVehRepair ) ;
15069: LD_VAR 0 9
15073: PPUSH
15074: LD_INT 9
15076: PPUSH
15077: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15081: LD_VAR 0 9
15085: PPUSH
15086: LD_VAR 0 7
15090: PUSH
15091: LD_INT 1
15093: ARRAY
15094: PPUSH
15095: LD_VAR 0 7
15099: PUSH
15100: LD_INT 2
15102: ARRAY
15103: PPUSH
15104: CALL_OW 111
// continue ;
15108: GO 14549
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
15110: LD_VAR 0 9
15114: PPUSH
15115: LD_VAR 0 21
15119: PPUSH
15120: LD_VAR 0 9
15124: PPUSH
15125: CALL_OW 74
15129: PPUSH
15130: CALL_OW 115
// end else
15134: GO 15279
// if tag = tVehRepair then
15136: LD_VAR 0 15
15140: PUSH
15141: LD_INT 9
15143: EQUAL
15144: IFFALSE 15279
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
15146: LD_VAR 0 9
15150: PPUSH
15151: LD_VAR 0 7
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 7
15164: PUSH
15165: LD_INT 2
15167: ARRAY
15168: PPUSH
15169: CALL_OW 297
15173: PUSH
15174: LD_INT 10
15176: GREATER
15177: IFFALSE 15208
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15179: LD_VAR 0 9
15183: PPUSH
15184: LD_VAR 0 7
15188: PUSH
15189: LD_INT 1
15191: ARRAY
15192: PPUSH
15193: LD_VAR 0 7
15197: PUSH
15198: LD_INT 2
15200: ARRAY
15201: PPUSH
15202: CALL_OW 111
// continue ;
15206: GO 14549
// end ; if GetLives ( i ) = 1000 then
15208: LD_VAR 0 9
15212: PPUSH
15213: CALL_OW 256
15217: PUSH
15218: LD_INT 1000
15220: EQUAL
15221: IFFALSE 15237
// begin SetTag ( i , tBusy ) ;
15223: LD_VAR 0 9
15227: PPUSH
15228: LD_INT 8
15230: PPUSH
15231: CALL_OW 109
// continue ;
15235: GO 14549
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
15237: LD_VAR 0 9
15241: PPUSH
15242: CALL_OW 263
15246: PUSH
15247: LD_INT 1
15249: EQUAL
15250: IFFALSE 15263
15252: PUSH
15253: LD_VAR 0 9
15257: PPUSH
15258: CALL_OW 311
15262: AND
15263: IFFALSE 15279
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
15265: LD_VAR 0 9
15269: PPUSH
15270: CALL_OW 311
15274: PPUSH
15275: CALL 69976 0 1
// end ; end ;
15279: GO 14549
15281: POP
15282: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
15283: LD_ADDR_VAR 0 19
15287: PUSH
15288: LD_VAR 0 5
15292: PPUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 25
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 8
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 5
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 9
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 50
15345: PUSH
15346: EMPTY
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 72
15357: ST_TO_ADDR
// if sol then
15358: LD_VAR 0 19
15362: IFFALSE 15878
// begin if enemyInBase then
15364: LD_VAR 0 22
15368: IFFALSE 15547
// begin for i in sol do
15370: LD_ADDR_VAR 0 9
15374: PUSH
15375: LD_VAR 0 19
15379: PUSH
15380: FOR_IN
15381: IFFALSE 15543
// begin tw := IsInUnit ( i ) ;
15383: LD_ADDR_VAR 0 16
15387: PUSH
15388: LD_VAR 0 9
15392: PPUSH
15393: CALL_OW 310
15397: ST_TO_ADDR
// if tw then
15398: LD_VAR 0 16
15402: IFFALSE 15485
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15404: LD_VAR 0 16
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_VAR 0 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 101
15423: PUSH
15424: LD_VAR 0 34
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 30
15438: PUSH
15439: LD_INT 32
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: IN
15471: NOT
15472: IFFALSE 15483
// ComExitBuilding ( i ) ;
15474: LD_VAR 0 9
15478: PPUSH
15479: CALL_OW 122
// end else
15483: GO 15541
// if IsInArea ( i , area ) then
15485: LD_VAR 0 9
15489: PPUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: CALL_OW 308
15499: IFFALSE 15527
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
15501: LD_VAR 0 9
15505: PPUSH
15506: LD_VAR 0 22
15510: PPUSH
15511: LD_VAR 0 9
15515: PPUSH
15516: CALL_OW 74
15520: PPUSH
15521: CALL_OW 115
15525: GO 15541
// ComMoveToArea ( i , area ) ;
15527: LD_VAR 0 9
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: CALL_OW 113
// end ;
15541: GO 15380
15543: POP
15544: POP
// end else
15545: GO 15878
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
15547: LD_ADDR_VAR 0 28
15551: PUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 3
15559: PUSH
15560: LD_INT 62
15562: PUSH
15563: EMPTY
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: LD_INT 32
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 30
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 30
15595: PUSH
15596: LD_INT 5
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 30
15605: PUSH
15606: LD_INT 31
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 70
15628: ST_TO_ADDR
// if empty then
15629: LD_VAR 0 28
15633: IFFALSE 15650
// empty := ReverseArray ( empty ) ;
15635: LD_ADDR_VAR 0 28
15639: PUSH
15640: LD_VAR 0 28
15644: PPUSH
15645: CALL 63352 0 1
15649: ST_TO_ADDR
// for i in sol do
15650: LD_ADDR_VAR 0 9
15654: PUSH
15655: LD_VAR 0 19
15659: PUSH
15660: FOR_IN
15661: IFFALSE 15876
// begin tag := GetTag ( i ) ;
15663: LD_ADDR_VAR 0 15
15667: PUSH
15668: LD_VAR 0 9
15672: PPUSH
15673: CALL_OW 110
15677: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
15678: LD_VAR 0 9
15682: PPUSH
15683: CALL_OW 256
15687: PUSH
15688: LD_INT 1000
15690: LESS
15691: IFFALSE 15703
15693: PUSH
15694: LD_VAR 0 15
15698: PUSH
15699: LD_INT 1
15701: NONEQUAL
15702: AND
15703: IFFALSE 15755
// begin SetTag ( i , tHeal ) ;
15705: LD_VAR 0 9
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15717: LD_VAR 0 9
15721: PPUSH
15722: LD_VAR 0 6
15726: PUSH
15727: LD_INT 1
15729: ARRAY
15730: PPUSH
15731: LD_VAR 0 6
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: PPUSH
15740: CALL_OW 111
// AddComHold ( i ) ;
15744: LD_VAR 0 9
15748: PPUSH
15749: CALL_OW 200
// continue ;
15753: GO 15660
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15755: LD_VAR 0 9
15759: PPUSH
15760: CALL_OW 256
15764: PUSH
15765: LD_INT 1000
15767: EQUAL
15768: IFFALSE 15780
15770: PUSH
15771: LD_VAR 0 15
15775: PUSH
15776: LD_INT 1
15778: EQUAL
15779: AND
15780: IFFALSE 15796
// begin SetTag ( i , 0 ) ;
15782: LD_VAR 0 9
15786: PPUSH
15787: LD_INT 0
15789: PPUSH
15790: CALL_OW 109
// continue ;
15794: GO 15660
// end ; if HasTask ( i ) then
15796: LD_VAR 0 9
15800: PPUSH
15801: CALL_OW 314
15805: IFFALSE 15809
// continue ;
15807: GO 15660
// if not IsInUnit ( i ) and not tag and empty then
15809: LD_VAR 0 9
15813: PPUSH
15814: CALL_OW 310
15818: NOT
15819: IFFALSE 15828
15821: PUSH
15822: LD_VAR 0 15
15826: NOT
15827: AND
15828: IFFALSE 15836
15830: PUSH
15831: LD_VAR 0 28
15835: AND
15836: IFFALSE 15874
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15838: LD_VAR 0 9
15842: PPUSH
15843: LD_VAR 0 28
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
15856: LD_ADDR_VAR 0 28
15860: PUSH
15861: LD_VAR 0 28
15865: PPUSH
15866: LD_INT 1
15868: PPUSH
15869: CALL_OW 3
15873: ST_TO_ADDR
// end ; end ;
15874: GO 15660
15876: POP
15877: POP
// end ; end ; end ;
15878: LD_VAR 0 8
15882: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
15883: LD_EXP 54
15887: PPUSH
15888: LD_INT 50
15890: PUSH
15891: EMPTY
15892: LIST
15893: PPUSH
15894: CALL_OW 72
15898: IFFALSE 15951
15900: GO 15902
15902: DISABLE
// begin BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
15903: LD_EXP 3
15907: PUSH
15908: LD_INT 2
15910: ARRAY
15911: PPUSH
15912: LD_INT 2
15914: PPUSH
15915: LD_INT 5
15917: PPUSH
15918: LD_INT 6
15920: PPUSH
15921: LD_EXP 54
15925: PPUSH
15926: LD_INT 210
15928: PUSH
15929: LD_INT 43
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PPUSH
15936: LD_INT 194
15938: PUSH
15939: LD_INT 28
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL 12314 0 7
// enable ;
15950: ENABLE
// end ;
15951: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
15952: LD_EXP 53
15956: IFFALSE 16176
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
// begin enable ;
15966: ENABLE
// p := 1 ;
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: DOUBLE
15981: LD_INT 1
15983: DEC
15984: ST_TO_ADDR
15985: LD_EXP 53
15989: PPUSH
15990: CALL 32296 0 1
15994: PUSH
15995: LD_INT 2
15997: DIV
15998: PUSH
15999: FOR_TO
16000: IFFALSE 16174
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
16002: LD_ADDR_VAR 0 3
16006: PUSH
16007: LD_EXP 53
16011: PUSH
16012: LD_VAR 0 2
16016: ARRAY
16017: PPUSH
16018: LD_EXP 53
16022: PUSH
16023: LD_VAR 0 2
16027: PUSH
16028: LD_INT 1
16030: PLUS
16031: ARRAY
16032: PPUSH
16033: CALL_OW 428
16037: ST_TO_ADDR
// if tmp then
16038: LD_VAR 0 3
16042: IFFALSE 16158
// if GetSide ( tmp ) <> botSides [ 2 ] then
16044: LD_VAR 0 3
16048: PPUSH
16049: CALL_OW 255
16053: PUSH
16054: LD_EXP 3
16058: PUSH
16059: LD_INT 2
16061: ARRAY
16062: NONEQUAL
16063: IFFALSE 16158
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
16065: LD_EXP 53
16069: PUSH
16070: LD_VAR 0 2
16074: ARRAY
16075: PPUSH
16076: LD_EXP 53
16080: PUSH
16081: LD_VAR 0 2
16085: PUSH
16086: LD_INT 1
16088: PLUS
16089: ARRAY
16090: PPUSH
16091: LD_EXP 3
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: PPUSH
16100: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
16104: LD_ADDR_EXP 53
16108: PUSH
16109: LD_EXP 53
16113: PPUSH
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL_OW 3
16123: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
16124: LD_ADDR_EXP 53
16128: PUSH
16129: LD_EXP 53
16133: PPUSH
16134: LD_VAR 0 2
16138: PPUSH
16139: CALL_OW 3
16143: ST_TO_ADDR
// p := p - 2 ;
16144: LD_ADDR_VAR 0 2
16148: PUSH
16149: LD_VAR 0 2
16153: PUSH
16154: LD_INT 2
16156: MINUS
16157: ST_TO_ADDR
// end ; p := p + 2 ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: LD_VAR 0 2
16167: PUSH
16168: LD_INT 2
16170: PLUS
16171: ST_TO_ADDR
// end ;
16172: GO 15999
16174: POP
16175: POP
// end ;
16176: PPOPN 3
16178: END
// every 3 3$00 trigger IsOk ( arDep ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do var i ;
16179: LD_INT 32
16181: PPUSH
16182: CALL_OW 302
16186: IFFALSE 16218
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 30
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: AND
16218: IFFALSE 16364
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
// begin enable ;
16226: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_INT 22
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 30
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16362
// if BuildingStatus ( i ) = bs_idle and UnitsInside ( i ) > 0 then
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 461
16273: PUSH
16274: LD_INT 2
16276: EQUAL
16277: IFFALSE 16294
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 313
16289: PUSH
16290: LD_INT 0
16292: GREATER
16293: AND
16294: IFFALSE 16360
// begin arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
16296: LD_ADDR_EXP 46
16300: PUSH
16301: LD_INT 14
16303: PUSH
16304: LD_INT 1
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 14
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: LD_INT 26
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 14
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: LD_INT 1
16345: PUSH
16346: LD_INT 27
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// end ;
16360: GO 16261
16362: POP
16363: POP
// end ; end_of_file
16364: PPOPN 1
16366: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 255
16376: PUSH
16377: LD_EXP 3
16381: IN
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16444
// if not un in [ Sikorski ] then
16387: LD_VAR 0 1
16391: PUSH
16392: LD_EXP 34
16396: PUSH
16397: EMPTY
16398: LIST
16399: IN
16400: NOT
16401: IFFALSE 16422
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_INT 0
16415: PPUSH
16416: CALL 6418 0 3
16420: GO 16444
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
16422: LD_VAR 0 1
16426: PPUSH
16427: LD_VAR 0 2
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: CALL 5735 0 1
16439: PPUSH
16440: CALL 6418 0 3
// end ;
16444: PPOPN 3
16446: END
// on UnitDestroyed ( un ) do var i , skill , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
16447: LD_INT 0
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL 23698 0 1
// side := GetSide ( un ) ;
16469: LD_ADDR_VAR 0 4
16473: PUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 255
16483: ST_TO_ADDR
// skill := tick div 10 10$00 ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_OWVAR 1
16493: PUSH
16494: LD_INT 21000
16496: DIV
16497: ST_TO_ADDR
// if skill < 0 then
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 0
16505: LESS
16506: IFFALSE 16518
// skill := 0 else
16508: LD_ADDR_VAR 0 3
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
16516: GO 16536
// if skill > 7 then
16518: LD_VAR 0 3
16522: PUSH
16523: LD_INT 7
16525: GREATER
16526: IFFALSE 16536
// skill := 7 ;
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: LD_INT 7
16535: ST_TO_ADDR
// if multi_sides [ side ] then
16536: LD_EXP 7
16540: PUSH
16541: LD_VAR 0 4
16545: ARRAY
16546: IFFALSE 16572
// if GetType ( un ) = unit_human then
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 247
16557: PUSH
16558: LD_INT 1
16560: EQUAL
16561: IFFALSE 16572
// MultiplayerEvent_HumanLost ( side ) ;
16563: LD_VAR 0 4
16567: PPUSH
16568: CALL 6298 0 1
// if un = Sikorski then
16572: LD_VAR 0 1
16576: PUSH
16577: LD_EXP 34
16581: EQUAL
16582: IFFALSE 16593
// AmericanAttack ( Difficulty ) ;
16584: LD_OWVAR 67
16588: PPUSH
16589: CALL 21745 0 1
// if side in botSides then
16593: LD_VAR 0 4
16597: PUSH
16598: LD_EXP 3
16602: IN
16603: IFFALSE 17780
// begin if side = botSides [ 1 ] then
16605: LD_VAR 0 4
16609: PUSH
16610: LD_EXP 3
16614: PUSH
16615: LD_INT 1
16617: ARRAY
16618: EQUAL
16619: IFFALSE 17184
// begin if un in amForce then
16621: LD_VAR 0 1
16625: PUSH
16626: LD_EXP 42
16630: IN
16631: IFFALSE 16649
// amForce := amForce diff un ;
16633: LD_ADDR_EXP 42
16637: PUSH
16638: LD_EXP 42
16642: PUSH
16643: LD_VAR 0 1
16647: DIFF
16648: ST_TO_ADDR
// if un in amAttackersVeh then
16649: LD_VAR 0 1
16653: PUSH
16654: LD_EXP 59
16658: IN
16659: IFFALSE 16677
// amAttackersVeh := amAttackersVeh diff un ;
16661: LD_ADDR_EXP 59
16665: PUSH
16666: LD_EXP 59
16670: PUSH
16671: LD_VAR 0 1
16675: DIFF
16676: ST_TO_ADDR
// if un in amAttackersInf then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_EXP 58
16686: IN
16687: IFFALSE 16705
// amAttackersInf := amAttackersInf diff un ;
16689: LD_ADDR_EXP 58
16693: PUSH
16694: LD_EXP 58
16698: PUSH
16699: LD_VAR 0 1
16703: DIFF
16704: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 257
16714: PUSH
16715: LD_INT 3
16717: EQUAL
16718: IFFALSE 16726
16720: PUSH
16721: LD_EXP 44
16725: AND
16726: IFFALSE 16873
// begin if not IsOk ( amDep ) then
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 302
16735: NOT
16736: IFFALSE 16740
// exit ;
16738: GO 17885
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
16740: LD_ADDR_EXP 44
16744: PUSH
16745: LD_EXP 44
16749: PPUSH
16750: CALL 69657 0 1
16754: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
16755: LD_ADDR_OWVAR 20
16759: PUSH
16760: LD_EXP 3
16764: PUSH
16765: LD_INT 1
16767: ARRAY
16768: ST_TO_ADDR
// uc_nation := nation_american ;
16769: LD_ADDR_OWVAR 21
16773: PUSH
16774: LD_INT 1
16776: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 1
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: PUSH
16794: LD_OWVAR 67
16798: ARRAY
16799: PUSH
16800: LD_VAR 0 3
16804: PLUS
16805: PPUSH
16806: CALL_OW 383
// un := CreateHuman ;
16810: LD_ADDR_VAR 0 1
16814: PUSH
16815: CALL_OW 44
16819: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_INT 52
16827: PPUSH
16828: LD_INT 2
16830: PPUSH
16831: LD_INT 0
16833: PPUSH
16834: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
16838: LD_VAR 0 1
16842: PPUSH
16843: LD_INT 23
16845: PPUSH
16846: LD_INT 19
16848: PPUSH
16849: CALL_OW 111
// amForce := Join ( amForce , un ) ;
16853: LD_ADDR_EXP 42
16857: PUSH
16858: LD_EXP 42
16862: PPUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL 68262 0 2
16872: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 247
16882: PUSH
16883: LD_INT 3
16885: EQUAL
16886: IFFALSE 16902
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: LD_INT 3
16896: PPUSH
16897: CALL_OW 308
16901: AND
16902: IFFALSE 17045
// begin btype := GetBType ( un ) ;
16904: LD_ADDR_VAR 0 12
16908: PUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 266
16918: ST_TO_ADDR
// if btype = b_barracks then
16919: LD_VAR 0 12
16923: PUSH
16924: LD_INT 5
16926: EQUAL
16927: IFFALSE 16937
// btype := b_armoury ;
16929: LD_ADDR_VAR 0 12
16933: PUSH
16934: LD_INT 4
16936: ST_TO_ADDR
// if btype = b_factory then
16937: LD_VAR 0 12
16941: PUSH
16942: LD_INT 3
16944: EQUAL
16945: IFFALSE 16955
// btype := b_workshop ;
16947: LD_ADDR_VAR 0 12
16951: PUSH
16952: LD_INT 2
16954: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16955: LD_VAR 0 12
16959: PUSH
16960: LD_INT 8
16962: PUSH
16963: LD_INT 7
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: IN
16970: IFFALSE 16980
// btype := b_lab ;
16972: LD_ADDR_VAR 0 12
16976: PUSH
16977: LD_INT 6
16979: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16980: LD_ADDR_EXP 37
16984: PUSH
16985: LD_EXP 37
16989: PPUSH
16990: LD_EXP 37
16994: PUSH
16995: LD_INT 1
16997: PLUS
16998: PPUSH
16999: LD_VAR 0 12
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 250
17013: PUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 251
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 254
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 1
17044: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 247
17054: PUSH
17055: LD_INT 2
17057: EQUAL
17058: IFFALSE 17184
// begin chassis := GetChassis ( un ) ;
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 265
17074: ST_TO_ADDR
// engine := GetEngine ( un ) ;
17075: LD_ADDR_VAR 0 7
17079: PUSH
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 262
17089: ST_TO_ADDR
// control := GetControl ( un ) ;
17090: LD_ADDR_VAR 0 8
17094: PUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 263
17104: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
17105: LD_ADDR_VAR 0 9
17109: PUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 264
17119: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
17120: LD_ADDR_VAR 0 10
17124: PUSH
17125: LD_VAR 0 11
17129: PPUSH
17130: LD_VAR 0 6
17134: PPUSH
17135: LD_VAR 0 7
17139: PPUSH
17140: LD_VAR 0 8
17144: PPUSH
17145: LD_VAR 0 9
17149: PPUSH
17150: CALL 32654 0 5
17154: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
17155: LD_ADDR_EXP 36
17159: PUSH
17160: LD_EXP 36
17164: PPUSH
17165: LD_EXP 36
17169: PUSH
17170: LD_INT 1
17172: PLUS
17173: PPUSH
17174: LD_VAR 0 10
17178: PPUSH
17179: CALL_OW 1
17183: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
17184: LD_VAR 0 4
17188: PUSH
17189: LD_EXP 3
17193: PUSH
17194: LD_INT 2
17196: ARRAY
17197: EQUAL
17198: IFFALSE 17780
// begin if un in arForce then
17200: LD_VAR 0 1
17204: PUSH
17205: LD_EXP 54
17209: IN
17210: IFFALSE 17228
// arForce := arForce diff un ;
17212: LD_ADDR_EXP 54
17216: PUSH
17217: LD_EXP 54
17221: PUSH
17222: LD_VAR 0 1
17226: DIFF
17227: ST_TO_ADDR
// if un in arAttackersVeh then
17228: LD_VAR 0 1
17232: PUSH
17233: LD_EXP 57
17237: IN
17238: IFFALSE 17256
// arAttackersVeh := arAttackersVeh diff un ;
17240: LD_ADDR_EXP 57
17244: PUSH
17245: LD_EXP 57
17249: PUSH
17250: LD_VAR 0 1
17254: DIFF
17255: ST_TO_ADDR
// if un in arAttackersInf then
17256: LD_VAR 0 1
17260: PUSH
17261: LD_EXP 56
17265: IN
17266: IFFALSE 17284
// arAttackersInf := arAttackersInf diff un ;
17268: LD_ADDR_EXP 56
17272: PUSH
17273: LD_EXP 56
17277: PUSH
17278: LD_VAR 0 1
17282: DIFF
17283: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
17284: LD_VAR 0 1
17288: PPUSH
17289: CALL_OW 257
17293: PUSH
17294: LD_INT 3
17296: EQUAL
17297: IFFALSE 17314
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 110
17309: PUSH
17310: LD_INT 999
17312: LESS
17313: AND
17314: IFFALSE 17322
17316: PUSH
17317: LD_EXP 51
17321: AND
17322: IFFALSE 17469
// begin if not IsOk ( arDep ) then
17324: LD_INT 32
17326: PPUSH
17327: CALL_OW 302
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17885
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
17336: LD_ADDR_EXP 51
17340: PUSH
17341: LD_EXP 51
17345: PPUSH
17346: CALL 69657 0 1
17350: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
17351: LD_ADDR_OWVAR 20
17355: PUSH
17356: LD_EXP 3
17360: PUSH
17361: LD_INT 2
17363: ARRAY
17364: ST_TO_ADDR
// uc_nation := nation_arabian ;
17365: LD_ADDR_OWVAR 21
17369: PUSH
17370: LD_INT 2
17372: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] + skill ) ;
17373: LD_INT 0
17375: PPUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: LD_INT 3
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: PUSH
17390: LD_OWVAR 67
17394: ARRAY
17395: PUSH
17396: LD_VAR 0 3
17400: PLUS
17401: PPUSH
17402: CALL_OW 383
// un := CreateHuman ;
17406: LD_ADDR_VAR 0 1
17410: PUSH
17411: CALL_OW 44
17415: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_INT 178
17423: PPUSH
17424: LD_INT 2
17426: PPUSH
17427: LD_INT 0
17429: PPUSH
17430: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_INT 204
17441: PPUSH
17442: LD_INT 35
17444: PPUSH
17445: CALL_OW 111
// arForce := Join ( arForce , un ) ;
17449: LD_ADDR_EXP 54
17453: PUSH
17454: LD_EXP 54
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL 68262 0 2
17468: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building and IsInArea ( un , amBaseArea ) then
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 247
17478: PUSH
17479: LD_INT 3
17481: EQUAL
17482: IFFALSE 17498
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 3
17492: PPUSH
17493: CALL_OW 308
17497: AND
17498: IFFALSE 17641
// begin btype := GetBType ( un ) ;
17500: LD_ADDR_VAR 0 12
17504: PUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 266
17514: ST_TO_ADDR
// if btype = b_barracks then
17515: LD_VAR 0 12
17519: PUSH
17520: LD_INT 5
17522: EQUAL
17523: IFFALSE 17533
// btype := b_armoury ;
17525: LD_ADDR_VAR 0 12
17529: PUSH
17530: LD_INT 4
17532: ST_TO_ADDR
// if btype = b_factory then
17533: LD_VAR 0 12
17537: PUSH
17538: LD_INT 3
17540: EQUAL
17541: IFFALSE 17551
// btype := b_workshop ;
17543: LD_ADDR_VAR 0 12
17547: PUSH
17548: LD_INT 2
17550: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
17551: LD_VAR 0 12
17555: PUSH
17556: LD_INT 8
17558: PUSH
17559: LD_INT 7
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17576
// btype := b_lab ;
17568: LD_ADDR_VAR 0 12
17572: PUSH
17573: LD_INT 6
17575: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
17576: LD_ADDR_EXP 47
17580: PUSH
17581: LD_EXP 47
17585: PPUSH
17586: LD_EXP 47
17590: PUSH
17591: LD_INT 1
17593: PLUS
17594: PPUSH
17595: LD_VAR 0 12
17599: PUSH
17600: LD_VAR 0 1
17604: PPUSH
17605: CALL_OW 250
17609: PUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 251
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 254
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PPUSH
17636: CALL_OW 1
17640: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
17641: LD_VAR 0 1
17645: PPUSH
17646: CALL_OW 247
17650: PUSH
17651: LD_INT 2
17653: EQUAL
17654: IFFALSE 17780
// begin chassis := GetChassis ( un ) ;
17656: LD_ADDR_VAR 0 6
17660: PUSH
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 265
17670: ST_TO_ADDR
// engine := GetEngine ( un ) ;
17671: LD_ADDR_VAR 0 7
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 262
17685: ST_TO_ADDR
// control := GetControl ( un ) ;
17686: LD_ADDR_VAR 0 8
17690: PUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 263
17700: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 264
17715: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
17716: LD_ADDR_VAR 0 10
17720: PUSH
17721: LD_VAR 0 11
17725: PPUSH
17726: LD_VAR 0 6
17730: PPUSH
17731: LD_VAR 0 7
17735: PPUSH
17736: LD_VAR 0 8
17740: PPUSH
17741: LD_VAR 0 9
17745: PPUSH
17746: CALL 32654 0 5
17750: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
17751: LD_ADDR_EXP 46
17755: PUSH
17756: LD_EXP 46
17760: PPUSH
17761: LD_EXP 46
17765: PUSH
17766: LD_INT 1
17768: PLUS
17769: PPUSH
17770: LD_VAR 0 10
17774: PPUSH
17775: CALL_OW 1
17779: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
17780: LD_EXP 24
17784: IFFALSE 17792
17786: PUSH
17787: LD_EXP 16
17791: AND
17792: IFFALSE 17807
17794: PUSH
17795: LD_EXP 25
17799: PUSH
17800: LD_VAR 0 4
17804: ARRAY
17805: NOT
17806: AND
17807: IFFALSE 17885
// if un in multi_commanders then
17809: LD_VAR 0 1
17813: PUSH
17814: LD_EXP 24
17818: IN
17819: IFFALSE 17885
// begin if side = your_side then
17821: LD_VAR 0 4
17825: PUSH
17826: LD_OWVAR 2
17830: EQUAL
17831: IFFALSE 17837
// Multiplayer_Loose_Message ;
17833: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
17837: LD_ADDR_EXP 25
17841: PUSH
17842: LD_EXP 25
17846: PPUSH
17847: LD_VAR 0 4
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 1
17859: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
17860: LD_ADDR_EXP 24
17864: PUSH
17865: LD_EXP 24
17869: PUSH
17870: LD_VAR 0 1
17874: DIFF
17875: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
17876: LD_VAR 0 4
17880: PPUSH
17881: CALL 5768 0 1
// end ; end ;
17885: PPOPN 12
17887: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
17888: LD_INT 0
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// begin side := GetSide ( building ) ;
17894: LD_ADDR_VAR 0 4
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 255
17908: ST_TO_ADDR
// if multi_sides [ side ] then
17909: LD_EXP 7
17913: PUSH
17914: LD_VAR 0 4
17918: ARRAY
17919: IFFALSE 17940
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
17921: LD_VAR 0 4
17925: PPUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 266
17935: PPUSH
17936: CALL 6344 0 2
// if side = botSides [ 1 ] then
17940: LD_VAR 0 4
17944: PUSH
17945: LD_EXP 3
17949: PUSH
17950: LD_INT 1
17952: ARRAY
17953: EQUAL
17954: IFFALSE 18038
// begin amBuildings := Delete ( amBuildings , 1 ) ;
17956: LD_ADDR_EXP 37
17960: PUSH
17961: LD_EXP 37
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 3
17973: ST_TO_ADDR
// btype := GetBType ( building ) ;
17974: LD_ADDR_VAR 0 5
17978: PUSH
17979: LD_VAR 0 1
17983: PPUSH
17984: CALL_OW 266
17988: ST_TO_ADDR
// case btype of b_workshop :
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 2
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18014
18002: POP
// ComUpgrade ( building ) ; b_lab :
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 146
18012: GO 18038
18014: LD_INT 6
18016: DOUBLE
18017: EQUAL
18018: IFTRUE 18022
18020: GO 18037
18022: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_INT 10
18030: PPUSH
18031: CALL_OW 207
// end ; end ;
18035: GO 18038
18037: POP
// end ; if side = botSides [ 2 ] then
18038: LD_VAR 0 4
18042: PUSH
18043: LD_EXP 3
18047: PUSH
18048: LD_INT 2
18050: ARRAY
18051: EQUAL
18052: IFFALSE 18148
// begin arBuildings := Delete ( arBuildings , 1 ) ;
18054: LD_ADDR_EXP 47
18058: PUSH
18059: LD_EXP 47
18063: PPUSH
18064: LD_INT 1
18066: PPUSH
18067: CALL_OW 3
18071: ST_TO_ADDR
// btype := GetBType ( building ) ;
18072: LD_ADDR_VAR 0 5
18076: PUSH
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 266
18086: ST_TO_ADDR
// case btype of b_workshop :
18087: LD_VAR 0 5
18091: PUSH
18092: LD_INT 2
18094: DOUBLE
18095: EQUAL
18096: IFTRUE 18100
18098: GO 18112
18100: POP
// ComUpgrade ( building ) ; b_lab :
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 146
18110: GO 18148
18112: LD_INT 6
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18147
18120: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_INT 10
18128: PPUSH
18129: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
18133: LD_VAR 0 1
18137: PPUSH
18138: LD_INT 15
18140: PPUSH
18141: CALL_OW 207
// end ; end ;
18145: GO 18148
18147: POP
// end ; end ;
18148: PPOPN 5
18150: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 255
18160: PUSH
18161: LD_EXP 3
18165: IN
18166: NOT
18167: IFFALSE 18171
// exit ;
18169: GO 18370
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
18171: LD_VAR 0 2
18175: PUSH
18176: LD_EXP 55
18180: IN
18181: IFFALSE 18198
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 31
18196: EQUAL
18197: AND
18198: IFFALSE 18222
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 215
18207: PPUSH
18208: LD_INT 102
18210: PPUSH
18211: CALL_OW 428
18215: PPUSH
18216: CALL_OW 120
// exit ;
18220: GO 18370
// end ; if HexInfo ( 44 , 78 ) and GetSide ( unit ) = 1 then
18222: LD_INT 44
18224: PPUSH
18225: LD_INT 78
18227: PPUSH
18228: CALL_OW 428
18232: IFFALSE 18249
18234: PUSH
18235: LD_VAR 0 2
18239: PPUSH
18240: CALL_OW 255
18244: PUSH
18245: LD_INT 1
18247: EQUAL
18248: AND
18249: IFFALSE 18288
// begin ComMoveXY ( unit , 26 , 40 ) ;
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_INT 26
18258: PPUSH
18259: LD_INT 40
18261: PPUSH
18262: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
18266: LD_ADDR_EXP 42
18270: PUSH
18271: LD_EXP 42
18275: PPUSH
18276: LD_VAR 0 2
18280: PPUSH
18281: CALL 68262 0 2
18285: ST_TO_ADDR
// exit ;
18286: GO 18370
// end ; if GetX ( building ) > 71 and GetSide ( unit ) = 1 then
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 250
18297: PUSH
18298: LD_INT 71
18300: GREATER
18301: IFFALSE 18318
18303: PUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: CALL_OW 255
18313: PUSH
18314: LD_INT 1
18316: EQUAL
18317: AND
18318: IFFALSE 18370
// begin ComMoveXY ( unit , 69 , 39 ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_INT 69
18327: PPUSH
18328: LD_INT 39
18330: PPUSH
18331: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_INT 26
18342: PPUSH
18343: LD_INT 40
18345: PPUSH
18346: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
18350: LD_ADDR_EXP 42
18354: PUSH
18355: LD_EXP 42
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL 68262 0 2
18369: ST_TO_ADDR
// end ; end ;
18370: PPOPN 2
18372: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
18381: LD_VAR 0 1
18385: PPUSH
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL 23756 0 2
// side := GetSide ( vehicle ) ;
18395: LD_ADDR_VAR 0 4
18399: PUSH
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 255
18409: ST_TO_ADDR
// if multi_sides [ side ] then
18410: LD_EXP 7
18414: PUSH
18415: LD_VAR 0 4
18419: ARRAY
18420: IFFALSE 18431
// MultiplayerEvent_Produced ( side ) ;
18422: LD_VAR 0 4
18426: PPUSH
18427: CALL 6252 0 1
// if side = botSides [ 1 ] then
18431: LD_VAR 0 4
18435: PUSH
18436: LD_EXP 3
18440: PUSH
18441: LD_INT 1
18443: ARRAY
18444: EQUAL
18445: IFFALSE 18583
// begin driver := IsDrivenBy ( vehicle ) ;
18447: LD_ADDR_VAR 0 8
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 311
18461: ST_TO_ADDR
// if driver then
18462: LD_VAR 0 8
18466: IFFALSE 18500
// begin SetTag ( driver , tMech ) ;
18468: LD_VAR 0 8
18472: PPUSH
18473: LD_INT 7
18475: PPUSH
18476: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
18480: LD_ADDR_EXP 40
18484: PUSH
18485: LD_EXP 40
18489: PPUSH
18490: LD_VAR 0 8
18494: PPUSH
18495: CALL 68262 0 2
18499: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
18500: LD_EXP 41
18504: PUSH
18505: LD_EXP 38
18509: PPUSH
18510: CALL 32296 0 1
18514: GREATER
18515: IFTRUE 18539
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 266
18527: PUSH
18528: LD_INT 12
18530: PUSH
18531: LD_INT 13
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: IN
18538: OR
18539: IFFALSE 18563
// amVehicles := Join ( amVehicles , vehicle ) else
18541: LD_ADDR_EXP 38
18545: PUSH
18546: LD_EXP 38
18550: PPUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL 68262 0 2
18560: ST_TO_ADDR
18561: GO 18583
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
18563: LD_ADDR_EXP 39
18567: PUSH
18568: LD_EXP 39
18572: PPUSH
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL 68262 0 2
18582: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
18583: LD_VAR 0 4
18587: PUSH
18588: LD_EXP 3
18592: PUSH
18593: LD_INT 2
18595: ARRAY
18596: EQUAL
18597: IFFALSE 18735
// begin driver := IsDrivenBy ( vehicle ) ;
18599: LD_ADDR_VAR 0 8
18603: PUSH
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 311
18613: ST_TO_ADDR
// if driver then
18614: LD_VAR 0 8
18618: IFFALSE 18652
// begin SetTag ( driver , tMech ) ;
18620: LD_VAR 0 8
18624: PPUSH
18625: LD_INT 7
18627: PPUSH
18628: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
18632: LD_ADDR_EXP 50
18636: PUSH
18637: LD_EXP 50
18641: PPUSH
18642: LD_VAR 0 8
18646: PPUSH
18647: CALL 68262 0 2
18651: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
18652: LD_EXP 52
18656: PUSH
18657: LD_EXP 48
18661: PPUSH
18662: CALL 32296 0 1
18666: GREATER
18667: IFTRUE 18691
18669: PUSH
18670: LD_VAR 0 1
18674: PPUSH
18675: CALL_OW 266
18679: PUSH
18680: LD_INT 32
18682: PUSH
18683: LD_INT 88
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: IN
18690: OR
18691: IFFALSE 18715
// arVehicles := Join ( arVehicles , vehicle ) else
18693: LD_ADDR_EXP 48
18697: PUSH
18698: LD_EXP 48
18702: PPUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL 68262 0 2
18712: ST_TO_ADDR
18713: GO 18735
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
18715: LD_ADDR_EXP 49
18719: PUSH
18720: LD_EXP 49
18724: PPUSH
18725: LD_VAR 0 1
18729: PPUSH
18730: CALL 68262 0 2
18734: ST_TO_ADDR
// end ; end ;
18735: PPOPN 8
18737: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 110
18747: PUSH
18748: LD_INT 7
18750: EQUAL
18751: IFFALSE 18765
// SetTag ( driver , 0 ) ;
18753: LD_VAR 0 1
18757: PPUSH
18758: LD_INT 0
18760: PPUSH
18761: CALL_OW 109
// if GetTag ( driver ) = 999 then
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: PUSH
18775: LD_INT 999
18777: EQUAL
18778: IFFALSE 18906
// begin if GetSide ( driver ) = 1 then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 255
18789: PUSH
18790: LD_INT 1
18792: EQUAL
18793: IFFALSE 18844
// begin SetTag ( driver , 0 ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: LD_INT 0
18802: PPUSH
18803: CALL_OW 109
// ComMoveXY ( driver , 26 , 40 ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_INT 26
18814: PPUSH
18815: LD_INT 40
18817: PPUSH
18818: CALL_OW 111
// amForce := Join ( amForce , driver ) ;
18822: LD_ADDR_EXP 42
18826: PUSH
18827: LD_EXP 42
18831: PPUSH
18832: LD_VAR 0 1
18836: PPUSH
18837: CALL 68262 0 2
18841: ST_TO_ADDR
// end else
18842: GO 18906
// if GetSide ( driver ) = 2 then
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 255
18853: PUSH
18854: LD_INT 2
18856: EQUAL
18857: IFFALSE 18906
// begin SetTag ( driver , 0 ) ;
18859: LD_VAR 0 1
18863: PPUSH
18864: LD_INT 0
18866: PPUSH
18867: CALL_OW 109
// ComMoveXY ( driver , 197 , 30 ) ;
18871: LD_VAR 0 1
18875: PPUSH
18876: LD_INT 197
18878: PPUSH
18879: LD_INT 30
18881: PPUSH
18882: CALL_OW 111
// arForce := Join ( arForce , driver ) ;
18886: LD_ADDR_EXP 54
18890: PUSH
18891: LD_EXP 54
18895: PPUSH
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL 68262 0 2
18905: ST_TO_ADDR
// end ; end ; end ;
18906: PPOPN 4
18908: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
18909: LD_VAR 0 2
18913: PPUSH
18914: CALL_OW 255
18918: PUSH
18919: LD_EXP 3
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: EQUAL
18928: IFFALSE 18958
// if tech in amTech then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_EXP 35
18939: IN
18940: IFFALSE 18958
// amTech := amTech diff tech ;
18942: LD_ADDR_EXP 35
18946: PUSH
18947: LD_EXP 35
18951: PUSH
18952: LD_VAR 0 1
18956: DIFF
18957: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 255
18967: PUSH
18968: LD_EXP 3
18972: PUSH
18973: LD_INT 2
18975: ARRAY
18976: EQUAL
18977: IFFALSE 19007
// if tech in arTech then
18979: LD_VAR 0 1
18983: PUSH
18984: LD_EXP 45
18988: IN
18989: IFFALSE 19007
// arTech := arTech diff tech ;
18991: LD_ADDR_EXP 45
18995: PUSH
18996: LD_EXP 45
19000: PUSH
19001: LD_VAR 0 1
19005: DIFF
19006: ST_TO_ADDR
// end ;
19007: PPOPN 2
19009: END
// on EnterBuilding ( b , un ) do begin if GetSide ( un ) in [ 1 , 2 ] and GetClass ( un ) = class_mechanic then
19010: LD_VAR 0 2
19014: PPUSH
19015: CALL_OW 255
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: IN
19030: IFFALSE 19047
19032: PUSH
19033: LD_VAR 0 2
19037: PPUSH
19038: CALL_OW 257
19042: PUSH
19043: LD_INT 3
19045: EQUAL
19046: AND
19047: IFFALSE 19061
// SetLives ( un , 1000 ) ;
19049: LD_VAR 0 2
19053: PPUSH
19054: LD_INT 1000
19056: PPUSH
19057: CALL_OW 234
// end ;
19061: PPOPN 2
19063: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
19064: LD_INT 0
19066: PPUSH
// begin side := GetSide ( factory ) ;
19067: LD_ADDR_VAR 0 6
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 255
19081: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
19082: LD_VAR 0 5
19086: PUSH
19087: LD_INT 81
19089: EQUAL
19090: IFFALSE 19128
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_VAR 0 6
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 34
19107: PUSH
19108: LD_INT 81
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PPUSH
19119: CALL_OW 69
19123: PUSH
19124: LD_INT 0
19126: GREATER
19127: AND
19128: IFFALSE 19149
// begin ComCancel ( factory ) ;
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
19139: LD_STRING VehLimit
19141: PPUSH
19142: LD_INT 2
19144: PPUSH
19145: CALL_OW 338
// end ; end ; end_of_file
19149: PPOPN 6
19151: END
// every 10 10$00 trigger IsOk ( amDep ) do
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 302
19159: IFFALSE 19196
19161: GO 19163
19163: DISABLE
// begin activeAmerAttacks := true ;
19164: LD_ADDR_EXP 5
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
19172: LD_INT 10500
19174: PUSH
19175: LD_INT 2100
19177: PUSH
19178: LD_OWVAR 67
19182: MUL
19183: MINUS
19184: PPUSH
19185: CALL_OW 67
// AmericanAttack ( 0 ) ;
19189: LD_INT 0
19191: PPUSH
19192: CALL 21745 0 1
// end ;
19196: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
19197: LD_INT 32
19199: PPUSH
19200: CALL_OW 302
19204: IFFALSE 19225
19206: PUSH
19207: LD_INT 32
19209: PPUSH
19210: CALL_OW 255
19214: PUSH
19215: LD_EXP 3
19219: PUSH
19220: LD_INT 2
19222: ARRAY
19223: EQUAL
19224: AND
19225: IFFALSE 19278
19227: GO 19229
19229: DISABLE
// begin activeArabAttacks := true ;
19230: LD_ADDR_EXP 4
19234: PUSH
19235: LD_INT 1
19237: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
19238: LD_INT 73500
19240: PUSH
19241: LD_INT 2100
19243: PUSH
19244: LD_OWVAR 67
19248: MUL
19249: MINUS
19250: PPUSH
19251: CALL_OW 67
// ArabAttack ( 0 ) ;
19255: LD_INT 0
19257: PPUSH
19258: CALL 19323 0 1
// wait ( 30 30$00 ) ;
19262: LD_INT 63000
19264: PPUSH
19265: CALL_OW 67
// ArabAttack ( Difficulty ) ;
19269: LD_OWVAR 67
19273: PPUSH
19274: CALL 19323 0 1
// end ;
19278: END
// every 35 35$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 302
19286: IFFALSE 19307
19288: PUSH
19289: LD_INT 1
19291: PPUSH
19292: CALL_OW 255
19296: PUSH
19297: LD_EXP 3
19301: PUSH
19302: LD_INT 1
19304: ARRAY
19305: EQUAL
19306: AND
19307: IFFALSE 19322
19309: GO 19311
19311: DISABLE
// begin AmericanAttack ( Difficulty ) ;
19312: LD_OWVAR 67
19316: PPUSH
19317: CALL 21745 0 1
// enable ;
19321: ENABLE
// end ;
19322: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
19329: PPUSH
// uc_side := botSides [ 2 ] ;
19330: LD_ADDR_OWVAR 20
19334: PUSH
19335: LD_EXP 3
19339: PUSH
19340: LD_INT 2
19342: ARRAY
19343: ST_TO_ADDR
// uc_nation := nation_arabian ;
19344: LD_ADDR_OWVAR 21
19348: PUSH
19349: LD_INT 2
19351: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19352: LD_ADDR_VAR 0 4
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: LD_INT 4
19362: PUSH
19363: LD_INT 5
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: LD_OWVAR 67
19375: ARRAY
19376: ST_TO_ADDR
// arAttackersInf := [ ] ;
19377: LD_ADDR_EXP 56
19381: PUSH
19382: EMPTY
19383: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19384: LD_ADDR_EXP 57
19388: PUSH
19389: EMPTY
19390: ST_TO_ADDR
// InitHC_All ( ) ;
19391: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: DOUBLE
19401: LD_INT 1
19403: DEC
19404: ST_TO_ADDR
19405: LD_INT 3
19407: PUSH
19408: LD_INT 4
19410: PUSH
19411: LD_INT 5
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_OWVAR 67
19423: ARRAY
19424: PUSH
19425: LD_VAR 0 1
19429: PLUS
19430: PUSH
19431: FOR_TO
19432: IFFALSE 19556
// begin uc_side := botSides [ 2 ] ;
19434: LD_ADDR_OWVAR 20
19438: PUSH
19439: LD_EXP 3
19443: PUSH
19444: LD_INT 2
19446: ARRAY
19447: ST_TO_ADDR
// uc_nation := nation_arabian ;
19448: LD_ADDR_OWVAR 21
19452: PUSH
19453: LD_INT 2
19455: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
19456: LD_INT 0
19458: PPUSH
19459: LD_VAR 0 4
19463: PPUSH
19464: CALL_OW 381
// un := CreateHuman ;
19468: LD_ADDR_VAR 0 5
19472: PUSH
19473: CALL_OW 44
19477: ST_TO_ADDR
// if i mod 2 = 0 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 2
19485: MOD
19486: PUSH
19487: LD_INT 0
19489: EQUAL
19490: IFFALSE 19504
// SetClass ( un , class_mortar ) ;
19492: LD_VAR 0 5
19496: PPUSH
19497: LD_INT 8
19499: PPUSH
19500: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
19504: LD_VAR 0 5
19508: PPUSH
19509: LD_INT 25
19511: PPUSH
19512: LD_INT 0
19514: PPUSH
19515: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
19519: LD_ADDR_EXP 56
19523: PUSH
19524: LD_EXP 56
19528: PPUSH
19529: LD_VAR 0 5
19533: PPUSH
19534: CALL 68262 0 2
19538: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
19539: LD_VAR 0 5
19543: PPUSH
19544: LD_INT 230
19546: PPUSH
19547: LD_INT 143
19549: PPUSH
19550: CALL_OW 114
// end ;
19554: GO 19431
19556: POP
19557: POP
// for i := 1 to 3 + v do
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: DOUBLE
19564: LD_INT 1
19566: DEC
19567: ST_TO_ADDR
19568: LD_INT 3
19570: PUSH
19571: LD_VAR 0 1
19575: PLUS
19576: PUSH
19577: FOR_TO
19578: IFFALSE 19795
// begin uc_side := botSides [ 2 ] ;
19580: LD_ADDR_OWVAR 20
19584: PUSH
19585: LD_EXP 3
19589: PUSH
19590: LD_INT 2
19592: ARRAY
19593: ST_TO_ADDR
// uc_nation := nation_arabian ;
19594: LD_ADDR_OWVAR 21
19598: PUSH
19599: LD_INT 2
19601: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
19602: LD_INT 0
19604: PPUSH
19605: LD_VAR 0 4
19609: PPUSH
19610: CALL_OW 383
// un := CreateHuman ;
19614: LD_ADDR_VAR 0 5
19618: PUSH
19619: CALL_OW 44
19623: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19624: LD_VAR 0 5
19628: PPUSH
19629: LD_INT 999
19631: PPUSH
19632: CALL_OW 109
// uc_side := botSides [ 2 ] ;
19636: LD_ADDR_OWVAR 20
19640: PUSH
19641: LD_EXP 3
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: ST_TO_ADDR
// uc_nation := nation_arabian ;
19650: LD_ADDR_OWVAR 21
19654: PUSH
19655: LD_INT 2
19657: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
19658: LD_INT 14
19660: PPUSH
19661: LD_INT 1
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: LD_INT 27
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 2
19684: MOD
19685: PUSH
19686: LD_INT 1
19688: PLUS
19689: ARRAY
19690: PPUSH
19691: LD_INT 80
19693: PPUSH
19694: CALL 35092 0 5
// veh := CreateVehicle ;
19698: LD_ADDR_VAR 0 6
19702: PUSH
19703: CALL_OW 45
19707: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
19708: LD_VAR 0 6
19712: PPUSH
19713: LD_INT 5
19715: PPUSH
19716: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
19720: LD_INT 35
19722: PPUSH
19723: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
19727: LD_VAR 0 6
19731: PPUSH
19732: LD_INT 26
19734: PPUSH
19735: LD_INT 0
19737: PPUSH
19738: CALL_OW 49
19742: IFFALSE 19720
// PlaceHumanInUnit ( un , veh ) ;
19744: LD_VAR 0 5
19748: PPUSH
19749: LD_VAR 0 6
19753: PPUSH
19754: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
19758: LD_VAR 0 5
19762: PPUSH
19763: LD_INT 236
19765: PPUSH
19766: LD_INT 127
19768: PPUSH
19769: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
19773: LD_ADDR_EXP 57
19777: PUSH
19778: LD_EXP 57
19782: PPUSH
19783: LD_VAR 0 6
19787: PPUSH
19788: CALL 68262 0 2
19792: ST_TO_ADDR
// end ;
19793: GO 19577
19795: POP
19796: POP
// wait ( 0 0$2 ) ;
19797: LD_INT 70
19799: PPUSH
19800: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
19804: LD_ADDR_VAR 0 3
19808: PUSH
19809: DOUBLE
19810: LD_INT 1
19812: DEC
19813: ST_TO_ADDR
19814: LD_INT 1
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 3
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: LD_OWVAR 67
19832: ARRAY
19833: PUSH
19834: FOR_TO
19835: IFFALSE 20009
// begin uc_side := botSides [ 2 ] ;
19837: LD_ADDR_OWVAR 20
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: LD_INT 2
19849: ARRAY
19850: ST_TO_ADDR
// uc_nation := nation_arabian ;
19851: LD_ADDR_OWVAR 21
19855: PUSH
19856: LD_INT 2
19858: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
19859: LD_INT 0
19861: PPUSH
19862: LD_VAR 0 4
19866: PPUSH
19867: CALL_OW 383
// un := CreateHuman ;
19871: LD_ADDR_VAR 0 5
19875: PUSH
19876: CALL_OW 44
19880: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19881: LD_VAR 0 5
19885: PPUSH
19886: LD_INT 999
19888: PPUSH
19889: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
19893: LD_INT 14
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: LD_INT 26
19904: PPUSH
19905: LD_INT 80
19907: PPUSH
19908: CALL 35092 0 5
// veh := CreateVehicle ;
19912: LD_ADDR_VAR 0 6
19916: PUSH
19917: CALL_OW 45
19921: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
19922: LD_VAR 0 6
19926: PPUSH
19927: LD_INT 5
19929: PPUSH
19930: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
19934: LD_INT 35
19936: PPUSH
19937: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
19941: LD_VAR 0 6
19945: PPUSH
19946: LD_INT 26
19948: PPUSH
19949: LD_INT 0
19951: PPUSH
19952: CALL_OW 49
19956: IFFALSE 19934
// PlaceHumanInUnit ( un , veh ) ;
19958: LD_VAR 0 5
19962: PPUSH
19963: LD_VAR 0 6
19967: PPUSH
19968: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
19972: LD_VAR 0 5
19976: PPUSH
19977: LD_INT 236
19979: PPUSH
19980: LD_INT 127
19982: PPUSH
19983: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
19987: LD_ADDR_EXP 57
19991: PUSH
19992: LD_EXP 57
19996: PPUSH
19997: LD_VAR 0 6
20001: PPUSH
20002: CALL 68262 0 2
20006: ST_TO_ADDR
// end ;
20007: GO 19834
20009: POP
20010: POP
// wait ( 0 0$2 ) ;
20011: LD_INT 70
20013: PPUSH
20014: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
20018: LD_ADDR_VAR 0 3
20022: PUSH
20023: DOUBLE
20024: LD_INT 1
20026: DEC
20027: ST_TO_ADDR
20028: LD_INT 1
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_OWVAR 67
20046: ARRAY
20047: PUSH
20048: FOR_TO
20049: IFFALSE 20276
// begin uc_side := botSides [ 2 ] ;
20051: LD_ADDR_OWVAR 20
20055: PUSH
20056: LD_EXP 3
20060: PUSH
20061: LD_INT 2
20063: ARRAY
20064: ST_TO_ADDR
// uc_nation := nation_arabian ;
20065: LD_ADDR_OWVAR 21
20069: PUSH
20070: LD_INT 2
20072: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
20073: LD_INT 0
20075: PPUSH
20076: LD_VAR 0 4
20080: PPUSH
20081: CALL_OW 383
// un := CreateHuman ;
20085: LD_ADDR_VAR 0 5
20089: PUSH
20090: CALL_OW 44
20094: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20095: LD_VAR 0 5
20099: PPUSH
20100: LD_INT 999
20102: PPUSH
20103: CALL_OW 109
// uc_side := botSides [ 2 ] ;
20107: LD_ADDR_OWVAR 20
20111: PUSH
20112: LD_EXP 3
20116: PUSH
20117: LD_INT 2
20119: ARRAY
20120: ST_TO_ADDR
// uc_nation := nation_arabian ;
20121: LD_ADDR_OWVAR 21
20125: PUSH
20126: LD_INT 2
20128: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
20129: LD_INT 14
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: LD_INT 28
20140: PPUSH
20141: LD_INT 80
20143: PPUSH
20144: CALL 35092 0 5
// veh := CreateVehicle ;
20148: LD_ADDR_VAR 0 6
20152: PUSH
20153: CALL_OW 45
20157: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
20158: LD_VAR 0 6
20162: PPUSH
20163: LD_INT 4
20165: PPUSH
20166: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
20170: LD_INT 35
20172: PPUSH
20173: CALL_OW 67
// until PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
20177: LD_VAR 0 6
20181: PPUSH
20182: LD_INT 26
20184: PPUSH
20185: LD_INT 0
20187: PPUSH
20188: CALL_OW 49
20192: IFFALSE 20170
// PlaceHumanInUnit ( un , veh ) ;
20194: LD_VAR 0 5
20198: PPUSH
20199: LD_VAR 0 6
20203: PPUSH
20204: CALL_OW 52
// if i mod 2 = 0 then
20208: LD_VAR 0 3
20212: PUSH
20213: LD_INT 2
20215: MOD
20216: PUSH
20217: LD_INT 0
20219: EQUAL
20220: IFFALSE 20239
// ComMoveXY ( un , 136 , 61 ) else
20222: LD_VAR 0 5
20226: PPUSH
20227: LD_INT 136
20229: PPUSH
20230: LD_INT 61
20232: PPUSH
20233: CALL_OW 111
20237: GO 20254
// ComMoveXY ( un , 137 , 41 ) ;
20239: LD_VAR 0 5
20243: PPUSH
20244: LD_INT 137
20246: PPUSH
20247: LD_INT 41
20249: PPUSH
20250: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
20254: LD_ADDR_EXP 57
20258: PUSH
20259: LD_EXP 57
20263: PPUSH
20264: LD_VAR 0 6
20268: PPUSH
20269: CALL 68262 0 2
20273: ST_TO_ADDR
// end ;
20274: GO 20048
20276: POP
20277: POP
// end ;
20278: LD_VAR 0 2
20282: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
20283: LD_EXP 56
20287: IFFALSE 20896
20289: GO 20291
20291: DISABLE
20292: LD_INT 0
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
// begin enable ;
20298: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
20299: LD_ADDR_VAR 0 2
20303: PUSH
20304: LD_EXP 56
20308: PPUSH
20309: LD_INT 50
20311: PUSH
20312: EMPTY
20313: LIST
20314: PPUSH
20315: CALL_OW 72
20319: ST_TO_ADDR
// arAttackersInf := [ ] ;
20320: LD_ADDR_EXP 56
20324: PUSH
20325: EMPTY
20326: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
20327: LD_VAR 0 2
20331: PPUSH
20332: LD_INT 173
20334: PPUSH
20335: LD_INT 139
20337: PPUSH
20338: CALL_OW 111
// wait ( 0 0$10 ) ;
20342: LD_INT 350
20344: PPUSH
20345: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
20349: LD_ADDR_VAR 0 1
20353: PUSH
20354: LD_VAR 0 2
20358: PPUSH
20359: LD_INT 25
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: PUSH
20374: FOR_IN
20375: IFFALSE 20506
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_INT 81
20384: PUSH
20385: LD_EXP 3
20389: PUSH
20390: LD_INT 2
20392: ARRAY
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: LD_INT 120
20403: PUSH
20404: LD_INT 11
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 21
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 21
20430: PUSH
20431: LD_INT 3
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: PPUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 74
20462: ST_TO_ADDR
// if not nearest then
20463: LD_VAR 0 3
20467: NOT
20468: IFFALSE 20472
// break ;
20470: GO 20506
// SetTag ( nearest , tMined ) ;
20472: LD_VAR 0 3
20476: PPUSH
20477: LD_INT 11
20479: PPUSH
20480: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_INT 0
20491: PPUSH
20492: LD_INT 0
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: CALL_OW 192
// end ;
20504: GO 20374
20506: POP
20507: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20508: LD_ADDR_VAR 0 2
20512: PUSH
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 50
20520: PUSH
20521: EMPTY
20522: LIST
20523: PPUSH
20524: CALL_OW 72
20528: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
20529: LD_VAR 0 2
20533: PPUSH
20534: LD_INT 155
20536: PPUSH
20537: LD_INT 119
20539: PPUSH
20540: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
20544: LD_INT 70
20546: PPUSH
20547: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20551: LD_ADDR_VAR 0 2
20555: PUSH
20556: LD_VAR 0 2
20560: PPUSH
20561: LD_INT 50
20563: PUSH
20564: EMPTY
20565: LIST
20566: PPUSH
20567: CALL_OW 72
20571: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
20572: LD_ADDR_VAR 0 4
20576: PUSH
20577: LD_INT 81
20579: PUSH
20580: LD_EXP 3
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: ST_TO_ADDR
// for i in tmp do
20598: LD_ADDR_VAR 0 1
20602: PUSH
20603: LD_VAR 0 2
20607: PUSH
20608: FOR_IN
20609: IFFALSE 20887
// if GetClass ( i ) <> 1 then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 257
20620: PUSH
20621: LD_INT 1
20623: NONEQUAL
20624: IFFALSE 20664
// begin if not HasTask ( i ) then
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL_OW 314
20635: NOT
20636: IFFALSE 20662
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end else
20638: LD_VAR 0 1
20642: PPUSH
20643: LD_VAR 0 4
20647: PPUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 74
20657: PPUSH
20658: CALL_OW 115
20662: GO 20885
// if not HasTask ( i ) then
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 314
20673: NOT
20674: IFFALSE 20885
// begin if GetTag ( i ) <> tMine then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 110
20685: PUSH
20686: LD_INT 6
20688: NONEQUAL
20689: IFFALSE 20861
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_dist , i , 12 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_VAR 0 4
20700: PPUSH
20701: LD_INT 3
20703: PUSH
20704: LD_INT 120
20706: PUSH
20707: LD_INT 11
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 91
20720: PUSH
20721: LD_VAR 0 1
20725: PUSH
20726: LD_INT 12
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 21
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 21
20749: PUSH
20750: LD_INT 3
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: PPUSH
20767: CALL_OW 72
20771: PPUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 74
20781: ST_TO_ADDR
// if not nearest then
20782: LD_VAR 0 3
20786: NOT
20787: IFFALSE 20815
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20789: LD_VAR 0 1
20793: PPUSH
20794: LD_VAR 0 4
20798: PPUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 74
20808: PPUSH
20809: CALL_OW 115
20813: GO 20859
// begin SetTag ( nearest , tMined ) ;
20815: LD_VAR 0 3
20819: PPUSH
20820: LD_INT 11
20822: PPUSH
20823: CALL_OW 109
// SetTag ( i , tMine ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_INT 6
20834: PPUSH
20835: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: LD_INT 0
20846: PPUSH
20847: LD_INT 0
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: CALL_OW 132
// end ; end else
20859: GO 20885
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) end ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 74
20880: PPUSH
20881: CALL_OW 115
20885: GO 20608
20887: POP
20888: POP
// until not tmp ;
20889: LD_VAR 0 2
20893: NOT
20894: IFFALSE 20544
// end ;
20896: PPOPN 4
20898: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
20899: LD_EXP 57
20903: IFFALSE 21015
20905: GO 20907
20907: DISABLE
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
// begin enable ;
20912: ENABLE
// tmp := arAttackersVeh ;
20913: LD_ADDR_VAR 0 2
20917: PUSH
20918: LD_EXP 57
20922: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20923: LD_ADDR_EXP 57
20927: PUSH
20928: EMPTY
20929: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20930: LD_INT 70
20932: PPUSH
20933: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_VAR 0 2
20946: PPUSH
20947: LD_INT 50
20949: PUSH
20950: EMPTY
20951: LIST
20952: PPUSH
20953: CALL_OW 72
20957: ST_TO_ADDR
// for i in tmp do
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_VAR 0 2
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21006
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 207
20978: PUSH
20979: LD_INT 125
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 185
20988: PUSH
20989: LD_INT 114
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL 71028 0 2
21004: GO 20968
21006: POP
21007: POP
21008: LD_VAR 0 2
21012: NOT
21013: IFFALSE 20930
// end ;
21015: PPOPN 2
21017: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
21018: LD_EXP 49
21022: IFFALSE 21030
21024: PUSH
21025: LD_EXP 4
21029: AND
21030: IFFALSE 21622
21032: GO 21034
21034: DISABLE
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
21039: PPUSH
// begin enable ;
21040: ENABLE
// if not arVehiclesAtttackers then
21041: LD_EXP 49
21045: NOT
21046: IFFALSE 21050
// exit ;
21048: GO 21622
// for i in arVehiclesAtttackers do
21050: LD_ADDR_VAR 0 1
21054: PUSH
21055: LD_EXP 49
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21620
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 302
21072: NOT
21073: IFTRUE 21096
21075: PUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 255
21085: PUSH
21086: LD_EXP 3
21090: PUSH
21091: LD_INT 2
21093: ARRAY
21094: NONEQUAL
21095: OR
21096: IFFALSE 21116
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
21098: LD_ADDR_EXP 49
21102: PUSH
21103: LD_EXP 49
21107: PUSH
21108: LD_VAR 0 1
21112: DIFF
21113: ST_TO_ADDR
// continue ;
21114: GO 21060
// end ; if GetTag ( i ) = 300 then
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 110
21125: PUSH
21126: LD_INT 300
21128: EQUAL
21129: IFFALSE 21244
// begin if GetFuel ( i ) < 50 then
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 261
21140: PUSH
21141: LD_INT 50
21143: LESS
21144: IFFALSE 21203
// begin ComMoveXY ( i , 198 , 28 ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_INT 198
21153: PPUSH
21154: LD_INT 28
21156: PPUSH
21157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21161: LD_INT 35
21163: PPUSH
21164: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
21168: LD_VAR 0 1
21172: PPUSH
21173: LD_INT 198
21175: PPUSH
21176: LD_INT 28
21178: PPUSH
21179: CALL_OW 297
21183: PUSH
21184: LD_INT 4
21186: LESS
21187: IFFALSE 21161
// SetFuel ( i , 100 ) ;
21189: LD_VAR 0 1
21193: PPUSH
21194: LD_INT 100
21196: PPUSH
21197: CALL_OW 240
// end else
21201: GO 21244
// if not IsInArea ( i , arParkingArea ) then
21203: LD_VAR 0 1
21207: PPUSH
21208: LD_INT 28
21210: PPUSH
21211: CALL_OW 308
21215: NOT
21216: IFFALSE 21232
// ComMoveToArea ( i , arParkingArea ) else
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 28
21225: PPUSH
21226: CALL_OW 113
21230: GO 21244
// SetTag ( i , 301 ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_INT 301
21239: PPUSH
21240: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
21244: LD_VAR 0 1
21248: PPUSH
21249: CALL_OW 110
21253: PUSH
21254: LD_INT 301
21256: EQUAL
21257: IFFALSE 21399
// begin if GetLives ( i ) < 1000 then
21259: LD_VAR 0 1
21263: PPUSH
21264: CALL_OW 256
21268: PUSH
21269: LD_INT 1000
21271: LESS
21272: IFFALSE 21376
// begin if not IsDrivenBy ( i ) then
21274: LD_VAR 0 1
21278: PPUSH
21279: CALL_OW 311
21283: NOT
21284: IFFALSE 21288
// continue ;
21286: GO 21060
// mech := IsDrivenBy ( i ) ;
21288: LD_ADDR_VAR 0 2
21292: PUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 311
21302: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
21303: LD_VAR 0 2
21307: PPUSH
21308: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
21312: LD_VAR 0 2
21316: PPUSH
21317: LD_VAR 0 1
21321: PPUSH
21322: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
21326: LD_INT 35
21328: PPUSH
21329: CALL_OW 67
// until GetLives ( i ) = 1000 ;
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 256
21342: PUSH
21343: LD_INT 1000
21345: EQUAL
21346: IFFALSE 21326
// SetLives ( mech , 1000 ) ;
21348: LD_VAR 0 2
21352: PPUSH
21353: LD_INT 1000
21355: PPUSH
21356: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 120
// end else
21374: GO 21399
// if IsDrivenBy ( i ) then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 311
21385: IFFALSE 21399
// SetTag ( i , 0 ) ;
21387: LD_VAR 0 1
21391: PPUSH
21392: LD_INT 0
21394: PPUSH
21395: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 110
21408: PUSH
21409: LD_INT 300
21411: LESS
21412: IFFALSE 21618
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
21414: LD_ADDR_VAR 0 3
21418: PUSH
21419: LD_INT 5
21421: PPUSH
21422: LD_INT 81
21424: PUSH
21425: LD_EXP 3
21429: PUSH
21430: LD_INT 2
21432: ARRAY
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 70
21442: ST_TO_ADDR
// if GetLives ( i ) < 650 then
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 256
21452: PUSH
21453: LD_INT 650
21455: LESS
21456: IFFALSE 21481
// begin ComStop ( i ) ;
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 141
// SetTag ( i , 300 ) ;
21467: LD_VAR 0 1
21471: PPUSH
21472: LD_INT 300
21474: PPUSH
21475: CALL_OW 109
// continue ;
21479: GO 21060
// end ; if enemy then
21481: LD_VAR 0 3
21485: IFFALSE 21525
// begin if not HasTask ( i ) then
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 314
21496: NOT
21497: IFFALSE 21523
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21499: LD_VAR 0 1
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 74
21518: PPUSH
21519: CALL_OW 115
// end else
21523: GO 21618
// if arVehiclesAtttackers then
21525: LD_EXP 49
21529: IFFALSE 21618
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_INT 81
21538: PUSH
21539: LD_EXP 3
21543: PUSH
21544: LD_INT 2
21546: ARRAY
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PPUSH
21552: CALL_OW 69
21556: ST_TO_ADDR
// if enemy then
21557: LD_VAR 0 3
21561: IFFALSE 21618
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
21563: LD_VAR 0 1
21567: PPUSH
21568: LD_INT 215
21570: PUSH
21571: LD_INT 88
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 197
21580: PUSH
21581: LD_INT 90
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 178
21590: PUSH
21591: LD_INT 90
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 169
21600: PUSH
21601: LD_INT 104
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PPUSH
21614: CALL 71028 0 2
// end ; end ; end ;
21618: GO 21060
21620: POP
21621: POP
// end ;
21622: PPOPN 3
21624: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
21625: LD_INT 22
21627: PUSH
21628: LD_EXP 3
21632: PUSH
21633: LD_INT 2
21635: ARRAY
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 32
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: IFFALSE 21742
21661: GO 21663
21663: DISABLE
21664: LD_INT 0
21666: PPUSH
// begin enable ;
21667: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
21668: LD_ADDR_VAR 0 1
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_EXP 3
21680: PUSH
21681: LD_INT 2
21683: ARRAY
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 32
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PPUSH
21703: CALL_OW 69
21707: PUSH
21708: FOR_IN
21709: IFFALSE 21740
// if GetFuel ( i ) < 3 then
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 261
21720: PUSH
21721: LD_INT 3
21723: LESS
21724: IFFALSE 21738
// SetFuel ( i , 3 ) ;
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_INT 3
21733: PPUSH
21734: CALL_OW 240
21738: GO 21708
21740: POP
21741: POP
// end ;
21742: PPOPN 1
21744: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
21745: LD_INT 0
21747: PPUSH
21748: PPUSH
21749: PPUSH
21750: PPUSH
21751: PPUSH
// uc_side := botSides [ 1 ] ;
21752: LD_ADDR_OWVAR 20
21756: PUSH
21757: LD_EXP 3
21761: PUSH
21762: LD_INT 1
21764: ARRAY
21765: ST_TO_ADDR
// uc_nation := nation_american ;
21766: LD_ADDR_OWVAR 21
21770: PUSH
21771: LD_INT 1
21773: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_INT 3
21781: PUSH
21782: LD_INT 4
21784: PUSH
21785: LD_INT 5
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: PUSH
21793: LD_OWVAR 67
21797: ARRAY
21798: ST_TO_ADDR
// amAttackersInf := [ ] ;
21799: LD_ADDR_EXP 58
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// amAttackersVeh := [ ] ;
21806: LD_ADDR_EXP 59
21810: PUSH
21811: EMPTY
21812: ST_TO_ADDR
// InitHC_All ( ) ;
21813: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
21817: LD_ADDR_VAR 0 3
21821: PUSH
21822: DOUBLE
21823: LD_INT 1
21825: DEC
21826: ST_TO_ADDR
21827: LD_INT 2
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: LD_INT 4
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: LD_OWVAR 67
21845: ARRAY
21846: PUSH
21847: LD_VAR 0 1
21851: PLUS
21852: PUSH
21853: FOR_TO
21854: IFFALSE 21961
// begin uc_side := botSides [ 1 ] ;
21856: LD_ADDR_OWVAR 20
21860: PUSH
21861: LD_EXP 3
21865: PUSH
21866: LD_INT 1
21868: ARRAY
21869: ST_TO_ADDR
// uc_nation := nation_american ;
21870: LD_ADDR_OWVAR 21
21874: PUSH
21875: LD_INT 1
21877: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21878: LD_INT 0
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: CALL_OW 381
// un := CreateHuman ;
21890: LD_ADDR_VAR 0 5
21894: PUSH
21895: CALL_OW 44
21899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21900: LD_INT 35
21902: PPUSH
21903: CALL_OW 67
// until PlaceUnitArea ( un , amAttackSpawnArea , false ) ;
21907: LD_VAR 0 5
21911: PPUSH
21912: LD_INT 30
21914: PPUSH
21915: LD_INT 0
21917: PPUSH
21918: CALL_OW 49
21922: IFFALSE 21900
// amAttackersInf := Join ( amAttackersInf , un ) ;
21924: LD_ADDR_EXP 58
21928: PUSH
21929: LD_EXP 58
21933: PPUSH
21934: LD_VAR 0 5
21938: PPUSH
21939: CALL 68262 0 2
21943: ST_TO_ADDR
// ComAgressiveMove ( un , 102 , 23 ) ;
21944: LD_VAR 0 5
21948: PPUSH
21949: LD_INT 102
21951: PPUSH
21952: LD_INT 23
21954: PPUSH
21955: CALL_OW 114
// end ;
21959: GO 21853
21961: POP
21962: POP
// for i := 1 to 2 + v do
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: DOUBLE
21969: LD_INT 1
21971: DEC
21972: ST_TO_ADDR
21973: LD_INT 2
21975: PUSH
21976: LD_VAR 0 1
21980: PLUS
21981: PUSH
21982: FOR_TO
21983: IFFALSE 22204
// begin uc_side := botSides [ 1 ] ;
21985: LD_ADDR_OWVAR 20
21989: PUSH
21990: LD_EXP 3
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: ST_TO_ADDR
// uc_nation := nation_american ;
21999: LD_ADDR_OWVAR 21
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
22007: LD_INT 0
22009: PPUSH
22010: LD_VAR 0 4
22014: PPUSH
22015: CALL_OW 383
// un := CreateHuman ;
22019: LD_ADDR_VAR 0 5
22023: PUSH
22024: CALL_OW 44
22028: ST_TO_ADDR
// SetTag ( un , 999 ) ;
22029: LD_VAR 0 5
22033: PPUSH
22034: LD_INT 999
22036: PPUSH
22037: CALL_OW 109
// uc_side := botSides [ 1 ] ;
22041: LD_ADDR_OWVAR 20
22045: PUSH
22046: LD_EXP 3
22050: PUSH
22051: LD_INT 1
22053: ARRAY
22054: ST_TO_ADDR
// uc_nation := nation_american ;
22055: LD_ADDR_OWVAR 21
22059: PUSH
22060: LD_INT 1
22062: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
22063: LD_INT 3
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: LD_INT 3
22074: PUSH
22075: LD_INT 5
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_VAR 0 3
22090: PUSH
22091: LD_INT 3
22093: MOD
22094: PUSH
22095: LD_INT 1
22097: PLUS
22098: ARRAY
22099: PPUSH
22100: LD_INT 80
22102: PPUSH
22103: CALL 35092 0 5
// veh := CreateVehicle ;
22107: LD_ADDR_VAR 0 6
22111: PUSH
22112: CALL_OW 45
22116: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
22117: LD_VAR 0 6
22121: PPUSH
22122: LD_INT 2
22124: PPUSH
22125: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 67
// until PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
22136: LD_VAR 0 6
22140: PPUSH
22141: LD_INT 30
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 49
22151: IFFALSE 22129
// PlaceHumanInUnit ( un , veh ) ;
22153: LD_VAR 0 5
22157: PPUSH
22158: LD_VAR 0 6
22162: PPUSH
22163: CALL_OW 52
// ComMoveXY ( un , 102 , 19 ) ;
22167: LD_VAR 0 5
22171: PPUSH
22172: LD_INT 102
22174: PPUSH
22175: LD_INT 19
22177: PPUSH
22178: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
22182: LD_ADDR_EXP 59
22186: PUSH
22187: LD_EXP 59
22191: PPUSH
22192: LD_VAR 0 6
22196: PPUSH
22197: CALL 68262 0 2
22201: ST_TO_ADDR
// end ;
22202: GO 21982
22204: POP
22205: POP
// end ;
22206: LD_VAR 0 2
22210: RET
// every 0 0$2 trigger amAttackersVeh or amAttackersInf do var i , tmp ;
22211: LD_EXP 59
22215: IFTRUE 22223
22217: PUSH
22218: LD_EXP 58
22222: OR
22223: IFFALSE 22359
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
// begin enable ;
22232: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: LD_EXP 59
22242: PUSH
22243: LD_EXP 58
22247: UNION
22248: ST_TO_ADDR
// amAttackersVeh := [ ] ;
22249: LD_ADDR_EXP 59
22253: PUSH
22254: EMPTY
22255: ST_TO_ADDR
// amAttackersInf := [ ] ;
22256: LD_ADDR_EXP 58
22260: PUSH
22261: EMPTY
22262: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
22263: LD_INT 70
22265: PPUSH
22266: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_VAR 0 2
22279: PPUSH
22280: LD_INT 50
22282: PUSH
22283: EMPTY
22284: LIST
22285: PPUSH
22286: CALL_OW 72
22290: ST_TO_ADDR
// for i in tmp do
22291: LD_ADDR_VAR 0 1
22295: PUSH
22296: LD_VAR 0 2
22300: PUSH
22301: FOR_IN
22302: IFFALSE 22350
// AgressiveMove ( i , [ [ 111 , 48 ] , [ 120 , 73 ] , [ 123 , 87 ] ] ) until not tmp ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_INT 111
22311: PUSH
22312: LD_INT 48
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 120
22321: PUSH
22322: LD_INT 73
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 123
22331: PUSH
22332: LD_INT 87
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL 71028 0 2
22348: GO 22301
22350: POP
22351: POP
22352: LD_VAR 0 2
22356: NOT
22357: IFFALSE 22263
// end ;
22359: PPOPN 2
22361: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
22362: LD_EXP 39
22366: IFFALSE 22374
22368: PUSH
22369: LD_EXP 5
22373: AND
22374: IFFALSE 22955
22376: GO 22378
22378: DISABLE
22379: LD_INT 0
22381: PPUSH
22382: PPUSH
22383: PPUSH
// begin enable ;
22384: ENABLE
// if not amVehiclesAtttackers then
22385: LD_EXP 39
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 22955
// for i in amVehiclesAtttackers do
22394: LD_ADDR_VAR 0 1
22398: PUSH
22399: LD_EXP 39
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22953
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
22407: LD_VAR 0 1
22411: PPUSH
22412: CALL_OW 302
22416: NOT
22417: IFTRUE 22440
22419: PUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL_OW 255
22429: PUSH
22430: LD_EXP 3
22434: PUSH
22435: LD_INT 1
22437: ARRAY
22438: NONEQUAL
22439: OR
22440: IFFALSE 22460
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
22442: LD_ADDR_EXP 39
22446: PUSH
22447: LD_EXP 39
22451: PUSH
22452: LD_VAR 0 1
22456: DIFF
22457: ST_TO_ADDR
// continue ;
22458: GO 22404
// end ; if GetTag ( i ) = 300 then
22460: LD_VAR 0 1
22464: PPUSH
22465: CALL_OW 110
22469: PUSH
22470: LD_INT 300
22472: EQUAL
22473: IFFALSE 22588
// begin if GetFuel ( i ) < 50 then
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 261
22484: PUSH
22485: LD_INT 50
22487: LESS
22488: IFFALSE 22547
// begin ComMoveXY ( i , 24 , 36 ) ;
22490: LD_VAR 0 1
22494: PPUSH
22495: LD_INT 24
22497: PPUSH
22498: LD_INT 36
22500: PPUSH
22501: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22505: LD_INT 35
22507: PPUSH
22508: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
22512: LD_VAR 0 1
22516: PPUSH
22517: LD_INT 24
22519: PPUSH
22520: LD_INT 36
22522: PPUSH
22523: CALL_OW 297
22527: PUSH
22528: LD_INT 4
22530: LESS
22531: IFFALSE 22505
// SetFuel ( i , 100 ) ;
22533: LD_VAR 0 1
22537: PPUSH
22538: LD_INT 100
22540: PPUSH
22541: CALL_OW 240
// end else
22545: GO 22588
// if not IsInArea ( i , amParkingArea ) then
22547: LD_VAR 0 1
22551: PPUSH
22552: LD_INT 27
22554: PPUSH
22555: CALL_OW 308
22559: NOT
22560: IFFALSE 22576
// ComMoveToArea ( i , amParkingArea ) else
22562: LD_VAR 0 1
22566: PPUSH
22567: LD_INT 27
22569: PPUSH
22570: CALL_OW 113
22574: GO 22588
// SetTag ( i , 301 ) ;
22576: LD_VAR 0 1
22580: PPUSH
22581: LD_INT 301
22583: PPUSH
22584: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 110
22597: PUSH
22598: LD_INT 301
22600: EQUAL
22601: IFFALSE 22743
// begin if GetLives ( i ) < 1000 then
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 256
22612: PUSH
22613: LD_INT 1000
22615: LESS
22616: IFFALSE 22720
// begin if not IsDrivenBy ( i ) then
22618: LD_VAR 0 1
22622: PPUSH
22623: CALL_OW 311
22627: NOT
22628: IFFALSE 22632
// continue ;
22630: GO 22404
// mech := IsDrivenBy ( i ) ;
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_VAR 0 1
22641: PPUSH
22642: CALL_OW 311
22646: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22647: LD_VAR 0 2
22651: PPUSH
22652: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22656: LD_VAR 0 2
22660: PPUSH
22661: LD_VAR 0 1
22665: PPUSH
22666: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
22670: LD_INT 35
22672: PPUSH
22673: CALL_OW 67
// until GetLives ( i ) = 1000 ;
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 256
22686: PUSH
22687: LD_INT 1000
22689: EQUAL
22690: IFFALSE 22670
// SetLives ( mech , 1000 ) ;
22692: LD_VAR 0 2
22696: PPUSH
22697: LD_INT 1000
22699: PPUSH
22700: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 1
22713: PPUSH
22714: CALL_OW 120
// end else
22718: GO 22743
// if IsDrivenBy ( i ) then
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL_OW 311
22729: IFFALSE 22743
// SetTag ( i , 0 ) ;
22731: LD_VAR 0 1
22735: PPUSH
22736: LD_INT 0
22738: PPUSH
22739: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL_OW 110
22752: PUSH
22753: LD_INT 300
22755: LESS
22756: IFFALSE 22951
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_INT 3
22765: PPUSH
22766: LD_INT 81
22768: PUSH
22769: LD_EXP 3
22773: PUSH
22774: LD_INT 1
22776: ARRAY
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PPUSH
22782: CALL_OW 70
22786: ST_TO_ADDR
// if GetLives ( i ) < 650 then
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 256
22796: PUSH
22797: LD_INT 650
22799: LESS
22800: IFFALSE 22825
// begin ComStop ( i ) ;
22802: LD_VAR 0 1
22806: PPUSH
22807: CALL_OW 141
// SetTag ( i , 300 ) ;
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_INT 300
22818: PPUSH
22819: CALL_OW 109
// continue ;
22823: GO 22404
// end ; if enemy then
22825: LD_VAR 0 3
22829: IFFALSE 22869
// begin if not HasTask ( i ) then
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 314
22840: NOT
22841: IFFALSE 22867
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_VAR 0 3
22852: PPUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 74
22862: PPUSH
22863: CALL_OW 115
// end else
22867: GO 22951
// if amVehiclesAtttackers then
22869: LD_EXP 39
22873: IFFALSE 22951
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
22875: LD_ADDR_VAR 0 3
22879: PUSH
22880: LD_INT 81
22882: PUSH
22883: LD_EXP 3
22887: PUSH
22888: LD_INT 1
22890: ARRAY
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 69
22900: ST_TO_ADDR
// if enemy then
22901: LD_VAR 0 3
22905: IFFALSE 22951
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
22907: LD_VAR 0 1
22911: PPUSH
22912: LD_INT 49
22914: PUSH
22915: LD_INT 43
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 63
22924: PUSH
22925: LD_INT 56
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 72
22934: PUSH
22935: LD_INT 67
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL 71028 0 2
// end ; end ; end ;
22951: GO 22404
22953: POP
22954: POP
// end ;
22955: PPOPN 3
22957: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
22958: LD_INT 22
22960: PUSH
22961: LD_EXP 3
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 32
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PPUSH
22988: CALL_OW 69
22992: IFFALSE 23075
22994: GO 22996
22996: DISABLE
22997: LD_INT 0
22999: PPUSH
// begin enable ;
23000: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
23001: LD_ADDR_VAR 0 1
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_EXP 3
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 32
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 69
23040: PUSH
23041: FOR_IN
23042: IFFALSE 23073
// if GetFuel ( i ) < 3 then
23044: LD_VAR 0 1
23048: PPUSH
23049: CALL_OW 261
23053: PUSH
23054: LD_INT 3
23056: LESS
23057: IFFALSE 23071
// SetFuel ( i , 3 ) ;
23059: LD_VAR 0 1
23063: PPUSH
23064: LD_INT 3
23066: PPUSH
23067: CALL_OW 240
23071: GO 23041
23073: POP
23074: POP
// end ; end_of_file
23075: PPOPN 1
23077: END
// every 0 0$20 trigger game do
23078: LD_EXP 2
23082: IFFALSE 23135
23084: GO 23086
23086: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesSouthArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
23087: LD_INT 20
23089: PUSH
23090: LD_INT 22
23092: PUSH
23093: LD_INT 33
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 5
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: PPUSH
23113: LD_EXP 21
23117: PUSH
23118: LD_INT 2
23120: ARRAY
23121: PPUSH
23122: LD_EXP 21
23126: PUSH
23127: LD_INT 1
23129: ARRAY
23130: PPUSH
23131: CALL 23136 0 3
23135: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
// if not areas then
23142: LD_VAR 0 1
23146: NOT
23147: IFFALSE 23151
// exit ;
23149: GO 23530
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
23151: LD_ADDR_VAR 0 7
23155: PUSH
23156: LD_INT 17
23158: PUSH
23159: LD_INT 18
23161: PUSH
23162: LD_INT 19
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// x := 5 ;
23170: LD_ADDR_VAR 0 6
23174: PUSH
23175: LD_INT 5
23177: ST_TO_ADDR
// repeat wait ( time ) ;
23178: LD_VAR 0 2
23182: PPUSH
23183: CALL_OW 67
// if tick < [ 21 21$00 , 19 19$00 , 17 17$00 ] [ Difficulty ] then
23187: LD_OWVAR 1
23191: PUSH
23192: LD_INT 44100
23194: PUSH
23195: LD_INT 39900
23197: PUSH
23198: LD_INT 35700
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: LD_OWVAR 67
23210: ARRAY
23211: LESS
23212: IFFALSE 23351
// begin for i := 1 to multi_sides do
23214: LD_ADDR_VAR 0 5
23218: PUSH
23219: DOUBLE
23220: LD_INT 1
23222: DEC
23223: ST_TO_ADDR
23224: LD_EXP 7
23228: PUSH
23229: FOR_TO
23230: IFFALSE 23342
// if multi_sides [ i ] then
23232: LD_EXP 7
23236: PUSH
23237: LD_VAR 0 5
23241: ARRAY
23242: IFFALSE 23340
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 30 , 28 ] [ Difficulty ] then
23244: LD_VAR 0 7
23248: PUSH
23249: LD_EXP 7
23253: PUSH
23254: LD_VAR 0 5
23258: ARRAY
23259: ARRAY
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: CALL_OW 287
23268: PUSH
23269: LD_INT 32
23271: PUSH
23272: LD_INT 30
23274: PUSH
23275: LD_INT 28
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: LD_OWVAR 67
23287: ARRAY
23288: LESS
23289: IFFALSE 23340
// begin amount := amount - ( x * 10 ) ;
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_VAR 0 3
23300: PUSH
23301: LD_VAR 0 6
23305: PUSH
23306: LD_INT 10
23308: MUL
23309: MINUS
23310: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
23311: LD_VAR 0 6
23315: PPUSH
23316: LD_VAR 0 7
23320: PUSH
23321: LD_EXP 7
23325: PUSH
23326: LD_VAR 0 5
23330: ARRAY
23331: ARRAY
23332: PPUSH
23333: LD_INT 1
23335: PPUSH
23336: CALL_OW 55
// end ; end ;
23340: GO 23229
23342: POP
23343: POP
// wait ( 0 0$2 ) ;
23344: LD_INT 70
23346: PPUSH
23347: CALL_OW 67
// end ; for i in areas do
23351: LD_ADDR_VAR 0 5
23355: PUSH
23356: LD_VAR 0 1
23360: PUSH
23361: FOR_IN
23362: IFFALSE 23445
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
23364: LD_VAR 0 5
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 287
23376: PUSH
23377: LD_INT 25
23379: PUSH
23380: LD_INT 22
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: LD_OWVAR 67
23395: ARRAY
23396: LESS
23397: IFFALSE 23443
// begin wait ( 0 0$5 ) ;
23399: LD_INT 175
23401: PPUSH
23402: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
23406: LD_VAR 0 6
23410: PPUSH
23411: LD_VAR 0 5
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 55
// amount := amount - ( x * 10 ) ;
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_VAR 0 3
23432: PUSH
23433: LD_VAR 0 6
23437: PUSH
23438: LD_INT 10
23440: MUL
23441: MINUS
23442: ST_TO_ADDR
// end ; end ;
23443: GO 23361
23445: POP
23446: POP
// time := time + 0 0$2 ;
23447: LD_ADDR_VAR 0 2
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_INT 70
23459: PLUS
23460: ST_TO_ADDR
// x := x - 1 ;
23461: LD_ADDR_VAR 0 6
23465: PUSH
23466: LD_VAR 0 6
23470: PUSH
23471: LD_INT 1
23473: MINUS
23474: ST_TO_ADDR
// if x = 0 then
23475: LD_VAR 0 6
23479: PUSH
23480: LD_INT 0
23482: EQUAL
23483: IFFALSE 23493
// x := 5 ;
23485: LD_ADDR_VAR 0 6
23489: PUSH
23490: LD_INT 5
23492: ST_TO_ADDR
// if time > 1 1$30 then
23493: LD_VAR 0 2
23497: PUSH
23498: LD_INT 3150
23500: GREATER
23501: IFFALSE 23511
// time := 0 0$30 ;
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: LD_INT 1050
23510: ST_TO_ADDR
// until not game or amount <= 0 ;
23511: LD_EXP 2
23515: NOT
23516: IFTRUE 23528
23518: PUSH
23519: LD_VAR 0 3
23523: PUSH
23524: LD_INT 0
23526: LESSEQUAL
23527: OR
23528: IFFALSE 23178
// end ; end_of_file
23530: LD_VAR 0 4
23534: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23535: LD_VAR 0 1
23539: PUSH
23540: LD_INT 200
23542: DOUBLE
23543: GREATEREQUAL
23544: IFFALSE 23552
23546: LD_INT 299
23548: DOUBLE
23549: LESSEQUAL
23550: IFTRUE 23554
23552: GO 23586
23554: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23555: LD_VAR 0 1
23559: PPUSH
23560: LD_VAR 0 2
23564: PPUSH
23565: LD_VAR 0 3
23569: PPUSH
23570: LD_VAR 0 4
23574: PPUSH
23575: LD_VAR 0 5
23579: PPUSH
23580: CALL 24448 0 5
23584: GO 23663
23586: LD_INT 300
23588: DOUBLE
23589: GREATEREQUAL
23590: IFFALSE 23598
23592: LD_INT 399
23594: DOUBLE
23595: LESSEQUAL
23596: IFTRUE 23600
23598: GO 23662
23600: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23601: LD_VAR 0 1
23605: PPUSH
23606: LD_VAR 0 2
23610: PPUSH
23611: LD_VAR 0 3
23615: PPUSH
23616: LD_VAR 0 4
23620: PPUSH
23621: LD_VAR 0 5
23625: PPUSH
23626: LD_VAR 0 6
23630: PPUSH
23631: LD_VAR 0 7
23635: PPUSH
23636: LD_VAR 0 8
23640: PPUSH
23641: LD_VAR 0 9
23645: PPUSH
23646: LD_VAR 0 10
23650: PPUSH
23651: LD_VAR 0 11
23655: PPUSH
23656: CALL 74313 0 11
23660: GO 23663
23662: POP
// end ;
23663: PPOPN 11
23665: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23666: LD_VAR 0 1
23670: PPUSH
23671: LD_VAR 0 2
23675: PPUSH
23676: LD_VAR 0 3
23680: PPUSH
23681: LD_VAR 0 4
23685: PPUSH
23686: LD_VAR 0 5
23690: PPUSH
23691: CALL 23748 0 5
// end ; end_of_file
23695: PPOPN 5
23697: END
// export function SOS_UnitDestroyed ( un ) ; begin
23698: LD_INT 0
23700: PPUSH
// ComRadiation ( un ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: CALL 24868 0 1
// end ;
23710: LD_VAR 0 2
23714: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23715: LD_INT 0
23717: PPUSH
// ComRadiation ( un ) ;
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL 24868 0 1
// end ;
23727: LD_VAR 0 2
23731: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23732: LD_INT 0
23734: PPUSH
// end ;
23735: LD_VAR 0 4
23739: RET
// export function SOS_Command ( cmd ) ; begin
23740: LD_INT 0
23742: PPUSH
// end ;
23743: LD_VAR 0 2
23747: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23748: LD_INT 0
23750: PPUSH
// end ;
23751: LD_VAR 0 6
23755: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
// if not vehicle or not factory then
23763: LD_VAR 0 1
23767: NOT
23768: IFTRUE 23777
23770: PUSH
23771: LD_VAR 0 2
23775: NOT
23776: OR
23777: IFFALSE 23781
// exit ;
23779: GO 24443
// weapon := GetWeapon ( vehicle ) ;
23781: LD_ADDR_VAR 0 7
23785: PUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL_OW 264
23795: ST_TO_ADDR
// if weapon = ar_miner then
23796: LD_VAR 0 7
23800: PUSH
23801: LD_INT 81
23803: EQUAL
23804: IFFALSE 23861
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
23806: LD_ADDR_EXP 67
23810: PUSH
23811: LD_EXP 67
23815: PPUSH
23816: LD_EXP 67
23820: PUSH
23821: LD_INT 1
23823: PLUS
23824: PPUSH
23825: LD_VAR 0 1
23829: PPUSH
23830: CALL_OW 1
23834: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23835: LD_ADDR_EXP 68
23839: PUSH
23840: LD_EXP 68
23844: PPUSH
23845: LD_EXP 68
23849: PUSH
23850: LD_INT 1
23852: PLUS
23853: PPUSH
23854: EMPTY
23855: PPUSH
23856: CALL_OW 1
23860: ST_TO_ADDR
// end ; if not factoryWaypoints then
23861: LD_EXP 70
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 24443
// for i := 1 to Count ( factoryWaypoints ) do
23870: LD_ADDR_VAR 0 4
23874: PUSH
23875: DOUBLE
23876: LD_INT 1
23878: DEC
23879: ST_TO_ADDR
23880: LD_EXP 70
23884: PPUSH
23885: CALL 32296 0 1
23889: PUSH
23890: FOR_TO
23891: IFFALSE 24441
// if factoryWaypoints [ i ] [ 2 ] = factory then
23893: LD_EXP 70
23897: PUSH
23898: LD_VAR 0 4
23902: ARRAY
23903: PUSH
23904: LD_INT 2
23906: ARRAY
23907: PUSH
23908: LD_VAR 0 2
23912: EQUAL
23913: IFFALSE 24439
// begin if GetControl ( vehicle ) = control_manual then
23915: LD_VAR 0 1
23919: PPUSH
23920: CALL_OW 263
23924: PUSH
23925: LD_INT 1
23927: EQUAL
23928: IFFALSE 24292
// begin driver := IsDrivenBy ( vehicle ) ;
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 311
23944: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23945: LD_VAR 0 5
23949: PUSH
23950: LD_EXP 71
23954: IN
23955: IFTRUE 23969
23957: PUSH
23958: LD_VAR 0 1
23962: PUSH
23963: LD_EXP 71
23967: IN
23968: OR
23969: IFFALSE 23975
// exit ;
23971: POP
23972: POP
23973: GO 24443
// if not HasTask ( driver ) then
23975: LD_VAR 0 5
23979: PPUSH
23980: CALL_OW 314
23984: NOT
23985: IFFALSE 24290
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23987: LD_ADDR_EXP 71
23991: PUSH
23992: LD_EXP 71
23996: PPUSH
23997: LD_VAR 0 5
24001: PPUSH
24002: CALL 68262 0 2
24006: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
24007: LD_ADDR_EXP 71
24011: PUSH
24012: LD_EXP 71
24016: PPUSH
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL 68262 0 2
24026: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24027: LD_ADDR_VAR 0 6
24031: PUSH
24032: LD_EXP 70
24036: PUSH
24037: LD_VAR 0 4
24041: ARRAY
24042: PUSH
24043: LD_INT 3
24045: ARRAY
24046: PPUSH
24047: LD_EXP 70
24051: PUSH
24052: LD_VAR 0 4
24056: ARRAY
24057: PUSH
24058: LD_INT 4
24060: ARRAY
24061: PPUSH
24062: CALL_OW 428
24066: ST_TO_ADDR
// if hex then
24067: LD_VAR 0 6
24071: IFFALSE 24089
// ComMoveUnit ( driver , hex ) else
24073: LD_VAR 0 5
24077: PPUSH
24078: LD_VAR 0 6
24082: PPUSH
24083: CALL_OW 112
24087: GO 24173
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
24089: LD_VAR 0 1
24093: PPUSH
24094: LD_EXP 70
24098: PUSH
24099: LD_VAR 0 4
24103: ARRAY
24104: PUSH
24105: LD_INT 3
24107: ARRAY
24108: PPUSH
24109: LD_EXP 70
24113: PUSH
24114: LD_VAR 0 4
24118: ARRAY
24119: PUSH
24120: LD_INT 4
24122: ARRAY
24123: PPUSH
24124: CALL_OW 297
24128: PUSH
24129: LD_INT 0
24131: GREATER
24132: IFFALSE 24173
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24134: LD_VAR 0 5
24138: PPUSH
24139: LD_EXP 70
24143: PUSH
24144: LD_VAR 0 4
24148: ARRAY
24149: PUSH
24150: LD_INT 3
24152: ARRAY
24153: PPUSH
24154: LD_EXP 70
24158: PUSH
24159: LD_VAR 0 4
24163: ARRAY
24164: PUSH
24165: LD_INT 4
24167: ARRAY
24168: PPUSH
24169: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24173: LD_VAR 0 5
24177: PPUSH
24178: CALL_OW 181
// if Multiplayer then
24182: LD_OWVAR 4
24186: IFFALSE 24235
// begin repeat wait ( 10 ) ;
24188: LD_INT 10
24190: PPUSH
24191: CALL_OW 67
// until not IsInUnit ( driver ) ;
24195: LD_VAR 0 5
24199: PPUSH
24200: CALL_OW 310
24204: NOT
24205: IFFALSE 24188
// if not HasTask ( driver ) then
24207: LD_VAR 0 5
24211: PPUSH
24212: CALL_OW 314
24216: NOT
24217: IFFALSE 24233
// ComEnterUnit ( driver , factory ) ;
24219: LD_VAR 0 5
24223: PPUSH
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 120
// end else
24233: GO 24249
// AddComEnterUnit ( driver , factory ) ;
24235: LD_VAR 0 5
24239: PPUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: CALL_OW 180
// wait ( 0 0$1 ) ;
24249: LD_INT 35
24251: PPUSH
24252: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
24256: LD_ADDR_EXP 71
24260: PUSH
24261: LD_EXP 71
24265: PUSH
24266: LD_VAR 0 5
24270: DIFF
24271: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
24272: LD_ADDR_EXP 71
24276: PUSH
24277: LD_EXP 71
24281: PUSH
24282: LD_VAR 0 1
24286: DIFF
24287: ST_TO_ADDR
// break ;
24288: GO 24441
// end ; end else
24290: GO 24439
// if GetControl ( vehicle ) = control_remote then
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL_OW 263
24301: PUSH
24302: LD_INT 2
24304: EQUAL
24305: IFFALSE 24391
// begin wait ( 0 0$2 ) ;
24307: LD_INT 70
24309: PPUSH
24310: CALL_OW 67
// repeat wait ( 10 ) ;
24314: LD_INT 10
24316: PPUSH
24317: CALL_OW 67
// Connect ( vehicle ) ;
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL 38574 0 1
// until IsControledBy ( vehicle ) ;
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 312
24339: IFFALSE 24314
// wait ( 10 ) ;
24341: LD_INT 10
24343: PPUSH
24344: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_EXP 70
24357: PUSH
24358: LD_VAR 0 4
24362: ARRAY
24363: PUSH
24364: LD_INT 3
24366: ARRAY
24367: PPUSH
24368: LD_EXP 70
24372: PUSH
24373: LD_VAR 0 4
24377: ARRAY
24378: PUSH
24379: LD_INT 4
24381: ARRAY
24382: PPUSH
24383: CALL_OW 111
// break ;
24387: GO 24441
// end else
24389: GO 24439
// begin wait ( 0 0$3 ) ;
24391: LD_INT 105
24393: PPUSH
24394: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
24398: LD_VAR 0 1
24402: PPUSH
24403: LD_EXP 70
24407: PUSH
24408: LD_VAR 0 4
24412: ARRAY
24413: PUSH
24414: LD_INT 3
24416: ARRAY
24417: PPUSH
24418: LD_EXP 70
24422: PUSH
24423: LD_VAR 0 4
24427: ARRAY
24428: PUSH
24429: LD_INT 4
24431: ARRAY
24432: PPUSH
24433: CALL_OW 111
// break ;
24437: GO 24441
// end ; end ;
24439: GO 23890
24441: POP
24442: POP
// end ;
24443: LD_VAR 0 3
24447: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24448: LD_INT 0
24450: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24451: LD_VAR 0 1
24455: PUSH
24456: LD_INT 250
24458: EQUAL
24459: IFFALSE 24476
24461: PUSH
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL_OW 264
24471: PUSH
24472: LD_INT 81
24474: EQUAL
24475: AND
24476: IFFALSE 24497
// MinerPlaceMine ( unit , x , y ) ;
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 4
24487: PPUSH
24488: LD_VAR 0 5
24492: PPUSH
24493: CALL 27778 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 251
24504: EQUAL
24505: IFFALSE 24522
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: CALL_OW 264
24517: PUSH
24518: LD_INT 81
24520: EQUAL
24521: AND
24522: IFFALSE 24543
// MinerDetonateMine ( unit , x , y ) ;
24524: LD_VAR 0 2
24528: PPUSH
24529: LD_VAR 0 4
24533: PPUSH
24534: LD_VAR 0 5
24538: PPUSH
24539: CALL 28185 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24543: LD_VAR 0 1
24547: PUSH
24548: LD_INT 252
24550: EQUAL
24551: IFFALSE 24568
24553: PUSH
24554: LD_VAR 0 2
24558: PPUSH
24559: CALL_OW 264
24563: PUSH
24564: LD_INT 81
24566: EQUAL
24567: AND
24568: IFFALSE 24589
// MinerCreateMinefield ( unit , x , y ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 4
24579: PPUSH
24580: LD_VAR 0 5
24584: PPUSH
24585: CALL 28417 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24589: LD_VAR 0 1
24593: PUSH
24594: LD_INT 253
24596: EQUAL
24597: IFFALSE 24614
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: CALL_OW 257
24609: PUSH
24610: LD_INT 5
24612: EQUAL
24613: AND
24614: IFFALSE 24635
// ComBinocular ( unit , x , y ) ;
24616: LD_VAR 0 2
24620: PPUSH
24621: LD_VAR 0 4
24625: PPUSH
24626: LD_VAR 0 5
24630: PPUSH
24631: CALL 28792 0 3
// if selectedUnit then
24635: LD_VAR 0 3
24639: IFFALSE 24699
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24641: LD_VAR 0 1
24645: PUSH
24646: LD_INT 254
24648: EQUAL
24649: IFFALSE 24666
24651: PUSH
24652: LD_VAR 0 2
24656: PPUSH
24657: CALL_OW 264
24661: PUSH
24662: LD_INT 99
24664: EQUAL
24665: AND
24666: IFFALSE 24683
24668: PUSH
24669: LD_VAR 0 3
24673: PPUSH
24674: CALL_OW 263
24678: PUSH
24679: LD_INT 3
24681: EQUAL
24682: AND
24683: IFFALSE 24699
// HackDestroyVehicle ( unit , selectedUnit ) ;
24685: LD_VAR 0 2
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: CALL 26989 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24699: LD_VAR 0 1
24703: PUSH
24704: LD_INT 255
24706: EQUAL
24707: IFFALSE 24731
24709: PUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: CALL_OW 264
24719: PUSH
24720: LD_INT 14
24722: PUSH
24723: LD_INT 53
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: IN
24730: AND
24731: IFFALSE 24749
24733: PUSH
24734: LD_VAR 0 4
24738: PPUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL_OW 488
24748: AND
24749: IFFALSE 24773
// CutTreeXYR ( unit , x , y , 12 ) ;
24751: LD_VAR 0 2
24755: PPUSH
24756: LD_VAR 0 4
24760: PPUSH
24761: LD_VAR 0 5
24765: PPUSH
24766: LD_INT 12
24768: PPUSH
24769: CALL 24964 0 4
// if cmd = 256 then
24773: LD_VAR 0 1
24777: PUSH
24778: LD_INT 256
24780: EQUAL
24781: IFFALSE 24802
// SetFactoryWaypoint ( unit , x , y ) ;
24783: LD_VAR 0 2
24787: PPUSH
24788: LD_VAR 0 4
24792: PPUSH
24793: LD_VAR 0 5
24797: PPUSH
24798: CALL 74321 0 3
// if cmd = 257 then
24802: LD_VAR 0 1
24806: PUSH
24807: LD_INT 257
24809: EQUAL
24810: IFFALSE 24831
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 4
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: CALL 74817 0 3
// if cmd = 258 then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 258
24838: EQUAL
24839: IFFALSE 24863
// BurnTreeXYR ( unit , x , y , 8 ) ;
24841: LD_VAR 0 2
24845: PPUSH
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: LD_INT 8
24858: PPUSH
24859: CALL 25364 0 4
// end ;
24863: LD_VAR 0 6
24867: RET
// export function ComRadiation ( un ) ; var eff ; begin
24868: LD_INT 0
24870: PPUSH
24871: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 264
24881: PUSH
24882: LD_INT 91
24884: NONEQUAL
24885: IFFALSE 24889
// exit ;
24887: GO 24959
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24889: LD_INT 68
24891: PPUSH
24892: LD_VAR 0 1
24896: PPUSH
24897: CALL_OW 255
24901: PPUSH
24902: CALL_OW 321
24906: PUSH
24907: LD_INT 2
24909: EQUAL
24910: IFFALSE 24922
// eff := 50 else
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 50
24919: ST_TO_ADDR
24920: GO 24930
// eff := 25 ;
24922: LD_ADDR_VAR 0 3
24926: PUSH
24927: LD_INT 25
24929: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 250
24939: PPUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 251
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: CALL_OW 495
// end ;
24959: LD_VAR 0 2
24963: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24964: LD_INT 0
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24975: LD_VAR 0 1
24979: PPUSH
24980: CALL_OW 302
24984: NOT
24985: IFTRUE 25004
24987: PUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: CALL_OW 488
25002: NOT
25003: OR
25004: IFTRUE 25013
25006: PUSH
25007: LD_VAR 0 4
25011: NOT
25012: OR
25013: IFFALSE 25017
// exit ;
25015: GO 25359
// list := [ ] ;
25017: LD_ADDR_VAR 0 13
25021: PUSH
25022: EMPTY
25023: ST_TO_ADDR
// if x - r < 0 then
25024: LD_VAR 0 2
25028: PUSH
25029: LD_VAR 0 4
25033: MINUS
25034: PUSH
25035: LD_INT 0
25037: LESS
25038: IFFALSE 25050
// min_x := 0 else
25040: LD_ADDR_VAR 0 7
25044: PUSH
25045: LD_INT 0
25047: ST_TO_ADDR
25048: GO 25066
// min_x := x - r ;
25050: LD_ADDR_VAR 0 7
25054: PUSH
25055: LD_VAR 0 2
25059: PUSH
25060: LD_VAR 0 4
25064: MINUS
25065: ST_TO_ADDR
// if y - r < 0 then
25066: LD_VAR 0 3
25070: PUSH
25071: LD_VAR 0 4
25075: MINUS
25076: PUSH
25077: LD_INT 0
25079: LESS
25080: IFFALSE 25092
// min_y := 0 else
25082: LD_ADDR_VAR 0 8
25086: PUSH
25087: LD_INT 0
25089: ST_TO_ADDR
25090: GO 25108
// min_y := y - r ;
25092: LD_ADDR_VAR 0 8
25096: PUSH
25097: LD_VAR 0 3
25101: PUSH
25102: LD_VAR 0 4
25106: MINUS
25107: ST_TO_ADDR
// max_x := x + r ;
25108: LD_ADDR_VAR 0 9
25112: PUSH
25113: LD_VAR 0 2
25117: PUSH
25118: LD_VAR 0 4
25122: PLUS
25123: ST_TO_ADDR
// max_y := y + r ;
25124: LD_ADDR_VAR 0 10
25128: PUSH
25129: LD_VAR 0 3
25133: PUSH
25134: LD_VAR 0 4
25138: PLUS
25139: ST_TO_ADDR
// for _x = min_x to max_x do
25140: LD_ADDR_VAR 0 11
25144: PUSH
25145: DOUBLE
25146: LD_VAR 0 7
25150: DEC
25151: ST_TO_ADDR
25152: LD_VAR 0 9
25156: PUSH
25157: FOR_TO
25158: IFFALSE 25277
// for _y = min_y to max_y do
25160: LD_ADDR_VAR 0 12
25164: PUSH
25165: DOUBLE
25166: LD_VAR 0 8
25170: DEC
25171: ST_TO_ADDR
25172: LD_VAR 0 10
25176: PUSH
25177: FOR_TO
25178: IFFALSE 25273
// begin if not ValidHex ( _x , _y ) then
25180: LD_VAR 0 11
25184: PPUSH
25185: LD_VAR 0 12
25189: PPUSH
25190: CALL_OW 488
25194: NOT
25195: IFFALSE 25199
// continue ;
25197: GO 25177
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25199: LD_VAR 0 11
25203: PPUSH
25204: LD_VAR 0 12
25208: PPUSH
25209: CALL_OW 351
25213: IFFALSE 25231
25215: PUSH
25216: LD_VAR 0 11
25220: PPUSH
25221: LD_VAR 0 12
25225: PPUSH
25226: CALL_OW 554
25230: AND
25231: IFFALSE 25271
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25233: LD_ADDR_VAR 0 13
25237: PUSH
25238: LD_VAR 0 13
25242: PPUSH
25243: LD_VAR 0 13
25247: PUSH
25248: LD_INT 1
25250: PLUS
25251: PPUSH
25252: LD_VAR 0 11
25256: PUSH
25257: LD_VAR 0 12
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 2
25270: ST_TO_ADDR
// end ;
25271: GO 25177
25273: POP
25274: POP
25275: GO 25157
25277: POP
25278: POP
// if not list then
25279: LD_VAR 0 13
25283: NOT
25284: IFFALSE 25288
// exit ;
25286: GO 25359
// for i in list do
25288: LD_ADDR_VAR 0 6
25292: PUSH
25293: LD_VAR 0 13
25297: PUSH
25298: FOR_IN
25299: IFFALSE 25357
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25301: LD_VAR 0 1
25305: PPUSH
25306: LD_STRING M
25308: PUSH
25309: LD_VAR 0 6
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: PUSH
25318: LD_VAR 0 6
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: PPUSH
25351: CALL_OW 447
25355: GO 25298
25357: POP
25358: POP
// end ;
25359: LD_VAR 0 5
25363: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
25368: PPUSH
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25376: LD_VAR 0 1
25380: PPUSH
25381: CALL_OW 302
25385: NOT
25386: IFTRUE 25405
25388: PUSH
25389: LD_VAR 0 2
25393: PPUSH
25394: LD_VAR 0 3
25398: PPUSH
25399: CALL_OW 488
25403: NOT
25404: OR
25405: IFTRUE 25414
25407: PUSH
25408: LD_VAR 0 4
25412: NOT
25413: OR
25414: IFFALSE 25418
// exit ;
25416: GO 25935
// list := [ ] ;
25418: LD_ADDR_VAR 0 13
25422: PUSH
25423: EMPTY
25424: ST_TO_ADDR
// if x - r < 0 then
25425: LD_VAR 0 2
25429: PUSH
25430: LD_VAR 0 4
25434: MINUS
25435: PUSH
25436: LD_INT 0
25438: LESS
25439: IFFALSE 25451
// min_x := 0 else
25441: LD_ADDR_VAR 0 7
25445: PUSH
25446: LD_INT 0
25448: ST_TO_ADDR
25449: GO 25467
// min_x := x - r ;
25451: LD_ADDR_VAR 0 7
25455: PUSH
25456: LD_VAR 0 2
25460: PUSH
25461: LD_VAR 0 4
25465: MINUS
25466: ST_TO_ADDR
// if y - r < 0 then
25467: LD_VAR 0 3
25471: PUSH
25472: LD_VAR 0 4
25476: MINUS
25477: PUSH
25478: LD_INT 0
25480: LESS
25481: IFFALSE 25493
// min_y := 0 else
25483: LD_ADDR_VAR 0 8
25487: PUSH
25488: LD_INT 0
25490: ST_TO_ADDR
25491: GO 25509
// min_y := y - r ;
25493: LD_ADDR_VAR 0 8
25497: PUSH
25498: LD_VAR 0 3
25502: PUSH
25503: LD_VAR 0 4
25507: MINUS
25508: ST_TO_ADDR
// max_x := x + r ;
25509: LD_ADDR_VAR 0 9
25513: PUSH
25514: LD_VAR 0 2
25518: PUSH
25519: LD_VAR 0 4
25523: PLUS
25524: ST_TO_ADDR
// max_y := y + r ;
25525: LD_ADDR_VAR 0 10
25529: PUSH
25530: LD_VAR 0 3
25534: PUSH
25535: LD_VAR 0 4
25539: PLUS
25540: ST_TO_ADDR
// for _x = min_x to max_x do
25541: LD_ADDR_VAR 0 11
25545: PUSH
25546: DOUBLE
25547: LD_VAR 0 7
25551: DEC
25552: ST_TO_ADDR
25553: LD_VAR 0 9
25557: PUSH
25558: FOR_TO
25559: IFFALSE 25678
// for _y = min_y to max_y do
25561: LD_ADDR_VAR 0 12
25565: PUSH
25566: DOUBLE
25567: LD_VAR 0 8
25571: DEC
25572: ST_TO_ADDR
25573: LD_VAR 0 10
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25674
// begin if not ValidHex ( _x , _y ) then
25581: LD_VAR 0 11
25585: PPUSH
25586: LD_VAR 0 12
25590: PPUSH
25591: CALL_OW 488
25595: NOT
25596: IFFALSE 25600
// continue ;
25598: GO 25578
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25600: LD_VAR 0 11
25604: PPUSH
25605: LD_VAR 0 12
25609: PPUSH
25610: CALL_OW 351
25614: IFFALSE 25632
25616: PUSH
25617: LD_VAR 0 11
25621: PPUSH
25622: LD_VAR 0 12
25626: PPUSH
25627: CALL_OW 554
25631: AND
25632: IFFALSE 25672
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25634: LD_ADDR_VAR 0 13
25638: PUSH
25639: LD_VAR 0 13
25643: PPUSH
25644: LD_VAR 0 13
25648: PUSH
25649: LD_INT 1
25651: PLUS
25652: PPUSH
25653: LD_VAR 0 11
25657: PUSH
25658: LD_VAR 0 12
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 2
25671: ST_TO_ADDR
// end ;
25672: GO 25578
25674: POP
25675: POP
25676: GO 25558
25678: POP
25679: POP
// if not list then
25680: LD_VAR 0 13
25684: NOT
25685: IFFALSE 25689
// exit ;
25687: GO 25935
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25689: LD_ADDR_VAR 0 13
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: LD_VAR 0 13
25703: PPUSH
25704: LD_INT 1
25706: PPUSH
25707: LD_INT 1
25709: PPUSH
25710: CALL 35702 0 4
25714: ST_TO_ADDR
// ComStop ( flame ) ;
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL_OW 141
// for i in list do
25724: LD_ADDR_VAR 0 6
25728: PUSH
25729: LD_VAR 0 13
25733: PUSH
25734: FOR_IN
25735: IFFALSE 25766
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25737: LD_VAR 0 1
25741: PPUSH
25742: LD_VAR 0 6
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: PPUSH
25751: LD_VAR 0 6
25755: PUSH
25756: LD_INT 2
25758: ARRAY
25759: PPUSH
25760: CALL_OW 176
25764: GO 25734
25766: POP
25767: POP
// repeat wait ( 0 0$1 ) ;
25768: LD_INT 35
25770: PPUSH
25771: CALL_OW 67
// task := GetTaskList ( flame ) ;
25775: LD_ADDR_VAR 0 14
25779: PUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 437
25789: ST_TO_ADDR
// if not task then
25790: LD_VAR 0 14
25794: NOT
25795: IFFALSE 25799
// exit ;
25797: GO 25935
// if task [ 1 ] [ 1 ] <> | then
25799: LD_VAR 0 14
25803: PUSH
25804: LD_INT 1
25806: ARRAY
25807: PUSH
25808: LD_INT 1
25810: ARRAY
25811: PUSH
25812: LD_STRING |
25814: NONEQUAL
25815: IFFALSE 25819
// exit ;
25817: GO 25935
// _x := task [ 1 ] [ 2 ] ;
25819: LD_ADDR_VAR 0 11
25823: PUSH
25824: LD_VAR 0 14
25828: PUSH
25829: LD_INT 1
25831: ARRAY
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25837: LD_ADDR_VAR 0 12
25841: PUSH
25842: LD_VAR 0 14
25846: PUSH
25847: LD_INT 1
25849: ARRAY
25850: PUSH
25851: LD_INT 3
25853: ARRAY
25854: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25855: LD_VAR 0 11
25859: PPUSH
25860: LD_VAR 0 12
25864: PPUSH
25865: CALL_OW 351
25869: NOT
25870: IFTRUE 25889
25872: PUSH
25873: LD_VAR 0 11
25877: PPUSH
25878: LD_VAR 0 12
25882: PPUSH
25883: CALL_OW 554
25887: NOT
25888: OR
25889: IFFALSE 25923
// begin task := Delete ( task , 1 ) ;
25891: LD_ADDR_VAR 0 14
25895: PUSH
25896: LD_VAR 0 14
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 3
25908: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25909: LD_VAR 0 1
25913: PPUSH
25914: LD_VAR 0 14
25918: PPUSH
25919: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25923: LD_VAR 0 1
25927: PPUSH
25928: CALL_OW 314
25932: NOT
25933: IFFALSE 25768
// end ;
25935: LD_VAR 0 5
25939: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25940: LD_EXP 60
25944: NOT
25945: IFFALSE 25995
25947: GO 25949
25949: DISABLE
// begin initHack := true ;
25950: LD_ADDR_EXP 60
25954: PUSH
25955: LD_INT 1
25957: ST_TO_ADDR
// hackTanks := [ ] ;
25958: LD_ADDR_EXP 61
25962: PUSH
25963: EMPTY
25964: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25965: LD_ADDR_EXP 62
25969: PUSH
25970: EMPTY
25971: ST_TO_ADDR
// hackLimit := 3 ;
25972: LD_ADDR_EXP 63
25976: PUSH
25977: LD_INT 3
25979: ST_TO_ADDR
// hackDist := 12 ;
25980: LD_ADDR_EXP 64
25984: PUSH
25985: LD_INT 12
25987: ST_TO_ADDR
// hackCounter := [ ] ;
25988: LD_ADDR_EXP 65
25992: PUSH
25993: EMPTY
25994: ST_TO_ADDR
// end ;
25995: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25996: LD_EXP 60
26000: IFFALSE 26018
26002: PUSH
26003: LD_INT 34
26005: PUSH
26006: LD_INT 99
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PPUSH
26013: CALL_OW 69
26017: AND
26018: IFFALSE 26271
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
26026: PPUSH
// begin enable ;
26027: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26028: LD_ADDR_VAR 0 1
26032: PUSH
26033: LD_INT 34
26035: PUSH
26036: LD_INT 99
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: PUSH
26048: FOR_IN
26049: IFFALSE 26269
// begin if not i in hackTanks then
26051: LD_VAR 0 1
26055: PUSH
26056: LD_EXP 61
26060: IN
26061: NOT
26062: IFFALSE 26145
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26064: LD_ADDR_EXP 61
26068: PUSH
26069: LD_EXP 61
26073: PPUSH
26074: LD_EXP 61
26078: PUSH
26079: LD_INT 1
26081: PLUS
26082: PPUSH
26083: LD_VAR 0 1
26087: PPUSH
26088: CALL_OW 1
26092: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26093: LD_ADDR_EXP 62
26097: PUSH
26098: LD_EXP 62
26102: PPUSH
26103: LD_EXP 62
26107: PUSH
26108: LD_INT 1
26110: PLUS
26111: PPUSH
26112: EMPTY
26113: PPUSH
26114: CALL_OW 1
26118: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26119: LD_ADDR_EXP 65
26123: PUSH
26124: LD_EXP 65
26128: PPUSH
26129: LD_EXP 65
26133: PUSH
26134: LD_INT 1
26136: PLUS
26137: PPUSH
26138: EMPTY
26139: PPUSH
26140: CALL_OW 1
26144: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 302
26154: NOT
26155: IFFALSE 26168
// begin HackUnlinkAll ( i ) ;
26157: LD_VAR 0 1
26161: PPUSH
26162: CALL 26274 0 1
// continue ;
26166: GO 26048
// end ; HackCheckCapturedStatus ( i ) ;
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL 26719 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26177: LD_ADDR_VAR 0 2
26181: PUSH
26182: LD_INT 81
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 255
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 33
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 91
26211: PUSH
26212: LD_VAR 0 1
26216: PUSH
26217: LD_EXP 64
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 50
26229: PUSH
26230: EMPTY
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 69
26243: ST_TO_ADDR
// if not tmp then
26244: LD_VAR 0 2
26248: NOT
26249: IFFALSE 26253
// continue ;
26251: GO 26048
// HackLink ( i , tmp ) ;
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_VAR 0 2
26262: PPUSH
26263: CALL 26410 0 2
// end ;
26267: GO 26048
26269: POP
26270: POP
// end ;
26271: PPOPN 2
26273: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26274: LD_INT 0
26276: PPUSH
26277: PPUSH
26278: PPUSH
// if not hack in hackTanks then
26279: LD_VAR 0 1
26283: PUSH
26284: LD_EXP 61
26288: IN
26289: NOT
26290: IFFALSE 26294
// exit ;
26292: GO 26405
// index := GetElementIndex ( hackTanks , hack ) ;
26294: LD_ADDR_VAR 0 4
26298: PUSH
26299: LD_EXP 61
26303: PPUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL 34997 0 2
26313: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26314: LD_EXP 62
26318: PUSH
26319: LD_VAR 0 4
26323: ARRAY
26324: IFFALSE 26405
// begin for i in hackTanksCaptured [ index ] do
26326: LD_ADDR_VAR 0 3
26330: PUSH
26331: LD_EXP 62
26335: PUSH
26336: LD_VAR 0 4
26340: ARRAY
26341: PUSH
26342: FOR_IN
26343: IFFALSE 26369
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26345: LD_VAR 0 3
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 3
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 235
26367: GO 26342
26369: POP
26370: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26371: LD_ADDR_EXP 62
26375: PUSH
26376: LD_EXP 62
26380: PPUSH
26381: LD_VAR 0 4
26385: PPUSH
26386: EMPTY
26387: PPUSH
26388: CALL_OW 1
26392: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26393: LD_VAR 0 1
26397: PPUSH
26398: LD_INT 0
26400: PPUSH
26401: CALL_OW 505
// end ; end ;
26405: LD_VAR 0 2
26409: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26410: LD_INT 0
26412: PPUSH
26413: PPUSH
26414: PPUSH
// if not hack in hackTanks or not vehicles then
26415: LD_VAR 0 1
26419: PUSH
26420: LD_EXP 61
26424: IN
26425: NOT
26426: IFTRUE 26435
26428: PUSH
26429: LD_VAR 0 2
26433: NOT
26434: OR
26435: IFFALSE 26439
// exit ;
26437: GO 26714
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26439: LD_ADDR_VAR 0 2
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: LD_VAR 0 2
26453: PPUSH
26454: LD_INT 1
26456: PPUSH
26457: LD_INT 1
26459: PPUSH
26460: CALL 35649 0 4
26464: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26465: LD_ADDR_VAR 0 5
26469: PUSH
26470: LD_EXP 61
26474: PPUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL 34997 0 2
26484: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26485: LD_EXP 62
26489: PUSH
26490: LD_VAR 0 5
26494: ARRAY
26495: PUSH
26496: LD_EXP 63
26500: LESS
26501: IFFALSE 26690
// begin for i := 1 to vehicles do
26503: LD_ADDR_VAR 0 4
26507: PUSH
26508: DOUBLE
26509: LD_INT 1
26511: DEC
26512: ST_TO_ADDR
26513: LD_VAR 0 2
26517: PUSH
26518: FOR_TO
26519: IFFALSE 26688
// begin if hackTanksCaptured [ index ] = hackLimit then
26521: LD_EXP 62
26525: PUSH
26526: LD_VAR 0 5
26530: ARRAY
26531: PUSH
26532: LD_EXP 63
26536: EQUAL
26537: IFFALSE 26541
// break ;
26539: GO 26688
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26541: LD_ADDR_EXP 65
26545: PUSH
26546: LD_EXP 65
26550: PPUSH
26551: LD_VAR 0 5
26555: PPUSH
26556: LD_EXP 65
26560: PUSH
26561: LD_VAR 0 5
26565: ARRAY
26566: PUSH
26567: LD_INT 1
26569: PLUS
26570: PPUSH
26571: CALL_OW 1
26575: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26576: LD_ADDR_EXP 62
26580: PUSH
26581: LD_EXP 62
26585: PPUSH
26586: LD_VAR 0 5
26590: PUSH
26591: LD_EXP 62
26595: PUSH
26596: LD_VAR 0 5
26600: ARRAY
26601: PUSH
26602: LD_INT 1
26604: PLUS
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: LD_VAR 0 2
26614: PUSH
26615: LD_VAR 0 4
26619: ARRAY
26620: PUSH
26621: LD_VAR 0 2
26625: PUSH
26626: LD_VAR 0 4
26630: ARRAY
26631: PPUSH
26632: CALL_OW 255
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PPUSH
26641: CALL 35214 0 3
26645: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26646: LD_VAR 0 2
26650: PUSH
26651: LD_VAR 0 4
26655: ARRAY
26656: PPUSH
26657: LD_VAR 0 1
26661: PPUSH
26662: CALL_OW 255
26666: PPUSH
26667: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26671: LD_VAR 0 2
26675: PUSH
26676: LD_VAR 0 4
26680: ARRAY
26681: PPUSH
26682: CALL_OW 141
// end ;
26686: GO 26518
26688: POP
26689: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26690: LD_VAR 0 1
26694: PPUSH
26695: LD_EXP 62
26699: PUSH
26700: LD_VAR 0 5
26704: ARRAY
26705: PUSH
26706: LD_INT 0
26708: PLUS
26709: PPUSH
26710: CALL_OW 505
// end ;
26714: LD_VAR 0 3
26718: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26719: LD_INT 0
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
// if not hack in hackTanks then
26725: LD_VAR 0 1
26729: PUSH
26730: LD_EXP 61
26734: IN
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26984
// index := GetElementIndex ( hackTanks , hack ) ;
26740: LD_ADDR_VAR 0 4
26744: PUSH
26745: LD_EXP 61
26749: PPUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL 34997 0 2
26759: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26760: LD_ADDR_VAR 0 3
26764: PUSH
26765: DOUBLE
26766: LD_EXP 62
26770: PUSH
26771: LD_VAR 0 4
26775: ARRAY
26776: INC
26777: ST_TO_ADDR
26778: LD_INT 1
26780: PUSH
26781: FOR_DOWNTO
26782: IFFALSE 26958
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26784: LD_ADDR_VAR 0 5
26788: PUSH
26789: LD_EXP 62
26793: PUSH
26794: LD_VAR 0 4
26798: ARRAY
26799: PUSH
26800: LD_VAR 0 3
26804: ARRAY
26805: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26806: LD_VAR 0 5
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: CALL_OW 302
26819: NOT
26820: IFTRUE 26848
26822: PUSH
26823: LD_VAR 0 5
26827: PUSH
26828: LD_INT 1
26830: ARRAY
26831: PPUSH
26832: CALL_OW 255
26836: PUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 255
26846: NONEQUAL
26847: OR
26848: IFFALSE 26956
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26850: LD_VAR 0 5
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 305
26863: IFFALSE 26891
26865: PUSH
26866: LD_VAR 0 5
26870: PUSH
26871: LD_INT 1
26873: ARRAY
26874: PPUSH
26875: CALL_OW 255
26879: PUSH
26880: LD_VAR 0 1
26884: PPUSH
26885: CALL_OW 255
26889: EQUAL
26890: AND
26891: IFFALSE 26915
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26893: LD_VAR 0 5
26897: PUSH
26898: LD_INT 1
26900: ARRAY
26901: PPUSH
26902: LD_VAR 0 5
26906: PUSH
26907: LD_INT 2
26909: ARRAY
26910: PPUSH
26911: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26915: LD_ADDR_EXP 62
26919: PUSH
26920: LD_EXP 62
26924: PPUSH
26925: LD_VAR 0 4
26929: PPUSH
26930: LD_EXP 62
26934: PUSH
26935: LD_VAR 0 4
26939: ARRAY
26940: PPUSH
26941: LD_VAR 0 3
26945: PPUSH
26946: CALL_OW 3
26950: PPUSH
26951: CALL_OW 1
26955: ST_TO_ADDR
// end ; end ;
26956: GO 26781
26958: POP
26959: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26960: LD_VAR 0 1
26964: PPUSH
26965: LD_EXP 62
26969: PUSH
26970: LD_VAR 0 4
26974: ARRAY
26975: PUSH
26976: LD_INT 0
26978: PLUS
26979: PPUSH
26980: CALL_OW 505
// end ;
26984: LD_VAR 0 2
26988: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26989: LD_INT 0
26991: PPUSH
26992: PPUSH
26993: PPUSH
26994: PPUSH
// if not hack in hackTanks then
26995: LD_VAR 0 1
26999: PUSH
27000: LD_EXP 61
27004: IN
27005: NOT
27006: IFFALSE 27010
// exit ;
27008: GO 27095
// index := GetElementIndex ( hackTanks , hack ) ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_EXP 61
27019: PPUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL 34997 0 2
27029: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27030: LD_ADDR_VAR 0 4
27034: PUSH
27035: DOUBLE
27036: LD_INT 1
27038: DEC
27039: ST_TO_ADDR
27040: LD_EXP 62
27044: PUSH
27045: LD_VAR 0 5
27049: ARRAY
27050: PUSH
27051: FOR_TO
27052: IFFALSE 27093
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27054: LD_EXP 62
27058: PUSH
27059: LD_VAR 0 5
27063: ARRAY
27064: PUSH
27065: LD_VAR 0 4
27069: ARRAY
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PUSH
27075: LD_VAR 0 2
27079: EQUAL
27080: IFFALSE 27091
// KillUnit ( vehicle ) ;
27082: LD_VAR 0 2
27086: PPUSH
27087: CALL_OW 66
27091: GO 27051
27093: POP
27094: POP
// end ;
27095: LD_VAR 0 3
27099: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
27100: LD_EXP 66
27104: NOT
27105: IFFALSE 27238
27107: GO 27109
27109: DISABLE
27110: LD_INT 0
27112: PPUSH
// begin initMiner := true ;
27113: LD_ADDR_EXP 66
27117: PUSH
27118: LD_INT 1
27120: ST_TO_ADDR
// minersList := [ ] ;
27121: LD_ADDR_EXP 67
27125: PUSH
27126: EMPTY
27127: ST_TO_ADDR
// minerMinesList := [ ] ;
27128: LD_ADDR_EXP 68
27132: PUSH
27133: EMPTY
27134: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
27135: LD_ADDR_EXP 69
27139: PUSH
27140: LD_INT 6
27142: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27143: LD_ADDR_VAR 0 1
27147: PUSH
27148: LD_INT 34
27150: PUSH
27151: LD_INT 81
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PPUSH
27158: CALL_OW 69
27162: PUSH
27163: FOR_IN
27164: IFFALSE 27236
// begin if not i in minersList then
27166: LD_VAR 0 1
27170: PUSH
27171: LD_EXP 67
27175: IN
27176: NOT
27177: IFFALSE 27234
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27179: LD_ADDR_EXP 67
27183: PUSH
27184: LD_EXP 67
27188: PPUSH
27189: LD_EXP 67
27193: PUSH
27194: LD_INT 1
27196: PLUS
27197: PPUSH
27198: LD_VAR 0 1
27202: PPUSH
27203: CALL_OW 1
27207: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27208: LD_ADDR_EXP 68
27212: PUSH
27213: LD_EXP 68
27217: PPUSH
27218: LD_EXP 68
27222: PUSH
27223: LD_INT 1
27225: PLUS
27226: PPUSH
27227: EMPTY
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
// end end ;
27234: GO 27163
27236: POP
27237: POP
// end ;
27238: PPOPN 1
27240: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
27241: LD_EXP 66
27245: IFFALSE 27276
27247: PUSH
27248: LD_EXP 68
27252: PPUSH
27253: CALL 32296 0 1
27257: IFTRUE 27275
27259: PUSH
27260: LD_INT 34
27262: PUSH
27263: LD_INT 81
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PPUSH
27270: CALL_OW 69
27274: OR
27275: AND
27276: IFFALSE 27775
27278: GO 27280
27280: DISABLE
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
// begin enable ;
27287: ENABLE
// for i := minerMinesList downto 1 do
27288: LD_ADDR_VAR 0 1
27292: PUSH
27293: DOUBLE
27294: LD_EXP 68
27298: INC
27299: ST_TO_ADDR
27300: LD_INT 1
27302: PUSH
27303: FOR_DOWNTO
27304: IFFALSE 27773
// begin if IsLive ( minersList [ i ] ) then
27306: LD_EXP 67
27310: PUSH
27311: LD_VAR 0 1
27315: ARRAY
27316: PPUSH
27317: CALL_OW 300
27321: IFFALSE 27354
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
27323: LD_EXP 67
27327: PUSH
27328: LD_VAR 0 1
27332: ARRAY
27333: PPUSH
27334: LD_EXP 68
27338: PUSH
27339: LD_VAR 0 1
27343: ARRAY
27344: PPUSH
27345: CALL 32296 0 1
27349: PPUSH
27350: CALL_OW 505
// if not minerMinesList [ i ] then
27354: LD_EXP 68
27358: PUSH
27359: LD_VAR 0 1
27363: ARRAY
27364: NOT
27365: IFFALSE 27369
// continue ;
27367: GO 27303
// for j := minerMinesList [ i ] downto 1 do
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: DOUBLE
27375: LD_EXP 68
27379: PUSH
27380: LD_VAR 0 1
27384: ARRAY
27385: INC
27386: ST_TO_ADDR
27387: LD_INT 1
27389: PUSH
27390: FOR_DOWNTO
27391: IFFALSE 27769
// begin side := GetSide ( minersList [ i ] ) ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_EXP 67
27402: PUSH
27403: LD_VAR 0 1
27407: ARRAY
27408: PPUSH
27409: CALL_OW 255
27413: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
27414: LD_EXP 67
27418: PUSH
27419: LD_VAR 0 1
27423: ARRAY
27424: PPUSH
27425: CALL_OW 301
27429: IFTRUE 27449
27431: PUSH
27432: LD_EXP 67
27436: PUSH
27437: LD_VAR 0 1
27441: ARRAY
27442: PPUSH
27443: CALL_OW 305
27447: NOT
27448: OR
27449: IFFALSE 27540
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27451: LD_EXP 68
27455: PUSH
27456: LD_VAR 0 1
27460: ARRAY
27461: PUSH
27462: LD_VAR 0 2
27466: ARRAY
27467: PUSH
27468: LD_INT 1
27470: ARRAY
27471: PPUSH
27472: LD_EXP 68
27476: PUSH
27477: LD_VAR 0 1
27481: ARRAY
27482: PUSH
27483: LD_VAR 0 2
27487: ARRAY
27488: PUSH
27489: LD_INT 2
27491: ARRAY
27492: PPUSH
27493: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27497: LD_ADDR_EXP 68
27501: PUSH
27502: LD_EXP 68
27506: PPUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: LD_EXP 68
27516: PUSH
27517: LD_VAR 0 1
27521: ARRAY
27522: PPUSH
27523: LD_VAR 0 2
27527: PPUSH
27528: CALL_OW 3
27532: PPUSH
27533: CALL_OW 1
27537: ST_TO_ADDR
// continue ;
27538: GO 27390
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27540: LD_ADDR_VAR 0 4
27544: PUSH
27545: LD_EXP 68
27549: PUSH
27550: LD_VAR 0 1
27554: ARRAY
27555: PUSH
27556: LD_VAR 0 2
27560: ARRAY
27561: PUSH
27562: LD_INT 1
27564: ARRAY
27565: PPUSH
27566: LD_EXP 68
27570: PUSH
27571: LD_VAR 0 1
27575: ARRAY
27576: PUSH
27577: LD_VAR 0 2
27581: ARRAY
27582: PUSH
27583: LD_INT 2
27585: ARRAY
27586: PPUSH
27587: CALL_OW 428
27591: ST_TO_ADDR
// if not tmp then
27592: LD_VAR 0 4
27596: NOT
27597: IFFALSE 27601
// continue ;
27599: GO 27390
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27601: LD_VAR 0 4
27605: PUSH
27606: LD_INT 81
27608: PUSH
27609: LD_VAR 0 3
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PPUSH
27618: CALL_OW 69
27622: IN
27623: IFFALSE 27673
27625: PUSH
27626: LD_EXP 68
27630: PUSH
27631: LD_VAR 0 1
27635: ARRAY
27636: PUSH
27637: LD_VAR 0 2
27641: ARRAY
27642: PUSH
27643: LD_INT 1
27645: ARRAY
27646: PPUSH
27647: LD_EXP 68
27651: PUSH
27652: LD_VAR 0 1
27656: ARRAY
27657: PUSH
27658: LD_VAR 0 2
27662: ARRAY
27663: PUSH
27664: LD_INT 2
27666: ARRAY
27667: PPUSH
27668: CALL_OW 458
27672: AND
27673: IFFALSE 27767
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27675: LD_EXP 68
27679: PUSH
27680: LD_VAR 0 1
27684: ARRAY
27685: PUSH
27686: LD_VAR 0 2
27690: ARRAY
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PPUSH
27696: LD_EXP 68
27700: PUSH
27701: LD_VAR 0 1
27705: ARRAY
27706: PUSH
27707: LD_VAR 0 2
27711: ARRAY
27712: PUSH
27713: LD_INT 2
27715: ARRAY
27716: PPUSH
27717: LD_VAR 0 3
27721: PPUSH
27722: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27726: LD_ADDR_EXP 68
27730: PUSH
27731: LD_EXP 68
27735: PPUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: LD_EXP 68
27745: PUSH
27746: LD_VAR 0 1
27750: ARRAY
27751: PPUSH
27752: LD_VAR 0 2
27756: PPUSH
27757: CALL_OW 3
27761: PPUSH
27762: CALL_OW 1
27766: ST_TO_ADDR
// end ; end ;
27767: GO 27390
27769: POP
27770: POP
// end ;
27771: GO 27303
27773: POP
27774: POP
// end ;
27775: PPOPN 4
27777: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
27778: LD_INT 0
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
// result := false ;
27784: LD_ADDR_VAR 0 4
27788: PUSH
27789: LD_INT 0
27791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27792: LD_VAR 0 1
27796: PPUSH
27797: CALL_OW 264
27801: PUSH
27802: LD_INT 81
27804: EQUAL
27805: NOT
27806: IFFALSE 27810
// exit ;
27808: GO 28180
// side := GetSide ( unit ) ;
27810: LD_ADDR_VAR 0 6
27814: PUSH
27815: LD_VAR 0 1
27819: PPUSH
27820: CALL_OW 255
27824: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
27825: LD_ADDR_VAR 0 5
27829: PUSH
27830: LD_EXP 67
27834: PPUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL 34997 0 2
27844: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27845: LD_EXP 68
27849: PUSH
27850: LD_VAR 0 5
27854: ARRAY
27855: PUSH
27856: LD_EXP 69
27860: GREATEREQUAL
27861: IFFALSE 27865
// exit ;
27863: GO 28180
// ComMoveXY ( unit , x , y ) ;
27865: LD_VAR 0 1
27869: PPUSH
27870: LD_VAR 0 2
27874: PPUSH
27875: LD_VAR 0 3
27879: PPUSH
27880: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27884: LD_INT 35
27886: PPUSH
27887: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27891: LD_VAR 0 1
27895: PPUSH
27896: LD_VAR 0 2
27900: PPUSH
27901: LD_VAR 0 3
27905: PPUSH
27906: CALL 67043 0 3
27910: NOT
27911: IFFALSE 27924
27913: PUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: CALL_OW 314
27923: AND
27924: IFFALSE 27928
// exit ;
27926: GO 28180
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27928: LD_VAR 0 2
27932: PPUSH
27933: LD_VAR 0 3
27937: PPUSH
27938: CALL_OW 428
27942: PUSH
27943: LD_VAR 0 1
27947: EQUAL
27948: IFFALSE 27962
27950: PUSH
27951: LD_VAR 0 1
27955: PPUSH
27956: CALL_OW 314
27960: NOT
27961: AND
27962: IFFALSE 27884
// if MineAtPos ( x , y ) then
27964: LD_VAR 0 2
27968: PPUSH
27969: LD_VAR 0 3
27973: PPUSH
27974: CALL_OW 458
27978: IFFALSE 27982
// exit ;
27980: GO 28180
// if your_side = side then
27982: LD_OWVAR 2
27986: PUSH
27987: LD_VAR 0 6
27991: EQUAL
27992: IFFALSE 28011
// PlaySoundXY ( x , y , PlantMine ) ;
27994: LD_VAR 0 2
27998: PPUSH
27999: LD_VAR 0 3
28003: PPUSH
28004: LD_STRING PlantMine
28006: PPUSH
28007: CALL_OW 366
// repeat wait ( 1 ) ;
28011: LD_INT 1
28013: PPUSH
28014: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
28018: LD_VAR 0 2
28022: PPUSH
28023: LD_VAR 0 3
28027: PPUSH
28028: LD_VAR 0 6
28032: PPUSH
28033: LD_INT 0
28035: PPUSH
28036: CALL_OW 454
28040: IFFALSE 28011
// if MineAtPos ( x , y ) then
28042: LD_VAR 0 2
28046: PPUSH
28047: LD_VAR 0 3
28051: PPUSH
28052: CALL_OW 458
28056: IFFALSE 28172
// begin for i in minerMinesList [ index ] do
28058: LD_ADDR_VAR 0 7
28062: PUSH
28063: LD_EXP 68
28067: PUSH
28068: LD_VAR 0 5
28072: ARRAY
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28117
// if i [ 1 ] = x and i [ 2 ] = y then
28077: LD_VAR 0 7
28081: PUSH
28082: LD_INT 1
28084: ARRAY
28085: PUSH
28086: LD_VAR 0 2
28090: EQUAL
28091: IFFALSE 28109
28093: PUSH
28094: LD_VAR 0 7
28098: PUSH
28099: LD_INT 2
28101: ARRAY
28102: PUSH
28103: LD_VAR 0 3
28107: EQUAL
28108: AND
28109: IFFALSE 28115
// exit ;
28111: POP
28112: POP
28113: GO 28180
28115: GO 28074
28117: POP
28118: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28119: LD_ADDR_EXP 68
28123: PUSH
28124: LD_EXP 68
28128: PPUSH
28129: LD_VAR 0 5
28133: PUSH
28134: LD_EXP 68
28138: PUSH
28139: LD_VAR 0 5
28143: ARRAY
28144: PUSH
28145: LD_INT 1
28147: PLUS
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PPUSH
28153: LD_VAR 0 2
28157: PUSH
28158: LD_VAR 0 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL 35214 0 3
28171: ST_TO_ADDR
// end ; result := true ;
28172: LD_ADDR_VAR 0 4
28176: PUSH
28177: LD_INT 1
28179: ST_TO_ADDR
// end ;
28180: LD_VAR 0 4
28184: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28185: LD_INT 0
28187: PPUSH
28188: PPUSH
28189: PPUSH
// if not unit in minersList then
28190: LD_VAR 0 1
28194: PUSH
28195: LD_EXP 67
28199: IN
28200: NOT
28201: IFFALSE 28205
// exit ;
28203: GO 28412
// index := GetElementIndex ( minersList , unit ) ;
28205: LD_ADDR_VAR 0 6
28209: PUSH
28210: LD_EXP 67
28214: PPUSH
28215: LD_VAR 0 1
28219: PPUSH
28220: CALL 34997 0 2
28224: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28225: LD_ADDR_VAR 0 5
28229: PUSH
28230: DOUBLE
28231: LD_EXP 68
28235: PUSH
28236: LD_VAR 0 6
28240: ARRAY
28241: INC
28242: ST_TO_ADDR
28243: LD_INT 1
28245: PUSH
28246: FOR_DOWNTO
28247: IFFALSE 28410
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28249: LD_EXP 68
28253: PUSH
28254: LD_VAR 0 6
28258: ARRAY
28259: PUSH
28260: LD_VAR 0 5
28264: ARRAY
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PPUSH
28270: LD_EXP 68
28274: PUSH
28275: LD_VAR 0 6
28279: ARRAY
28280: PUSH
28281: LD_VAR 0 5
28285: ARRAY
28286: PUSH
28287: LD_INT 2
28289: ARRAY
28290: PPUSH
28291: LD_VAR 0 2
28295: PPUSH
28296: LD_VAR 0 3
28300: PPUSH
28301: CALL_OW 298
28305: PUSH
28306: LD_INT 6
28308: LESS
28309: IFFALSE 28408
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28311: LD_EXP 68
28315: PUSH
28316: LD_VAR 0 6
28320: ARRAY
28321: PUSH
28322: LD_VAR 0 5
28326: ARRAY
28327: PUSH
28328: LD_INT 1
28330: ARRAY
28331: PPUSH
28332: LD_EXP 68
28336: PUSH
28337: LD_VAR 0 6
28341: ARRAY
28342: PUSH
28343: LD_VAR 0 5
28347: ARRAY
28348: PUSH
28349: LD_INT 2
28351: ARRAY
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 255
28362: PPUSH
28363: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28367: LD_ADDR_EXP 68
28371: PUSH
28372: LD_EXP 68
28376: PPUSH
28377: LD_VAR 0 6
28381: PPUSH
28382: LD_EXP 68
28386: PUSH
28387: LD_VAR 0 6
28391: ARRAY
28392: PPUSH
28393: LD_VAR 0 5
28397: PPUSH
28398: CALL_OW 3
28402: PPUSH
28403: CALL_OW 1
28407: ST_TO_ADDR
// end ; end ;
28408: GO 28246
28410: POP
28411: POP
// end ;
28412: LD_VAR 0 4
28416: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28417: LD_INT 0
28419: PPUSH
28420: PPUSH
28421: PPUSH
28422: PPUSH
28423: PPUSH
28424: PPUSH
28425: PPUSH
28426: PPUSH
28427: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 264
28437: PUSH
28438: LD_INT 81
28440: EQUAL
28441: NOT
28442: IFTRUE 28457
28444: PUSH
28445: LD_VAR 0 1
28449: PUSH
28450: LD_EXP 67
28454: IN
28455: NOT
28456: OR
28457: IFFALSE 28461
// exit ;
28459: GO 28787
// index := GetElementIndex ( minersList , unit ) ;
28461: LD_ADDR_VAR 0 6
28465: PUSH
28466: LD_EXP 67
28470: PPUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL 34997 0 2
28480: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28481: LD_ADDR_VAR 0 8
28485: PUSH
28486: LD_EXP 69
28490: PUSH
28491: LD_EXP 68
28495: PUSH
28496: LD_VAR 0 6
28500: ARRAY
28501: MINUS
28502: ST_TO_ADDR
// if not minesFreeAmount then
28503: LD_VAR 0 8
28507: NOT
28508: IFFALSE 28512
// exit ;
28510: GO 28787
// tmp := [ ] ;
28512: LD_ADDR_VAR 0 7
28516: PUSH
28517: EMPTY
28518: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28519: LD_ADDR_VAR 0 5
28523: PUSH
28524: DOUBLE
28525: LD_INT 1
28527: DEC
28528: ST_TO_ADDR
28529: LD_VAR 0 8
28533: PUSH
28534: FOR_TO
28535: IFFALSE 28734
// begin _d := rand ( 0 , 5 ) ;
28537: LD_ADDR_VAR 0 11
28541: PUSH
28542: LD_INT 0
28544: PPUSH
28545: LD_INT 5
28547: PPUSH
28548: CALL_OW 12
28552: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28553: LD_ADDR_VAR 0 12
28557: PUSH
28558: LD_INT 2
28560: PPUSH
28561: LD_INT 6
28563: PPUSH
28564: CALL_OW 12
28568: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28569: LD_ADDR_VAR 0 9
28573: PUSH
28574: LD_VAR 0 2
28578: PPUSH
28579: LD_VAR 0 11
28583: PPUSH
28584: LD_VAR 0 12
28588: PPUSH
28589: CALL_OW 272
28593: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28594: LD_ADDR_VAR 0 10
28598: PUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: LD_VAR 0 11
28608: PPUSH
28609: LD_VAR 0 12
28613: PPUSH
28614: CALL_OW 273
28618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28619: LD_VAR 0 9
28623: PPUSH
28624: LD_VAR 0 10
28628: PPUSH
28629: CALL_OW 488
28633: IFFALSE 28657
28635: PUSH
28636: LD_VAR 0 9
28640: PUSH
28641: LD_VAR 0 10
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_VAR 0 7
28654: IN
28655: NOT
28656: AND
28657: IFFALSE 28676
28659: PUSH
28660: LD_VAR 0 9
28664: PPUSH
28665: LD_VAR 0 10
28669: PPUSH
28670: CALL_OW 458
28674: NOT
28675: AND
28676: IFFALSE 28718
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28678: LD_ADDR_VAR 0 7
28682: PUSH
28683: LD_VAR 0 7
28687: PPUSH
28688: LD_VAR 0 7
28692: PUSH
28693: LD_INT 1
28695: PLUS
28696: PPUSH
28697: LD_VAR 0 9
28701: PUSH
28702: LD_VAR 0 10
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 1
28715: ST_TO_ADDR
28716: GO 28732
// i := i - 1 ;
28718: LD_ADDR_VAR 0 5
28722: PUSH
28723: LD_VAR 0 5
28727: PUSH
28728: LD_INT 1
28730: MINUS
28731: ST_TO_ADDR
// end ;
28732: GO 28534
28734: POP
28735: POP
// for i in tmp do
28736: LD_ADDR_VAR 0 5
28740: PUSH
28741: LD_VAR 0 7
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28785
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28749: LD_VAR 0 1
28753: PPUSH
28754: LD_VAR 0 5
28758: PUSH
28759: LD_INT 1
28761: ARRAY
28762: PPUSH
28763: LD_VAR 0 5
28767: PUSH
28768: LD_INT 2
28770: ARRAY
28771: PPUSH
28772: CALL 27778 0 3
28776: NOT
28777: IFFALSE 28783
// exit ;
28779: POP
28780: POP
28781: GO 28787
28783: GO 28746
28785: POP
28786: POP
// end ;
28787: LD_VAR 0 4
28791: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28792: LD_INT 0
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
// if GetClass ( unit ) <> class_sniper then
28803: LD_VAR 0 1
28807: PPUSH
28808: CALL_OW 257
28812: PUSH
28813: LD_INT 5
28815: NONEQUAL
28816: IFFALSE 28820
// exit ;
28818: GO 29290
// dist := 8 ;
28820: LD_ADDR_VAR 0 5
28824: PUSH
28825: LD_INT 8
28827: ST_TO_ADDR
// viewRange := 12 ;
28828: LD_ADDR_VAR 0 8
28832: PUSH
28833: LD_INT 12
28835: ST_TO_ADDR
// side := GetSide ( unit ) ;
28836: LD_ADDR_VAR 0 6
28840: PUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 255
28850: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28851: LD_INT 61
28853: PPUSH
28854: LD_VAR 0 6
28858: PPUSH
28859: CALL_OW 321
28863: PUSH
28864: LD_INT 2
28866: EQUAL
28867: IFFALSE 28877
// viewRange := 16 ;
28869: LD_ADDR_VAR 0 8
28873: PUSH
28874: LD_INT 16
28876: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28877: LD_VAR 0 1
28881: PPUSH
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_VAR 0 3
28891: PPUSH
28892: CALL_OW 297
28896: PUSH
28897: LD_VAR 0 5
28901: GREATER
28902: IFFALSE 28981
// begin ComMoveXY ( unit , x , y ) ;
28904: LD_VAR 0 1
28908: PPUSH
28909: LD_VAR 0 2
28913: PPUSH
28914: LD_VAR 0 3
28918: PPUSH
28919: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28923: LD_INT 35
28925: PPUSH
28926: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28930: LD_VAR 0 1
28934: PPUSH
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_VAR 0 3
28944: PPUSH
28945: CALL 67043 0 3
28949: NOT
28950: IFFALSE 28954
// exit ;
28952: GO 29290
// until GetDistUnitXY ( unit , x , y ) < dist ;
28954: LD_VAR 0 1
28958: PPUSH
28959: LD_VAR 0 2
28963: PPUSH
28964: LD_VAR 0 3
28968: PPUSH
28969: CALL_OW 297
28973: PUSH
28974: LD_VAR 0 5
28978: LESS
28979: IFFALSE 28923
// end ; ComTurnXY ( unit , x , y ) ;
28981: LD_VAR 0 1
28985: PPUSH
28986: LD_VAR 0 2
28990: PPUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: CALL_OW 118
// repeat if Multiplayer then
29000: LD_OWVAR 4
29004: IFFALSE 29015
// wait ( 35 ) else
29006: LD_INT 35
29008: PPUSH
29009: CALL_OW 67
29013: GO 29022
// wait ( 5 ) ;
29015: LD_INT 5
29017: PPUSH
29018: CALL_OW 67
// _d := GetDir ( unit ) ;
29022: LD_ADDR_VAR 0 11
29026: PUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: CALL_OW 254
29036: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29037: LD_ADDR_VAR 0 7
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 250
29051: PPUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 251
29061: PPUSH
29062: LD_VAR 0 2
29066: PPUSH
29067: LD_VAR 0 3
29071: PPUSH
29072: CALL 69679 0 4
29076: ST_TO_ADDR
// until dir = _d ;
29077: LD_VAR 0 7
29081: PUSH
29082: LD_VAR 0 11
29086: EQUAL
29087: IFFALSE 29000
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29089: LD_ADDR_VAR 0 9
29093: PUSH
29094: LD_VAR 0 1
29098: PPUSH
29099: CALL_OW 250
29103: PPUSH
29104: LD_VAR 0 7
29108: PPUSH
29109: LD_VAR 0 5
29113: PPUSH
29114: CALL_OW 272
29118: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
29119: LD_ADDR_VAR 0 10
29123: PUSH
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL_OW 251
29133: PPUSH
29134: LD_VAR 0 7
29138: PPUSH
29139: LD_VAR 0 5
29143: PPUSH
29144: CALL_OW 273
29148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29149: LD_VAR 0 9
29153: PPUSH
29154: LD_VAR 0 10
29158: PPUSH
29159: CALL_OW 488
29163: NOT
29164: IFFALSE 29168
// exit ;
29166: GO 29290
// ComAnimCustom ( unit , 1 ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_INT 1
29175: PPUSH
29176: CALL_OW 592
// p := 0 ;
29180: LD_ADDR_VAR 0 12
29184: PUSH
29185: LD_INT 0
29187: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29188: LD_VAR 0 9
29192: PPUSH
29193: LD_VAR 0 10
29197: PPUSH
29198: LD_VAR 0 6
29202: PPUSH
29203: LD_VAR 0 8
29207: PPUSH
29208: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
29212: LD_INT 35
29214: PPUSH
29215: CALL_OW 67
// p := Inc ( p ) ;
29219: LD_ADDR_VAR 0 12
29223: PUSH
29224: LD_VAR 0 12
29228: PPUSH
29229: CALL 69635 0 1
29233: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
29234: LD_VAR 0 12
29238: PUSH
29239: LD_INT 3
29241: EQUAL
29242: IFTRUE 29256
29244: PUSH
29245: LD_VAR 0 1
29249: PPUSH
29250: CALL_OW 302
29254: NOT
29255: OR
29256: IFTRUE 29269
29258: PUSH
29259: LD_VAR 0 1
29263: PPUSH
29264: CALL_OW 301
29268: OR
29269: IFFALSE 29212
// RemoveSeeing ( _x , _y , side ) ;
29271: LD_VAR 0 9
29275: PPUSH
29276: LD_VAR 0 10
29280: PPUSH
29281: LD_VAR 0 6
29285: PPUSH
29286: CALL_OW 331
// end ;
29290: LD_VAR 0 4
29294: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
29295: LD_INT 0
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
// if not unit then
29308: LD_VAR 0 1
29312: NOT
29313: IFFALSE 29317
// exit ;
29315: GO 29588
// side := GetSide ( unit ) ;
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL_OW 255
29331: ST_TO_ADDR
// x := GetX ( unit ) ;
29332: LD_ADDR_VAR 0 5
29336: PUSH
29337: LD_VAR 0 1
29341: PPUSH
29342: CALL_OW 250
29346: ST_TO_ADDR
// y := GetY ( unit ) ;
29347: LD_ADDR_VAR 0 6
29351: PUSH
29352: LD_VAR 0 1
29356: PPUSH
29357: CALL_OW 251
29361: ST_TO_ADDR
// r := 8 ;
29362: LD_ADDR_VAR 0 4
29366: PUSH
29367: LD_INT 8
29369: ST_TO_ADDR
// if x - r < 0 then
29370: LD_VAR 0 5
29374: PUSH
29375: LD_VAR 0 4
29379: MINUS
29380: PUSH
29381: LD_INT 0
29383: LESS
29384: IFFALSE 29396
// min_x := 0 else
29386: LD_ADDR_VAR 0 7
29390: PUSH
29391: LD_INT 0
29393: ST_TO_ADDR
29394: GO 29412
// min_x := x - r ;
29396: LD_ADDR_VAR 0 7
29400: PUSH
29401: LD_VAR 0 5
29405: PUSH
29406: LD_VAR 0 4
29410: MINUS
29411: ST_TO_ADDR
// if y - r < 0 then
29412: LD_VAR 0 6
29416: PUSH
29417: LD_VAR 0 4
29421: MINUS
29422: PUSH
29423: LD_INT 0
29425: LESS
29426: IFFALSE 29438
// min_y := 0 else
29428: LD_ADDR_VAR 0 8
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
29436: GO 29454
// min_y := y - r ;
29438: LD_ADDR_VAR 0 8
29442: PUSH
29443: LD_VAR 0 6
29447: PUSH
29448: LD_VAR 0 4
29452: MINUS
29453: ST_TO_ADDR
// max_x := x + r ;
29454: LD_ADDR_VAR 0 9
29458: PUSH
29459: LD_VAR 0 5
29463: PUSH
29464: LD_VAR 0 4
29468: PLUS
29469: ST_TO_ADDR
// max_y := y + r ;
29470: LD_ADDR_VAR 0 10
29474: PUSH
29475: LD_VAR 0 6
29479: PUSH
29480: LD_VAR 0 4
29484: PLUS
29485: ST_TO_ADDR
// for _x = min_x to max_x do
29486: LD_ADDR_VAR 0 11
29490: PUSH
29491: DOUBLE
29492: LD_VAR 0 7
29496: DEC
29497: ST_TO_ADDR
29498: LD_VAR 0 9
29502: PUSH
29503: FOR_TO
29504: IFFALSE 29586
// for _y = min_y to max_y do
29506: LD_ADDR_VAR 0 12
29510: PUSH
29511: DOUBLE
29512: LD_VAR 0 8
29516: DEC
29517: ST_TO_ADDR
29518: LD_VAR 0 10
29522: PUSH
29523: FOR_TO
29524: IFFALSE 29582
// begin if not ValidHex ( _x , _y ) then
29526: LD_VAR 0 11
29530: PPUSH
29531: LD_VAR 0 12
29535: PPUSH
29536: CALL_OW 488
29540: NOT
29541: IFFALSE 29545
// continue ;
29543: GO 29523
// if MineAtPos ( _x , _y ) then
29545: LD_VAR 0 11
29549: PPUSH
29550: LD_VAR 0 12
29554: PPUSH
29555: CALL_OW 458
29559: IFFALSE 29580
// ViewMineAtPos ( _x , _y , side ) ;
29561: LD_VAR 0 11
29565: PPUSH
29566: LD_VAR 0 12
29570: PPUSH
29571: LD_VAR 0 3
29575: PPUSH
29576: CALL_OW 457
// end ;
29580: GO 29523
29582: POP
29583: POP
29584: GO 29503
29586: POP
29587: POP
// end ;
29588: LD_VAR 0 2
29592: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
29593: LD_INT 0
29595: PPUSH
29596: PPUSH
29597: PPUSH
29598: PPUSH
29599: PPUSH
29600: PPUSH
// if not units then
29601: LD_VAR 0 1
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 30040
// scaners := [ ] ;
29610: LD_ADDR_VAR 0 6
29614: PUSH
29615: EMPTY
29616: ST_TO_ADDR
// for i in units do
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_VAR 0 1
29626: PUSH
29627: FOR_IN
29628: IFFALSE 29785
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
29630: LD_VAR 0 3
29634: PPUSH
29635: CALL_OW 264
29639: PUSH
29640: LD_INT 11
29642: NONEQUAL
29643: IFTRUE 29657
29645: PUSH
29646: LD_VAR 0 3
29650: PPUSH
29651: CALL_OW 302
29655: NOT
29656: OR
29657: IFTRUE 29674
29659: PUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: CALL_OW 110
29669: PUSH
29670: LD_INT 502
29672: EQUAL
29673: OR
29674: IFFALSE 29678
// continue ;
29676: GO 29627
// ComStop ( i ) ;
29678: LD_VAR 0 3
29682: PPUSH
29683: CALL_OW 141
// x := GetX ( i ) ;
29687: LD_ADDR_VAR 0 4
29691: PUSH
29692: LD_VAR 0 3
29696: PPUSH
29697: CALL_OW 250
29701: ST_TO_ADDR
// y := GetY ( i ) ;
29702: LD_ADDR_VAR 0 5
29706: PUSH
29707: LD_VAR 0 3
29711: PPUSH
29712: CALL_OW 251
29716: ST_TO_ADDR
// if GetSide ( i ) = your_side then
29717: LD_VAR 0 3
29721: PPUSH
29722: CALL_OW 255
29726: PUSH
29727: LD_OWVAR 2
29731: EQUAL
29732: IFFALSE 29751
// PlaySoundXY ( x , y , mineDetector ) ;
29734: LD_VAR 0 4
29738: PPUSH
29739: LD_VAR 0 5
29743: PPUSH
29744: LD_STRING mineDetector
29746: PPUSH
29747: CALL_OW 366
// scaners := Join ( scaners , i ) ;
29751: LD_ADDR_VAR 0 6
29755: PUSH
29756: LD_VAR 0 6
29760: PPUSH
29761: LD_VAR 0 3
29765: PPUSH
29766: CALL 68262 0 2
29770: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
29771: LD_VAR 0 3
29775: PPUSH
29776: LD_INT 502
29778: PPUSH
29779: CALL_OW 109
// end ;
29783: GO 29627
29785: POP
29786: POP
// if not scaners then
29787: LD_VAR 0 6
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 30040
// wait ( 3 ) ;
29796: LD_INT 3
29798: PPUSH
29799: CALL_OW 67
// timer := 6 ;
29803: LD_ADDR_VAR 0 7
29807: PUSH
29808: LD_INT 6
29810: ST_TO_ADDR
// repeat for i in scaners do
29811: LD_ADDR_VAR 0 3
29815: PUSH
29816: LD_VAR 0 6
29820: PUSH
29821: FOR_IN
29822: IFFALSE 29938
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
29824: LD_VAR 0 3
29828: PPUSH
29829: CALL_OW 302
29833: NOT
29834: IFTRUE 29847
29836: PUSH
29837: LD_VAR 0 3
29841: PPUSH
29842: CALL_OW 314
29846: OR
29847: IFTRUE 29878
29849: PUSH
29850: LD_VAR 0 3
29854: PPUSH
29855: CALL_OW 263
29859: PUSH
29860: LD_INT 1
29862: EQUAL
29863: IFFALSE 29877
29865: PUSH
29866: LD_VAR 0 3
29870: PPUSH
29871: CALL_OW 311
29875: NOT
29876: AND
29877: OR
29878: IFFALSE 29922
// begin SetUnitDisplayNumber ( i , 0 ) ;
29880: LD_VAR 0 3
29884: PPUSH
29885: LD_INT 0
29887: PPUSH
29888: CALL_OW 505
// SetTag ( i , 0 ) ;
29892: LD_VAR 0 3
29896: PPUSH
29897: LD_INT 0
29899: PPUSH
29900: CALL_OW 109
// scaners := scaners diff i ;
29904: LD_ADDR_VAR 0 6
29908: PUSH
29909: LD_VAR 0 6
29913: PUSH
29914: LD_VAR 0 3
29918: DIFF
29919: ST_TO_ADDR
// continue ;
29920: GO 29821
// end ; SetUnitDisplayNumber ( i , timer ) ;
29922: LD_VAR 0 3
29926: PPUSH
29927: LD_VAR 0 7
29931: PPUSH
29932: CALL_OW 505
// end ;
29936: GO 29821
29938: POP
29939: POP
// if not scaners then
29940: LD_VAR 0 6
29944: NOT
29945: IFFALSE 29949
// exit ;
29947: GO 30040
// timer := Dec ( timer ) ;
29949: LD_ADDR_VAR 0 7
29953: PUSH
29954: LD_VAR 0 7
29958: PPUSH
29959: CALL 69657 0 1
29963: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29964: LD_INT 35
29966: PPUSH
29967: CALL_OW 67
// until timer = 0 ;
29971: LD_VAR 0 7
29975: PUSH
29976: LD_INT 0
29978: EQUAL
29979: IFFALSE 29811
// if not scaners then
29981: LD_VAR 0 6
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30040
// for i in scaners do
29990: LD_ADDR_VAR 0 3
29994: PUSH
29995: LD_VAR 0 6
29999: PUSH
30000: FOR_IN
30001: IFFALSE 30038
// begin SetUnitDisplayNumber ( i , 0 ) ;
30003: LD_VAR 0 3
30007: PPUSH
30008: LD_INT 0
30010: PPUSH
30011: CALL_OW 505
// SetTag ( i , 0 ) ;
30015: LD_VAR 0 3
30019: PPUSH
30020: LD_INT 0
30022: PPUSH
30023: CALL_OW 109
// RevealDetectorMine ( i ) ;
30027: LD_VAR 0 3
30031: PPUSH
30032: CALL 29295 0 1
// end ;
30036: GO 30000
30038: POP
30039: POP
// end ;
30040: LD_VAR 0 2
30044: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
30045: LD_INT 0
30047: PPUSH
// if p1 = mine_detector_mode then
30048: LD_VAR 0 2
30052: PUSH
30053: LD_INT 103
30055: EQUAL
30056: IFFALSE 30067
// DetectMine ( units ) ;
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL 29593 0 1
// end ; end_of_file
30067: LD_VAR 0 7
30071: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30072: LD_INT 0
30074: PPUSH
30075: PPUSH
// if exist_mode then
30076: LD_VAR 0 2
30080: IFFALSE 30126
// begin unit := CreateCharacter ( prefix & ident ) ;
30082: LD_ADDR_VAR 0 5
30086: PUSH
30087: LD_VAR 0 3
30091: PUSH
30092: LD_VAR 0 1
30096: STR
30097: PPUSH
30098: CALL_OW 34
30102: ST_TO_ADDR
// if unit then
30103: LD_VAR 0 5
30107: IFFALSE 30124
// DeleteCharacters ( prefix & ident ) ;
30109: LD_VAR 0 3
30113: PUSH
30114: LD_VAR 0 1
30118: STR
30119: PPUSH
30120: CALL_OW 40
// end else
30124: GO 30141
// unit := NewCharacter ( ident ) ;
30126: LD_ADDR_VAR 0 5
30130: PUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 25
30140: ST_TO_ADDR
// result := unit ;
30141: LD_ADDR_VAR 0 4
30145: PUSH
30146: LD_VAR 0 5
30150: ST_TO_ADDR
// end ;
30151: LD_VAR 0 4
30155: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30156: LD_INT 0
30158: PPUSH
30159: PPUSH
// if exist_mode then
30160: LD_VAR 0 2
30164: IFFALSE 30189
// unit := CreateCharacter ( prefix & ident ) else
30166: LD_ADDR_VAR 0 5
30170: PUSH
30171: LD_VAR 0 3
30175: PUSH
30176: LD_VAR 0 1
30180: STR
30181: PPUSH
30182: CALL_OW 34
30186: ST_TO_ADDR
30187: GO 30204
// unit := NewCharacter ( ident ) ;
30189: LD_ADDR_VAR 0 5
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 25
30203: ST_TO_ADDR
// result := unit ;
30204: LD_ADDR_VAR 0 4
30208: PUSH
30209: LD_VAR 0 5
30213: ST_TO_ADDR
// end ;
30214: LD_VAR 0 4
30218: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
// if not side or not nation then
30223: LD_VAR 0 1
30227: NOT
30228: IFTRUE 30237
30230: PUSH
30231: LD_VAR 0 2
30235: NOT
30236: OR
30237: IFFALSE 30241
// exit ;
30239: GO 31035
// case nation of nation_american :
30241: LD_VAR 0 2
30245: PUSH
30246: LD_INT 1
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30476
30254: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: LD_INT 35
30262: PUSH
30263: LD_INT 45
30265: PUSH
30266: LD_INT 46
30268: PUSH
30269: LD_INT 47
30271: PUSH
30272: LD_INT 82
30274: PUSH
30275: LD_INT 83
30277: PUSH
30278: LD_INT 84
30280: PUSH
30281: LD_INT 85
30283: PUSH
30284: LD_INT 86
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 6
30295: PUSH
30296: LD_INT 15
30298: PUSH
30299: LD_INT 16
30301: PUSH
30302: LD_INT 7
30304: PUSH
30305: LD_INT 12
30307: PUSH
30308: LD_INT 13
30310: PUSH
30311: LD_INT 10
30313: PUSH
30314: LD_INT 14
30316: PUSH
30317: LD_INT 20
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: LD_INT 22
30325: PUSH
30326: LD_INT 25
30328: PUSH
30329: LD_INT 32
30331: PUSH
30332: LD_INT 27
30334: PUSH
30335: LD_INT 36
30337: PUSH
30338: LD_INT 69
30340: PUSH
30341: LD_INT 39
30343: PUSH
30344: LD_INT 34
30346: PUSH
30347: LD_INT 40
30349: PUSH
30350: LD_INT 48
30352: PUSH
30353: LD_INT 49
30355: PUSH
30356: LD_INT 50
30358: PUSH
30359: LD_INT 51
30361: PUSH
30362: LD_INT 52
30364: PUSH
30365: LD_INT 53
30367: PUSH
30368: LD_INT 54
30370: PUSH
30371: LD_INT 55
30373: PUSH
30374: LD_INT 56
30376: PUSH
30377: LD_INT 57
30379: PUSH
30380: LD_INT 58
30382: PUSH
30383: LD_INT 59
30385: PUSH
30386: LD_INT 60
30388: PUSH
30389: LD_INT 61
30391: PUSH
30392: LD_INT 62
30394: PUSH
30395: LD_INT 80
30397: PUSH
30398: LD_INT 82
30400: PUSH
30401: LD_INT 83
30403: PUSH
30404: LD_INT 84
30406: PUSH
30407: LD_INT 85
30409: PUSH
30410: LD_INT 86
30412: PUSH
30413: LD_INT 90
30415: PUSH
30416: LD_INT 93
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
30474: GO 30957
30476: LD_INT 2
30478: DOUBLE
30479: EQUAL
30480: IFTRUE 30484
30482: GO 30718
30484: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30485: LD_ADDR_VAR 0 4
30489: PUSH
30490: LD_INT 35
30492: PUSH
30493: LD_INT 45
30495: PUSH
30496: LD_INT 46
30498: PUSH
30499: LD_INT 47
30501: PUSH
30502: LD_INT 82
30504: PUSH
30505: LD_INT 83
30507: PUSH
30508: LD_INT 84
30510: PUSH
30511: LD_INT 85
30513: PUSH
30514: LD_INT 87
30516: PUSH
30517: LD_INT 70
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 11
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 6
30537: PUSH
30538: LD_INT 15
30540: PUSH
30541: LD_INT 18
30543: PUSH
30544: LD_INT 7
30546: PUSH
30547: LD_INT 17
30549: PUSH
30550: LD_INT 8
30552: PUSH
30553: LD_INT 20
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 22
30561: PUSH
30562: LD_INT 72
30564: PUSH
30565: LD_INT 26
30567: PUSH
30568: LD_INT 69
30570: PUSH
30571: LD_INT 39
30573: PUSH
30574: LD_INT 40
30576: PUSH
30577: LD_INT 41
30579: PUSH
30580: LD_INT 42
30582: PUSH
30583: LD_INT 43
30585: PUSH
30586: LD_INT 48
30588: PUSH
30589: LD_INT 49
30591: PUSH
30592: LD_INT 50
30594: PUSH
30595: LD_INT 51
30597: PUSH
30598: LD_INT 52
30600: PUSH
30601: LD_INT 53
30603: PUSH
30604: LD_INT 54
30606: PUSH
30607: LD_INT 55
30609: PUSH
30610: LD_INT 56
30612: PUSH
30613: LD_INT 60
30615: PUSH
30616: LD_INT 61
30618: PUSH
30619: LD_INT 62
30621: PUSH
30622: LD_INT 66
30624: PUSH
30625: LD_INT 67
30627: PUSH
30628: LD_INT 68
30630: PUSH
30631: LD_INT 81
30633: PUSH
30634: LD_INT 82
30636: PUSH
30637: LD_INT 83
30639: PUSH
30640: LD_INT 84
30642: PUSH
30643: LD_INT 85
30645: PUSH
30646: LD_INT 87
30648: PUSH
30649: LD_INT 88
30651: PUSH
30652: LD_INT 92
30654: PUSH
30655: LD_INT 94
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
30716: GO 30957
30718: LD_INT 3
30720: DOUBLE
30721: EQUAL
30722: IFTRUE 30726
30724: GO 30956
30726: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_INT 46
30734: PUSH
30735: LD_INT 47
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 82
30746: PUSH
30747: LD_INT 83
30749: PUSH
30750: LD_INT 84
30752: PUSH
30753: LD_INT 85
30755: PUSH
30756: LD_INT 86
30758: PUSH
30759: LD_INT 11
30761: PUSH
30762: LD_INT 9
30764: PUSH
30765: LD_INT 20
30767: PUSH
30768: LD_INT 19
30770: PUSH
30771: LD_INT 21
30773: PUSH
30774: LD_INT 24
30776: PUSH
30777: LD_INT 22
30779: PUSH
30780: LD_INT 25
30782: PUSH
30783: LD_INT 28
30785: PUSH
30786: LD_INT 29
30788: PUSH
30789: LD_INT 30
30791: PUSH
30792: LD_INT 31
30794: PUSH
30795: LD_INT 37
30797: PUSH
30798: LD_INT 38
30800: PUSH
30801: LD_INT 32
30803: PUSH
30804: LD_INT 27
30806: PUSH
30807: LD_INT 33
30809: PUSH
30810: LD_INT 69
30812: PUSH
30813: LD_INT 39
30815: PUSH
30816: LD_INT 34
30818: PUSH
30819: LD_INT 40
30821: PUSH
30822: LD_INT 71
30824: PUSH
30825: LD_INT 23
30827: PUSH
30828: LD_INT 44
30830: PUSH
30831: LD_INT 48
30833: PUSH
30834: LD_INT 49
30836: PUSH
30837: LD_INT 50
30839: PUSH
30840: LD_INT 51
30842: PUSH
30843: LD_INT 52
30845: PUSH
30846: LD_INT 53
30848: PUSH
30849: LD_INT 54
30851: PUSH
30852: LD_INT 55
30854: PUSH
30855: LD_INT 56
30857: PUSH
30858: LD_INT 57
30860: PUSH
30861: LD_INT 58
30863: PUSH
30864: LD_INT 59
30866: PUSH
30867: LD_INT 63
30869: PUSH
30870: LD_INT 64
30872: PUSH
30873: LD_INT 65
30875: PUSH
30876: LD_INT 82
30878: PUSH
30879: LD_INT 83
30881: PUSH
30882: LD_INT 84
30884: PUSH
30885: LD_INT 85
30887: PUSH
30888: LD_INT 86
30890: PUSH
30891: LD_INT 89
30893: PUSH
30894: LD_INT 91
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
30954: GO 30957
30956: POP
// if state > - 1 and state < 3 then
30957: LD_VAR 0 3
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: GREATER
30966: IFFALSE 30978
30968: PUSH
30969: LD_VAR 0 3
30973: PUSH
30974: LD_INT 3
30976: LESS
30977: AND
30978: IFFALSE 31035
// for i in result do
30980: LD_ADDR_VAR 0 5
30984: PUSH
30985: LD_VAR 0 4
30989: PUSH
30990: FOR_IN
30991: IFFALSE 31033
// if GetTech ( i , side ) <> state then
30993: LD_VAR 0 5
30997: PPUSH
30998: LD_VAR 0 1
31002: PPUSH
31003: CALL_OW 321
31007: PUSH
31008: LD_VAR 0 3
31012: NONEQUAL
31013: IFFALSE 31031
// result := result diff i ;
31015: LD_ADDR_VAR 0 4
31019: PUSH
31020: LD_VAR 0 4
31024: PUSH
31025: LD_VAR 0 5
31029: DIFF
31030: ST_TO_ADDR
31031: GO 30990
31033: POP
31034: POP
// end ;
31035: LD_VAR 0 4
31039: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31040: LD_INT 0
31042: PPUSH
31043: PPUSH
31044: PPUSH
// result := true ;
31045: LD_ADDR_VAR 0 3
31049: PUSH
31050: LD_INT 1
31052: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31053: LD_ADDR_VAR 0 5
31057: PUSH
31058: LD_VAR 0 2
31062: PPUSH
31063: CALL_OW 480
31067: ST_TO_ADDR
// if not tmp then
31068: LD_VAR 0 5
31072: NOT
31073: IFFALSE 31077
// exit ;
31075: GO 31126
// for i in tmp do
31077: LD_ADDR_VAR 0 4
31081: PUSH
31082: LD_VAR 0 5
31086: PUSH
31087: FOR_IN
31088: IFFALSE 31124
// if GetTech ( i , side ) <> state_researched then
31090: LD_VAR 0 4
31094: PPUSH
31095: LD_VAR 0 1
31099: PPUSH
31100: CALL_OW 321
31104: PUSH
31105: LD_INT 2
31107: NONEQUAL
31108: IFFALSE 31122
// begin result := false ;
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_INT 0
31117: ST_TO_ADDR
// exit ;
31118: POP
31119: POP
31120: GO 31126
// end ;
31122: GO 31087
31124: POP
31125: POP
// end ;
31126: LD_VAR 0 3
31130: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31146: LD_VAR 0 1
31150: NOT
31151: IFTRUE 31168
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 257
31163: PUSH
31164: LD_INT 9
31166: NONEQUAL
31167: OR
31168: IFFALSE 31172
// exit ;
31170: GO 31751
// side := GetSide ( unit ) ;
31172: LD_ADDR_VAR 0 9
31176: PUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 255
31186: ST_TO_ADDR
// tech_space := tech_spacanom ;
31187: LD_ADDR_VAR 0 12
31191: PUSH
31192: LD_INT 29
31194: ST_TO_ADDR
// tech_time := tech_taurad ;
31195: LD_ADDR_VAR 0 13
31199: PUSH
31200: LD_INT 28
31202: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31203: LD_ADDR_VAR 0 11
31207: PUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 310
31217: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31218: LD_VAR 0 11
31222: PPUSH
31223: CALL_OW 247
31227: PUSH
31228: LD_INT 2
31230: EQUAL
31231: IFFALSE 31235
// exit ;
31233: GO 31751
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31235: LD_ADDR_VAR 0 8
31239: PUSH
31240: LD_INT 81
31242: PUSH
31243: LD_VAR 0 9
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 21
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: ST_TO_ADDR
// if not tmp then
31278: LD_VAR 0 8
31282: NOT
31283: IFFALSE 31287
// exit ;
31285: GO 31751
// if in_unit then
31287: LD_VAR 0 11
31291: IFFALSE 31315
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31293: LD_ADDR_VAR 0 10
31297: PUSH
31298: LD_VAR 0 8
31302: PPUSH
31303: LD_VAR 0 11
31307: PPUSH
31308: CALL_OW 74
31312: ST_TO_ADDR
31313: GO 31335
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31315: LD_ADDR_VAR 0 10
31319: PUSH
31320: LD_VAR 0 8
31324: PPUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 74
31334: ST_TO_ADDR
// if not enemy then
31335: LD_VAR 0 10
31339: NOT
31340: IFFALSE 31344
// exit ;
31342: GO 31751
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31344: LD_VAR 0 11
31348: IFFALSE 31370
31350: PUSH
31351: LD_VAR 0 11
31355: PPUSH
31356: LD_VAR 0 10
31360: PPUSH
31361: CALL_OW 296
31365: PUSH
31366: LD_INT 13
31368: GREATER
31369: AND
31370: IFTRUE 31392
31372: PUSH
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_VAR 0 10
31382: PPUSH
31383: CALL_OW 296
31387: PUSH
31388: LD_INT 12
31390: GREATER
31391: OR
31392: IFFALSE 31396
// exit ;
31394: GO 31751
// missile := [ 1 ] ;
31396: LD_ADDR_VAR 0 14
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31407: LD_VAR 0 9
31411: PPUSH
31412: LD_VAR 0 12
31416: PPUSH
31417: CALL_OW 325
31421: IFFALSE 31450
// missile := Replace ( missile , missile + 1 , 2 ) ;
31423: LD_ADDR_VAR 0 14
31427: PUSH
31428: LD_VAR 0 14
31432: PPUSH
31433: LD_VAR 0 14
31437: PUSH
31438: LD_INT 1
31440: PLUS
31441: PPUSH
31442: LD_INT 2
31444: PPUSH
31445: CALL_OW 1
31449: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31450: LD_VAR 0 9
31454: PPUSH
31455: LD_VAR 0 13
31459: PPUSH
31460: CALL_OW 325
31464: IFFALSE 31488
31466: PUSH
31467: LD_VAR 0 10
31471: PPUSH
31472: CALL_OW 255
31476: PPUSH
31477: LD_VAR 0 13
31481: PPUSH
31482: CALL_OW 325
31486: NOT
31487: AND
31488: IFFALSE 31517
// missile := Replace ( missile , missile + 1 , 3 ) ;
31490: LD_ADDR_VAR 0 14
31494: PUSH
31495: LD_VAR 0 14
31499: PPUSH
31500: LD_VAR 0 14
31504: PUSH
31505: LD_INT 1
31507: PLUS
31508: PPUSH
31509: LD_INT 3
31511: PPUSH
31512: CALL_OW 1
31516: ST_TO_ADDR
// if missile < 2 then
31517: LD_VAR 0 14
31521: PUSH
31522: LD_INT 2
31524: LESS
31525: IFFALSE 31529
// exit ;
31527: GO 31751
// x := GetX ( enemy ) ;
31529: LD_ADDR_VAR 0 4
31533: PUSH
31534: LD_VAR 0 10
31538: PPUSH
31539: CALL_OW 250
31543: ST_TO_ADDR
// y := GetY ( enemy ) ;
31544: LD_ADDR_VAR 0 5
31548: PUSH
31549: LD_VAR 0 10
31553: PPUSH
31554: CALL_OW 251
31558: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31559: LD_ADDR_VAR 0 6
31563: PUSH
31564: LD_VAR 0 4
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PPUSH
31573: LD_INT 1
31575: PPUSH
31576: CALL_OW 12
31580: PLUS
31581: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31582: LD_ADDR_VAR 0 7
31586: PUSH
31587: LD_VAR 0 5
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PPUSH
31596: LD_INT 1
31598: PPUSH
31599: CALL_OW 12
31603: PLUS
31604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31605: LD_VAR 0 6
31609: PPUSH
31610: LD_VAR 0 7
31614: PPUSH
31615: CALL_OW 488
31619: NOT
31620: IFFALSE 31642
// begin _x := x ;
31622: LD_ADDR_VAR 0 6
31626: PUSH
31627: LD_VAR 0 4
31631: ST_TO_ADDR
// _y := y ;
31632: LD_ADDR_VAR 0 7
31636: PUSH
31637: LD_VAR 0 5
31641: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: LD_INT 1
31649: PPUSH
31650: LD_VAR 0 14
31654: PPUSH
31655: CALL_OW 12
31659: ST_TO_ADDR
// case i of 1 :
31660: LD_VAR 0 3
31664: PUSH
31665: LD_INT 1
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31690
31673: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_VAR 0 10
31683: PPUSH
31684: CALL_OW 115
31688: GO 31751
31690: LD_INT 2
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31698
31696: GO 31720
31698: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31699: LD_VAR 0 1
31703: PPUSH
31704: LD_VAR 0 6
31708: PPUSH
31709: LD_VAR 0 7
31713: PPUSH
31714: CALL_OW 153
31718: GO 31751
31720: LD_INT 3
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 31750
31728: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31729: LD_VAR 0 1
31733: PPUSH
31734: LD_VAR 0 6
31738: PPUSH
31739: LD_VAR 0 7
31743: PPUSH
31744: CALL_OW 154
31748: GO 31751
31750: POP
// end ;
31751: LD_VAR 0 2
31755: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31756: LD_INT 0
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
// if not unit or not building then
31764: LD_VAR 0 1
31768: NOT
31769: IFTRUE 31778
31771: PUSH
31772: LD_VAR 0 2
31776: NOT
31777: OR
31778: IFFALSE 31782
// exit ;
31780: GO 31940
// x := GetX ( building ) ;
31782: LD_ADDR_VAR 0 5
31786: PUSH
31787: LD_VAR 0 2
31791: PPUSH
31792: CALL_OW 250
31796: ST_TO_ADDR
// y := GetY ( building ) ;
31797: LD_ADDR_VAR 0 6
31801: PUSH
31802: LD_VAR 0 2
31806: PPUSH
31807: CALL_OW 251
31811: ST_TO_ADDR
// for i := 0 to 5 do
31812: LD_ADDR_VAR 0 4
31816: PUSH
31817: DOUBLE
31818: LD_INT 0
31820: DEC
31821: ST_TO_ADDR
31822: LD_INT 5
31824: PUSH
31825: FOR_TO
31826: IFFALSE 31938
// begin _x := ShiftX ( x , i , 3 ) ;
31828: LD_ADDR_VAR 0 7
31832: PUSH
31833: LD_VAR 0 5
31837: PPUSH
31838: LD_VAR 0 4
31842: PPUSH
31843: LD_INT 3
31845: PPUSH
31846: CALL_OW 272
31850: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31851: LD_ADDR_VAR 0 8
31855: PUSH
31856: LD_VAR 0 6
31860: PPUSH
31861: LD_VAR 0 4
31865: PPUSH
31866: LD_INT 3
31868: PPUSH
31869: CALL_OW 273
31873: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31874: LD_VAR 0 7
31878: PPUSH
31879: LD_VAR 0 8
31883: PPUSH
31884: CALL_OW 488
31888: NOT
31889: IFFALSE 31893
// continue ;
31891: GO 31825
// if HexInfo ( _x , _y ) = 0 then
31893: LD_VAR 0 7
31897: PPUSH
31898: LD_VAR 0 8
31902: PPUSH
31903: CALL_OW 428
31907: PUSH
31908: LD_INT 0
31910: EQUAL
31911: IFFALSE 31936
// begin ComMoveXY ( unit , _x , _y ) ;
31913: LD_VAR 0 1
31917: PPUSH
31918: LD_VAR 0 7
31922: PPUSH
31923: LD_VAR 0 8
31927: PPUSH
31928: CALL_OW 111
// exit ;
31932: POP
31933: POP
31934: GO 31940
// end ; end ;
31936: GO 31825
31938: POP
31939: POP
// end ;
31940: LD_VAR 0 3
31944: RET
// export function ScanBase ( side , base_area ) ; begin
31945: LD_INT 0
31947: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_VAR 0 2
31957: PPUSH
31958: LD_INT 81
31960: PUSH
31961: LD_VAR 0 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 70
31974: ST_TO_ADDR
// end ;
31975: LD_VAR 0 3
31979: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31980: LD_INT 0
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
// result := false ;
31986: LD_ADDR_VAR 0 2
31990: PUSH
31991: LD_INT 0
31993: ST_TO_ADDR
// side := GetSide ( unit ) ;
31994: LD_ADDR_VAR 0 3
31998: PUSH
31999: LD_VAR 0 1
32003: PPUSH
32004: CALL_OW 255
32008: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32009: LD_ADDR_VAR 0 4
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 248
32023: ST_TO_ADDR
// case nat of 1 :
32024: LD_VAR 0 4
32028: PUSH
32029: LD_INT 1
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32048
32037: POP
// tech := tech_lassight ; 2 :
32038: LD_ADDR_VAR 0 5
32042: PUSH
32043: LD_INT 12
32045: ST_TO_ADDR
32046: GO 32087
32048: LD_INT 2
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32067
32056: POP
// tech := tech_mortar ; 3 :
32057: LD_ADDR_VAR 0 5
32061: PUSH
32062: LD_INT 41
32064: ST_TO_ADDR
32065: GO 32087
32067: LD_INT 3
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32086
32075: POP
// tech := tech_bazooka ; end ;
32076: LD_ADDR_VAR 0 5
32080: PUSH
32081: LD_INT 44
32083: ST_TO_ADDR
32084: GO 32087
32086: POP
// if Researched ( side , tech ) then
32087: LD_VAR 0 3
32091: PPUSH
32092: LD_VAR 0 5
32096: PPUSH
32097: CALL_OW 325
32101: IFFALSE 32128
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32103: LD_ADDR_VAR 0 2
32107: PUSH
32108: LD_INT 5
32110: PUSH
32111: LD_INT 8
32113: PUSH
32114: LD_INT 9
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: LD_VAR 0 4
32126: ARRAY
32127: ST_TO_ADDR
// end ;
32128: LD_VAR 0 2
32132: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32133: LD_INT 0
32135: PPUSH
32136: PPUSH
32137: PPUSH
// if not mines then
32138: LD_VAR 0 2
32142: NOT
32143: IFFALSE 32147
// exit ;
32145: GO 32291
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_INT 81
32154: PUSH
32155: LD_VAR 0 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 21
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PPUSH
32185: CALL_OW 69
32189: ST_TO_ADDR
// for i in mines do
32190: LD_ADDR_VAR 0 4
32194: PUSH
32195: LD_VAR 0 2
32199: PUSH
32200: FOR_IN
32201: IFFALSE 32289
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32203: LD_VAR 0 4
32207: PUSH
32208: LD_INT 1
32210: ARRAY
32211: PPUSH
32212: LD_VAR 0 4
32216: PUSH
32217: LD_INT 2
32219: ARRAY
32220: PPUSH
32221: CALL_OW 458
32225: NOT
32226: IFFALSE 32230
// continue ;
32228: GO 32200
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32230: LD_VAR 0 4
32234: PUSH
32235: LD_INT 1
32237: ARRAY
32238: PPUSH
32239: LD_VAR 0 4
32243: PUSH
32244: LD_INT 2
32246: ARRAY
32247: PPUSH
32248: CALL_OW 428
32252: PUSH
32253: LD_VAR 0 5
32257: IN
32258: IFFALSE 32287
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32260: LD_VAR 0 4
32264: PUSH
32265: LD_INT 1
32267: ARRAY
32268: PPUSH
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 2
32276: ARRAY
32277: PPUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 456
// end ;
32287: GO 32200
32289: POP
32290: POP
// end ;
32291: LD_VAR 0 3
32295: RET
// export function Count ( array ) ; begin
32296: LD_INT 0
32298: PPUSH
// result := array + 0 ;
32299: LD_ADDR_VAR 0 2
32303: PUSH
32304: LD_VAR 0 1
32308: PUSH
32309: LD_INT 0
32311: PLUS
32312: ST_TO_ADDR
// end ;
32313: LD_VAR 0 2
32317: RET
// export function IsEmpty ( building ) ; begin
32318: LD_INT 0
32320: PPUSH
// if not building then
32321: LD_VAR 0 1
32325: NOT
32326: IFFALSE 32330
// exit ;
32328: GO 32373
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32330: LD_ADDR_VAR 0 2
32334: PUSH
32335: LD_VAR 0 1
32339: PUSH
32340: LD_INT 22
32342: PUSH
32343: LD_VAR 0 1
32347: PPUSH
32348: CALL_OW 255
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 58
32359: PUSH
32360: EMPTY
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PPUSH
32367: CALL_OW 69
32371: IN
32372: ST_TO_ADDR
// end ;
32373: LD_VAR 0 2
32377: RET
// export function IsNotFull ( building ) ; var places ; begin
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
// if not building then
32382: LD_VAR 0 1
32386: NOT
32387: IFFALSE 32391
// exit ;
32389: GO 32419
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32391: LD_ADDR_VAR 0 2
32395: PUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: LD_INT 3
32403: PUSH
32404: LD_INT 62
32406: PUSH
32407: EMPTY
32408: LIST
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PPUSH
32414: CALL_OW 72
32418: ST_TO_ADDR
// end ;
32419: LD_VAR 0 2
32423: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32424: LD_INT 0
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
// tmp := [ ] ;
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: EMPTY
32436: ST_TO_ADDR
// list := [ ] ;
32437: LD_ADDR_VAR 0 5
32441: PUSH
32442: EMPTY
32443: ST_TO_ADDR
// for i = 16 to 25 do
32444: LD_ADDR_VAR 0 4
32448: PUSH
32449: DOUBLE
32450: LD_INT 16
32452: DEC
32453: ST_TO_ADDR
32454: LD_INT 25
32456: PUSH
32457: FOR_TO
32458: IFFALSE 32531
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32460: LD_ADDR_VAR 0 3
32464: PUSH
32465: LD_VAR 0 3
32469: PUSH
32470: LD_INT 22
32472: PUSH
32473: LD_VAR 0 1
32477: PPUSH
32478: CALL_OW 255
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 91
32489: PUSH
32490: LD_VAR 0 1
32494: PUSH
32495: LD_INT 6
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 30
32505: PUSH
32506: LD_VAR 0 4
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: ADD
32528: ST_TO_ADDR
32529: GO 32457
32531: POP
32532: POP
// for i = 1 to tmp do
32533: LD_ADDR_VAR 0 4
32537: PUSH
32538: DOUBLE
32539: LD_INT 1
32541: DEC
32542: ST_TO_ADDR
32543: LD_VAR 0 3
32547: PUSH
32548: FOR_TO
32549: IFFALSE 32637
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32551: LD_ADDR_VAR 0 5
32555: PUSH
32556: LD_VAR 0 5
32560: PUSH
32561: LD_VAR 0 3
32565: PUSH
32566: LD_VAR 0 4
32570: ARRAY
32571: PPUSH
32572: CALL_OW 266
32576: PUSH
32577: LD_VAR 0 3
32581: PUSH
32582: LD_VAR 0 4
32586: ARRAY
32587: PPUSH
32588: CALL_OW 250
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: LD_VAR 0 4
32602: ARRAY
32603: PPUSH
32604: CALL_OW 251
32608: PUSH
32609: LD_VAR 0 3
32613: PUSH
32614: LD_VAR 0 4
32618: ARRAY
32619: PPUSH
32620: CALL_OW 254
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: PUSH
32631: EMPTY
32632: LIST
32633: ADD
32634: ST_TO_ADDR
32635: GO 32548
32637: POP
32638: POP
// result := list ;
32639: LD_ADDR_VAR 0 2
32643: PUSH
32644: LD_VAR 0 5
32648: ST_TO_ADDR
// end ;
32649: LD_VAR 0 2
32653: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
// if not factory then
32663: LD_VAR 0 1
32667: NOT
32668: IFFALSE 32672
// exit ;
32670: GO 33275
// if control = control_apeman then
32672: LD_VAR 0 4
32676: PUSH
32677: LD_INT 5
32679: EQUAL
32680: IFFALSE 32789
// begin tmp := UnitsInside ( factory ) ;
32682: LD_ADDR_VAR 0 8
32686: PUSH
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL_OW 313
32696: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32697: LD_VAR 0 8
32701: PPUSH
32702: LD_INT 25
32704: PUSH
32705: LD_INT 12
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 72
32716: NOT
32717: IFFALSE 32727
// control := control_manual ;
32719: LD_ADDR_VAR 0 4
32723: PUSH
32724: LD_INT 1
32726: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32727: LD_ADDR_VAR 0 8
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL 32424 0 1
32741: ST_TO_ADDR
// if tmp then
32742: LD_VAR 0 8
32746: IFFALSE 32789
// begin for i in tmp do
32748: LD_ADDR_VAR 0 7
32752: PUSH
32753: LD_VAR 0 8
32757: PUSH
32758: FOR_IN
32759: IFFALSE 32787
// if i [ 1 ] = b_ext_radio then
32761: LD_VAR 0 7
32765: PUSH
32766: LD_INT 1
32768: ARRAY
32769: PUSH
32770: LD_INT 22
32772: EQUAL
32773: IFFALSE 32785
// begin control := control_remote ;
32775: LD_ADDR_VAR 0 4
32779: PUSH
32780: LD_INT 2
32782: ST_TO_ADDR
// break ;
32783: GO 32787
// end ;
32785: GO 32758
32787: POP
32788: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32789: LD_VAR 0 1
32793: PPUSH
32794: LD_VAR 0 2
32798: PPUSH
32799: LD_VAR 0 3
32803: PPUSH
32804: LD_VAR 0 4
32808: PPUSH
32809: LD_VAR 0 5
32813: PPUSH
32814: CALL_OW 448
32818: IFFALSE 32853
// begin result := [ chassis , engine , control , weapon ] ;
32820: LD_ADDR_VAR 0 6
32824: PUSH
32825: LD_VAR 0 2
32829: PUSH
32830: LD_VAR 0 3
32834: PUSH
32835: LD_VAR 0 4
32839: PUSH
32840: LD_VAR 0 5
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: ST_TO_ADDR
// exit ;
32851: GO 33275
// end ; _chassis := AvailableChassisList ( factory ) ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 1
32862: PPUSH
32863: CALL_OW 475
32867: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32868: LD_ADDR_VAR 0 11
32872: PUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 476
32882: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32883: LD_ADDR_VAR 0 12
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 477
32897: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32898: LD_ADDR_VAR 0 10
32902: PUSH
32903: LD_VAR 0 1
32907: PPUSH
32908: CALL_OW 478
32912: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32913: LD_VAR 0 9
32917: NOT
32918: IFTRUE 32927
32920: PUSH
32921: LD_VAR 0 11
32925: NOT
32926: OR
32927: IFTRUE 32936
32929: PUSH
32930: LD_VAR 0 12
32934: NOT
32935: OR
32936: IFTRUE 32945
32938: PUSH
32939: LD_VAR 0 10
32943: NOT
32944: OR
32945: IFFALSE 32980
// begin result := [ chassis , engine , control , weapon ] ;
32947: LD_ADDR_VAR 0 6
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_VAR 0 3
32961: PUSH
32962: LD_VAR 0 4
32966: PUSH
32967: LD_VAR 0 5
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
// exit ;
32978: GO 33275
// end ; if not chassis in _chassis then
32980: LD_VAR 0 2
32984: PUSH
32985: LD_VAR 0 9
32989: IN
32990: NOT
32991: IFFALSE 33017
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: LD_VAR 0 9
33002: PUSH
33003: LD_INT 1
33005: PPUSH
33006: LD_VAR 0 9
33010: PPUSH
33011: CALL_OW 12
33015: ARRAY
33016: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33017: LD_VAR 0 2
33021: PPUSH
33022: LD_VAR 0 3
33026: PPUSH
33027: CALL 33280 0 2
33031: NOT
33032: IFFALSE 33093
// repeat engine := _engine [ 1 ] ;
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: LD_VAR 0 11
33043: PUSH
33044: LD_INT 1
33046: ARRAY
33047: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33048: LD_ADDR_VAR 0 11
33052: PUSH
33053: LD_VAR 0 11
33057: PPUSH
33058: LD_INT 1
33060: PPUSH
33061: CALL_OW 3
33065: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33066: LD_VAR 0 2
33070: PPUSH
33071: LD_VAR 0 3
33075: PPUSH
33076: CALL 33280 0 2
33080: IFTRUE 33091
33082: PUSH
33083: LD_VAR 0 11
33087: PUSH
33088: EMPTY
33089: EQUAL
33090: OR
33091: IFFALSE 33034
// if not control in _control then
33093: LD_VAR 0 4
33097: PUSH
33098: LD_VAR 0 12
33102: IN
33103: NOT
33104: IFFALSE 33130
// control := _control [ rand ( 1 , _control ) ] ;
33106: LD_ADDR_VAR 0 4
33110: PUSH
33111: LD_VAR 0 12
33115: PUSH
33116: LD_INT 1
33118: PPUSH
33119: LD_VAR 0 12
33123: PPUSH
33124: CALL_OW 12
33128: ARRAY
33129: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33130: LD_VAR 0 2
33134: PPUSH
33135: LD_VAR 0 5
33139: PPUSH
33140: CALL 33502 0 2
33144: NOT
33145: IFFALSE 33206
// repeat weapon := _weapon [ 1 ] ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_VAR 0 10
33156: PUSH
33157: LD_INT 1
33159: ARRAY
33160: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33161: LD_ADDR_VAR 0 10
33165: PUSH
33166: LD_VAR 0 10
33170: PPUSH
33171: LD_INT 1
33173: PPUSH
33174: CALL_OW 3
33178: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33179: LD_VAR 0 2
33183: PPUSH
33184: LD_VAR 0 5
33188: PPUSH
33189: CALL 33502 0 2
33193: IFTRUE 33204
33195: PUSH
33196: LD_VAR 0 10
33200: PUSH
33201: EMPTY
33202: EQUAL
33203: OR
33204: IFFALSE 33147
// result := [ ] ;
33206: LD_ADDR_VAR 0 6
33210: PUSH
33211: EMPTY
33212: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33213: LD_VAR 0 1
33217: PPUSH
33218: LD_VAR 0 2
33222: PPUSH
33223: LD_VAR 0 3
33227: PPUSH
33228: LD_VAR 0 4
33232: PPUSH
33233: LD_VAR 0 5
33237: PPUSH
33238: CALL_OW 448
33242: IFFALSE 33275
// result := [ chassis , engine , control , weapon ] ;
33244: LD_ADDR_VAR 0 6
33248: PUSH
33249: LD_VAR 0 2
33253: PUSH
33254: LD_VAR 0 3
33258: PUSH
33259: LD_VAR 0 4
33263: PUSH
33264: LD_VAR 0 5
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// end ;
33275: LD_VAR 0 6
33279: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33280: LD_INT 0
33282: PPUSH
// if not chassis or not engine then
33283: LD_VAR 0 1
33287: NOT
33288: IFTRUE 33297
33290: PUSH
33291: LD_VAR 0 2
33295: NOT
33296: OR
33297: IFFALSE 33301
// exit ;
33299: GO 33497
// case engine of engine_solar :
33301: LD_VAR 0 2
33305: PUSH
33306: LD_INT 2
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33352
33314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: LD_INT 11
33322: PUSH
33323: LD_INT 12
33325: PUSH
33326: LD_INT 13
33328: PUSH
33329: LD_INT 14
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 33481
33352: LD_INT 1
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33422
33360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 11
33368: PUSH
33369: LD_INT 12
33371: PUSH
33372: LD_INT 13
33374: PUSH
33375: LD_INT 14
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: LD_INT 5
33392: PUSH
33393: LD_INT 21
33395: PUSH
33396: LD_INT 23
33398: PUSH
33399: LD_INT 22
33401: PUSH
33402: LD_INT 24
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 33481
33422: LD_INT 3
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33480
33430: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 13
33438: PUSH
33439: LD_INT 14
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: LD_INT 21
33456: PUSH
33457: LD_INT 22
33459: PUSH
33460: LD_INT 23
33462: PUSH
33463: LD_INT 24
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
33478: GO 33481
33480: POP
// result := ( chassis in result ) ;
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_VAR 0 1
33490: PUSH
33491: LD_VAR 0 3
33495: IN
33496: ST_TO_ADDR
// end ;
33497: LD_VAR 0 3
33501: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33502: LD_INT 0
33504: PPUSH
// if not chassis or not weapon then
33505: LD_VAR 0 1
33509: NOT
33510: IFTRUE 33519
33512: PUSH
33513: LD_VAR 0 2
33517: NOT
33518: OR
33519: IFFALSE 33523
// exit ;
33521: GO 34617
// case weapon of us_machine_gun :
33523: LD_VAR 0 2
33527: PUSH
33528: LD_INT 2
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33536
33534: GO 33566
33536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33537: LD_ADDR_VAR 0 3
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 3
33550: PUSH
33551: LD_INT 4
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
33564: GO 34601
33566: LD_INT 3
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33604
33574: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: LD_INT 5
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
33602: GO 34601
33604: LD_INT 11
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33642
33612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 4
33629: PUSH
33630: LD_INT 5
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 34601
33642: LD_INT 4
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 34601
33676: LD_INT 5
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34601
33710: LD_INT 9
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 5
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34601
33744: LD_INT 7
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33778
33752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 4
33766: PUSH
33767: LD_INT 5
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 34601
33778: LD_INT 12
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33812
33786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: LD_INT 5
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 34601
33812: LD_INT 13
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33846
33820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 34601
33846: LD_INT 14
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33872
33854: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 4
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 34601
33872: LD_INT 6
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33898
33880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 4
33888: PUSH
33889: LD_INT 5
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 34601
33898: LD_INT 10
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33924
33906: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 4
33914: PUSH
33915: LD_INT 5
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: ST_TO_ADDR
33922: GO 34601
33924: LD_INT 22
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33958
33932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33933: LD_ADDR_VAR 0 3
33937: PUSH
33938: LD_INT 11
33940: PUSH
33941: LD_INT 12
33943: PUSH
33944: LD_INT 13
33946: PUSH
33947: LD_INT 14
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: ST_TO_ADDR
33956: GO 34601
33958: LD_INT 23
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 33966
33964: GO 33992
33966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33967: LD_ADDR_VAR 0 3
33971: PUSH
33972: LD_INT 11
33974: PUSH
33975: LD_INT 12
33977: PUSH
33978: LD_INT 13
33980: PUSH
33981: LD_INT 14
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
33990: GO 34601
33992: LD_INT 24
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34026
34000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34001: LD_ADDR_VAR 0 3
34005: PUSH
34006: LD_INT 11
34008: PUSH
34009: LD_INT 12
34011: PUSH
34012: LD_INT 13
34014: PUSH
34015: LD_INT 14
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
34024: GO 34601
34026: LD_INT 30
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34060
34034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34035: LD_ADDR_VAR 0 3
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
34058: GO 34601
34060: LD_INT 25
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34086
34068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 13
34076: PUSH
34077: LD_INT 14
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34601
34086: LD_INT 27
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34112
34094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 13
34102: PUSH
34103: LD_INT 14
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: ST_TO_ADDR
34110: GO 34601
34112: LD_INT 92
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34146
34120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_INT 11
34128: PUSH
34129: LD_INT 12
34131: PUSH
34132: LD_INT 13
34134: PUSH
34135: LD_INT 14
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
34144: GO 34601
34146: LD_INT 28
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34172
34154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 13
34162: PUSH
34163: LD_INT 14
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: ST_TO_ADDR
34170: GO 34601
34172: LD_INT 29
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34198
34180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_INT 13
34188: PUSH
34189: LD_INT 14
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: ST_TO_ADDR
34196: GO 34601
34198: LD_INT 31
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34224
34206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34207: LD_ADDR_VAR 0 3
34211: PUSH
34212: LD_INT 13
34214: PUSH
34215: LD_INT 14
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: ST_TO_ADDR
34222: GO 34601
34224: LD_INT 26
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34232
34230: GO 34250
34232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_INT 13
34240: PUSH
34241: LD_INT 14
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: ST_TO_ADDR
34248: GO 34601
34250: LD_INT 42
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34258
34256: GO 34284
34258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34259: LD_ADDR_VAR 0 3
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 22
34269: PUSH
34270: LD_INT 23
34272: PUSH
34273: LD_INT 24
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
34282: GO 34601
34284: LD_INT 43
34286: DOUBLE
34287: EQUAL
34288: IFTRUE 34292
34290: GO 34318
34292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: LD_INT 21
34300: PUSH
34301: LD_INT 22
34303: PUSH
34304: LD_INT 23
34306: PUSH
34307: LD_INT 24
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34601
34318: LD_INT 44
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34352
34326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: LD_INT 21
34334: PUSH
34335: LD_INT 22
34337: PUSH
34338: LD_INT 23
34340: PUSH
34341: LD_INT 24
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
34350: GO 34601
34352: LD_INT 45
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34386
34360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_INT 21
34368: PUSH
34369: LD_INT 22
34371: PUSH
34372: LD_INT 23
34374: PUSH
34375: LD_INT 24
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
34384: GO 34601
34386: LD_INT 49
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34394
34392: GO 34420
34394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_INT 21
34402: PUSH
34403: LD_INT 22
34405: PUSH
34406: LD_INT 23
34408: PUSH
34409: LD_INT 24
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: ST_TO_ADDR
34418: GO 34601
34420: LD_INT 51
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34454
34428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_INT 21
34436: PUSH
34437: LD_INT 22
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 34601
34454: LD_INT 52
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34488
34462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 21
34470: PUSH
34471: LD_INT 22
34473: PUSH
34474: LD_INT 23
34476: PUSH
34477: LD_INT 24
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 34601
34488: LD_INT 53
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34514
34496: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 23
34504: PUSH
34505: LD_INT 24
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: ST_TO_ADDR
34512: GO 34601
34514: LD_INT 46
34516: DOUBLE
34517: EQUAL
34518: IFTRUE 34522
34520: GO 34540
34522: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34523: LD_ADDR_VAR 0 3
34527: PUSH
34528: LD_INT 23
34530: PUSH
34531: LD_INT 24
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: ST_TO_ADDR
34538: GO 34601
34540: LD_INT 47
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34566
34548: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_INT 23
34556: PUSH
34557: LD_INT 24
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: ST_TO_ADDR
34564: GO 34601
34566: LD_INT 98
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34600
34574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_INT 21
34582: PUSH
34583: LD_INT 22
34585: PUSH
34586: LD_INT 23
34588: PUSH
34589: LD_INT 24
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: ST_TO_ADDR
34598: GO 34601
34600: POP
// result := ( chassis in result ) ;
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_VAR 0 1
34610: PUSH
34611: LD_VAR 0 3
34615: IN
34616: ST_TO_ADDR
// end ;
34617: LD_VAR 0 3
34621: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
// result := array ;
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: LD_VAR 0 1
34640: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34641: LD_VAR 0 1
34645: NOT
34646: IFTRUE 34655
34648: PUSH
34649: LD_VAR 0 2
34653: NOT
34654: OR
34655: IFTRUE 34664
34657: PUSH
34658: LD_VAR 0 3
34662: NOT
34663: OR
34664: IFTRUE 34678
34666: PUSH
34667: LD_VAR 0 2
34671: PUSH
34672: LD_VAR 0 1
34676: GREATER
34677: OR
34678: IFTRUE 34692
34680: PUSH
34681: LD_VAR 0 3
34685: PUSH
34686: LD_VAR 0 1
34690: GREATER
34691: OR
34692: IFFALSE 34696
// exit ;
34694: GO 34992
// if direction then
34696: LD_VAR 0 4
34700: IFFALSE 34764
// begin d := 1 ;
34702: LD_ADDR_VAR 0 9
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// if i_from > i_to then
34710: LD_VAR 0 2
34714: PUSH
34715: LD_VAR 0 3
34719: GREATER
34720: IFFALSE 34746
// length := ( array - i_from ) + i_to else
34722: LD_ADDR_VAR 0 11
34726: PUSH
34727: LD_VAR 0 1
34731: PUSH
34732: LD_VAR 0 2
34736: MINUS
34737: PUSH
34738: LD_VAR 0 3
34742: PLUS
34743: ST_TO_ADDR
34744: GO 34762
// length := i_to - i_from ;
34746: LD_ADDR_VAR 0 11
34750: PUSH
34751: LD_VAR 0 3
34755: PUSH
34756: LD_VAR 0 2
34760: MINUS
34761: ST_TO_ADDR
// end else
34762: GO 34825
// begin d := - 1 ;
34764: LD_ADDR_VAR 0 9
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: ST_TO_ADDR
// if i_from > i_to then
34773: LD_VAR 0 2
34777: PUSH
34778: LD_VAR 0 3
34782: GREATER
34783: IFFALSE 34803
// length := i_from - i_to else
34785: LD_ADDR_VAR 0 11
34789: PUSH
34790: LD_VAR 0 2
34794: PUSH
34795: LD_VAR 0 3
34799: MINUS
34800: ST_TO_ADDR
34801: GO 34825
// length := ( array - i_to ) + i_from ;
34803: LD_ADDR_VAR 0 11
34807: PUSH
34808: LD_VAR 0 1
34812: PUSH
34813: LD_VAR 0 3
34817: MINUS
34818: PUSH
34819: LD_VAR 0 2
34823: PLUS
34824: ST_TO_ADDR
// end ; if not length then
34825: LD_VAR 0 11
34829: NOT
34830: IFFALSE 34834
// exit ;
34832: GO 34992
// tmp := array ;
34834: LD_ADDR_VAR 0 10
34838: PUSH
34839: LD_VAR 0 1
34843: ST_TO_ADDR
// for i = 1 to length do
34844: LD_ADDR_VAR 0 6
34848: PUSH
34849: DOUBLE
34850: LD_INT 1
34852: DEC
34853: ST_TO_ADDR
34854: LD_VAR 0 11
34858: PUSH
34859: FOR_TO
34860: IFFALSE 34980
// begin for j = 1 to array do
34862: LD_ADDR_VAR 0 7
34866: PUSH
34867: DOUBLE
34868: LD_INT 1
34870: DEC
34871: ST_TO_ADDR
34872: LD_VAR 0 1
34876: PUSH
34877: FOR_TO
34878: IFFALSE 34966
// begin k := j + d ;
34880: LD_ADDR_VAR 0 8
34884: PUSH
34885: LD_VAR 0 7
34889: PUSH
34890: LD_VAR 0 9
34894: PLUS
34895: ST_TO_ADDR
// if k > array then
34896: LD_VAR 0 8
34900: PUSH
34901: LD_VAR 0 1
34905: GREATER
34906: IFFALSE 34916
// k := 1 ;
34908: LD_ADDR_VAR 0 8
34912: PUSH
34913: LD_INT 1
34915: ST_TO_ADDR
// if not k then
34916: LD_VAR 0 8
34920: NOT
34921: IFFALSE 34933
// k := array ;
34923: LD_ADDR_VAR 0 8
34927: PUSH
34928: LD_VAR 0 1
34932: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34933: LD_ADDR_VAR 0 10
34937: PUSH
34938: LD_VAR 0 10
34942: PPUSH
34943: LD_VAR 0 8
34947: PPUSH
34948: LD_VAR 0 1
34952: PUSH
34953: LD_VAR 0 7
34957: ARRAY
34958: PPUSH
34959: CALL_OW 1
34963: ST_TO_ADDR
// end ;
34964: GO 34877
34966: POP
34967: POP
// array := tmp ;
34968: LD_ADDR_VAR 0 1
34972: PUSH
34973: LD_VAR 0 10
34977: ST_TO_ADDR
// end ;
34978: GO 34859
34980: POP
34981: POP
// result := array ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_VAR 0 1
34991: ST_TO_ADDR
// end ;
34992: LD_VAR 0 5
34996: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34997: LD_INT 0
34999: PPUSH
35000: PPUSH
// result := 0 ;
35001: LD_ADDR_VAR 0 3
35005: PUSH
35006: LD_INT 0
35008: ST_TO_ADDR
// if not array or not value in array then
35009: LD_VAR 0 1
35013: NOT
35014: IFTRUE 35029
35016: PUSH
35017: LD_VAR 0 2
35021: PUSH
35022: LD_VAR 0 1
35026: IN
35027: NOT
35028: OR
35029: IFFALSE 35033
// exit ;
35031: GO 35087
// for i = 1 to array do
35033: LD_ADDR_VAR 0 4
35037: PUSH
35038: DOUBLE
35039: LD_INT 1
35041: DEC
35042: ST_TO_ADDR
35043: LD_VAR 0 1
35047: PUSH
35048: FOR_TO
35049: IFFALSE 35085
// if value = array [ i ] then
35051: LD_VAR 0 2
35055: PUSH
35056: LD_VAR 0 1
35060: PUSH
35061: LD_VAR 0 4
35065: ARRAY
35066: EQUAL
35067: IFFALSE 35083
// begin result := i ;
35069: LD_ADDR_VAR 0 3
35073: PUSH
35074: LD_VAR 0 4
35078: ST_TO_ADDR
// exit ;
35079: POP
35080: POP
35081: GO 35087
// end ;
35083: GO 35048
35085: POP
35086: POP
// end ;
35087: LD_VAR 0 3
35091: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35092: LD_INT 0
35094: PPUSH
// vc_chassis := chassis ;
35095: LD_ADDR_OWVAR 37
35099: PUSH
35100: LD_VAR 0 1
35104: ST_TO_ADDR
// vc_engine := engine ;
35105: LD_ADDR_OWVAR 39
35109: PUSH
35110: LD_VAR 0 2
35114: ST_TO_ADDR
// vc_control := control ;
35115: LD_ADDR_OWVAR 38
35119: PUSH
35120: LD_VAR 0 3
35124: ST_TO_ADDR
// vc_weapon := weapon ;
35125: LD_ADDR_OWVAR 40
35129: PUSH
35130: LD_VAR 0 4
35134: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35135: LD_ADDR_OWVAR 41
35139: PUSH
35140: LD_VAR 0 5
35144: ST_TO_ADDR
// end ;
35145: LD_VAR 0 6
35149: RET
// export function WantPlant ( unit ) ; var task ; begin
35150: LD_INT 0
35152: PPUSH
35153: PPUSH
// result := false ;
35154: LD_ADDR_VAR 0 2
35158: PUSH
35159: LD_INT 0
35161: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35162: LD_ADDR_VAR 0 3
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 437
35176: ST_TO_ADDR
// if task then
35177: LD_VAR 0 3
35181: IFFALSE 35209
// if task [ 1 ] [ 1 ] = p then
35183: LD_VAR 0 3
35187: PUSH
35188: LD_INT 1
35190: ARRAY
35191: PUSH
35192: LD_INT 1
35194: ARRAY
35195: PUSH
35196: LD_STRING p
35198: EQUAL
35199: IFFALSE 35209
// result := true ;
35201: LD_ADDR_VAR 0 2
35205: PUSH
35206: LD_INT 1
35208: ST_TO_ADDR
// end ;
35209: LD_VAR 0 2
35213: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35214: LD_INT 0
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
// if pos < 1 then
35220: LD_VAR 0 2
35224: PUSH
35225: LD_INT 1
35227: LESS
35228: IFFALSE 35232
// exit ;
35230: GO 35535
// if pos = 1 then
35232: LD_VAR 0 2
35236: PUSH
35237: LD_INT 1
35239: EQUAL
35240: IFFALSE 35273
// result := Replace ( arr , pos [ 1 ] , value ) else
35242: LD_ADDR_VAR 0 4
35246: PUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: LD_VAR 0 2
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: PPUSH
35261: LD_VAR 0 3
35265: PPUSH
35266: CALL_OW 1
35270: ST_TO_ADDR
35271: GO 35535
// begin tmp := arr ;
35273: LD_ADDR_VAR 0 6
35277: PUSH
35278: LD_VAR 0 1
35282: ST_TO_ADDR
// s_arr := [ tmp ] ;
35283: LD_ADDR_VAR 0 7
35287: PUSH
35288: LD_VAR 0 6
35292: PUSH
35293: EMPTY
35294: LIST
35295: ST_TO_ADDR
// for i = 1 to pos - 1 do
35296: LD_ADDR_VAR 0 5
35300: PUSH
35301: DOUBLE
35302: LD_INT 1
35304: DEC
35305: ST_TO_ADDR
35306: LD_VAR 0 2
35310: PUSH
35311: LD_INT 1
35313: MINUS
35314: PUSH
35315: FOR_TO
35316: IFFALSE 35361
// begin tmp := tmp [ pos [ i ] ] ;
35318: LD_ADDR_VAR 0 6
35322: PUSH
35323: LD_VAR 0 6
35327: PUSH
35328: LD_VAR 0 2
35332: PUSH
35333: LD_VAR 0 5
35337: ARRAY
35338: ARRAY
35339: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35340: LD_ADDR_VAR 0 7
35344: PUSH
35345: LD_VAR 0 7
35349: PUSH
35350: LD_VAR 0 6
35354: PUSH
35355: EMPTY
35356: LIST
35357: ADD
35358: ST_TO_ADDR
// end ;
35359: GO 35315
35361: POP
35362: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35363: LD_ADDR_VAR 0 6
35367: PUSH
35368: LD_VAR 0 6
35372: PPUSH
35373: LD_VAR 0 2
35377: PUSH
35378: LD_VAR 0 2
35382: ARRAY
35383: PPUSH
35384: LD_VAR 0 3
35388: PPUSH
35389: CALL_OW 1
35393: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35394: LD_ADDR_VAR 0 7
35398: PUSH
35399: LD_VAR 0 7
35403: PPUSH
35404: LD_VAR 0 7
35408: PPUSH
35409: LD_VAR 0 6
35413: PPUSH
35414: CALL_OW 1
35418: ST_TO_ADDR
// for i = s_arr downto 2 do
35419: LD_ADDR_VAR 0 5
35423: PUSH
35424: DOUBLE
35425: LD_VAR 0 7
35429: INC
35430: ST_TO_ADDR
35431: LD_INT 2
35433: PUSH
35434: FOR_DOWNTO
35435: IFFALSE 35519
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35437: LD_ADDR_VAR 0 6
35441: PUSH
35442: LD_VAR 0 7
35446: PUSH
35447: LD_VAR 0 5
35451: PUSH
35452: LD_INT 1
35454: MINUS
35455: ARRAY
35456: PPUSH
35457: LD_VAR 0 2
35461: PUSH
35462: LD_VAR 0 5
35466: PUSH
35467: LD_INT 1
35469: MINUS
35470: ARRAY
35471: PPUSH
35472: LD_VAR 0 7
35476: PUSH
35477: LD_VAR 0 5
35481: ARRAY
35482: PPUSH
35483: CALL_OW 1
35487: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35488: LD_ADDR_VAR 0 7
35492: PUSH
35493: LD_VAR 0 7
35497: PPUSH
35498: LD_VAR 0 5
35502: PUSH
35503: LD_INT 1
35505: MINUS
35506: PPUSH
35507: LD_VAR 0 6
35511: PPUSH
35512: CALL_OW 1
35516: ST_TO_ADDR
// end ;
35517: GO 35434
35519: POP
35520: POP
// result := s_arr [ 1 ] ;
35521: LD_ADDR_VAR 0 4
35525: PUSH
35526: LD_VAR 0 7
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: ST_TO_ADDR
// end ; end ;
35535: LD_VAR 0 4
35539: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35540: LD_INT 0
35542: PPUSH
35543: PPUSH
// if not list then
35544: LD_VAR 0 1
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 35644
// i := list [ pos1 ] ;
35553: LD_ADDR_VAR 0 5
35557: PUSH
35558: LD_VAR 0 1
35562: PUSH
35563: LD_VAR 0 2
35567: ARRAY
35568: ST_TO_ADDR
// if not i then
35569: LD_VAR 0 5
35573: NOT
35574: IFFALSE 35578
// exit ;
35576: GO 35644
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35578: LD_ADDR_VAR 0 1
35582: PUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: LD_VAR 0 2
35592: PPUSH
35593: LD_VAR 0 1
35597: PUSH
35598: LD_VAR 0 3
35602: ARRAY
35603: PPUSH
35604: CALL_OW 1
35608: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35609: LD_ADDR_VAR 0 1
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_VAR 0 3
35623: PPUSH
35624: LD_VAR 0 5
35628: PPUSH
35629: CALL_OW 1
35633: ST_TO_ADDR
// result := list ;
35634: LD_ADDR_VAR 0 4
35638: PUSH
35639: LD_VAR 0 1
35643: ST_TO_ADDR
// end ;
35644: LD_VAR 0 4
35648: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35649: LD_INT 0
35651: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35652: LD_ADDR_VAR 0 5
35656: PUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 250
35666: PPUSH
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL_OW 251
35676: PPUSH
35677: LD_VAR 0 2
35681: PPUSH
35682: LD_VAR 0 3
35686: PPUSH
35687: LD_VAR 0 4
35691: PPUSH
35692: CALL 36074 0 5
35696: ST_TO_ADDR
// end ;
35697: LD_VAR 0 5
35701: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
// if not list or not unit then
35708: LD_VAR 0 2
35712: NOT
35713: IFTRUE 35722
35715: PUSH
35716: LD_VAR 0 1
35720: NOT
35721: OR
35722: IFFALSE 35726
// exit ;
35724: GO 36069
// result := [ ] ;
35726: LD_ADDR_VAR 0 5
35730: PUSH
35731: EMPTY
35732: ST_TO_ADDR
// for i in list do
35733: LD_ADDR_VAR 0 6
35737: PUSH
35738: LD_VAR 0 2
35742: PUSH
35743: FOR_IN
35744: IFFALSE 35962
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35746: LD_ADDR_VAR 0 8
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: LD_VAR 0 6
35760: PUSH
35761: LD_INT 1
35763: ARRAY
35764: PPUSH
35765: LD_VAR 0 6
35769: PUSH
35770: LD_INT 2
35772: ARRAY
35773: PPUSH
35774: CALL_OW 297
35778: ST_TO_ADDR
// if not Count ( result ) then
35779: LD_VAR 0 5
35783: PPUSH
35784: CALL 32296 0 1
35788: NOT
35789: IFFALSE 35822
// begin result := Join ( result , [ i , tmp ] ) ;
35791: LD_ADDR_VAR 0 5
35795: PUSH
35796: LD_VAR 0 5
35800: PPUSH
35801: LD_VAR 0 6
35805: PUSH
35806: LD_VAR 0 8
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PPUSH
35815: CALL 68262 0 2
35819: ST_TO_ADDR
// continue ;
35820: GO 35743
// end ; if result [ result ] [ 2 ] <= tmp then
35822: LD_VAR 0 5
35826: PUSH
35827: LD_VAR 0 5
35831: ARRAY
35832: PUSH
35833: LD_INT 2
35835: ARRAY
35836: PUSH
35837: LD_VAR 0 8
35841: LESSEQUAL
35842: IFFALSE 35875
// result := Join ( result , [ i , tmp ] ) else
35844: LD_ADDR_VAR 0 5
35848: PUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_VAR 0 6
35858: PUSH
35859: LD_VAR 0 8
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PPUSH
35868: CALL 68262 0 2
35872: ST_TO_ADDR
35873: GO 35960
// begin for j := 1 to Count ( result ) do
35875: LD_ADDR_VAR 0 7
35879: PUSH
35880: DOUBLE
35881: LD_INT 1
35883: DEC
35884: ST_TO_ADDR
35885: LD_VAR 0 5
35889: PPUSH
35890: CALL 32296 0 1
35894: PUSH
35895: FOR_TO
35896: IFFALSE 35958
// begin if tmp < result [ j ] [ 2 ] then
35898: LD_VAR 0 8
35902: PUSH
35903: LD_VAR 0 5
35907: PUSH
35908: LD_VAR 0 7
35912: ARRAY
35913: PUSH
35914: LD_INT 2
35916: ARRAY
35917: LESS
35918: IFFALSE 35956
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35920: LD_ADDR_VAR 0 5
35924: PUSH
35925: LD_VAR 0 5
35929: PPUSH
35930: LD_VAR 0 7
35934: PPUSH
35935: LD_VAR 0 6
35939: PUSH
35940: LD_VAR 0 8
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PPUSH
35949: CALL_OW 2
35953: ST_TO_ADDR
// break ;
35954: GO 35958
// end ; end ;
35956: GO 35895
35958: POP
35959: POP
// end ; end ;
35960: GO 35743
35962: POP
35963: POP
// if result and not asc then
35964: LD_VAR 0 5
35968: IFFALSE 35977
35970: PUSH
35971: LD_VAR 0 3
35975: NOT
35976: AND
35977: IFFALSE 35994
// result := ReverseArray ( result ) ;
35979: LD_ADDR_VAR 0 5
35983: PUSH
35984: LD_VAR 0 5
35988: PPUSH
35989: CALL 63352 0 1
35993: ST_TO_ADDR
// tmp := [ ] ;
35994: LD_ADDR_VAR 0 8
35998: PUSH
35999: EMPTY
36000: ST_TO_ADDR
// if mode then
36001: LD_VAR 0 4
36005: IFFALSE 36069
// begin for i := 1 to result do
36007: LD_ADDR_VAR 0 6
36011: PUSH
36012: DOUBLE
36013: LD_INT 1
36015: DEC
36016: ST_TO_ADDR
36017: LD_VAR 0 5
36021: PUSH
36022: FOR_TO
36023: IFFALSE 36057
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36025: LD_ADDR_VAR 0 8
36029: PUSH
36030: LD_VAR 0 8
36034: PPUSH
36035: LD_VAR 0 5
36039: PUSH
36040: LD_VAR 0 6
36044: ARRAY
36045: PUSH
36046: LD_INT 1
36048: ARRAY
36049: PPUSH
36050: CALL 68262 0 2
36054: ST_TO_ADDR
36055: GO 36022
36057: POP
36058: POP
// result := tmp ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 8
36068: ST_TO_ADDR
// end ; end ;
36069: LD_VAR 0 5
36073: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36074: LD_INT 0
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
// if not list then
36080: LD_VAR 0 3
36084: NOT
36085: IFFALSE 36089
// exit ;
36087: GO 36479
// result := [ ] ;
36089: LD_ADDR_VAR 0 6
36093: PUSH
36094: EMPTY
36095: ST_TO_ADDR
// for i in list do
36096: LD_ADDR_VAR 0 7
36100: PUSH
36101: LD_VAR 0 3
36105: PUSH
36106: FOR_IN
36107: IFFALSE 36309
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_VAR 0 7
36118: PPUSH
36119: LD_VAR 0 1
36123: PPUSH
36124: LD_VAR 0 2
36128: PPUSH
36129: CALL_OW 297
36133: ST_TO_ADDR
// if not result then
36134: LD_VAR 0 6
36138: NOT
36139: IFFALSE 36165
// result := [ [ i , tmp ] ] else
36141: LD_ADDR_VAR 0 6
36145: PUSH
36146: LD_VAR 0 7
36150: PUSH
36151: LD_VAR 0 9
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: ST_TO_ADDR
36163: GO 36307
// begin if result [ result ] [ 2 ] <= tmp then
36165: LD_VAR 0 6
36169: PUSH
36170: LD_VAR 0 6
36174: ARRAY
36175: PUSH
36176: LD_INT 2
36178: ARRAY
36179: PUSH
36180: LD_VAR 0 9
36184: LESSEQUAL
36185: IFFALSE 36227
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36187: LD_ADDR_VAR 0 6
36191: PUSH
36192: LD_VAR 0 6
36196: PPUSH
36197: LD_VAR 0 6
36201: PUSH
36202: LD_INT 1
36204: PLUS
36205: PPUSH
36206: LD_VAR 0 7
36210: PUSH
36211: LD_VAR 0 9
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PPUSH
36220: CALL_OW 2
36224: ST_TO_ADDR
36225: GO 36307
// for j := 1 to result do
36227: LD_ADDR_VAR 0 8
36231: PUSH
36232: DOUBLE
36233: LD_INT 1
36235: DEC
36236: ST_TO_ADDR
36237: LD_VAR 0 6
36241: PUSH
36242: FOR_TO
36243: IFFALSE 36305
// begin if tmp < result [ j ] [ 2 ] then
36245: LD_VAR 0 9
36249: PUSH
36250: LD_VAR 0 6
36254: PUSH
36255: LD_VAR 0 8
36259: ARRAY
36260: PUSH
36261: LD_INT 2
36263: ARRAY
36264: LESS
36265: IFFALSE 36303
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36267: LD_ADDR_VAR 0 6
36271: PUSH
36272: LD_VAR 0 6
36276: PPUSH
36277: LD_VAR 0 8
36281: PPUSH
36282: LD_VAR 0 7
36286: PUSH
36287: LD_VAR 0 9
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PPUSH
36296: CALL_OW 2
36300: ST_TO_ADDR
// break ;
36301: GO 36305
// end ; end ;
36303: GO 36242
36305: POP
36306: POP
// end ; end ;
36307: GO 36106
36309: POP
36310: POP
// if result and not asc then
36311: LD_VAR 0 6
36315: IFFALSE 36324
36317: PUSH
36318: LD_VAR 0 4
36322: NOT
36323: AND
36324: IFFALSE 36399
// begin tmp := result ;
36326: LD_ADDR_VAR 0 9
36330: PUSH
36331: LD_VAR 0 6
36335: ST_TO_ADDR
// for i = tmp downto 1 do
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: DOUBLE
36342: LD_VAR 0 9
36346: INC
36347: ST_TO_ADDR
36348: LD_INT 1
36350: PUSH
36351: FOR_DOWNTO
36352: IFFALSE 36397
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36354: LD_ADDR_VAR 0 6
36358: PUSH
36359: LD_VAR 0 6
36363: PPUSH
36364: LD_VAR 0 9
36368: PUSH
36369: LD_VAR 0 7
36373: MINUS
36374: PUSH
36375: LD_INT 1
36377: PLUS
36378: PPUSH
36379: LD_VAR 0 9
36383: PUSH
36384: LD_VAR 0 7
36388: ARRAY
36389: PPUSH
36390: CALL_OW 1
36394: ST_TO_ADDR
36395: GO 36351
36397: POP
36398: POP
// end ; tmp := [ ] ;
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: EMPTY
36405: ST_TO_ADDR
// if mode then
36406: LD_VAR 0 5
36410: IFFALSE 36479
// begin for i = 1 to result do
36412: LD_ADDR_VAR 0 7
36416: PUSH
36417: DOUBLE
36418: LD_INT 1
36420: DEC
36421: ST_TO_ADDR
36422: LD_VAR 0 6
36426: PUSH
36427: FOR_TO
36428: IFFALSE 36467
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36430: LD_ADDR_VAR 0 9
36434: PUSH
36435: LD_VAR 0 9
36439: PPUSH
36440: LD_VAR 0 7
36444: PPUSH
36445: LD_VAR 0 6
36449: PUSH
36450: LD_VAR 0 7
36454: ARRAY
36455: PUSH
36456: LD_INT 1
36458: ARRAY
36459: PPUSH
36460: CALL_OW 1
36464: ST_TO_ADDR
36465: GO 36427
36467: POP
36468: POP
// result := tmp ;
36469: LD_ADDR_VAR 0 6
36473: PUSH
36474: LD_VAR 0 9
36478: ST_TO_ADDR
// end ; end ;
36479: LD_VAR 0 6
36483: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36484: LD_INT 0
36486: PPUSH
36487: PPUSH
36488: PPUSH
36489: PPUSH
36490: PPUSH
36491: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// if not x or not y then
36514: LD_VAR 0 2
36518: NOT
36519: IFTRUE 36528
36521: PUSH
36522: LD_VAR 0 3
36526: NOT
36527: OR
36528: IFFALSE 36532
// exit ;
36530: GO 38188
// if not range then
36532: LD_VAR 0 4
36536: NOT
36537: IFFALSE 36547
// range := 10 ;
36539: LD_ADDR_VAR 0 4
36543: PUSH
36544: LD_INT 10
36546: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36547: LD_ADDR_VAR 0 8
36551: PUSH
36552: LD_INT 81
36554: PUSH
36555: LD_VAR 0 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 92
36566: PUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_VAR 0 3
36576: PUSH
36577: LD_VAR 0 4
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: LD_INT 21
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: PPUSH
36610: CALL_OW 69
36614: ST_TO_ADDR
// if not tmp then
36615: LD_VAR 0 8
36619: NOT
36620: IFFALSE 36624
// exit ;
36622: GO 38188
// for i in tmp do
36624: LD_ADDR_VAR 0 6
36628: PUSH
36629: LD_VAR 0 8
36633: PUSH
36634: FOR_IN
36635: IFFALSE 38163
// begin points := [ 0 , 0 , 0 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// bpoints := 1 ;
36656: LD_ADDR_VAR 0 10
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36664: LD_VAR 0 6
36668: PPUSH
36669: CALL_OW 247
36673: PUSH
36674: LD_INT 1
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36682
36680: GO 37264
36682: POP
// begin if GetClass ( i ) = 1 then
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL_OW 257
36692: PUSH
36693: LD_INT 1
36695: EQUAL
36696: IFFALSE 36717
// points := [ 10 , 5 , 3 ] ;
36698: LD_ADDR_VAR 0 9
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36717: LD_VAR 0 6
36721: PPUSH
36722: CALL_OW 257
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 4
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: IN
36741: IFFALSE 36762
// points := [ 3 , 2 , 1 ] ;
36743: LD_ADDR_VAR 0 9
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36762: LD_VAR 0 6
36766: PPUSH
36767: CALL_OW 257
36771: PUSH
36772: LD_INT 5
36774: EQUAL
36775: IFFALSE 36796
// points := [ 130 , 5 , 2 ] ;
36777: LD_ADDR_VAR 0 9
36781: PUSH
36782: LD_INT 130
36784: PUSH
36785: LD_INT 5
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 257
36805: PUSH
36806: LD_INT 8
36808: EQUAL
36809: IFFALSE 36830
// points := [ 35 , 35 , 30 ] ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_INT 35
36818: PUSH
36819: LD_INT 35
36821: PUSH
36822: LD_INT 30
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36830: LD_VAR 0 6
36834: PPUSH
36835: CALL_OW 257
36839: PUSH
36840: LD_INT 9
36842: EQUAL
36843: IFFALSE 36864
// points := [ 20 , 55 , 40 ] ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_INT 20
36852: PUSH
36853: LD_INT 55
36855: PUSH
36856: LD_INT 40
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36864: LD_VAR 0 6
36868: PPUSH
36869: CALL_OW 257
36873: PUSH
36874: LD_INT 12
36876: PUSH
36877: LD_INT 16
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: IN
36884: IFFALSE 36905
// points := [ 5 , 3 , 2 ] ;
36886: LD_ADDR_VAR 0 9
36890: PUSH
36891: LD_INT 5
36893: PUSH
36894: LD_INT 3
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 257
36914: PUSH
36915: LD_INT 17
36917: EQUAL
36918: IFFALSE 36939
// points := [ 100 , 50 , 75 ] ;
36920: LD_ADDR_VAR 0 9
36924: PUSH
36925: LD_INT 100
36927: PUSH
36928: LD_INT 50
36930: PUSH
36931: LD_INT 75
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL_OW 257
36948: PUSH
36949: LD_INT 15
36951: EQUAL
36952: IFFALSE 36973
// points := [ 10 , 5 , 3 ] ;
36954: LD_ADDR_VAR 0 9
36958: PUSH
36959: LD_INT 10
36961: PUSH
36962: LD_INT 5
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36973: LD_VAR 0 6
36977: PPUSH
36978: CALL_OW 257
36982: PUSH
36983: LD_INT 14
36985: EQUAL
36986: IFFALSE 37007
// points := [ 10 , 0 , 0 ] ;
36988: LD_ADDR_VAR 0 9
36992: PUSH
36993: LD_INT 10
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37007: LD_VAR 0 6
37011: PPUSH
37012: CALL_OW 257
37016: PUSH
37017: LD_INT 11
37019: EQUAL
37020: IFFALSE 37041
// points := [ 30 , 10 , 5 ] ;
37022: LD_ADDR_VAR 0 9
37026: PUSH
37027: LD_INT 30
37029: PUSH
37030: LD_INT 10
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37041: LD_VAR 0 1
37045: PPUSH
37046: LD_INT 5
37048: PPUSH
37049: CALL_OW 321
37053: PUSH
37054: LD_INT 2
37056: EQUAL
37057: IFFALSE 37074
// bpoints := bpoints * 1.8 ;
37059: LD_ADDR_VAR 0 10
37063: PUSH
37064: LD_VAR 0 10
37068: PUSH
37069: LD_REAL  1.80000000000000E+0000
37072: MUL
37073: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37074: LD_VAR 0 6
37078: PPUSH
37079: CALL_OW 257
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: LD_INT 4
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: IN
37102: IFFALSE 37122
37104: PUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: LD_INT 51
37112: PPUSH
37113: CALL_OW 321
37117: PUSH
37118: LD_INT 2
37120: EQUAL
37121: AND
37122: IFFALSE 37139
// bpoints := bpoints * 1.2 ;
37124: LD_ADDR_VAR 0 10
37128: PUSH
37129: LD_VAR 0 10
37133: PUSH
37134: LD_REAL  1.20000000000000E+0000
37137: MUL
37138: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37139: LD_VAR 0 6
37143: PPUSH
37144: CALL_OW 257
37148: PUSH
37149: LD_INT 5
37151: PUSH
37152: LD_INT 7
37154: PUSH
37155: LD_INT 9
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: IN
37163: IFFALSE 37183
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: LD_INT 52
37173: PPUSH
37174: CALL_OW 321
37178: PUSH
37179: LD_INT 2
37181: EQUAL
37182: AND
37183: IFFALSE 37200
// bpoints := bpoints * 1.5 ;
37185: LD_ADDR_VAR 0 10
37189: PUSH
37190: LD_VAR 0 10
37194: PUSH
37195: LD_REAL  1.50000000000000E+0000
37198: MUL
37199: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37200: LD_VAR 0 1
37204: PPUSH
37205: LD_INT 66
37207: PPUSH
37208: CALL_OW 321
37212: PUSH
37213: LD_INT 2
37215: EQUAL
37216: IFFALSE 37233
// bpoints := bpoints * 1.1 ;
37218: LD_ADDR_VAR 0 10
37222: PUSH
37223: LD_VAR 0 10
37227: PUSH
37228: LD_REAL  1.10000000000000E+0000
37231: MUL
37232: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37233: LD_ADDR_VAR 0 10
37237: PUSH
37238: LD_VAR 0 10
37242: PUSH
37243: LD_VAR 0 6
37247: PPUSH
37248: LD_INT 1
37250: PPUSH
37251: CALL_OW 259
37255: PUSH
37256: LD_REAL  1.15000000000000E+0000
37259: MUL
37260: MUL
37261: ST_TO_ADDR
// end ; unit_vehicle :
37262: GO 38092
37264: LD_INT 2
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37272
37270: GO 38080
37272: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37273: LD_VAR 0 6
37277: PPUSH
37278: CALL_OW 264
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 42
37288: PUSH
37289: LD_INT 24
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: IN
37297: IFFALSE 37318
// points := [ 25 , 5 , 3 ] ;
37299: LD_ADDR_VAR 0 9
37303: PUSH
37304: LD_INT 25
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 264
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: LD_INT 43
37333: PUSH
37334: LD_INT 25
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: IN
37342: IFFALSE 37363
// points := [ 40 , 15 , 5 ] ;
37344: LD_ADDR_VAR 0 9
37348: PUSH
37349: LD_INT 40
37351: PUSH
37352: LD_INT 15
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37363: LD_VAR 0 6
37367: PPUSH
37368: CALL_OW 264
37372: PUSH
37373: LD_INT 3
37375: PUSH
37376: LD_INT 23
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: IN
37383: IFFALSE 37404
// points := [ 7 , 25 , 8 ] ;
37385: LD_ADDR_VAR 0 9
37389: PUSH
37390: LD_INT 7
37392: PUSH
37393: LD_INT 25
37395: PUSH
37396: LD_INT 8
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37404: LD_VAR 0 6
37408: PPUSH
37409: CALL_OW 264
37413: PUSH
37414: LD_INT 5
37416: PUSH
37417: LD_INT 27
37419: PUSH
37420: LD_INT 44
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: IN
37428: IFFALSE 37449
// points := [ 14 , 50 , 16 ] ;
37430: LD_ADDR_VAR 0 9
37434: PUSH
37435: LD_INT 14
37437: PUSH
37438: LD_INT 50
37440: PUSH
37441: LD_INT 16
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 264
37458: PUSH
37459: LD_INT 6
37461: PUSH
37462: LD_INT 46
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: IN
37469: IFFALSE 37490
// points := [ 32 , 120 , 70 ] ;
37471: LD_ADDR_VAR 0 9
37475: PUSH
37476: LD_INT 32
37478: PUSH
37479: LD_INT 120
37481: PUSH
37482: LD_INT 70
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37490: LD_VAR 0 6
37494: PPUSH
37495: CALL_OW 264
37499: PUSH
37500: LD_INT 7
37502: PUSH
37503: LD_INT 28
37505: PUSH
37506: LD_INT 45
37508: PUSH
37509: LD_INT 92
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: IN
37518: IFFALSE 37539
// points := [ 35 , 20 , 45 ] ;
37520: LD_ADDR_VAR 0 9
37524: PUSH
37525: LD_INT 35
37527: PUSH
37528: LD_INT 20
37530: PUSH
37531: LD_INT 45
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37539: LD_VAR 0 6
37543: PPUSH
37544: CALL_OW 264
37548: PUSH
37549: LD_INT 47
37551: PUSH
37552: EMPTY
37553: LIST
37554: IN
37555: IFFALSE 37576
// points := [ 67 , 45 , 75 ] ;
37557: LD_ADDR_VAR 0 9
37561: PUSH
37562: LD_INT 67
37564: PUSH
37565: LD_INT 45
37567: PUSH
37568: LD_INT 75
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37576: LD_VAR 0 6
37580: PPUSH
37581: CALL_OW 264
37585: PUSH
37586: LD_INT 26
37588: PUSH
37589: EMPTY
37590: LIST
37591: IN
37592: IFFALSE 37613
// points := [ 120 , 30 , 80 ] ;
37594: LD_ADDR_VAR 0 9
37598: PUSH
37599: LD_INT 120
37601: PUSH
37602: LD_INT 30
37604: PUSH
37605: LD_INT 80
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: LIST
37612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37613: LD_VAR 0 6
37617: PPUSH
37618: CALL_OW 264
37622: PUSH
37623: LD_INT 22
37625: PUSH
37626: EMPTY
37627: LIST
37628: IN
37629: IFFALSE 37650
// points := [ 40 , 1 , 1 ] ;
37631: LD_ADDR_VAR 0 9
37635: PUSH
37636: LD_INT 40
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37650: LD_VAR 0 6
37654: PPUSH
37655: CALL_OW 264
37659: PUSH
37660: LD_INT 29
37662: PUSH
37663: EMPTY
37664: LIST
37665: IN
37666: IFFALSE 37687
// points := [ 70 , 200 , 400 ] ;
37668: LD_ADDR_VAR 0 9
37672: PUSH
37673: LD_INT 70
37675: PUSH
37676: LD_INT 200
37678: PUSH
37679: LD_INT 400
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37687: LD_VAR 0 6
37691: PPUSH
37692: CALL_OW 264
37696: PUSH
37697: LD_INT 14
37699: PUSH
37700: LD_INT 53
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: IN
37707: IFFALSE 37728
// points := [ 40 , 10 , 20 ] ;
37709: LD_ADDR_VAR 0 9
37713: PUSH
37714: LD_INT 40
37716: PUSH
37717: LD_INT 10
37719: PUSH
37720: LD_INT 20
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37728: LD_VAR 0 6
37732: PPUSH
37733: CALL_OW 264
37737: PUSH
37738: LD_INT 9
37740: PUSH
37741: EMPTY
37742: LIST
37743: IN
37744: IFFALSE 37765
// points := [ 5 , 70 , 20 ] ;
37746: LD_ADDR_VAR 0 9
37750: PUSH
37751: LD_INT 5
37753: PUSH
37754: LD_INT 70
37756: PUSH
37757: LD_INT 20
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37765: LD_VAR 0 6
37769: PPUSH
37770: CALL_OW 264
37774: PUSH
37775: LD_INT 10
37777: PUSH
37778: EMPTY
37779: LIST
37780: IN
37781: IFFALSE 37802
// points := [ 35 , 110 , 70 ] ;
37783: LD_ADDR_VAR 0 9
37787: PUSH
37788: LD_INT 35
37790: PUSH
37791: LD_INT 110
37793: PUSH
37794: LD_INT 70
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37802: LD_VAR 0 6
37806: PPUSH
37807: CALL_OW 265
37811: PUSH
37812: LD_INT 25
37814: EQUAL
37815: IFFALSE 37836
// points := [ 80 , 65 , 100 ] ;
37817: LD_ADDR_VAR 0 9
37821: PUSH
37822: LD_INT 80
37824: PUSH
37825: LD_INT 65
37827: PUSH
37828: LD_INT 100
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37836: LD_VAR 0 6
37840: PPUSH
37841: CALL_OW 263
37845: PUSH
37846: LD_INT 1
37848: EQUAL
37849: IFFALSE 37884
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37851: LD_ADDR_VAR 0 10
37855: PUSH
37856: LD_VAR 0 10
37860: PUSH
37861: LD_VAR 0 6
37865: PPUSH
37866: CALL_OW 311
37870: PPUSH
37871: LD_INT 3
37873: PPUSH
37874: CALL_OW 259
37878: PUSH
37879: LD_INT 4
37881: MUL
37882: MUL
37883: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37884: LD_VAR 0 6
37888: PPUSH
37889: CALL_OW 263
37893: PUSH
37894: LD_INT 2
37896: EQUAL
37897: IFFALSE 37948
// begin j := IsControledBy ( i ) ;
37899: LD_ADDR_VAR 0 7
37903: PUSH
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 312
37913: ST_TO_ADDR
// if j then
37914: LD_VAR 0 7
37918: IFFALSE 37948
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37920: LD_ADDR_VAR 0 10
37924: PUSH
37925: LD_VAR 0 10
37929: PUSH
37930: LD_VAR 0 7
37934: PPUSH
37935: LD_INT 3
37937: PPUSH
37938: CALL_OW 259
37942: PUSH
37943: LD_INT 3
37945: MUL
37946: MUL
37947: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37948: LD_VAR 0 6
37952: PPUSH
37953: CALL_OW 264
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: LD_INT 6
37963: PUSH
37964: LD_INT 46
37966: PUSH
37967: LD_INT 44
37969: PUSH
37970: LD_INT 47
37972: PUSH
37973: LD_INT 45
37975: PUSH
37976: LD_INT 28
37978: PUSH
37979: LD_INT 7
37981: PUSH
37982: LD_INT 27
37984: PUSH
37985: LD_INT 29
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: IN
38000: IFFALSE 38020
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: LD_INT 52
38010: PPUSH
38011: CALL_OW 321
38015: PUSH
38016: LD_INT 2
38018: EQUAL
38019: AND
38020: IFFALSE 38037
// bpoints := bpoints * 1.2 ;
38022: LD_ADDR_VAR 0 10
38026: PUSH
38027: LD_VAR 0 10
38031: PUSH
38032: LD_REAL  1.20000000000000E+0000
38035: MUL
38036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38037: LD_VAR 0 6
38041: PPUSH
38042: CALL_OW 264
38046: PUSH
38047: LD_INT 6
38049: PUSH
38050: LD_INT 46
38052: PUSH
38053: LD_INT 47
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: IN
38061: IFFALSE 38078
// bpoints := bpoints * 1.2 ;
38063: LD_ADDR_VAR 0 10
38067: PUSH
38068: LD_VAR 0 10
38072: PUSH
38073: LD_REAL  1.20000000000000E+0000
38076: MUL
38077: ST_TO_ADDR
// end ; unit_building :
38078: GO 38092
38080: LD_INT 3
38082: DOUBLE
38083: EQUAL
38084: IFTRUE 38088
38086: GO 38091
38088: POP
// ; end ;
38089: GO 38092
38091: POP
// for j = 1 to 3 do
38092: LD_ADDR_VAR 0 7
38096: PUSH
38097: DOUBLE
38098: LD_INT 1
38100: DEC
38101: ST_TO_ADDR
38102: LD_INT 3
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38159
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38108: LD_ADDR_VAR 0 5
38112: PUSH
38113: LD_VAR 0 5
38117: PPUSH
38118: LD_VAR 0 7
38122: PPUSH
38123: LD_VAR 0 5
38127: PUSH
38128: LD_VAR 0 7
38132: ARRAY
38133: PUSH
38134: LD_VAR 0 9
38138: PUSH
38139: LD_VAR 0 7
38143: ARRAY
38144: PUSH
38145: LD_VAR 0 10
38149: MUL
38150: PLUS
38151: PPUSH
38152: CALL_OW 1
38156: ST_TO_ADDR
38157: GO 38105
38159: POP
38160: POP
// end ;
38161: GO 36634
38163: POP
38164: POP
// result := Replace ( result , 4 , tmp ) ;
38165: LD_ADDR_VAR 0 5
38169: PUSH
38170: LD_VAR 0 5
38174: PPUSH
38175: LD_INT 4
38177: PPUSH
38178: LD_VAR 0 8
38182: PPUSH
38183: CALL_OW 1
38187: ST_TO_ADDR
// end ;
38188: LD_VAR 0 5
38192: RET
// export function DangerAtRange ( unit , range ) ; begin
38193: LD_INT 0
38195: PPUSH
// if not unit then
38196: LD_VAR 0 1
38200: NOT
38201: IFFALSE 38205
// exit ;
38203: GO 38250
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38205: LD_ADDR_VAR 0 3
38209: PUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 255
38219: PPUSH
38220: LD_VAR 0 1
38224: PPUSH
38225: CALL_OW 250
38229: PPUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 251
38239: PPUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: CALL 36484 0 4
38249: ST_TO_ADDR
// end ;
38250: LD_VAR 0 3
38254: RET
// export function DangerInArea ( side , area ) ; begin
38255: LD_INT 0
38257: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38258: LD_ADDR_VAR 0 3
38262: PUSH
38263: LD_VAR 0 2
38267: PPUSH
38268: LD_INT 81
38270: PUSH
38271: LD_VAR 0 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PPUSH
38280: CALL_OW 70
38284: ST_TO_ADDR
// end ;
38285: LD_VAR 0 3
38289: RET
// export function IsExtension ( b ) ; begin
38290: LD_INT 0
38292: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38293: LD_ADDR_VAR 0 2
38297: PUSH
38298: LD_VAR 0 1
38302: PUSH
38303: LD_INT 23
38305: PUSH
38306: LD_INT 20
38308: PUSH
38309: LD_INT 22
38311: PUSH
38312: LD_INT 17
38314: PUSH
38315: LD_INT 24
38317: PUSH
38318: LD_INT 21
38320: PUSH
38321: LD_INT 19
38323: PUSH
38324: LD_INT 16
38326: PUSH
38327: LD_INT 25
38329: PUSH
38330: LD_INT 18
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: IN
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 2
38350: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38351: LD_INT 0
38353: PPUSH
38354: PPUSH
38355: PPUSH
// result := [ ] ;
38356: LD_ADDR_VAR 0 4
38360: PUSH
38361: EMPTY
38362: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38363: LD_ADDR_VAR 0 5
38367: PUSH
38368: LD_VAR 0 2
38372: PPUSH
38373: LD_INT 21
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 70
38387: ST_TO_ADDR
// if not tmp then
38388: LD_VAR 0 5
38392: NOT
38393: IFFALSE 38397
// exit ;
38395: GO 38461
// if checkLink then
38397: LD_VAR 0 3
38401: IFFALSE 38451
// begin for i in tmp do
38403: LD_ADDR_VAR 0 6
38407: PUSH
38408: LD_VAR 0 5
38412: PUSH
38413: FOR_IN
38414: IFFALSE 38449
// if GetBase ( i ) <> base then
38416: LD_VAR 0 6
38420: PPUSH
38421: CALL_OW 274
38425: PUSH
38426: LD_VAR 0 1
38430: NONEQUAL
38431: IFFALSE 38447
// ComLinkToBase ( base , i ) ;
38433: LD_VAR 0 1
38437: PPUSH
38438: LD_VAR 0 6
38442: PPUSH
38443: CALL_OW 169
38447: GO 38413
38449: POP
38450: POP
// end ; result := tmp ;
38451: LD_ADDR_VAR 0 4
38455: PUSH
38456: LD_VAR 0 5
38460: ST_TO_ADDR
// end ;
38461: LD_VAR 0 4
38465: RET
// export function ComComplete ( units , b ) ; var i ; begin
38466: LD_INT 0
38468: PPUSH
38469: PPUSH
// if not units then
38470: LD_VAR 0 1
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 38569
// for i in units do
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_VAR 0 1
38488: PUSH
38489: FOR_IN
38490: IFFALSE 38567
// if BuildingStatus ( b ) = bs_build then
38492: LD_VAR 0 2
38496: PPUSH
38497: CALL_OW 461
38501: PUSH
38502: LD_INT 1
38504: EQUAL
38505: IFFALSE 38565
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38507: LD_VAR 0 4
38511: PPUSH
38512: LD_STRING h
38514: PUSH
38515: LD_VAR 0 2
38519: PPUSH
38520: CALL_OW 250
38524: PUSH
38525: LD_VAR 0 2
38529: PPUSH
38530: CALL_OW 251
38534: PUSH
38535: LD_VAR 0 2
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: PPUSH
38561: CALL_OW 446
38565: GO 38489
38567: POP
38568: POP
// end ;
38569: LD_VAR 0 3
38573: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38574: LD_INT 0
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38582: LD_VAR 0 1
38586: NOT
38587: IFTRUE 38604
38589: PUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 263
38599: PUSH
38600: LD_INT 2
38602: NONEQUAL
38603: OR
38604: IFFALSE 38608
// exit ;
38606: GO 38924
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38608: LD_ADDR_VAR 0 6
38612: PUSH
38613: LD_INT 22
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 255
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 30
38635: PUSH
38636: LD_INT 36
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 34
38645: PUSH
38646: LD_INT 31
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PPUSH
38662: CALL_OW 69
38666: ST_TO_ADDR
// if not tmp then
38667: LD_VAR 0 6
38671: NOT
38672: IFFALSE 38676
// exit ;
38674: GO 38924
// result := [ ] ;
38676: LD_ADDR_VAR 0 2
38680: PUSH
38681: EMPTY
38682: ST_TO_ADDR
// for i in tmp do
38683: LD_ADDR_VAR 0 3
38687: PUSH
38688: LD_VAR 0 6
38692: PUSH
38693: FOR_IN
38694: IFFALSE 38765
// begin t := UnitsInside ( i ) ;
38696: LD_ADDR_VAR 0 4
38700: PUSH
38701: LD_VAR 0 3
38705: PPUSH
38706: CALL_OW 313
38710: ST_TO_ADDR
// if t then
38711: LD_VAR 0 4
38715: IFFALSE 38763
// for j in t do
38717: LD_ADDR_VAR 0 7
38721: PUSH
38722: LD_VAR 0 4
38726: PUSH
38727: FOR_IN
38728: IFFALSE 38761
// result := Replace ( result , result + 1 , j ) ;
38730: LD_ADDR_VAR 0 2
38734: PUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 1
38747: PLUS
38748: PPUSH
38749: LD_VAR 0 7
38753: PPUSH
38754: CALL_OW 1
38758: ST_TO_ADDR
38759: GO 38727
38761: POP
38762: POP
// end ;
38763: GO 38693
38765: POP
38766: POP
// if not result then
38767: LD_VAR 0 2
38771: NOT
38772: IFFALSE 38776
// exit ;
38774: GO 38924
// mech := result [ 1 ] ;
38776: LD_ADDR_VAR 0 5
38780: PUSH
38781: LD_VAR 0 2
38785: PUSH
38786: LD_INT 1
38788: ARRAY
38789: ST_TO_ADDR
// if result > 1 then
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 1
38797: GREATER
38798: IFFALSE 38910
// begin for i = 2 to result do
38800: LD_ADDR_VAR 0 3
38804: PUSH
38805: DOUBLE
38806: LD_INT 2
38808: DEC
38809: ST_TO_ADDR
38810: LD_VAR 0 2
38814: PUSH
38815: FOR_TO
38816: IFFALSE 38908
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38818: LD_ADDR_VAR 0 4
38822: PUSH
38823: LD_VAR 0 2
38827: PUSH
38828: LD_VAR 0 3
38832: ARRAY
38833: PPUSH
38834: LD_INT 3
38836: PPUSH
38837: CALL_OW 259
38841: PUSH
38842: LD_VAR 0 2
38846: PUSH
38847: LD_VAR 0 3
38851: ARRAY
38852: PPUSH
38853: CALL_OW 432
38857: MINUS
38858: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38859: LD_VAR 0 4
38863: PUSH
38864: LD_VAR 0 5
38868: PPUSH
38869: LD_INT 3
38871: PPUSH
38872: CALL_OW 259
38876: PUSH
38877: LD_VAR 0 5
38881: PPUSH
38882: CALL_OW 432
38886: MINUS
38887: GREATEREQUAL
38888: IFFALSE 38906
// mech := result [ i ] ;
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_VAR 0 3
38904: ARRAY
38905: ST_TO_ADDR
// end ;
38906: GO 38815
38908: POP
38909: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38910: LD_VAR 0 1
38914: PPUSH
38915: LD_VAR 0 5
38919: PPUSH
38920: CALL_OW 135
// end ;
38924: LD_VAR 0 2
38928: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38929: LD_INT 0
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
// result := [ ] ;
38944: LD_ADDR_VAR 0 7
38948: PUSH
38949: EMPTY
38950: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38951: LD_VAR 0 1
38955: PPUSH
38956: CALL_OW 266
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: IN
38971: NOT
38972: IFFALSE 38976
// exit ;
38974: GO 40616
// if name then
38976: LD_VAR 0 3
38980: IFFALSE 38996
// SetBName ( base_dep , name ) ;
38982: LD_VAR 0 1
38986: PPUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: CALL_OW 500
// base := GetBase ( base_dep ) ;
38996: LD_ADDR_VAR 0 15
39000: PUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 274
39010: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39011: LD_ADDR_VAR 0 16
39015: PUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 255
39025: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39026: LD_ADDR_VAR 0 17
39030: PUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 248
39040: ST_TO_ADDR
// if sources then
39041: LD_VAR 0 5
39045: IFFALSE 39092
// for i = 1 to 3 do
39047: LD_ADDR_VAR 0 8
39051: PUSH
39052: DOUBLE
39053: LD_INT 1
39055: DEC
39056: ST_TO_ADDR
39057: LD_INT 3
39059: PUSH
39060: FOR_TO
39061: IFFALSE 39090
// AddResourceType ( base , i , sources [ i ] ) ;
39063: LD_VAR 0 15
39067: PPUSH
39068: LD_VAR 0 8
39072: PPUSH
39073: LD_VAR 0 5
39077: PUSH
39078: LD_VAR 0 8
39082: ARRAY
39083: PPUSH
39084: CALL_OW 276
39088: GO 39060
39090: POP
39091: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39092: LD_ADDR_VAR 0 18
39096: PUSH
39097: LD_VAR 0 15
39101: PPUSH
39102: LD_VAR 0 2
39106: PPUSH
39107: LD_INT 1
39109: PPUSH
39110: CALL 38351 0 3
39114: ST_TO_ADDR
// InitHc ;
39115: CALL_OW 19
// InitUc ;
39119: CALL_OW 18
// uc_side := side ;
39123: LD_ADDR_OWVAR 20
39127: PUSH
39128: LD_VAR 0 16
39132: ST_TO_ADDR
// uc_nation := nation ;
39133: LD_ADDR_OWVAR 21
39137: PUSH
39138: LD_VAR 0 17
39142: ST_TO_ADDR
// if buildings then
39143: LD_VAR 0 18
39147: IFFALSE 40475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39149: LD_ADDR_VAR 0 19
39153: PUSH
39154: LD_VAR 0 18
39158: PPUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 30
39164: PUSH
39165: LD_INT 29
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 30
39174: PUSH
39175: LD_INT 30
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PPUSH
39187: CALL_OW 72
39191: ST_TO_ADDR
// if tmp then
39192: LD_VAR 0 19
39196: IFFALSE 39244
// for i in tmp do
39198: LD_ADDR_VAR 0 8
39202: PUSH
39203: LD_VAR 0 19
39207: PUSH
39208: FOR_IN
39209: IFFALSE 39242
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39211: LD_VAR 0 8
39215: PPUSH
39216: CALL_OW 250
39220: PPUSH
39221: LD_VAR 0 8
39225: PPUSH
39226: CALL_OW 251
39230: PPUSH
39231: LD_VAR 0 16
39235: PPUSH
39236: CALL_OW 441
39240: GO 39208
39242: POP
39243: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39244: LD_VAR 0 18
39248: PPUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 30
39254: PUSH
39255: LD_INT 32
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 30
39264: PUSH
39265: LD_INT 33
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: PPUSH
39277: CALL_OW 72
39281: IFFALSE 39369
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: LD_VAR 0 18
39292: PPUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: LD_INT 32
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 30
39308: PUSH
39309: LD_INT 33
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL_OW 72
39325: PUSH
39326: FOR_IN
39327: IFFALSE 39367
// begin if not GetBWeapon ( i ) then
39329: LD_VAR 0 8
39333: PPUSH
39334: CALL_OW 269
39338: NOT
39339: IFFALSE 39365
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39341: LD_VAR 0 8
39345: PPUSH
39346: LD_VAR 0 8
39350: PPUSH
39351: LD_VAR 0 2
39355: PPUSH
39356: CALL 40621 0 2
39360: PPUSH
39361: CALL_OW 431
// end ;
39365: GO 39326
39367: POP
39368: POP
// end ; for i = 1 to personel do
39369: LD_ADDR_VAR 0 8
39373: PUSH
39374: DOUBLE
39375: LD_INT 1
39377: DEC
39378: ST_TO_ADDR
39379: LD_VAR 0 6
39383: PUSH
39384: FOR_TO
39385: IFFALSE 40455
// begin if i > 4 then
39387: LD_VAR 0 8
39391: PUSH
39392: LD_INT 4
39394: GREATER
39395: IFFALSE 39399
// break ;
39397: GO 40455
// case i of 1 :
39399: LD_VAR 0 8
39403: PUSH
39404: LD_INT 1
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39492
39412: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39413: LD_ADDR_VAR 0 12
39417: PUSH
39418: LD_VAR 0 18
39422: PPUSH
39423: LD_INT 22
39425: PUSH
39426: LD_VAR 0 16
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 58
39437: PUSH
39438: EMPTY
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 30
39446: PUSH
39447: LD_INT 32
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 30
39456: PUSH
39457: LD_INT 4
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 30
39466: PUSH
39467: LD_INT 5
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: PPUSH
39485: CALL_OW 72
39489: ST_TO_ADDR
39490: GO 39714
39492: LD_INT 2
39494: DOUBLE
39495: EQUAL
39496: IFTRUE 39500
39498: GO 39562
39500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39501: LD_ADDR_VAR 0 12
39505: PUSH
39506: LD_VAR 0 18
39510: PPUSH
39511: LD_INT 22
39513: PUSH
39514: LD_VAR 0 16
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 30
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 30
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PPUSH
39555: CALL_OW 72
39559: ST_TO_ADDR
39560: GO 39714
39562: LD_INT 3
39564: DOUBLE
39565: EQUAL
39566: IFTRUE 39570
39568: GO 39632
39570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39571: LD_ADDR_VAR 0 12
39575: PUSH
39576: LD_VAR 0 18
39580: PPUSH
39581: LD_INT 22
39583: PUSH
39584: LD_VAR 0 16
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: LD_INT 30
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 30
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PPUSH
39625: CALL_OW 72
39629: ST_TO_ADDR
39630: GO 39714
39632: LD_INT 4
39634: DOUBLE
39635: EQUAL
39636: IFTRUE 39640
39638: GO 39713
39640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39641: LD_ADDR_VAR 0 12
39645: PUSH
39646: LD_VAR 0 18
39650: PPUSH
39651: LD_INT 22
39653: PUSH
39654: LD_VAR 0 16
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: LD_INT 30
39668: PUSH
39669: LD_INT 6
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 30
39678: PUSH
39679: LD_INT 7
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 30
39688: PUSH
39689: LD_INT 8
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PPUSH
39706: CALL_OW 72
39710: ST_TO_ADDR
39711: GO 39714
39713: POP
// if i = 1 then
39714: LD_VAR 0 8
39718: PUSH
39719: LD_INT 1
39721: EQUAL
39722: IFFALSE 39833
// begin tmp := [ ] ;
39724: LD_ADDR_VAR 0 19
39728: PUSH
39729: EMPTY
39730: ST_TO_ADDR
// for j in f do
39731: LD_ADDR_VAR 0 9
39735: PUSH
39736: LD_VAR 0 12
39740: PUSH
39741: FOR_IN
39742: IFFALSE 39815
// if GetBType ( j ) = b_bunker then
39744: LD_VAR 0 9
39748: PPUSH
39749: CALL_OW 266
39753: PUSH
39754: LD_INT 32
39756: EQUAL
39757: IFFALSE 39784
// tmp := Insert ( tmp , 1 , j ) else
39759: LD_ADDR_VAR 0 19
39763: PUSH
39764: LD_VAR 0 19
39768: PPUSH
39769: LD_INT 1
39771: PPUSH
39772: LD_VAR 0 9
39776: PPUSH
39777: CALL_OW 2
39781: ST_TO_ADDR
39782: GO 39813
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39784: LD_ADDR_VAR 0 19
39788: PUSH
39789: LD_VAR 0 19
39793: PPUSH
39794: LD_VAR 0 19
39798: PUSH
39799: LD_INT 1
39801: PLUS
39802: PPUSH
39803: LD_VAR 0 9
39807: PPUSH
39808: CALL_OW 2
39812: ST_TO_ADDR
39813: GO 39741
39815: POP
39816: POP
// if tmp then
39817: LD_VAR 0 19
39821: IFFALSE 39833
// f := tmp ;
39823: LD_ADDR_VAR 0 12
39827: PUSH
39828: LD_VAR 0 19
39832: ST_TO_ADDR
// end ; x := personel [ i ] ;
39833: LD_ADDR_VAR 0 13
39837: PUSH
39838: LD_VAR 0 6
39842: PUSH
39843: LD_VAR 0 8
39847: ARRAY
39848: ST_TO_ADDR
// if x = - 1 then
39849: LD_VAR 0 13
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: EQUAL
39858: IFFALSE 40069
// begin for j in f do
39860: LD_ADDR_VAR 0 9
39864: PUSH
39865: LD_VAR 0 12
39869: PUSH
39870: FOR_IN
39871: IFFALSE 40065
// repeat InitHc ;
39873: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39877: LD_VAR 0 9
39881: PPUSH
39882: CALL_OW 266
39886: PUSH
39887: LD_INT 5
39889: EQUAL
39890: IFFALSE 39960
// begin if UnitsInside ( j ) < 3 then
39892: LD_VAR 0 9
39896: PPUSH
39897: CALL_OW 313
39901: PUSH
39902: LD_INT 3
39904: LESS
39905: IFFALSE 39941
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39907: LD_INT 0
39909: PPUSH
39910: LD_INT 5
39912: PUSH
39913: LD_INT 8
39915: PUSH
39916: LD_INT 9
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: PUSH
39924: LD_VAR 0 17
39928: ARRAY
39929: PPUSH
39930: LD_VAR 0 4
39934: PPUSH
39935: CALL_OW 380
39939: GO 39958
// PrepareHuman ( false , i , skill ) ;
39941: LD_INT 0
39943: PPUSH
39944: LD_VAR 0 8
39948: PPUSH
39949: LD_VAR 0 4
39953: PPUSH
39954: CALL_OW 380
// end else
39958: GO 39977
// PrepareHuman ( false , i , skill ) ;
39960: LD_INT 0
39962: PPUSH
39963: LD_VAR 0 8
39967: PPUSH
39968: LD_VAR 0 4
39972: PPUSH
39973: CALL_OW 380
// un := CreateHuman ;
39977: LD_ADDR_VAR 0 14
39981: PUSH
39982: CALL_OW 44
39986: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39987: LD_ADDR_VAR 0 7
39991: PUSH
39992: LD_VAR 0 7
39996: PPUSH
39997: LD_INT 1
39999: PPUSH
40000: LD_VAR 0 14
40004: PPUSH
40005: CALL_OW 2
40009: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40010: LD_VAR 0 14
40014: PPUSH
40015: LD_VAR 0 9
40019: PPUSH
40020: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40024: LD_VAR 0 9
40028: PPUSH
40029: CALL_OW 313
40033: PUSH
40034: LD_INT 6
40036: EQUAL
40037: IFTRUE 40061
40039: PUSH
40040: LD_VAR 0 9
40044: PPUSH
40045: CALL_OW 266
40049: PUSH
40050: LD_INT 32
40052: PUSH
40053: LD_INT 31
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: IN
40060: OR
40061: IFFALSE 39873
40063: GO 39870
40065: POP
40066: POP
// end else
40067: GO 40453
// for j = 1 to x do
40069: LD_ADDR_VAR 0 9
40073: PUSH
40074: DOUBLE
40075: LD_INT 1
40077: DEC
40078: ST_TO_ADDR
40079: LD_VAR 0 13
40083: PUSH
40084: FOR_TO
40085: IFFALSE 40451
// begin InitHc ;
40087: CALL_OW 19
// if not f then
40091: LD_VAR 0 12
40095: NOT
40096: IFFALSE 40185
// begin PrepareHuman ( false , i , skill ) ;
40098: LD_INT 0
40100: PPUSH
40101: LD_VAR 0 8
40105: PPUSH
40106: LD_VAR 0 4
40110: PPUSH
40111: CALL_OW 380
// un := CreateHuman ;
40115: LD_ADDR_VAR 0 14
40119: PUSH
40120: CALL_OW 44
40124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40125: LD_ADDR_VAR 0 7
40129: PUSH
40130: LD_VAR 0 7
40134: PPUSH
40135: LD_INT 1
40137: PPUSH
40138: LD_VAR 0 14
40142: PPUSH
40143: CALL_OW 2
40147: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40148: LD_VAR 0 14
40152: PPUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 250
40162: PPUSH
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 251
40172: PPUSH
40173: LD_INT 10
40175: PPUSH
40176: LD_INT 0
40178: PPUSH
40179: CALL_OW 50
// continue ;
40183: GO 40084
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40185: LD_VAR 0 12
40189: PUSH
40190: LD_INT 1
40192: ARRAY
40193: PPUSH
40194: CALL_OW 313
40198: IFFALSE 40226
40200: PUSH
40201: LD_VAR 0 12
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: CALL_OW 266
40214: PUSH
40215: LD_INT 32
40217: PUSH
40218: LD_INT 31
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: IN
40225: AND
40226: IFTRUE 40247
40228: PUSH
40229: LD_VAR 0 12
40233: PUSH
40234: LD_INT 1
40236: ARRAY
40237: PPUSH
40238: CALL_OW 313
40242: PUSH
40243: LD_INT 6
40245: EQUAL
40246: OR
40247: IFFALSE 40267
// f := Delete ( f , 1 ) ;
40249: LD_ADDR_VAR 0 12
40253: PUSH
40254: LD_VAR 0 12
40258: PPUSH
40259: LD_INT 1
40261: PPUSH
40262: CALL_OW 3
40266: ST_TO_ADDR
// if not f then
40267: LD_VAR 0 12
40271: NOT
40272: IFFALSE 40290
// begin x := x + 2 ;
40274: LD_ADDR_VAR 0 13
40278: PUSH
40279: LD_VAR 0 13
40283: PUSH
40284: LD_INT 2
40286: PLUS
40287: ST_TO_ADDR
// continue ;
40288: GO 40084
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40290: LD_VAR 0 12
40294: PUSH
40295: LD_INT 1
40297: ARRAY
40298: PPUSH
40299: CALL_OW 266
40303: PUSH
40304: LD_INT 5
40306: EQUAL
40307: IFFALSE 40381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40309: LD_VAR 0 12
40313: PUSH
40314: LD_INT 1
40316: ARRAY
40317: PPUSH
40318: CALL_OW 313
40322: PUSH
40323: LD_INT 3
40325: LESS
40326: IFFALSE 40362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40328: LD_INT 0
40330: PPUSH
40331: LD_INT 5
40333: PUSH
40334: LD_INT 8
40336: PUSH
40337: LD_INT 9
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: PUSH
40345: LD_VAR 0 17
40349: ARRAY
40350: PPUSH
40351: LD_VAR 0 4
40355: PPUSH
40356: CALL_OW 380
40360: GO 40379
// PrepareHuman ( false , i , skill ) ;
40362: LD_INT 0
40364: PPUSH
40365: LD_VAR 0 8
40369: PPUSH
40370: LD_VAR 0 4
40374: PPUSH
40375: CALL_OW 380
// end else
40379: GO 40398
// PrepareHuman ( false , i , skill ) ;
40381: LD_INT 0
40383: PPUSH
40384: LD_VAR 0 8
40388: PPUSH
40389: LD_VAR 0 4
40393: PPUSH
40394: CALL_OW 380
// un := CreateHuman ;
40398: LD_ADDR_VAR 0 14
40402: PUSH
40403: CALL_OW 44
40407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40408: LD_ADDR_VAR 0 7
40412: PUSH
40413: LD_VAR 0 7
40417: PPUSH
40418: LD_INT 1
40420: PPUSH
40421: LD_VAR 0 14
40425: PPUSH
40426: CALL_OW 2
40430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40431: LD_VAR 0 14
40435: PPUSH
40436: LD_VAR 0 12
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PPUSH
40445: CALL_OW 52
// end ;
40449: GO 40084
40451: POP
40452: POP
// end ;
40453: GO 39384
40455: POP
40456: POP
// result := result ^ buildings ;
40457: LD_ADDR_VAR 0 7
40461: PUSH
40462: LD_VAR 0 7
40466: PUSH
40467: LD_VAR 0 18
40471: ADD
40472: ST_TO_ADDR
// end else
40473: GO 40616
// begin for i = 1 to personel do
40475: LD_ADDR_VAR 0 8
40479: PUSH
40480: DOUBLE
40481: LD_INT 1
40483: DEC
40484: ST_TO_ADDR
40485: LD_VAR 0 6
40489: PUSH
40490: FOR_TO
40491: IFFALSE 40614
// begin if i > 4 then
40493: LD_VAR 0 8
40497: PUSH
40498: LD_INT 4
40500: GREATER
40501: IFFALSE 40505
// break ;
40503: GO 40614
// x := personel [ i ] ;
40505: LD_ADDR_VAR 0 13
40509: PUSH
40510: LD_VAR 0 6
40514: PUSH
40515: LD_VAR 0 8
40519: ARRAY
40520: ST_TO_ADDR
// if x = - 1 then
40521: LD_VAR 0 13
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: EQUAL
40530: IFFALSE 40534
// continue ;
40532: GO 40490
// PrepareHuman ( false , i , skill ) ;
40534: LD_INT 0
40536: PPUSH
40537: LD_VAR 0 8
40541: PPUSH
40542: LD_VAR 0 4
40546: PPUSH
40547: CALL_OW 380
// un := CreateHuman ;
40551: LD_ADDR_VAR 0 14
40555: PUSH
40556: CALL_OW 44
40560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40561: LD_VAR 0 14
40565: PPUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: CALL_OW 250
40575: PPUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 251
40585: PPUSH
40586: LD_INT 10
40588: PPUSH
40589: LD_INT 0
40591: PPUSH
40592: CALL_OW 50
// result := result ^ un ;
40596: LD_ADDR_VAR 0 7
40600: PUSH
40601: LD_VAR 0 7
40605: PUSH
40606: LD_VAR 0 14
40610: ADD
40611: ST_TO_ADDR
// end ;
40612: GO 40490
40614: POP
40615: POP
// end ; end ;
40616: LD_VAR 0 7
40620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40621: LD_INT 0
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
// result := false ;
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_INT 0
40646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40647: LD_VAR 0 1
40651: NOT
40652: IFTRUE 40677
40654: PUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 266
40664: PUSH
40665: LD_INT 32
40667: PUSH
40668: LD_INT 33
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: IN
40675: NOT
40676: OR
40677: IFFALSE 40681
// exit ;
40679: GO 41816
// nat := GetNation ( tower ) ;
40681: LD_ADDR_VAR 0 12
40685: PUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 248
40695: ST_TO_ADDR
// side := GetSide ( tower ) ;
40696: LD_ADDR_VAR 0 16
40700: PUSH
40701: LD_VAR 0 1
40705: PPUSH
40706: CALL_OW 255
40710: ST_TO_ADDR
// x := GetX ( tower ) ;
40711: LD_ADDR_VAR 0 10
40715: PUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 250
40725: ST_TO_ADDR
// y := GetY ( tower ) ;
40726: LD_ADDR_VAR 0 11
40730: PUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 251
40740: ST_TO_ADDR
// if not x or not y then
40741: LD_VAR 0 10
40745: NOT
40746: IFTRUE 40755
40748: PUSH
40749: LD_VAR 0 11
40753: NOT
40754: OR
40755: IFFALSE 40759
// exit ;
40757: GO 41816
// weapon := 0 ;
40759: LD_ADDR_VAR 0 18
40763: PUSH
40764: LD_INT 0
40766: ST_TO_ADDR
// fac_list := [ ] ;
40767: LD_ADDR_VAR 0 17
40771: PUSH
40772: EMPTY
40773: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40774: LD_ADDR_VAR 0 6
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 274
40788: PPUSH
40789: LD_VAR 0 2
40793: PPUSH
40794: LD_INT 0
40796: PPUSH
40797: CALL 38351 0 3
40801: PPUSH
40802: LD_INT 30
40804: PUSH
40805: LD_INT 3
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PPUSH
40812: CALL_OW 72
40816: ST_TO_ADDR
// if not factories then
40817: LD_VAR 0 6
40821: NOT
40822: IFFALSE 40826
// exit ;
40824: GO 41816
// for i in factories do
40826: LD_ADDR_VAR 0 8
40830: PUSH
40831: LD_VAR 0 6
40835: PUSH
40836: FOR_IN
40837: IFFALSE 40862
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40839: LD_ADDR_VAR 0 17
40843: PUSH
40844: LD_VAR 0 17
40848: PUSH
40849: LD_VAR 0 8
40853: PPUSH
40854: CALL_OW 478
40858: UNION
40859: ST_TO_ADDR
40860: GO 40836
40862: POP
40863: POP
// if not fac_list then
40864: LD_VAR 0 17
40868: NOT
40869: IFFALSE 40873
// exit ;
40871: GO 41816
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_INT 4
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: LD_INT 9
40886: PUSH
40887: LD_INT 10
40889: PUSH
40890: LD_INT 6
40892: PUSH
40893: LD_INT 7
40895: PUSH
40896: LD_INT 11
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 27
40910: PUSH
40911: LD_INT 28
40913: PUSH
40914: LD_INT 26
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 43
40928: PUSH
40929: LD_INT 44
40931: PUSH
40932: LD_INT 46
40934: PUSH
40935: LD_INT 45
40937: PUSH
40938: LD_INT 47
40940: PUSH
40941: LD_INT 49
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: PUSH
40957: LD_VAR 0 12
40961: ARRAY
40962: ST_TO_ADDR
// list := list isect fac_list ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_VAR 0 5
40972: PUSH
40973: LD_VAR 0 17
40977: ISECT
40978: ST_TO_ADDR
// if not list then
40979: LD_VAR 0 5
40983: NOT
40984: IFFALSE 40988
// exit ;
40986: GO 41816
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40988: LD_VAR 0 12
40992: PUSH
40993: LD_INT 3
40995: EQUAL
40996: IFFALSE 41008
40998: PUSH
40999: LD_INT 49
41001: PUSH
41002: LD_VAR 0 5
41006: IN
41007: AND
41008: IFFALSE 41028
41010: PUSH
41011: LD_INT 31
41013: PPUSH
41014: LD_VAR 0 16
41018: PPUSH
41019: CALL_OW 321
41023: PUSH
41024: LD_INT 2
41026: EQUAL
41027: AND
41028: IFFALSE 41088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41030: LD_INT 22
41032: PUSH
41033: LD_VAR 0 16
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 35
41044: PUSH
41045: LD_INT 49
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 91
41054: PUSH
41055: LD_VAR 0 1
41059: PUSH
41060: LD_INT 10
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: PPUSH
41073: CALL_OW 69
41077: NOT
41078: IFFALSE 41088
// weapon := ru_time_lapser ;
41080: LD_ADDR_VAR 0 18
41084: PUSH
41085: LD_INT 49
41087: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41088: LD_VAR 0 12
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: IN
41103: IFFALSE 41127
41105: PUSH
41106: LD_INT 11
41108: PUSH
41109: LD_VAR 0 5
41113: IN
41114: IFTRUE 41126
41116: PUSH
41117: LD_INT 30
41119: PUSH
41120: LD_VAR 0 5
41124: IN
41125: OR
41126: AND
41127: IFFALSE 41147
41129: PUSH
41130: LD_INT 6
41132: PPUSH
41133: LD_VAR 0 16
41137: PPUSH
41138: CALL_OW 321
41142: PUSH
41143: LD_INT 2
41145: EQUAL
41146: AND
41147: IFFALSE 41314
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41149: LD_INT 22
41151: PUSH
41152: LD_VAR 0 16
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 35
41166: PUSH
41167: LD_INT 11
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 35
41176: PUSH
41177: LD_INT 30
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 91
41191: PUSH
41192: LD_VAR 0 1
41196: PUSH
41197: LD_INT 18
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: LIST
41209: PPUSH
41210: CALL_OW 69
41214: NOT
41215: IFFALSE 41291
41217: PUSH
41218: LD_INT 22
41220: PUSH
41221: LD_VAR 0 16
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 30
41235: PUSH
41236: LD_INT 32
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 30
41245: PUSH
41246: LD_INT 33
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 91
41260: PUSH
41261: LD_VAR 0 1
41265: PUSH
41266: LD_INT 12
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: PPUSH
41282: CALL_OW 69
41286: PUSH
41287: LD_INT 2
41289: GREATER
41290: AND
41291: IFFALSE 41314
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41293: LD_ADDR_VAR 0 18
41297: PUSH
41298: LD_INT 11
41300: PUSH
41301: LD_INT 30
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_VAR 0 12
41312: ARRAY
41313: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41314: LD_VAR 0 18
41318: NOT
41319: IFFALSE 41339
41321: PUSH
41322: LD_INT 40
41324: PPUSH
41325: LD_VAR 0 16
41329: PPUSH
41330: CALL_OW 321
41334: PUSH
41335: LD_INT 2
41337: EQUAL
41338: AND
41339: IFFALSE 41375
41341: PUSH
41342: LD_INT 7
41344: PUSH
41345: LD_VAR 0 5
41349: IN
41350: IFTRUE 41362
41352: PUSH
41353: LD_INT 28
41355: PUSH
41356: LD_VAR 0 5
41360: IN
41361: OR
41362: IFTRUE 41374
41364: PUSH
41365: LD_INT 45
41367: PUSH
41368: LD_VAR 0 5
41372: IN
41373: OR
41374: AND
41375: IFFALSE 41629
// begin hex := GetHexInfo ( x , y ) ;
41377: LD_ADDR_VAR 0 4
41381: PUSH
41382: LD_VAR 0 10
41386: PPUSH
41387: LD_VAR 0 11
41391: PPUSH
41392: CALL_OW 546
41396: ST_TO_ADDR
// if hex [ 1 ] then
41397: LD_VAR 0 4
41401: PUSH
41402: LD_INT 1
41404: ARRAY
41405: IFFALSE 41409
// exit ;
41407: GO 41816
// height := hex [ 2 ] ;
41409: LD_ADDR_VAR 0 15
41413: PUSH
41414: LD_VAR 0 4
41418: PUSH
41419: LD_INT 2
41421: ARRAY
41422: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41423: LD_ADDR_VAR 0 14
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 3
41436: PUSH
41437: LD_INT 5
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: ST_TO_ADDR
// for i in tmp do
41446: LD_ADDR_VAR 0 8
41450: PUSH
41451: LD_VAR 0 14
41455: PUSH
41456: FOR_IN
41457: IFFALSE 41627
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41459: LD_ADDR_VAR 0 9
41463: PUSH
41464: LD_VAR 0 10
41468: PPUSH
41469: LD_VAR 0 8
41473: PPUSH
41474: LD_INT 5
41476: PPUSH
41477: CALL_OW 272
41481: PUSH
41482: LD_VAR 0 11
41486: PPUSH
41487: LD_VAR 0 8
41491: PPUSH
41492: LD_INT 5
41494: PPUSH
41495: CALL_OW 273
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41504: LD_VAR 0 9
41508: PUSH
41509: LD_INT 1
41511: ARRAY
41512: PPUSH
41513: LD_VAR 0 9
41517: PUSH
41518: LD_INT 2
41520: ARRAY
41521: PPUSH
41522: CALL_OW 488
41526: IFFALSE 41625
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_VAR 0 9
41537: PUSH
41538: LD_INT 1
41540: ARRAY
41541: PPUSH
41542: LD_VAR 0 9
41546: PUSH
41547: LD_INT 2
41549: ARRAY
41550: PPUSH
41551: CALL_OW 546
41555: ST_TO_ADDR
// if hex [ 1 ] then
41556: LD_VAR 0 4
41560: PUSH
41561: LD_INT 1
41563: ARRAY
41564: IFFALSE 41568
// continue ;
41566: GO 41456
// h := hex [ 2 ] ;
41568: LD_ADDR_VAR 0 13
41572: PUSH
41573: LD_VAR 0 4
41577: PUSH
41578: LD_INT 2
41580: ARRAY
41581: ST_TO_ADDR
// if h + 7 < height then
41582: LD_VAR 0 13
41586: PUSH
41587: LD_INT 7
41589: PLUS
41590: PUSH
41591: LD_VAR 0 15
41595: LESS
41596: IFFALSE 41625
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41598: LD_ADDR_VAR 0 18
41602: PUSH
41603: LD_INT 7
41605: PUSH
41606: LD_INT 28
41608: PUSH
41609: LD_INT 45
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: PUSH
41617: LD_VAR 0 12
41621: ARRAY
41622: ST_TO_ADDR
// break ;
41623: GO 41627
// end ; end ; end ;
41625: GO 41456
41627: POP
41628: POP
// end ; if not weapon then
41629: LD_VAR 0 18
41633: NOT
41634: IFFALSE 41694
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41636: LD_ADDR_VAR 0 5
41640: PUSH
41641: LD_VAR 0 5
41645: PUSH
41646: LD_INT 11
41648: PUSH
41649: LD_INT 30
41651: PUSH
41652: LD_INT 49
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: DIFF
41660: ST_TO_ADDR
// if not list then
41661: LD_VAR 0 5
41665: NOT
41666: IFFALSE 41670
// exit ;
41668: GO 41816
// weapon := list [ rand ( 1 , list ) ] ;
41670: LD_ADDR_VAR 0 18
41674: PUSH
41675: LD_VAR 0 5
41679: PUSH
41680: LD_INT 1
41682: PPUSH
41683: LD_VAR 0 5
41687: PPUSH
41688: CALL_OW 12
41692: ARRAY
41693: ST_TO_ADDR
// end ; if weapon then
41694: LD_VAR 0 18
41698: IFFALSE 41816
// begin tmp := CostOfWeapon ( weapon ) ;
41700: LD_ADDR_VAR 0 14
41704: PUSH
41705: LD_VAR 0 18
41709: PPUSH
41710: CALL_OW 451
41714: ST_TO_ADDR
// j := GetBase ( tower ) ;
41715: LD_ADDR_VAR 0 9
41719: PUSH
41720: LD_VAR 0 1
41724: PPUSH
41725: CALL_OW 274
41729: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41730: LD_VAR 0 9
41734: PPUSH
41735: LD_INT 1
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 14
41747: PUSH
41748: LD_INT 1
41750: ARRAY
41751: GREATEREQUAL
41752: IFFALSE 41778
41754: PUSH
41755: LD_VAR 0 9
41759: PPUSH
41760: LD_INT 2
41762: PPUSH
41763: CALL_OW 275
41767: PUSH
41768: LD_VAR 0 14
41772: PUSH
41773: LD_INT 2
41775: ARRAY
41776: GREATEREQUAL
41777: AND
41778: IFFALSE 41804
41780: PUSH
41781: LD_VAR 0 9
41785: PPUSH
41786: LD_INT 3
41788: PPUSH
41789: CALL_OW 275
41793: PUSH
41794: LD_VAR 0 14
41798: PUSH
41799: LD_INT 3
41801: ARRAY
41802: GREATEREQUAL
41803: AND
41804: IFFALSE 41816
// result := weapon ;
41806: LD_ADDR_VAR 0 3
41810: PUSH
41811: LD_VAR 0 18
41815: ST_TO_ADDR
// end ; end ;
41816: LD_VAR 0 3
41820: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41821: LD_INT 0
41823: PPUSH
41824: PPUSH
// result := true ;
41825: LD_ADDR_VAR 0 3
41829: PUSH
41830: LD_INT 1
41832: ST_TO_ADDR
// if array1 = array2 then
41833: LD_VAR 0 1
41837: PUSH
41838: LD_VAR 0 2
41842: EQUAL
41843: IFFALSE 41903
// begin for i = 1 to array1 do
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: DOUBLE
41851: LD_INT 1
41853: DEC
41854: ST_TO_ADDR
41855: LD_VAR 0 1
41859: PUSH
41860: FOR_TO
41861: IFFALSE 41899
// if array1 [ i ] <> array2 [ i ] then
41863: LD_VAR 0 1
41867: PUSH
41868: LD_VAR 0 4
41872: ARRAY
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_VAR 0 4
41883: ARRAY
41884: NONEQUAL
41885: IFFALSE 41897
// begin result := false ;
41887: LD_ADDR_VAR 0 3
41891: PUSH
41892: LD_INT 0
41894: ST_TO_ADDR
// break ;
41895: GO 41899
// end ;
41897: GO 41860
41899: POP
41900: POP
// end else
41901: GO 41911
// result := false ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 0
41910: ST_TO_ADDR
// end ;
41911: LD_VAR 0 3
41915: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41916: LD_INT 0
41918: PPUSH
41919: PPUSH
// if not array1 or not array2 then
41920: LD_VAR 0 1
41924: NOT
41925: IFTRUE 41934
41927: PUSH
41928: LD_VAR 0 2
41932: NOT
41933: OR
41934: IFFALSE 41938
// exit ;
41936: GO 42002
// result := true ;
41938: LD_ADDR_VAR 0 3
41942: PUSH
41943: LD_INT 1
41945: ST_TO_ADDR
// for i = 1 to array1 do
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: DOUBLE
41952: LD_INT 1
41954: DEC
41955: ST_TO_ADDR
41956: LD_VAR 0 1
41960: PUSH
41961: FOR_TO
41962: IFFALSE 42000
// if array1 [ i ] <> array2 [ i ] then
41964: LD_VAR 0 1
41968: PUSH
41969: LD_VAR 0 4
41973: ARRAY
41974: PUSH
41975: LD_VAR 0 2
41979: PUSH
41980: LD_VAR 0 4
41984: ARRAY
41985: NONEQUAL
41986: IFFALSE 41998
// begin result := false ;
41988: LD_ADDR_VAR 0 3
41992: PUSH
41993: LD_INT 0
41995: ST_TO_ADDR
// break ;
41996: GO 42000
// end ;
41998: GO 41961
42000: POP
42001: POP
// end ;
42002: LD_VAR 0 3
42006: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42007: LD_INT 0
42009: PPUSH
42010: PPUSH
42011: PPUSH
// pom := GetBase ( fac ) ;
42012: LD_ADDR_VAR 0 5
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 274
42026: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42027: LD_ADDR_VAR 0 4
42031: PUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_INT 1
42039: ARRAY
42040: PPUSH
42041: LD_VAR 0 2
42045: PUSH
42046: LD_INT 2
42048: ARRAY
42049: PPUSH
42050: LD_VAR 0 2
42054: PUSH
42055: LD_INT 3
42057: ARRAY
42058: PPUSH
42059: LD_VAR 0 2
42063: PUSH
42064: LD_INT 4
42066: ARRAY
42067: PPUSH
42068: CALL_OW 449
42072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42073: LD_ADDR_VAR 0 3
42077: PUSH
42078: LD_VAR 0 5
42082: PPUSH
42083: LD_INT 1
42085: PPUSH
42086: CALL_OW 275
42090: PUSH
42091: LD_VAR 0 4
42095: PUSH
42096: LD_INT 1
42098: ARRAY
42099: GREATEREQUAL
42100: IFFALSE 42126
42102: PUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: LD_INT 2
42110: PPUSH
42111: CALL_OW 275
42115: PUSH
42116: LD_VAR 0 4
42120: PUSH
42121: LD_INT 2
42123: ARRAY
42124: GREATEREQUAL
42125: AND
42126: IFFALSE 42152
42128: PUSH
42129: LD_VAR 0 5
42133: PPUSH
42134: LD_INT 3
42136: PPUSH
42137: CALL_OW 275
42141: PUSH
42142: LD_VAR 0 4
42146: PUSH
42147: LD_INT 3
42149: ARRAY
42150: GREATEREQUAL
42151: AND
42152: ST_TO_ADDR
// end ;
42153: LD_VAR 0 3
42157: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
// pom := GetBase ( building ) ;
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: LD_VAR 0 1
42173: PPUSH
42174: CALL_OW 274
42178: ST_TO_ADDR
// if not pom then
42179: LD_VAR 0 3
42183: NOT
42184: IFFALSE 42188
// exit ;
42186: GO 42362
// btype := GetBType ( building ) ;
42188: LD_ADDR_VAR 0 5
42192: PUSH
42193: LD_VAR 0 1
42197: PPUSH
42198: CALL_OW 266
42202: ST_TO_ADDR
// if btype = b_armoury then
42203: LD_VAR 0 5
42207: PUSH
42208: LD_INT 4
42210: EQUAL
42211: IFFALSE 42221
// btype := b_barracks ;
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: LD_INT 5
42220: ST_TO_ADDR
// if btype = b_depot then
42221: LD_VAR 0 5
42225: PUSH
42226: LD_INT 0
42228: EQUAL
42229: IFFALSE 42239
// btype := b_warehouse ;
42231: LD_ADDR_VAR 0 5
42235: PUSH
42236: LD_INT 1
42238: ST_TO_ADDR
// if btype = b_workshop then
42239: LD_VAR 0 5
42243: PUSH
42244: LD_INT 2
42246: EQUAL
42247: IFFALSE 42257
// btype := b_factory ;
42249: LD_ADDR_VAR 0 5
42253: PUSH
42254: LD_INT 3
42256: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42257: LD_ADDR_VAR 0 4
42261: PUSH
42262: LD_VAR 0 5
42266: PPUSH
42267: LD_VAR 0 1
42271: PPUSH
42272: CALL_OW 248
42276: PPUSH
42277: CALL_OW 450
42281: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42282: LD_ADDR_VAR 0 2
42286: PUSH
42287: LD_VAR 0 3
42291: PPUSH
42292: LD_INT 1
42294: PPUSH
42295: CALL_OW 275
42299: PUSH
42300: LD_VAR 0 4
42304: PUSH
42305: LD_INT 1
42307: ARRAY
42308: GREATEREQUAL
42309: IFFALSE 42335
42311: PUSH
42312: LD_VAR 0 3
42316: PPUSH
42317: LD_INT 2
42319: PPUSH
42320: CALL_OW 275
42324: PUSH
42325: LD_VAR 0 4
42329: PUSH
42330: LD_INT 2
42332: ARRAY
42333: GREATEREQUAL
42334: AND
42335: IFFALSE 42361
42337: PUSH
42338: LD_VAR 0 3
42342: PPUSH
42343: LD_INT 3
42345: PPUSH
42346: CALL_OW 275
42350: PUSH
42351: LD_VAR 0 4
42355: PUSH
42356: LD_INT 3
42358: ARRAY
42359: GREATEREQUAL
42360: AND
42361: ST_TO_ADDR
// end ;
42362: LD_VAR 0 2
42366: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42367: LD_INT 0
42369: PPUSH
42370: PPUSH
42371: PPUSH
// pom := GetBase ( building ) ;
42372: LD_ADDR_VAR 0 4
42376: PUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 274
42386: ST_TO_ADDR
// if not pom then
42387: LD_VAR 0 4
42391: NOT
42392: IFFALSE 42396
// exit ;
42394: GO 42501
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42396: LD_ADDR_VAR 0 5
42400: PUSH
42401: LD_VAR 0 2
42405: PPUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 248
42415: PPUSH
42416: CALL_OW 450
42420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42421: LD_ADDR_VAR 0 3
42425: PUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: LD_INT 1
42433: PPUSH
42434: CALL_OW 275
42438: PUSH
42439: LD_VAR 0 5
42443: PUSH
42444: LD_INT 1
42446: ARRAY
42447: GREATEREQUAL
42448: IFFALSE 42474
42450: PUSH
42451: LD_VAR 0 4
42455: PPUSH
42456: LD_INT 2
42458: PPUSH
42459: CALL_OW 275
42463: PUSH
42464: LD_VAR 0 5
42468: PUSH
42469: LD_INT 2
42471: ARRAY
42472: GREATEREQUAL
42473: AND
42474: IFFALSE 42500
42476: PUSH
42477: LD_VAR 0 4
42481: PPUSH
42482: LD_INT 3
42484: PPUSH
42485: CALL_OW 275
42489: PUSH
42490: LD_VAR 0 5
42494: PUSH
42495: LD_INT 3
42497: ARRAY
42498: GREATEREQUAL
42499: AND
42500: ST_TO_ADDR
// end ;
42501: LD_VAR 0 3
42505: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42506: LD_INT 0
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
42518: PPUSH
// result := false ;
42519: LD_ADDR_VAR 0 8
42523: PUSH
42524: LD_INT 0
42526: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42527: LD_VAR 0 5
42531: NOT
42532: IFTRUE 42541
42534: PUSH
42535: LD_VAR 0 1
42539: NOT
42540: OR
42541: IFTRUE 42550
42543: PUSH
42544: LD_VAR 0 2
42548: NOT
42549: OR
42550: IFTRUE 42559
42552: PUSH
42553: LD_VAR 0 3
42557: NOT
42558: OR
42559: IFFALSE 42563
// exit ;
42561: GO 43389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42563: LD_ADDR_VAR 0 14
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_VAR 0 3
42582: PPUSH
42583: LD_VAR 0 4
42587: PPUSH
42588: LD_VAR 0 5
42592: PUSH
42593: LD_INT 1
42595: ARRAY
42596: PPUSH
42597: CALL_OW 248
42601: PPUSH
42602: LD_INT 0
42604: PPUSH
42605: CALL 44670 0 6
42609: ST_TO_ADDR
// if not hexes then
42610: LD_VAR 0 14
42614: NOT
42615: IFFALSE 42619
// exit ;
42617: GO 43389
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42619: LD_ADDR_VAR 0 17
42623: PUSH
42624: LD_VAR 0 5
42628: PPUSH
42629: LD_INT 22
42631: PUSH
42632: LD_VAR 0 13
42636: PPUSH
42637: CALL_OW 255
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: LD_INT 30
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 30
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PPUSH
42678: CALL_OW 72
42682: ST_TO_ADDR
// for i = 1 to hexes do
42683: LD_ADDR_VAR 0 9
42687: PUSH
42688: DOUBLE
42689: LD_INT 1
42691: DEC
42692: ST_TO_ADDR
42693: LD_VAR 0 14
42697: PUSH
42698: FOR_TO
42699: IFFALSE 43387
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42701: LD_ADDR_VAR 0 13
42705: PUSH
42706: LD_VAR 0 14
42710: PUSH
42711: LD_VAR 0 9
42715: ARRAY
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: PPUSH
42721: LD_VAR 0 14
42725: PUSH
42726: LD_VAR 0 9
42730: ARRAY
42731: PUSH
42732: LD_INT 2
42734: ARRAY
42735: PPUSH
42736: CALL_OW 428
42740: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42741: LD_VAR 0 14
42745: PUSH
42746: LD_VAR 0 9
42750: ARRAY
42751: PUSH
42752: LD_INT 1
42754: ARRAY
42755: PPUSH
42756: LD_VAR 0 14
42760: PUSH
42761: LD_VAR 0 9
42765: ARRAY
42766: PUSH
42767: LD_INT 2
42769: ARRAY
42770: PPUSH
42771: CALL_OW 351
42775: IFTRUE 42814
42777: PUSH
42778: LD_VAR 0 14
42782: PUSH
42783: LD_VAR 0 9
42787: ARRAY
42788: PUSH
42789: LD_INT 1
42791: ARRAY
42792: PPUSH
42793: LD_VAR 0 14
42797: PUSH
42798: LD_VAR 0 9
42802: ARRAY
42803: PUSH
42804: LD_INT 2
42806: ARRAY
42807: PPUSH
42808: CALL_OW 488
42812: NOT
42813: OR
42814: IFTRUE 42831
42816: PUSH
42817: LD_VAR 0 13
42821: PPUSH
42822: CALL_OW 247
42826: PUSH
42827: LD_INT 3
42829: EQUAL
42830: OR
42831: IFFALSE 42837
// exit ;
42833: POP
42834: POP
42835: GO 43389
// if not tmp then
42837: LD_VAR 0 13
42841: NOT
42842: IFFALSE 42846
// continue ;
42844: GO 42698
// result := true ;
42846: LD_ADDR_VAR 0 8
42850: PUSH
42851: LD_INT 1
42853: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42854: LD_VAR 0 6
42858: IFFALSE 42875
42860: PUSH
42861: LD_VAR 0 13
42865: PPUSH
42866: CALL_OW 247
42870: PUSH
42871: LD_INT 2
42873: EQUAL
42874: AND
42875: IFFALSE 42892
42877: PUSH
42878: LD_VAR 0 13
42882: PPUSH
42883: CALL_OW 263
42887: PUSH
42888: LD_INT 1
42890: EQUAL
42891: AND
42892: IFFALSE 43056
// begin if IsDrivenBy ( tmp ) then
42894: LD_VAR 0 13
42898: PPUSH
42899: CALL_OW 311
42903: IFFALSE 42907
// continue ;
42905: GO 42698
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42907: LD_VAR 0 6
42911: PPUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 60
42917: PUSH
42918: EMPTY
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: LD_INT 55
42930: PUSH
42931: EMPTY
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PPUSH
42942: CALL_OW 72
42946: IFFALSE 43054
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42948: LD_ADDR_VAR 0 18
42952: PUSH
42953: LD_VAR 0 6
42957: PPUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 60
42963: PUSH
42964: EMPTY
42965: LIST
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: LD_INT 55
42976: PUSH
42977: EMPTY
42978: LIST
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PPUSH
42988: CALL_OW 72
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: ST_TO_ADDR
// if IsInUnit ( driver ) then
42997: LD_VAR 0 18
43001: PPUSH
43002: CALL_OW 310
43006: IFFALSE 43017
// ComExit ( driver ) ;
43008: LD_VAR 0 18
43012: PPUSH
43013: CALL 68660 0 1
// AddComEnterUnit ( driver , tmp ) ;
43017: LD_VAR 0 18
43021: PPUSH
43022: LD_VAR 0 13
43026: PPUSH
43027: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43031: LD_VAR 0 18
43035: PPUSH
43036: LD_VAR 0 7
43040: PPUSH
43041: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43045: LD_VAR 0 18
43049: PPUSH
43050: CALL_OW 181
// end ; continue ;
43054: GO 42698
// end ; if not cleaners or not tmp in cleaners then
43056: LD_VAR 0 6
43060: NOT
43061: IFTRUE 43076
43063: PUSH
43064: LD_VAR 0 13
43068: PUSH
43069: LD_VAR 0 6
43073: IN
43074: NOT
43075: OR
43076: IFFALSE 43385
// begin if dep then
43078: LD_VAR 0 17
43082: IFFALSE 43218
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43084: LD_ADDR_VAR 0 16
43088: PUSH
43089: LD_VAR 0 17
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: PPUSH
43098: CALL_OW 250
43102: PPUSH
43103: LD_VAR 0 17
43107: PUSH
43108: LD_INT 1
43110: ARRAY
43111: PPUSH
43112: CALL_OW 254
43116: PPUSH
43117: LD_INT 5
43119: PPUSH
43120: CALL_OW 272
43124: PUSH
43125: LD_VAR 0 17
43129: PUSH
43130: LD_INT 1
43132: ARRAY
43133: PPUSH
43134: CALL_OW 251
43138: PPUSH
43139: LD_VAR 0 17
43143: PUSH
43144: LD_INT 1
43146: ARRAY
43147: PPUSH
43148: CALL_OW 254
43152: PPUSH
43153: LD_INT 5
43155: PPUSH
43156: CALL_OW 273
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43165: LD_VAR 0 16
43169: PUSH
43170: LD_INT 1
43172: ARRAY
43173: PPUSH
43174: LD_VAR 0 16
43178: PUSH
43179: LD_INT 2
43181: ARRAY
43182: PPUSH
43183: CALL_OW 488
43187: IFFALSE 43218
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43189: LD_VAR 0 13
43193: PPUSH
43194: LD_VAR 0 16
43198: PUSH
43199: LD_INT 1
43201: ARRAY
43202: PPUSH
43203: LD_VAR 0 16
43207: PUSH
43208: LD_INT 2
43210: ARRAY
43211: PPUSH
43212: CALL_OW 111
// continue ;
43216: GO 42698
// end ; end ; r := GetDir ( tmp ) ;
43218: LD_ADDR_VAR 0 15
43222: PUSH
43223: LD_VAR 0 13
43227: PPUSH
43228: CALL_OW 254
43232: ST_TO_ADDR
// if r = 5 then
43233: LD_VAR 0 15
43237: PUSH
43238: LD_INT 5
43240: EQUAL
43241: IFFALSE 43251
// r := 0 ;
43243: LD_ADDR_VAR 0 15
43247: PUSH
43248: LD_INT 0
43250: ST_TO_ADDR
// for j = r to 5 do
43251: LD_ADDR_VAR 0 10
43255: PUSH
43256: DOUBLE
43257: LD_VAR 0 15
43261: DEC
43262: ST_TO_ADDR
43263: LD_INT 5
43265: PUSH
43266: FOR_TO
43267: IFFALSE 43383
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43269: LD_ADDR_VAR 0 11
43273: PUSH
43274: LD_VAR 0 13
43278: PPUSH
43279: CALL_OW 250
43283: PPUSH
43284: LD_VAR 0 10
43288: PPUSH
43289: LD_INT 2
43291: PPUSH
43292: CALL_OW 272
43296: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43297: LD_ADDR_VAR 0 12
43301: PUSH
43302: LD_VAR 0 13
43306: PPUSH
43307: CALL_OW 251
43311: PPUSH
43312: LD_VAR 0 10
43316: PPUSH
43317: LD_INT 2
43319: PPUSH
43320: CALL_OW 273
43324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43325: LD_VAR 0 11
43329: PPUSH
43330: LD_VAR 0 12
43334: PPUSH
43335: CALL_OW 488
43339: IFFALSE 43358
43341: PUSH
43342: LD_VAR 0 11
43346: PPUSH
43347: LD_VAR 0 12
43351: PPUSH
43352: CALL_OW 428
43356: NOT
43357: AND
43358: IFFALSE 43381
// begin ComMoveXY ( tmp , _x , _y ) ;
43360: LD_VAR 0 13
43364: PPUSH
43365: LD_VAR 0 11
43369: PPUSH
43370: LD_VAR 0 12
43374: PPUSH
43375: CALL_OW 111
// break ;
43379: GO 43383
// end ; end ;
43381: GO 43266
43383: POP
43384: POP
// end ; end ;
43385: GO 42698
43387: POP
43388: POP
// end ;
43389: LD_VAR 0 8
43393: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43394: LD_INT 0
43396: PPUSH
// result := true ;
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_INT 1
43404: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43405: LD_VAR 0 2
43409: PUSH
43410: LD_INT 24
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43424
43416: LD_INT 33
43418: DOUBLE
43419: EQUAL
43420: IFTRUE 43424
43422: GO 43449
43424: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43425: LD_ADDR_VAR 0 3
43429: PUSH
43430: LD_INT 32
43432: PPUSH
43433: LD_VAR 0 1
43437: PPUSH
43438: CALL_OW 321
43442: PUSH
43443: LD_INT 2
43445: EQUAL
43446: ST_TO_ADDR
43447: GO 43765
43449: LD_INT 20
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43482
43457: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_INT 6
43465: PPUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL_OW 321
43475: PUSH
43476: LD_INT 2
43478: EQUAL
43479: ST_TO_ADDR
43480: GO 43765
43482: LD_INT 22
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43496
43488: LD_INT 36
43490: DOUBLE
43491: EQUAL
43492: IFTRUE 43496
43494: GO 43521
43496: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 15
43504: PPUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 321
43514: PUSH
43515: LD_INT 2
43517: EQUAL
43518: ST_TO_ADDR
43519: GO 43765
43521: LD_INT 30
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43554
43529: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 20
43537: PPUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 321
43547: PUSH
43548: LD_INT 2
43550: EQUAL
43551: ST_TO_ADDR
43552: GO 43765
43554: LD_INT 28
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43568
43560: LD_INT 21
43562: DOUBLE
43563: EQUAL
43564: IFTRUE 43568
43566: GO 43593
43568: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43569: LD_ADDR_VAR 0 3
43573: PUSH
43574: LD_INT 21
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 321
43586: PUSH
43587: LD_INT 2
43589: EQUAL
43590: ST_TO_ADDR
43591: GO 43765
43593: LD_INT 16
43595: DOUBLE
43596: EQUAL
43597: IFTRUE 43601
43599: GO 43626
43601: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_INT 84
43609: PPUSH
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 321
43619: PUSH
43620: LD_INT 2
43622: EQUAL
43623: ST_TO_ADDR
43624: GO 43765
43626: LD_INT 19
43628: DOUBLE
43629: EQUAL
43630: IFTRUE 43640
43632: LD_INT 23
43634: DOUBLE
43635: EQUAL
43636: IFTRUE 43640
43638: GO 43665
43640: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43641: LD_ADDR_VAR 0 3
43645: PUSH
43646: LD_INT 83
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL_OW 321
43658: PUSH
43659: LD_INT 2
43661: EQUAL
43662: ST_TO_ADDR
43663: GO 43765
43665: LD_INT 17
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43673
43671: GO 43698
43673: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_INT 39
43681: PPUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: CALL_OW 321
43691: PUSH
43692: LD_INT 2
43694: EQUAL
43695: ST_TO_ADDR
43696: GO 43765
43698: LD_INT 18
43700: DOUBLE
43701: EQUAL
43702: IFTRUE 43706
43704: GO 43731
43706: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_INT 40
43714: PPUSH
43715: LD_VAR 0 1
43719: PPUSH
43720: CALL_OW 321
43724: PUSH
43725: LD_INT 2
43727: EQUAL
43728: ST_TO_ADDR
43729: GO 43765
43731: LD_INT 27
43733: DOUBLE
43734: EQUAL
43735: IFTRUE 43739
43737: GO 43764
43739: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43740: LD_ADDR_VAR 0 3
43744: PUSH
43745: LD_INT 35
43747: PPUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 321
43757: PUSH
43758: LD_INT 2
43760: EQUAL
43761: ST_TO_ADDR
43762: GO 43765
43764: POP
// end ;
43765: LD_VAR 0 3
43769: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43770: LD_INT 0
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
// result := false ;
43783: LD_ADDR_VAR 0 6
43787: PUSH
43788: LD_INT 0
43790: ST_TO_ADDR
// if btype = b_depot then
43791: LD_VAR 0 2
43795: PUSH
43796: LD_INT 0
43798: EQUAL
43799: IFFALSE 43811
// begin result := true ;
43801: LD_ADDR_VAR 0 6
43805: PUSH
43806: LD_INT 1
43808: ST_TO_ADDR
// exit ;
43809: GO 44665
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43811: LD_VAR 0 1
43815: NOT
43816: IFTRUE 43841
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 266
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: IN
43839: NOT
43840: OR
43841: IFTRUE 43850
43843: PUSH
43844: LD_VAR 0 2
43848: NOT
43849: OR
43850: IFTRUE 43886
43852: PUSH
43853: LD_VAR 0 5
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: LD_INT 4
43872: PUSH
43873: LD_INT 5
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: IN
43884: NOT
43885: OR
43886: IFTRUE 43905
43888: PUSH
43889: LD_VAR 0 3
43893: PPUSH
43894: LD_VAR 0 4
43898: PPUSH
43899: CALL_OW 488
43903: NOT
43904: OR
43905: IFFALSE 43909
// exit ;
43907: GO 44665
// side := GetSide ( depot ) ;
43909: LD_ADDR_VAR 0 9
43913: PUSH
43914: LD_VAR 0 1
43918: PPUSH
43919: CALL_OW 255
43923: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43924: LD_VAR 0 9
43928: PPUSH
43929: LD_VAR 0 2
43933: PPUSH
43934: CALL 43394 0 2
43938: NOT
43939: IFFALSE 43943
// exit ;
43941: GO 44665
// pom := GetBase ( depot ) ;
43943: LD_ADDR_VAR 0 10
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 274
43957: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43958: LD_ADDR_VAR 0 11
43962: PUSH
43963: LD_VAR 0 2
43967: PPUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: CALL_OW 248
43977: PPUSH
43978: CALL_OW 450
43982: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43983: LD_VAR 0 10
43987: PPUSH
43988: LD_INT 1
43990: PPUSH
43991: CALL_OW 275
43995: PUSH
43996: LD_VAR 0 11
44000: PUSH
44001: LD_INT 1
44003: ARRAY
44004: GREATEREQUAL
44005: IFFALSE 44031
44007: PUSH
44008: LD_VAR 0 10
44012: PPUSH
44013: LD_INT 2
44015: PPUSH
44016: CALL_OW 275
44020: PUSH
44021: LD_VAR 0 11
44025: PUSH
44026: LD_INT 2
44028: ARRAY
44029: GREATEREQUAL
44030: AND
44031: IFFALSE 44057
44033: PUSH
44034: LD_VAR 0 10
44038: PPUSH
44039: LD_INT 3
44041: PPUSH
44042: CALL_OW 275
44046: PUSH
44047: LD_VAR 0 11
44051: PUSH
44052: LD_INT 3
44054: ARRAY
44055: GREATEREQUAL
44056: AND
44057: NOT
44058: IFFALSE 44062
// exit ;
44060: GO 44665
// if GetBType ( depot ) = b_depot then
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 266
44071: PUSH
44072: LD_INT 0
44074: EQUAL
44075: IFFALSE 44087
// dist := 28 else
44077: LD_ADDR_VAR 0 14
44081: PUSH
44082: LD_INT 28
44084: ST_TO_ADDR
44085: GO 44095
// dist := 36 ;
44087: LD_ADDR_VAR 0 14
44091: PUSH
44092: LD_INT 36
44094: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44095: LD_VAR 0 1
44099: PPUSH
44100: LD_VAR 0 3
44104: PPUSH
44105: LD_VAR 0 4
44109: PPUSH
44110: CALL_OW 297
44114: PUSH
44115: LD_VAR 0 14
44119: GREATER
44120: IFFALSE 44124
// exit ;
44122: GO 44665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44124: LD_ADDR_VAR 0 12
44128: PUSH
44129: LD_VAR 0 2
44133: PPUSH
44134: LD_VAR 0 3
44138: PPUSH
44139: LD_VAR 0 4
44143: PPUSH
44144: LD_VAR 0 5
44148: PPUSH
44149: LD_VAR 0 1
44153: PPUSH
44154: CALL_OW 248
44158: PPUSH
44159: LD_INT 0
44161: PPUSH
44162: CALL 44670 0 6
44166: ST_TO_ADDR
// if not hexes then
44167: LD_VAR 0 12
44171: NOT
44172: IFFALSE 44176
// exit ;
44174: GO 44665
// hex := GetHexInfo ( x , y ) ;
44176: LD_ADDR_VAR 0 15
44180: PUSH
44181: LD_VAR 0 3
44185: PPUSH
44186: LD_VAR 0 4
44190: PPUSH
44191: CALL_OW 546
44195: ST_TO_ADDR
// if hex [ 1 ] then
44196: LD_VAR 0 15
44200: PUSH
44201: LD_INT 1
44203: ARRAY
44204: IFFALSE 44208
// exit ;
44206: GO 44665
// height := hex [ 2 ] ;
44208: LD_ADDR_VAR 0 13
44212: PUSH
44213: LD_VAR 0 15
44217: PUSH
44218: LD_INT 2
44220: ARRAY
44221: ST_TO_ADDR
// for i = 1 to hexes do
44222: LD_ADDR_VAR 0 7
44226: PUSH
44227: DOUBLE
44228: LD_INT 1
44230: DEC
44231: ST_TO_ADDR
44232: LD_VAR 0 12
44236: PUSH
44237: FOR_TO
44238: IFFALSE 44582
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44240: LD_VAR 0 12
44244: PUSH
44245: LD_VAR 0 7
44249: ARRAY
44250: PUSH
44251: LD_INT 1
44253: ARRAY
44254: PPUSH
44255: LD_VAR 0 12
44259: PUSH
44260: LD_VAR 0 7
44264: ARRAY
44265: PUSH
44266: LD_INT 2
44268: ARRAY
44269: PPUSH
44270: CALL_OW 488
44274: NOT
44275: IFTRUE 44317
44277: PUSH
44278: LD_VAR 0 12
44282: PUSH
44283: LD_VAR 0 7
44287: ARRAY
44288: PUSH
44289: LD_INT 1
44291: ARRAY
44292: PPUSH
44293: LD_VAR 0 12
44297: PUSH
44298: LD_VAR 0 7
44302: ARRAY
44303: PUSH
44304: LD_INT 2
44306: ARRAY
44307: PPUSH
44308: CALL_OW 428
44312: PUSH
44313: LD_INT 0
44315: GREATER
44316: OR
44317: IFTRUE 44355
44319: PUSH
44320: LD_VAR 0 12
44324: PUSH
44325: LD_VAR 0 7
44329: ARRAY
44330: PUSH
44331: LD_INT 1
44333: ARRAY
44334: PPUSH
44335: LD_VAR 0 12
44339: PUSH
44340: LD_VAR 0 7
44344: ARRAY
44345: PUSH
44346: LD_INT 2
44348: ARRAY
44349: PPUSH
44350: CALL_OW 351
44354: OR
44355: IFFALSE 44361
// exit ;
44357: POP
44358: POP
44359: GO 44665
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44361: LD_ADDR_VAR 0 8
44365: PUSH
44366: LD_VAR 0 12
44370: PUSH
44371: LD_VAR 0 7
44375: ARRAY
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: PPUSH
44381: LD_VAR 0 12
44385: PUSH
44386: LD_VAR 0 7
44390: ARRAY
44391: PUSH
44392: LD_INT 2
44394: ARRAY
44395: PPUSH
44396: CALL_OW 546
44400: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44401: LD_VAR 0 8
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: IFTRUE 44431
44411: PUSH
44412: LD_VAR 0 8
44416: PUSH
44417: LD_INT 2
44419: ARRAY
44420: PUSH
44421: LD_VAR 0 13
44425: PUSH
44426: LD_INT 2
44428: PLUS
44429: GREATER
44430: OR
44431: IFTRUE 44453
44433: PUSH
44434: LD_VAR 0 8
44438: PUSH
44439: LD_INT 2
44441: ARRAY
44442: PUSH
44443: LD_VAR 0 13
44447: PUSH
44448: LD_INT 2
44450: MINUS
44451: LESS
44452: OR
44453: IFTRUE 44521
44455: PUSH
44456: LD_VAR 0 8
44460: PUSH
44461: LD_INT 3
44463: ARRAY
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 8
44470: PUSH
44471: LD_INT 9
44473: PUSH
44474: LD_INT 10
44476: PUSH
44477: LD_INT 11
44479: PUSH
44480: LD_INT 12
44482: PUSH
44483: LD_INT 13
44485: PUSH
44486: LD_INT 16
44488: PUSH
44489: LD_INT 17
44491: PUSH
44492: LD_INT 18
44494: PUSH
44495: LD_INT 19
44497: PUSH
44498: LD_INT 20
44500: PUSH
44501: LD_INT 21
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: IN
44519: NOT
44520: OR
44521: IFTRUE 44534
44523: PUSH
44524: LD_VAR 0 8
44528: PUSH
44529: LD_INT 5
44531: ARRAY
44532: NOT
44533: OR
44534: IFTRUE 44574
44536: PUSH
44537: LD_VAR 0 8
44541: PUSH
44542: LD_INT 6
44544: ARRAY
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 7
44554: PUSH
44555: LD_INT 9
44557: PUSH
44558: LD_INT 10
44560: PUSH
44561: LD_INT 11
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: IN
44572: NOT
44573: OR
44574: IFFALSE 44580
// exit ;
44576: POP
44577: POP
44578: GO 44665
// end ;
44580: GO 44237
44582: POP
44583: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44584: LD_VAR 0 9
44588: PPUSH
44589: LD_VAR 0 3
44593: PPUSH
44594: LD_VAR 0 4
44598: PPUSH
44599: LD_INT 20
44601: PPUSH
44602: CALL 36484 0 4
44606: PUSH
44607: LD_INT 4
44609: ARRAY
44610: IFFALSE 44614
// exit ;
44612: GO 44665
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44614: LD_VAR 0 2
44618: PUSH
44619: LD_INT 29
44621: PUSH
44622: LD_INT 30
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: IN
44629: IFFALSE 44653
44631: PUSH
44632: LD_VAR 0 3
44636: PPUSH
44637: LD_VAR 0 4
44641: PPUSH
44642: LD_VAR 0 9
44646: PPUSH
44647: CALL_OW 440
44651: NOT
44652: AND
44653: IFFALSE 44657
// exit ;
44655: GO 44665
// result := true ;
44657: LD_ADDR_VAR 0 6
44661: PUSH
44662: LD_INT 1
44664: ST_TO_ADDR
// end ;
44665: LD_VAR 0 6
44669: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44670: LD_INT 0
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
// result = [ ] ;
44730: LD_ADDR_VAR 0 7
44734: PUSH
44735: EMPTY
44736: ST_TO_ADDR
// temp_list = [ ] ;
44737: LD_ADDR_VAR 0 9
44741: PUSH
44742: EMPTY
44743: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44744: LD_VAR 0 4
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: LD_INT 4
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: IN
44775: NOT
44776: IFTRUE 44819
44778: PUSH
44779: LD_VAR 0 1
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: IN
44794: IFFALSE 44818
44796: PUSH
44797: LD_VAR 0 5
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 3
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: IN
44816: NOT
44817: AND
44818: OR
44819: IFFALSE 44823
// exit ;
44821: GO 63222
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44823: LD_VAR 0 1
44827: PUSH
44828: LD_INT 6
44830: PUSH
44831: LD_INT 7
44833: PUSH
44834: LD_INT 8
44836: PUSH
44837: LD_INT 13
44839: PUSH
44840: LD_INT 12
44842: PUSH
44843: LD_INT 15
44845: PUSH
44846: LD_INT 11
44848: PUSH
44849: LD_INT 14
44851: PUSH
44852: LD_INT 10
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: IN
44866: IFFALSE 44876
// btype = b_lab ;
44868: LD_ADDR_VAR 0 1
44872: PUSH
44873: LD_INT 6
44875: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44876: LD_VAR 0 6
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: IN
44895: NOT
44896: IFTRUE 44964
44898: PUSH
44899: LD_VAR 0 1
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 6
44918: PUSH
44919: LD_INT 36
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: LD_INT 31
44930: PUSH
44931: LD_INT 32
44933: PUSH
44934: LD_INT 33
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: IN
44950: NOT
44951: IFFALSE 44963
44953: PUSH
44954: LD_VAR 0 6
44958: PUSH
44959: LD_INT 1
44961: EQUAL
44962: AND
44963: OR
44964: IFTRUE 44996
44966: PUSH
44967: LD_VAR 0 1
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: IN
44982: NOT
44983: IFFALSE 44995
44985: PUSH
44986: LD_VAR 0 6
44990: PUSH
44991: LD_INT 2
44993: EQUAL
44994: AND
44995: OR
44996: IFFALSE 45006
// mode = 0 ;
44998: LD_ADDR_VAR 0 6
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// case mode of 0 :
45006: LD_VAR 0 6
45010: PUSH
45011: LD_INT 0
45013: DOUBLE
45014: EQUAL
45015: IFTRUE 45019
45017: GO 56472
45019: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45020: LD_ADDR_VAR 0 11
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 3
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45213: LD_ADDR_VAR 0 12
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: NEG
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: NEG
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45409: LD_ADDR_VAR 0 13
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 3
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45608: LD_ADDR_VAR 0 14
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 3
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45804: LD_ADDR_VAR 0 15
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45997: LD_ADDR_VAR 0 16
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46190: LD_ADDR_VAR 0 17
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46420: LD_ADDR_VAR 0 18
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46650: LD_ADDR_VAR 0 19
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46880: LD_ADDR_VAR 0 20
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47110: LD_ADDR_VAR 0 21
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47340: LD_ADDR_VAR 0 22
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47570: LD_ADDR_VAR 0 23
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47850: LD_ADDR_VAR 0 24
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48126: LD_ADDR_VAR 0 25
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48400: LD_ADDR_VAR 0 26
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 3
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48676: LD_ADDR_VAR 0 27
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48956: LD_ADDR_VAR 0 28
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49238: LD_ADDR_VAR 0 29
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49517: LD_ADDR_VAR 0 30
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49795: LD_ADDR_VAR 0 31
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50073: LD_ADDR_VAR 0 32
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 3
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50351: LD_ADDR_VAR 0 33
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50630: LD_ADDR_VAR 0 34
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50910: LD_ADDR_VAR 0 35
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51022: LD_ADDR_VAR 0 36
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51134: LD_ADDR_VAR 0 37
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 38
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51358: LD_ADDR_VAR 0 39
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51470: LD_ADDR_VAR 0 40
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51582: LD_ADDR_VAR 0 41
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51932: LD_ADDR_VAR 0 42
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52282: LD_ADDR_VAR 0 43
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52630: LD_ADDR_VAR 0 44
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52980: LD_ADDR_VAR 0 45
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53330: LD_ADDR_VAR 0 46
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53678: LD_ADDR_VAR 0 47
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53829: LD_ADDR_VAR 0 48
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53976: LD_ADDR_VAR 0 49
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54120: LD_ADDR_VAR 0 50
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54264: LD_ADDR_VAR 0 51
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 52
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54562: LD_ADDR_VAR 0 53
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54792: LD_ADDR_VAR 0 54
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55022: LD_ADDR_VAR 0 55
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55252: LD_ADDR_VAR 0 56
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55482: LD_ADDR_VAR 0 57
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55712: LD_ADDR_VAR 0 58
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55942: LD_ADDR_VAR 0 59
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56030: LD_ADDR_VAR 0 60
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56118: LD_ADDR_VAR 0 61
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56206: LD_ADDR_VAR 0 62
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56294: LD_ADDR_VAR 0 63
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56382: LD_ADDR_VAR 0 64
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// end ; 1 :
56470: GO 62367
56472: LD_INT 1
56474: DOUBLE
56475: EQUAL
56476: IFTRUE 56480
56478: GO 59103
56480: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56481: LD_ADDR_VAR 0 11
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56525: LD_ADDR_VAR 0 12
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56566: LD_ADDR_VAR 0 13
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56606: LD_ADDR_VAR 0 14
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56647: LD_ADDR_VAR 0 15
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56691: LD_ADDR_VAR 0 16
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56737: LD_ADDR_VAR 0 17
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: LIST
56780: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56781: LD_ADDR_VAR 0 18
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56822: LD_ADDR_VAR 0 19
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56862: LD_ADDR_VAR 0 20
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56903: LD_ADDR_VAR 0 21
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56947: LD_ADDR_VAR 0 22
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56993: LD_ADDR_VAR 0 23
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57037: LD_ADDR_VAR 0 24
57041: PUSH
57042: LD_INT 3
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57078: LD_ADDR_VAR 0 25
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 4
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: LD_INT 4
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57118: LD_ADDR_VAR 0 26
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 4
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57159: LD_ADDR_VAR 0 27
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 4
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57203: LD_ADDR_VAR 0 28
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57249: LD_ADDR_VAR 0 29
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 4
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 4
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 5
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 5
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 4
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 6
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 6
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 5
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57404: LD_ADDR_VAR 0 30
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 4
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 4
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 4
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 5
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 5
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 6
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 6
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57547: LD_ADDR_VAR 0 31
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 4
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: LD_INT 4
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: LD_INT 4
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: LD_INT 4
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 5
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: PUSH
57635: LD_INT 5
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 6
57644: PUSH
57645: LD_INT 5
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 6
57654: PUSH
57655: LD_INT 6
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 5
57664: PUSH
57665: LD_INT 6
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57686: LD_ADDR_VAR 0 32
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 3
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 4
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 4
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 5
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 5
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 6
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 6
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 5
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57829: LD_ADDR_VAR 0 33
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 4
57881: NEG
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 4
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 5
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 5
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 5
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 6
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 6
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57984: LD_ADDR_VAR 0 34
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 3
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: NEG
58064: PUSH
58065: LD_INT 5
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 5
58075: NEG
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 5
58087: NEG
58088: PUSH
58089: LD_INT 5
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: NEG
58100: PUSH
58101: LD_INT 6
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 6
58111: NEG
58112: PUSH
58113: LD_INT 5
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 6
58123: NEG
58124: PUSH
58125: LD_INT 6
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58147: LD_ADDR_VAR 0 41
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 3
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58191: LD_ADDR_VAR 0 42
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58232: LD_ADDR_VAR 0 43
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58272: LD_ADDR_VAR 0 44
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: LIST
58312: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58313: LD_ADDR_VAR 0 45
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58357: LD_ADDR_VAR 0 46
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58403: LD_ADDR_VAR 0 47
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 3
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58436: LD_ADDR_VAR 0 48
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58467: LD_ADDR_VAR 0 49
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58496: LD_ADDR_VAR 0 50
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58525: LD_ADDR_VAR 0 51
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58556: LD_ADDR_VAR 0 52
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58589: LD_ADDR_VAR 0 53
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58633: LD_ADDR_VAR 0 54
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58674: LD_ADDR_VAR 0 55
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58714: LD_ADDR_VAR 0 56
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58755: LD_ADDR_VAR 0 57
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: NEG
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58799: LD_ADDR_VAR 0 58
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 3
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58845: LD_ADDR_VAR 0 59
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58889: LD_ADDR_VAR 0 60
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58930: LD_ADDR_VAR 0 61
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58970: LD_ADDR_VAR 0 62
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: LIST
59010: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59011: LD_ADDR_VAR 0 63
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59055: LD_ADDR_VAR 0 64
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: LD_INT 2
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// end ; 2 :
59101: GO 62367
59103: LD_INT 2
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59111
59109: GO 62366
59111: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59112: LD_ADDR_VAR 0 29
59116: PUSH
59117: LD_INT 4
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 4
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 5
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 5
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 4
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 5
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 5
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 3
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: LD_INT 5
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 2
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 4
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 4
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 4
59497: NEG
59498: PUSH
59499: LD_INT 4
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: LD_INT 5
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: LD_INT 4
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: NEG
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 5
59557: NEG
59558: PUSH
59559: LD_INT 4
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 5
59569: NEG
59570: PUSH
59571: LD_INT 5
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 5
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 5
59593: NEG
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59650: LD_ADDR_VAR 0 30
59654: PUSH
59655: LD_INT 4
59657: PUSH
59658: LD_INT 4
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: PUSH
59678: LD_INT 4
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: LD_INT 5
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 4
59697: PUSH
59698: LD_INT 5
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: LD_INT 4
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 5
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 4
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 4
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 5
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 5
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 5
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 4
60014: NEG
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 4
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: NEG
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 4
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 5
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 4
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 4
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 5
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60197: LD_ADDR_VAR 0 31
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 4
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 4
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 5
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 5
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 4
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 4
60353: NEG
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 4
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: LD_INT 2
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 4
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: NEG
60412: PUSH
60413: LD_INT 5
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: LD_INT 4
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 4
60447: NEG
60448: PUSH
60449: LD_INT 3
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 5
60459: NEG
60460: PUSH
60461: LD_INT 4
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: NEG
60472: PUSH
60473: LD_INT 5
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: LD_INT 5
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 5
60495: NEG
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 2
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 3
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: LD_INT 4
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 4
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 5
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 5
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 3
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 5
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60747: LD_ADDR_VAR 0 32
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 4
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 5
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 5
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 5
60833: NEG
60834: PUSH
60835: LD_INT 2
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: LD_INT 3
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: LD_INT 4
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 4
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 4
60928: NEG
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 4
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 4
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 5
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 4
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 3
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 4
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 5
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: LD_INT 5
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 4
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: PUSH
61160: LD_INT 4
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 4
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 5
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 5
61189: PUSH
61190: LD_INT 5
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: LD_INT 5
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: PUSH
61210: LD_INT 4
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 5
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61294: LD_ADDR_VAR 0 33
61298: PUSH
61299: LD_INT 4
61301: NEG
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 4
61313: NEG
61314: PUSH
61315: LD_INT 5
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 4
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 4
61349: NEG
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 5
61361: NEG
61362: PUSH
61363: LD_INT 4
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 5
61373: NEG
61374: PUSH
61375: LD_INT 5
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: LD_INT 5
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: NEG
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 3
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 4
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 2
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 4
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: NEG
61500: PUSH
61501: LD_INT 4
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 4
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 5
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 5
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 4
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 3
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 3
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 4
61624: PUSH
61625: LD_INT 3
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: LD_INT 4
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: LD_INT 4
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 4
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 4
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 5
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 5
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 5
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61832: LD_ADDR_VAR 0 34
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 5
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 4
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 4
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 5
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 5
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 4
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 4
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 4
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 5
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 5
62064: PUSH
62065: LD_INT 5
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: LD_INT 5
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: LD_INT 3
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 5
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: LD_INT 5
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: LD_INT 4
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 4
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 4
62217: NEG
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 4
62262: NEG
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 5
62273: NEG
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 5
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 5
62296: NEG
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: ST_TO_ADDR
// end ; end ;
62364: GO 62367
62366: POP
// case btype of b_depot , b_warehouse :
62367: LD_VAR 0 1
62371: PUSH
62372: LD_INT 0
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62386
62378: LD_INT 1
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62386
62384: GO 62587
62386: POP
// case nation of nation_american :
62387: LD_VAR 0 5
62391: PUSH
62392: LD_INT 1
62394: DOUBLE
62395: EQUAL
62396: IFTRUE 62400
62398: GO 62456
62400: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62401: LD_ADDR_VAR 0 9
62405: PUSH
62406: LD_VAR 0 11
62410: PUSH
62411: LD_VAR 0 12
62415: PUSH
62416: LD_VAR 0 13
62420: PUSH
62421: LD_VAR 0 14
62425: PUSH
62426: LD_VAR 0 15
62430: PUSH
62431: LD_VAR 0 16
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 4
62448: PUSH
62449: LD_INT 1
62451: PLUS
62452: ARRAY
62453: ST_TO_ADDR
62454: GO 62585
62456: LD_INT 2
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62464
62462: GO 62520
62464: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62465: LD_ADDR_VAR 0 9
62469: PUSH
62470: LD_VAR 0 17
62474: PUSH
62475: LD_VAR 0 18
62479: PUSH
62480: LD_VAR 0 19
62484: PUSH
62485: LD_VAR 0 20
62489: PUSH
62490: LD_VAR 0 21
62494: PUSH
62495: LD_VAR 0 22
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: LD_VAR 0 4
62512: PUSH
62513: LD_INT 1
62515: PLUS
62516: ARRAY
62517: ST_TO_ADDR
62518: GO 62585
62520: LD_INT 3
62522: DOUBLE
62523: EQUAL
62524: IFTRUE 62528
62526: GO 62584
62528: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62529: LD_ADDR_VAR 0 9
62533: PUSH
62534: LD_VAR 0 23
62538: PUSH
62539: LD_VAR 0 24
62543: PUSH
62544: LD_VAR 0 25
62548: PUSH
62549: LD_VAR 0 26
62553: PUSH
62554: LD_VAR 0 27
62558: PUSH
62559: LD_VAR 0 28
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: LD_VAR 0 4
62576: PUSH
62577: LD_INT 1
62579: PLUS
62580: ARRAY
62581: ST_TO_ADDR
62582: GO 62585
62584: POP
62585: GO 63140
62587: LD_INT 2
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62601
62593: LD_INT 3
62595: DOUBLE
62596: EQUAL
62597: IFTRUE 62601
62599: GO 62657
62601: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62602: LD_ADDR_VAR 0 9
62606: PUSH
62607: LD_VAR 0 29
62611: PUSH
62612: LD_VAR 0 30
62616: PUSH
62617: LD_VAR 0 31
62621: PUSH
62622: LD_VAR 0 32
62626: PUSH
62627: LD_VAR 0 33
62631: PUSH
62632: LD_VAR 0 34
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: PUSH
62645: LD_VAR 0 4
62649: PUSH
62650: LD_INT 1
62652: PLUS
62653: ARRAY
62654: ST_TO_ADDR
62655: GO 63140
62657: LD_INT 16
62659: DOUBLE
62660: EQUAL
62661: IFTRUE 62719
62663: LD_INT 17
62665: DOUBLE
62666: EQUAL
62667: IFTRUE 62719
62669: LD_INT 18
62671: DOUBLE
62672: EQUAL
62673: IFTRUE 62719
62675: LD_INT 19
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62719
62681: LD_INT 22
62683: DOUBLE
62684: EQUAL
62685: IFTRUE 62719
62687: LD_INT 20
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62719
62693: LD_INT 21
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62719
62699: LD_INT 23
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62719
62705: LD_INT 24
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62719
62711: LD_INT 25
62713: DOUBLE
62714: EQUAL
62715: IFTRUE 62719
62717: GO 62775
62719: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62720: LD_ADDR_VAR 0 9
62724: PUSH
62725: LD_VAR 0 35
62729: PUSH
62730: LD_VAR 0 36
62734: PUSH
62735: LD_VAR 0 37
62739: PUSH
62740: LD_VAR 0 38
62744: PUSH
62745: LD_VAR 0 39
62749: PUSH
62750: LD_VAR 0 40
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: PUSH
62763: LD_VAR 0 4
62767: PUSH
62768: LD_INT 1
62770: PLUS
62771: ARRAY
62772: ST_TO_ADDR
62773: GO 63140
62775: LD_INT 6
62777: DOUBLE
62778: EQUAL
62779: IFTRUE 62831
62781: LD_INT 7
62783: DOUBLE
62784: EQUAL
62785: IFTRUE 62831
62787: LD_INT 8
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62831
62793: LD_INT 13
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62831
62799: LD_INT 12
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62831
62805: LD_INT 15
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62831
62811: LD_INT 11
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62831
62817: LD_INT 14
62819: DOUBLE
62820: EQUAL
62821: IFTRUE 62831
62823: LD_INT 10
62825: DOUBLE
62826: EQUAL
62827: IFTRUE 62831
62829: GO 62887
62831: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62832: LD_ADDR_VAR 0 9
62836: PUSH
62837: LD_VAR 0 41
62841: PUSH
62842: LD_VAR 0 42
62846: PUSH
62847: LD_VAR 0 43
62851: PUSH
62852: LD_VAR 0 44
62856: PUSH
62857: LD_VAR 0 45
62861: PUSH
62862: LD_VAR 0 46
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: PUSH
62875: LD_VAR 0 4
62879: PUSH
62880: LD_INT 1
62882: PLUS
62883: ARRAY
62884: ST_TO_ADDR
62885: GO 63140
62887: LD_INT 36
62889: DOUBLE
62890: EQUAL
62891: IFTRUE 62895
62893: GO 62951
62895: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62896: LD_ADDR_VAR 0 9
62900: PUSH
62901: LD_VAR 0 47
62905: PUSH
62906: LD_VAR 0 48
62910: PUSH
62911: LD_VAR 0 49
62915: PUSH
62916: LD_VAR 0 50
62920: PUSH
62921: LD_VAR 0 51
62925: PUSH
62926: LD_VAR 0 52
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: LD_VAR 0 4
62943: PUSH
62944: LD_INT 1
62946: PLUS
62947: ARRAY
62948: ST_TO_ADDR
62949: GO 63140
62951: LD_INT 4
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62977
62957: LD_INT 5
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62977
62963: LD_INT 34
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62977
62969: LD_INT 37
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62977
62975: GO 63033
62977: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62978: LD_ADDR_VAR 0 9
62982: PUSH
62983: LD_VAR 0 53
62987: PUSH
62988: LD_VAR 0 54
62992: PUSH
62993: LD_VAR 0 55
62997: PUSH
62998: LD_VAR 0 56
63002: PUSH
63003: LD_VAR 0 57
63007: PUSH
63008: LD_VAR 0 58
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: PUSH
63021: LD_VAR 0 4
63025: PUSH
63026: LD_INT 1
63028: PLUS
63029: ARRAY
63030: ST_TO_ADDR
63031: GO 63140
63033: LD_INT 31
63035: DOUBLE
63036: EQUAL
63037: IFTRUE 63083
63039: LD_INT 32
63041: DOUBLE
63042: EQUAL
63043: IFTRUE 63083
63045: LD_INT 33
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63083
63051: LD_INT 27
63053: DOUBLE
63054: EQUAL
63055: IFTRUE 63083
63057: LD_INT 26
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63083
63063: LD_INT 28
63065: DOUBLE
63066: EQUAL
63067: IFTRUE 63083
63069: LD_INT 29
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63083
63075: LD_INT 30
63077: DOUBLE
63078: EQUAL
63079: IFTRUE 63083
63081: GO 63139
63083: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63084: LD_ADDR_VAR 0 9
63088: PUSH
63089: LD_VAR 0 59
63093: PUSH
63094: LD_VAR 0 60
63098: PUSH
63099: LD_VAR 0 61
63103: PUSH
63104: LD_VAR 0 62
63108: PUSH
63109: LD_VAR 0 63
63113: PUSH
63114: LD_VAR 0 64
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: PUSH
63127: LD_VAR 0 4
63131: PUSH
63132: LD_INT 1
63134: PLUS
63135: ARRAY
63136: ST_TO_ADDR
63137: GO 63140
63139: POP
// temp_list2 = [ ] ;
63140: LD_ADDR_VAR 0 10
63144: PUSH
63145: EMPTY
63146: ST_TO_ADDR
// for i in temp_list do
63147: LD_ADDR_VAR 0 8
63151: PUSH
63152: LD_VAR 0 9
63156: PUSH
63157: FOR_IN
63158: IFFALSE 63210
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63160: LD_ADDR_VAR 0 10
63164: PUSH
63165: LD_VAR 0 10
63169: PUSH
63170: LD_VAR 0 8
63174: PUSH
63175: LD_INT 1
63177: ARRAY
63178: PUSH
63179: LD_VAR 0 2
63183: PLUS
63184: PUSH
63185: LD_VAR 0 8
63189: PUSH
63190: LD_INT 2
63192: ARRAY
63193: PUSH
63194: LD_VAR 0 3
63198: PLUS
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: EMPTY
63205: LIST
63206: ADD
63207: ST_TO_ADDR
63208: GO 63157
63210: POP
63211: POP
// result = temp_list2 ;
63212: LD_ADDR_VAR 0 7
63216: PUSH
63217: LD_VAR 0 10
63221: ST_TO_ADDR
// end ;
63222: LD_VAR 0 7
63226: RET
// export function EnemyInRange ( unit , dist ) ; begin
63227: LD_INT 0
63229: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63230: LD_ADDR_VAR 0 3
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: CALL_OW 255
63244: PPUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: CALL_OW 250
63254: PPUSH
63255: LD_VAR 0 1
63259: PPUSH
63260: CALL_OW 251
63264: PPUSH
63265: LD_VAR 0 2
63269: PPUSH
63270: CALL 36484 0 4
63274: PUSH
63275: LD_INT 4
63277: ARRAY
63278: ST_TO_ADDR
// end ;
63279: LD_VAR 0 3
63283: RET
// export function PlayerSeeMe ( unit ) ; begin
63284: LD_INT 0
63286: PPUSH
// result := See ( your_side , unit ) ;
63287: LD_ADDR_VAR 0 2
63291: PUSH
63292: LD_OWVAR 2
63296: PPUSH
63297: LD_VAR 0 1
63301: PPUSH
63302: CALL_OW 292
63306: ST_TO_ADDR
// end ;
63307: LD_VAR 0 2
63311: RET
// export function ReverseDir ( unit ) ; begin
63312: LD_INT 0
63314: PPUSH
// if not unit then
63315: LD_VAR 0 1
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63347
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63324: LD_ADDR_VAR 0 2
63328: PUSH
63329: LD_VAR 0 1
63333: PPUSH
63334: CALL_OW 254
63338: PUSH
63339: LD_INT 3
63341: PLUS
63342: PUSH
63343: LD_INT 6
63345: MOD
63346: ST_TO_ADDR
// end ;
63347: LD_VAR 0 2
63351: RET
// export function ReverseArray ( array ) ; var i ; begin
63352: LD_INT 0
63354: PPUSH
63355: PPUSH
// if not array then
63356: LD_VAR 0 1
63360: NOT
63361: IFFALSE 63365
// exit ;
63363: GO 63420
// result := [ ] ;
63365: LD_ADDR_VAR 0 2
63369: PUSH
63370: EMPTY
63371: ST_TO_ADDR
// for i := array downto 1 do
63372: LD_ADDR_VAR 0 3
63376: PUSH
63377: DOUBLE
63378: LD_VAR 0 1
63382: INC
63383: ST_TO_ADDR
63384: LD_INT 1
63386: PUSH
63387: FOR_DOWNTO
63388: IFFALSE 63418
// result := Join ( result , array [ i ] ) ;
63390: LD_ADDR_VAR 0 2
63394: PUSH
63395: LD_VAR 0 2
63399: PPUSH
63400: LD_VAR 0 1
63404: PUSH
63405: LD_VAR 0 3
63409: ARRAY
63410: PPUSH
63411: CALL 68262 0 2
63415: ST_TO_ADDR
63416: GO 63387
63418: POP
63419: POP
// end ;
63420: LD_VAR 0 2
63424: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63425: LD_INT 0
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
// if not unit or not hexes then
63433: LD_VAR 0 1
63437: NOT
63438: IFTRUE 63447
63440: PUSH
63441: LD_VAR 0 2
63445: NOT
63446: OR
63447: IFFALSE 63451
// exit ;
63449: GO 63574
// dist := 9999 ;
63451: LD_ADDR_VAR 0 5
63455: PUSH
63456: LD_INT 9999
63458: ST_TO_ADDR
// for i = 1 to hexes do
63459: LD_ADDR_VAR 0 4
63463: PUSH
63464: DOUBLE
63465: LD_INT 1
63467: DEC
63468: ST_TO_ADDR
63469: LD_VAR 0 2
63473: PUSH
63474: FOR_TO
63475: IFFALSE 63562
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63477: LD_ADDR_VAR 0 6
63481: PUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: LD_VAR 0 2
63491: PUSH
63492: LD_VAR 0 4
63496: ARRAY
63497: PUSH
63498: LD_INT 1
63500: ARRAY
63501: PPUSH
63502: LD_VAR 0 2
63506: PUSH
63507: LD_VAR 0 4
63511: ARRAY
63512: PUSH
63513: LD_INT 2
63515: ARRAY
63516: PPUSH
63517: CALL_OW 297
63521: ST_TO_ADDR
// if tdist < dist then
63522: LD_VAR 0 6
63526: PUSH
63527: LD_VAR 0 5
63531: LESS
63532: IFFALSE 63560
// begin hex := hexes [ i ] ;
63534: LD_ADDR_VAR 0 8
63538: PUSH
63539: LD_VAR 0 2
63543: PUSH
63544: LD_VAR 0 4
63548: ARRAY
63549: ST_TO_ADDR
// dist := tdist ;
63550: LD_ADDR_VAR 0 5
63554: PUSH
63555: LD_VAR 0 6
63559: ST_TO_ADDR
// end ; end ;
63560: GO 63474
63562: POP
63563: POP
// result := hex ;
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_VAR 0 8
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 3
63578: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63579: LD_INT 0
63581: PPUSH
63582: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63583: LD_VAR 0 1
63587: NOT
63588: IFTRUE 63627
63590: PUSH
63591: LD_VAR 0 1
63595: PUSH
63596: LD_INT 21
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 23
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PPUSH
63620: CALL_OW 69
63624: IN
63625: NOT
63626: OR
63627: IFFALSE 63631
// exit ;
63629: GO 63678
// for i = 1 to 3 do
63631: LD_ADDR_VAR 0 3
63635: PUSH
63636: DOUBLE
63637: LD_INT 1
63639: DEC
63640: ST_TO_ADDR
63641: LD_INT 3
63643: PUSH
63644: FOR_TO
63645: IFFALSE 63676
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63647: LD_VAR 0 1
63651: PPUSH
63652: CALL_OW 250
63656: PPUSH
63657: LD_VAR 0 1
63661: PPUSH
63662: CALL_OW 251
63666: PPUSH
63667: LD_INT 1
63669: PPUSH
63670: CALL_OW 453
63674: GO 63644
63676: POP
63677: POP
// end ;
63678: LD_VAR 0 2
63682: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63683: LD_INT 0
63685: PPUSH
63686: PPUSH
63687: PPUSH
63688: PPUSH
63689: PPUSH
63690: PPUSH
// if not unit or not enemy_unit then
63691: LD_VAR 0 1
63695: NOT
63696: IFTRUE 63705
63698: PUSH
63699: LD_VAR 0 2
63703: NOT
63704: OR
63705: IFFALSE 63709
// exit ;
63707: GO 64180
// if GetLives ( i ) < 250 then
63709: LD_VAR 0 4
63713: PPUSH
63714: CALL_OW 256
63718: PUSH
63719: LD_INT 250
63721: LESS
63722: IFFALSE 63735
// begin ComAutodestruct ( i ) ;
63724: LD_VAR 0 4
63728: PPUSH
63729: CALL 63579 0 1
// exit ;
63733: GO 64180
// end ; x := GetX ( enemy_unit ) ;
63735: LD_ADDR_VAR 0 7
63739: PUSH
63740: LD_VAR 0 2
63744: PPUSH
63745: CALL_OW 250
63749: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63750: LD_ADDR_VAR 0 8
63754: PUSH
63755: LD_VAR 0 2
63759: PPUSH
63760: CALL_OW 251
63764: ST_TO_ADDR
// if not x or not y then
63765: LD_VAR 0 7
63769: NOT
63770: IFTRUE 63779
63772: PUSH
63773: LD_VAR 0 8
63777: NOT
63778: OR
63779: IFFALSE 63783
// exit ;
63781: GO 64180
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63783: LD_ADDR_VAR 0 6
63787: PUSH
63788: LD_VAR 0 7
63792: PPUSH
63793: LD_INT 0
63795: PPUSH
63796: LD_INT 4
63798: PPUSH
63799: CALL_OW 272
63803: PUSH
63804: LD_VAR 0 8
63808: PPUSH
63809: LD_INT 0
63811: PPUSH
63812: LD_INT 4
63814: PPUSH
63815: CALL_OW 273
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_VAR 0 7
63828: PPUSH
63829: LD_INT 1
63831: PPUSH
63832: LD_INT 4
63834: PPUSH
63835: CALL_OW 272
63839: PUSH
63840: LD_VAR 0 8
63844: PPUSH
63845: LD_INT 1
63847: PPUSH
63848: LD_INT 4
63850: PPUSH
63851: CALL_OW 273
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_VAR 0 7
63864: PPUSH
63865: LD_INT 2
63867: PPUSH
63868: LD_INT 4
63870: PPUSH
63871: CALL_OW 272
63875: PUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 2
63883: PPUSH
63884: LD_INT 4
63886: PPUSH
63887: CALL_OW 273
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_VAR 0 7
63900: PPUSH
63901: LD_INT 3
63903: PPUSH
63904: LD_INT 4
63906: PPUSH
63907: CALL_OW 272
63911: PUSH
63912: LD_VAR 0 8
63916: PPUSH
63917: LD_INT 3
63919: PPUSH
63920: LD_INT 4
63922: PPUSH
63923: CALL_OW 273
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_VAR 0 7
63936: PPUSH
63937: LD_INT 4
63939: PPUSH
63940: LD_INT 4
63942: PPUSH
63943: CALL_OW 272
63947: PUSH
63948: LD_VAR 0 8
63952: PPUSH
63953: LD_INT 4
63955: PPUSH
63956: LD_INT 4
63958: PPUSH
63959: CALL_OW 273
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_VAR 0 7
63972: PPUSH
63973: LD_INT 5
63975: PPUSH
63976: LD_INT 4
63978: PPUSH
63979: CALL_OW 272
63983: PUSH
63984: LD_VAR 0 8
63988: PPUSH
63989: LD_INT 5
63991: PPUSH
63992: LD_INT 4
63994: PPUSH
63995: CALL_OW 273
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: ST_TO_ADDR
// for i = tmp downto 1 do
64012: LD_ADDR_VAR 0 4
64016: PUSH
64017: DOUBLE
64018: LD_VAR 0 6
64022: INC
64023: ST_TO_ADDR
64024: LD_INT 1
64026: PUSH
64027: FOR_DOWNTO
64028: IFFALSE 64131
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64030: LD_VAR 0 6
64034: PUSH
64035: LD_VAR 0 4
64039: ARRAY
64040: PUSH
64041: LD_INT 1
64043: ARRAY
64044: PPUSH
64045: LD_VAR 0 6
64049: PUSH
64050: LD_VAR 0 4
64054: ARRAY
64055: PUSH
64056: LD_INT 2
64058: ARRAY
64059: PPUSH
64060: CALL_OW 488
64064: NOT
64065: IFTRUE 64107
64067: PUSH
64068: LD_VAR 0 6
64072: PUSH
64073: LD_VAR 0 4
64077: ARRAY
64078: PUSH
64079: LD_INT 1
64081: ARRAY
64082: PPUSH
64083: LD_VAR 0 6
64087: PUSH
64088: LD_VAR 0 4
64092: ARRAY
64093: PUSH
64094: LD_INT 2
64096: ARRAY
64097: PPUSH
64098: CALL_OW 428
64102: PUSH
64103: LD_INT 0
64105: NONEQUAL
64106: OR
64107: IFFALSE 64129
// tmp := Delete ( tmp , i ) ;
64109: LD_ADDR_VAR 0 6
64113: PUSH
64114: LD_VAR 0 6
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: CALL_OW 3
64128: ST_TO_ADDR
64129: GO 64027
64131: POP
64132: POP
// j := GetClosestHex ( unit , tmp ) ;
64133: LD_ADDR_VAR 0 5
64137: PUSH
64138: LD_VAR 0 1
64142: PPUSH
64143: LD_VAR 0 6
64147: PPUSH
64148: CALL 63425 0 2
64152: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64153: LD_VAR 0 1
64157: PPUSH
64158: LD_VAR 0 5
64162: PUSH
64163: LD_INT 1
64165: ARRAY
64166: PPUSH
64167: LD_VAR 0 5
64171: PUSH
64172: LD_INT 2
64174: ARRAY
64175: PPUSH
64176: CALL_OW 111
// end ;
64180: LD_VAR 0 3
64184: RET
// export function PrepareApemanSoldier ( ) ; begin
64185: LD_INT 0
64187: PPUSH
// uc_nation := 0 ;
64188: LD_ADDR_OWVAR 21
64192: PUSH
64193: LD_INT 0
64195: ST_TO_ADDR
// hc_sex := sex_male ;
64196: LD_ADDR_OWVAR 27
64200: PUSH
64201: LD_INT 1
64203: ST_TO_ADDR
// hc_name :=  ;
64204: LD_ADDR_OWVAR 26
64208: PUSH
64209: LD_STRING 
64211: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64212: LD_ADDR_OWVAR 28
64216: PUSH
64217: LD_INT 15
64219: ST_TO_ADDR
// hc_gallery :=  ;
64220: LD_ADDR_OWVAR 33
64224: PUSH
64225: LD_STRING 
64227: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64228: LD_ADDR_OWVAR 31
64232: PUSH
64233: LD_INT 0
64235: PPUSH
64236: LD_INT 3
64238: PPUSH
64239: CALL_OW 12
64243: PUSH
64244: LD_INT 0
64246: PPUSH
64247: LD_INT 3
64249: PPUSH
64250: CALL_OW 12
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64267: LD_ADDR_OWVAR 29
64271: PUSH
64272: LD_INT 12
64274: PUSH
64275: LD_INT 12
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: ST_TO_ADDR
// end ;
64282: LD_VAR 0 1
64286: RET
// export function PrepareApemanEngineer ( ) ; begin
64287: LD_INT 0
64289: PPUSH
// uc_nation := 0 ;
64290: LD_ADDR_OWVAR 21
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// hc_sex := sex_male ;
64298: LD_ADDR_OWVAR 27
64302: PUSH
64303: LD_INT 1
64305: ST_TO_ADDR
// hc_name :=  ;
64306: LD_ADDR_OWVAR 26
64310: PUSH
64311: LD_STRING 
64313: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64314: LD_ADDR_OWVAR 28
64318: PUSH
64319: LD_INT 16
64321: ST_TO_ADDR
// hc_gallery :=  ;
64322: LD_ADDR_OWVAR 33
64326: PUSH
64327: LD_STRING 
64329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64330: LD_ADDR_OWVAR 31
64334: PUSH
64335: LD_INT 0
64337: PPUSH
64338: LD_INT 3
64340: PPUSH
64341: CALL_OW 12
64345: PUSH
64346: LD_INT 0
64348: PPUSH
64349: LD_INT 3
64351: PPUSH
64352: CALL_OW 12
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64369: LD_ADDR_OWVAR 29
64373: PUSH
64374: LD_INT 12
64376: PUSH
64377: LD_INT 12
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// end ;
64384: LD_VAR 0 1
64388: RET
// export function PrepareApeman ( agressivity ) ; begin
64389: LD_INT 0
64391: PPUSH
// uc_side := 0 ;
64392: LD_ADDR_OWVAR 20
64396: PUSH
64397: LD_INT 0
64399: ST_TO_ADDR
// uc_nation := 0 ;
64400: LD_ADDR_OWVAR 21
64404: PUSH
64405: LD_INT 0
64407: ST_TO_ADDR
// hc_sex := sex_male ;
64408: LD_ADDR_OWVAR 27
64412: PUSH
64413: LD_INT 1
64415: ST_TO_ADDR
// hc_class := class_apeman ;
64416: LD_ADDR_OWVAR 28
64420: PUSH
64421: LD_INT 12
64423: ST_TO_ADDR
// hc_gallery :=  ;
64424: LD_ADDR_OWVAR 33
64428: PUSH
64429: LD_STRING 
64431: ST_TO_ADDR
// hc_name :=  ;
64432: LD_ADDR_OWVAR 26
64436: PUSH
64437: LD_STRING 
64439: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64440: LD_ADDR_OWVAR 29
64444: PUSH
64445: LD_INT 12
64447: PUSH
64448: LD_INT 12
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// if agressivity = 0 then
64455: LD_VAR 0 1
64459: PUSH
64460: LD_INT 0
64462: EQUAL
64463: IFFALSE 64475
// hc_agressivity := 0 else
64465: LD_ADDR_OWVAR 35
64469: PUSH
64470: LD_INT 0
64472: ST_TO_ADDR
64473: GO 64496
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64475: LD_ADDR_OWVAR 35
64479: PUSH
64480: LD_VAR 0 1
64484: NEG
64485: PPUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: CALL_OW 12
64495: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64496: LD_ADDR_OWVAR 31
64500: PUSH
64501: LD_INT 0
64503: PPUSH
64504: LD_INT 3
64506: PPUSH
64507: CALL_OW 12
64511: PUSH
64512: LD_INT 0
64514: PPUSH
64515: LD_INT 3
64517: PPUSH
64518: CALL_OW 12
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 2
64539: RET
// export function PrepareTiger ( agressivity ) ; begin
64540: LD_INT 0
64542: PPUSH
// uc_side := 0 ;
64543: LD_ADDR_OWVAR 20
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
// uc_nation := 0 ;
64551: LD_ADDR_OWVAR 21
64555: PUSH
64556: LD_INT 0
64558: ST_TO_ADDR
// InitHc ;
64559: CALL_OW 19
// hc_class := class_tiger ;
64563: LD_ADDR_OWVAR 28
64567: PUSH
64568: LD_INT 14
64570: ST_TO_ADDR
// hc_gallery :=  ;
64571: LD_ADDR_OWVAR 33
64575: PUSH
64576: LD_STRING 
64578: ST_TO_ADDR
// hc_name :=  ;
64579: LD_ADDR_OWVAR 26
64583: PUSH
64584: LD_STRING 
64586: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64587: LD_ADDR_OWVAR 35
64591: PUSH
64592: LD_VAR 0 1
64596: NEG
64597: PPUSH
64598: LD_VAR 0 1
64602: PPUSH
64603: CALL_OW 12
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 2
64612: RET
// export function PrepareEnchidna ( ) ; begin
64613: LD_INT 0
64615: PPUSH
// uc_side := 0 ;
64616: LD_ADDR_OWVAR 20
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// uc_nation := 0 ;
64624: LD_ADDR_OWVAR 21
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// InitHc ;
64632: CALL_OW 19
// hc_class := class_baggie ;
64636: LD_ADDR_OWVAR 28
64640: PUSH
64641: LD_INT 13
64643: ST_TO_ADDR
// hc_gallery :=  ;
64644: LD_ADDR_OWVAR 33
64648: PUSH
64649: LD_STRING 
64651: ST_TO_ADDR
// hc_name :=  ;
64652: LD_ADDR_OWVAR 26
64656: PUSH
64657: LD_STRING 
64659: ST_TO_ADDR
// end ;
64660: LD_VAR 0 1
64664: RET
// export function PrepareFrog ( ) ; begin
64665: LD_INT 0
64667: PPUSH
// uc_side := 0 ;
64668: LD_ADDR_OWVAR 20
64672: PUSH
64673: LD_INT 0
64675: ST_TO_ADDR
// uc_nation := 0 ;
64676: LD_ADDR_OWVAR 21
64680: PUSH
64681: LD_INT 0
64683: ST_TO_ADDR
// InitHc ;
64684: CALL_OW 19
// hc_class := class_frog ;
64688: LD_ADDR_OWVAR 28
64692: PUSH
64693: LD_INT 19
64695: ST_TO_ADDR
// hc_gallery :=  ;
64696: LD_ADDR_OWVAR 33
64700: PUSH
64701: LD_STRING 
64703: ST_TO_ADDR
// hc_name :=  ;
64704: LD_ADDR_OWVAR 26
64708: PUSH
64709: LD_STRING 
64711: ST_TO_ADDR
// end ;
64712: LD_VAR 0 1
64716: RET
// export function PrepareFish ( ) ; begin
64717: LD_INT 0
64719: PPUSH
// uc_side := 0 ;
64720: LD_ADDR_OWVAR 20
64724: PUSH
64725: LD_INT 0
64727: ST_TO_ADDR
// uc_nation := 0 ;
64728: LD_ADDR_OWVAR 21
64732: PUSH
64733: LD_INT 0
64735: ST_TO_ADDR
// InitHc ;
64736: CALL_OW 19
// hc_class := class_fish ;
64740: LD_ADDR_OWVAR 28
64744: PUSH
64745: LD_INT 20
64747: ST_TO_ADDR
// hc_gallery :=  ;
64748: LD_ADDR_OWVAR 33
64752: PUSH
64753: LD_STRING 
64755: ST_TO_ADDR
// hc_name :=  ;
64756: LD_ADDR_OWVAR 26
64760: PUSH
64761: LD_STRING 
64763: ST_TO_ADDR
// end ;
64764: LD_VAR 0 1
64768: RET
// export function PrepareBird ( ) ; begin
64769: LD_INT 0
64771: PPUSH
// uc_side := 0 ;
64772: LD_ADDR_OWVAR 20
64776: PUSH
64777: LD_INT 0
64779: ST_TO_ADDR
// uc_nation := 0 ;
64780: LD_ADDR_OWVAR 21
64784: PUSH
64785: LD_INT 0
64787: ST_TO_ADDR
// InitHc ;
64788: CALL_OW 19
// hc_class := class_phororhacos ;
64792: LD_ADDR_OWVAR 28
64796: PUSH
64797: LD_INT 18
64799: ST_TO_ADDR
// hc_gallery :=  ;
64800: LD_ADDR_OWVAR 33
64804: PUSH
64805: LD_STRING 
64807: ST_TO_ADDR
// hc_name :=  ;
64808: LD_ADDR_OWVAR 26
64812: PUSH
64813: LD_STRING 
64815: ST_TO_ADDR
// end ;
64816: LD_VAR 0 1
64820: RET
// export function PrepareHorse ( ) ; begin
64821: LD_INT 0
64823: PPUSH
// uc_side := 0 ;
64824: LD_ADDR_OWVAR 20
64828: PUSH
64829: LD_INT 0
64831: ST_TO_ADDR
// uc_nation := 0 ;
64832: LD_ADDR_OWVAR 21
64836: PUSH
64837: LD_INT 0
64839: ST_TO_ADDR
// InitHc ;
64840: CALL_OW 19
// hc_class := class_horse ;
64844: LD_ADDR_OWVAR 28
64848: PUSH
64849: LD_INT 21
64851: ST_TO_ADDR
// hc_gallery :=  ;
64852: LD_ADDR_OWVAR 33
64856: PUSH
64857: LD_STRING 
64859: ST_TO_ADDR
// hc_name :=  ;
64860: LD_ADDR_OWVAR 26
64864: PUSH
64865: LD_STRING 
64867: ST_TO_ADDR
// end ;
64868: LD_VAR 0 1
64872: RET
// export function PrepareMastodont ( ) ; begin
64873: LD_INT 0
64875: PPUSH
// uc_side := 0 ;
64876: LD_ADDR_OWVAR 20
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// uc_nation := 0 ;
64884: LD_ADDR_OWVAR 21
64888: PUSH
64889: LD_INT 0
64891: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64892: LD_ADDR_OWVAR 37
64896: PUSH
64897: LD_INT 31
64899: ST_TO_ADDR
// vc_control := control_rider ;
64900: LD_ADDR_OWVAR 38
64904: PUSH
64905: LD_INT 4
64907: ST_TO_ADDR
// end ;
64908: LD_VAR 0 1
64912: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64913: LD_INT 0
64915: PPUSH
64916: PPUSH
64917: PPUSH
// uc_side = 0 ;
64918: LD_ADDR_OWVAR 20
64922: PUSH
64923: LD_INT 0
64925: ST_TO_ADDR
// uc_nation = 0 ;
64926: LD_ADDR_OWVAR 21
64930: PUSH
64931: LD_INT 0
64933: ST_TO_ADDR
// InitHc_All ( ) ;
64934: CALL_OW 584
// InitVc ;
64938: CALL_OW 20
// if mastodonts then
64942: LD_VAR 0 6
64946: IFFALSE 65013
// for i = 1 to mastodonts do
64948: LD_ADDR_VAR 0 11
64952: PUSH
64953: DOUBLE
64954: LD_INT 1
64956: DEC
64957: ST_TO_ADDR
64958: LD_VAR 0 6
64962: PUSH
64963: FOR_TO
64964: IFFALSE 65011
// begin vc_chassis := 31 ;
64966: LD_ADDR_OWVAR 37
64970: PUSH
64971: LD_INT 31
64973: ST_TO_ADDR
// vc_control := control_rider ;
64974: LD_ADDR_OWVAR 38
64978: PUSH
64979: LD_INT 4
64981: ST_TO_ADDR
// animal := CreateVehicle ;
64982: LD_ADDR_VAR 0 12
64986: PUSH
64987: CALL_OW 45
64991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64992: LD_VAR 0 12
64996: PPUSH
64997: LD_VAR 0 8
65001: PPUSH
65002: LD_INT 0
65004: PPUSH
65005: CALL 67155 0 3
// end ;
65009: GO 64963
65011: POP
65012: POP
// if horses then
65013: LD_VAR 0 5
65017: IFFALSE 65084
// for i = 1 to horses do
65019: LD_ADDR_VAR 0 11
65023: PUSH
65024: DOUBLE
65025: LD_INT 1
65027: DEC
65028: ST_TO_ADDR
65029: LD_VAR 0 5
65033: PUSH
65034: FOR_TO
65035: IFFALSE 65082
// begin hc_class := 21 ;
65037: LD_ADDR_OWVAR 28
65041: PUSH
65042: LD_INT 21
65044: ST_TO_ADDR
// hc_gallery :=  ;
65045: LD_ADDR_OWVAR 33
65049: PUSH
65050: LD_STRING 
65052: ST_TO_ADDR
// animal := CreateHuman ;
65053: LD_ADDR_VAR 0 12
65057: PUSH
65058: CALL_OW 44
65062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65063: LD_VAR 0 12
65067: PPUSH
65068: LD_VAR 0 8
65072: PPUSH
65073: LD_INT 0
65075: PPUSH
65076: CALL 67155 0 3
// end ;
65080: GO 65034
65082: POP
65083: POP
// if birds then
65084: LD_VAR 0 1
65088: IFFALSE 65155
// for i = 1 to birds do
65090: LD_ADDR_VAR 0 11
65094: PUSH
65095: DOUBLE
65096: LD_INT 1
65098: DEC
65099: ST_TO_ADDR
65100: LD_VAR 0 1
65104: PUSH
65105: FOR_TO
65106: IFFALSE 65153
// begin hc_class := 18 ;
65108: LD_ADDR_OWVAR 28
65112: PUSH
65113: LD_INT 18
65115: ST_TO_ADDR
// hc_gallery =  ;
65116: LD_ADDR_OWVAR 33
65120: PUSH
65121: LD_STRING 
65123: ST_TO_ADDR
// animal := CreateHuman ;
65124: LD_ADDR_VAR 0 12
65128: PUSH
65129: CALL_OW 44
65133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65134: LD_VAR 0 12
65138: PPUSH
65139: LD_VAR 0 8
65143: PPUSH
65144: LD_INT 0
65146: PPUSH
65147: CALL 67155 0 3
// end ;
65151: GO 65105
65153: POP
65154: POP
// if tigers then
65155: LD_VAR 0 2
65159: IFFALSE 65243
// for i = 1 to tigers do
65161: LD_ADDR_VAR 0 11
65165: PUSH
65166: DOUBLE
65167: LD_INT 1
65169: DEC
65170: ST_TO_ADDR
65171: LD_VAR 0 2
65175: PUSH
65176: FOR_TO
65177: IFFALSE 65241
// begin hc_class = class_tiger ;
65179: LD_ADDR_OWVAR 28
65183: PUSH
65184: LD_INT 14
65186: ST_TO_ADDR
// hc_gallery =  ;
65187: LD_ADDR_OWVAR 33
65191: PUSH
65192: LD_STRING 
65194: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65195: LD_ADDR_OWVAR 35
65199: PUSH
65200: LD_INT 7
65202: NEG
65203: PPUSH
65204: LD_INT 7
65206: PPUSH
65207: CALL_OW 12
65211: ST_TO_ADDR
// animal := CreateHuman ;
65212: LD_ADDR_VAR 0 12
65216: PUSH
65217: CALL_OW 44
65221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65222: LD_VAR 0 12
65226: PPUSH
65227: LD_VAR 0 8
65231: PPUSH
65232: LD_INT 0
65234: PPUSH
65235: CALL 67155 0 3
// end ;
65239: GO 65176
65241: POP
65242: POP
// if apemans then
65243: LD_VAR 0 3
65247: IFFALSE 65370
// for i = 1 to apemans do
65249: LD_ADDR_VAR 0 11
65253: PUSH
65254: DOUBLE
65255: LD_INT 1
65257: DEC
65258: ST_TO_ADDR
65259: LD_VAR 0 3
65263: PUSH
65264: FOR_TO
65265: IFFALSE 65368
// begin hc_class = class_apeman ;
65267: LD_ADDR_OWVAR 28
65271: PUSH
65272: LD_INT 12
65274: ST_TO_ADDR
// hc_gallery =  ;
65275: LD_ADDR_OWVAR 33
65279: PUSH
65280: LD_STRING 
65282: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65283: LD_ADDR_OWVAR 35
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PPUSH
65292: LD_INT 2
65294: PPUSH
65295: CALL_OW 12
65299: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65300: LD_ADDR_OWVAR 31
65304: PUSH
65305: LD_INT 1
65307: PPUSH
65308: LD_INT 3
65310: PPUSH
65311: CALL_OW 12
65315: PUSH
65316: LD_INT 1
65318: PPUSH
65319: LD_INT 3
65321: PPUSH
65322: CALL_OW 12
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// animal := CreateHuman ;
65339: LD_ADDR_VAR 0 12
65343: PUSH
65344: CALL_OW 44
65348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65349: LD_VAR 0 12
65353: PPUSH
65354: LD_VAR 0 8
65358: PPUSH
65359: LD_INT 0
65361: PPUSH
65362: CALL 67155 0 3
// end ;
65366: GO 65264
65368: POP
65369: POP
// if enchidnas then
65370: LD_VAR 0 4
65374: IFFALSE 65441
// for i = 1 to enchidnas do
65376: LD_ADDR_VAR 0 11
65380: PUSH
65381: DOUBLE
65382: LD_INT 1
65384: DEC
65385: ST_TO_ADDR
65386: LD_VAR 0 4
65390: PUSH
65391: FOR_TO
65392: IFFALSE 65439
// begin hc_class = 13 ;
65394: LD_ADDR_OWVAR 28
65398: PUSH
65399: LD_INT 13
65401: ST_TO_ADDR
// hc_gallery =  ;
65402: LD_ADDR_OWVAR 33
65406: PUSH
65407: LD_STRING 
65409: ST_TO_ADDR
// animal := CreateHuman ;
65410: LD_ADDR_VAR 0 12
65414: PUSH
65415: CALL_OW 44
65419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65420: LD_VAR 0 12
65424: PPUSH
65425: LD_VAR 0 8
65429: PPUSH
65430: LD_INT 0
65432: PPUSH
65433: CALL 67155 0 3
// end ;
65437: GO 65391
65439: POP
65440: POP
// if fishes then
65441: LD_VAR 0 7
65445: IFFALSE 65512
// for i = 1 to fishes do
65447: LD_ADDR_VAR 0 11
65451: PUSH
65452: DOUBLE
65453: LD_INT 1
65455: DEC
65456: ST_TO_ADDR
65457: LD_VAR 0 7
65461: PUSH
65462: FOR_TO
65463: IFFALSE 65510
// begin hc_class = 20 ;
65465: LD_ADDR_OWVAR 28
65469: PUSH
65470: LD_INT 20
65472: ST_TO_ADDR
// hc_gallery =  ;
65473: LD_ADDR_OWVAR 33
65477: PUSH
65478: LD_STRING 
65480: ST_TO_ADDR
// animal := CreateHuman ;
65481: LD_ADDR_VAR 0 12
65485: PUSH
65486: CALL_OW 44
65490: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65491: LD_VAR 0 12
65495: PPUSH
65496: LD_VAR 0 9
65500: PPUSH
65501: LD_INT 0
65503: PPUSH
65504: CALL 67155 0 3
// end ;
65508: GO 65462
65510: POP
65511: POP
// end ;
65512: LD_VAR 0 10
65516: RET
// export function WantHeal ( sci , unit ) ; begin
65517: LD_INT 0
65519: PPUSH
// if GetTaskList ( sci ) > 0 then
65520: LD_VAR 0 1
65524: PPUSH
65525: CALL_OW 437
65529: PUSH
65530: LD_INT 0
65532: GREATER
65533: IFFALSE 65605
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65535: LD_VAR 0 1
65539: PPUSH
65540: CALL_OW 437
65544: PUSH
65545: LD_INT 1
65547: ARRAY
65548: PUSH
65549: LD_INT 1
65551: ARRAY
65552: PUSH
65553: LD_STRING l
65555: EQUAL
65556: IFFALSE 65583
65558: PUSH
65559: LD_VAR 0 1
65563: PPUSH
65564: CALL_OW 437
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: PUSH
65573: LD_INT 4
65575: ARRAY
65576: PUSH
65577: LD_VAR 0 2
65581: EQUAL
65582: AND
65583: IFFALSE 65595
// result := true else
65585: LD_ADDR_VAR 0 3
65589: PUSH
65590: LD_INT 1
65592: ST_TO_ADDR
65593: GO 65603
// result := false ;
65595: LD_ADDR_VAR 0 3
65599: PUSH
65600: LD_INT 0
65602: ST_TO_ADDR
// end else
65603: GO 65613
// result := false ;
65605: LD_ADDR_VAR 0 3
65609: PUSH
65610: LD_INT 0
65612: ST_TO_ADDR
// end ;
65613: LD_VAR 0 3
65617: RET
// export function HealTarget ( sci ) ; begin
65618: LD_INT 0
65620: PPUSH
// if not sci then
65621: LD_VAR 0 1
65625: NOT
65626: IFFALSE 65630
// exit ;
65628: GO 65695
// result := 0 ;
65630: LD_ADDR_VAR 0 2
65634: PUSH
65635: LD_INT 0
65637: ST_TO_ADDR
// if GetTaskList ( sci ) then
65638: LD_VAR 0 1
65642: PPUSH
65643: CALL_OW 437
65647: IFFALSE 65695
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65649: LD_VAR 0 1
65653: PPUSH
65654: CALL_OW 437
65658: PUSH
65659: LD_INT 1
65661: ARRAY
65662: PUSH
65663: LD_INT 1
65665: ARRAY
65666: PUSH
65667: LD_STRING l
65669: EQUAL
65670: IFFALSE 65695
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65672: LD_ADDR_VAR 0 2
65676: PUSH
65677: LD_VAR 0 1
65681: PPUSH
65682: CALL_OW 437
65686: PUSH
65687: LD_INT 1
65689: ARRAY
65690: PUSH
65691: LD_INT 4
65693: ARRAY
65694: ST_TO_ADDR
// end ;
65695: LD_VAR 0 2
65699: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65700: LD_INT 0
65702: PPUSH
65703: PPUSH
65704: PPUSH
65705: PPUSH
// if not base_units then
65706: LD_VAR 0 1
65710: NOT
65711: IFFALSE 65715
// exit ;
65713: GO 65802
// result := false ;
65715: LD_ADDR_VAR 0 2
65719: PUSH
65720: LD_INT 0
65722: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65723: LD_ADDR_VAR 0 5
65727: PUSH
65728: LD_VAR 0 1
65732: PPUSH
65733: LD_INT 21
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PPUSH
65743: CALL_OW 72
65747: ST_TO_ADDR
// if not tmp then
65748: LD_VAR 0 5
65752: NOT
65753: IFFALSE 65757
// exit ;
65755: GO 65802
// for i in tmp do
65757: LD_ADDR_VAR 0 3
65761: PUSH
65762: LD_VAR 0 5
65766: PUSH
65767: FOR_IN
65768: IFFALSE 65800
// begin result := EnemyInRange ( i , 22 ) ;
65770: LD_ADDR_VAR 0 2
65774: PUSH
65775: LD_VAR 0 3
65779: PPUSH
65780: LD_INT 22
65782: PPUSH
65783: CALL 63227 0 2
65787: ST_TO_ADDR
// if result then
65788: LD_VAR 0 2
65792: IFFALSE 65798
// exit ;
65794: POP
65795: POP
65796: GO 65802
// end ;
65798: GO 65767
65800: POP
65801: POP
// end ;
65802: LD_VAR 0 2
65806: RET
// export function FilterByTag ( units , tag ) ; begin
65807: LD_INT 0
65809: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65810: LD_ADDR_VAR 0 3
65814: PUSH
65815: LD_VAR 0 1
65819: PPUSH
65820: LD_INT 120
65822: PUSH
65823: LD_VAR 0 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PPUSH
65832: CALL_OW 72
65836: ST_TO_ADDR
// end ;
65837: LD_VAR 0 3
65841: RET
// export function IsDriver ( un ) ; begin
65842: LD_INT 0
65844: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65845: LD_ADDR_VAR 0 2
65849: PUSH
65850: LD_VAR 0 1
65854: PUSH
65855: LD_INT 55
65857: PUSH
65858: EMPTY
65859: LIST
65860: PPUSH
65861: CALL_OW 69
65865: IN
65866: ST_TO_ADDR
// end ;
65867: LD_VAR 0 2
65871: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65872: LD_INT 0
65874: PPUSH
65875: PPUSH
// list := [ ] ;
65876: LD_ADDR_VAR 0 5
65880: PUSH
65881: EMPTY
65882: ST_TO_ADDR
// case d of 0 :
65883: LD_VAR 0 3
65887: PUSH
65888: LD_INT 0
65890: DOUBLE
65891: EQUAL
65892: IFTRUE 65896
65894: GO 66029
65896: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65897: LD_ADDR_VAR 0 5
65901: PUSH
65902: LD_VAR 0 1
65906: PUSH
65907: LD_INT 4
65909: MINUS
65910: PUSH
65911: LD_VAR 0 2
65915: PUSH
65916: LD_INT 4
65918: MINUS
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: LD_VAR 0 1
65932: PUSH
65933: LD_INT 3
65935: MINUS
65936: PUSH
65937: LD_VAR 0 2
65941: PUSH
65942: LD_INT 1
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 4
65957: PLUS
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: PUSH
65972: LD_VAR 0 1
65976: PUSH
65977: LD_INT 3
65979: PLUS
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 3
65988: PLUS
65989: PUSH
65990: LD_INT 5
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_VAR 0 1
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_INT 4
66010: PLUS
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// end ; 1 :
66027: GO 66727
66029: LD_INT 1
66031: DOUBLE
66032: EQUAL
66033: IFTRUE 66037
66035: GO 66170
66037: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66038: LD_ADDR_VAR 0 5
66042: PUSH
66043: LD_VAR 0 1
66047: PUSH
66048: LD_VAR 0 2
66052: PUSH
66053: LD_INT 4
66055: MINUS
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: PUSH
66065: LD_VAR 0 1
66069: PUSH
66070: LD_INT 3
66072: MINUS
66073: PUSH
66074: LD_VAR 0 2
66078: PUSH
66079: LD_INT 3
66081: MINUS
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: LD_VAR 0 1
66095: PUSH
66096: LD_INT 4
66098: MINUS
66099: PUSH
66100: LD_VAR 0 2
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_VAR 0 2
66122: PUSH
66123: LD_INT 3
66125: PLUS
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_INT 4
66142: PLUS
66143: PUSH
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 4
66151: PLUS
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: ST_TO_ADDR
// end ; 2 :
66168: GO 66727
66170: LD_INT 2
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66178
66176: GO 66307
66178: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: LD_VAR 0 1
66188: PUSH
66189: LD_VAR 0 2
66193: PUSH
66194: LD_INT 3
66196: MINUS
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_INT 4
66213: PLUS
66214: PUSH
66215: LD_VAR 0 2
66219: PUSH
66220: LD_INT 4
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: PUSH
66228: LD_VAR 0 1
66232: PUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_INT 4
66240: PLUS
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: PUSH
66250: LD_VAR 0 1
66254: PUSH
66255: LD_INT 3
66257: MINUS
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: PUSH
66272: LD_VAR 0 1
66276: PUSH
66277: LD_INT 4
66279: MINUS
66280: PUSH
66281: LD_VAR 0 2
66285: PUSH
66286: LD_INT 4
66288: MINUS
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: ST_TO_ADDR
// end ; 3 :
66305: GO 66727
66307: LD_INT 3
66309: DOUBLE
66310: EQUAL
66311: IFTRUE 66315
66313: GO 66448
66315: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66316: LD_ADDR_VAR 0 5
66320: PUSH
66321: LD_VAR 0 1
66325: PUSH
66326: LD_INT 3
66328: PLUS
66329: PUSH
66330: LD_VAR 0 2
66334: PUSH
66335: LD_INT 4
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: PUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_INT 4
66350: PLUS
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 4
66359: PLUS
66360: PUSH
66361: LD_INT 5
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 4
66376: MINUS
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: LD_INT 4
66403: MINUS
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_VAR 0 1
66417: PUSH
66418: LD_INT 3
66420: MINUS
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 3
66429: MINUS
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: ST_TO_ADDR
// end ; 4 :
66446: GO 66727
66448: LD_INT 4
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66589
66456: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66457: LD_ADDR_VAR 0 5
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 4
66474: PLUS
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: PUSH
66484: LD_VAR 0 1
66488: PUSH
66489: LD_INT 3
66491: PLUS
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_INT 3
66500: PLUS
66501: PUSH
66502: LD_INT 5
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 4
66517: PLUS
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_INT 4
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_VAR 0 2
66541: PUSH
66542: LD_INT 3
66544: MINUS
66545: PUSH
66546: LD_INT 3
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_INT 4
66561: MINUS
66562: PUSH
66563: LD_VAR 0 2
66567: PUSH
66568: LD_INT 4
66570: MINUS
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// end ; 5 :
66587: GO 66727
66589: LD_INT 5
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66597
66595: GO 66726
66597: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66598: LD_ADDR_VAR 0 5
66602: PUSH
66603: LD_VAR 0 1
66607: PUSH
66608: LD_INT 4
66610: MINUS
66611: PUSH
66612: LD_VAR 0 2
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: LIST
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: LD_INT 4
66637: MINUS
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_VAR 0 1
66651: PUSH
66652: LD_INT 4
66654: PLUS
66655: PUSH
66656: LD_VAR 0 2
66660: PUSH
66661: LD_INT 4
66663: PLUS
66664: PUSH
66665: LD_INT 5
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 1
66677: PUSH
66678: LD_INT 3
66680: PLUS
66681: PUSH
66682: LD_VAR 0 2
66686: PUSH
66687: LD_INT 4
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_VAR 0 2
66704: PUSH
66705: LD_INT 3
66707: PLUS
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: ST_TO_ADDR
// end ; end ;
66724: GO 66727
66726: POP
// result := list ;
66727: LD_ADDR_VAR 0 4
66731: PUSH
66732: LD_VAR 0 5
66736: ST_TO_ADDR
// end ;
66737: LD_VAR 0 4
66741: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66742: LD_INT 0
66744: PPUSH
66745: PPUSH
66746: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66747: LD_VAR 0 1
66751: NOT
66752: IFTRUE 66780
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: IN
66778: NOT
66779: OR
66780: IFFALSE 66784
// exit ;
66782: GO 66867
// tmp := [ ] ;
66784: LD_ADDR_VAR 0 5
66788: PUSH
66789: EMPTY
66790: ST_TO_ADDR
// for i in units do
66791: LD_ADDR_VAR 0 4
66795: PUSH
66796: LD_VAR 0 1
66800: PUSH
66801: FOR_IN
66802: IFFALSE 66836
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66804: LD_ADDR_VAR 0 5
66808: PUSH
66809: LD_VAR 0 5
66813: PPUSH
66814: LD_VAR 0 4
66818: PPUSH
66819: LD_VAR 0 2
66823: PPUSH
66824: CALL_OW 259
66828: PPUSH
66829: CALL 68262 0 2
66833: ST_TO_ADDR
66834: GO 66801
66836: POP
66837: POP
// if not tmp then
66838: LD_VAR 0 5
66842: NOT
66843: IFFALSE 66847
// exit ;
66845: GO 66867
// result := SortListByListDesc ( units , tmp ) ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 1
66856: PPUSH
66857: LD_VAR 0 5
66861: PPUSH
66862: CALL_OW 77
66866: ST_TO_ADDR
// end ;
66867: LD_VAR 0 3
66871: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66872: LD_INT 0
66874: PPUSH
66875: PPUSH
66876: PPUSH
// result := false ;
66877: LD_ADDR_VAR 0 3
66881: PUSH
66882: LD_INT 0
66884: ST_TO_ADDR
// if not building then
66885: LD_VAR 0 2
66889: NOT
66890: IFFALSE 66894
// exit ;
66892: GO 67038
// x := GetX ( building ) ;
66894: LD_ADDR_VAR 0 4
66898: PUSH
66899: LD_VAR 0 2
66903: PPUSH
66904: CALL_OW 250
66908: ST_TO_ADDR
// y := GetY ( building ) ;
66909: LD_ADDR_VAR 0 5
66913: PUSH
66914: LD_VAR 0 2
66918: PPUSH
66919: CALL_OW 251
66923: ST_TO_ADDR
// if not x or not y then
66924: LD_VAR 0 4
66928: NOT
66929: IFTRUE 66938
66931: PUSH
66932: LD_VAR 0 5
66936: NOT
66937: OR
66938: IFFALSE 66942
// exit ;
66940: GO 67038
// if GetTaskList ( unit ) then
66942: LD_VAR 0 1
66946: PPUSH
66947: CALL_OW 437
66951: IFFALSE 67038
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66953: LD_STRING e
66955: PUSH
66956: LD_VAR 0 1
66960: PPUSH
66961: CALL_OW 437
66965: PUSH
66966: LD_INT 1
66968: ARRAY
66969: PUSH
66970: LD_INT 1
66972: ARRAY
66973: EQUAL
66974: IFFALSE 67001
66976: PUSH
66977: LD_VAR 0 4
66981: PUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 437
66991: PUSH
66992: LD_INT 1
66994: ARRAY
66995: PUSH
66996: LD_INT 2
66998: ARRAY
66999: EQUAL
67000: AND
67001: IFFALSE 67028
67003: PUSH
67004: LD_VAR 0 5
67008: PUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: CALL_OW 437
67018: PUSH
67019: LD_INT 1
67021: ARRAY
67022: PUSH
67023: LD_INT 3
67025: ARRAY
67026: EQUAL
67027: AND
67028: IFFALSE 67038
// result := true end ;
67030: LD_ADDR_VAR 0 3
67034: PUSH
67035: LD_INT 1
67037: ST_TO_ADDR
// end ;
67038: LD_VAR 0 3
67042: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67043: LD_INT 0
67045: PPUSH
// result := false ;
67046: LD_ADDR_VAR 0 4
67050: PUSH
67051: LD_INT 0
67053: ST_TO_ADDR
// if GetTaskList ( unit ) then
67054: LD_VAR 0 1
67058: PPUSH
67059: CALL_OW 437
67063: IFFALSE 67150
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67065: LD_STRING M
67067: PUSH
67068: LD_VAR 0 1
67072: PPUSH
67073: CALL_OW 437
67077: PUSH
67078: LD_INT 1
67080: ARRAY
67081: PUSH
67082: LD_INT 1
67084: ARRAY
67085: EQUAL
67086: IFFALSE 67113
67088: PUSH
67089: LD_VAR 0 2
67093: PUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 437
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PUSH
67108: LD_INT 2
67110: ARRAY
67111: EQUAL
67112: AND
67113: IFFALSE 67140
67115: PUSH
67116: LD_VAR 0 3
67120: PUSH
67121: LD_VAR 0 1
67125: PPUSH
67126: CALL_OW 437
67130: PUSH
67131: LD_INT 1
67133: ARRAY
67134: PUSH
67135: LD_INT 3
67137: ARRAY
67138: EQUAL
67139: AND
67140: IFFALSE 67150
// result := true ;
67142: LD_ADDR_VAR 0 4
67146: PUSH
67147: LD_INT 1
67149: ST_TO_ADDR
// end ; end ;
67150: LD_VAR 0 4
67154: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67155: LD_INT 0
67157: PPUSH
67158: PPUSH
67159: PPUSH
67160: PPUSH
// if not unit or not area then
67161: LD_VAR 0 1
67165: NOT
67166: IFTRUE 67175
67168: PUSH
67169: LD_VAR 0 2
67173: NOT
67174: OR
67175: IFFALSE 67179
// exit ;
67177: GO 67355
// tmp := AreaToList ( area , i ) ;
67179: LD_ADDR_VAR 0 6
67183: PUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: LD_VAR 0 5
67193: PPUSH
67194: CALL_OW 517
67198: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67199: LD_ADDR_VAR 0 5
67203: PUSH
67204: DOUBLE
67205: LD_INT 1
67207: DEC
67208: ST_TO_ADDR
67209: LD_VAR 0 6
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: PUSH
67218: FOR_TO
67219: IFFALSE 67353
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67221: LD_ADDR_VAR 0 7
67225: PUSH
67226: LD_VAR 0 6
67230: PUSH
67231: LD_INT 1
67233: ARRAY
67234: PUSH
67235: LD_VAR 0 5
67239: ARRAY
67240: PUSH
67241: LD_VAR 0 6
67245: PUSH
67246: LD_INT 2
67248: ARRAY
67249: PUSH
67250: LD_VAR 0 5
67254: ARRAY
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67260: LD_INT 92
67262: PUSH
67263: LD_VAR 0 7
67267: PUSH
67268: LD_INT 1
67270: ARRAY
67271: PUSH
67272: LD_VAR 0 7
67276: PUSH
67277: LD_INT 2
67279: ARRAY
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: PPUSH
67290: CALL_OW 69
67294: PUSH
67295: LD_INT 0
67297: EQUAL
67298: IFFALSE 67351
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67300: LD_VAR 0 1
67304: PPUSH
67305: LD_VAR 0 7
67309: PUSH
67310: LD_INT 1
67312: ARRAY
67313: PPUSH
67314: LD_VAR 0 7
67318: PUSH
67319: LD_INT 2
67321: ARRAY
67322: PPUSH
67323: LD_VAR 0 3
67327: PPUSH
67328: CALL_OW 48
// result := IsPlaced ( unit ) ;
67332: LD_ADDR_VAR 0 4
67336: PUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL_OW 305
67346: ST_TO_ADDR
// exit ;
67347: POP
67348: POP
67349: GO 67355
// end ; end ;
67351: GO 67218
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 4
67359: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
67364: PPUSH
// if not side or side > 8 then
67365: LD_VAR 0 1
67369: NOT
67370: IFTRUE 67382
67372: PUSH
67373: LD_VAR 0 1
67377: PUSH
67378: LD_INT 8
67380: GREATER
67381: OR
67382: IFFALSE 67386
// exit ;
67384: GO 67573
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67386: LD_ADDR_VAR 0 4
67390: PUSH
67391: LD_INT 22
67393: PUSH
67394: LD_VAR 0 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 21
67405: PUSH
67406: LD_INT 3
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PPUSH
67417: CALL_OW 69
67421: ST_TO_ADDR
// if not tmp then
67422: LD_VAR 0 4
67426: NOT
67427: IFFALSE 67431
// exit ;
67429: GO 67573
// enable_addtolog := true ;
67431: LD_ADDR_OWVAR 81
67435: PUSH
67436: LD_INT 1
67438: ST_TO_ADDR
// AddToLog ( [ ) ;
67439: LD_STRING [
67441: PPUSH
67442: CALL_OW 561
// for i in tmp do
67446: LD_ADDR_VAR 0 3
67450: PUSH
67451: LD_VAR 0 4
67455: PUSH
67456: FOR_IN
67457: IFFALSE 67564
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67459: LD_STRING [
67461: PUSH
67462: LD_VAR 0 3
67466: PPUSH
67467: CALL_OW 266
67471: STR
67472: PUSH
67473: LD_STRING , 
67475: STR
67476: PUSH
67477: LD_VAR 0 3
67481: PPUSH
67482: CALL_OW 250
67486: STR
67487: PUSH
67488: LD_STRING , 
67490: STR
67491: PUSH
67492: LD_VAR 0 3
67496: PPUSH
67497: CALL_OW 251
67501: STR
67502: PUSH
67503: LD_STRING , 
67505: STR
67506: PUSH
67507: LD_VAR 0 3
67511: PPUSH
67512: CALL_OW 254
67516: STR
67517: PUSH
67518: LD_STRING , 
67520: STR
67521: PUSH
67522: LD_VAR 0 3
67526: PPUSH
67527: LD_INT 1
67529: PPUSH
67530: CALL_OW 268
67534: STR
67535: PUSH
67536: LD_STRING , 
67538: STR
67539: PUSH
67540: LD_VAR 0 3
67544: PPUSH
67545: LD_INT 2
67547: PPUSH
67548: CALL_OW 268
67552: STR
67553: PUSH
67554: LD_STRING ],
67556: STR
67557: PPUSH
67558: CALL_OW 561
// end ;
67562: GO 67456
67564: POP
67565: POP
// AddToLog ( ]; ) ;
67566: LD_STRING ];
67568: PPUSH
67569: CALL_OW 561
// end ;
67573: LD_VAR 0 2
67577: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67578: LD_INT 0
67580: PPUSH
67581: PPUSH
67582: PPUSH
67583: PPUSH
67584: PPUSH
// if not area or not rate or not max then
67585: LD_VAR 0 1
67589: NOT
67590: IFTRUE 67599
67592: PUSH
67593: LD_VAR 0 2
67597: NOT
67598: OR
67599: IFTRUE 67608
67601: PUSH
67602: LD_VAR 0 4
67606: NOT
67607: OR
67608: IFFALSE 67612
// exit ;
67610: GO 67801
// while 1 do
67612: LD_INT 1
67614: IFFALSE 67801
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67616: LD_ADDR_VAR 0 9
67620: PUSH
67621: LD_VAR 0 1
67625: PPUSH
67626: LD_INT 1
67628: PPUSH
67629: CALL_OW 287
67633: PUSH
67634: LD_INT 10
67636: MUL
67637: ST_TO_ADDR
// r := rate / 10 ;
67638: LD_ADDR_VAR 0 7
67642: PUSH
67643: LD_VAR 0 2
67647: PUSH
67648: LD_INT 10
67650: DIVREAL
67651: ST_TO_ADDR
// time := 1 1$00 ;
67652: LD_ADDR_VAR 0 8
67656: PUSH
67657: LD_INT 2100
67659: ST_TO_ADDR
// if amount < min then
67660: LD_VAR 0 9
67664: PUSH
67665: LD_VAR 0 3
67669: LESS
67670: IFFALSE 67688
// r := r * 2 else
67672: LD_ADDR_VAR 0 7
67676: PUSH
67677: LD_VAR 0 7
67681: PUSH
67682: LD_INT 2
67684: MUL
67685: ST_TO_ADDR
67686: GO 67714
// if amount > max then
67688: LD_VAR 0 9
67692: PUSH
67693: LD_VAR 0 4
67697: GREATER
67698: IFFALSE 67714
// r := r / 2 ;
67700: LD_ADDR_VAR 0 7
67704: PUSH
67705: LD_VAR 0 7
67709: PUSH
67710: LD_INT 2
67712: DIVREAL
67713: ST_TO_ADDR
// time := time / r ;
67714: LD_ADDR_VAR 0 8
67718: PUSH
67719: LD_VAR 0 8
67723: PUSH
67724: LD_VAR 0 7
67728: DIVREAL
67729: ST_TO_ADDR
// if time < 0 then
67730: LD_VAR 0 8
67734: PUSH
67735: LD_INT 0
67737: LESS
67738: IFFALSE 67755
// time := time * - 1 ;
67740: LD_ADDR_VAR 0 8
67744: PUSH
67745: LD_VAR 0 8
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: MUL
67754: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67755: LD_VAR 0 8
67759: PUSH
67760: LD_INT 35
67762: PPUSH
67763: LD_INT 875
67765: PPUSH
67766: CALL_OW 12
67770: PLUS
67771: PPUSH
67772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67776: LD_INT 1
67778: PPUSH
67779: LD_INT 5
67781: PPUSH
67782: CALL_OW 12
67786: PPUSH
67787: LD_VAR 0 1
67791: PPUSH
67792: LD_INT 1
67794: PPUSH
67795: CALL_OW 55
// end ;
67799: GO 67612
// end ;
67801: LD_VAR 0 5
67805: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67806: LD_INT 0
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
// if not turrets or not factories then
67816: LD_VAR 0 1
67820: NOT
67821: IFTRUE 67830
67823: PUSH
67824: LD_VAR 0 2
67828: NOT
67829: OR
67830: IFFALSE 67834
// exit ;
67832: GO 68141
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67834: LD_ADDR_VAR 0 10
67838: PUSH
67839: LD_INT 5
67841: PUSH
67842: LD_INT 6
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: LD_INT 4
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: LD_INT 5
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 24
67876: PUSH
67877: LD_INT 25
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 23
67886: PUSH
67887: LD_INT 27
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 42
67900: PUSH
67901: LD_INT 43
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 44
67910: PUSH
67911: LD_INT 46
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 45
67920: PUSH
67921: LD_INT 47
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: LIST
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: ST_TO_ADDR
// result := [ ] ;
67938: LD_ADDR_VAR 0 3
67942: PUSH
67943: EMPTY
67944: ST_TO_ADDR
// for i in turrets do
67945: LD_ADDR_VAR 0 4
67949: PUSH
67950: LD_VAR 0 1
67954: PUSH
67955: FOR_IN
67956: IFFALSE 68139
// begin nat := GetNation ( i ) ;
67958: LD_ADDR_VAR 0 7
67962: PUSH
67963: LD_VAR 0 4
67967: PPUSH
67968: CALL_OW 248
67972: ST_TO_ADDR
// weapon := 0 ;
67973: LD_ADDR_VAR 0 8
67977: PUSH
67978: LD_INT 0
67980: ST_TO_ADDR
// if not nat then
67981: LD_VAR 0 7
67985: NOT
67986: IFFALSE 67990
// continue ;
67988: GO 67955
// for j in list [ nat ] do
67990: LD_ADDR_VAR 0 5
67994: PUSH
67995: LD_VAR 0 10
67999: PUSH
68000: LD_VAR 0 7
68004: ARRAY
68005: PUSH
68006: FOR_IN
68007: IFFALSE 68048
// if GetBWeapon ( i ) = j [ 1 ] then
68009: LD_VAR 0 4
68013: PPUSH
68014: CALL_OW 269
68018: PUSH
68019: LD_VAR 0 5
68023: PUSH
68024: LD_INT 1
68026: ARRAY
68027: EQUAL
68028: IFFALSE 68046
// begin weapon := j [ 2 ] ;
68030: LD_ADDR_VAR 0 8
68034: PUSH
68035: LD_VAR 0 5
68039: PUSH
68040: LD_INT 2
68042: ARRAY
68043: ST_TO_ADDR
// break ;
68044: GO 68048
// end ;
68046: GO 68006
68048: POP
68049: POP
// if not weapon then
68050: LD_VAR 0 8
68054: NOT
68055: IFFALSE 68059
// continue ;
68057: GO 67955
// for k in factories do
68059: LD_ADDR_VAR 0 6
68063: PUSH
68064: LD_VAR 0 2
68068: PUSH
68069: FOR_IN
68070: IFFALSE 68135
// begin weapons := AvailableWeaponList ( k ) ;
68072: LD_ADDR_VAR 0 9
68076: PUSH
68077: LD_VAR 0 6
68081: PPUSH
68082: CALL_OW 478
68086: ST_TO_ADDR
// if not weapons then
68087: LD_VAR 0 9
68091: NOT
68092: IFFALSE 68096
// continue ;
68094: GO 68069
// if weapon in weapons then
68096: LD_VAR 0 8
68100: PUSH
68101: LD_VAR 0 9
68105: IN
68106: IFFALSE 68133
// begin result := [ i , weapon ] ;
68108: LD_ADDR_VAR 0 3
68112: PUSH
68113: LD_VAR 0 4
68117: PUSH
68118: LD_VAR 0 8
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: ST_TO_ADDR
// exit ;
68127: POP
68128: POP
68129: POP
68130: POP
68131: GO 68141
// end ; end ;
68133: GO 68069
68135: POP
68136: POP
// end ;
68137: GO 67955
68139: POP
68140: POP
// end ;
68141: LD_VAR 0 3
68145: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68146: LD_INT 0
68148: PPUSH
// if not side or side > 8 then
68149: LD_VAR 0 3
68153: NOT
68154: IFTRUE 68166
68156: PUSH
68157: LD_VAR 0 3
68161: PUSH
68162: LD_INT 8
68164: GREATER
68165: OR
68166: IFFALSE 68170
// exit ;
68168: GO 68229
// if not range then
68170: LD_VAR 0 4
68174: NOT
68175: IFFALSE 68186
// range := - 12 ;
68177: LD_ADDR_VAR 0 4
68181: PUSH
68182: LD_INT 12
68184: NEG
68185: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68186: LD_VAR 0 1
68190: PPUSH
68191: LD_VAR 0 2
68195: PPUSH
68196: LD_VAR 0 3
68200: PPUSH
68201: LD_VAR 0 4
68205: PPUSH
68206: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_VAR 0 2
68219: PPUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: CALL_OW 331
// end ;
68229: LD_VAR 0 5
68233: RET
// export function Video ( mode ) ; begin
68234: LD_INT 0
68236: PPUSH
// ingame_video = mode ;
68237: LD_ADDR_OWVAR 52
68241: PUSH
68242: LD_VAR 0 1
68246: ST_TO_ADDR
// interface_hidden = mode ;
68247: LD_ADDR_OWVAR 54
68251: PUSH
68252: LD_VAR 0 1
68256: ST_TO_ADDR
// end ;
68257: LD_VAR 0 2
68261: RET
// export function Join ( array , element ) ; begin
68262: LD_INT 0
68264: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68265: LD_ADDR_VAR 0 3
68269: PUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: PPUSH
68284: LD_VAR 0 2
68288: PPUSH
68289: CALL_OW 1
68293: ST_TO_ADDR
// end ;
68294: LD_VAR 0 3
68298: RET
// export function JoinUnion ( array , element ) ; begin
68299: LD_INT 0
68301: PPUSH
// result := array union element ;
68302: LD_ADDR_VAR 0 3
68306: PUSH
68307: LD_VAR 0 1
68311: PUSH
68312: LD_VAR 0 2
68316: UNION
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 3
68322: RET
// export function GetBehemoths ( side ) ; begin
68323: LD_INT 0
68325: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: LD_INT 22
68333: PUSH
68334: LD_VAR 0 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 31
68345: PUSH
68346: LD_INT 25
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PPUSH
68357: CALL_OW 69
68361: ST_TO_ADDR
// end ;
68362: LD_VAR 0 2
68366: RET
// export function Shuffle ( array ) ; var i , index ; begin
68367: LD_INT 0
68369: PPUSH
68370: PPUSH
68371: PPUSH
// result := [ ] ;
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: EMPTY
68378: ST_TO_ADDR
// if not array then
68379: LD_VAR 0 1
68383: NOT
68384: IFFALSE 68388
// exit ;
68386: GO 68487
// Randomize ;
68388: CALL_OW 10
// for i = array downto 1 do
68392: LD_ADDR_VAR 0 3
68396: PUSH
68397: DOUBLE
68398: LD_VAR 0 1
68402: INC
68403: ST_TO_ADDR
68404: LD_INT 1
68406: PUSH
68407: FOR_DOWNTO
68408: IFFALSE 68485
// begin index := rand ( 1 , array ) ;
68410: LD_ADDR_VAR 0 4
68414: PUSH
68415: LD_INT 1
68417: PPUSH
68418: LD_VAR 0 1
68422: PPUSH
68423: CALL_OW 12
68427: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68428: LD_ADDR_VAR 0 2
68432: PUSH
68433: LD_VAR 0 2
68437: PPUSH
68438: LD_VAR 0 2
68442: PUSH
68443: LD_INT 1
68445: PLUS
68446: PPUSH
68447: LD_VAR 0 1
68451: PUSH
68452: LD_VAR 0 4
68456: ARRAY
68457: PPUSH
68458: CALL_OW 2
68462: ST_TO_ADDR
// array := Delete ( array , index ) ;
68463: LD_ADDR_VAR 0 1
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 4
68477: PPUSH
68478: CALL_OW 3
68482: ST_TO_ADDR
// end ;
68483: GO 68407
68485: POP
68486: POP
// end ;
68487: LD_VAR 0 2
68491: RET
// export function GetBaseMaterials ( base ) ; begin
68492: LD_INT 0
68494: PPUSH
// result := [ 0 , 0 , 0 ] ;
68495: LD_ADDR_VAR 0 2
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: LIST
68513: ST_TO_ADDR
// if not base then
68514: LD_VAR 0 1
68518: NOT
68519: IFFALSE 68523
// exit ;
68521: GO 68572
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68523: LD_ADDR_VAR 0 2
68527: PUSH
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_INT 1
68535: PPUSH
68536: CALL_OW 275
68540: PUSH
68541: LD_VAR 0 1
68545: PPUSH
68546: LD_INT 2
68548: PPUSH
68549: CALL_OW 275
68553: PUSH
68554: LD_VAR 0 1
68558: PPUSH
68559: LD_INT 3
68561: PPUSH
68562: CALL_OW 275
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: ST_TO_ADDR
// end ;
68572: LD_VAR 0 2
68576: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68577: LD_INT 0
68579: PPUSH
68580: PPUSH
// result := array ;
68581: LD_ADDR_VAR 0 3
68585: PUSH
68586: LD_VAR 0 1
68590: ST_TO_ADDR
// if size >= result then
68591: LD_VAR 0 2
68595: PUSH
68596: LD_VAR 0 3
68600: GREATEREQUAL
68601: IFFALSE 68605
// exit ;
68603: GO 68655
// if size then
68605: LD_VAR 0 2
68609: IFFALSE 68655
// for i := array downto size do
68611: LD_ADDR_VAR 0 4
68615: PUSH
68616: DOUBLE
68617: LD_VAR 0 1
68621: INC
68622: ST_TO_ADDR
68623: LD_VAR 0 2
68627: PUSH
68628: FOR_DOWNTO
68629: IFFALSE 68653
// result := Delete ( result , result ) ;
68631: LD_ADDR_VAR 0 3
68635: PUSH
68636: LD_VAR 0 3
68640: PPUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: CALL_OW 3
68650: ST_TO_ADDR
68651: GO 68628
68653: POP
68654: POP
// end ;
68655: LD_VAR 0 3
68659: RET
// export function ComExit ( unit ) ; var tmp ; begin
68660: LD_INT 0
68662: PPUSH
68663: PPUSH
// if not IsInUnit ( unit ) then
68664: LD_VAR 0 1
68668: PPUSH
68669: CALL_OW 310
68673: NOT
68674: IFFALSE 68678
// exit ;
68676: GO 68738
// tmp := IsInUnit ( unit ) ;
68678: LD_ADDR_VAR 0 3
68682: PUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 310
68692: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68693: LD_VAR 0 3
68697: PPUSH
68698: CALL_OW 247
68702: PUSH
68703: LD_INT 2
68705: EQUAL
68706: IFFALSE 68719
// ComExitVehicle ( unit ) else
68708: LD_VAR 0 1
68712: PPUSH
68713: CALL_OW 121
68717: GO 68728
// ComExitBuilding ( unit ) ;
68719: LD_VAR 0 1
68723: PPUSH
68724: CALL_OW 122
// result := tmp ;
68728: LD_ADDR_VAR 0 2
68732: PUSH
68733: LD_VAR 0 3
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function ComExitAll ( units ) ; var i ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
// if not units then
68747: LD_VAR 0 1
68751: NOT
68752: IFFALSE 68756
// exit ;
68754: GO 68782
// for i in units do
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: LD_VAR 0 1
68765: PUSH
68766: FOR_IN
68767: IFFALSE 68780
// ComExit ( i ) ;
68769: LD_VAR 0 3
68773: PPUSH
68774: CALL 68660 0 1
68778: GO 68766
68780: POP
68781: POP
// end ;
68782: LD_VAR 0 2
68786: RET
// export function ResetHc ; begin
68787: LD_INT 0
68789: PPUSH
// InitHc ;
68790: CALL_OW 19
// hc_importance := 0 ;
68794: LD_ADDR_OWVAR 32
68798: PUSH
68799: LD_INT 0
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 1
68806: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
68811: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68812: LD_ADDR_VAR 0 6
68816: PUSH
68817: LD_VAR 0 1
68821: PUSH
68822: LD_VAR 0 3
68826: PLUS
68827: PUSH
68828: LD_INT 2
68830: DIV
68831: ST_TO_ADDR
// if _x < 0 then
68832: LD_VAR 0 6
68836: PUSH
68837: LD_INT 0
68839: LESS
68840: IFFALSE 68857
// _x := _x * - 1 ;
68842: LD_ADDR_VAR 0 6
68846: PUSH
68847: LD_VAR 0 6
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: MUL
68856: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68857: LD_ADDR_VAR 0 7
68861: PUSH
68862: LD_VAR 0 2
68866: PUSH
68867: LD_VAR 0 4
68871: PLUS
68872: PUSH
68873: LD_INT 2
68875: DIV
68876: ST_TO_ADDR
// if _y < 0 then
68877: LD_VAR 0 7
68881: PUSH
68882: LD_INT 0
68884: LESS
68885: IFFALSE 68902
// _y := _y * - 1 ;
68887: LD_ADDR_VAR 0 7
68891: PUSH
68892: LD_VAR 0 7
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: MUL
68901: ST_TO_ADDR
// result := [ _x , _y ] ;
68902: LD_ADDR_VAR 0 5
68906: PUSH
68907: LD_VAR 0 6
68911: PUSH
68912: LD_VAR 0 7
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: ST_TO_ADDR
// end ;
68921: LD_VAR 0 5
68925: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68926: LD_INT 0
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
// task := GetTaskList ( unit ) ;
68932: LD_ADDR_VAR 0 7
68936: PUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 437
68946: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68947: LD_VAR 0 7
68951: NOT
68952: IFFALSE 68971
68954: PUSH
68955: LD_VAR 0 1
68959: PPUSH
68960: LD_VAR 0 2
68964: PPUSH
68965: CALL_OW 308
68969: NOT
68970: AND
68971: IFFALSE 68975
// exit ;
68973: GO 69093
// if IsInArea ( unit , area ) then
68975: LD_VAR 0 1
68979: PPUSH
68980: LD_VAR 0 2
68984: PPUSH
68985: CALL_OW 308
68989: IFFALSE 69007
// begin ComMoveToArea ( unit , goAway ) ;
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_VAR 0 3
69000: PPUSH
69001: CALL_OW 113
// exit ;
69005: GO 69093
// end ; if task [ 1 ] [ 1 ] <> M then
69007: LD_VAR 0 7
69011: PUSH
69012: LD_INT 1
69014: ARRAY
69015: PUSH
69016: LD_INT 1
69018: ARRAY
69019: PUSH
69020: LD_STRING M
69022: NONEQUAL
69023: IFFALSE 69027
// exit ;
69025: GO 69093
// x := task [ 1 ] [ 2 ] ;
69027: LD_ADDR_VAR 0 5
69031: PUSH
69032: LD_VAR 0 7
69036: PUSH
69037: LD_INT 1
69039: ARRAY
69040: PUSH
69041: LD_INT 2
69043: ARRAY
69044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69045: LD_ADDR_VAR 0 6
69049: PUSH
69050: LD_VAR 0 7
69054: PUSH
69055: LD_INT 1
69057: ARRAY
69058: PUSH
69059: LD_INT 3
69061: ARRAY
69062: ST_TO_ADDR
// if InArea ( x , y , area ) then
69063: LD_VAR 0 5
69067: PPUSH
69068: LD_VAR 0 6
69072: PPUSH
69073: LD_VAR 0 2
69077: PPUSH
69078: CALL_OW 309
69082: IFFALSE 69093
// ComStop ( unit ) ;
69084: LD_VAR 0 1
69088: PPUSH
69089: CALL_OW 141
// end ;
69093: LD_VAR 0 4
69097: RET
// export function Abs ( value ) ; begin
69098: LD_INT 0
69100: PPUSH
// result := value ;
69101: LD_ADDR_VAR 0 2
69105: PUSH
69106: LD_VAR 0 1
69110: ST_TO_ADDR
// if value < 0 then
69111: LD_VAR 0 1
69115: PUSH
69116: LD_INT 0
69118: LESS
69119: IFFALSE 69136
// result := value * - 1 ;
69121: LD_ADDR_VAR 0 2
69125: PUSH
69126: LD_VAR 0 1
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: MUL
69135: ST_TO_ADDR
// end ;
69136: LD_VAR 0 2
69140: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69141: LD_INT 0
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
69150: PPUSH
// if not unit or not building then
69151: LD_VAR 0 1
69155: NOT
69156: IFTRUE 69165
69158: PUSH
69159: LD_VAR 0 2
69163: NOT
69164: OR
69165: IFFALSE 69169
// exit ;
69167: GO 69397
// x := GetX ( building ) ;
69169: LD_ADDR_VAR 0 4
69173: PUSH
69174: LD_VAR 0 2
69178: PPUSH
69179: CALL_OW 250
69183: ST_TO_ADDR
// y := GetY ( building ) ;
69184: LD_ADDR_VAR 0 6
69188: PUSH
69189: LD_VAR 0 2
69193: PPUSH
69194: CALL_OW 251
69198: ST_TO_ADDR
// d := GetDir ( building ) ;
69199: LD_ADDR_VAR 0 8
69203: PUSH
69204: LD_VAR 0 2
69208: PPUSH
69209: CALL_OW 254
69213: ST_TO_ADDR
// r := 4 ;
69214: LD_ADDR_VAR 0 9
69218: PUSH
69219: LD_INT 4
69221: ST_TO_ADDR
// for i := 1 to 5 do
69222: LD_ADDR_VAR 0 10
69226: PUSH
69227: DOUBLE
69228: LD_INT 1
69230: DEC
69231: ST_TO_ADDR
69232: LD_INT 5
69234: PUSH
69235: FOR_TO
69236: IFFALSE 69395
// begin _x := ShiftX ( x , d , r + i ) ;
69238: LD_ADDR_VAR 0 5
69242: PUSH
69243: LD_VAR 0 4
69247: PPUSH
69248: LD_VAR 0 8
69252: PPUSH
69253: LD_VAR 0 9
69257: PUSH
69258: LD_VAR 0 10
69262: PLUS
69263: PPUSH
69264: CALL_OW 272
69268: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69269: LD_ADDR_VAR 0 7
69273: PUSH
69274: LD_VAR 0 6
69278: PPUSH
69279: LD_VAR 0 8
69283: PPUSH
69284: LD_VAR 0 9
69288: PUSH
69289: LD_VAR 0 10
69293: PLUS
69294: PPUSH
69295: CALL_OW 273
69299: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69300: LD_VAR 0 5
69304: PPUSH
69305: LD_VAR 0 7
69309: PPUSH
69310: CALL_OW 488
69314: IFFALSE 69349
69316: PUSH
69317: LD_VAR 0 5
69321: PPUSH
69322: LD_VAR 0 7
69326: PPUSH
69327: CALL_OW 428
69331: PPUSH
69332: CALL_OW 247
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: LD_INT 2
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: IN
69347: NOT
69348: AND
69349: IFFALSE 69393
// begin ComMoveXY ( unit , _x , _y ) ;
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_VAR 0 5
69360: PPUSH
69361: LD_VAR 0 7
69365: PPUSH
69366: CALL_OW 111
// result := [ _x , _y ] ;
69370: LD_ADDR_VAR 0 3
69374: PUSH
69375: LD_VAR 0 5
69379: PUSH
69380: LD_VAR 0 7
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: ST_TO_ADDR
// exit ;
69389: POP
69390: POP
69391: GO 69397
// end ; end ;
69393: GO 69235
69395: POP
69396: POP
// end ;
69397: LD_VAR 0 3
69401: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69402: LD_INT 0
69404: PPUSH
69405: PPUSH
69406: PPUSH
// result := 0 ;
69407: LD_ADDR_VAR 0 3
69411: PUSH
69412: LD_INT 0
69414: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69415: LD_VAR 0 1
69419: PUSH
69420: LD_INT 0
69422: LESS
69423: IFTRUE 69435
69425: PUSH
69426: LD_VAR 0 1
69430: PUSH
69431: LD_INT 8
69433: GREATER
69434: OR
69435: IFTRUE 69447
69437: PUSH
69438: LD_VAR 0 2
69442: PUSH
69443: LD_INT 0
69445: LESS
69446: OR
69447: IFTRUE 69459
69449: PUSH
69450: LD_VAR 0 2
69454: PUSH
69455: LD_INT 8
69457: GREATER
69458: OR
69459: IFFALSE 69463
// exit ;
69461: GO 69538
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69463: LD_ADDR_VAR 0 4
69467: PUSH
69468: LD_INT 22
69470: PUSH
69471: LD_VAR 0 2
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PPUSH
69480: CALL_OW 69
69484: PUSH
69485: FOR_IN
69486: IFFALSE 69536
// begin un := UnitShoot ( i ) ;
69488: LD_ADDR_VAR 0 5
69492: PUSH
69493: LD_VAR 0 4
69497: PPUSH
69498: CALL_OW 504
69502: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69503: LD_VAR 0 5
69507: PPUSH
69508: CALL_OW 255
69512: PUSH
69513: LD_VAR 0 1
69517: EQUAL
69518: IFFALSE 69534
// begin result := un ;
69520: LD_ADDR_VAR 0 3
69524: PUSH
69525: LD_VAR 0 5
69529: ST_TO_ADDR
// exit ;
69530: POP
69531: POP
69532: GO 69538
// end ; end ;
69534: GO 69485
69536: POP
69537: POP
// end ;
69538: LD_VAR 0 3
69542: RET
// export function GetCargoBay ( units ) ; begin
69543: LD_INT 0
69545: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69546: LD_ADDR_VAR 0 2
69550: PUSH
69551: LD_VAR 0 1
69555: PPUSH
69556: LD_INT 2
69558: PUSH
69559: LD_INT 34
69561: PUSH
69562: LD_INT 12
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 34
69571: PUSH
69572: LD_INT 51
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 34
69581: PUSH
69582: LD_INT 32
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 34
69591: PUSH
69592: LD_INT 89
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: PPUSH
69606: CALL_OW 72
69610: ST_TO_ADDR
// end ;
69611: LD_VAR 0 2
69615: RET
// export function Negate ( value ) ; begin
69616: LD_INT 0
69618: PPUSH
// result := not value ;
69619: LD_ADDR_VAR 0 2
69623: PUSH
69624: LD_VAR 0 1
69628: NOT
69629: ST_TO_ADDR
// end ;
69630: LD_VAR 0 2
69634: RET
// export function Inc ( value ) ; begin
69635: LD_INT 0
69637: PPUSH
// result := value + 1 ;
69638: LD_ADDR_VAR 0 2
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 1
69650: PLUS
69651: ST_TO_ADDR
// end ;
69652: LD_VAR 0 2
69656: RET
// export function Dec ( value ) ; begin
69657: LD_INT 0
69659: PPUSH
// result := value - 1 ;
69660: LD_ADDR_VAR 0 2
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_INT 1
69672: MINUS
69673: ST_TO_ADDR
// end ;
69674: LD_VAR 0 2
69678: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69679: LD_INT 0
69681: PPUSH
69682: PPUSH
69683: PPUSH
69684: PPUSH
69685: PPUSH
69686: PPUSH
69687: PPUSH
69688: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69689: LD_VAR 0 1
69693: PPUSH
69694: LD_VAR 0 2
69698: PPUSH
69699: CALL_OW 488
69703: NOT
69704: IFTRUE 69723
69706: PUSH
69707: LD_VAR 0 3
69711: PPUSH
69712: LD_VAR 0 4
69716: PPUSH
69717: CALL_OW 488
69721: NOT
69722: OR
69723: IFFALSE 69736
// begin result := - 1 ;
69725: LD_ADDR_VAR 0 5
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: ST_TO_ADDR
// exit ;
69734: GO 69971
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69736: LD_ADDR_VAR 0 12
69740: PUSH
69741: LD_VAR 0 1
69745: PPUSH
69746: LD_VAR 0 2
69750: PPUSH
69751: LD_VAR 0 3
69755: PPUSH
69756: LD_VAR 0 4
69760: PPUSH
69761: CALL 68807 0 4
69765: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69766: LD_ADDR_VAR 0 11
69770: PUSH
69771: LD_VAR 0 1
69775: PPUSH
69776: LD_VAR 0 2
69780: PPUSH
69781: LD_VAR 0 12
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PPUSH
69790: LD_VAR 0 12
69794: PUSH
69795: LD_INT 2
69797: ARRAY
69798: PPUSH
69799: CALL_OW 298
69803: ST_TO_ADDR
// distance := 9999 ;
69804: LD_ADDR_VAR 0 10
69808: PUSH
69809: LD_INT 9999
69811: ST_TO_ADDR
// for i := 0 to 5 do
69812: LD_ADDR_VAR 0 6
69816: PUSH
69817: DOUBLE
69818: LD_INT 0
69820: DEC
69821: ST_TO_ADDR
69822: LD_INT 5
69824: PUSH
69825: FOR_TO
69826: IFFALSE 69969
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69828: LD_ADDR_VAR 0 7
69832: PUSH
69833: LD_VAR 0 1
69837: PPUSH
69838: LD_VAR 0 6
69842: PPUSH
69843: LD_VAR 0 11
69847: PPUSH
69848: CALL_OW 272
69852: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69853: LD_ADDR_VAR 0 8
69857: PUSH
69858: LD_VAR 0 2
69862: PPUSH
69863: LD_VAR 0 6
69867: PPUSH
69868: LD_VAR 0 11
69872: PPUSH
69873: CALL_OW 273
69877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69878: LD_VAR 0 7
69882: PPUSH
69883: LD_VAR 0 8
69887: PPUSH
69888: CALL_OW 488
69892: NOT
69893: IFFALSE 69897
// continue ;
69895: GO 69825
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69897: LD_ADDR_VAR 0 9
69901: PUSH
69902: LD_VAR 0 12
69906: PUSH
69907: LD_INT 1
69909: ARRAY
69910: PPUSH
69911: LD_VAR 0 12
69915: PUSH
69916: LD_INT 2
69918: ARRAY
69919: PPUSH
69920: LD_VAR 0 7
69924: PPUSH
69925: LD_VAR 0 8
69929: PPUSH
69930: CALL_OW 298
69934: ST_TO_ADDR
// if tmp < distance then
69935: LD_VAR 0 9
69939: PUSH
69940: LD_VAR 0 10
69944: LESS
69945: IFFALSE 69967
// begin result := i ;
69947: LD_ADDR_VAR 0 5
69951: PUSH
69952: LD_VAR 0 6
69956: ST_TO_ADDR
// distance := tmp ;
69957: LD_ADDR_VAR 0 10
69961: PUSH
69962: LD_VAR 0 9
69966: ST_TO_ADDR
// end ; end ;
69967: GO 69825
69969: POP
69970: POP
// end ;
69971: LD_VAR 0 5
69975: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69976: LD_INT 0
69978: PPUSH
69979: PPUSH
// if not driver or not IsInUnit ( driver ) then
69980: LD_VAR 0 1
69984: NOT
69985: IFTRUE 69999
69987: PUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: CALL_OW 310
69997: NOT
69998: OR
69999: IFFALSE 70003
// exit ;
70001: GO 70093
// vehicle := IsInUnit ( driver ) ;
70003: LD_ADDR_VAR 0 3
70007: PUSH
70008: LD_VAR 0 1
70012: PPUSH
70013: CALL_OW 310
70017: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70018: LD_VAR 0 1
70022: PPUSH
70023: LD_STRING \
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 0
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: PUSH
70053: LD_STRING E
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: LD_INT 0
70061: PUSH
70062: LD_VAR 0 3
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: LD_INT 0
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PPUSH
70089: CALL_OW 446
// end ;
70093: LD_VAR 0 2
70097: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70098: LD_INT 0
70100: PPUSH
70101: PPUSH
// if not driver or not IsInUnit ( driver ) then
70102: LD_VAR 0 1
70106: NOT
70107: IFTRUE 70121
70109: PUSH
70110: LD_VAR 0 1
70114: PPUSH
70115: CALL_OW 310
70119: NOT
70120: OR
70121: IFFALSE 70125
// exit ;
70123: GO 70215
// vehicle := IsInUnit ( driver ) ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_VAR 0 1
70134: PPUSH
70135: CALL_OW 310
70139: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70140: LD_VAR 0 1
70144: PPUSH
70145: LD_STRING \
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: PUSH
70175: LD_STRING E
70177: PUSH
70178: LD_INT 0
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_VAR 0 3
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PPUSH
70211: CALL_OW 447
// end ;
70215: LD_VAR 0 2
70219: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70220: LD_INT 0
70222: PPUSH
70223: PPUSH
70224: PPUSH
// tmp := [ ] ;
70225: LD_ADDR_VAR 0 5
70229: PUSH
70230: EMPTY
70231: ST_TO_ADDR
// for i in units do
70232: LD_ADDR_VAR 0 4
70236: PUSH
70237: LD_VAR 0 1
70241: PUSH
70242: FOR_IN
70243: IFFALSE 70281
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70245: LD_ADDR_VAR 0 5
70249: PUSH
70250: LD_VAR 0 5
70254: PPUSH
70255: LD_VAR 0 5
70259: PUSH
70260: LD_INT 1
70262: PLUS
70263: PPUSH
70264: LD_VAR 0 4
70268: PPUSH
70269: CALL_OW 256
70273: PPUSH
70274: CALL_OW 2
70278: ST_TO_ADDR
70279: GO 70242
70281: POP
70282: POP
// if not tmp then
70283: LD_VAR 0 5
70287: NOT
70288: IFFALSE 70292
// exit ;
70290: GO 70340
// if asc then
70292: LD_VAR 0 2
70296: IFFALSE 70320
// result := SortListByListAsc ( units , tmp ) else
70298: LD_ADDR_VAR 0 3
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: CALL_OW 76
70317: ST_TO_ADDR
70318: GO 70340
// result := SortListByListDesc ( units , tmp ) ;
70320: LD_ADDR_VAR 0 3
70324: PUSH
70325: LD_VAR 0 1
70329: PPUSH
70330: LD_VAR 0 5
70334: PPUSH
70335: CALL_OW 77
70339: ST_TO_ADDR
// end ;
70340: LD_VAR 0 3
70344: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70345: LD_INT 0
70347: PPUSH
70348: PPUSH
// task := GetTaskList ( mech ) ;
70349: LD_ADDR_VAR 0 4
70353: PUSH
70354: LD_VAR 0 1
70358: PPUSH
70359: CALL_OW 437
70363: ST_TO_ADDR
// if not task then
70364: LD_VAR 0 4
70368: NOT
70369: IFFALSE 70373
// exit ;
70371: GO 70417
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70373: LD_ADDR_VAR 0 3
70377: PUSH
70378: LD_VAR 0 4
70382: PUSH
70383: LD_INT 1
70385: ARRAY
70386: PUSH
70387: LD_INT 1
70389: ARRAY
70390: PUSH
70391: LD_STRING r
70393: EQUAL
70394: IFFALSE 70416
70396: PUSH
70397: LD_VAR 0 4
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_INT 4
70408: ARRAY
70409: PUSH
70410: LD_VAR 0 2
70414: EQUAL
70415: AND
70416: ST_TO_ADDR
// end ;
70417: LD_VAR 0 3
70421: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70422: LD_INT 0
70424: PPUSH
// SetDir ( unit , d ) ;
70425: LD_VAR 0 1
70429: PPUSH
70430: LD_VAR 0 4
70434: PPUSH
70435: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70439: LD_ADDR_VAR 0 6
70443: PUSH
70444: LD_VAR 0 1
70448: PPUSH
70449: LD_VAR 0 2
70453: PPUSH
70454: LD_VAR 0 3
70458: PPUSH
70459: LD_VAR 0 5
70463: PPUSH
70464: CALL_OW 48
70468: ST_TO_ADDR
// end ;
70469: LD_VAR 0 6
70473: RET
// export function ToNaturalNumber ( number ) ; begin
70474: LD_INT 0
70476: PPUSH
// result := number div 1 ;
70477: LD_ADDR_VAR 0 2
70481: PUSH
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 1
70489: DIV
70490: ST_TO_ADDR
// if number < 0 then
70491: LD_VAR 0 1
70495: PUSH
70496: LD_INT 0
70498: LESS
70499: IFFALSE 70509
// result := 0 ;
70501: LD_ADDR_VAR 0 2
70505: PUSH
70506: LD_INT 0
70508: ST_TO_ADDR
// end ;
70509: LD_VAR 0 2
70513: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70514: LD_INT 0
70516: PPUSH
70517: PPUSH
70518: PPUSH
// if not buildings then
70519: LD_VAR 0 1
70523: NOT
70524: IFFALSE 70528
// exit ;
70526: GO 70643
// tmp := [ ] ;
70528: LD_ADDR_VAR 0 5
70532: PUSH
70533: EMPTY
70534: ST_TO_ADDR
// for b in buildings do
70535: LD_ADDR_VAR 0 4
70539: PUSH
70540: LD_VAR 0 1
70544: PUSH
70545: FOR_IN
70546: IFFALSE 70584
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70548: LD_ADDR_VAR 0 5
70552: PUSH
70553: LD_VAR 0 5
70557: PPUSH
70558: LD_VAR 0 5
70562: PUSH
70563: LD_INT 1
70565: PLUS
70566: PPUSH
70567: LD_VAR 0 4
70571: PPUSH
70572: CALL_OW 266
70576: PPUSH
70577: CALL_OW 1
70581: ST_TO_ADDR
70582: GO 70545
70584: POP
70585: POP
// if not tmp then
70586: LD_VAR 0 5
70590: NOT
70591: IFFALSE 70595
// exit ;
70593: GO 70643
// if asc then
70595: LD_VAR 0 2
70599: IFFALSE 70623
// result := SortListByListAsc ( buildings , tmp ) else
70601: LD_ADDR_VAR 0 3
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_VAR 0 5
70615: PPUSH
70616: CALL_OW 76
70620: ST_TO_ADDR
70621: GO 70643
// result := SortListByListDesc ( buildings , tmp ) ;
70623: LD_ADDR_VAR 0 3
70627: PUSH
70628: LD_VAR 0 1
70632: PPUSH
70633: LD_VAR 0 5
70637: PPUSH
70638: CALL_OW 77
70642: ST_TO_ADDR
// end ;
70643: LD_VAR 0 3
70647: RET
// export function SortByClass ( units , class ) ; var un ; begin
70648: LD_INT 0
70650: PPUSH
70651: PPUSH
// if not units or not class then
70652: LD_VAR 0 1
70656: NOT
70657: IFTRUE 70666
70659: PUSH
70660: LD_VAR 0 2
70664: NOT
70665: OR
70666: IFFALSE 70670
// exit ;
70668: GO 70765
// result := [ ] ;
70670: LD_ADDR_VAR 0 3
70674: PUSH
70675: EMPTY
70676: ST_TO_ADDR
// for un in units do
70677: LD_ADDR_VAR 0 4
70681: PUSH
70682: LD_VAR 0 1
70686: PUSH
70687: FOR_IN
70688: IFFALSE 70763
// if GetClass ( un ) = class then
70690: LD_VAR 0 4
70694: PPUSH
70695: CALL_OW 257
70699: PUSH
70700: LD_VAR 0 2
70704: EQUAL
70705: IFFALSE 70732
// result := Insert ( result , 1 , un ) else
70707: LD_ADDR_VAR 0 3
70711: PUSH
70712: LD_VAR 0 3
70716: PPUSH
70717: LD_INT 1
70719: PPUSH
70720: LD_VAR 0 4
70724: PPUSH
70725: CALL_OW 2
70729: ST_TO_ADDR
70730: GO 70761
// result := Replace ( result , result + 1 , un ) ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_VAR 0 3
70741: PPUSH
70742: LD_VAR 0 3
70746: PUSH
70747: LD_INT 1
70749: PLUS
70750: PPUSH
70751: LD_VAR 0 4
70755: PPUSH
70756: CALL_OW 1
70760: ST_TO_ADDR
70761: GO 70687
70763: POP
70764: POP
// end ;
70765: LD_VAR 0 3
70769: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70770: LD_INT 0
70772: PPUSH
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
70777: PPUSH
70778: PPUSH
// result := [ ] ;
70779: LD_ADDR_VAR 0 4
70783: PUSH
70784: EMPTY
70785: ST_TO_ADDR
// if x - r < 0 then
70786: LD_VAR 0 1
70790: PUSH
70791: LD_VAR 0 3
70795: MINUS
70796: PUSH
70797: LD_INT 0
70799: LESS
70800: IFFALSE 70812
// min_x := 0 else
70802: LD_ADDR_VAR 0 8
70806: PUSH
70807: LD_INT 0
70809: ST_TO_ADDR
70810: GO 70828
// min_x := x - r ;
70812: LD_ADDR_VAR 0 8
70816: PUSH
70817: LD_VAR 0 1
70821: PUSH
70822: LD_VAR 0 3
70826: MINUS
70827: ST_TO_ADDR
// if y - r < 0 then
70828: LD_VAR 0 2
70832: PUSH
70833: LD_VAR 0 3
70837: MINUS
70838: PUSH
70839: LD_INT 0
70841: LESS
70842: IFFALSE 70854
// min_y := 0 else
70844: LD_ADDR_VAR 0 7
70848: PUSH
70849: LD_INT 0
70851: ST_TO_ADDR
70852: GO 70870
// min_y := y - r ;
70854: LD_ADDR_VAR 0 7
70858: PUSH
70859: LD_VAR 0 2
70863: PUSH
70864: LD_VAR 0 3
70868: MINUS
70869: ST_TO_ADDR
// max_x := x + r ;
70870: LD_ADDR_VAR 0 9
70874: PUSH
70875: LD_VAR 0 1
70879: PUSH
70880: LD_VAR 0 3
70884: PLUS
70885: ST_TO_ADDR
// max_y := y + r ;
70886: LD_ADDR_VAR 0 10
70890: PUSH
70891: LD_VAR 0 2
70895: PUSH
70896: LD_VAR 0 3
70900: PLUS
70901: ST_TO_ADDR
// for _x = min_x to max_x do
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: DOUBLE
70908: LD_VAR 0 8
70912: DEC
70913: ST_TO_ADDR
70914: LD_VAR 0 9
70918: PUSH
70919: FOR_TO
70920: IFFALSE 71021
// for _y = min_y to max_y do
70922: LD_ADDR_VAR 0 6
70926: PUSH
70927: DOUBLE
70928: LD_VAR 0 7
70932: DEC
70933: ST_TO_ADDR
70934: LD_VAR 0 10
70938: PUSH
70939: FOR_TO
70940: IFFALSE 71017
// begin if not ValidHex ( _x , _y ) then
70942: LD_VAR 0 5
70946: PPUSH
70947: LD_VAR 0 6
70951: PPUSH
70952: CALL_OW 488
70956: NOT
70957: IFFALSE 70961
// continue ;
70959: GO 70939
// if GetResourceTypeXY ( _x , _y ) then
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_VAR 0 6
70970: PPUSH
70971: CALL_OW 283
70975: IFFALSE 71015
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70977: LD_ADDR_VAR 0 4
70981: PUSH
70982: LD_VAR 0 4
70986: PPUSH
70987: LD_VAR 0 4
70991: PUSH
70992: LD_INT 1
70994: PLUS
70995: PPUSH
70996: LD_VAR 0 5
71000: PUSH
71001: LD_VAR 0 6
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PPUSH
71010: CALL_OW 1
71014: ST_TO_ADDR
// end ;
71015: GO 70939
71017: POP
71018: POP
71019: GO 70919
71021: POP
71022: POP
// end ;
71023: LD_VAR 0 4
71027: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71028: LD_INT 0
71030: PPUSH
71031: PPUSH
71032: PPUSH
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
71037: PPUSH
// if not units then
71038: LD_VAR 0 1
71042: NOT
71043: IFFALSE 71047
// exit ;
71045: GO 71579
// result := UnitFilter ( units , [ f_ok ] ) ;
71047: LD_ADDR_VAR 0 3
71051: PUSH
71052: LD_VAR 0 1
71056: PPUSH
71057: LD_INT 50
71059: PUSH
71060: EMPTY
71061: LIST
71062: PPUSH
71063: CALL_OW 72
71067: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71068: LD_ADDR_VAR 0 8
71072: PUSH
71073: LD_VAR 0 1
71077: PUSH
71078: LD_INT 1
71080: ARRAY
71081: PPUSH
71082: CALL_OW 255
71086: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71087: LD_ADDR_VAR 0 10
71091: PUSH
71092: LD_INT 29
71094: PUSH
71095: LD_INT 91
71097: PUSH
71098: LD_INT 49
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: ST_TO_ADDR
// if not result then
71106: LD_VAR 0 3
71110: NOT
71111: IFFALSE 71115
// exit ;
71113: GO 71579
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71115: LD_ADDR_VAR 0 5
71119: PUSH
71120: LD_INT 81
71122: PUSH
71123: LD_VAR 0 8
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PPUSH
71132: CALL_OW 69
71136: ST_TO_ADDR
// for i in result do
71137: LD_ADDR_VAR 0 4
71141: PUSH
71142: LD_VAR 0 3
71146: PUSH
71147: FOR_IN
71148: IFFALSE 71577
// begin tag := GetTag ( i ) + 1 ;
71150: LD_ADDR_VAR 0 9
71154: PUSH
71155: LD_VAR 0 4
71159: PPUSH
71160: CALL_OW 110
71164: PUSH
71165: LD_INT 1
71167: PLUS
71168: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71169: LD_ADDR_VAR 0 7
71173: PUSH
71174: LD_VAR 0 4
71178: PPUSH
71179: CALL_OW 250
71183: PPUSH
71184: LD_VAR 0 4
71188: PPUSH
71189: CALL_OW 251
71193: PPUSH
71194: LD_INT 4
71196: PPUSH
71197: CALL 70770 0 3
71201: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71202: LD_VAR 0 4
71206: PPUSH
71207: CALL_OW 247
71211: PUSH
71212: LD_INT 2
71214: EQUAL
71215: IFFALSE 71227
71217: PUSH
71218: LD_VAR 0 7
71222: PUSH
71223: LD_INT 2
71225: GREATER
71226: AND
71227: IFFALSE 71247
71229: PUSH
71230: LD_VAR 0 4
71234: PPUSH
71235: CALL_OW 264
71239: PUSH
71240: LD_VAR 0 10
71244: IN
71245: NOT
71246: AND
71247: IFFALSE 71286
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71249: LD_VAR 0 4
71253: PPUSH
71254: LD_VAR 0 7
71258: PUSH
71259: LD_INT 1
71261: ARRAY
71262: PUSH
71263: LD_INT 1
71265: ARRAY
71266: PPUSH
71267: LD_VAR 0 7
71271: PUSH
71272: LD_INT 1
71274: ARRAY
71275: PUSH
71276: LD_INT 2
71278: ARRAY
71279: PPUSH
71280: CALL_OW 116
71284: GO 71575
// if path > tag then
71286: LD_VAR 0 2
71290: PUSH
71291: LD_VAR 0 9
71295: GREATER
71296: IFFALSE 71504
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71298: LD_ADDR_VAR 0 6
71302: PUSH
71303: LD_VAR 0 5
71307: PPUSH
71308: LD_INT 91
71310: PUSH
71311: LD_VAR 0 4
71315: PUSH
71316: LD_INT 8
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: LIST
71323: PPUSH
71324: CALL_OW 72
71328: ST_TO_ADDR
// if nearEnemy then
71329: LD_VAR 0 6
71333: IFFALSE 71402
// begin if GetWeapon ( i ) = ru_time_lapser then
71335: LD_VAR 0 4
71339: PPUSH
71340: CALL_OW 264
71344: PUSH
71345: LD_INT 49
71347: EQUAL
71348: IFFALSE 71376
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71350: LD_VAR 0 4
71354: PPUSH
71355: LD_VAR 0 6
71359: PPUSH
71360: LD_VAR 0 4
71364: PPUSH
71365: CALL_OW 74
71369: PPUSH
71370: CALL_OW 112
71374: GO 71400
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71376: LD_VAR 0 4
71380: PPUSH
71381: LD_VAR 0 6
71385: PPUSH
71386: LD_VAR 0 4
71390: PPUSH
71391: CALL_OW 74
71395: PPUSH
71396: CALL 72660 0 2
// end else
71400: GO 71502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71402: LD_VAR 0 4
71406: PPUSH
71407: LD_VAR 0 2
71411: PUSH
71412: LD_VAR 0 9
71416: ARRAY
71417: PUSH
71418: LD_INT 1
71420: ARRAY
71421: PPUSH
71422: LD_VAR 0 2
71426: PUSH
71427: LD_VAR 0 9
71431: ARRAY
71432: PUSH
71433: LD_INT 2
71435: ARRAY
71436: PPUSH
71437: CALL_OW 297
71441: PUSH
71442: LD_INT 6
71444: GREATER
71445: IFFALSE 71488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71447: LD_VAR 0 4
71451: PPUSH
71452: LD_VAR 0 2
71456: PUSH
71457: LD_VAR 0 9
71461: ARRAY
71462: PUSH
71463: LD_INT 1
71465: ARRAY
71466: PPUSH
71467: LD_VAR 0 2
71471: PUSH
71472: LD_VAR 0 9
71476: ARRAY
71477: PUSH
71478: LD_INT 2
71480: ARRAY
71481: PPUSH
71482: CALL_OW 114
71486: GO 71502
// SetTag ( i , tag ) ;
71488: LD_VAR 0 4
71492: PPUSH
71493: LD_VAR 0 9
71497: PPUSH
71498: CALL_OW 109
// end else
71502: GO 71575
// if enemy then
71504: LD_VAR 0 5
71508: IFFALSE 71575
// begin if GetWeapon ( i ) = ru_time_lapser then
71510: LD_VAR 0 4
71514: PPUSH
71515: CALL_OW 264
71519: PUSH
71520: LD_INT 49
71522: EQUAL
71523: IFFALSE 71551
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71525: LD_VAR 0 4
71529: PPUSH
71530: LD_VAR 0 5
71534: PPUSH
71535: LD_VAR 0 4
71539: PPUSH
71540: CALL_OW 74
71544: PPUSH
71545: CALL_OW 112
71549: GO 71575
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71551: LD_VAR 0 4
71555: PPUSH
71556: LD_VAR 0 5
71560: PPUSH
71561: LD_VAR 0 4
71565: PPUSH
71566: CALL_OW 74
71570: PPUSH
71571: CALL 72660 0 2
// end ; end ;
71575: GO 71147
71577: POP
71578: POP
// end ;
71579: LD_VAR 0 3
71583: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71584: LD_INT 0
71586: PPUSH
71587: PPUSH
71588: PPUSH
// if not unit or IsInUnit ( unit ) then
71589: LD_VAR 0 1
71593: NOT
71594: IFTRUE 71607
71596: PUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 310
71606: OR
71607: IFFALSE 71611
// exit ;
71609: GO 71702
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71611: LD_ADDR_VAR 0 4
71615: PUSH
71616: LD_VAR 0 1
71620: PPUSH
71621: CALL_OW 250
71625: PPUSH
71626: LD_VAR 0 2
71630: PPUSH
71631: LD_INT 1
71633: PPUSH
71634: CALL_OW 272
71638: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71639: LD_ADDR_VAR 0 5
71643: PUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 251
71653: PPUSH
71654: LD_VAR 0 2
71658: PPUSH
71659: LD_INT 1
71661: PPUSH
71662: CALL_OW 273
71666: ST_TO_ADDR
// if ValidHex ( x , y ) then
71667: LD_VAR 0 4
71671: PPUSH
71672: LD_VAR 0 5
71676: PPUSH
71677: CALL_OW 488
71681: IFFALSE 71702
// ComTurnXY ( unit , x , y ) ;
71683: LD_VAR 0 1
71687: PPUSH
71688: LD_VAR 0 4
71692: PPUSH
71693: LD_VAR 0 5
71697: PPUSH
71698: CALL_OW 118
// end ;
71702: LD_VAR 0 3
71706: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71707: LD_INT 0
71709: PPUSH
71710: PPUSH
// result := false ;
71711: LD_ADDR_VAR 0 3
71715: PUSH
71716: LD_INT 0
71718: ST_TO_ADDR
// if not units then
71719: LD_VAR 0 2
71723: NOT
71724: IFFALSE 71728
// exit ;
71726: GO 71773
// for i in units do
71728: LD_ADDR_VAR 0 4
71732: PUSH
71733: LD_VAR 0 2
71737: PUSH
71738: FOR_IN
71739: IFFALSE 71771
// if See ( side , i ) then
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 4
71750: PPUSH
71751: CALL_OW 292
71755: IFFALSE 71769
// begin result := true ;
71757: LD_ADDR_VAR 0 3
71761: PUSH
71762: LD_INT 1
71764: ST_TO_ADDR
// exit ;
71765: POP
71766: POP
71767: GO 71773
// end ;
71769: GO 71738
71771: POP
71772: POP
// end ;
71773: LD_VAR 0 3
71777: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71778: LD_INT 0
71780: PPUSH
71781: PPUSH
71782: PPUSH
71783: PPUSH
// if not unit or not points then
71784: LD_VAR 0 1
71788: NOT
71789: IFTRUE 71798
71791: PUSH
71792: LD_VAR 0 2
71796: NOT
71797: OR
71798: IFFALSE 71802
// exit ;
71800: GO 71892
// dist := 99999 ;
71802: LD_ADDR_VAR 0 5
71806: PUSH
71807: LD_INT 99999
71809: ST_TO_ADDR
// for i in points do
71810: LD_ADDR_VAR 0 4
71814: PUSH
71815: LD_VAR 0 2
71819: PUSH
71820: FOR_IN
71821: IFFALSE 71890
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71823: LD_ADDR_VAR 0 6
71827: PUSH
71828: LD_VAR 0 1
71832: PPUSH
71833: LD_VAR 0 4
71837: PUSH
71838: LD_INT 1
71840: ARRAY
71841: PPUSH
71842: LD_VAR 0 4
71846: PUSH
71847: LD_INT 2
71849: ARRAY
71850: PPUSH
71851: CALL_OW 297
71855: ST_TO_ADDR
// if tmpDist < dist then
71856: LD_VAR 0 6
71860: PUSH
71861: LD_VAR 0 5
71865: LESS
71866: IFFALSE 71888
// begin result := i ;
71868: LD_ADDR_VAR 0 3
71872: PUSH
71873: LD_VAR 0 4
71877: ST_TO_ADDR
// dist := tmpDist ;
71878: LD_ADDR_VAR 0 5
71882: PUSH
71883: LD_VAR 0 6
71887: ST_TO_ADDR
// end ; end ;
71888: GO 71820
71890: POP
71891: POP
// end ;
71892: LD_VAR 0 3
71896: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71897: LD_INT 0
71899: PPUSH
// uc_side := side ;
71900: LD_ADDR_OWVAR 20
71904: PUSH
71905: LD_VAR 0 1
71909: ST_TO_ADDR
// uc_nation := 3 ;
71910: LD_ADDR_OWVAR 21
71914: PUSH
71915: LD_INT 3
71917: ST_TO_ADDR
// vc_chassis := 25 ;
71918: LD_ADDR_OWVAR 37
71922: PUSH
71923: LD_INT 25
71925: ST_TO_ADDR
// vc_engine := engine_siberite ;
71926: LD_ADDR_OWVAR 39
71930: PUSH
71931: LD_INT 3
71933: ST_TO_ADDR
// vc_control := control_computer ;
71934: LD_ADDR_OWVAR 38
71938: PUSH
71939: LD_INT 3
71941: ST_TO_ADDR
// vc_weapon := 59 ;
71942: LD_ADDR_OWVAR 40
71946: PUSH
71947: LD_INT 59
71949: ST_TO_ADDR
// result := CreateVehicle ;
71950: LD_ADDR_VAR 0 5
71954: PUSH
71955: CALL_OW 45
71959: ST_TO_ADDR
// SetDir ( result , d ) ;
71960: LD_VAR 0 5
71964: PPUSH
71965: LD_VAR 0 4
71969: PPUSH
71970: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71974: LD_VAR 0 5
71978: PPUSH
71979: LD_VAR 0 2
71983: PPUSH
71984: LD_VAR 0 3
71988: PPUSH
71989: LD_INT 0
71991: PPUSH
71992: CALL_OW 48
// end ;
71996: LD_VAR 0 5
72000: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72001: LD_INT 0
72003: PPUSH
72004: PPUSH
72005: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72006: LD_ADDR_VAR 0 2
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: LD_INT 0
72019: PUSH
72020: LD_INT 0
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72029: LD_VAR 0 1
72033: NOT
72034: IFTRUE 72067
72036: PUSH
72037: LD_VAR 0 1
72041: PPUSH
72042: CALL_OW 264
72046: PUSH
72047: LD_INT 12
72049: PUSH
72050: LD_INT 51
72052: PUSH
72053: LD_INT 32
72055: PUSH
72056: LD_INT 89
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: IN
72065: NOT
72066: OR
72067: IFFALSE 72071
// exit ;
72069: GO 72169
// for i := 1 to 3 do
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: DOUBLE
72077: LD_INT 1
72079: DEC
72080: ST_TO_ADDR
72081: LD_INT 3
72083: PUSH
72084: FOR_TO
72085: IFFALSE 72167
// begin tmp := GetCargo ( cargo , i ) ;
72087: LD_ADDR_VAR 0 4
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: LD_VAR 0 3
72101: PPUSH
72102: CALL_OW 289
72106: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72107: LD_ADDR_VAR 0 2
72111: PUSH
72112: LD_VAR 0 2
72116: PPUSH
72117: LD_VAR 0 3
72121: PPUSH
72122: LD_VAR 0 4
72126: PPUSH
72127: CALL_OW 1
72131: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72132: LD_ADDR_VAR 0 2
72136: PUSH
72137: LD_VAR 0 2
72141: PPUSH
72142: LD_INT 4
72144: PPUSH
72145: LD_VAR 0 2
72149: PUSH
72150: LD_INT 4
72152: ARRAY
72153: PUSH
72154: LD_VAR 0 4
72158: PLUS
72159: PPUSH
72160: CALL_OW 1
72164: ST_TO_ADDR
// end ;
72165: GO 72084
72167: POP
72168: POP
// end ;
72169: LD_VAR 0 2
72173: RET
// export function Length ( array ) ; begin
72174: LD_INT 0
72176: PPUSH
// result := array + 0 ;
72177: LD_ADDR_VAR 0 2
72181: PUSH
72182: LD_VAR 0 1
72186: PUSH
72187: LD_INT 0
72189: PLUS
72190: ST_TO_ADDR
// end ;
72191: LD_VAR 0 2
72195: RET
// export function PrepareArray ( array ) ; begin
72196: LD_INT 0
72198: PPUSH
// result := array diff 0 ;
72199: LD_ADDR_VAR 0 2
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: LD_INT 0
72211: DIFF
72212: ST_TO_ADDR
// if not result [ 1 ] then
72213: LD_VAR 0 2
72217: PUSH
72218: LD_INT 1
72220: ARRAY
72221: NOT
72222: IFFALSE 72242
// result := Delete ( result , 1 ) ;
72224: LD_ADDR_VAR 0 2
72228: PUSH
72229: LD_VAR 0 2
72233: PPUSH
72234: LD_INT 1
72236: PPUSH
72237: CALL_OW 3
72241: ST_TO_ADDR
// end ;
72242: LD_VAR 0 2
72246: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72247: LD_INT 0
72249: PPUSH
72250: PPUSH
72251: PPUSH
72252: PPUSH
// sibRocketRange := 25 ;
72253: LD_ADDR_VAR 0 6
72257: PUSH
72258: LD_INT 25
72260: ST_TO_ADDR
// result := false ;
72261: LD_ADDR_VAR 0 4
72265: PUSH
72266: LD_INT 0
72268: ST_TO_ADDR
// for i := 0 to 5 do
72269: LD_ADDR_VAR 0 5
72273: PUSH
72274: DOUBLE
72275: LD_INT 0
72277: DEC
72278: ST_TO_ADDR
72279: LD_INT 5
72281: PUSH
72282: FOR_TO
72283: IFFALSE 72350
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72285: LD_VAR 0 1
72289: PPUSH
72290: LD_VAR 0 5
72294: PPUSH
72295: LD_VAR 0 6
72299: PPUSH
72300: CALL_OW 272
72304: PPUSH
72305: LD_VAR 0 2
72309: PPUSH
72310: LD_VAR 0 5
72314: PPUSH
72315: LD_VAR 0 6
72319: PPUSH
72320: CALL_OW 273
72324: PPUSH
72325: LD_VAR 0 3
72329: PPUSH
72330: CALL_OW 309
72334: IFFALSE 72348
// begin result := true ;
72336: LD_ADDR_VAR 0 4
72340: PUSH
72341: LD_INT 1
72343: ST_TO_ADDR
// exit ;
72344: POP
72345: POP
72346: GO 72352
// end ;
72348: GO 72282
72350: POP
72351: POP
// end ;
72352: LD_VAR 0 4
72356: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72357: LD_INT 0
72359: PPUSH
72360: PPUSH
72361: PPUSH
// if btype = b_depot then
72362: LD_VAR 0 2
72366: PUSH
72367: LD_INT 0
72369: EQUAL
72370: IFFALSE 72382
// begin result := true ;
72372: LD_ADDR_VAR 0 3
72376: PUSH
72377: LD_INT 1
72379: ST_TO_ADDR
// exit ;
72380: GO 72502
// end ; pom := GetBase ( depot ) ;
72382: LD_ADDR_VAR 0 4
72386: PUSH
72387: LD_VAR 0 1
72391: PPUSH
72392: CALL_OW 274
72396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72397: LD_ADDR_VAR 0 5
72401: PUSH
72402: LD_VAR 0 2
72406: PPUSH
72407: LD_VAR 0 1
72411: PPUSH
72412: CALL_OW 248
72416: PPUSH
72417: CALL_OW 450
72421: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72422: LD_ADDR_VAR 0 3
72426: PUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: LD_INT 1
72434: PPUSH
72435: CALL_OW 275
72439: PUSH
72440: LD_VAR 0 5
72444: PUSH
72445: LD_INT 1
72447: ARRAY
72448: GREATEREQUAL
72449: IFFALSE 72475
72451: PUSH
72452: LD_VAR 0 4
72456: PPUSH
72457: LD_INT 2
72459: PPUSH
72460: CALL_OW 275
72464: PUSH
72465: LD_VAR 0 5
72469: PUSH
72470: LD_INT 2
72472: ARRAY
72473: GREATEREQUAL
72474: AND
72475: IFFALSE 72501
72477: PUSH
72478: LD_VAR 0 4
72482: PPUSH
72483: LD_INT 3
72485: PPUSH
72486: CALL_OW 275
72490: PUSH
72491: LD_VAR 0 5
72495: PUSH
72496: LD_INT 3
72498: ARRAY
72499: GREATEREQUAL
72500: AND
72501: ST_TO_ADDR
// end ;
72502: LD_VAR 0 3
72506: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72507: LD_INT 0
72509: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72510: LD_VAR 0 1
72514: PPUSH
72515: LD_VAR 0 2
72519: PPUSH
72520: LD_INT 0
72522: PPUSH
72523: LD_INT 0
72525: PPUSH
72526: LD_INT 1
72528: PPUSH
72529: LD_INT 0
72531: PPUSH
72532: CALL_OW 587
// end ;
72536: LD_VAR 0 3
72540: RET
// export function CenterOnNow ( unit ) ; begin
72541: LD_INT 0
72543: PPUSH
// result := IsInUnit ( unit ) ;
72544: LD_ADDR_VAR 0 2
72548: PUSH
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL_OW 310
72558: ST_TO_ADDR
// if not result then
72559: LD_VAR 0 2
72563: NOT
72564: IFFALSE 72576
// result := unit ;
72566: LD_ADDR_VAR 0 2
72570: PUSH
72571: LD_VAR 0 1
72575: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72576: LD_VAR 0 1
72580: PPUSH
72581: CALL_OW 87
// end ;
72585: LD_VAR 0 2
72589: RET
// export function ComMoveHex ( unit , hex ) ; begin
72590: LD_INT 0
72592: PPUSH
// if not hex then
72593: LD_VAR 0 2
72597: NOT
72598: IFFALSE 72602
// exit ;
72600: GO 72655
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72602: LD_VAR 0 2
72606: PUSH
72607: LD_INT 1
72609: ARRAY
72610: PPUSH
72611: LD_VAR 0 2
72615: PUSH
72616: LD_INT 2
72618: ARRAY
72619: PPUSH
72620: CALL_OW 428
72624: IFFALSE 72628
// exit ;
72626: GO 72655
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72628: LD_VAR 0 1
72632: PPUSH
72633: LD_VAR 0 2
72637: PUSH
72638: LD_INT 1
72640: ARRAY
72641: PPUSH
72642: LD_VAR 0 2
72646: PUSH
72647: LD_INT 2
72649: ARRAY
72650: PPUSH
72651: CALL_OW 111
// end ;
72655: LD_VAR 0 3
72659: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72660: LD_INT 0
72662: PPUSH
72663: PPUSH
72664: PPUSH
// if not unit or not enemy then
72665: LD_VAR 0 1
72669: NOT
72670: IFTRUE 72679
72672: PUSH
72673: LD_VAR 0 2
72677: NOT
72678: OR
72679: IFFALSE 72683
// exit ;
72681: GO 72809
// x := GetX ( enemy ) ;
72683: LD_ADDR_VAR 0 4
72687: PUSH
72688: LD_VAR 0 2
72692: PPUSH
72693: CALL_OW 250
72697: ST_TO_ADDR
// y := GetY ( enemy ) ;
72698: LD_ADDR_VAR 0 5
72702: PUSH
72703: LD_VAR 0 2
72707: PPUSH
72708: CALL_OW 251
72712: ST_TO_ADDR
// if ValidHex ( x , y ) then
72713: LD_VAR 0 4
72717: PPUSH
72718: LD_VAR 0 5
72722: PPUSH
72723: CALL_OW 488
72727: IFFALSE 72809
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72729: LD_VAR 0 2
72733: PPUSH
72734: CALL_OW 247
72738: PUSH
72739: LD_INT 3
72741: PUSH
72742: LD_INT 2
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: IN
72749: IFTRUE 72772
72751: PUSH
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 255
72761: PPUSH
72762: LD_VAR 0 2
72766: PPUSH
72767: CALL_OW 292
72771: OR
72772: IFFALSE 72790
// ComAttackUnit ( unit , enemy ) else
72774: LD_VAR 0 1
72778: PPUSH
72779: LD_VAR 0 2
72783: PPUSH
72784: CALL_OW 115
72788: GO 72809
// ComAgressiveMove ( unit , x , y ) ;
72790: LD_VAR 0 1
72794: PPUSH
72795: LD_VAR 0 4
72799: PPUSH
72800: LD_VAR 0 5
72804: PPUSH
72805: CALL_OW 114
// end ;
72809: LD_VAR 0 3
72813: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72814: LD_INT 0
72816: PPUSH
72817: PPUSH
72818: PPUSH
// list := AreaToList ( area , 0 ) ;
72819: LD_ADDR_VAR 0 5
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: LD_INT 0
72831: PPUSH
72832: CALL_OW 517
72836: ST_TO_ADDR
// if not list then
72837: LD_VAR 0 5
72841: NOT
72842: IFFALSE 72846
// exit ;
72844: GO 72976
// if all then
72846: LD_VAR 0 2
72850: IFFALSE 72938
// begin for i := 1 to list [ 1 ] do
72852: LD_ADDR_VAR 0 4
72856: PUSH
72857: DOUBLE
72858: LD_INT 1
72860: DEC
72861: ST_TO_ADDR
72862: LD_VAR 0 5
72866: PUSH
72867: LD_INT 1
72869: ARRAY
72870: PUSH
72871: FOR_TO
72872: IFFALSE 72934
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72874: LD_ADDR_VAR 0 3
72878: PUSH
72879: LD_VAR 0 3
72883: PPUSH
72884: LD_VAR 0 3
72888: PUSH
72889: LD_INT 1
72891: PLUS
72892: PPUSH
72893: LD_VAR 0 5
72897: PUSH
72898: LD_INT 1
72900: ARRAY
72901: PUSH
72902: LD_VAR 0 4
72906: ARRAY
72907: PUSH
72908: LD_VAR 0 5
72912: PUSH
72913: LD_INT 2
72915: ARRAY
72916: PUSH
72917: LD_VAR 0 4
72921: ARRAY
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PPUSH
72927: CALL_OW 1
72931: ST_TO_ADDR
72932: GO 72871
72934: POP
72935: POP
// exit ;
72936: GO 72976
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72938: LD_ADDR_VAR 0 3
72942: PUSH
72943: LD_VAR 0 5
72947: PUSH
72948: LD_INT 1
72950: ARRAY
72951: PUSH
72952: LD_INT 1
72954: ARRAY
72955: PUSH
72956: LD_VAR 0 5
72960: PUSH
72961: LD_INT 2
72963: ARRAY
72964: PUSH
72965: LD_INT 1
72967: ARRAY
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: EMPTY
72974: LIST
72975: ST_TO_ADDR
// end ;
72976: LD_VAR 0 3
72980: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72981: LD_INT 0
72983: PPUSH
72984: PPUSH
// list := AreaToList ( area , 0 ) ;
72985: LD_ADDR_VAR 0 4
72989: PUSH
72990: LD_VAR 0 1
72994: PPUSH
72995: LD_INT 0
72997: PPUSH
72998: CALL_OW 517
73002: ST_TO_ADDR
// if not list then
73003: LD_VAR 0 4
73007: NOT
73008: IFFALSE 73012
// exit ;
73010: GO 73053
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73012: LD_ADDR_VAR 0 3
73016: PUSH
73017: LD_VAR 0 4
73021: PUSH
73022: LD_INT 1
73024: ARRAY
73025: PUSH
73026: LD_INT 1
73028: ARRAY
73029: PUSH
73030: LD_VAR 0 4
73034: PUSH
73035: LD_INT 2
73037: ARRAY
73038: PUSH
73039: LD_INT 1
73041: ARRAY
73042: PUSH
73043: LD_VAR 0 2
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: LIST
73052: ST_TO_ADDR
// end ;
73053: LD_VAR 0 3
73057: RET
// export function First ( array ) ; begin
73058: LD_INT 0
73060: PPUSH
// if not array then
73061: LD_VAR 0 1
73065: NOT
73066: IFFALSE 73070
// exit ;
73068: GO 73084
// result := array [ 1 ] ;
73070: LD_ADDR_VAR 0 2
73074: PUSH
73075: LD_VAR 0 1
73079: PUSH
73080: LD_INT 1
73082: ARRAY
73083: ST_TO_ADDR
// end ;
73084: LD_VAR 0 2
73088: RET
// export function Last ( array ) ; begin
73089: LD_INT 0
73091: PPUSH
// if not array then
73092: LD_VAR 0 1
73096: NOT
73097: IFFALSE 73101
// exit ;
73099: GO 73117
// result := array [ array ] ;
73101: LD_ADDR_VAR 0 2
73105: PUSH
73106: LD_VAR 0 1
73110: PUSH
73111: LD_VAR 0 1
73115: ARRAY
73116: ST_TO_ADDR
// end ;
73117: LD_VAR 0 2
73121: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73122: LD_INT 0
73124: PPUSH
73125: PPUSH
// result := [ ] ;
73126: LD_ADDR_VAR 0 5
73130: PUSH
73131: EMPTY
73132: ST_TO_ADDR
// if not array then
73133: LD_VAR 0 1
73137: NOT
73138: IFFALSE 73142
// exit ;
73140: GO 73254
// for i := 1 to array do
73142: LD_ADDR_VAR 0 6
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_VAR 0 1
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73252
// if array [ i ] [ index ] = value then
73160: LD_VAR 0 1
73164: PUSH
73165: LD_VAR 0 6
73169: ARRAY
73170: PUSH
73171: LD_VAR 0 2
73175: ARRAY
73176: PUSH
73177: LD_VAR 0 3
73181: EQUAL
73182: IFFALSE 73250
// begin if indexColumn then
73184: LD_VAR 0 4
73188: IFFALSE 73224
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73190: LD_ADDR_VAR 0 5
73194: PUSH
73195: LD_VAR 0 5
73199: PPUSH
73200: LD_VAR 0 1
73204: PUSH
73205: LD_VAR 0 6
73209: ARRAY
73210: PUSH
73211: LD_VAR 0 4
73215: ARRAY
73216: PPUSH
73217: CALL 68262 0 2
73221: ST_TO_ADDR
73222: GO 73250
// result := Join ( result , array [ i ] ) ;
73224: LD_ADDR_VAR 0 5
73228: PUSH
73229: LD_VAR 0 5
73233: PPUSH
73234: LD_VAR 0 1
73238: PUSH
73239: LD_VAR 0 6
73243: ARRAY
73244: PPUSH
73245: CALL 68262 0 2
73249: ST_TO_ADDR
// end ;
73250: GO 73157
73252: POP
73253: POP
// end ;
73254: LD_VAR 0 5
73258: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73259: LD_INT 0
73261: PPUSH
// if not vehicles or not parkingPoint then
73262: LD_VAR 0 1
73266: NOT
73267: IFTRUE 73276
73269: PUSH
73270: LD_VAR 0 2
73274: NOT
73275: OR
73276: IFFALSE 73280
// exit ;
73278: GO 73378
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73280: LD_ADDR_VAR 0 1
73284: PUSH
73285: LD_VAR 0 1
73289: PPUSH
73290: LD_INT 50
73292: PUSH
73293: EMPTY
73294: LIST
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: LD_INT 92
73301: PUSH
73302: LD_VAR 0 2
73306: PUSH
73307: LD_INT 1
73309: ARRAY
73310: PUSH
73311: LD_VAR 0 2
73315: PUSH
73316: LD_INT 2
73318: ARRAY
73319: PUSH
73320: LD_INT 8
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PPUSH
73337: CALL_OW 72
73341: ST_TO_ADDR
// if not vehicles then
73342: LD_VAR 0 1
73346: NOT
73347: IFFALSE 73351
// exit ;
73349: GO 73378
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73351: LD_VAR 0 1
73355: PPUSH
73356: LD_VAR 0 2
73360: PUSH
73361: LD_INT 1
73363: ARRAY
73364: PPUSH
73365: LD_VAR 0 2
73369: PUSH
73370: LD_INT 2
73372: ARRAY
73373: PPUSH
73374: CALL_OW 111
// end ;
73378: LD_VAR 0 3
73382: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73383: LD_INT 0
73385: PPUSH
73386: PPUSH
73387: PPUSH
// if not side or not area then
73388: LD_VAR 0 1
73392: NOT
73393: IFTRUE 73402
73395: PUSH
73396: LD_VAR 0 2
73400: NOT
73401: OR
73402: IFFALSE 73406
// exit ;
73404: GO 73525
// tmp := AreaToList ( area , 0 ) ;
73406: LD_ADDR_VAR 0 5
73410: PUSH
73411: LD_VAR 0 2
73415: PPUSH
73416: LD_INT 0
73418: PPUSH
73419: CALL_OW 517
73423: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73424: LD_ADDR_VAR 0 4
73428: PUSH
73429: DOUBLE
73430: LD_INT 1
73432: DEC
73433: ST_TO_ADDR
73434: LD_VAR 0 5
73438: PUSH
73439: LD_INT 1
73441: ARRAY
73442: PUSH
73443: FOR_TO
73444: IFFALSE 73523
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73446: LD_VAR 0 5
73450: PUSH
73451: LD_INT 1
73453: ARRAY
73454: PUSH
73455: LD_VAR 0 4
73459: ARRAY
73460: PPUSH
73461: LD_VAR 0 5
73465: PUSH
73466: LD_INT 2
73468: ARRAY
73469: PUSH
73470: LD_VAR 0 4
73474: ARRAY
73475: PPUSH
73476: CALL_OW 351
73480: IFFALSE 73521
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73482: LD_VAR 0 5
73486: PUSH
73487: LD_INT 1
73489: ARRAY
73490: PUSH
73491: LD_VAR 0 4
73495: ARRAY
73496: PPUSH
73497: LD_VAR 0 5
73501: PUSH
73502: LD_INT 2
73504: ARRAY
73505: PUSH
73506: LD_VAR 0 4
73510: ARRAY
73511: PPUSH
73512: LD_VAR 0 1
73516: PPUSH
73517: CALL_OW 244
// end ;
73521: GO 73443
73523: POP
73524: POP
// end ;
73525: LD_VAR 0 3
73529: RET
// export function UniqueArray ( array ) ; var i ; begin
73530: LD_INT 0
73532: PPUSH
73533: PPUSH
// result := [ ] ;
73534: LD_ADDR_VAR 0 2
73538: PUSH
73539: EMPTY
73540: ST_TO_ADDR
// if not array then
73541: LD_VAR 0 1
73545: NOT
73546: IFFALSE 73550
// exit ;
73548: GO 73611
// for i := 1 to array do
73550: LD_ADDR_VAR 0 3
73554: PUSH
73555: DOUBLE
73556: LD_INT 1
73558: DEC
73559: ST_TO_ADDR
73560: LD_VAR 0 1
73564: PUSH
73565: FOR_TO
73566: IFFALSE 73609
// if not array [ i ] in result then
73568: LD_VAR 0 1
73572: PUSH
73573: LD_VAR 0 3
73577: ARRAY
73578: PUSH
73579: LD_VAR 0 2
73583: IN
73584: NOT
73585: IFFALSE 73607
// result := Join ( result , i ) ;
73587: LD_ADDR_VAR 0 2
73591: PUSH
73592: LD_VAR 0 2
73596: PPUSH
73597: LD_VAR 0 3
73601: PPUSH
73602: CALL 68262 0 2
73606: ST_TO_ADDR
73607: GO 73565
73609: POP
73610: POP
// end ; end_of_file
73611: LD_VAR 0 2
73615: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
73616: PPOPN 6
73618: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73619: LD_INT 0
73621: PPUSH
// begin if not units then
73622: LD_VAR 0 1
73626: NOT
73627: IFFALSE 73631
// exit ;
73629: GO 73665
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
73631: LD_VAR 0 1
73635: PPUSH
73636: LD_VAR 0 2
73640: PPUSH
73641: LD_VAR 0 3
73645: PPUSH
73646: LD_VAR 0 4
73650: PPUSH
73651: LD_VAR 0 5
73655: PPUSH
73656: LD_VAR 0 6
73660: PPUSH
73661: CALL 30045 0 6
// end ;
73665: PPOPN 7
73667: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
73668: LD_EXP 30
73672: PUSH
73673: LD_INT 4
73675: EQUAL
73676: IFFALSE 73712
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73678: LD_STRING setGameDifficulty(
73680: PUSH
73681: LD_OWVAR 67
73685: STR
73686: PUSH
73687: LD_STRING )
73689: STR
73690: PPUSH
73691: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73695: LD_STRING displayDifficulty(
73697: PUSH
73698: LD_OWVAR 67
73702: STR
73703: PUSH
73704: LD_STRING )
73706: STR
73707: PPUSH
73708: CALL_OW 559
// end ; SOS_MapStart ( ) ;
73712: CALL 73741 0 0
// end ; end_of_file
73716: PPOPN 1
73718: END
// every 0 0$1 do
73719: GO 73721
73721: DISABLE
// begin enable ;
73722: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73723: LD_STRING updateTimer(
73725: PUSH
73726: LD_OWVAR 1
73730: STR
73731: PUSH
73732: LD_STRING );
73734: STR
73735: PPUSH
73736: CALL_OW 559
// end ;
73740: END
// export function SOS_MapStart ( ) ; begin
73741: LD_INT 0
73743: PPUSH
// UpdateFactoryWaypoints ( ) ;
73744: CALL 74675 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73748: CALL 74927 0 0
// ParseMultiDataToLua ( ) ;
73752: CALL 75074 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
73756: LD_STRING setSpecLogoNumber(
73758: PUSH
73759: LD_INT 2
73761: STR
73762: PUSH
73763: LD_STRING ,
73765: STR
73766: PUSH
73767: LD_INT 1
73769: STR
73770: PUSH
73771: LD_STRING )
73773: STR
73774: PPUSH
73775: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
73779: LD_STRING setSpecLogoNumber(
73781: PUSH
73782: LD_INT 3
73784: STR
73785: PUSH
73786: LD_STRING ,
73788: STR
73789: PUSH
73790: LD_INT 2
73792: STR
73793: PUSH
73794: LD_STRING )
73796: STR
73797: PPUSH
73798: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
73802: LD_STRING setSpecLogoNumber(
73804: PUSH
73805: LD_INT 4
73807: STR
73808: PUSH
73809: LD_STRING ,
73811: STR
73812: PUSH
73813: LD_INT 3
73815: STR
73816: PUSH
73817: LD_STRING )
73819: STR
73820: PPUSH
73821: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
73825: LD_STRING setSpecLogoNumber(
73827: PUSH
73828: LD_INT 5
73830: STR
73831: PUSH
73832: LD_STRING ,
73834: STR
73835: PUSH
73836: LD_INT 4
73838: STR
73839: PUSH
73840: LD_STRING )
73842: STR
73843: PPUSH
73844: CALL_OW 559
// end ;
73848: LD_VAR 0 1
73852: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
73853: LD_INT 0
73855: PPUSH
73856: PPUSH
73857: PPUSH
73858: PPUSH
73859: PPUSH
73860: PPUSH
73861: PPUSH
73862: PPUSH
73863: PPUSH
// for i := 1 to 8 do
73864: LD_ADDR_VAR 0 2
73868: PUSH
73869: DOUBLE
73870: LD_INT 1
73872: DEC
73873: ST_TO_ADDR
73874: LD_INT 8
73876: PUSH
73877: FOR_TO
73878: IFFALSE 74263
// begin if mpSidePositions [ i ] then
73880: LD_EXP 31
73884: PUSH
73885: LD_VAR 0 2
73889: ARRAY
73890: IFFALSE 74261
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
73892: LD_ADDR_VAR 0 7
73896: PUSH
73897: LD_INT 22
73899: PUSH
73900: LD_VAR 0 2
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 21
73911: PUSH
73912: LD_INT 1
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PPUSH
73923: CALL_OW 69
73927: PPUSH
73928: CALL 32296 0 1
73932: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73933: LD_ADDR_VAR 0 9
73937: PUSH
73938: LD_INT 22
73940: PUSH
73941: LD_VAR 0 2
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 2
73952: PUSH
73953: LD_INT 30
73955: PUSH
73956: LD_INT 0
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 30
73965: PUSH
73966: LD_INT 1
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 69
73986: ST_TO_ADDR
// crates := 0 ;
73987: LD_ADDR_VAR 0 4
73991: PUSH
73992: LD_INT 0
73994: ST_TO_ADDR
// oil := 0 ;
73995: LD_ADDR_VAR 0 5
73999: PUSH
74000: LD_INT 0
74002: ST_TO_ADDR
// sib := 0 ;
74003: LD_ADDR_VAR 0 6
74007: PUSH
74008: LD_INT 0
74010: ST_TO_ADDR
// if bases then
74011: LD_VAR 0 9
74015: IFFALSE 74121
// begin for j in bases do
74017: LD_ADDR_VAR 0 3
74021: PUSH
74022: LD_VAR 0 9
74026: PUSH
74027: FOR_IN
74028: IFFALSE 74119
// begin base := GetBase ( j ) ;
74030: LD_ADDR_VAR 0 8
74034: PUSH
74035: LD_VAR 0 3
74039: PPUSH
74040: CALL_OW 274
74044: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
74045: LD_ADDR_VAR 0 4
74049: PUSH
74050: LD_VAR 0 4
74054: PUSH
74055: LD_VAR 0 8
74059: PPUSH
74060: LD_INT 1
74062: PPUSH
74063: CALL_OW 275
74067: PLUS
74068: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
74069: LD_ADDR_VAR 0 5
74073: PUSH
74074: LD_VAR 0 5
74078: PUSH
74079: LD_VAR 0 8
74083: PPUSH
74084: LD_INT 2
74086: PPUSH
74087: CALL_OW 275
74091: PLUS
74092: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
74093: LD_ADDR_VAR 0 6
74097: PUSH
74098: LD_VAR 0 6
74102: PUSH
74103: LD_VAR 0 8
74107: PPUSH
74108: LD_INT 3
74110: PPUSH
74111: CALL_OW 275
74115: PLUS
74116: ST_TO_ADDR
// end ;
74117: GO 74027
74119: POP
74120: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
74121: LD_STRING setSpecText(
74123: PUSH
74124: LD_VAR 0 2
74128: STR
74129: PUSH
74130: LD_STRING ,
74132: STR
74133: PUSH
74134: LD_INT 2
74136: STR
74137: PUSH
74138: LD_STRING ,
74140: STR
74141: PUSH
74142: LD_VAR 0 4
74146: STR
74147: PUSH
74148: LD_STRING )
74150: STR
74151: PPUSH
74152: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
74156: LD_STRING setSpecText(
74158: PUSH
74159: LD_VAR 0 2
74163: STR
74164: PUSH
74165: LD_STRING ,
74167: STR
74168: PUSH
74169: LD_INT 3
74171: STR
74172: PUSH
74173: LD_STRING ,
74175: STR
74176: PUSH
74177: LD_VAR 0 5
74181: STR
74182: PUSH
74183: LD_STRING )
74185: STR
74186: PPUSH
74187: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
74191: LD_STRING setSpecText(
74193: PUSH
74194: LD_VAR 0 2
74198: STR
74199: PUSH
74200: LD_STRING ,
74202: STR
74203: PUSH
74204: LD_INT 4
74206: STR
74207: PUSH
74208: LD_STRING ,
74210: STR
74211: PUSH
74212: LD_VAR 0 6
74216: STR
74217: PUSH
74218: LD_STRING )
74220: STR
74221: PPUSH
74222: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
74226: LD_STRING setSpecText(
74228: PUSH
74229: LD_VAR 0 2
74233: STR
74234: PUSH
74235: LD_STRING ,
74237: STR
74238: PUSH
74239: LD_INT 5
74241: STR
74242: PUSH
74243: LD_STRING ,
74245: STR
74246: PUSH
74247: LD_VAR 0 7
74251: STR
74252: PUSH
74253: LD_STRING )
74255: STR
74256: PPUSH
74257: CALL_OW 559
// end ; end ;
74261: GO 73877
74263: POP
74264: POP
// end ;
74265: LD_VAR 0 1
74269: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
74270: LD_INT 2
74272: PUSH
74273: LD_INT 30
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 30
74285: PUSH
74286: LD_INT 1
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: PPUSH
74298: CALL_OW 69
74302: IFFALSE 74312
74304: GO 74306
74306: DISABLE
// begin enable ;
74307: ENABLE
// UpdateSpectatorBar ;
74308: CALL 73853 0 0
// end ;
74312: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74313: LD_INT 0
74315: PPUSH
// end ;
74316: LD_VAR 0 12
74320: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74321: LD_INT 0
74323: PPUSH
74324: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74325: LD_VAR 0 1
74329: NOT
74330: IFTRUE 74349
74332: PUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: LD_VAR 0 3
74342: PPUSH
74343: CALL_OW 488
74347: NOT
74348: OR
74349: IFTRUE 74384
74351: PUSH
74352: LD_VAR 0 1
74356: PPUSH
74357: CALL_OW 266
74361: PUSH
74362: LD_INT 3
74364: NONEQUAL
74365: IFFALSE 74383
74367: PUSH
74368: LD_VAR 0 1
74372: PPUSH
74373: CALL_OW 247
74377: PUSH
74378: LD_INT 1
74380: EQUAL
74381: NOT
74382: AND
74383: OR
74384: IFFALSE 74388
// exit ;
74386: GO 74670
// if GetType ( factory ) = unit_human then
74388: LD_VAR 0 1
74392: PPUSH
74393: CALL_OW 247
74397: PUSH
74398: LD_INT 1
74400: EQUAL
74401: IFFALSE 74418
// factory := IsInUnit ( factory ) ;
74403: LD_ADDR_VAR 0 1
74407: PUSH
74408: LD_VAR 0 1
74412: PPUSH
74413: CALL_OW 310
74417: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74418: LD_VAR 0 1
74422: PPUSH
74423: CALL_OW 266
74427: PUSH
74428: LD_INT 3
74430: NONEQUAL
74431: IFFALSE 74435
// exit ;
74433: GO 74670
// for i := 1 to Count ( factoryWaypoints ) do
74435: LD_ADDR_VAR 0 5
74439: PUSH
74440: DOUBLE
74441: LD_INT 1
74443: DEC
74444: ST_TO_ADDR
74445: LD_EXP 70
74449: PPUSH
74450: CALL 32296 0 1
74454: PUSH
74455: FOR_TO
74456: IFFALSE 74618
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74458: LD_VAR 0 2
74462: PPUSH
74463: LD_VAR 0 3
74467: PPUSH
74468: CALL_OW 428
74472: PUSH
74473: LD_EXP 70
74477: PUSH
74478: LD_VAR 0 5
74482: ARRAY
74483: PUSH
74484: LD_INT 2
74486: ARRAY
74487: EQUAL
74488: IFFALSE 74520
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74490: LD_ADDR_EXP 70
74494: PUSH
74495: LD_EXP 70
74499: PPUSH
74500: LD_VAR 0 5
74504: PPUSH
74505: CALL_OW 3
74509: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74510: CALL 74675 0 0
// exit ;
74514: POP
74515: POP
74516: GO 74670
// end else
74518: GO 74616
// if factory = factoryWaypoints [ i ] [ 2 ] then
74520: LD_VAR 0 1
74524: PUSH
74525: LD_EXP 70
74529: PUSH
74530: LD_VAR 0 5
74534: ARRAY
74535: PUSH
74536: LD_INT 2
74538: ARRAY
74539: EQUAL
74540: IFFALSE 74616
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74542: LD_ADDR_EXP 70
74546: PUSH
74547: LD_EXP 70
74551: PPUSH
74552: LD_VAR 0 5
74556: PPUSH
74557: CALL_OW 3
74561: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74562: LD_ADDR_EXP 70
74566: PUSH
74567: LD_EXP 70
74571: PPUSH
74572: LD_VAR 0 1
74576: PPUSH
74577: CALL_OW 255
74581: PUSH
74582: LD_VAR 0 1
74586: PUSH
74587: LD_VAR 0 2
74591: PUSH
74592: LD_VAR 0 3
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: PPUSH
74603: CALL 68262 0 2
74607: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74608: CALL 74675 0 0
// exit ;
74612: POP
74613: POP
74614: GO 74670
// end ; end ;
74616: GO 74455
74618: POP
74619: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74620: LD_ADDR_EXP 70
74624: PUSH
74625: LD_EXP 70
74629: PPUSH
74630: LD_VAR 0 1
74634: PPUSH
74635: CALL_OW 255
74639: PUSH
74640: LD_VAR 0 1
74644: PUSH
74645: LD_VAR 0 2
74649: PUSH
74650: LD_VAR 0 3
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: PPUSH
74661: CALL 68262 0 2
74665: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74666: CALL 74675 0 0
// end ;
74670: LD_VAR 0 4
74674: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74675: LD_INT 0
74677: PPUSH
74678: PPUSH
74679: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74680: LD_STRING resetFactoryWaypoint();
74682: PPUSH
74683: CALL_OW 559
// if factoryWaypoints then
74687: LD_EXP 70
74691: IFFALSE 74812
// begin list := factoryWaypoints ;
74693: LD_ADDR_VAR 0 3
74697: PUSH
74698: LD_EXP 70
74702: ST_TO_ADDR
// for i := 1 to list do
74703: LD_ADDR_VAR 0 2
74707: PUSH
74708: DOUBLE
74709: LD_INT 1
74711: DEC
74712: ST_TO_ADDR
74713: LD_VAR 0 3
74717: PUSH
74718: FOR_TO
74719: IFFALSE 74810
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74721: LD_STRING setFactoryWaypointXY(
74723: PUSH
74724: LD_VAR 0 3
74728: PUSH
74729: LD_VAR 0 2
74733: ARRAY
74734: PUSH
74735: LD_INT 1
74737: ARRAY
74738: STR
74739: PUSH
74740: LD_STRING ,
74742: STR
74743: PUSH
74744: LD_VAR 0 3
74748: PUSH
74749: LD_VAR 0 2
74753: ARRAY
74754: PUSH
74755: LD_INT 2
74757: ARRAY
74758: STR
74759: PUSH
74760: LD_STRING ,
74762: STR
74763: PUSH
74764: LD_VAR 0 3
74768: PUSH
74769: LD_VAR 0 2
74773: ARRAY
74774: PUSH
74775: LD_INT 3
74777: ARRAY
74778: STR
74779: PUSH
74780: LD_STRING ,
74782: STR
74783: PUSH
74784: LD_VAR 0 3
74788: PUSH
74789: LD_VAR 0 2
74793: ARRAY
74794: PUSH
74795: LD_INT 4
74797: ARRAY
74798: STR
74799: PUSH
74800: LD_STRING )
74802: STR
74803: PPUSH
74804: CALL_OW 559
74808: GO 74718
74810: POP
74811: POP
// end ; end ;
74812: LD_VAR 0 1
74816: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74817: LD_INT 0
74819: PPUSH
// if HexInfo ( x , y ) = warehouse then
74820: LD_VAR 0 2
74824: PPUSH
74825: LD_VAR 0 3
74829: PPUSH
74830: CALL_OW 428
74834: PUSH
74835: LD_VAR 0 1
74839: EQUAL
74840: IFFALSE 74867
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74842: LD_ADDR_EXP 72
74846: PUSH
74847: LD_EXP 72
74851: PPUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_INT 0
74859: PPUSH
74860: CALL_OW 1
74864: ST_TO_ADDR
74865: GO 74918
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74867: LD_ADDR_EXP 72
74871: PUSH
74872: LD_EXP 72
74876: PPUSH
74877: LD_VAR 0 1
74881: PPUSH
74882: LD_VAR 0 1
74886: PPUSH
74887: CALL_OW 255
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_VAR 0 2
74901: PUSH
74902: LD_VAR 0 3
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: PPUSH
74913: CALL_OW 1
74917: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74918: CALL 74927 0 0
// end ;
74922: LD_VAR 0 4
74926: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74927: LD_INT 0
74929: PPUSH
74930: PPUSH
74931: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74932: LD_STRING resetWarehouseGatheringPoints();
74934: PPUSH
74935: CALL_OW 559
// if warehouseGatheringPoints then
74939: LD_EXP 72
74943: IFFALSE 75069
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74945: LD_ADDR_VAR 0 3
74949: PUSH
74950: LD_EXP 72
74954: PPUSH
74955: CALL 72196 0 1
74959: ST_TO_ADDR
// for i := 1 to list do
74960: LD_ADDR_VAR 0 2
74964: PUSH
74965: DOUBLE
74966: LD_INT 1
74968: DEC
74969: ST_TO_ADDR
74970: LD_VAR 0 3
74974: PUSH
74975: FOR_TO
74976: IFFALSE 75067
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74978: LD_STRING setWarehouseGatheringPointXY(
74980: PUSH
74981: LD_VAR 0 3
74985: PUSH
74986: LD_VAR 0 2
74990: ARRAY
74991: PUSH
74992: LD_INT 1
74994: ARRAY
74995: STR
74996: PUSH
74997: LD_STRING ,
74999: STR
75000: PUSH
75001: LD_VAR 0 3
75005: PUSH
75006: LD_VAR 0 2
75010: ARRAY
75011: PUSH
75012: LD_INT 2
75014: ARRAY
75015: STR
75016: PUSH
75017: LD_STRING ,
75019: STR
75020: PUSH
75021: LD_VAR 0 3
75025: PUSH
75026: LD_VAR 0 2
75030: ARRAY
75031: PUSH
75032: LD_INT 3
75034: ARRAY
75035: STR
75036: PUSH
75037: LD_STRING ,
75039: STR
75040: PUSH
75041: LD_VAR 0 3
75045: PUSH
75046: LD_VAR 0 2
75050: ARRAY
75051: PUSH
75052: LD_INT 4
75054: ARRAY
75055: STR
75056: PUSH
75057: LD_STRING )
75059: STR
75060: PPUSH
75061: CALL_OW 559
75065: GO 74975
75067: POP
75068: POP
// end ; end ;
75069: LD_VAR 0 1
75073: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
75074: LD_INT 0
75076: PPUSH
75077: PPUSH
// if not mpSidePositions then
75078: LD_EXP 31
75082: NOT
75083: IFFALSE 75087
// exit ;
75085: GO 75158
// result :=  ;
75087: LD_ADDR_VAR 0 1
75091: PUSH
75092: LD_STRING 
75094: ST_TO_ADDR
// for i := 1 to 8 do
75095: LD_ADDR_VAR 0 2
75099: PUSH
75100: DOUBLE
75101: LD_INT 1
75103: DEC
75104: ST_TO_ADDR
75105: LD_INT 8
75107: PUSH
75108: FOR_TO
75109: IFFALSE 75139
// begin result := result & mpSidePositions [ i ] & ; ;
75111: LD_ADDR_VAR 0 1
75115: PUSH
75116: LD_VAR 0 1
75120: PUSH
75121: LD_EXP 31
75125: PUSH
75126: LD_VAR 0 2
75130: ARRAY
75131: STR
75132: PUSH
75133: LD_STRING ;
75135: STR
75136: ST_TO_ADDR
// end ;
75137: GO 75108
75139: POP
75140: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
75141: LD_STRING setMultiplayerRealPosition("
75143: PUSH
75144: LD_VAR 0 1
75148: STR
75149: PUSH
75150: LD_STRING ");
75152: STR
75153: PPUSH
75154: CALL_OW 559
// end ;
75158: LD_VAR 0 1
75162: RET
