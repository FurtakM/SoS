// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 30
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 17
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 15
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 18
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 16
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 30
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 17
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 15
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 18
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 16
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 17
 285: PUSH
 286: LD_EXP 17
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 16
 308: PUSH
 309: LD_EXP 16
 313: PPUSH
 314: LD_EXP 15
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 16
 329: PUSH
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 20
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 17
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 20
 420: PUSH
 421: LD_EXP 20
 425: PPUSH
 426: LD_EXP 17
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 19
 455: PUSH
 456: LD_EXP 15
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 696
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 32
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 33
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 34
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 35
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 36
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 37
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 38
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 39
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 40
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 41
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 42
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 43
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 44
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 45
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 681: LD_ADDR_EXP 31
 685: PUSH
 686: LD_INT 21
 688: PPUSH
 689: CALL_OW 426
 693: ST_TO_ADDR
// end else
 694: GO 836
// begin Randomize ;
 696: CALL_OW 10
// def_base_level := 2 ;
 700: LD_ADDR_EXP 32
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_amount_of_people := 0 ;
 708: LD_ADDR_EXP 33
 712: PUSH
 713: LD_INT 0
 715: ST_TO_ADDR
// def_skill_level := 1 ;
 716: LD_ADDR_EXP 34
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// def_starting_resources := 2 ;
 724: LD_ADDR_EXP 35
 728: PUSH
 729: LD_INT 2
 731: ST_TO_ADDR
// def_shipments_density := 1 ;
 732: LD_ADDR_EXP 36
 736: PUSH
 737: LD_INT 1
 739: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 740: LD_ADDR_EXP 37
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 748: LD_ADDR_EXP 38
 752: PUSH
 753: LD_INT 1
 755: ST_TO_ADDR
// def_shared_vision := 1 ;
 756: LD_ADDR_EXP 39
 760: PUSH
 761: LD_INT 1
 763: ST_TO_ADDR
// def_morale_flags := 1 ;
 764: LD_ADDR_EXP 40
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// def_siberite_detection := 1 ;
 772: LD_ADDR_EXP 41
 776: PUSH
 777: LD_INT 1
 779: ST_TO_ADDR
// def_people_respawning := 2 ;
 780: LD_ADDR_EXP 42
 784: PUSH
 785: LD_INT 2
 787: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 788: LD_ADDR_EXP 43
 792: PUSH
 793: LD_INT 3
 795: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 796: LD_ADDR_EXP 1
 800: PUSH
 801: LD_INT 0
 803: ST_TO_ADDR
// def_public_score := 0 ;
 804: LD_ADDR_EXP 2
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 812: LD_ADDR_EXP 44
 816: PUSH
 817: LD_INT 0
 819: ST_TO_ADDR
// def_builduptime := 0 ;
 820: LD_ADDR_EXP 45
 824: PUSH
 825: LD_INT 0
 827: ST_TO_ADDR
// def_game_rules := 1 ;
 828: LD_ADDR_EXP 31
 832: PUSH
 833: LD_INT 1
 835: ST_TO_ADDR
// end ; InitGameRules ;
 836: CALL 9843 0 0
// if ( Game_Type = 5 ) then
 840: LD_EXP 30
 844: PUSH
 845: LD_INT 5
 847: EQUAL
 848: IFFALSE 877
// begin def_base_level := 1 ;
 850: LD_ADDR_EXP 32
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 858: LD_ADDR_EXP 37
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 866: LD_ADDR_EXP 38
 870: PUSH
 871: LD_INT 0
 873: ST_TO_ADDR
// disable ( 10 ) ;
 874: LD_INT 10
 876: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 877: LD_ADDR_EXP 3
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 1
 887: PUSH
 888: LD_INT 1
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: PUSH
 896: LD_EXP 32
 900: PUSH
 901: LD_INT 1
 903: PLUS
 904: ARRAY
 905: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 906: LD_ADDR_EXP 4
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: LD_INT 0
 916: PUSH
 917: LD_INT 2
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: LD_EXP 32
 929: PUSH
 930: LD_INT 1
 932: PLUS
 933: ARRAY
 934: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 935: LD_ADDR_EXP 5
 939: PUSH
 940: LD_INT 9
 942: PUSH
 943: LD_INT 12
 945: PUSH
 946: LD_INT 15
 948: PUSH
 949: LD_INT 24
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: PUSH
 958: LD_EXP 33
 962: PUSH
 963: LD_INT 1
 965: PLUS
 966: ARRAY
 967: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 968: LD_ADDR_EXP 6
 972: PUSH
 973: LD_INT 2
 975: PUSH
 976: LD_INT 3
 978: PUSH
 979: LD_INT 4
 981: PUSH
 982: LD_INT 5
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_EXP 34
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1001: LD_EXP 30
1005: PUSH
1006: LD_INT 5
1008: EQUAL
1009: IFFALSE 1127
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1011: LD_ADDR_EXP 8
1015: PUSH
1016: LD_INT 1000
1018: PUSH
1019: LD_INT 100
1021: PUSH
1022: LD_INT 100
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 2000
1032: PUSH
1033: LD_INT 200
1035: PUSH
1036: LD_INT 200
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 5000
1046: PUSH
1047: LD_INT 500
1049: PUSH
1050: LD_INT 500
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 10000
1060: PUSH
1061: LD_INT 1000
1063: PUSH
1064: LD_INT 1000
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: PUSH
1072: LD_INT 25000
1074: PUSH
1075: LD_INT 2500
1077: PUSH
1078: LD_INT 2500
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 50000
1088: PUSH
1089: LD_INT 5000
1091: PUSH
1092: LD_INT 5000
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_EXP 35
1112: PUSH
1113: LD_INT 1
1115: PLUS
1116: ARRAY
1117: ST_TO_ADDR
// starting_crates := [ ] ;
1118: LD_ADDR_EXP 7
1122: PUSH
1123: EMPTY
1124: ST_TO_ADDR
// end else
1125: GO 1273
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1127: LD_ADDR_EXP 8
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 0
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: LD_INT 0
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 50
1162: PUSH
1163: LD_INT 20
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 80
1176: PUSH
1177: LD_INT 40
1179: PUSH
1180: LD_INT 20
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_EXP 35
1198: PUSH
1199: LD_INT 1
1201: PLUS
1202: ARRAY
1203: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1204: LD_ADDR_EXP 7
1208: PUSH
1209: LD_INT 10
1211: PUSH
1212: EMPTY
1213: LIST
1214: PUSH
1215: LD_INT 7
1217: PUSH
1218: LD_INT 14
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PUSH
1225: LD_INT 6
1227: PUSH
1228: LD_INT 12
1230: PUSH
1231: LD_INT 18
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 10
1244: PUSH
1245: LD_INT 15
1247: PUSH
1248: LD_INT 20
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_EXP 35
1267: PUSH
1268: LD_INT 1
1270: PLUS
1271: ARRAY
1272: ST_TO_ADDR
// end ; shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1273: LD_ADDR_EXP 9
1277: PUSH
1278: LD_INT 150
1280: PUSH
1281: LD_INT 125
1283: PUSH
1284: LD_INT 100
1286: PUSH
1287: LD_INT 50
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: LD_EXP 36
1300: PUSH
1301: LD_INT 1
1303: PLUS
1304: ARRAY
1305: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1306: LD_ADDR_EXP 13
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 10500
1316: PUSH
1317: LD_INT 6300
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: PUSH
1325: LD_EXP 42
1329: PUSH
1330: LD_INT 1
1332: PLUS
1333: ARRAY
1334: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1335: LD_ADDR_EXP 14
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: LD_INT 31500
1345: PUSH
1346: LD_INT 10500
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: LD_EXP 42
1358: PUSH
1359: LD_INT 1
1361: PLUS
1362: ARRAY
1363: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1364: LD_ADDR_EXP 11
1368: PUSH
1369: LD_INT 0
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 6
1377: PUSH
1378: LD_INT 9
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: PUSH
1387: LD_EXP 43
1391: PUSH
1392: LD_INT 1
1394: PLUS
1395: ARRAY
1396: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1397: LD_ADDR_EXP 12
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 50
1407: PUSH
1408: LD_INT 80
1410: PUSH
1411: LD_INT 100
1413: PUSH
1414: LD_INT 130
1416: PUSH
1417: LD_INT 150
1419: PUSH
1420: LD_INT 200
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_EXP 1
1436: PUSH
1437: LD_INT 1
1439: PLUS
1440: ARRAY
1441: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1442: LD_ADDR_EXP 10
1446: PUSH
1447: LD_INT 1
1449: NEG
1450: PUSH
1451: LD_INT 350
1453: PUSH
1454: LD_INT 700
1456: PUSH
1457: LD_INT 1400
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: PUSH
1470: LD_EXP 40
1474: PUSH
1475: LD_INT 1
1477: PLUS
1478: ARRAY
1479: ST_TO_ADDR
// battle_flags_id := [ ] ;
1480: LD_ADDR_EXP 28
1484: PUSH
1485: EMPTY
1486: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1487: LD_ADDR_EXP 29
1491: PUSH
1492: LD_INT 8
1494: PUSH
1495: LD_INT 9
1497: PUSH
1498: LD_INT 10
1500: PUSH
1501: LD_INT 11
1503: PUSH
1504: LD_INT 12
1506: PUSH
1507: LD_INT 13
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: ST_TO_ADDR
// end ;
1518: LD_VAR 0 1
1522: RET
// function init_map ; var i , j ; begin
1523: LD_INT 0
1525: PPUSH
1526: PPUSH
1527: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1528: LD_ADDR_EXP 24
1532: PUSH
1533: LD_INT 28
1535: PUSH
1536: LD_INT 22
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 69
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 138
1555: PUSH
1556: LD_INT 27
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 180
1565: PUSH
1566: LD_INT 104
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 138
1575: PUSH
1576: LD_INT 137
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 76
1585: PUSH
1586: LD_INT 115
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1601: LD_ADDR_EXP 25
1605: PUSH
1606: LD_INT 31
1608: PUSH
1609: LD_INT 38
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 34
1618: PUSH
1619: LD_INT 21
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 58
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 82
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 122
1656: PUSH
1657: LD_INT 18
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 152
1666: PUSH
1667: LD_INT 43
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 174
1680: PUSH
1681: LD_INT 90
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 180
1690: PUSH
1691: LD_INT 120
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 152
1704: PUSH
1705: LD_INT 136
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 130
1714: PUSH
1715: LD_INT 136
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 89
1728: PUSH
1729: LD_INT 116
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 59
1738: PUSH
1739: LD_INT 89
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1758: LD_ADDR_EXP 26
1762: PUSH
1763: LD_INT 28
1765: PUSH
1766: LD_INT 26
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 73
1775: PUSH
1776: LD_INT 3
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 133
1785: PUSH
1786: LD_INT 22
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 180
1795: PUSH
1796: LD_INT 110
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 142
1805: PUSH
1806: LD_INT 137
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 72
1815: PUSH
1816: LD_INT 112
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
1831: LD_ADDR_EXP 27
1835: PUSH
1836: LD_INT 27
1838: PUSH
1839: LD_INT 39
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 30
1848: PUSH
1849: LD_INT 16
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 57
1862: PUSH
1863: LD_INT 8
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 87
1872: PUSH
1873: LD_INT 8
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 128
1886: PUSH
1887: LD_INT 19
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 146
1896: PUSH
1897: LD_INT 36
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 176
1910: PUSH
1911: LD_INT 121
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 179
1920: PUSH
1921: LD_INT 96
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 153
1934: PUSH
1935: LD_INT 132
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 124
1944: PUSH
1945: LD_INT 133
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 85
1958: PUSH
1959: LD_INT 117
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 62
1968: PUSH
1969: LD_INT 96
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
1988: LD_ADDR_EXP 21
1992: PUSH
1993: LD_INT 53
1995: PUSH
1996: LD_INT 42
1998: PUSH
1999: LD_INT 5
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 78
2009: PUSH
2010: LD_INT 18
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 129
2023: PUSH
2024: LD_INT 43
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 155
2037: PUSH
2038: LD_INT 96
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 130
2051: PUSH
2052: LD_INT 120
2054: PUSH
2055: LD_INT 3
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 82
2065: PUSH
2066: LD_INT 98
2068: PUSH
2069: LD_INT 3
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// for i in depot_def do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 21
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2170
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2098: LD_ADDR_EXP 23
2102: PUSH
2103: LD_EXP 23
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 1
2115: ARRAY
2116: PPUSH
2117: LD_VAR 0 2
2121: PUSH
2122: LD_INT 3
2124: ARRAY
2125: PPUSH
2126: LD_INT 10
2128: PPUSH
2129: CALL_OW 272
2133: PUSH
2134: LD_VAR 0 2
2138: PUSH
2139: LD_INT 2
2141: ARRAY
2142: PPUSH
2143: LD_VAR 0 2
2147: PUSH
2148: LD_INT 3
2150: ARRAY
2151: PPUSH
2152: LD_INT 10
2154: PPUSH
2155: CALL_OW 273
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: ADD
2167: ST_TO_ADDR
2168: GO 2095
2170: POP
2171: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2172: LD_ADDR_EXP 22
2176: PUSH
2177: LD_INT 65
2179: PUSH
2180: LD_INT 53
2182: PUSH
2183: LD_INT 5
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 65
2193: PUSH
2194: LD_INT 40
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 76
2211: PUSH
2212: LD_INT 28
2214: PUSH
2215: LD_INT 0
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 89
2225: PUSH
2226: LD_INT 28
2228: PUSH
2229: LD_INT 5
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 115
2243: PUSH
2244: LD_INT 41
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 128
2257: PUSH
2258: LD_INT 54
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 143
2275: PUSH
2276: LD_INT 82
2278: PUSH
2279: LD_INT 2
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 143
2289: PUSH
2290: LD_INT 95
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 131
2307: PUSH
2308: LD_INT 108
2310: PUSH
2311: LD_INT 3
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 118
2321: PUSH
2322: LD_INT 108
2324: PUSH
2325: LD_INT 2
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 80
2339: PUSH
2340: LD_INT 85
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 92
2353: PUSH
2354: LD_INT 97
2356: PUSH
2357: LD_INT 4
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
2377: LD_ADDR_VAR 0 2
2381: PUSH
2382: LD_EXP 17
2386: PUSH
2387: LD_INT 0
2389: PUSH
2390: EMPTY
2391: LIST
2392: DIFF
2393: PUSH
2394: FOR_IN
2395: IFFALSE 2492
// if def_extra_oil_deposits then
2397: LD_EXP 37
2401: IFFALSE 2453
// for j in extra_oil_deposits_locations [ i ] do
2403: LD_ADDR_VAR 0 3
2407: PUSH
2408: LD_EXP 25
2412: PUSH
2413: LD_VAR 0 2
2417: ARRAY
2418: PUSH
2419: FOR_IN
2420: IFFALSE 2449
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 1
2429: ARRAY
2430: PPUSH
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 2
2438: ARRAY
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 62
2447: GO 2419
2449: POP
2450: POP
2451: GO 2490
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2453: LD_EXP 24
2457: PUSH
2458: LD_VAR 0 2
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_EXP 24
2472: PUSH
2473: LD_VAR 0 2
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 2
2485: PPUSH
2486: CALL_OW 62
2490: GO 2394
2492: POP
2493: POP
// if def_extra_sib_deposits then
2494: LD_EXP 38
2498: IFFALSE 2621
// for i in ( Side_Positions diff [ 0 ] ) do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: LD_EXP 17
2509: PUSH
2510: LD_INT 0
2512: PUSH
2513: EMPTY
2514: LIST
2515: DIFF
2516: PUSH
2517: FOR_IN
2518: IFFALSE 2619
// if def_extra_sib_deposits = 2 then
2520: LD_EXP 38
2524: PUSH
2525: LD_INT 2
2527: EQUAL
2528: IFFALSE 2580
// for j in extra_sib_deposits_locations [ i ] do
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_EXP 27
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: PUSH
2546: FOR_IN
2547: IFFALSE 2576
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2549: LD_VAR 0 3
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PPUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 62
2574: GO 2546
2576: POP
2577: POP
2578: GO 2617
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2580: LD_EXP 26
2584: PUSH
2585: LD_VAR 0 2
2589: ARRAY
2590: PUSH
2591: LD_INT 1
2593: ARRAY
2594: PPUSH
2595: LD_EXP 26
2599: PUSH
2600: LD_VAR 0 2
2604: ARRAY
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL_OW 62
2617: GO 2517
2619: POP
2620: POP
// end ;
2621: LD_VAR 0 1
2625: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2626: LD_INT 0
2628: PPUSH
2629: PPUSH
2630: PPUSH
// if not Team_Game then
2631: LD_EXP 19
2635: NOT
2636: IFFALSE 2734
// begin for i = 1 to 8 do
2638: LD_ADDR_VAR 0 2
2642: PUSH
2643: DOUBLE
2644: LD_INT 1
2646: DEC
2647: ST_TO_ADDR
2648: LD_INT 8
2650: PUSH
2651: FOR_TO
2652: IFFALSE 2730
// for j = 1 to 8 do
2654: LD_ADDR_VAR 0 3
2658: PUSH
2659: DOUBLE
2660: LD_INT 1
2662: DEC
2663: ST_TO_ADDR
2664: LD_INT 8
2666: PUSH
2667: FOR_TO
2668: IFFALSE 2726
// if i <> j then
2670: LD_VAR 0 2
2674: PUSH
2675: LD_VAR 0 3
2679: NONEQUAL
2680: IFFALSE 2704
// SetAttitude ( i , j , att_neutral , true ) else
2682: LD_VAR 0 2
2686: PPUSH
2687: LD_VAR 0 3
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: CALL_OW 80
2702: GO 2724
// SetAttitude ( i , j , att_friend , true ) ;
2704: LD_VAR 0 2
2708: PPUSH
2709: LD_VAR 0 3
2713: PPUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: CALL_OW 80
2724: GO 2667
2726: POP
2727: POP
2728: GO 2651
2730: POP
2731: POP
// end else
2732: GO 2909
// begin if def_shared_vision then
2734: LD_EXP 39
2738: IFFALSE 2803
// begin for i in Teams do
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: LD_EXP 16
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2801
// for j = 2 to i do
2753: LD_ADDR_VAR 0 3
2757: PUSH
2758: DOUBLE
2759: LD_INT 2
2761: DEC
2762: ST_TO_ADDR
2763: LD_VAR 0 2
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2797
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2771: LD_VAR 0 2
2775: PUSH
2776: LD_VAR 0 3
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: ARRAY
2790: PPUSH
2791: CALL_OW 343
2795: GO 2768
2797: POP
2798: POP
2799: GO 2750
2801: POP
2802: POP
// end ; for i = 1 to 8 do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 8
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2907
// for j = 1 to 8 do
2819: LD_ADDR_VAR 0 3
2823: PUSH
2824: DOUBLE
2825: LD_INT 1
2827: DEC
2828: ST_TO_ADDR
2829: LD_INT 8
2831: PUSH
2832: FOR_TO
2833: IFFALSE 2903
// if Side_Teams [ i ] = Side_Teams [ j ] then
2835: LD_EXP 15
2839: PUSH
2840: LD_VAR 0 2
2844: ARRAY
2845: PUSH
2846: LD_EXP 15
2850: PUSH
2851: LD_VAR 0 3
2855: ARRAY
2856: EQUAL
2857: IFFALSE 2881
// SetAttitude ( i , j , att_friend , true ) else
2859: LD_VAR 0 2
2863: PPUSH
2864: LD_VAR 0 3
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: CALL_OW 80
2879: GO 2901
// SetAttitude ( i , j , att_enemy , true ) ;
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_VAR 0 3
2890: PPUSH
2891: LD_INT 2
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: CALL_OW 80
2901: GO 2832
2903: POP
2904: POP
2905: GO 2816
2907: POP
2908: POP
// end ; end ;
2909: LD_VAR 0 1
2913: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2914: LD_INT 0
2916: PPUSH
2917: PPUSH
2918: PPUSH
2919: PPUSH
// result := [ ] ;
2920: LD_ADDR_VAR 0 7
2924: PUSH
2925: EMPTY
2926: ST_TO_ADDR
// for i := 1 to count do
2927: LD_ADDR_VAR 0 8
2931: PUSH
2932: DOUBLE
2933: LD_INT 1
2935: DEC
2936: ST_TO_ADDR
2937: LD_VAR 0 1
2941: PUSH
2942: FOR_TO
2943: IFFALSE 3361
// begin uc_direction := Rand ( 0 , 5 ) ;
2945: LD_ADDR_OWVAR 24
2949: PUSH
2950: LD_INT 0
2952: PPUSH
2953: LD_INT 5
2955: PPUSH
2956: CALL_OW 12
2960: ST_TO_ADDR
// if commander then
2961: LD_LOC 1
2965: IFFALSE 3074
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2967: LD_ADDR_OWVAR 26
2971: PUSH
2972: LD_OWVAR 19
2976: PUSH
2977: LD_OWVAR 20
2981: ARRAY
2982: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 2
2988: PPUSH
2989: CALL_OW 12
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_EXP 6
3003: PUSH
3004: LD_INT 2
3006: PLUS
3007: PPUSH
3008: CALL_OW 380
// hc_importance := 105 ;
3012: LD_ADDR_OWVAR 32
3016: PUSH
3017: LD_INT 105
3019: ST_TO_ADDR
// commander := false ;
3020: LD_ADDR_LOC 1
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// if Multiplayer then
3028: LD_OWVAR 4
3032: IFFALSE 3072
// begin hc_gallery := MULTIAVATARS ;
3034: LD_ADDR_OWVAR 33
3038: PUSH
3039: LD_STRING MULTIAVATARS
3041: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3042: LD_ADDR_OWVAR 34
3046: PUSH
3047: LD_OWVAR 20
3051: PPUSH
3052: CALL_OW 525
3056: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3057: LD_ADDR_OWVAR 27
3061: PUSH
3062: LD_OWVAR 20
3066: PPUSH
3067: CALL_OW 526
3071: ST_TO_ADDR
// end ; end else
3072: GO 3137
// begin hc_name :=  ;
3074: LD_ADDR_OWVAR 26
3078: PUSH
3079: LD_STRING 
3081: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3082: LD_INT 1
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: CALL_OW 12
3092: PPUSH
3093: LD_VAR 0 2
3097: PPUSH
3098: LD_EXP 6
3102: PPUSH
3103: CALL_OW 380
// hc_importance := 0 ;
3107: LD_ADDR_OWVAR 32
3111: PUSH
3112: LD_INT 0
3114: ST_TO_ADDR
// if Multiplayer then
3115: LD_OWVAR 4
3119: IFFALSE 3137
// begin hc_gallery :=  ;
3121: LD_ADDR_OWVAR 33
3125: PUSH
3126: LD_STRING 
3128: ST_TO_ADDR
// hc_face_number := 0 ;
3129: LD_ADDR_OWVAR 34
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3137: LD_ADDR_VAR 0 10
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// if global_defined then
3147: LD_LOC 3
3151: IFFALSE 3291
// begin if ( cl = class_soldier ) then
3153: LD_VAR 0 2
3157: PUSH
3158: LD_INT 1
3160: EQUAL
3161: IFFALSE 3181
// j := i + soldiers_created else
3163: LD_ADDR_VAR 0 9
3167: PUSH
3168: LD_VAR 0 8
3172: PUSH
3173: LD_LOC 4
3177: PLUS
3178: ST_TO_ADDR
3179: GO 3191
// j := i ;
3181: LD_ADDR_VAR 0 9
3185: PUSH
3186: LD_VAR 0 8
3190: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3191: LD_LOC 2
3195: PUSH
3196: LD_VAR 0 2
3200: ARRAY
3201: PUSH
3202: LD_VAR 0 9
3206: ARRAY
3207: PPUSH
3208: LD_VAR 0 10
3212: PPUSH
3213: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3217: LD_VAR 0 10
3221: PPUSH
3222: LD_INT 2
3224: PPUSH
3225: LD_LOC 2
3229: PUSH
3230: LD_VAR 0 2
3234: ARRAY
3235: PUSH
3236: LD_VAR 0 9
3240: ARRAY
3241: PPUSH
3242: LD_INT 2
3244: PPUSH
3245: CALL_OW 260
3249: PPUSH
3250: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3254: LD_VAR 0 10
3258: PPUSH
3259: LD_INT 1
3261: PPUSH
3262: LD_LOC 2
3266: PUSH
3267: LD_VAR 0 2
3271: ARRAY
3272: PUSH
3273: LD_VAR 0 9
3277: ARRAY
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: CALL_OW 260
3286: PPUSH
3287: CALL_OW 239
// end ; if building then
3291: LD_VAR 0 6
3295: IFFALSE 3313
// PlaceHumanInUnit ( un , building ) else
3297: LD_VAR 0 10
3301: PPUSH
3302: LD_VAR 0 6
3306: PPUSH
3307: CALL_OW 52
3311: GO 3340
// PlaceUnitXYR ( un , x , y , r , false ) ;
3313: LD_VAR 0 10
3317: PPUSH
3318: LD_VAR 0 3
3322: PPUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: LD_VAR 0 5
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 50
// result := result ^ [ un ] ;
3340: LD_ADDR_VAR 0 7
3344: PUSH
3345: LD_VAR 0 7
3349: PUSH
3350: LD_VAR 0 10
3354: PUSH
3355: EMPTY
3356: LIST
3357: ADD
3358: ST_TO_ADDR
// end ;
3359: GO 2942
3361: POP
3362: POP
// if not global_defined then
3363: LD_LOC 3
3367: NOT
3368: IFFALSE 3446
// if ( global_units >= cl ) then
3370: LD_LOC 2
3374: PUSH
3375: LD_VAR 0 2
3379: GREATEREQUAL
3380: IFFALSE 3421
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3382: LD_ADDR_LOC 2
3386: PUSH
3387: LD_LOC 2
3391: PPUSH
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_LOC 2
3401: PUSH
3402: LD_VAR 0 2
3406: ARRAY
3407: PUSH
3408: LD_VAR 0 7
3412: ADD
3413: PPUSH
3414: CALL_OW 1
3418: ST_TO_ADDR
3419: GO 3446
// global_units := Replace ( global_units , cl , result ) ;
3421: LD_ADDR_LOC 2
3425: PUSH
3426: LD_LOC 2
3430: PPUSH
3431: LD_VAR 0 2
3435: PPUSH
3436: LD_VAR 0 7
3440: PPUSH
3441: CALL_OW 1
3445: ST_TO_ADDR
// end ;
3446: LD_VAR 0 7
3450: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3451: LD_INT 0
3453: PPUSH
3454: PPUSH
3455: PPUSH
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
// pos := Side_Positions [ side ] ;
3462: LD_ADDR_VAR 0 3
3466: PUSH
3467: LD_EXP 17
3471: PUSH
3472: LD_VAR 0 1
3476: ARRAY
3477: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3478: LD_ADDR_OWVAR 21
3482: PUSH
3483: LD_EXP 18
3487: PUSH
3488: LD_VAR 0 1
3492: ARRAY
3493: ST_TO_ADDR
// uc_side := side ;
3494: LD_ADDR_OWVAR 20
3498: PUSH
3499: LD_VAR 0 1
3503: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_EXP 21
3513: PUSH
3514: LD_VAR 0 3
3518: ARRAY
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_EXP 21
3533: PUSH
3534: LD_VAR 0 3
3538: ARRAY
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3544: LD_ADDR_VAR 0 6
3548: PUSH
3549: LD_EXP 21
3553: PUSH
3554: LD_VAR 0 3
3558: ARRAY
3559: PUSH
3560: LD_INT 3
3562: ARRAY
3563: ST_TO_ADDR
// if is_depot then
3564: LD_EXP 3
3568: IFFALSE 3701
// begin bc_type = b_depot ;
3570: LD_ADDR_OWVAR 42
3574: PUSH
3575: LD_INT 0
3577: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3578: LD_ADDR_VAR 0 10
3582: PUSH
3583: LD_VAR 0 4
3587: PPUSH
3588: LD_VAR 0 5
3592: PPUSH
3593: LD_VAR 0 6
3597: PPUSH
3598: CALL_OW 47
3602: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3603: LD_VAR 0 10
3607: PPUSH
3608: LD_STRING @
3610: PUSH
3611: LD_VAR 0 1
3615: STR
3616: PPUSH
3617: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3621: LD_VAR 0 10
3625: PPUSH
3626: CALL_OW 274
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_EXP 8
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3647: LD_VAR 0 10
3651: PPUSH
3652: CALL_OW 274
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: LD_EXP 8
3664: PUSH
3665: LD_INT 2
3667: ARRAY
3668: PPUSH
3669: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3673: LD_VAR 0 10
3677: PPUSH
3678: CALL_OW 274
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_EXP 8
3690: PUSH
3691: LD_INT 3
3693: ARRAY
3694: PPUSH
3695: CALL_OW 277
// end else
3699: GO 3845
// begin for i := 1 to 3 do
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: DOUBLE
3707: LD_INT 1
3709: DEC
3710: ST_TO_ADDR
3711: LD_INT 3
3713: PUSH
3714: FOR_TO
3715: IFFALSE 3843
// begin r := starting_resources [ i ] ;
3717: LD_ADDR_VAR 0 8
3721: PUSH
3722: LD_EXP 8
3726: PUSH
3727: LD_VAR 0 7
3731: ARRAY
3732: ST_TO_ADDR
// while r >= 10 do
3733: LD_VAR 0 8
3737: PUSH
3738: LD_INT 10
3740: GREATEREQUAL
3741: IFFALSE 3841
// if r > 50 then
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: GREATER
3751: IFFALSE 3797
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3753: LD_VAR 0 7
3757: PPUSH
3758: LD_INT 5
3760: PPUSH
3761: LD_VAR 0 4
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 4
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: CALL_OW 60
// r := r - 50 ;
3781: LD_ADDR_VAR 0 8
3785: PUSH
3786: LD_VAR 0 8
3790: PUSH
3791: LD_INT 50
3793: MINUS
3794: ST_TO_ADDR
// end else
3795: GO 3839
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3797: LD_VAR 0 7
3801: PPUSH
3802: LD_VAR 0 8
3806: PUSH
3807: LD_INT 10
3809: DIV
3810: PPUSH
3811: LD_VAR 0 4
3815: PPUSH
3816: LD_VAR 0 5
3820: PPUSH
3821: LD_INT 4
3823: PPUSH
3824: LD_INT 0
3826: PPUSH
3827: CALL_OW 60
// r := 0 ;
3831: LD_ADDR_VAR 0 8
3835: PUSH
3836: LD_INT 0
3838: ST_TO_ADDR
// end ;
3839: GO 3733
// end ;
3841: GO 3714
3843: POP
3844: POP
// end ; for r in starting_crates do
3845: LD_ADDR_VAR 0 8
3849: PUSH
3850: LD_EXP 7
3854: PUSH
3855: FOR_IN
3856: IFFALSE 3888
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 5
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: LD_VAR 0 5
3873: PPUSH
3874: LD_VAR 0 8
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 60
3886: GO 3855
3888: POP
3889: POP
// if def_morale_flags then
3890: LD_EXP 40
3894: IFFALSE 4033
// begin x := start_def [ pos ] [ 1 ] ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_EXP 23
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 1
3914: ARRAY
3915: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3916: LD_ADDR_VAR 0 5
3920: PUSH
3921: LD_EXP 23
3925: PUSH
3926: LD_VAR 0 3
3930: ARRAY
3931: PUSH
3932: LD_INT 2
3934: ARRAY
3935: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_VAR 0 5
3945: PPUSH
3946: LD_INT 12
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: LD_VAR 0 1
3970: PPUSH
3971: LD_VAR 0 4
3975: PPUSH
3976: LD_VAR 0 5
3980: PPUSH
3981: LD_INT 1
3983: PUSH
3984: LD_INT 100
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 50
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: LD_INT 20
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 20
4013: PUSH
4014: LD_INT 100
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 418
4031: ADD
4032: ST_TO_ADDR
// end ; commander := true ;
4033: LD_ADDR_LOC 1
4037: PUSH
4038: LD_INT 1
4040: ST_TO_ADDR
// soldiers_created := 0 ;
4041: LD_ADDR_LOC 4
4045: PUSH
4046: LD_INT 0
4048: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4049: LD_ADDR_VAR 0 7
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_EXP 4
4063: PUSH
4064: FOR_TO
4065: IFFALSE 4218
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4067: LD_ADDR_VAR 0 4
4071: PUSH
4072: LD_EXP 22
4076: PUSH
4077: LD_VAR 0 3
4081: ARRAY
4082: PUSH
4083: LD_VAR 0 7
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4093: LD_ADDR_VAR 0 5
4097: PUSH
4098: LD_EXP 22
4102: PUSH
4103: LD_VAR 0 3
4107: ARRAY
4108: PUSH
4109: LD_VAR 0 7
4113: ARRAY
4114: PUSH
4115: LD_INT 2
4117: ARRAY
4118: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4119: LD_ADDR_VAR 0 6
4123: PUSH
4124: LD_EXP 22
4128: PUSH
4129: LD_VAR 0 3
4133: ARRAY
4134: PUSH
4135: LD_VAR 0 7
4139: ARRAY
4140: PUSH
4141: LD_INT 3
4143: ARRAY
4144: ST_TO_ADDR
// bc_type := b_breastwork ;
4145: LD_ADDR_OWVAR 42
4149: PUSH
4150: LD_INT 31
4152: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4153: LD_ADDR_VAR 0 9
4157: PUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: LD_VAR 0 5
4167: PPUSH
4168: LD_VAR 0 6
4172: PPUSH
4173: CALL_OW 47
4177: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: LD_VAR 0 9
4197: PPUSH
4198: CALL 2914 0 6
// soldiers_created := soldiers_created + 1 ;
4202: LD_ADDR_LOC 4
4206: PUSH
4207: LD_LOC 4
4211: PUSH
4212: LD_INT 1
4214: PLUS
4215: ST_TO_ADDR
// end ;
4216: GO 4064
4218: POP
4219: POP
// x := start_def [ pos ] [ 1 ] ;
4220: LD_ADDR_VAR 0 4
4224: PUSH
4225: LD_EXP 23
4229: PUSH
4230: LD_VAR 0 3
4234: ARRAY
4235: PUSH
4236: LD_INT 1
4238: ARRAY
4239: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4240: LD_ADDR_VAR 0 5
4244: PUSH
4245: LD_EXP 23
4249: PUSH
4250: LD_VAR 0 3
4254: ARRAY
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4260: LD_LOC 8
4264: PUSH
4265: LD_EXP 4
4269: MINUS
4270: PPUSH
4271: LD_INT 1
4273: PPUSH
4274: LD_VAR 0 4
4278: PPUSH
4279: LD_VAR 0 5
4283: PPUSH
4284: LD_INT 5
4286: PPUSH
4287: LD_INT 0
4289: PPUSH
4290: CALL 2914 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4294: LD_LOC 5
4298: PPUSH
4299: LD_INT 2
4301: PPUSH
4302: LD_VAR 0 4
4306: PPUSH
4307: LD_VAR 0 5
4311: PPUSH
4312: LD_INT 5
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL 2914 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4322: LD_LOC 7
4326: PPUSH
4327: LD_INT 3
4329: PPUSH
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_VAR 0 5
4339: PPUSH
4340: LD_INT 5
4342: PPUSH
4343: LD_INT 0
4345: PPUSH
4346: CALL 2914 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4350: LD_LOC 6
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: LD_VAR 0 5
4367: PPUSH
4368: LD_INT 5
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL 2914 0 6
// if def_siberite_detection then
4378: LD_EXP 41
4382: IFFALSE 4399
// SetTech ( tech_SibDet , side , state_researched ) ;
4384: LD_INT 20
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 322
// if def_siberite_bomb <> 1 then
4399: LD_EXP 44
4403: PUSH
4404: LD_INT 1
4406: NONEQUAL
4407: IFFALSE 4424
// SetTech ( tech_SibFiss , side , state_disabled ) ;
4409: LD_INT 25
4411: PPUSH
4412: LD_VAR 0 1
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 322
// global_defined := true ;
4424: LD_ADDR_LOC 3
4428: PUSH
4429: LD_INT 1
4431: ST_TO_ADDR
// end ;
4432: LD_VAR 0 2
4436: RET
// function EnableSibFiss ; var i ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
// for i := 1 to 8 do
4441: LD_ADDR_VAR 0 2
4445: PUSH
4446: DOUBLE
4447: LD_INT 1
4449: DEC
4450: ST_TO_ADDR
4451: LD_INT 8
4453: PUSH
4454: FOR_TO
4455: IFFALSE 4486
// if Side_Positions [ i ] then
4457: LD_EXP 17
4461: PUSH
4462: LD_VAR 0 2
4466: ARRAY
4467: IFFALSE 4484
// SetTech ( tech_SibFiss , i , state_enabled ) ;
4469: LD_INT 25
4471: PPUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: LD_INT 1
4479: PPUSH
4480: CALL_OW 322
4484: GO 4454
4486: POP
4487: POP
// end ;
4488: LD_VAR 0 1
4492: RET
// every 30 30$0 do
4493: GO 4495
4495: DISABLE
// if ( def_siberite_bomb = 2 ) then
4496: LD_EXP 44
4500: PUSH
4501: LD_INT 2
4503: EQUAL
4504: IFFALSE 4510
// EnableSibFiss ;
4506: CALL 4437 0 0
4510: END
// every 60 60$0 do
4511: GO 4513
4513: DISABLE
// if ( def_siberite_bomb = 3 ) then
4514: LD_EXP 44
4518: PUSH
4519: LD_INT 3
4521: EQUAL
4522: IFFALSE 4528
// EnableSibFiss ;
4524: CALL 4437 0 0
4528: END
// every 90 90$0 do
4529: GO 4531
4531: DISABLE
// if ( def_siberite_bomb = 4 ) then
4532: LD_EXP 44
4536: PUSH
4537: LD_INT 4
4539: EQUAL
4540: IFFALSE 4546
// EnableSibFiss ;
4542: CALL 4437 0 0
4546: END
// every 120 120$0 do
4547: GO 4549
4549: DISABLE
// if ( def_siberite_bomb = 5 ) then
4550: LD_EXP 44
4554: PUSH
4555: LD_INT 5
4557: EQUAL
4558: IFFALSE 4564
// EnableSibFiss ;
4560: CALL 4437 0 0
4564: END
// function prepare_sides ; var i ; begin
4565: LD_INT 0
4567: PPUSH
4568: PPUSH
// global_units := [ ] ;
4569: LD_ADDR_LOC 2
4573: PUSH
4574: EMPTY
4575: ST_TO_ADDR
// global_defined := false ;
4576: LD_ADDR_LOC 3
4580: PUSH
4581: LD_INT 0
4583: ST_TO_ADDR
// CountClassMembers ;
4584: CALL 4634 0 0
// for i := 1 to 8 do
4588: LD_ADDR_VAR 0 2
4592: PUSH
4593: DOUBLE
4594: LD_INT 1
4596: DEC
4597: ST_TO_ADDR
4598: LD_INT 8
4600: PUSH
4601: FOR_TO
4602: IFFALSE 4627
// if Side_Positions [ i ] then
4604: LD_EXP 17
4608: PUSH
4609: LD_VAR 0 2
4613: ARRAY
4614: IFFALSE 4625
// prepare_side ( i ) ;
4616: LD_VAR 0 2
4620: PPUSH
4621: CALL 3451 0 1
4625: GO 4601
4627: POP
4628: POP
// end ;
4629: LD_VAR 0 1
4633: RET
// function CountClassMembers ; var Mode ; begin
4634: LD_INT 0
4636: PPUSH
4637: PPUSH
// if No_Mechs then
4638: LD_EXP 46
4642: IFFALSE 4654
// Mode := 2 else
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: LD_INT 2
4651: ST_TO_ADDR
4652: GO 4662
// Mode := 1 ;
4654: LD_ADDR_VAR 0 2
4658: PUSH
4659: LD_INT 1
4661: ST_TO_ADDR
// neng := number_of_people ;
4662: LD_ADDR_LOC 5
4666: PUSH
4667: LD_EXP 5
4671: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4672: LD_ADDR_LOC 8
4676: PUSH
4677: LD_LOC 5
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: DIV
4698: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4699: LD_LOC 8
4703: PUSH
4704: LD_EXP 4
4708: LESS
4709: IFFALSE 4721
// nsol := number_of_breastworks ;
4711: LD_ADDR_LOC 8
4715: PUSH
4716: LD_EXP 4
4720: ST_TO_ADDR
// neng := neng - nsol ;
4721: LD_ADDR_LOC 5
4725: PUSH
4726: LD_LOC 5
4730: PUSH
4731: LD_LOC 8
4735: MINUS
4736: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4737: LD_ADDR_LOC 6
4741: PUSH
4742: LD_LOC 5
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: DIV
4763: ST_TO_ADDR
// if ( nsci < 1 ) then
4764: LD_LOC 6
4768: PUSH
4769: LD_INT 1
4771: LESS
4772: IFFALSE 4782
// nsci := 1 ;
4774: LD_ADDR_LOC 6
4778: PUSH
4779: LD_INT 1
4781: ST_TO_ADDR
// neng := neng - nsci ;
4782: LD_ADDR_LOC 5
4786: PUSH
4787: LD_LOC 5
4791: PUSH
4792: LD_LOC 6
4796: MINUS
4797: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4798: LD_ADDR_LOC 7
4802: PUSH
4803: LD_LOC 5
4807: PUSH
4808: LD_INT 2
4810: DIV
4811: PUSH
4812: LD_INT 0
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_VAR 0 2
4823: ARRAY
4824: ST_TO_ADDR
// neng := neng - nmech ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_LOC 5
4834: PUSH
4835: LD_LOC 7
4839: MINUS
4840: ST_TO_ADDR
// if ( neng < 1 ) then
4841: LD_LOC 5
4845: PUSH
4846: LD_INT 1
4848: LESS
4849: IFFALSE 4859
// neng := 1 ;
4851: LD_ADDR_LOC 5
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// end ;
4859: LD_VAR 0 1
4863: RET
// function Init_Win_Condition ; begin
4864: LD_INT 0
4866: PPUSH
// if Team_Game then
4867: LD_EXP 19
4871: IFFALSE 4878
// enable ( 98 ) else
4873: LD_INT 98
4875: ENABLE_MARKED
4876: GO 4881
// enable ( 99 ) ;
4878: LD_INT 99
4880: ENABLE_MARKED
// case Game_Type of 3 :
4881: LD_EXP 30
4885: PUSH
4886: LD_INT 3
4888: DOUBLE
4889: EQUAL
4890: IFTRUE 4894
4892: GO 4900
4894: POP
// enable ( 100 ) ; end ;
4895: LD_INT 100
4897: ENABLE_MARKED
4898: GO 4901
4900: POP
// end ;
4901: LD_VAR 0 1
4905: RET
// starting begin disable ( 98 ) ;
4906: LD_INT 98
4908: DISABLE_MARKED
// disable ( 99 ) ;
4909: LD_INT 99
4911: DISABLE_MARKED
// disable ( 100 ) ;
4912: LD_INT 100
4914: DISABLE_MARKED
// disable ( 200 ) ;
4915: LD_INT 200
4917: DISABLE_MARKED
// disable ( 400 ) ;
4918: LD_INT 400
4920: DISABLE_MARKED
// disable ( 401 ) ;
4921: LD_INT 401
4923: DISABLE_MARKED
// disable ( 600 ) ;
4924: LD_INT 600
4926: DISABLE_MARKED
// mp_selectmsg := true ;
4927: LD_ADDR_OWVAR 13
4931: PUSH
4932: LD_INT 1
4934: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4935: CALL 0 0 0
// init_map ;
4939: CALL 1523 0 0
// init_respawning ;
4943: CALL 5946 0 0
// set_shared_visions_and_alliances ;
4947: CALL 2626 0 0
// prepare_sides ;
4951: CALL 4565 0 0
// InitLimits ;
4955: CALL 11975 0 0
// ShowTimer ;
4959: CALL 12912 0 0
// if ( Game_Type = 4 ) then
4963: LD_EXP 30
4967: PUSH
4968: LD_INT 4
4970: EQUAL
4971: IFFALSE 4977
// InitBloodGods ;
4973: CALL 9517 0 0
// music_nat := Side_Nations [ your_side ] ;
4977: LD_ADDR_OWVAR 71
4981: PUSH
4982: LD_EXP 18
4986: PUSH
4987: LD_OWVAR 2
4991: ARRAY
4992: ST_TO_ADDR
// if IAmSpec then
4993: CALL_OW 531
4997: IFFALSE 5033
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4999: LD_INT 0
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: LD_OWVAR 2
5009: PPUSH
5010: LD_INT 32767
5012: NEG
5013: PPUSH
5014: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5018: LD_INT 104
5020: PPUSH
5021: LD_INT 69
5023: PPUSH
5024: CALL_OW 86
// enable ( 400 ) ;
5028: LD_INT 400
5030: ENABLE_MARKED
// end else
5031: GO 5087
// begin ResetFog ;
5033: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5037: LD_EXP 23
5041: PUSH
5042: LD_EXP 17
5046: PUSH
5047: LD_OWVAR 2
5051: ARRAY
5052: ARRAY
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_EXP 23
5062: PUSH
5063: LD_EXP 17
5067: PUSH
5068: LD_OWVAR 2
5072: ARRAY
5073: ARRAY
5074: PUSH
5075: LD_INT 2
5077: ARRAY
5078: PPUSH
5079: CALL_OW 86
// Init_Win_Condition ;
5083: CALL 4864 0 0
// end ; if def_builduptime then
5087: LD_EXP 45
5091: IFFALSE 5097
// BeginBuildUp ;
5093: CALL 8121 0 0
// end ; end_of_file
5097: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5098: GO 5100
5100: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5101: LD_INT 4
5103: PPUSH
5104: LD_INT 5
5106: PPUSH
5107: CALL_OW 12
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 57
// enable ;
5119: ENABLE
// end ;
5120: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5121: GO 5123
5123: DISABLE
5124: LD_INT 0
5126: PPUSH
5127: PPUSH
// begin case tick of 1 .. 1 1$0 :
5128: LD_OWVAR 1
5132: PUSH
5133: LD_INT 1
5135: DOUBLE
5136: GREATEREQUAL
5137: IFFALSE 5145
5139: LD_INT 2100
5141: DOUBLE
5142: LESSEQUAL
5143: IFTRUE 5147
5145: GO 5175
5147: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5148: LD_EXP 9
5152: PUSH
5153: LD_INT 100
5155: DIVREAL
5156: PUSH
5157: LD_INT 350
5159: PPUSH
5160: LD_INT 1050
5162: PPUSH
5163: CALL_OW 12
5167: MUL
5168: PPUSH
5169: CALL_OW 67
5173: GO 5477
5175: LD_INT 2100
5177: PUSH
5178: LD_INT 1
5180: PLUS
5181: DOUBLE
5182: GREATEREQUAL
5183: IFFALSE 5191
5185: LD_INT 10500
5187: DOUBLE
5188: LESSEQUAL
5189: IFTRUE 5193
5191: GO 5221
5193: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5194: LD_EXP 9
5198: PUSH
5199: LD_INT 100
5201: DIVREAL
5202: PUSH
5203: LD_INT 1050
5205: PPUSH
5206: LD_INT 1575
5208: PPUSH
5209: CALL_OW 12
5213: MUL
5214: PPUSH
5215: CALL_OW 67
5219: GO 5477
5221: LD_INT 10500
5223: PUSH
5224: LD_INT 1
5226: PLUS
5227: DOUBLE
5228: GREATEREQUAL
5229: IFFALSE 5237
5231: LD_INT 21000
5233: DOUBLE
5234: LESSEQUAL
5235: IFTRUE 5239
5237: GO 5267
5239: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5240: LD_EXP 9
5244: PUSH
5245: LD_INT 100
5247: DIVREAL
5248: PUSH
5249: LD_INT 1575
5251: PPUSH
5252: LD_INT 2100
5254: PPUSH
5255: CALL_OW 12
5259: MUL
5260: PPUSH
5261: CALL_OW 67
5265: GO 5477
5267: LD_INT 21000
5269: PUSH
5270: LD_INT 1
5272: PLUS
5273: DOUBLE
5274: GREATEREQUAL
5275: IFFALSE 5283
5277: LD_INT 42000
5279: DOUBLE
5280: LESSEQUAL
5281: IFTRUE 5285
5283: GO 5313
5285: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5286: LD_EXP 9
5290: PUSH
5291: LD_INT 100
5293: DIVREAL
5294: PUSH
5295: LD_INT 2100
5297: PPUSH
5298: LD_INT 2625
5300: PPUSH
5301: CALL_OW 12
5305: MUL
5306: PPUSH
5307: CALL_OW 67
5311: GO 5477
5313: LD_INT 42000
5315: PUSH
5316: LD_INT 1
5318: PLUS
5319: DOUBLE
5320: GREATEREQUAL
5321: IFFALSE 5329
5323: LD_INT 63000
5325: DOUBLE
5326: LESSEQUAL
5327: IFTRUE 5331
5329: GO 5359
5331: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5332: LD_EXP 9
5336: PUSH
5337: LD_INT 100
5339: DIVREAL
5340: PUSH
5341: LD_INT 2625
5343: PPUSH
5344: LD_INT 3150
5346: PPUSH
5347: CALL_OW 12
5351: MUL
5352: PPUSH
5353: CALL_OW 67
5357: GO 5477
5359: LD_INT 63000
5361: PUSH
5362: LD_INT 1
5364: PLUS
5365: DOUBLE
5366: GREATEREQUAL
5367: IFFALSE 5375
5369: LD_INT 105000
5371: DOUBLE
5372: LESSEQUAL
5373: IFTRUE 5377
5375: GO 5405
5377: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5378: LD_EXP 9
5382: PUSH
5383: LD_INT 100
5385: DIVREAL
5386: PUSH
5387: LD_INT 3150
5389: PPUSH
5390: LD_INT 3675
5392: PPUSH
5393: CALL_OW 12
5397: MUL
5398: PPUSH
5399: CALL_OW 67
5403: GO 5477
5405: LD_INT 105000
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: DOUBLE
5412: GREATEREQUAL
5413: IFFALSE 5421
5415: LD_INT 630000
5417: DOUBLE
5418: LESSEQUAL
5419: IFTRUE 5423
5421: GO 5451
5423: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5424: LD_EXP 9
5428: PUSH
5429: LD_INT 100
5431: DIVREAL
5432: PUSH
5433: LD_INT 3675
5435: PPUSH
5436: LD_INT 4200
5438: PPUSH
5439: CALL_OW 12
5443: MUL
5444: PPUSH
5445: CALL_OW 67
5449: GO 5477
5451: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5452: LD_EXP 9
5456: PUSH
5457: LD_INT 100
5459: DIVREAL
5460: PUSH
5461: LD_INT 4200
5463: PPUSH
5464: LD_INT 5250
5466: PPUSH
5467: CALL_OW 12
5471: MUL
5472: PPUSH
5473: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5477: LD_ADDR_VAR 0 2
5481: PUSH
5482: LD_INT 3
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL_OW 12
5492: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5493: LD_ADDR_VAR 0 1
5497: PUSH
5498: LD_EXP 17
5502: PUSH
5503: LD_INT 0
5505: PUSH
5506: EMPTY
5507: LIST
5508: DIFF
5509: PUSH
5510: FOR_IN
5511: IFFALSE 5560
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5513: LD_VAR 0 2
5517: PPUSH
5518: LD_EXP 23
5522: PUSH
5523: LD_VAR 0 1
5527: ARRAY
5528: PUSH
5529: LD_INT 1
5531: ARRAY
5532: PPUSH
5533: LD_EXP 23
5537: PUSH
5538: LD_VAR 0 1
5542: ARRAY
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: LD_INT 20
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 56
5558: GO 5510
5560: POP
5561: POP
// enable ;
5562: ENABLE
// end ;
5563: PPOPN 2
5565: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5566: GO 5568
5568: DISABLE
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: CALL_OW 287
5583: PUSH
5584: LD_INT 200
5586: PUSH
5587: LD_EXP 9
5591: MINUS
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 5
5599: MUL
5600: LESS
5601: IFFALSE 5624
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5603: LD_INT 3
5605: PPUSH
5606: LD_INT 5
5608: PPUSH
5609: CALL_OW 12
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 55
// enable ;
5624: ENABLE
// end ; end_of_file
5625: PPOPN 2
5627: END
// function apeman_init ; begin
5628: LD_INT 0
5630: PPUSH
// uc_side := 0 ;
5631: LD_ADDR_OWVAR 20
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// uc_nation := nation_nature ;
5639: LD_ADDR_OWVAR 21
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// hc_class := class_apeman ;
5647: LD_ADDR_OWVAR 28
5651: PUSH
5652: LD_INT 12
5654: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 1 , 1 ] ;
5655: LD_ADDR_OWVAR 30
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 1
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5678: LD_ADDR_OWVAR 31
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: LD_INT 1
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5701: LD_ADDR_OWVAR 29
5705: PUSH
5706: LD_INT 10
5708: PUSH
5709: LD_INT 12
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: ST_TO_ADDR
// hc_sex := sex_male ;
5716: LD_ADDR_OWVAR 27
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// hc_importance := 0 ;
5724: LD_ADDR_OWVAR 32
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5732: LD_ADDR_OWVAR 35
5736: PUSH
5737: LD_INT 20
5739: NEG
5740: PPUSH
5741: LD_INT 20
5743: PPUSH
5744: CALL_OW 12
5748: ST_TO_ADDR
// end ;
5749: LD_VAR 0 1
5753: RET
// function prepare_apemen ; var i , j , un , ape , first , d1 , d2 ; begin
5754: LD_INT 0
5756: PPUSH
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
5761: PPUSH
5762: PPUSH
5763: PPUSH
// if not amount_of_apemen then
5764: LD_EXP 11
5768: NOT
5769: IFFALSE 5773
// exit ;
5771: GO 5933
// ape := 0 ;
5773: LD_ADDR_VAR 0 5
5777: PUSH
5778: LD_INT 0
5780: ST_TO_ADDR
// repeat Wait ( ( ape + 1 ) * Rand ( 0 0$10 , 1 1$0 ) ) ;
5781: LD_VAR 0 5
5785: PUSH
5786: LD_INT 1
5788: PLUS
5789: PUSH
5790: LD_INT 350
5792: PPUSH
5793: LD_INT 2100
5795: PPUSH
5796: CALL_OW 12
5800: MUL
5801: PPUSH
5802: CALL_OW 67
// apeman_init ;
5806: CALL 5628 0 0
// PlaceUnitArea ( CreateHuman , Base1ApeArea , false ) ;
5810: CALL_OW 44
5814: PPUSH
5815: LD_INT 2
5817: PPUSH
5818: LD_INT 0
5820: PPUSH
5821: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base2ApeArea , false ) ;
5825: CALL_OW 44
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 0
5835: PPUSH
5836: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base3ApeArea , false ) ;
5840: CALL_OW 44
5844: PPUSH
5845: LD_INT 4
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base4ApeArea , false ) ;
5855: CALL_OW 44
5859: PPUSH
5860: LD_INT 5
5862: PPUSH
5863: LD_INT 0
5865: PPUSH
5866: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base5ApeArea , false ) ;
5870: CALL_OW 44
5874: PPUSH
5875: LD_INT 6
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Base6ApeArea , false ) ;
5885: CALL_OW 44
5889: PPUSH
5890: LD_INT 7
5892: PPUSH
5893: LD_INT 0
5895: PPUSH
5896: CALL_OW 49
// Wait ( 3 ) ;
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 67
// ape := ape + 1 ;
5907: LD_ADDR_VAR 0 5
5911: PUSH
5912: LD_VAR 0 5
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: ST_TO_ADDR
// until ape >= amount_of_apemen ;
5921: LD_VAR 0 5
5925: PUSH
5926: LD_EXP 11
5930: GREATEREQUAL
5931: IFFALSE 5781
// end ;
5933: LD_VAR 0 1
5937: RET
// every 0 0$15 do
5938: GO 5940
5940: DISABLE
// begin prepare_apemen ;
5941: CALL 5754 0 0
// end ; end_of_file
5945: END
// var respawn , inqueue ; export function init_respawning ; begin
5946: LD_INT 0
5948: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5949: LD_ADDR_LOC 9
5953: PUSH
5954: LD_INT 1
5956: PPUSH
5957: LD_INT 8
5959: PPUSH
5960: CALL_OW 12
5964: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5965: LD_ADDR_LOC 10
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: LD_INT 0
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: ST_TO_ADDR
// end ;
6004: LD_VAR 0 1
6008: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6009: GO 6011
6011: DISABLE
6012: LD_INT 0
6014: PPUSH
6015: PPUSH
6016: PPUSH
// begin if respawning_time_max = 0 then
6017: LD_EXP 14
6021: PUSH
6022: LD_INT 0
6024: EQUAL
6025: IFFALSE 6029
// exit ;
6027: GO 6434
// if respawn = 8 then
6029: LD_LOC 9
6033: PUSH
6034: LD_INT 8
6036: EQUAL
6037: IFFALSE 6049
// respawn := 1 else
6039: LD_ADDR_LOC 9
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
6047: GO 6063
// respawn := respawn + 1 ;
6049: LD_ADDR_LOC 9
6053: PUSH
6054: LD_LOC 9
6058: PUSH
6059: LD_INT 1
6061: PLUS
6062: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6063: LD_EXP 17
6067: PUSH
6068: LD_LOC 9
6072: ARRAY
6073: PUSH
6074: LD_LOC 10
6078: PUSH
6079: LD_LOC 9
6083: ARRAY
6084: NOT
6085: AND
6086: IFFALSE 6433
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_INT 21
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_LOC 9
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 23
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PPUSH
6134: CALL_OW 69
6138: ST_TO_ADDR
// if n < number_of_people then
6139: LD_VAR 0 1
6143: PUSH
6144: LD_EXP 5
6148: LESS
6149: IFFALSE 6430
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 2
6168: PUSH
6169: LD_INT 30
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 50
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: LD_INT 22
6202: PUSH
6203: LD_LOC 9
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: ST_TO_ADDR
// if dep then
6223: LD_VAR 0 2
6227: IFFALSE 6427
// begin aktresp := respawn ;
6229: LD_ADDR_VAR 0 3
6233: PUSH
6234: LD_LOC 9
6238: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6239: LD_ADDR_LOC 10
6243: PUSH
6244: LD_LOC 10
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: LD_INT 1
6256: PPUSH
6257: CALL_OW 1
6261: ST_TO_ADDR
// enable ;
6262: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6263: LD_EXP 13
6267: PPUSH
6268: LD_EXP 14
6272: PPUSH
6273: CALL_OW 12
6277: PPUSH
6278: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6282: LD_ADDR_LOC 10
6286: PUSH
6287: LD_LOC 10
6291: PPUSH
6292: LD_VAR 0 3
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 1
6304: ST_TO_ADDR
// hc_name :=  ;
6305: LD_ADDR_OWVAR 26
6309: PUSH
6310: LD_STRING 
6312: ST_TO_ADDR
// hc_importance := 0 ;
6313: LD_ADDR_OWVAR 32
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6321: LD_INT 0
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: LD_EXP 6
6331: PUSH
6332: LD_INT 2
6334: DIV
6335: PPUSH
6336: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6340: LD_ADDR_OWVAR 21
6344: PUSH
6345: LD_EXP 18
6349: PUSH
6350: LD_VAR 0 3
6354: ARRAY
6355: ST_TO_ADDR
// uc_side := aktresp ;
6356: LD_ADDR_OWVAR 20
6360: PUSH
6361: LD_VAR 0 3
6365: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_VAR 0 2
6375: PUSH
6376: LD_INT 1
6378: PPUSH
6379: LD_VAR 0 2
6383: PPUSH
6384: CALL_OW 12
6388: ARRAY
6389: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6390: CALL_OW 44
6394: PPUSH
6395: LD_VAR 0 2
6399: PPUSH
6400: CALL_OW 250
6404: PPUSH
6405: LD_VAR 0 2
6409: PPUSH
6410: CALL_OW 251
6414: PPUSH
6415: LD_INT 7
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 50
// end else
6425: GO 6428
// enable ;
6427: ENABLE
// end else
6428: GO 6431
// enable ;
6430: ENABLE
// end else
6431: GO 6434
// enable ;
6433: ENABLE
// end ; end_of_file
6434: PPOPN 3
6436: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 266
6446: PUSH
6447: LD_INT 0
6449: PUSH
6450: LD_INT 1
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: IN
6457: IFFALSE 6482
// SetBName ( b , @ & GetSide ( b ) ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_STRING @
6466: PUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 255
6476: STR
6477: PPUSH
6478: CALL_OW 500
// if def_game_rules then
6482: LD_EXP 31
6486: IFFALSE 6523
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6488: LD_VAR 0 1
6492: PPUSH
6493: LD_VAR 0 1
6497: PPUSH
6498: CALL_OW 266
6502: PPUSH
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 255
6512: PPUSH
6513: LD_INT 0
6515: PPUSH
6516: LD_INT 1
6518: PPUSH
6519: CALL 12376 0 5
// end ;
6523: PPOPN 2
6525: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6526: LD_VAR 0 1
6530: PPUSH
6531: CALL_OW 266
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: LD_INT 1
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: IN
6546: IFFALSE 6571
// SetBName ( b , @ & GetSide ( b ) ) ;
6548: LD_VAR 0 1
6552: PPUSH
6553: LD_STRING @
6555: PUSH
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 255
6565: STR
6566: PPUSH
6567: CALL_OW 500
// if def_game_rules then
6571: LD_EXP 31
6575: IFFALSE 6614
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_VAR 0 1
6586: PPUSH
6587: CALL_OW 266
6591: PPUSH
6592: LD_VAR 0 1
6596: PPUSH
6597: CALL_OW 255
6601: PPUSH
6602: LD_VAR 0 2
6606: PPUSH
6607: LD_INT 1
6609: PPUSH
6610: CALL 12376 0 5
// end ;
6614: PPOPN 3
6616: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6617: LD_INT 0
6619: PPUSH
6620: PPUSH
6621: PPUSH
6622: PPUSH
// begin if GetBType ( j ) in [ b_depot , b_warehouse ] then
6623: LD_VAR 0 1
6627: PPUSH
6628: CALL_OW 266
6632: PUSH
6633: LD_INT 0
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: IN
6643: IFFALSE 6725
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6645: LD_ADDR_VAR 0 4
6649: PUSH
6650: LD_EXP 17
6654: PUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 255
6664: ARRAY
6665: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6666: LD_ADDR_VAR 0 2
6670: PUSH
6671: LD_EXP 23
6675: PUSH
6676: LD_VAR 0 4
6680: ARRAY
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6686: LD_ADDR_VAR 0 3
6690: PUSH
6691: LD_EXP 23
6695: PUSH
6696: LD_VAR 0 4
6700: ARRAY
6701: PUSH
6702: LD_INT 2
6704: ARRAY
6705: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6706: LD_VAR 0 2
6710: PPUSH
6711: LD_VAR 0 3
6715: PPUSH
6716: CALL_OW 420
6720: PPUSH
6721: CALL_OW 419
// end ; if def_game_rules then
6725: LD_EXP 31
6729: IFFALSE 6828
// if ( GetType ( j ) = 3 ) then
6731: LD_VAR 0 1
6735: PPUSH
6736: CALL_OW 247
6740: PUSH
6741: LD_INT 3
6743: EQUAL
6744: IFFALSE 6784
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6746: LD_VAR 0 1
6750: PPUSH
6751: LD_VAR 0 1
6755: PPUSH
6756: CALL_OW 266
6760: PPUSH
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 255
6770: PPUSH
6771: LD_INT 0
6773: PPUSH
6774: LD_INT 1
6776: NEG
6777: PPUSH
6778: CALL 12376 0 5
6782: GO 6828
// if ( GetChassis ( j ) = 25 ) then
6784: LD_VAR 0 1
6788: PPUSH
6789: CALL_OW 265
6793: PUSH
6794: LD_INT 25
6796: EQUAL
6797: IFFALSE 6828
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6799: LD_VAR 0 1
6803: PPUSH
6804: LD_INT 37
6806: PPUSH
6807: LD_VAR 0 1
6811: PPUSH
6812: CALL_OW 255
6816: PPUSH
6817: LD_INT 0
6819: PPUSH
6820: LD_INT 1
6822: NEG
6823: PPUSH
6824: CALL 12376 0 5
// end ;
6828: PPOPN 5
6830: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6831: LD_EXP 31
6835: PUSH
6836: LD_VAR 0 1
6840: PPUSH
6841: CALL_OW 265
6845: PUSH
6846: LD_INT 25
6848: EQUAL
6849: AND
6850: IFFALSE 6882
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_INT 37
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 255
6869: PPUSH
6870: LD_VAR 0 3
6874: PPUSH
6875: LD_INT 1
6877: PPUSH
6878: CALL 12376 0 5
// end ; end_of_file
6882: PPOPN 4
6884: END
// function CanWinLoose ; begin
6885: LD_INT 0
6887: PPUSH
// Result := true ;
6888: LD_ADDR_VAR 0 1
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6896: CALL_OW 518
6900: PUSH
6901: CALL_OW 519
6905: PUSH
6906: LD_INT 0
6908: GREATER
6909: AND
6910: IFFALSE 6920
// Result := false ;
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_INT 0
6919: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6920: CALL_OW 531
6924: PUSH
6925: CALL_OW 519
6929: PUSH
6930: LD_INT 1
6932: GREATER
6933: AND
6934: IFFALSE 6944
// Result := false ;
6936: LD_ADDR_VAR 0 1
6940: PUSH
6941: LD_INT 0
6943: ST_TO_ADDR
// end ;
6944: LD_VAR 0 1
6948: RET
// function HasPower ( i ) ; begin
6949: LD_INT 0
6951: PPUSH
// if def_people_respawning then
6952: LD_EXP 42
6956: IFFALSE 7047
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_INT 22
6965: PUSH
6966: LD_VAR 0 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 33
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 33
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 30
7010: PUSH
7011: LD_INT 0
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 30
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 69
7044: ST_TO_ADDR
7045: GO 7112
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 2
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 1
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 33
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 33
7089: PUSH
7090: LD_INT 5
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 69
7111: ST_TO_ADDR
// end ;
7112: LD_VAR 0 2
7116: RET
// function AlliedSides ( i , j ) ; begin
7117: LD_INT 0
7119: PPUSH
// Result := false ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_VAR 0 2
7137: PPUSH
7138: CALL_OW 81
7142: PUSH
7143: LD_INT 1
7145: EQUAL
7146: PUSH
7147: LD_VAR 0 2
7151: PPUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 81
7161: PUSH
7162: LD_INT 1
7164: EQUAL
7165: AND
7166: PUSH
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL_OW 83
7176: AND
7177: PUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 83
7187: AND
7188: IFFALSE 7198
// Result := true ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// end ;
7198: LD_VAR 0 3
7202: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7203: CALL 6885 0 0
7207: IFFALSE 7216
7209: GO 7211
7211: DISABLE
// YouLostInMultiplayer ;
7212: CALL_OW 107
7216: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7217: CALL 6885 0 0
7221: IFFALSE 7230
7223: GO 7225
7225: DISABLE
// YouWinInMultiplayer ;
7226: CALL_OW 106
7230: END
// every 0 0$3 marked 98 do var i , CanWin ;
7231: GO 7233
7233: DISABLE
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// begin if not HasPower ( your_side ) then
7238: LD_OWVAR 2
7242: PPUSH
7243: CALL 6949 0 1
7247: NOT
7248: IFFALSE 7259
// begin Multiplayer_Loose_Message ;
7250: CALL_OW 521
// enable ( 400 ) ;
7254: LD_INT 400
7256: ENABLE_MARKED
// end else
7257: GO 7392
// begin CanWin := true ;
7259: LD_ADDR_VAR 0 2
7263: PUSH
7264: LD_INT 1
7266: ST_TO_ADDR
// for i := 1 to 8 do
7267: LD_ADDR_VAR 0 1
7271: PUSH
7272: DOUBLE
7273: LD_INT 1
7275: DEC
7276: ST_TO_ADDR
7277: LD_INT 8
7279: PUSH
7280: FOR_TO
7281: IFFALSE 7378
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7283: LD_EXP 17
7287: PUSH
7288: LD_VAR 0 1
7292: ARRAY
7293: PUSH
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 108
7303: AND
7304: PUSH
7305: LD_VAR 0 1
7309: PUSH
7310: LD_OWVAR 2
7314: NONEQUAL
7315: AND
7316: IFFALSE 7376
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7318: LD_EXP 15
7322: PUSH
7323: LD_VAR 0 1
7327: ARRAY
7328: NOT
7329: PUSH
7330: LD_EXP 15
7334: PUSH
7335: LD_VAR 0 1
7339: ARRAY
7340: PUSH
7341: LD_EXP 15
7345: PUSH
7346: LD_OWVAR 2
7350: ARRAY
7351: NONEQUAL
7352: OR
7353: IFFALSE 7376
// if HasPower ( i ) then
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL 6949 0 1
7364: IFFALSE 7376
// begin CanWin := false ;
7366: LD_ADDR_VAR 0 2
7370: PUSH
7371: LD_INT 0
7373: ST_TO_ADDR
// break ;
7374: GO 7378
// end ;
7376: GO 7280
7378: POP
7379: POP
// if CanWin then
7380: LD_VAR 0 2
7384: IFFALSE 7391
// enable ( 401 ) else
7386: LD_INT 401
7388: ENABLE_MARKED
7389: GO 7392
// enable ;
7391: ENABLE
// end ; end ;
7392: PPOPN 2
7394: END
// every 0 0$3 marked 99 do var i , CanWin ;
7395: GO 7397
7397: DISABLE
7398: LD_INT 0
7400: PPUSH
7401: PPUSH
// begin if not HasPower ( your_side ) then
7402: LD_OWVAR 2
7406: PPUSH
7407: CALL 6949 0 1
7411: NOT
7412: IFFALSE 7423
// begin Multiplayer_Loose_Message ;
7414: CALL_OW 521
// enable ( 400 ) ;
7418: LD_INT 400
7420: ENABLE_MARKED
// end else
7421: GO 7536
// begin CanWin := true ;
7423: LD_ADDR_VAR 0 2
7427: PUSH
7428: LD_INT 1
7430: ST_TO_ADDR
// for i := 1 to 8 do
7431: LD_ADDR_VAR 0 1
7435: PUSH
7436: DOUBLE
7437: LD_INT 1
7439: DEC
7440: ST_TO_ADDR
7441: LD_INT 8
7443: PUSH
7444: FOR_TO
7445: IFFALSE 7522
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7447: LD_EXP 17
7451: PUSH
7452: LD_VAR 0 1
7456: ARRAY
7457: PUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 108
7467: AND
7468: PUSH
7469: LD_VAR 0 1
7473: PUSH
7474: LD_OWVAR 2
7478: NONEQUAL
7479: AND
7480: IFFALSE 7520
// if not AlliedSides ( i , your_side ) then
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_OWVAR 2
7491: PPUSH
7492: CALL 7117 0 2
7496: NOT
7497: IFFALSE 7520
// if HasPower ( i ) then
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL 6949 0 1
7508: IFFALSE 7520
// begin CanWin := false ;
7510: LD_ADDR_VAR 0 2
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// break ;
7518: GO 7522
// end ;
7520: GO 7444
7522: POP
7523: POP
// if CanWin then
7524: LD_VAR 0 2
7528: IFFALSE 7535
// enable ( 401 ) else
7530: LD_INT 401
7532: ENABLE_MARKED
7533: GO 7536
// enable ;
7535: ENABLE
// end ; end ; end_of_file
7536: PPOPN 2
7538: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7539: GO 7541
7541: DISABLE
7542: LD_INT 0
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
7548: PPUSH
// begin sib_mined := [ ] ;
7549: LD_ADDR_VAR 0 5
7553: PUSH
7554: EMPTY
7555: ST_TO_ADDR
// for i := 1 to 8 do
7556: LD_ADDR_VAR 0 1
7560: PUSH
7561: DOUBLE
7562: LD_INT 1
7564: DEC
7565: ST_TO_ADDR
7566: LD_INT 8
7568: PUSH
7569: FOR_TO
7570: IFFALSE 7726
// if Side_Positions [ i ] then
7572: LD_EXP 17
7576: PUSH
7577: LD_VAR 0 1
7581: ARRAY
7582: IFFALSE 7710
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7584: LD_ADDR_VAR 0 4
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_VAR 0 1
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 30
7606: PUSH
7607: LD_INT 0
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 30
7616: PUSH
7617: LD_INT 1
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 69
7637: ST_TO_ADDR
// pom := 0 ;
7638: LD_ADDR_VAR 0 3
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// for base in filter do
7646: LD_ADDR_VAR 0 2
7650: PUSH
7651: LD_VAR 0 4
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7690
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_VAR 0 3
7668: PUSH
7669: LD_VAR 0 2
7673: PPUSH
7674: CALL_OW 274
7678: PPUSH
7679: LD_INT 3
7681: PPUSH
7682: CALL_OW 275
7686: PLUS
7687: ST_TO_ADDR
7688: GO 7656
7690: POP
7691: POP
// sib_mined := sib_mined ^ pom ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_VAR 0 5
7701: PUSH
7702: LD_VAR 0 3
7706: ADD
7707: ST_TO_ADDR
// end else
7708: GO 7724
// sib_mined := sib_mined ^ 0 ;
7710: LD_ADDR_VAR 0 5
7714: PUSH
7715: LD_VAR 0 5
7719: PUSH
7720: LD_INT 0
7722: ADD
7723: ST_TO_ADDR
7724: GO 7569
7726: POP
7727: POP
// if not def_public_score then
7728: LD_EXP 2
7732: NOT
7733: IFFALSE 7823
// begin ExtraStrings := [ ] ;
7735: LD_ADDR_EXP 47
7739: PUSH
7740: EMPTY
7741: ST_TO_ADDR
// for i := 1 to 8 do
7742: LD_ADDR_VAR 0 1
7746: PUSH
7747: DOUBLE
7748: LD_INT 1
7750: DEC
7751: ST_TO_ADDR
7752: LD_INT 8
7754: PUSH
7755: FOR_TO
7756: IFFALSE 7819
// if Side_Positions [ i ] then
7758: LD_EXP 17
7762: PUSH
7763: LD_VAR 0 1
7767: ARRAY
7768: IFFALSE 7817
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7770: LD_ADDR_EXP 47
7774: PUSH
7775: LD_EXP 47
7779: PUSH
7780: LD_STRING #AlienBase-MinedPublic
7782: PUSH
7783: LD_VAR 0 1
7787: PUSH
7788: LD_VAR 0 1
7792: PUSH
7793: LD_VAR 0 5
7797: PUSH
7798: LD_VAR 0 1
7802: ARRAY
7803: PUSH
7804: LD_EXP 12
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: ADD
7816: ST_TO_ADDR
7817: GO 7755
7819: POP
7820: POP
// end else
7821: GO 7852
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7823: LD_ADDR_EXP 47
7827: PUSH
7828: LD_STRING #AlienBase-Mined
7830: PUSH
7831: LD_VAR 0 5
7835: PUSH
7836: LD_OWVAR 2
7840: ARRAY
7841: PUSH
7842: LD_EXP 12
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: ST_TO_ADDR
// for i := 1 to 8 do
7852: LD_ADDR_VAR 0 1
7856: PUSH
7857: DOUBLE
7858: LD_INT 1
7860: DEC
7861: ST_TO_ADDR
7862: LD_INT 8
7864: PUSH
7865: FOR_TO
7866: IFFALSE 7923
// if sib_mined [ i ] >= amount_of_siberit then
7868: LD_VAR 0 5
7872: PUSH
7873: LD_VAR 0 1
7877: ARRAY
7878: PUSH
7879: LD_EXP 12
7883: GREATEREQUAL
7884: IFFALSE 7921
// begin wait ( 0 0$1 ) ;
7886: LD_INT 35
7888: PPUSH
7889: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
7893: LD_VAR 0 5
7897: PUSH
7898: LD_OWVAR 2
7902: ARRAY
7903: PUSH
7904: LD_EXP 12
7908: GREATEREQUAL
7909: IFFALSE 7917
// YouWinInMultiplayer else
7911: CALL_OW 106
7915: GO 7921
// YouLostInMultiplayer ;
7917: CALL_OW 107
// end ;
7921: GO 7865
7923: POP
7924: POP
// enable ;
7925: ENABLE
// end ; end_of_file
7926: PPOPN 5
7928: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7929: LD_INT 0
7931: PPUSH
7932: PPUSH
// for un in battle_flags_id do
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_EXP 28
7942: PUSH
7943: FOR_IN
7944: IFFALSE 8019
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7946: LD_VAR 0 2
7950: PPUSH
7951: LD_INT 1
7953: PUSH
7954: LD_LOC 11
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 2
7965: PUSH
7966: LD_LOC 11
7970: PUSH
7971: LD_INT 2
7973: DIV
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: LD_LOC 11
7986: PUSH
7987: LD_INT 5
7989: DIV
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 20
7997: PUSH
7998: LD_LOC 11
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 423
8017: GO 7943
8019: POP
8020: POP
// end ;
8021: LD_VAR 0 1
8025: RET
// every 1 do var un ;
8026: GO 8028
8028: DISABLE
8029: LD_INT 0
8031: PPUSH
// begin if not def_morale_flags then
8032: LD_EXP 40
8036: NOT
8037: IFFALSE 8041
// exit ;
8039: GO 8118
// if not morale_decreasing_time then
8041: LD_EXP 10
8045: NOT
8046: IFFALSE 8050
// exit ;
8048: GO 8118
// strength = 100 ;
8050: LD_ADDR_LOC 11
8054: PUSH
8055: LD_INT 100
8057: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8058: LD_EXP 10
8062: PPUSH
8063: CALL_OW 67
// strength := strength - 1 ;
8067: LD_ADDR_LOC 11
8071: PUSH
8072: LD_LOC 11
8076: PUSH
8077: LD_INT 1
8079: MINUS
8080: ST_TO_ADDR
// Update_Flags ;
8081: CALL 7929 0 0
// until not strength ;
8085: LD_LOC 11
8089: NOT
8090: IFFALSE 8058
// for un in battle_flags_id do
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: LD_EXP 28
8101: PUSH
8102: FOR_IN
8103: IFFALSE 8116
// KillBattleFlag ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 419
8114: GO 8102
8116: POP
8117: POP
// end ; end_of_file
8118: PPOPN 1
8120: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8121: LD_INT 0
8123: PPUSH
8124: PPUSH
8125: PPUSH
// enable ( 600 ) ;
8126: LD_INT 600
8128: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8129: LD_ADDR_VAR 0 2
8133: PUSH
8134: DOUBLE
8135: LD_INT 1
8137: DEC
8138: ST_TO_ADDR
8139: LD_EXP 29
8143: PUSH
8144: FOR_TO
8145: IFFALSE 8300
// if Position_Sides [ i ] then
8147: LD_EXP 20
8151: PUSH
8152: LD_VAR 0 2
8156: ARRAY
8157: IFFALSE 8298
// for j := 1 to 8 do
8159: LD_ADDR_VAR 0 3
8163: PUSH
8164: DOUBLE
8165: LD_INT 1
8167: DEC
8168: ST_TO_ADDR
8169: LD_INT 8
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8296
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8175: LD_EXP 17
8179: PUSH
8180: LD_VAR 0 3
8184: ARRAY
8185: PUSH
8186: LD_EXP 15
8190: PUSH
8191: LD_EXP 20
8195: PUSH
8196: LD_VAR 0 2
8200: ARRAY
8201: ARRAY
8202: PUSH
8203: LD_EXP 15
8207: PUSH
8208: LD_VAR 0 3
8212: ARRAY
8213: NONEQUAL
8214: PUSH
8215: LD_EXP 19
8219: NOT
8220: PUSH
8221: LD_EXP 20
8225: PUSH
8226: LD_VAR 0 2
8230: ARRAY
8231: PUSH
8232: LD_VAR 0 3
8236: NONEQUAL
8237: AND
8238: OR
8239: AND
8240: IFFALSE 8264
// HideArea ( j , BuildUpAreas [ i ] ) else
8242: LD_VAR 0 3
8246: PPUSH
8247: LD_EXP 29
8251: PUSH
8252: LD_VAR 0 2
8256: ARRAY
8257: PPUSH
8258: CALL_OW 333
8262: GO 8294
// if ( j = your_side ) then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_OWVAR 2
8273: EQUAL
8274: IFFALSE 8294
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8276: LD_EXP 29
8280: PUSH
8281: LD_VAR 0 2
8285: ARRAY
8286: PPUSH
8287: LD_INT 5
8289: PPUSH
8290: CALL_OW 424
8294: GO 8172
8296: POP
8297: POP
8298: GO 8144
8300: POP
8301: POP
// end ;
8302: LD_VAR 0 1
8306: RET
// export function EndBuildUp ; var i , j ; begin
8307: LD_INT 0
8309: PPUSH
8310: PPUSH
8311: PPUSH
// disable ( 600 ) ;
8312: LD_INT 600
8314: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: DOUBLE
8321: LD_INT 1
8323: DEC
8324: ST_TO_ADDR
8325: LD_EXP 29
8329: PUSH
8330: FOR_TO
8331: IFFALSE 8486
// if Position_Sides [ i ] then
8333: LD_EXP 20
8337: PUSH
8338: LD_VAR 0 2
8342: ARRAY
8343: IFFALSE 8484
// for j := 1 to 8 do
8345: LD_ADDR_VAR 0 3
8349: PUSH
8350: DOUBLE
8351: LD_INT 1
8353: DEC
8354: ST_TO_ADDR
8355: LD_INT 8
8357: PUSH
8358: FOR_TO
8359: IFFALSE 8482
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8361: LD_EXP 17
8365: PUSH
8366: LD_VAR 0 3
8370: ARRAY
8371: PUSH
8372: LD_EXP 15
8376: PUSH
8377: LD_EXP 20
8381: PUSH
8382: LD_VAR 0 2
8386: ARRAY
8387: ARRAY
8388: PUSH
8389: LD_EXP 15
8393: PUSH
8394: LD_VAR 0 3
8398: ARRAY
8399: NONEQUAL
8400: PUSH
8401: LD_EXP 19
8405: NOT
8406: PUSH
8407: LD_EXP 20
8411: PUSH
8412: LD_VAR 0 2
8416: ARRAY
8417: PUSH
8418: LD_VAR 0 3
8422: NONEQUAL
8423: AND
8424: OR
8425: AND
8426: IFFALSE 8450
// ShowArea ( j , BuildUpAreas [ i ] ) else
8428: LD_VAR 0 3
8432: PPUSH
8433: LD_EXP 29
8437: PUSH
8438: LD_VAR 0 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 334
8448: GO 8480
// if ( j = your_side ) then
8450: LD_VAR 0 3
8454: PUSH
8455: LD_OWVAR 2
8459: EQUAL
8460: IFFALSE 8480
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8462: LD_EXP 29
8466: PUSH
8467: LD_VAR 0 2
8471: ARRAY
8472: PPUSH
8473: LD_INT 0
8475: PPUSH
8476: CALL_OW 424
8480: GO 8358
8482: POP
8483: POP
8484: GO 8330
8486: POP
8487: POP
// end ;
8488: LD_VAR 0 1
8492: RET
// every 5 marked 600 do var i , un ;
8493: GO 8495
8495: DISABLE
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
// begin for i := 1 to BuildUpAreas do
8500: LD_ADDR_VAR 0 1
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_EXP 29
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8671
// if Position_Sides [ i ] then
8518: LD_EXP 20
8522: PUSH
8523: LD_VAR 0 1
8527: ARRAY
8528: IFFALSE 8669
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_EXP 29
8539: PUSH
8540: LD_VAR 0 1
8544: ARRAY
8545: PPUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 21
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 22
8576: PUSH
8577: LD_OWVAR 2
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 70
8594: PUSH
8595: FOR_IN
8596: IFFALSE 8667
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8598: LD_EXP 15
8602: PUSH
8603: LD_EXP 20
8607: PUSH
8608: LD_VAR 0 1
8612: ARRAY
8613: ARRAY
8614: PUSH
8615: LD_EXP 15
8619: PUSH
8620: LD_OWVAR 2
8624: ARRAY
8625: NONEQUAL
8626: PUSH
8627: LD_EXP 19
8631: NOT
8632: PUSH
8633: LD_EXP 20
8637: PUSH
8638: LD_VAR 0 1
8642: ARRAY
8643: PUSH
8644: LD_OWVAR 2
8648: NONEQUAL
8649: AND
8650: OR
8651: IFFALSE 8665
// ComMoveToArea ( un , BuildUpEscape ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 14
8660: PPUSH
8661: CALL_OW 113
8665: GO 8595
8667: POP
8668: POP
8669: GO 8515
8671: POP
8672: POP
// enable ;
8673: ENABLE
// end ;
8674: PPOPN 2
8676: END
// every 5 5$00 do
8677: GO 8679
8679: DISABLE
// if ( def_builduptime = 1 ) then
8680: LD_EXP 45
8684: PUSH
8685: LD_INT 1
8687: EQUAL
8688: IFFALSE 8694
// EndBuildUp ;
8690: CALL 8307 0 0
8694: END
// every 10 10$00 do
8695: GO 8697
8697: DISABLE
// if ( def_builduptime = 2 ) then
8698: LD_EXP 45
8702: PUSH
8703: LD_INT 2
8705: EQUAL
8706: IFFALSE 8712
// EndBuildUp ;
8708: CALL 8307 0 0
8712: END
// every 15 15$00 do
8713: GO 8715
8715: DISABLE
// if ( def_builduptime = 3 ) then
8716: LD_EXP 45
8720: PUSH
8721: LD_INT 3
8723: EQUAL
8724: IFFALSE 8730
// EndBuildUp ; end_of_file
8726: CALL 8307 0 0
8730: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
// begin enable ;
8737: ENABLE
// for x := 1 to 8 do
8738: LD_ADDR_VAR 0 1
8742: PUSH
8743: DOUBLE
8744: LD_INT 1
8746: DEC
8747: ST_TO_ADDR
8748: LD_INT 8
8750: PUSH
8751: FOR_TO
8752: IFFALSE 8836
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8754: LD_LOC 18
8758: PUSH
8759: LD_VAR 0 1
8763: ARRAY
8764: PUSH
8765: LD_INT 5
8767: GREATER
8768: PUSH
8769: LD_LOC 16
8773: PUSH
8774: LD_VAR 0 1
8778: ARRAY
8779: PUSH
8780: LD_INT 1
8782: NEG
8783: EQUAL
8784: AND
8785: IFFALSE 8834
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8787: LD_ADDR_LOC 17
8791: PUSH
8792: LD_LOC 17
8796: PPUSH
8797: LD_VAR 0 1
8801: PPUSH
8802: LD_LOC 17
8806: PUSH
8807: LD_VAR 0 1
8811: ARRAY
8812: PUSH
8813: LD_INT 6
8815: PLUS
8816: PPUSH
8817: CALL_OW 1
8821: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8822: LD_VAR 0 1
8826: PPUSH
8827: LD_INT 0
8829: PPUSH
8830: CALL 9008 0 2
// end ;
8834: GO 8751
8836: POP
8837: POP
// end ;
8838: PPOPN 1
8840: END
// every 0 0$1 marked 200 do var BGL , x ;
8841: GO 8843
8843: DISABLE
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
// begin enable ;
8848: ENABLE
// for x := 1 to 8 do
8849: LD_ADDR_VAR 0 2
8853: PUSH
8854: DOUBLE
8855: LD_INT 1
8857: DEC
8858: ST_TO_ADDR
8859: LD_INT 8
8861: PUSH
8862: FOR_TO
8863: IFFALSE 8994
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8865: LD_LOC 16
8869: PUSH
8870: LD_VAR 0 2
8874: ARRAY
8875: PUSH
8876: LD_INT 1
8878: NEG
8879: GREATER
8880: PUSH
8881: LD_LOC 16
8885: PUSH
8886: LD_VAR 0 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 300
8896: AND
8897: IFFALSE 8992
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8899: LD_ADDR_VAR 0 1
8903: PUSH
8904: LD_LOC 16
8908: PUSH
8909: LD_VAR 0 2
8913: ARRAY
8914: PPUSH
8915: CALL_OW 256
8919: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8920: LD_VAR 0 1
8924: PUSH
8925: LD_INT 1000
8927: LESS
8928: PUSH
8929: LD_VAR 0 1
8933: PUSH
8934: LD_INT 100
8936: GREATER
8937: AND
8938: IFFALSE 8992
// begin BGL := BGL + 10 ;
8940: LD_ADDR_VAR 0 1
8944: PUSH
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 10
8952: PLUS
8953: ST_TO_ADDR
// if BGL > 1000 then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 1000
8961: GREATER
8962: IFFALSE 8972
// BGL := 1000 ;
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_INT 1000
8971: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8972: LD_LOC 16
8976: PUSH
8977: LD_VAR 0 2
8981: ARRAY
8982: PPUSH
8983: LD_VAR 0 1
8987: PPUSH
8988: CALL_OW 234
// end ; end ;
8992: GO 8862
8994: POP
8995: POP
// end ;
8996: PPOPN 2
8998: END
// every 0 0$1 marked 200 do
8999: GO 9001
9001: DISABLE
// begin DisplayTimeWithKills ;
9002: CALL 9249 0 0
// enable ;
9006: ENABLE
// end ;
9007: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9008: LD_INT 0
9010: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9011: LD_ADDR_OWVAR 24
9015: PUSH
9016: LD_INT 0
9018: PPUSH
9019: LD_INT 5
9021: PPUSH
9022: CALL_OW 12
9026: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9027: LD_INT 1
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: LD_INT 15
9035: PPUSH
9036: CALL_OW 380
// hc_importance := 106 ;
9040: LD_ADDR_OWVAR 32
9044: PUSH
9045: LD_INT 106
9047: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9048: LD_ADDR_OWVAR 26
9052: PUSH
9053: LD_STRING Blood God of 
9055: PUSH
9056: LD_OWVAR 19
9060: PUSH
9061: LD_VAR 0 1
9065: ARRAY
9066: STR
9067: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9068: LD_ADDR_OWVAR 21
9072: PUSH
9073: LD_EXP 18
9077: PUSH
9078: LD_VAR 0 1
9082: ARRAY
9083: ST_TO_ADDR
// uc_side := side ;
9084: LD_ADDR_OWVAR 20
9088: PUSH
9089: LD_VAR 0 1
9093: ST_TO_ADDR
// hc_noskilllimit := true ;
9094: LD_ADDR_OWVAR 76
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// hc_agressivity := 50 ;
9102: LD_ADDR_OWVAR 35
9106: PUSH
9107: LD_INT 50
9109: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9110: LD_ADDR_LOC 16
9114: PUSH
9115: LD_LOC 16
9119: PPUSH
9120: LD_VAR 0 1
9124: PPUSH
9125: CALL_OW 44
9129: PPUSH
9130: CALL_OW 1
9134: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9135: LD_LOC 16
9139: PUSH
9140: LD_VAR 0 1
9144: ARRAY
9145: PPUSH
9146: LD_LOC 19
9150: PUSH
9151: LD_EXP 17
9155: PUSH
9156: LD_VAR 0 1
9160: ARRAY
9161: ARRAY
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PPUSH
9167: LD_LOC 19
9171: PUSH
9172: LD_EXP 17
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: LD_INT 10
9190: PPUSH
9191: LD_INT 0
9193: PPUSH
9194: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9198: LD_LOC 16
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_INT 300
9214: PPUSH
9215: CALL_OW 239
// if not NoDialog then
9219: LD_VAR 0 2
9223: NOT
9224: IFFALSE 9244
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9226: LD_LOC 16
9230: PUSH
9231: LD_VAR 0 1
9235: ARRAY
9236: PPUSH
9237: LD_STRING DLAwaken
9239: PPUSH
9240: CALL_OW 94
// end ;
9244: LD_VAR 0 3
9248: RET
// function DisplayTimeWithKills ; var x ; begin
9249: LD_INT 0
9251: PPUSH
9252: PPUSH
// ExtraStrings :=  ;
9253: LD_ADDR_EXP 47
9257: PUSH
9258: LD_STRING 
9260: ST_TO_ADDR
// for x = 1 to Side_Positions do
9261: LD_ADDR_VAR 0 2
9265: PUSH
9266: DOUBLE
9267: LD_INT 1
9269: DEC
9270: ST_TO_ADDR
9271: LD_EXP 17
9275: PUSH
9276: FOR_TO
9277: IFFALSE 9510
// if Side_Positions [ x ] then
9279: LD_EXP 17
9283: PUSH
9284: LD_VAR 0 2
9288: ARRAY
9289: IFFALSE 9508
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9291: LD_ADDR_LOC 18
9295: PUSH
9296: LD_LOC 18
9300: PPUSH
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_VAR 0 2
9310: PPUSH
9311: CALL_OW 515
9315: PUSH
9316: LD_LOC 17
9320: PUSH
9321: LD_VAR 0 2
9325: ARRAY
9326: MINUS
9327: PPUSH
9328: CALL_OW 1
9332: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9333: LD_LOC 16
9337: PUSH
9338: LD_VAR 0 2
9342: ARRAY
9343: PUSH
9344: LD_INT 1
9346: NEG
9347: GREATER
9348: PUSH
9349: LD_LOC 16
9353: PUSH
9354: LD_VAR 0 2
9358: ARRAY
9359: PPUSH
9360: CALL_OW 300
9364: AND
9365: IFFALSE 9398
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9367: LD_ADDR_EXP 47
9371: PUSH
9372: LD_EXP 47
9376: PUSH
9377: LD_STRING #godawoken
9379: PUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_VAR 0 2
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: ADD
9395: ST_TO_ADDR
9396: GO 9508
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9398: LD_LOC 16
9402: PUSH
9403: LD_VAR 0 2
9407: ARRAY
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: GREATER
9413: PUSH
9414: LD_LOC 16
9418: PUSH
9419: LD_VAR 0 2
9423: ARRAY
9424: PPUSH
9425: CALL_OW 301
9429: AND
9430: IFFALSE 9463
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9432: LD_ADDR_EXP 47
9436: PUSH
9437: LD_EXP 47
9441: PUSH
9442: LD_STRING #goddied
9444: PUSH
9445: LD_VAR 0 2
9449: PUSH
9450: LD_VAR 0 2
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: ADD
9460: ST_TO_ADDR
9461: GO 9508
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9463: LD_ADDR_EXP 47
9467: PUSH
9468: LD_EXP 47
9472: PUSH
9473: LD_STRING #godssacrifise
9475: PUSH
9476: LD_VAR 0 2
9480: PUSH
9481: LD_VAR 0 2
9485: PUSH
9486: LD_LOC 18
9490: PUSH
9491: LD_VAR 0 2
9495: ARRAY
9496: PUSH
9497: LD_INT 6
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: ADD
9507: ST_TO_ADDR
9508: GO 9276
9510: POP
9511: POP
// end ;
9512: LD_VAR 0 1
9516: RET
// export function InitBloodGods ; begin
9517: LD_INT 0
9519: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9520: LD_ADDR_LOC 16
9524: PUSH
9525: LD_INT 1
9527: NEG
9528: PUSH
9529: LD_INT 1
9531: NEG
9532: PUSH
9533: LD_INT 1
9535: NEG
9536: PUSH
9537: LD_INT 1
9539: NEG
9540: PUSH
9541: LD_INT 1
9543: NEG
9544: PUSH
9545: LD_INT 1
9547: NEG
9548: PUSH
9549: LD_INT 1
9551: NEG
9552: PUSH
9553: LD_INT 1
9555: NEG
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9567: LD_ADDR_LOC 17
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: LD_INT 0
9577: PUSH
9578: LD_INT 0
9580: PUSH
9581: LD_INT 0
9583: PUSH
9584: LD_INT 0
9586: PUSH
9587: LD_INT 0
9589: PUSH
9590: LD_INT 0
9592: PUSH
9593: LD_INT 0
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9606: LD_ADDR_LOC 18
9610: PUSH
9611: LD_INT 0
9613: PUSH
9614: LD_INT 0
9616: PUSH
9617: LD_INT 0
9619: PUSH
9620: LD_INT 0
9622: PUSH
9623: LD_INT 0
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: LD_INT 0
9631: PUSH
9632: LD_INT 0
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9645: LD_ADDR_LOC 19
9649: PUSH
9650: LD_INT 60
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 82
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 124
9672: PUSH
9673: LD_INT 45
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 147
9682: PUSH
9683: LD_INT 90
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 126
9692: PUSH
9693: LD_INT 112
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 84
9702: PUSH
9703: LD_INT 92
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 106
9712: PUSH
9713: LD_INT 73
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 106
9722: PUSH
9723: LD_INT 73
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: ST_TO_ADDR
// ClearHumansKilled ;
9740: CALL_OW 516
// enable ( 200 ) ;
9744: LD_INT 200
9746: ENABLE_MARKED
// end ; end_of_file
9747: LD_VAR 0 1
9751: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9752: LD_INT 0
9754: PPUSH
9755: PPUSH
// if ( not IAmSpec ) then
9756: CALL_OW 531
9760: NOT
9761: IFFALSE 9777
// Result := Limits_Info ^  ;
9763: LD_ADDR_VAR 0 1
9767: PUSH
9768: LD_LOC 27
9772: PUSH
9773: LD_STRING 
9775: ADD
9776: ST_TO_ADDR
// for i := 1 to 8 do
9777: LD_ADDR_VAR 0 2
9781: PUSH
9782: DOUBLE
9783: LD_INT 1
9785: DEC
9786: ST_TO_ADDR
9787: LD_INT 8
9789: PUSH
9790: FOR_TO
9791: IFFALSE 9836
// if Cheaters [ i ] then
9793: LD_LOC 28
9797: PUSH
9798: LD_VAR 0 2
9802: ARRAY
9803: IFFALSE 9834
// Result := Result ^ [ #Cheater , i , i ] ;
9805: LD_ADDR_VAR 0 1
9809: PUSH
9810: LD_VAR 0 1
9814: PUSH
9815: LD_STRING #Cheater
9817: PUSH
9818: LD_VAR 0 2
9822: PUSH
9823: LD_VAR 0 2
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: ADD
9833: ST_TO_ADDR
9834: GO 9790
9836: POP
9837: POP
// end ;
9838: LD_VAR 0 1
9842: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9843: LD_INT 0
9845: PPUSH
9846: PPUSH
9847: PPUSH
9848: PPUSH
9849: PPUSH
// case Game_Type of 10 :
9850: LD_EXP 30
9854: PUSH
9855: LD_INT 10
9857: DOUBLE
9858: EQUAL
9859: IFTRUE 9863
9861: GO 9874
9863: POP
// def_game_rules := 1 ; 11 :
9864: LD_ADDR_EXP 31
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
9872: GO 9894
9874: LD_INT 11
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9893
9882: POP
// def_game_rules := 3 ; end ;
9883: LD_ADDR_EXP 31
9887: PUSH
9888: LD_INT 3
9890: ST_TO_ADDR
9891: GO 9894
9893: POP
// case def_game_rules of 0 :
9894: LD_EXP 31
9898: PUSH
9899: LD_INT 0
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9912
9907: POP
// exit ; 1 :
9908: GO 11970
9910: GO 11870
9912: LD_INT 1
9914: DOUBLE
9915: EQUAL
9916: IFTRUE 9920
9918: GO 10136
9920: POP
// begin def_base_level := 2 ;
9921: LD_ADDR_EXP 32
9925: PUSH
9926: LD_INT 2
9928: ST_TO_ADDR
// def_amount_of_people := 2 ;
9929: LD_ADDR_EXP 33
9933: PUSH
9934: LD_INT 2
9936: ST_TO_ADDR
// def_skill_level := 1 ;
9937: LD_ADDR_EXP 34
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// def_starting_resources := 2 ;
9945: LD_ADDR_EXP 35
9949: PUSH
9950: LD_INT 2
9952: ST_TO_ADDR
// def_shipments_density := 1 ;
9953: LD_ADDR_EXP 36
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9961: LD_ADDR_EXP 37
9965: PUSH
9966: LD_INT 0
9968: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9969: LD_ADDR_EXP 38
9973: PUSH
9974: LD_INT 1
9976: ST_TO_ADDR
// def_shared_vision := 1 ;
9977: LD_ADDR_EXP 39
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
// def_morale_flags := 3 ;
9985: LD_ADDR_EXP 40
9989: PUSH
9990: LD_INT 3
9992: ST_TO_ADDR
// def_siberite_detection := 1 ;
9993: LD_ADDR_EXP 41
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// def_people_respawning := 1 ;
10001: LD_ADDR_EXP 42
10005: PUSH
10006: LD_INT 1
10008: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10009: LD_ADDR_EXP 43
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10017: LD_ADDR_EXP 44
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// def_builduptime := 2 ;
10025: LD_ADDR_EXP 45
10029: PUSH
10030: LD_INT 2
10032: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10033: LD_ADDR_VAR 0 2
10037: PUSH
10038: EMPTY
10039: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10040: LD_ADDR_VAR 0 3
10044: PUSH
10045: EMPTY
10046: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10047: LD_ADDR_LOC 22
10051: PUSH
10052: EMPTY
10053: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10054: LD_ADDR_LOC 23
10058: PUSH
10059: EMPTY
10060: ST_TO_ADDR
// Banned_Controls := [ ] ;
10061: LD_ADDR_LOC 24
10065: PUSH
10066: EMPTY
10067: ST_TO_ADDR
// Banned_Engines := [ ] ;
10068: LD_ADDR_LOC 25
10072: PUSH
10073: EMPTY
10074: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10075: LD_ADDR_LOC 20
10079: PUSH
10080: LD_INT 37
10082: PUSH
10083: EMPTY
10084: LIST
10085: PUSH
10086: LD_INT 4
10088: PUSH
10089: LD_INT 5
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 31
10098: PUSH
10099: LD_INT 32
10101: PUSH
10102: LD_INT 33
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10115: LD_ADDR_LOC 21
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: LD_INT 4
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: ST_TO_ADDR
// end ; 2 :
10134: GO 11870
10136: LD_INT 2
10138: DOUBLE
10139: EQUAL
10140: IFTRUE 10144
10142: GO 10353
10144: POP
// begin def_base_level := 1 ;
10145: LD_ADDR_EXP 32
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// def_amount_of_people := 2 ;
10153: LD_ADDR_EXP 33
10157: PUSH
10158: LD_INT 2
10160: ST_TO_ADDR
// def_skill_level := 3 ;
10161: LD_ADDR_EXP 34
10165: PUSH
10166: LD_INT 3
10168: ST_TO_ADDR
// def_starting_resources := 3 ;
10169: LD_ADDR_EXP 35
10173: PUSH
10174: LD_INT 3
10176: ST_TO_ADDR
// def_shipments_density := 2 ;
10177: LD_ADDR_EXP 36
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10185: LD_ADDR_EXP 37
10189: PUSH
10190: LD_INT 1
10192: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10193: LD_ADDR_EXP 38
10197: PUSH
10198: LD_INT 2
10200: ST_TO_ADDR
// def_shared_vision := 1 ;
10201: LD_ADDR_EXP 39
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// def_morale_flags := 0 ;
10209: LD_ADDR_EXP 40
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// def_siberite_detection := 1 ;
10217: LD_ADDR_EXP 41
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// def_people_respawning := 0 ;
10225: LD_ADDR_EXP 42
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10233: LD_ADDR_EXP 43
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10241: LD_ADDR_EXP 44
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// def_builduptime := 2 ;
10249: LD_ADDR_EXP 45
10253: PUSH
10254: LD_INT 2
10256: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10257: LD_ADDR_VAR 0 2
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10268: LD_ADDR_VAR 0 3
10272: PUSH
10273: EMPTY
10274: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10275: LD_ADDR_LOC 22
10279: PUSH
10280: EMPTY
10281: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10282: LD_ADDR_LOC 23
10286: PUSH
10287: EMPTY
10288: ST_TO_ADDR
// Banned_Controls := [ ] ;
10289: LD_ADDR_LOC 24
10293: PUSH
10294: EMPTY
10295: ST_TO_ADDR
// Banned_Engines := [ ] ;
10296: LD_ADDR_LOC 25
10300: PUSH
10301: EMPTY
10302: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10303: LD_ADDR_LOC 20
10307: PUSH
10308: LD_INT 4
10310: PUSH
10311: LD_INT 5
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 31
10320: PUSH
10321: LD_INT 32
10323: PUSH
10324: LD_INT 33
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10336: LD_ADDR_LOC 21
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 2
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: ST_TO_ADDR
// end ; 3 :
10351: GO 11870
10353: LD_INT 3
10355: DOUBLE
10356: EQUAL
10357: IFTRUE 10361
10359: GO 10604
10361: POP
// begin def_base_level := 1 ;
10362: LD_ADDR_EXP 32
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// def_amount_of_people := 2 ;
10370: LD_ADDR_EXP 33
10374: PUSH
10375: LD_INT 2
10377: ST_TO_ADDR
// def_skill_level := 3 ;
10378: LD_ADDR_EXP 34
10382: PUSH
10383: LD_INT 3
10385: ST_TO_ADDR
// def_starting_resources := 3 ;
10386: LD_ADDR_EXP 35
10390: PUSH
10391: LD_INT 3
10393: ST_TO_ADDR
// def_shipments_density := 1 ;
10394: LD_ADDR_EXP 36
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10402: LD_ADDR_EXP 37
10406: PUSH
10407: LD_INT 0
10409: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10410: LD_ADDR_EXP 38
10414: PUSH
10415: LD_INT 1
10417: ST_TO_ADDR
// def_shared_vision := 1 ;
10418: LD_ADDR_EXP 39
10422: PUSH
10423: LD_INT 1
10425: ST_TO_ADDR
// def_morale_flags := 0 ;
10426: LD_ADDR_EXP 40
10430: PUSH
10431: LD_INT 0
10433: ST_TO_ADDR
// def_siberite_detection := 1 ;
10434: LD_ADDR_EXP 41
10438: PUSH
10439: LD_INT 1
10441: ST_TO_ADDR
// def_people_respawning := 0 ;
10442: LD_ADDR_EXP 42
10446: PUSH
10447: LD_INT 0
10449: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10450: LD_ADDR_EXP 43
10454: PUSH
10455: LD_INT 2
10457: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10458: LD_ADDR_EXP 44
10462: PUSH
10463: LD_INT 0
10465: ST_TO_ADDR
// def_builduptime := 1 ;
10466: LD_ADDR_EXP 45
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10474: LD_ADDR_VAR 0 2
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: EMPTY
10483: LIST
10484: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10485: LD_ADDR_VAR 0 3
10489: PUSH
10490: LD_INT 2
10492: PUSH
10493: LD_INT 37
10495: PUSH
10496: LD_INT 32
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 36
10504: PUSH
10505: LD_INT 16
10507: PUSH
10508: LD_INT 23
10510: PUSH
10511: LD_INT 21
10513: PUSH
10514: LD_INT 18
10516: PUSH
10517: LD_INT 22
10519: PUSH
10520: LD_INT 20
10522: PUSH
10523: LD_INT 19
10525: PUSH
10526: LD_INT 25
10528: PUSH
10529: LD_INT 17
10531: PUSH
10532: LD_INT 24
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10552: LD_ADDR_LOC 22
10556: PUSH
10557: EMPTY
10558: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10559: LD_ADDR_LOC 23
10563: PUSH
10564: EMPTY
10565: ST_TO_ADDR
// Banned_Controls := [ ] ;
10566: LD_ADDR_LOC 24
10570: PUSH
10571: EMPTY
10572: ST_TO_ADDR
// Banned_Engines := [ ] ;
10573: LD_ADDR_LOC 25
10577: PUSH
10578: EMPTY
10579: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10580: LD_ADDR_LOC 20
10584: PUSH
10585: EMPTY
10586: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10587: LD_ADDR_LOC 21
10591: PUSH
10592: EMPTY
10593: ST_TO_ADDR
// No_Mechs := true ;
10594: LD_ADDR_EXP 46
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// end ; 4 :
10602: GO 11870
10604: LD_INT 4
10606: DOUBLE
10607: EQUAL
10608: IFTRUE 10612
10610: GO 10787
10612: POP
// begin def_base_level := 1 ;
10613: LD_ADDR_EXP 32
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// def_amount_of_people := 2 ;
10621: LD_ADDR_EXP 33
10625: PUSH
10626: LD_INT 2
10628: ST_TO_ADDR
// def_skill_level := 3 ;
10629: LD_ADDR_EXP 34
10633: PUSH
10634: LD_INT 3
10636: ST_TO_ADDR
// def_starting_resources := 3 ;
10637: LD_ADDR_EXP 35
10641: PUSH
10642: LD_INT 3
10644: ST_TO_ADDR
// def_shipments_density := 2 ;
10645: LD_ADDR_EXP 36
10649: PUSH
10650: LD_INT 2
10652: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10653: LD_ADDR_EXP 37
10657: PUSH
10658: LD_INT 1
10660: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10661: LD_ADDR_EXP 38
10665: PUSH
10666: LD_INT 2
10668: ST_TO_ADDR
// def_shared_vision := 1 ;
10669: LD_ADDR_EXP 39
10673: PUSH
10674: LD_INT 1
10676: ST_TO_ADDR
// def_morale_flags := 0 ;
10677: LD_ADDR_EXP 40
10681: PUSH
10682: LD_INT 0
10684: ST_TO_ADDR
// def_siberite_detection := 1 ;
10685: LD_ADDR_EXP 41
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// def_people_respawning := 0 ;
10693: LD_ADDR_EXP 42
10697: PUSH
10698: LD_INT 0
10700: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10701: LD_ADDR_EXP 43
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10709: LD_ADDR_EXP 44
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// def_builduptime := 3 ;
10717: LD_ADDR_EXP 45
10721: PUSH
10722: LD_INT 3
10724: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10725: LD_ADDR_VAR 0 2
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10736: LD_ADDR_VAR 0 3
10740: PUSH
10741: EMPTY
10742: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10743: LD_ADDR_LOC 22
10747: PUSH
10748: EMPTY
10749: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10750: LD_ADDR_LOC 23
10754: PUSH
10755: EMPTY
10756: ST_TO_ADDR
// Banned_Controls := [ ] ;
10757: LD_ADDR_LOC 24
10761: PUSH
10762: EMPTY
10763: ST_TO_ADDR
// Banned_Engines := [ ] ;
10764: LD_ADDR_LOC 25
10768: PUSH
10769: EMPTY
10770: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10771: LD_ADDR_LOC 20
10775: PUSH
10776: EMPTY
10777: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10778: LD_ADDR_LOC 21
10782: PUSH
10783: EMPTY
10784: ST_TO_ADDR
// end ; 5 :
10785: GO 11870
10787: LD_INT 5
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 11044
10795: POP
// begin def_base_level := 0 ;
10796: LD_ADDR_EXP 32
10800: PUSH
10801: LD_INT 0
10803: ST_TO_ADDR
// def_amount_of_people := 0 ;
10804: LD_ADDR_EXP 33
10808: PUSH
10809: LD_INT 0
10811: ST_TO_ADDR
// def_skill_level := 0 ;
10812: LD_ADDR_EXP 34
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// def_starting_resources := 0 ;
10820: LD_ADDR_EXP 35
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// def_shipments_density := 0 ;
10828: LD_ADDR_EXP 36
10832: PUSH
10833: LD_INT 0
10835: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10836: LD_ADDR_EXP 37
10840: PUSH
10841: LD_INT 0
10843: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10844: LD_ADDR_EXP 38
10848: PUSH
10849: LD_INT 0
10851: ST_TO_ADDR
// def_shared_vision := 1 ;
10852: LD_ADDR_EXP 39
10856: PUSH
10857: LD_INT 1
10859: ST_TO_ADDR
// def_morale_flags := 0 ;
10860: LD_ADDR_EXP 40
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// def_siberite_detection := 0 ;
10868: LD_ADDR_EXP 41
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// def_people_respawning := 1 ;
10876: LD_ADDR_EXP 42
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10884: LD_ADDR_EXP 43
10888: PUSH
10889: LD_INT 1
10891: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10892: LD_ADDR_EXP 44
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// def_builduptime := 0 ;
10900: LD_ADDR_EXP 45
10904: PUSH
10905: LD_INT 0
10907: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: LD_INT 10
10915: PUSH
10916: LD_INT 3
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_INT 12
10930: PUSH
10931: LD_INT 11
10933: PUSH
10934: LD_INT 14
10936: PUSH
10937: LD_INT 13
10939: PUSH
10940: LD_INT 5
10942: PUSH
10943: LD_INT 24
10945: PUSH
10946: LD_INT 21
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 36
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10966: LD_ADDR_LOC 22
10970: PUSH
10971: LD_INT 31
10973: PUSH
10974: EMPTY
10975: LIST
10976: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10977: LD_ADDR_LOC 23
10981: PUSH
10982: EMPTY
10983: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10984: LD_ADDR_LOC 24
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: EMPTY
10993: LIST
10994: ST_TO_ADDR
// Banned_Engines := [ ] ;
10995: LD_ADDR_LOC 25
10999: PUSH
11000: EMPTY
11001: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11002: LD_ADDR_LOC 20
11006: PUSH
11007: LD_INT 4
11009: PUSH
11010: EMPTY
11011: LIST
11012: PUSH
11013: LD_INT 31
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11027: LD_ADDR_LOC 21
11031: PUSH
11032: LD_INT 1
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: ST_TO_ADDR
// end ; 6 :
11042: GO 11870
11044: LD_INT 6
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11255
11052: POP
// begin def_base_level := 1 ;
11053: LD_ADDR_EXP 32
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// def_amount_of_people := 2 ;
11061: LD_ADDR_EXP 33
11065: PUSH
11066: LD_INT 2
11068: ST_TO_ADDR
// def_skill_level := 3 ;
11069: LD_ADDR_EXP 34
11073: PUSH
11074: LD_INT 3
11076: ST_TO_ADDR
// def_starting_resources := 3 ;
11077: LD_ADDR_EXP 35
11081: PUSH
11082: LD_INT 3
11084: ST_TO_ADDR
// def_shipments_density := 1 ;
11085: LD_ADDR_EXP 36
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11093: LD_ADDR_EXP 37
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11101: LD_ADDR_EXP 38
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// def_shared_vision := 1 ;
11109: LD_ADDR_EXP 39
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// def_morale_flags := 0 ;
11117: LD_ADDR_EXP 40
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// def_siberite_detection := 1 ;
11125: LD_ADDR_EXP 41
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// def_people_respawning := 2 ;
11133: LD_ADDR_EXP 42
11137: PUSH
11138: LD_INT 2
11140: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11141: LD_ADDR_EXP 43
11145: PUSH
11146: LD_INT 1
11148: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11149: LD_ADDR_EXP 44
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// def_builduptime := 1 ;
11157: LD_ADDR_EXP 45
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11165: LD_ADDR_VAR 0 2
11169: PUSH
11170: LD_INT 23
11172: PUSH
11173: EMPTY
11174: LIST
11175: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11176: LD_ADDR_VAR 0 3
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: LD_INT 37
11186: PUSH
11187: LD_INT 31
11189: PUSH
11190: LD_INT 32
11192: PUSH
11193: LD_INT 33
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11203: LD_ADDR_LOC 22
11207: PUSH
11208: EMPTY
11209: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11210: LD_ADDR_LOC 23
11214: PUSH
11215: EMPTY
11216: ST_TO_ADDR
// Banned_Controls := [ ] ;
11217: LD_ADDR_LOC 24
11221: PUSH
11222: EMPTY
11223: ST_TO_ADDR
// Banned_Engines := [ ] ;
11224: LD_ADDR_LOC 25
11228: PUSH
11229: EMPTY
11230: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11231: LD_ADDR_LOC 20
11235: PUSH
11236: EMPTY
11237: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11238: LD_ADDR_LOC 21
11242: PUSH
11243: EMPTY
11244: ST_TO_ADDR
// No_Mechs := true ;
11245: LD_ADDR_EXP 46
11249: PUSH
11250: LD_INT 1
11252: ST_TO_ADDR
// end ; 7 :
11253: GO 11870
11255: LD_INT 7
11257: DOUBLE
11258: EQUAL
11259: IFTRUE 11263
11261: GO 11461
11263: POP
// begin def_base_level := 1 ;
11264: LD_ADDR_EXP 32
11268: PUSH
11269: LD_INT 1
11271: ST_TO_ADDR
// def_amount_of_people := 2 ;
11272: LD_ADDR_EXP 33
11276: PUSH
11277: LD_INT 2
11279: ST_TO_ADDR
// def_skill_level := 3 ;
11280: LD_ADDR_EXP 34
11284: PUSH
11285: LD_INT 3
11287: ST_TO_ADDR
// def_starting_resources := 3 ;
11288: LD_ADDR_EXP 35
11292: PUSH
11293: LD_INT 3
11295: ST_TO_ADDR
// def_shipments_density := 1 ;
11296: LD_ADDR_EXP 36
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11304: LD_ADDR_EXP 37
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11312: LD_ADDR_EXP 38
11316: PUSH
11317: LD_INT 2
11319: ST_TO_ADDR
// def_shared_vision := 1 ;
11320: LD_ADDR_EXP 39
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// def_morale_flags := 0 ;
11328: LD_ADDR_EXP 40
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// def_siberite_detection := 1 ;
11336: LD_ADDR_EXP 41
11340: PUSH
11341: LD_INT 1
11343: ST_TO_ADDR
// def_people_respawning := 0 ;
11344: LD_ADDR_EXP 42
11348: PUSH
11349: LD_INT 0
11351: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11352: LD_ADDR_EXP 43
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11360: LD_ADDR_EXP 44
11364: PUSH
11365: LD_INT 0
11367: ST_TO_ADDR
// def_builduptime := 3 ;
11368: LD_ADDR_EXP 45
11372: PUSH
11373: LD_INT 3
11375: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11376: LD_ADDR_VAR 0 2
11380: PUSH
11381: LD_INT 23
11383: PUSH
11384: EMPTY
11385: LIST
11386: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_INT 37
11394: PUSH
11395: EMPTY
11396: LIST
11397: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11398: LD_ADDR_LOC 22
11402: PUSH
11403: EMPTY
11404: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11405: LD_ADDR_LOC 23
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// Banned_Controls := [ ] ;
11412: LD_ADDR_LOC 24
11416: PUSH
11417: EMPTY
11418: ST_TO_ADDR
// Banned_Engines := [ ] ;
11419: LD_ADDR_LOC 25
11423: PUSH
11424: EMPTY
11425: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11426: LD_ADDR_LOC 20
11430: PUSH
11431: LD_INT 31
11433: PUSH
11434: LD_INT 32
11436: PUSH
11437: LD_INT 33
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11448: LD_ADDR_LOC 21
11452: PUSH
11453: LD_INT 10
11455: PUSH
11456: EMPTY
11457: LIST
11458: ST_TO_ADDR
// end ; 8 :
11459: GO 11870
11461: LD_INT 8
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11869
11469: POP
// begin def_base_level := 0 ;
11470: LD_ADDR_EXP 32
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11478: LD_ADDR_EXP 33
11482: PUSH
11483: LD_INT 0
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 12
11493: ST_TO_ADDR
// def_skill_level := 0 ;
11494: LD_ADDR_EXP 34
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// def_starting_resources := 2 ;
11502: LD_ADDR_EXP 35
11506: PUSH
11507: LD_INT 2
11509: ST_TO_ADDR
// def_shipments_density := 1 ;
11510: LD_ADDR_EXP 36
11514: PUSH
11515: LD_INT 1
11517: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11518: LD_ADDR_EXP 37
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11526: LD_ADDR_EXP 38
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// def_shared_vision := 1 ;
11534: LD_ADDR_EXP 39
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11542: LD_ADDR_EXP 40
11546: PUSH
11547: LD_INT 0
11549: PPUSH
11550: LD_INT 2
11552: PPUSH
11553: CALL_OW 12
11557: ST_TO_ADDR
// def_siberite_detection := 0 ;
11558: LD_ADDR_EXP 41
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// def_people_respawning := 0 ;
11566: LD_ADDR_EXP 42
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11574: LD_ADDR_EXP 43
11578: PUSH
11579: LD_INT 2
11581: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11582: LD_ADDR_EXP 44
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// def_builduptime := 0 ;
11590: LD_ADDR_EXP 45
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_INT 23
11605: PUSH
11606: LD_INT 20
11608: PUSH
11609: LD_INT 40
11611: PUSH
11612: LD_INT 47
11614: PUSH
11615: LD_INT 46
11617: PUSH
11618: LD_INT 39
11620: PUSH
11621: LD_INT 71
11623: PUSH
11624: LD_INT 34
11626: PUSH
11627: LD_INT 41
11629: PUSH
11630: LD_INT 44
11632: PUSH
11633: LD_INT 17
11635: PUSH
11636: LD_INT 16
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: LD_INT 37
11660: PUSH
11661: LD_INT 5
11663: PUSH
11664: LD_INT 13
11666: PUSH
11667: LD_INT 34
11669: PUSH
11670: LD_INT 12
11672: PUSH
11673: LD_INT 15
11675: PUSH
11676: LD_INT 11
11678: PUSH
11679: LD_INT 14
11681: PUSH
11682: LD_INT 29
11684: PUSH
11685: LD_INT 30
11687: PUSH
11688: LD_INT 28
11690: PUSH
11691: LD_INT 24
11693: PUSH
11694: LD_INT 25
11696: PUSH
11697: LD_INT 20
11699: PUSH
11700: LD_INT 21
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_INT 36
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11728: LD_ADDR_LOC 22
11732: PUSH
11733: EMPTY
11734: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11735: LD_ADDR_LOC 23
11739: PUSH
11740: LD_INT 14
11742: PUSH
11743: EMPTY
11744: LIST
11745: ST_TO_ADDR
// Banned_Controls := [ ] ;
11746: LD_ADDR_LOC 24
11750: PUSH
11751: EMPTY
11752: ST_TO_ADDR
// Banned_Engines := [ ] ;
11753: LD_ADDR_LOC 25
11757: PUSH
11758: EMPTY
11759: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11760: LD_ADDR_LOC 20
11764: PUSH
11765: LD_INT 31
11767: PUSH
11768: LD_INT 32
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 4
11777: PUSH
11778: EMPTY
11779: LIST
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11785: LD_ADDR_LOC 21
11789: PUSH
11790: LD_INT 2
11792: PUSH
11793: LD_INT 1
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
// for i := 1 to 8 do
11800: LD_ADDR_VAR 0 4
11804: PUSH
11805: DOUBLE
11806: LD_INT 1
11808: DEC
11809: ST_TO_ADDR
11810: LD_INT 8
11812: PUSH
11813: FOR_TO
11814: IFFALSE 11865
// if ( Side_Nations [ i ] = 3 ) then
11816: LD_EXP 18
11820: PUSH
11821: LD_VAR 0 4
11825: ARRAY
11826: PUSH
11827: LD_INT 3
11829: EQUAL
11830: IFFALSE 11863
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11832: LD_ADDR_EXP 18
11836: PUSH
11837: LD_EXP 18
11841: PPUSH
11842: LD_VAR 0 4
11846: PPUSH
11847: LD_INT 1
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 12
11857: PPUSH
11858: CALL_OW 1
11862: ST_TO_ADDR
11863: GO 11813
11865: POP
11866: POP
// end ; end ;
11867: GO 11870
11869: POP
// for i := 1 to 8 do
11870: LD_ADDR_VAR 0 4
11874: PUSH
11875: DOUBLE
11876: LD_INT 1
11878: DEC
11879: ST_TO_ADDR
11880: LD_INT 8
11882: PUSH
11883: FOR_TO
11884: IFFALSE 11968
// if Side_Positions [ i ] then
11886: LD_EXP 17
11890: PUSH
11891: LD_VAR 0 4
11895: ARRAY
11896: IFFALSE 11966
// begin for j in Unavailable_Techs do
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_VAR 0 2
11907: PUSH
11908: FOR_IN
11909: IFFALSE 11930
// SetTech ( j , i , 0 ) ;
11911: LD_VAR 0 5
11915: PPUSH
11916: LD_VAR 0 4
11920: PPUSH
11921: LD_INT 0
11923: PPUSH
11924: CALL_OW 322
11928: GO 11908
11930: POP
11931: POP
// for j in Unavailable_Builds do
11932: LD_ADDR_VAR 0 5
11936: PUSH
11937: LD_VAR 0 3
11941: PUSH
11942: FOR_IN
11943: IFFALSE 11964
// SetRestrict ( j , i , 0 ) ;
11945: LD_VAR 0 5
11949: PPUSH
11950: LD_VAR 0 4
11954: PPUSH
11955: LD_INT 0
11957: PPUSH
11958: CALL_OW 324
11962: GO 11942
11964: POP
11965: POP
// end ;
11966: GO 11883
11968: POP
11969: POP
// end ;
11970: LD_VAR 0 1
11974: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
// for i := 1 to Restricted_Builds do
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: DOUBLE
11990: LD_INT 1
11992: DEC
11993: ST_TO_ADDR
11994: LD_LOC 20
11998: PUSH
11999: FOR_TO
12000: IFFALSE 12310
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12002: LD_LOC 20
12006: PUSH
12007: LD_VAR 0 2
12011: ARRAY
12012: PUSH
12013: LD_INT 1
12015: ARRAY
12016: PUSH
12017: LD_INT 31
12019: DOUBLE
12020: EQUAL
12021: IFTRUE 12037
12023: LD_INT 32
12025: DOUBLE
12026: EQUAL
12027: IFTRUE 12037
12029: LD_INT 33
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12048
12037: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12038: LD_ADDR_VAR 0 6
12042: PUSH
12043: LD_STRING #Turrets
12045: ST_TO_ADDR
12046: GO 12093
12048: LD_INT 4
12050: DOUBLE
12051: EQUAL
12052: IFTRUE 12062
12054: LD_INT 5
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12073
12062: POP
// btype := #Armouries ; b_Behemoth :
12063: LD_ADDR_VAR 0 6
12067: PUSH
12068: LD_STRING #Armouries
12070: ST_TO_ADDR
12071: GO 12093
12073: LD_INT 37
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12092
12081: POP
// btype := #Behemoths ; end ;
12082: LD_ADDR_VAR 0 6
12086: PUSH
12087: LD_STRING #Behemoths
12089: ST_TO_ADDR
12090: GO 12093
12092: POP
// list := [ ] ;
12093: LD_ADDR_VAR 0 7
12097: PUSH
12098: EMPTY
12099: ST_TO_ADDR
// for j := 1 to 8 do
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: DOUBLE
12106: LD_INT 1
12108: DEC
12109: ST_TO_ADDR
12110: LD_INT 8
12112: PUSH
12113: FOR_TO
12114: IFFALSE 12207
// if Side_Positions [ j ] then
12116: LD_EXP 17
12120: PUSH
12121: LD_VAR 0 3
12125: ARRAY
12126: IFFALSE 12205
// begin amount := 0 ;
12128: LD_ADDR_VAR 0 5
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12136: LD_ADDR_VAR 0 4
12140: PUSH
12141: LD_LOC 20
12145: PUSH
12146: LD_VAR 0 2
12150: ARRAY
12151: PUSH
12152: FOR_IN
12153: IFFALSE 12201
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12155: LD_ADDR_VAR 0 5
12159: PUSH
12160: LD_VAR 0 5
12164: PUSH
12165: LD_INT 22
12167: PUSH
12168: LD_VAR 0 3
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 30
12179: PUSH
12180: LD_VAR 0 4
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: PLUS
12198: ST_TO_ADDR
12199: GO 12152
12201: POP
12202: POP
// break ;
12203: GO 12207
// end ;
12205: GO 12113
12207: POP
12208: POP
// list := [ ] ;
12209: LD_ADDR_VAR 0 7
12213: PUSH
12214: EMPTY
12215: ST_TO_ADDR
// for j := 1 to 8 do
12216: LD_ADDR_VAR 0 3
12220: PUSH
12221: DOUBLE
12222: LD_INT 1
12224: DEC
12225: ST_TO_ADDR
12226: LD_INT 8
12228: PUSH
12229: FOR_TO
12230: IFFALSE 12250
// list := list ^ amount ;
12232: LD_ADDR_VAR 0 7
12236: PUSH
12237: LD_VAR 0 7
12241: PUSH
12242: LD_VAR 0 5
12246: ADD
12247: ST_TO_ADDR
12248: GO 12229
12250: POP
12251: POP
// Already_Built := Already_Built ^ [ list ] ;
12252: LD_ADDR_LOC 26
12256: PUSH
12257: LD_LOC 26
12261: PUSH
12262: LD_VAR 0 7
12266: PUSH
12267: EMPTY
12268: LIST
12269: ADD
12270: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12271: LD_ADDR_LOC 27
12275: PUSH
12276: LD_LOC 27
12280: PUSH
12281: LD_VAR 0 6
12285: PUSH
12286: LD_VAR 0 5
12290: PUSH
12291: LD_LOC 21
12295: PUSH
12296: LD_VAR 0 2
12300: ARRAY
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: ADD
12307: ST_TO_ADDR
// end ;
12308: GO 11999
12310: POP
12311: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12312: LD_ADDR_LOC 28
12316: PUSH
12317: LD_INT 0
12319: PUSH
12320: LD_INT 0
12322: PUSH
12323: LD_INT 0
12325: PUSH
12326: LD_INT 0
12328: PUSH
12329: LD_INT 0
12331: PUSH
12332: LD_INT 0
12334: PUSH
12335: LD_INT 0
12337: PUSH
12338: LD_INT 0
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: ST_TO_ADDR
// if Limits_Info then
12351: LD_LOC 27
12355: IFFALSE 12371
// Limits_Info := #Limits ^ Limits_Info ;
12357: LD_ADDR_LOC 27
12361: PUSH
12362: LD_STRING #Limits
12364: PUSH
12365: LD_LOC 27
12369: ADD
12370: ST_TO_ADDR
// end ;
12371: LD_VAR 0 1
12375: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12376: LD_INT 0
12378: PPUSH
12379: PPUSH
12380: PPUSH
12381: PPUSH
// for i := 1 to Restricted_Builds do
12382: LD_ADDR_VAR 0 7
12386: PUSH
12387: DOUBLE
12388: LD_INT 1
12390: DEC
12391: ST_TO_ADDR
12392: LD_LOC 20
12396: PUSH
12397: FOR_TO
12398: IFFALSE 12821
// if BType in Restricted_Builds [ i ] then
12400: LD_VAR 0 2
12404: PUSH
12405: LD_LOC 20
12409: PUSH
12410: LD_VAR 0 7
12414: ARRAY
12415: IN
12416: IFFALSE 12819
// begin if old_side then
12418: LD_VAR 0 4
12422: IFFALSE 12548
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12424: LD_LOC 26
12428: PUSH
12429: LD_VAR 0 7
12433: ARRAY
12434: PUSH
12435: LD_VAR 0 3
12439: ARRAY
12440: PUSH
12441: LD_VAR 0 5
12445: PLUS
12446: PUSH
12447: LD_LOC 21
12451: PUSH
12452: LD_VAR 0 7
12456: ARRAY
12457: GREATER
12458: IFFALSE 12484
// begin SetSide ( un , old_side ) ;
12460: LD_VAR 0 1
12464: PPUSH
12465: LD_VAR 0 4
12469: PPUSH
12470: CALL_OW 235
// count := 0 ;
12474: LD_ADDR_VAR 0 5
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// end else
12482: GO 12548
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12484: LD_ADDR_LOC 26
12488: PUSH
12489: LD_LOC 26
12493: PPUSH
12494: LD_VAR 0 7
12498: PPUSH
12499: LD_LOC 26
12503: PUSH
12504: LD_VAR 0 7
12508: ARRAY
12509: PPUSH
12510: LD_VAR 0 4
12514: PPUSH
12515: LD_LOC 26
12519: PUSH
12520: LD_VAR 0 7
12524: ARRAY
12525: PUSH
12526: LD_VAR 0 4
12530: ARRAY
12531: PUSH
12532: LD_VAR 0 5
12536: MINUS
12537: PPUSH
12538: CALL_OW 1
12542: PPUSH
12543: CALL_OW 1
12547: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12548: LD_ADDR_LOC 26
12552: PUSH
12553: LD_LOC 26
12557: PPUSH
12558: LD_VAR 0 7
12562: PPUSH
12563: LD_LOC 26
12567: PUSH
12568: LD_VAR 0 7
12572: ARRAY
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_LOC 26
12583: PUSH
12584: LD_VAR 0 7
12588: ARRAY
12589: PUSH
12590: LD_VAR 0 3
12594: ARRAY
12595: PUSH
12596: LD_VAR 0 5
12600: PLUS
12601: PPUSH
12602: CALL_OW 1
12606: PPUSH
12607: CALL_OW 1
12611: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12612: LD_VAR 0 5
12616: PUSH
12617: LD_INT 0
12619: NONEQUAL
12620: PUSH
12621: LD_VAR 0 3
12625: PUSH
12626: LD_OWVAR 2
12630: EQUAL
12631: AND
12632: IFFALSE 12675
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12634: LD_ADDR_LOC 27
12638: PUSH
12639: LD_LOC 27
12643: PPUSH
12644: LD_INT 3
12646: PUSH
12647: LD_VAR 0 7
12651: MUL
12652: PPUSH
12653: LD_LOC 26
12657: PUSH
12658: LD_VAR 0 7
12662: ARRAY
12663: PUSH
12664: LD_VAR 0 3
12668: ARRAY
12669: PPUSH
12670: CALL_OW 1
12674: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12675: LD_LOC 26
12679: PUSH
12680: LD_VAR 0 7
12684: ARRAY
12685: PUSH
12686: LD_VAR 0 3
12690: ARRAY
12691: PUSH
12692: LD_LOC 21
12696: PUSH
12697: LD_VAR 0 7
12701: ARRAY
12702: GREATER
12703: IFFALSE 12730
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12705: LD_ADDR_LOC 28
12709: PUSH
12710: LD_LOC 28
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 1
12727: ST_TO_ADDR
// end else
12728: GO 12817
// begin for j := 1 to Restricted_Builds do
12730: LD_ADDR_VAR 0 8
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_LOC 20
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12790
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12748: LD_LOC 26
12752: PUSH
12753: LD_VAR 0 8
12757: ARRAY
12758: PUSH
12759: LD_VAR 0 3
12763: ARRAY
12764: PUSH
12765: LD_LOC 21
12769: PUSH
12770: LD_VAR 0 8
12774: ARRAY
12775: GREATER
12776: IFFALSE 12788
// begin Is_Cheater := true ;
12778: LD_ADDR_VAR 0 9
12782: PUSH
12783: LD_INT 1
12785: ST_TO_ADDR
// break ;
12786: GO 12790
// end ;
12788: GO 12745
12790: POP
12791: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12792: LD_ADDR_LOC 28
12796: PUSH
12797: LD_LOC 28
12801: PPUSH
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_VAR 0 9
12811: PPUSH
12812: CALL_OW 1
12816: ST_TO_ADDR
// end ; break ;
12817: GO 12821
// end ;
12819: GO 12397
12821: POP
12822: POP
// end ;
12823: LD_VAR 0 6
12827: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12828: LD_VAR 0 5
12832: PUSH
12833: LD_LOC 22
12837: IN
12838: PUSH
12839: LD_VAR 0 2
12843: PUSH
12844: LD_LOC 23
12848: IN
12849: OR
12850: PUSH
12851: LD_VAR 0 4
12855: PUSH
12856: LD_LOC 24
12860: IN
12861: OR
12862: PUSH
12863: LD_VAR 0 3
12867: PUSH
12868: LD_LOC 25
12872: IN
12873: OR
12874: IFFALSE 12885
// ComCancel ( factory ) ;
12876: LD_VAR 0 1
12880: PPUSH
12881: CALL_OW 127
// end ;
12885: PPOPN 5
12887: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12888: LD_VAR 0 2
12892: PUSH
12893: LD_LOC 22
12897: IN
12898: IFFALSE 12909
// ComCancel ( building ) ;
12900: LD_VAR 0 1
12904: PPUSH
12905: CALL_OW 127
// end ; end_of_file
12909: PPOPN 2
12911: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12912: LD_INT 0
12914: PPUSH
12915: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_STRING #Multi1x1-Time
12923: PUSH
12924: LD_OWVAR 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
// if ( ExtraStrings ) then
12933: LD_EXP 47
12937: IFFALSE 12959
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12939: LD_ADDR_VAR 0 2
12943: PUSH
12944: LD_VAR 0 2
12948: PUSH
12949: LD_STRING 
12951: ADD
12952: PUSH
12953: LD_EXP 47
12957: ADD
12958: ST_TO_ADDR
// if ( LimitsStrings ) then
12959: CALL 9752 0 0
12963: IFFALSE 12985
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_VAR 0 2
12974: PUSH
12975: LD_STRING 
12977: ADD
12978: PUSH
12979: CALL 9752 0 0
12983: ADD
12984: ST_TO_ADDR
// Display_Strings := AllStrings ;
12985: LD_ADDR_OWVAR 47
12989: PUSH
12990: LD_VAR 0 2
12994: ST_TO_ADDR
// end ;
12995: LD_VAR 0 1
12999: RET
// every 0 0$1 do
13000: GO 13002
13002: DISABLE
// begin ShowTimer ;
13003: CALL 12912 0 0
// enable ;
13007: ENABLE
// end ;
13008: END
