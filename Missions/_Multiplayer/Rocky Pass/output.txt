// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , def_win_rules , tech_level ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if Multiplayer then
  72: LD_OWVAR 4
  76: IFFALSE 150
// begin Game_Type := mp_game_type ;
  78: LD_ADDR_EXP 18
  82: PUSH
  83: LD_OWVAR 6
  87: ST_TO_ADDR
// Your_Side := mp_player_side ;
  88: LD_ADDR_OWVAR 2
  92: PUSH
  93: LD_OWVAR 7
  97: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  98: LD_ADDR_EXP 39
 102: PUSH
 103: LD_OWVAR 17
 107: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 108: LD_ADDR_EXP 36
 112: PUSH
 113: LD_OWVAR 15
 117: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 118: LD_ADDR_EXP 40
 122: PUSH
 123: LD_OWVAR 16
 127: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 128: LD_ADDR_EXP 38
 132: PUSH
 133: CALL 0 0 0
 137: ST_TO_ADDR
// Teams := mp_teams ;
 138: LD_ADDR_EXP 37
 142: PUSH
 143: LD_OWVAR 12
 147: ST_TO_ADDR
// end else
 148: GO 371
// begin Game_Type := 1 ;
 150: LD_ADDR_EXP 18
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// Your_Side := 1 ;
 158: LD_ADDR_OWVAR 2
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 4
 182: PUSH
 183: LD_INT 5
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 3
 218: PUSH
 219: LD_INT 4
 221: PUSH
 222: LD_INT 5
 224: PUSH
 225: LD_INT 6
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 244: LD_ADDR_EXP 40
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: LD_INT 3
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 322: LD_ADDR_EXP 37
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: EMPTY
 343: LIST
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: EMPTY
 349: LIST
 350: PUSH
 351: LD_INT 5
 353: PUSH
 354: EMPTY
 355: LIST
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: EMPTY
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 371: LD_ADDR_EXP 41
 375: PUSH
 376: LD_EXP 36
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: DIFF
 387: PUSH
 388: LD_INT 1
 390: GREATER
 391: ST_TO_ADDR
// if Multiplayer then
 392: LD_OWVAR 4
 396: IFFALSE 629
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_EXP 1
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 411: LD_ADDR_EXP 2
 415: PUSH
 416: LD_INT 1
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 424: LD_ADDR_EXP 3
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 437: LD_ADDR_EXP 4
 441: PUSH
 442: LD_INT 3
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 450: LD_ADDR_EXP 5
 454: PUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 463: LD_ADDR_EXP 6
 467: PUSH
 468: LD_INT 5
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 476: LD_ADDR_EXP 7
 480: PUSH
 481: LD_INT 6
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_INT 10
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 11
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 515: LD_ADDR_EXP 10
 519: PUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 13
 535: PPUSH
 536: CALL_OW 426
 540: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 14
 548: PPUSH
 549: CALL_OW 426
 553: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 554: LD_ADDR_EXP 13
 558: PUSH
 559: LD_INT 15
 561: PPUSH
 562: CALL_OW 426
 566: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 16
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 580: LD_ADDR_EXP 15
 584: PUSH
 585: LD_INT 17
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_INT 20
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_win_rules := 0 ;
 606: LD_ADDR_EXP 34
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 614: LD_ADDR_EXP 35
 618: PUSH
 619: LD_INT 23
 621: PPUSH
 622: CALL_OW 426
 626: ST_TO_ADDR
// end else
 627: GO 777
// begin Randomize ;
 629: CALL_OW 10
// def_base_level := 2 ;
 633: LD_ADDR_EXP 1
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_amount_of_people := 0 ;
 641: LD_ADDR_EXP 2
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// def_skill_level := 1 ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_starting_resources := 2 ;
 657: LD_ADDR_EXP 4
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_shipments_density := 3 ;
 665: LD_ADDR_EXP 5
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 673: LD_ADDR_EXP 6
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_shared_vision := 1 ;
 689: LD_ADDR_EXP 8
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_morale_flags := 1 ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_siberite_detection := 1 ;
 705: LD_ADDR_EXP 10
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_people_respawning := 2 ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 721: LD_ADDR_EXP 12
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 729: LD_ADDR_EXP 13
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_public_score := 0 ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_builduptime := 1 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_win_rules := 0 ;
 761: LD_ADDR_EXP 34
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// tech_level := 0 ;
 769: LD_ADDR_EXP 35
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// end ; if isSGUI then
 777: LD_OWVAR 83
 781: IFFALSE 789
// setMpTechs ( ) else
 783: CALL 7629 0 0
 787: GO 802
// SetMpTechLevel ( tech_level + 1 ) ;
 789: LD_EXP 35
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: PPUSH
 798: CALL 7776 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 802: LD_ADDR_EXP 19
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 1
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 831: LD_ADDR_EXP 20
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 1
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: ARRAY
 859: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 860: LD_ADDR_EXP 21
 864: PUSH
 865: LD_INT 9
 867: PUSH
 868: LD_INT 12
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: LD_INT 24
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 2
 887: PUSH
 888: LD_INT 1
 890: PLUS
 891: ARRAY
 892: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 893: LD_ADDR_EXP 22
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_EXP 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ARRAY
 925: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 926: LD_ADDR_EXP 24
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 30
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 50
 961: PUSH
 962: LD_INT 20
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 80
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 20
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 10
1010: PUSH
1011: EMPTY
1012: LIST
1013: PUSH
1014: LD_INT 7
1016: PUSH
1017: LD_INT 14
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 6
1026: PUSH
1027: LD_INT 12
1029: PUSH
1030: LD_INT 18
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 5
1040: PUSH
1041: LD_INT 10
1043: PUSH
1044: LD_INT 15
1046: PUSH
1047: LD_INT 20
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 4
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// shipments_density := [ 125 , 100 , 75 , 50 ] [ def_shipments_density + 1 ] ;
1072: LD_ADDR_EXP 25
1076: PUSH
1077: LD_INT 125
1079: PUSH
1080: LD_INT 100
1082: PUSH
1083: LD_INT 75
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 5
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: ARRAY
1104: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 10500
1115: PUSH
1116: LD_INT 6300
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 11
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1134: LD_ADDR_EXP 30
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: LD_INT 31500
1144: PUSH
1145: LD_INT 10500
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_EXP 11
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: ARRAY
1162: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1163: LD_ADDR_EXP 27
1167: PUSH
1168: LD_INT 0
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_EXP 12
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ARRAY
1195: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1196: LD_ADDR_EXP 28
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: LD_INT 100
1212: PUSH
1213: LD_INT 130
1215: PUSH
1216: LD_INT 150
1218: PUSH
1219: LD_INT 200
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 13
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1241: LD_ADDR_EXP 26
1245: PUSH
1246: LD_INT 1
1248: NEG
1249: PUSH
1250: LD_INT 350
1252: PUSH
1253: LD_INT 700
1255: PUSH
1256: LD_INT 1400
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_EXP 9
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: ARRAY
1278: ST_TO_ADDR
// battle_flags_id := [ ] ;
1279: LD_ADDR_EXP 49
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1286: LD_ADDR_EXP 31
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 32
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1311: LD_ADDR_EXP 33
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 63000
1324: PUSH
1325: LD_INT 126000
1327: PUSH
1328: LD_INT 189000
1330: PUSH
1331: LD_INT 252000
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_EXP 15
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// end ;
1352: LD_VAR 0 1
1356: RET
// function init_map ; var i , j ; begin
1357: LD_INT 0
1359: PPUSH
1360: PPUSH
1361: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1362: LD_ADDR_EXP 45
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 81
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 116
1389: PUSH
1390: LD_INT 195
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: LD_INT 142
1399: PUSH
1400: LD_INT 4
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 201
1409: PUSH
1410: LD_INT 102
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 234
1419: PUSH
1420: LD_INT 194
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1435: LD_ADDR_EXP 46
1439: PUSH
1440: LD_INT 12
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 16
1452: PUSH
1453: LD_INT 25
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 45
1466: PUSH
1467: LD_INT 81
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 60
1476: PUSH
1477: LD_INT 102
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 116
1490: PUSH
1491: LD_INT 195
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 92
1500: PUSH
1501: LD_INT 167
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 142
1514: PUSH
1515: LD_INT 4
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 167
1524: PUSH
1525: LD_INT 24
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 201
1538: PUSH
1539: LD_INT 102
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 190
1548: PUSH
1549: LD_INT 77
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 234
1562: PUSH
1563: LD_INT 194
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 237
1572: PUSH
1573: LD_INT 171
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1592: LD_ADDR_EXP 47
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: LD_INT 10
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 51
1609: PUSH
1610: LD_INT 93
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 102
1619: PUSH
1620: LD_INT 187
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 158
1629: PUSH
1630: LD_INT 6
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 203
1639: PUSH
1640: LD_INT 93
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 252
1649: PUSH
1650: LD_INT 194
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1665: LD_ADDR_EXP 48
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 36
1682: PUSH
1683: LD_INT 10
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 51
1696: PUSH
1697: LD_INT 93
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 72
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 102
1720: PUSH
1721: LD_INT 187
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 93
1730: PUSH
1731: LD_INT 175
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 147
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 203
1768: PUSH
1769: LD_INT 93
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 173
1778: PUSH
1779: LD_INT 71
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 252
1792: PUSH
1793: LD_INT 194
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 243
1802: PUSH
1803: LD_INT 177
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: LD_INT 23
1829: PUSH
1830: LD_INT 15
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 56
1843: PUSH
1844: LD_INT 85
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 110
1857: PUSH
1858: LD_INT 177
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 157
1871: PUSH
1872: LD_INT 13
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 187
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 5
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 231
1899: PUSH
1900: LD_INT 181
1902: PUSH
1903: LD_INT 5
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1919: LD_ADDR_EXP 44
1923: PUSH
1924: LD_INT 30
1926: PUSH
1927: LD_INT 22
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 58
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 113
1946: PUSH
1947: LD_INT 180
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 151
1956: PUSH
1957: LD_INT 24
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 183
1966: PUSH
1967: LD_INT 90
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 223
1976: PUSH
1977: LD_INT 180
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1992: LD_ADDR_EXP 43
1996: PUSH
1997: LD_INT 33
1999: PUSH
2000: LD_INT 12
2002: PUSH
2003: LD_INT 5
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 42
2013: PUSH
2014: LD_INT 29
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 36
2027: PUSH
2028: LD_INT 20
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 72
2046: PUSH
2047: LD_INT 91
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 65
2060: PUSH
2061: LD_INT 78
2063: PUSH
2064: LD_INT 4
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 75
2074: PUSH
2075: LD_INT 100
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 102
2093: PUSH
2094: LD_INT 165
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 122
2107: PUSH
2108: LD_INT 176
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 184
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 134
2140: PUSH
2141: LD_INT 16
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 132
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 157
2168: PUSH
2169: LD_INT 27
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 77
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 175
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 192
2215: PUSH
2216: LD_INT 104
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 216
2234: PUSH
2235: LD_INT 179
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 208
2248: PUSH
2249: LD_INT 160
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 208
2262: PUSH
2263: LD_INT 171
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// for i = 1 to 6 do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_INT 6
2299: PUSH
2300: FOR_TO
2301: IFFALSE 2398
// if def_extra_oil_deposits then
2303: LD_EXP 6
2307: IFFALSE 2359
// for j in extra_oil_deposits_locations [ i ] do
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_EXP 46
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2355
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2328: LD_VAR 0 3
2332: PUSH
2333: LD_INT 1
2335: ARRAY
2336: PPUSH
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
2353: GO 2325
2355: POP
2356: POP
2357: GO 2396
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2359: LD_EXP 45
2363: PUSH
2364: LD_VAR 0 2
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 45
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_INT 2
2391: PPUSH
2392: CALL_OW 62
2396: GO 2300
2398: POP
2399: POP
// if def_extra_sib_deposits then
2400: LD_EXP 7
2404: IFFALSE 2523
// for i = 1 to 6 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_INT 6
2418: PUSH
2419: FOR_TO
2420: IFFALSE 2521
// if def_extra_sib_deposits = 2 then
2422: LD_EXP 7
2426: PUSH
2427: LD_INT 2
2429: EQUAL
2430: IFFALSE 2482
// for j in extra_sib_deposits_locations [ i ] do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 48
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2478
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 3
2471: PPUSH
2472: CALL_OW 62
2476: GO 2448
2478: POP
2479: POP
2480: GO 2519
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2482: LD_EXP 47
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 1
2495: ARRAY
2496: PPUSH
2497: LD_EXP 47
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 62
2519: GO 2419
2521: POP
2522: POP
// end ;
2523: LD_VAR 0 1
2527: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
2532: PPUSH
// if not Team_Game then
2533: LD_EXP 41
2537: NOT
2538: IFFALSE 2636
// begin for i = 1 to 8 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 8
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2632
// for j = 1 to 8 do
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: DOUBLE
2562: LD_INT 1
2564: DEC
2565: ST_TO_ADDR
2566: LD_INT 8
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2628
// if i <> j then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 3
2581: NONEQUAL
2582: IFFALSE 2606
// SetAttitude ( i , j , att_neutral , true ) else
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 80
2604: GO 2626
// SetAttitude ( i , j , att_friend , true ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL_OW 80
2626: GO 2569
2628: POP
2629: POP
2630: GO 2553
2632: POP
2633: POP
// end else
2634: GO 2811
// begin if def_shared_vision then
2636: LD_EXP 8
2640: IFFALSE 2705
// begin for i in Teams do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_EXP 37
2651: PUSH
2652: FOR_IN
2653: IFFALSE 2703
// for j = 2 to i do
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: DOUBLE
2661: LD_INT 2
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 2
2669: PUSH
2670: FOR_TO
2671: IFFALSE 2699
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: CALL_OW 343
2697: GO 2670
2699: POP
2700: POP
2701: GO 2652
2703: POP
2704: POP
// end ; for i = 1 to 8 do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_INT 8
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2809
// for j = 1 to 8 do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_INT 8
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2805
// if Side_Teams [ i ] = Side_Teams [ j ] then
2737: LD_EXP 36
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_EXP 36
2752: PUSH
2753: LD_VAR 0 3
2757: ARRAY
2758: EQUAL
2759: IFFALSE 2783
// SetAttitude ( i , j , att_friend , true ) else
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_VAR 0 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 80
2781: GO 2803
// SetAttitude ( i , j , att_enemy , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 80
2803: GO 2734
2805: POP
2806: POP
2807: GO 2718
2809: POP
2810: POP
// end ; end ;
2811: LD_VAR 0 1
2815: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
// result := [ ] ;
2822: LD_ADDR_VAR 0 7
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i := 1 to count do
2829: LD_ADDR_VAR 0 8
2833: PUSH
2834: DOUBLE
2835: LD_INT 1
2837: DEC
2838: ST_TO_ADDR
2839: LD_VAR 0 1
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3263
// begin uc_direction := Rand ( 0 , 5 ) ;
2847: LD_ADDR_OWVAR 24
2851: PUSH
2852: LD_INT 0
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 12
2862: ST_TO_ADDR
// if commander then
2863: LD_LOC 1
2867: IFFALSE 2976
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_OWVAR 19
2878: PUSH
2879: LD_OWVAR 20
2883: ARRAY
2884: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_EXP 22
2905: PUSH
2906: LD_INT 2
2908: PLUS
2909: PPUSH
2910: CALL_OW 380
// hc_importance := 105 ;
2914: LD_ADDR_OWVAR 32
2918: PUSH
2919: LD_INT 105
2921: ST_TO_ADDR
// commander := false ;
2922: LD_ADDR_LOC 1
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// if Multiplayer then
2930: LD_OWVAR 4
2934: IFFALSE 2974
// begin hc_gallery := MULTIAVATARS ;
2936: LD_ADDR_OWVAR 33
2940: PUSH
2941: LD_STRING MULTIAVATARS
2943: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2944: LD_ADDR_OWVAR 34
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 525
2958: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2959: LD_ADDR_OWVAR 27
2963: PUSH
2964: LD_OWVAR 20
2968: PPUSH
2969: CALL_OW 526
2973: ST_TO_ADDR
// end ; end else
2974: GO 3039
// begin hc_name :=  ;
2976: LD_ADDR_OWVAR 26
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_EXP 22
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 0 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// if Multiplayer then
3017: LD_OWVAR 4
3021: IFFALSE 3039
// begin hc_gallery :=  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_face_number := 0 ;
3031: LD_ADDR_OWVAR 34
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3039: LD_ADDR_VAR 0 10
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if global_defined then
3049: LD_LOC 3
3053: IFFALSE 3193
// begin if ( cl = class_soldier ) then
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3083
// j := i + soldiers_created else
3065: LD_ADDR_VAR 0 9
3069: PUSH
3070: LD_VAR 0 8
3074: PUSH
3075: LD_LOC 4
3079: PLUS
3080: ST_TO_ADDR
3081: GO 3093
// j := i ;
3083: LD_ADDR_VAR 0 9
3087: PUSH
3088: LD_VAR 0 8
3092: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3093: LD_LOC 2
3097: PUSH
3098: LD_VAR 0 2
3102: ARRAY
3103: PUSH
3104: LD_VAR 0 9
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 10
3114: PPUSH
3115: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3119: LD_VAR 0 10
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: LD_LOC 2
3131: PUSH
3132: LD_VAR 0 2
3136: ARRAY
3137: PUSH
3138: LD_VAR 0 9
3142: ARRAY
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 260
3151: PPUSH
3152: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: LD_LOC 2
3168: PUSH
3169: LD_VAR 0 2
3173: ARRAY
3174: PUSH
3175: LD_VAR 0 9
3179: ARRAY
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 260
3188: PPUSH
3189: CALL_OW 239
// end ; if building then
3193: LD_VAR 0 6
3197: IFFALSE 3215
// PlaceHumanInUnit ( un , building ) else
3199: LD_VAR 0 10
3203: PPUSH
3204: LD_VAR 0 6
3208: PPUSH
3209: CALL_OW 52
3213: GO 3242
// PlaceUnitXYR ( un , x , y , r , false ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 50
// result := result ^ [ un ] ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: ADD
3260: ST_TO_ADDR
// end ;
3261: GO 2844
3263: POP
3264: POP
// if not global_defined then
3265: LD_LOC 3
3269: NOT
3270: IFFALSE 3348
// if ( global_units >= cl ) then
3272: LD_LOC 2
3276: PUSH
3277: LD_VAR 0 2
3281: GREATEREQUAL
3282: IFFALSE 3323
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3284: LD_ADDR_LOC 2
3288: PUSH
3289: LD_LOC 2
3293: PPUSH
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_LOC 2
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: PUSH
3310: LD_VAR 0 7
3314: ADD
3315: PPUSH
3316: CALL_OW 1
3320: ST_TO_ADDR
3321: GO 3348
// global_units := Replace ( global_units , cl , result ) ;
3323: LD_ADDR_LOC 2
3327: PUSH
3328: LD_LOC 2
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 7
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// end ;
3348: LD_VAR 0 7
3352: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3353: LD_INT 0
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// if side in [ 0 , 9 ] then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3383
// exit ;
3381: GO 4400
// pos := Side_Positions [ side ] ;
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 39
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_EXP 40
3408: PUSH
3409: LD_VAR 0 1
3413: ARRAY
3414: ST_TO_ADDR
// uc_side := side ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_VAR 0 1
3424: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 42
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_INT 2
3463: ARRAY
3464: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 42
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 3
3483: ARRAY
3484: ST_TO_ADDR
// if is_depot then
3485: LD_EXP 19
3489: IFFALSE 3622
// begin bc_type = b_depot ;
3491: LD_ADDR_OWVAR 42
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3499: LD_ADDR_VAR 0 10
3503: PUSH
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_VAR 0 6
3518: PPUSH
3519: CALL_OW 47
3523: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_STRING @
3531: PUSH
3532: LD_VAR 0 1
3536: STR
3537: PPUSH
3538: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3542: LD_VAR 0 10
3546: PPUSH
3547: CALL_OW 274
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_EXP 24
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3568: LD_VAR 0 10
3572: PPUSH
3573: CALL_OW 274
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: LD_EXP 24
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: CALL_OW 274
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_EXP 24
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: PPUSH
3616: CALL_OW 277
// end else
3620: GO 3766
// begin for i := 1 to 3 do
3622: LD_ADDR_VAR 0 7
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_INT 3
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3764
// begin r := starting_resources [ i ] ;
3638: LD_ADDR_VAR 0 8
3642: PUSH
3643: LD_EXP 24
3647: PUSH
3648: LD_VAR 0 7
3652: ARRAY
3653: ST_TO_ADDR
// while r >= 10 do
3654: LD_VAR 0 8
3658: PUSH
3659: LD_INT 10
3661: GREATEREQUAL
3662: IFFALSE 3762
// if r > 50 then
3664: LD_VAR 0 8
3668: PUSH
3669: LD_INT 50
3671: GREATER
3672: IFFALSE 3718
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3674: LD_VAR 0 7
3678: PPUSH
3679: LD_INT 5
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL_OW 60
// r := r - 50 ;
3702: LD_ADDR_VAR 0 8
3706: PUSH
3707: LD_VAR 0 8
3711: PUSH
3712: LD_INT 50
3714: MINUS
3715: ST_TO_ADDR
// end else
3716: GO 3760
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3718: LD_VAR 0 7
3722: PPUSH
3723: LD_VAR 0 8
3727: PUSH
3728: LD_INT 10
3730: DIV
3731: PPUSH
3732: LD_VAR 0 4
3736: PPUSH
3737: LD_VAR 0 5
3741: PPUSH
3742: LD_INT 4
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 60
// r := 0 ;
3752: LD_ADDR_VAR 0 8
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// end ;
3760: GO 3654
// end ;
3762: GO 3635
3764: POP
3765: POP
// end ; for r in starting_crates do
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_EXP 23
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3809
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 5
3784: PPUSH
3785: LD_VAR 0 4
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: LD_VAR 0 8
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 60
3807: GO 3776
3809: POP
3810: POP
// if def_morale_flags then
3811: LD_EXP 9
3815: IFFALSE 3954
// begin x := start_def [ pos ] [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_EXP 44
3826: PUSH
3827: LD_VAR 0 3
3831: ARRAY
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_EXP 44
3846: PUSH
3847: LD_VAR 0 3
3851: ARRAY
3852: PUSH
3853: LD_INT 2
3855: ARRAY
3856: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_INT 12
3869: PPUSH
3870: LD_INT 2
3872: PPUSH
3873: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3877: LD_ADDR_EXP 49
3881: PUSH
3882: LD_EXP 49
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_VAR 0 4
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 100
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 50
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 20
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 100
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PPUSH
3948: CALL_OW 418
3952: ADD
3953: ST_TO_ADDR
// end ; commander := true ;
3954: LD_ADDR_LOC 1
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// soldiers_created := 0 ;
3962: LD_ADDR_LOC 4
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3970: LD_ADDR_VAR 0 7
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_EXP 20
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4139
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: LD_EXP 43
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_EXP 43
4023: PUSH
4024: LD_VAR 0 3
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 7
4034: ARRAY
4035: PUSH
4036: LD_INT 2
4038: ARRAY
4039: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: LD_EXP 43
4049: PUSH
4050: LD_VAR 0 3
4054: ARRAY
4055: PUSH
4056: LD_VAR 0 7
4060: ARRAY
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: ST_TO_ADDR
// bc_type := b_breastwork ;
4066: LD_ADDR_OWVAR 42
4070: PUSH
4071: LD_INT 31
4073: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4074: LD_ADDR_VAR 0 9
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: CALL_OW 47
4098: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: LD_VAR 0 9
4118: PPUSH
4119: CALL 2816 0 6
// soldiers_created := soldiers_created + 1 ;
4123: LD_ADDR_LOC 4
4127: PUSH
4128: LD_LOC 4
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: ST_TO_ADDR
// end ;
4137: GO 3985
4139: POP
4140: POP
// x := start_def [ pos ] [ 1 ] ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_EXP 44
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_INT 1
4159: ARRAY
4160: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4161: LD_ADDR_VAR 0 5
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: LD_VAR 0 3
4175: ARRAY
4176: PUSH
4177: LD_INT 2
4179: ARRAY
4180: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4181: LD_LOC 8
4185: PUSH
4186: LD_EXP 20
4190: MINUS
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL 2816 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4215: LD_LOC 5
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL 2816 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4243: LD_LOC 7
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: LD_INT 5
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL 2816 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4271: LD_LOC 6
4275: PPUSH
4276: LD_INT 4
4278: PPUSH
4279: LD_VAR 0 4
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_INT 5
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 2816 0 6
// if def_siberite_detection then
4299: LD_EXP 10
4303: IFFALSE 4320
// SetTech ( tech_SibDet , side , state_researched ) ;
4305: LD_INT 20
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: CALL_OW 322
// if def_siberite_bomb = 1 then
4320: LD_EXP 15
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: IFFALSE 4362
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4330: LD_INT 25
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4345: LD_INT 73
4347: PPUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// end else
4360: GO 4392
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4362: LD_INT 25
4364: PPUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4377: LD_INT 73
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 322
// end ; global_defined := true ;
4392: LD_ADDR_LOC 3
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ;
4400: LD_VAR 0 2
4404: RET
// every 0 0$1 do
4405: GO 4407
4407: DISABLE
// if ( def_siberite_bomb > 1 ) then
4408: LD_EXP 15
4412: PUSH
4413: LD_INT 1
4415: GREATER
4416: IFFALSE 4431
// begin wait ( siberite_bomb_Delay ) ;
4418: LD_EXP 33
4422: PPUSH
4423: CALL_OW 67
// EnableSibFiss ;
4427: CALL 4432 0 0
// end ;
4431: END
// function EnableSibFiss ; var i ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
// for i := 1 to 8 do
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: DOUBLE
4442: LD_INT 1
4444: DEC
4445: ST_TO_ADDR
4446: LD_INT 8
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4496
// if Side_Positions [ i ] then
4452: LD_EXP 39
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: IFFALSE 4494
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4464: LD_INT 25
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4479: LD_INT 73
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: CALL_OW 322
// end ;
4494: GO 4449
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// function prepare_sides ; var i ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
// global_units := [ ] ;
4507: LD_ADDR_LOC 2
4511: PUSH
4512: EMPTY
4513: ST_TO_ADDR
// global_defined := false ;
4514: LD_ADDR_LOC 3
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// CountClassMembers ;
4522: CALL 4572 0 0
// for i := 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4565
// if Side_Positions [ i ] then
4542: LD_EXP 39
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4563
// prepare_side ( i ) ;
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL 3353 0 1
4563: GO 4539
4565: POP
4566: POP
// end ;
4567: LD_VAR 0 1
4571: RET
// function CountClassMembers ; var Mode ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
// if No_Mechs then
4576: LD_EXP 17
4580: IFFALSE 4592
// Mode := 2 else
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ST_TO_ADDR
4590: GO 4600
// Mode := 1 ;
4592: LD_ADDR_VAR 0 2
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// neng := number_of_people ;
4600: LD_ADDR_LOC 5
4604: PUSH
4605: LD_EXP 21
4609: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4610: LD_ADDR_LOC 8
4614: PUSH
4615: LD_LOC 5
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 3
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_VAR 0 2
4634: ARRAY
4635: DIV
4636: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4637: LD_LOC 8
4641: PUSH
4642: LD_EXP 20
4646: LESS
4647: IFFALSE 4659
// nsol := number_of_breastworks ;
4649: LD_ADDR_LOC 8
4653: PUSH
4654: LD_EXP 20
4658: ST_TO_ADDR
// neng := neng - nsol ;
4659: LD_ADDR_LOC 5
4663: PUSH
4664: LD_LOC 5
4668: PUSH
4669: LD_LOC 8
4673: MINUS
4674: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4675: LD_ADDR_LOC 6
4679: PUSH
4680: LD_LOC 5
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: DIV
4701: ST_TO_ADDR
// if ( nsci < 1 ) then
4702: LD_LOC 6
4706: PUSH
4707: LD_INT 1
4709: LESS
4710: IFFALSE 4720
// nsci := 1 ;
4712: LD_ADDR_LOC 6
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// neng := neng - nsci ;
4720: LD_ADDR_LOC 5
4724: PUSH
4725: LD_LOC 5
4729: PUSH
4730: LD_LOC 6
4734: MINUS
4735: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4736: LD_ADDR_LOC 7
4740: PUSH
4741: LD_LOC 5
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: ST_TO_ADDR
// neng := neng - nmech ;
4763: LD_ADDR_LOC 5
4767: PUSH
4768: LD_LOC 5
4772: PUSH
4773: LD_LOC 7
4777: MINUS
4778: ST_TO_ADDR
// if ( neng < 1 ) then
4779: LD_LOC 5
4783: PUSH
4784: LD_INT 1
4786: LESS
4787: IFFALSE 4797
// neng := 1 ;
4789: LD_ADDR_LOC 5
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// starting begin disable ( 98 ) ;
4802: LD_INT 98
4804: DISABLE_MARKED
// disable ( 99 ) ;
4805: LD_INT 99
4807: DISABLE_MARKED
// disable ( 400 ) ;
4808: LD_INT 400
4810: DISABLE_MARKED
// disable ( 401 ) ;
4811: LD_INT 401
4813: DISABLE_MARKED
// mp_selectmsg := true ;
4814: LD_ADDR_OWVAR 13
4818: PUSH
4819: LD_INT 1
4821: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4822: CALL 68 0 0
// init_map ;
4826: CALL 1357 0 0
// init_respawning ;
4830: CALL 12353 0 0
// set_shared_visions_and_alliances ;
4834: CALL 2528 0 0
// prepare_sides ;
4838: CALL 4503 0 0
// Init_Win_Condition ;
4842: CALL 13445 0 0
// ShowTimer ;
4846: CALL 7207 0 0
// music_nat := Side_Nations [ your_side ] ;
4850: LD_ADDR_OWVAR 71
4854: PUSH
4855: LD_EXP 40
4859: PUSH
4860: LD_OWVAR 2
4864: ARRAY
4865: ST_TO_ADDR
// if IAmSpec then
4866: CALL_OW 531
4870: IFFALSE 4906
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: LD_OWVAR 2
4882: PPUSH
4883: LD_INT 32767
4885: NEG
4886: PPUSH
4887: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4891: LD_INT 104
4893: PPUSH
4894: LD_INT 69
4896: PPUSH
4897: CALL_OW 86
// enable ( 400 ) ;
4901: LD_INT 400
4903: ENABLE_MARKED
// end else
4904: GO 4960
// begin ResetFog ;
4906: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4910: LD_EXP 44
4914: PUSH
4915: LD_EXP 39
4919: PUSH
4920: LD_OWVAR 2
4924: ARRAY
4925: ARRAY
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_EXP 44
4935: PUSH
4936: LD_EXP 39
4940: PUSH
4941: LD_OWVAR 2
4945: ARRAY
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 86
// Init_Win_Condition ;
4956: CALL 13445 0 0
// end ; AnimateTrees ( true ) ;
4960: LD_INT 1
4962: PPUSH
4963: CALL_OW 573
// InitApeman ;
4967: CALL 5745 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4971: LD_ADDR_EXP 60
4975: PUSH
4976: LD_INT 7
4978: PUSH
4979: LD_INT 8
4981: PUSH
4982: LD_INT 9
4984: PUSH
4985: LD_INT 10
4987: PUSH
4988: LD_INT 11
4990: PUSH
4991: LD_INT 12
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// BeginBuildUp ;
5002: CALL 12847 0 0
// end ; end_of_file
5006: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5007: GO 5009
5009: DISABLE
// begin CreateCratesArea ( rand ( 1 , 5 ) , MZBaseArea , true ) ;
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 5
5015: PPUSH
5016: CALL_OW 12
5020: PPUSH
5021: LD_INT 14
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 55
// enable ;
5031: ENABLE
// end ;
5032: END
// every 1 1$0 marked 10 do
5033: GO 5035
5035: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5036: LD_EXP 25
5040: PUSH
5041: LD_INT 100
5043: DIVREAL
5044: PUSH
5045: LD_INT 1750
5047: PPUSH
5048: LD_INT 2100
5050: PPUSH
5051: CALL_OW 12
5055: MUL
5056: PPUSH
5057: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
5061: LD_INT 15
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 287
5071: PUSH
5072: LD_INT 30
5074: LESS
5075: IFFALSE 5098
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5077: LD_INT 3
5079: PPUSH
5080: LD_INT 5
5082: PPUSH
5083: CALL_OW 12
5087: PPUSH
5088: LD_INT 15
5090: PPUSH
5091: LD_INT 1
5093: PPUSH
5094: CALL_OW 55
// until tick >= 300 300$00 ;
5098: LD_OWVAR 1
5102: PUSH
5103: LD_INT 630000
5105: GREATEREQUAL
5106: IFFALSE 5036
// end ;
5108: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5109: GO 5111
5111: DISABLE
5112: LD_INT 0
5114: PPUSH
5115: PPUSH
// begin case tick of 1 .. 1 1$0 :
5116: LD_OWVAR 1
5120: PUSH
5121: LD_INT 1
5123: DOUBLE
5124: GREATEREQUAL
5125: IFFALSE 5133
5127: LD_INT 2100
5129: DOUBLE
5130: LESSEQUAL
5131: IFTRUE 5135
5133: GO 5163
5135: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5136: LD_EXP 25
5140: PUSH
5141: LD_INT 100
5143: DIVREAL
5144: PUSH
5145: LD_INT 525
5147: PPUSH
5148: LD_INT 700
5150: PPUSH
5151: CALL_OW 12
5155: MUL
5156: PPUSH
5157: CALL_OW 67
5161: GO 5465
5163: LD_INT 2100
5165: PUSH
5166: LD_INT 1
5168: PLUS
5169: DOUBLE
5170: GREATEREQUAL
5171: IFFALSE 5179
5173: LD_INT 10500
5175: DOUBLE
5176: LESSEQUAL
5177: IFTRUE 5181
5179: GO 5209
5181: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$40 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5182: LD_EXP 25
5186: PUSH
5187: LD_INT 100
5189: DIVREAL
5190: PUSH
5191: LD_INT 700
5193: PPUSH
5194: LD_INT 1400
5196: PPUSH
5197: CALL_OW 12
5201: MUL
5202: PPUSH
5203: CALL_OW 67
5207: GO 5465
5209: LD_INT 10500
5211: PUSH
5212: LD_INT 1
5214: PLUS
5215: DOUBLE
5216: GREATEREQUAL
5217: IFFALSE 5225
5219: LD_INT 21000
5221: DOUBLE
5222: LESSEQUAL
5223: IFTRUE 5227
5225: GO 5255
5227: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$40 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5228: LD_EXP 25
5232: PUSH
5233: LD_INT 100
5235: DIVREAL
5236: PUSH
5237: LD_INT 1400
5239: PPUSH
5240: LD_INT 1750
5242: PPUSH
5243: CALL_OW 12
5247: MUL
5248: PPUSH
5249: CALL_OW 67
5253: GO 5465
5255: LD_INT 21000
5257: PUSH
5258: LD_INT 1
5260: PLUS
5261: DOUBLE
5262: GREATEREQUAL
5263: IFFALSE 5271
5265: LD_INT 42000
5267: DOUBLE
5268: LESSEQUAL
5269: IFTRUE 5273
5271: GO 5301
5273: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5274: LD_EXP 25
5278: PUSH
5279: LD_INT 100
5281: DIVREAL
5282: PUSH
5283: LD_INT 1750
5285: PPUSH
5286: LD_INT 2100
5288: PPUSH
5289: CALL_OW 12
5293: MUL
5294: PPUSH
5295: CALL_OW 67
5299: GO 5465
5301: LD_INT 42000
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: DOUBLE
5308: GREATEREQUAL
5309: IFFALSE 5317
5311: LD_INT 63000
5313: DOUBLE
5314: LESSEQUAL
5315: IFTRUE 5319
5317: GO 5347
5319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5320: LD_EXP 25
5324: PUSH
5325: LD_INT 100
5327: DIVREAL
5328: PUSH
5329: LD_INT 2100
5331: PPUSH
5332: LD_INT 2450
5334: PPUSH
5335: CALL_OW 12
5339: MUL
5340: PPUSH
5341: CALL_OW 67
5345: GO 5465
5347: LD_INT 63000
5349: PUSH
5350: LD_INT 1
5352: PLUS
5353: DOUBLE
5354: GREATEREQUAL
5355: IFFALSE 5363
5357: LD_INT 105000
5359: DOUBLE
5360: LESSEQUAL
5361: IFTRUE 5365
5363: GO 5393
5365: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5366: LD_EXP 25
5370: PUSH
5371: LD_INT 100
5373: DIVREAL
5374: PUSH
5375: LD_INT 2450
5377: PPUSH
5378: LD_INT 2800
5380: PPUSH
5381: CALL_OW 12
5385: MUL
5386: PPUSH
5387: CALL_OW 67
5391: GO 5465
5393: LD_INT 105000
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: DOUBLE
5400: GREATEREQUAL
5401: IFFALSE 5409
5403: LD_INT 630000
5405: DOUBLE
5406: LESSEQUAL
5407: IFTRUE 5411
5409: GO 5439
5411: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$30 ) ) ; else
5412: LD_EXP 25
5416: PUSH
5417: LD_INT 100
5419: DIVREAL
5420: PUSH
5421: LD_INT 2800
5423: PPUSH
5424: LD_INT 3150
5426: PPUSH
5427: CALL_OW 12
5431: MUL
5432: PPUSH
5433: CALL_OW 67
5437: GO 5465
5439: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5440: LD_EXP 25
5444: PUSH
5445: LD_INT 100
5447: DIVREAL
5448: PUSH
5449: LD_INT 3500
5451: PPUSH
5452: LD_INT 3850
5454: PPUSH
5455: CALL_OW 12
5459: MUL
5460: PPUSH
5461: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_INT 3
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5481: LD_ADDR_VAR 0 1
5485: PUSH
5486: LD_EXP 39
5490: PUSH
5491: LD_INT 0
5493: PUSH
5494: EMPTY
5495: LIST
5496: DIFF
5497: PUSH
5498: FOR_IN
5499: IFFALSE 5548
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 12 , true ) ;
5501: LD_VAR 0 2
5505: PPUSH
5506: LD_EXP 44
5510: PUSH
5511: LD_VAR 0 1
5515: ARRAY
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_EXP 44
5525: PUSH
5526: LD_VAR 0 1
5530: ARRAY
5531: PUSH
5532: LD_INT 2
5534: ARRAY
5535: PPUSH
5536: LD_INT 12
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 56
5546: GO 5498
5548: POP
5549: POP
// enable ;
5550: ENABLE
// end ; end_of_file
5551: PPOPN 2
5553: END
// every 20 20$00 trigger apemanNumber do
5554: LD_EXP 51
5558: IFFALSE 5591
5560: GO 5562
5562: DISABLE
// begin enable ;
5563: ENABLE
// if apeLevel >= 8 then
5564: LD_EXP 56
5568: PUSH
5569: LD_INT 8
5571: GREATEREQUAL
5572: IFFALSE 5577
// disable else
5574: DISABLE
5575: GO 5591
// apeLevel := apeLevel + 1 ;
5577: LD_ADDR_EXP 56
5581: PUSH
5582: LD_EXP 56
5586: PUSH
5587: LD_INT 1
5589: PLUS
5590: ST_TO_ADDR
// end ;
5591: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5592: LD_EXP 51
5596: PUSH
5597: LD_EXP 52
5601: LESS
5602: IFFALSE 5742
5604: GO 5606
5606: DISABLE
5607: LD_INT 0
5609: PPUSH
5610: PPUSH
5611: PPUSH
5612: PPUSH
// begin enable ;
5613: ENABLE
// for i := 1 to apemanPos do
5614: LD_ADDR_VAR 0 1
5618: PUSH
5619: DOUBLE
5620: LD_INT 1
5622: DEC
5623: ST_TO_ADDR
5624: LD_EXP 54
5628: PUSH
5629: FOR_TO
5630: IFFALSE 5740
// begin if apemanPlayerCount [ i ] then
5632: LD_EXP 55
5636: PUSH
5637: LD_VAR 0 1
5641: ARRAY
5642: IFFALSE 5738
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5644: LD_EXP 55
5648: PUSH
5649: LD_VAR 0 1
5653: ARRAY
5654: PUSH
5655: LD_EXP 54
5659: PUSH
5660: LD_VAR 0 1
5664: ARRAY
5665: GREATER
5666: IFFALSE 5738
// begin ape := PrepareApeman ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: CALL 6253 0 0
5677: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5678: LD_VAR 0 2
5682: PPUSH
5683: LD_EXP 57
5687: PUSH
5688: LD_VAR 0 1
5692: ARRAY
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5701: LD_ADDR_EXP 54
5705: PUSH
5706: LD_EXP 54
5710: PPUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_EXP 54
5720: PUSH
5721: LD_VAR 0 1
5725: ARRAY
5726: PUSH
5727: LD_VAR 0 2
5731: UNION
5732: PPUSH
5733: CALL_OW 1
5737: ST_TO_ADDR
// end ; end ; end ;
5738: GO 5629
5740: POP
5741: POP
// end ;
5742: PPOPN 4
5744: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
// playersAmount := 0 ;
5754: LD_ADDR_VAR 0 3
5758: PUSH
5759: LD_INT 0
5761: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5762: LD_ADDR_VAR 0 7
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: LD_INT 4
5778: PUSH
5779: LD_INT 6
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5793: LD_ADDR_EXP 57
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: LD_INT 0
5812: PUSH
5813: LD_INT 0
5815: PUSH
5816: LD_INT 0
5818: PUSH
5819: LD_INT 0
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: ST_TO_ADDR
// for j = 1 to Side_Positions do
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: DOUBLE
5838: LD_INT 1
5840: DEC
5841: ST_TO_ADDR
5842: LD_EXP 39
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5915
// if Side_Positions [ j ] then
5850: LD_EXP 39
5854: PUSH
5855: LD_VAR 0 4
5859: ARRAY
5860: IFFALSE 5913
// begin playersAmount := playersAmount + 1 ;
5862: LD_ADDR_VAR 0 3
5866: PUSH
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 1
5874: PLUS
5875: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_EXP 57
5885: PPUSH
5886: LD_VAR 0 4
5890: PPUSH
5891: LD_VAR 0 7
5895: PUSH
5896: LD_EXP 39
5900: PUSH
5901: LD_VAR 0 4
5905: ARRAY
5906: ARRAY
5907: PPUSH
5908: CALL_OW 1
5912: ST_TO_ADDR
// end ;
5913: GO 5847
5915: POP
5916: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5917: LD_ADDR_EXP 53
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: LD_EXP 27
5929: MUL
5930: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5931: LD_ADDR_EXP 51
5935: PUSH
5936: LD_VAR 0 3
5940: PUSH
5941: LD_EXP 53
5945: MUL
5946: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5947: LD_ADDR_EXP 52
5951: PUSH
5952: LD_EXP 51
5956: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5957: LD_ADDR_EXP 54
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 0
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5996: LD_ADDR_EXP 55
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: ST_TO_ADDR
// apeLevel := 1 ;
6035: LD_ADDR_EXP 56
6039: PUSH
6040: LD_INT 1
6042: ST_TO_ADDR
// if not apemanNumber then
6043: LD_EXP 51
6047: NOT
6048: IFFALSE 6052
// exit ;
6050: GO 6248
// for i := 1 to apemanPerPlayer do
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_EXP 53
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6246
// begin for j := 1 to Side_Positions do
6070: LD_ADDR_VAR 0 4
6074: PUSH
6075: DOUBLE
6076: LD_INT 1
6078: DEC
6079: ST_TO_ADDR
6080: LD_EXP 39
6084: PUSH
6085: FOR_TO
6086: IFFALSE 6242
// if Side_Positions [ j ] then
6088: LD_EXP 39
6092: PUSH
6093: LD_VAR 0 4
6097: ARRAY
6098: IFFALSE 6240
// begin pos := Side_Positions [ j ] ;
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_EXP 39
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6116: LD_ADDR_EXP 55
6120: PUSH
6121: LD_EXP 55
6125: PPUSH
6126: LD_VAR 0 4
6130: PPUSH
6131: LD_EXP 55
6135: PUSH
6136: LD_VAR 0 4
6140: ARRAY
6141: PUSH
6142: LD_INT 1
6144: PLUS
6145: PPUSH
6146: CALL_OW 1
6150: ST_TO_ADDR
// ape := PrepareApeman ;
6151: LD_ADDR_VAR 0 5
6155: PUSH
6156: CALL 6253 0 0
6160: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6161: LD_ADDR_EXP 54
6165: PUSH
6166: LD_EXP 54
6170: PPUSH
6171: LD_VAR 0 4
6175: PPUSH
6176: LD_EXP 54
6180: PUSH
6181: LD_VAR 0 4
6185: ARRAY
6186: PPUSH
6187: LD_EXP 54
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: PUSH
6198: LD_INT 1
6200: PLUS
6201: PPUSH
6202: LD_VAR 0 5
6206: PPUSH
6207: CALL_OW 1
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6217: LD_VAR 0 5
6221: PPUSH
6222: LD_EXP 57
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// end ;
6240: GO 6085
6242: POP
6243: POP
// end ;
6244: GO 6067
6246: POP
6247: POP
// end ;
6248: LD_VAR 0 1
6252: RET
// export function PrepareApeman ; var bonus ; begin
6253: LD_INT 0
6255: PPUSH
6256: PPUSH
// uc_side := 0 ;
6257: LD_ADDR_OWVAR 20
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// uc_nation := 0 ;
6265: LD_ADDR_OWVAR 21
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// InitHc ;
6273: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: LD_INT 1
6284: NEG
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 25
6299: PUSH
6300: LD_INT 12
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PPUSH
6307: CALL_OW 69
6311: PUSH
6312: LD_INT 3
6314: MOD
6315: PUSH
6316: LD_INT 1
6318: PLUS
6319: ARRAY
6320: ST_TO_ADDR
// hc_class := class_apeman ;
6321: LD_ADDR_OWVAR 28
6325: PUSH
6326: LD_INT 12
6328: ST_TO_ADDR
// hc_gallery :=  ;
6329: LD_ADDR_OWVAR 33
6333: PUSH
6334: LD_STRING 
6336: ST_TO_ADDR
// hc_name :=  ;
6337: LD_ADDR_OWVAR 26
6341: PUSH
6342: LD_STRING 
6344: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6345: LD_ADDR_OWVAR 31
6349: PUSH
6350: LD_EXP 56
6354: PUSH
6355: LD_VAR 0 2
6359: PLUS
6360: PUSH
6361: LD_EXP 56
6365: PUSH
6366: LD_VAR 0 2
6370: PLUS
6371: PUSH
6372: LD_EXP 56
6376: PUSH
6377: LD_VAR 0 2
6381: PLUS
6382: PUSH
6383: LD_EXP 56
6387: PUSH
6388: LD_VAR 0 2
6392: PLUS
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6400: LD_ADDR_OWVAR 35
6404: PUSH
6405: LD_INT 10
6407: PUSH
6408: LD_VAR 0 2
6412: MUL
6413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6414: LD_ADDR_OWVAR 29
6418: PUSH
6419: LD_INT 12
6421: PUSH
6422: LD_INT 12
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: ST_TO_ADDR
// result := CreateHuman ;
6429: LD_ADDR_VAR 0 1
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// end ;
6439: LD_VAR 0 1
6443: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
6448: PPUSH
// if not ape then
6449: LD_VAR 0 1
6453: NOT
6454: IFFALSE 6458
// exit ;
6456: GO 6561
// for i = 1 to apemanPos do
6458: LD_ADDR_VAR 0 4
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_EXP 54
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6508
// if ape in apemanPos [ i ] then
6476: LD_VAR 0 1
6480: PUSH
6481: LD_EXP 54
6485: PUSH
6486: LD_VAR 0 4
6490: ARRAY
6491: IN
6492: IFFALSE 6506
// begin s := i ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: LD_VAR 0 4
6503: ST_TO_ADDR
// break ;
6504: GO 6508
// end ;
6506: GO 6473
6508: POP
6509: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6510: LD_ADDR_EXP 54
6514: PUSH
6515: LD_EXP 54
6519: PPUSH
6520: LD_VAR 0 3
6524: PPUSH
6525: LD_EXP 54
6529: PUSH
6530: LD_VAR 0 3
6534: ARRAY
6535: PUSH
6536: LD_VAR 0 1
6540: DIFF
6541: PPUSH
6542: CALL_OW 1
6546: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6547: LD_ADDR_EXP 51
6551: PUSH
6552: LD_EXP 51
6556: PUSH
6557: LD_INT 1
6559: MINUS
6560: ST_TO_ADDR
// end ; end_of_file
6561: LD_VAR 0 2
6565: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 266
6575: PUSH
6576: LD_INT 0
6578: PUSH
6579: LD_INT 1
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: IN
6586: IFFALSE 6611
// SetBName ( b , @ & GetSide ( b ) ) ;
6588: LD_VAR 0 1
6592: PPUSH
6593: LD_STRING @
6595: PUSH
6596: LD_VAR 0 1
6600: PPUSH
6601: CALL_OW 255
6605: STR
6606: PPUSH
6607: CALL_OW 500
// end ;
6611: PPOPN 2
6613: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6614: LD_VAR 0 1
6618: PPUSH
6619: CALL_OW 266
6623: PUSH
6624: LD_INT 0
6626: PUSH
6627: LD_INT 1
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: IN
6634: IFFALSE 6659
// SetBName ( b , @ & GetSide ( b ) ) ;
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_STRING @
6643: PUSH
6644: LD_VAR 0 1
6648: PPUSH
6649: CALL_OW 255
6653: STR
6654: PPUSH
6655: CALL_OW 500
// end ;
6659: PPOPN 3
6661: END
// on VehicleConstructed ( veh , fac ) do var side ;
6662: LD_INT 0
6664: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 263
6674: PUSH
6675: LD_INT 5
6677: EQUAL
6678: IFFALSE 6820
// begin side := GetSide ( veh ) ;
6680: LD_ADDR_VAR 0 3
6684: PUSH
6685: LD_VAR 0 1
6689: PPUSH
6690: CALL_OW 255
6694: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6695: LD_ADDR_EXP 54
6699: PUSH
6700: LD_EXP 54
6704: PPUSH
6705: LD_VAR 0 3
6709: PPUSH
6710: LD_EXP 54
6714: PUSH
6715: LD_VAR 0 3
6719: ARRAY
6720: PPUSH
6721: LD_INT 52
6723: PUSH
6724: EMPTY
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_VAR 0 3
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 33
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 12
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 25
6769: PUSH
6770: LD_INT 15
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 25
6779: PUSH
6780: LD_INT 16
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 25
6789: PUSH
6790: LD_INT 17
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: UNION
6814: PPUSH
6815: CALL_OW 1
6819: ST_TO_ADDR
// end ; end ;
6820: PPOPN 3
6822: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6823: LD_INT 0
6825: PPUSH
6826: PPUSH
6827: PPUSH
6828: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6829: LD_VAR 0 1
6833: PPUSH
6834: CALL_OW 257
6838: PUSH
6839: LD_INT 12
6841: PUSH
6842: LD_INT 15
6844: PUSH
6845: LD_INT 17
6847: PUSH
6848: LD_INT 16
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: IN
6857: PUSH
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 263
6867: PUSH
6868: LD_INT 5
6870: EQUAL
6871: OR
6872: IFFALSE 6883
// ApeKilled ( j ) ;
6874: LD_VAR 0 1
6878: PPUSH
6879: CALL 6444 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 266
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: IN
6903: IFFALSE 6985
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_EXP 39
6914: PUSH
6915: LD_VAR 0 1
6919: PPUSH
6920: CALL_OW 255
6924: ARRAY
6925: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: LD_EXP 44
6935: PUSH
6936: LD_VAR 0 4
6940: ARRAY
6941: PUSH
6942: LD_INT 1
6944: ARRAY
6945: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: LD_EXP 44
6955: PUSH
6956: LD_VAR 0 4
6960: ARRAY
6961: PUSH
6962: LD_INT 2
6964: ARRAY
6965: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6966: LD_VAR 0 2
6970: PPUSH
6971: LD_VAR 0 3
6975: PPUSH
6976: CALL_OW 420
6980: PPUSH
6981: CALL_OW 419
// end ; end ;
6985: PPOPN 5
6987: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_VAR 0 2
6997: PPUSH
6998: LD_VAR 0 3
7002: PPUSH
7003: LD_OWVAR 2
7007: PPUSH
7008: CALL 7390 0 4
7012: PPOPN 3
7014: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7015: LD_INT 0
7017: PPUSH
7018: PPUSH
// for un in battle_flags_id do
7019: LD_ADDR_VAR 0 2
7023: PUSH
7024: LD_EXP 49
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7105
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7032: LD_VAR 0 2
7036: PPUSH
7037: LD_INT 1
7039: PUSH
7040: LD_LOC 9
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: LD_LOC 9
7056: PUSH
7057: LD_INT 2
7059: DIV
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 3
7067: PUSH
7068: LD_LOC 9
7072: PUSH
7073: LD_INT 5
7075: DIV
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 20
7083: PUSH
7084: LD_LOC 9
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: PPUSH
7099: CALL_OW 423
7103: GO 7029
7105: POP
7106: POP
// end ;
7107: LD_VAR 0 1
7111: RET
// every 1 do var un ;
7112: GO 7114
7114: DISABLE
7115: LD_INT 0
7117: PPUSH
// begin if not def_morale_flags then
7118: LD_EXP 9
7122: NOT
7123: IFFALSE 7127
// exit ;
7125: GO 7204
// if not morale_decreasing_time then
7127: LD_EXP 26
7131: NOT
7132: IFFALSE 7136
// exit ;
7134: GO 7204
// strength = 100 ;
7136: LD_ADDR_LOC 9
7140: PUSH
7141: LD_INT 100
7143: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7144: LD_EXP 26
7148: PPUSH
7149: CALL_OW 67
// strength := strength - 1 ;
7153: LD_ADDR_LOC 9
7157: PUSH
7158: LD_LOC 9
7162: PUSH
7163: LD_INT 1
7165: MINUS
7166: ST_TO_ADDR
// Update_Flags ;
7167: CALL 7015 0 0
// until not strength ;
7171: LD_LOC 9
7175: NOT
7176: IFFALSE 7144
// for un in battle_flags_id do
7178: LD_ADDR_VAR 0 1
7182: PUSH
7183: LD_EXP 49
7187: PUSH
7188: FOR_IN
7189: IFFALSE 7202
// KillBattleFlag ( un ) ;
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 419
7200: GO 7188
7202: POP
7203: POP
// end ; end_of_file
7204: PPOPN 1
7206: END
// export ExtraStrings , WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7211: LD_ADDR_VAR 0 2
7215: PUSH
7216: LD_STRING #Multi1x1-Time
7218: PUSH
7219: LD_OWVAR 1
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: ST_TO_ADDR
// if WaitServerStrings then
7228: LD_EXP 59
7232: IFFALSE 7250
// AllStrings = AllStrings ^ WaitServerStrings ;
7234: LD_ADDR_VAR 0 2
7238: PUSH
7239: LD_VAR 0 2
7243: PUSH
7244: LD_EXP 59
7248: ADD
7249: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7250: LD_INT 0
7252: PUSH
7253: LD_EXP 33
7257: PUSH
7258: LD_OWVAR 1
7262: MINUS
7263: LESSEQUAL
7264: IFFALSE 7295
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7266: LD_ADDR_VAR 0 2
7270: PUSH
7271: LD_VAR 0 2
7275: PUSH
7276: LD_STRING #allowedsibbomb
7278: PUSH
7279: LD_EXP 33
7283: PUSH
7284: LD_OWVAR 1
7288: MINUS
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: ADD
7294: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7295: LD_INT 0
7297: PUSH
7298: LD_EXP 62
7302: PUSH
7303: LD_OWVAR 1
7307: MINUS
7308: LESSEQUAL
7309: IFFALSE 7340
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7311: LD_ADDR_VAR 0 2
7315: PUSH
7316: LD_VAR 0 2
7320: PUSH
7321: LD_STRING #builduptime
7323: PUSH
7324: LD_EXP 62
7328: PUSH
7329: LD_OWVAR 1
7333: MINUS
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: ADD
7339: ST_TO_ADDR
// if ( ExtraStrings ) then
7340: LD_EXP 58
7344: IFFALSE 7366
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7346: LD_ADDR_VAR 0 2
7350: PUSH
7351: LD_VAR 0 2
7355: PUSH
7356: LD_STRING 
7358: ADD
7359: PUSH
7360: LD_EXP 58
7364: ADD
7365: ST_TO_ADDR
// Display_Strings := AllStrings ;
7366: LD_ADDR_OWVAR 47
7370: PUSH
7371: LD_VAR 0 2
7375: ST_TO_ADDR
// end ;
7376: LD_VAR 0 1
7380: RET
// every 0 0$1 do
7381: GO 7383
7383: DISABLE
// begin ShowTimer ;
7384: CALL 7207 0 0
// enable ;
7388: ENABLE
// end ; end_of_file
7389: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7390: LD_INT 0
7392: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 255
7402: PUSH
7403: LD_VAR 0 4
7407: EQUAL
7408: IFFALSE 7427
// begin SetAchievement ( ACH_RAD ) ;
7410: LD_STRING ACH_RAD
7412: PPUSH
7413: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7417: LD_STRING ACH_NL
7419: PPUSH
7420: LD_INT 1
7422: PPUSH
7423: CALL_OW 564
// end end ;
7427: LD_VAR 0 5
7431: RET
// export function SA_Win ( side ) ; begin
7432: LD_INT 0
7434: PPUSH
// case side of 1 :
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 1
7442: DOUBLE
7443: EQUAL
7444: IFTRUE 7448
7446: GO 7461
7448: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7449: LD_STRING ACH_AH
7451: PPUSH
7452: LD_INT 1
7454: PPUSH
7455: CALL_OW 564
7459: GO 7624
7461: LD_INT 2
7463: DOUBLE
7464: EQUAL
7465: IFTRUE 7469
7467: GO 7482
7469: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7470: LD_STRING ACH_E
7472: PPUSH
7473: LD_INT 1
7475: PPUSH
7476: CALL_OW 564
7480: GO 7624
7482: LD_INT 3
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7503
7490: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7491: LD_STRING ACH_OOL
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 564
7501: GO 7624
7503: LD_INT 1
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: DOUBLE
7513: EQUAL
7514: IFTRUE 7518
7516: GO 7543
7518: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7519: LD_STRING ACH_AH
7521: PPUSH
7522: LD_REAL  5.00000000000000E-0001
7525: PPUSH
7526: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7530: LD_STRING ACH_E
7532: PPUSH
7533: LD_REAL  5.00000000000000E-0001
7536: PPUSH
7537: CALL_OW 564
// end ; [ 2 , 3 ] :
7541: GO 7624
7543: LD_INT 2
7545: PUSH
7546: LD_INT 3
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: DOUBLE
7553: EQUAL
7554: IFTRUE 7558
7556: GO 7583
7558: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7559: LD_STRING ACH_OOL
7561: PPUSH
7562: LD_REAL  5.00000000000000E-0001
7565: PPUSH
7566: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7570: LD_STRING ACH_E
7572: PPUSH
7573: LD_REAL  5.00000000000000E-0001
7576: PPUSH
7577: CALL_OW 564
// end ; [ 3 , 1 ] :
7581: GO 7624
7583: LD_INT 3
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7623
7598: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7599: LD_STRING ACH_AH
7601: PPUSH
7602: LD_REAL  5.00000000000000E-0001
7605: PPUSH
7606: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7610: LD_STRING ACH_OOL
7612: PPUSH
7613: LD_REAL  5.00000000000000E-0001
7616: PPUSH
7617: CALL_OW 564
// end ; end ;
7621: GO 7624
7623: POP
// end ; end_of_file
7624: LD_VAR 0 2
7628: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
7633: PPUSH
// for side = 1 to 8 do
7634: LD_ADDR_VAR 0 2
7638: PUSH
7639: DOUBLE
7640: LD_INT 1
7642: DEC
7643: ST_TO_ADDR
7644: LD_INT 8
7646: PUSH
7647: FOR_TO
7648: IFFALSE 7769
// begin for i = 1 to 72 do
7650: LD_ADDR_VAR 0 3
7654: PUSH
7655: DOUBLE
7656: LD_INT 1
7658: DEC
7659: ST_TO_ADDR
7660: LD_INT 72
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7695
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7666: LD_VAR 0 3
7670: PPUSH
7671: LD_VAR 0 2
7675: PPUSH
7676: LD_INT 0
7678: PPUSH
7679: LD_VAR 0 3
7683: PPUSH
7684: CALL_OW 565
7688: PPUSH
7689: CALL_OW 322
7693: GO 7663
7695: POP
7696: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7697: LD_INT 73
7699: PPUSH
7700: LD_VAR 0 2
7704: PPUSH
7705: LD_INT 0
7707: PPUSH
7708: LD_INT 25
7710: PPUSH
7711: CALL_OW 565
7715: PPUSH
7716: CALL_OW 322
// for i = 0 to 40 do
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: DOUBLE
7726: LD_INT 0
7728: DEC
7729: ST_TO_ADDR
7730: LD_INT 40
7732: PUSH
7733: FOR_TO
7734: IFFALSE 7765
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_INT 1
7748: PPUSH
7749: LD_VAR 0 3
7753: PPUSH
7754: CALL_OW 565
7758: PPUSH
7759: CALL_OW 324
7763: GO 7733
7765: POP
7766: POP
// end ;
7767: GO 7647
7769: POP
7770: POP
// end ;
7771: LD_VAR 0 1
7775: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7776: LD_INT 0
7778: PPUSH
7779: PPUSH
7780: PPUSH
// for side = 1 to 8 do
7781: LD_ADDR_VAR 0 3
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_INT 8
7793: PUSH
7794: FOR_TO
7795: IFFALSE 11791
// begin for i = 1 to 73 do
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: DOUBLE
7803: LD_INT 1
7805: DEC
7806: ST_TO_ADDR
7807: LD_INT 73
7809: PUSH
7810: FOR_TO
7811: IFFALSE 7832
// SetTech ( i , side , state_disabled ) ;
7813: LD_VAR 0 4
7817: PPUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: LD_INT 0
7825: PPUSH
7826: CALL_OW 322
7830: GO 7810
7832: POP
7833: POP
// for i = 0 to 40 do
7834: LD_ADDR_VAR 0 4
7838: PUSH
7839: DOUBLE
7840: LD_INT 0
7842: DEC
7843: ST_TO_ADDR
7844: LD_INT 40
7846: PUSH
7847: FOR_TO
7848: IFFALSE 7869
// SetRestrict ( i , side , false ) ;
7850: LD_VAR 0 4
7854: PPUSH
7855: LD_VAR 0 3
7859: PPUSH
7860: LD_INT 0
7862: PPUSH
7863: CALL_OW 324
7867: GO 7847
7869: POP
7870: POP
// case level of 1 :
7871: LD_VAR 0 1
7875: PUSH
7876: LD_INT 1
7878: DOUBLE
7879: EQUAL
7880: IFTRUE 7884
7882: GO 8037
7884: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7885: LD_INT 35
7887: PPUSH
7888: LD_VAR 0 3
7892: PPUSH
7893: LD_INT 1
7895: PPUSH
7896: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7900: LD_INT 45
7902: PPUSH
7903: LD_VAR 0 3
7907: PPUSH
7908: LD_INT 1
7910: PPUSH
7911: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7915: LD_INT 46
7917: PPUSH
7918: LD_VAR 0 3
7922: PPUSH
7923: LD_INT 1
7925: PPUSH
7926: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7930: LD_INT 47
7932: PPUSH
7933: LD_VAR 0 3
7937: PPUSH
7938: LD_INT 1
7940: PPUSH
7941: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7945: LD_INT 0
7947: PPUSH
7948: LD_VAR 0 3
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7960: LD_INT 2
7962: PPUSH
7963: LD_VAR 0 3
7967: PPUSH
7968: LD_INT 1
7970: PPUSH
7971: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7975: LD_INT 4
7977: PPUSH
7978: LD_VAR 0 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7990: LD_INT 6
7992: PPUSH
7993: LD_VAR 0 3
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8005: LD_INT 29
8007: PPUSH
8008: LD_VAR 0 3
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8020: LD_INT 31
8022: PPUSH
8023: LD_VAR 0 3
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: CALL_OW 324
// end ; 2 :
8035: GO 11789
8037: LD_INT 2
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8243
8045: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8046: LD_INT 35
8048: PPUSH
8049: LD_VAR 0 3
8053: PPUSH
8054: LD_INT 1
8056: PPUSH
8057: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8061: LD_INT 45
8063: PPUSH
8064: LD_VAR 0 3
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8076: LD_INT 46
8078: PPUSH
8079: LD_VAR 0 3
8083: PPUSH
8084: LD_INT 1
8086: PPUSH
8087: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8091: LD_INT 47
8093: PPUSH
8094: LD_VAR 0 3
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8106: LD_INT 1
8108: PPUSH
8109: LD_VAR 0 3
8113: PPUSH
8114: LD_INT 1
8116: PPUSH
8117: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8121: LD_INT 2
8123: PPUSH
8124: LD_VAR 0 3
8128: PPUSH
8129: LD_INT 1
8131: PPUSH
8132: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8136: LD_INT 11
8138: PPUSH
8139: LD_VAR 0 3
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8151: LD_INT 0
8153: PPUSH
8154: LD_VAR 0 3
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8166: LD_INT 2
8168: PPUSH
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8181: LD_INT 4
8183: PPUSH
8184: LD_VAR 0 3
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8196: LD_INT 6
8198: PPUSH
8199: LD_VAR 0 3
8203: PPUSH
8204: LD_INT 1
8206: PPUSH
8207: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8211: LD_INT 29
8213: PPUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: LD_INT 1
8221: PPUSH
8222: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8226: LD_INT 31
8228: PPUSH
8229: LD_VAR 0 3
8233: PPUSH
8234: LD_INT 1
8236: PPUSH
8237: CALL_OW 324
// end ; 3 :
8241: GO 11789
8243: LD_INT 3
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8704
8251: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8252: LD_INT 35
8254: PPUSH
8255: LD_VAR 0 3
8259: PPUSH
8260: LD_INT 1
8262: PPUSH
8263: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8267: LD_INT 45
8269: PPUSH
8270: LD_VAR 0 3
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8282: LD_INT 46
8284: PPUSH
8285: LD_VAR 0 3
8289: PPUSH
8290: LD_INT 1
8292: PPUSH
8293: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8297: LD_INT 47
8299: PPUSH
8300: LD_VAR 0 3
8304: PPUSH
8305: LD_INT 1
8307: PPUSH
8308: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8312: LD_INT 1
8314: PPUSH
8315: LD_VAR 0 3
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8327: LD_INT 2
8329: PPUSH
8330: LD_VAR 0 3
8334: PPUSH
8335: LD_INT 1
8337: PPUSH
8338: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8342: LD_INT 11
8344: PPUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8357: LD_INT 48
8359: PPUSH
8360: LD_VAR 0 3
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8372: LD_INT 69
8374: PPUSH
8375: LD_VAR 0 3
8379: PPUSH
8380: LD_INT 1
8382: PPUSH
8383: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8387: LD_INT 39
8389: PPUSH
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8402: LD_INT 43
8404: PPUSH
8405: LD_VAR 0 3
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8417: LD_INT 51
8419: PPUSH
8420: LD_VAR 0 3
8424: PPUSH
8425: LD_INT 1
8427: PPUSH
8428: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8432: LD_INT 6
8434: PPUSH
8435: LD_VAR 0 3
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8447: LD_INT 0
8449: PPUSH
8450: LD_VAR 0 3
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8462: LD_INT 2
8464: PPUSH
8465: LD_VAR 0 3
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8477: LD_INT 3
8479: PPUSH
8480: LD_VAR 0 3
8484: PPUSH
8485: LD_INT 1
8487: PPUSH
8488: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8492: LD_INT 4
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8507: LD_INT 6
8509: PPUSH
8510: LD_VAR 0 3
8514: PPUSH
8515: LD_INT 1
8517: PPUSH
8518: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8522: LD_INT 7
8524: PPUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: LD_INT 1
8532: PPUSH
8533: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8537: LD_INT 8
8539: PPUSH
8540: LD_VAR 0 3
8544: PPUSH
8545: LD_INT 1
8547: PPUSH
8548: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8552: LD_INT 10
8554: PPUSH
8555: LD_VAR 0 3
8559: PPUSH
8560: LD_INT 1
8562: PPUSH
8563: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8567: LD_INT 15
8569: PPUSH
8570: LD_VAR 0 3
8574: PPUSH
8575: LD_INT 1
8577: PPUSH
8578: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8582: LD_INT 16
8584: PPUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: LD_INT 1
8592: PPUSH
8593: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8597: LD_INT 17
8599: PPUSH
8600: LD_VAR 0 3
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8612: LD_INT 20
8614: PPUSH
8615: LD_VAR 0 3
8619: PPUSH
8620: LD_INT 1
8622: PPUSH
8623: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8627: LD_INT 26
8629: PPUSH
8630: LD_VAR 0 3
8634: PPUSH
8635: LD_INT 1
8637: PPUSH
8638: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8642: LD_INT 27
8644: PPUSH
8645: LD_VAR 0 3
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8657: LD_INT 29
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8672: LD_INT 31
8674: PPUSH
8675: LD_VAR 0 3
8679: PPUSH
8680: LD_INT 1
8682: PPUSH
8683: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8687: LD_INT 32
8689: PPUSH
8690: LD_VAR 0 3
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 324
// end ; 4 :
8702: GO 11789
8704: LD_INT 4
8706: DOUBLE
8707: EQUAL
8708: IFTRUE 8712
8710: GO 9660
8712: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8713: LD_INT 35
8715: PPUSH
8716: LD_VAR 0 3
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8728: LD_INT 45
8730: PPUSH
8731: LD_VAR 0 3
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8743: LD_INT 46
8745: PPUSH
8746: LD_VAR 0 3
8750: PPUSH
8751: LD_INT 1
8753: PPUSH
8754: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8758: LD_INT 47
8760: PPUSH
8761: LD_VAR 0 3
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8773: LD_INT 1
8775: PPUSH
8776: LD_VAR 0 3
8780: PPUSH
8781: LD_INT 1
8783: PPUSH
8784: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8788: LD_INT 2
8790: PPUSH
8791: LD_VAR 0 3
8795: PPUSH
8796: LD_INT 1
8798: PPUSH
8799: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8803: LD_INT 11
8805: PPUSH
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 1
8813: PPUSH
8814: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8818: LD_INT 20
8820: PPUSH
8821: LD_VAR 0 3
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8833: LD_INT 48
8835: PPUSH
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8848: LD_INT 49
8850: PPUSH
8851: LD_VAR 0 3
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8863: LD_INT 69
8865: PPUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8878: LD_INT 39
8880: PPUSH
8881: LD_VAR 0 3
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8893: LD_INT 34
8895: PPUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8908: LD_INT 42
8910: PPUSH
8911: LD_VAR 0 3
8915: PPUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8923: LD_INT 44
8925: PPUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8938: LD_INT 41
8940: PPUSH
8941: LD_VAR 0 3
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8953: LD_INT 43
8955: PPUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8968: LD_INT 70
8970: PPUSH
8971: LD_VAR 0 3
8975: PPUSH
8976: LD_INT 1
8978: PPUSH
8979: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8983: LD_INT 51
8985: PPUSH
8986: LD_VAR 0 3
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8998: LD_INT 52
9000: PPUSH
9001: LD_VAR 0 3
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9013: LD_INT 6
9015: PPUSH
9016: LD_VAR 0 3
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9028: LD_INT 15
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9043: LD_INT 7
9045: PPUSH
9046: LD_VAR 0 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9058: LD_INT 12
9060: PPUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9073: LD_INT 18
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9088: LD_INT 60
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9103: LD_INT 9
9105: PPUSH
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9118: LD_INT 30
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9133: LD_INT 37
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9148: LD_INT 5
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9163: LD_INT 66
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9178: LD_INT 21
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9193: LD_INT 22
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9208: LD_INT 54
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9223: LD_INT 0
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9238: LD_INT 1
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9253: LD_INT 2
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 1
9263: PPUSH
9264: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9268: LD_INT 3
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9283: LD_INT 4
9285: PPUSH
9286: LD_VAR 0 3
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9298: LD_INT 5
9300: PPUSH
9301: LD_VAR 0 3
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9313: LD_INT 6
9315: PPUSH
9316: LD_VAR 0 3
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9328: LD_INT 7
9330: PPUSH
9331: LD_VAR 0 3
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9343: LD_INT 8
9345: PPUSH
9346: LD_VAR 0 3
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9358: LD_INT 10
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9373: LD_INT 11
9375: PPUSH
9376: LD_VAR 0 3
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9388: LD_INT 12
9390: PPUSH
9391: LD_VAR 0 3
9395: PPUSH
9396: LD_INT 1
9398: PPUSH
9399: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9403: LD_INT 13
9405: PPUSH
9406: LD_VAR 0 3
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9418: LD_INT 14
9420: PPUSH
9421: LD_VAR 0 3
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9433: LD_INT 15
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9448: LD_INT 16
9450: PPUSH
9451: LD_VAR 0 3
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9463: LD_INT 17
9465: PPUSH
9466: LD_VAR 0 3
9470: PPUSH
9471: LD_INT 1
9473: PPUSH
9474: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9478: LD_INT 19
9480: PPUSH
9481: LD_VAR 0 3
9485: PPUSH
9486: LD_INT 1
9488: PPUSH
9489: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9493: LD_INT 20
9495: PPUSH
9496: LD_VAR 0 3
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9508: LD_INT 21
9510: PPUSH
9511: LD_VAR 0 3
9515: PPUSH
9516: LD_INT 1
9518: PPUSH
9519: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9523: LD_INT 23
9525: PPUSH
9526: LD_VAR 0 3
9530: PPUSH
9531: LD_INT 1
9533: PPUSH
9534: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9538: LD_INT 26
9540: PPUSH
9541: LD_VAR 0 3
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9553: LD_INT 27
9555: PPUSH
9556: LD_VAR 0 3
9560: PPUSH
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9568: LD_INT 28
9570: PPUSH
9571: LD_VAR 0 3
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9583: LD_INT 29
9585: PPUSH
9586: LD_VAR 0 3
9590: PPUSH
9591: LD_INT 1
9593: PPUSH
9594: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9598: LD_INT 30
9600: PPUSH
9601: LD_VAR 0 3
9605: PPUSH
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9613: LD_INT 31
9615: PPUSH
9616: LD_VAR 0 3
9620: PPUSH
9621: LD_INT 1
9623: PPUSH
9624: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9628: LD_INT 32
9630: PPUSH
9631: LD_VAR 0 3
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9643: LD_INT 36
9645: PPUSH
9646: LD_VAR 0 3
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 324
// end ; 5 :
9658: GO 11789
9660: LD_INT 5
9662: DOUBLE
9663: EQUAL
9664: IFTRUE 9668
9666: GO 10781
9668: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9669: LD_INT 35
9671: PPUSH
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9684: LD_INT 45
9686: PPUSH
9687: LD_VAR 0 3
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9699: LD_INT 46
9701: PPUSH
9702: LD_VAR 0 3
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9714: LD_INT 47
9716: PPUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9729: LD_INT 1
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9744: LD_INT 2
9746: PPUSH
9747: LD_VAR 0 3
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9759: LD_INT 11
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9774: LD_INT 20
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9789: LD_INT 48
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9804: LD_INT 49
9806: PPUSH
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9819: LD_INT 69
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9834: LD_INT 39
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9849: LD_INT 34
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 1
9859: PPUSH
9860: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9864: LD_INT 42
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9879: LD_INT 44
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9894: LD_INT 41
9896: PPUSH
9897: LD_VAR 0 3
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9909: LD_INT 40
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9924: LD_INT 43
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9939: LD_INT 70
9941: PPUSH
9942: LD_VAR 0 3
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9954: LD_INT 51
9956: PPUSH
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9969: LD_INT 52
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9984: LD_INT 6
9986: PPUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9999: LD_INT 15
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10014: LD_INT 7
10016: PPUSH
10017: LD_VAR 0 3
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10029: LD_INT 12
10031: PPUSH
10032: LD_VAR 0 3
10036: PPUSH
10037: LD_INT 1
10039: PPUSH
10040: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10044: LD_INT 17
10046: PPUSH
10047: LD_VAR 0 3
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10059: LD_INT 18
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10074: LD_INT 60
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10089: LD_INT 32
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10104: LD_INT 9
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10119: LD_INT 57
10121: PPUSH
10122: LD_VAR 0 3
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10134: LD_INT 30
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10149: LD_INT 37
10151: PPUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10164: LD_INT 63
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10179: LD_INT 3
10181: PPUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10194: LD_INT 4
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10209: LD_INT 5
10211: PPUSH
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10224: LD_INT 66
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10239: LD_INT 21
10241: PPUSH
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10254: LD_INT 22
10256: PPUSH
10257: LD_VAR 0 3
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10269: LD_INT 19
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10284: LD_INT 54
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10299: LD_INT 55
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10314: LD_INT 0
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10329: LD_INT 1
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10344: LD_INT 2
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10359: LD_INT 3
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10374: LD_INT 4
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10389: LD_INT 5
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10404: LD_INT 6
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_INT 1
10414: PPUSH
10415: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10419: LD_INT 7
10421: PPUSH
10422: LD_VAR 0 3
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10434: LD_INT 8
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10449: LD_INT 10
10451: PPUSH
10452: LD_VAR 0 3
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10464: LD_INT 11
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10479: LD_INT 12
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10494: LD_INT 13
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10509: LD_INT 14
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10524: LD_INT 15
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10539: LD_INT 16
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10554: LD_INT 17
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10569: LD_INT 18
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10584: LD_INT 19
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10599: LD_INT 20
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10614: LD_INT 21
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10629: LD_INT 23
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10644: LD_INT 26
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10659: LD_INT 27
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10674: LD_INT 28
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10689: LD_INT 29
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10704: LD_INT 30
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10719: LD_INT 31
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10734: LD_INT 32
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10749: LD_INT 33
10751: PPUSH
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10764: LD_INT 36
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 324
// end ; 6 :
10779: GO 11789
10781: LD_INT 6
10783: DOUBLE
10784: EQUAL
10785: IFTRUE 10789
10787: GO 11714
10789: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10790: LD_INT 35
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10805: LD_INT 45
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10820: LD_INT 46
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10835: LD_INT 47
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10850: LD_INT 1
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10865: LD_INT 2
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10880: LD_INT 11
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10895: LD_INT 20
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10910: LD_INT 48
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10925: LD_INT 49
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10940: LD_INT 50
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10955: LD_INT 69
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10970: LD_INT 39
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10985: LD_INT 34
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11000: LD_INT 42
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11015: LD_INT 44
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11030: LD_INT 41
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11045: LD_INT 13
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11060: LD_INT 40
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11075: LD_INT 43
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11090: LD_INT 70
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11105: LD_INT 23
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11120: LD_INT 51
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11135: LD_INT 52
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11150: LD_INT 6
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11165: LD_INT 15
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11180: LD_INT 7
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11195: LD_INT 12
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11210: LD_INT 10
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11225: LD_INT 17
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11240: LD_INT 18
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11255: LD_INT 60
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11270: LD_INT 61
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11285: LD_INT 32
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11300: LD_INT 27
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11315: LD_INT 36
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11330: LD_INT 33
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11345: LD_INT 9
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11360: LD_INT 38
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11375: LD_INT 57
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11390: LD_INT 58
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11405: LD_INT 28
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11420: LD_INT 29
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11435: LD_INT 30
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11450: LD_INT 37
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11465: LD_INT 63
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11480: LD_INT 64
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11495: LD_INT 3
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11510: LD_INT 4
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11525: LD_INT 5
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11540: LD_INT 8
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11555: LD_INT 66
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11570: LD_INT 67
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11585: LD_INT 21
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11600: LD_INT 22
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11615: LD_INT 19
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11630: LD_INT 26
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11645: LD_INT 54
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11660: LD_INT 55
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 322
// for i = 0 to 39 do
11675: LD_ADDR_VAR 0 4
11679: PUSH
11680: DOUBLE
11681: LD_INT 0
11683: DEC
11684: ST_TO_ADDR
11685: LD_INT 39
11687: PUSH
11688: FOR_TO
11689: IFFALSE 11710
// SetRestrict ( i , side , true ) ;
11691: LD_VAR 0 4
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 324
11708: GO 11688
11710: POP
11711: POP
// end ; else
11712: GO 11789
11714: POP
// begin for i = 1 to 73 do
11715: LD_ADDR_VAR 0 4
11719: PUSH
11720: DOUBLE
11721: LD_INT 1
11723: DEC
11724: ST_TO_ADDR
11725: LD_INT 73
11727: PUSH
11728: FOR_TO
11729: IFFALSE 11750
// SetTech ( i , side , state_enabled ) ;
11731: LD_VAR 0 4
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 322
11748: GO 11728
11750: POP
11751: POP
// for i = 0 to 39 do
11752: LD_ADDR_VAR 0 4
11756: PUSH
11757: DOUBLE
11758: LD_INT 0
11760: DEC
11761: ST_TO_ADDR
11762: LD_INT 39
11764: PUSH
11765: FOR_TO
11766: IFFALSE 11787
// SetRestrict ( i , side , true ) ;
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 324
11785: GO 11765
11787: POP
11788: POP
// end ; end ; end ;
11789: GO 7794
11791: POP
11792: POP
// end ; end_of_file
11793: LD_VAR 0 2
11797: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11798: LD_INT 0
11800: PPUSH
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
11805: PPUSH
11806: PPUSH
11807: PPUSH
11808: PPUSH
// for i := 1 to 8 do
11809: LD_ADDR_VAR 0 2
11813: PUSH
11814: DOUBLE
11815: LD_INT 1
11817: DEC
11818: ST_TO_ADDR
11819: LD_INT 8
11821: PUSH
11822: FOR_TO
11823: IFFALSE 12207
// begin if Side_Positions [ i ] then
11825: LD_EXP 39
11829: PUSH
11830: LD_VAR 0 2
11834: ARRAY
11835: IFFALSE 12205
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11837: LD_ADDR_VAR 0 7
11841: PUSH
11842: LD_INT 22
11844: PUSH
11845: LD_VAR 0 2
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 21
11856: PUSH
11857: LD_INT 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: PUSH
11873: LD_INT 0
11875: PLUS
11876: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11877: LD_ADDR_VAR 0 9
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_VAR 0 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: LD_INT 30
11899: PUSH
11900: LD_INT 0
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: ST_TO_ADDR
// crates := 0 ;
11931: LD_ADDR_VAR 0 4
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// oil := 0 ;
11939: LD_ADDR_VAR 0 5
11943: PUSH
11944: LD_INT 0
11946: ST_TO_ADDR
// sib := 0 ;
11947: LD_ADDR_VAR 0 6
11951: PUSH
11952: LD_INT 0
11954: ST_TO_ADDR
// if bases then
11955: LD_VAR 0 9
11959: IFFALSE 12065
// begin for j in bases do
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: LD_VAR 0 9
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12063
// begin base := GetBase ( j ) ;
11974: LD_ADDR_VAR 0 8
11978: PUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: CALL_OW 274
11988: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
11989: LD_ADDR_VAR 0 4
11993: PUSH
11994: LD_VAR 0 4
11998: PUSH
11999: LD_VAR 0 8
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 275
12011: PLUS
12012: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12013: LD_ADDR_VAR 0 5
12017: PUSH
12018: LD_VAR 0 5
12022: PUSH
12023: LD_VAR 0 8
12027: PPUSH
12028: LD_INT 2
12030: PPUSH
12031: CALL_OW 275
12035: PLUS
12036: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12037: LD_ADDR_VAR 0 6
12041: PUSH
12042: LD_VAR 0 6
12046: PUSH
12047: LD_VAR 0 8
12051: PPUSH
12052: LD_INT 3
12054: PPUSH
12055: CALL_OW 275
12059: PLUS
12060: ST_TO_ADDR
// end ;
12061: GO 11971
12063: POP
12064: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12065: LD_STRING setSpecText(
12067: PUSH
12068: LD_VAR 0 2
12072: STR
12073: PUSH
12074: LD_STRING ,
12076: STR
12077: PUSH
12078: LD_INT 2
12080: STR
12081: PUSH
12082: LD_STRING ,
12084: STR
12085: PUSH
12086: LD_VAR 0 4
12090: STR
12091: PUSH
12092: LD_STRING )
12094: STR
12095: PPUSH
12096: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12100: LD_STRING setSpecText(
12102: PUSH
12103: LD_VAR 0 2
12107: STR
12108: PUSH
12109: LD_STRING ,
12111: STR
12112: PUSH
12113: LD_INT 3
12115: STR
12116: PUSH
12117: LD_STRING ,
12119: STR
12120: PUSH
12121: LD_VAR 0 5
12125: STR
12126: PUSH
12127: LD_STRING )
12129: STR
12130: PPUSH
12131: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12135: LD_STRING setSpecText(
12137: PUSH
12138: LD_VAR 0 2
12142: STR
12143: PUSH
12144: LD_STRING ,
12146: STR
12147: PUSH
12148: LD_INT 4
12150: STR
12151: PUSH
12152: LD_STRING ,
12154: STR
12155: PUSH
12156: LD_VAR 0 6
12160: STR
12161: PUSH
12162: LD_STRING )
12164: STR
12165: PPUSH
12166: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12170: LD_STRING setSpecText(
12172: PUSH
12173: LD_VAR 0 2
12177: STR
12178: PUSH
12179: LD_STRING ,
12181: STR
12182: PUSH
12183: LD_INT 5
12185: STR
12186: PUSH
12187: LD_STRING ,
12189: STR
12190: PUSH
12191: LD_VAR 0 7
12195: STR
12196: PUSH
12197: LD_STRING )
12199: STR
12200: PPUSH
12201: CALL_OW 559
// end ; end ;
12205: GO 11822
12207: POP
12208: POP
// end ;
12209: LD_VAR 0 1
12213: RET
// every 0 0$1 do
12214: GO 12216
12216: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12217: LD_STRING setSpecLogoNumber(
12219: PUSH
12220: LD_INT 2
12222: STR
12223: PUSH
12224: LD_STRING ,
12226: STR
12227: PUSH
12228: LD_INT 1
12230: STR
12231: PUSH
12232: LD_STRING )
12234: STR
12235: PPUSH
12236: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12240: LD_STRING setSpecLogoNumber(
12242: PUSH
12243: LD_INT 3
12245: STR
12246: PUSH
12247: LD_STRING ,
12249: STR
12250: PUSH
12251: LD_INT 2
12253: STR
12254: PUSH
12255: LD_STRING )
12257: STR
12258: PPUSH
12259: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12263: LD_STRING setSpecLogoNumber(
12265: PUSH
12266: LD_INT 4
12268: STR
12269: PUSH
12270: LD_STRING ,
12272: STR
12273: PUSH
12274: LD_INT 3
12276: STR
12277: PUSH
12278: LD_STRING )
12280: STR
12281: PPUSH
12282: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12286: LD_STRING setSpecLogoNumber(
12288: PUSH
12289: LD_INT 5
12291: STR
12292: PUSH
12293: LD_STRING ,
12295: STR
12296: PUSH
12297: LD_INT 4
12299: STR
12300: PUSH
12301: LD_STRING )
12303: STR
12304: PPUSH
12305: CALL_OW 559
// end ;
12309: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12310: LD_INT 2
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 0
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: IFFALSE 12352
12344: GO 12346
12346: DISABLE
// begin enable ;
12347: ENABLE
// UpdateSpectatorBar ;
12348: CALL 11798 0 0
// end ; end_of_file
12352: END
// var respawn , inqueue ; export function init_respawning ; begin
12353: LD_INT 0
12355: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12356: LD_ADDR_LOC 14
12360: PUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_INT 8
12366: PPUSH
12367: CALL_OW 12
12371: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12372: LD_ADDR_LOC 15
12376: PUSH
12377: LD_INT 0
12379: PUSH
12380: LD_INT 0
12382: PUSH
12383: LD_INT 0
12385: PUSH
12386: LD_INT 0
12388: PUSH
12389: LD_INT 0
12391: PUSH
12392: LD_INT 0
12394: PUSH
12395: LD_INT 0
12397: PUSH
12398: LD_INT 0
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
// end ;
12411: LD_VAR 0 1
12415: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12416: GO 12418
12418: DISABLE
12419: LD_INT 0
12421: PPUSH
12422: PPUSH
12423: PPUSH
// begin if respawning_time_max = 0 then
12424: LD_EXP 30
12428: PUSH
12429: LD_INT 0
12431: EQUAL
12432: IFFALSE 12436
// exit ;
12434: GO 12844
// if respawn = 8 then
12436: LD_LOC 14
12440: PUSH
12441: LD_INT 8
12443: EQUAL
12444: IFFALSE 12456
// respawn := 1 else
12446: LD_ADDR_LOC 14
12450: PUSH
12451: LD_INT 1
12453: ST_TO_ADDR
12454: GO 12470
// respawn := respawn + 1 ;
12456: LD_ADDR_LOC 14
12460: PUSH
12461: LD_LOC 14
12465: PUSH
12466: LD_INT 1
12468: PLUS
12469: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12470: LD_EXP 39
12474: PUSH
12475: LD_LOC 14
12479: ARRAY
12480: PUSH
12481: LD_LOC 15
12485: PUSH
12486: LD_LOC 14
12490: ARRAY
12491: NOT
12492: AND
12493: IFFALSE 12843
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12495: LD_ADDR_VAR 0 1
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_LOC 14
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: LD_INT 23
12527: PUSH
12528: LD_INT 0
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 69
12545: ST_TO_ADDR
// if n < number_of_people then
12546: LD_VAR 0 1
12550: PUSH
12551: LD_EXP 21
12555: LESS
12556: IFFALSE 12840
// begin aktresp := respawn ;
12558: LD_ADDR_VAR 0 3
12562: PUSH
12563: LD_LOC 14
12567: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12568: LD_ADDR_LOC 15
12572: PUSH
12573: LD_LOC 15
12577: PPUSH
12578: LD_VAR 0 3
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 1
12590: ST_TO_ADDR
// enable ;
12591: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12592: LD_EXP 29
12596: PPUSH
12597: LD_EXP 30
12601: PPUSH
12602: CALL_OW 12
12606: PPUSH
12607: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12611: LD_ADDR_LOC 15
12615: PUSH
12616: LD_LOC 15
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 0
12628: PPUSH
12629: CALL_OW 1
12633: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 2
12651: PUSH
12652: LD_INT 30
12654: PUSH
12655: LD_INT 0
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 50
12679: PUSH
12680: EMPTY
12681: LIST
12682: PUSH
12683: LD_INT 22
12685: PUSH
12686: LD_VAR 0 3
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: PPUSH
12701: CALL_OW 69
12705: ST_TO_ADDR
// if dep = 0 then
12706: LD_VAR 0 2
12710: PUSH
12711: LD_INT 0
12713: EQUAL
12714: IFFALSE 12718
// exit ;
12716: GO 12844
// hc_name :=  ;
12718: LD_ADDR_OWVAR 26
12722: PUSH
12723: LD_STRING 
12725: ST_TO_ADDR
// hc_importance := 0 ;
12726: LD_ADDR_OWVAR 32
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12734: LD_INT 0
12736: PPUSH
12737: LD_INT 0
12739: PPUSH
12740: LD_EXP 22
12744: PUSH
12745: LD_INT 2
12747: DIV
12748: PPUSH
12749: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12753: LD_ADDR_OWVAR 21
12757: PUSH
12758: LD_EXP 40
12762: PUSH
12763: LD_VAR 0 3
12767: ARRAY
12768: ST_TO_ADDR
// uc_side := aktresp ;
12769: LD_ADDR_OWVAR 20
12773: PUSH
12774: LD_VAR 0 3
12778: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12779: LD_ADDR_VAR 0 2
12783: PUSH
12784: LD_VAR 0 2
12788: PUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_VAR 0 2
12796: PPUSH
12797: CALL_OW 12
12801: ARRAY
12802: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12803: CALL_OW 44
12807: PPUSH
12808: LD_VAR 0 2
12812: PPUSH
12813: CALL_OW 250
12817: PPUSH
12818: LD_VAR 0 2
12822: PPUSH
12823: CALL_OW 251
12827: PPUSH
12828: LD_INT 7
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 50
// end else
12838: GO 12841
// enable ;
12840: ENABLE
// end else
12841: GO 12844
// enable ;
12843: ENABLE
// end ; end_of_file
12844: PPOPN 3
12846: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12847: LD_INT 0
12849: PPUSH
12850: PPUSH
12851: PPUSH
// BuildUpTime_Delay = 0 ;
12852: LD_ADDR_EXP 62
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// if not def_builduptime then
12860: LD_EXP 16
12864: NOT
12865: IFFALSE 12869
// exit ;
12867: GO 13052
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12869: LD_ADDR_EXP 62
12873: PUSH
12874: LD_INT 8400
12876: PUSH
12877: LD_INT 2100
12879: PUSH
12880: LD_EXP 16
12884: MUL
12885: PLUS
12886: ST_TO_ADDR
// BuildUpTimeActive := true ;
12887: LD_ADDR_EXP 61
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// for i := 1 to 8 do
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: DOUBLE
12901: LD_INT 1
12903: DEC
12904: ST_TO_ADDR
12905: LD_INT 8
12907: PUSH
12908: FOR_TO
12909: IFFALSE 13050
// if Side_Positions [ i ] then
12911: LD_EXP 39
12915: PUSH
12916: LD_VAR 0 2
12920: ARRAY
12921: IFFALSE 13048
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12923: LD_EXP 60
12927: PUSH
12928: LD_EXP 39
12932: PUSH
12933: LD_VAR 0 2
12937: ARRAY
12938: ARRAY
12939: PPUSH
12940: LD_INT 5
12942: PPUSH
12943: CALL_OW 424
// for j := 1 to 8 do
12947: LD_ADDR_VAR 0 3
12951: PUSH
12952: DOUBLE
12953: LD_INT 1
12955: DEC
12956: ST_TO_ADDR
12957: LD_INT 8
12959: PUSH
12960: FOR_TO
12961: IFFALSE 13046
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12963: LD_EXP 39
12967: PUSH
12968: LD_VAR 0 3
12972: ARRAY
12973: PUSH
12974: LD_EXP 36
12978: PUSH
12979: LD_VAR 0 2
12983: ARRAY
12984: PUSH
12985: LD_EXP 36
12989: PUSH
12990: LD_VAR 0 3
12994: ARRAY
12995: NONEQUAL
12996: PUSH
12997: LD_EXP 41
13001: NOT
13002: PUSH
13003: LD_VAR 0 2
13007: PUSH
13008: LD_VAR 0 3
13012: NONEQUAL
13013: AND
13014: OR
13015: AND
13016: IFFALSE 13044
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_EXP 60
13027: PUSH
13028: LD_EXP 39
13032: PUSH
13033: LD_VAR 0 2
13037: ARRAY
13038: ARRAY
13039: PPUSH
13040: CALL_OW 333
13044: GO 12960
13046: POP
13047: POP
// end ;
13048: GO 12908
13050: POP
13051: POP
// end ;
13052: LD_VAR 0 1
13056: RET
// export function EndBuildUp ; var i , j ; begin
13057: LD_INT 0
13059: PPUSH
13060: PPUSH
13061: PPUSH
// BuildUpTimeActive := false ;
13062: LD_ADDR_EXP 61
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// for i := 1 to 8 do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_INT 8
13082: PUSH
13083: FOR_TO
13084: IFFALSE 13225
// if Side_Positions [ i ] then
13086: LD_EXP 39
13090: PUSH
13091: LD_VAR 0 2
13095: ARRAY
13096: IFFALSE 13223
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13098: LD_EXP 60
13102: PUSH
13103: LD_EXP 39
13107: PUSH
13108: LD_VAR 0 2
13112: ARRAY
13113: ARRAY
13114: PPUSH
13115: LD_INT 0
13117: PPUSH
13118: CALL_OW 424
// for j := 1 to 8 do
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: DOUBLE
13128: LD_INT 1
13130: DEC
13131: ST_TO_ADDR
13132: LD_INT 8
13134: PUSH
13135: FOR_TO
13136: IFFALSE 13221
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13138: LD_EXP 39
13142: PUSH
13143: LD_VAR 0 3
13147: ARRAY
13148: PUSH
13149: LD_EXP 36
13153: PUSH
13154: LD_VAR 0 2
13158: ARRAY
13159: PUSH
13160: LD_EXP 36
13164: PUSH
13165: LD_VAR 0 3
13169: ARRAY
13170: NONEQUAL
13171: PUSH
13172: LD_EXP 41
13176: NOT
13177: PUSH
13178: LD_VAR 0 2
13182: PUSH
13183: LD_VAR 0 3
13187: NONEQUAL
13188: AND
13189: OR
13190: AND
13191: IFFALSE 13219
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13193: LD_VAR 0 3
13197: PPUSH
13198: LD_EXP 60
13202: PUSH
13203: LD_EXP 39
13207: PUSH
13208: LD_VAR 0 2
13212: ARRAY
13213: ARRAY
13214: PPUSH
13215: CALL_OW 334
13219: GO 13135
13221: POP
13222: POP
// end ;
13223: GO 13083
13225: POP
13226: POP
// end ;
13227: LD_VAR 0 1
13231: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13232: LD_EXP 61
13236: IFFALSE 13411
13238: GO 13240
13240: DISABLE
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
// begin for i := 1 to 8 do
13245: LD_ADDR_VAR 0 1
13249: PUSH
13250: DOUBLE
13251: LD_INT 1
13253: DEC
13254: ST_TO_ADDR
13255: LD_INT 8
13257: PUSH
13258: FOR_TO
13259: IFFALSE 13408
// if Side_Positions [ i ] then
13261: LD_EXP 39
13265: PUSH
13266: LD_VAR 0 1
13270: ARRAY
13271: IFFALSE 13406
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: LD_EXP 60
13282: PUSH
13283: LD_EXP 39
13287: PUSH
13288: LD_VAR 0 1
13292: ARRAY
13293: ARRAY
13294: PPUSH
13295: LD_INT 2
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_OWVAR 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 70
13343: PUSH
13344: FOR_IN
13345: IFFALSE 13404
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13347: LD_EXP 36
13351: PUSH
13352: LD_VAR 0 1
13356: ARRAY
13357: PUSH
13358: LD_EXP 36
13362: PUSH
13363: LD_OWVAR 2
13367: ARRAY
13368: NONEQUAL
13369: PUSH
13370: LD_EXP 41
13374: NOT
13375: PUSH
13376: LD_VAR 0 1
13380: PUSH
13381: LD_OWVAR 2
13385: NONEQUAL
13386: AND
13387: OR
13388: IFFALSE 13402
// ComMoveToArea ( un , BuildUpEscape ) ;
13390: LD_VAR 0 2
13394: PPUSH
13395: LD_INT 13
13397: PPUSH
13398: CALL_OW 113
13402: GO 13344
13404: POP
13405: POP
13406: GO 13258
13408: POP
13409: POP
// enable ;
13410: ENABLE
// end ;
13411: PPOPN 2
13413: END
// every 0 0$1 trigger def_builduptime do
13414: LD_EXP 16
13418: IFFALSE 13444
13420: GO 13422
13422: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13423: LD_INT 8400
13425: PUSH
13426: LD_EXP 16
13430: PUSH
13431: LD_INT 2100
13433: MUL
13434: PLUS
13435: PPUSH
13436: CALL_OW 67
// EndBuildUp ;
13440: CALL 13057 0 0
// end ; end_of_file
13444: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
// enable ( 98 ) ;
13449: LD_INT 98
13451: ENABLE_MARKED
// GameEnded = false ;
13452: LD_ADDR_LOC 17
13456: PUSH
13457: LD_INT 0
13459: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13460: LD_ADDR_LOC 16
13464: PUSH
13465: LD_INT 0
13467: PUSH
13468: LD_INT 0
13470: PUSH
13471: LD_INT 0
13473: PUSH
13474: LD_INT 0
13476: PUSH
13477: LD_INT 0
13479: PUSH
13480: LD_INT 0
13482: PUSH
13483: LD_INT 0
13485: PUSH
13486: LD_INT 0
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: ST_TO_ADDR
// unfoged = false ;
13499: LD_ADDR_LOC 18
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// defeated_specs := [ ] ;
13507: LD_ADDR_LOC 19
13511: PUSH
13512: EMPTY
13513: ST_TO_ADDR
// for i = 1 to side_positions do
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: DOUBLE
13520: LD_INT 1
13522: DEC
13523: ST_TO_ADDR
13524: LD_EXP 39
13528: PUSH
13529: FOR_TO
13530: IFFALSE 13570
// if not side_positions [ i ] then
13532: LD_EXP 39
13536: PUSH
13537: LD_VAR 0 2
13541: ARRAY
13542: NOT
13543: IFFALSE 13568
// defeated = replace ( defeated , i , true ) ;
13545: LD_ADDR_LOC 16
13549: PUSH
13550: LD_LOC 16
13554: PPUSH
13555: LD_VAR 0 2
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 1
13567: ST_TO_ADDR
13568: GO 13529
13570: POP
13571: POP
// end ;
13572: LD_VAR 0 1
13576: RET
// function CanWinLoose ; begin
13577: LD_INT 0
13579: PPUSH
// Result := true ;
13580: LD_ADDR_VAR 0 1
13584: PUSH
13585: LD_INT 1
13587: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13588: CALL_OW 518
13592: PUSH
13593: CALL_OW 519
13597: PUSH
13598: LD_INT 0
13600: GREATER
13601: AND
13602: IFFALSE 13612
// Result := false ;
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: LD_INT 0
13611: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13612: CALL_OW 531
13616: PUSH
13617: CALL_OW 519
13621: PUSH
13622: LD_INT 1
13624: GREATER
13625: AND
13626: IFFALSE 13636
// Result := false ;
13628: LD_ADDR_VAR 0 1
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// end ;
13636: LD_VAR 0 1
13640: RET
// export function HasPower ( i ) ; var k , h ; begin
13641: LD_INT 0
13643: PPUSH
13644: PPUSH
13645: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 108
13655: NOT
13656: PUSH
13657: LD_EXP 38
13661: PUSH
13662: LD_VAR 0 1
13666: ARRAY
13667: NOT
13668: AND
13669: PUSH
13670: LD_OWVAR 4
13674: AND
13675: IFFALSE 13687
// begin result = false ;
13677: LD_ADDR_VAR 0 2
13681: PUSH
13682: LD_INT 0
13684: ST_TO_ADDR
// end else
13685: GO 13982
// case def_win_rules of 0 :
13687: LD_EXP 34
13691: PUSH
13692: LD_INT 0
13694: DOUBLE
13695: EQUAL
13696: IFTRUE 13700
13698: GO 13863
13700: POP
// if def_people_respawning then
13701: LD_EXP 11
13705: IFFALSE 13796
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_VAR 0 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 21
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 33
13739: PUSH
13740: LD_INT 3
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 33
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 0
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 30
13769: PUSH
13770: LD_INT 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: ST_TO_ADDR
13794: GO 13861
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 22
13803: PUSH
13804: LD_VAR 0 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 2
13815: PUSH
13816: LD_INT 21
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 33
13828: PUSH
13829: LD_INT 3
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 33
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 69
13860: ST_TO_ADDR
13861: GO 13982
13863: LD_INT 1
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13910
13871: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13872: LD_ADDR_VAR 0 2
13876: PUSH
13877: LD_INT 22
13879: PUSH
13880: LD_VAR 0 1
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 21
13891: PUSH
13892: LD_INT 1
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 69
13907: ST_TO_ADDR
13908: GO 13982
13910: LD_INT 2
13912: DOUBLE
13913: EQUAL
13914: IFTRUE 13918
13916: GO 13981
13918: POP
// begin h = false ;
13919: LD_ADDR_VAR 0 4
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// for k in heroes [ i ] do
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_EXP 50
13936: PUSH
13937: LD_VAR 0 1
13941: ARRAY
13942: PUSH
13943: FOR_IN
13944: IFFALSE 13967
// if IsLive ( k ) then
13946: LD_VAR 0 3
13950: PPUSH
13951: CALL_OW 300
13955: IFFALSE 13965
// h = true ;
13957: LD_ADDR_VAR 0 4
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
13965: GO 13943
13967: POP
13968: POP
// Result := h ;
13969: LD_ADDR_VAR 0 2
13973: PUSH
13974: LD_VAR 0 4
13978: ST_TO_ADDR
// end ; end ;
13979: GO 13982
13981: POP
// end ;
13982: LD_VAR 0 2
13986: RET
// function AlliedSides ( i , j ) ; begin
13987: LD_INT 0
13989: PPUSH
// Result := false ;
13990: LD_ADDR_VAR 0 3
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13998: LD_VAR 0 1
14002: PPUSH
14003: LD_VAR 0 2
14007: PPUSH
14008: CALL_OW 81
14012: PUSH
14013: LD_INT 1
14015: EQUAL
14016: PUSH
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 81
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: AND
14036: PUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 83
14046: AND
14047: PUSH
14048: LD_VAR 0 2
14052: PPUSH
14053: CALL_OW 83
14057: AND
14058: IFFALSE 14068
// Result := true ;
14060: LD_ADDR_VAR 0 3
14064: PUSH
14065: LD_INT 1
14067: ST_TO_ADDR
// end ;
14068: LD_VAR 0 3
14072: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14073: CALL 13577 0 0
14077: PUSH
14078: LD_LOC 17
14082: NOT
14083: AND
14084: IFFALSE 14100
14086: GO 14088
14088: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14089: LD_ADDR_EXP 59
14093: PUSH
14094: LD_STRING #Player-Ended
14096: PUSH
14097: EMPTY
14098: LIST
14099: ST_TO_ADDR
14100: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14101: CALL 13577 0 0
14105: PUSH
14106: LD_LOC 17
14110: AND
14111: IFFALSE 14120
14113: GO 14115
14115: DISABLE
// YouLostInMultiplayer ;
14116: CALL_OW 107
14120: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14121: CALL 13577 0 0
14125: NOT
14126: PUSH
14127: CALL_OW 531
14131: NOT
14132: AND
14133: IFFALSE 14149
14135: GO 14137
14137: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14138: LD_ADDR_EXP 59
14142: PUSH
14143: LD_STRING #server-wait
14145: PUSH
14146: EMPTY
14147: LIST
14148: ST_TO_ADDR
14149: END
// every 100 trigger IAmSpec do
14150: CALL_OW 531
14154: IFFALSE 14170
14156: GO 14158
14158: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14159: LD_ADDR_EXP 59
14163: PUSH
14164: LD_STRING #Player-IAmSpec
14166: PUSH
14167: EMPTY
14168: LIST
14169: ST_TO_ADDR
14170: END
// every 100 trigger GameEnded and IAmSpec do
14171: LD_LOC 17
14175: PUSH
14176: CALL_OW 531
14180: AND
14181: IFFALSE 14190
14183: GO 14185
14185: DISABLE
// YouLostInMultiplayer ;
14186: CALL_OW 107
14190: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14191: CALL 13577 0 0
14195: PUSH
14196: LD_LOC 17
14200: NOT
14201: AND
14202: IFFALSE 14218
14204: GO 14206
14206: DISABLE
// WaitServerStrings = [ $player-win ] ;
14207: LD_ADDR_EXP 59
14211: PUSH
14212: LD_STRING $player-win
14214: PUSH
14215: EMPTY
14216: LIST
14217: ST_TO_ADDR
14218: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14219: CALL 13577 0 0
14223: PUSH
14224: LD_LOC 17
14228: AND
14229: IFFALSE 14253
14231: GO 14233
14233: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14234: LD_EXP 40
14238: PUSH
14239: LD_OWVAR 7
14243: ARRAY
14244: PPUSH
14245: CALL 7432 0 1
// YouWinInMultiplayer ;
14249: CALL_OW 106
// end ;
14253: END
// every 100 trigger isEditor marked 401 do
14254: LD_OWVAR 84
14258: IFFALSE 14274
14260: GO 14262
14262: DISABLE
// Debug_Strings = [ You won ] ;
14263: LD_ADDR_OWVAR 48
14267: PUSH
14268: LD_STRING You won
14270: PUSH
14271: EMPTY
14272: LIST
14273: ST_TO_ADDR
14274: END
// every 100 trigger isEditor marked 400 do
14275: LD_OWVAR 84
14279: IFFALSE 14295
14281: GO 14283
14283: DISABLE
// Debug_Strings = [ You loss ] ;
14284: LD_ADDR_OWVAR 48
14288: PUSH
14289: LD_STRING You loss
14291: PUSH
14292: EMPTY
14293: LIST
14294: ST_TO_ADDR
14295: END
// every 100 marked 98 do var i , un ;
14296: GO 14298
14298: DISABLE
14299: LD_INT 0
14301: PPUSH
14302: PPUSH
// begin for i = 1 to side_positions do
14303: LD_ADDR_VAR 0 1
14307: PUSH
14308: DOUBLE
14309: LD_INT 1
14311: DEC
14312: ST_TO_ADDR
14313: LD_EXP 39
14317: PUSH
14318: FOR_TO
14319: IFFALSE 14406
// begin if side_positions [ i ] then
14321: LD_EXP 39
14325: PUSH
14326: LD_VAR 0 1
14330: ARRAY
14331: IFFALSE 14404
// if not HasPower ( i ) and not defeated [ i ] then
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL 13641 0 1
14342: NOT
14343: PUSH
14344: LD_LOC 16
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: NOT
14355: AND
14356: IFFALSE 14404
// begin defeated = replace ( defeated , i , true ) ;
14358: LD_ADDR_LOC 16
14362: PUSH
14363: LD_LOC 16
14367: PPUSH
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 1
14380: ST_TO_ADDR
// if i = mp_player_side then
14381: LD_VAR 0 1
14385: PUSH
14386: LD_OWVAR 7
14390: EQUAL
14391: IFFALSE 14404
// begin Multiplayer_Loose_Message ;
14393: CALL_OW 521
// SetPlayerSpectator ( ) ;
14397: CALL_OW 572
// enable ( 400 ) ;
14401: LD_INT 400
14403: ENABLE_MARKED
// end ; end ; end ;
14404: GO 14318
14406: POP
14407: POP
// DidGameEnd ;
14408: CALL 14423 0 0
// if not GameEnded then
14412: LD_LOC 17
14416: NOT
14417: IFFALSE 14420
// enable ;
14419: ENABLE
// end ;
14420: PPOPN 2
14422: END
// function DidGameEnd ; var i , k , enemy ; begin
14423: LD_INT 0
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
// enemy = [ ] ;
14429: LD_ADDR_VAR 0 4
14433: PUSH
14434: EMPTY
14435: ST_TO_ADDR
// for i = 1 to side_positions do
14436: LD_ADDR_VAR 0 2
14440: PUSH
14441: DOUBLE
14442: LD_INT 1
14444: DEC
14445: ST_TO_ADDR
14446: LD_EXP 39
14450: PUSH
14451: FOR_TO
14452: IFFALSE 14546
// if not defeated [ i ] then
14454: LD_LOC 16
14458: PUSH
14459: LD_VAR 0 2
14463: ARRAY
14464: NOT
14465: IFFALSE 14544
// for k = 1 to side_positions do
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: DOUBLE
14473: LD_INT 1
14475: DEC
14476: ST_TO_ADDR
14477: LD_EXP 39
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14542
// if not defeated [ k ] then
14485: LD_LOC 16
14489: PUSH
14490: LD_VAR 0 3
14494: ARRAY
14495: NOT
14496: IFFALSE 14540
// if not AlliedSides ( i , k ) then
14498: LD_VAR 0 2
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: CALL 13987 0 2
14512: NOT
14513: IFFALSE 14540
// enemy = enemy ^ [ i , k ] ;
14515: LD_ADDR_VAR 0 4
14519: PUSH
14520: LD_VAR 0 4
14524: PUSH
14525: LD_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: ADD
14539: ST_TO_ADDR
14540: GO 14482
14542: POP
14543: POP
14544: GO 14451
14546: POP
14547: POP
// if not enemy then
14548: LD_VAR 0 4
14552: NOT
14553: IFFALSE 14579
// begin GameEnded = true ;
14555: LD_ADDR_LOC 17
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14563: LD_LOC 16
14567: PUSH
14568: LD_OWVAR 7
14572: ARRAY
14573: NOT
14574: IFFALSE 14579
// enable ( 401 ) ;
14576: LD_INT 401
14578: ENABLE_MARKED
// end ; end ;
14579: LD_VAR 0 1
14583: RET
// function unfog ; var k , friends ; begin
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
// for k = 1 to side_positions do
14589: LD_ADDR_VAR 0 2
14593: PUSH
14594: DOUBLE
14595: LD_INT 1
14597: DEC
14598: ST_TO_ADDR
14599: LD_EXP 39
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14661
// if not defeated [ k ] then
14607: LD_LOC 16
14611: PUSH
14612: LD_VAR 0 2
14616: ARRAY
14617: NOT
14618: IFFALSE 14659
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14620: LD_OWVAR 7
14624: PPUSH
14625: LD_VAR 0 2
14629: PPUSH
14630: CALL_OW 81
14634: PUSH
14635: LD_INT 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: IN
14641: IFFALSE 14659
// friends = friends ^ k ;
14643: LD_ADDR_VAR 0 3
14647: PUSH
14648: LD_VAR 0 3
14652: PUSH
14653: LD_VAR 0 2
14657: ADD
14658: ST_TO_ADDR
14659: GO 14604
14661: POP
14662: POP
// if not friends then
14663: LD_VAR 0 3
14667: NOT
14668: IFFALSE 14682
// begin SetPlayerSpectator ( ) ;
14670: CALL_OW 572
// unfoged = true ;
14674: LD_ADDR_LOC 18
14678: PUSH
14679: LD_INT 1
14681: ST_TO_ADDR
// end ; end ;
14682: LD_VAR 0 1
14686: RET
// export function MakeGameEnd ; begin
14687: LD_INT 0
14689: PPUSH
// SetPlayerSpectator ( ) ;
14690: CALL_OW 572
// unfoged = true ;
14694: LD_ADDR_LOC 18
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14702: LD_INT 175
14704: PPUSH
14705: CALL_OW 67
// GameEnded = true ;
14709: LD_ADDR_LOC 17
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// end ;
14717: LD_VAR 0 1
14721: RET
// export function GetGameEnded ; begin
14722: LD_INT 0
14724: PPUSH
// result = GameEnded ;
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_LOC 17
14734: ST_TO_ADDR
// end ;
14735: LD_VAR 0 1
14739: RET
