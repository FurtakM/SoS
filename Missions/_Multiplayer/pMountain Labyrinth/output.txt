// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3049 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 36
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 35
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 32
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 51375 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 51375 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 51375 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 51375 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 51375 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 51375 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 11227 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 51208 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 51208 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 51208 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 51208 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 51208 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 51208 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 51208 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 51208 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 51208 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 51208 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 51208 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 51208 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 51375 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 51375 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 51375 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 51375 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 51375 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 51375 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 51375 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 51375 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 51375 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 51375 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 51375 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 51375 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 51375 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 51375 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 51375 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 51375 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 51375 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 51375 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 48197 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 52083 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7571 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 52100 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8174 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 52141 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8227 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpDepots := [ ] ;
2805: LD_ADDR_EXP 14
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpBuildings := [ ] ;
2812: LD_ADDR_EXP 17
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2819: LD_ADDR_EXP 18
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2826: LD_ADDR_EXP 19
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2833: LD_ADDR_EXP 20
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpStartingResources := [ ] ;
2840: LD_ADDR_EXP 15
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpStartPos := [ ] ;
2847: LD_ADDR_EXP 21
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2854: LD_ADDR_EXP 22
2858: PUSH
2859: LD_INT 1
2861: NEG
2862: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2863: LD_ADDR_EXP 23
2867: PUSH
2868: EMPTY
2869: ST_TO_ADDR
// mpApemans := [ ] ;
2870: LD_ADDR_EXP 30
2874: PUSH
2875: EMPTY
2876: ST_TO_ADDR
// mpApemansArea := [ ] ;
2877: LD_ADDR_EXP 31
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpRespawn := [ ] ;
2884: LD_ADDR_EXP 32
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpKingArea := 0 ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// mpPoints := [ ] ;
2899: LD_ADDR_EXP 34
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpVehicles := 0 ;
2906: LD_ADDR_EXP 35
2910: PUSH
2911: LD_INT 0
2913: ST_TO_ADDR
// mpShipments := 0 ;
2914: LD_ADDR_EXP 27
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2922: LD_ADDR_EXP 39
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: ST_TO_ADDR
// mpEmissions := 0 ;
2953: LD_ADDR_EXP 36
2957: PUSH
2958: LD_INT 0
2960: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2961: LD_ADDR_EXP 25
2965: PUSH
2966: LD_INT 3
2968: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2969: LD_ADDR_EXP 24
2973: PUSH
2974: LD_INT 15
2976: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2977: LD_ADDR_EXP 37
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// mpGameActive := false ;
2985: LD_ADDR_EXP 38
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpBlockRespThread := false ;
2993: LD_ADDR_EXP 40
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// for i := 1 to 32 do
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 32
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3042
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3017: LD_ADDR_EXP 6
3021: PUSH
3022: LD_EXP 6
3026: PPUSH
3027: LD_VAR 0 2
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 1
3039: ST_TO_ADDR
3040: GO 3014
3042: POP
3043: POP
// end ;
3044: LD_VAR 0 1
3048: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3049: LD_INT 0
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3065: LD_ADDR_VAR 0 14
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 3
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: ST_TO_ADDR
// for i in gameTypes do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_VAR 0 14
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3104
// disable ( i ) ;
3097: LD_VAR 0 2
3101: DISABLE_MARKED
3102: GO 3094
3104: POP
3105: POP
// if Multiplayer then
3106: LD_OWVAR 4
3110: IFFALSE 3294
// begin mpGameType := mp_game_type ;
3112: LD_ADDR_EXP 3
3116: PUSH
3117: LD_OWVAR 6
3121: ST_TO_ADDR
// your_side := mp_player_side ;
3122: LD_ADDR_OWVAR 2
3126: PUSH
3127: LD_OWVAR 7
3131: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3132: LD_ADDR_EXP 7
3136: PUSH
3137: LD_OWVAR 17
3141: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3142: LD_ADDR_EXP 8
3146: PUSH
3147: LD_OWVAR 15
3151: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3152: LD_ADDR_EXP 9
3156: PUSH
3157: LD_OWVAR 16
3161: ST_TO_ADDR
// mpTeams := mp_teams ;
3162: LD_ADDR_EXP 10
3166: PUSH
3167: LD_OWVAR 12
3171: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_EXP 4
3186: PPUSH
3187: CALL 11227 0 1
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3269
// begin setting := mpGameSettingsKeys [ i ] ;
3195: LD_ADDR_VAR 0 12
3199: PUSH
3200: LD_EXP 4
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: ST_TO_ADDR
// if setting then
3211: LD_VAR 0 12
3215: IFFALSE 3267
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3217: LD_ADDR_EXP 6
3221: PUSH
3222: LD_EXP 6
3226: PPUSH
3227: LD_VAR 0 2
3231: PPUSH
3232: LD_EXP 5
3236: PUSH
3237: LD_VAR 0 2
3241: ARRAY
3242: PUSH
3243: LD_VAR 0 2
3247: PUSH
3248: LD_INT 1
3250: MINUS
3251: PPUSH
3252: CALL_OW 426
3256: PUSH
3257: LD_INT 1
3259: PLUS
3260: ARRAY
3261: PPUSH
3262: CALL_OW 1
3266: ST_TO_ADDR
// end ;
3267: GO 3192
3269: POP
3270: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3271: LD_ADDR_EXP 11
3275: PUSH
3276: LD_EXP 8
3280: PUSH
3281: LD_INT 0
3283: PUSH
3284: EMPTY
3285: LIST
3286: DIFF
3287: PUSH
3288: LD_INT 1
3290: GREATER
3291: ST_TO_ADDR
// end else
3292: GO 3294
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3294: LD_EXP 3
3298: PPUSH
3299: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3303: LD_EXP 18
3307: PPUSH
3308: CALL 11227 0 1
3312: IFFALSE 3343
// begin for i in mpMarkedAreas do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_EXP 18
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3341
// SetAreaMapShow ( i , 0 ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 424
3339: GO 3324
3341: POP
3342: POP
// end ; for i := 1 to 8 do
3343: LD_ADDR_VAR 0 2
3347: PUSH
3348: DOUBLE
3349: LD_INT 1
3351: DEC
3352: ST_TO_ADDR
3353: LD_INT 8
3355: PUSH
3356: FOR_TO
3357: IFFALSE 4573
// begin if not mpSidePositions [ i ] then
3359: LD_EXP 7
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: NOT
3370: IFFALSE 3374
// continue ;
3372: GO 3356
// side := i ;
3374: LD_ADDR_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3384: LD_ADDR_VAR 0 9
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_VAR 0 2
3398: ARRAY
3399: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3400: LD_ADDR_VAR 0 8
3404: PUSH
3405: LD_EXP 7
3409: PUSH
3410: LD_VAR 0 2
3414: ARRAY
3415: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3416: LD_EXP 12
3420: PPUSH
3421: CALL 11227 0 1
3425: IFFALSE 3502
// begin for j in mpOilDeposits [ pos ] do
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: LD_EXP 12
3436: PUSH
3437: LD_VAR 0 8
3441: ARRAY
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3500
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3446: LD_VAR 0 3
3450: PUSH
3451: LD_INT 1
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_INT 2
3462: ARRAY
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_VAR 0 7
3493: PPUSH
3494: CALL_OW 441
// end ;
3498: GO 3443
3500: POP
3501: POP
// end ; if Count ( mpSibDeposits ) then
3502: LD_EXP 13
3506: PPUSH
3507: CALL 11227 0 1
3511: IFFALSE 3588
// begin for j in mpSibDeposits [ pos ] do
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: LD_EXP 13
3522: PUSH
3523: LD_VAR 0 8
3527: ARRAY
3528: PUSH
3529: FOR_IN
3530: IFFALSE 3586
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 3
3545: PUSH
3546: LD_INT 2
3548: ARRAY
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_VAR 0 7
3579: PPUSH
3580: CALL_OW 441
// end ;
3584: GO 3529
3586: POP
3587: POP
// end ; InitBc ;
3588: CALL_OW 21
// InitUc ;
3592: CALL_OW 18
// uc_side := side ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_VAR 0 7
3605: ST_TO_ADDR
// uc_nation := nation ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_VAR 0 9
3615: ST_TO_ADDR
// if Count ( mpDepots ) then
3616: LD_EXP 14
3620: PPUSH
3621: CALL 11227 0 1
3625: IFFALSE 3795
// begin bc_level := 0 ;
3627: LD_ADDR_OWVAR 43
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// bc_type := b_depot ;
3635: LD_ADDR_OWVAR 42
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3643: LD_ADDR_VAR 0 4
3647: PUSH
3648: LD_EXP 14
3652: PUSH
3653: LD_VAR 0 8
3657: ARRAY
3658: PUSH
3659: LD_INT 1
3661: ARRAY
3662: PPUSH
3663: LD_EXP 14
3667: PUSH
3668: LD_VAR 0 8
3672: ARRAY
3673: PUSH
3674: LD_INT 2
3676: ARRAY
3677: PPUSH
3678: LD_EXP 14
3682: PUSH
3683: LD_VAR 0 8
3687: ARRAY
3688: PUSH
3689: LD_INT 3
3691: ARRAY
3692: PPUSH
3693: CALL_OW 47
3697: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING @
3705: PUSH
3706: LD_VAR 0 7
3710: STR
3711: PPUSH
3712: CALL_OW 500
// SetTag ( b , side ) ;
3716: LD_VAR 0 4
3720: PPUSH
3721: LD_VAR 0 7
3725: PPUSH
3726: CALL_OW 109
// if Count ( mpStartingResources ) then
3730: LD_EXP 15
3734: PPUSH
3735: CALL 11227 0 1
3739: IFFALSE 3793
// begin for j := 1 to mpStartingResources do
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_EXP 15
3755: PUSH
3756: FOR_TO
3757: IFFALSE 3791
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3759: LD_VAR 0 4
3763: PPUSH
3764: CALL_OW 274
3768: PPUSH
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_EXP 15
3778: PUSH
3779: LD_VAR 0 3
3783: ARRAY
3784: PPUSH
3785: CALL_OW 277
3789: GO 3756
3791: POP
3792: POP
// end ; end else
3793: GO 3942
// if Count ( mpStartingResources ) then
3795: LD_EXP 15
3799: PPUSH
3800: CALL 11227 0 1
3804: IFFALSE 3942
// begin for j := 1 to mpStartingResources do
3806: LD_ADDR_VAR 0 3
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_EXP 15
3820: PUSH
3821: FOR_TO
3822: IFFALSE 3940
// begin resources := mpStartingResources [ j ] ;
3824: LD_ADDR_VAR 0 13
3828: PUSH
3829: LD_EXP 15
3833: PUSH
3834: LD_VAR 0 3
3838: ARRAY
3839: ST_TO_ADDR
// repeat if resources >= 50 then
3840: LD_VAR 0 13
3844: PUSH
3845: LD_INT 50
3847: GREATEREQUAL
3848: IFFALSE 3894
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 5
3857: PPUSH
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_VAR 0 6
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 60
// resources := resources - 50 ;
3878: LD_ADDR_VAR 0 13
3882: PUSH
3883: LD_VAR 0 13
3887: PUSH
3888: LD_INT 50
3890: MINUS
3891: ST_TO_ADDR
// end else
3892: GO 3928
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: LD_VAR 0 13
3903: PUSH
3904: LD_INT 10
3906: DIV
3907: PPUSH
3908: LD_VAR 0 5
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 60
// until resources <= 0 ;
3928: LD_VAR 0 13
3932: PUSH
3933: LD_INT 0
3935: LESSEQUAL
3936: IFFALSE 3840
// end ;
3938: GO 3821
3940: POP
3941: POP
// end ; if Count ( mpBuildings ) then
3942: LD_EXP 17
3946: PPUSH
3947: CALL 11227 0 1
3951: IFFALSE 4029
// begin for j in mpBuildings [ pos ] do
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: LD_EXP 17
3962: PUSH
3963: LD_VAR 0 8
3967: ARRAY
3968: PUSH
3969: FOR_IN
3970: IFFALSE 4027
// begin bc_level := 0 ;
3972: LD_ADDR_OWVAR 43
3976: PUSH
3977: LD_INT 0
3979: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3980: LD_ADDR_OWVAR 42
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3994: LD_VAR 0 3
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 3
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 3
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 47
// end ;
4025: GO 3969
4027: POP
4028: POP
// end ; if mpBattleFlag > - 1 then
4029: LD_EXP 22
4033: PUSH
4034: LD_INT 1
4036: NEG
4037: GREATER
4038: IFFALSE 4197
// begin x := mpStartPos [ pos ] [ 1 ] ;
4040: LD_ADDR_VAR 0 5
4044: PUSH
4045: LD_EXP 21
4049: PUSH
4050: LD_VAR 0 8
4054: ARRAY
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4060: LD_ADDR_VAR 0 6
4064: PUSH
4065: LD_EXP 21
4069: PUSH
4070: LD_VAR 0 8
4074: ARRAY
4075: PUSH
4076: LD_INT 2
4078: ARRAY
4079: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4080: LD_VAR 0 5
4084: PPUSH
4085: LD_VAR 0 6
4089: PPUSH
4090: LD_INT 12
4092: PPUSH
4093: LD_INT 2
4095: PPUSH
4096: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4100: LD_ADDR_EXP 23
4104: PUSH
4105: LD_EXP 23
4109: PPUSH
4110: LD_VAR 0 7
4114: PPUSH
4115: LD_VAR 0 7
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: LD_INT 1
4132: PUSH
4133: LD_INT 100
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 70
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 40
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 10
4162: PUSH
4163: LD_INT 25
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 20
4172: PUSH
4173: LD_INT 100
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: PPUSH
4187: CALL_OW 418
4191: PPUSH
4192: CALL_OW 1
4196: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4197: LD_EXP 26
4201: PUSH
4202: LD_INT 20
4204: PPUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: CALL_OW 321
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: AND
4219: IFFALSE 4236
// SetTech ( tech_SibDet , side , state_researched ) ;
4221: LD_INT 20
4223: PPUSH
4224: LD_VAR 0 7
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4236: LD_INT 24
4238: PPUSH
4239: LD_VAR 0 7
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL_OW 322
// if mpSibBomb = 1 then
4251: LD_EXP 28
4255: PUSH
4256: LD_INT 1
4258: EQUAL
4259: IFFALSE 4278
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4261: LD_INT 25
4263: PPUSH
4264: LD_VAR 0 7
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: CALL_OW 322
// end else
4276: GO 4293
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4278: LD_INT 25
4280: PPUSH
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 322
// end ; if mpVehicles then
4293: LD_EXP 35
4297: IFFALSE 4396
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: LD_VAR 0 7
4308: PPUSH
4309: LD_VAR 0 9
4313: PPUSH
4314: LD_EXP 35
4318: PPUSH
4319: CALL 5483 0 3
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4394
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4327: LD_VAR 0 3
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: LD_INT 5
4337: PPUSH
4338: CALL_OW 12
4342: PPUSH
4343: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_EXP 21
4356: PUSH
4357: LD_VAR 0 8
4361: ARRAY
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_EXP 21
4371: PUSH
4372: LD_VAR 0 8
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: PPUSH
4382: LD_INT 12
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 50
// end ;
4392: GO 4324
4394: POP
4395: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4396: LD_ADDR_VAR 0 11
4400: PUSH
4401: LD_VAR 0 7
4405: PPUSH
4406: LD_VAR 0 9
4410: PPUSH
4411: LD_EXP 24
4415: PPUSH
4416: LD_EXP 25
4420: PPUSH
4421: CALL 4985 0 4
4425: ST_TO_ADDR
// for j in team do
4426: LD_ADDR_VAR 0 3
4430: PUSH
4431: LD_VAR 0 11
4435: PUSH
4436: FOR_IN
4437: IFFALSE 4486
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: LD_EXP 21
4448: PUSH
4449: LD_VAR 0 8
4453: ARRAY
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PPUSH
4459: LD_EXP 21
4463: PUSH
4464: LD_VAR 0 8
4468: ARRAY
4469: PUSH
4470: LD_INT 2
4472: ARRAY
4473: PPUSH
4474: LD_INT 12
4476: PPUSH
4477: LD_INT 0
4479: PPUSH
4480: CALL_OW 50
4484: GO 4436
4486: POP
4487: POP
// if mpApemans then
4488: LD_EXP 30
4492: IFFALSE 4571
// begin for j := 1 to mpApemans do
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_EXP 30
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin PrepareApeman ( - 5 ) ;
4512: LD_INT 5
4514: NEG
4515: PPUSH
4516: CALL 43084 0 1
// ape := CreateHuman ;
4520: LD_ADDR_VAR 0 10
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// SetTag ( ape , side ) ;
4530: LD_VAR 0 10
4534: PPUSH
4535: LD_VAR 0 7
4539: PPUSH
4540: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4544: LD_VAR 0 10
4548: PPUSH
4549: LD_EXP 31
4553: PUSH
4554: LD_VAR 0 8
4558: ARRAY
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ;
4567: GO 4509
4569: POP
4570: POP
// end ; end ;
4571: GO 3356
4573: POP
4574: POP
// if not mpTeamGame then
4575: LD_EXP 11
4579: NOT
4580: IFFALSE 4678
// begin for i := 1 to 8 do
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: DOUBLE
4588: LD_INT 1
4590: DEC
4591: ST_TO_ADDR
4592: LD_INT 8
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4674
// for j := 1 to 8 do
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: DOUBLE
4604: LD_INT 1
4606: DEC
4607: ST_TO_ADDR
4608: LD_INT 8
4610: PUSH
4611: FOR_TO
4612: IFFALSE 4670
// if i <> j then
4614: LD_VAR 0 2
4618: PUSH
4619: LD_VAR 0 3
4623: NONEQUAL
4624: IFFALSE 4648
// SetAttitude ( i , j , att_neutral , true ) else
4626: LD_VAR 0 2
4630: PPUSH
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 80
4646: GO 4668
// SetAttitude ( i , j , att_friend , true ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_VAR 0 3
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL_OW 80
4668: GO 4611
4670: POP
4671: POP
4672: GO 4595
4674: POP
4675: POP
// end else
4676: GO 4853
// begin if mpSharedVision then
4678: LD_EXP 16
4682: IFFALSE 4747
// begin for i in mpTeams do
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: LD_EXP 10
4693: PUSH
4694: FOR_IN
4695: IFFALSE 4745
// for j := 2 to i do
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: DOUBLE
4703: LD_INT 2
4705: DEC
4706: ST_TO_ADDR
4707: LD_VAR 0 2
4711: PUSH
4712: FOR_TO
4713: IFFALSE 4741
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4715: LD_VAR 0 2
4719: PUSH
4720: LD_VAR 0 3
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 2
4730: PUSH
4731: LD_INT 1
4733: ARRAY
4734: PPUSH
4735: CALL_OW 343
4739: GO 4712
4741: POP
4742: POP
4743: GO 4694
4745: POP
4746: POP
// end ; for i := 1 to 8 do
4747: LD_ADDR_VAR 0 2
4751: PUSH
4752: DOUBLE
4753: LD_INT 1
4755: DEC
4756: ST_TO_ADDR
4757: LD_INT 8
4759: PUSH
4760: FOR_TO
4761: IFFALSE 4851
// for j := 1 to 8 do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_INT 1
4771: DEC
4772: ST_TO_ADDR
4773: LD_INT 8
4775: PUSH
4776: FOR_TO
4777: IFFALSE 4847
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4779: LD_EXP 8
4783: PUSH
4784: LD_VAR 0 2
4788: ARRAY
4789: PUSH
4790: LD_EXP 8
4794: PUSH
4795: LD_VAR 0 3
4799: ARRAY
4800: EQUAL
4801: IFFALSE 4825
// SetAttitude ( i , j , att_friend , true ) else
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 1
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 80
4823: GO 4845
// SetAttitude ( i , j , att_enemy , true ) ;
4825: LD_VAR 0 2
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 2
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 80
4845: GO 4776
4847: POP
4848: POP
4849: GO 4760
4851: POP
4852: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4853: LD_ADDR_OWVAR 71
4857: PUSH
4858: LD_EXP 9
4862: PUSH
4863: LD_OWVAR 2
4867: ARRAY
4868: ST_TO_ADDR
// if IAmSpec then
4869: CALL_OW 531
4873: IFFALSE 4914
// begin FogOff ( true ) ;
4875: LD_INT 1
4877: PPUSH
4878: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4882: LD_EXP 29
4886: PUSH
4887: LD_INT 1
4889: ARRAY
4890: PUSH
4891: LD_INT 2
4893: DIV
4894: PPUSH
4895: LD_EXP 29
4899: PUSH
4900: LD_INT 2
4902: ARRAY
4903: PUSH
4904: LD_INT 2
4906: DIV
4907: PPUSH
4908: CALL_OW 86
// end else
4912: GO 4960
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4914: LD_EXP 21
4918: PUSH
4919: LD_EXP 7
4923: PUSH
4924: LD_OWVAR 2
4928: ARRAY
4929: ARRAY
4930: PUSH
4931: LD_INT 1
4933: ARRAY
4934: PPUSH
4935: LD_EXP 21
4939: PUSH
4940: LD_EXP 7
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 2
4954: ARRAY
4955: PPUSH
4956: CALL_OW 86
// end ; BeginBuildUp ;
4960: CALL 5961 0 0
// enable ( mpActive ) ;
4964: LD_INT 100
4966: ENABLE_MARKED
// enable ( mpGameType ) ;
4967: LD_EXP 3
4971: ENABLE_MARKED
// mpGameActive := true ;
4972: LD_ADDR_EXP 38
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// end ;
4980: LD_VAR 0 1
4984: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
4989: PPUSH
4990: PPUSH
// result := [ ] ;
4991: LD_ADDR_VAR 0 5
4995: PUSH
4996: EMPTY
4997: ST_TO_ADDR
// class := class_soldier ;
4998: LD_ADDR_VAR 0 8
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// uc_side := side ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_VAR 0 1
5015: ST_TO_ADDR
// uc_nation := nation ;
5016: LD_ADDR_OWVAR 21
5020: PUSH
5021: LD_VAR 0 2
5025: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5026: LD_ADDR_OWVAR 26
5030: PUSH
5031: LD_OWVAR 19
5035: PUSH
5036: LD_VAR 0 1
5040: ARRAY
5041: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5042: LD_INT 1
5044: PPUSH
5045: LD_INT 2
5047: PPUSH
5048: CALL_OW 12
5052: PPUSH
5053: LD_VAR 0 8
5057: PPUSH
5058: LD_VAR 0 4
5062: PUSH
5063: LD_INT 2
5065: PLUS
5066: PPUSH
5067: CALL_OW 380
// hc_importance := 105 ;
5071: LD_ADDR_OWVAR 32
5075: PUSH
5076: LD_INT 105
5078: ST_TO_ADDR
// if Multiplayer then
5079: LD_OWVAR 4
5083: IFFALSE 5123
// begin hc_gallery := MULTIAVATARS ;
5085: LD_ADDR_OWVAR 33
5089: PUSH
5090: LD_STRING MULTIAVATARS
5092: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5093: LD_ADDR_OWVAR 34
5097: PUSH
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 525
5107: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5108: LD_ADDR_OWVAR 27
5112: PUSH
5113: LD_VAR 0 1
5117: PPUSH
5118: CALL_OW 526
5122: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5123: LD_ADDR_VAR 0 5
5127: PUSH
5128: LD_VAR 0 5
5132: PPUSH
5133: CALL_OW 44
5137: PPUSH
5138: CALL 46836 0 2
5142: ST_TO_ADDR
// if mpTeamPreset then
5143: LD_LOC 1
5147: IFFALSE 5243
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5149: LD_LOC 1
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: LD_VAR 0 5
5162: PUSH
5163: LD_VAR 0 5
5167: ARRAY
5168: PPUSH
5169: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5173: LD_VAR 0 5
5177: PUSH
5178: LD_VAR 0 5
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_LOC 1
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: CALL_OW 260
5203: PPUSH
5204: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 5
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PPUSH
5222: LD_LOC 1
5226: PUSH
5227: LD_INT 1
5229: ARRAY
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: CALL_OW 260
5238: PPUSH
5239: CALL_OW 239
// end ; InitHc_All ( ) ;
5243: CALL_OW 584
// class := 2 ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 2
5254: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: DOUBLE
5261: LD_INT 1
5263: DEC
5264: ST_TO_ADDR
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 1
5272: MINUS
5273: PUSH
5274: FOR_TO
5275: IFFALSE 5459
// begin PrepareHuman ( false , class , skill ) ;
5277: LD_INT 0
5279: PPUSH
5280: LD_VAR 0 8
5284: PPUSH
5285: LD_VAR 0 4
5289: PPUSH
5290: CALL_OW 380
// un := CreateHuman ;
5294: LD_ADDR_VAR 0 7
5298: PUSH
5299: CALL_OW 44
5303: ST_TO_ADDR
// result := Join ( result , un ) ;
5304: LD_ADDR_VAR 0 5
5308: PUSH
5309: LD_VAR 0 5
5313: PPUSH
5314: LD_VAR 0 7
5318: PPUSH
5319: CALL 46836 0 2
5323: ST_TO_ADDR
// if mpTeamPreset then
5324: LD_LOC 1
5328: IFFALSE 5424
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5330: LD_LOC 1
5334: PUSH
5335: LD_VAR 0 6
5339: PUSH
5340: LD_INT 1
5342: PLUS
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 7
5349: PPUSH
5350: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5354: LD_VAR 0 7
5358: PPUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_LOC 1
5366: PUSH
5367: LD_VAR 0 6
5371: PUSH
5372: LD_INT 1
5374: PLUS
5375: ARRAY
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: CALL_OW 260
5384: PPUSH
5385: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5389: LD_VAR 0 7
5393: PPUSH
5394: LD_INT 2
5396: PPUSH
5397: LD_LOC 1
5401: PUSH
5402: LD_VAR 0 6
5406: PUSH
5407: LD_INT 1
5409: PLUS
5410: ARRAY
5411: PPUSH
5412: LD_INT 2
5414: PPUSH
5415: CALL_OW 260
5419: PPUSH
5420: CALL_OW 239
// end ; class := Inc ( class ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: CALL 48197 0 1
5438: ST_TO_ADDR
// if class = 5 then
5439: LD_VAR 0 8
5443: PUSH
5444: LD_INT 5
5446: EQUAL
5447: IFFALSE 5457
// class := 1 ;
5449: LD_ADDR_VAR 0 8
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// end ;
5457: GO 5274
5459: POP
5460: POP
// if not mpTeamPreset then
5461: LD_LOC 1
5465: NOT
5466: IFFALSE 5478
// mpTeamPreset := result ;
5468: LD_ADDR_LOC 1
5472: PUSH
5473: LD_VAR 0 5
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 5
5482: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
// result := [ ] ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: EMPTY
5493: ST_TO_ADDR
// if not vehicles then
5494: LD_VAR 0 3
5498: NOT
5499: IFFALSE 5503
// exit ;
5501: GO 5662
// for i := 1 to vehicles [ nation ] do
5503: LD_ADDR_VAR 0 5
5507: PUSH
5508: DOUBLE
5509: LD_INT 1
5511: DEC
5512: ST_TO_ADDR
5513: LD_VAR 0 3
5517: PUSH
5518: LD_VAR 0 2
5522: ARRAY
5523: PUSH
5524: FOR_TO
5525: IFFALSE 5660
// begin uc_side := side ;
5527: LD_ADDR_OWVAR 20
5531: PUSH
5532: LD_VAR 0 1
5536: ST_TO_ADDR
// uc_nation := nation ;
5537: LD_ADDR_OWVAR 21
5541: PUSH
5542: LD_VAR 0 2
5546: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5547: LD_VAR 0 3
5551: PUSH
5552: LD_VAR 0 2
5556: ARRAY
5557: PUSH
5558: LD_VAR 0 5
5562: ARRAY
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_VAR 0 3
5572: PUSH
5573: LD_VAR 0 2
5577: ARRAY
5578: PUSH
5579: LD_VAR 0 5
5583: ARRAY
5584: PUSH
5585: LD_INT 2
5587: ARRAY
5588: PPUSH
5589: LD_VAR 0 3
5593: PUSH
5594: LD_VAR 0 2
5598: ARRAY
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PUSH
5606: LD_INT 3
5608: ARRAY
5609: PPUSH
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 2
5619: ARRAY
5620: PUSH
5621: LD_VAR 0 5
5625: ARRAY
5626: PUSH
5627: LD_INT 4
5629: ARRAY
5630: PPUSH
5631: LD_INT 80
5633: PPUSH
5634: CALL 13965 0 5
// result := Join ( result , CreateVehicle ) ;
5638: LD_ADDR_VAR 0 4
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 45
5652: PPUSH
5653: CALL 46836 0 2
5657: ST_TO_ADDR
// end ;
5658: GO 5524
5660: POP
5661: POP
// end ;
5662: LD_VAR 0 4
5666: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
// for i in mpBattleFlags do
5671: LD_ADDR_VAR 0 3
5675: PUSH
5676: LD_EXP 23
5680: PUSH
5681: FOR_IN
5682: IFFALSE 5759
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5684: LD_VAR 0 3
5688: PPUSH
5689: LD_INT 1
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_REAL  7.00000000000000E-0001
5712: MUL
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 3
5720: PUSH
5721: LD_VAR 0 1
5725: PUSH
5726: LD_REAL  4.00000000000000E-0001
5729: MUL
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 20
5737: PUSH
5738: LD_VAR 0 1
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 423
5757: GO 5681
5759: POP
5760: POP
// end ;
5761: LD_VAR 0 2
5765: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5766: LD_INT 100
5768: IFFALSE 5863
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
5776: PPUSH
// begin if mpBattleFlag <= 0 then
5777: LD_EXP 22
5781: PUSH
5782: LD_INT 0
5784: LESSEQUAL
5785: IFFALSE 5789
// exit ;
5787: GO 5863
// strength := 100 ;
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 100
5796: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5797: LD_EXP 22
5801: PPUSH
5802: CALL_OW 67
// strength := Dec ( strength ) ;
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 2
5815: PPUSH
5816: CALL 48219 0 1
5820: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5821: LD_VAR 0 2
5825: PPUSH
5826: CALL 5667 0 1
// until not strength ;
5830: LD_VAR 0 2
5834: NOT
5835: IFFALSE 5797
// for i in mpBattleFlags do
5837: LD_ADDR_VAR 0 1
5841: PUSH
5842: LD_EXP 23
5846: PUSH
5847: FOR_IN
5848: IFFALSE 5861
// KillBattleFlag ( i ) ;
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 419
5859: GO 5847
5861: POP
5862: POP
// end ;
5863: PPOPN 2
5865: END
// every 0 0$1 marked mpActive do var side , tmp ;
5866: GO 5868
5868: DISABLE
5869: LD_INT 0
5871: PPUSH
5872: PPUSH
// begin if mpSibBomb <= 1 then
5873: LD_EXP 28
5877: PUSH
5878: LD_INT 1
5880: LESSEQUAL
5881: IFFALSE 5885
// exit ;
5883: GO 5958
// tmp := mpSibBomb ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_EXP 28
5894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_VAR 0 2
5911: PUSH
5912: LD_INT 35
5914: MINUS
5915: ST_TO_ADDR
// until not tmp ;
5916: LD_VAR 0 2
5920: NOT
5921: IFFALSE 5895
// for side := 1 to 8 do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_INT 8
5935: PUSH
5936: FOR_TO
5937: IFFALSE 5956
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5939: LD_INT 25
5941: PPUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 322
5954: GO 5936
5956: POP
5957: POP
// end ;
5958: PPOPN 2
5960: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
// mpBuildUpTimeDelay := 0 ;
5966: LD_ADDR_EXP 41
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// if not mpBuildUpTime then
5974: LD_EXP 20
5978: NOT
5979: IFFALSE 5983
// exit ;
5981: GO 6166
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5983: LD_ADDR_EXP 41
5987: PUSH
5988: LD_INT 8400
5990: PUSH
5991: LD_INT 2100
5993: PUSH
5994: LD_EXP 20
5998: MUL
5999: PLUS
6000: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6001: LD_ADDR_EXP 42
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// for i := 1 to 8 do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: DOUBLE
6015: LD_INT 1
6017: DEC
6018: ST_TO_ADDR
6019: LD_INT 8
6021: PUSH
6022: FOR_TO
6023: IFFALSE 6164
// if mpSidePositions [ i ] then
6025: LD_EXP 7
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: IFFALSE 6162
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6037: LD_EXP 19
6041: PUSH
6042: LD_EXP 7
6046: PUSH
6047: LD_VAR 0 2
6051: ARRAY
6052: ARRAY
6053: PPUSH
6054: LD_INT 5
6056: PPUSH
6057: CALL_OW 424
// for j := 1 to 8 do
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 8
6073: PUSH
6074: FOR_TO
6075: IFFALSE 6160
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6077: LD_EXP 7
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: PUSH
6088: LD_EXP 8
6092: PUSH
6093: LD_VAR 0 2
6097: ARRAY
6098: PUSH
6099: LD_EXP 8
6103: PUSH
6104: LD_VAR 0 3
6108: ARRAY
6109: NONEQUAL
6110: PUSH
6111: LD_EXP 11
6115: NOT
6116: PUSH
6117: LD_VAR 0 2
6121: PUSH
6122: LD_VAR 0 3
6126: NONEQUAL
6127: AND
6128: OR
6129: AND
6130: IFFALSE 6158
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6132: LD_VAR 0 3
6136: PPUSH
6137: LD_EXP 19
6141: PUSH
6142: LD_EXP 7
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: ARRAY
6153: PPUSH
6154: CALL_OW 333
6158: GO 6074
6160: POP
6161: POP
// end ;
6162: GO 6022
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// function EndBuildUp ; var i , j ; begin
6171: LD_INT 0
6173: PPUSH
6174: PPUSH
6175: PPUSH
// mpBuildUpTimeActive := false ;
6176: LD_ADDR_EXP 42
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// for i := 1 to 8 do
6184: LD_ADDR_VAR 0 2
6188: PUSH
6189: DOUBLE
6190: LD_INT 1
6192: DEC
6193: ST_TO_ADDR
6194: LD_INT 8
6196: PUSH
6197: FOR_TO
6198: IFFALSE 6339
// if mpSidePositions [ i ] then
6200: LD_EXP 7
6204: PUSH
6205: LD_VAR 0 2
6209: ARRAY
6210: IFFALSE 6337
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6212: LD_EXP 19
6216: PUSH
6217: LD_EXP 7
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: ARRAY
6228: PPUSH
6229: LD_INT 0
6231: PPUSH
6232: CALL_OW 424
// for j := 1 to 8 do
6236: LD_ADDR_VAR 0 3
6240: PUSH
6241: DOUBLE
6242: LD_INT 1
6244: DEC
6245: ST_TO_ADDR
6246: LD_INT 8
6248: PUSH
6249: FOR_TO
6250: IFFALSE 6335
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6252: LD_EXP 7
6256: PUSH
6257: LD_VAR 0 3
6261: ARRAY
6262: PUSH
6263: LD_EXP 8
6267: PUSH
6268: LD_VAR 0 2
6272: ARRAY
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_VAR 0 3
6283: ARRAY
6284: NONEQUAL
6285: PUSH
6286: LD_EXP 11
6290: NOT
6291: PUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_VAR 0 3
6301: NONEQUAL
6302: AND
6303: OR
6304: AND
6305: IFFALSE 6333
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6307: LD_VAR 0 3
6311: PPUSH
6312: LD_EXP 19
6316: PUSH
6317: LD_EXP 7
6321: PUSH
6322: LD_VAR 0 2
6326: ARRAY
6327: ARRAY
6328: PPUSH
6329: CALL_OW 334
6333: GO 6249
6335: POP
6336: POP
// end ;
6337: GO 6197
6339: POP
6340: POP
// end ;
6341: LD_VAR 0 1
6345: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6346: LD_EXP 42
6350: IFFALSE 6525
6352: GO 6354
6354: DISABLE
6355: LD_INT 0
6357: PPUSH
6358: PPUSH
// begin for i := 1 to 8 do
6359: LD_ADDR_VAR 0 1
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_INT 8
6371: PUSH
6372: FOR_TO
6373: IFFALSE 6522
// if mpSidePositions [ i ] then
6375: LD_EXP 7
6379: PUSH
6380: LD_VAR 0 1
6384: ARRAY
6385: IFFALSE 6520
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_EXP 19
6396: PUSH
6397: LD_EXP 7
6401: PUSH
6402: LD_VAR 0 1
6406: ARRAY
6407: ARRAY
6408: PPUSH
6409: LD_INT 2
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 1
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 21
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_OWVAR 2
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 70
6457: PUSH
6458: FOR_IN
6459: IFFALSE 6518
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6461: LD_EXP 8
6465: PUSH
6466: LD_VAR 0 1
6470: ARRAY
6471: PUSH
6472: LD_EXP 8
6476: PUSH
6477: LD_OWVAR 2
6481: ARRAY
6482: NONEQUAL
6483: PUSH
6484: LD_EXP 11
6488: NOT
6489: PUSH
6490: LD_VAR 0 1
6494: PUSH
6495: LD_OWVAR 2
6499: NONEQUAL
6500: AND
6501: OR
6502: IFFALSE 6516
// ComMoveToArea ( un , BuildUpEscape ) ;
6504: LD_VAR 0 2
6508: PPUSH
6509: LD_INT 16
6511: PPUSH
6512: CALL_OW 113
6516: GO 6458
6518: POP
6519: POP
6520: GO 6372
6522: POP
6523: POP
// enable ;
6524: ENABLE
// end ;
6525: PPOPN 2
6527: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6528: LD_EXP 20
6532: IFFALSE 6582
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
// begin tmp := mpBuildUpTime ;
6540: LD_ADDR_VAR 0 1
6544: PUSH
6545: LD_EXP 20
6549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: LD_VAR 0 1
6566: PUSH
6567: LD_INT 35
6569: MINUS
6570: ST_TO_ADDR
// until not tmp ;
6571: LD_VAR 0 1
6575: NOT
6576: IFFALSE 6550
// EndBuildUp ;
6578: CALL 6171 0 0
// end ;
6582: PPOPN 1
6584: END
// every 0 0$1 trigger mpActive marked mpWin do
6585: LD_INT 100
6587: IFFALSE 6621
6589: GO 6591
6591: DISABLE
// begin if IAmServer then
6592: CALL_OW 518
6596: IFFALSE 6605
// wait ( 0 0$3 ) ;
6598: LD_INT 105
6600: PPUSH
6601: CALL_OW 67
// if Multiplayer then
6605: LD_OWVAR 4
6609: IFFALSE 6617
// YouWinInMultiplayer else
6611: CALL_OW 106
6615: GO 6621
// YouWin ;
6617: CALL_OW 103
// end ;
6621: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6622: LD_INT 0
6624: PPUSH
// result := false ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_INT 0
6632: ST_TO_ADDR
// case gameType of GameTypeNormal :
6633: LD_VAR 0 1
6637: PUSH
6638: LD_INT 1
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6719
6646: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_VAR 0 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: LD_INT 21
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 33
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 33
6689: PUSH
6690: LD_INT 5
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: PPUSH
6712: CALL 11227 0 1
6716: ST_TO_ADDR
// end ; GameTypeSurvival :
6717: GO 6954
6719: LD_INT 2
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6855
6727: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_VAR 0 2
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 2
6747: PUSH
6748: LD_INT 30
6750: PUSH
6751: LD_INT 0
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PPUSH
6777: CALL_OW 69
6781: PPUSH
6782: CALL 11227 0 1
6786: PUSH
6787: LD_INT 22
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: LD_INT 21
6804: PUSH
6805: LD_INT 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 33
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 33
6824: PUSH
6825: LD_INT 5
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PPUSH
6842: CALL_OW 69
6846: PPUSH
6847: CALL 11227 0 1
6851: AND
6852: ST_TO_ADDR
// end ; GameTypeKing :
6853: GO 6954
6855: LD_INT 3
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6953
6863: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: LD_INT 22
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 33
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 33
6906: PUSH
6907: LD_INT 5
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: CALL 11227 0 1
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: CALL 58386 0 1
6943: PUSH
6944: LD_EXP 34
6948: LESS
6949: AND
6950: ST_TO_ADDR
// end ; end ;
6951: GO 6954
6953: POP
// end ;
6954: LD_VAR 0 3
6958: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6959: LD_INT 100
6961: IFFALSE 7183
6963: GO 6965
6965: DISABLE
6966: LD_INT 0
6968: PPUSH
6969: PPUSH
// begin if Multiplayer then
6970: LD_OWVAR 4
6974: IFFALSE 6982
// SetPlayerSpectator ( ) else
6976: CALL_OW 572
6980: GO 6991
// FogOff ( your_side ) ;
6982: LD_OWVAR 2
6986: PPUSH
6987: CALL_OW 344
// repeat gameIsOn := false ;
6991: LD_ADDR_VAR 0 1
6995: PUSH
6996: LD_INT 0
6998: ST_TO_ADDR
// for i := 1 to 8 do
6999: LD_ADDR_VAR 0 2
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_INT 8
7011: PUSH
7012: FOR_TO
7013: IFFALSE 7135
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7015: LD_EXP 7
7019: PUSH
7020: LD_VAR 0 2
7024: ARRAY
7025: PUSH
7026: LD_VAR 0 2
7030: PPUSH
7031: CALL_OW 108
7035: AND
7036: PUSH
7037: LD_VAR 0 2
7041: PUSH
7042: LD_OWVAR 2
7046: NONEQUAL
7047: AND
7048: IFFALSE 7133
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7050: LD_EXP 8
7054: PUSH
7055: LD_VAR 0 2
7059: ARRAY
7060: NOT
7061: PUSH
7062: LD_EXP 8
7066: PUSH
7067: LD_VAR 0 2
7071: ARRAY
7072: PUSH
7073: LD_EXP 8
7077: PUSH
7078: LD_OWVAR 2
7082: ARRAY
7083: NONEQUAL
7084: PUSH
7085: LD_OWVAR 2
7089: PPUSH
7090: LD_VAR 0 2
7094: PPUSH
7095: CALL_OW 81
7099: PUSH
7100: LD_INT 1
7102: NONEQUAL
7103: AND
7104: OR
7105: IFFALSE 7133
// if HasPowerByGameType ( mpGameType , i ) then
7107: LD_EXP 3
7111: PPUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL 6622 0 2
7121: IFFALSE 7133
// begin gameIsOn := true ;
7123: LD_ADDR_VAR 0 1
7127: PUSH
7128: LD_INT 1
7130: ST_TO_ADDR
// break ;
7131: GO 7135
// end ;
7133: GO 7012
7135: POP
7136: POP
// wait ( 100 ) ;
7137: LD_INT 100
7139: PPUSH
7140: CALL_OW 67
// until not gameIsOn ;
7144: LD_VAR 0 1
7148: NOT
7149: IFFALSE 6991
// if IAmServer then
7151: CALL_OW 518
7155: IFFALSE 7164
// wait ( 0 0$3 ) ;
7157: LD_INT 105
7159: PPUSH
7160: CALL_OW 67
// if Multiplayer then
7164: LD_OWVAR 4
7168: IFFALSE 7176
// YouLostInMultiplayer else
7170: CALL_OW 107
7174: GO 7183
// YouLost (  ) ;
7176: LD_STRING 
7178: PPUSH
7179: CALL_OW 104
// end ;
7183: PPOPN 2
7185: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7186: LD_EXP 32
7190: IFFALSE 7537
7192: GO 7194
7194: DISABLE
7195: LD_INT 0
7197: PPUSH
7198: PPUSH
7199: PPUSH
7200: PPUSH
7201: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7202: LD_ADDR_VAR 0 5
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 4
7218: PUSH
7219: LD_INT 5
7221: PUSH
7222: LD_INT 6
7224: PUSH
7225: LD_INT 7
7227: PUSH
7228: LD_INT 8
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7241: LD_INT 350
7243: PPUSH
7244: CALL_OW 67
// for i := 1 to 8 do
7248: LD_ADDR_VAR 0 1
7252: PUSH
7253: DOUBLE
7254: LD_INT 1
7256: DEC
7257: ST_TO_ADDR
7258: LD_INT 8
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7507
// begin j := sides [ i ] ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_VAR 0 1
7278: ARRAY
7279: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7280: LD_EXP 39
7284: PUSH
7285: LD_VAR 0 2
7289: ARRAY
7290: PPUSH
7291: CALL 11227 0 1
7295: PUSH
7296: LD_VAR 0 2
7300: PPUSH
7301: CALL_OW 108
7305: AND
7306: PUSH
7307: LD_EXP 3
7311: PPUSH
7312: LD_VAR 0 2
7316: PPUSH
7317: CALL 6622 0 2
7321: AND
7322: IFFALSE 7505
// begin wait ( mpRespawn div 3 ) ;
7324: LD_EXP 32
7328: PUSH
7329: LD_INT 3
7331: DIV
7332: PPUSH
7333: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 50
7356: PUSH
7357: EMPTY
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 30
7365: PUSH
7366: LD_INT 0
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 30
7375: PUSH
7376: LD_INT 1
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: ST_TO_ADDR
// if not tmp then
7398: LD_VAR 0 3
7402: NOT
7403: IFFALSE 7407
// continue ;
7405: GO 7261
// spawn := tmp [ 1 ] ;
7407: LD_ADDR_VAR 0 4
7411: PUSH
7412: LD_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: ARRAY
7420: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7421: LD_EXP 39
7425: PUSH
7426: LD_VAR 0 2
7430: ARRAY
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: PPUSH
7436: LD_VAR 0 4
7440: PPUSH
7441: CALL_OW 250
7445: PPUSH
7446: LD_VAR 0 4
7450: PPUSH
7451: CALL_OW 251
7455: PPUSH
7456: LD_INT 32
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7466: LD_ADDR_EXP 39
7470: PUSH
7471: LD_EXP 39
7475: PPUSH
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_EXP 39
7485: PUSH
7486: LD_VAR 0 2
7490: ARRAY
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 3
7499: PPUSH
7500: CALL_OW 1
7504: ST_TO_ADDR
// end ; end ;
7505: GO 7261
7507: POP
7508: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7509: LD_ADDR_VAR 0 5
7513: PUSH
7514: LD_VAR 0 5
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: LD_INT 8
7524: PPUSH
7525: LD_INT 1
7527: PPUSH
7528: CALL 13505 0 4
7532: ST_TO_ADDR
// until false ;
7533: LD_INT 0
7535: IFFALSE 7241
// end ;
7537: PPOPN 5
7539: END
// every 0 0$1 marked mpActive do
7540: GO 7542
7542: DISABLE
// begin enable ;
7543: ENABLE
// if not mpDisplayStrings then
7544: LD_EXP 37
7548: NOT
7549: IFFALSE 7560
// begin display_strings := [ ] ;
7551: LD_ADDR_OWVAR 47
7555: PUSH
7556: EMPTY
7557: ST_TO_ADDR
// exit ;
7558: GO 7570
// end ; display_strings := mpDisplayStrings ;
7560: LD_ADDR_OWVAR 47
7564: PUSH
7565: LD_EXP 37
7569: ST_TO_ADDR
// end ; end_of_file
7570: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7571: LD_INT 0
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
// if GetType ( un ) = unit_vehicle then
7582: LD_VAR 0 1
7586: PPUSH
7587: CALL_OW 247
7591: PUSH
7592: LD_INT 2
7594: EQUAL
7595: IFFALSE 7599
// exit ;
7597: GO 8169
// side := GetSide ( un ) ;
7599: LD_ADDR_VAR 0 9
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 255
7613: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7614: LD_EXP 3
7618: PUSH
7619: LD_INT 2
7621: EQUAL
7622: IFFALSE 7715
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 266
7633: PUSH
7634: LD_INT 0
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: IN
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 110
7654: PUSH
7655: LD_VAR 0 9
7659: EQUAL
7660: AND
7661: IFFALSE 7715
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7663: LD_ADDR_VAR 0 3
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_VAR 0 9
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 21
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 69
7698: PUSH
7699: FOR_IN
7700: IFFALSE 7713
// KillUnit ( i ) ;
7702: LD_VAR 0 3
7706: PPUSH
7707: CALL_OW 66
7711: GO 7699
7713: POP
7714: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 257
7724: PUSH
7725: LD_INT 12
7727: PUSH
7728: LD_INT 17
7730: PUSH
7731: LD_INT 15
7733: PUSH
7734: LD_INT 16
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: IN
7743: PUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 263
7753: PUSH
7754: LD_INT 5
7756: EQUAL
7757: OR
7758: IFFALSE 7898
// begin tag := GetTag ( un ) ;
7760: LD_ADDR_VAR 0 5
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 110
7774: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7775: LD_ADDR_VAR 0 7
7779: PUSH
7780: LD_EXP 31
7784: PUSH
7785: LD_EXP 7
7789: PUSH
7790: LD_VAR 0 5
7794: ARRAY
7795: ARRAY
7796: ST_TO_ADDR
// if not area then
7797: LD_VAR 0 7
7801: NOT
7802: IFFALSE 7806
// exit ;
7804: GO 8169
// wait ( 4 4$00 ) ;
7806: LD_INT 8400
7808: PPUSH
7809: CALL_OW 67
// repeat wait ( 10 ) ;
7813: LD_INT 10
7815: PPUSH
7816: CALL_OW 67
// until not mpBlockRespThread ;
7820: LD_EXP 40
7824: NOT
7825: IFFALSE 7813
// mpBlockRespThread := true ;
7827: LD_ADDR_EXP 40
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7835: LD_INT 0
7837: PPUSH
7838: CALL 43084 0 1
// ape := CreateHuman ;
7842: LD_ADDR_VAR 0 4
7846: PUSH
7847: CALL_OW 44
7851: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7852: LD_VAR 0 4
7856: PPUSH
7857: LD_VAR 0 5
7861: PPUSH
7862: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7866: LD_VAR 0 4
7870: PPUSH
7871: LD_VAR 0 7
7875: PPUSH
7876: LD_INT 0
7878: PPUSH
7879: CALL_OW 49
// wait ( 10 ) ;
7883: LD_INT 10
7885: PPUSH
7886: CALL_OW 67
// mpBlockRespThread := false ;
7890: LD_ADDR_EXP 40
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 247
7907: PUSH
7908: LD_INT 1
7910: EQUAL
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 248
7921: PUSH
7922: LD_INT 0
7924: GREATER
7925: AND
7926: IFFALSE 8169
// begin if not mpRespawn then
7928: LD_EXP 32
7932: NOT
7933: IFFALSE 7937
// exit ;
7935: GO 8169
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7937: LD_VAR 0 9
7941: PPUSH
7942: CALL_OW 108
7946: NOT
7947: PUSH
7948: LD_EXP 3
7952: PPUSH
7953: LD_VAR 0 9
7957: PPUSH
7958: CALL 6622 0 2
7962: NOT
7963: AND
7964: IFFALSE 7968
// exit ;
7966: GO 8169
// side := GetSide ( un ) ;
7968: LD_ADDR_VAR 0 9
7972: PUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 255
7982: ST_TO_ADDR
// nation := GetNation ( un ) ;
7983: LD_ADDR_VAR 0 8
7987: PUSH
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL_OW 248
7997: ST_TO_ADDR
// class := GetClass ( un ) ;
7998: LD_ADDR_VAR 0 6
8002: PUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 257
8012: ST_TO_ADDR
// if class > 4 then
8013: LD_VAR 0 6
8017: PUSH
8018: LD_INT 4
8020: GREATER
8021: IFFALSE 8031
// class := 1 ;
8023: LD_ADDR_VAR 0 6
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// repeat wait ( 10 ) ;
8031: LD_INT 10
8033: PPUSH
8034: CALL_OW 67
// until not mpBlockRespThread ;
8038: LD_EXP 40
8042: NOT
8043: IFFALSE 8031
// mpBlockRespThread := true ;
8045: LD_ADDR_EXP 40
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// uc_side := side ;
8053: LD_ADDR_OWVAR 20
8057: PUSH
8058: LD_VAR 0 9
8062: ST_TO_ADDR
// uc_nation := nation ;
8063: LD_ADDR_OWVAR 21
8067: PUSH
8068: LD_VAR 0 8
8072: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8073: LD_INT 0
8075: PPUSH
8076: LD_VAR 0 6
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8098: LD_ADDR_EXP 39
8102: PUSH
8103: LD_EXP 39
8107: PPUSH
8108: LD_VAR 0 9
8112: PPUSH
8113: LD_EXP 39
8117: PUSH
8118: LD_VAR 0 9
8122: ARRAY
8123: PPUSH
8124: LD_EXP 39
8128: PUSH
8129: LD_VAR 0 9
8133: ARRAY
8134: PUSH
8135: LD_INT 1
8137: PLUS
8138: PPUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 1
8148: PPUSH
8149: CALL_OW 1
8153: ST_TO_ADDR
// wait ( 10 ) ;
8154: LD_INT 10
8156: PPUSH
8157: CALL_OW 67
// mpBlockRespThread := false ;
8161: LD_ADDR_EXP 40
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// end ; end ;
8169: LD_VAR 0 2
8173: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8174: LD_INT 0
8176: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 266
8186: PUSH
8187: LD_INT 0
8189: PUSH
8190: LD_INT 1
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: IN
8197: IFFALSE 8222
// SetBName ( building , @ & GetSide ( building ) ) ;
8199: LD_VAR 0 1
8203: PPUSH
8204: LD_STRING @
8206: PUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL_OW 255
8216: STR
8217: PPUSH
8218: CALL_OW 500
// end ;
8222: LD_VAR 0 2
8226: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8227: LD_INT 0
8229: PPUSH
8230: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8231: LD_EXP 3
8235: PUSH
8236: LD_INT 2
8238: EQUAL
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: PUSH
8250: LD_INT 0
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: IN
8260: AND
8261: IFFALSE 8326
// begin KillUnit ( building ) ;
8263: LD_VAR 0 1
8267: PPUSH
8268: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: LD_INT 22
8279: PUSH
8280: LD_VAR 0 2
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 21
8291: PUSH
8292: LD_INT 1
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 69
8307: PUSH
8308: FOR_IN
8309: IFFALSE 8322
// KillUnit ( i ) ;
8311: LD_VAR 0 5
8315: PPUSH
8316: CALL_OW 66
8320: GO 8308
8322: POP
8323: POP
// exit ;
8324: GO 8371
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 266
8335: PUSH
8336: LD_INT 0
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8371
// SetBName ( building , @ & GetSide ( building ) ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_STRING @
8355: PUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 255
8365: STR
8366: PPUSH
8367: CALL_OW 500
// end ; end_of_file
8371: LD_VAR 0 4
8375: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8376: LD_EXP 38
8380: PUSH
8381: CALL 8586 0 0
8385: AND
8386: PUSH
8387: LD_OWVAR 4
8391: AND
8392: IFFALSE 8583
8394: GO 8396
8396: DISABLE
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// begin canWin := false ;
8401: LD_ADDR_VAR 0 2
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not HasPower ( your_side ) then
8409: LD_OWVAR 2
8413: PPUSH
8414: CALL 8626 0 1
8418: NOT
8419: IFFALSE 8430
// begin Multiplayer_Loose_Message ;
8421: CALL_OW 521
// enable ( mpLose ) ;
8425: LD_INT 102
8427: ENABLE_MARKED
// end else
8428: GO 8583
// begin canWin := true ;
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// for i := 1 to 8 do
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: DOUBLE
8444: LD_INT 1
8446: DEC
8447: ST_TO_ADDR
8448: LD_INT 8
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8569
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8454: LD_EXP 7
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 108
8474: AND
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: LD_OWVAR 2
8485: NONEQUAL
8486: AND
8487: IFFALSE 8567
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8489: LD_EXP 8
8493: PUSH
8494: LD_VAR 0 1
8498: ARRAY
8499: NOT
8500: PUSH
8501: LD_EXP 8
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PUSH
8512: LD_EXP 8
8516: PUSH
8517: LD_OWVAR 2
8521: ARRAY
8522: NONEQUAL
8523: PUSH
8524: LD_OWVAR 2
8528: PPUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 81
8538: PUSH
8539: LD_INT 1
8541: NONEQUAL
8542: AND
8543: OR
8544: IFFALSE 8567
// if HasPower ( i ) then
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL 8626 0 1
8555: IFFALSE 8567
// begin canWin := false ;
8557: LD_ADDR_VAR 0 2
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// break ;
8565: GO 8569
// end ;
8567: GO 8451
8569: POP
8570: POP
// if canWin then
8571: LD_VAR 0 2
8575: IFFALSE 8582
// enable ( mpWin ) else
8577: LD_INT 101
8579: ENABLE_MARKED
8580: GO 8583
// enable ;
8582: ENABLE
// end ; end ;
8583: PPOPN 2
8585: END
// function CanWinLoose ; begin
8586: LD_INT 0
8588: PPUSH
// result := true ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8597: CALL_OW 531
8601: PUSH
8602: CALL_OW 519
8606: PUSH
8607: LD_INT 1
8609: GREATER
8610: AND
8611: IFFALSE 8621
// result := false ;
8613: LD_ADDR_VAR 0 1
8617: PUSH
8618: LD_INT 0
8620: ST_TO_ADDR
// end ;
8621: LD_VAR 0 1
8625: RET
// function HasPower ( i ) ; begin
8626: LD_INT 0
8628: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8629: LD_ADDR_VAR 0 2
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_VAR 0 1
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 33
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 33
8671: PUSH
8672: LD_INT 5
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 69
8693: ST_TO_ADDR
// end ; end_of_file
8694: LD_VAR 0 2
8698: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8699: LD_EXP 38
8703: IFFALSE 8746
8705: GO 8707
8707: DISABLE
8708: LD_INT 0
8710: PPUSH
// begin for i := 1 to 8 do
8711: LD_ADDR_VAR 0 1
8715: PUSH
8716: DOUBLE
8717: LD_INT 1
8719: DEC
8720: ST_TO_ADDR
8721: LD_INT 8
8723: PUSH
8724: FOR_TO
8725: IFFALSE 8744
// SetRestrict ( b_depot , i , state_disabled ) ;
8727: LD_INT 0
8729: PPUSH
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_INT 0
8737: PPUSH
8738: CALL_OW 324
8742: GO 8724
8744: POP
8745: POP
// end ;
8746: PPOPN 1
8748: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8749: LD_EXP 38
8753: PUSH
8754: CALL 8959 0 0
8758: AND
8759: PUSH
8760: LD_OWVAR 4
8764: AND
8765: IFFALSE 8956
8767: GO 8769
8769: DISABLE
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
// begin canWin := false ;
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// if not HasPower ( your_side ) then
8782: LD_OWVAR 2
8786: PPUSH
8787: CALL 8999 0 1
8791: NOT
8792: IFFALSE 8803
// begin Multiplayer_Loose_Message ;
8794: CALL_OW 521
// enable ( mpLose ) ;
8798: LD_INT 102
8800: ENABLE_MARKED
// end else
8801: GO 8956
// begin canWin := true ;
8803: LD_ADDR_VAR 0 2
8807: PUSH
8808: LD_INT 1
8810: ST_TO_ADDR
// for i := 1 to 8 do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: DOUBLE
8817: LD_INT 1
8819: DEC
8820: ST_TO_ADDR
8821: LD_INT 8
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8942
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8827: LD_EXP 7
8831: PUSH
8832: LD_VAR 0 1
8836: ARRAY
8837: PUSH
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 108
8847: AND
8848: PUSH
8849: LD_VAR 0 1
8853: PUSH
8854: LD_OWVAR 2
8858: NONEQUAL
8859: AND
8860: IFFALSE 8940
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8862: LD_EXP 8
8866: PUSH
8867: LD_VAR 0 1
8871: ARRAY
8872: NOT
8873: PUSH
8874: LD_EXP 8
8878: PUSH
8879: LD_VAR 0 1
8883: ARRAY
8884: PUSH
8885: LD_EXP 8
8889: PUSH
8890: LD_OWVAR 2
8894: ARRAY
8895: NONEQUAL
8896: PUSH
8897: LD_OWVAR 2
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 81
8911: PUSH
8912: LD_INT 1
8914: NONEQUAL
8915: AND
8916: OR
8917: IFFALSE 8940
// if HasPower ( i ) then
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL 8999 0 1
8928: IFFALSE 8940
// begin canWin := false ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// break ;
8938: GO 8942
// end ;
8940: GO 8824
8942: POP
8943: POP
// if canWin then
8944: LD_VAR 0 2
8948: IFFALSE 8955
// enable ( mpWin ) else
8950: LD_INT 101
8952: ENABLE_MARKED
8953: GO 8956
// enable ;
8955: ENABLE
// end ; end ;
8956: PPOPN 2
8958: END
// function CanWinLoose ; begin
8959: LD_INT 0
8961: PPUSH
// result := true ;
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: LD_INT 1
8969: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8970: CALL_OW 531
8974: PUSH
8975: CALL_OW 519
8979: PUSH
8980: LD_INT 1
8982: GREATER
8983: AND
8984: IFFALSE 8994
// result := false ;
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// end ;
8994: LD_VAR 0 1
8998: RET
// function HasPower ( i ) ; begin
8999: LD_INT 0
9001: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9002: LD_INT 22
9004: PUSH
9005: LD_VAR 0 1
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: LD_INT 30
9019: PUSH
9020: LD_INT 0
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 30
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: NOT
9051: IFFALSE 9055
// exit ;
9053: GO 9120
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 2
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 33
9087: PUSH
9088: LD_INT 3
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 33
9097: PUSH
9098: LD_INT 5
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: ST_TO_ADDR
// end ; end_of_file
9120: LD_VAR 0 2
9124: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
// if exist_mode then
9129: LD_VAR 0 2
9133: IFFALSE 9158
// unit := CreateCharacter ( prefix & ident ) else
9135: LD_ADDR_VAR 0 5
9139: PUSH
9140: LD_VAR 0 3
9144: PUSH
9145: LD_VAR 0 1
9149: STR
9150: PPUSH
9151: CALL_OW 34
9155: ST_TO_ADDR
9156: GO 9173
// unit := NewCharacter ( ident ) ;
9158: LD_ADDR_VAR 0 5
9162: PUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 25
9172: ST_TO_ADDR
// result := unit ;
9173: LD_ADDR_VAR 0 4
9177: PUSH
9178: LD_VAR 0 5
9182: ST_TO_ADDR
// end ;
9183: LD_VAR 0 4
9187: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9188: LD_INT 0
9190: PPUSH
9191: PPUSH
// if not side or not nation then
9192: LD_VAR 0 1
9196: NOT
9197: PUSH
9198: LD_VAR 0 2
9202: NOT
9203: OR
9204: IFFALSE 9208
// exit ;
9206: GO 9976
// case nation of nation_american :
9208: LD_VAR 0 2
9212: PUSH
9213: LD_INT 1
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9435
9221: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9222: LD_ADDR_VAR 0 4
9226: PUSH
9227: LD_INT 35
9229: PUSH
9230: LD_INT 45
9232: PUSH
9233: LD_INT 46
9235: PUSH
9236: LD_INT 47
9238: PUSH
9239: LD_INT 82
9241: PUSH
9242: LD_INT 83
9244: PUSH
9245: LD_INT 84
9247: PUSH
9248: LD_INT 85
9250: PUSH
9251: LD_INT 86
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: LD_INT 6
9262: PUSH
9263: LD_INT 15
9265: PUSH
9266: LD_INT 16
9268: PUSH
9269: LD_INT 7
9271: PUSH
9272: LD_INT 12
9274: PUSH
9275: LD_INT 13
9277: PUSH
9278: LD_INT 10
9280: PUSH
9281: LD_INT 14
9283: PUSH
9284: LD_INT 20
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 22
9292: PUSH
9293: LD_INT 25
9295: PUSH
9296: LD_INT 32
9298: PUSH
9299: LD_INT 27
9301: PUSH
9302: LD_INT 36
9304: PUSH
9305: LD_INT 69
9307: PUSH
9308: LD_INT 39
9310: PUSH
9311: LD_INT 34
9313: PUSH
9314: LD_INT 40
9316: PUSH
9317: LD_INT 48
9319: PUSH
9320: LD_INT 49
9322: PUSH
9323: LD_INT 50
9325: PUSH
9326: LD_INT 51
9328: PUSH
9329: LD_INT 52
9331: PUSH
9332: LD_INT 53
9334: PUSH
9335: LD_INT 54
9337: PUSH
9338: LD_INT 55
9340: PUSH
9341: LD_INT 56
9343: PUSH
9344: LD_INT 57
9346: PUSH
9347: LD_INT 58
9349: PUSH
9350: LD_INT 59
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: LD_INT 61
9358: PUSH
9359: LD_INT 62
9361: PUSH
9362: LD_INT 80
9364: PUSH
9365: LD_INT 82
9367: PUSH
9368: LD_INT 83
9370: PUSH
9371: LD_INT 84
9373: PUSH
9374: LD_INT 85
9376: PUSH
9377: LD_INT 86
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: ST_TO_ADDR
9433: GO 9900
9435: LD_INT 2
9437: DOUBLE
9438: EQUAL
9439: IFTRUE 9443
9441: GO 9669
9443: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9444: LD_ADDR_VAR 0 4
9448: PUSH
9449: LD_INT 35
9451: PUSH
9452: LD_INT 45
9454: PUSH
9455: LD_INT 46
9457: PUSH
9458: LD_INT 47
9460: PUSH
9461: LD_INT 82
9463: PUSH
9464: LD_INT 83
9466: PUSH
9467: LD_INT 84
9469: PUSH
9470: LD_INT 85
9472: PUSH
9473: LD_INT 87
9475: PUSH
9476: LD_INT 70
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: LD_INT 11
9484: PUSH
9485: LD_INT 3
9487: PUSH
9488: LD_INT 4
9490: PUSH
9491: LD_INT 5
9493: PUSH
9494: LD_INT 6
9496: PUSH
9497: LD_INT 15
9499: PUSH
9500: LD_INT 18
9502: PUSH
9503: LD_INT 7
9505: PUSH
9506: LD_INT 17
9508: PUSH
9509: LD_INT 8
9511: PUSH
9512: LD_INT 20
9514: PUSH
9515: LD_INT 21
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 72
9523: PUSH
9524: LD_INT 26
9526: PUSH
9527: LD_INT 69
9529: PUSH
9530: LD_INT 39
9532: PUSH
9533: LD_INT 40
9535: PUSH
9536: LD_INT 41
9538: PUSH
9539: LD_INT 42
9541: PUSH
9542: LD_INT 43
9544: PUSH
9545: LD_INT 48
9547: PUSH
9548: LD_INT 49
9550: PUSH
9551: LD_INT 50
9553: PUSH
9554: LD_INT 51
9556: PUSH
9557: LD_INT 52
9559: PUSH
9560: LD_INT 53
9562: PUSH
9563: LD_INT 54
9565: PUSH
9566: LD_INT 55
9568: PUSH
9569: LD_INT 56
9571: PUSH
9572: LD_INT 60
9574: PUSH
9575: LD_INT 61
9577: PUSH
9578: LD_INT 62
9580: PUSH
9581: LD_INT 66
9583: PUSH
9584: LD_INT 67
9586: PUSH
9587: LD_INT 68
9589: PUSH
9590: LD_INT 81
9592: PUSH
9593: LD_INT 82
9595: PUSH
9596: LD_INT 83
9598: PUSH
9599: LD_INT 84
9601: PUSH
9602: LD_INT 85
9604: PUSH
9605: LD_INT 87
9607: PUSH
9608: LD_INT 88
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
9667: GO 9900
9669: LD_INT 3
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9899
9677: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: LD_INT 46
9685: PUSH
9686: LD_INT 47
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: LD_INT 82
9697: PUSH
9698: LD_INT 83
9700: PUSH
9701: LD_INT 84
9703: PUSH
9704: LD_INT 85
9706: PUSH
9707: LD_INT 86
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 9
9715: PUSH
9716: LD_INT 20
9718: PUSH
9719: LD_INT 19
9721: PUSH
9722: LD_INT 21
9724: PUSH
9725: LD_INT 24
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 28
9736: PUSH
9737: LD_INT 29
9739: PUSH
9740: LD_INT 30
9742: PUSH
9743: LD_INT 31
9745: PUSH
9746: LD_INT 37
9748: PUSH
9749: LD_INT 38
9751: PUSH
9752: LD_INT 32
9754: PUSH
9755: LD_INT 27
9757: PUSH
9758: LD_INT 33
9760: PUSH
9761: LD_INT 69
9763: PUSH
9764: LD_INT 39
9766: PUSH
9767: LD_INT 34
9769: PUSH
9770: LD_INT 40
9772: PUSH
9773: LD_INT 71
9775: PUSH
9776: LD_INT 23
9778: PUSH
9779: LD_INT 44
9781: PUSH
9782: LD_INT 48
9784: PUSH
9785: LD_INT 49
9787: PUSH
9788: LD_INT 50
9790: PUSH
9791: LD_INT 51
9793: PUSH
9794: LD_INT 52
9796: PUSH
9797: LD_INT 53
9799: PUSH
9800: LD_INT 54
9802: PUSH
9803: LD_INT 55
9805: PUSH
9806: LD_INT 56
9808: PUSH
9809: LD_INT 57
9811: PUSH
9812: LD_INT 58
9814: PUSH
9815: LD_INT 59
9817: PUSH
9818: LD_INT 63
9820: PUSH
9821: LD_INT 64
9823: PUSH
9824: LD_INT 65
9826: PUSH
9827: LD_INT 82
9829: PUSH
9830: LD_INT 83
9832: PUSH
9833: LD_INT 84
9835: PUSH
9836: LD_INT 85
9838: PUSH
9839: LD_INT 86
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: ST_TO_ADDR
9897: GO 9900
9899: POP
// if state > - 1 and state < 3 then
9900: LD_VAR 0 3
9904: PUSH
9905: LD_INT 1
9907: NEG
9908: GREATER
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_INT 3
9917: LESS
9918: AND
9919: IFFALSE 9976
// for i in result do
9921: LD_ADDR_VAR 0 5
9925: PUSH
9926: LD_VAR 0 4
9930: PUSH
9931: FOR_IN
9932: IFFALSE 9974
// if GetTech ( i , side ) <> state then
9934: LD_VAR 0 5
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL_OW 321
9948: PUSH
9949: LD_VAR 0 3
9953: NONEQUAL
9954: IFFALSE 9972
// result := result diff i ;
9956: LD_ADDR_VAR 0 4
9960: PUSH
9961: LD_VAR 0 4
9965: PUSH
9966: LD_VAR 0 5
9970: DIFF
9971: ST_TO_ADDR
9972: GO 9931
9974: POP
9975: POP
// end ;
9976: LD_VAR 0 4
9980: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9981: LD_INT 0
9983: PPUSH
9984: PPUSH
9985: PPUSH
// result := true ;
9986: LD_ADDR_VAR 0 3
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9994: LD_ADDR_VAR 0 5
9998: PUSH
9999: LD_VAR 0 2
10003: PPUSH
10004: CALL_OW 480
10008: ST_TO_ADDR
// if not tmp then
10009: LD_VAR 0 5
10013: NOT
10014: IFFALSE 10018
// exit ;
10016: GO 10067
// for i in tmp do
10018: LD_ADDR_VAR 0 4
10022: PUSH
10023: LD_VAR 0 5
10027: PUSH
10028: FOR_IN
10029: IFFALSE 10065
// if GetTech ( i , side ) <> state_researched then
10031: LD_VAR 0 4
10035: PPUSH
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 321
10045: PUSH
10046: LD_INT 2
10048: NONEQUAL
10049: IFFALSE 10063
// begin result := false ;
10051: LD_ADDR_VAR 0 3
10055: PUSH
10056: LD_INT 0
10058: ST_TO_ADDR
// exit ;
10059: POP
10060: POP
10061: GO 10067
// end ;
10063: GO 10028
10065: POP
10066: POP
// end ;
10067: LD_VAR 0 3
10071: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10072: LD_INT 0
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
10081: PPUSH
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
10086: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10087: LD_VAR 0 1
10091: NOT
10092: PUSH
10093: LD_VAR 0 1
10097: PPUSH
10098: CALL_OW 257
10102: PUSH
10103: LD_INT 9
10105: NONEQUAL
10106: OR
10107: IFFALSE 10111
// exit ;
10109: GO 10684
// side := GetSide ( unit ) ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_VAR 0 1
10120: PPUSH
10121: CALL_OW 255
10125: ST_TO_ADDR
// tech_space := tech_spacanom ;
10126: LD_ADDR_VAR 0 12
10130: PUSH
10131: LD_INT 29
10133: ST_TO_ADDR
// tech_time := tech_taurad ;
10134: LD_ADDR_VAR 0 13
10138: PUSH
10139: LD_INT 28
10141: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10142: LD_ADDR_VAR 0 11
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 310
10156: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10157: LD_VAR 0 11
10161: PPUSH
10162: CALL_OW 247
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: IFFALSE 10174
// exit ;
10172: GO 10684
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10174: LD_ADDR_VAR 0 8
10178: PUSH
10179: LD_INT 81
10181: PUSH
10182: LD_VAR 0 9
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 3
10193: PUSH
10194: LD_INT 21
10196: PUSH
10197: LD_INT 3
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PPUSH
10212: CALL_OW 69
10216: ST_TO_ADDR
// if not tmp then
10217: LD_VAR 0 8
10221: NOT
10222: IFFALSE 10226
// exit ;
10224: GO 10684
// if in_unit then
10226: LD_VAR 0 11
10230: IFFALSE 10254
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10232: LD_ADDR_VAR 0 10
10236: PUSH
10237: LD_VAR 0 8
10241: PPUSH
10242: LD_VAR 0 11
10246: PPUSH
10247: CALL_OW 74
10251: ST_TO_ADDR
10252: GO 10274
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10254: LD_ADDR_VAR 0 10
10258: PUSH
10259: LD_VAR 0 8
10263: PPUSH
10264: LD_VAR 0 1
10268: PPUSH
10269: CALL_OW 74
10273: ST_TO_ADDR
// if not enemy then
10274: LD_VAR 0 10
10278: NOT
10279: IFFALSE 10283
// exit ;
10281: GO 10684
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10283: LD_VAR 0 11
10287: PUSH
10288: LD_VAR 0 11
10292: PPUSH
10293: LD_VAR 0 10
10297: PPUSH
10298: CALL_OW 296
10302: PUSH
10303: LD_INT 13
10305: GREATER
10306: AND
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: LD_VAR 0 10
10317: PPUSH
10318: CALL_OW 296
10322: PUSH
10323: LD_INT 12
10325: GREATER
10326: OR
10327: IFFALSE 10331
// exit ;
10329: GO 10684
// missile := [ 1 ] ;
10331: LD_ADDR_VAR 0 14
10335: PUSH
10336: LD_INT 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10342: LD_VAR 0 9
10346: PPUSH
10347: LD_VAR 0 12
10351: PPUSH
10352: CALL_OW 325
10356: IFFALSE 10385
// missile := Replace ( missile , missile + 1 , 2 ) ;
10358: LD_ADDR_VAR 0 14
10362: PUSH
10363: LD_VAR 0 14
10367: PPUSH
10368: LD_VAR 0 14
10372: PUSH
10373: LD_INT 1
10375: PLUS
10376: PPUSH
10377: LD_INT 2
10379: PPUSH
10380: CALL_OW 1
10384: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10385: LD_VAR 0 9
10389: PPUSH
10390: LD_VAR 0 13
10394: PPUSH
10395: CALL_OW 325
10399: PUSH
10400: LD_VAR 0 10
10404: PPUSH
10405: CALL_OW 255
10409: PPUSH
10410: LD_VAR 0 13
10414: PPUSH
10415: CALL_OW 325
10419: NOT
10420: AND
10421: IFFALSE 10450
// missile := Replace ( missile , missile + 1 , 3 ) ;
10423: LD_ADDR_VAR 0 14
10427: PUSH
10428: LD_VAR 0 14
10432: PPUSH
10433: LD_VAR 0 14
10437: PUSH
10438: LD_INT 1
10440: PLUS
10441: PPUSH
10442: LD_INT 3
10444: PPUSH
10445: CALL_OW 1
10449: ST_TO_ADDR
// if missile < 2 then
10450: LD_VAR 0 14
10454: PUSH
10455: LD_INT 2
10457: LESS
10458: IFFALSE 10462
// exit ;
10460: GO 10684
// x := GetX ( enemy ) ;
10462: LD_ADDR_VAR 0 4
10466: PUSH
10467: LD_VAR 0 10
10471: PPUSH
10472: CALL_OW 250
10476: ST_TO_ADDR
// y := GetY ( enemy ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_VAR 0 10
10486: PPUSH
10487: CALL_OW 251
10491: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10492: LD_ADDR_VAR 0 6
10496: PUSH
10497: LD_VAR 0 4
10501: PUSH
10502: LD_INT 1
10504: NEG
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 12
10513: PLUS
10514: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10515: LD_ADDR_VAR 0 7
10519: PUSH
10520: LD_VAR 0 5
10524: PUSH
10525: LD_INT 1
10527: NEG
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL_OW 12
10536: PLUS
10537: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10538: LD_VAR 0 6
10542: PPUSH
10543: LD_VAR 0 7
10547: PPUSH
10548: CALL_OW 488
10552: NOT
10553: IFFALSE 10575
// begin _x := x ;
10555: LD_ADDR_VAR 0 6
10559: PUSH
10560: LD_VAR 0 4
10564: ST_TO_ADDR
// _y := y ;
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: LD_VAR 0 5
10574: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10575: LD_ADDR_VAR 0 3
10579: PUSH
10580: LD_INT 1
10582: PPUSH
10583: LD_VAR 0 14
10587: PPUSH
10588: CALL_OW 12
10592: ST_TO_ADDR
// case i of 1 :
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 1
10600: DOUBLE
10601: EQUAL
10602: IFTRUE 10606
10604: GO 10623
10606: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_VAR 0 10
10616: PPUSH
10617: CALL_OW 115
10621: GO 10684
10623: LD_INT 2
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10653
10631: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10632: LD_VAR 0 1
10636: PPUSH
10637: LD_VAR 0 6
10641: PPUSH
10642: LD_VAR 0 7
10646: PPUSH
10647: CALL_OW 153
10651: GO 10684
10653: LD_INT 3
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10683
10661: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10662: LD_VAR 0 1
10666: PPUSH
10667: LD_VAR 0 6
10671: PPUSH
10672: LD_VAR 0 7
10676: PPUSH
10677: CALL_OW 154
10681: GO 10684
10683: POP
// end ;
10684: LD_VAR 0 2
10688: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
10696: PPUSH
// if not unit or not building then
10697: LD_VAR 0 1
10701: NOT
10702: PUSH
10703: LD_VAR 0 2
10707: NOT
10708: OR
10709: IFFALSE 10713
// exit ;
10711: GO 10871
// x := GetX ( building ) ;
10713: LD_ADDR_VAR 0 5
10717: PUSH
10718: LD_VAR 0 2
10722: PPUSH
10723: CALL_OW 250
10727: ST_TO_ADDR
// y := GetY ( building ) ;
10728: LD_ADDR_VAR 0 6
10732: PUSH
10733: LD_VAR 0 2
10737: PPUSH
10738: CALL_OW 251
10742: ST_TO_ADDR
// for i = 0 to 5 do
10743: LD_ADDR_VAR 0 4
10747: PUSH
10748: DOUBLE
10749: LD_INT 0
10751: DEC
10752: ST_TO_ADDR
10753: LD_INT 5
10755: PUSH
10756: FOR_TO
10757: IFFALSE 10869
// begin _x := ShiftX ( x , i , 3 ) ;
10759: LD_ADDR_VAR 0 7
10763: PUSH
10764: LD_VAR 0 5
10768: PPUSH
10769: LD_VAR 0 4
10773: PPUSH
10774: LD_INT 3
10776: PPUSH
10777: CALL_OW 272
10781: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10782: LD_ADDR_VAR 0 8
10786: PUSH
10787: LD_VAR 0 6
10791: PPUSH
10792: LD_VAR 0 4
10796: PPUSH
10797: LD_INT 3
10799: PPUSH
10800: CALL_OW 273
10804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10805: LD_VAR 0 7
10809: PPUSH
10810: LD_VAR 0 8
10814: PPUSH
10815: CALL_OW 488
10819: NOT
10820: IFFALSE 10824
// continue ;
10822: GO 10756
// if HexInfo ( _x , _y ) = 0 then
10824: LD_VAR 0 7
10828: PPUSH
10829: LD_VAR 0 8
10833: PPUSH
10834: CALL_OW 428
10838: PUSH
10839: LD_INT 0
10841: EQUAL
10842: IFFALSE 10867
// begin ComMoveXY ( unit , _x , _y ) ;
10844: LD_VAR 0 1
10848: PPUSH
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 8
10858: PPUSH
10859: CALL_OW 111
// exit ;
10863: POP
10864: POP
10865: GO 10871
// end ; end ;
10867: GO 10756
10869: POP
10870: POP
// end ;
10871: LD_VAR 0 3
10875: RET
// export function ScanBase ( side , base_area ) ; begin
10876: LD_INT 0
10878: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10879: LD_ADDR_VAR 0 3
10883: PUSH
10884: LD_VAR 0 2
10888: PPUSH
10889: LD_INT 81
10891: PUSH
10892: LD_VAR 0 1
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PPUSH
10901: CALL_OW 70
10905: ST_TO_ADDR
// end ;
10906: LD_VAR 0 3
10910: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
// result := false ;
10917: LD_ADDR_VAR 0 2
10921: PUSH
10922: LD_INT 0
10924: ST_TO_ADDR
// side := GetSide ( unit ) ;
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: LD_VAR 0 1
10934: PPUSH
10935: CALL_OW 255
10939: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10940: LD_ADDR_VAR 0 4
10944: PUSH
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 248
10954: ST_TO_ADDR
// case nat of 1 :
10955: LD_VAR 0 4
10959: PUSH
10960: LD_INT 1
10962: DOUBLE
10963: EQUAL
10964: IFTRUE 10968
10966: GO 10979
10968: POP
// tech := tech_lassight ; 2 :
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_INT 12
10976: ST_TO_ADDR
10977: GO 11018
10979: LD_INT 2
10981: DOUBLE
10982: EQUAL
10983: IFTRUE 10987
10985: GO 10998
10987: POP
// tech := tech_mortar ; 3 :
10988: LD_ADDR_VAR 0 5
10992: PUSH
10993: LD_INT 41
10995: ST_TO_ADDR
10996: GO 11018
10998: LD_INT 3
11000: DOUBLE
11001: EQUAL
11002: IFTRUE 11006
11004: GO 11017
11006: POP
// tech := tech_bazooka ; end ;
11007: LD_ADDR_VAR 0 5
11011: PUSH
11012: LD_INT 44
11014: ST_TO_ADDR
11015: GO 11018
11017: POP
// if Researched ( side , tech ) then
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_VAR 0 5
11027: PPUSH
11028: CALL_OW 325
11032: IFFALSE 11059
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 5
11041: PUSH
11042: LD_INT 8
11044: PUSH
11045: LD_INT 9
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: LD_VAR 0 4
11057: ARRAY
11058: ST_TO_ADDR
// end ;
11059: LD_VAR 0 2
11063: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11064: LD_INT 0
11066: PPUSH
11067: PPUSH
11068: PPUSH
// if not mines then
11069: LD_VAR 0 2
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11222
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11078: LD_ADDR_VAR 0 5
11082: PUSH
11083: LD_INT 81
11085: PUSH
11086: LD_VAR 0 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 21
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PPUSH
11116: CALL_OW 69
11120: ST_TO_ADDR
// for i in mines do
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_VAR 0 2
11130: PUSH
11131: FOR_IN
11132: IFFALSE 11220
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11134: LD_VAR 0 4
11138: PUSH
11139: LD_INT 1
11141: ARRAY
11142: PPUSH
11143: LD_VAR 0 4
11147: PUSH
11148: LD_INT 2
11150: ARRAY
11151: PPUSH
11152: CALL_OW 458
11156: NOT
11157: IFFALSE 11161
// continue ;
11159: GO 11131
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11161: LD_VAR 0 4
11165: PUSH
11166: LD_INT 1
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 4
11174: PUSH
11175: LD_INT 2
11177: ARRAY
11178: PPUSH
11179: CALL_OW 428
11183: PUSH
11184: LD_VAR 0 5
11188: IN
11189: IFFALSE 11218
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11191: LD_VAR 0 4
11195: PUSH
11196: LD_INT 1
11198: ARRAY
11199: PPUSH
11200: LD_VAR 0 4
11204: PUSH
11205: LD_INT 2
11207: ARRAY
11208: PPUSH
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 456
// end ;
11218: GO 11131
11220: POP
11221: POP
// end ;
11222: LD_VAR 0 3
11226: RET
// export function Count ( array ) ; begin
11227: LD_INT 0
11229: PPUSH
// result := array + 0 ;
11230: LD_ADDR_VAR 0 2
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 0
11242: PLUS
11243: ST_TO_ADDR
// end ;
11244: LD_VAR 0 2
11248: RET
// export function IsEmpty ( building ) ; begin
11249: LD_INT 0
11251: PPUSH
// if not building then
11252: LD_VAR 0 1
11256: NOT
11257: IFFALSE 11261
// exit ;
11259: GO 11304
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 255
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 58
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 69
11302: IN
11303: ST_TO_ADDR
// end ;
11304: LD_VAR 0 2
11308: RET
// export function IsNotFull ( building ) ; var places ; begin
11309: LD_INT 0
11311: PPUSH
11312: PPUSH
// if not building then
11313: LD_VAR 0 1
11317: NOT
11318: IFFALSE 11322
// exit ;
11320: GO 11350
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11322: LD_ADDR_VAR 0 2
11326: PUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: LD_INT 3
11334: PUSH
11335: LD_INT 62
11337: PUSH
11338: EMPTY
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 72
11349: ST_TO_ADDR
// end ;
11350: LD_VAR 0 2
11354: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11355: LD_INT 0
11357: PPUSH
11358: PPUSH
11359: PPUSH
11360: PPUSH
// tmp := [ ] ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: EMPTY
11367: ST_TO_ADDR
// list := [ ] ;
11368: LD_ADDR_VAR 0 5
11372: PUSH
11373: EMPTY
11374: ST_TO_ADDR
// for i = 16 to 25 do
11375: LD_ADDR_VAR 0 4
11379: PUSH
11380: DOUBLE
11381: LD_INT 16
11383: DEC
11384: ST_TO_ADDR
11385: LD_INT 25
11387: PUSH
11388: FOR_TO
11389: IFFALSE 11462
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11391: LD_ADDR_VAR 0 3
11395: PUSH
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_VAR 0 1
11408: PPUSH
11409: CALL_OW 255
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 91
11420: PUSH
11421: LD_VAR 0 1
11425: PUSH
11426: LD_INT 6
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 30
11436: PUSH
11437: LD_VAR 0 4
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: PUSH
11451: EMPTY
11452: LIST
11453: PPUSH
11454: CALL_OW 69
11458: ADD
11459: ST_TO_ADDR
11460: GO 11388
11462: POP
11463: POP
// for i = 1 to tmp do
11464: LD_ADDR_VAR 0 4
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_VAR 0 3
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11568
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11482: LD_ADDR_VAR 0 5
11486: PUSH
11487: LD_VAR 0 5
11491: PUSH
11492: LD_VAR 0 3
11496: PUSH
11497: LD_VAR 0 4
11501: ARRAY
11502: PPUSH
11503: CALL_OW 266
11507: PUSH
11508: LD_VAR 0 3
11512: PUSH
11513: LD_VAR 0 4
11517: ARRAY
11518: PPUSH
11519: CALL_OW 250
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_VAR 0 4
11533: ARRAY
11534: PPUSH
11535: CALL_OW 251
11539: PUSH
11540: LD_VAR 0 3
11544: PUSH
11545: LD_VAR 0 4
11549: ARRAY
11550: PPUSH
11551: CALL_OW 254
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: ADD
11565: ST_TO_ADDR
11566: GO 11479
11568: POP
11569: POP
// result := list ;
11570: LD_ADDR_VAR 0 2
11574: PUSH
11575: LD_VAR 0 5
11579: ST_TO_ADDR
// end ;
11580: LD_VAR 0 2
11584: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// if not factory then
11594: LD_VAR 0 1
11598: NOT
11599: IFFALSE 11603
// exit ;
11601: GO 12196
// if control = control_apeman then
11603: LD_VAR 0 4
11607: PUSH
11608: LD_INT 5
11610: EQUAL
11611: IFFALSE 11720
// begin tmp := UnitsInside ( factory ) ;
11613: LD_ADDR_VAR 0 8
11617: PUSH
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL_OW 313
11627: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11628: LD_VAR 0 8
11632: PPUSH
11633: LD_INT 25
11635: PUSH
11636: LD_INT 12
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: NOT
11648: IFFALSE 11658
// control := control_manual ;
11650: LD_ADDR_VAR 0 4
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11658: LD_ADDR_VAR 0 8
11662: PUSH
11663: LD_VAR 0 1
11667: PPUSH
11668: CALL 11355 0 1
11672: ST_TO_ADDR
// if tmp then
11673: LD_VAR 0 8
11677: IFFALSE 11720
// begin for i in tmp do
11679: LD_ADDR_VAR 0 7
11683: PUSH
11684: LD_VAR 0 8
11688: PUSH
11689: FOR_IN
11690: IFFALSE 11718
// if i [ 1 ] = b_ext_radio then
11692: LD_VAR 0 7
11696: PUSH
11697: LD_INT 1
11699: ARRAY
11700: PUSH
11701: LD_INT 22
11703: EQUAL
11704: IFFALSE 11716
// begin control := control_remote ;
11706: LD_ADDR_VAR 0 4
11710: PUSH
11711: LD_INT 2
11713: ST_TO_ADDR
// break ;
11714: GO 11718
// end ;
11716: GO 11689
11718: POP
11719: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11720: LD_VAR 0 1
11724: PPUSH
11725: LD_VAR 0 2
11729: PPUSH
11730: LD_VAR 0 3
11734: PPUSH
11735: LD_VAR 0 4
11739: PPUSH
11740: LD_VAR 0 5
11744: PPUSH
11745: CALL_OW 448
11749: IFFALSE 11784
// begin result := [ chassis , engine , control , weapon ] ;
11751: LD_ADDR_VAR 0 6
11755: PUSH
11756: LD_VAR 0 2
11760: PUSH
11761: LD_VAR 0 3
11765: PUSH
11766: LD_VAR 0 4
11770: PUSH
11771: LD_VAR 0 5
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: ST_TO_ADDR
// exit ;
11782: GO 12196
// end ; _chassis := AvailableChassisList ( factory ) ;
11784: LD_ADDR_VAR 0 9
11788: PUSH
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 475
11798: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11799: LD_ADDR_VAR 0 11
11803: PUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 476
11813: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11814: LD_ADDR_VAR 0 12
11818: PUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 477
11828: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11829: LD_ADDR_VAR 0 10
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 478
11843: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11844: LD_VAR 0 9
11848: NOT
11849: PUSH
11850: LD_VAR 0 11
11854: NOT
11855: OR
11856: PUSH
11857: LD_VAR 0 12
11861: NOT
11862: OR
11863: PUSH
11864: LD_VAR 0 10
11868: NOT
11869: OR
11870: IFFALSE 11905
// begin result := [ chassis , engine , control , weapon ] ;
11872: LD_ADDR_VAR 0 6
11876: PUSH
11877: LD_VAR 0 2
11881: PUSH
11882: LD_VAR 0 3
11886: PUSH
11887: LD_VAR 0 4
11891: PUSH
11892: LD_VAR 0 5
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ST_TO_ADDR
// exit ;
11903: GO 12196
// end ; if not chassis in _chassis then
11905: LD_VAR 0 2
11909: PUSH
11910: LD_VAR 0 9
11914: IN
11915: NOT
11916: IFFALSE 11942
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11918: LD_ADDR_VAR 0 2
11922: PUSH
11923: LD_VAR 0 9
11927: PUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_VAR 0 9
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11942: LD_VAR 0 2
11946: PPUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: CALL 12201 0 2
11956: NOT
11957: IFFALSE 12016
// repeat engine := _engine [ 1 ] ;
11959: LD_ADDR_VAR 0 3
11963: PUSH
11964: LD_VAR 0 11
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11973: LD_ADDR_VAR 0 11
11977: PUSH
11978: LD_VAR 0 11
11982: PPUSH
11983: LD_INT 1
11985: PPUSH
11986: CALL_OW 3
11990: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11991: LD_VAR 0 2
11995: PPUSH
11996: LD_VAR 0 3
12000: PPUSH
12001: CALL 12201 0 2
12005: PUSH
12006: LD_VAR 0 11
12010: PUSH
12011: EMPTY
12012: EQUAL
12013: OR
12014: IFFALSE 11959
// if not control in _control then
12016: LD_VAR 0 4
12020: PUSH
12021: LD_VAR 0 12
12025: IN
12026: NOT
12027: IFFALSE 12053
// control := _control [ rand ( 1 , _control ) ] ;
12029: LD_ADDR_VAR 0 4
12033: PUSH
12034: LD_VAR 0 12
12038: PUSH
12039: LD_INT 1
12041: PPUSH
12042: LD_VAR 0 12
12046: PPUSH
12047: CALL_OW 12
12051: ARRAY
12052: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12053: LD_VAR 0 2
12057: PPUSH
12058: LD_VAR 0 5
12062: PPUSH
12063: CALL 12421 0 2
12067: NOT
12068: IFFALSE 12127
// repeat weapon := _weapon [ 1 ] ;
12070: LD_ADDR_VAR 0 5
12074: PUSH
12075: LD_VAR 0 10
12079: PUSH
12080: LD_INT 1
12082: ARRAY
12083: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12084: LD_ADDR_VAR 0 10
12088: PUSH
12089: LD_VAR 0 10
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 3
12101: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_VAR 0 5
12111: PPUSH
12112: CALL 12421 0 2
12116: PUSH
12117: LD_VAR 0 10
12121: PUSH
12122: EMPTY
12123: EQUAL
12124: OR
12125: IFFALSE 12070
// result := [ ] ;
12127: LD_ADDR_VAR 0 6
12131: PUSH
12132: EMPTY
12133: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12134: LD_VAR 0 1
12138: PPUSH
12139: LD_VAR 0 2
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_VAR 0 4
12153: PPUSH
12154: LD_VAR 0 5
12158: PPUSH
12159: CALL_OW 448
12163: IFFALSE 12196
// result := [ chassis , engine , control , weapon ] ;
12165: LD_ADDR_VAR 0 6
12169: PUSH
12170: LD_VAR 0 2
12174: PUSH
12175: LD_VAR 0 3
12179: PUSH
12180: LD_VAR 0 4
12184: PUSH
12185: LD_VAR 0 5
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: ST_TO_ADDR
// end ;
12196: LD_VAR 0 6
12200: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12201: LD_INT 0
12203: PPUSH
// if not chassis or not engine then
12204: LD_VAR 0 1
12208: NOT
12209: PUSH
12210: LD_VAR 0 2
12214: NOT
12215: OR
12216: IFFALSE 12220
// exit ;
12218: GO 12416
// case engine of engine_solar :
12220: LD_VAR 0 2
12224: PUSH
12225: LD_INT 2
12227: DOUBLE
12228: EQUAL
12229: IFTRUE 12233
12231: GO 12271
12233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: LD_INT 11
12241: PUSH
12242: LD_INT 12
12244: PUSH
12245: LD_INT 13
12247: PUSH
12248: LD_INT 14
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: LD_INT 3
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: ST_TO_ADDR
12269: GO 12400
12271: LD_INT 1
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12341
12279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12280: LD_ADDR_VAR 0 3
12284: PUSH
12285: LD_INT 11
12287: PUSH
12288: LD_INT 12
12290: PUSH
12291: LD_INT 13
12293: PUSH
12294: LD_INT 14
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: LD_INT 21
12314: PUSH
12315: LD_INT 23
12317: PUSH
12318: LD_INT 22
12320: PUSH
12321: LD_INT 24
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 12400
12341: LD_INT 3
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12399
12349: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 13
12357: PUSH
12358: LD_INT 14
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: LD_INT 5
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 23
12381: PUSH
12382: LD_INT 24
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: ST_TO_ADDR
12397: GO 12400
12399: POP
// result := ( chassis in result ) ;
12400: LD_ADDR_VAR 0 3
12404: PUSH
12405: LD_VAR 0 1
12409: PUSH
12410: LD_VAR 0 3
12414: IN
12415: ST_TO_ADDR
// end ;
12416: LD_VAR 0 3
12420: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12421: LD_INT 0
12423: PPUSH
// if not chassis or not weapon then
12424: LD_VAR 0 1
12428: NOT
12429: PUSH
12430: LD_VAR 0 2
12434: NOT
12435: OR
12436: IFFALSE 12440
// exit ;
12438: GO 13500
// case weapon of us_machine_gun :
12440: LD_VAR 0 2
12444: PUSH
12445: LD_INT 2
12447: DOUBLE
12448: EQUAL
12449: IFTRUE 12453
12451: GO 12483
12453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12454: LD_ADDR_VAR 0 3
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: ST_TO_ADDR
12481: GO 13484
12483: LD_INT 3
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 12521
12491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: LD_INT 4
12508: PUSH
12509: LD_INT 5
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: ST_TO_ADDR
12519: GO 13484
12521: LD_INT 11
12523: DOUBLE
12524: EQUAL
12525: IFTRUE 12529
12527: GO 12559
12529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: LD_INT 2
12540: PUSH
12541: LD_INT 3
12543: PUSH
12544: LD_INT 4
12546: PUSH
12547: LD_INT 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: ST_TO_ADDR
12557: GO 13484
12559: LD_INT 4
12561: DOUBLE
12562: EQUAL
12563: IFTRUE 12567
12565: GO 12593
12567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12568: LD_ADDR_VAR 0 3
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 3
12578: PUSH
12579: LD_INT 4
12581: PUSH
12582: LD_INT 5
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 13484
12593: LD_INT 5
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12627
12601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 2
12609: PUSH
12610: LD_INT 3
12612: PUSH
12613: LD_INT 4
12615: PUSH
12616: LD_INT 5
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: ST_TO_ADDR
12625: GO 13484
12627: LD_INT 9
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12661
12635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12636: LD_ADDR_VAR 0 3
12640: PUSH
12641: LD_INT 2
12643: PUSH
12644: LD_INT 3
12646: PUSH
12647: LD_INT 4
12649: PUSH
12650: LD_INT 5
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: ST_TO_ADDR
12659: GO 13484
12661: LD_INT 7
12663: DOUBLE
12664: EQUAL
12665: IFTRUE 12669
12667: GO 12695
12669: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: LD_INT 3
12680: PUSH
12681: LD_INT 4
12683: PUSH
12684: LD_INT 5
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: ST_TO_ADDR
12693: GO 13484
12695: LD_INT 12
12697: DOUBLE
12698: EQUAL
12699: IFTRUE 12703
12701: GO 12729
12703: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12704: LD_ADDR_VAR 0 3
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 3
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: LD_INT 5
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: ST_TO_ADDR
12727: GO 13484
12729: LD_INT 13
12731: DOUBLE
12732: EQUAL
12733: IFTRUE 12737
12735: GO 12763
12737: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12738: LD_ADDR_VAR 0 3
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 3
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: LD_INT 5
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: ST_TO_ADDR
12761: GO 13484
12763: LD_INT 14
12765: DOUBLE
12766: EQUAL
12767: IFTRUE 12771
12769: GO 12789
12771: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 4
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: ST_TO_ADDR
12787: GO 13484
12789: LD_INT 6
12791: DOUBLE
12792: EQUAL
12793: IFTRUE 12797
12795: GO 12815
12797: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12798: LD_ADDR_VAR 0 3
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 5
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: ST_TO_ADDR
12813: GO 13484
12815: LD_INT 10
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 12841
12823: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 4
12831: PUSH
12832: LD_INT 5
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: ST_TO_ADDR
12839: GO 13484
12841: LD_INT 22
12843: DOUBLE
12844: EQUAL
12845: IFTRUE 12849
12847: GO 12875
12849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12850: LD_ADDR_VAR 0 3
12854: PUSH
12855: LD_INT 11
12857: PUSH
12858: LD_INT 12
12860: PUSH
12861: LD_INT 13
12863: PUSH
12864: LD_INT 14
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
12873: GO 13484
12875: LD_INT 23
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12909
12883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 11
12891: PUSH
12892: LD_INT 12
12894: PUSH
12895: LD_INT 13
12897: PUSH
12898: LD_INT 14
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
12907: GO 13484
12909: LD_INT 24
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12943
12917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 11
12925: PUSH
12926: LD_INT 12
12928: PUSH
12929: LD_INT 13
12931: PUSH
12932: LD_INT 14
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: ST_TO_ADDR
12941: GO 13484
12943: LD_INT 30
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 12977
12951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_INT 11
12959: PUSH
12960: LD_INT 12
12962: PUSH
12963: LD_INT 13
12965: PUSH
12966: LD_INT 14
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: ST_TO_ADDR
12975: GO 13484
12977: LD_INT 25
12979: DOUBLE
12980: EQUAL
12981: IFTRUE 12985
12983: GO 13003
12985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 13
12993: PUSH
12994: LD_INT 14
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: ST_TO_ADDR
13001: GO 13484
13003: LD_INT 27
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13029
13011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13012: LD_ADDR_VAR 0 3
13016: PUSH
13017: LD_INT 13
13019: PUSH
13020: LD_INT 14
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: ST_TO_ADDR
13027: GO 13484
13029: LD_INT 92
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13063
13037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_INT 11
13045: PUSH
13046: LD_INT 12
13048: PUSH
13049: LD_INT 13
13051: PUSH
13052: LD_INT 14
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: ST_TO_ADDR
13061: GO 13484
13063: LD_INT 28
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13089
13071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13072: LD_ADDR_VAR 0 3
13076: PUSH
13077: LD_INT 13
13079: PUSH
13080: LD_INT 14
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: ST_TO_ADDR
13087: GO 13484
13089: LD_INT 29
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13115
13097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 13
13105: PUSH
13106: LD_INT 14
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: ST_TO_ADDR
13113: GO 13484
13115: LD_INT 31
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13141
13123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13124: LD_ADDR_VAR 0 3
13128: PUSH
13129: LD_INT 13
13131: PUSH
13132: LD_INT 14
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: ST_TO_ADDR
13139: GO 13484
13141: LD_INT 26
13143: DOUBLE
13144: EQUAL
13145: IFTRUE 13149
13147: GO 13167
13149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13150: LD_ADDR_VAR 0 3
13154: PUSH
13155: LD_INT 13
13157: PUSH
13158: LD_INT 14
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: ST_TO_ADDR
13165: GO 13484
13167: LD_INT 42
13169: DOUBLE
13170: EQUAL
13171: IFTRUE 13175
13173: GO 13201
13175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13176: LD_ADDR_VAR 0 3
13180: PUSH
13181: LD_INT 21
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_INT 23
13189: PUSH
13190: LD_INT 24
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: ST_TO_ADDR
13199: GO 13484
13201: LD_INT 43
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13235
13209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13210: LD_ADDR_VAR 0 3
13214: PUSH
13215: LD_INT 21
13217: PUSH
13218: LD_INT 22
13220: PUSH
13221: LD_INT 23
13223: PUSH
13224: LD_INT 24
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: ST_TO_ADDR
13233: GO 13484
13235: LD_INT 44
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13269
13243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 23
13257: PUSH
13258: LD_INT 24
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: ST_TO_ADDR
13267: GO 13484
13269: LD_INT 45
13271: DOUBLE
13272: EQUAL
13273: IFTRUE 13277
13275: GO 13303
13277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13278: LD_ADDR_VAR 0 3
13282: PUSH
13283: LD_INT 21
13285: PUSH
13286: LD_INT 22
13288: PUSH
13289: LD_INT 23
13291: PUSH
13292: LD_INT 24
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: ST_TO_ADDR
13301: GO 13484
13303: LD_INT 49
13305: DOUBLE
13306: EQUAL
13307: IFTRUE 13311
13309: GO 13337
13311: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13312: LD_ADDR_VAR 0 3
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 22
13322: PUSH
13323: LD_INT 23
13325: PUSH
13326: LD_INT 24
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: ST_TO_ADDR
13335: GO 13484
13337: LD_INT 51
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13371
13345: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: LD_INT 21
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_INT 23
13359: PUSH
13360: LD_INT 24
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 13484
13371: LD_INT 52
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13405
13379: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13380: LD_ADDR_VAR 0 3
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_INT 23
13393: PUSH
13394: LD_INT 24
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: ST_TO_ADDR
13403: GO 13484
13405: LD_INT 53
13407: DOUBLE
13408: EQUAL
13409: IFTRUE 13413
13411: GO 13431
13413: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_INT 23
13421: PUSH
13422: LD_INT 24
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: ST_TO_ADDR
13429: GO 13484
13431: LD_INT 46
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13457
13439: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13440: LD_ADDR_VAR 0 3
13444: PUSH
13445: LD_INT 23
13447: PUSH
13448: LD_INT 24
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 13484
13457: LD_INT 47
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13483
13465: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 24
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: ST_TO_ADDR
13481: GO 13484
13483: POP
// result := ( chassis in result ) ;
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: LD_VAR 0 1
13493: PUSH
13494: LD_VAR 0 3
13498: IN
13499: ST_TO_ADDR
// end ;
13500: LD_VAR 0 3
13504: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
13510: PPUSH
13511: PPUSH
13512: PPUSH
13513: PPUSH
// result := array ;
13514: LD_ADDR_VAR 0 5
13518: PUSH
13519: LD_VAR 0 1
13523: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13524: LD_VAR 0 1
13528: NOT
13529: PUSH
13530: LD_VAR 0 2
13534: NOT
13535: OR
13536: PUSH
13537: LD_VAR 0 3
13541: NOT
13542: OR
13543: PUSH
13544: LD_VAR 0 2
13548: PUSH
13549: LD_VAR 0 1
13553: GREATER
13554: OR
13555: PUSH
13556: LD_VAR 0 3
13560: PUSH
13561: LD_VAR 0 1
13565: GREATER
13566: OR
13567: IFFALSE 13571
// exit ;
13569: GO 13867
// if direction then
13571: LD_VAR 0 4
13575: IFFALSE 13639
// begin d := 1 ;
13577: LD_ADDR_VAR 0 9
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// if i_from > i_to then
13585: LD_VAR 0 2
13589: PUSH
13590: LD_VAR 0 3
13594: GREATER
13595: IFFALSE 13621
// length := ( array - i_from ) + i_to else
13597: LD_ADDR_VAR 0 11
13601: PUSH
13602: LD_VAR 0 1
13606: PUSH
13607: LD_VAR 0 2
13611: MINUS
13612: PUSH
13613: LD_VAR 0 3
13617: PLUS
13618: ST_TO_ADDR
13619: GO 13637
// length := i_to - i_from ;
13621: LD_ADDR_VAR 0 11
13625: PUSH
13626: LD_VAR 0 3
13630: PUSH
13631: LD_VAR 0 2
13635: MINUS
13636: ST_TO_ADDR
// end else
13637: GO 13700
// begin d := - 1 ;
13639: LD_ADDR_VAR 0 9
13643: PUSH
13644: LD_INT 1
13646: NEG
13647: ST_TO_ADDR
// if i_from > i_to then
13648: LD_VAR 0 2
13652: PUSH
13653: LD_VAR 0 3
13657: GREATER
13658: IFFALSE 13678
// length := i_from - i_to else
13660: LD_ADDR_VAR 0 11
13664: PUSH
13665: LD_VAR 0 2
13669: PUSH
13670: LD_VAR 0 3
13674: MINUS
13675: ST_TO_ADDR
13676: GO 13700
// length := ( array - i_to ) + i_from ;
13678: LD_ADDR_VAR 0 11
13682: PUSH
13683: LD_VAR 0 1
13687: PUSH
13688: LD_VAR 0 3
13692: MINUS
13693: PUSH
13694: LD_VAR 0 2
13698: PLUS
13699: ST_TO_ADDR
// end ; if not length then
13700: LD_VAR 0 11
13704: NOT
13705: IFFALSE 13709
// exit ;
13707: GO 13867
// tmp := array ;
13709: LD_ADDR_VAR 0 10
13713: PUSH
13714: LD_VAR 0 1
13718: ST_TO_ADDR
// for i = 1 to length do
13719: LD_ADDR_VAR 0 6
13723: PUSH
13724: DOUBLE
13725: LD_INT 1
13727: DEC
13728: ST_TO_ADDR
13729: LD_VAR 0 11
13733: PUSH
13734: FOR_TO
13735: IFFALSE 13855
// begin for j = 1 to array do
13737: LD_ADDR_VAR 0 7
13741: PUSH
13742: DOUBLE
13743: LD_INT 1
13745: DEC
13746: ST_TO_ADDR
13747: LD_VAR 0 1
13751: PUSH
13752: FOR_TO
13753: IFFALSE 13841
// begin k := j + d ;
13755: LD_ADDR_VAR 0 8
13759: PUSH
13760: LD_VAR 0 7
13764: PUSH
13765: LD_VAR 0 9
13769: PLUS
13770: ST_TO_ADDR
// if k > array then
13771: LD_VAR 0 8
13775: PUSH
13776: LD_VAR 0 1
13780: GREATER
13781: IFFALSE 13791
// k := 1 ;
13783: LD_ADDR_VAR 0 8
13787: PUSH
13788: LD_INT 1
13790: ST_TO_ADDR
// if not k then
13791: LD_VAR 0 8
13795: NOT
13796: IFFALSE 13808
// k := array ;
13798: LD_ADDR_VAR 0 8
13802: PUSH
13803: LD_VAR 0 1
13807: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13808: LD_ADDR_VAR 0 10
13812: PUSH
13813: LD_VAR 0 10
13817: PPUSH
13818: LD_VAR 0 8
13822: PPUSH
13823: LD_VAR 0 1
13827: PUSH
13828: LD_VAR 0 7
13832: ARRAY
13833: PPUSH
13834: CALL_OW 1
13838: ST_TO_ADDR
// end ;
13839: GO 13752
13841: POP
13842: POP
// array := tmp ;
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_VAR 0 10
13852: ST_TO_ADDR
// end ;
13853: GO 13734
13855: POP
13856: POP
// result := array ;
13857: LD_ADDR_VAR 0 5
13861: PUSH
13862: LD_VAR 0 1
13866: ST_TO_ADDR
// end ;
13867: LD_VAR 0 5
13871: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13872: LD_INT 0
13874: PPUSH
13875: PPUSH
// result := 0 ;
13876: LD_ADDR_VAR 0 3
13880: PUSH
13881: LD_INT 0
13883: ST_TO_ADDR
// if not array or not value in array then
13884: LD_VAR 0 1
13888: NOT
13889: PUSH
13890: LD_VAR 0 2
13894: PUSH
13895: LD_VAR 0 1
13899: IN
13900: NOT
13901: OR
13902: IFFALSE 13906
// exit ;
13904: GO 13960
// for i = 1 to array do
13906: LD_ADDR_VAR 0 4
13910: PUSH
13911: DOUBLE
13912: LD_INT 1
13914: DEC
13915: ST_TO_ADDR
13916: LD_VAR 0 1
13920: PUSH
13921: FOR_TO
13922: IFFALSE 13958
// if value = array [ i ] then
13924: LD_VAR 0 2
13928: PUSH
13929: LD_VAR 0 1
13933: PUSH
13934: LD_VAR 0 4
13938: ARRAY
13939: EQUAL
13940: IFFALSE 13956
// begin result := i ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_VAR 0 4
13951: ST_TO_ADDR
// exit ;
13952: POP
13953: POP
13954: GO 13960
// end ;
13956: GO 13921
13958: POP
13959: POP
// end ;
13960: LD_VAR 0 3
13964: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13965: LD_INT 0
13967: PPUSH
// vc_chassis := chassis ;
13968: LD_ADDR_OWVAR 37
13972: PUSH
13973: LD_VAR 0 1
13977: ST_TO_ADDR
// vc_engine := engine ;
13978: LD_ADDR_OWVAR 39
13982: PUSH
13983: LD_VAR 0 2
13987: ST_TO_ADDR
// vc_control := control ;
13988: LD_ADDR_OWVAR 38
13992: PUSH
13993: LD_VAR 0 3
13997: ST_TO_ADDR
// vc_weapon := weapon ;
13998: LD_ADDR_OWVAR 40
14002: PUSH
14003: LD_VAR 0 4
14007: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14008: LD_ADDR_OWVAR 41
14012: PUSH
14013: LD_VAR 0 5
14017: ST_TO_ADDR
// end ;
14018: LD_VAR 0 6
14022: RET
// export function WantPlant ( unit ) ; var task ; begin
14023: LD_INT 0
14025: PPUSH
14026: PPUSH
// result := false ;
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_INT 0
14034: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14035: LD_ADDR_VAR 0 3
14039: PUSH
14040: LD_VAR 0 1
14044: PPUSH
14045: CALL_OW 437
14049: ST_TO_ADDR
// if task then
14050: LD_VAR 0 3
14054: IFFALSE 14082
// if task [ 1 ] [ 1 ] = p then
14056: LD_VAR 0 3
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PUSH
14065: LD_INT 1
14067: ARRAY
14068: PUSH
14069: LD_STRING p
14071: EQUAL
14072: IFFALSE 14082
// result := true ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: LD_INT 1
14081: ST_TO_ADDR
// end ;
14082: LD_VAR 0 2
14086: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// if pos < 1 then
14093: LD_VAR 0 2
14097: PUSH
14098: LD_INT 1
14100: LESS
14101: IFFALSE 14105
// exit ;
14103: GO 14408
// if pos = 1 then
14105: LD_VAR 0 2
14109: PUSH
14110: LD_INT 1
14112: EQUAL
14113: IFFALSE 14146
// result := Replace ( arr , pos [ 1 ] , value ) else
14115: LD_ADDR_VAR 0 4
14119: PUSH
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_VAR 0 2
14129: PUSH
14130: LD_INT 1
14132: ARRAY
14133: PPUSH
14134: LD_VAR 0 3
14138: PPUSH
14139: CALL_OW 1
14143: ST_TO_ADDR
14144: GO 14408
// begin tmp := arr ;
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_VAR 0 1
14155: ST_TO_ADDR
// s_arr := [ tmp ] ;
14156: LD_ADDR_VAR 0 7
14160: PUSH
14161: LD_VAR 0 6
14165: PUSH
14166: EMPTY
14167: LIST
14168: ST_TO_ADDR
// for i = 1 to pos - 1 do
14169: LD_ADDR_VAR 0 5
14173: PUSH
14174: DOUBLE
14175: LD_INT 1
14177: DEC
14178: ST_TO_ADDR
14179: LD_VAR 0 2
14183: PUSH
14184: LD_INT 1
14186: MINUS
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14234
// begin tmp := tmp [ pos [ i ] ] ;
14191: LD_ADDR_VAR 0 6
14195: PUSH
14196: LD_VAR 0 6
14200: PUSH
14201: LD_VAR 0 2
14205: PUSH
14206: LD_VAR 0 5
14210: ARRAY
14211: ARRAY
14212: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14213: LD_ADDR_VAR 0 7
14217: PUSH
14218: LD_VAR 0 7
14222: PUSH
14223: LD_VAR 0 6
14227: PUSH
14228: EMPTY
14229: LIST
14230: ADD
14231: ST_TO_ADDR
// end ;
14232: GO 14188
14234: POP
14235: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14236: LD_ADDR_VAR 0 6
14240: PUSH
14241: LD_VAR 0 6
14245: PPUSH
14246: LD_VAR 0 2
14250: PUSH
14251: LD_VAR 0 2
14255: ARRAY
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: CALL_OW 1
14266: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14267: LD_ADDR_VAR 0 7
14271: PUSH
14272: LD_VAR 0 7
14276: PPUSH
14277: LD_VAR 0 7
14281: PPUSH
14282: LD_VAR 0 6
14286: PPUSH
14287: CALL_OW 1
14291: ST_TO_ADDR
// for i = s_arr downto 2 do
14292: LD_ADDR_VAR 0 5
14296: PUSH
14297: DOUBLE
14298: LD_VAR 0 7
14302: INC
14303: ST_TO_ADDR
14304: LD_INT 2
14306: PUSH
14307: FOR_DOWNTO
14308: IFFALSE 14392
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14310: LD_ADDR_VAR 0 6
14314: PUSH
14315: LD_VAR 0 7
14319: PUSH
14320: LD_VAR 0 5
14324: PUSH
14325: LD_INT 1
14327: MINUS
14328: ARRAY
14329: PPUSH
14330: LD_VAR 0 2
14334: PUSH
14335: LD_VAR 0 5
14339: PUSH
14340: LD_INT 1
14342: MINUS
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 7
14349: PUSH
14350: LD_VAR 0 5
14354: ARRAY
14355: PPUSH
14356: CALL_OW 1
14360: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14361: LD_ADDR_VAR 0 7
14365: PUSH
14366: LD_VAR 0 7
14370: PPUSH
14371: LD_VAR 0 5
14375: PUSH
14376: LD_INT 1
14378: MINUS
14379: PPUSH
14380: LD_VAR 0 6
14384: PPUSH
14385: CALL_OW 1
14389: ST_TO_ADDR
// end ;
14390: GO 14307
14392: POP
14393: POP
// result := s_arr [ 1 ] ;
14394: LD_ADDR_VAR 0 4
14398: PUSH
14399: LD_VAR 0 7
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: ST_TO_ADDR
// end ; end ;
14408: LD_VAR 0 4
14412: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14413: LD_INT 0
14415: PPUSH
14416: PPUSH
// if not list then
14417: LD_VAR 0 1
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14517
// i := list [ pos1 ] ;
14426: LD_ADDR_VAR 0 5
14430: PUSH
14431: LD_VAR 0 1
14435: PUSH
14436: LD_VAR 0 2
14440: ARRAY
14441: ST_TO_ADDR
// if not i then
14442: LD_VAR 0 5
14446: NOT
14447: IFFALSE 14451
// exit ;
14449: GO 14517
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14451: LD_ADDR_VAR 0 1
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: LD_VAR 0 2
14465: PPUSH
14466: LD_VAR 0 1
14470: PUSH
14471: LD_VAR 0 3
14475: ARRAY
14476: PPUSH
14477: CALL_OW 1
14481: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14482: LD_ADDR_VAR 0 1
14486: PUSH
14487: LD_VAR 0 1
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_VAR 0 5
14501: PPUSH
14502: CALL_OW 1
14506: ST_TO_ADDR
// result := list ;
14507: LD_ADDR_VAR 0 4
14511: PUSH
14512: LD_VAR 0 1
14516: ST_TO_ADDR
// end ;
14517: LD_VAR 0 4
14521: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14522: LD_INT 0
14524: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14525: LD_ADDR_VAR 0 5
14529: PUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 250
14539: PPUSH
14540: LD_VAR 0 1
14544: PPUSH
14545: CALL_OW 251
14549: PPUSH
14550: LD_VAR 0 2
14554: PPUSH
14555: LD_VAR 0 3
14559: PPUSH
14560: LD_VAR 0 4
14564: PPUSH
14565: CALL 14943 0 5
14569: ST_TO_ADDR
// end ;
14570: LD_VAR 0 5
14574: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
14579: PPUSH
14580: PPUSH
// if not list or not unit then
14581: LD_VAR 0 2
14585: NOT
14586: PUSH
14587: LD_VAR 0 1
14591: NOT
14592: OR
14593: IFFALSE 14597
// exit ;
14595: GO 14938
// result := [ ] ;
14597: LD_ADDR_VAR 0 5
14601: PUSH
14602: EMPTY
14603: ST_TO_ADDR
// for i in list do
14604: LD_ADDR_VAR 0 6
14608: PUSH
14609: LD_VAR 0 2
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14833
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14617: LD_ADDR_VAR 0 8
14621: PUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: LD_VAR 0 6
14631: PUSH
14632: LD_INT 1
14634: ARRAY
14635: PPUSH
14636: LD_VAR 0 6
14640: PUSH
14641: LD_INT 2
14643: ARRAY
14644: PPUSH
14645: CALL_OW 297
14649: ST_TO_ADDR
// if not Count ( result ) then
14650: LD_VAR 0 5
14654: PPUSH
14655: CALL 11227 0 1
14659: NOT
14660: IFFALSE 14693
// begin result := Join ( result , [ i , tmp ] ) ;
14662: LD_ADDR_VAR 0 5
14666: PUSH
14667: LD_VAR 0 5
14671: PPUSH
14672: LD_VAR 0 6
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PPUSH
14686: CALL 46836 0 2
14690: ST_TO_ADDR
// continue ;
14691: GO 14614
// end ; if result [ result ] [ 2 ] <= tmp then
14693: LD_VAR 0 5
14697: PUSH
14698: LD_VAR 0 5
14702: ARRAY
14703: PUSH
14704: LD_INT 2
14706: ARRAY
14707: PUSH
14708: LD_VAR 0 8
14712: LESSEQUAL
14713: IFFALSE 14746
// result := Join ( result , [ i , tmp ] ) else
14715: LD_ADDR_VAR 0 5
14719: PUSH
14720: LD_VAR 0 5
14724: PPUSH
14725: LD_VAR 0 6
14729: PUSH
14730: LD_VAR 0 8
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL 46836 0 2
14743: ST_TO_ADDR
14744: GO 14831
// begin for j := 1 to Count ( result ) do
14746: LD_ADDR_VAR 0 7
14750: PUSH
14751: DOUBLE
14752: LD_INT 1
14754: DEC
14755: ST_TO_ADDR
14756: LD_VAR 0 5
14760: PPUSH
14761: CALL 11227 0 1
14765: PUSH
14766: FOR_TO
14767: IFFALSE 14829
// begin if tmp < result [ j ] [ 2 ] then
14769: LD_VAR 0 8
14773: PUSH
14774: LD_VAR 0 5
14778: PUSH
14779: LD_VAR 0 7
14783: ARRAY
14784: PUSH
14785: LD_INT 2
14787: ARRAY
14788: LESS
14789: IFFALSE 14827
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14791: LD_ADDR_VAR 0 5
14795: PUSH
14796: LD_VAR 0 5
14800: PPUSH
14801: LD_VAR 0 7
14805: PPUSH
14806: LD_VAR 0 6
14810: PUSH
14811: LD_VAR 0 8
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 2
14824: ST_TO_ADDR
// break ;
14825: GO 14829
// end ; end ;
14827: GO 14766
14829: POP
14830: POP
// end ; end ;
14831: GO 14614
14833: POP
14834: POP
// if result and not asc then
14835: LD_VAR 0 5
14839: PUSH
14840: LD_VAR 0 3
14844: NOT
14845: AND
14846: IFFALSE 14863
// result := ReverseArray ( result ) ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_VAR 0 5
14857: PPUSH
14858: CALL 42103 0 1
14862: ST_TO_ADDR
// tmp := [ ] ;
14863: LD_ADDR_VAR 0 8
14867: PUSH
14868: EMPTY
14869: ST_TO_ADDR
// if mode then
14870: LD_VAR 0 4
14874: IFFALSE 14938
// begin for i := 1 to result do
14876: LD_ADDR_VAR 0 6
14880: PUSH
14881: DOUBLE
14882: LD_INT 1
14884: DEC
14885: ST_TO_ADDR
14886: LD_VAR 0 5
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14926
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14894: LD_ADDR_VAR 0 8
14898: PUSH
14899: LD_VAR 0 8
14903: PPUSH
14904: LD_VAR 0 5
14908: PUSH
14909: LD_VAR 0 6
14913: ARRAY
14914: PUSH
14915: LD_INT 1
14917: ARRAY
14918: PPUSH
14919: CALL 46836 0 2
14923: ST_TO_ADDR
14924: GO 14891
14926: POP
14927: POP
// result := tmp ;
14928: LD_ADDR_VAR 0 5
14932: PUSH
14933: LD_VAR 0 8
14937: ST_TO_ADDR
// end ; end ;
14938: LD_VAR 0 5
14942: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14943: LD_INT 0
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
// if not list then
14949: LD_VAR 0 3
14953: NOT
14954: IFFALSE 14958
// exit ;
14956: GO 15346
// result := [ ] ;
14958: LD_ADDR_VAR 0 6
14962: PUSH
14963: EMPTY
14964: ST_TO_ADDR
// for i in list do
14965: LD_ADDR_VAR 0 7
14969: PUSH
14970: LD_VAR 0 3
14974: PUSH
14975: FOR_IN
14976: IFFALSE 15178
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14978: LD_ADDR_VAR 0 9
14982: PUSH
14983: LD_VAR 0 7
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: ST_TO_ADDR
// if not result then
15003: LD_VAR 0 6
15007: NOT
15008: IFFALSE 15034
// result := [ [ i , tmp ] ] else
15010: LD_ADDR_VAR 0 6
15014: PUSH
15015: LD_VAR 0 7
15019: PUSH
15020: LD_VAR 0 9
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: ST_TO_ADDR
15032: GO 15176
// begin if result [ result ] [ 2 ] < tmp then
15034: LD_VAR 0 6
15038: PUSH
15039: LD_VAR 0 6
15043: ARRAY
15044: PUSH
15045: LD_INT 2
15047: ARRAY
15048: PUSH
15049: LD_VAR 0 9
15053: LESS
15054: IFFALSE 15096
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15056: LD_ADDR_VAR 0 6
15060: PUSH
15061: LD_VAR 0 6
15065: PPUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: PLUS
15074: PPUSH
15075: LD_VAR 0 7
15079: PUSH
15080: LD_VAR 0 9
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PPUSH
15089: CALL_OW 2
15093: ST_TO_ADDR
15094: GO 15176
// for j = 1 to result do
15096: LD_ADDR_VAR 0 8
15100: PUSH
15101: DOUBLE
15102: LD_INT 1
15104: DEC
15105: ST_TO_ADDR
15106: LD_VAR 0 6
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15174
// begin if tmp < result [ j ] [ 2 ] then
15114: LD_VAR 0 9
15118: PUSH
15119: LD_VAR 0 6
15123: PUSH
15124: LD_VAR 0 8
15128: ARRAY
15129: PUSH
15130: LD_INT 2
15132: ARRAY
15133: LESS
15134: IFFALSE 15172
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15136: LD_ADDR_VAR 0 6
15140: PUSH
15141: LD_VAR 0 6
15145: PPUSH
15146: LD_VAR 0 8
15150: PPUSH
15151: LD_VAR 0 7
15155: PUSH
15156: LD_VAR 0 9
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 2
15169: ST_TO_ADDR
// break ;
15170: GO 15174
// end ; end ;
15172: GO 15111
15174: POP
15175: POP
// end ; end ;
15176: GO 14975
15178: POP
15179: POP
// if result and not asc then
15180: LD_VAR 0 6
15184: PUSH
15185: LD_VAR 0 4
15189: NOT
15190: AND
15191: IFFALSE 15266
// begin tmp := result ;
15193: LD_ADDR_VAR 0 9
15197: PUSH
15198: LD_VAR 0 6
15202: ST_TO_ADDR
// for i = tmp downto 1 do
15203: LD_ADDR_VAR 0 7
15207: PUSH
15208: DOUBLE
15209: LD_VAR 0 9
15213: INC
15214: ST_TO_ADDR
15215: LD_INT 1
15217: PUSH
15218: FOR_DOWNTO
15219: IFFALSE 15264
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15221: LD_ADDR_VAR 0 6
15225: PUSH
15226: LD_VAR 0 6
15230: PPUSH
15231: LD_VAR 0 9
15235: PUSH
15236: LD_VAR 0 7
15240: MINUS
15241: PUSH
15242: LD_INT 1
15244: PLUS
15245: PPUSH
15246: LD_VAR 0 9
15250: PUSH
15251: LD_VAR 0 7
15255: ARRAY
15256: PPUSH
15257: CALL_OW 1
15261: ST_TO_ADDR
15262: GO 15218
15264: POP
15265: POP
// end ; tmp := [ ] ;
15266: LD_ADDR_VAR 0 9
15270: PUSH
15271: EMPTY
15272: ST_TO_ADDR
// if mode then
15273: LD_VAR 0 5
15277: IFFALSE 15346
// begin for i = 1 to result do
15279: LD_ADDR_VAR 0 7
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_VAR 0 6
15293: PUSH
15294: FOR_TO
15295: IFFALSE 15334
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15297: LD_ADDR_VAR 0 9
15301: PUSH
15302: LD_VAR 0 9
15306: PPUSH
15307: LD_VAR 0 7
15311: PPUSH
15312: LD_VAR 0 6
15316: PUSH
15317: LD_VAR 0 7
15321: ARRAY
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: CALL_OW 1
15331: ST_TO_ADDR
15332: GO 15294
15334: POP
15335: POP
// result := tmp ;
15336: LD_ADDR_VAR 0 6
15340: PUSH
15341: LD_VAR 0 9
15345: ST_TO_ADDR
// end ; end ;
15346: LD_VAR 0 6
15350: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15351: LD_INT 0
15353: PPUSH
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
15358: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15359: LD_ADDR_VAR 0 5
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: EMPTY
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: ST_TO_ADDR
// if not x or not y then
15381: LD_VAR 0 2
15385: NOT
15386: PUSH
15387: LD_VAR 0 3
15391: NOT
15392: OR
15393: IFFALSE 15397
// exit ;
15395: GO 17047
// if not range then
15397: LD_VAR 0 4
15401: NOT
15402: IFFALSE 15412
// range := 10 ;
15404: LD_ADDR_VAR 0 4
15408: PUSH
15409: LD_INT 10
15411: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15412: LD_ADDR_VAR 0 8
15416: PUSH
15417: LD_INT 81
15419: PUSH
15420: LD_VAR 0 1
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 92
15431: PUSH
15432: LD_VAR 0 2
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_VAR 0 4
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 69
15479: ST_TO_ADDR
// if not tmp then
15480: LD_VAR 0 8
15484: NOT
15485: IFFALSE 15489
// exit ;
15487: GO 17047
// for i in tmp do
15489: LD_ADDR_VAR 0 6
15493: PUSH
15494: LD_VAR 0 8
15498: PUSH
15499: FOR_IN
15500: IFFALSE 17022
// begin points := [ 0 , 0 , 0 ] ;
15502: LD_ADDR_VAR 0 9
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: LD_INT 0
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: ST_TO_ADDR
// bpoints := 1 ;
15521: LD_ADDR_VAR 0 10
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15529: LD_VAR 0 6
15533: PPUSH
15534: CALL_OW 247
15538: PUSH
15539: LD_INT 1
15541: DOUBLE
15542: EQUAL
15543: IFTRUE 15547
15545: GO 16125
15547: POP
// begin if GetClass ( i ) = 1 then
15548: LD_VAR 0 6
15552: PPUSH
15553: CALL_OW 257
15557: PUSH
15558: LD_INT 1
15560: EQUAL
15561: IFFALSE 15582
// points := [ 10 , 5 , 3 ] ;
15563: LD_ADDR_VAR 0 9
15567: PUSH
15568: LD_INT 10
15570: PUSH
15571: LD_INT 5
15573: PUSH
15574: LD_INT 3
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15582: LD_VAR 0 6
15586: PPUSH
15587: CALL_OW 257
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: LD_INT 4
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: IN
15606: IFFALSE 15627
// points := [ 3 , 2 , 1 ] ;
15608: LD_ADDR_VAR 0 9
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15627: LD_VAR 0 6
15631: PPUSH
15632: CALL_OW 257
15636: PUSH
15637: LD_INT 5
15639: EQUAL
15640: IFFALSE 15661
// points := [ 130 , 5 , 2 ] ;
15642: LD_ADDR_VAR 0 9
15646: PUSH
15647: LD_INT 130
15649: PUSH
15650: LD_INT 5
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15661: LD_VAR 0 6
15665: PPUSH
15666: CALL_OW 257
15670: PUSH
15671: LD_INT 8
15673: EQUAL
15674: IFFALSE 15695
// points := [ 35 , 35 , 30 ] ;
15676: LD_ADDR_VAR 0 9
15680: PUSH
15681: LD_INT 35
15683: PUSH
15684: LD_INT 35
15686: PUSH
15687: LD_INT 30
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15695: LD_VAR 0 6
15699: PPUSH
15700: CALL_OW 257
15704: PUSH
15705: LD_INT 9
15707: EQUAL
15708: IFFALSE 15729
// points := [ 20 , 55 , 40 ] ;
15710: LD_ADDR_VAR 0 9
15714: PUSH
15715: LD_INT 20
15717: PUSH
15718: LD_INT 55
15720: PUSH
15721: LD_INT 40
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15729: LD_VAR 0 6
15733: PPUSH
15734: CALL_OW 257
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: LD_INT 16
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: IN
15749: IFFALSE 15770
// points := [ 5 , 3 , 2 ] ;
15751: LD_ADDR_VAR 0 9
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: LD_INT 3
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15770: LD_VAR 0 6
15774: PPUSH
15775: CALL_OW 257
15779: PUSH
15780: LD_INT 17
15782: EQUAL
15783: IFFALSE 15804
// points := [ 100 , 50 , 75 ] ;
15785: LD_ADDR_VAR 0 9
15789: PUSH
15790: LD_INT 100
15792: PUSH
15793: LD_INT 50
15795: PUSH
15796: LD_INT 75
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15804: LD_VAR 0 6
15808: PPUSH
15809: CALL_OW 257
15813: PUSH
15814: LD_INT 15
15816: EQUAL
15817: IFFALSE 15838
// points := [ 10 , 5 , 3 ] ;
15819: LD_ADDR_VAR 0 9
15823: PUSH
15824: LD_INT 10
15826: PUSH
15827: LD_INT 5
15829: PUSH
15830: LD_INT 3
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15838: LD_VAR 0 6
15842: PPUSH
15843: CALL_OW 257
15847: PUSH
15848: LD_INT 14
15850: EQUAL
15851: IFFALSE 15872
// points := [ 10 , 0 , 0 ] ;
15853: LD_ADDR_VAR 0 9
15857: PUSH
15858: LD_INT 10
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15872: LD_VAR 0 6
15876: PPUSH
15877: CALL_OW 257
15881: PUSH
15882: LD_INT 11
15884: EQUAL
15885: IFFALSE 15906
// points := [ 30 , 10 , 5 ] ;
15887: LD_ADDR_VAR 0 9
15891: PUSH
15892: LD_INT 30
15894: PUSH
15895: LD_INT 10
15897: PUSH
15898: LD_INT 5
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 5
15913: PPUSH
15914: CALL_OW 321
15918: PUSH
15919: LD_INT 2
15921: EQUAL
15922: IFFALSE 15939
// bpoints := bpoints * 1.8 ;
15924: LD_ADDR_VAR 0 10
15928: PUSH
15929: LD_VAR 0 10
15933: PUSH
15934: LD_REAL  1.80000000000000E+0000
15937: MUL
15938: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15939: LD_VAR 0 6
15943: PPUSH
15944: CALL_OW 257
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 4
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: IN
15967: PUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: LD_INT 51
15975: PPUSH
15976: CALL_OW 321
15980: PUSH
15981: LD_INT 2
15983: EQUAL
15984: AND
15985: IFFALSE 16002
// bpoints := bpoints * 1.2 ;
15987: LD_ADDR_VAR 0 10
15991: PUSH
15992: LD_VAR 0 10
15996: PUSH
15997: LD_REAL  1.20000000000000E+0000
16000: MUL
16001: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16002: LD_VAR 0 6
16006: PPUSH
16007: CALL_OW 257
16011: PUSH
16012: LD_INT 5
16014: PUSH
16015: LD_INT 7
16017: PUSH
16018: LD_INT 9
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: IN
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_INT 52
16034: PPUSH
16035: CALL_OW 321
16039: PUSH
16040: LD_INT 2
16042: EQUAL
16043: AND
16044: IFFALSE 16061
// bpoints := bpoints * 1.5 ;
16046: LD_ADDR_VAR 0 10
16050: PUSH
16051: LD_VAR 0 10
16055: PUSH
16056: LD_REAL  1.50000000000000E+0000
16059: MUL
16060: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16061: LD_VAR 0 1
16065: PPUSH
16066: LD_INT 66
16068: PPUSH
16069: CALL_OW 321
16073: PUSH
16074: LD_INT 2
16076: EQUAL
16077: IFFALSE 16094
// bpoints := bpoints * 1.1 ;
16079: LD_ADDR_VAR 0 10
16083: PUSH
16084: LD_VAR 0 10
16088: PUSH
16089: LD_REAL  1.10000000000000E+0000
16092: MUL
16093: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16094: LD_ADDR_VAR 0 10
16098: PUSH
16099: LD_VAR 0 10
16103: PUSH
16104: LD_VAR 0 6
16108: PPUSH
16109: LD_INT 1
16111: PPUSH
16112: CALL_OW 259
16116: PUSH
16117: LD_REAL  1.15000000000000E+0000
16120: MUL
16121: MUL
16122: ST_TO_ADDR
// end ; unit_vehicle :
16123: GO 16951
16125: LD_INT 2
16127: DOUBLE
16128: EQUAL
16129: IFTRUE 16133
16131: GO 16939
16133: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16134: LD_VAR 0 6
16138: PPUSH
16139: CALL_OW 264
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 42
16149: PUSH
16150: LD_INT 24
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: IN
16158: IFFALSE 16179
// points := [ 25 , 5 , 3 ] ;
16160: LD_ADDR_VAR 0 9
16164: PUSH
16165: LD_INT 25
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: LD_INT 3
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16179: LD_VAR 0 6
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_INT 4
16191: PUSH
16192: LD_INT 43
16194: PUSH
16195: LD_INT 25
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: IN
16203: IFFALSE 16224
// points := [ 40 , 15 , 5 ] ;
16205: LD_ADDR_VAR 0 9
16209: PUSH
16210: LD_INT 40
16212: PUSH
16213: LD_INT 15
16215: PUSH
16216: LD_INT 5
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16224: LD_VAR 0 6
16228: PPUSH
16229: CALL_OW 264
16233: PUSH
16234: LD_INT 3
16236: PUSH
16237: LD_INT 23
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: IN
16244: IFFALSE 16265
// points := [ 7 , 25 , 8 ] ;
16246: LD_ADDR_VAR 0 9
16250: PUSH
16251: LD_INT 7
16253: PUSH
16254: LD_INT 25
16256: PUSH
16257: LD_INT 8
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16265: LD_VAR 0 6
16269: PPUSH
16270: CALL_OW 264
16274: PUSH
16275: LD_INT 5
16277: PUSH
16278: LD_INT 27
16280: PUSH
16281: LD_INT 44
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: IN
16289: IFFALSE 16310
// points := [ 14 , 50 , 16 ] ;
16291: LD_ADDR_VAR 0 9
16295: PUSH
16296: LD_INT 14
16298: PUSH
16299: LD_INT 50
16301: PUSH
16302: LD_INT 16
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16310: LD_VAR 0 6
16314: PPUSH
16315: CALL_OW 264
16319: PUSH
16320: LD_INT 6
16322: PUSH
16323: LD_INT 46
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: IN
16330: IFFALSE 16351
// points := [ 32 , 120 , 70 ] ;
16332: LD_ADDR_VAR 0 9
16336: PUSH
16337: LD_INT 32
16339: PUSH
16340: LD_INT 120
16342: PUSH
16343: LD_INT 70
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16351: LD_VAR 0 6
16355: PPUSH
16356: CALL_OW 264
16360: PUSH
16361: LD_INT 7
16363: PUSH
16364: LD_INT 28
16366: PUSH
16367: LD_INT 45
16369: PUSH
16370: LD_INT 92
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: IN
16379: IFFALSE 16400
// points := [ 35 , 20 , 45 ] ;
16381: LD_ADDR_VAR 0 9
16385: PUSH
16386: LD_INT 35
16388: PUSH
16389: LD_INT 20
16391: PUSH
16392: LD_INT 45
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16400: LD_VAR 0 6
16404: PPUSH
16405: CALL_OW 264
16409: PUSH
16410: LD_INT 47
16412: PUSH
16413: EMPTY
16414: LIST
16415: IN
16416: IFFALSE 16437
// points := [ 67 , 45 , 75 ] ;
16418: LD_ADDR_VAR 0 9
16422: PUSH
16423: LD_INT 67
16425: PUSH
16426: LD_INT 45
16428: PUSH
16429: LD_INT 75
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16437: LD_VAR 0 6
16441: PPUSH
16442: CALL_OW 264
16446: PUSH
16447: LD_INT 26
16449: PUSH
16450: EMPTY
16451: LIST
16452: IN
16453: IFFALSE 16474
// points := [ 120 , 30 , 80 ] ;
16455: LD_ADDR_VAR 0 9
16459: PUSH
16460: LD_INT 120
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 80
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16474: LD_VAR 0 6
16478: PPUSH
16479: CALL_OW 264
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: EMPTY
16488: LIST
16489: IN
16490: IFFALSE 16511
// points := [ 40 , 1 , 1 ] ;
16492: LD_ADDR_VAR 0 9
16496: PUSH
16497: LD_INT 40
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16511: LD_VAR 0 6
16515: PPUSH
16516: CALL_OW 264
16520: PUSH
16521: LD_INT 29
16523: PUSH
16524: EMPTY
16525: LIST
16526: IN
16527: IFFALSE 16548
// points := [ 70 , 200 , 400 ] ;
16529: LD_ADDR_VAR 0 9
16533: PUSH
16534: LD_INT 70
16536: PUSH
16537: LD_INT 200
16539: PUSH
16540: LD_INT 400
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16548: LD_VAR 0 6
16552: PPUSH
16553: CALL_OW 264
16557: PUSH
16558: LD_INT 14
16560: PUSH
16561: LD_INT 53
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: IN
16568: IFFALSE 16589
// points := [ 40 , 10 , 20 ] ;
16570: LD_ADDR_VAR 0 9
16574: PUSH
16575: LD_INT 40
16577: PUSH
16578: LD_INT 10
16580: PUSH
16581: LD_INT 20
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16589: LD_VAR 0 6
16593: PPUSH
16594: CALL_OW 264
16598: PUSH
16599: LD_INT 9
16601: PUSH
16602: EMPTY
16603: LIST
16604: IN
16605: IFFALSE 16626
// points := [ 5 , 70 , 20 ] ;
16607: LD_ADDR_VAR 0 9
16611: PUSH
16612: LD_INT 5
16614: PUSH
16615: LD_INT 70
16617: PUSH
16618: LD_INT 20
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16626: LD_VAR 0 6
16630: PPUSH
16631: CALL_OW 264
16635: PUSH
16636: LD_INT 10
16638: PUSH
16639: EMPTY
16640: LIST
16641: IN
16642: IFFALSE 16663
// points := [ 35 , 110 , 70 ] ;
16644: LD_ADDR_VAR 0 9
16648: PUSH
16649: LD_INT 35
16651: PUSH
16652: LD_INT 110
16654: PUSH
16655: LD_INT 70
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16663: LD_VAR 0 6
16667: PPUSH
16668: CALL_OW 265
16672: PUSH
16673: LD_INT 25
16675: EQUAL
16676: IFFALSE 16697
// points := [ 80 , 65 , 100 ] ;
16678: LD_ADDR_VAR 0 9
16682: PUSH
16683: LD_INT 80
16685: PUSH
16686: LD_INT 65
16688: PUSH
16689: LD_INT 100
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16697: LD_VAR 0 6
16701: PPUSH
16702: CALL_OW 263
16706: PUSH
16707: LD_INT 1
16709: EQUAL
16710: IFFALSE 16745
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16712: LD_ADDR_VAR 0 10
16716: PUSH
16717: LD_VAR 0 10
16721: PUSH
16722: LD_VAR 0 6
16726: PPUSH
16727: CALL_OW 311
16731: PPUSH
16732: LD_INT 3
16734: PPUSH
16735: CALL_OW 259
16739: PUSH
16740: LD_INT 4
16742: MUL
16743: MUL
16744: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16745: LD_VAR 0 6
16749: PPUSH
16750: CALL_OW 263
16754: PUSH
16755: LD_INT 2
16757: EQUAL
16758: IFFALSE 16809
// begin j := IsControledBy ( i ) ;
16760: LD_ADDR_VAR 0 7
16764: PUSH
16765: LD_VAR 0 6
16769: PPUSH
16770: CALL_OW 312
16774: ST_TO_ADDR
// if j then
16775: LD_VAR 0 7
16779: IFFALSE 16809
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16781: LD_ADDR_VAR 0 10
16785: PUSH
16786: LD_VAR 0 10
16790: PUSH
16791: LD_VAR 0 7
16795: PPUSH
16796: LD_INT 3
16798: PPUSH
16799: CALL_OW 259
16803: PUSH
16804: LD_INT 3
16806: MUL
16807: MUL
16808: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16809: LD_VAR 0 6
16813: PPUSH
16814: CALL_OW 264
16818: PUSH
16819: LD_INT 5
16821: PUSH
16822: LD_INT 6
16824: PUSH
16825: LD_INT 46
16827: PUSH
16828: LD_INT 44
16830: PUSH
16831: LD_INT 47
16833: PUSH
16834: LD_INT 45
16836: PUSH
16837: LD_INT 28
16839: PUSH
16840: LD_INT 7
16842: PUSH
16843: LD_INT 27
16845: PUSH
16846: LD_INT 29
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: IN
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: LD_INT 52
16869: PPUSH
16870: CALL_OW 321
16874: PUSH
16875: LD_INT 2
16877: EQUAL
16878: AND
16879: IFFALSE 16896
// bpoints := bpoints * 1.2 ;
16881: LD_ADDR_VAR 0 10
16885: PUSH
16886: LD_VAR 0 10
16890: PUSH
16891: LD_REAL  1.20000000000000E+0000
16894: MUL
16895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16896: LD_VAR 0 6
16900: PPUSH
16901: CALL_OW 264
16905: PUSH
16906: LD_INT 6
16908: PUSH
16909: LD_INT 46
16911: PUSH
16912: LD_INT 47
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: IN
16920: IFFALSE 16937
// bpoints := bpoints * 1.2 ;
16922: LD_ADDR_VAR 0 10
16926: PUSH
16927: LD_VAR 0 10
16931: PUSH
16932: LD_REAL  1.20000000000000E+0000
16935: MUL
16936: ST_TO_ADDR
// end ; unit_building :
16937: GO 16951
16939: LD_INT 3
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 16950
16947: POP
// ; end ;
16948: GO 16951
16950: POP
// for j = 1 to 3 do
16951: LD_ADDR_VAR 0 7
16955: PUSH
16956: DOUBLE
16957: LD_INT 1
16959: DEC
16960: ST_TO_ADDR
16961: LD_INT 3
16963: PUSH
16964: FOR_TO
16965: IFFALSE 17018
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16967: LD_ADDR_VAR 0 5
16971: PUSH
16972: LD_VAR 0 5
16976: PPUSH
16977: LD_VAR 0 7
16981: PPUSH
16982: LD_VAR 0 5
16986: PUSH
16987: LD_VAR 0 7
16991: ARRAY
16992: PUSH
16993: LD_VAR 0 9
16997: PUSH
16998: LD_VAR 0 7
17002: ARRAY
17003: PUSH
17004: LD_VAR 0 10
17008: MUL
17009: PLUS
17010: PPUSH
17011: CALL_OW 1
17015: ST_TO_ADDR
17016: GO 16964
17018: POP
17019: POP
// end ;
17020: GO 15499
17022: POP
17023: POP
// result := Replace ( result , 4 , tmp ) ;
17024: LD_ADDR_VAR 0 5
17028: PUSH
17029: LD_VAR 0 5
17033: PPUSH
17034: LD_INT 4
17036: PPUSH
17037: LD_VAR 0 8
17041: PPUSH
17042: CALL_OW 1
17046: ST_TO_ADDR
// end ;
17047: LD_VAR 0 5
17051: RET
// export function DangerAtRange ( unit , range ) ; begin
17052: LD_INT 0
17054: PPUSH
// if not unit then
17055: LD_VAR 0 1
17059: NOT
17060: IFFALSE 17064
// exit ;
17062: GO 17109
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 255
17078: PPUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 250
17088: PPUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 251
17098: PPUSH
17099: LD_VAR 0 2
17103: PPUSH
17104: CALL 15351 0 4
17108: ST_TO_ADDR
// end ;
17109: LD_VAR 0 3
17113: RET
// export function DangerInArea ( side , area ) ; begin
17114: LD_INT 0
17116: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_VAR 0 2
17126: PPUSH
17127: LD_INT 81
17129: PUSH
17130: LD_VAR 0 1
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 70
17143: ST_TO_ADDR
// end ;
17144: LD_VAR 0 3
17148: RET
// export function IsExtension ( b ) ; begin
17149: LD_INT 0
17151: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17152: LD_ADDR_VAR 0 2
17156: PUSH
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 23
17164: PUSH
17165: LD_INT 20
17167: PUSH
17168: LD_INT 22
17170: PUSH
17171: LD_INT 17
17173: PUSH
17174: LD_INT 24
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 19
17182: PUSH
17183: LD_INT 16
17185: PUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 18
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: IN
17204: ST_TO_ADDR
// end ;
17205: LD_VAR 0 2
17209: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17210: LD_INT 0
17212: PPUSH
17213: PPUSH
17214: PPUSH
// result := [ ] ;
17215: LD_ADDR_VAR 0 4
17219: PUSH
17220: EMPTY
17221: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17222: LD_ADDR_VAR 0 5
17226: PUSH
17227: LD_VAR 0 2
17231: PPUSH
17232: LD_INT 21
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PPUSH
17242: CALL_OW 70
17246: ST_TO_ADDR
// if not tmp then
17247: LD_VAR 0 5
17251: NOT
17252: IFFALSE 17256
// exit ;
17254: GO 17320
// if checkLink then
17256: LD_VAR 0 3
17260: IFFALSE 17310
// begin for i in tmp do
17262: LD_ADDR_VAR 0 6
17266: PUSH
17267: LD_VAR 0 5
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17308
// if GetBase ( i ) <> base then
17275: LD_VAR 0 6
17279: PPUSH
17280: CALL_OW 274
17284: PUSH
17285: LD_VAR 0 1
17289: NONEQUAL
17290: IFFALSE 17306
// ComLinkToBase ( base , i ) ;
17292: LD_VAR 0 1
17296: PPUSH
17297: LD_VAR 0 6
17301: PPUSH
17302: CALL_OW 169
17306: GO 17272
17308: POP
17309: POP
// end ; result := tmp ;
17310: LD_ADDR_VAR 0 4
17314: PUSH
17315: LD_VAR 0 5
17319: ST_TO_ADDR
// end ;
17320: LD_VAR 0 4
17324: RET
// export function ComComplete ( units , b ) ; var i ; begin
17325: LD_INT 0
17327: PPUSH
17328: PPUSH
// if not units then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17428
// for i in units do
17338: LD_ADDR_VAR 0 4
17342: PUSH
17343: LD_VAR 0 1
17347: PUSH
17348: FOR_IN
17349: IFFALSE 17426
// if BuildingStatus ( b ) = bs_build then
17351: LD_VAR 0 2
17355: PPUSH
17356: CALL_OW 461
17360: PUSH
17361: LD_INT 1
17363: EQUAL
17364: IFFALSE 17424
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17366: LD_VAR 0 4
17370: PPUSH
17371: LD_STRING h
17373: PUSH
17374: LD_VAR 0 2
17378: PPUSH
17379: CALL_OW 250
17383: PUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 251
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: PPUSH
17420: CALL_OW 446
17424: GO 17348
17426: POP
17427: POP
// end ;
17428: LD_VAR 0 3
17432: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17433: LD_INT 0
17435: PPUSH
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17441: LD_VAR 0 1
17445: NOT
17446: PUSH
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 263
17456: PUSH
17457: LD_INT 2
17459: NONEQUAL
17460: OR
17461: IFFALSE 17465
// exit ;
17463: GO 17781
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17465: LD_ADDR_VAR 0 6
17469: PUSH
17470: LD_INT 22
17472: PUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 255
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 36
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 34
17502: PUSH
17503: LD_INT 31
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PPUSH
17519: CALL_OW 69
17523: ST_TO_ADDR
// if not tmp then
17524: LD_VAR 0 6
17528: NOT
17529: IFFALSE 17533
// exit ;
17531: GO 17781
// result := [ ] ;
17533: LD_ADDR_VAR 0 2
17537: PUSH
17538: EMPTY
17539: ST_TO_ADDR
// for i in tmp do
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_VAR 0 6
17549: PUSH
17550: FOR_IN
17551: IFFALSE 17622
// begin t := UnitsInside ( i ) ;
17553: LD_ADDR_VAR 0 4
17557: PUSH
17558: LD_VAR 0 3
17562: PPUSH
17563: CALL_OW 313
17567: ST_TO_ADDR
// if t then
17568: LD_VAR 0 4
17572: IFFALSE 17620
// for j in t do
17574: LD_ADDR_VAR 0 7
17578: PUSH
17579: LD_VAR 0 4
17583: PUSH
17584: FOR_IN
17585: IFFALSE 17618
// result := Replace ( result , result + 1 , j ) ;
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: LD_VAR 0 2
17596: PPUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_INT 1
17604: PLUS
17605: PPUSH
17606: LD_VAR 0 7
17610: PPUSH
17611: CALL_OW 1
17615: ST_TO_ADDR
17616: GO 17584
17618: POP
17619: POP
// end ;
17620: GO 17550
17622: POP
17623: POP
// if not result then
17624: LD_VAR 0 2
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 17781
// mech := result [ 1 ] ;
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: LD_VAR 0 2
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: ST_TO_ADDR
// if result > 1 then
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 1
17654: GREATER
17655: IFFALSE 17767
// begin for i = 2 to result do
17657: LD_ADDR_VAR 0 3
17661: PUSH
17662: DOUBLE
17663: LD_INT 2
17665: DEC
17666: ST_TO_ADDR
17667: LD_VAR 0 2
17671: PUSH
17672: FOR_TO
17673: IFFALSE 17765
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17675: LD_ADDR_VAR 0 4
17679: PUSH
17680: LD_VAR 0 2
17684: PUSH
17685: LD_VAR 0 3
17689: ARRAY
17690: PPUSH
17691: LD_INT 3
17693: PPUSH
17694: CALL_OW 259
17698: PUSH
17699: LD_VAR 0 2
17703: PUSH
17704: LD_VAR 0 3
17708: ARRAY
17709: PPUSH
17710: CALL_OW 432
17714: MINUS
17715: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17716: LD_VAR 0 4
17720: PUSH
17721: LD_VAR 0 5
17725: PPUSH
17726: LD_INT 3
17728: PPUSH
17729: CALL_OW 259
17733: PUSH
17734: LD_VAR 0 5
17738: PPUSH
17739: CALL_OW 432
17743: MINUS
17744: GREATEREQUAL
17745: IFFALSE 17763
// mech := result [ i ] ;
17747: LD_ADDR_VAR 0 5
17751: PUSH
17752: LD_VAR 0 2
17756: PUSH
17757: LD_VAR 0 3
17761: ARRAY
17762: ST_TO_ADDR
// end ;
17763: GO 17672
17765: POP
17766: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17767: LD_VAR 0 1
17771: PPUSH
17772: LD_VAR 0 5
17776: PPUSH
17777: CALL_OW 135
// end ;
17781: LD_VAR 0 2
17785: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
17793: PPUSH
17794: PPUSH
17795: PPUSH
17796: PPUSH
17797: PPUSH
17798: PPUSH
17799: PPUSH
17800: PPUSH
// result := [ ] ;
17801: LD_ADDR_VAR 0 7
17805: PUSH
17806: EMPTY
17807: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17808: LD_VAR 0 1
17812: PPUSH
17813: CALL_OW 266
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: IN
17828: NOT
17829: IFFALSE 17833
// exit ;
17831: GO 19467
// if name then
17833: LD_VAR 0 3
17837: IFFALSE 17853
// SetBName ( base_dep , name ) ;
17839: LD_VAR 0 1
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: CALL_OW 500
// base := GetBase ( base_dep ) ;
17853: LD_ADDR_VAR 0 15
17857: PUSH
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 274
17867: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17868: LD_ADDR_VAR 0 16
17872: PUSH
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL_OW 255
17882: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17883: LD_ADDR_VAR 0 17
17887: PUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 248
17897: ST_TO_ADDR
// if sources then
17898: LD_VAR 0 5
17902: IFFALSE 17949
// for i = 1 to 3 do
17904: LD_ADDR_VAR 0 8
17908: PUSH
17909: DOUBLE
17910: LD_INT 1
17912: DEC
17913: ST_TO_ADDR
17914: LD_INT 3
17916: PUSH
17917: FOR_TO
17918: IFFALSE 17947
// AddResourceType ( base , i , sources [ i ] ) ;
17920: LD_VAR 0 15
17924: PPUSH
17925: LD_VAR 0 8
17929: PPUSH
17930: LD_VAR 0 5
17934: PUSH
17935: LD_VAR 0 8
17939: ARRAY
17940: PPUSH
17941: CALL_OW 276
17945: GO 17917
17947: POP
17948: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17949: LD_ADDR_VAR 0 18
17953: PUSH
17954: LD_VAR 0 15
17958: PPUSH
17959: LD_VAR 0 2
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL 17210 0 3
17971: ST_TO_ADDR
// InitHc ;
17972: CALL_OW 19
// InitUc ;
17976: CALL_OW 18
// uc_side := side ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_VAR 0 16
17989: ST_TO_ADDR
// uc_nation := nation ;
17990: LD_ADDR_OWVAR 21
17994: PUSH
17995: LD_VAR 0 17
17999: ST_TO_ADDR
// if buildings then
18000: LD_VAR 0 18
18004: IFFALSE 19326
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18006: LD_ADDR_VAR 0 19
18010: PUSH
18011: LD_VAR 0 18
18015: PPUSH
18016: LD_INT 2
18018: PUSH
18019: LD_INT 30
18021: PUSH
18022: LD_INT 29
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 30
18031: PUSH
18032: LD_INT 30
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PPUSH
18044: CALL_OW 72
18048: ST_TO_ADDR
// if tmp then
18049: LD_VAR 0 19
18053: IFFALSE 18101
// for i in tmp do
18055: LD_ADDR_VAR 0 8
18059: PUSH
18060: LD_VAR 0 19
18064: PUSH
18065: FOR_IN
18066: IFFALSE 18099
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18068: LD_VAR 0 8
18072: PPUSH
18073: CALL_OW 250
18077: PPUSH
18078: LD_VAR 0 8
18082: PPUSH
18083: CALL_OW 251
18087: PPUSH
18088: LD_VAR 0 16
18092: PPUSH
18093: CALL_OW 441
18097: GO 18065
18099: POP
18100: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18101: LD_VAR 0 18
18105: PPUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_INT 32
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: LD_INT 33
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: IFFALSE 18226
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18140: LD_ADDR_VAR 0 8
18144: PUSH
18145: LD_VAR 0 18
18149: PPUSH
18150: LD_INT 2
18152: PUSH
18153: LD_INT 30
18155: PUSH
18156: LD_INT 32
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 30
18165: PUSH
18166: LD_INT 33
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: LIST
18177: PPUSH
18178: CALL_OW 72
18182: PUSH
18183: FOR_IN
18184: IFFALSE 18224
// begin if not GetBWeapon ( i ) then
18186: LD_VAR 0 8
18190: PPUSH
18191: CALL_OW 269
18195: NOT
18196: IFFALSE 18222
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18198: LD_VAR 0 8
18202: PPUSH
18203: LD_VAR 0 8
18207: PPUSH
18208: LD_VAR 0 2
18212: PPUSH
18213: CALL 19472 0 2
18217: PPUSH
18218: CALL_OW 431
// end ;
18222: GO 18183
18224: POP
18225: POP
// end ; for i = 1 to personel do
18226: LD_ADDR_VAR 0 8
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_VAR 0 6
18240: PUSH
18241: FOR_TO
18242: IFFALSE 19306
// begin if i > 4 then
18244: LD_VAR 0 8
18248: PUSH
18249: LD_INT 4
18251: GREATER
18252: IFFALSE 18256
// break ;
18254: GO 19306
// case i of 1 :
18256: LD_VAR 0 8
18260: PUSH
18261: LD_INT 1
18263: DOUBLE
18264: EQUAL
18265: IFTRUE 18269
18267: GO 18349
18269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18270: LD_ADDR_VAR 0 12
18274: PUSH
18275: LD_VAR 0 18
18279: PPUSH
18280: LD_INT 22
18282: PUSH
18283: LD_VAR 0 16
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 58
18294: PUSH
18295: EMPTY
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 30
18303: PUSH
18304: LD_INT 32
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 30
18313: PUSH
18314: LD_INT 4
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 5
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: PPUSH
18342: CALL_OW 72
18346: ST_TO_ADDR
18347: GO 18571
18349: LD_INT 2
18351: DOUBLE
18352: EQUAL
18353: IFTRUE 18357
18355: GO 18419
18357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18358: LD_ADDR_VAR 0 12
18362: PUSH
18363: LD_VAR 0 18
18367: PPUSH
18368: LD_INT 22
18370: PUSH
18371: LD_VAR 0 16
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: LD_INT 30
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 30
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PPUSH
18412: CALL_OW 72
18416: ST_TO_ADDR
18417: GO 18571
18419: LD_INT 3
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18489
18427: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18428: LD_ADDR_VAR 0 12
18432: PUSH
18433: LD_VAR 0 18
18437: PPUSH
18438: LD_INT 22
18440: PUSH
18441: LD_VAR 0 16
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: LD_INT 30
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 30
18465: PUSH
18466: LD_INT 3
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PPUSH
18482: CALL_OW 72
18486: ST_TO_ADDR
18487: GO 18571
18489: LD_INT 4
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18570
18497: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18498: LD_ADDR_VAR 0 12
18502: PUSH
18503: LD_VAR 0 18
18507: PPUSH
18508: LD_INT 22
18510: PUSH
18511: LD_VAR 0 16
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: LD_INT 30
18525: PUSH
18526: LD_INT 6
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 30
18535: PUSH
18536: LD_INT 7
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 30
18545: PUSH
18546: LD_INT 8
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PPUSH
18563: CALL_OW 72
18567: ST_TO_ADDR
18568: GO 18571
18570: POP
// if i = 1 then
18571: LD_VAR 0 8
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: IFFALSE 18690
// begin tmp := [ ] ;
18581: LD_ADDR_VAR 0 19
18585: PUSH
18586: EMPTY
18587: ST_TO_ADDR
// for j in f do
18588: LD_ADDR_VAR 0 9
18592: PUSH
18593: LD_VAR 0 12
18597: PUSH
18598: FOR_IN
18599: IFFALSE 18672
// if GetBType ( j ) = b_bunker then
18601: LD_VAR 0 9
18605: PPUSH
18606: CALL_OW 266
18610: PUSH
18611: LD_INT 32
18613: EQUAL
18614: IFFALSE 18641
// tmp := Insert ( tmp , 1 , j ) else
18616: LD_ADDR_VAR 0 19
18620: PUSH
18621: LD_VAR 0 19
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: LD_VAR 0 9
18633: PPUSH
18634: CALL_OW 2
18638: ST_TO_ADDR
18639: GO 18670
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18641: LD_ADDR_VAR 0 19
18645: PUSH
18646: LD_VAR 0 19
18650: PPUSH
18651: LD_VAR 0 19
18655: PUSH
18656: LD_INT 1
18658: PLUS
18659: PPUSH
18660: LD_VAR 0 9
18664: PPUSH
18665: CALL_OW 2
18669: ST_TO_ADDR
18670: GO 18598
18672: POP
18673: POP
// if tmp then
18674: LD_VAR 0 19
18678: IFFALSE 18690
// f := tmp ;
18680: LD_ADDR_VAR 0 12
18684: PUSH
18685: LD_VAR 0 19
18689: ST_TO_ADDR
// end ; x := personel [ i ] ;
18690: LD_ADDR_VAR 0 13
18694: PUSH
18695: LD_VAR 0 6
18699: PUSH
18700: LD_VAR 0 8
18704: ARRAY
18705: ST_TO_ADDR
// if x = - 1 then
18706: LD_VAR 0 13
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: EQUAL
18715: IFFALSE 18924
// begin for j in f do
18717: LD_ADDR_VAR 0 9
18721: PUSH
18722: LD_VAR 0 12
18726: PUSH
18727: FOR_IN
18728: IFFALSE 18920
// repeat InitHc ;
18730: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18734: LD_VAR 0 9
18738: PPUSH
18739: CALL_OW 266
18743: PUSH
18744: LD_INT 5
18746: EQUAL
18747: IFFALSE 18817
// begin if UnitsInside ( j ) < 3 then
18749: LD_VAR 0 9
18753: PPUSH
18754: CALL_OW 313
18758: PUSH
18759: LD_INT 3
18761: LESS
18762: IFFALSE 18798
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18764: LD_INT 0
18766: PPUSH
18767: LD_INT 5
18769: PUSH
18770: LD_INT 8
18772: PUSH
18773: LD_INT 9
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: LIST
18780: PUSH
18781: LD_VAR 0 17
18785: ARRAY
18786: PPUSH
18787: LD_VAR 0 4
18791: PPUSH
18792: CALL_OW 380
18796: GO 18815
// PrepareHuman ( false , i , skill ) ;
18798: LD_INT 0
18800: PPUSH
18801: LD_VAR 0 8
18805: PPUSH
18806: LD_VAR 0 4
18810: PPUSH
18811: CALL_OW 380
// end else
18815: GO 18834
// PrepareHuman ( false , i , skill ) ;
18817: LD_INT 0
18819: PPUSH
18820: LD_VAR 0 8
18824: PPUSH
18825: LD_VAR 0 4
18829: PPUSH
18830: CALL_OW 380
// un := CreateHuman ;
18834: LD_ADDR_VAR 0 14
18838: PUSH
18839: CALL_OW 44
18843: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18844: LD_ADDR_VAR 0 7
18848: PUSH
18849: LD_VAR 0 7
18853: PPUSH
18854: LD_INT 1
18856: PPUSH
18857: LD_VAR 0 14
18861: PPUSH
18862: CALL_OW 2
18866: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18867: LD_VAR 0 14
18871: PPUSH
18872: LD_VAR 0 9
18876: PPUSH
18877: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18881: LD_VAR 0 9
18885: PPUSH
18886: CALL_OW 313
18890: PUSH
18891: LD_INT 6
18893: EQUAL
18894: PUSH
18895: LD_VAR 0 9
18899: PPUSH
18900: CALL_OW 266
18904: PUSH
18905: LD_INT 32
18907: PUSH
18908: LD_INT 31
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: IN
18915: OR
18916: IFFALSE 18730
18918: GO 18727
18920: POP
18921: POP
// end else
18922: GO 19304
// for j = 1 to x do
18924: LD_ADDR_VAR 0 9
18928: PUSH
18929: DOUBLE
18930: LD_INT 1
18932: DEC
18933: ST_TO_ADDR
18934: LD_VAR 0 13
18938: PUSH
18939: FOR_TO
18940: IFFALSE 19302
// begin InitHc ;
18942: CALL_OW 19
// if not f then
18946: LD_VAR 0 12
18950: NOT
18951: IFFALSE 19040
// begin PrepareHuman ( false , i , skill ) ;
18953: LD_INT 0
18955: PPUSH
18956: LD_VAR 0 8
18960: PPUSH
18961: LD_VAR 0 4
18965: PPUSH
18966: CALL_OW 380
// un := CreateHuman ;
18970: LD_ADDR_VAR 0 14
18974: PUSH
18975: CALL_OW 44
18979: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18980: LD_ADDR_VAR 0 7
18984: PUSH
18985: LD_VAR 0 7
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_VAR 0 14
18997: PPUSH
18998: CALL_OW 2
19002: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19003: LD_VAR 0 14
19007: PPUSH
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL_OW 250
19017: PPUSH
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 251
19027: PPUSH
19028: LD_INT 10
19030: PPUSH
19031: LD_INT 0
19033: PPUSH
19034: CALL_OW 50
// continue ;
19038: GO 18939
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19040: LD_VAR 0 12
19044: PUSH
19045: LD_INT 1
19047: ARRAY
19048: PPUSH
19049: CALL_OW 313
19053: PUSH
19054: LD_VAR 0 12
19058: PUSH
19059: LD_INT 1
19061: ARRAY
19062: PPUSH
19063: CALL_OW 266
19067: PUSH
19068: LD_INT 32
19070: PUSH
19071: LD_INT 31
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: IN
19078: AND
19079: PUSH
19080: LD_VAR 0 12
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: PPUSH
19089: CALL_OW 313
19093: PUSH
19094: LD_INT 6
19096: EQUAL
19097: OR
19098: IFFALSE 19118
// f := Delete ( f , 1 ) ;
19100: LD_ADDR_VAR 0 12
19104: PUSH
19105: LD_VAR 0 12
19109: PPUSH
19110: LD_INT 1
19112: PPUSH
19113: CALL_OW 3
19117: ST_TO_ADDR
// if not f then
19118: LD_VAR 0 12
19122: NOT
19123: IFFALSE 19141
// begin x := x + 2 ;
19125: LD_ADDR_VAR 0 13
19129: PUSH
19130: LD_VAR 0 13
19134: PUSH
19135: LD_INT 2
19137: PLUS
19138: ST_TO_ADDR
// continue ;
19139: GO 18939
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19141: LD_VAR 0 12
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: CALL_OW 266
19154: PUSH
19155: LD_INT 5
19157: EQUAL
19158: IFFALSE 19232
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19160: LD_VAR 0 12
19164: PUSH
19165: LD_INT 1
19167: ARRAY
19168: PPUSH
19169: CALL_OW 313
19173: PUSH
19174: LD_INT 3
19176: LESS
19177: IFFALSE 19213
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19179: LD_INT 0
19181: PPUSH
19182: LD_INT 5
19184: PUSH
19185: LD_INT 8
19187: PUSH
19188: LD_INT 9
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PUSH
19196: LD_VAR 0 17
19200: ARRAY
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: CALL_OW 380
19211: GO 19230
// PrepareHuman ( false , i , skill ) ;
19213: LD_INT 0
19215: PPUSH
19216: LD_VAR 0 8
19220: PPUSH
19221: LD_VAR 0 4
19225: PPUSH
19226: CALL_OW 380
// end else
19230: GO 19249
// PrepareHuman ( false , i , skill ) ;
19232: LD_INT 0
19234: PPUSH
19235: LD_VAR 0 8
19239: PPUSH
19240: LD_VAR 0 4
19244: PPUSH
19245: CALL_OW 380
// un := CreateHuman ;
19249: LD_ADDR_VAR 0 14
19253: PUSH
19254: CALL_OW 44
19258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19259: LD_ADDR_VAR 0 7
19263: PUSH
19264: LD_VAR 0 7
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_VAR 0 14
19276: PPUSH
19277: CALL_OW 2
19281: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19282: LD_VAR 0 14
19286: PPUSH
19287: LD_VAR 0 12
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: CALL_OW 52
// end ;
19300: GO 18939
19302: POP
19303: POP
// end ;
19304: GO 18241
19306: POP
19307: POP
// result := result ^ buildings ;
19308: LD_ADDR_VAR 0 7
19312: PUSH
19313: LD_VAR 0 7
19317: PUSH
19318: LD_VAR 0 18
19322: ADD
19323: ST_TO_ADDR
// end else
19324: GO 19467
// begin for i = 1 to personel do
19326: LD_ADDR_VAR 0 8
19330: PUSH
19331: DOUBLE
19332: LD_INT 1
19334: DEC
19335: ST_TO_ADDR
19336: LD_VAR 0 6
19340: PUSH
19341: FOR_TO
19342: IFFALSE 19465
// begin if i > 4 then
19344: LD_VAR 0 8
19348: PUSH
19349: LD_INT 4
19351: GREATER
19352: IFFALSE 19356
// break ;
19354: GO 19465
// x := personel [ i ] ;
19356: LD_ADDR_VAR 0 13
19360: PUSH
19361: LD_VAR 0 6
19365: PUSH
19366: LD_VAR 0 8
19370: ARRAY
19371: ST_TO_ADDR
// if x = - 1 then
19372: LD_VAR 0 13
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: EQUAL
19381: IFFALSE 19385
// continue ;
19383: GO 19341
// PrepareHuman ( false , i , skill ) ;
19385: LD_INT 0
19387: PPUSH
19388: LD_VAR 0 8
19392: PPUSH
19393: LD_VAR 0 4
19397: PPUSH
19398: CALL_OW 380
// un := CreateHuman ;
19402: LD_ADDR_VAR 0 14
19406: PUSH
19407: CALL_OW 44
19411: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19412: LD_VAR 0 14
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 250
19426: PPUSH
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 251
19436: PPUSH
19437: LD_INT 10
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 50
// result := result ^ un ;
19447: LD_ADDR_VAR 0 7
19451: PUSH
19452: LD_VAR 0 7
19456: PUSH
19457: LD_VAR 0 14
19461: ADD
19462: ST_TO_ADDR
// end ;
19463: GO 19341
19465: POP
19466: POP
// end ; end ;
19467: LD_VAR 0 7
19471: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19472: LD_INT 0
19474: PPUSH
19475: PPUSH
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
19481: PPUSH
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
// result := false ;
19490: LD_ADDR_VAR 0 3
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19498: LD_VAR 0 1
19502: NOT
19503: PUSH
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 266
19513: PUSH
19514: LD_INT 32
19516: PUSH
19517: LD_INT 33
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: IN
19524: NOT
19525: OR
19526: IFFALSE 19530
// exit ;
19528: GO 20639
// nat := GetNation ( tower ) ;
19530: LD_ADDR_VAR 0 12
19534: PUSH
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 248
19544: ST_TO_ADDR
// side := GetSide ( tower ) ;
19545: LD_ADDR_VAR 0 16
19549: PUSH
19550: LD_VAR 0 1
19554: PPUSH
19555: CALL_OW 255
19559: ST_TO_ADDR
// x := GetX ( tower ) ;
19560: LD_ADDR_VAR 0 10
19564: PUSH
19565: LD_VAR 0 1
19569: PPUSH
19570: CALL_OW 250
19574: ST_TO_ADDR
// y := GetY ( tower ) ;
19575: LD_ADDR_VAR 0 11
19579: PUSH
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 251
19589: ST_TO_ADDR
// if not x or not y then
19590: LD_VAR 0 10
19594: NOT
19595: PUSH
19596: LD_VAR 0 11
19600: NOT
19601: OR
19602: IFFALSE 19606
// exit ;
19604: GO 20639
// weapon := 0 ;
19606: LD_ADDR_VAR 0 18
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// fac_list := [ ] ;
19614: LD_ADDR_VAR 0 17
19618: PUSH
19619: EMPTY
19620: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19621: LD_ADDR_VAR 0 6
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 274
19635: PPUSH
19636: LD_VAR 0 2
19640: PPUSH
19641: LD_INT 0
19643: PPUSH
19644: CALL 17210 0 3
19648: PPUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 72
19663: ST_TO_ADDR
// if not factories then
19664: LD_VAR 0 6
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 20639
// for i in factories do
19673: LD_ADDR_VAR 0 8
19677: PUSH
19678: LD_VAR 0 6
19682: PUSH
19683: FOR_IN
19684: IFFALSE 19709
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19686: LD_ADDR_VAR 0 17
19690: PUSH
19691: LD_VAR 0 17
19695: PUSH
19696: LD_VAR 0 8
19700: PPUSH
19701: CALL_OW 478
19705: UNION
19706: ST_TO_ADDR
19707: GO 19683
19709: POP
19710: POP
// if not fac_list then
19711: LD_VAR 0 17
19715: NOT
19716: IFFALSE 19720
// exit ;
19718: GO 20639
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: LD_INT 4
19727: PUSH
19728: LD_INT 5
19730: PUSH
19731: LD_INT 9
19733: PUSH
19734: LD_INT 10
19736: PUSH
19737: LD_INT 6
19739: PUSH
19740: LD_INT 7
19742: PUSH
19743: LD_INT 11
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 27
19757: PUSH
19758: LD_INT 28
19760: PUSH
19761: LD_INT 26
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 43
19775: PUSH
19776: LD_INT 44
19778: PUSH
19779: LD_INT 46
19781: PUSH
19782: LD_INT 45
19784: PUSH
19785: LD_INT 47
19787: PUSH
19788: LD_INT 49
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PUSH
19804: LD_VAR 0 12
19808: ARRAY
19809: ST_TO_ADDR
// list := list isect fac_list ;
19810: LD_ADDR_VAR 0 5
19814: PUSH
19815: LD_VAR 0 5
19819: PUSH
19820: LD_VAR 0 17
19824: ISECT
19825: ST_TO_ADDR
// if not list then
19826: LD_VAR 0 5
19830: NOT
19831: IFFALSE 19835
// exit ;
19833: GO 20639
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19835: LD_VAR 0 12
19839: PUSH
19840: LD_INT 3
19842: EQUAL
19843: PUSH
19844: LD_INT 49
19846: PUSH
19847: LD_VAR 0 5
19851: IN
19852: AND
19853: PUSH
19854: LD_INT 31
19856: PPUSH
19857: LD_VAR 0 16
19861: PPUSH
19862: CALL_OW 321
19866: PUSH
19867: LD_INT 2
19869: EQUAL
19870: AND
19871: IFFALSE 19931
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19873: LD_INT 22
19875: PUSH
19876: LD_VAR 0 16
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 35
19887: PUSH
19888: LD_INT 49
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 91
19897: PUSH
19898: LD_VAR 0 1
19902: PUSH
19903: LD_INT 10
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 69
19920: NOT
19921: IFFALSE 19931
// weapon := ru_time_lapser ;
19923: LD_ADDR_VAR 0 18
19927: PUSH
19928: LD_INT 49
19930: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19931: LD_VAR 0 12
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: IN
19946: PUSH
19947: LD_INT 11
19949: PUSH
19950: LD_VAR 0 5
19954: IN
19955: PUSH
19956: LD_INT 30
19958: PUSH
19959: LD_VAR 0 5
19963: IN
19964: OR
19965: AND
19966: PUSH
19967: LD_INT 6
19969: PPUSH
19970: LD_VAR 0 16
19974: PPUSH
19975: CALL_OW 321
19979: PUSH
19980: LD_INT 2
19982: EQUAL
19983: AND
19984: IFFALSE 20149
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19986: LD_INT 22
19988: PUSH
19989: LD_VAR 0 16
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: LD_INT 35
20003: PUSH
20004: LD_INT 11
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 35
20013: PUSH
20014: LD_INT 30
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 91
20028: PUSH
20029: LD_VAR 0 1
20033: PUSH
20034: LD_INT 18
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: PPUSH
20047: CALL_OW 69
20051: NOT
20052: PUSH
20053: LD_INT 22
20055: PUSH
20056: LD_VAR 0 16
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: LD_INT 30
20070: PUSH
20071: LD_INT 32
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: LD_INT 33
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 91
20095: PUSH
20096: LD_VAR 0 1
20100: PUSH
20101: LD_INT 12
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: PPUSH
20117: CALL_OW 69
20121: PUSH
20122: LD_INT 2
20124: GREATER
20125: AND
20126: IFFALSE 20149
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20128: LD_ADDR_VAR 0 18
20132: PUSH
20133: LD_INT 11
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_VAR 0 12
20147: ARRAY
20148: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20149: LD_VAR 0 18
20153: NOT
20154: PUSH
20155: LD_INT 40
20157: PPUSH
20158: LD_VAR 0 16
20162: PPUSH
20163: CALL_OW 321
20167: PUSH
20168: LD_INT 2
20170: EQUAL
20171: AND
20172: PUSH
20173: LD_INT 7
20175: PUSH
20176: LD_VAR 0 5
20180: IN
20181: PUSH
20182: LD_INT 28
20184: PUSH
20185: LD_VAR 0 5
20189: IN
20190: OR
20191: PUSH
20192: LD_INT 45
20194: PUSH
20195: LD_VAR 0 5
20199: IN
20200: OR
20201: AND
20202: IFFALSE 20456
// begin hex := GetHexInfo ( x , y ) ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_VAR 0 10
20213: PPUSH
20214: LD_VAR 0 11
20218: PPUSH
20219: CALL_OW 546
20223: ST_TO_ADDR
// if hex [ 1 ] then
20224: LD_VAR 0 4
20228: PUSH
20229: LD_INT 1
20231: ARRAY
20232: IFFALSE 20236
// exit ;
20234: GO 20639
// height := hex [ 2 ] ;
20236: LD_ADDR_VAR 0 15
20240: PUSH
20241: LD_VAR 0 4
20245: PUSH
20246: LD_INT 2
20248: ARRAY
20249: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20250: LD_ADDR_VAR 0 14
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 3
20263: PUSH
20264: LD_INT 5
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: ST_TO_ADDR
// for i in tmp do
20273: LD_ADDR_VAR 0 8
20277: PUSH
20278: LD_VAR 0 14
20282: PUSH
20283: FOR_IN
20284: IFFALSE 20454
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20286: LD_ADDR_VAR 0 9
20290: PUSH
20291: LD_VAR 0 10
20295: PPUSH
20296: LD_VAR 0 8
20300: PPUSH
20301: LD_INT 5
20303: PPUSH
20304: CALL_OW 272
20308: PUSH
20309: LD_VAR 0 11
20313: PPUSH
20314: LD_VAR 0 8
20318: PPUSH
20319: LD_INT 5
20321: PPUSH
20322: CALL_OW 273
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20331: LD_VAR 0 9
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PPUSH
20340: LD_VAR 0 9
20344: PUSH
20345: LD_INT 2
20347: ARRAY
20348: PPUSH
20349: CALL_OW 488
20353: IFFALSE 20452
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20355: LD_ADDR_VAR 0 4
20359: PUSH
20360: LD_VAR 0 9
20364: PUSH
20365: LD_INT 1
20367: ARRAY
20368: PPUSH
20369: LD_VAR 0 9
20373: PUSH
20374: LD_INT 2
20376: ARRAY
20377: PPUSH
20378: CALL_OW 546
20382: ST_TO_ADDR
// if hex [ 1 ] then
20383: LD_VAR 0 4
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: IFFALSE 20395
// continue ;
20393: GO 20283
// h := hex [ 2 ] ;
20395: LD_ADDR_VAR 0 13
20399: PUSH
20400: LD_VAR 0 4
20404: PUSH
20405: LD_INT 2
20407: ARRAY
20408: ST_TO_ADDR
// if h + 7 < height then
20409: LD_VAR 0 13
20413: PUSH
20414: LD_INT 7
20416: PLUS
20417: PUSH
20418: LD_VAR 0 15
20422: LESS
20423: IFFALSE 20452
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20425: LD_ADDR_VAR 0 18
20429: PUSH
20430: LD_INT 7
20432: PUSH
20433: LD_INT 28
20435: PUSH
20436: LD_INT 45
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: LD_VAR 0 12
20448: ARRAY
20449: ST_TO_ADDR
// break ;
20450: GO 20454
// end ; end ; end ;
20452: GO 20283
20454: POP
20455: POP
// end ; if not weapon then
20456: LD_VAR 0 18
20460: NOT
20461: IFFALSE 20521
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20463: LD_ADDR_VAR 0 5
20467: PUSH
20468: LD_VAR 0 5
20472: PUSH
20473: LD_INT 11
20475: PUSH
20476: LD_INT 30
20478: PUSH
20479: LD_INT 49
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: DIFF
20487: ST_TO_ADDR
// if not list then
20488: LD_VAR 0 5
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20639
// weapon := list [ rand ( 1 , list ) ] ;
20497: LD_ADDR_VAR 0 18
20501: PUSH
20502: LD_VAR 0 5
20506: PUSH
20507: LD_INT 1
20509: PPUSH
20510: LD_VAR 0 5
20514: PPUSH
20515: CALL_OW 12
20519: ARRAY
20520: ST_TO_ADDR
// end ; if weapon then
20521: LD_VAR 0 18
20525: IFFALSE 20639
// begin tmp := CostOfWeapon ( weapon ) ;
20527: LD_ADDR_VAR 0 14
20531: PUSH
20532: LD_VAR 0 18
20536: PPUSH
20537: CALL_OW 451
20541: ST_TO_ADDR
// j := GetBase ( tower ) ;
20542: LD_ADDR_VAR 0 9
20546: PUSH
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL_OW 274
20556: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20557: LD_VAR 0 9
20561: PPUSH
20562: LD_INT 1
20564: PPUSH
20565: CALL_OW 275
20569: PUSH
20570: LD_VAR 0 14
20574: PUSH
20575: LD_INT 1
20577: ARRAY
20578: GREATEREQUAL
20579: PUSH
20580: LD_VAR 0 9
20584: PPUSH
20585: LD_INT 2
20587: PPUSH
20588: CALL_OW 275
20592: PUSH
20593: LD_VAR 0 14
20597: PUSH
20598: LD_INT 2
20600: ARRAY
20601: GREATEREQUAL
20602: AND
20603: PUSH
20604: LD_VAR 0 9
20608: PPUSH
20609: LD_INT 3
20611: PPUSH
20612: CALL_OW 275
20616: PUSH
20617: LD_VAR 0 14
20621: PUSH
20622: LD_INT 3
20624: ARRAY
20625: GREATEREQUAL
20626: AND
20627: IFFALSE 20639
// result := weapon ;
20629: LD_ADDR_VAR 0 3
20633: PUSH
20634: LD_VAR 0 18
20638: ST_TO_ADDR
// end ; end ;
20639: LD_VAR 0 3
20643: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20644: LD_INT 0
20646: PPUSH
20647: PPUSH
// result := true ;
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_INT 1
20655: ST_TO_ADDR
// if array1 = array2 then
20656: LD_VAR 0 1
20660: PUSH
20661: LD_VAR 0 2
20665: EQUAL
20666: IFFALSE 20726
// begin for i = 1 to array1 do
20668: LD_ADDR_VAR 0 4
20672: PUSH
20673: DOUBLE
20674: LD_INT 1
20676: DEC
20677: ST_TO_ADDR
20678: LD_VAR 0 1
20682: PUSH
20683: FOR_TO
20684: IFFALSE 20722
// if array1 [ i ] <> array2 [ i ] then
20686: LD_VAR 0 1
20690: PUSH
20691: LD_VAR 0 4
20695: ARRAY
20696: PUSH
20697: LD_VAR 0 2
20701: PUSH
20702: LD_VAR 0 4
20706: ARRAY
20707: NONEQUAL
20708: IFFALSE 20720
// begin result := false ;
20710: LD_ADDR_VAR 0 3
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// break ;
20718: GO 20722
// end ;
20720: GO 20683
20722: POP
20723: POP
// end else
20724: GO 20734
// result := false ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// end ;
20734: LD_VAR 0 3
20738: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20739: LD_INT 0
20741: PPUSH
20742: PPUSH
// if not array1 or not array2 then
20743: LD_VAR 0 1
20747: NOT
20748: PUSH
20749: LD_VAR 0 2
20753: NOT
20754: OR
20755: IFFALSE 20759
// exit ;
20757: GO 20823
// result := true ;
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// for i = 1 to array1 do
20767: LD_ADDR_VAR 0 4
20771: PUSH
20772: DOUBLE
20773: LD_INT 1
20775: DEC
20776: ST_TO_ADDR
20777: LD_VAR 0 1
20781: PUSH
20782: FOR_TO
20783: IFFALSE 20821
// if array1 [ i ] <> array2 [ i ] then
20785: LD_VAR 0 1
20789: PUSH
20790: LD_VAR 0 4
20794: ARRAY
20795: PUSH
20796: LD_VAR 0 2
20800: PUSH
20801: LD_VAR 0 4
20805: ARRAY
20806: NONEQUAL
20807: IFFALSE 20819
// begin result := false ;
20809: LD_ADDR_VAR 0 3
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// break ;
20817: GO 20821
// end ;
20819: GO 20782
20821: POP
20822: POP
// end ;
20823: LD_VAR 0 3
20827: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
20832: PPUSH
// pom := GetBase ( fac ) ;
20833: LD_ADDR_VAR 0 5
20837: PUSH
20838: LD_VAR 0 1
20842: PPUSH
20843: CALL_OW 274
20847: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20848: LD_ADDR_VAR 0 4
20852: PUSH
20853: LD_VAR 0 2
20857: PUSH
20858: LD_INT 1
20860: ARRAY
20861: PPUSH
20862: LD_VAR 0 2
20866: PUSH
20867: LD_INT 2
20869: ARRAY
20870: PPUSH
20871: LD_VAR 0 2
20875: PUSH
20876: LD_INT 3
20878: ARRAY
20879: PPUSH
20880: LD_VAR 0 2
20884: PUSH
20885: LD_INT 4
20887: ARRAY
20888: PPUSH
20889: CALL_OW 449
20893: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20894: LD_ADDR_VAR 0 3
20898: PUSH
20899: LD_VAR 0 5
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 275
20911: PUSH
20912: LD_VAR 0 4
20916: PUSH
20917: LD_INT 1
20919: ARRAY
20920: GREATEREQUAL
20921: PUSH
20922: LD_VAR 0 5
20926: PPUSH
20927: LD_INT 2
20929: PPUSH
20930: CALL_OW 275
20934: PUSH
20935: LD_VAR 0 4
20939: PUSH
20940: LD_INT 2
20942: ARRAY
20943: GREATEREQUAL
20944: AND
20945: PUSH
20946: LD_VAR 0 5
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 275
20958: PUSH
20959: LD_VAR 0 4
20963: PUSH
20964: LD_INT 3
20966: ARRAY
20967: GREATEREQUAL
20968: AND
20969: ST_TO_ADDR
// end ;
20970: LD_VAR 0 3
20974: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20975: LD_INT 0
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
// pom := GetBase ( building ) ;
20981: LD_ADDR_VAR 0 3
20985: PUSH
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL_OW 274
20995: ST_TO_ADDR
// if not pom then
20996: LD_VAR 0 3
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21175
// btype := GetBType ( building ) ;
21005: LD_ADDR_VAR 0 5
21009: PUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 266
21019: ST_TO_ADDR
// if btype = b_armoury then
21020: LD_VAR 0 5
21024: PUSH
21025: LD_INT 4
21027: EQUAL
21028: IFFALSE 21038
// btype := b_barracks ;
21030: LD_ADDR_VAR 0 5
21034: PUSH
21035: LD_INT 5
21037: ST_TO_ADDR
// if btype = b_depot then
21038: LD_VAR 0 5
21042: PUSH
21043: LD_INT 0
21045: EQUAL
21046: IFFALSE 21056
// btype := b_warehouse ;
21048: LD_ADDR_VAR 0 5
21052: PUSH
21053: LD_INT 1
21055: ST_TO_ADDR
// if btype = b_workshop then
21056: LD_VAR 0 5
21060: PUSH
21061: LD_INT 2
21063: EQUAL
21064: IFFALSE 21074
// btype := b_factory ;
21066: LD_ADDR_VAR 0 5
21070: PUSH
21071: LD_INT 3
21073: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21074: LD_ADDR_VAR 0 4
21078: PUSH
21079: LD_VAR 0 5
21083: PPUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 248
21093: PPUSH
21094: CALL_OW 450
21098: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21099: LD_ADDR_VAR 0 2
21103: PUSH
21104: LD_VAR 0 3
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 275
21116: PUSH
21117: LD_VAR 0 4
21121: PUSH
21122: LD_INT 1
21124: ARRAY
21125: GREATEREQUAL
21126: PUSH
21127: LD_VAR 0 3
21131: PPUSH
21132: LD_INT 2
21134: PPUSH
21135: CALL_OW 275
21139: PUSH
21140: LD_VAR 0 4
21144: PUSH
21145: LD_INT 2
21147: ARRAY
21148: GREATEREQUAL
21149: AND
21150: PUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: LD_INT 3
21158: PPUSH
21159: CALL_OW 275
21163: PUSH
21164: LD_VAR 0 4
21168: PUSH
21169: LD_INT 3
21171: ARRAY
21172: GREATEREQUAL
21173: AND
21174: ST_TO_ADDR
// end ;
21175: LD_VAR 0 2
21179: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21180: LD_INT 0
21182: PPUSH
21183: PPUSH
21184: PPUSH
// pom := GetBase ( building ) ;
21185: LD_ADDR_VAR 0 4
21189: PUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 274
21199: ST_TO_ADDR
// if not pom then
21200: LD_VAR 0 4
21204: NOT
21205: IFFALSE 21209
// exit ;
21207: GO 21310
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21209: LD_ADDR_VAR 0 5
21213: PUSH
21214: LD_VAR 0 2
21218: PPUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: CALL_OW 248
21228: PPUSH
21229: CALL_OW 450
21233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21234: LD_ADDR_VAR 0 3
21238: PUSH
21239: LD_VAR 0 4
21243: PPUSH
21244: LD_INT 1
21246: PPUSH
21247: CALL_OW 275
21251: PUSH
21252: LD_VAR 0 5
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: GREATEREQUAL
21261: PUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_INT 2
21269: PPUSH
21270: CALL_OW 275
21274: PUSH
21275: LD_VAR 0 5
21279: PUSH
21280: LD_INT 2
21282: ARRAY
21283: GREATEREQUAL
21284: AND
21285: PUSH
21286: LD_VAR 0 4
21290: PPUSH
21291: LD_INT 3
21293: PPUSH
21294: CALL_OW 275
21298: PUSH
21299: LD_VAR 0 5
21303: PUSH
21304: LD_INT 3
21306: ARRAY
21307: GREATEREQUAL
21308: AND
21309: ST_TO_ADDR
// end ;
21310: LD_VAR 0 3
21314: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
// result := false ;
21328: LD_ADDR_VAR 0 8
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21336: LD_VAR 0 5
21340: NOT
21341: PUSH
21342: LD_VAR 0 1
21346: NOT
21347: OR
21348: PUSH
21349: LD_VAR 0 2
21353: NOT
21354: OR
21355: PUSH
21356: LD_VAR 0 3
21360: NOT
21361: OR
21362: IFFALSE 21366
// exit ;
21364: GO 22180
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21366: LD_ADDR_VAR 0 14
21370: PUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_VAR 0 2
21380: PPUSH
21381: LD_VAR 0 3
21385: PPUSH
21386: LD_VAR 0 4
21390: PPUSH
21391: LD_VAR 0 5
21395: PUSH
21396: LD_INT 1
21398: ARRAY
21399: PPUSH
21400: CALL_OW 248
21404: PPUSH
21405: LD_INT 0
21407: PPUSH
21408: CALL 23433 0 6
21412: ST_TO_ADDR
// if not hexes then
21413: LD_VAR 0 14
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 22180
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21422: LD_ADDR_VAR 0 17
21426: PUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: LD_INT 22
21434: PUSH
21435: LD_VAR 0 13
21439: PPUSH
21440: CALL_OW 255
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: LD_INT 30
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 30
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PPUSH
21481: CALL_OW 72
21485: ST_TO_ADDR
// for i = 1 to hexes do
21486: LD_ADDR_VAR 0 9
21490: PUSH
21491: DOUBLE
21492: LD_INT 1
21494: DEC
21495: ST_TO_ADDR
21496: LD_VAR 0 14
21500: PUSH
21501: FOR_TO
21502: IFFALSE 22178
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21504: LD_ADDR_VAR 0 13
21508: PUSH
21509: LD_VAR 0 14
21513: PUSH
21514: LD_VAR 0 9
21518: ARRAY
21519: PUSH
21520: LD_INT 1
21522: ARRAY
21523: PPUSH
21524: LD_VAR 0 14
21528: PUSH
21529: LD_VAR 0 9
21533: ARRAY
21534: PUSH
21535: LD_INT 2
21537: ARRAY
21538: PPUSH
21539: CALL_OW 428
21543: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21544: LD_VAR 0 14
21548: PUSH
21549: LD_VAR 0 9
21553: ARRAY
21554: PUSH
21555: LD_INT 1
21557: ARRAY
21558: PPUSH
21559: LD_VAR 0 14
21563: PUSH
21564: LD_VAR 0 9
21568: ARRAY
21569: PUSH
21570: LD_INT 2
21572: ARRAY
21573: PPUSH
21574: CALL_OW 351
21578: PUSH
21579: LD_VAR 0 14
21583: PUSH
21584: LD_VAR 0 9
21588: ARRAY
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PPUSH
21594: LD_VAR 0 14
21598: PUSH
21599: LD_VAR 0 9
21603: ARRAY
21604: PUSH
21605: LD_INT 2
21607: ARRAY
21608: PPUSH
21609: CALL_OW 488
21613: NOT
21614: OR
21615: PUSH
21616: LD_VAR 0 13
21620: PPUSH
21621: CALL_OW 247
21625: PUSH
21626: LD_INT 3
21628: EQUAL
21629: OR
21630: IFFALSE 21636
// exit ;
21632: POP
21633: POP
21634: GO 22180
// if not tmp then
21636: LD_VAR 0 13
21640: NOT
21641: IFFALSE 21645
// continue ;
21643: GO 21501
// result := true ;
21645: LD_ADDR_VAR 0 8
21649: PUSH
21650: LD_INT 1
21652: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21653: LD_VAR 0 6
21657: PUSH
21658: LD_VAR 0 13
21662: PPUSH
21663: CALL_OW 247
21667: PUSH
21668: LD_INT 2
21670: EQUAL
21671: AND
21672: PUSH
21673: LD_VAR 0 13
21677: PPUSH
21678: CALL_OW 263
21682: PUSH
21683: LD_INT 1
21685: EQUAL
21686: AND
21687: IFFALSE 21851
// begin if IsDrivenBy ( tmp ) then
21689: LD_VAR 0 13
21693: PPUSH
21694: CALL_OW 311
21698: IFFALSE 21702
// continue ;
21700: GO 21501
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21702: LD_VAR 0 6
21706: PPUSH
21707: LD_INT 3
21709: PUSH
21710: LD_INT 60
21712: PUSH
21713: EMPTY
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 3
21722: PUSH
21723: LD_INT 55
21725: PUSH
21726: EMPTY
21727: LIST
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PPUSH
21737: CALL_OW 72
21741: IFFALSE 21849
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21743: LD_ADDR_VAR 0 18
21747: PUSH
21748: LD_VAR 0 6
21752: PPUSH
21753: LD_INT 3
21755: PUSH
21756: LD_INT 60
21758: PUSH
21759: EMPTY
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 3
21768: PUSH
21769: LD_INT 55
21771: PUSH
21772: EMPTY
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: CALL_OW 72
21787: PUSH
21788: LD_INT 1
21790: ARRAY
21791: ST_TO_ADDR
// if IsInUnit ( driver ) then
21792: LD_VAR 0 18
21796: PPUSH
21797: CALL_OW 310
21801: IFFALSE 21812
// ComExit ( driver ) ;
21803: LD_VAR 0 18
21807: PPUSH
21808: CALL 47234 0 1
// AddComEnterUnit ( driver , tmp ) ;
21812: LD_VAR 0 18
21816: PPUSH
21817: LD_VAR 0 13
21821: PPUSH
21822: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21826: LD_VAR 0 18
21830: PPUSH
21831: LD_VAR 0 7
21835: PPUSH
21836: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21840: LD_VAR 0 18
21844: PPUSH
21845: CALL_OW 181
// end ; continue ;
21849: GO 21501
// end ; if not cleaners or not tmp in cleaners then
21851: LD_VAR 0 6
21855: NOT
21856: PUSH
21857: LD_VAR 0 13
21861: PUSH
21862: LD_VAR 0 6
21866: IN
21867: NOT
21868: OR
21869: IFFALSE 22176
// begin if dep then
21871: LD_VAR 0 17
21875: IFFALSE 22011
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21877: LD_ADDR_VAR 0 16
21881: PUSH
21882: LD_VAR 0 17
21886: PUSH
21887: LD_INT 1
21889: ARRAY
21890: PPUSH
21891: CALL_OW 250
21895: PPUSH
21896: LD_VAR 0 17
21900: PUSH
21901: LD_INT 1
21903: ARRAY
21904: PPUSH
21905: CALL_OW 254
21909: PPUSH
21910: LD_INT 5
21912: PPUSH
21913: CALL_OW 272
21917: PUSH
21918: LD_VAR 0 17
21922: PUSH
21923: LD_INT 1
21925: ARRAY
21926: PPUSH
21927: CALL_OW 251
21931: PPUSH
21932: LD_VAR 0 17
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: CALL_OW 254
21945: PPUSH
21946: LD_INT 5
21948: PPUSH
21949: CALL_OW 273
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21958: LD_VAR 0 16
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PPUSH
21967: LD_VAR 0 16
21971: PUSH
21972: LD_INT 2
21974: ARRAY
21975: PPUSH
21976: CALL_OW 488
21980: IFFALSE 22011
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21982: LD_VAR 0 13
21986: PPUSH
21987: LD_VAR 0 16
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: LD_VAR 0 16
22000: PUSH
22001: LD_INT 2
22003: ARRAY
22004: PPUSH
22005: CALL_OW 111
// continue ;
22009: GO 21501
// end ; end ; r := GetDir ( tmp ) ;
22011: LD_ADDR_VAR 0 15
22015: PUSH
22016: LD_VAR 0 13
22020: PPUSH
22021: CALL_OW 254
22025: ST_TO_ADDR
// if r = 5 then
22026: LD_VAR 0 15
22030: PUSH
22031: LD_INT 5
22033: EQUAL
22034: IFFALSE 22044
// r := 0 ;
22036: LD_ADDR_VAR 0 15
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
// for j = r to 5 do
22044: LD_ADDR_VAR 0 10
22048: PUSH
22049: DOUBLE
22050: LD_VAR 0 15
22054: DEC
22055: ST_TO_ADDR
22056: LD_INT 5
22058: PUSH
22059: FOR_TO
22060: IFFALSE 22174
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22062: LD_ADDR_VAR 0 11
22066: PUSH
22067: LD_VAR 0 13
22071: PPUSH
22072: CALL_OW 250
22076: PPUSH
22077: LD_VAR 0 10
22081: PPUSH
22082: LD_INT 2
22084: PPUSH
22085: CALL_OW 272
22089: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22090: LD_ADDR_VAR 0 12
22094: PUSH
22095: LD_VAR 0 13
22099: PPUSH
22100: CALL_OW 251
22104: PPUSH
22105: LD_VAR 0 10
22109: PPUSH
22110: LD_INT 2
22112: PPUSH
22113: CALL_OW 273
22117: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22118: LD_VAR 0 11
22122: PPUSH
22123: LD_VAR 0 12
22127: PPUSH
22128: CALL_OW 488
22132: PUSH
22133: LD_VAR 0 11
22137: PPUSH
22138: LD_VAR 0 12
22142: PPUSH
22143: CALL_OW 428
22147: NOT
22148: AND
22149: IFFALSE 22172
// begin ComMoveXY ( tmp , _x , _y ) ;
22151: LD_VAR 0 13
22155: PPUSH
22156: LD_VAR 0 11
22160: PPUSH
22161: LD_VAR 0 12
22165: PPUSH
22166: CALL_OW 111
// break ;
22170: GO 22174
// end ; end ;
22172: GO 22059
22174: POP
22175: POP
// end ; end ;
22176: GO 21501
22178: POP
22179: POP
// end ;
22180: LD_VAR 0 8
22184: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22185: LD_INT 0
22187: PPUSH
// result := true ;
22188: LD_ADDR_VAR 0 3
22192: PUSH
22193: LD_INT 1
22195: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22196: LD_VAR 0 2
22200: PUSH
22201: LD_INT 24
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22215
22207: LD_INT 33
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22240
22215: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: LD_INT 32
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 321
22233: PUSH
22234: LD_INT 2
22236: EQUAL
22237: ST_TO_ADDR
22238: GO 22556
22240: LD_INT 20
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22248
22246: GO 22273
22248: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22249: LD_ADDR_VAR 0 3
22253: PUSH
22254: LD_INT 6
22256: PPUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 321
22266: PUSH
22267: LD_INT 2
22269: EQUAL
22270: ST_TO_ADDR
22271: GO 22556
22273: LD_INT 22
22275: DOUBLE
22276: EQUAL
22277: IFTRUE 22287
22279: LD_INT 36
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22312
22287: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22288: LD_ADDR_VAR 0 3
22292: PUSH
22293: LD_INT 15
22295: PPUSH
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 321
22305: PUSH
22306: LD_INT 2
22308: EQUAL
22309: ST_TO_ADDR
22310: GO 22556
22312: LD_INT 30
22314: DOUBLE
22315: EQUAL
22316: IFTRUE 22320
22318: GO 22345
22320: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22321: LD_ADDR_VAR 0 3
22325: PUSH
22326: LD_INT 20
22328: PPUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 321
22338: PUSH
22339: LD_INT 2
22341: EQUAL
22342: ST_TO_ADDR
22343: GO 22556
22345: LD_INT 28
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22359
22351: LD_INT 21
22353: DOUBLE
22354: EQUAL
22355: IFTRUE 22359
22357: GO 22384
22359: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22360: LD_ADDR_VAR 0 3
22364: PUSH
22365: LD_INT 21
22367: PPUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL_OW 321
22377: PUSH
22378: LD_INT 2
22380: EQUAL
22381: ST_TO_ADDR
22382: GO 22556
22384: LD_INT 16
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22417
22392: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22393: LD_ADDR_VAR 0 3
22397: PUSH
22398: LD_INT 84
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 321
22410: PUSH
22411: LD_INT 2
22413: EQUAL
22414: ST_TO_ADDR
22415: GO 22556
22417: LD_INT 19
22419: DOUBLE
22420: EQUAL
22421: IFTRUE 22431
22423: LD_INT 23
22425: DOUBLE
22426: EQUAL
22427: IFTRUE 22431
22429: GO 22456
22431: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22432: LD_ADDR_VAR 0 3
22436: PUSH
22437: LD_INT 83
22439: PPUSH
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 321
22449: PUSH
22450: LD_INT 2
22452: EQUAL
22453: ST_TO_ADDR
22454: GO 22556
22456: LD_INT 17
22458: DOUBLE
22459: EQUAL
22460: IFTRUE 22464
22462: GO 22489
22464: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: LD_INT 39
22472: PPUSH
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 321
22482: PUSH
22483: LD_INT 2
22485: EQUAL
22486: ST_TO_ADDR
22487: GO 22556
22489: LD_INT 18
22491: DOUBLE
22492: EQUAL
22493: IFTRUE 22497
22495: GO 22522
22497: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: LD_INT 40
22505: PPUSH
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL_OW 321
22515: PUSH
22516: LD_INT 2
22518: EQUAL
22519: ST_TO_ADDR
22520: GO 22556
22522: LD_INT 27
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 22555
22530: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22531: LD_ADDR_VAR 0 3
22535: PUSH
22536: LD_INT 35
22538: PPUSH
22539: LD_VAR 0 1
22543: PPUSH
22544: CALL_OW 321
22548: PUSH
22549: LD_INT 2
22551: EQUAL
22552: ST_TO_ADDR
22553: GO 22556
22555: POP
// end ;
22556: LD_VAR 0 3
22560: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22561: LD_INT 0
22563: PPUSH
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
22568: PPUSH
22569: PPUSH
22570: PPUSH
22571: PPUSH
22572: PPUSH
22573: PPUSH
// result := false ;
22574: LD_ADDR_VAR 0 6
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
// if btype = b_depot then
22582: LD_VAR 0 2
22586: PUSH
22587: LD_INT 0
22589: EQUAL
22590: IFFALSE 22602
// begin result := true ;
22592: LD_ADDR_VAR 0 6
22596: PUSH
22597: LD_INT 1
22599: ST_TO_ADDR
// exit ;
22600: GO 23428
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22602: LD_VAR 0 1
22606: NOT
22607: PUSH
22608: LD_VAR 0 1
22612: PPUSH
22613: CALL_OW 266
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: IN
22628: NOT
22629: OR
22630: PUSH
22631: LD_VAR 0 2
22635: NOT
22636: OR
22637: PUSH
22638: LD_VAR 0 5
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: LD_INT 4
22657: PUSH
22658: LD_INT 5
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: IN
22669: NOT
22670: OR
22671: PUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: LD_VAR 0 4
22681: PPUSH
22682: CALL_OW 488
22686: NOT
22687: OR
22688: IFFALSE 22692
// exit ;
22690: GO 23428
// side := GetSide ( depot ) ;
22692: LD_ADDR_VAR 0 9
22696: PUSH
22697: LD_VAR 0 1
22701: PPUSH
22702: CALL_OW 255
22706: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22707: LD_VAR 0 9
22711: PPUSH
22712: LD_VAR 0 2
22716: PPUSH
22717: CALL 22185 0 2
22721: NOT
22722: IFFALSE 22726
// exit ;
22724: GO 23428
// pom := GetBase ( depot ) ;
22726: LD_ADDR_VAR 0 10
22730: PUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 274
22740: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22741: LD_ADDR_VAR 0 11
22745: PUSH
22746: LD_VAR 0 2
22750: PPUSH
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 248
22760: PPUSH
22761: CALL_OW 450
22765: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22766: LD_VAR 0 10
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: CALL_OW 275
22778: PUSH
22779: LD_VAR 0 11
22783: PUSH
22784: LD_INT 1
22786: ARRAY
22787: GREATEREQUAL
22788: PUSH
22789: LD_VAR 0 10
22793: PPUSH
22794: LD_INT 2
22796: PPUSH
22797: CALL_OW 275
22801: PUSH
22802: LD_VAR 0 11
22806: PUSH
22807: LD_INT 2
22809: ARRAY
22810: GREATEREQUAL
22811: AND
22812: PUSH
22813: LD_VAR 0 10
22817: PPUSH
22818: LD_INT 3
22820: PPUSH
22821: CALL_OW 275
22825: PUSH
22826: LD_VAR 0 11
22830: PUSH
22831: LD_INT 3
22833: ARRAY
22834: GREATEREQUAL
22835: AND
22836: NOT
22837: IFFALSE 22841
// exit ;
22839: GO 23428
// if GetBType ( depot ) = b_depot then
22841: LD_VAR 0 1
22845: PPUSH
22846: CALL_OW 266
22850: PUSH
22851: LD_INT 0
22853: EQUAL
22854: IFFALSE 22866
// dist := 28 else
22856: LD_ADDR_VAR 0 14
22860: PUSH
22861: LD_INT 28
22863: ST_TO_ADDR
22864: GO 22874
// dist := 36 ;
22866: LD_ADDR_VAR 0 14
22870: PUSH
22871: LD_INT 36
22873: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22874: LD_VAR 0 1
22878: PPUSH
22879: LD_VAR 0 3
22883: PPUSH
22884: LD_VAR 0 4
22888: PPUSH
22889: CALL_OW 297
22893: PUSH
22894: LD_VAR 0 14
22898: GREATER
22899: IFFALSE 22903
// exit ;
22901: GO 23428
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22903: LD_ADDR_VAR 0 12
22907: PUSH
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: LD_VAR 0 5
22927: PPUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 248
22937: PPUSH
22938: LD_INT 0
22940: PPUSH
22941: CALL 23433 0 6
22945: ST_TO_ADDR
// if not hexes then
22946: LD_VAR 0 12
22950: NOT
22951: IFFALSE 22955
// exit ;
22953: GO 23428
// hex := GetHexInfo ( x , y ) ;
22955: LD_ADDR_VAR 0 15
22959: PUSH
22960: LD_VAR 0 3
22964: PPUSH
22965: LD_VAR 0 4
22969: PPUSH
22970: CALL_OW 546
22974: ST_TO_ADDR
// if hex [ 1 ] then
22975: LD_VAR 0 15
22979: PUSH
22980: LD_INT 1
22982: ARRAY
22983: IFFALSE 22987
// exit ;
22985: GO 23428
// height := hex [ 2 ] ;
22987: LD_ADDR_VAR 0 13
22991: PUSH
22992: LD_VAR 0 15
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: ST_TO_ADDR
// for i = 1 to hexes do
23001: LD_ADDR_VAR 0 7
23005: PUSH
23006: DOUBLE
23007: LD_INT 1
23009: DEC
23010: ST_TO_ADDR
23011: LD_VAR 0 12
23015: PUSH
23016: FOR_TO
23017: IFFALSE 23347
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23019: LD_VAR 0 12
23023: PUSH
23024: LD_VAR 0 7
23028: ARRAY
23029: PUSH
23030: LD_INT 1
23032: ARRAY
23033: PPUSH
23034: LD_VAR 0 12
23038: PUSH
23039: LD_VAR 0 7
23043: ARRAY
23044: PUSH
23045: LD_INT 2
23047: ARRAY
23048: PPUSH
23049: CALL_OW 488
23053: NOT
23054: PUSH
23055: LD_VAR 0 12
23059: PUSH
23060: LD_VAR 0 7
23064: ARRAY
23065: PUSH
23066: LD_INT 1
23068: ARRAY
23069: PPUSH
23070: LD_VAR 0 12
23074: PUSH
23075: LD_VAR 0 7
23079: ARRAY
23080: PUSH
23081: LD_INT 2
23083: ARRAY
23084: PPUSH
23085: CALL_OW 428
23089: PUSH
23090: LD_INT 0
23092: GREATER
23093: OR
23094: PUSH
23095: LD_VAR 0 12
23099: PUSH
23100: LD_VAR 0 7
23104: ARRAY
23105: PUSH
23106: LD_INT 1
23108: ARRAY
23109: PPUSH
23110: LD_VAR 0 12
23114: PUSH
23115: LD_VAR 0 7
23119: ARRAY
23120: PUSH
23121: LD_INT 2
23123: ARRAY
23124: PPUSH
23125: CALL_OW 351
23129: OR
23130: IFFALSE 23136
// exit ;
23132: POP
23133: POP
23134: GO 23428
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23136: LD_ADDR_VAR 0 8
23140: PUSH
23141: LD_VAR 0 12
23145: PUSH
23146: LD_VAR 0 7
23150: ARRAY
23151: PUSH
23152: LD_INT 1
23154: ARRAY
23155: PPUSH
23156: LD_VAR 0 12
23160: PUSH
23161: LD_VAR 0 7
23165: ARRAY
23166: PUSH
23167: LD_INT 2
23169: ARRAY
23170: PPUSH
23171: CALL_OW 546
23175: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23176: LD_VAR 0 8
23180: PUSH
23181: LD_INT 1
23183: ARRAY
23184: PUSH
23185: LD_VAR 0 8
23189: PUSH
23190: LD_INT 2
23192: ARRAY
23193: PUSH
23194: LD_VAR 0 13
23198: PUSH
23199: LD_INT 2
23201: PLUS
23202: GREATER
23203: OR
23204: PUSH
23205: LD_VAR 0 8
23209: PUSH
23210: LD_INT 2
23212: ARRAY
23213: PUSH
23214: LD_VAR 0 13
23218: PUSH
23219: LD_INT 2
23221: MINUS
23222: LESS
23223: OR
23224: PUSH
23225: LD_VAR 0 8
23229: PUSH
23230: LD_INT 3
23232: ARRAY
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 8
23239: PUSH
23240: LD_INT 9
23242: PUSH
23243: LD_INT 10
23245: PUSH
23246: LD_INT 11
23248: PUSH
23249: LD_INT 12
23251: PUSH
23252: LD_INT 13
23254: PUSH
23255: LD_INT 16
23257: PUSH
23258: LD_INT 17
23260: PUSH
23261: LD_INT 18
23263: PUSH
23264: LD_INT 19
23266: PUSH
23267: LD_INT 20
23269: PUSH
23270: LD_INT 21
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: IN
23288: NOT
23289: OR
23290: PUSH
23291: LD_VAR 0 8
23295: PUSH
23296: LD_INT 5
23298: ARRAY
23299: NOT
23300: OR
23301: PUSH
23302: LD_VAR 0 8
23306: PUSH
23307: LD_INT 6
23309: ARRAY
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 7
23319: PUSH
23320: LD_INT 9
23322: PUSH
23323: LD_INT 10
23325: PUSH
23326: LD_INT 11
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: IN
23337: NOT
23338: OR
23339: IFFALSE 23345
// exit ;
23341: POP
23342: POP
23343: GO 23428
// end ;
23345: GO 23016
23347: POP
23348: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23349: LD_VAR 0 9
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_VAR 0 4
23363: PPUSH
23364: LD_INT 20
23366: PPUSH
23367: CALL 15351 0 4
23371: PUSH
23372: LD_INT 4
23374: ARRAY
23375: IFFALSE 23379
// exit ;
23377: GO 23428
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23379: LD_VAR 0 2
23383: PUSH
23384: LD_INT 29
23386: PUSH
23387: LD_INT 30
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: IN
23394: PUSH
23395: LD_VAR 0 3
23399: PPUSH
23400: LD_VAR 0 4
23404: PPUSH
23405: LD_VAR 0 9
23409: PPUSH
23410: CALL_OW 440
23414: NOT
23415: AND
23416: IFFALSE 23420
// exit ;
23418: GO 23428
// result := true ;
23420: LD_ADDR_VAR 0 6
23424: PUSH
23425: LD_INT 1
23427: ST_TO_ADDR
// end ;
23428: LD_VAR 0 6
23432: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23433: LD_INT 0
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
23443: PPUSH
23444: PPUSH
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
// result = [ ] ;
23493: LD_ADDR_VAR 0 7
23497: PUSH
23498: EMPTY
23499: ST_TO_ADDR
// temp_list = [ ] ;
23500: LD_ADDR_VAR 0 9
23504: PUSH
23505: EMPTY
23506: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23507: LD_VAR 0 4
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 4
23526: PUSH
23527: LD_INT 5
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: IN
23538: NOT
23539: PUSH
23540: LD_VAR 0 1
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: IN
23555: PUSH
23556: LD_VAR 0 5
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 3
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: IN
23575: NOT
23576: AND
23577: OR
23578: IFFALSE 23582
// exit ;
23580: GO 41973
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23582: LD_VAR 0 1
23586: PUSH
23587: LD_INT 6
23589: PUSH
23590: LD_INT 7
23592: PUSH
23593: LD_INT 8
23595: PUSH
23596: LD_INT 13
23598: PUSH
23599: LD_INT 12
23601: PUSH
23602: LD_INT 15
23604: PUSH
23605: LD_INT 11
23607: PUSH
23608: LD_INT 14
23610: PUSH
23611: LD_INT 10
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: IN
23625: IFFALSE 23635
// btype = b_lab ;
23627: LD_ADDR_VAR 0 1
23631: PUSH
23632: LD_INT 6
23634: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23635: LD_VAR 0 6
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: IN
23654: NOT
23655: PUSH
23656: LD_VAR 0 1
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: LD_INT 6
23675: PUSH
23676: LD_INT 36
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 33
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: IN
23707: NOT
23708: PUSH
23709: LD_VAR 0 6
23713: PUSH
23714: LD_INT 1
23716: EQUAL
23717: AND
23718: OR
23719: PUSH
23720: LD_VAR 0 1
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 3
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: IN
23735: NOT
23736: PUSH
23737: LD_VAR 0 6
23741: PUSH
23742: LD_INT 2
23744: EQUAL
23745: AND
23746: OR
23747: IFFALSE 23757
// mode = 0 ;
23749: LD_ADDR_VAR 0 6
23753: PUSH
23754: LD_INT 0
23756: ST_TO_ADDR
// case mode of 0 :
23757: LD_VAR 0 6
23761: PUSH
23762: LD_INT 0
23764: DOUBLE
23765: EQUAL
23766: IFTRUE 23770
23768: GO 35223
23770: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23771: LD_ADDR_VAR 0 11
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 3
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23964: LD_ADDR_VAR 0 12
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: NEG
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 3
24121: NEG
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 3
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24160: LD_ADDR_VAR 0 13
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 2
24245: NEG
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: LD_INT 3
24311: NEG
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 3
24319: NEG
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 3
24331: NEG
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24359: LD_ADDR_VAR 0 14
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: LD_INT 2
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: LD_INT 2
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 3
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 3
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24555: LD_ADDR_VAR 0 15
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24748: LD_ADDR_VAR 0 16
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: NEG
24884: PUSH
24885: LD_INT 2
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 3
24905: PUSH
24906: LD_INT 3
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24941: LD_ADDR_VAR 0 17
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: NEG
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25171: LD_ADDR_VAR 0 18
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: NEG
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: NEG
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: NEG
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25401: LD_ADDR_VAR 0 19
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 2
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25631: LD_ADDR_VAR 0 20
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 2
25807: NEG
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 2
25818: NEG
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 2
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25861: LD_ADDR_VAR 0 21
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: LD_INT 0
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: LD_INT 1
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26091: LD_ADDR_VAR 0 22
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 2
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 2
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26321: LD_ADDR_VAR 0 23
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 2
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 2
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: NEG
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: LD_INT 2
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 3
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 3
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26601: LD_ADDR_VAR 0 24
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 2
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 3
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26877: LD_ADDR_VAR 0 25
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 0
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 2
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27151: LD_ADDR_VAR 0 26
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 3
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27427: LD_ADDR_VAR 0 27
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 2
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: NEG
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: NEG
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 2
27649: NEG
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 3
27660: NEG
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 3
27672: NEG
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27707: LD_ADDR_VAR 0 28
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 2
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 2
27918: NEG
27919: PUSH
27920: LD_INT 3
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: LD_INT 3
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 3
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27989: LD_ADDR_VAR 0 29
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 2
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: NEG
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 3
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28268: LD_ADDR_VAR 0 30
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 3
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: NEG
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 3
28511: NEG
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28546: LD_ADDR_VAR 0 31
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 3
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 3
28789: NEG
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28824: LD_ADDR_VAR 0 32
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: NEG
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 2
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 2
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: NEG
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 3
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 3
29067: NEG
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29102: LD_ADDR_VAR 0 33
29106: PUSH
29107: LD_INT 0
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 3
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 2
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: LD_INT 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29381: LD_ADDR_VAR 0 34
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29661: LD_ADDR_VAR 0 35
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29773: LD_ADDR_VAR 0 36
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29885: LD_ADDR_VAR 0 37
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29997: LD_ADDR_VAR 0 38
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30109: LD_ADDR_VAR 0 39
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30221: LD_ADDR_VAR 0 40
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30333: LD_ADDR_VAR 0 41
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 2
30488: NEG
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: NEG
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 3
30607: NEG
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 3
30618: NEG
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: LD_INT 2
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 3
30642: NEG
30643: PUSH
30644: LD_INT 3
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30683: LD_ADDR_VAR 0 42
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 2
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 1
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: NEG
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: LD_INT 3
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31033: LD_ADDR_VAR 0 43
31037: PUSH
31038: LD_INT 0
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 2
31199: NEG
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 3
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 2
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 3
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31381: LD_ADDR_VAR 0 44
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: NEG
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31731: LD_ADDR_VAR 0 45
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: LD_INT 3
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: NEG
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32081: LD_ADDR_VAR 0 46
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 2
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 2
32258: NEG
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 3
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32429: LD_ADDR_VAR 0 47
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32580: LD_ADDR_VAR 0 48
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32727: LD_ADDR_VAR 0 49
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32871: LD_ADDR_VAR 0 50
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33015: LD_ADDR_VAR 0 51
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: NEG
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33162: LD_ADDR_VAR 0 52
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33313: LD_ADDR_VAR 0 53
33317: PUSH
33318: LD_INT 0
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33543: LD_ADDR_VAR 0 54
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33773: LD_ADDR_VAR 0 55
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: LD_INT 2
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: LD_INT 2
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 2
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34003: LD_ADDR_VAR 0 56
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34233: LD_ADDR_VAR 0 57
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 2
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34463: LD_ADDR_VAR 0 58
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34693: LD_ADDR_VAR 0 59
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34781: LD_ADDR_VAR 0 60
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34869: LD_ADDR_VAR 0 61
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34957: LD_ADDR_VAR 0 62
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35045: LD_ADDR_VAR 0 63
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35133: LD_ADDR_VAR 0 64
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
// end ; 1 :
35221: GO 41118
35223: LD_INT 1
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 37854
35231: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35232: LD_ADDR_VAR 0 11
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: LD_INT 3
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35276: LD_ADDR_VAR 0 12
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35317: LD_ADDR_VAR 0 13
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35357: LD_ADDR_VAR 0 14
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35398: LD_ADDR_VAR 0 15
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 3
35416: NEG
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 3
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35442: LD_ADDR_VAR 0 16
35446: PUSH
35447: LD_INT 2
35449: NEG
35450: PUSH
35451: LD_INT 3
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 3
35461: NEG
35462: PUSH
35463: LD_INT 2
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 3
35473: NEG
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35488: LD_ADDR_VAR 0 17
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35532: LD_ADDR_VAR 0 18
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 3
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35573: LD_ADDR_VAR 0 19
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35613: LD_ADDR_VAR 0 20
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35654: LD_ADDR_VAR 0 21
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 3
35672: NEG
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35698: LD_ADDR_VAR 0 22
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 3
35717: NEG
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 3
35729: NEG
35730: PUSH
35731: LD_INT 3
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35744: LD_ADDR_VAR 0 23
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: LD_INT 4
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 3
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35788: LD_ADDR_VAR 0 24
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 4
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35829: LD_ADDR_VAR 0 25
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: LD_INT 3
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 4
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: LD_INT 4
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35869: LD_ADDR_VAR 0 26
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 3
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 4
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35910: LD_ADDR_VAR 0 27
35914: PUSH
35915: LD_INT 3
35917: NEG
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 3
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 4
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35954: LD_ADDR_VAR 0 28
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: LD_INT 3
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 3
35973: NEG
35974: PUSH
35975: LD_INT 4
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 4
35985: NEG
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36000: LD_ADDR_VAR 0 29
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 3
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 3
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: LD_INT 4
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 4
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 3
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: LD_INT 5
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 5
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 4
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 6
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 6
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 5
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36155: LD_ADDR_VAR 0 30
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 3
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 4
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 4
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 4
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 5
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 5
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 5
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 6
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 6
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36298: LD_ADDR_VAR 0 31
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: LD_INT 3
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 4
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 3
36355: PUSH
36356: LD_INT 4
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 5
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 5
36375: PUSH
36376: LD_INT 5
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 6
36395: PUSH
36396: LD_INT 5
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 6
36405: PUSH
36406: LD_INT 6
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 5
36415: PUSH
36416: LD_INT 6
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36437: LD_ADDR_VAR 0 32
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 4
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 6
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 6
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: LD_INT 5
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36580: LD_ADDR_VAR 0 33
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 3
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 4
36632: NEG
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 4
36643: NEG
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 4
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 5
36666: NEG
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 5
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 5
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 6
36700: NEG
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 6
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36735: LD_ADDR_VAR 0 34
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 3
36754: NEG
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 3
36766: NEG
36767: PUSH
36768: LD_INT 3
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 3
36778: NEG
36779: PUSH
36780: LD_INT 4
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 4
36790: NEG
36791: PUSH
36792: LD_INT 3
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 4
36802: NEG
36803: PUSH
36804: LD_INT 4
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 4
36814: NEG
36815: PUSH
36816: LD_INT 5
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 5
36826: NEG
36827: PUSH
36828: LD_INT 4
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 5
36838: NEG
36839: PUSH
36840: LD_INT 5
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 5
36850: NEG
36851: PUSH
36852: LD_INT 6
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 6
36862: NEG
36863: PUSH
36864: LD_INT 5
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 6
36874: NEG
36875: PUSH
36876: LD_INT 6
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36898: LD_ADDR_VAR 0 41
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36942: LD_ADDR_VAR 0 42
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36983: LD_ADDR_VAR 0 43
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37023: LD_ADDR_VAR 0 44
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37064: LD_ADDR_VAR 0 45
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 3
37093: NEG
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37108: LD_ADDR_VAR 0 46
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 3
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 3
37139: NEG
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37154: LD_ADDR_VAR 0 47
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: LD_INT 3
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37187: LD_ADDR_VAR 0 48
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37218: LD_ADDR_VAR 0 49
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37247: LD_ADDR_VAR 0 50
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37276: LD_ADDR_VAR 0 51
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37307: LD_ADDR_VAR 0 52
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37340: LD_ADDR_VAR 0 53
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 3
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37384: LD_ADDR_VAR 0 54
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37425: LD_ADDR_VAR 0 55
37429: PUSH
37430: LD_INT 3
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37465: LD_ADDR_VAR 0 56
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37506: LD_ADDR_VAR 0 57
37510: PUSH
37511: LD_INT 2
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 3
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37550: LD_ADDR_VAR 0 58
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 3
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 3
37581: NEG
37582: PUSH
37583: LD_INT 3
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37596: LD_ADDR_VAR 0 59
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 2
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37640: LD_ADDR_VAR 0 60
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37681: LD_ADDR_VAR 0 61
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37721: LD_ADDR_VAR 0 62
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37762: LD_ADDR_VAR 0 63
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37806: LD_ADDR_VAR 0 64
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// end ; 2 :
37852: GO 41118
37854: LD_INT 2
37856: DOUBLE
37857: EQUAL
37858: IFTRUE 37862
37860: GO 41117
37862: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37863: LD_ADDR_VAR 0 29
37867: PUSH
37868: LD_INT 4
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 4
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 5
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 5
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 4
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 3
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 3
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 5
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 4
37993: PUSH
37994: LD_INT 4
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: LD_INT 4
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 3
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 4
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 4
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 4
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 4
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: LD_INT 5
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 5
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 4
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: NEG
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 3
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: NEG
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 3
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 4
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 4
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 4
38225: NEG
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 4
38248: NEG
38249: PUSH
38250: LD_INT 4
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 4
38260: NEG
38261: PUSH
38262: LD_INT 5
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: LD_INT 4
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 4
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 5
38308: NEG
38309: PUSH
38310: LD_INT 4
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 5
38320: NEG
38321: PUSH
38322: LD_INT 5
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 3
38332: NEG
38333: PUSH
38334: LD_INT 5
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 5
38344: NEG
38345: PUSH
38346: LD_INT 3
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38401: LD_ADDR_VAR 0 30
38405: PUSH
38406: LD_INT 4
38408: PUSH
38409: LD_INT 4
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 4
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 5
38428: PUSH
38429: LD_INT 4
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 5
38438: PUSH
38439: LD_INT 5
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 4
38448: PUSH
38449: LD_INT 5
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: LD_INT 4
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 3
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 5
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: PUSH
38489: LD_INT 5
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 4
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 3
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: LD_INT 4
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 4
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 4
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 4
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 5
38647: NEG
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 5
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 5
38670: NEG
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: NEG
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 3
38693: NEG
38694: PUSH
38695: LD_INT 3
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: LD_INT 4
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: LD_INT 3
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 4
38753: NEG
38754: PUSH
38755: LD_INT 3
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 4
38765: NEG
38766: PUSH
38767: LD_INT 4
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 4
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 4
38789: NEG
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 4
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 5
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 4
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 4
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 5
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 3
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: LD_INT 5
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38948: LD_ADDR_VAR 0 31
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 4
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 4
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 5
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 5
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: NEG
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 4
39104: NEG
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 4
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 4
39150: NEG
39151: PUSH
39152: LD_INT 4
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 4
39162: NEG
39163: PUSH
39164: LD_INT 5
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: NEG
39175: PUSH
39176: LD_INT 4
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 4
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 5
39210: NEG
39211: PUSH
39212: LD_INT 4
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 5
39222: NEG
39223: PUSH
39224: LD_INT 5
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: LD_INT 5
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 5
39246: NEG
39247: PUSH
39248: LD_INT 3
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 4
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 2
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 4
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: LD_INT 4
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 4
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 5
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 5
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 4
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 5
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39498: LD_ADDR_VAR 0 32
39502: PUSH
39503: LD_INT 4
39505: NEG
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 4
39516: NEG
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 3
39528: NEG
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 4
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 5
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 5
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 5
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 3
39607: NEG
39608: PUSH
39609: LD_INT 3
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: LD_INT 4
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 4
39667: NEG
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 4
39679: NEG
39680: PUSH
39681: LD_INT 4
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: LD_INT 4
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 4
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 4
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 5
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 4
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 4
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: LD_INT 5
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 5
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 4
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 4
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 3
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 4
39910: PUSH
39911: LD_INT 4
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: LD_INT 3
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: LD_INT 5
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 4
39950: PUSH
39951: LD_INT 5
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: LD_INT 4
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 5
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: LD_INT 5
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40045: LD_ADDR_VAR 0 33
40049: PUSH
40050: LD_INT 4
40052: NEG
40053: PUSH
40054: LD_INT 4
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 4
40064: NEG
40065: PUSH
40066: LD_INT 5
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: LD_INT 4
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 5
40112: NEG
40113: PUSH
40114: LD_INT 4
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 5
40124: NEG
40125: PUSH
40126: LD_INT 5
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: LD_INT 5
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 5
40148: NEG
40149: PUSH
40150: LD_INT 3
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 3
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 4
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 4
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 4
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 4
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 4
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 5
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 5
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 5
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 4
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 4
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 4
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 4
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 4
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 4
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 5
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 5
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: LD_INT 4
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 5
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40583: LD_ADDR_VAR 0 34
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 4
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 5
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 4
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 3
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 3
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 4
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 5
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 3
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: NEG
40681: PUSH
40682: LD_INT 5
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 3
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 4
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 4
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 4
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 4
40785: PUSH
40786: LD_INT 4
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 4
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 5
40805: PUSH
40806: LD_INT 4
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 5
40815: PUSH
40816: LD_INT 5
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 4
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 4
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 3
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 5
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: LD_INT 5
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 4
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 4
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 4
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 4
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 4
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: NEG
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 3
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 4
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 5
41024: NEG
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 5
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 5
41047: NEG
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// end ; end ;
41115: GO 41118
41117: POP
// case btype of b_depot , b_warehouse :
41118: LD_VAR 0 1
41122: PUSH
41123: LD_INT 0
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41137
41129: LD_INT 1
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41338
41137: POP
// case nation of nation_american :
41138: LD_VAR 0 5
41142: PUSH
41143: LD_INT 1
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41151
41149: GO 41207
41151: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_VAR 0 11
41161: PUSH
41162: LD_VAR 0 12
41166: PUSH
41167: LD_VAR 0 13
41171: PUSH
41172: LD_VAR 0 14
41176: PUSH
41177: LD_VAR 0 15
41181: PUSH
41182: LD_VAR 0 16
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: LD_VAR 0 4
41199: PUSH
41200: LD_INT 1
41202: PLUS
41203: ARRAY
41204: ST_TO_ADDR
41205: GO 41336
41207: LD_INT 2
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41271
41215: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41216: LD_ADDR_VAR 0 9
41220: PUSH
41221: LD_VAR 0 17
41225: PUSH
41226: LD_VAR 0 18
41230: PUSH
41231: LD_VAR 0 19
41235: PUSH
41236: LD_VAR 0 20
41240: PUSH
41241: LD_VAR 0 21
41245: PUSH
41246: LD_VAR 0 22
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: PUSH
41259: LD_VAR 0 4
41263: PUSH
41264: LD_INT 1
41266: PLUS
41267: ARRAY
41268: ST_TO_ADDR
41269: GO 41336
41271: LD_INT 3
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41279
41277: GO 41335
41279: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41280: LD_ADDR_VAR 0 9
41284: PUSH
41285: LD_VAR 0 23
41289: PUSH
41290: LD_VAR 0 24
41294: PUSH
41295: LD_VAR 0 25
41299: PUSH
41300: LD_VAR 0 26
41304: PUSH
41305: LD_VAR 0 27
41309: PUSH
41310: LD_VAR 0 28
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: PUSH
41323: LD_VAR 0 4
41327: PUSH
41328: LD_INT 1
41330: PLUS
41331: ARRAY
41332: ST_TO_ADDR
41333: GO 41336
41335: POP
41336: GO 41891
41338: LD_INT 2
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41352
41344: LD_INT 3
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41408
41352: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 29
41362: PUSH
41363: LD_VAR 0 30
41367: PUSH
41368: LD_VAR 0 31
41372: PUSH
41373: LD_VAR 0 32
41377: PUSH
41378: LD_VAR 0 33
41382: PUSH
41383: LD_VAR 0 34
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: PUSH
41396: LD_VAR 0 4
41400: PUSH
41401: LD_INT 1
41403: PLUS
41404: ARRAY
41405: ST_TO_ADDR
41406: GO 41891
41408: LD_INT 16
41410: DOUBLE
41411: EQUAL
41412: IFTRUE 41470
41414: LD_INT 17
41416: DOUBLE
41417: EQUAL
41418: IFTRUE 41470
41420: LD_INT 18
41422: DOUBLE
41423: EQUAL
41424: IFTRUE 41470
41426: LD_INT 19
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41470
41432: LD_INT 22
41434: DOUBLE
41435: EQUAL
41436: IFTRUE 41470
41438: LD_INT 20
41440: DOUBLE
41441: EQUAL
41442: IFTRUE 41470
41444: LD_INT 21
41446: DOUBLE
41447: EQUAL
41448: IFTRUE 41470
41450: LD_INT 23
41452: DOUBLE
41453: EQUAL
41454: IFTRUE 41470
41456: LD_INT 24
41458: DOUBLE
41459: EQUAL
41460: IFTRUE 41470
41462: LD_INT 25
41464: DOUBLE
41465: EQUAL
41466: IFTRUE 41470
41468: GO 41526
41470: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41471: LD_ADDR_VAR 0 9
41475: PUSH
41476: LD_VAR 0 35
41480: PUSH
41481: LD_VAR 0 36
41485: PUSH
41486: LD_VAR 0 37
41490: PUSH
41491: LD_VAR 0 38
41495: PUSH
41496: LD_VAR 0 39
41500: PUSH
41501: LD_VAR 0 40
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: PUSH
41514: LD_VAR 0 4
41518: PUSH
41519: LD_INT 1
41521: PLUS
41522: ARRAY
41523: ST_TO_ADDR
41524: GO 41891
41526: LD_INT 6
41528: DOUBLE
41529: EQUAL
41530: IFTRUE 41582
41532: LD_INT 7
41534: DOUBLE
41535: EQUAL
41536: IFTRUE 41582
41538: LD_INT 8
41540: DOUBLE
41541: EQUAL
41542: IFTRUE 41582
41544: LD_INT 13
41546: DOUBLE
41547: EQUAL
41548: IFTRUE 41582
41550: LD_INT 12
41552: DOUBLE
41553: EQUAL
41554: IFTRUE 41582
41556: LD_INT 15
41558: DOUBLE
41559: EQUAL
41560: IFTRUE 41582
41562: LD_INT 11
41564: DOUBLE
41565: EQUAL
41566: IFTRUE 41582
41568: LD_INT 14
41570: DOUBLE
41571: EQUAL
41572: IFTRUE 41582
41574: LD_INT 10
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41582
41580: GO 41638
41582: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41583: LD_ADDR_VAR 0 9
41587: PUSH
41588: LD_VAR 0 41
41592: PUSH
41593: LD_VAR 0 42
41597: PUSH
41598: LD_VAR 0 43
41602: PUSH
41603: LD_VAR 0 44
41607: PUSH
41608: LD_VAR 0 45
41612: PUSH
41613: LD_VAR 0 46
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: PUSH
41626: LD_VAR 0 4
41630: PUSH
41631: LD_INT 1
41633: PLUS
41634: ARRAY
41635: ST_TO_ADDR
41636: GO 41891
41638: LD_INT 36
41640: DOUBLE
41641: EQUAL
41642: IFTRUE 41646
41644: GO 41702
41646: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41647: LD_ADDR_VAR 0 9
41651: PUSH
41652: LD_VAR 0 47
41656: PUSH
41657: LD_VAR 0 48
41661: PUSH
41662: LD_VAR 0 49
41666: PUSH
41667: LD_VAR 0 50
41671: PUSH
41672: LD_VAR 0 51
41676: PUSH
41677: LD_VAR 0 52
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: PUSH
41690: LD_VAR 0 4
41694: PUSH
41695: LD_INT 1
41697: PLUS
41698: ARRAY
41699: ST_TO_ADDR
41700: GO 41891
41702: LD_INT 4
41704: DOUBLE
41705: EQUAL
41706: IFTRUE 41728
41708: LD_INT 5
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41728
41714: LD_INT 34
41716: DOUBLE
41717: EQUAL
41718: IFTRUE 41728
41720: LD_INT 37
41722: DOUBLE
41723: EQUAL
41724: IFTRUE 41728
41726: GO 41784
41728: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41729: LD_ADDR_VAR 0 9
41733: PUSH
41734: LD_VAR 0 53
41738: PUSH
41739: LD_VAR 0 54
41743: PUSH
41744: LD_VAR 0 55
41748: PUSH
41749: LD_VAR 0 56
41753: PUSH
41754: LD_VAR 0 57
41758: PUSH
41759: LD_VAR 0 58
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: PUSH
41772: LD_VAR 0 4
41776: PUSH
41777: LD_INT 1
41779: PLUS
41780: ARRAY
41781: ST_TO_ADDR
41782: GO 41891
41784: LD_INT 31
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41834
41790: LD_INT 32
41792: DOUBLE
41793: EQUAL
41794: IFTRUE 41834
41796: LD_INT 33
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41834
41802: LD_INT 27
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41834
41808: LD_INT 26
41810: DOUBLE
41811: EQUAL
41812: IFTRUE 41834
41814: LD_INT 28
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41834
41820: LD_INT 29
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41834
41826: LD_INT 30
41828: DOUBLE
41829: EQUAL
41830: IFTRUE 41834
41832: GO 41890
41834: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41835: LD_ADDR_VAR 0 9
41839: PUSH
41840: LD_VAR 0 59
41844: PUSH
41845: LD_VAR 0 60
41849: PUSH
41850: LD_VAR 0 61
41854: PUSH
41855: LD_VAR 0 62
41859: PUSH
41860: LD_VAR 0 63
41864: PUSH
41865: LD_VAR 0 64
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: PUSH
41878: LD_VAR 0 4
41882: PUSH
41883: LD_INT 1
41885: PLUS
41886: ARRAY
41887: ST_TO_ADDR
41888: GO 41891
41890: POP
// temp_list2 = [ ] ;
41891: LD_ADDR_VAR 0 10
41895: PUSH
41896: EMPTY
41897: ST_TO_ADDR
// for i in temp_list do
41898: LD_ADDR_VAR 0 8
41902: PUSH
41903: LD_VAR 0 9
41907: PUSH
41908: FOR_IN
41909: IFFALSE 41961
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41911: LD_ADDR_VAR 0 10
41915: PUSH
41916: LD_VAR 0 10
41920: PUSH
41921: LD_VAR 0 8
41925: PUSH
41926: LD_INT 1
41928: ARRAY
41929: PUSH
41930: LD_VAR 0 2
41934: PLUS
41935: PUSH
41936: LD_VAR 0 8
41940: PUSH
41941: LD_INT 2
41943: ARRAY
41944: PUSH
41945: LD_VAR 0 3
41949: PLUS
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: EMPTY
41956: LIST
41957: ADD
41958: ST_TO_ADDR
41959: GO 41908
41961: POP
41962: POP
// result = temp_list2 ;
41963: LD_ADDR_VAR 0 7
41967: PUSH
41968: LD_VAR 0 10
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 7
41977: RET
// export function EnemyInRange ( unit , dist ) ; begin
41978: LD_INT 0
41980: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_VAR 0 1
41990: PPUSH
41991: CALL_OW 255
41995: PPUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 250
42005: PPUSH
42006: LD_VAR 0 1
42010: PPUSH
42011: CALL_OW 251
42015: PPUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: CALL 15351 0 4
42025: PUSH
42026: LD_INT 4
42028: ARRAY
42029: ST_TO_ADDR
// end ;
42030: LD_VAR 0 3
42034: RET
// export function PlayerSeeMe ( unit ) ; begin
42035: LD_INT 0
42037: PPUSH
// result := See ( your_side , unit ) ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_OWVAR 2
42047: PPUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 292
42057: ST_TO_ADDR
// end ;
42058: LD_VAR 0 2
42062: RET
// export function ReverseDir ( unit ) ; begin
42063: LD_INT 0
42065: PPUSH
// if not unit then
42066: LD_VAR 0 1
42070: NOT
42071: IFFALSE 42075
// exit ;
42073: GO 42098
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42075: LD_ADDR_VAR 0 2
42079: PUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL_OW 254
42089: PUSH
42090: LD_INT 3
42092: PLUS
42093: PUSH
42094: LD_INT 6
42096: MOD
42097: ST_TO_ADDR
// end ;
42098: LD_VAR 0 2
42102: RET
// export function ReverseArray ( array ) ; var i ; begin
42103: LD_INT 0
42105: PPUSH
42106: PPUSH
// if not array then
42107: LD_VAR 0 1
42111: NOT
42112: IFFALSE 42116
// exit ;
42114: GO 42171
// result := [ ] ;
42116: LD_ADDR_VAR 0 2
42120: PUSH
42121: EMPTY
42122: ST_TO_ADDR
// for i := array downto 1 do
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: DOUBLE
42129: LD_VAR 0 1
42133: INC
42134: ST_TO_ADDR
42135: LD_INT 1
42137: PUSH
42138: FOR_DOWNTO
42139: IFFALSE 42169
// result := Join ( result , array [ i ] ) ;
42141: LD_ADDR_VAR 0 2
42145: PUSH
42146: LD_VAR 0 2
42150: PPUSH
42151: LD_VAR 0 1
42155: PUSH
42156: LD_VAR 0 3
42160: ARRAY
42161: PPUSH
42162: CALL 46836 0 2
42166: ST_TO_ADDR
42167: GO 42138
42169: POP
42170: POP
// end ;
42171: LD_VAR 0 2
42175: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
42182: PPUSH
42183: PPUSH
// if not unit or not hexes then
42184: LD_VAR 0 1
42188: NOT
42189: PUSH
42190: LD_VAR 0 2
42194: NOT
42195: OR
42196: IFFALSE 42200
// exit ;
42198: GO 42323
// dist := 9999 ;
42200: LD_ADDR_VAR 0 5
42204: PUSH
42205: LD_INT 9999
42207: ST_TO_ADDR
// for i = 1 to hexes do
42208: LD_ADDR_VAR 0 4
42212: PUSH
42213: DOUBLE
42214: LD_INT 1
42216: DEC
42217: ST_TO_ADDR
42218: LD_VAR 0 2
42222: PUSH
42223: FOR_TO
42224: IFFALSE 42311
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42226: LD_ADDR_VAR 0 6
42230: PUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: LD_VAR 0 2
42240: PUSH
42241: LD_VAR 0 4
42245: ARRAY
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: PPUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_VAR 0 4
42260: ARRAY
42261: PUSH
42262: LD_INT 2
42264: ARRAY
42265: PPUSH
42266: CALL_OW 297
42270: ST_TO_ADDR
// if tdist < dist then
42271: LD_VAR 0 6
42275: PUSH
42276: LD_VAR 0 5
42280: LESS
42281: IFFALSE 42309
// begin hex := hexes [ i ] ;
42283: LD_ADDR_VAR 0 8
42287: PUSH
42288: LD_VAR 0 2
42292: PUSH
42293: LD_VAR 0 4
42297: ARRAY
42298: ST_TO_ADDR
// dist := tdist ;
42299: LD_ADDR_VAR 0 5
42303: PUSH
42304: LD_VAR 0 6
42308: ST_TO_ADDR
// end ; end ;
42309: GO 42223
42311: POP
42312: POP
// result := hex ;
42313: LD_ADDR_VAR 0 3
42317: PUSH
42318: LD_VAR 0 8
42322: ST_TO_ADDR
// end ;
42323: LD_VAR 0 3
42327: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42328: LD_INT 0
42330: PPUSH
42331: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42332: LD_VAR 0 1
42336: NOT
42337: PUSH
42338: LD_VAR 0 1
42342: PUSH
42343: LD_INT 21
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 23
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PPUSH
42367: CALL_OW 69
42371: IN
42372: NOT
42373: OR
42374: IFFALSE 42378
// exit ;
42376: GO 42425
// for i = 1 to 3 do
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: DOUBLE
42384: LD_INT 1
42386: DEC
42387: ST_TO_ADDR
42388: LD_INT 3
42390: PUSH
42391: FOR_TO
42392: IFFALSE 42423
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42394: LD_VAR 0 1
42398: PPUSH
42399: CALL_OW 250
42403: PPUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 251
42413: PPUSH
42414: LD_INT 1
42416: PPUSH
42417: CALL_OW 453
42421: GO 42391
42423: POP
42424: POP
// end ;
42425: LD_VAR 0 2
42429: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42430: LD_INT 0
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
// if not unit or not enemy_unit then
42438: LD_VAR 0 1
42442: NOT
42443: PUSH
42444: LD_VAR 0 2
42448: NOT
42449: OR
42450: IFFALSE 42454
// exit ;
42452: GO 42921
// if GetLives ( i ) < 250 then
42454: LD_VAR 0 4
42458: PPUSH
42459: CALL_OW 256
42463: PUSH
42464: LD_INT 250
42466: LESS
42467: IFFALSE 42480
// begin ComAutodestruct ( i ) ;
42469: LD_VAR 0 4
42473: PPUSH
42474: CALL 42328 0 1
// exit ;
42478: GO 42921
// end ; x := GetX ( enemy_unit ) ;
42480: LD_ADDR_VAR 0 7
42484: PUSH
42485: LD_VAR 0 2
42489: PPUSH
42490: CALL_OW 250
42494: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42495: LD_ADDR_VAR 0 8
42499: PUSH
42500: LD_VAR 0 2
42504: PPUSH
42505: CALL_OW 251
42509: ST_TO_ADDR
// if not x or not y then
42510: LD_VAR 0 7
42514: NOT
42515: PUSH
42516: LD_VAR 0 8
42520: NOT
42521: OR
42522: IFFALSE 42526
// exit ;
42524: GO 42921
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42526: LD_ADDR_VAR 0 6
42530: PUSH
42531: LD_VAR 0 7
42535: PPUSH
42536: LD_INT 0
42538: PPUSH
42539: LD_INT 4
42541: PPUSH
42542: CALL_OW 272
42546: PUSH
42547: LD_VAR 0 8
42551: PPUSH
42552: LD_INT 0
42554: PPUSH
42555: LD_INT 4
42557: PPUSH
42558: CALL_OW 273
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_VAR 0 7
42571: PPUSH
42572: LD_INT 1
42574: PPUSH
42575: LD_INT 4
42577: PPUSH
42578: CALL_OW 272
42582: PUSH
42583: LD_VAR 0 8
42587: PPUSH
42588: LD_INT 1
42590: PPUSH
42591: LD_INT 4
42593: PPUSH
42594: CALL_OW 273
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_VAR 0 7
42607: PPUSH
42608: LD_INT 2
42610: PPUSH
42611: LD_INT 4
42613: PPUSH
42614: CALL_OW 272
42618: PUSH
42619: LD_VAR 0 8
42623: PPUSH
42624: LD_INT 2
42626: PPUSH
42627: LD_INT 4
42629: PPUSH
42630: CALL_OW 273
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_VAR 0 7
42643: PPUSH
42644: LD_INT 3
42646: PPUSH
42647: LD_INT 4
42649: PPUSH
42650: CALL_OW 272
42654: PUSH
42655: LD_VAR 0 8
42659: PPUSH
42660: LD_INT 3
42662: PPUSH
42663: LD_INT 4
42665: PPUSH
42666: CALL_OW 273
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_VAR 0 7
42679: PPUSH
42680: LD_INT 4
42682: PPUSH
42683: LD_INT 4
42685: PPUSH
42686: CALL_OW 272
42690: PUSH
42691: LD_VAR 0 8
42695: PPUSH
42696: LD_INT 4
42698: PPUSH
42699: LD_INT 4
42701: PPUSH
42702: CALL_OW 273
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_VAR 0 7
42715: PPUSH
42716: LD_INT 5
42718: PPUSH
42719: LD_INT 4
42721: PPUSH
42722: CALL_OW 272
42726: PUSH
42727: LD_VAR 0 8
42731: PPUSH
42732: LD_INT 5
42734: PPUSH
42735: LD_INT 4
42737: PPUSH
42738: CALL_OW 273
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
// for i = tmp downto 1 do
42755: LD_ADDR_VAR 0 4
42759: PUSH
42760: DOUBLE
42761: LD_VAR 0 6
42765: INC
42766: ST_TO_ADDR
42767: LD_INT 1
42769: PUSH
42770: FOR_DOWNTO
42771: IFFALSE 42872
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42773: LD_VAR 0 6
42777: PUSH
42778: LD_VAR 0 4
42782: ARRAY
42783: PUSH
42784: LD_INT 1
42786: ARRAY
42787: PPUSH
42788: LD_VAR 0 6
42792: PUSH
42793: LD_VAR 0 4
42797: ARRAY
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: PPUSH
42803: CALL_OW 488
42807: NOT
42808: PUSH
42809: LD_VAR 0 6
42813: PUSH
42814: LD_VAR 0 4
42818: ARRAY
42819: PUSH
42820: LD_INT 1
42822: ARRAY
42823: PPUSH
42824: LD_VAR 0 6
42828: PUSH
42829: LD_VAR 0 4
42833: ARRAY
42834: PUSH
42835: LD_INT 2
42837: ARRAY
42838: PPUSH
42839: CALL_OW 428
42843: PUSH
42844: LD_INT 0
42846: NONEQUAL
42847: OR
42848: IFFALSE 42870
// tmp := Delete ( tmp , i ) ;
42850: LD_ADDR_VAR 0 6
42854: PUSH
42855: LD_VAR 0 6
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: CALL_OW 3
42869: ST_TO_ADDR
42870: GO 42770
42872: POP
42873: POP
// j := GetClosestHex ( unit , tmp ) ;
42874: LD_ADDR_VAR 0 5
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: LD_VAR 0 6
42888: PPUSH
42889: CALL 42176 0 2
42893: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42894: LD_VAR 0 1
42898: PPUSH
42899: LD_VAR 0 5
42903: PUSH
42904: LD_INT 1
42906: ARRAY
42907: PPUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 2
42915: ARRAY
42916: PPUSH
42917: CALL_OW 111
// end ;
42921: LD_VAR 0 3
42925: RET
// export function PrepareApemanSoldier ( ) ; begin
42926: LD_INT 0
42928: PPUSH
// uc_nation := 0 ;
42929: LD_ADDR_OWVAR 21
42933: PUSH
42934: LD_INT 0
42936: ST_TO_ADDR
// hc_sex := sex_male ;
42937: LD_ADDR_OWVAR 27
42941: PUSH
42942: LD_INT 1
42944: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42945: LD_ADDR_OWVAR 28
42949: PUSH
42950: LD_INT 15
42952: ST_TO_ADDR
// hc_gallery :=  ;
42953: LD_ADDR_OWVAR 33
42957: PUSH
42958: LD_STRING 
42960: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42961: LD_ADDR_OWVAR 31
42965: PUSH
42966: LD_INT 0
42968: PPUSH
42969: LD_INT 3
42971: PPUSH
42972: CALL_OW 12
42976: PUSH
42977: LD_INT 0
42979: PPUSH
42980: LD_INT 3
42982: PPUSH
42983: CALL_OW 12
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 1
43004: RET
// export function PrepareApemanEngineer ( ) ; begin
43005: LD_INT 0
43007: PPUSH
// uc_nation := 0 ;
43008: LD_ADDR_OWVAR 21
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// hc_sex := sex_male ;
43016: LD_ADDR_OWVAR 27
43020: PUSH
43021: LD_INT 1
43023: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43024: LD_ADDR_OWVAR 28
43028: PUSH
43029: LD_INT 16
43031: ST_TO_ADDR
// hc_gallery :=  ;
43032: LD_ADDR_OWVAR 33
43036: PUSH
43037: LD_STRING 
43039: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43040: LD_ADDR_OWVAR 31
43044: PUSH
43045: LD_INT 0
43047: PPUSH
43048: LD_INT 3
43050: PPUSH
43051: CALL_OW 12
43055: PUSH
43056: LD_INT 0
43058: PPUSH
43059: LD_INT 3
43061: PPUSH
43062: CALL_OW 12
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// end ;
43079: LD_VAR 0 1
43083: RET
// export function PrepareApeman ( agressivity ) ; begin
43084: LD_INT 0
43086: PPUSH
// uc_side := 0 ;
43087: LD_ADDR_OWVAR 20
43091: PUSH
43092: LD_INT 0
43094: ST_TO_ADDR
// uc_nation := 0 ;
43095: LD_ADDR_OWVAR 21
43099: PUSH
43100: LD_INT 0
43102: ST_TO_ADDR
// hc_sex := sex_male ;
43103: LD_ADDR_OWVAR 27
43107: PUSH
43108: LD_INT 1
43110: ST_TO_ADDR
// hc_class := class_apeman ;
43111: LD_ADDR_OWVAR 28
43115: PUSH
43116: LD_INT 12
43118: ST_TO_ADDR
// hc_gallery :=  ;
43119: LD_ADDR_OWVAR 33
43123: PUSH
43124: LD_STRING 
43126: ST_TO_ADDR
// if agressivity = 0 then
43127: LD_VAR 0 1
43131: PUSH
43132: LD_INT 0
43134: EQUAL
43135: IFFALSE 43147
// hc_agressivity := 0 else
43137: LD_ADDR_OWVAR 35
43141: PUSH
43142: LD_INT 0
43144: ST_TO_ADDR
43145: GO 43168
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43147: LD_ADDR_OWVAR 35
43151: PUSH
43152: LD_VAR 0 1
43156: NEG
43157: PPUSH
43158: LD_VAR 0 1
43162: PPUSH
43163: CALL_OW 12
43167: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43168: LD_ADDR_OWVAR 31
43172: PUSH
43173: LD_INT 0
43175: PPUSH
43176: LD_INT 3
43178: PPUSH
43179: CALL_OW 12
43183: PUSH
43184: LD_INT 0
43186: PPUSH
43187: LD_INT 3
43189: PPUSH
43190: CALL_OW 12
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
// end ;
43207: LD_VAR 0 2
43211: RET
// export function PrepareTiger ( agressivity ) ; begin
43212: LD_INT 0
43214: PPUSH
// uc_side := 0 ;
43215: LD_ADDR_OWVAR 20
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// uc_nation := 0 ;
43223: LD_ADDR_OWVAR 21
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// hc_class := class_tiger ;
43231: LD_ADDR_OWVAR 28
43235: PUSH
43236: LD_INT 14
43238: ST_TO_ADDR
// hc_gallery :=  ;
43239: LD_ADDR_OWVAR 33
43243: PUSH
43244: LD_STRING 
43246: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43247: LD_ADDR_OWVAR 35
43251: PUSH
43252: LD_VAR 0 1
43256: NEG
43257: PPUSH
43258: LD_VAR 0 1
43262: PPUSH
43263: CALL_OW 12
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function PrepareEnchidna ( ) ; begin
43273: LD_INT 0
43275: PPUSH
// uc_side := 0 ;
43276: LD_ADDR_OWVAR 20
43280: PUSH
43281: LD_INT 0
43283: ST_TO_ADDR
// uc_nation := 0 ;
43284: LD_ADDR_OWVAR 21
43288: PUSH
43289: LD_INT 0
43291: ST_TO_ADDR
// hc_class := class_baggie ;
43292: LD_ADDR_OWVAR 28
43296: PUSH
43297: LD_INT 13
43299: ST_TO_ADDR
// hc_gallery :=  ;
43300: LD_ADDR_OWVAR 33
43304: PUSH
43305: LD_STRING 
43307: ST_TO_ADDR
// end ;
43308: LD_VAR 0 1
43312: RET
// export function PrepareFrog ( ) ; begin
43313: LD_INT 0
43315: PPUSH
// uc_side := 0 ;
43316: LD_ADDR_OWVAR 20
43320: PUSH
43321: LD_INT 0
43323: ST_TO_ADDR
// uc_nation := 0 ;
43324: LD_ADDR_OWVAR 21
43328: PUSH
43329: LD_INT 0
43331: ST_TO_ADDR
// hc_class := class_frog ;
43332: LD_ADDR_OWVAR 28
43336: PUSH
43337: LD_INT 19
43339: ST_TO_ADDR
// hc_gallery :=  ;
43340: LD_ADDR_OWVAR 33
43344: PUSH
43345: LD_STRING 
43347: ST_TO_ADDR
// end ;
43348: LD_VAR 0 1
43352: RET
// export function PrepareFish ( ) ; begin
43353: LD_INT 0
43355: PPUSH
// uc_side := 0 ;
43356: LD_ADDR_OWVAR 20
43360: PUSH
43361: LD_INT 0
43363: ST_TO_ADDR
// uc_nation := 0 ;
43364: LD_ADDR_OWVAR 21
43368: PUSH
43369: LD_INT 0
43371: ST_TO_ADDR
// hc_class := class_fish ;
43372: LD_ADDR_OWVAR 28
43376: PUSH
43377: LD_INT 20
43379: ST_TO_ADDR
// hc_gallery :=  ;
43380: LD_ADDR_OWVAR 33
43384: PUSH
43385: LD_STRING 
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 1
43392: RET
// export function PrepareBird ( ) ; begin
43393: LD_INT 0
43395: PPUSH
// uc_side := 0 ;
43396: LD_ADDR_OWVAR 20
43400: PUSH
43401: LD_INT 0
43403: ST_TO_ADDR
// uc_nation := 0 ;
43404: LD_ADDR_OWVAR 21
43408: PUSH
43409: LD_INT 0
43411: ST_TO_ADDR
// hc_class := class_phororhacos ;
43412: LD_ADDR_OWVAR 28
43416: PUSH
43417: LD_INT 18
43419: ST_TO_ADDR
// hc_gallery :=  ;
43420: LD_ADDR_OWVAR 33
43424: PUSH
43425: LD_STRING 
43427: ST_TO_ADDR
// end ;
43428: LD_VAR 0 1
43432: RET
// export function PrepareHorse ( ) ; begin
43433: LD_INT 0
43435: PPUSH
// uc_side := 0 ;
43436: LD_ADDR_OWVAR 20
43440: PUSH
43441: LD_INT 0
43443: ST_TO_ADDR
// uc_nation := 0 ;
43444: LD_ADDR_OWVAR 21
43448: PUSH
43449: LD_INT 0
43451: ST_TO_ADDR
// hc_class := class_horse ;
43452: LD_ADDR_OWVAR 28
43456: PUSH
43457: LD_INT 21
43459: ST_TO_ADDR
// hc_gallery :=  ;
43460: LD_ADDR_OWVAR 33
43464: PUSH
43465: LD_STRING 
43467: ST_TO_ADDR
// end ;
43468: LD_VAR 0 1
43472: RET
// export function PrepareMastodont ( ) ; begin
43473: LD_INT 0
43475: PPUSH
// uc_side := 0 ;
43476: LD_ADDR_OWVAR 20
43480: PUSH
43481: LD_INT 0
43483: ST_TO_ADDR
// uc_nation := 0 ;
43484: LD_ADDR_OWVAR 21
43488: PUSH
43489: LD_INT 0
43491: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43492: LD_ADDR_OWVAR 37
43496: PUSH
43497: LD_INT 31
43499: ST_TO_ADDR
// vc_control := control_rider ;
43500: LD_ADDR_OWVAR 38
43504: PUSH
43505: LD_INT 4
43507: ST_TO_ADDR
// end ;
43508: LD_VAR 0 1
43512: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43513: LD_INT 0
43515: PPUSH
43516: PPUSH
43517: PPUSH
// uc_side = 0 ;
43518: LD_ADDR_OWVAR 20
43522: PUSH
43523: LD_INT 0
43525: ST_TO_ADDR
// uc_nation = 0 ;
43526: LD_ADDR_OWVAR 21
43530: PUSH
43531: LD_INT 0
43533: ST_TO_ADDR
// InitHc_All ( ) ;
43534: CALL_OW 584
// InitVc ;
43538: CALL_OW 20
// if mastodonts then
43542: LD_VAR 0 6
43546: IFFALSE 43613
// for i = 1 to mastodonts do
43548: LD_ADDR_VAR 0 11
43552: PUSH
43553: DOUBLE
43554: LD_INT 1
43556: DEC
43557: ST_TO_ADDR
43558: LD_VAR 0 6
43562: PUSH
43563: FOR_TO
43564: IFFALSE 43611
// begin vc_chassis := 31 ;
43566: LD_ADDR_OWVAR 37
43570: PUSH
43571: LD_INT 31
43573: ST_TO_ADDR
// vc_control := control_rider ;
43574: LD_ADDR_OWVAR 38
43578: PUSH
43579: LD_INT 4
43581: ST_TO_ADDR
// animal := CreateVehicle ;
43582: LD_ADDR_VAR 0 12
43586: PUSH
43587: CALL_OW 45
43591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43592: LD_VAR 0 12
43596: PPUSH
43597: LD_VAR 0 8
43601: PPUSH
43602: LD_INT 0
43604: PPUSH
43605: CALL 45741 0 3
// end ;
43609: GO 43563
43611: POP
43612: POP
// if horses then
43613: LD_VAR 0 5
43617: IFFALSE 43684
// for i = 1 to horses do
43619: LD_ADDR_VAR 0 11
43623: PUSH
43624: DOUBLE
43625: LD_INT 1
43627: DEC
43628: ST_TO_ADDR
43629: LD_VAR 0 5
43633: PUSH
43634: FOR_TO
43635: IFFALSE 43682
// begin hc_class := 21 ;
43637: LD_ADDR_OWVAR 28
43641: PUSH
43642: LD_INT 21
43644: ST_TO_ADDR
// hc_gallery :=  ;
43645: LD_ADDR_OWVAR 33
43649: PUSH
43650: LD_STRING 
43652: ST_TO_ADDR
// animal := CreateHuman ;
43653: LD_ADDR_VAR 0 12
43657: PUSH
43658: CALL_OW 44
43662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43663: LD_VAR 0 12
43667: PPUSH
43668: LD_VAR 0 8
43672: PPUSH
43673: LD_INT 0
43675: PPUSH
43676: CALL 45741 0 3
// end ;
43680: GO 43634
43682: POP
43683: POP
// if birds then
43684: LD_VAR 0 1
43688: IFFALSE 43755
// for i = 1 to birds do
43690: LD_ADDR_VAR 0 11
43694: PUSH
43695: DOUBLE
43696: LD_INT 1
43698: DEC
43699: ST_TO_ADDR
43700: LD_VAR 0 1
43704: PUSH
43705: FOR_TO
43706: IFFALSE 43753
// begin hc_class := 18 ;
43708: LD_ADDR_OWVAR 28
43712: PUSH
43713: LD_INT 18
43715: ST_TO_ADDR
// hc_gallery =  ;
43716: LD_ADDR_OWVAR 33
43720: PUSH
43721: LD_STRING 
43723: ST_TO_ADDR
// animal := CreateHuman ;
43724: LD_ADDR_VAR 0 12
43728: PUSH
43729: CALL_OW 44
43733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43734: LD_VAR 0 12
43738: PPUSH
43739: LD_VAR 0 8
43743: PPUSH
43744: LD_INT 0
43746: PPUSH
43747: CALL 45741 0 3
// end ;
43751: GO 43705
43753: POP
43754: POP
// if tigers then
43755: LD_VAR 0 2
43759: IFFALSE 43843
// for i = 1 to tigers do
43761: LD_ADDR_VAR 0 11
43765: PUSH
43766: DOUBLE
43767: LD_INT 1
43769: DEC
43770: ST_TO_ADDR
43771: LD_VAR 0 2
43775: PUSH
43776: FOR_TO
43777: IFFALSE 43841
// begin hc_class = class_tiger ;
43779: LD_ADDR_OWVAR 28
43783: PUSH
43784: LD_INT 14
43786: ST_TO_ADDR
// hc_gallery =  ;
43787: LD_ADDR_OWVAR 33
43791: PUSH
43792: LD_STRING 
43794: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43795: LD_ADDR_OWVAR 35
43799: PUSH
43800: LD_INT 7
43802: NEG
43803: PPUSH
43804: LD_INT 7
43806: PPUSH
43807: CALL_OW 12
43811: ST_TO_ADDR
// animal := CreateHuman ;
43812: LD_ADDR_VAR 0 12
43816: PUSH
43817: CALL_OW 44
43821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43822: LD_VAR 0 12
43826: PPUSH
43827: LD_VAR 0 8
43831: PPUSH
43832: LD_INT 0
43834: PPUSH
43835: CALL 45741 0 3
// end ;
43839: GO 43776
43841: POP
43842: POP
// if apemans then
43843: LD_VAR 0 3
43847: IFFALSE 43970
// for i = 1 to apemans do
43849: LD_ADDR_VAR 0 11
43853: PUSH
43854: DOUBLE
43855: LD_INT 1
43857: DEC
43858: ST_TO_ADDR
43859: LD_VAR 0 3
43863: PUSH
43864: FOR_TO
43865: IFFALSE 43968
// begin hc_class = class_apeman ;
43867: LD_ADDR_OWVAR 28
43871: PUSH
43872: LD_INT 12
43874: ST_TO_ADDR
// hc_gallery =  ;
43875: LD_ADDR_OWVAR 33
43879: PUSH
43880: LD_STRING 
43882: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43883: LD_ADDR_OWVAR 35
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PPUSH
43892: LD_INT 2
43894: PPUSH
43895: CALL_OW 12
43899: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43900: LD_ADDR_OWVAR 31
43904: PUSH
43905: LD_INT 1
43907: PPUSH
43908: LD_INT 3
43910: PPUSH
43911: CALL_OW 12
43915: PUSH
43916: LD_INT 1
43918: PPUSH
43919: LD_INT 3
43921: PPUSH
43922: CALL_OW 12
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// animal := CreateHuman ;
43939: LD_ADDR_VAR 0 12
43943: PUSH
43944: CALL_OW 44
43948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43949: LD_VAR 0 12
43953: PPUSH
43954: LD_VAR 0 8
43958: PPUSH
43959: LD_INT 0
43961: PPUSH
43962: CALL 45741 0 3
// end ;
43966: GO 43864
43968: POP
43969: POP
// if enchidnas then
43970: LD_VAR 0 4
43974: IFFALSE 44041
// for i = 1 to enchidnas do
43976: LD_ADDR_VAR 0 11
43980: PUSH
43981: DOUBLE
43982: LD_INT 1
43984: DEC
43985: ST_TO_ADDR
43986: LD_VAR 0 4
43990: PUSH
43991: FOR_TO
43992: IFFALSE 44039
// begin hc_class = 13 ;
43994: LD_ADDR_OWVAR 28
43998: PUSH
43999: LD_INT 13
44001: ST_TO_ADDR
// hc_gallery =  ;
44002: LD_ADDR_OWVAR 33
44006: PUSH
44007: LD_STRING 
44009: ST_TO_ADDR
// animal := CreateHuman ;
44010: LD_ADDR_VAR 0 12
44014: PUSH
44015: CALL_OW 44
44019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44020: LD_VAR 0 12
44024: PPUSH
44025: LD_VAR 0 8
44029: PPUSH
44030: LD_INT 0
44032: PPUSH
44033: CALL 45741 0 3
// end ;
44037: GO 43991
44039: POP
44040: POP
// if fishes then
44041: LD_VAR 0 7
44045: IFFALSE 44112
// for i = 1 to fishes do
44047: LD_ADDR_VAR 0 11
44051: PUSH
44052: DOUBLE
44053: LD_INT 1
44055: DEC
44056: ST_TO_ADDR
44057: LD_VAR 0 7
44061: PUSH
44062: FOR_TO
44063: IFFALSE 44110
// begin hc_class = 20 ;
44065: LD_ADDR_OWVAR 28
44069: PUSH
44070: LD_INT 20
44072: ST_TO_ADDR
// hc_gallery =  ;
44073: LD_ADDR_OWVAR 33
44077: PUSH
44078: LD_STRING 
44080: ST_TO_ADDR
// animal := CreateHuman ;
44081: LD_ADDR_VAR 0 12
44085: PUSH
44086: CALL_OW 44
44090: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44091: LD_VAR 0 12
44095: PPUSH
44096: LD_VAR 0 9
44100: PPUSH
44101: LD_INT 0
44103: PPUSH
44104: CALL 45741 0 3
// end ;
44108: GO 44062
44110: POP
44111: POP
// end ;
44112: LD_VAR 0 10
44116: RET
// export function WantHeal ( sci , unit ) ; begin
44117: LD_INT 0
44119: PPUSH
// if GetTaskList ( sci ) > 0 then
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 437
44129: PUSH
44130: LD_INT 0
44132: GREATER
44133: IFFALSE 44203
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 437
44144: PUSH
44145: LD_INT 1
44147: ARRAY
44148: PUSH
44149: LD_INT 1
44151: ARRAY
44152: PUSH
44153: LD_STRING l
44155: EQUAL
44156: PUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 437
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: PUSH
44171: LD_INT 4
44173: ARRAY
44174: PUSH
44175: LD_VAR 0 2
44179: EQUAL
44180: AND
44181: IFFALSE 44193
// result := true else
44183: LD_ADDR_VAR 0 3
44187: PUSH
44188: LD_INT 1
44190: ST_TO_ADDR
44191: GO 44201
// result := false ;
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_INT 0
44200: ST_TO_ADDR
// end else
44201: GO 44211
// result := false ;
44203: LD_ADDR_VAR 0 3
44207: PUSH
44208: LD_INT 0
44210: ST_TO_ADDR
// end ;
44211: LD_VAR 0 3
44215: RET
// export function HealTarget ( sci ) ; begin
44216: LD_INT 0
44218: PPUSH
// if not sci then
44219: LD_VAR 0 1
44223: NOT
44224: IFFALSE 44228
// exit ;
44226: GO 44293
// result := 0 ;
44228: LD_ADDR_VAR 0 2
44232: PUSH
44233: LD_INT 0
44235: ST_TO_ADDR
// if GetTaskList ( sci ) then
44236: LD_VAR 0 1
44240: PPUSH
44241: CALL_OW 437
44245: IFFALSE 44293
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 437
44256: PUSH
44257: LD_INT 1
44259: ARRAY
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PUSH
44265: LD_STRING l
44267: EQUAL
44268: IFFALSE 44293
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44270: LD_ADDR_VAR 0 2
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: CALL_OW 437
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PUSH
44289: LD_INT 4
44291: ARRAY
44292: ST_TO_ADDR
// end ;
44293: LD_VAR 0 2
44297: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44298: LD_INT 0
44300: PPUSH
44301: PPUSH
44302: PPUSH
44303: PPUSH
// if not base_units then
44304: LD_VAR 0 1
44308: NOT
44309: IFFALSE 44313
// exit ;
44311: GO 44400
// result := false ;
44313: LD_ADDR_VAR 0 2
44317: PUSH
44318: LD_INT 0
44320: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44321: LD_ADDR_VAR 0 5
44325: PUSH
44326: LD_VAR 0 1
44330: PPUSH
44331: LD_INT 21
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 72
44345: ST_TO_ADDR
// if not tmp then
44346: LD_VAR 0 5
44350: NOT
44351: IFFALSE 44355
// exit ;
44353: GO 44400
// for i in tmp do
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: LD_VAR 0 5
44364: PUSH
44365: FOR_IN
44366: IFFALSE 44398
// begin result := EnemyInRange ( i , 22 ) ;
44368: LD_ADDR_VAR 0 2
44372: PUSH
44373: LD_VAR 0 3
44377: PPUSH
44378: LD_INT 22
44380: PPUSH
44381: CALL 41978 0 2
44385: ST_TO_ADDR
// if result then
44386: LD_VAR 0 2
44390: IFFALSE 44396
// exit ;
44392: POP
44393: POP
44394: GO 44400
// end ;
44396: GO 44365
44398: POP
44399: POP
// end ;
44400: LD_VAR 0 2
44404: RET
// export function FilterByTag ( units , tag ) ; begin
44405: LD_INT 0
44407: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: LD_INT 120
44420: PUSH
44421: LD_VAR 0 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PPUSH
44430: CALL_OW 72
44434: ST_TO_ADDR
// end ;
44435: LD_VAR 0 3
44439: RET
// export function IsDriver ( un ) ; begin
44440: LD_INT 0
44442: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44443: LD_ADDR_VAR 0 2
44447: PUSH
44448: LD_VAR 0 1
44452: PUSH
44453: LD_INT 55
44455: PUSH
44456: EMPTY
44457: LIST
44458: PPUSH
44459: CALL_OW 69
44463: IN
44464: ST_TO_ADDR
// end ;
44465: LD_VAR 0 2
44469: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44470: LD_INT 0
44472: PPUSH
44473: PPUSH
// list := [ ] ;
44474: LD_ADDR_VAR 0 5
44478: PUSH
44479: EMPTY
44480: ST_TO_ADDR
// case d of 0 :
44481: LD_VAR 0 3
44485: PUSH
44486: LD_INT 0
44488: DOUBLE
44489: EQUAL
44490: IFTRUE 44494
44492: GO 44627
44494: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44495: LD_ADDR_VAR 0 5
44499: PUSH
44500: LD_VAR 0 1
44504: PUSH
44505: LD_INT 4
44507: MINUS
44508: PUSH
44509: LD_VAR 0 2
44513: PUSH
44514: LD_INT 4
44516: MINUS
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: PUSH
44526: LD_VAR 0 1
44530: PUSH
44531: LD_INT 3
44533: MINUS
44534: PUSH
44535: LD_VAR 0 2
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: PUSH
44548: LD_VAR 0 1
44552: PUSH
44553: LD_INT 4
44555: PLUS
44556: PUSH
44557: LD_VAR 0 2
44561: PUSH
44562: LD_INT 4
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: PUSH
44570: LD_VAR 0 1
44574: PUSH
44575: LD_INT 3
44577: PLUS
44578: PUSH
44579: LD_VAR 0 2
44583: PUSH
44584: LD_INT 3
44586: PLUS
44587: PUSH
44588: LD_INT 5
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: PUSH
44596: LD_VAR 0 1
44600: PUSH
44601: LD_VAR 0 2
44605: PUSH
44606: LD_INT 4
44608: PLUS
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// end ; 1 :
44625: GO 45325
44627: LD_INT 1
44629: DOUBLE
44630: EQUAL
44631: IFTRUE 44635
44633: GO 44768
44635: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44636: LD_ADDR_VAR 0 5
44640: PUSH
44641: LD_VAR 0 1
44645: PUSH
44646: LD_VAR 0 2
44650: PUSH
44651: LD_INT 4
44653: MINUS
44654: PUSH
44655: LD_INT 3
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: PUSH
44663: LD_VAR 0 1
44667: PUSH
44668: LD_INT 3
44670: MINUS
44671: PUSH
44672: LD_VAR 0 2
44676: PUSH
44677: LD_INT 3
44679: MINUS
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: PUSH
44689: LD_VAR 0 1
44693: PUSH
44694: LD_INT 4
44696: MINUS
44697: PUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: PUSH
44711: LD_VAR 0 1
44715: PUSH
44716: LD_VAR 0 2
44720: PUSH
44721: LD_INT 3
44723: PLUS
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: PUSH
44733: LD_VAR 0 1
44737: PUSH
44738: LD_INT 4
44740: PLUS
44741: PUSH
44742: LD_VAR 0 2
44746: PUSH
44747: LD_INT 4
44749: PLUS
44750: PUSH
44751: LD_INT 5
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// end ; 2 :
44766: GO 45325
44768: LD_INT 2
44770: DOUBLE
44771: EQUAL
44772: IFTRUE 44776
44774: GO 44905
44776: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44777: LD_ADDR_VAR 0 5
44781: PUSH
44782: LD_VAR 0 1
44786: PUSH
44787: LD_VAR 0 2
44791: PUSH
44792: LD_INT 3
44794: MINUS
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: PUSH
44804: LD_VAR 0 1
44808: PUSH
44809: LD_INT 4
44811: PLUS
44812: PUSH
44813: LD_VAR 0 2
44817: PUSH
44818: LD_INT 4
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: PUSH
44826: LD_VAR 0 1
44830: PUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 4
44838: PLUS
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: LD_VAR 0 1
44852: PUSH
44853: LD_INT 3
44855: MINUS
44856: PUSH
44857: LD_VAR 0 2
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: PUSH
44870: LD_VAR 0 1
44874: PUSH
44875: LD_INT 4
44877: MINUS
44878: PUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_INT 4
44886: MINUS
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// end ; 3 :
44903: GO 45325
44905: LD_INT 3
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 45046
44913: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: LD_VAR 0 1
44923: PUSH
44924: LD_INT 3
44926: PLUS
44927: PUSH
44928: LD_VAR 0 2
44932: PUSH
44933: LD_INT 4
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: PUSH
44941: LD_VAR 0 1
44945: PUSH
44946: LD_INT 4
44948: PLUS
44949: PUSH
44950: LD_VAR 0 2
44954: PUSH
44955: LD_INT 4
44957: PLUS
44958: PUSH
44959: LD_INT 5
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: PUSH
44967: LD_VAR 0 1
44971: PUSH
44972: LD_INT 4
44974: MINUS
44975: PUSH
44976: LD_VAR 0 2
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: PUSH
44989: LD_VAR 0 1
44993: PUSH
44994: LD_VAR 0 2
44998: PUSH
44999: LD_INT 4
45001: MINUS
45002: PUSH
45003: LD_INT 3
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: PUSH
45011: LD_VAR 0 1
45015: PUSH
45016: LD_INT 3
45018: MINUS
45019: PUSH
45020: LD_VAR 0 2
45024: PUSH
45025: LD_INT 3
45027: MINUS
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: ST_TO_ADDR
// end ; 4 :
45044: GO 45325
45046: LD_INT 4
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45054
45052: GO 45187
45054: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45055: LD_ADDR_VAR 0 5
45059: PUSH
45060: LD_VAR 0 1
45064: PUSH
45065: LD_VAR 0 2
45069: PUSH
45070: LD_INT 4
45072: PLUS
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: PUSH
45082: LD_VAR 0 1
45086: PUSH
45087: LD_INT 3
45089: PLUS
45090: PUSH
45091: LD_VAR 0 2
45095: PUSH
45096: LD_INT 3
45098: PLUS
45099: PUSH
45100: LD_INT 5
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: PUSH
45108: LD_VAR 0 1
45112: PUSH
45113: LD_INT 4
45115: PLUS
45116: PUSH
45117: LD_VAR 0 2
45121: PUSH
45122: LD_INT 4
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: PUSH
45130: LD_VAR 0 1
45134: PUSH
45135: LD_VAR 0 2
45139: PUSH
45140: LD_INT 3
45142: MINUS
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: PUSH
45152: LD_VAR 0 1
45156: PUSH
45157: LD_INT 4
45159: MINUS
45160: PUSH
45161: LD_VAR 0 2
45165: PUSH
45166: LD_INT 4
45168: MINUS
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// end ; 5 :
45185: GO 45325
45187: LD_INT 5
45189: DOUBLE
45190: EQUAL
45191: IFTRUE 45195
45193: GO 45324
45195: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45196: LD_ADDR_VAR 0 5
45200: PUSH
45201: LD_VAR 0 1
45205: PUSH
45206: LD_INT 4
45208: MINUS
45209: PUSH
45210: LD_VAR 0 2
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: LD_VAR 0 1
45227: PUSH
45228: LD_VAR 0 2
45232: PUSH
45233: LD_INT 4
45235: MINUS
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: PUSH
45245: LD_VAR 0 1
45249: PUSH
45250: LD_INT 4
45252: PLUS
45253: PUSH
45254: LD_VAR 0 2
45258: PUSH
45259: LD_INT 4
45261: PLUS
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: PUSH
45271: LD_VAR 0 1
45275: PUSH
45276: LD_INT 3
45278: PLUS
45279: PUSH
45280: LD_VAR 0 2
45284: PUSH
45285: LD_INT 4
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: PUSH
45293: LD_VAR 0 1
45297: PUSH
45298: LD_VAR 0 2
45302: PUSH
45303: LD_INT 3
45305: PLUS
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: ST_TO_ADDR
// end ; end ;
45322: GO 45325
45324: POP
// result := list ;
45325: LD_ADDR_VAR 0 4
45329: PUSH
45330: LD_VAR 0 5
45334: ST_TO_ADDR
// end ;
45335: LD_VAR 0 4
45339: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45340: LD_INT 0
45342: PPUSH
45343: PPUSH
45344: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45345: LD_VAR 0 1
45349: NOT
45350: PUSH
45351: LD_VAR 0 2
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: IN
45374: NOT
45375: OR
45376: IFFALSE 45380
// exit ;
45378: GO 45463
// tmp := [ ] ;
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: EMPTY
45386: ST_TO_ADDR
// for i in units do
45387: LD_ADDR_VAR 0 4
45391: PUSH
45392: LD_VAR 0 1
45396: PUSH
45397: FOR_IN
45398: IFFALSE 45432
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45400: LD_ADDR_VAR 0 5
45404: PUSH
45405: LD_VAR 0 5
45409: PPUSH
45410: LD_VAR 0 4
45414: PPUSH
45415: LD_VAR 0 2
45419: PPUSH
45420: CALL_OW 259
45424: PPUSH
45425: CALL 46836 0 2
45429: ST_TO_ADDR
45430: GO 45397
45432: POP
45433: POP
// if not tmp then
45434: LD_VAR 0 5
45438: NOT
45439: IFFALSE 45443
// exit ;
45441: GO 45463
// result := SortListByListDesc ( units , tmp ) ;
45443: LD_ADDR_VAR 0 3
45447: PUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_VAR 0 5
45457: PPUSH
45458: CALL_OW 77
45462: ST_TO_ADDR
// end ;
45463: LD_VAR 0 3
45467: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45468: LD_INT 0
45470: PPUSH
45471: PPUSH
45472: PPUSH
// result := false ;
45473: LD_ADDR_VAR 0 3
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// if not building then
45481: LD_VAR 0 2
45485: NOT
45486: IFFALSE 45490
// exit ;
45488: GO 45628
// x := GetX ( building ) ;
45490: LD_ADDR_VAR 0 4
45494: PUSH
45495: LD_VAR 0 2
45499: PPUSH
45500: CALL_OW 250
45504: ST_TO_ADDR
// y := GetY ( building ) ;
45505: LD_ADDR_VAR 0 5
45509: PUSH
45510: LD_VAR 0 2
45514: PPUSH
45515: CALL_OW 251
45519: ST_TO_ADDR
// if not x or not y then
45520: LD_VAR 0 4
45524: NOT
45525: PUSH
45526: LD_VAR 0 5
45530: NOT
45531: OR
45532: IFFALSE 45536
// exit ;
45534: GO 45628
// if GetTaskList ( unit ) then
45536: LD_VAR 0 1
45540: PPUSH
45541: CALL_OW 437
45545: IFFALSE 45628
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45547: LD_STRING e
45549: PUSH
45550: LD_VAR 0 1
45554: PPUSH
45555: CALL_OW 437
45559: PUSH
45560: LD_INT 1
45562: ARRAY
45563: PUSH
45564: LD_INT 1
45566: ARRAY
45567: EQUAL
45568: PUSH
45569: LD_VAR 0 4
45573: PUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: CALL_OW 437
45583: PUSH
45584: LD_INT 1
45586: ARRAY
45587: PUSH
45588: LD_INT 2
45590: ARRAY
45591: EQUAL
45592: AND
45593: PUSH
45594: LD_VAR 0 5
45598: PUSH
45599: LD_VAR 0 1
45603: PPUSH
45604: CALL_OW 437
45608: PUSH
45609: LD_INT 1
45611: ARRAY
45612: PUSH
45613: LD_INT 3
45615: ARRAY
45616: EQUAL
45617: AND
45618: IFFALSE 45628
// result := true end ;
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_INT 1
45627: ST_TO_ADDR
// end ;
45628: LD_VAR 0 3
45632: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45633: LD_INT 0
45635: PPUSH
// result := false ;
45636: LD_ADDR_VAR 0 4
45640: PUSH
45641: LD_INT 0
45643: ST_TO_ADDR
// if GetTaskList ( unit ) then
45644: LD_VAR 0 1
45648: PPUSH
45649: CALL_OW 437
45653: IFFALSE 45736
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45655: LD_STRING M
45657: PUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 437
45667: PUSH
45668: LD_INT 1
45670: ARRAY
45671: PUSH
45672: LD_INT 1
45674: ARRAY
45675: EQUAL
45676: PUSH
45677: LD_VAR 0 2
45681: PUSH
45682: LD_VAR 0 1
45686: PPUSH
45687: CALL_OW 437
45691: PUSH
45692: LD_INT 1
45694: ARRAY
45695: PUSH
45696: LD_INT 2
45698: ARRAY
45699: EQUAL
45700: AND
45701: PUSH
45702: LD_VAR 0 3
45706: PUSH
45707: LD_VAR 0 1
45711: PPUSH
45712: CALL_OW 437
45716: PUSH
45717: LD_INT 1
45719: ARRAY
45720: PUSH
45721: LD_INT 3
45723: ARRAY
45724: EQUAL
45725: AND
45726: IFFALSE 45736
// result := true ;
45728: LD_ADDR_VAR 0 4
45732: PUSH
45733: LD_INT 1
45735: ST_TO_ADDR
// end ; end ;
45736: LD_VAR 0 4
45740: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45741: LD_INT 0
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
// if not unit or not area then
45747: LD_VAR 0 1
45751: NOT
45752: PUSH
45753: LD_VAR 0 2
45757: NOT
45758: OR
45759: IFFALSE 45763
// exit ;
45761: GO 45939
// tmp := AreaToList ( area , i ) ;
45763: LD_ADDR_VAR 0 6
45767: PUSH
45768: LD_VAR 0 2
45772: PPUSH
45773: LD_VAR 0 5
45777: PPUSH
45778: CALL_OW 517
45782: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45783: LD_ADDR_VAR 0 5
45787: PUSH
45788: DOUBLE
45789: LD_INT 1
45791: DEC
45792: ST_TO_ADDR
45793: LD_VAR 0 6
45797: PUSH
45798: LD_INT 1
45800: ARRAY
45801: PUSH
45802: FOR_TO
45803: IFFALSE 45937
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45805: LD_ADDR_VAR 0 7
45809: PUSH
45810: LD_VAR 0 6
45814: PUSH
45815: LD_INT 1
45817: ARRAY
45818: PUSH
45819: LD_VAR 0 5
45823: ARRAY
45824: PUSH
45825: LD_VAR 0 6
45829: PUSH
45830: LD_INT 2
45832: ARRAY
45833: PUSH
45834: LD_VAR 0 5
45838: ARRAY
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45844: LD_INT 92
45846: PUSH
45847: LD_VAR 0 7
45851: PUSH
45852: LD_INT 1
45854: ARRAY
45855: PUSH
45856: LD_VAR 0 7
45860: PUSH
45861: LD_INT 2
45863: ARRAY
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 69
45878: PUSH
45879: LD_INT 0
45881: EQUAL
45882: IFFALSE 45935
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45884: LD_VAR 0 1
45888: PPUSH
45889: LD_VAR 0 7
45893: PUSH
45894: LD_INT 1
45896: ARRAY
45897: PPUSH
45898: LD_VAR 0 7
45902: PUSH
45903: LD_INT 2
45905: ARRAY
45906: PPUSH
45907: LD_VAR 0 3
45911: PPUSH
45912: CALL_OW 48
// result := IsPlaced ( unit ) ;
45916: LD_ADDR_VAR 0 4
45920: PUSH
45921: LD_VAR 0 1
45925: PPUSH
45926: CALL_OW 305
45930: ST_TO_ADDR
// exit ;
45931: POP
45932: POP
45933: GO 45939
// end ; end ;
45935: GO 45802
45937: POP
45938: POP
// end ;
45939: LD_VAR 0 4
45943: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
45948: PPUSH
// if not side or side > 8 then
45949: LD_VAR 0 1
45953: NOT
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_INT 8
45962: GREATER
45963: OR
45964: IFFALSE 45968
// exit ;
45966: GO 46155
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45968: LD_ADDR_VAR 0 4
45972: PUSH
45973: LD_INT 22
45975: PUSH
45976: LD_VAR 0 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 21
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PPUSH
45999: CALL_OW 69
46003: ST_TO_ADDR
// if not tmp then
46004: LD_VAR 0 4
46008: NOT
46009: IFFALSE 46013
// exit ;
46011: GO 46155
// enable_addtolog := true ;
46013: LD_ADDR_OWVAR 81
46017: PUSH
46018: LD_INT 1
46020: ST_TO_ADDR
// AddToLog ( [ ) ;
46021: LD_STRING [
46023: PPUSH
46024: CALL_OW 561
// for i in tmp do
46028: LD_ADDR_VAR 0 3
46032: PUSH
46033: LD_VAR 0 4
46037: PUSH
46038: FOR_IN
46039: IFFALSE 46146
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46041: LD_STRING [
46043: PUSH
46044: LD_VAR 0 3
46048: PPUSH
46049: CALL_OW 266
46053: STR
46054: PUSH
46055: LD_STRING , 
46057: STR
46058: PUSH
46059: LD_VAR 0 3
46063: PPUSH
46064: CALL_OW 250
46068: STR
46069: PUSH
46070: LD_STRING , 
46072: STR
46073: PUSH
46074: LD_VAR 0 3
46078: PPUSH
46079: CALL_OW 251
46083: STR
46084: PUSH
46085: LD_STRING , 
46087: STR
46088: PUSH
46089: LD_VAR 0 3
46093: PPUSH
46094: CALL_OW 254
46098: STR
46099: PUSH
46100: LD_STRING , 
46102: STR
46103: PUSH
46104: LD_VAR 0 3
46108: PPUSH
46109: LD_INT 1
46111: PPUSH
46112: CALL_OW 268
46116: STR
46117: PUSH
46118: LD_STRING , 
46120: STR
46121: PUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: LD_INT 2
46129: PPUSH
46130: CALL_OW 268
46134: STR
46135: PUSH
46136: LD_STRING ],
46138: STR
46139: PPUSH
46140: CALL_OW 561
// end ;
46144: GO 46038
46146: POP
46147: POP
// AddToLog ( ]; ) ;
46148: LD_STRING ];
46150: PPUSH
46151: CALL_OW 561
// end ;
46155: LD_VAR 0 2
46159: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46160: LD_INT 0
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
// if not area or not rate or not max then
46167: LD_VAR 0 1
46171: NOT
46172: PUSH
46173: LD_VAR 0 2
46177: NOT
46178: OR
46179: PUSH
46180: LD_VAR 0 4
46184: NOT
46185: OR
46186: IFFALSE 46190
// exit ;
46188: GO 46379
// while 1 do
46190: LD_INT 1
46192: IFFALSE 46379
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46194: LD_ADDR_VAR 0 9
46198: PUSH
46199: LD_VAR 0 1
46203: PPUSH
46204: LD_INT 1
46206: PPUSH
46207: CALL_OW 287
46211: PUSH
46212: LD_INT 10
46214: MUL
46215: ST_TO_ADDR
// r := rate / 10 ;
46216: LD_ADDR_VAR 0 7
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_INT 10
46228: DIVREAL
46229: ST_TO_ADDR
// time := 1 1$00 ;
46230: LD_ADDR_VAR 0 8
46234: PUSH
46235: LD_INT 2100
46237: ST_TO_ADDR
// if amount < min then
46238: LD_VAR 0 9
46242: PUSH
46243: LD_VAR 0 3
46247: LESS
46248: IFFALSE 46266
// r := r * 2 else
46250: LD_ADDR_VAR 0 7
46254: PUSH
46255: LD_VAR 0 7
46259: PUSH
46260: LD_INT 2
46262: MUL
46263: ST_TO_ADDR
46264: GO 46292
// if amount > max then
46266: LD_VAR 0 9
46270: PUSH
46271: LD_VAR 0 4
46275: GREATER
46276: IFFALSE 46292
// r := r / 2 ;
46278: LD_ADDR_VAR 0 7
46282: PUSH
46283: LD_VAR 0 7
46287: PUSH
46288: LD_INT 2
46290: DIVREAL
46291: ST_TO_ADDR
// time := time / r ;
46292: LD_ADDR_VAR 0 8
46296: PUSH
46297: LD_VAR 0 8
46301: PUSH
46302: LD_VAR 0 7
46306: DIVREAL
46307: ST_TO_ADDR
// if time < 0 then
46308: LD_VAR 0 8
46312: PUSH
46313: LD_INT 0
46315: LESS
46316: IFFALSE 46333
// time := time * - 1 ;
46318: LD_ADDR_VAR 0 8
46322: PUSH
46323: LD_VAR 0 8
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: MUL
46332: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46333: LD_VAR 0 8
46337: PUSH
46338: LD_INT 35
46340: PPUSH
46341: LD_INT 875
46343: PPUSH
46344: CALL_OW 12
46348: PLUS
46349: PPUSH
46350: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46354: LD_INT 1
46356: PPUSH
46357: LD_INT 5
46359: PPUSH
46360: CALL_OW 12
46364: PPUSH
46365: LD_VAR 0 1
46369: PPUSH
46370: LD_INT 1
46372: PPUSH
46373: CALL_OW 55
// end ;
46377: GO 46190
// end ;
46379: LD_VAR 0 5
46383: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46384: LD_INT 0
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
// if not turrets or not factories then
46394: LD_VAR 0 1
46398: NOT
46399: PUSH
46400: LD_VAR 0 2
46404: NOT
46405: OR
46406: IFFALSE 46410
// exit ;
46408: GO 46717
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46410: LD_ADDR_VAR 0 10
46414: PUSH
46415: LD_INT 5
46417: PUSH
46418: LD_INT 6
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 4
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 5
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 24
46452: PUSH
46453: LD_INT 25
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 23
46462: PUSH
46463: LD_INT 27
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 42
46476: PUSH
46477: LD_INT 43
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 44
46486: PUSH
46487: LD_INT 46
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 45
46496: PUSH
46497: LD_INT 47
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// result := [ ] ;
46514: LD_ADDR_VAR 0 3
46518: PUSH
46519: EMPTY
46520: ST_TO_ADDR
// for i in turrets do
46521: LD_ADDR_VAR 0 4
46525: PUSH
46526: LD_VAR 0 1
46530: PUSH
46531: FOR_IN
46532: IFFALSE 46715
// begin nat := GetNation ( i ) ;
46534: LD_ADDR_VAR 0 7
46538: PUSH
46539: LD_VAR 0 4
46543: PPUSH
46544: CALL_OW 248
46548: ST_TO_ADDR
// weapon := 0 ;
46549: LD_ADDR_VAR 0 8
46553: PUSH
46554: LD_INT 0
46556: ST_TO_ADDR
// if not nat then
46557: LD_VAR 0 7
46561: NOT
46562: IFFALSE 46566
// continue ;
46564: GO 46531
// for j in list [ nat ] do
46566: LD_ADDR_VAR 0 5
46570: PUSH
46571: LD_VAR 0 10
46575: PUSH
46576: LD_VAR 0 7
46580: ARRAY
46581: PUSH
46582: FOR_IN
46583: IFFALSE 46624
// if GetBWeapon ( i ) = j [ 1 ] then
46585: LD_VAR 0 4
46589: PPUSH
46590: CALL_OW 269
46594: PUSH
46595: LD_VAR 0 5
46599: PUSH
46600: LD_INT 1
46602: ARRAY
46603: EQUAL
46604: IFFALSE 46622
// begin weapon := j [ 2 ] ;
46606: LD_ADDR_VAR 0 8
46610: PUSH
46611: LD_VAR 0 5
46615: PUSH
46616: LD_INT 2
46618: ARRAY
46619: ST_TO_ADDR
// break ;
46620: GO 46624
// end ;
46622: GO 46582
46624: POP
46625: POP
// if not weapon then
46626: LD_VAR 0 8
46630: NOT
46631: IFFALSE 46635
// continue ;
46633: GO 46531
// for k in factories do
46635: LD_ADDR_VAR 0 6
46639: PUSH
46640: LD_VAR 0 2
46644: PUSH
46645: FOR_IN
46646: IFFALSE 46711
// begin weapons := AvailableWeaponList ( k ) ;
46648: LD_ADDR_VAR 0 9
46652: PUSH
46653: LD_VAR 0 6
46657: PPUSH
46658: CALL_OW 478
46662: ST_TO_ADDR
// if not weapons then
46663: LD_VAR 0 9
46667: NOT
46668: IFFALSE 46672
// continue ;
46670: GO 46645
// if weapon in weapons then
46672: LD_VAR 0 8
46676: PUSH
46677: LD_VAR 0 9
46681: IN
46682: IFFALSE 46709
// begin result := [ i , weapon ] ;
46684: LD_ADDR_VAR 0 3
46688: PUSH
46689: LD_VAR 0 4
46693: PUSH
46694: LD_VAR 0 8
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// exit ;
46703: POP
46704: POP
46705: POP
46706: POP
46707: GO 46717
// end ; end ;
46709: GO 46645
46711: POP
46712: POP
// end ;
46713: GO 46531
46715: POP
46716: POP
// end ;
46717: LD_VAR 0 3
46721: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46722: LD_INT 0
46724: PPUSH
// if not side or side > 8 then
46725: LD_VAR 0 3
46729: NOT
46730: PUSH
46731: LD_VAR 0 3
46735: PUSH
46736: LD_INT 8
46738: GREATER
46739: OR
46740: IFFALSE 46744
// exit ;
46742: GO 46803
// if not range then
46744: LD_VAR 0 4
46748: NOT
46749: IFFALSE 46760
// range := - 12 ;
46751: LD_ADDR_VAR 0 4
46755: PUSH
46756: LD_INT 12
46758: NEG
46759: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46760: LD_VAR 0 1
46764: PPUSH
46765: LD_VAR 0 2
46769: PPUSH
46770: LD_VAR 0 3
46774: PPUSH
46775: LD_VAR 0 4
46779: PPUSH
46780: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46784: LD_VAR 0 1
46788: PPUSH
46789: LD_VAR 0 2
46793: PPUSH
46794: LD_VAR 0 3
46798: PPUSH
46799: CALL_OW 331
// end ;
46803: LD_VAR 0 5
46807: RET
// export function Video ( mode ) ; begin
46808: LD_INT 0
46810: PPUSH
// ingame_video = mode ;
46811: LD_ADDR_OWVAR 52
46815: PUSH
46816: LD_VAR 0 1
46820: ST_TO_ADDR
// interface_hidden = mode ;
46821: LD_ADDR_OWVAR 54
46825: PUSH
46826: LD_VAR 0 1
46830: ST_TO_ADDR
// end ;
46831: LD_VAR 0 2
46835: RET
// export function Join ( array , element ) ; begin
46836: LD_INT 0
46838: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46839: LD_ADDR_VAR 0 3
46843: PUSH
46844: LD_VAR 0 1
46848: PPUSH
46849: LD_VAR 0 1
46853: PUSH
46854: LD_INT 1
46856: PLUS
46857: PPUSH
46858: LD_VAR 0 2
46862: PPUSH
46863: CALL_OW 1
46867: ST_TO_ADDR
// end ;
46868: LD_VAR 0 3
46872: RET
// export function JoinUnion ( array , element ) ; begin
46873: LD_INT 0
46875: PPUSH
// result := array union element ;
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_VAR 0 1
46885: PUSH
46886: LD_VAR 0 2
46890: UNION
46891: ST_TO_ADDR
// end ;
46892: LD_VAR 0 3
46896: RET
// export function GetBehemoths ( side ) ; begin
46897: LD_INT 0
46899: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46900: LD_ADDR_VAR 0 2
46904: PUSH
46905: LD_INT 22
46907: PUSH
46908: LD_VAR 0 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 31
46919: PUSH
46920: LD_INT 25
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PPUSH
46931: CALL_OW 69
46935: ST_TO_ADDR
// end ;
46936: LD_VAR 0 2
46940: RET
// export function Shuffle ( array ) ; var i , index ; begin
46941: LD_INT 0
46943: PPUSH
46944: PPUSH
46945: PPUSH
// result := [ ] ;
46946: LD_ADDR_VAR 0 2
46950: PUSH
46951: EMPTY
46952: ST_TO_ADDR
// if not array then
46953: LD_VAR 0 1
46957: NOT
46958: IFFALSE 46962
// exit ;
46960: GO 47061
// Randomize ;
46962: CALL_OW 10
// for i = array downto 1 do
46966: LD_ADDR_VAR 0 3
46970: PUSH
46971: DOUBLE
46972: LD_VAR 0 1
46976: INC
46977: ST_TO_ADDR
46978: LD_INT 1
46980: PUSH
46981: FOR_DOWNTO
46982: IFFALSE 47059
// begin index := rand ( 1 , array ) ;
46984: LD_ADDR_VAR 0 4
46988: PUSH
46989: LD_INT 1
46991: PPUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 12
47001: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47002: LD_ADDR_VAR 0 2
47006: PUSH
47007: LD_VAR 0 2
47011: PPUSH
47012: LD_VAR 0 2
47016: PUSH
47017: LD_INT 1
47019: PLUS
47020: PPUSH
47021: LD_VAR 0 1
47025: PUSH
47026: LD_VAR 0 4
47030: ARRAY
47031: PPUSH
47032: CALL_OW 2
47036: ST_TO_ADDR
// array := Delete ( array , index ) ;
47037: LD_ADDR_VAR 0 1
47041: PUSH
47042: LD_VAR 0 1
47046: PPUSH
47047: LD_VAR 0 4
47051: PPUSH
47052: CALL_OW 3
47056: ST_TO_ADDR
// end ;
47057: GO 46981
47059: POP
47060: POP
// end ;
47061: LD_VAR 0 2
47065: RET
// export function GetBaseMaterials ( base ) ; begin
47066: LD_INT 0
47068: PPUSH
// result := [ 0 , 0 , 0 ] ;
47069: LD_ADDR_VAR 0 2
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// if not base then
47088: LD_VAR 0 1
47092: NOT
47093: IFFALSE 47097
// exit ;
47095: GO 47146
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47097: LD_ADDR_VAR 0 2
47101: PUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: LD_INT 1
47109: PPUSH
47110: CALL_OW 275
47114: PUSH
47115: LD_VAR 0 1
47119: PPUSH
47120: LD_INT 2
47122: PPUSH
47123: CALL_OW 275
47127: PUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: LD_INT 3
47135: PPUSH
47136: CALL_OW 275
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// end ;
47146: LD_VAR 0 2
47150: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47151: LD_INT 0
47153: PPUSH
47154: PPUSH
// result := array ;
47155: LD_ADDR_VAR 0 3
47159: PUSH
47160: LD_VAR 0 1
47164: ST_TO_ADDR
// if size >= result then
47165: LD_VAR 0 2
47169: PUSH
47170: LD_VAR 0 3
47174: GREATEREQUAL
47175: IFFALSE 47179
// exit ;
47177: GO 47229
// if size then
47179: LD_VAR 0 2
47183: IFFALSE 47229
// for i := array downto size do
47185: LD_ADDR_VAR 0 4
47189: PUSH
47190: DOUBLE
47191: LD_VAR 0 1
47195: INC
47196: ST_TO_ADDR
47197: LD_VAR 0 2
47201: PUSH
47202: FOR_DOWNTO
47203: IFFALSE 47227
// result := Delete ( result , result ) ;
47205: LD_ADDR_VAR 0 3
47209: PUSH
47210: LD_VAR 0 3
47214: PPUSH
47215: LD_VAR 0 3
47219: PPUSH
47220: CALL_OW 3
47224: ST_TO_ADDR
47225: GO 47202
47227: POP
47228: POP
// end ;
47229: LD_VAR 0 3
47233: RET
// export function ComExit ( unit ) ; var tmp ; begin
47234: LD_INT 0
47236: PPUSH
47237: PPUSH
// if not IsInUnit ( unit ) then
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 310
47247: NOT
47248: IFFALSE 47252
// exit ;
47250: GO 47312
// tmp := IsInUnit ( unit ) ;
47252: LD_ADDR_VAR 0 3
47256: PUSH
47257: LD_VAR 0 1
47261: PPUSH
47262: CALL_OW 310
47266: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47267: LD_VAR 0 3
47271: PPUSH
47272: CALL_OW 247
47276: PUSH
47277: LD_INT 2
47279: EQUAL
47280: IFFALSE 47293
// ComExitVehicle ( unit ) else
47282: LD_VAR 0 1
47286: PPUSH
47287: CALL_OW 121
47291: GO 47302
// ComExitBuilding ( unit ) ;
47293: LD_VAR 0 1
47297: PPUSH
47298: CALL_OW 122
// result := tmp ;
47302: LD_ADDR_VAR 0 2
47306: PUSH
47307: LD_VAR 0 3
47311: ST_TO_ADDR
// end ;
47312: LD_VAR 0 2
47316: RET
// export function ComExitAll ( units ) ; var i ; begin
47317: LD_INT 0
47319: PPUSH
47320: PPUSH
// if not units then
47321: LD_VAR 0 1
47325: NOT
47326: IFFALSE 47330
// exit ;
47328: GO 47356
// for i in units do
47330: LD_ADDR_VAR 0 3
47334: PUSH
47335: LD_VAR 0 1
47339: PUSH
47340: FOR_IN
47341: IFFALSE 47354
// ComExit ( i ) ;
47343: LD_VAR 0 3
47347: PPUSH
47348: CALL 47234 0 1
47352: GO 47340
47354: POP
47355: POP
// end ;
47356: LD_VAR 0 2
47360: RET
// export function ResetHc ; begin
47361: LD_INT 0
47363: PPUSH
// InitHc ;
47364: CALL_OW 19
// hc_importance := 0 ;
47368: LD_ADDR_OWVAR 32
47372: PUSH
47373: LD_INT 0
47375: ST_TO_ADDR
// end ;
47376: LD_VAR 0 1
47380: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47381: LD_INT 0
47383: PPUSH
47384: PPUSH
47385: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47386: LD_ADDR_VAR 0 6
47390: PUSH
47391: LD_VAR 0 1
47395: PUSH
47396: LD_VAR 0 3
47400: PLUS
47401: PUSH
47402: LD_INT 2
47404: DIV
47405: ST_TO_ADDR
// if _x < 0 then
47406: LD_VAR 0 6
47410: PUSH
47411: LD_INT 0
47413: LESS
47414: IFFALSE 47431
// _x := _x * - 1 ;
47416: LD_ADDR_VAR 0 6
47420: PUSH
47421: LD_VAR 0 6
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: MUL
47430: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47431: LD_ADDR_VAR 0 7
47435: PUSH
47436: LD_VAR 0 2
47440: PUSH
47441: LD_VAR 0 4
47445: PLUS
47446: PUSH
47447: LD_INT 2
47449: DIV
47450: ST_TO_ADDR
// if _y < 0 then
47451: LD_VAR 0 7
47455: PUSH
47456: LD_INT 0
47458: LESS
47459: IFFALSE 47476
// _y := _y * - 1 ;
47461: LD_ADDR_VAR 0 7
47465: PUSH
47466: LD_VAR 0 7
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: MUL
47475: ST_TO_ADDR
// result := [ _x , _y ] ;
47476: LD_ADDR_VAR 0 5
47480: PUSH
47481: LD_VAR 0 6
47485: PUSH
47486: LD_VAR 0 7
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// end ;
47495: LD_VAR 0 5
47499: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47500: LD_INT 0
47502: PPUSH
47503: PPUSH
47504: PPUSH
47505: PPUSH
// task := GetTaskList ( unit ) ;
47506: LD_ADDR_VAR 0 7
47510: PUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: CALL_OW 437
47520: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47521: LD_VAR 0 7
47525: NOT
47526: PUSH
47527: LD_VAR 0 1
47531: PPUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 308
47541: NOT
47542: AND
47543: IFFALSE 47547
// exit ;
47545: GO 47665
// if IsInArea ( unit , area ) then
47547: LD_VAR 0 1
47551: PPUSH
47552: LD_VAR 0 2
47556: PPUSH
47557: CALL_OW 308
47561: IFFALSE 47579
// begin ComMoveToArea ( unit , goAway ) ;
47563: LD_VAR 0 1
47567: PPUSH
47568: LD_VAR 0 3
47572: PPUSH
47573: CALL_OW 113
// exit ;
47577: GO 47665
// end ; if task [ 1 ] [ 1 ] <> M then
47579: LD_VAR 0 7
47583: PUSH
47584: LD_INT 1
47586: ARRAY
47587: PUSH
47588: LD_INT 1
47590: ARRAY
47591: PUSH
47592: LD_STRING M
47594: NONEQUAL
47595: IFFALSE 47599
// exit ;
47597: GO 47665
// x := task [ 1 ] [ 2 ] ;
47599: LD_ADDR_VAR 0 5
47603: PUSH
47604: LD_VAR 0 7
47608: PUSH
47609: LD_INT 1
47611: ARRAY
47612: PUSH
47613: LD_INT 2
47615: ARRAY
47616: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47617: LD_ADDR_VAR 0 6
47621: PUSH
47622: LD_VAR 0 7
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: PUSH
47631: LD_INT 3
47633: ARRAY
47634: ST_TO_ADDR
// if InArea ( x , y , area ) then
47635: LD_VAR 0 5
47639: PPUSH
47640: LD_VAR 0 6
47644: PPUSH
47645: LD_VAR 0 2
47649: PPUSH
47650: CALL_OW 309
47654: IFFALSE 47665
// ComStop ( unit ) ;
47656: LD_VAR 0 1
47660: PPUSH
47661: CALL_OW 141
// end ;
47665: LD_VAR 0 4
47669: RET
// export function Abs ( value ) ; begin
47670: LD_INT 0
47672: PPUSH
// result := value ;
47673: LD_ADDR_VAR 0 2
47677: PUSH
47678: LD_VAR 0 1
47682: ST_TO_ADDR
// if value < 0 then
47683: LD_VAR 0 1
47687: PUSH
47688: LD_INT 0
47690: LESS
47691: IFFALSE 47708
// result := value * - 1 ;
47693: LD_ADDR_VAR 0 2
47697: PUSH
47698: LD_VAR 0 1
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: MUL
47707: ST_TO_ADDR
// end ;
47708: LD_VAR 0 2
47712: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47713: LD_INT 0
47715: PPUSH
47716: PPUSH
47717: PPUSH
47718: PPUSH
47719: PPUSH
47720: PPUSH
47721: PPUSH
47722: PPUSH
// if not unit or not building then
47723: LD_VAR 0 1
47727: NOT
47728: PUSH
47729: LD_VAR 0 2
47733: NOT
47734: OR
47735: IFFALSE 47739
// exit ;
47737: GO 47965
// x := GetX ( building ) ;
47739: LD_ADDR_VAR 0 4
47743: PUSH
47744: LD_VAR 0 2
47748: PPUSH
47749: CALL_OW 250
47753: ST_TO_ADDR
// y := GetY ( building ) ;
47754: LD_ADDR_VAR 0 6
47758: PUSH
47759: LD_VAR 0 2
47763: PPUSH
47764: CALL_OW 251
47768: ST_TO_ADDR
// d := GetDir ( building ) ;
47769: LD_ADDR_VAR 0 8
47773: PUSH
47774: LD_VAR 0 2
47778: PPUSH
47779: CALL_OW 254
47783: ST_TO_ADDR
// r := 4 ;
47784: LD_ADDR_VAR 0 9
47788: PUSH
47789: LD_INT 4
47791: ST_TO_ADDR
// for i := 1 to 5 do
47792: LD_ADDR_VAR 0 10
47796: PUSH
47797: DOUBLE
47798: LD_INT 1
47800: DEC
47801: ST_TO_ADDR
47802: LD_INT 5
47804: PUSH
47805: FOR_TO
47806: IFFALSE 47963
// begin _x := ShiftX ( x , d , r + i ) ;
47808: LD_ADDR_VAR 0 5
47812: PUSH
47813: LD_VAR 0 4
47817: PPUSH
47818: LD_VAR 0 8
47822: PPUSH
47823: LD_VAR 0 9
47827: PUSH
47828: LD_VAR 0 10
47832: PLUS
47833: PPUSH
47834: CALL_OW 272
47838: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47839: LD_ADDR_VAR 0 7
47843: PUSH
47844: LD_VAR 0 6
47848: PPUSH
47849: LD_VAR 0 8
47853: PPUSH
47854: LD_VAR 0 9
47858: PUSH
47859: LD_VAR 0 10
47863: PLUS
47864: PPUSH
47865: CALL_OW 273
47869: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47870: LD_VAR 0 5
47874: PPUSH
47875: LD_VAR 0 7
47879: PPUSH
47880: CALL_OW 488
47884: PUSH
47885: LD_VAR 0 5
47889: PPUSH
47890: LD_VAR 0 7
47894: PPUSH
47895: CALL_OW 428
47899: PPUSH
47900: CALL_OW 247
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: IN
47915: NOT
47916: AND
47917: IFFALSE 47961
// begin ComMoveXY ( unit , _x , _y ) ;
47919: LD_VAR 0 1
47923: PPUSH
47924: LD_VAR 0 5
47928: PPUSH
47929: LD_VAR 0 7
47933: PPUSH
47934: CALL_OW 111
// result := [ _x , _y ] ;
47938: LD_ADDR_VAR 0 3
47942: PUSH
47943: LD_VAR 0 5
47947: PUSH
47948: LD_VAR 0 7
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: ST_TO_ADDR
// exit ;
47957: POP
47958: POP
47959: GO 47965
// end ; end ;
47961: GO 47805
47963: POP
47964: POP
// end ;
47965: LD_VAR 0 3
47969: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47970: LD_INT 0
47972: PPUSH
47973: PPUSH
47974: PPUSH
// result := 0 ;
47975: LD_ADDR_VAR 0 3
47979: PUSH
47980: LD_INT 0
47982: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47983: LD_VAR 0 1
47987: PUSH
47988: LD_INT 0
47990: LESS
47991: PUSH
47992: LD_VAR 0 1
47996: PUSH
47997: LD_INT 8
47999: GREATER
48000: OR
48001: PUSH
48002: LD_VAR 0 2
48006: PUSH
48007: LD_INT 0
48009: LESS
48010: OR
48011: PUSH
48012: LD_VAR 0 2
48016: PUSH
48017: LD_INT 8
48019: GREATER
48020: OR
48021: IFFALSE 48025
// exit ;
48023: GO 48100
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48025: LD_ADDR_VAR 0 4
48029: PUSH
48030: LD_INT 22
48032: PUSH
48033: LD_VAR 0 2
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PPUSH
48042: CALL_OW 69
48046: PUSH
48047: FOR_IN
48048: IFFALSE 48098
// begin un := UnitShoot ( i ) ;
48050: LD_ADDR_VAR 0 5
48054: PUSH
48055: LD_VAR 0 4
48059: PPUSH
48060: CALL_OW 504
48064: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48065: LD_VAR 0 5
48069: PPUSH
48070: CALL_OW 255
48074: PUSH
48075: LD_VAR 0 1
48079: EQUAL
48080: IFFALSE 48096
// begin result := un ;
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_VAR 0 5
48091: ST_TO_ADDR
// exit ;
48092: POP
48093: POP
48094: GO 48100
// end ; end ;
48096: GO 48047
48098: POP
48099: POP
// end ;
48100: LD_VAR 0 3
48104: RET
// export function GetCargoBay ( units ) ; begin
48105: LD_INT 0
48107: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48108: LD_ADDR_VAR 0 2
48112: PUSH
48113: LD_VAR 0 1
48117: PPUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 34
48123: PUSH
48124: LD_INT 12
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 34
48133: PUSH
48134: LD_INT 51
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 34
48143: PUSH
48144: LD_INT 32
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 34
48153: PUSH
48154: LD_INT 89
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 72
48172: ST_TO_ADDR
// end ;
48173: LD_VAR 0 2
48177: RET
// export function Negate ( value ) ; begin
48178: LD_INT 0
48180: PPUSH
// result := not value ;
48181: LD_ADDR_VAR 0 2
48185: PUSH
48186: LD_VAR 0 1
48190: NOT
48191: ST_TO_ADDR
// end ;
48192: LD_VAR 0 2
48196: RET
// export function Inc ( value ) ; begin
48197: LD_INT 0
48199: PPUSH
// result := value + 1 ;
48200: LD_ADDR_VAR 0 2
48204: PUSH
48205: LD_VAR 0 1
48209: PUSH
48210: LD_INT 1
48212: PLUS
48213: ST_TO_ADDR
// end ;
48214: LD_VAR 0 2
48218: RET
// export function Dec ( value ) ; begin
48219: LD_INT 0
48221: PPUSH
// result := value - 1 ;
48222: LD_ADDR_VAR 0 2
48226: PUSH
48227: LD_VAR 0 1
48231: PUSH
48232: LD_INT 1
48234: MINUS
48235: ST_TO_ADDR
// end ;
48236: LD_VAR 0 2
48240: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48241: LD_INT 0
48243: PPUSH
48244: PPUSH
48245: PPUSH
48246: PPUSH
48247: PPUSH
48248: PPUSH
48249: PPUSH
48250: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48251: LD_VAR 0 1
48255: PPUSH
48256: LD_VAR 0 2
48260: PPUSH
48261: CALL_OW 488
48265: NOT
48266: PUSH
48267: LD_VAR 0 3
48271: PPUSH
48272: LD_VAR 0 4
48276: PPUSH
48277: CALL_OW 488
48281: NOT
48282: OR
48283: IFFALSE 48296
// begin result := - 1 ;
48285: LD_ADDR_VAR 0 5
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: ST_TO_ADDR
// exit ;
48294: GO 48531
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48296: LD_ADDR_VAR 0 12
48300: PUSH
48301: LD_VAR 0 1
48305: PPUSH
48306: LD_VAR 0 2
48310: PPUSH
48311: LD_VAR 0 3
48315: PPUSH
48316: LD_VAR 0 4
48320: PPUSH
48321: CALL 47381 0 4
48325: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48326: LD_ADDR_VAR 0 11
48330: PUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: LD_VAR 0 2
48340: PPUSH
48341: LD_VAR 0 12
48345: PUSH
48346: LD_INT 1
48348: ARRAY
48349: PPUSH
48350: LD_VAR 0 12
48354: PUSH
48355: LD_INT 2
48357: ARRAY
48358: PPUSH
48359: CALL_OW 298
48363: ST_TO_ADDR
// distance := 9999 ;
48364: LD_ADDR_VAR 0 10
48368: PUSH
48369: LD_INT 9999
48371: ST_TO_ADDR
// for i := 0 to 5 do
48372: LD_ADDR_VAR 0 6
48376: PUSH
48377: DOUBLE
48378: LD_INT 0
48380: DEC
48381: ST_TO_ADDR
48382: LD_INT 5
48384: PUSH
48385: FOR_TO
48386: IFFALSE 48529
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48388: LD_ADDR_VAR 0 7
48392: PUSH
48393: LD_VAR 0 1
48397: PPUSH
48398: LD_VAR 0 6
48402: PPUSH
48403: LD_VAR 0 11
48407: PPUSH
48408: CALL_OW 272
48412: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48413: LD_ADDR_VAR 0 8
48417: PUSH
48418: LD_VAR 0 2
48422: PPUSH
48423: LD_VAR 0 6
48427: PPUSH
48428: LD_VAR 0 11
48432: PPUSH
48433: CALL_OW 273
48437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48438: LD_VAR 0 7
48442: PPUSH
48443: LD_VAR 0 8
48447: PPUSH
48448: CALL_OW 488
48452: NOT
48453: IFFALSE 48457
// continue ;
48455: GO 48385
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48457: LD_ADDR_VAR 0 9
48461: PUSH
48462: LD_VAR 0 12
48466: PUSH
48467: LD_INT 1
48469: ARRAY
48470: PPUSH
48471: LD_VAR 0 12
48475: PUSH
48476: LD_INT 2
48478: ARRAY
48479: PPUSH
48480: LD_VAR 0 7
48484: PPUSH
48485: LD_VAR 0 8
48489: PPUSH
48490: CALL_OW 298
48494: ST_TO_ADDR
// if tmp < distance then
48495: LD_VAR 0 9
48499: PUSH
48500: LD_VAR 0 10
48504: LESS
48505: IFFALSE 48527
// begin result := i ;
48507: LD_ADDR_VAR 0 5
48511: PUSH
48512: LD_VAR 0 6
48516: ST_TO_ADDR
// distance := tmp ;
48517: LD_ADDR_VAR 0 10
48521: PUSH
48522: LD_VAR 0 9
48526: ST_TO_ADDR
// end ; end ;
48527: GO 48385
48529: POP
48530: POP
// end ;
48531: LD_VAR 0 5
48535: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48536: LD_INT 0
48538: PPUSH
48539: PPUSH
// if not driver or not IsInUnit ( driver ) then
48540: LD_VAR 0 1
48544: NOT
48545: PUSH
48546: LD_VAR 0 1
48550: PPUSH
48551: CALL_OW 310
48555: NOT
48556: OR
48557: IFFALSE 48561
// exit ;
48559: GO 48651
// vehicle := IsInUnit ( driver ) ;
48561: LD_ADDR_VAR 0 3
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: CALL_OW 310
48575: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48576: LD_VAR 0 1
48580: PPUSH
48581: LD_STRING \
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: PUSH
48611: LD_STRING E
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_VAR 0 3
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PPUSH
48647: CALL_OW 446
// end ;
48651: LD_VAR 0 2
48655: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
// if not driver or not IsInUnit ( driver ) then
48660: LD_VAR 0 1
48664: NOT
48665: PUSH
48666: LD_VAR 0 1
48670: PPUSH
48671: CALL_OW 310
48675: NOT
48676: OR
48677: IFFALSE 48681
// exit ;
48679: GO 48771
// vehicle := IsInUnit ( driver ) ;
48681: LD_ADDR_VAR 0 3
48685: PUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 310
48695: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48696: LD_VAR 0 1
48700: PPUSH
48701: LD_STRING \
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: PUSH
48731: LD_STRING E
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_VAR 0 3
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PPUSH
48767: CALL_OW 447
// end ;
48771: LD_VAR 0 2
48775: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48776: LD_INT 0
48778: PPUSH
48779: PPUSH
48780: PPUSH
// tmp := [ ] ;
48781: LD_ADDR_VAR 0 5
48785: PUSH
48786: EMPTY
48787: ST_TO_ADDR
// for i in units do
48788: LD_ADDR_VAR 0 4
48792: PUSH
48793: LD_VAR 0 1
48797: PUSH
48798: FOR_IN
48799: IFFALSE 48837
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48801: LD_ADDR_VAR 0 5
48805: PUSH
48806: LD_VAR 0 5
48810: PPUSH
48811: LD_VAR 0 5
48815: PUSH
48816: LD_INT 1
48818: PLUS
48819: PPUSH
48820: LD_VAR 0 4
48824: PPUSH
48825: CALL_OW 256
48829: PPUSH
48830: CALL_OW 2
48834: ST_TO_ADDR
48835: GO 48798
48837: POP
48838: POP
// if not tmp then
48839: LD_VAR 0 5
48843: NOT
48844: IFFALSE 48848
// exit ;
48846: GO 48896
// if asc then
48848: LD_VAR 0 2
48852: IFFALSE 48876
// result := SortListByListAsc ( units , tmp ) else
48854: LD_ADDR_VAR 0 3
48858: PUSH
48859: LD_VAR 0 1
48863: PPUSH
48864: LD_VAR 0 5
48868: PPUSH
48869: CALL_OW 76
48873: ST_TO_ADDR
48874: GO 48896
// result := SortListByListDesc ( units , tmp ) ;
48876: LD_ADDR_VAR 0 3
48880: PUSH
48881: LD_VAR 0 1
48885: PPUSH
48886: LD_VAR 0 5
48890: PPUSH
48891: CALL_OW 77
48895: ST_TO_ADDR
// end ;
48896: LD_VAR 0 3
48900: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48901: LD_INT 0
48903: PPUSH
48904: PPUSH
// task := GetTaskList ( mech ) ;
48905: LD_ADDR_VAR 0 4
48909: PUSH
48910: LD_VAR 0 1
48914: PPUSH
48915: CALL_OW 437
48919: ST_TO_ADDR
// if not task then
48920: LD_VAR 0 4
48924: NOT
48925: IFFALSE 48929
// exit ;
48927: GO 48971
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48929: LD_ADDR_VAR 0 3
48933: PUSH
48934: LD_VAR 0 4
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PUSH
48943: LD_INT 1
48945: ARRAY
48946: PUSH
48947: LD_STRING r
48949: EQUAL
48950: PUSH
48951: LD_VAR 0 4
48955: PUSH
48956: LD_INT 1
48958: ARRAY
48959: PUSH
48960: LD_INT 4
48962: ARRAY
48963: PUSH
48964: LD_VAR 0 2
48968: EQUAL
48969: AND
48970: ST_TO_ADDR
// end ;
48971: LD_VAR 0 3
48975: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48976: LD_INT 0
48978: PPUSH
// SetDir ( unit , d ) ;
48979: LD_VAR 0 1
48983: PPUSH
48984: LD_VAR 0 4
48988: PPUSH
48989: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48993: LD_VAR 0 1
48997: PPUSH
48998: LD_VAR 0 2
49002: PPUSH
49003: LD_VAR 0 3
49007: PPUSH
49008: LD_VAR 0 5
49012: PPUSH
49013: CALL_OW 48
// end ;
49017: LD_VAR 0 6
49021: RET
// export function ToNaturalNumber ( number ) ; begin
49022: LD_INT 0
49024: PPUSH
// result := number div 1 ;
49025: LD_ADDR_VAR 0 2
49029: PUSH
49030: LD_VAR 0 1
49034: PUSH
49035: LD_INT 1
49037: DIV
49038: ST_TO_ADDR
// if number < 0 then
49039: LD_VAR 0 1
49043: PUSH
49044: LD_INT 0
49046: LESS
49047: IFFALSE 49057
// result := 0 ;
49049: LD_ADDR_VAR 0 2
49053: PUSH
49054: LD_INT 0
49056: ST_TO_ADDR
// end ;
49057: LD_VAR 0 2
49061: RET
// export function SortByClass ( units , class ) ; var un ; begin
49062: LD_INT 0
49064: PPUSH
49065: PPUSH
// if not units or not class then
49066: LD_VAR 0 1
49070: NOT
49071: PUSH
49072: LD_VAR 0 2
49076: NOT
49077: OR
49078: IFFALSE 49082
// exit ;
49080: GO 49177
// result := [ ] ;
49082: LD_ADDR_VAR 0 3
49086: PUSH
49087: EMPTY
49088: ST_TO_ADDR
// for un in units do
49089: LD_ADDR_VAR 0 4
49093: PUSH
49094: LD_VAR 0 1
49098: PUSH
49099: FOR_IN
49100: IFFALSE 49175
// if GetClass ( un ) = class then
49102: LD_VAR 0 4
49106: PPUSH
49107: CALL_OW 257
49111: PUSH
49112: LD_VAR 0 2
49116: EQUAL
49117: IFFALSE 49144
// result := Insert ( result , 1 , un ) else
49119: LD_ADDR_VAR 0 3
49123: PUSH
49124: LD_VAR 0 3
49128: PPUSH
49129: LD_INT 1
49131: PPUSH
49132: LD_VAR 0 4
49136: PPUSH
49137: CALL_OW 2
49141: ST_TO_ADDR
49142: GO 49173
// result := Replace ( result , result + 1 , un ) ;
49144: LD_ADDR_VAR 0 3
49148: PUSH
49149: LD_VAR 0 3
49153: PPUSH
49154: LD_VAR 0 3
49158: PUSH
49159: LD_INT 1
49161: PLUS
49162: PPUSH
49163: LD_VAR 0 4
49167: PPUSH
49168: CALL_OW 1
49172: ST_TO_ADDR
49173: GO 49099
49175: POP
49176: POP
// end ;
49177: LD_VAR 0 3
49181: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49182: LD_INT 0
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
49190: PPUSH
// result := [ ] ;
49191: LD_ADDR_VAR 0 4
49195: PUSH
49196: EMPTY
49197: ST_TO_ADDR
// if x - r < 0 then
49198: LD_VAR 0 1
49202: PUSH
49203: LD_VAR 0 3
49207: MINUS
49208: PUSH
49209: LD_INT 0
49211: LESS
49212: IFFALSE 49224
// min_x := 0 else
49214: LD_ADDR_VAR 0 8
49218: PUSH
49219: LD_INT 0
49221: ST_TO_ADDR
49222: GO 49240
// min_x := x - r ;
49224: LD_ADDR_VAR 0 8
49228: PUSH
49229: LD_VAR 0 1
49233: PUSH
49234: LD_VAR 0 3
49238: MINUS
49239: ST_TO_ADDR
// if y - r < 0 then
49240: LD_VAR 0 2
49244: PUSH
49245: LD_VAR 0 3
49249: MINUS
49250: PUSH
49251: LD_INT 0
49253: LESS
49254: IFFALSE 49266
// min_y := 0 else
49256: LD_ADDR_VAR 0 7
49260: PUSH
49261: LD_INT 0
49263: ST_TO_ADDR
49264: GO 49282
// min_y := y - r ;
49266: LD_ADDR_VAR 0 7
49270: PUSH
49271: LD_VAR 0 2
49275: PUSH
49276: LD_VAR 0 3
49280: MINUS
49281: ST_TO_ADDR
// max_x := x + r ;
49282: LD_ADDR_VAR 0 9
49286: PUSH
49287: LD_VAR 0 1
49291: PUSH
49292: LD_VAR 0 3
49296: PLUS
49297: ST_TO_ADDR
// max_y := y + r ;
49298: LD_ADDR_VAR 0 10
49302: PUSH
49303: LD_VAR 0 2
49307: PUSH
49308: LD_VAR 0 3
49312: PLUS
49313: ST_TO_ADDR
// for _x = min_x to max_x do
49314: LD_ADDR_VAR 0 5
49318: PUSH
49319: DOUBLE
49320: LD_VAR 0 8
49324: DEC
49325: ST_TO_ADDR
49326: LD_VAR 0 9
49330: PUSH
49331: FOR_TO
49332: IFFALSE 49433
// for _y = min_y to max_y do
49334: LD_ADDR_VAR 0 6
49338: PUSH
49339: DOUBLE
49340: LD_VAR 0 7
49344: DEC
49345: ST_TO_ADDR
49346: LD_VAR 0 10
49350: PUSH
49351: FOR_TO
49352: IFFALSE 49429
// begin if not ValidHex ( _x , _y ) then
49354: LD_VAR 0 5
49358: PPUSH
49359: LD_VAR 0 6
49363: PPUSH
49364: CALL_OW 488
49368: NOT
49369: IFFALSE 49373
// continue ;
49371: GO 49351
// if GetResourceTypeXY ( _x , _y ) then
49373: LD_VAR 0 5
49377: PPUSH
49378: LD_VAR 0 6
49382: PPUSH
49383: CALL_OW 283
49387: IFFALSE 49427
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_VAR 0 4
49398: PPUSH
49399: LD_VAR 0 4
49403: PUSH
49404: LD_INT 1
49406: PLUS
49407: PPUSH
49408: LD_VAR 0 5
49412: PUSH
49413: LD_VAR 0 6
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PPUSH
49422: CALL_OW 1
49426: ST_TO_ADDR
// end ;
49427: GO 49351
49429: POP
49430: POP
49431: GO 49331
49433: POP
49434: POP
// end ;
49435: LD_VAR 0 4
49439: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49440: LD_INT 0
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
// if not units then
49450: LD_VAR 0 1
49454: NOT
49455: IFFALSE 49459
// exit ;
49457: GO 49987
// result := UnitFilter ( units , [ f_ok ] ) ;
49459: LD_ADDR_VAR 0 3
49463: PUSH
49464: LD_VAR 0 1
49468: PPUSH
49469: LD_INT 50
49471: PUSH
49472: EMPTY
49473: LIST
49474: PPUSH
49475: CALL_OW 72
49479: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49480: LD_ADDR_VAR 0 8
49484: PUSH
49485: LD_VAR 0 1
49489: PUSH
49490: LD_INT 1
49492: ARRAY
49493: PPUSH
49494: CALL_OW 255
49498: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49499: LD_ADDR_VAR 0 10
49503: PUSH
49504: LD_INT 29
49506: PUSH
49507: LD_INT 91
49509: PUSH
49510: LD_INT 49
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// if not result then
49518: LD_VAR 0 3
49522: NOT
49523: IFFALSE 49527
// exit ;
49525: GO 49987
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49527: LD_ADDR_VAR 0 5
49531: PUSH
49532: LD_INT 81
49534: PUSH
49535: LD_VAR 0 8
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PPUSH
49544: CALL_OW 69
49548: ST_TO_ADDR
// for i in result do
49549: LD_ADDR_VAR 0 4
49553: PUSH
49554: LD_VAR 0 3
49558: PUSH
49559: FOR_IN
49560: IFFALSE 49985
// begin tag := GetTag ( i ) + 1 ;
49562: LD_ADDR_VAR 0 9
49566: PUSH
49567: LD_VAR 0 4
49571: PPUSH
49572: CALL_OW 110
49576: PUSH
49577: LD_INT 1
49579: PLUS
49580: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49581: LD_ADDR_VAR 0 7
49585: PUSH
49586: LD_VAR 0 4
49590: PPUSH
49591: CALL_OW 250
49595: PPUSH
49596: LD_VAR 0 4
49600: PPUSH
49601: CALL_OW 251
49605: PPUSH
49606: LD_INT 4
49608: PPUSH
49609: CALL 49182 0 3
49613: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49614: LD_VAR 0 4
49618: PPUSH
49619: CALL_OW 247
49623: PUSH
49624: LD_INT 2
49626: EQUAL
49627: PUSH
49628: LD_VAR 0 7
49632: PUSH
49633: LD_INT 2
49635: GREATER
49636: AND
49637: PUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: CALL_OW 264
49647: PUSH
49648: LD_VAR 0 10
49652: IN
49653: NOT
49654: AND
49655: IFFALSE 49694
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49657: LD_VAR 0 4
49661: PPUSH
49662: LD_VAR 0 7
49666: PUSH
49667: LD_INT 1
49669: ARRAY
49670: PUSH
49671: LD_INT 1
49673: ARRAY
49674: PPUSH
49675: LD_VAR 0 7
49679: PUSH
49680: LD_INT 1
49682: ARRAY
49683: PUSH
49684: LD_INT 2
49686: ARRAY
49687: PPUSH
49688: CALL_OW 116
49692: GO 49983
// if path > tag then
49694: LD_VAR 0 2
49698: PUSH
49699: LD_VAR 0 9
49703: GREATER
49704: IFFALSE 49912
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49706: LD_ADDR_VAR 0 6
49710: PUSH
49711: LD_VAR 0 5
49715: PPUSH
49716: LD_INT 91
49718: PUSH
49719: LD_VAR 0 4
49723: PUSH
49724: LD_INT 8
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: PPUSH
49732: CALL_OW 72
49736: ST_TO_ADDR
// if nearEnemy then
49737: LD_VAR 0 6
49741: IFFALSE 49810
// begin if GetWeapon ( i ) = ru_time_lapser then
49743: LD_VAR 0 4
49747: PPUSH
49748: CALL_OW 264
49752: PUSH
49753: LD_INT 49
49755: EQUAL
49756: IFFALSE 49784
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49758: LD_VAR 0 4
49762: PPUSH
49763: LD_VAR 0 6
49767: PPUSH
49768: LD_VAR 0 4
49772: PPUSH
49773: CALL_OW 74
49777: PPUSH
49778: CALL_OW 112
49782: GO 49808
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49784: LD_VAR 0 4
49788: PPUSH
49789: LD_VAR 0 6
49793: PPUSH
49794: LD_VAR 0 4
49798: PPUSH
49799: CALL_OW 74
49803: PPUSH
49804: CALL 51058 0 2
// end else
49808: GO 49910
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49810: LD_VAR 0 4
49814: PPUSH
49815: LD_VAR 0 2
49819: PUSH
49820: LD_VAR 0 9
49824: ARRAY
49825: PUSH
49826: LD_INT 1
49828: ARRAY
49829: PPUSH
49830: LD_VAR 0 2
49834: PUSH
49835: LD_VAR 0 9
49839: ARRAY
49840: PUSH
49841: LD_INT 2
49843: ARRAY
49844: PPUSH
49845: CALL_OW 297
49849: PUSH
49850: LD_INT 6
49852: GREATER
49853: IFFALSE 49896
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49855: LD_VAR 0 4
49859: PPUSH
49860: LD_VAR 0 2
49864: PUSH
49865: LD_VAR 0 9
49869: ARRAY
49870: PUSH
49871: LD_INT 1
49873: ARRAY
49874: PPUSH
49875: LD_VAR 0 2
49879: PUSH
49880: LD_VAR 0 9
49884: ARRAY
49885: PUSH
49886: LD_INT 2
49888: ARRAY
49889: PPUSH
49890: CALL_OW 114
49894: GO 49910
// SetTag ( i , tag ) ;
49896: LD_VAR 0 4
49900: PPUSH
49901: LD_VAR 0 9
49905: PPUSH
49906: CALL_OW 109
// end else
49910: GO 49983
// if enemy then
49912: LD_VAR 0 5
49916: IFFALSE 49983
// begin if GetWeapon ( i ) = ru_time_lapser then
49918: LD_VAR 0 4
49922: PPUSH
49923: CALL_OW 264
49927: PUSH
49928: LD_INT 49
49930: EQUAL
49931: IFFALSE 49959
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49933: LD_VAR 0 4
49937: PPUSH
49938: LD_VAR 0 5
49942: PPUSH
49943: LD_VAR 0 4
49947: PPUSH
49948: CALL_OW 74
49952: PPUSH
49953: CALL_OW 112
49957: GO 49983
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49959: LD_VAR 0 4
49963: PPUSH
49964: LD_VAR 0 5
49968: PPUSH
49969: LD_VAR 0 4
49973: PPUSH
49974: CALL_OW 74
49978: PPUSH
49979: CALL 51058 0 2
// end ; end ;
49983: GO 49559
49985: POP
49986: POP
// end ;
49987: LD_VAR 0 3
49991: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49992: LD_INT 0
49994: PPUSH
49995: PPUSH
49996: PPUSH
// if not unit or IsInUnit ( unit ) then
49997: LD_VAR 0 1
50001: NOT
50002: PUSH
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 310
50012: OR
50013: IFFALSE 50017
// exit ;
50015: GO 50108
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50017: LD_ADDR_VAR 0 4
50021: PUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: CALL_OW 250
50031: PPUSH
50032: LD_VAR 0 2
50036: PPUSH
50037: LD_INT 1
50039: PPUSH
50040: CALL_OW 272
50044: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50045: LD_ADDR_VAR 0 5
50049: PUSH
50050: LD_VAR 0 1
50054: PPUSH
50055: CALL_OW 251
50059: PPUSH
50060: LD_VAR 0 2
50064: PPUSH
50065: LD_INT 1
50067: PPUSH
50068: CALL_OW 273
50072: ST_TO_ADDR
// if ValidHex ( x , y ) then
50073: LD_VAR 0 4
50077: PPUSH
50078: LD_VAR 0 5
50082: PPUSH
50083: CALL_OW 488
50087: IFFALSE 50108
// ComTurnXY ( unit , x , y ) ;
50089: LD_VAR 0 1
50093: PPUSH
50094: LD_VAR 0 4
50098: PPUSH
50099: LD_VAR 0 5
50103: PPUSH
50104: CALL_OW 118
// end ;
50108: LD_VAR 0 3
50112: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50113: LD_INT 0
50115: PPUSH
50116: PPUSH
// result := false ;
50117: LD_ADDR_VAR 0 3
50121: PUSH
50122: LD_INT 0
50124: ST_TO_ADDR
// if not units then
50125: LD_VAR 0 2
50129: NOT
50130: IFFALSE 50134
// exit ;
50132: GO 50179
// for i in units do
50134: LD_ADDR_VAR 0 4
50138: PUSH
50139: LD_VAR 0 2
50143: PUSH
50144: FOR_IN
50145: IFFALSE 50177
// if See ( side , i ) then
50147: LD_VAR 0 1
50151: PPUSH
50152: LD_VAR 0 4
50156: PPUSH
50157: CALL_OW 292
50161: IFFALSE 50175
// begin result := true ;
50163: LD_ADDR_VAR 0 3
50167: PUSH
50168: LD_INT 1
50170: ST_TO_ADDR
// exit ;
50171: POP
50172: POP
50173: GO 50179
// end ;
50175: GO 50144
50177: POP
50178: POP
// end ;
50179: LD_VAR 0 3
50183: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50184: LD_INT 0
50186: PPUSH
50187: PPUSH
50188: PPUSH
50189: PPUSH
// if not unit or not points then
50190: LD_VAR 0 1
50194: NOT
50195: PUSH
50196: LD_VAR 0 2
50200: NOT
50201: OR
50202: IFFALSE 50206
// exit ;
50204: GO 50296
// dist := 99999 ;
50206: LD_ADDR_VAR 0 5
50210: PUSH
50211: LD_INT 99999
50213: ST_TO_ADDR
// for i in points do
50214: LD_ADDR_VAR 0 4
50218: PUSH
50219: LD_VAR 0 2
50223: PUSH
50224: FOR_IN
50225: IFFALSE 50294
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50227: LD_ADDR_VAR 0 6
50231: PUSH
50232: LD_VAR 0 1
50236: PPUSH
50237: LD_VAR 0 4
50241: PUSH
50242: LD_INT 1
50244: ARRAY
50245: PPUSH
50246: LD_VAR 0 4
50250: PUSH
50251: LD_INT 2
50253: ARRAY
50254: PPUSH
50255: CALL_OW 297
50259: ST_TO_ADDR
// if tmpDist < dist then
50260: LD_VAR 0 6
50264: PUSH
50265: LD_VAR 0 5
50269: LESS
50270: IFFALSE 50292
// begin result := i ;
50272: LD_ADDR_VAR 0 3
50276: PUSH
50277: LD_VAR 0 4
50281: ST_TO_ADDR
// dist := tmpDist ;
50282: LD_ADDR_VAR 0 5
50286: PUSH
50287: LD_VAR 0 6
50291: ST_TO_ADDR
// end ; end ;
50292: GO 50224
50294: POP
50295: POP
// end ;
50296: LD_VAR 0 3
50300: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50301: LD_INT 0
50303: PPUSH
// uc_side := side ;
50304: LD_ADDR_OWVAR 20
50308: PUSH
50309: LD_VAR 0 1
50313: ST_TO_ADDR
// uc_nation := 3 ;
50314: LD_ADDR_OWVAR 21
50318: PUSH
50319: LD_INT 3
50321: ST_TO_ADDR
// vc_chassis := 25 ;
50322: LD_ADDR_OWVAR 37
50326: PUSH
50327: LD_INT 25
50329: ST_TO_ADDR
// vc_engine := engine_siberite ;
50330: LD_ADDR_OWVAR 39
50334: PUSH
50335: LD_INT 3
50337: ST_TO_ADDR
// vc_control := control_computer ;
50338: LD_ADDR_OWVAR 38
50342: PUSH
50343: LD_INT 3
50345: ST_TO_ADDR
// vc_weapon := 59 ;
50346: LD_ADDR_OWVAR 40
50350: PUSH
50351: LD_INT 59
50353: ST_TO_ADDR
// result := CreateVehicle ;
50354: LD_ADDR_VAR 0 5
50358: PUSH
50359: CALL_OW 45
50363: ST_TO_ADDR
// SetDir ( result , d ) ;
50364: LD_VAR 0 5
50368: PPUSH
50369: LD_VAR 0 4
50373: PPUSH
50374: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50378: LD_VAR 0 5
50382: PPUSH
50383: LD_VAR 0 2
50387: PPUSH
50388: LD_VAR 0 3
50392: PPUSH
50393: LD_INT 0
50395: PPUSH
50396: CALL_OW 48
// end ;
50400: LD_VAR 0 5
50404: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50405: LD_INT 0
50407: PPUSH
50408: PPUSH
50409: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50410: LD_ADDR_VAR 0 2
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50433: LD_VAR 0 1
50437: NOT
50438: PUSH
50439: LD_VAR 0 1
50443: PPUSH
50444: CALL_OW 264
50448: PUSH
50449: LD_INT 12
50451: PUSH
50452: LD_INT 51
50454: PUSH
50455: LD_INT 32
50457: PUSH
50458: LD_INT 89
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: IN
50467: NOT
50468: OR
50469: IFFALSE 50473
// exit ;
50471: GO 50571
// for i := 1 to 3 do
50473: LD_ADDR_VAR 0 3
50477: PUSH
50478: DOUBLE
50479: LD_INT 1
50481: DEC
50482: ST_TO_ADDR
50483: LD_INT 3
50485: PUSH
50486: FOR_TO
50487: IFFALSE 50569
// begin tmp := GetCargo ( cargo , i ) ;
50489: LD_ADDR_VAR 0 4
50493: PUSH
50494: LD_VAR 0 1
50498: PPUSH
50499: LD_VAR 0 3
50503: PPUSH
50504: CALL_OW 289
50508: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50509: LD_ADDR_VAR 0 2
50513: PUSH
50514: LD_VAR 0 2
50518: PPUSH
50519: LD_VAR 0 3
50523: PPUSH
50524: LD_VAR 0 4
50528: PPUSH
50529: CALL_OW 1
50533: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50534: LD_ADDR_VAR 0 2
50538: PUSH
50539: LD_VAR 0 2
50543: PPUSH
50544: LD_INT 4
50546: PPUSH
50547: LD_VAR 0 2
50551: PUSH
50552: LD_INT 4
50554: ARRAY
50555: PUSH
50556: LD_VAR 0 4
50560: PLUS
50561: PPUSH
50562: CALL_OW 1
50566: ST_TO_ADDR
// end ;
50567: GO 50486
50569: POP
50570: POP
// end ;
50571: LD_VAR 0 2
50575: RET
// export function Length ( array ) ; begin
50576: LD_INT 0
50578: PPUSH
// result := array + 0 ;
50579: LD_ADDR_VAR 0 2
50583: PUSH
50584: LD_VAR 0 1
50588: PUSH
50589: LD_INT 0
50591: PLUS
50592: ST_TO_ADDR
// end ;
50593: LD_VAR 0 2
50597: RET
// export function PrepareArray ( array ) ; begin
50598: LD_INT 0
50600: PPUSH
// result := array diff 0 ;
50601: LD_ADDR_VAR 0 2
50605: PUSH
50606: LD_VAR 0 1
50610: PUSH
50611: LD_INT 0
50613: DIFF
50614: ST_TO_ADDR
// if not result [ 1 ] then
50615: LD_VAR 0 2
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: NOT
50624: IFFALSE 50644
// result := Delete ( result , 1 ) ;
50626: LD_ADDR_VAR 0 2
50630: PUSH
50631: LD_VAR 0 2
50635: PPUSH
50636: LD_INT 1
50638: PPUSH
50639: CALL_OW 3
50643: ST_TO_ADDR
// end ;
50644: LD_VAR 0 2
50648: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50649: LD_INT 0
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
// sibRocketRange := 25 ;
50655: LD_ADDR_VAR 0 6
50659: PUSH
50660: LD_INT 25
50662: ST_TO_ADDR
// result := false ;
50663: LD_ADDR_VAR 0 4
50667: PUSH
50668: LD_INT 0
50670: ST_TO_ADDR
// for i := 0 to 5 do
50671: LD_ADDR_VAR 0 5
50675: PUSH
50676: DOUBLE
50677: LD_INT 0
50679: DEC
50680: ST_TO_ADDR
50681: LD_INT 5
50683: PUSH
50684: FOR_TO
50685: IFFALSE 50752
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50687: LD_VAR 0 1
50691: PPUSH
50692: LD_VAR 0 5
50696: PPUSH
50697: LD_VAR 0 6
50701: PPUSH
50702: CALL_OW 272
50706: PPUSH
50707: LD_VAR 0 2
50711: PPUSH
50712: LD_VAR 0 5
50716: PPUSH
50717: LD_VAR 0 6
50721: PPUSH
50722: CALL_OW 273
50726: PPUSH
50727: LD_VAR 0 3
50731: PPUSH
50732: CALL_OW 309
50736: IFFALSE 50750
// begin result := true ;
50738: LD_ADDR_VAR 0 4
50742: PUSH
50743: LD_INT 1
50745: ST_TO_ADDR
// exit ;
50746: POP
50747: POP
50748: GO 50754
// end ;
50750: GO 50684
50752: POP
50753: POP
// end ;
50754: LD_VAR 0 4
50758: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50759: LD_INT 0
50761: PPUSH
50762: PPUSH
50763: PPUSH
// if btype = b_depot then
50764: LD_VAR 0 2
50768: PUSH
50769: LD_INT 0
50771: EQUAL
50772: IFFALSE 50784
// begin result := true ;
50774: LD_ADDR_VAR 0 3
50778: PUSH
50779: LD_INT 1
50781: ST_TO_ADDR
// exit ;
50782: GO 50900
// end ; pom := GetBase ( depot ) ;
50784: LD_ADDR_VAR 0 4
50788: PUSH
50789: LD_VAR 0 1
50793: PPUSH
50794: CALL_OW 274
50798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50799: LD_ADDR_VAR 0 5
50803: PUSH
50804: LD_VAR 0 2
50808: PPUSH
50809: LD_VAR 0 1
50813: PPUSH
50814: CALL_OW 248
50818: PPUSH
50819: CALL_OW 450
50823: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50824: LD_ADDR_VAR 0 3
50828: PUSH
50829: LD_VAR 0 4
50833: PPUSH
50834: LD_INT 1
50836: PPUSH
50837: CALL_OW 275
50841: PUSH
50842: LD_VAR 0 5
50846: PUSH
50847: LD_INT 1
50849: ARRAY
50850: GREATEREQUAL
50851: PUSH
50852: LD_VAR 0 4
50856: PPUSH
50857: LD_INT 2
50859: PPUSH
50860: CALL_OW 275
50864: PUSH
50865: LD_VAR 0 5
50869: PUSH
50870: LD_INT 2
50872: ARRAY
50873: GREATEREQUAL
50874: AND
50875: PUSH
50876: LD_VAR 0 4
50880: PPUSH
50881: LD_INT 3
50883: PPUSH
50884: CALL_OW 275
50888: PUSH
50889: LD_VAR 0 5
50893: PUSH
50894: LD_INT 3
50896: ARRAY
50897: GREATEREQUAL
50898: AND
50899: ST_TO_ADDR
// end ;
50900: LD_VAR 0 3
50904: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50905: LD_INT 0
50907: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50908: LD_VAR 0 1
50912: PPUSH
50913: LD_VAR 0 2
50917: PPUSH
50918: LD_INT 0
50920: PPUSH
50921: LD_INT 0
50923: PPUSH
50924: LD_INT 1
50926: PPUSH
50927: LD_INT 0
50929: PPUSH
50930: CALL_OW 587
// end ;
50934: LD_VAR 0 3
50938: RET
// export function CenterOnNow ( unit ) ; begin
50939: LD_INT 0
50941: PPUSH
// result := IsInUnit ( unit ) ;
50942: LD_ADDR_VAR 0 2
50946: PUSH
50947: LD_VAR 0 1
50951: PPUSH
50952: CALL_OW 310
50956: ST_TO_ADDR
// if not result then
50957: LD_VAR 0 2
50961: NOT
50962: IFFALSE 50974
// result := unit ;
50964: LD_ADDR_VAR 0 2
50968: PUSH
50969: LD_VAR 0 1
50973: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50974: LD_VAR 0 1
50978: PPUSH
50979: CALL_OW 87
// end ;
50983: LD_VAR 0 2
50987: RET
// export function ComMoveHex ( unit , hex ) ; begin
50988: LD_INT 0
50990: PPUSH
// if not hex then
50991: LD_VAR 0 2
50995: NOT
50996: IFFALSE 51000
// exit ;
50998: GO 51053
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51000: LD_VAR 0 2
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: PPUSH
51009: LD_VAR 0 2
51013: PUSH
51014: LD_INT 2
51016: ARRAY
51017: PPUSH
51018: CALL_OW 428
51022: IFFALSE 51026
// exit ;
51024: GO 51053
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51026: LD_VAR 0 1
51030: PPUSH
51031: LD_VAR 0 2
51035: PUSH
51036: LD_INT 1
51038: ARRAY
51039: PPUSH
51040: LD_VAR 0 2
51044: PUSH
51045: LD_INT 2
51047: ARRAY
51048: PPUSH
51049: CALL_OW 111
// end ;
51053: LD_VAR 0 3
51057: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51058: LD_INT 0
51060: PPUSH
51061: PPUSH
51062: PPUSH
// if not unit or not enemy then
51063: LD_VAR 0 1
51067: NOT
51068: PUSH
51069: LD_VAR 0 2
51073: NOT
51074: OR
51075: IFFALSE 51079
// exit ;
51077: GO 51203
// x := GetX ( enemy ) ;
51079: LD_ADDR_VAR 0 4
51083: PUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: CALL_OW 250
51093: ST_TO_ADDR
// y := GetY ( enemy ) ;
51094: LD_ADDR_VAR 0 5
51098: PUSH
51099: LD_VAR 0 2
51103: PPUSH
51104: CALL_OW 251
51108: ST_TO_ADDR
// if ValidHex ( x , y ) then
51109: LD_VAR 0 4
51113: PPUSH
51114: LD_VAR 0 5
51118: PPUSH
51119: CALL_OW 488
51123: IFFALSE 51203
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51125: LD_VAR 0 2
51129: PPUSH
51130: CALL_OW 247
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: IN
51145: PUSH
51146: LD_VAR 0 1
51150: PPUSH
51151: CALL_OW 255
51155: PPUSH
51156: LD_VAR 0 2
51160: PPUSH
51161: CALL_OW 292
51165: OR
51166: IFFALSE 51184
// ComAttackUnit ( unit , enemy ) else
51168: LD_VAR 0 1
51172: PPUSH
51173: LD_VAR 0 2
51177: PPUSH
51178: CALL_OW 115
51182: GO 51203
// ComAgressiveMove ( unit , x , y ) ;
51184: LD_VAR 0 1
51188: PPUSH
51189: LD_VAR 0 4
51193: PPUSH
51194: LD_VAR 0 5
51198: PPUSH
51199: CALL_OW 114
// end ;
51203: LD_VAR 0 3
51207: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51208: LD_INT 0
51210: PPUSH
51211: PPUSH
51212: PPUSH
// list := AreaToList ( area , 0 ) ;
51213: LD_ADDR_VAR 0 5
51217: PUSH
51218: LD_VAR 0 1
51222: PPUSH
51223: LD_INT 0
51225: PPUSH
51226: CALL_OW 517
51230: ST_TO_ADDR
// if not list then
51231: LD_VAR 0 5
51235: NOT
51236: IFFALSE 51240
// exit ;
51238: GO 51370
// if all then
51240: LD_VAR 0 2
51244: IFFALSE 51332
// begin for i := 1 to list [ 1 ] do
51246: LD_ADDR_VAR 0 4
51250: PUSH
51251: DOUBLE
51252: LD_INT 1
51254: DEC
51255: ST_TO_ADDR
51256: LD_VAR 0 5
51260: PUSH
51261: LD_INT 1
51263: ARRAY
51264: PUSH
51265: FOR_TO
51266: IFFALSE 51328
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51268: LD_ADDR_VAR 0 3
51272: PUSH
51273: LD_VAR 0 3
51277: PPUSH
51278: LD_VAR 0 3
51282: PUSH
51283: LD_INT 1
51285: PLUS
51286: PPUSH
51287: LD_VAR 0 5
51291: PUSH
51292: LD_INT 1
51294: ARRAY
51295: PUSH
51296: LD_VAR 0 4
51300: ARRAY
51301: PUSH
51302: LD_VAR 0 5
51306: PUSH
51307: LD_INT 2
51309: ARRAY
51310: PUSH
51311: LD_VAR 0 4
51315: ARRAY
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PPUSH
51321: CALL_OW 1
51325: ST_TO_ADDR
51326: GO 51265
51328: POP
51329: POP
// exit ;
51330: GO 51370
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_VAR 0 5
51341: PUSH
51342: LD_INT 1
51344: ARRAY
51345: PUSH
51346: LD_INT 1
51348: ARRAY
51349: PUSH
51350: LD_VAR 0 5
51354: PUSH
51355: LD_INT 2
51357: ARRAY
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: ST_TO_ADDR
// end ;
51370: LD_VAR 0 3
51374: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51375: LD_INT 0
51377: PPUSH
51378: PPUSH
// list := AreaToList ( area , 0 ) ;
51379: LD_ADDR_VAR 0 4
51383: PUSH
51384: LD_VAR 0 1
51388: PPUSH
51389: LD_INT 0
51391: PPUSH
51392: CALL_OW 517
51396: ST_TO_ADDR
// if not list then
51397: LD_VAR 0 4
51401: NOT
51402: IFFALSE 51406
// exit ;
51404: GO 51447
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51406: LD_ADDR_VAR 0 3
51410: PUSH
51411: LD_VAR 0 4
51415: PUSH
51416: LD_INT 1
51418: ARRAY
51419: PUSH
51420: LD_INT 1
51422: ARRAY
51423: PUSH
51424: LD_VAR 0 4
51428: PUSH
51429: LD_INT 2
51431: ARRAY
51432: PUSH
51433: LD_INT 1
51435: ARRAY
51436: PUSH
51437: LD_VAR 0 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// end ;
51447: LD_VAR 0 3
51451: RET
// export function First ( array ) ; begin
51452: LD_INT 0
51454: PPUSH
// if not array then
51455: LD_VAR 0 1
51459: NOT
51460: IFFALSE 51464
// exit ;
51462: GO 51478
// result := array [ 1 ] ;
51464: LD_ADDR_VAR 0 2
51468: PUSH
51469: LD_VAR 0 1
51473: PUSH
51474: LD_INT 1
51476: ARRAY
51477: ST_TO_ADDR
// end ;
51478: LD_VAR 0 2
51482: RET
// export function Last ( array ) ; begin
51483: LD_INT 0
51485: PPUSH
// if not array then
51486: LD_VAR 0 1
51490: NOT
51491: IFFALSE 51495
// exit ;
51493: GO 51511
// result := array [ array ] ;
51495: LD_ADDR_VAR 0 2
51499: PUSH
51500: LD_VAR 0 1
51504: PUSH
51505: LD_VAR 0 1
51509: ARRAY
51510: ST_TO_ADDR
// end ;
51511: LD_VAR 0 2
51515: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51516: LD_INT 0
51518: PPUSH
51519: PPUSH
// result := [ ] ;
51520: LD_ADDR_VAR 0 5
51524: PUSH
51525: EMPTY
51526: ST_TO_ADDR
// if not array then
51527: LD_VAR 0 1
51531: NOT
51532: IFFALSE 51536
// exit ;
51534: GO 51648
// for i := 1 to array do
51536: LD_ADDR_VAR 0 6
51540: PUSH
51541: DOUBLE
51542: LD_INT 1
51544: DEC
51545: ST_TO_ADDR
51546: LD_VAR 0 1
51550: PUSH
51551: FOR_TO
51552: IFFALSE 51646
// if array [ i ] [ index ] = value then
51554: LD_VAR 0 1
51558: PUSH
51559: LD_VAR 0 6
51563: ARRAY
51564: PUSH
51565: LD_VAR 0 2
51569: ARRAY
51570: PUSH
51571: LD_VAR 0 3
51575: EQUAL
51576: IFFALSE 51644
// begin if indexColumn then
51578: LD_VAR 0 4
51582: IFFALSE 51618
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51584: LD_ADDR_VAR 0 5
51588: PUSH
51589: LD_VAR 0 5
51593: PPUSH
51594: LD_VAR 0 1
51598: PUSH
51599: LD_VAR 0 6
51603: ARRAY
51604: PUSH
51605: LD_VAR 0 4
51609: ARRAY
51610: PPUSH
51611: CALL 46836 0 2
51615: ST_TO_ADDR
51616: GO 51644
// result := Join ( result , array [ i ] ) ;
51618: LD_ADDR_VAR 0 5
51622: PUSH
51623: LD_VAR 0 5
51627: PPUSH
51628: LD_VAR 0 1
51632: PUSH
51633: LD_VAR 0 6
51637: ARRAY
51638: PPUSH
51639: CALL 46836 0 2
51643: ST_TO_ADDR
// end ;
51644: GO 51551
51646: POP
51647: POP
// end ;
51648: LD_VAR 0 5
51652: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51653: LD_INT 0
51655: PPUSH
// if not vehicles or not parkingPoint then
51656: LD_VAR 0 1
51660: NOT
51661: PUSH
51662: LD_VAR 0 2
51666: NOT
51667: OR
51668: IFFALSE 51672
// exit ;
51670: GO 51770
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51672: LD_ADDR_VAR 0 1
51676: PUSH
51677: LD_VAR 0 1
51681: PPUSH
51682: LD_INT 50
51684: PUSH
51685: EMPTY
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: PUSH
51691: LD_INT 92
51693: PUSH
51694: LD_VAR 0 2
51698: PUSH
51699: LD_INT 1
51701: ARRAY
51702: PUSH
51703: LD_VAR 0 2
51707: PUSH
51708: LD_INT 2
51710: ARRAY
51711: PUSH
51712: LD_INT 8
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PPUSH
51729: CALL_OW 72
51733: ST_TO_ADDR
// if not vehicles then
51734: LD_VAR 0 1
51738: NOT
51739: IFFALSE 51743
// exit ;
51741: GO 51770
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51743: LD_VAR 0 1
51747: PPUSH
51748: LD_VAR 0 2
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: PPUSH
51757: LD_VAR 0 2
51761: PUSH
51762: LD_INT 2
51764: ARRAY
51765: PPUSH
51766: CALL_OW 111
// end ;
51770: LD_VAR 0 3
51774: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51775: LD_INT 0
51777: PPUSH
51778: PPUSH
51779: PPUSH
// if not side or not area then
51780: LD_VAR 0 1
51784: NOT
51785: PUSH
51786: LD_VAR 0 2
51790: NOT
51791: OR
51792: IFFALSE 51796
// exit ;
51794: GO 51915
// tmp := AreaToList ( area , 0 ) ;
51796: LD_ADDR_VAR 0 5
51800: PUSH
51801: LD_VAR 0 2
51805: PPUSH
51806: LD_INT 0
51808: PPUSH
51809: CALL_OW 517
51813: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51814: LD_ADDR_VAR 0 4
51818: PUSH
51819: DOUBLE
51820: LD_INT 1
51822: DEC
51823: ST_TO_ADDR
51824: LD_VAR 0 5
51828: PUSH
51829: LD_INT 1
51831: ARRAY
51832: PUSH
51833: FOR_TO
51834: IFFALSE 51913
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51836: LD_VAR 0 5
51840: PUSH
51841: LD_INT 1
51843: ARRAY
51844: PUSH
51845: LD_VAR 0 4
51849: ARRAY
51850: PPUSH
51851: LD_VAR 0 5
51855: PUSH
51856: LD_INT 2
51858: ARRAY
51859: PUSH
51860: LD_VAR 0 4
51864: ARRAY
51865: PPUSH
51866: CALL_OW 351
51870: IFFALSE 51911
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51872: LD_VAR 0 5
51876: PUSH
51877: LD_INT 1
51879: ARRAY
51880: PUSH
51881: LD_VAR 0 4
51885: ARRAY
51886: PPUSH
51887: LD_VAR 0 5
51891: PUSH
51892: LD_INT 2
51894: ARRAY
51895: PUSH
51896: LD_VAR 0 4
51900: ARRAY
51901: PPUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 244
// end ;
51911: GO 51833
51913: POP
51914: POP
// end ; end_of_file
51915: LD_VAR 0 3
51919: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51920: LD_VAR 0 1
51924: PUSH
51925: LD_INT 200
51927: DOUBLE
51928: GREATEREQUAL
51929: IFFALSE 51937
51931: LD_INT 299
51933: DOUBLE
51934: LESSEQUAL
51935: IFTRUE 51939
51937: GO 51971
51939: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51940: LD_VAR 0 1
51944: PPUSH
51945: LD_VAR 0 2
51949: PPUSH
51950: LD_VAR 0 3
51954: PPUSH
51955: LD_VAR 0 4
51959: PPUSH
51960: LD_VAR 0 5
51964: PPUSH
51965: CALL 52668 0 5
51969: GO 52048
51971: LD_INT 300
51973: DOUBLE
51974: GREATEREQUAL
51975: IFFALSE 51983
51977: LD_INT 399
51979: DOUBLE
51980: LESSEQUAL
51981: IFTRUE 51985
51983: GO 52047
51985: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
51986: LD_VAR 0 1
51990: PPUSH
51991: LD_VAR 0 2
51995: PPUSH
51996: LD_VAR 0 3
52000: PPUSH
52001: LD_VAR 0 4
52005: PPUSH
52006: LD_VAR 0 5
52010: PPUSH
52011: LD_VAR 0 6
52015: PPUSH
52016: LD_VAR 0 7
52020: PPUSH
52021: LD_VAR 0 8
52025: PPUSH
52026: LD_VAR 0 9
52030: PPUSH
52031: LD_VAR 0 10
52035: PPUSH
52036: LD_VAR 0 11
52040: PPUSH
52041: CALL 58995 0 11
52045: GO 52048
52047: POP
// end ;
52048: PPOPN 11
52050: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52051: LD_VAR 0 1
52055: PPUSH
52056: LD_VAR 0 2
52060: PPUSH
52061: LD_VAR 0 3
52065: PPUSH
52066: LD_VAR 0 4
52070: PPUSH
52071: LD_VAR 0 5
52075: PPUSH
52076: CALL 52133 0 5
// end ; end_of_file
52080: PPOPN 5
52082: END
// export function SOS_UnitDestroyed ( un ) ; begin
52083: LD_INT 0
52085: PPUSH
// ComRadiation ( un ) ;
52086: LD_VAR 0 1
52090: PPUSH
52091: CALL 53072 0 1
// end ;
52095: LD_VAR 0 2
52099: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52100: LD_INT 0
52102: PPUSH
// ComRadiation ( un ) ;
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL 53072 0 1
// end ;
52112: LD_VAR 0 2
52116: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52117: LD_INT 0
52119: PPUSH
// end ;
52120: LD_VAR 0 4
52124: RET
// export function SOS_Command ( cmd ) ; begin
52125: LD_INT 0
52127: PPUSH
// end ;
52128: LD_VAR 0 2
52132: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52133: LD_INT 0
52135: PPUSH
// end ;
52136: LD_VAR 0 6
52140: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52141: LD_INT 0
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
52147: PPUSH
// if not vehicle or not factory then
52148: LD_VAR 0 1
52152: NOT
52153: PUSH
52154: LD_VAR 0 2
52158: NOT
52159: OR
52160: IFFALSE 52164
// exit ;
52162: GO 52663
// if not factoryWaypoints then
52164: LD_EXP 54
52168: NOT
52169: IFFALSE 52173
// exit ;
52171: GO 52663
// for i := 1 to Count ( factoryWaypoints ) do
52173: LD_ADDR_VAR 0 4
52177: PUSH
52178: DOUBLE
52179: LD_INT 1
52181: DEC
52182: ST_TO_ADDR
52183: LD_EXP 54
52187: PPUSH
52188: CALL 11227 0 1
52192: PUSH
52193: FOR_TO
52194: IFFALSE 52661
// if factoryWaypoints [ i ] [ 2 ] = factory then
52196: LD_EXP 54
52200: PUSH
52201: LD_VAR 0 4
52205: ARRAY
52206: PUSH
52207: LD_INT 2
52209: ARRAY
52210: PUSH
52211: LD_VAR 0 2
52215: EQUAL
52216: IFFALSE 52659
// begin if GetControl ( vehicle ) = control_manual then
52218: LD_VAR 0 1
52222: PPUSH
52223: CALL_OW 263
52227: PUSH
52228: LD_INT 1
52230: EQUAL
52231: IFFALSE 52542
// begin driver := IsDrivenBy ( vehicle ) ;
52233: LD_ADDR_VAR 0 6
52237: PUSH
52238: LD_VAR 0 1
52242: PPUSH
52243: CALL_OW 311
52247: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52248: LD_ADDR_VAR 0 5
52252: PUSH
52253: LD_VAR 0 6
52257: PPUSH
52258: CALL_OW 110
52262: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52263: LD_VAR 0 5
52267: PUSH
52268: LD_INT 501
52270: EQUAL
52271: PUSH
52272: LD_VAR 0 1
52276: PPUSH
52277: CALL_OW 110
52281: PUSH
52282: LD_INT 501
52284: EQUAL
52285: OR
52286: IFFALSE 52292
// exit ;
52288: POP
52289: POP
52290: GO 52663
// if not HasTask ( driver ) then
52292: LD_VAR 0 6
52296: PPUSH
52297: CALL_OW 314
52301: NOT
52302: IFFALSE 52540
// begin SetTag ( driver , tDriver ) ;
52304: LD_VAR 0 6
52308: PPUSH
52309: LD_INT 501
52311: PPUSH
52312: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_INT 501
52323: PPUSH
52324: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52328: LD_ADDR_VAR 0 7
52332: PUSH
52333: LD_EXP 54
52337: PUSH
52338: LD_VAR 0 4
52342: ARRAY
52343: PUSH
52344: LD_INT 3
52346: ARRAY
52347: PPUSH
52348: LD_EXP 54
52352: PUSH
52353: LD_VAR 0 4
52357: ARRAY
52358: PUSH
52359: LD_INT 4
52361: ARRAY
52362: PPUSH
52363: CALL_OW 428
52367: ST_TO_ADDR
// if hex then
52368: LD_VAR 0 7
52372: IFFALSE 52390
// ComMoveUnit ( driver , hex ) else
52374: LD_VAR 0 6
52378: PPUSH
52379: LD_VAR 0 7
52383: PPUSH
52384: CALL_OW 112
52388: GO 52429
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52390: LD_VAR 0 6
52394: PPUSH
52395: LD_EXP 54
52399: PUSH
52400: LD_VAR 0 4
52404: ARRAY
52405: PUSH
52406: LD_INT 3
52408: ARRAY
52409: PPUSH
52410: LD_EXP 54
52414: PUSH
52415: LD_VAR 0 4
52419: ARRAY
52420: PUSH
52421: LD_INT 4
52423: ARRAY
52424: PPUSH
52425: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52429: LD_VAR 0 6
52433: PPUSH
52434: CALL_OW 181
// if Multiplayer then
52438: LD_OWVAR 4
52442: IFFALSE 52491
// begin repeat wait ( 10 ) ;
52444: LD_INT 10
52446: PPUSH
52447: CALL_OW 67
// until not IsInUnit ( driver ) ;
52451: LD_VAR 0 6
52455: PPUSH
52456: CALL_OW 310
52460: NOT
52461: IFFALSE 52444
// if not HasTask ( driver ) then
52463: LD_VAR 0 6
52467: PPUSH
52468: CALL_OW 314
52472: NOT
52473: IFFALSE 52489
// ComEnterUnit ( driver , factory ) ;
52475: LD_VAR 0 6
52479: PPUSH
52480: LD_VAR 0 2
52484: PPUSH
52485: CALL_OW 120
// end else
52489: GO 52505
// AddComEnterUnit ( driver , factory ) ;
52491: LD_VAR 0 6
52495: PPUSH
52496: LD_VAR 0 2
52500: PPUSH
52501: CALL_OW 180
// wait ( 0 0$1 ) ;
52505: LD_INT 35
52507: PPUSH
52508: CALL_OW 67
// SetTag ( driver , tag ) ;
52512: LD_VAR 0 6
52516: PPUSH
52517: LD_VAR 0 5
52521: PPUSH
52522: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52526: LD_VAR 0 1
52530: PPUSH
52531: LD_INT 0
52533: PPUSH
52534: CALL_OW 109
// break ;
52538: GO 52661
// end ; end else
52540: GO 52659
// if GetControl ( vehicle ) = control_remote then
52542: LD_VAR 0 1
52546: PPUSH
52547: CALL_OW 263
52551: PUSH
52552: LD_INT 2
52554: EQUAL
52555: IFFALSE 52618
// begin wait ( 0 0$2 ) ;
52557: LD_INT 70
52559: PPUSH
52560: CALL_OW 67
// if Connect ( vehicle ) then
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL 17433 0 1
52573: IFFALSE 52614
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52575: LD_VAR 0 1
52579: PPUSH
52580: LD_EXP 54
52584: PUSH
52585: LD_VAR 0 4
52589: ARRAY
52590: PUSH
52591: LD_INT 3
52593: ARRAY
52594: PPUSH
52595: LD_EXP 54
52599: PUSH
52600: LD_VAR 0 4
52604: ARRAY
52605: PUSH
52606: LD_INT 4
52608: ARRAY
52609: PPUSH
52610: CALL_OW 171
// break ;
52614: GO 52661
// end else
52616: GO 52659
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52618: LD_VAR 0 1
52622: PPUSH
52623: LD_EXP 54
52627: PUSH
52628: LD_VAR 0 4
52632: ARRAY
52633: PUSH
52634: LD_INT 3
52636: ARRAY
52637: PPUSH
52638: LD_EXP 54
52642: PUSH
52643: LD_VAR 0 4
52647: ARRAY
52648: PUSH
52649: LD_INT 4
52651: ARRAY
52652: PPUSH
52653: CALL_OW 171
// break ;
52657: GO 52661
// end ; end ;
52659: GO 52193
52661: POP
52662: POP
// end ;
52663: LD_VAR 0 3
52667: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52668: LD_INT 0
52670: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52671: LD_VAR 0 1
52675: PUSH
52676: LD_INT 250
52678: EQUAL
52679: PUSH
52680: LD_VAR 0 2
52684: PPUSH
52685: CALL_OW 264
52689: PUSH
52690: LD_INT 81
52692: EQUAL
52693: AND
52694: IFFALSE 52715
// MinerPlaceMine ( unit , x , y ) ;
52696: LD_VAR 0 2
52700: PPUSH
52701: LD_VAR 0 4
52705: PPUSH
52706: LD_VAR 0 5
52710: PPUSH
52711: CALL 55807 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52715: LD_VAR 0 1
52719: PUSH
52720: LD_INT 251
52722: EQUAL
52723: PUSH
52724: LD_VAR 0 2
52728: PPUSH
52729: CALL_OW 264
52733: PUSH
52734: LD_INT 81
52736: EQUAL
52737: AND
52738: IFFALSE 52759
// MinerDetonateMine ( unit , x , y ) ;
52740: LD_VAR 0 2
52744: PPUSH
52745: LD_VAR 0 4
52749: PPUSH
52750: LD_VAR 0 5
52754: PPUSH
52755: CALL 56082 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52759: LD_VAR 0 1
52763: PUSH
52764: LD_INT 252
52766: EQUAL
52767: PUSH
52768: LD_VAR 0 2
52772: PPUSH
52773: CALL_OW 264
52777: PUSH
52778: LD_INT 81
52780: EQUAL
52781: AND
52782: IFFALSE 52803
// MinerCreateMinefield ( unit , x , y ) ;
52784: LD_VAR 0 2
52788: PPUSH
52789: LD_VAR 0 4
52793: PPUSH
52794: LD_VAR 0 5
52798: PPUSH
52799: CALL 56499 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52803: LD_VAR 0 1
52807: PUSH
52808: LD_INT 253
52810: EQUAL
52811: PUSH
52812: LD_VAR 0 2
52816: PPUSH
52817: CALL_OW 257
52821: PUSH
52822: LD_INT 5
52824: EQUAL
52825: AND
52826: IFFALSE 52847
// ComBinocular ( unit , x , y ) ;
52828: LD_VAR 0 2
52832: PPUSH
52833: LD_VAR 0 4
52837: PPUSH
52838: LD_VAR 0 5
52842: PPUSH
52843: CALL 56868 0 3
// if selectedUnit then
52847: LD_VAR 0 3
52851: IFFALSE 52907
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52853: LD_VAR 0 1
52857: PUSH
52858: LD_INT 254
52860: EQUAL
52861: PUSH
52862: LD_VAR 0 2
52866: PPUSH
52867: CALL_OW 264
52871: PUSH
52872: LD_INT 99
52874: EQUAL
52875: AND
52876: PUSH
52877: LD_VAR 0 3
52881: PPUSH
52882: CALL_OW 263
52886: PUSH
52887: LD_INT 3
52889: EQUAL
52890: AND
52891: IFFALSE 52907
// HackDestroyVehicle ( unit , selectedUnit ) ;
52893: LD_VAR 0 2
52897: PPUSH
52898: LD_VAR 0 3
52902: PPUSH
52903: CALL 55171 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52907: LD_VAR 0 1
52911: PUSH
52912: LD_INT 255
52914: EQUAL
52915: PUSH
52916: LD_VAR 0 2
52920: PPUSH
52921: CALL_OW 264
52925: PUSH
52926: LD_INT 14
52928: PUSH
52929: LD_INT 53
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: IN
52936: AND
52937: PUSH
52938: LD_VAR 0 4
52942: PPUSH
52943: LD_VAR 0 5
52947: PPUSH
52948: CALL_OW 488
52952: AND
52953: IFFALSE 52977
// CutTreeXYR ( unit , x , y , 12 ) ;
52955: LD_VAR 0 2
52959: PPUSH
52960: LD_VAR 0 4
52964: PPUSH
52965: LD_VAR 0 5
52969: PPUSH
52970: LD_INT 12
52972: PPUSH
52973: CALL 53168 0 4
// if cmd = 256 then
52977: LD_VAR 0 1
52981: PUSH
52982: LD_INT 256
52984: EQUAL
52985: IFFALSE 53006
// SetFactoryWaypoint ( unit , x , y ) ;
52987: LD_VAR 0 2
52991: PPUSH
52992: LD_VAR 0 4
52996: PPUSH
52997: LD_VAR 0 5
53001: PPUSH
53002: CALL 59003 0 3
// if cmd = 257 then
53006: LD_VAR 0 1
53010: PUSH
53011: LD_INT 257
53013: EQUAL
53014: IFFALSE 53035
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53016: LD_VAR 0 2
53020: PPUSH
53021: LD_VAR 0 4
53025: PPUSH
53026: LD_VAR 0 5
53030: PPUSH
53031: CALL 59493 0 3
// if cmd = 258 then
53035: LD_VAR 0 1
53039: PUSH
53040: LD_INT 258
53042: EQUAL
53043: IFFALSE 53067
// BurnTreeXYR ( unit , x , y , 8 ) ;
53045: LD_VAR 0 2
53049: PPUSH
53050: LD_VAR 0 4
53054: PPUSH
53055: LD_VAR 0 5
53059: PPUSH
53060: LD_INT 8
53062: PPUSH
53063: CALL 53562 0 4
// end ;
53067: LD_VAR 0 6
53071: RET
// export function ComRadiation ( un ) ; var eff ; begin
53072: LD_INT 0
53074: PPUSH
53075: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53076: LD_VAR 0 1
53080: PPUSH
53081: CALL_OW 264
53085: PUSH
53086: LD_INT 91
53088: NONEQUAL
53089: IFFALSE 53093
// exit ;
53091: GO 53163
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53093: LD_INT 68
53095: PPUSH
53096: LD_VAR 0 1
53100: PPUSH
53101: CALL_OW 255
53105: PPUSH
53106: CALL_OW 321
53110: PUSH
53111: LD_INT 2
53113: EQUAL
53114: IFFALSE 53126
// eff := 70 else
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_INT 70
53123: ST_TO_ADDR
53124: GO 53134
// eff := 30 ;
53126: LD_ADDR_VAR 0 3
53130: PUSH
53131: LD_INT 30
53133: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53134: LD_VAR 0 1
53138: PPUSH
53139: CALL_OW 250
53143: PPUSH
53144: LD_VAR 0 1
53148: PPUSH
53149: CALL_OW 251
53153: PPUSH
53154: LD_VAR 0 3
53158: PPUSH
53159: CALL_OW 495
// end ;
53163: LD_VAR 0 2
53167: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53168: LD_INT 0
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53179: LD_VAR 0 1
53183: PPUSH
53184: CALL_OW 302
53188: NOT
53189: PUSH
53190: LD_VAR 0 2
53194: PPUSH
53195: LD_VAR 0 3
53199: PPUSH
53200: CALL_OW 488
53204: NOT
53205: OR
53206: PUSH
53207: LD_VAR 0 4
53211: NOT
53212: OR
53213: IFFALSE 53217
// exit ;
53215: GO 53557
// list := [ ] ;
53217: LD_ADDR_VAR 0 13
53221: PUSH
53222: EMPTY
53223: ST_TO_ADDR
// if x - r < 0 then
53224: LD_VAR 0 2
53228: PUSH
53229: LD_VAR 0 4
53233: MINUS
53234: PUSH
53235: LD_INT 0
53237: LESS
53238: IFFALSE 53250
// min_x := 0 else
53240: LD_ADDR_VAR 0 7
53244: PUSH
53245: LD_INT 0
53247: ST_TO_ADDR
53248: GO 53266
// min_x := x - r ;
53250: LD_ADDR_VAR 0 7
53254: PUSH
53255: LD_VAR 0 2
53259: PUSH
53260: LD_VAR 0 4
53264: MINUS
53265: ST_TO_ADDR
// if y - r < 0 then
53266: LD_VAR 0 3
53270: PUSH
53271: LD_VAR 0 4
53275: MINUS
53276: PUSH
53277: LD_INT 0
53279: LESS
53280: IFFALSE 53292
// min_y := 0 else
53282: LD_ADDR_VAR 0 8
53286: PUSH
53287: LD_INT 0
53289: ST_TO_ADDR
53290: GO 53308
// min_y := y - r ;
53292: LD_ADDR_VAR 0 8
53296: PUSH
53297: LD_VAR 0 3
53301: PUSH
53302: LD_VAR 0 4
53306: MINUS
53307: ST_TO_ADDR
// max_x := x + r ;
53308: LD_ADDR_VAR 0 9
53312: PUSH
53313: LD_VAR 0 2
53317: PUSH
53318: LD_VAR 0 4
53322: PLUS
53323: ST_TO_ADDR
// max_y := y + r ;
53324: LD_ADDR_VAR 0 10
53328: PUSH
53329: LD_VAR 0 3
53333: PUSH
53334: LD_VAR 0 4
53338: PLUS
53339: ST_TO_ADDR
// for _x = min_x to max_x do
53340: LD_ADDR_VAR 0 11
53344: PUSH
53345: DOUBLE
53346: LD_VAR 0 7
53350: DEC
53351: ST_TO_ADDR
53352: LD_VAR 0 9
53356: PUSH
53357: FOR_TO
53358: IFFALSE 53475
// for _y = min_y to max_y do
53360: LD_ADDR_VAR 0 12
53364: PUSH
53365: DOUBLE
53366: LD_VAR 0 8
53370: DEC
53371: ST_TO_ADDR
53372: LD_VAR 0 10
53376: PUSH
53377: FOR_TO
53378: IFFALSE 53471
// begin if not ValidHex ( _x , _y ) then
53380: LD_VAR 0 11
53384: PPUSH
53385: LD_VAR 0 12
53389: PPUSH
53390: CALL_OW 488
53394: NOT
53395: IFFALSE 53399
// continue ;
53397: GO 53377
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53399: LD_VAR 0 11
53403: PPUSH
53404: LD_VAR 0 12
53408: PPUSH
53409: CALL_OW 351
53413: PUSH
53414: LD_VAR 0 11
53418: PPUSH
53419: LD_VAR 0 12
53423: PPUSH
53424: CALL_OW 554
53428: AND
53429: IFFALSE 53469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53431: LD_ADDR_VAR 0 13
53435: PUSH
53436: LD_VAR 0 13
53440: PPUSH
53441: LD_VAR 0 13
53445: PUSH
53446: LD_INT 1
53448: PLUS
53449: PPUSH
53450: LD_VAR 0 11
53454: PUSH
53455: LD_VAR 0 12
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PPUSH
53464: CALL_OW 2
53468: ST_TO_ADDR
// end ;
53469: GO 53377
53471: POP
53472: POP
53473: GO 53357
53475: POP
53476: POP
// if not list then
53477: LD_VAR 0 13
53481: NOT
53482: IFFALSE 53486
// exit ;
53484: GO 53557
// for i in list do
53486: LD_ADDR_VAR 0 6
53490: PUSH
53491: LD_VAR 0 13
53495: PUSH
53496: FOR_IN
53497: IFFALSE 53555
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53499: LD_VAR 0 1
53503: PPUSH
53504: LD_STRING M
53506: PUSH
53507: LD_VAR 0 6
53511: PUSH
53512: LD_INT 1
53514: ARRAY
53515: PUSH
53516: LD_VAR 0 6
53520: PUSH
53521: LD_INT 2
53523: ARRAY
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: PPUSH
53549: CALL_OW 447
53553: GO 53496
53555: POP
53556: POP
// end ;
53557: LD_VAR 0 5
53561: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53562: LD_INT 0
53564: PPUSH
53565: PPUSH
53566: PPUSH
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 302
53583: NOT
53584: PUSH
53585: LD_VAR 0 2
53589: PPUSH
53590: LD_VAR 0 3
53594: PPUSH
53595: CALL_OW 488
53599: NOT
53600: OR
53601: PUSH
53602: LD_VAR 0 4
53606: NOT
53607: OR
53608: IFFALSE 53612
// exit ;
53610: GO 54125
// list := [ ] ;
53612: LD_ADDR_VAR 0 13
53616: PUSH
53617: EMPTY
53618: ST_TO_ADDR
// if x - r < 0 then
53619: LD_VAR 0 2
53623: PUSH
53624: LD_VAR 0 4
53628: MINUS
53629: PUSH
53630: LD_INT 0
53632: LESS
53633: IFFALSE 53645
// min_x := 0 else
53635: LD_ADDR_VAR 0 7
53639: PUSH
53640: LD_INT 0
53642: ST_TO_ADDR
53643: GO 53661
// min_x := x - r ;
53645: LD_ADDR_VAR 0 7
53649: PUSH
53650: LD_VAR 0 2
53654: PUSH
53655: LD_VAR 0 4
53659: MINUS
53660: ST_TO_ADDR
// if y - r < 0 then
53661: LD_VAR 0 3
53665: PUSH
53666: LD_VAR 0 4
53670: MINUS
53671: PUSH
53672: LD_INT 0
53674: LESS
53675: IFFALSE 53687
// min_y := 0 else
53677: LD_ADDR_VAR 0 8
53681: PUSH
53682: LD_INT 0
53684: ST_TO_ADDR
53685: GO 53703
// min_y := y - r ;
53687: LD_ADDR_VAR 0 8
53691: PUSH
53692: LD_VAR 0 3
53696: PUSH
53697: LD_VAR 0 4
53701: MINUS
53702: ST_TO_ADDR
// max_x := x + r ;
53703: LD_ADDR_VAR 0 9
53707: PUSH
53708: LD_VAR 0 2
53712: PUSH
53713: LD_VAR 0 4
53717: PLUS
53718: ST_TO_ADDR
// max_y := y + r ;
53719: LD_ADDR_VAR 0 10
53723: PUSH
53724: LD_VAR 0 3
53728: PUSH
53729: LD_VAR 0 4
53733: PLUS
53734: ST_TO_ADDR
// for _x = min_x to max_x do
53735: LD_ADDR_VAR 0 11
53739: PUSH
53740: DOUBLE
53741: LD_VAR 0 7
53745: DEC
53746: ST_TO_ADDR
53747: LD_VAR 0 9
53751: PUSH
53752: FOR_TO
53753: IFFALSE 53870
// for _y = min_y to max_y do
53755: LD_ADDR_VAR 0 12
53759: PUSH
53760: DOUBLE
53761: LD_VAR 0 8
53765: DEC
53766: ST_TO_ADDR
53767: LD_VAR 0 10
53771: PUSH
53772: FOR_TO
53773: IFFALSE 53866
// begin if not ValidHex ( _x , _y ) then
53775: LD_VAR 0 11
53779: PPUSH
53780: LD_VAR 0 12
53784: PPUSH
53785: CALL_OW 488
53789: NOT
53790: IFFALSE 53794
// continue ;
53792: GO 53772
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53794: LD_VAR 0 11
53798: PPUSH
53799: LD_VAR 0 12
53803: PPUSH
53804: CALL_OW 351
53808: PUSH
53809: LD_VAR 0 11
53813: PPUSH
53814: LD_VAR 0 12
53818: PPUSH
53819: CALL_OW 554
53823: AND
53824: IFFALSE 53864
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53826: LD_ADDR_VAR 0 13
53830: PUSH
53831: LD_VAR 0 13
53835: PPUSH
53836: LD_VAR 0 13
53840: PUSH
53841: LD_INT 1
53843: PLUS
53844: PPUSH
53845: LD_VAR 0 11
53849: PUSH
53850: LD_VAR 0 12
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PPUSH
53859: CALL_OW 2
53863: ST_TO_ADDR
// end ;
53864: GO 53772
53866: POP
53867: POP
53868: GO 53752
53870: POP
53871: POP
// if not list then
53872: LD_VAR 0 13
53876: NOT
53877: IFFALSE 53881
// exit ;
53879: GO 54125
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53881: LD_ADDR_VAR 0 13
53885: PUSH
53886: LD_VAR 0 1
53890: PPUSH
53891: LD_VAR 0 13
53895: PPUSH
53896: LD_INT 1
53898: PPUSH
53899: LD_INT 1
53901: PPUSH
53902: CALL 14575 0 4
53906: ST_TO_ADDR
// ComStop ( flame ) ;
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL_OW 141
// for i in list do
53916: LD_ADDR_VAR 0 6
53920: PUSH
53921: LD_VAR 0 13
53925: PUSH
53926: FOR_IN
53927: IFFALSE 53958
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53929: LD_VAR 0 1
53933: PPUSH
53934: LD_VAR 0 6
53938: PUSH
53939: LD_INT 1
53941: ARRAY
53942: PPUSH
53943: LD_VAR 0 6
53947: PUSH
53948: LD_INT 2
53950: ARRAY
53951: PPUSH
53952: CALL_OW 176
53956: GO 53926
53958: POP
53959: POP
// repeat wait ( 0 0$1 ) ;
53960: LD_INT 35
53962: PPUSH
53963: CALL_OW 67
// task := GetTaskList ( flame ) ;
53967: LD_ADDR_VAR 0 14
53971: PUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 437
53981: ST_TO_ADDR
// if not task then
53982: LD_VAR 0 14
53986: NOT
53987: IFFALSE 53991
// exit ;
53989: GO 54125
// if task [ 1 ] [ 1 ] <> | then
53991: LD_VAR 0 14
53995: PUSH
53996: LD_INT 1
53998: ARRAY
53999: PUSH
54000: LD_INT 1
54002: ARRAY
54003: PUSH
54004: LD_STRING |
54006: NONEQUAL
54007: IFFALSE 54011
// exit ;
54009: GO 54125
// _x := task [ 1 ] [ 2 ] ;
54011: LD_ADDR_VAR 0 11
54015: PUSH
54016: LD_VAR 0 14
54020: PUSH
54021: LD_INT 1
54023: ARRAY
54024: PUSH
54025: LD_INT 2
54027: ARRAY
54028: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54029: LD_ADDR_VAR 0 12
54033: PUSH
54034: LD_VAR 0 14
54038: PUSH
54039: LD_INT 1
54041: ARRAY
54042: PUSH
54043: LD_INT 3
54045: ARRAY
54046: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54047: LD_VAR 0 11
54051: PPUSH
54052: LD_VAR 0 12
54056: PPUSH
54057: CALL_OW 351
54061: NOT
54062: PUSH
54063: LD_VAR 0 11
54067: PPUSH
54068: LD_VAR 0 12
54072: PPUSH
54073: CALL_OW 554
54077: NOT
54078: OR
54079: IFFALSE 54113
// begin task := Delete ( task , 1 ) ;
54081: LD_ADDR_VAR 0 14
54085: PUSH
54086: LD_VAR 0 14
54090: PPUSH
54091: LD_INT 1
54093: PPUSH
54094: CALL_OW 3
54098: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54099: LD_VAR 0 1
54103: PPUSH
54104: LD_VAR 0 14
54108: PPUSH
54109: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54113: LD_VAR 0 1
54117: PPUSH
54118: CALL_OW 314
54122: NOT
54123: IFFALSE 53960
// end ;
54125: LD_VAR 0 5
54129: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54130: LD_EXP 43
54134: NOT
54135: IFFALSE 54185
54137: GO 54139
54139: DISABLE
// begin initHack := true ;
54140: LD_ADDR_EXP 43
54144: PUSH
54145: LD_INT 1
54147: ST_TO_ADDR
// hackTanks := [ ] ;
54148: LD_ADDR_EXP 44
54152: PUSH
54153: EMPTY
54154: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54155: LD_ADDR_EXP 45
54159: PUSH
54160: EMPTY
54161: ST_TO_ADDR
// hackLimit := 3 ;
54162: LD_ADDR_EXP 46
54166: PUSH
54167: LD_INT 3
54169: ST_TO_ADDR
// hackDist := 12 ;
54170: LD_ADDR_EXP 47
54174: PUSH
54175: LD_INT 12
54177: ST_TO_ADDR
// hackCounter := [ ] ;
54178: LD_ADDR_EXP 48
54182: PUSH
54183: EMPTY
54184: ST_TO_ADDR
// end ;
54185: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54186: LD_EXP 43
54190: PUSH
54191: LD_INT 34
54193: PUSH
54194: LD_INT 99
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PPUSH
54201: CALL_OW 69
54205: AND
54206: IFFALSE 54459
54208: GO 54210
54210: DISABLE
54211: LD_INT 0
54213: PPUSH
54214: PPUSH
// begin enable ;
54215: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54216: LD_ADDR_VAR 0 1
54220: PUSH
54221: LD_INT 34
54223: PUSH
54224: LD_INT 99
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PPUSH
54231: CALL_OW 69
54235: PUSH
54236: FOR_IN
54237: IFFALSE 54457
// begin if not i in hackTanks then
54239: LD_VAR 0 1
54243: PUSH
54244: LD_EXP 44
54248: IN
54249: NOT
54250: IFFALSE 54333
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54252: LD_ADDR_EXP 44
54256: PUSH
54257: LD_EXP 44
54261: PPUSH
54262: LD_EXP 44
54266: PUSH
54267: LD_INT 1
54269: PLUS
54270: PPUSH
54271: LD_VAR 0 1
54275: PPUSH
54276: CALL_OW 1
54280: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54281: LD_ADDR_EXP 45
54285: PUSH
54286: LD_EXP 45
54290: PPUSH
54291: LD_EXP 45
54295: PUSH
54296: LD_INT 1
54298: PLUS
54299: PPUSH
54300: EMPTY
54301: PPUSH
54302: CALL_OW 1
54306: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54307: LD_ADDR_EXP 48
54311: PUSH
54312: LD_EXP 48
54316: PPUSH
54317: LD_EXP 48
54321: PUSH
54322: LD_INT 1
54324: PLUS
54325: PPUSH
54326: EMPTY
54327: PPUSH
54328: CALL_OW 1
54332: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54333: LD_VAR 0 1
54337: PPUSH
54338: CALL_OW 302
54342: NOT
54343: IFFALSE 54356
// begin HackUnlinkAll ( i ) ;
54345: LD_VAR 0 1
54349: PPUSH
54350: CALL 54462 0 1
// continue ;
54354: GO 54236
// end ; HackCheckCapturedStatus ( i ) ;
54356: LD_VAR 0 1
54360: PPUSH
54361: CALL 54905 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54365: LD_ADDR_VAR 0 2
54369: PUSH
54370: LD_INT 81
54372: PUSH
54373: LD_VAR 0 1
54377: PPUSH
54378: CALL_OW 255
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 33
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 91
54399: PUSH
54400: LD_VAR 0 1
54404: PUSH
54405: LD_EXP 47
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 50
54417: PUSH
54418: EMPTY
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: PPUSH
54427: CALL_OW 69
54431: ST_TO_ADDR
// if not tmp then
54432: LD_VAR 0 2
54436: NOT
54437: IFFALSE 54441
// continue ;
54439: GO 54236
// HackLink ( i , tmp ) ;
54441: LD_VAR 0 1
54445: PPUSH
54446: LD_VAR 0 2
54450: PPUSH
54451: CALL 54598 0 2
// end ;
54455: GO 54236
54457: POP
54458: POP
// end ;
54459: PPOPN 2
54461: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54462: LD_INT 0
54464: PPUSH
54465: PPUSH
54466: PPUSH
// if not hack in hackTanks then
54467: LD_VAR 0 1
54471: PUSH
54472: LD_EXP 44
54476: IN
54477: NOT
54478: IFFALSE 54482
// exit ;
54480: GO 54593
// index := GetElementIndex ( hackTanks , hack ) ;
54482: LD_ADDR_VAR 0 4
54486: PUSH
54487: LD_EXP 44
54491: PPUSH
54492: LD_VAR 0 1
54496: PPUSH
54497: CALL 13872 0 2
54501: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54502: LD_EXP 45
54506: PUSH
54507: LD_VAR 0 4
54511: ARRAY
54512: IFFALSE 54593
// begin for i in hackTanksCaptured [ index ] do
54514: LD_ADDR_VAR 0 3
54518: PUSH
54519: LD_EXP 45
54523: PUSH
54524: LD_VAR 0 4
54528: ARRAY
54529: PUSH
54530: FOR_IN
54531: IFFALSE 54557
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54533: LD_VAR 0 3
54537: PUSH
54538: LD_INT 1
54540: ARRAY
54541: PPUSH
54542: LD_VAR 0 3
54546: PUSH
54547: LD_INT 2
54549: ARRAY
54550: PPUSH
54551: CALL_OW 235
54555: GO 54530
54557: POP
54558: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54559: LD_ADDR_EXP 45
54563: PUSH
54564: LD_EXP 45
54568: PPUSH
54569: LD_VAR 0 4
54573: PPUSH
54574: EMPTY
54575: PPUSH
54576: CALL_OW 1
54580: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54581: LD_VAR 0 1
54585: PPUSH
54586: LD_INT 0
54588: PPUSH
54589: CALL_OW 505
// end ; end ;
54593: LD_VAR 0 2
54597: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54598: LD_INT 0
54600: PPUSH
54601: PPUSH
54602: PPUSH
// if not hack in hackTanks or not vehicles then
54603: LD_VAR 0 1
54607: PUSH
54608: LD_EXP 44
54612: IN
54613: NOT
54614: PUSH
54615: LD_VAR 0 2
54619: NOT
54620: OR
54621: IFFALSE 54625
// exit ;
54623: GO 54900
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54625: LD_ADDR_VAR 0 2
54629: PUSH
54630: LD_VAR 0 1
54634: PPUSH
54635: LD_VAR 0 2
54639: PPUSH
54640: LD_INT 1
54642: PPUSH
54643: LD_INT 1
54645: PPUSH
54646: CALL 14522 0 4
54650: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54651: LD_ADDR_VAR 0 5
54655: PUSH
54656: LD_EXP 44
54660: PPUSH
54661: LD_VAR 0 1
54665: PPUSH
54666: CALL 13872 0 2
54670: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54671: LD_EXP 45
54675: PUSH
54676: LD_VAR 0 5
54680: ARRAY
54681: PUSH
54682: LD_EXP 46
54686: LESS
54687: IFFALSE 54876
// begin for i := 1 to vehicles do
54689: LD_ADDR_VAR 0 4
54693: PUSH
54694: DOUBLE
54695: LD_INT 1
54697: DEC
54698: ST_TO_ADDR
54699: LD_VAR 0 2
54703: PUSH
54704: FOR_TO
54705: IFFALSE 54874
// begin if hackTanksCaptured [ index ] = hackLimit then
54707: LD_EXP 45
54711: PUSH
54712: LD_VAR 0 5
54716: ARRAY
54717: PUSH
54718: LD_EXP 46
54722: EQUAL
54723: IFFALSE 54727
// break ;
54725: GO 54874
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54727: LD_ADDR_EXP 48
54731: PUSH
54732: LD_EXP 48
54736: PPUSH
54737: LD_VAR 0 5
54741: PPUSH
54742: LD_EXP 48
54746: PUSH
54747: LD_VAR 0 5
54751: ARRAY
54752: PUSH
54753: LD_INT 1
54755: PLUS
54756: PPUSH
54757: CALL_OW 1
54761: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54762: LD_ADDR_EXP 45
54766: PUSH
54767: LD_EXP 45
54771: PPUSH
54772: LD_VAR 0 5
54776: PUSH
54777: LD_EXP 45
54781: PUSH
54782: LD_VAR 0 5
54786: ARRAY
54787: PUSH
54788: LD_INT 1
54790: PLUS
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PPUSH
54796: LD_VAR 0 2
54800: PUSH
54801: LD_VAR 0 4
54805: ARRAY
54806: PUSH
54807: LD_VAR 0 2
54811: PUSH
54812: LD_VAR 0 4
54816: ARRAY
54817: PPUSH
54818: CALL_OW 255
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PPUSH
54827: CALL 14087 0 3
54831: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54832: LD_VAR 0 2
54836: PUSH
54837: LD_VAR 0 4
54841: ARRAY
54842: PPUSH
54843: LD_VAR 0 1
54847: PPUSH
54848: CALL_OW 255
54852: PPUSH
54853: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54857: LD_VAR 0 2
54861: PUSH
54862: LD_VAR 0 4
54866: ARRAY
54867: PPUSH
54868: CALL_OW 141
// end ;
54872: GO 54704
54874: POP
54875: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54876: LD_VAR 0 1
54880: PPUSH
54881: LD_EXP 45
54885: PUSH
54886: LD_VAR 0 5
54890: ARRAY
54891: PUSH
54892: LD_INT 0
54894: PLUS
54895: PPUSH
54896: CALL_OW 505
// end ;
54900: LD_VAR 0 3
54904: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54905: LD_INT 0
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
// if not hack in hackTanks then
54911: LD_VAR 0 1
54915: PUSH
54916: LD_EXP 44
54920: IN
54921: NOT
54922: IFFALSE 54926
// exit ;
54924: GO 55166
// index := GetElementIndex ( hackTanks , hack ) ;
54926: LD_ADDR_VAR 0 4
54930: PUSH
54931: LD_EXP 44
54935: PPUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: CALL 13872 0 2
54945: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54946: LD_ADDR_VAR 0 3
54950: PUSH
54951: DOUBLE
54952: LD_EXP 45
54956: PUSH
54957: LD_VAR 0 4
54961: ARRAY
54962: INC
54963: ST_TO_ADDR
54964: LD_INT 1
54966: PUSH
54967: FOR_DOWNTO
54968: IFFALSE 55140
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54970: LD_ADDR_VAR 0 5
54974: PUSH
54975: LD_EXP 45
54979: PUSH
54980: LD_VAR 0 4
54984: ARRAY
54985: PUSH
54986: LD_VAR 0 3
54990: ARRAY
54991: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
54992: LD_VAR 0 5
54996: PUSH
54997: LD_INT 1
54999: ARRAY
55000: PPUSH
55001: CALL_OW 302
55005: NOT
55006: PUSH
55007: LD_VAR 0 5
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PPUSH
55016: CALL_OW 255
55020: PUSH
55021: LD_VAR 0 1
55025: PPUSH
55026: CALL_OW 255
55030: NONEQUAL
55031: OR
55032: IFFALSE 55138
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55034: LD_VAR 0 5
55038: PUSH
55039: LD_INT 1
55041: ARRAY
55042: PPUSH
55043: CALL_OW 305
55047: PUSH
55048: LD_VAR 0 5
55052: PUSH
55053: LD_INT 1
55055: ARRAY
55056: PPUSH
55057: CALL_OW 255
55061: PUSH
55062: LD_VAR 0 1
55066: PPUSH
55067: CALL_OW 255
55071: EQUAL
55072: AND
55073: IFFALSE 55097
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55075: LD_VAR 0 5
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PPUSH
55084: LD_VAR 0 5
55088: PUSH
55089: LD_INT 2
55091: ARRAY
55092: PPUSH
55093: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55097: LD_ADDR_EXP 45
55101: PUSH
55102: LD_EXP 45
55106: PPUSH
55107: LD_VAR 0 4
55111: PPUSH
55112: LD_EXP 45
55116: PUSH
55117: LD_VAR 0 4
55121: ARRAY
55122: PPUSH
55123: LD_VAR 0 3
55127: PPUSH
55128: CALL_OW 3
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
// end ; end ;
55138: GO 54967
55140: POP
55141: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_EXP 45
55151: PUSH
55152: LD_VAR 0 4
55156: ARRAY
55157: PUSH
55158: LD_INT 0
55160: PLUS
55161: PPUSH
55162: CALL_OW 505
// end ;
55166: LD_VAR 0 2
55170: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
// if not hack in hackTanks then
55177: LD_VAR 0 1
55181: PUSH
55182: LD_EXP 44
55186: IN
55187: NOT
55188: IFFALSE 55192
// exit ;
55190: GO 55277
// index := GetElementIndex ( hackTanks , hack ) ;
55192: LD_ADDR_VAR 0 5
55196: PUSH
55197: LD_EXP 44
55201: PPUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL 13872 0 2
55211: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55212: LD_ADDR_VAR 0 4
55216: PUSH
55217: DOUBLE
55218: LD_INT 1
55220: DEC
55221: ST_TO_ADDR
55222: LD_EXP 45
55226: PUSH
55227: LD_VAR 0 5
55231: ARRAY
55232: PUSH
55233: FOR_TO
55234: IFFALSE 55275
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55236: LD_EXP 45
55240: PUSH
55241: LD_VAR 0 5
55245: ARRAY
55246: PUSH
55247: LD_VAR 0 4
55251: ARRAY
55252: PUSH
55253: LD_INT 1
55255: ARRAY
55256: PUSH
55257: LD_VAR 0 2
55261: EQUAL
55262: IFFALSE 55273
// KillUnit ( vehicle ) ;
55264: LD_VAR 0 2
55268: PPUSH
55269: CALL_OW 66
55273: GO 55233
55275: POP
55276: POP
// end ;
55277: LD_VAR 0 3
55281: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55282: LD_EXP 49
55286: NOT
55287: IFFALSE 55322
55289: GO 55291
55291: DISABLE
// begin initMiner := true ;
55292: LD_ADDR_EXP 49
55296: PUSH
55297: LD_INT 1
55299: ST_TO_ADDR
// minersList := [ ] ;
55300: LD_ADDR_EXP 50
55304: PUSH
55305: EMPTY
55306: ST_TO_ADDR
// minerMinesList := [ ] ;
55307: LD_ADDR_EXP 51
55311: PUSH
55312: EMPTY
55313: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55314: LD_ADDR_EXP 52
55318: PUSH
55319: LD_INT 5
55321: ST_TO_ADDR
// end ;
55322: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55323: LD_EXP 49
55327: PUSH
55328: LD_INT 34
55330: PUSH
55331: LD_INT 81
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PPUSH
55338: CALL_OW 69
55342: AND
55343: IFFALSE 55804
55345: GO 55347
55347: DISABLE
55348: LD_INT 0
55350: PPUSH
55351: PPUSH
55352: PPUSH
55353: PPUSH
// begin enable ;
55354: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55355: LD_ADDR_VAR 0 1
55359: PUSH
55360: LD_INT 34
55362: PUSH
55363: LD_INT 81
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PPUSH
55370: CALL_OW 69
55374: PUSH
55375: FOR_IN
55376: IFFALSE 55448
// begin if not i in minersList then
55378: LD_VAR 0 1
55382: PUSH
55383: LD_EXP 50
55387: IN
55388: NOT
55389: IFFALSE 55446
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55391: LD_ADDR_EXP 50
55395: PUSH
55396: LD_EXP 50
55400: PPUSH
55401: LD_EXP 50
55405: PUSH
55406: LD_INT 1
55408: PLUS
55409: PPUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: CALL_OW 1
55419: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55420: LD_ADDR_EXP 51
55424: PUSH
55425: LD_EXP 51
55429: PPUSH
55430: LD_EXP 51
55434: PUSH
55435: LD_INT 1
55437: PLUS
55438: PPUSH
55439: EMPTY
55440: PPUSH
55441: CALL_OW 1
55445: ST_TO_ADDR
// end end ;
55446: GO 55375
55448: POP
55449: POP
// for i := minerMinesList downto 1 do
55450: LD_ADDR_VAR 0 1
55454: PUSH
55455: DOUBLE
55456: LD_EXP 51
55460: INC
55461: ST_TO_ADDR
55462: LD_INT 1
55464: PUSH
55465: FOR_DOWNTO
55466: IFFALSE 55802
// begin if IsLive ( minersList [ i ] ) then
55468: LD_EXP 50
55472: PUSH
55473: LD_VAR 0 1
55477: ARRAY
55478: PPUSH
55479: CALL_OW 300
55483: IFFALSE 55511
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55485: LD_EXP 50
55489: PUSH
55490: LD_VAR 0 1
55494: ARRAY
55495: PPUSH
55496: LD_EXP 51
55500: PUSH
55501: LD_VAR 0 1
55505: ARRAY
55506: PPUSH
55507: CALL_OW 505
// if not minerMinesList [ i ] then
55511: LD_EXP 51
55515: PUSH
55516: LD_VAR 0 1
55520: ARRAY
55521: NOT
55522: IFFALSE 55526
// continue ;
55524: GO 55465
// for j := minerMinesList [ i ] downto 1 do
55526: LD_ADDR_VAR 0 2
55530: PUSH
55531: DOUBLE
55532: LD_EXP 51
55536: PUSH
55537: LD_VAR 0 1
55541: ARRAY
55542: INC
55543: ST_TO_ADDR
55544: LD_INT 1
55546: PUSH
55547: FOR_DOWNTO
55548: IFFALSE 55798
// begin side := GetSide ( minersList [ i ] ) ;
55550: LD_ADDR_VAR 0 3
55554: PUSH
55555: LD_EXP 50
55559: PUSH
55560: LD_VAR 0 1
55564: ARRAY
55565: PPUSH
55566: CALL_OW 255
55570: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55571: LD_ADDR_VAR 0 4
55575: PUSH
55576: LD_EXP 51
55580: PUSH
55581: LD_VAR 0 1
55585: ARRAY
55586: PUSH
55587: LD_VAR 0 2
55591: ARRAY
55592: PUSH
55593: LD_INT 1
55595: ARRAY
55596: PPUSH
55597: LD_EXP 51
55601: PUSH
55602: LD_VAR 0 1
55606: ARRAY
55607: PUSH
55608: LD_VAR 0 2
55612: ARRAY
55613: PUSH
55614: LD_INT 2
55616: ARRAY
55617: PPUSH
55618: CALL_OW 428
55622: ST_TO_ADDR
// if not tmp then
55623: LD_VAR 0 4
55627: NOT
55628: IFFALSE 55632
// continue ;
55630: GO 55547
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55632: LD_VAR 0 4
55636: PUSH
55637: LD_INT 81
55639: PUSH
55640: LD_VAR 0 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PPUSH
55649: CALL_OW 69
55653: IN
55654: PUSH
55655: LD_EXP 51
55659: PUSH
55660: LD_VAR 0 1
55664: ARRAY
55665: PUSH
55666: LD_VAR 0 2
55670: ARRAY
55671: PUSH
55672: LD_INT 1
55674: ARRAY
55675: PPUSH
55676: LD_EXP 51
55680: PUSH
55681: LD_VAR 0 1
55685: ARRAY
55686: PUSH
55687: LD_VAR 0 2
55691: ARRAY
55692: PUSH
55693: LD_INT 2
55695: ARRAY
55696: PPUSH
55697: CALL_OW 458
55701: AND
55702: IFFALSE 55796
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55704: LD_EXP 51
55708: PUSH
55709: LD_VAR 0 1
55713: ARRAY
55714: PUSH
55715: LD_VAR 0 2
55719: ARRAY
55720: PUSH
55721: LD_INT 1
55723: ARRAY
55724: PPUSH
55725: LD_EXP 51
55729: PUSH
55730: LD_VAR 0 1
55734: ARRAY
55735: PUSH
55736: LD_VAR 0 2
55740: ARRAY
55741: PUSH
55742: LD_INT 2
55744: ARRAY
55745: PPUSH
55746: LD_VAR 0 3
55750: PPUSH
55751: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55755: LD_ADDR_EXP 51
55759: PUSH
55760: LD_EXP 51
55764: PPUSH
55765: LD_VAR 0 1
55769: PPUSH
55770: LD_EXP 51
55774: PUSH
55775: LD_VAR 0 1
55779: ARRAY
55780: PPUSH
55781: LD_VAR 0 2
55785: PPUSH
55786: CALL_OW 3
55790: PPUSH
55791: CALL_OW 1
55795: ST_TO_ADDR
// end ; end ;
55796: GO 55547
55798: POP
55799: POP
// end ;
55800: GO 55465
55802: POP
55803: POP
// end ;
55804: PPOPN 4
55806: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55807: LD_INT 0
55809: PPUSH
55810: PPUSH
// result := false ;
55811: LD_ADDR_VAR 0 4
55815: PUSH
55816: LD_INT 0
55818: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55819: LD_VAR 0 1
55823: PPUSH
55824: CALL_OW 264
55828: PUSH
55829: LD_INT 81
55831: EQUAL
55832: NOT
55833: IFFALSE 55837
// exit ;
55835: GO 56077
// index := GetElementIndex ( minersList , unit ) ;
55837: LD_ADDR_VAR 0 5
55841: PUSH
55842: LD_EXP 50
55846: PPUSH
55847: LD_VAR 0 1
55851: PPUSH
55852: CALL 13872 0 2
55856: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55857: LD_EXP 51
55861: PUSH
55862: LD_VAR 0 5
55866: ARRAY
55867: PUSH
55868: LD_EXP 52
55872: GREATEREQUAL
55873: IFFALSE 55877
// exit ;
55875: GO 56077
// ComMoveXY ( unit , x , y ) ;
55877: LD_VAR 0 1
55881: PPUSH
55882: LD_VAR 0 2
55886: PPUSH
55887: LD_VAR 0 3
55891: PPUSH
55892: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55896: LD_INT 35
55898: PPUSH
55899: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55903: LD_VAR 0 1
55907: PPUSH
55908: LD_VAR 0 2
55912: PPUSH
55913: LD_VAR 0 3
55917: PPUSH
55918: CALL 45633 0 3
55922: NOT
55923: PUSH
55924: LD_VAR 0 1
55928: PPUSH
55929: CALL_OW 314
55933: AND
55934: IFFALSE 55938
// exit ;
55936: GO 56077
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55938: LD_VAR 0 2
55942: PPUSH
55943: LD_VAR 0 3
55947: PPUSH
55948: CALL_OW 428
55952: PUSH
55953: LD_VAR 0 1
55957: EQUAL
55958: PUSH
55959: LD_VAR 0 1
55963: PPUSH
55964: CALL_OW 314
55968: NOT
55969: AND
55970: IFFALSE 55896
// PlaySoundXY ( x , y , PlantMine ) ;
55972: LD_VAR 0 2
55976: PPUSH
55977: LD_VAR 0 3
55981: PPUSH
55982: LD_STRING PlantMine
55984: PPUSH
55985: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
55989: LD_VAR 0 2
55993: PPUSH
55994: LD_VAR 0 3
55998: PPUSH
55999: LD_VAR 0 1
56003: PPUSH
56004: CALL_OW 255
56008: PPUSH
56009: LD_INT 0
56011: PPUSH
56012: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56016: LD_ADDR_EXP 51
56020: PUSH
56021: LD_EXP 51
56025: PPUSH
56026: LD_VAR 0 5
56030: PUSH
56031: LD_EXP 51
56035: PUSH
56036: LD_VAR 0 5
56040: ARRAY
56041: PUSH
56042: LD_INT 1
56044: PLUS
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PPUSH
56050: LD_VAR 0 2
56054: PUSH
56055: LD_VAR 0 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PPUSH
56064: CALL 14087 0 3
56068: ST_TO_ADDR
// result := true ;
56069: LD_ADDR_VAR 0 4
56073: PUSH
56074: LD_INT 1
56076: ST_TO_ADDR
// end ;
56077: LD_VAR 0 4
56081: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56082: LD_INT 0
56084: PPUSH
56085: PPUSH
56086: PPUSH
// if not unit in minersList then
56087: LD_VAR 0 1
56091: PUSH
56092: LD_EXP 50
56096: IN
56097: NOT
56098: IFFALSE 56102
// exit ;
56100: GO 56494
// index := GetElementIndex ( minersList , unit ) ;
56102: LD_ADDR_VAR 0 6
56106: PUSH
56107: LD_EXP 50
56111: PPUSH
56112: LD_VAR 0 1
56116: PPUSH
56117: CALL 13872 0 2
56121: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56122: LD_ADDR_VAR 0 5
56126: PUSH
56127: DOUBLE
56128: LD_EXP 51
56132: PUSH
56133: LD_VAR 0 6
56137: ARRAY
56138: INC
56139: ST_TO_ADDR
56140: LD_INT 1
56142: PUSH
56143: FOR_DOWNTO
56144: IFFALSE 56305
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56146: LD_EXP 51
56150: PUSH
56151: LD_VAR 0 6
56155: ARRAY
56156: PUSH
56157: LD_VAR 0 5
56161: ARRAY
56162: PUSH
56163: LD_INT 1
56165: ARRAY
56166: PUSH
56167: LD_VAR 0 2
56171: EQUAL
56172: PUSH
56173: LD_EXP 51
56177: PUSH
56178: LD_VAR 0 6
56182: ARRAY
56183: PUSH
56184: LD_VAR 0 5
56188: ARRAY
56189: PUSH
56190: LD_INT 2
56192: ARRAY
56193: PUSH
56194: LD_VAR 0 3
56198: EQUAL
56199: AND
56200: IFFALSE 56303
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56202: LD_EXP 51
56206: PUSH
56207: LD_VAR 0 6
56211: ARRAY
56212: PUSH
56213: LD_VAR 0 5
56217: ARRAY
56218: PUSH
56219: LD_INT 1
56221: ARRAY
56222: PPUSH
56223: LD_EXP 51
56227: PUSH
56228: LD_VAR 0 6
56232: ARRAY
56233: PUSH
56234: LD_VAR 0 5
56238: ARRAY
56239: PUSH
56240: LD_INT 2
56242: ARRAY
56243: PPUSH
56244: LD_VAR 0 1
56248: PPUSH
56249: CALL_OW 255
56253: PPUSH
56254: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56258: LD_ADDR_EXP 51
56262: PUSH
56263: LD_EXP 51
56267: PPUSH
56268: LD_VAR 0 6
56272: PPUSH
56273: LD_EXP 51
56277: PUSH
56278: LD_VAR 0 6
56282: ARRAY
56283: PPUSH
56284: LD_VAR 0 5
56288: PPUSH
56289: CALL_OW 3
56293: PPUSH
56294: CALL_OW 1
56298: ST_TO_ADDR
// exit ;
56299: POP
56300: POP
56301: GO 56494
// end ; end ;
56303: GO 56143
56305: POP
56306: POP
// for i := minerMinesList [ index ] downto 1 do
56307: LD_ADDR_VAR 0 5
56311: PUSH
56312: DOUBLE
56313: LD_EXP 51
56317: PUSH
56318: LD_VAR 0 6
56322: ARRAY
56323: INC
56324: ST_TO_ADDR
56325: LD_INT 1
56327: PUSH
56328: FOR_DOWNTO
56329: IFFALSE 56492
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56331: LD_EXP 51
56335: PUSH
56336: LD_VAR 0 6
56340: ARRAY
56341: PUSH
56342: LD_VAR 0 5
56346: ARRAY
56347: PUSH
56348: LD_INT 1
56350: ARRAY
56351: PPUSH
56352: LD_EXP 51
56356: PUSH
56357: LD_VAR 0 6
56361: ARRAY
56362: PUSH
56363: LD_VAR 0 5
56367: ARRAY
56368: PUSH
56369: LD_INT 2
56371: ARRAY
56372: PPUSH
56373: LD_VAR 0 2
56377: PPUSH
56378: LD_VAR 0 3
56382: PPUSH
56383: CALL_OW 298
56387: PUSH
56388: LD_INT 6
56390: LESS
56391: IFFALSE 56490
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56393: LD_EXP 51
56397: PUSH
56398: LD_VAR 0 6
56402: ARRAY
56403: PUSH
56404: LD_VAR 0 5
56408: ARRAY
56409: PUSH
56410: LD_INT 1
56412: ARRAY
56413: PPUSH
56414: LD_EXP 51
56418: PUSH
56419: LD_VAR 0 6
56423: ARRAY
56424: PUSH
56425: LD_VAR 0 5
56429: ARRAY
56430: PUSH
56431: LD_INT 2
56433: ARRAY
56434: PPUSH
56435: LD_VAR 0 1
56439: PPUSH
56440: CALL_OW 255
56444: PPUSH
56445: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56449: LD_ADDR_EXP 51
56453: PUSH
56454: LD_EXP 51
56458: PPUSH
56459: LD_VAR 0 6
56463: PPUSH
56464: LD_EXP 51
56468: PUSH
56469: LD_VAR 0 6
56473: ARRAY
56474: PPUSH
56475: LD_VAR 0 5
56479: PPUSH
56480: CALL_OW 3
56484: PPUSH
56485: CALL_OW 1
56489: ST_TO_ADDR
// end ; end ;
56490: GO 56328
56492: POP
56493: POP
// end ;
56494: LD_VAR 0 4
56498: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56499: LD_INT 0
56501: PPUSH
56502: PPUSH
56503: PPUSH
56504: PPUSH
56505: PPUSH
56506: PPUSH
56507: PPUSH
56508: PPUSH
56509: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56510: LD_VAR 0 1
56514: PPUSH
56515: CALL_OW 264
56519: PUSH
56520: LD_INT 81
56522: EQUAL
56523: NOT
56524: PUSH
56525: LD_VAR 0 1
56529: PUSH
56530: LD_EXP 50
56534: IN
56535: NOT
56536: OR
56537: IFFALSE 56541
// exit ;
56539: GO 56863
// index := GetElementIndex ( minersList , unit ) ;
56541: LD_ADDR_VAR 0 6
56545: PUSH
56546: LD_EXP 50
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: CALL 13872 0 2
56560: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56561: LD_ADDR_VAR 0 8
56565: PUSH
56566: LD_EXP 52
56570: PUSH
56571: LD_EXP 51
56575: PUSH
56576: LD_VAR 0 6
56580: ARRAY
56581: MINUS
56582: ST_TO_ADDR
// if not minesFreeAmount then
56583: LD_VAR 0 8
56587: NOT
56588: IFFALSE 56592
// exit ;
56590: GO 56863
// tmp := [ ] ;
56592: LD_ADDR_VAR 0 7
56596: PUSH
56597: EMPTY
56598: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56599: LD_ADDR_VAR 0 5
56603: PUSH
56604: DOUBLE
56605: LD_INT 1
56607: DEC
56608: ST_TO_ADDR
56609: LD_VAR 0 8
56613: PUSH
56614: FOR_TO
56615: IFFALSE 56810
// begin _d := rand ( 0 , 5 ) ;
56617: LD_ADDR_VAR 0 11
56621: PUSH
56622: LD_INT 0
56624: PPUSH
56625: LD_INT 5
56627: PPUSH
56628: CALL_OW 12
56632: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56633: LD_ADDR_VAR 0 12
56637: PUSH
56638: LD_INT 2
56640: PPUSH
56641: LD_INT 6
56643: PPUSH
56644: CALL_OW 12
56648: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56649: LD_ADDR_VAR 0 9
56653: PUSH
56654: LD_VAR 0 2
56658: PPUSH
56659: LD_VAR 0 11
56663: PPUSH
56664: LD_VAR 0 12
56668: PPUSH
56669: CALL_OW 272
56673: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56674: LD_ADDR_VAR 0 10
56678: PUSH
56679: LD_VAR 0 3
56683: PPUSH
56684: LD_VAR 0 11
56688: PPUSH
56689: LD_VAR 0 12
56693: PPUSH
56694: CALL_OW 273
56698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56699: LD_VAR 0 9
56703: PPUSH
56704: LD_VAR 0 10
56708: PPUSH
56709: CALL_OW 488
56713: PUSH
56714: LD_VAR 0 9
56718: PUSH
56719: LD_VAR 0 10
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_VAR 0 7
56732: IN
56733: NOT
56734: AND
56735: PUSH
56736: LD_VAR 0 9
56740: PPUSH
56741: LD_VAR 0 10
56745: PPUSH
56746: CALL_OW 458
56750: NOT
56751: AND
56752: IFFALSE 56794
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56754: LD_ADDR_VAR 0 7
56758: PUSH
56759: LD_VAR 0 7
56763: PPUSH
56764: LD_VAR 0 7
56768: PUSH
56769: LD_INT 1
56771: PLUS
56772: PPUSH
56773: LD_VAR 0 9
56777: PUSH
56778: LD_VAR 0 10
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PPUSH
56787: CALL_OW 1
56791: ST_TO_ADDR
56792: GO 56808
// i := i - 1 ;
56794: LD_ADDR_VAR 0 5
56798: PUSH
56799: LD_VAR 0 5
56803: PUSH
56804: LD_INT 1
56806: MINUS
56807: ST_TO_ADDR
// end ;
56808: GO 56614
56810: POP
56811: POP
// for i in tmp do
56812: LD_ADDR_VAR 0 5
56816: PUSH
56817: LD_VAR 0 7
56821: PUSH
56822: FOR_IN
56823: IFFALSE 56861
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56825: LD_VAR 0 1
56829: PPUSH
56830: LD_VAR 0 5
56834: PUSH
56835: LD_INT 1
56837: ARRAY
56838: PPUSH
56839: LD_VAR 0 5
56843: PUSH
56844: LD_INT 2
56846: ARRAY
56847: PPUSH
56848: CALL 55807 0 3
56852: NOT
56853: IFFALSE 56859
// exit ;
56855: POP
56856: POP
56857: GO 56863
56859: GO 56822
56861: POP
56862: POP
// end ;
56863: LD_VAR 0 4
56867: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56868: LD_INT 0
56870: PPUSH
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
// if GetClass ( unit ) <> class_sniper then
56879: LD_VAR 0 1
56883: PPUSH
56884: CALL_OW 257
56888: PUSH
56889: LD_INT 5
56891: NONEQUAL
56892: IFFALSE 56896
// exit ;
56894: GO 57362
// dist := 8 ;
56896: LD_ADDR_VAR 0 5
56900: PUSH
56901: LD_INT 8
56903: ST_TO_ADDR
// viewRange := 12 ;
56904: LD_ADDR_VAR 0 8
56908: PUSH
56909: LD_INT 12
56911: ST_TO_ADDR
// side := GetSide ( unit ) ;
56912: LD_ADDR_VAR 0 6
56916: PUSH
56917: LD_VAR 0 1
56921: PPUSH
56922: CALL_OW 255
56926: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56927: LD_INT 61
56929: PPUSH
56930: LD_VAR 0 6
56934: PPUSH
56935: CALL_OW 321
56939: PUSH
56940: LD_INT 2
56942: EQUAL
56943: IFFALSE 56953
// viewRange := 16 ;
56945: LD_ADDR_VAR 0 8
56949: PUSH
56950: LD_INT 16
56952: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56953: LD_VAR 0 1
56957: PPUSH
56958: LD_VAR 0 2
56962: PPUSH
56963: LD_VAR 0 3
56967: PPUSH
56968: CALL_OW 297
56972: PUSH
56973: LD_VAR 0 5
56977: GREATER
56978: IFFALSE 57057
// begin ComMoveXY ( unit , x , y ) ;
56980: LD_VAR 0 1
56984: PPUSH
56985: LD_VAR 0 2
56989: PPUSH
56990: LD_VAR 0 3
56994: PPUSH
56995: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56999: LD_INT 35
57001: PPUSH
57002: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57006: LD_VAR 0 1
57010: PPUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: LD_VAR 0 3
57020: PPUSH
57021: CALL 45633 0 3
57025: NOT
57026: IFFALSE 57030
// exit ;
57028: GO 57362
// until GetDistUnitXY ( unit , x , y ) < dist ;
57030: LD_VAR 0 1
57034: PPUSH
57035: LD_VAR 0 2
57039: PPUSH
57040: LD_VAR 0 3
57044: PPUSH
57045: CALL_OW 297
57049: PUSH
57050: LD_VAR 0 5
57054: LESS
57055: IFFALSE 56999
// end ; ComTurnXY ( unit , x , y ) ;
57057: LD_VAR 0 1
57061: PPUSH
57062: LD_VAR 0 2
57066: PPUSH
57067: LD_VAR 0 3
57071: PPUSH
57072: CALL_OW 118
// repeat if Multiplayer then
57076: LD_OWVAR 4
57080: IFFALSE 57091
// wait ( 35 ) else
57082: LD_INT 35
57084: PPUSH
57085: CALL_OW 67
57089: GO 57098
// wait ( 5 ) ;
57091: LD_INT 5
57093: PPUSH
57094: CALL_OW 67
// _d := GetDir ( unit ) ;
57098: LD_ADDR_VAR 0 11
57102: PUSH
57103: LD_VAR 0 1
57107: PPUSH
57108: CALL_OW 254
57112: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57113: LD_ADDR_VAR 0 7
57117: PUSH
57118: LD_VAR 0 1
57122: PPUSH
57123: CALL_OW 250
57127: PPUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 251
57137: PPUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: LD_VAR 0 3
57147: PPUSH
57148: CALL 48241 0 4
57152: ST_TO_ADDR
// until dir = _d ;
57153: LD_VAR 0 7
57157: PUSH
57158: LD_VAR 0 11
57162: EQUAL
57163: IFFALSE 57076
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57165: LD_ADDR_VAR 0 9
57169: PUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 250
57179: PPUSH
57180: LD_VAR 0 7
57184: PPUSH
57185: LD_VAR 0 5
57189: PPUSH
57190: CALL_OW 272
57194: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57195: LD_ADDR_VAR 0 10
57199: PUSH
57200: LD_VAR 0 1
57204: PPUSH
57205: CALL_OW 251
57209: PPUSH
57210: LD_VAR 0 7
57214: PPUSH
57215: LD_VAR 0 5
57219: PPUSH
57220: CALL_OW 273
57224: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57225: LD_VAR 0 9
57229: PPUSH
57230: LD_VAR 0 10
57234: PPUSH
57235: CALL_OW 488
57239: NOT
57240: IFFALSE 57244
// exit ;
57242: GO 57362
// ComAnimCustom ( unit , 1 ) ;
57244: LD_VAR 0 1
57248: PPUSH
57249: LD_INT 1
57251: PPUSH
57252: CALL_OW 592
// p := 0 ;
57256: LD_ADDR_VAR 0 12
57260: PUSH
57261: LD_INT 0
57263: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57264: LD_VAR 0 9
57268: PPUSH
57269: LD_VAR 0 10
57273: PPUSH
57274: LD_VAR 0 6
57278: PPUSH
57279: LD_VAR 0 8
57283: PPUSH
57284: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57288: LD_INT 35
57290: PPUSH
57291: CALL_OW 67
// p := Inc ( p ) ;
57295: LD_ADDR_VAR 0 12
57299: PUSH
57300: LD_VAR 0 12
57304: PPUSH
57305: CALL 48197 0 1
57309: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57310: LD_VAR 0 12
57314: PUSH
57315: LD_INT 3
57317: EQUAL
57318: PUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 302
57328: NOT
57329: OR
57330: PUSH
57331: LD_VAR 0 1
57335: PPUSH
57336: CALL_OW 301
57340: OR
57341: IFFALSE 57288
// RemoveSeeing ( _x , _y , side ) ;
57343: LD_VAR 0 9
57347: PPUSH
57348: LD_VAR 0 10
57352: PPUSH
57353: LD_VAR 0 6
57357: PPUSH
57358: CALL_OW 331
// end ; end_of_file
57362: LD_VAR 0 4
57366: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57367: LD_EXP 38
57371: IFFALSE 57712
57373: GO 57375
57375: DISABLE
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
57380: PPUSH
// begin mpKingPoints := [ ] ;
57381: LD_ADDR_EXP 53
57385: PUSH
57386: EMPTY
57387: ST_TO_ADDR
// if mpTeamGame then
57388: LD_EXP 11
57392: IFFALSE 57446
// begin for i := 1 to Count ( mpTeams ) do
57394: LD_ADDR_VAR 0 1
57398: PUSH
57399: DOUBLE
57400: LD_INT 1
57402: DEC
57403: ST_TO_ADDR
57404: LD_EXP 10
57408: PPUSH
57409: CALL 11227 0 1
57413: PUSH
57414: FOR_TO
57415: IFFALSE 57442
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57417: LD_ADDR_EXP 53
57421: PUSH
57422: LD_EXP 53
57426: PPUSH
57427: LD_VAR 0 1
57431: PPUSH
57432: LD_INT 0
57434: PPUSH
57435: CALL_OW 1
57439: ST_TO_ADDR
57440: GO 57414
57442: POP
57443: POP
// end else
57444: GO 57489
// begin for i := 1 to 8 do
57446: LD_ADDR_VAR 0 1
57450: PUSH
57451: DOUBLE
57452: LD_INT 1
57454: DEC
57455: ST_TO_ADDR
57456: LD_INT 8
57458: PUSH
57459: FOR_TO
57460: IFFALSE 57487
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57462: LD_ADDR_EXP 53
57466: PUSH
57467: LD_EXP 53
57471: PPUSH
57472: LD_VAR 0 1
57476: PPUSH
57477: LD_INT 0
57479: PPUSH
57480: CALL_OW 1
57484: ST_TO_ADDR
57485: GO 57459
57487: POP
57488: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57489: LD_ADDR_VAR 0 3
57493: PUSH
57494: LD_EXP 2
57498: PPUSH
57499: LD_INT 0
57501: PPUSH
57502: CALL_OW 517
57506: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57507: LD_ADDR_VAR 0 1
57511: PUSH
57512: DOUBLE
57513: LD_INT 1
57515: DEC
57516: ST_TO_ADDR
57517: LD_VAR 0 3
57521: PUSH
57522: LD_INT 1
57524: ARRAY
57525: PUSH
57526: FOR_TO
57527: IFFALSE 57594
// for j := 1 to 8 do
57529: LD_ADDR_VAR 0 2
57533: PUSH
57534: DOUBLE
57535: LD_INT 1
57537: DEC
57538: ST_TO_ADDR
57539: LD_INT 8
57541: PUSH
57542: FOR_TO
57543: IFFALSE 57590
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57545: LD_VAR 0 3
57549: PUSH
57550: LD_INT 1
57552: ARRAY
57553: PUSH
57554: LD_VAR 0 1
57558: ARRAY
57559: PPUSH
57560: LD_VAR 0 3
57564: PUSH
57565: LD_INT 2
57567: ARRAY
57568: PUSH
57569: LD_VAR 0 1
57573: ARRAY
57574: PPUSH
57575: LD_VAR 0 2
57579: PPUSH
57580: LD_INT 12
57582: NEG
57583: PPUSH
57584: CALL_OW 330
57588: GO 57542
57590: POP
57591: POP
57592: GO 57526
57594: POP
57595: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57596: LD_EXP 33
57600: PPUSH
57601: LD_INT 1
57603: PPUSH
57604: CALL_OW 424
// UpdateCounter ;
57608: CALL 58216 0 0
// repeat wait ( 0 0$1 ) ;
57612: LD_INT 35
57614: PPUSH
57615: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57619: LD_ADDR_VAR 0 3
57623: PUSH
57624: LD_EXP 33
57628: PPUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 57
57634: PUSH
57635: EMPTY
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 50
57644: PUSH
57645: EMPTY
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 30
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 30
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: PPUSH
57681: CALL_OW 70
57685: ST_TO_ADDR
// if not tmp then
57686: LD_VAR 0 3
57690: NOT
57691: IFFALSE 57695
// continue ;
57693: GO 57612
// AddPoints ( tmp ) ;
57695: LD_VAR 0 3
57699: PPUSH
57700: CALL 57894 0 1
// UpdateCounter ;
57704: CALL 58216 0 0
// until false ;
57708: LD_INT 0
57710: IFFALSE 57612
// end ;
57712: PPOPN 3
57714: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57715: LD_EXP 38
57719: PUSH
57720: LD_EXP 36
57724: AND
57725: IFFALSE 57891
57727: GO 57729
57729: DISABLE
57730: LD_INT 0
57732: PPUSH
57733: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57734: LD_ADDR_VAR 0 2
57738: PUSH
57739: LD_EXP 2
57743: PPUSH
57744: LD_INT 0
57746: PPUSH
57747: CALL_OW 517
57751: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57752: LD_ADDR_VAR 0 1
57756: PUSH
57757: DOUBLE
57758: LD_INT 1
57760: DEC
57761: ST_TO_ADDR
57762: LD_VAR 0 2
57766: PUSH
57767: LD_INT 1
57769: ARRAY
57770: PUSH
57771: FOR_TO
57772: IFFALSE 57813
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57774: LD_VAR 0 2
57778: PUSH
57779: LD_INT 1
57781: ARRAY
57782: PUSH
57783: LD_VAR 0 1
57787: ARRAY
57788: PPUSH
57789: LD_VAR 0 2
57793: PUSH
57794: LD_INT 2
57796: ARRAY
57797: PUSH
57798: LD_VAR 0 1
57802: ARRAY
57803: PPUSH
57804: LD_INT 125
57806: PPUSH
57807: CALL_OW 495
57811: GO 57771
57813: POP
57814: POP
// repeat wait ( mpEmissions ) ;
57815: LD_EXP 36
57819: PPUSH
57820: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57824: LD_ADDR_VAR 0 1
57828: PUSH
57829: DOUBLE
57830: LD_INT 1
57832: DEC
57833: ST_TO_ADDR
57834: LD_VAR 0 2
57838: PUSH
57839: LD_INT 1
57841: ARRAY
57842: PUSH
57843: FOR_TO
57844: IFFALSE 57885
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57846: LD_VAR 0 2
57850: PUSH
57851: LD_INT 1
57853: ARRAY
57854: PUSH
57855: LD_VAR 0 1
57859: ARRAY
57860: PPUSH
57861: LD_VAR 0 2
57865: PUSH
57866: LD_INT 2
57868: ARRAY
57869: PUSH
57870: LD_VAR 0 1
57874: ARRAY
57875: PPUSH
57876: LD_INT 15
57878: PPUSH
57879: CALL_OW 495
57883: GO 57843
57885: POP
57886: POP
// until false ;
57887: LD_INT 0
57889: IFFALSE 57815
// end ;
57891: PPOPN 2
57893: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57894: LD_INT 0
57896: PPUSH
57897: PPUSH
57898: PPUSH
57899: PPUSH
57900: PPUSH
// if mpTeamGame then
57901: LD_EXP 11
57905: IFFALSE 58102
// begin first := depots [ 1 ] ;
57907: LD_ADDR_VAR 0 4
57911: PUSH
57912: LD_VAR 0 1
57916: PUSH
57917: LD_INT 1
57919: ARRAY
57920: ST_TO_ADDR
// side := GetSide ( first ) ;
57921: LD_ADDR_VAR 0 6
57925: PUSH
57926: LD_VAR 0 4
57930: PPUSH
57931: CALL_OW 255
57935: ST_TO_ADDR
// for i := 1 to mpTeams do
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: DOUBLE
57942: LD_INT 1
57944: DEC
57945: ST_TO_ADDR
57946: LD_EXP 10
57950: PUSH
57951: FOR_TO
57952: IFFALSE 57986
// if side in mpTeams [ i ] then
57954: LD_VAR 0 6
57958: PUSH
57959: LD_EXP 10
57963: PUSH
57964: LD_VAR 0 3
57968: ARRAY
57969: IN
57970: IFFALSE 57984
// begin team := i ;
57972: LD_ADDR_VAR 0 5
57976: PUSH
57977: LD_VAR 0 3
57981: ST_TO_ADDR
// break ;
57982: GO 57986
// end ;
57984: GO 57951
57986: POP
57987: POP
// if not team then
57988: LD_VAR 0 5
57992: NOT
57993: IFFALSE 57997
// exit ;
57995: GO 58211
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
57997: LD_EXP 33
58001: PPUSH
58002: LD_INT 81
58004: PUSH
58005: LD_VAR 0 6
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PPUSH
58014: CALL_OW 70
58018: IFFALSE 58022
// exit ;
58020: GO 58211
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58022: LD_ADDR_EXP 53
58026: PUSH
58027: LD_EXP 53
58031: PPUSH
58032: LD_VAR 0 5
58036: PPUSH
58037: LD_EXP 53
58041: PUSH
58042: LD_VAR 0 5
58046: ARRAY
58047: PUSH
58048: LD_INT 1
58050: PLUS
58051: PPUSH
58052: CALL_OW 1
58056: ST_TO_ADDR
// for i in mpTeams [ team ] do
58057: LD_ADDR_VAR 0 3
58061: PUSH
58062: LD_EXP 10
58066: PUSH
58067: LD_VAR 0 5
58071: ARRAY
58072: PUSH
58073: FOR_IN
58074: IFFALSE 58098
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58076: LD_VAR 0 3
58080: PPUSH
58081: LD_EXP 53
58085: PUSH
58086: LD_VAR 0 5
58090: ARRAY
58091: PPUSH
58092: CALL_OW 506
58096: GO 58073
58098: POP
58099: POP
// end else
58100: GO 58211
// begin first := depots [ 1 ] ;
58102: LD_ADDR_VAR 0 4
58106: PUSH
58107: LD_VAR 0 1
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: ST_TO_ADDR
// side := GetSide ( first ) ;
58116: LD_ADDR_VAR 0 6
58120: PUSH
58121: LD_VAR 0 4
58125: PPUSH
58126: CALL_OW 255
58130: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58131: LD_EXP 33
58135: PPUSH
58136: LD_INT 81
58138: PUSH
58139: LD_VAR 0 6
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PPUSH
58148: CALL_OW 70
58152: IFFALSE 58156
// exit ;
58154: GO 58211
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58156: LD_ADDR_EXP 53
58160: PUSH
58161: LD_EXP 53
58165: PPUSH
58166: LD_VAR 0 6
58170: PPUSH
58171: LD_EXP 53
58175: PUSH
58176: LD_VAR 0 6
58180: ARRAY
58181: PUSH
58182: LD_INT 1
58184: PLUS
58185: PPUSH
58186: CALL_OW 1
58190: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58191: LD_VAR 0 6
58195: PPUSH
58196: LD_EXP 53
58200: PUSH
58201: LD_VAR 0 6
58205: ARRAY
58206: PPUSH
58207: CALL_OW 506
// end ; end ;
58211: LD_VAR 0 2
58215: RET
// function UpdateCounter ; var i ; begin
58216: LD_INT 0
58218: PPUSH
58219: PPUSH
// result := [ ] ;
58220: LD_ADDR_VAR 0 1
58224: PUSH
58225: EMPTY
58226: ST_TO_ADDR
// if mpTeamGame then
58227: LD_EXP 11
58231: IFFALSE 58298
// begin for i := 1 to mpTeams do
58233: LD_ADDR_VAR 0 2
58237: PUSH
58238: DOUBLE
58239: LD_INT 1
58241: DEC
58242: ST_TO_ADDR
58243: LD_EXP 10
58247: PUSH
58248: FOR_TO
58249: IFFALSE 58294
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58251: LD_ADDR_VAR 0 1
58255: PUSH
58256: LD_VAR 0 1
58260: PUSH
58261: LD_STRING #KingoftheHill-Team
58263: PUSH
58264: LD_VAR 0 2
58268: PUSH
58269: LD_EXP 53
58273: PUSH
58274: LD_VAR 0 2
58278: ARRAY
58279: PUSH
58280: LD_EXP 34
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ADD
58291: ST_TO_ADDR
58292: GO 58248
58294: POP
58295: POP
// end else
58296: GO 58371
// begin for i := 1 to 8 do
58298: LD_ADDR_VAR 0 2
58302: PUSH
58303: DOUBLE
58304: LD_INT 1
58306: DEC
58307: ST_TO_ADDR
58308: LD_INT 8
58310: PUSH
58311: FOR_TO
58312: IFFALSE 58369
// if mpSidePositions [ i ] then
58314: LD_EXP 7
58318: PUSH
58319: LD_VAR 0 2
58323: ARRAY
58324: IFFALSE 58367
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58326: LD_ADDR_VAR 0 1
58330: PUSH
58331: LD_VAR 0 1
58335: PUSH
58336: LD_STRING #KingoftheHill-Player
58338: PUSH
58339: LD_VAR 0 2
58343: PUSH
58344: LD_EXP 53
58348: PUSH
58349: LD_VAR 0 2
58353: ARRAY
58354: PUSH
58355: LD_EXP 34
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: ADD
58366: ST_TO_ADDR
58367: GO 58311
58369: POP
58370: POP
// end ; mpDisplayStrings := result ;
58371: LD_ADDR_EXP 37
58375: PUSH
58376: LD_VAR 0 1
58380: ST_TO_ADDR
// end ;
58381: LD_VAR 0 1
58385: RET
// export function HowMuchPointsKing ( side ) ; begin
58386: LD_INT 0
58388: PPUSH
// result := HowMuchPoints ( side ) ;
58389: LD_ADDR_VAR 0 2
58393: PUSH
58394: LD_VAR 0 1
58398: PPUSH
58399: CALL 58409 0 1
58403: ST_TO_ADDR
// end ;
58404: LD_VAR 0 2
58408: RET
// function HowMuchPoints ( side ) ; var i ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
// if mpTeamGame then
58413: LD_EXP 11
58417: IFFALSE 58486
// begin for i := 1 to Count ( mpTeams ) do
58419: LD_ADDR_VAR 0 3
58423: PUSH
58424: DOUBLE
58425: LD_INT 1
58427: DEC
58428: ST_TO_ADDR
58429: LD_EXP 10
58433: PPUSH
58434: CALL 11227 0 1
58438: PUSH
58439: FOR_TO
58440: IFFALSE 58482
// begin if side in mpTeams [ i ] then
58442: LD_VAR 0 1
58446: PUSH
58447: LD_EXP 10
58451: PUSH
58452: LD_VAR 0 3
58456: ARRAY
58457: IN
58458: IFFALSE 58480
// begin result := mpKingPoints [ i ] ;
58460: LD_ADDR_VAR 0 2
58464: PUSH
58465: LD_EXP 53
58469: PUSH
58470: LD_VAR 0 3
58474: ARRAY
58475: ST_TO_ADDR
// exit ;
58476: POP
58477: POP
58478: GO 58502
// end ; end ;
58480: GO 58439
58482: POP
58483: POP
// end else
58484: GO 58502
// result := mpKingPoints [ side ] ;
58486: LD_ADDR_VAR 0 2
58490: PUSH
58491: LD_EXP 53
58495: PUSH
58496: LD_VAR 0 1
58500: ARRAY
58501: ST_TO_ADDR
// end ;
58502: LD_VAR 0 2
58506: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58507: LD_EXP 38
58511: PUSH
58512: CALL 58834 0 0
58516: AND
58517: PUSH
58518: LD_OWVAR 4
58522: AND
58523: IFFALSE 58759
58525: GO 58527
58527: DISABLE
58528: LD_INT 0
58530: PPUSH
58531: PPUSH
// begin canWin := false ;
58532: LD_ADDR_VAR 0 2
58536: PUSH
58537: LD_INT 0
58539: ST_TO_ADDR
// if not HasPower ( your_side ) then
58540: LD_OWVAR 2
58544: PPUSH
58545: CALL 58874 0 1
58549: NOT
58550: IFFALSE 58561
// begin Multiplayer_Loose_Message ;
58552: CALL_OW 521
// enable ( mpLose ) ;
58556: LD_INT 102
58558: ENABLE_MARKED
// end else
58559: GO 58759
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58561: LD_ADDR_VAR 0 2
58565: PUSH
58566: LD_OWVAR 2
58570: PPUSH
58571: CALL 58409 0 1
58575: PUSH
58576: LD_EXP 34
58580: GREATEREQUAL
58581: PUSH
58582: LD_OWVAR 2
58586: PPUSH
58587: CALL 58874 0 1
58591: AND
58592: PUSH
58593: CALL 58762 0 0
58597: NOT
58598: OR
58599: ST_TO_ADDR
// for i := 1 to 8 do
58600: LD_ADDR_VAR 0 1
58604: PUSH
58605: DOUBLE
58606: LD_INT 1
58608: DEC
58609: ST_TO_ADDR
58610: LD_INT 8
58612: PUSH
58613: FOR_TO
58614: IFFALSE 58745
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58616: LD_EXP 7
58620: PUSH
58621: LD_VAR 0 1
58625: ARRAY
58626: PUSH
58627: LD_VAR 0 1
58631: PPUSH
58632: CALL_OW 108
58636: AND
58637: PUSH
58638: LD_VAR 0 1
58642: PUSH
58643: LD_OWVAR 2
58647: NONEQUAL
58648: AND
58649: IFFALSE 58743
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58651: LD_EXP 8
58655: PUSH
58656: LD_VAR 0 1
58660: ARRAY
58661: NOT
58662: PUSH
58663: LD_EXP 8
58667: PUSH
58668: LD_VAR 0 1
58672: ARRAY
58673: PUSH
58674: LD_EXP 8
58678: PUSH
58679: LD_OWVAR 2
58683: ARRAY
58684: NONEQUAL
58685: PUSH
58686: LD_OWVAR 2
58690: PPUSH
58691: LD_VAR 0 1
58695: PPUSH
58696: CALL_OW 81
58700: PUSH
58701: LD_INT 1
58703: NONEQUAL
58704: AND
58705: OR
58706: IFFALSE 58743
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL 58409 0 1
58717: PUSH
58718: LD_EXP 34
58722: GREATEREQUAL
58723: PUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL 58874 0 1
58733: AND
58734: IFFALSE 58743
// begin enable ( mpLose ) ;
58736: LD_INT 102
58738: ENABLE_MARKED
// exit ;
58739: POP
58740: POP
58741: GO 58759
// end ;
58743: GO 58613
58745: POP
58746: POP
// if canWin then
58747: LD_VAR 0 2
58751: IFFALSE 58758
// enable ( mpWin ) else
58753: LD_INT 101
58755: ENABLE_MARKED
58756: GO 58759
// enable ;
58758: ENABLE
// end ; end ;
58759: PPOPN 2
58761: END
// function EnemiesInGame ; var i ; begin
58762: LD_INT 0
58764: PPUSH
58765: PPUSH
// result := false ;
58766: LD_ADDR_VAR 0 1
58770: PUSH
58771: LD_INT 0
58773: ST_TO_ADDR
// for i := 1 to 8 do
58774: LD_ADDR_VAR 0 2
58778: PUSH
58779: DOUBLE
58780: LD_INT 1
58782: DEC
58783: ST_TO_ADDR
58784: LD_INT 8
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58827
// if i <> your_side and HasPower ( i ) then
58790: LD_VAR 0 2
58794: PUSH
58795: LD_OWVAR 2
58799: NONEQUAL
58800: PUSH
58801: LD_VAR 0 2
58805: PPUSH
58806: CALL 58874 0 1
58810: AND
58811: IFFALSE 58825
// begin result := true ;
58813: LD_ADDR_VAR 0 1
58817: PUSH
58818: LD_INT 1
58820: ST_TO_ADDR
// exit ;
58821: POP
58822: POP
58823: GO 58829
// end ;
58825: GO 58787
58827: POP
58828: POP
// end ;
58829: LD_VAR 0 1
58833: RET
// function CanWinLoose ; begin
58834: LD_INT 0
58836: PPUSH
// result := true ;
58837: LD_ADDR_VAR 0 1
58841: PUSH
58842: LD_INT 1
58844: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58845: CALL_OW 531
58849: PUSH
58850: CALL_OW 519
58854: PUSH
58855: LD_INT 1
58857: GREATER
58858: AND
58859: IFFALSE 58869
// result := false ;
58861: LD_ADDR_VAR 0 1
58865: PUSH
58866: LD_INT 0
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 1
58873: RET
// function HasPower ( i ) ; begin
58874: LD_INT 0
58876: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58877: LD_ADDR_VAR 0 2
58881: PUSH
58882: LD_INT 22
58884: PUSH
58885: LD_VAR 0 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: LD_INT 21
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 33
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 33
58919: PUSH
58920: LD_INT 5
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PPUSH
58937: CALL_OW 69
58941: ST_TO_ADDR
// end ; end_of_file
58942: LD_VAR 0 2
58946: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58947: PPOPN 6
58949: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58950: CALL 58979 0 0
// end ; end_of_file
58954: PPOPN 1
58956: END
// every 0 0$1 do
58957: GO 58959
58959: DISABLE
// begin enable ;
58960: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58961: LD_STRING updateTimer(
58963: PUSH
58964: LD_OWVAR 1
58968: STR
58969: PUSH
58970: LD_STRING );
58972: STR
58973: PPUSH
58974: CALL_OW 559
// end ;
58978: END
// export function SOS_MapStart ( ) ; begin
58979: LD_INT 0
58981: PPUSH
// UpdateFactoryWaypoints ( ) ;
58982: CALL 59351 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58986: CALL 59603 0 0
// end ;
58990: LD_VAR 0 1
58994: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58995: LD_INT 0
58997: PPUSH
// end ;
58998: LD_VAR 0 12
59002: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59003: LD_INT 0
59005: PPUSH
59006: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59007: LD_VAR 0 1
59011: NOT
59012: PUSH
59013: LD_VAR 0 2
59017: PPUSH
59018: LD_VAR 0 3
59022: PPUSH
59023: CALL_OW 488
59027: NOT
59028: OR
59029: PUSH
59030: LD_VAR 0 1
59034: PPUSH
59035: CALL_OW 266
59039: PUSH
59040: LD_INT 3
59042: NONEQUAL
59043: PUSH
59044: LD_VAR 0 1
59048: PPUSH
59049: CALL_OW 247
59053: PUSH
59054: LD_INT 1
59056: EQUAL
59057: NOT
59058: AND
59059: OR
59060: IFFALSE 59064
// exit ;
59062: GO 59346
// if GetType ( factory ) = unit_human then
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 247
59073: PUSH
59074: LD_INT 1
59076: EQUAL
59077: IFFALSE 59094
// factory := IsInUnit ( factory ) ;
59079: LD_ADDR_VAR 0 1
59083: PUSH
59084: LD_VAR 0 1
59088: PPUSH
59089: CALL_OW 310
59093: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59094: LD_VAR 0 1
59098: PPUSH
59099: CALL_OW 266
59103: PUSH
59104: LD_INT 3
59106: NONEQUAL
59107: IFFALSE 59111
// exit ;
59109: GO 59346
// for i := 1 to Count ( factoryWaypoints ) do
59111: LD_ADDR_VAR 0 5
59115: PUSH
59116: DOUBLE
59117: LD_INT 1
59119: DEC
59120: ST_TO_ADDR
59121: LD_EXP 54
59125: PPUSH
59126: CALL 11227 0 1
59130: PUSH
59131: FOR_TO
59132: IFFALSE 59294
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59134: LD_VAR 0 2
59138: PPUSH
59139: LD_VAR 0 3
59143: PPUSH
59144: CALL_OW 428
59148: PUSH
59149: LD_EXP 54
59153: PUSH
59154: LD_VAR 0 5
59158: ARRAY
59159: PUSH
59160: LD_INT 2
59162: ARRAY
59163: EQUAL
59164: IFFALSE 59196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59166: LD_ADDR_EXP 54
59170: PUSH
59171: LD_EXP 54
59175: PPUSH
59176: LD_VAR 0 5
59180: PPUSH
59181: CALL_OW 3
59185: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59186: CALL 59351 0 0
// exit ;
59190: POP
59191: POP
59192: GO 59346
// end else
59194: GO 59292
// if factory = factoryWaypoints [ i ] [ 2 ] then
59196: LD_VAR 0 1
59200: PUSH
59201: LD_EXP 54
59205: PUSH
59206: LD_VAR 0 5
59210: ARRAY
59211: PUSH
59212: LD_INT 2
59214: ARRAY
59215: EQUAL
59216: IFFALSE 59292
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59218: LD_ADDR_EXP 54
59222: PUSH
59223: LD_EXP 54
59227: PPUSH
59228: LD_VAR 0 5
59232: PPUSH
59233: CALL_OW 3
59237: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59238: LD_ADDR_EXP 54
59242: PUSH
59243: LD_EXP 54
59247: PPUSH
59248: LD_VAR 0 1
59252: PPUSH
59253: CALL_OW 255
59257: PUSH
59258: LD_VAR 0 1
59262: PUSH
59263: LD_VAR 0 2
59267: PUSH
59268: LD_VAR 0 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: PPUSH
59279: CALL 46836 0 2
59283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59284: CALL 59351 0 0
// exit ;
59288: POP
59289: POP
59290: GO 59346
// end ; end ;
59292: GO 59131
59294: POP
59295: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59296: LD_ADDR_EXP 54
59300: PUSH
59301: LD_EXP 54
59305: PPUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL_OW 255
59315: PUSH
59316: LD_VAR 0 1
59320: PUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_VAR 0 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: PPUSH
59337: CALL 46836 0 2
59341: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59342: CALL 59351 0 0
// end ;
59346: LD_VAR 0 4
59350: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59351: LD_INT 0
59353: PPUSH
59354: PPUSH
59355: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59356: LD_STRING resetFactoryWaypoint();
59358: PPUSH
59359: CALL_OW 559
// if factoryWaypoints then
59363: LD_EXP 54
59367: IFFALSE 59488
// begin list := factoryWaypoints ;
59369: LD_ADDR_VAR 0 3
59373: PUSH
59374: LD_EXP 54
59378: ST_TO_ADDR
// for i := 1 to list do
59379: LD_ADDR_VAR 0 2
59383: PUSH
59384: DOUBLE
59385: LD_INT 1
59387: DEC
59388: ST_TO_ADDR
59389: LD_VAR 0 3
59393: PUSH
59394: FOR_TO
59395: IFFALSE 59486
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59397: LD_STRING setFactoryWaypointXY(
59399: PUSH
59400: LD_VAR 0 3
59404: PUSH
59405: LD_VAR 0 2
59409: ARRAY
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: STR
59415: PUSH
59416: LD_STRING ,
59418: STR
59419: PUSH
59420: LD_VAR 0 3
59424: PUSH
59425: LD_VAR 0 2
59429: ARRAY
59430: PUSH
59431: LD_INT 2
59433: ARRAY
59434: STR
59435: PUSH
59436: LD_STRING ,
59438: STR
59439: PUSH
59440: LD_VAR 0 3
59444: PUSH
59445: LD_VAR 0 2
59449: ARRAY
59450: PUSH
59451: LD_INT 3
59453: ARRAY
59454: STR
59455: PUSH
59456: LD_STRING ,
59458: STR
59459: PUSH
59460: LD_VAR 0 3
59464: PUSH
59465: LD_VAR 0 2
59469: ARRAY
59470: PUSH
59471: LD_INT 4
59473: ARRAY
59474: STR
59475: PUSH
59476: LD_STRING )
59478: STR
59479: PPUSH
59480: CALL_OW 559
59484: GO 59394
59486: POP
59487: POP
// end ; end ;
59488: LD_VAR 0 1
59492: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59493: LD_INT 0
59495: PPUSH
// if HexInfo ( x , y ) = warehouse then
59496: LD_VAR 0 2
59500: PPUSH
59501: LD_VAR 0 3
59505: PPUSH
59506: CALL_OW 428
59510: PUSH
59511: LD_VAR 0 1
59515: EQUAL
59516: IFFALSE 59543
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59518: LD_ADDR_EXP 55
59522: PUSH
59523: LD_EXP 55
59527: PPUSH
59528: LD_VAR 0 1
59532: PPUSH
59533: LD_INT 0
59535: PPUSH
59536: CALL_OW 1
59540: ST_TO_ADDR
59541: GO 59594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59543: LD_ADDR_EXP 55
59547: PUSH
59548: LD_EXP 55
59552: PPUSH
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 1
59562: PPUSH
59563: CALL_OW 255
59567: PUSH
59568: LD_VAR 0 1
59572: PUSH
59573: LD_VAR 0 2
59577: PUSH
59578: LD_VAR 0 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: PPUSH
59589: CALL_OW 1
59593: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59594: CALL 59603 0 0
// end ;
59598: LD_VAR 0 4
59602: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59603: LD_INT 0
59605: PPUSH
59606: PPUSH
59607: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59608: LD_STRING resetWarehouseGatheringPoints();
59610: PPUSH
59611: CALL_OW 559
// if warehouseGatheringPoints then
59615: LD_EXP 55
59619: IFFALSE 59745
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59621: LD_ADDR_VAR 0 3
59625: PUSH
59626: LD_EXP 55
59630: PPUSH
59631: CALL 50598 0 1
59635: ST_TO_ADDR
// for i := 1 to list do
59636: LD_ADDR_VAR 0 2
59640: PUSH
59641: DOUBLE
59642: LD_INT 1
59644: DEC
59645: ST_TO_ADDR
59646: LD_VAR 0 3
59650: PUSH
59651: FOR_TO
59652: IFFALSE 59743
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59654: LD_STRING setWarehouseGatheringPointXY(
59656: PUSH
59657: LD_VAR 0 3
59661: PUSH
59662: LD_VAR 0 2
59666: ARRAY
59667: PUSH
59668: LD_INT 1
59670: ARRAY
59671: STR
59672: PUSH
59673: LD_STRING ,
59675: STR
59676: PUSH
59677: LD_VAR 0 3
59681: PUSH
59682: LD_VAR 0 2
59686: ARRAY
59687: PUSH
59688: LD_INT 2
59690: ARRAY
59691: STR
59692: PUSH
59693: LD_STRING ,
59695: STR
59696: PUSH
59697: LD_VAR 0 3
59701: PUSH
59702: LD_VAR 0 2
59706: ARRAY
59707: PUSH
59708: LD_INT 3
59710: ARRAY
59711: STR
59712: PUSH
59713: LD_STRING ,
59715: STR
59716: PUSH
59717: LD_VAR 0 3
59721: PUSH
59722: LD_VAR 0 2
59726: ARRAY
59727: PUSH
59728: LD_INT 4
59730: ARRAY
59731: STR
59732: PUSH
59733: LD_STRING )
59735: STR
59736: PPUSH
59737: CALL_OW 559
59741: GO 59651
59743: POP
59744: POP
// end ; end ;
59745: LD_VAR 0 1
59749: RET
