// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3110 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 35
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 37
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 36
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 33
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 52871 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 52871 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 52871 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 52871 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 52871 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 52871 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 12220 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 52704 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 52704 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 52704 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 52704 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 52704 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 52704 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 52704 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 52704 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 52704 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 52704 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 52704 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 52704 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 52871 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 52871 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 52871 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 52871 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 52871 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 52871 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 52871 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 52871 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 52871 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 52871 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 52871 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 52871 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 52871 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 52871 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 52871 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 52871 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 52871 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 52871 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 49525 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 53669 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7882 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 53686 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8553 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 53727 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8606 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2805: LD_ADDR_EXP 41
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2812: LD_ADDR_EXP 42
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpDepots := [ ] ;
2819: LD_ADDR_EXP 14
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildings := [ ] ;
2826: LD_ADDR_EXP 17
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2833: LD_ADDR_EXP 18
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2840: LD_ADDR_EXP 19
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2847: LD_ADDR_EXP 20
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpStartingResources := [ ] ;
2854: LD_ADDR_EXP 15
2858: PUSH
2859: EMPTY
2860: ST_TO_ADDR
// mpStartPos := [ ] ;
2861: LD_ADDR_EXP 21
2865: PUSH
2866: EMPTY
2867: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2868: LD_ADDR_EXP 22
2872: PUSH
2873: LD_INT 1
2875: NEG
2876: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2877: LD_ADDR_EXP 23
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpApemans := [ ] ;
2884: LD_ADDR_EXP 30
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpApemansArea := [ ] ;
2891: LD_ADDR_EXP 31
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// mpRespawn := [ ] ;
2898: LD_ADDR_EXP 33
2902: PUSH
2903: EMPTY
2904: ST_TO_ADDR
// mpKingArea := 0 ;
2905: LD_ADDR_EXP 34
2909: PUSH
2910: LD_INT 0
2912: ST_TO_ADDR
// mpPoints := [ ] ;
2913: LD_ADDR_EXP 35
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// mpVehicles := 0 ;
2920: LD_ADDR_EXP 36
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// mpShipments := 0 ;
2928: LD_ADDR_EXP 27
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2936: LD_ADDR_EXP 40
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2967: LD_ADDR_EXP 32
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: ST_TO_ADDR
// mpEmissions := 0 ;
2998: LD_ADDR_EXP 37
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpTeleports := 0 ;
3006: LD_ADDR_EXP 43
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// mpArtifacts := 0 ;
3014: LD_ADDR_EXP 44
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3022: LD_ADDR_EXP 25
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3030: LD_ADDR_EXP 24
3034: PUSH
3035: LD_INT 15
3037: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3038: LD_ADDR_EXP 38
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// mpGameActive := false ;
3046: LD_ADDR_EXP 39
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// mpBlockRespThread := false ;
3054: LD_ADDR_EXP 45
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// for i := 1 to 32 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 32
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3103
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3078: LD_ADDR_EXP 6
3082: PUSH
3083: LD_EXP 6
3087: PPUSH
3088: LD_VAR 0 2
3092: PPUSH
3093: LD_INT 0
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
3101: GO 3075
3103: POP
3104: POP
// end ;
3105: LD_VAR 0 1
3109: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3110: LD_INT 0
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3126: LD_ADDR_VAR 0 14
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 5
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: ST_TO_ADDR
// for i in gameTypes do
3149: LD_ADDR_VAR 0 2
3153: PUSH
3154: LD_VAR 0 14
3158: PUSH
3159: FOR_IN
3160: IFFALSE 3169
// disable ( i ) ;
3162: LD_VAR 0 2
3166: DISABLE_MARKED
3167: GO 3159
3169: POP
3170: POP
// if Multiplayer then
3171: LD_OWVAR 4
3175: IFFALSE 3359
// begin mpGameType := mp_game_type ;
3177: LD_ADDR_EXP 3
3181: PUSH
3182: LD_OWVAR 6
3186: ST_TO_ADDR
// your_side := mp_player_side ;
3187: LD_ADDR_OWVAR 2
3191: PUSH
3192: LD_OWVAR 7
3196: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3197: LD_ADDR_EXP 7
3201: PUSH
3202: LD_OWVAR 17
3206: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3207: LD_ADDR_EXP 8
3211: PUSH
3212: LD_OWVAR 15
3216: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3217: LD_ADDR_EXP 9
3221: PUSH
3222: LD_OWVAR 16
3226: ST_TO_ADDR
// mpTeams := mp_teams ;
3227: LD_ADDR_EXP 10
3231: PUSH
3232: LD_OWVAR 12
3236: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: DOUBLE
3243: LD_INT 1
3245: DEC
3246: ST_TO_ADDR
3247: LD_EXP 4
3251: PPUSH
3252: CALL 12220 0 1
3256: PUSH
3257: FOR_TO
3258: IFFALSE 3334
// begin setting := mpGameSettingsKeys [ i ] ;
3260: LD_ADDR_VAR 0 12
3264: PUSH
3265: LD_EXP 4
3269: PUSH
3270: LD_VAR 0 2
3274: ARRAY
3275: ST_TO_ADDR
// if setting then
3276: LD_VAR 0 12
3280: IFFALSE 3332
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3282: LD_ADDR_EXP 6
3286: PUSH
3287: LD_EXP 6
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 5
3301: PUSH
3302: LD_VAR 0 2
3306: ARRAY
3307: PUSH
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 1
3315: MINUS
3316: PPUSH
3317: CALL_OW 426
3321: PUSH
3322: LD_INT 1
3324: PLUS
3325: ARRAY
3326: PPUSH
3327: CALL_OW 1
3331: ST_TO_ADDR
// end ;
3332: GO 3257
3334: POP
3335: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3336: LD_ADDR_EXP 11
3340: PUSH
3341: LD_EXP 8
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: EMPTY
3350: LIST
3351: DIFF
3352: PUSH
3353: LD_INT 1
3355: GREATER
3356: ST_TO_ADDR
// end else
3357: GO 3359
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3359: LD_EXP 3
3363: PPUSH
3364: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3368: LD_EXP 18
3372: PPUSH
3373: CALL 12220 0 1
3377: IFFALSE 3408
// begin for i in mpMarkedAreas do
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_EXP 18
3388: PUSH
3389: FOR_IN
3390: IFFALSE 3406
// SetAreaMapShow ( i , 0 ) ;
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_INT 0
3399: PPUSH
3400: CALL_OW 424
3404: GO 3389
3406: POP
3407: POP
// end ; for i := 1 to 8 do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 8
3420: PUSH
3421: FOR_TO
3422: IFFALSE 4758
// begin if not mpSidePositions [ i ] then
3424: LD_EXP 7
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: NOT
3435: IFFALSE 3439
// continue ;
3437: GO 3421
// side := i ;
3439: LD_ADDR_VAR 0 7
3443: PUSH
3444: LD_VAR 0 2
3448: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3449: LD_ADDR_VAR 0 9
3453: PUSH
3454: LD_EXP 9
3458: PUSH
3459: LD_VAR 0 2
3463: ARRAY
3464: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3465: LD_ADDR_VAR 0 8
3469: PUSH
3470: LD_EXP 7
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3481: LD_EXP 12
3485: PPUSH
3486: CALL 12220 0 1
3490: IFFALSE 3567
// begin for j in mpOilDeposits [ pos ] do
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_EXP 12
3501: PUSH
3502: LD_VAR 0 8
3506: ARRAY
3507: PUSH
3508: FOR_IN
3509: IFFALSE 3565
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3511: LD_VAR 0 3
3515: PUSH
3516: LD_INT 1
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 3
3524: PUSH
3525: LD_INT 2
3527: ARRAY
3528: PPUSH
3529: LD_INT 2
3531: PPUSH
3532: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3536: LD_VAR 0 3
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 2
3552: ARRAY
3553: PPUSH
3554: LD_VAR 0 7
3558: PPUSH
3559: CALL_OW 441
// end ;
3563: GO 3508
3565: POP
3566: POP
// end ; if Count ( mpSibDeposits ) then
3567: LD_EXP 13
3571: PPUSH
3572: CALL 12220 0 1
3576: IFFALSE 3653
// begin for j in mpSibDeposits [ pos ] do
3578: LD_ADDR_VAR 0 3
3582: PUSH
3583: LD_EXP 13
3587: PUSH
3588: LD_VAR 0 8
3592: ARRAY
3593: PUSH
3594: FOR_IN
3595: IFFALSE 3651
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3597: LD_VAR 0 3
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PPUSH
3606: LD_VAR 0 3
3610: PUSH
3611: LD_INT 2
3613: ARRAY
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3622: LD_VAR 0 3
3626: PUSH
3627: LD_INT 1
3629: ARRAY
3630: PPUSH
3631: LD_VAR 0 3
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: PPUSH
3640: LD_VAR 0 7
3644: PPUSH
3645: CALL_OW 441
// end ;
3649: GO 3594
3651: POP
3652: POP
// end ; InitBc ;
3653: CALL_OW 21
// InitUc ;
3657: CALL_OW 18
// uc_side := side ;
3661: LD_ADDR_OWVAR 20
3665: PUSH
3666: LD_VAR 0 7
3670: ST_TO_ADDR
// uc_nation := nation ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_VAR 0 9
3680: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3681: LD_EXP 22
3685: PUSH
3686: LD_INT 1
3688: NEG
3689: GREATER
3690: IFFALSE 3849
// begin x := mpStartPos [ pos ] [ 1 ] ;
3692: LD_ADDR_VAR 0 5
3696: PUSH
3697: LD_EXP 21
3701: PUSH
3702: LD_VAR 0 8
3706: ARRAY
3707: PUSH
3708: LD_INT 1
3710: ARRAY
3711: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_EXP 21
3721: PUSH
3722: LD_VAR 0 8
3726: ARRAY
3727: PUSH
3728: LD_INT 2
3730: ARRAY
3731: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3732: LD_VAR 0 5
3736: PPUSH
3737: LD_VAR 0 6
3741: PPUSH
3742: LD_INT 12
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3752: LD_ADDR_EXP 23
3756: PUSH
3757: LD_EXP 23
3761: PPUSH
3762: LD_VAR 0 7
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: LD_VAR 0 5
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 100
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: LD_INT 70
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 40
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 10
3814: PUSH
3815: LD_INT 25
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 20
3824: PUSH
3825: LD_INT 100
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 418
3843: PPUSH
3844: CALL_OW 1
3848: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3849: LD_EXP 14
3853: PPUSH
3854: CALL 12220 0 1
3858: IFFALSE 4042
// begin if mpGameType = GameTypeSurvival then
3860: LD_EXP 3
3864: PUSH
3865: LD_INT 2
3867: EQUAL
3868: IFFALSE 3888
// begin bc_level := 10 ;
3870: LD_ADDR_OWVAR 43
3874: PUSH
3875: LD_INT 10
3877: ST_TO_ADDR
// bc_type := b_warehouse ;
3878: LD_ADDR_OWVAR 42
3882: PUSH
3883: LD_INT 1
3885: ST_TO_ADDR
// end else
3886: GO 3904
// begin bc_level := 0 ;
3888: LD_ADDR_OWVAR 43
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// bc_type := b_depot ;
3896: LD_ADDR_OWVAR 42
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_EXP 14
3913: PUSH
3914: LD_VAR 0 8
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: PPUSH
3924: LD_EXP 14
3928: PUSH
3929: LD_VAR 0 8
3933: ARRAY
3934: PUSH
3935: LD_INT 2
3937: ARRAY
3938: PPUSH
3939: LD_EXP 14
3943: PUSH
3944: LD_VAR 0 8
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: PPUSH
3954: CALL_OW 47
3958: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3959: LD_VAR 0 4
3963: PPUSH
3964: LD_STRING @
3966: PUSH
3967: LD_VAR 0 7
3971: STR
3972: PPUSH
3973: CALL_OW 500
// if Count ( mpStartingResources ) then
3977: LD_EXP 15
3981: PPUSH
3982: CALL 12220 0 1
3986: IFFALSE 4040
// begin for j := 1 to mpStartingResources do
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_EXP 15
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4038
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4006: LD_VAR 0 4
4010: PPUSH
4011: CALL_OW 274
4015: PPUSH
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_EXP 15
4025: PUSH
4026: LD_VAR 0 3
4030: ARRAY
4031: PPUSH
4032: CALL_OW 277
4036: GO 4003
4038: POP
4039: POP
// end ; end else
4040: GO 4249
// if Count ( mpStartingResources ) then
4042: LD_EXP 15
4046: PPUSH
4047: CALL 12220 0 1
4051: IFFALSE 4249
// begin x := mpStartPos [ pos ] [ 1 ] ;
4053: LD_ADDR_VAR 0 5
4057: PUSH
4058: LD_EXP 21
4062: PUSH
4063: LD_VAR 0 8
4067: ARRAY
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4073: LD_ADDR_VAR 0 6
4077: PUSH
4078: LD_EXP 21
4082: PUSH
4083: LD_VAR 0 8
4087: ARRAY
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4093: LD_ADDR_VAR 0 3
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_EXP 15
4107: PUSH
4108: FOR_TO
4109: IFFALSE 4247
// begin resources := mpStartingResources [ j ] ;
4111: LD_ADDR_VAR 0 13
4115: PUSH
4116: LD_EXP 15
4120: PUSH
4121: LD_VAR 0 3
4125: ARRAY
4126: ST_TO_ADDR
// if resources = 0 then
4127: LD_VAR 0 13
4131: PUSH
4132: LD_INT 0
4134: EQUAL
4135: IFFALSE 4139
// continue ;
4137: GO 4108
// repeat if resources >= 50 then
4139: LD_VAR 0 13
4143: PUSH
4144: LD_INT 50
4146: GREATEREQUAL
4147: IFFALSE 4193
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4149: LD_VAR 0 3
4153: PPUSH
4154: LD_INT 5
4156: PPUSH
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_VAR 0 6
4166: PPUSH
4167: LD_INT 6
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 60
// resources := resources - 50 ;
4177: LD_ADDR_VAR 0 13
4181: PUSH
4182: LD_VAR 0 13
4186: PUSH
4187: LD_INT 50
4189: MINUS
4190: ST_TO_ADDR
// end else
4191: GO 4235
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4193: LD_VAR 0 3
4197: PPUSH
4198: LD_VAR 0 13
4202: PUSH
4203: LD_INT 10
4205: DIV
4206: PPUSH
4207: LD_VAR 0 5
4211: PPUSH
4212: LD_VAR 0 6
4216: PPUSH
4217: LD_INT 6
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 60
// resources := 0 ;
4227: LD_ADDR_VAR 0 13
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// end ; until resources <= 0 ;
4235: LD_VAR 0 13
4239: PUSH
4240: LD_INT 0
4242: LESSEQUAL
4243: IFFALSE 4139
// end ;
4245: GO 4108
4247: POP
4248: POP
// end ; if Count ( mpBuildings ) then
4249: LD_EXP 17
4253: PPUSH
4254: CALL 12220 0 1
4258: IFFALSE 4336
// begin for j in mpBuildings [ pos ] do
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_EXP 17
4269: PUSH
4270: LD_VAR 0 8
4274: ARRAY
4275: PUSH
4276: FOR_IN
4277: IFFALSE 4334
// begin bc_level := 0 ;
4279: LD_ADDR_OWVAR 43
4283: PUSH
4284: LD_INT 0
4286: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4287: LD_ADDR_OWVAR 42
4291: PUSH
4292: LD_VAR 0 3
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4301: LD_VAR 0 3
4305: PUSH
4306: LD_INT 2
4308: ARRAY
4309: PPUSH
4310: LD_VAR 0 3
4314: PUSH
4315: LD_INT 3
4317: ARRAY
4318: PPUSH
4319: LD_VAR 0 3
4323: PUSH
4324: LD_INT 4
4326: ARRAY
4327: PPUSH
4328: CALL_OW 47
// end ;
4332: GO 4276
4334: POP
4335: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4336: LD_EXP 26
4340: IFFALSE 4360
4342: PUSH
4343: LD_INT 20
4345: PPUSH
4346: LD_VAR 0 7
4350: PPUSH
4351: CALL_OW 321
4355: PUSH
4356: LD_INT 1
4358: EQUAL
4359: AND
4360: IFFALSE 4377
// SetTech ( tech_SibDet , side , state_researched ) ;
4362: LD_INT 20
4364: PPUSH
4365: LD_VAR 0 7
4369: PPUSH
4370: LD_INT 2
4372: PPUSH
4373: CALL_OW 322
// if not mpArtifacts then
4377: LD_EXP 44
4381: NOT
4382: IFFALSE 4399
// SetTech ( tech_artifact , side , state_disabled ) ;
4384: LD_INT 24
4386: PPUSH
4387: LD_VAR 0 7
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 322
// if mpSibBomb = 1 then
4399: LD_EXP 28
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4426
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4409: LD_INT 25
4411: PPUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_INT 1
4419: PPUSH
4420: CALL_OW 322
// end else
4424: GO 4441
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4426: LD_INT 25
4428: PPUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 322
// end ; if mpVehicles then
4441: LD_EXP 36
4445: IFFALSE 4544
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_VAR 0 7
4456: PPUSH
4457: LD_VAR 0 9
4461: PPUSH
4462: LD_EXP 36
4466: PPUSH
4467: CALL 5668 0 3
4471: PUSH
4472: FOR_IN
4473: IFFALSE 4542
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4475: LD_VAR 0 3
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_EXP 21
4504: PUSH
4505: LD_VAR 0 8
4509: ARRAY
4510: PUSH
4511: LD_INT 1
4513: ARRAY
4514: PPUSH
4515: LD_EXP 21
4519: PUSH
4520: LD_VAR 0 8
4524: ARRAY
4525: PUSH
4526: LD_INT 2
4528: ARRAY
4529: PPUSH
4530: LD_INT 12
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: CALL_OW 50
// end ;
4540: GO 4472
4542: POP
4543: POP
// end ; uc_nation := nation ;
4544: LD_ADDR_OWVAR 21
4548: PUSH
4549: LD_VAR 0 9
4553: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4554: LD_ADDR_VAR 0 11
4558: PUSH
4559: LD_VAR 0 7
4563: PPUSH
4564: LD_VAR 0 9
4568: PPUSH
4569: LD_EXP 24
4573: PPUSH
4574: LD_EXP 25
4578: PPUSH
4579: CALL 5170 0 4
4583: ST_TO_ADDR
// for j in team do
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: LD_VAR 0 11
4593: PUSH
4594: FOR_IN
4595: IFFALSE 4644
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_EXP 21
4606: PUSH
4607: LD_VAR 0 8
4611: ARRAY
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: LD_EXP 21
4621: PUSH
4622: LD_VAR 0 8
4626: ARRAY
4627: PUSH
4628: LD_INT 2
4630: ARRAY
4631: PPUSH
4632: LD_INT 12
4634: PPUSH
4635: LD_INT 0
4637: PPUSH
4638: CALL_OW 50
4642: GO 4594
4644: POP
4645: POP
// if mpApemans then
4646: LD_EXP 30
4650: IFFALSE 4756
// begin for j := 1 to mpApemans do
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: DOUBLE
4658: LD_INT 1
4660: DEC
4661: ST_TO_ADDR
4662: LD_EXP 30
4666: PUSH
4667: FOR_TO
4668: IFFALSE 4754
// begin PrepareApeman ( - 5 ) ;
4670: LD_INT 5
4672: NEG
4673: PPUSH
4674: CALL 44279 0 1
// ape := CreateHuman ;
4678: LD_ADDR_VAR 0 10
4682: PUSH
4683: CALL_OW 44
4687: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4688: LD_ADDR_EXP 32
4692: PUSH
4693: LD_EXP 32
4697: PPUSH
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_EXP 32
4707: PUSH
4708: LD_VAR 0 8
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 10
4718: PPUSH
4719: CALL 48152 0 2
4723: PPUSH
4724: CALL_OW 1
4728: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4729: LD_VAR 0 10
4733: PPUSH
4734: LD_EXP 31
4738: PUSH
4739: LD_VAR 0 8
4743: ARRAY
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 49
// end ;
4752: GO 4667
4754: POP
4755: POP
// end ; end ;
4756: GO 3421
4758: POP
4759: POP
// if not mpTeamGame then
4760: LD_EXP 11
4764: NOT
4765: IFFALSE 4863
// begin for i := 1 to 8 do
4767: LD_ADDR_VAR 0 2
4771: PUSH
4772: DOUBLE
4773: LD_INT 1
4775: DEC
4776: ST_TO_ADDR
4777: LD_INT 8
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4859
// for j := 1 to 8 do
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: DOUBLE
4789: LD_INT 1
4791: DEC
4792: ST_TO_ADDR
4793: LD_INT 8
4795: PUSH
4796: FOR_TO
4797: IFFALSE 4855
// if i <> j then
4799: LD_VAR 0 2
4803: PUSH
4804: LD_VAR 0 3
4808: NONEQUAL
4809: IFFALSE 4833
// SetAttitude ( i , j , att_neutral , true ) else
4811: LD_VAR 0 2
4815: PPUSH
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 1
4826: PPUSH
4827: CALL_OW 80
4831: GO 4853
// SetAttitude ( i , j , att_friend , true ) ;
4833: LD_VAR 0 2
4837: PPUSH
4838: LD_VAR 0 3
4842: PPUSH
4843: LD_INT 1
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: CALL_OW 80
4853: GO 4796
4855: POP
4856: POP
4857: GO 4780
4859: POP
4860: POP
// end else
4861: GO 5038
// begin if mpSharedVision then
4863: LD_EXP 16
4867: IFFALSE 4932
// begin for i in mpTeams do
4869: LD_ADDR_VAR 0 2
4873: PUSH
4874: LD_EXP 10
4878: PUSH
4879: FOR_IN
4880: IFFALSE 4930
// for j := 2 to i do
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: DOUBLE
4888: LD_INT 2
4890: DEC
4891: ST_TO_ADDR
4892: LD_VAR 0 2
4896: PUSH
4897: FOR_TO
4898: IFFALSE 4926
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4900: LD_VAR 0 2
4904: PUSH
4905: LD_VAR 0 3
4909: ARRAY
4910: PPUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PPUSH
4920: CALL_OW 343
4924: GO 4897
4926: POP
4927: POP
4928: GO 4879
4930: POP
4931: POP
// end ; for i := 1 to 8 do
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: DOUBLE
4938: LD_INT 1
4940: DEC
4941: ST_TO_ADDR
4942: LD_INT 8
4944: PUSH
4945: FOR_TO
4946: IFFALSE 5036
// for j := 1 to 8 do
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 8
4960: PUSH
4961: FOR_TO
4962: IFFALSE 5032
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4964: LD_EXP 8
4968: PUSH
4969: LD_VAR 0 2
4973: ARRAY
4974: PUSH
4975: LD_EXP 8
4979: PUSH
4980: LD_VAR 0 3
4984: ARRAY
4985: EQUAL
4986: IFFALSE 5010
// SetAttitude ( i , j , att_friend , true ) else
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 3
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_INT 1
5003: PPUSH
5004: CALL_OW 80
5008: GO 5030
// SetAttitude ( i , j , att_enemy , true ) ;
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: LD_INT 1
5025: PPUSH
5026: CALL_OW 80
5030: GO 4961
5032: POP
5033: POP
5034: GO 4945
5036: POP
5037: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5038: LD_ADDR_OWVAR 71
5042: PUSH
5043: LD_EXP 9
5047: PUSH
5048: LD_OWVAR 2
5052: ARRAY
5053: ST_TO_ADDR
// if IAmSpec then
5054: CALL_OW 531
5058: IFFALSE 5099
// begin FogOff ( true ) ;
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5067: LD_EXP 29
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PUSH
5076: LD_INT 2
5078: DIV
5079: PPUSH
5080: LD_EXP 29
5084: PUSH
5085: LD_INT 2
5087: ARRAY
5088: PUSH
5089: LD_INT 2
5091: DIV
5092: PPUSH
5093: CALL_OW 86
// end else
5097: GO 5145
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5099: LD_EXP 21
5103: PUSH
5104: LD_EXP 7
5108: PUSH
5109: LD_OWVAR 2
5113: ARRAY
5114: ARRAY
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_EXP 21
5124: PUSH
5125: LD_EXP 7
5129: PUSH
5130: LD_OWVAR 2
5134: ARRAY
5135: ARRAY
5136: PUSH
5137: LD_INT 2
5139: ARRAY
5140: PPUSH
5141: CALL_OW 86
// end ; BeginBuildUp ;
5145: CALL 6201 0 0
// enable ( mpActive ) ;
5149: LD_INT 100
5151: ENABLE_MARKED
// enable ( mpGameType ) ;
5152: LD_EXP 3
5156: ENABLE_MARKED
// mpGameActive := true ;
5157: LD_ADDR_EXP 39
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// end ;
5165: LD_VAR 0 1
5169: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// result := [ ] ;
5176: LD_ADDR_VAR 0 5
5180: PUSH
5181: EMPTY
5182: ST_TO_ADDR
// class := class_soldier ;
5183: LD_ADDR_VAR 0 8
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// uc_side := side ;
5191: LD_ADDR_OWVAR 20
5195: PUSH
5196: LD_VAR 0 1
5200: ST_TO_ADDR
// uc_nation := nation ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_VAR 0 2
5210: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5211: LD_ADDR_OWVAR 26
5215: PUSH
5216: LD_OWVAR 19
5220: PUSH
5221: LD_VAR 0 1
5225: ARRAY
5226: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: LD_VAR 0 8
5242: PPUSH
5243: LD_VAR 0 4
5247: PUSH
5248: LD_INT 2
5250: PLUS
5251: PPUSH
5252: CALL_OW 380
// hc_importance := 105 ;
5256: LD_ADDR_OWVAR 32
5260: PUSH
5261: LD_INT 105
5263: ST_TO_ADDR
// if Multiplayer then
5264: LD_OWVAR 4
5268: IFFALSE 5308
// begin hc_gallery := MULTIAVATARS ;
5270: LD_ADDR_OWVAR 33
5274: PUSH
5275: LD_STRING MULTIAVATARS
5277: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5278: LD_ADDR_OWVAR 34
5282: PUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL_OW 525
5292: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5293: LD_ADDR_OWVAR 27
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 526
5307: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5308: LD_ADDR_VAR 0 5
5312: PUSH
5313: LD_VAR 0 5
5317: PPUSH
5318: CALL_OW 44
5322: PPUSH
5323: CALL 48152 0 2
5327: ST_TO_ADDR
// if mpTeamPreset then
5328: LD_LOC 1
5332: IFFALSE 5428
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5334: LD_LOC 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_VAR 0 5
5347: PUSH
5348: LD_VAR 0 5
5352: ARRAY
5353: PPUSH
5354: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5358: LD_VAR 0 5
5362: PUSH
5363: LD_VAR 0 5
5367: ARRAY
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_LOC 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: CALL_OW 260
5388: PPUSH
5389: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5393: LD_VAR 0 5
5397: PUSH
5398: LD_VAR 0 5
5402: ARRAY
5403: PPUSH
5404: LD_INT 2
5406: PPUSH
5407: LD_LOC 1
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: CALL_OW 260
5423: PPUSH
5424: CALL_OW 239
// end ; InitHc_All ( ) ;
5428: CALL_OW 584
// class := 2 ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: LD_INT 2
5439: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5440: LD_ADDR_VAR 0 6
5444: PUSH
5445: DOUBLE
5446: LD_INT 1
5448: DEC
5449: ST_TO_ADDR
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 1
5457: MINUS
5458: PUSH
5459: FOR_TO
5460: IFFALSE 5644
// begin PrepareHuman ( false , class , skill ) ;
5462: LD_INT 0
5464: PPUSH
5465: LD_VAR 0 8
5469: PPUSH
5470: LD_VAR 0 4
5474: PPUSH
5475: CALL_OW 380
// un := CreateHuman ;
5479: LD_ADDR_VAR 0 7
5483: PUSH
5484: CALL_OW 44
5488: ST_TO_ADDR
// result := Join ( result , un ) ;
5489: LD_ADDR_VAR 0 5
5493: PUSH
5494: LD_VAR 0 5
5498: PPUSH
5499: LD_VAR 0 7
5503: PPUSH
5504: CALL 48152 0 2
5508: ST_TO_ADDR
// if mpTeamPreset then
5509: LD_LOC 1
5513: IFFALSE 5609
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5515: LD_LOC 1
5519: PUSH
5520: LD_VAR 0 6
5524: PUSH
5525: LD_INT 1
5527: PLUS
5528: ARRAY
5529: PPUSH
5530: LD_VAR 0 7
5534: PPUSH
5535: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5539: LD_VAR 0 7
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_LOC 1
5551: PUSH
5552: LD_VAR 0 6
5556: PUSH
5557: LD_INT 1
5559: PLUS
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5574: LD_VAR 0 7
5578: PPUSH
5579: LD_INT 2
5581: PPUSH
5582: LD_LOC 1
5586: PUSH
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: PLUS
5595: ARRAY
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 260
5604: PPUSH
5605: CALL_OW 239
// end ; class := Inc ( class ) ;
5609: LD_ADDR_VAR 0 8
5613: PUSH
5614: LD_VAR 0 8
5618: PPUSH
5619: CALL 49525 0 1
5623: ST_TO_ADDR
// if class = 5 then
5624: LD_VAR 0 8
5628: PUSH
5629: LD_INT 5
5631: EQUAL
5632: IFFALSE 5642
// class := 1 ;
5634: LD_ADDR_VAR 0 8
5638: PUSH
5639: LD_INT 1
5641: ST_TO_ADDR
// end ;
5642: GO 5459
5644: POP
5645: POP
// if not mpTeamPreset then
5646: LD_LOC 1
5650: NOT
5651: IFFALSE 5663
// mpTeamPreset := result ;
5653: LD_ADDR_LOC 1
5657: PUSH
5658: LD_VAR 0 5
5662: ST_TO_ADDR
// end ;
5663: LD_VAR 0 5
5667: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
// result := [ ] ;
5672: LD_ADDR_VAR 0 4
5676: PUSH
5677: EMPTY
5678: ST_TO_ADDR
// if not vehicles then
5679: LD_VAR 0 3
5683: NOT
5684: IFFALSE 5688
// exit ;
5686: GO 5902
// for i := 1 to vehicles [ nation ] do
5688: LD_ADDR_VAR 0 5
5692: PUSH
5693: DOUBLE
5694: LD_INT 1
5696: DEC
5697: ST_TO_ADDR
5698: LD_VAR 0 3
5702: PUSH
5703: LD_VAR 0 2
5707: ARRAY
5708: PUSH
5709: FOR_TO
5710: IFFALSE 5900
// begin uc_side := side ;
5712: LD_ADDR_OWVAR 20
5716: PUSH
5717: LD_VAR 0 1
5721: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_VAR 0 2
5731: ARRAY
5732: PUSH
5733: LD_VAR 0 5
5737: ARRAY
5738: PPUSH
5739: CALL 12220 0 1
5743: PUSH
5744: LD_INT 4
5746: GREATER
5747: IFFALSE 5777
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5749: LD_ADDR_OWVAR 21
5753: PUSH
5754: LD_VAR 0 3
5758: PUSH
5759: LD_VAR 0 2
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 5
5769: ARRAY
5770: PUSH
5771: LD_INT 5
5773: ARRAY
5774: ST_TO_ADDR
5775: GO 5787
// uc_nation := nation ;
5777: LD_ADDR_OWVAR 21
5781: PUSH
5782: LD_VAR 0 2
5786: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5787: LD_VAR 0 3
5791: PUSH
5792: LD_VAR 0 2
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: ARRAY
5803: PUSH
5804: LD_INT 1
5806: ARRAY
5807: PPUSH
5808: LD_VAR 0 3
5812: PUSH
5813: LD_VAR 0 2
5817: ARRAY
5818: PUSH
5819: LD_VAR 0 5
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: LD_VAR 0 3
5833: PUSH
5834: LD_VAR 0 2
5838: ARRAY
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 3
5848: ARRAY
5849: PPUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 2
5859: ARRAY
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PPUSH
5871: LD_INT 80
5873: PPUSH
5874: CALL 14982 0 5
// result := Join ( result , CreateVehicle ) ;
5878: LD_ADDR_VAR 0 4
5882: PUSH
5883: LD_VAR 0 4
5887: PPUSH
5888: CALL_OW 45
5892: PPUSH
5893: CALL 48152 0 2
5897: ST_TO_ADDR
// end ;
5898: GO 5709
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 4
5906: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5907: LD_INT 0
5909: PPUSH
5910: PPUSH
// for i in mpBattleFlags do
5911: LD_ADDR_VAR 0 3
5915: PUSH
5916: LD_EXP 23
5920: PUSH
5921: FOR_IN
5922: IFFALSE 5999
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5924: LD_VAR 0 3
5928: PPUSH
5929: LD_INT 1
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 2
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_REAL  7.00000000000000E-0001
5952: MUL
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: LD_VAR 0 1
5965: PUSH
5966: LD_REAL  4.00000000000000E-0001
5969: MUL
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 20
5977: PUSH
5978: LD_VAR 0 1
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: PPUSH
5993: CALL_OW 423
5997: GO 5921
5999: POP
6000: POP
// end ;
6001: LD_VAR 0 2
6005: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6006: LD_INT 100
6008: IFFALSE 6103
6010: GO 6012
6012: DISABLE
6013: LD_INT 0
6015: PPUSH
6016: PPUSH
// begin if mpBattleFlag <= 0 then
6017: LD_EXP 22
6021: PUSH
6022: LD_INT 0
6024: LESSEQUAL
6025: IFFALSE 6029
// exit ;
6027: GO 6103
// strength := 100 ;
6029: LD_ADDR_VAR 0 2
6033: PUSH
6034: LD_INT 100
6036: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6037: LD_EXP 22
6041: PPUSH
6042: CALL_OW 67
// strength := Dec ( strength ) ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: CALL 49547 0 1
6060: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 5907 0 1
// until not strength ;
6070: LD_VAR 0 2
6074: NOT
6075: IFFALSE 6037
// for i in mpBattleFlags do
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_EXP 23
6086: PUSH
6087: FOR_IN
6088: IFFALSE 6101
// KillBattleFlag ( i ) ;
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 419
6099: GO 6087
6101: POP
6102: POP
// end ;
6103: PPOPN 2
6105: END
// every 0 0$1 marked mpActive do var side , tmp ;
6106: GO 6108
6108: DISABLE
6109: LD_INT 0
6111: PPUSH
6112: PPUSH
// begin if mpSibBomb <= 1 then
6113: LD_EXP 28
6117: PUSH
6118: LD_INT 1
6120: LESSEQUAL
6121: IFFALSE 6125
// exit ;
6123: GO 6198
// tmp := mpSibBomb ;
6125: LD_ADDR_VAR 0 2
6129: PUSH
6130: LD_EXP 28
6134: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: LD_VAR 0 2
6151: PUSH
6152: LD_INT 35
6154: MINUS
6155: ST_TO_ADDR
// until not tmp ;
6156: LD_VAR 0 2
6160: NOT
6161: IFFALSE 6135
// for side := 1 to 8 do
6163: LD_ADDR_VAR 0 1
6167: PUSH
6168: DOUBLE
6169: LD_INT 1
6171: DEC
6172: ST_TO_ADDR
6173: LD_INT 8
6175: PUSH
6176: FOR_TO
6177: IFFALSE 6196
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6179: LD_INT 25
6181: PPUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 322
6194: GO 6176
6196: POP
6197: POP
// end ;
6198: PPOPN 2
6200: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
6205: PPUSH
// mpBuildUpTimeDelay := 0 ;
6206: LD_ADDR_EXP 46
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// if not mpBuildUpTime then
6214: LD_EXP 20
6218: NOT
6219: IFFALSE 6223
// exit ;
6221: GO 6412
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6223: LD_ADDR_EXP 46
6227: PUSH
6228: LD_INT 8400
6230: PUSH
6231: LD_INT 2100
6233: PUSH
6234: LD_EXP 20
6238: MUL
6239: PLUS
6240: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6241: LD_ADDR_EXP 47
6245: PUSH
6246: LD_INT 1
6248: ST_TO_ADDR
// for i := 1 to 8 do
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: DOUBLE
6255: LD_INT 1
6257: DEC
6258: ST_TO_ADDR
6259: LD_INT 8
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6410
// if mpSidePositions [ i ] then
6265: LD_EXP 7
6269: PUSH
6270: LD_VAR 0 2
6274: ARRAY
6275: IFFALSE 6408
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6277: LD_EXP 19
6281: PUSH
6282: LD_EXP 7
6286: PUSH
6287: LD_VAR 0 2
6291: ARRAY
6292: ARRAY
6293: PPUSH
6294: LD_INT 5
6296: PPUSH
6297: CALL_OW 424
// for j := 1 to 8 do
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: DOUBLE
6307: LD_INT 1
6309: DEC
6310: ST_TO_ADDR
6311: LD_INT 8
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6406
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6317: LD_EXP 7
6321: PUSH
6322: LD_VAR 0 3
6326: ARRAY
6327: IFFALSE 6376
6329: PUSH
6330: LD_EXP 8
6334: PUSH
6335: LD_VAR 0 2
6339: ARRAY
6340: PUSH
6341: LD_EXP 8
6345: PUSH
6346: LD_VAR 0 3
6350: ARRAY
6351: NONEQUAL
6352: IFTRUE 6375
6354: PUSH
6355: LD_EXP 11
6359: NOT
6360: IFFALSE 6374
6362: PUSH
6363: LD_VAR 0 2
6367: PUSH
6368: LD_VAR 0 3
6372: NONEQUAL
6373: AND
6374: OR
6375: AND
6376: IFFALSE 6404
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_EXP 19
6387: PUSH
6388: LD_EXP 7
6392: PUSH
6393: LD_VAR 0 2
6397: ARRAY
6398: ARRAY
6399: PPUSH
6400: CALL_OW 333
6404: GO 6314
6406: POP
6407: POP
// end ;
6408: GO 6262
6410: POP
6411: POP
// end ;
6412: LD_VAR 0 1
6416: RET
// function EndBuildUp ; var i , j ; begin
6417: LD_INT 0
6419: PPUSH
6420: PPUSH
6421: PPUSH
// mpBuildUpTimeActive := false ;
6422: LD_ADDR_EXP 47
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// for i := 1 to 8 do
6430: LD_ADDR_VAR 0 2
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_INT 8
6442: PUSH
6443: FOR_TO
6444: IFFALSE 6591
// if mpSidePositions [ i ] then
6446: LD_EXP 7
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: IFFALSE 6589
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6458: LD_EXP 19
6462: PUSH
6463: LD_EXP 7
6467: PUSH
6468: LD_VAR 0 2
6472: ARRAY
6473: ARRAY
6474: PPUSH
6475: LD_INT 0
6477: PPUSH
6478: CALL_OW 424
// for j := 1 to 8 do
6482: LD_ADDR_VAR 0 3
6486: PUSH
6487: DOUBLE
6488: LD_INT 1
6490: DEC
6491: ST_TO_ADDR
6492: LD_INT 8
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6587
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6498: LD_EXP 7
6502: PUSH
6503: LD_VAR 0 3
6507: ARRAY
6508: IFFALSE 6557
6510: PUSH
6511: LD_EXP 8
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PUSH
6522: LD_EXP 8
6526: PUSH
6527: LD_VAR 0 3
6531: ARRAY
6532: NONEQUAL
6533: IFTRUE 6556
6535: PUSH
6536: LD_EXP 11
6540: NOT
6541: IFFALSE 6555
6543: PUSH
6544: LD_VAR 0 2
6548: PUSH
6549: LD_VAR 0 3
6553: NONEQUAL
6554: AND
6555: OR
6556: AND
6557: IFFALSE 6585
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6559: LD_VAR 0 3
6563: PPUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_EXP 7
6573: PUSH
6574: LD_VAR 0 2
6578: ARRAY
6579: ARRAY
6580: PPUSH
6581: CALL_OW 334
6585: GO 6495
6587: POP
6588: POP
// end ;
6589: GO 6443
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 1
6597: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6598: LD_EXP 47
6602: IFFALSE 6781
6604: GO 6606
6606: DISABLE
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
// begin for i := 1 to 8 do
6611: LD_ADDR_VAR 0 1
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_INT 8
6623: PUSH
6624: FOR_TO
6625: IFFALSE 6778
// if mpSidePositions [ i ] then
6627: LD_EXP 7
6631: PUSH
6632: LD_VAR 0 1
6636: ARRAY
6637: IFFALSE 6776
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: LD_EXP 19
6648: PUSH
6649: LD_EXP 7
6653: PUSH
6654: LD_VAR 0 1
6658: ARRAY
6659: ARRAY
6660: PPUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 21
6666: PUSH
6667: LD_INT 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_OWVAR 2
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 70
6709: PUSH
6710: FOR_IN
6711: IFFALSE 6774
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6713: LD_EXP 8
6717: PUSH
6718: LD_VAR 0 1
6722: ARRAY
6723: PUSH
6724: LD_EXP 8
6728: PUSH
6729: LD_OWVAR 2
6733: ARRAY
6734: NONEQUAL
6735: IFTRUE 6758
6737: PUSH
6738: LD_EXP 11
6742: NOT
6743: IFFALSE 6757
6745: PUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_OWVAR 2
6755: NONEQUAL
6756: AND
6757: OR
6758: IFFALSE 6772
// ComMoveToArea ( un , BuildUpEscape ) ;
6760: LD_VAR 0 2
6764: PPUSH
6765: LD_INT 16
6767: PPUSH
6768: CALL_OW 113
6772: GO 6710
6774: POP
6775: POP
6776: GO 6624
6778: POP
6779: POP
// enable ;
6780: ENABLE
// end ;
6781: PPOPN 2
6783: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6784: LD_EXP 20
6788: IFFALSE 6838
6790: GO 6792
6792: DISABLE
6793: LD_INT 0
6795: PPUSH
// begin tmp := mpBuildUpTime ;
6796: LD_ADDR_VAR 0 1
6800: PUSH
6801: LD_EXP 20
6805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6806: LD_INT 35
6808: PPUSH
6809: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: LD_INT 35
6825: MINUS
6826: ST_TO_ADDR
// until not tmp ;
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6806
// EndBuildUp ;
6834: CALL 6417 0 0
// end ;
6838: PPOPN 1
6840: END
// every 0 0$1 trigger mpActive marked mpWin do
6841: LD_INT 100
6843: IFFALSE 6877
6845: GO 6847
6847: DISABLE
// begin if IAmServer then
6848: CALL_OW 518
6852: IFFALSE 6861
// wait ( 0 0$3 ) ;
6854: LD_INT 105
6856: PPUSH
6857: CALL_OW 67
// if Multiplayer then
6861: LD_OWVAR 4
6865: IFFALSE 6873
// YouWinInMultiplayer else
6867: CALL_OW 106
6871: GO 6877
// YouWin ;
6873: CALL_OW 103
// end ;
6877: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6878: LD_INT 0
6880: PPUSH
// result := false ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6889: LD_VAR 0 1
6893: PUSH
6894: LD_INT 1
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6908
6900: LD_INT 5
6902: DOUBLE
6903: EQUAL
6904: IFTRUE 6908
6906: GO 6981
6908: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6909: LD_ADDR_VAR 0 3
6913: PUSH
6914: LD_INT 22
6916: PUSH
6917: LD_VAR 0 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 33
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: LD_INT 5
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: PPUSH
6974: CALL 12220 0 1
6978: ST_TO_ADDR
// end ; GameTypeSurvival :
6979: GO 7220
6981: LD_INT 2
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 7119
6989: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 22
6997: PUSH
6998: LD_VAR 0 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 0
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: CALL 12220 0 1
7048: IFFALSE 7116
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_VAR 0 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 33
7078: PUSH
7079: LD_INT 3
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 33
7088: PUSH
7089: LD_INT 5
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 12220 0 1
7115: AND
7116: ST_TO_ADDR
// end ; GameTypeKing :
7117: GO 7220
7119: LD_INT 3
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7219
7127: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7128: LD_ADDR_VAR 0 3
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: LD_INT 21
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 33
7160: PUSH
7161: LD_INT 3
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 33
7170: PUSH
7171: LD_INT 5
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: PPUSH
7193: CALL 12220 0 1
7197: IFFALSE 7216
7199: PUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL 60116 0 1
7209: PUSH
7210: LD_EXP 35
7214: LESS
7215: AND
7216: ST_TO_ADDR
// end ; end ;
7217: GO 7220
7219: POP
// end ;
7220: LD_VAR 0 3
7224: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7225: LD_INT 100
7227: IFFALSE 7457
7229: GO 7231
7231: DISABLE
7232: LD_INT 0
7234: PPUSH
7235: PPUSH
// begin if Multiplayer then
7236: LD_OWVAR 4
7240: IFFALSE 7248
// SetPlayerSpectator ( ) else
7242: CALL_OW 572
7246: GO 7257
// FogOff ( your_side ) ;
7248: LD_OWVAR 2
7252: PPUSH
7253: CALL_OW 344
// repeat gameIsOn := false ;
7257: LD_ADDR_VAR 0 1
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// for i := 1 to 8 do
7265: LD_ADDR_VAR 0 2
7269: PUSH
7270: DOUBLE
7271: LD_INT 1
7273: DEC
7274: ST_TO_ADDR
7275: LD_INT 8
7277: PUSH
7278: FOR_TO
7279: IFFALSE 7409
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7281: LD_EXP 7
7285: PUSH
7286: LD_VAR 0 2
7290: ARRAY
7291: IFFALSE 7304
7293: PUSH
7294: LD_VAR 0 2
7298: PPUSH
7299: CALL_OW 108
7303: AND
7304: IFFALSE 7318
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_OWVAR 2
7316: NONEQUAL
7317: AND
7318: IFFALSE 7407
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7320: LD_EXP 8
7324: PUSH
7325: LD_VAR 0 2
7329: ARRAY
7330: NOT
7331: IFTRUE 7379
7333: PUSH
7334: LD_EXP 8
7338: PUSH
7339: LD_VAR 0 2
7343: ARRAY
7344: PUSH
7345: LD_EXP 8
7349: PUSH
7350: LD_OWVAR 2
7354: ARRAY
7355: NONEQUAL
7356: IFFALSE 7378
7358: PUSH
7359: LD_OWVAR 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: CALL_OW 81
7373: PUSH
7374: LD_INT 1
7376: NONEQUAL
7377: AND
7378: OR
7379: IFFALSE 7407
// if HasPowerByGameType ( mpGameType , i ) then
7381: LD_EXP 3
7385: PPUSH
7386: LD_VAR 0 2
7390: PPUSH
7391: CALL 6878 0 2
7395: IFFALSE 7407
// begin gameIsOn := true ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// break ;
7405: GO 7409
// end ;
7407: GO 7278
7409: POP
7410: POP
// wait ( 100 ) ;
7411: LD_INT 100
7413: PPUSH
7414: CALL_OW 67
// until not gameIsOn ;
7418: LD_VAR 0 1
7422: NOT
7423: IFFALSE 7257
// if IAmServer then
7425: CALL_OW 518
7429: IFFALSE 7438
// wait ( 0 0$3 ) ;
7431: LD_INT 105
7433: PPUSH
7434: CALL_OW 67
// if Multiplayer then
7438: LD_OWVAR 4
7442: IFFALSE 7450
// YouLostInMultiplayer else
7444: CALL_OW 107
7448: GO 7457
// YouLost (  ) ;
7450: LD_STRING 
7452: PPUSH
7453: CALL_OW 104
// end ;
7457: PPOPN 2
7459: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7460: LD_EXP 33
7464: IFFALSE 7848
7466: GO 7468
7468: DISABLE
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7476: LD_ADDR_VAR 0 5
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: LD_INT 4
7492: PUSH
7493: LD_INT 5
7495: PUSH
7496: LD_INT 6
7498: PUSH
7499: LD_INT 7
7501: PUSH
7502: LD_INT 8
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7515: LD_INT 350
7517: PPUSH
7518: CALL_OW 67
// for i := 1 to 8 do
7522: LD_ADDR_VAR 0 1
7526: PUSH
7527: DOUBLE
7528: LD_INT 1
7530: DEC
7531: ST_TO_ADDR
7532: LD_INT 8
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7818
// begin j := sides [ i ] ;
7538: LD_ADDR_VAR 0 2
7542: PUSH
7543: LD_VAR 0 5
7547: PUSH
7548: LD_VAR 0 1
7552: ARRAY
7553: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7554: LD_EXP 40
7558: PUSH
7559: LD_VAR 0 2
7563: ARRAY
7564: PPUSH
7565: CALL 12220 0 1
7569: IFFALSE 7582
7571: PUSH
7572: LD_VAR 0 2
7576: PPUSH
7577: CALL_OW 108
7581: AND
7582: IFFALSE 7600
7584: PUSH
7585: LD_EXP 3
7589: PPUSH
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL 6878 0 2
7599: AND
7600: IFFALSE 7816
// begin wait ( mpRespawn div 3 ) ;
7602: LD_EXP 33
7606: PUSH
7607: LD_INT 3
7609: DIV
7610: PPUSH
7611: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7615: LD_ADDR_VAR 0 3
7619: PUSH
7620: LD_INT 22
7622: PUSH
7623: LD_VAR 0 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 50
7634: PUSH
7635: EMPTY
7636: LIST
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: LD_INT 30
7643: PUSH
7644: LD_INT 0
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 30
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7676: LD_VAR 0 3
7680: NOT
7681: IFTRUE 7695
7683: PUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: CALL_OW 108
7693: NOT
7694: OR
7695: IFTRUE 7714
7697: PUSH
7698: LD_EXP 3
7702: PPUSH
7703: LD_VAR 0 2
7707: PPUSH
7708: CALL 6878 0 2
7712: NOT
7713: OR
7714: IFFALSE 7718
// continue ;
7716: GO 7535
// spawn := tmp [ 1 ] ;
7718: LD_ADDR_VAR 0 4
7722: PUSH
7723: LD_VAR 0 3
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7732: LD_EXP 40
7736: PUSH
7737: LD_VAR 0 2
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 4
7751: PPUSH
7752: CALL_OW 250
7756: PPUSH
7757: LD_VAR 0 4
7761: PPUSH
7762: CALL_OW 251
7766: PPUSH
7767: LD_INT 32
7769: PPUSH
7770: LD_INT 1
7772: PPUSH
7773: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7777: LD_ADDR_EXP 40
7781: PUSH
7782: LD_EXP 40
7786: PPUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: LD_EXP 40
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: CALL_OW 3
7810: PPUSH
7811: CALL_OW 1
7815: ST_TO_ADDR
// end ; end ;
7816: GO 7535
7818: POP
7819: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7820: LD_ADDR_VAR 0 5
7824: PUSH
7825: LD_VAR 0 5
7829: PPUSH
7830: LD_INT 1
7832: PPUSH
7833: LD_INT 8
7835: PPUSH
7836: LD_INT 1
7838: PPUSH
7839: CALL 14512 0 4
7843: ST_TO_ADDR
// until false ;
7844: LD_INT 0
7846: IFFALSE 7515
// end ;
7848: PPOPN 5
7850: END
// every 0 0$1 marked mpActive do
7851: GO 7853
7853: DISABLE
// begin enable ;
7854: ENABLE
// if not mpDisplayStrings then
7855: LD_EXP 38
7859: NOT
7860: IFFALSE 7871
// begin display_strings := [ ] ;
7862: LD_ADDR_OWVAR 47
7866: PUSH
7867: EMPTY
7868: ST_TO_ADDR
// exit ;
7869: GO 7881
// end ; display_strings := mpDisplayStrings ;
7871: LD_ADDR_OWVAR 47
7875: PUSH
7876: LD_EXP 38
7880: ST_TO_ADDR
// end ; end_of_file
7881: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7882: LD_INT 0
7884: PPUSH
7885: PPUSH
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
// if GetType ( un ) = unit_vehicle then
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 247
7902: PUSH
7903: LD_INT 2
7905: EQUAL
7906: IFFALSE 7910
// exit ;
7908: GO 8548
// side := GetSide ( un ) ;
7910: LD_ADDR_VAR 0 9
7914: PUSH
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 255
7924: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7925: LD_EXP 3
7929: PUSH
7930: LD_INT 2
7932: EQUAL
7933: IFFALSE 8009
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7935: LD_VAR 0 1
7939: PPUSH
7940: CALL_OW 266
7944: PUSH
7945: LD_INT 0
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: IN
7955: IFFALSE 8009
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7957: LD_ADDR_VAR 0 3
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_VAR 0 9
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 21
7976: PUSH
7977: LD_INT 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: PUSH
7993: FOR_IN
7994: IFFALSE 8007
// KillUnit ( i ) ;
7996: LD_VAR 0 3
8000: PPUSH
8001: CALL_OW 66
8005: GO 7993
8007: POP
8008: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 257
8018: PUSH
8019: LD_INT 12
8021: PUSH
8022: LD_INT 17
8024: PUSH
8025: LD_INT 15
8027: PUSH
8028: LD_INT 16
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: IN
8037: IFTRUE 8054
8039: PUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 263
8049: PUSH
8050: LD_INT 5
8052: EQUAL
8053: OR
8054: IFFALSE 8273
// begin tag := 0 ;
8056: LD_ADDR_VAR 0 5
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// for i := 1 to 8 do
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: DOUBLE
8070: LD_INT 1
8072: DEC
8073: ST_TO_ADDR
8074: LD_INT 8
8076: PUSH
8077: FOR_TO
8078: IFFALSE 8112
// if un in mpApePosIndex [ i ] then
8080: LD_VAR 0 1
8084: PUSH
8085: LD_EXP 32
8089: PUSH
8090: LD_VAR 0 3
8094: ARRAY
8095: IN
8096: IFFALSE 8110
// begin tag := i ;
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: LD_VAR 0 3
8107: ST_TO_ADDR
// break ;
8108: GO 8112
// end ;
8110: GO 8077
8112: POP
8113: POP
// if not tag then
8114: LD_VAR 0 5
8118: NOT
8119: IFFALSE 8123
// exit ;
8121: GO 8548
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8123: LD_ADDR_VAR 0 7
8127: PUSH
8128: LD_EXP 31
8132: PUSH
8133: LD_EXP 7
8137: PUSH
8138: LD_VAR 0 5
8142: ARRAY
8143: ARRAY
8144: ST_TO_ADDR
// if not area then
8145: LD_VAR 0 7
8149: NOT
8150: IFFALSE 8154
// exit ;
8152: GO 8548
// wait ( 4 4$00 ) ;
8154: LD_INT 8400
8156: PPUSH
8157: CALL_OW 67
// repeat wait ( 10 ) ;
8161: LD_INT 10
8163: PPUSH
8164: CALL_OW 67
// until not mpBlockRespThread ;
8168: LD_EXP 45
8172: NOT
8173: IFFALSE 8161
// mpBlockRespThread := true ;
8175: LD_ADDR_EXP 45
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8183: LD_INT 0
8185: PPUSH
8186: CALL 44279 0 1
// ape := CreateHuman ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: CALL_OW 44
8199: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8200: LD_ADDR_EXP 32
8204: PUSH
8205: LD_EXP 32
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: LD_EXP 32
8219: PUSH
8220: LD_VAR 0 5
8224: ARRAY
8225: PPUSH
8226: LD_VAR 0 4
8230: PPUSH
8231: CALL 48152 0 2
8235: PPUSH
8236: CALL_OW 1
8240: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8241: LD_VAR 0 4
8245: PPUSH
8246: LD_VAR 0 7
8250: PPUSH
8251: LD_INT 0
8253: PPUSH
8254: CALL_OW 49
// wait ( 10 ) ;
8258: LD_INT 10
8260: PPUSH
8261: CALL_OW 67
// mpBlockRespThread := false ;
8265: LD_ADDR_EXP 45
8269: PUSH
8270: LD_INT 0
8272: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8273: LD_VAR 0 1
8277: PPUSH
8278: CALL_OW 247
8282: PUSH
8283: LD_INT 1
8285: EQUAL
8286: IFFALSE 8303
8288: PUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL_OW 248
8298: PUSH
8299: LD_INT 0
8301: GREATER
8302: AND
8303: IFFALSE 8548
// begin if not mpRespawn then
8305: LD_EXP 33
8309: NOT
8310: IFFALSE 8314
// exit ;
8312: GO 8548
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL_OW 108
8323: NOT
8324: IFFALSE 8343
8326: PUSH
8327: LD_EXP 3
8331: PPUSH
8332: LD_VAR 0 9
8336: PPUSH
8337: CALL 6878 0 2
8341: NOT
8342: AND
8343: IFFALSE 8347
// exit ;
8345: GO 8548
// side := GetSide ( un ) ;
8347: LD_ADDR_VAR 0 9
8351: PUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 255
8361: ST_TO_ADDR
// nation := GetNation ( un ) ;
8362: LD_ADDR_VAR 0 8
8366: PUSH
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 248
8376: ST_TO_ADDR
// class := GetClass ( un ) ;
8377: LD_ADDR_VAR 0 6
8381: PUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 257
8391: ST_TO_ADDR
// if class > 4 then
8392: LD_VAR 0 6
8396: PUSH
8397: LD_INT 4
8399: GREATER
8400: IFFALSE 8410
// class := 1 ;
8402: LD_ADDR_VAR 0 6
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// repeat wait ( 10 ) ;
8410: LD_INT 10
8412: PPUSH
8413: CALL_OW 67
// until not mpBlockRespThread ;
8417: LD_EXP 45
8421: NOT
8422: IFFALSE 8410
// mpBlockRespThread := true ;
8424: LD_ADDR_EXP 45
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// uc_side := side ;
8432: LD_ADDR_OWVAR 20
8436: PUSH
8437: LD_VAR 0 9
8441: ST_TO_ADDR
// uc_nation := nation ;
8442: LD_ADDR_OWVAR 21
8446: PUSH
8447: LD_VAR 0 8
8451: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8452: LD_INT 0
8454: PPUSH
8455: LD_VAR 0 6
8459: PPUSH
8460: LD_INT 2
8462: PPUSH
8463: CALL_OW 380
// un := CreateHuman ;
8467: LD_ADDR_VAR 0 1
8471: PUSH
8472: CALL_OW 44
8476: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8477: LD_ADDR_EXP 40
8481: PUSH
8482: LD_EXP 40
8486: PPUSH
8487: LD_VAR 0 9
8491: PPUSH
8492: LD_EXP 40
8496: PUSH
8497: LD_VAR 0 9
8501: ARRAY
8502: PPUSH
8503: LD_EXP 40
8507: PUSH
8508: LD_VAR 0 9
8512: ARRAY
8513: PUSH
8514: LD_INT 1
8516: PLUS
8517: PPUSH
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 1
8527: PPUSH
8528: CALL_OW 1
8532: ST_TO_ADDR
// wait ( 10 ) ;
8533: LD_INT 10
8535: PPUSH
8536: CALL_OW 67
// mpBlockRespThread := false ;
8540: LD_ADDR_EXP 45
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// end ; end ;
8548: LD_VAR 0 2
8552: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8553: LD_INT 0
8555: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL_OW 266
8565: PUSH
8566: LD_INT 0
8568: PUSH
8569: LD_INT 1
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: IN
8576: IFFALSE 8601
// SetBName ( building , @ & GetSide ( building ) ) ;
8578: LD_VAR 0 1
8582: PPUSH
8583: LD_STRING @
8585: PUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 255
8595: STR
8596: PPUSH
8597: CALL_OW 500
// end ;
8601: LD_VAR 0 2
8605: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8610: LD_EXP 3
8614: PUSH
8615: LD_INT 2
8617: EQUAL
8618: IFFALSE 8642
8620: PUSH
8621: LD_VAR 0 1
8625: PPUSH
8626: CALL_OW 266
8630: PUSH
8631: LD_INT 0
8633: PUSH
8634: LD_INT 1
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: IN
8641: AND
8642: IFFALSE 8721
// begin SetSide ( building , oldSide ) ;
8644: LD_VAR 0 1
8648: PPUSH
8649: LD_VAR 0 2
8653: PPUSH
8654: CALL_OW 235
// KillUnit ( building ) ;
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8667: LD_ADDR_VAR 0 5
8671: PUSH
8672: LD_INT 22
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 21
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8717
// KillUnit ( i ) ;
8706: LD_VAR 0 5
8710: PPUSH
8711: CALL_OW 66
8715: GO 8703
8717: POP
8718: POP
// exit ;
8719: GO 8766
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8721: LD_VAR 0 1
8725: PPUSH
8726: CALL_OW 266
8730: PUSH
8731: LD_INT 0
8733: PUSH
8734: LD_INT 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: IN
8741: IFFALSE 8766
// SetBName ( building , @ & GetSide ( building ) ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_STRING @
8750: PUSH
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 255
8760: STR
8761: PPUSH
8762: CALL_OW 500
// end ;
8766: LD_VAR 0 4
8770: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8771: LD_INT 0
8773: PPUSH
8774: PPUSH
8775: PPUSH
// if mpGameType <> GameTypeFamine then
8776: LD_EXP 3
8780: PUSH
8781: LD_INT 5
8783: NONEQUAL
8784: IFFALSE 8788
// exit ;
8786: GO 9002
// for i := 1 to mpGlobalOilDeposits do
8788: LD_ADDR_VAR 0 6
8792: PUSH
8793: DOUBLE
8794: LD_INT 1
8796: DEC
8797: ST_TO_ADDR
8798: LD_EXP 41
8802: PUSH
8803: FOR_TO
8804: IFFALSE 9000
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8806: LD_EXP 41
8810: PUSH
8811: LD_VAR 0 6
8815: ARRAY
8816: PUSH
8817: LD_INT 1
8819: ARRAY
8820: PPUSH
8821: LD_EXP 41
8825: PUSH
8826: LD_VAR 0 6
8830: ARRAY
8831: PUSH
8832: LD_INT 2
8834: ARRAY
8835: PPUSH
8836: CALL_OW 428
8840: PUSH
8841: LD_VAR 0 1
8845: EQUAL
8846: IFFALSE 8998
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_EXP 41
8857: PUSH
8858: LD_VAR 0 6
8862: ARRAY
8863: PUSH
8864: LD_INT 3
8866: ARRAY
8867: ST_TO_ADDR
// value := Dec ( value ) ;
8868: LD_ADDR_VAR 0 7
8872: PUSH
8873: LD_VAR 0 7
8877: PPUSH
8878: CALL 49547 0 1
8882: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8883: LD_ADDR_EXP 41
8887: PUSH
8888: LD_EXP 41
8892: PPUSH
8893: LD_VAR 0 6
8897: PPUSH
8898: LD_EXP 41
8902: PUSH
8903: LD_VAR 0 6
8907: ARRAY
8908: PPUSH
8909: LD_INT 3
8911: PPUSH
8912: LD_VAR 0 7
8916: PPUSH
8917: CALL_OW 1
8921: PPUSH
8922: CALL_OW 1
8926: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: LD_VAR 0 7
8936: PPUSH
8937: CALL_OW 505
// if value = 0 then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_INT 0
8948: EQUAL
8949: IFFALSE 8998
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8951: LD_EXP 41
8955: PUSH
8956: LD_VAR 0 6
8960: ARRAY
8961: PUSH
8962: LD_INT 1
8964: ARRAY
8965: PPUSH
8966: LD_EXP 41
8970: PUSH
8971: LD_VAR 0 6
8975: ARRAY
8976: PUSH
8977: LD_INT 2
8979: ARRAY
8980: PPUSH
8981: CALL_OW 63
// KillUnit ( building ) ;
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 66
// exit ;
8994: POP
8995: POP
8996: GO 9002
// end ; end ; end ;
8998: GO 8803
9000: POP
9001: POP
// end ;
9002: LD_VAR 0 5
9006: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9007: LD_INT 0
9009: PPUSH
9010: PPUSH
9011: PPUSH
// if mpGameType <> GameTypeFamine then
9012: LD_EXP 3
9016: PUSH
9017: LD_INT 5
9019: NONEQUAL
9020: IFFALSE 9024
// exit ;
9022: GO 9238
// for i := 1 to mpGlobalSibDeposits do
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_EXP 42
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9236
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9042: LD_EXP 42
9046: PUSH
9047: LD_VAR 0 6
9051: ARRAY
9052: PUSH
9053: LD_INT 1
9055: ARRAY
9056: PPUSH
9057: LD_EXP 42
9061: PUSH
9062: LD_VAR 0 6
9066: ARRAY
9067: PUSH
9068: LD_INT 2
9070: ARRAY
9071: PPUSH
9072: CALL_OW 428
9076: PUSH
9077: LD_VAR 0 1
9081: EQUAL
9082: IFFALSE 9234
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9084: LD_ADDR_VAR 0 7
9088: PUSH
9089: LD_EXP 42
9093: PUSH
9094: LD_VAR 0 6
9098: ARRAY
9099: PUSH
9100: LD_INT 3
9102: ARRAY
9103: ST_TO_ADDR
// value := Dec ( value ) ;
9104: LD_ADDR_VAR 0 7
9108: PUSH
9109: LD_VAR 0 7
9113: PPUSH
9114: CALL 49547 0 1
9118: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9119: LD_ADDR_EXP 42
9123: PUSH
9124: LD_EXP 42
9128: PPUSH
9129: LD_VAR 0 6
9133: PPUSH
9134: LD_EXP 42
9138: PUSH
9139: LD_VAR 0 6
9143: ARRAY
9144: PPUSH
9145: LD_INT 3
9147: PPUSH
9148: LD_VAR 0 7
9152: PPUSH
9153: CALL_OW 1
9157: PPUSH
9158: CALL_OW 1
9162: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9163: LD_VAR 0 1
9167: PPUSH
9168: LD_VAR 0 7
9172: PPUSH
9173: CALL_OW 505
// if value = 0 then
9177: LD_VAR 0 7
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9234
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9187: LD_EXP 42
9191: PUSH
9192: LD_VAR 0 6
9196: ARRAY
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PPUSH
9202: LD_EXP 42
9206: PUSH
9207: LD_VAR 0 6
9211: ARRAY
9212: PUSH
9213: LD_INT 2
9215: ARRAY
9216: PPUSH
9217: CALL_OW 63
// KillUnit ( building ) ;
9221: LD_VAR 0 1
9225: PPUSH
9226: CALL_OW 66
// exit ;
9230: POP
9231: POP
9232: GO 9238
// end ; end ; end ;
9234: GO 9039
9236: POP
9237: POP
// end ; end_of_file
9238: LD_VAR 0 5
9242: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9243: LD_EXP 39
9247: IFFALSE 9255
9249: PUSH
9250: CALL 9465 0 0
9254: AND
9255: IFFALSE 9263
9257: PUSH
9258: LD_OWVAR 4
9262: AND
9263: IFFALSE 9462
9265: GO 9267
9267: DISABLE
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
// begin canWin := false ;
9272: LD_ADDR_VAR 0 2
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// if not HasPower ( your_side ) then
9280: LD_OWVAR 2
9284: PPUSH
9285: CALL 9507 0 1
9289: NOT
9290: IFFALSE 9301
// begin Multiplayer_Loose_Message ;
9292: CALL_OW 521
// enable ( mpLose ) ;
9296: LD_INT 102
9298: ENABLE_MARKED
// end else
9299: GO 9462
// begin canWin := true ;
9301: LD_ADDR_VAR 0 2
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// for i := 1 to 8 do
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: DOUBLE
9315: LD_INT 1
9317: DEC
9318: ST_TO_ADDR
9319: LD_INT 8
9321: PUSH
9322: FOR_TO
9323: IFFALSE 9448
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9325: LD_EXP 7
9329: PUSH
9330: LD_VAR 0 1
9334: ARRAY
9335: IFFALSE 9348
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 108
9347: AND
9348: IFFALSE 9362
9350: PUSH
9351: LD_VAR 0 1
9355: PUSH
9356: LD_OWVAR 2
9360: NONEQUAL
9361: AND
9362: IFFALSE 9446
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9364: LD_EXP 8
9368: PUSH
9369: LD_VAR 0 1
9373: ARRAY
9374: NOT
9375: IFTRUE 9423
9377: PUSH
9378: LD_EXP 8
9382: PUSH
9383: LD_VAR 0 1
9387: ARRAY
9388: PUSH
9389: LD_EXP 8
9393: PUSH
9394: LD_OWVAR 2
9398: ARRAY
9399: NONEQUAL
9400: IFFALSE 9422
9402: PUSH
9403: LD_OWVAR 2
9407: PPUSH
9408: LD_VAR 0 1
9412: PPUSH
9413: CALL_OW 81
9417: PUSH
9418: LD_INT 1
9420: NONEQUAL
9421: AND
9422: OR
9423: IFFALSE 9446
// if HasPower ( i ) then
9425: LD_VAR 0 1
9429: PPUSH
9430: CALL 9507 0 1
9434: IFFALSE 9446
// begin canWin := false ;
9436: LD_ADDR_VAR 0 2
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// break ;
9444: GO 9448
// end ;
9446: GO 9322
9448: POP
9449: POP
// if canWin then
9450: LD_VAR 0 2
9454: IFFALSE 9461
// enable ( mpWin ) else
9456: LD_INT 101
9458: ENABLE_MARKED
9459: GO 9462
// enable ;
9461: ENABLE
// end ; end ;
9462: PPOPN 2
9464: END
// function CanWinLoose ; begin
9465: LD_INT 0
9467: PPUSH
// result := true ;
9468: LD_ADDR_VAR 0 1
9472: PUSH
9473: LD_INT 1
9475: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9476: CALL_OW 531
9480: IFFALSE 9492
9482: PUSH
9483: CALL_OW 519
9487: PUSH
9488: LD_INT 1
9490: GREATER
9491: AND
9492: IFFALSE 9502
// result := false ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// end ;
9502: LD_VAR 0 1
9506: RET
// function HasPower ( i ) ; begin
9507: LD_INT 0
9509: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_INT 22
9517: PUSH
9518: LD_VAR 0 1
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 2
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 1
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 33
9542: PUSH
9543: LD_INT 3
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 33
9552: PUSH
9553: LD_INT 5
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 69
9574: ST_TO_ADDR
// end ; end_of_file
9575: LD_VAR 0 2
9579: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9580: LD_EXP 39
9584: IFFALSE 9627
9586: GO 9588
9588: DISABLE
9589: LD_INT 0
9591: PPUSH
// begin for i := 1 to 8 do
9592: LD_ADDR_VAR 0 1
9596: PUSH
9597: DOUBLE
9598: LD_INT 1
9600: DEC
9601: ST_TO_ADDR
9602: LD_INT 8
9604: PUSH
9605: FOR_TO
9606: IFFALSE 9625
// SetRestrict ( b_depot , i , state_disabled ) ;
9608: LD_INT 0
9610: PPUSH
9611: LD_VAR 0 1
9615: PPUSH
9616: LD_INT 0
9618: PPUSH
9619: CALL_OW 324
9623: GO 9605
9625: POP
9626: POP
// end ;
9627: PPOPN 1
9629: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9630: LD_EXP 39
9634: IFFALSE 9642
9636: PUSH
9637: CALL 9852 0 0
9641: AND
9642: IFFALSE 9650
9644: PUSH
9645: LD_OWVAR 4
9649: AND
9650: IFFALSE 9849
9652: GO 9654
9654: DISABLE
9655: LD_INT 0
9657: PPUSH
9658: PPUSH
// begin canWin := false ;
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: LD_INT 0
9666: ST_TO_ADDR
// if not HasPower ( your_side ) then
9667: LD_OWVAR 2
9671: PPUSH
9672: CALL 9894 0 1
9676: NOT
9677: IFFALSE 9688
// begin Multiplayer_Loose_Message ;
9679: CALL_OW 521
// enable ( mpLose ) ;
9683: LD_INT 102
9685: ENABLE_MARKED
// end else
9686: GO 9849
// begin canWin := true ;
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// for i := 1 to 8 do
9696: LD_ADDR_VAR 0 1
9700: PUSH
9701: DOUBLE
9702: LD_INT 1
9704: DEC
9705: ST_TO_ADDR
9706: LD_INT 8
9708: PUSH
9709: FOR_TO
9710: IFFALSE 9835
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9712: LD_EXP 7
9716: PUSH
9717: LD_VAR 0 1
9721: ARRAY
9722: IFFALSE 9735
9724: PUSH
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 108
9734: AND
9735: IFFALSE 9749
9737: PUSH
9738: LD_VAR 0 1
9742: PUSH
9743: LD_OWVAR 2
9747: NONEQUAL
9748: AND
9749: IFFALSE 9833
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9751: LD_EXP 8
9755: PUSH
9756: LD_VAR 0 1
9760: ARRAY
9761: NOT
9762: IFTRUE 9810
9764: PUSH
9765: LD_EXP 8
9769: PUSH
9770: LD_VAR 0 1
9774: ARRAY
9775: PUSH
9776: LD_EXP 8
9780: PUSH
9781: LD_OWVAR 2
9785: ARRAY
9786: NONEQUAL
9787: IFFALSE 9809
9789: PUSH
9790: LD_OWVAR 2
9794: PPUSH
9795: LD_VAR 0 1
9799: PPUSH
9800: CALL_OW 81
9804: PUSH
9805: LD_INT 1
9807: NONEQUAL
9808: AND
9809: OR
9810: IFFALSE 9833
// if HasPower ( i ) then
9812: LD_VAR 0 1
9816: PPUSH
9817: CALL 9894 0 1
9821: IFFALSE 9833
// begin canWin := false ;
9823: LD_ADDR_VAR 0 2
9827: PUSH
9828: LD_INT 0
9830: ST_TO_ADDR
// break ;
9831: GO 9835
// end ;
9833: GO 9709
9835: POP
9836: POP
// if canWin then
9837: LD_VAR 0 2
9841: IFFALSE 9848
// enable ( mpWin ) else
9843: LD_INT 101
9845: ENABLE_MARKED
9846: GO 9849
// enable ;
9848: ENABLE
// end ; end ;
9849: PPOPN 2
9851: END
// function CanWinLoose ; begin
9852: LD_INT 0
9854: PPUSH
// result := true ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 1
9862: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9863: CALL_OW 531
9867: IFFALSE 9879
9869: PUSH
9870: CALL_OW 519
9874: PUSH
9875: LD_INT 1
9877: GREATER
9878: AND
9879: IFFALSE 9889
// result := false ;
9881: LD_ADDR_VAR 0 1
9885: PUSH
9886: LD_INT 0
9888: ST_TO_ADDR
// end ;
9889: LD_VAR 0 1
9893: RET
// function HasPower ( i ) ; begin
9894: LD_INT 0
9896: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9897: LD_INT 22
9899: PUSH
9900: LD_VAR 0 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 0
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 1
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: NOT
9946: IFFALSE 9950
// exit ;
9948: GO 10015
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9950: LD_ADDR_VAR 0 2
9954: PUSH
9955: LD_INT 22
9957: PUSH
9958: LD_VAR 0 1
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 2
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 33
9982: PUSH
9983: LD_INT 3
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 33
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PPUSH
10010: CALL_OW 69
10014: ST_TO_ADDR
// end ; end_of_file
10015: LD_VAR 0 2
10019: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10020: LD_INT 0
10022: PPUSH
10023: PPUSH
// if exist_mode then
10024: LD_VAR 0 2
10028: IFFALSE 10074
// begin unit := CreateCharacter ( prefix & ident ) ;
10030: LD_ADDR_VAR 0 5
10034: PUSH
10035: LD_VAR 0 3
10039: PUSH
10040: LD_VAR 0 1
10044: STR
10045: PPUSH
10046: CALL_OW 34
10050: ST_TO_ADDR
// if unit then
10051: LD_VAR 0 5
10055: IFFALSE 10072
// DeleteCharacters ( prefix & ident ) ;
10057: LD_VAR 0 3
10061: PUSH
10062: LD_VAR 0 1
10066: STR
10067: PPUSH
10068: CALL_OW 40
// end else
10072: GO 10089
// unit := NewCharacter ( ident ) ;
10074: LD_ADDR_VAR 0 5
10078: PUSH
10079: LD_VAR 0 1
10083: PPUSH
10084: CALL_OW 25
10088: ST_TO_ADDR
// result := unit ;
10089: LD_ADDR_VAR 0 4
10093: PUSH
10094: LD_VAR 0 5
10098: ST_TO_ADDR
// end ;
10099: LD_VAR 0 4
10103: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10104: LD_INT 0
10106: PPUSH
10107: PPUSH
// if exist_mode then
10108: LD_VAR 0 2
10112: IFFALSE 10137
// unit := CreateCharacter ( prefix & ident ) else
10114: LD_ADDR_VAR 0 5
10118: PUSH
10119: LD_VAR 0 3
10123: PUSH
10124: LD_VAR 0 1
10128: STR
10129: PPUSH
10130: CALL_OW 34
10134: ST_TO_ADDR
10135: GO 10152
// unit := NewCharacter ( ident ) ;
10137: LD_ADDR_VAR 0 5
10141: PUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 25
10151: ST_TO_ADDR
// result := unit ;
10152: LD_ADDR_VAR 0 4
10156: PUSH
10157: LD_VAR 0 5
10161: ST_TO_ADDR
// end ;
10162: LD_VAR 0 4
10166: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
// if not side or not nation then
10171: LD_VAR 0 1
10175: NOT
10176: IFTRUE 10185
10178: PUSH
10179: LD_VAR 0 2
10183: NOT
10184: OR
10185: IFFALSE 10189
// exit ;
10187: GO 10959
// case nation of nation_american :
10189: LD_VAR 0 2
10193: PUSH
10194: LD_INT 1
10196: DOUBLE
10197: EQUAL
10198: IFTRUE 10202
10200: GO 10416
10202: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 35
10210: PUSH
10211: LD_INT 45
10213: PUSH
10214: LD_INT 46
10216: PUSH
10217: LD_INT 47
10219: PUSH
10220: LD_INT 82
10222: PUSH
10223: LD_INT 83
10225: PUSH
10226: LD_INT 84
10228: PUSH
10229: LD_INT 85
10231: PUSH
10232: LD_INT 86
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: LD_INT 6
10243: PUSH
10244: LD_INT 15
10246: PUSH
10247: LD_INT 16
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: LD_INT 12
10255: PUSH
10256: LD_INT 13
10258: PUSH
10259: LD_INT 10
10261: PUSH
10262: LD_INT 14
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 25
10276: PUSH
10277: LD_INT 32
10279: PUSH
10280: LD_INT 27
10282: PUSH
10283: LD_INT 36
10285: PUSH
10286: LD_INT 69
10288: PUSH
10289: LD_INT 39
10291: PUSH
10292: LD_INT 34
10294: PUSH
10295: LD_INT 40
10297: PUSH
10298: LD_INT 48
10300: PUSH
10301: LD_INT 49
10303: PUSH
10304: LD_INT 50
10306: PUSH
10307: LD_INT 51
10309: PUSH
10310: LD_INT 52
10312: PUSH
10313: LD_INT 53
10315: PUSH
10316: LD_INT 54
10318: PUSH
10319: LD_INT 55
10321: PUSH
10322: LD_INT 56
10324: PUSH
10325: LD_INT 57
10327: PUSH
10328: LD_INT 58
10330: PUSH
10331: LD_INT 59
10333: PUSH
10334: LD_INT 60
10336: PUSH
10337: LD_INT 61
10339: PUSH
10340: LD_INT 62
10342: PUSH
10343: LD_INT 80
10345: PUSH
10346: LD_INT 82
10348: PUSH
10349: LD_INT 83
10351: PUSH
10352: LD_INT 84
10354: PUSH
10355: LD_INT 85
10357: PUSH
10358: LD_INT 86
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: ST_TO_ADDR
10414: GO 10881
10416: LD_INT 2
10418: DOUBLE
10419: EQUAL
10420: IFTRUE 10424
10422: GO 10650
10424: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: LD_INT 35
10432: PUSH
10433: LD_INT 45
10435: PUSH
10436: LD_INT 46
10438: PUSH
10439: LD_INT 47
10441: PUSH
10442: LD_INT 82
10444: PUSH
10445: LD_INT 83
10447: PUSH
10448: LD_INT 84
10450: PUSH
10451: LD_INT 85
10453: PUSH
10454: LD_INT 87
10456: PUSH
10457: LD_INT 70
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: LD_INT 11
10465: PUSH
10466: LD_INT 3
10468: PUSH
10469: LD_INT 4
10471: PUSH
10472: LD_INT 5
10474: PUSH
10475: LD_INT 6
10477: PUSH
10478: LD_INT 15
10480: PUSH
10481: LD_INT 18
10483: PUSH
10484: LD_INT 7
10486: PUSH
10487: LD_INT 17
10489: PUSH
10490: LD_INT 8
10492: PUSH
10493: LD_INT 20
10495: PUSH
10496: LD_INT 21
10498: PUSH
10499: LD_INT 22
10501: PUSH
10502: LD_INT 72
10504: PUSH
10505: LD_INT 26
10507: PUSH
10508: LD_INT 69
10510: PUSH
10511: LD_INT 39
10513: PUSH
10514: LD_INT 40
10516: PUSH
10517: LD_INT 41
10519: PUSH
10520: LD_INT 42
10522: PUSH
10523: LD_INT 43
10525: PUSH
10526: LD_INT 48
10528: PUSH
10529: LD_INT 49
10531: PUSH
10532: LD_INT 50
10534: PUSH
10535: LD_INT 51
10537: PUSH
10538: LD_INT 52
10540: PUSH
10541: LD_INT 53
10543: PUSH
10544: LD_INT 54
10546: PUSH
10547: LD_INT 55
10549: PUSH
10550: LD_INT 56
10552: PUSH
10553: LD_INT 60
10555: PUSH
10556: LD_INT 61
10558: PUSH
10559: LD_INT 62
10561: PUSH
10562: LD_INT 66
10564: PUSH
10565: LD_INT 67
10567: PUSH
10568: LD_INT 68
10570: PUSH
10571: LD_INT 81
10573: PUSH
10574: LD_INT 82
10576: PUSH
10577: LD_INT 83
10579: PUSH
10580: LD_INT 84
10582: PUSH
10583: LD_INT 85
10585: PUSH
10586: LD_INT 87
10588: PUSH
10589: LD_INT 88
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: ST_TO_ADDR
10648: GO 10881
10650: LD_INT 3
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10880
10658: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10659: LD_ADDR_VAR 0 4
10663: PUSH
10664: LD_INT 46
10666: PUSH
10667: LD_INT 47
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: LD_INT 82
10678: PUSH
10679: LD_INT 83
10681: PUSH
10682: LD_INT 84
10684: PUSH
10685: LD_INT 85
10687: PUSH
10688: LD_INT 86
10690: PUSH
10691: LD_INT 11
10693: PUSH
10694: LD_INT 9
10696: PUSH
10697: LD_INT 20
10699: PUSH
10700: LD_INT 19
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 24
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 28
10717: PUSH
10718: LD_INT 29
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 31
10726: PUSH
10727: LD_INT 37
10729: PUSH
10730: LD_INT 38
10732: PUSH
10733: LD_INT 32
10735: PUSH
10736: LD_INT 27
10738: PUSH
10739: LD_INT 33
10741: PUSH
10742: LD_INT 69
10744: PUSH
10745: LD_INT 39
10747: PUSH
10748: LD_INT 34
10750: PUSH
10751: LD_INT 40
10753: PUSH
10754: LD_INT 71
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 44
10762: PUSH
10763: LD_INT 48
10765: PUSH
10766: LD_INT 49
10768: PUSH
10769: LD_INT 50
10771: PUSH
10772: LD_INT 51
10774: PUSH
10775: LD_INT 52
10777: PUSH
10778: LD_INT 53
10780: PUSH
10781: LD_INT 54
10783: PUSH
10784: LD_INT 55
10786: PUSH
10787: LD_INT 56
10789: PUSH
10790: LD_INT 57
10792: PUSH
10793: LD_INT 58
10795: PUSH
10796: LD_INT 59
10798: PUSH
10799: LD_INT 63
10801: PUSH
10802: LD_INT 64
10804: PUSH
10805: LD_INT 65
10807: PUSH
10808: LD_INT 82
10810: PUSH
10811: LD_INT 83
10813: PUSH
10814: LD_INT 84
10816: PUSH
10817: LD_INT 85
10819: PUSH
10820: LD_INT 86
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: ST_TO_ADDR
10878: GO 10881
10880: POP
// if state > - 1 and state < 3 then
10881: LD_VAR 0 3
10885: PUSH
10886: LD_INT 1
10888: NEG
10889: GREATER
10890: IFFALSE 10902
10892: PUSH
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 3
10900: LESS
10901: AND
10902: IFFALSE 10959
// for i in result do
10904: LD_ADDR_VAR 0 5
10908: PUSH
10909: LD_VAR 0 4
10913: PUSH
10914: FOR_IN
10915: IFFALSE 10957
// if GetTech ( i , side ) <> state then
10917: LD_VAR 0 5
10921: PPUSH
10922: LD_VAR 0 1
10926: PPUSH
10927: CALL_OW 321
10931: PUSH
10932: LD_VAR 0 3
10936: NONEQUAL
10937: IFFALSE 10955
// result := result diff i ;
10939: LD_ADDR_VAR 0 4
10943: PUSH
10944: LD_VAR 0 4
10948: PUSH
10949: LD_VAR 0 5
10953: DIFF
10954: ST_TO_ADDR
10955: GO 10914
10957: POP
10958: POP
// end ;
10959: LD_VAR 0 4
10963: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10964: LD_INT 0
10966: PPUSH
10967: PPUSH
10968: PPUSH
// result := true ;
10969: LD_ADDR_VAR 0 3
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: LD_VAR 0 2
10986: PPUSH
10987: CALL_OW 480
10991: ST_TO_ADDR
// if not tmp then
10992: LD_VAR 0 5
10996: NOT
10997: IFFALSE 11001
// exit ;
10999: GO 11050
// for i in tmp do
11001: LD_ADDR_VAR 0 4
11005: PUSH
11006: LD_VAR 0 5
11010: PUSH
11011: FOR_IN
11012: IFFALSE 11048
// if GetTech ( i , side ) <> state_researched then
11014: LD_VAR 0 4
11018: PPUSH
11019: LD_VAR 0 1
11023: PPUSH
11024: CALL_OW 321
11028: PUSH
11029: LD_INT 2
11031: NONEQUAL
11032: IFFALSE 11046
// begin result := false ;
11034: LD_ADDR_VAR 0 3
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// exit ;
11042: POP
11043: POP
11044: GO 11050
// end ;
11046: GO 11011
11048: POP
11049: POP
// end ;
11050: LD_VAR 0 3
11054: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11055: LD_INT 0
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11070: LD_VAR 0 1
11074: NOT
11075: IFTRUE 11092
11077: PUSH
11078: LD_VAR 0 1
11082: PPUSH
11083: CALL_OW 257
11087: PUSH
11088: LD_INT 9
11090: NONEQUAL
11091: OR
11092: IFFALSE 11096
// exit ;
11094: GO 11675
// side := GetSide ( unit ) ;
11096: LD_ADDR_VAR 0 9
11100: PUSH
11101: LD_VAR 0 1
11105: PPUSH
11106: CALL_OW 255
11110: ST_TO_ADDR
// tech_space := tech_spacanom ;
11111: LD_ADDR_VAR 0 12
11115: PUSH
11116: LD_INT 29
11118: ST_TO_ADDR
// tech_time := tech_taurad ;
11119: LD_ADDR_VAR 0 13
11123: PUSH
11124: LD_INT 28
11126: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11127: LD_ADDR_VAR 0 11
11131: PUSH
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL_OW 310
11141: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11142: LD_VAR 0 11
11146: PPUSH
11147: CALL_OW 247
11151: PUSH
11152: LD_INT 2
11154: EQUAL
11155: IFFALSE 11159
// exit ;
11157: GO 11675
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11159: LD_ADDR_VAR 0 8
11163: PUSH
11164: LD_INT 81
11166: PUSH
11167: LD_VAR 0 9
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: LD_INT 21
11181: PUSH
11182: LD_INT 3
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 69
11201: ST_TO_ADDR
// if not tmp then
11202: LD_VAR 0 8
11206: NOT
11207: IFFALSE 11211
// exit ;
11209: GO 11675
// if in_unit then
11211: LD_VAR 0 11
11215: IFFALSE 11239
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11217: LD_ADDR_VAR 0 10
11221: PUSH
11222: LD_VAR 0 8
11226: PPUSH
11227: LD_VAR 0 11
11231: PPUSH
11232: CALL_OW 74
11236: ST_TO_ADDR
11237: GO 11259
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11239: LD_ADDR_VAR 0 10
11243: PUSH
11244: LD_VAR 0 8
11248: PPUSH
11249: LD_VAR 0 1
11253: PPUSH
11254: CALL_OW 74
11258: ST_TO_ADDR
// if not enemy then
11259: LD_VAR 0 10
11263: NOT
11264: IFFALSE 11268
// exit ;
11266: GO 11675
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11268: LD_VAR 0 11
11272: IFFALSE 11294
11274: PUSH
11275: LD_VAR 0 11
11279: PPUSH
11280: LD_VAR 0 10
11284: PPUSH
11285: CALL_OW 296
11289: PUSH
11290: LD_INT 13
11292: GREATER
11293: AND
11294: IFTRUE 11316
11296: PUSH
11297: LD_VAR 0 1
11301: PPUSH
11302: LD_VAR 0 10
11306: PPUSH
11307: CALL_OW 296
11311: PUSH
11312: LD_INT 12
11314: GREATER
11315: OR
11316: IFFALSE 11320
// exit ;
11318: GO 11675
// missile := [ 1 ] ;
11320: LD_ADDR_VAR 0 14
11324: PUSH
11325: LD_INT 1
11327: PUSH
11328: EMPTY
11329: LIST
11330: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11331: LD_VAR 0 9
11335: PPUSH
11336: LD_VAR 0 12
11340: PPUSH
11341: CALL_OW 325
11345: IFFALSE 11374
// missile := Replace ( missile , missile + 1 , 2 ) ;
11347: LD_ADDR_VAR 0 14
11351: PUSH
11352: LD_VAR 0 14
11356: PPUSH
11357: LD_VAR 0 14
11361: PUSH
11362: LD_INT 1
11364: PLUS
11365: PPUSH
11366: LD_INT 2
11368: PPUSH
11369: CALL_OW 1
11373: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11374: LD_VAR 0 9
11378: PPUSH
11379: LD_VAR 0 13
11383: PPUSH
11384: CALL_OW 325
11388: IFFALSE 11412
11390: PUSH
11391: LD_VAR 0 10
11395: PPUSH
11396: CALL_OW 255
11400: PPUSH
11401: LD_VAR 0 13
11405: PPUSH
11406: CALL_OW 325
11410: NOT
11411: AND
11412: IFFALSE 11441
// missile := Replace ( missile , missile + 1 , 3 ) ;
11414: LD_ADDR_VAR 0 14
11418: PUSH
11419: LD_VAR 0 14
11423: PPUSH
11424: LD_VAR 0 14
11428: PUSH
11429: LD_INT 1
11431: PLUS
11432: PPUSH
11433: LD_INT 3
11435: PPUSH
11436: CALL_OW 1
11440: ST_TO_ADDR
// if missile < 2 then
11441: LD_VAR 0 14
11445: PUSH
11446: LD_INT 2
11448: LESS
11449: IFFALSE 11453
// exit ;
11451: GO 11675
// x := GetX ( enemy ) ;
11453: LD_ADDR_VAR 0 4
11457: PUSH
11458: LD_VAR 0 10
11462: PPUSH
11463: CALL_OW 250
11467: ST_TO_ADDR
// y := GetY ( enemy ) ;
11468: LD_ADDR_VAR 0 5
11472: PUSH
11473: LD_VAR 0 10
11477: PPUSH
11478: CALL_OW 251
11482: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11483: LD_ADDR_VAR 0 6
11487: PUSH
11488: LD_VAR 0 4
11492: PUSH
11493: LD_INT 1
11495: NEG
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 12
11504: PLUS
11505: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11506: LD_ADDR_VAR 0 7
11510: PUSH
11511: LD_VAR 0 5
11515: PUSH
11516: LD_INT 1
11518: NEG
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 12
11527: PLUS
11528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11529: LD_VAR 0 6
11533: PPUSH
11534: LD_VAR 0 7
11538: PPUSH
11539: CALL_OW 488
11543: NOT
11544: IFFALSE 11566
// begin _x := x ;
11546: LD_ADDR_VAR 0 6
11550: PUSH
11551: LD_VAR 0 4
11555: ST_TO_ADDR
// _y := y ;
11556: LD_ADDR_VAR 0 7
11560: PUSH
11561: LD_VAR 0 5
11565: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11566: LD_ADDR_VAR 0 3
11570: PUSH
11571: LD_INT 1
11573: PPUSH
11574: LD_VAR 0 14
11578: PPUSH
11579: CALL_OW 12
11583: ST_TO_ADDR
// case i of 1 :
11584: LD_VAR 0 3
11588: PUSH
11589: LD_INT 1
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11614
11597: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_VAR 0 10
11607: PPUSH
11608: CALL_OW 115
11612: GO 11675
11614: LD_INT 2
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11644
11622: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11623: LD_VAR 0 1
11627: PPUSH
11628: LD_VAR 0 6
11632: PPUSH
11633: LD_VAR 0 7
11637: PPUSH
11638: CALL_OW 153
11642: GO 11675
11644: LD_INT 3
11646: DOUBLE
11647: EQUAL
11648: IFTRUE 11652
11650: GO 11674
11652: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11653: LD_VAR 0 1
11657: PPUSH
11658: LD_VAR 0 6
11662: PPUSH
11663: LD_VAR 0 7
11667: PPUSH
11668: CALL_OW 154
11672: GO 11675
11674: POP
// end ;
11675: LD_VAR 0 2
11679: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
// if not unit or not building then
11688: LD_VAR 0 1
11692: NOT
11693: IFTRUE 11702
11695: PUSH
11696: LD_VAR 0 2
11700: NOT
11701: OR
11702: IFFALSE 11706
// exit ;
11704: GO 11864
// x := GetX ( building ) ;
11706: LD_ADDR_VAR 0 5
11710: PUSH
11711: LD_VAR 0 2
11715: PPUSH
11716: CALL_OW 250
11720: ST_TO_ADDR
// y := GetY ( building ) ;
11721: LD_ADDR_VAR 0 6
11725: PUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: CALL_OW 251
11735: ST_TO_ADDR
// for i := 0 to 5 do
11736: LD_ADDR_VAR 0 4
11740: PUSH
11741: DOUBLE
11742: LD_INT 0
11744: DEC
11745: ST_TO_ADDR
11746: LD_INT 5
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11862
// begin _x := ShiftX ( x , i , 3 ) ;
11752: LD_ADDR_VAR 0 7
11756: PUSH
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 4
11766: PPUSH
11767: LD_INT 3
11769: PPUSH
11770: CALL_OW 272
11774: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11775: LD_ADDR_VAR 0 8
11779: PUSH
11780: LD_VAR 0 6
11784: PPUSH
11785: LD_VAR 0 4
11789: PPUSH
11790: LD_INT 3
11792: PPUSH
11793: CALL_OW 273
11797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11798: LD_VAR 0 7
11802: PPUSH
11803: LD_VAR 0 8
11807: PPUSH
11808: CALL_OW 488
11812: NOT
11813: IFFALSE 11817
// continue ;
11815: GO 11749
// if HexInfo ( _x , _y ) = 0 then
11817: LD_VAR 0 7
11821: PPUSH
11822: LD_VAR 0 8
11826: PPUSH
11827: CALL_OW 428
11831: PUSH
11832: LD_INT 0
11834: EQUAL
11835: IFFALSE 11860
// begin ComMoveXY ( unit , _x , _y ) ;
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_VAR 0 7
11846: PPUSH
11847: LD_VAR 0 8
11851: PPUSH
11852: CALL_OW 111
// exit ;
11856: POP
11857: POP
11858: GO 11864
// end ; end ;
11860: GO 11749
11862: POP
11863: POP
// end ;
11864: LD_VAR 0 3
11868: RET
// export function ScanBase ( side , base_area ) ; begin
11869: LD_INT 0
11871: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11872: LD_ADDR_VAR 0 3
11876: PUSH
11877: LD_VAR 0 2
11881: PPUSH
11882: LD_INT 81
11884: PUSH
11885: LD_VAR 0 1
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 70
11898: ST_TO_ADDR
// end ;
11899: LD_VAR 0 3
11903: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11904: LD_INT 0
11906: PPUSH
11907: PPUSH
11908: PPUSH
11909: PPUSH
// result := false ;
11910: LD_ADDR_VAR 0 2
11914: PUSH
11915: LD_INT 0
11917: ST_TO_ADDR
// side := GetSide ( unit ) ;
11918: LD_ADDR_VAR 0 3
11922: PUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 255
11932: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11933: LD_ADDR_VAR 0 4
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 248
11947: ST_TO_ADDR
// case nat of 1 :
11948: LD_VAR 0 4
11952: PUSH
11953: LD_INT 1
11955: DOUBLE
11956: EQUAL
11957: IFTRUE 11961
11959: GO 11972
11961: POP
// tech := tech_lassight ; 2 :
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_INT 12
11969: ST_TO_ADDR
11970: GO 12011
11972: LD_INT 2
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 11991
11980: POP
// tech := tech_mortar ; 3 :
11981: LD_ADDR_VAR 0 5
11985: PUSH
11986: LD_INT 41
11988: ST_TO_ADDR
11989: GO 12011
11991: LD_INT 3
11993: DOUBLE
11994: EQUAL
11995: IFTRUE 11999
11997: GO 12010
11999: POP
// tech := tech_bazooka ; end ;
12000: LD_ADDR_VAR 0 5
12004: PUSH
12005: LD_INT 44
12007: ST_TO_ADDR
12008: GO 12011
12010: POP
// if Researched ( side , tech ) then
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_VAR 0 5
12020: PPUSH
12021: CALL_OW 325
12025: IFFALSE 12052
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12027: LD_ADDR_VAR 0 2
12031: PUSH
12032: LD_INT 5
12034: PUSH
12035: LD_INT 8
12037: PUSH
12038: LD_INT 9
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: LD_VAR 0 4
12050: ARRAY
12051: ST_TO_ADDR
// end ;
12052: LD_VAR 0 2
12056: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
12061: PPUSH
// if not mines then
12062: LD_VAR 0 2
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 81
12078: PUSH
12079: LD_VAR 0 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 21
12093: PUSH
12094: LD_INT 3
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 69
12113: ST_TO_ADDR
// for i in mines do
12114: LD_ADDR_VAR 0 4
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: FOR_IN
12125: IFFALSE 12213
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12127: LD_VAR 0 4
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: LD_VAR 0 4
12140: PUSH
12141: LD_INT 2
12143: ARRAY
12144: PPUSH
12145: CALL_OW 458
12149: NOT
12150: IFFALSE 12154
// continue ;
12152: GO 12124
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12154: LD_VAR 0 4
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PPUSH
12163: LD_VAR 0 4
12167: PUSH
12168: LD_INT 2
12170: ARRAY
12171: PPUSH
12172: CALL_OW 428
12176: PUSH
12177: LD_VAR 0 5
12181: IN
12182: IFFALSE 12211
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12184: LD_VAR 0 4
12188: PUSH
12189: LD_INT 1
12191: ARRAY
12192: PPUSH
12193: LD_VAR 0 4
12197: PUSH
12198: LD_INT 2
12200: ARRAY
12201: PPUSH
12202: LD_VAR 0 1
12206: PPUSH
12207: CALL_OW 456
// end ;
12211: GO 12124
12213: POP
12214: POP
// end ;
12215: LD_VAR 0 3
12219: RET
// export function Count ( array ) ; begin
12220: LD_INT 0
12222: PPUSH
// result := array + 0 ;
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 0
12235: PLUS
12236: ST_TO_ADDR
// end ;
12237: LD_VAR 0 2
12241: RET
// export function IsEmpty ( building ) ; begin
12242: LD_INT 0
12244: PPUSH
// if not building then
12245: LD_VAR 0 1
12249: NOT
12250: IFFALSE 12254
// exit ;
12252: GO 12297
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: LD_VAR 0 1
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL_OW 255
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 58
12283: PUSH
12284: EMPTY
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: IN
12296: ST_TO_ADDR
// end ;
12297: LD_VAR 0 2
12301: RET
// export function IsNotFull ( building ) ; var places ; begin
12302: LD_INT 0
12304: PPUSH
12305: PPUSH
// if not building then
12306: LD_VAR 0 1
12310: NOT
12311: IFFALSE 12315
// exit ;
12313: GO 12343
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_VAR 0 1
12324: PPUSH
12325: LD_INT 3
12327: PUSH
12328: LD_INT 62
12330: PUSH
12331: EMPTY
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 72
12342: ST_TO_ADDR
// end ;
12343: LD_VAR 0 2
12347: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
// tmp := [ ] ;
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: EMPTY
12360: ST_TO_ADDR
// list := [ ] ;
12361: LD_ADDR_VAR 0 5
12365: PUSH
12366: EMPTY
12367: ST_TO_ADDR
// for i = 16 to 25 do
12368: LD_ADDR_VAR 0 4
12372: PUSH
12373: DOUBLE
12374: LD_INT 16
12376: DEC
12377: ST_TO_ADDR
12378: LD_INT 25
12380: PUSH
12381: FOR_TO
12382: IFFALSE 12455
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 22
12396: PUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 255
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 91
12413: PUSH
12414: LD_VAR 0 1
12418: PUSH
12419: LD_INT 6
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_VAR 0 4
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ADD
12452: ST_TO_ADDR
12453: GO 12381
12455: POP
12456: POP
// for i = 1 to tmp do
12457: LD_ADDR_VAR 0 4
12461: PUSH
12462: DOUBLE
12463: LD_INT 1
12465: DEC
12466: ST_TO_ADDR
12467: LD_VAR 0 3
12471: PUSH
12472: FOR_TO
12473: IFFALSE 12561
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12475: LD_ADDR_VAR 0 5
12479: PUSH
12480: LD_VAR 0 5
12484: PUSH
12485: LD_VAR 0 3
12489: PUSH
12490: LD_VAR 0 4
12494: ARRAY
12495: PPUSH
12496: CALL_OW 266
12500: PUSH
12501: LD_VAR 0 3
12505: PUSH
12506: LD_VAR 0 4
12510: ARRAY
12511: PPUSH
12512: CALL_OW 250
12516: PUSH
12517: LD_VAR 0 3
12521: PUSH
12522: LD_VAR 0 4
12526: ARRAY
12527: PPUSH
12528: CALL_OW 251
12532: PUSH
12533: LD_VAR 0 3
12537: PUSH
12538: LD_VAR 0 4
12542: ARRAY
12543: PPUSH
12544: CALL_OW 254
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: EMPTY
12556: LIST
12557: ADD
12558: ST_TO_ADDR
12559: GO 12472
12561: POP
12562: POP
// result := list ;
12563: LD_ADDR_VAR 0 2
12567: PUSH
12568: LD_VAR 0 5
12572: ST_TO_ADDR
// end ;
12573: LD_VAR 0 2
12577: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12578: LD_INT 0
12580: PPUSH
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
// if not factory then
12587: LD_VAR 0 1
12591: NOT
12592: IFFALSE 12596
// exit ;
12594: GO 13199
// if control = control_apeman then
12596: LD_VAR 0 4
12600: PUSH
12601: LD_INT 5
12603: EQUAL
12604: IFFALSE 12713
// begin tmp := UnitsInside ( factory ) ;
12606: LD_ADDR_VAR 0 8
12610: PUSH
12611: LD_VAR 0 1
12615: PPUSH
12616: CALL_OW 313
12620: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12621: LD_VAR 0 8
12625: PPUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 12
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: NOT
12641: IFFALSE 12651
// control := control_manual ;
12643: LD_ADDR_VAR 0 4
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12651: LD_ADDR_VAR 0 8
12655: PUSH
12656: LD_VAR 0 1
12660: PPUSH
12661: CALL 12348 0 1
12665: ST_TO_ADDR
// if tmp then
12666: LD_VAR 0 8
12670: IFFALSE 12713
// begin for i in tmp do
12672: LD_ADDR_VAR 0 7
12676: PUSH
12677: LD_VAR 0 8
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12711
// if i [ 1 ] = b_ext_radio then
12685: LD_VAR 0 7
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PUSH
12694: LD_INT 22
12696: EQUAL
12697: IFFALSE 12709
// begin control := control_remote ;
12699: LD_ADDR_VAR 0 4
12703: PUSH
12704: LD_INT 2
12706: ST_TO_ADDR
// break ;
12707: GO 12711
// end ;
12709: GO 12682
12711: POP
12712: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12713: LD_VAR 0 1
12717: PPUSH
12718: LD_VAR 0 2
12722: PPUSH
12723: LD_VAR 0 3
12727: PPUSH
12728: LD_VAR 0 4
12732: PPUSH
12733: LD_VAR 0 5
12737: PPUSH
12738: CALL_OW 448
12742: IFFALSE 12777
// begin result := [ chassis , engine , control , weapon ] ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_VAR 0 2
12753: PUSH
12754: LD_VAR 0 3
12758: PUSH
12759: LD_VAR 0 4
12763: PUSH
12764: LD_VAR 0 5
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: ST_TO_ADDR
// exit ;
12775: GO 13199
// end ; _chassis := AvailableChassisList ( factory ) ;
12777: LD_ADDR_VAR 0 9
12781: PUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 475
12791: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12792: LD_ADDR_VAR 0 11
12796: PUSH
12797: LD_VAR 0 1
12801: PPUSH
12802: CALL_OW 476
12806: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12807: LD_ADDR_VAR 0 12
12811: PUSH
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 477
12821: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12822: LD_ADDR_VAR 0 10
12826: PUSH
12827: LD_VAR 0 1
12831: PPUSH
12832: CALL_OW 478
12836: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12837: LD_VAR 0 9
12841: NOT
12842: IFTRUE 12851
12844: PUSH
12845: LD_VAR 0 11
12849: NOT
12850: OR
12851: IFTRUE 12860
12853: PUSH
12854: LD_VAR 0 12
12858: NOT
12859: OR
12860: IFTRUE 12869
12862: PUSH
12863: LD_VAR 0 10
12867: NOT
12868: OR
12869: IFFALSE 12904
// begin result := [ chassis , engine , control , weapon ] ;
12871: LD_ADDR_VAR 0 6
12875: PUSH
12876: LD_VAR 0 2
12880: PUSH
12881: LD_VAR 0 3
12885: PUSH
12886: LD_VAR 0 4
12890: PUSH
12891: LD_VAR 0 5
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: ST_TO_ADDR
// exit ;
12902: GO 13199
// end ; if not chassis in _chassis then
12904: LD_VAR 0 2
12908: PUSH
12909: LD_VAR 0 9
12913: IN
12914: NOT
12915: IFFALSE 12941
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12917: LD_ADDR_VAR 0 2
12921: PUSH
12922: LD_VAR 0 9
12926: PUSH
12927: LD_INT 1
12929: PPUSH
12930: LD_VAR 0 9
12934: PPUSH
12935: CALL_OW 12
12939: ARRAY
12940: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12941: LD_VAR 0 2
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: CALL 13204 0 2
12955: NOT
12956: IFFALSE 13017
// repeat engine := _engine [ 1 ] ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 11
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12972: LD_ADDR_VAR 0 11
12976: PUSH
12977: LD_VAR 0 11
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 3
12989: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12990: LD_VAR 0 2
12994: PPUSH
12995: LD_VAR 0 3
12999: PPUSH
13000: CALL 13204 0 2
13004: IFTRUE 13015
13006: PUSH
13007: LD_VAR 0 11
13011: PUSH
13012: EMPTY
13013: EQUAL
13014: OR
13015: IFFALSE 12958
// if not control in _control then
13017: LD_VAR 0 4
13021: PUSH
13022: LD_VAR 0 12
13026: IN
13027: NOT
13028: IFFALSE 13054
// control := _control [ rand ( 1 , _control ) ] ;
13030: LD_ADDR_VAR 0 4
13034: PUSH
13035: LD_VAR 0 12
13039: PUSH
13040: LD_INT 1
13042: PPUSH
13043: LD_VAR 0 12
13047: PPUSH
13048: CALL_OW 12
13052: ARRAY
13053: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13054: LD_VAR 0 2
13058: PPUSH
13059: LD_VAR 0 5
13063: PPUSH
13064: CALL 13426 0 2
13068: NOT
13069: IFFALSE 13130
// repeat weapon := _weapon [ 1 ] ;
13071: LD_ADDR_VAR 0 5
13075: PUSH
13076: LD_VAR 0 10
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13085: LD_ADDR_VAR 0 10
13089: PUSH
13090: LD_VAR 0 10
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 3
13102: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13103: LD_VAR 0 2
13107: PPUSH
13108: LD_VAR 0 5
13112: PPUSH
13113: CALL 13426 0 2
13117: IFTRUE 13128
13119: PUSH
13120: LD_VAR 0 10
13124: PUSH
13125: EMPTY
13126: EQUAL
13127: OR
13128: IFFALSE 13071
// result := [ ] ;
13130: LD_ADDR_VAR 0 6
13134: PUSH
13135: EMPTY
13136: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13137: LD_VAR 0 1
13141: PPUSH
13142: LD_VAR 0 2
13146: PPUSH
13147: LD_VAR 0 3
13151: PPUSH
13152: LD_VAR 0 4
13156: PPUSH
13157: LD_VAR 0 5
13161: PPUSH
13162: CALL_OW 448
13166: IFFALSE 13199
// result := [ chassis , engine , control , weapon ] ;
13168: LD_ADDR_VAR 0 6
13172: PUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_VAR 0 3
13182: PUSH
13183: LD_VAR 0 4
13187: PUSH
13188: LD_VAR 0 5
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: ST_TO_ADDR
// end ;
13199: LD_VAR 0 6
13203: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13204: LD_INT 0
13206: PPUSH
// if not chassis or not engine then
13207: LD_VAR 0 1
13211: NOT
13212: IFTRUE 13221
13214: PUSH
13215: LD_VAR 0 2
13219: NOT
13220: OR
13221: IFFALSE 13225
// exit ;
13223: GO 13421
// case engine of engine_solar :
13225: LD_VAR 0 2
13229: PUSH
13230: LD_INT 2
13232: DOUBLE
13233: EQUAL
13234: IFTRUE 13238
13236: GO 13276
13238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13239: LD_ADDR_VAR 0 3
13243: PUSH
13244: LD_INT 11
13246: PUSH
13247: LD_INT 12
13249: PUSH
13250: LD_INT 13
13252: PUSH
13253: LD_INT 14
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: ST_TO_ADDR
13274: GO 13405
13276: LD_INT 1
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13346
13284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13285: LD_ADDR_VAR 0 3
13289: PUSH
13290: LD_INT 11
13292: PUSH
13293: LD_INT 12
13295: PUSH
13296: LD_INT 13
13298: PUSH
13299: LD_INT 14
13301: PUSH
13302: LD_INT 1
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: LD_INT 3
13310: PUSH
13311: LD_INT 4
13313: PUSH
13314: LD_INT 5
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 23
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_INT 24
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: ST_TO_ADDR
13344: GO 13405
13346: LD_INT 3
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13404
13354: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: LD_INT 13
13362: PUSH
13363: LD_INT 14
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: LD_INT 3
13371: PUSH
13372: LD_INT 4
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 22
13383: PUSH
13384: LD_INT 23
13386: PUSH
13387: LD_INT 24
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: ST_TO_ADDR
13402: GO 13405
13404: POP
// result := ( chassis in result ) ;
13405: LD_ADDR_VAR 0 3
13409: PUSH
13410: LD_VAR 0 1
13414: PUSH
13415: LD_VAR 0 3
13419: IN
13420: ST_TO_ADDR
// end ;
13421: LD_VAR 0 3
13425: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13426: LD_INT 0
13428: PPUSH
// if not chassis or not weapon then
13429: LD_VAR 0 1
13433: NOT
13434: IFTRUE 13443
13436: PUSH
13437: LD_VAR 0 2
13441: NOT
13442: OR
13443: IFFALSE 13447
// exit ;
13445: GO 14507
// case weapon of us_machine_gun :
13447: LD_VAR 0 2
13451: PUSH
13452: LD_INT 2
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13490
13460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: LD_INT 3
13474: PUSH
13475: LD_INT 4
13477: PUSH
13478: LD_INT 5
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: ST_TO_ADDR
13488: GO 14491
13490: LD_INT 3
13492: DOUBLE
13493: EQUAL
13494: IFTRUE 13498
13496: GO 13528
13498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13499: LD_ADDR_VAR 0 3
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: LD_INT 2
13509: PUSH
13510: LD_INT 3
13512: PUSH
13513: LD_INT 4
13515: PUSH
13516: LD_INT 5
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: ST_TO_ADDR
13526: GO 14491
13528: LD_INT 11
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13566
13536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 4
13553: PUSH
13554: LD_INT 5
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: ST_TO_ADDR
13564: GO 14491
13566: LD_INT 4
13568: DOUBLE
13569: EQUAL
13570: IFTRUE 13574
13572: GO 13600
13574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13575: LD_ADDR_VAR 0 3
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 3
13585: PUSH
13586: LD_INT 4
13588: PUSH
13589: LD_INT 5
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: ST_TO_ADDR
13598: GO 14491
13600: LD_INT 5
13602: DOUBLE
13603: EQUAL
13604: IFTRUE 13608
13606: GO 13634
13608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: LD_INT 4
13622: PUSH
13623: LD_INT 5
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: ST_TO_ADDR
13632: GO 14491
13634: LD_INT 9
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13642
13640: GO 13668
13642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13643: LD_ADDR_VAR 0 3
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 3
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: LD_INT 5
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: ST_TO_ADDR
13666: GO 14491
13668: LD_INT 7
13670: DOUBLE
13671: EQUAL
13672: IFTRUE 13676
13674: GO 13702
13676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13677: LD_ADDR_VAR 0 3
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: LD_INT 4
13690: PUSH
13691: LD_INT 5
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: ST_TO_ADDR
13700: GO 14491
13702: LD_INT 12
13704: DOUBLE
13705: EQUAL
13706: IFTRUE 13710
13708: GO 13736
13710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13711: LD_ADDR_VAR 0 3
13715: PUSH
13716: LD_INT 2
13718: PUSH
13719: LD_INT 3
13721: PUSH
13722: LD_INT 4
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 14491
13736: LD_INT 13
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13770
13744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: LD_INT 3
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: LD_INT 5
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: ST_TO_ADDR
13768: GO 14491
13770: LD_INT 14
13772: DOUBLE
13773: EQUAL
13774: IFTRUE 13778
13776: GO 13796
13778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: LD_INT 4
13786: PUSH
13787: LD_INT 5
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: ST_TO_ADDR
13794: GO 14491
13796: LD_INT 6
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 13822
13804: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13805: LD_ADDR_VAR 0 3
13809: PUSH
13810: LD_INT 4
13812: PUSH
13813: LD_INT 5
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: ST_TO_ADDR
13820: GO 14491
13822: LD_INT 10
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13848
13830: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: LD_INT 4
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: ST_TO_ADDR
13846: GO 14491
13848: LD_INT 22
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13882
13856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13857: LD_ADDR_VAR 0 3
13861: PUSH
13862: LD_INT 11
13864: PUSH
13865: LD_INT 12
13867: PUSH
13868: LD_INT 13
13870: PUSH
13871: LD_INT 14
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: ST_TO_ADDR
13880: GO 14491
13882: LD_INT 23
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13916
13890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13891: LD_ADDR_VAR 0 3
13895: PUSH
13896: LD_INT 11
13898: PUSH
13899: LD_INT 12
13901: PUSH
13902: LD_INT 13
13904: PUSH
13905: LD_INT 14
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: ST_TO_ADDR
13914: GO 14491
13916: LD_INT 24
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 13950
13924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_INT 11
13932: PUSH
13933: LD_INT 12
13935: PUSH
13936: LD_INT 13
13938: PUSH
13939: LD_INT 14
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: ST_TO_ADDR
13948: GO 14491
13950: LD_INT 30
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13984
13958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13959: LD_ADDR_VAR 0 3
13963: PUSH
13964: LD_INT 11
13966: PUSH
13967: LD_INT 12
13969: PUSH
13970: LD_INT 13
13972: PUSH
13973: LD_INT 14
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: ST_TO_ADDR
13982: GO 14491
13984: LD_INT 25
13986: DOUBLE
13987: EQUAL
13988: IFTRUE 13992
13990: GO 14010
13992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_INT 13
14000: PUSH
14001: LD_INT 14
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 14491
14010: LD_INT 27
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14036
14018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_INT 13
14026: PUSH
14027: LD_INT 14
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ST_TO_ADDR
14034: GO 14491
14036: LD_INT 92
14038: DOUBLE
14039: EQUAL
14040: IFTRUE 14044
14042: GO 14070
14044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_INT 11
14052: PUSH
14053: LD_INT 12
14055: PUSH
14056: LD_INT 13
14058: PUSH
14059: LD_INT 14
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: ST_TO_ADDR
14068: GO 14491
14070: LD_INT 28
14072: DOUBLE
14073: EQUAL
14074: IFTRUE 14078
14076: GO 14096
14078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_INT 13
14086: PUSH
14087: LD_INT 14
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: ST_TO_ADDR
14094: GO 14491
14096: LD_INT 29
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14122
14104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14105: LD_ADDR_VAR 0 3
14109: PUSH
14110: LD_INT 13
14112: PUSH
14113: LD_INT 14
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: ST_TO_ADDR
14120: GO 14491
14122: LD_INT 31
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14148
14130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_INT 13
14138: PUSH
14139: LD_INT 14
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: ST_TO_ADDR
14146: GO 14491
14148: LD_INT 26
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14156
14154: GO 14174
14156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 13
14164: PUSH
14165: LD_INT 14
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: ST_TO_ADDR
14172: GO 14491
14174: LD_INT 42
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14208
14182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 22
14193: PUSH
14194: LD_INT 23
14196: PUSH
14197: LD_INT 24
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: ST_TO_ADDR
14206: GO 14491
14208: LD_INT 43
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14242
14216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 21
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 23
14230: PUSH
14231: LD_INT 24
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: ST_TO_ADDR
14240: GO 14491
14242: LD_INT 44
14244: DOUBLE
14245: EQUAL
14246: IFTRUE 14250
14248: GO 14276
14250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 22
14261: PUSH
14262: LD_INT 23
14264: PUSH
14265: LD_INT 24
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: ST_TO_ADDR
14274: GO 14491
14276: LD_INT 45
14278: DOUBLE
14279: EQUAL
14280: IFTRUE 14284
14282: GO 14310
14284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_INT 21
14292: PUSH
14293: LD_INT 22
14295: PUSH
14296: LD_INT 23
14298: PUSH
14299: LD_INT 24
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: ST_TO_ADDR
14308: GO 14491
14310: LD_INT 49
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14344
14318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14319: LD_ADDR_VAR 0 3
14323: PUSH
14324: LD_INT 21
14326: PUSH
14327: LD_INT 22
14329: PUSH
14330: LD_INT 23
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: ST_TO_ADDR
14342: GO 14491
14344: LD_INT 51
14346: DOUBLE
14347: EQUAL
14348: IFTRUE 14352
14350: GO 14378
14352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14353: LD_ADDR_VAR 0 3
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 23
14366: PUSH
14367: LD_INT 24
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 14491
14378: LD_INT 52
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14412
14386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_INT 23
14400: PUSH
14401: LD_INT 24
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: ST_TO_ADDR
14410: GO 14491
14412: LD_INT 53
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14438
14420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14421: LD_ADDR_VAR 0 3
14425: PUSH
14426: LD_INT 23
14428: PUSH
14429: LD_INT 24
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: ST_TO_ADDR
14436: GO 14491
14438: LD_INT 46
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14464
14446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_INT 23
14454: PUSH
14455: LD_INT 24
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: ST_TO_ADDR
14462: GO 14491
14464: LD_INT 47
14466: DOUBLE
14467: EQUAL
14468: IFTRUE 14472
14470: GO 14490
14472: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: LD_INT 23
14480: PUSH
14481: LD_INT 24
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: ST_TO_ADDR
14488: GO 14491
14490: POP
// result := ( chassis in result ) ;
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_VAR 0 1
14500: PUSH
14501: LD_VAR 0 3
14505: IN
14506: ST_TO_ADDR
// end ;
14507: LD_VAR 0 3
14511: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14512: LD_INT 0
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
// result := array ;
14521: LD_ADDR_VAR 0 5
14525: PUSH
14526: LD_VAR 0 1
14530: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14531: LD_VAR 0 1
14535: NOT
14536: IFTRUE 14545
14538: PUSH
14539: LD_VAR 0 2
14543: NOT
14544: OR
14545: IFTRUE 14554
14547: PUSH
14548: LD_VAR 0 3
14552: NOT
14553: OR
14554: IFTRUE 14568
14556: PUSH
14557: LD_VAR 0 2
14561: PUSH
14562: LD_VAR 0 1
14566: GREATER
14567: OR
14568: IFTRUE 14582
14570: PUSH
14571: LD_VAR 0 3
14575: PUSH
14576: LD_VAR 0 1
14580: GREATER
14581: OR
14582: IFFALSE 14586
// exit ;
14584: GO 14882
// if direction then
14586: LD_VAR 0 4
14590: IFFALSE 14654
// begin d := 1 ;
14592: LD_ADDR_VAR 0 9
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// if i_from > i_to then
14600: LD_VAR 0 2
14604: PUSH
14605: LD_VAR 0 3
14609: GREATER
14610: IFFALSE 14636
// length := ( array - i_from ) + i_to else
14612: LD_ADDR_VAR 0 11
14616: PUSH
14617: LD_VAR 0 1
14621: PUSH
14622: LD_VAR 0 2
14626: MINUS
14627: PUSH
14628: LD_VAR 0 3
14632: PLUS
14633: ST_TO_ADDR
14634: GO 14652
// length := i_to - i_from ;
14636: LD_ADDR_VAR 0 11
14640: PUSH
14641: LD_VAR 0 3
14645: PUSH
14646: LD_VAR 0 2
14650: MINUS
14651: ST_TO_ADDR
// end else
14652: GO 14715
// begin d := - 1 ;
14654: LD_ADDR_VAR 0 9
14658: PUSH
14659: LD_INT 1
14661: NEG
14662: ST_TO_ADDR
// if i_from > i_to then
14663: LD_VAR 0 2
14667: PUSH
14668: LD_VAR 0 3
14672: GREATER
14673: IFFALSE 14693
// length := i_from - i_to else
14675: LD_ADDR_VAR 0 11
14679: PUSH
14680: LD_VAR 0 2
14684: PUSH
14685: LD_VAR 0 3
14689: MINUS
14690: ST_TO_ADDR
14691: GO 14715
// length := ( array - i_to ) + i_from ;
14693: LD_ADDR_VAR 0 11
14697: PUSH
14698: LD_VAR 0 1
14702: PUSH
14703: LD_VAR 0 3
14707: MINUS
14708: PUSH
14709: LD_VAR 0 2
14713: PLUS
14714: ST_TO_ADDR
// end ; if not length then
14715: LD_VAR 0 11
14719: NOT
14720: IFFALSE 14724
// exit ;
14722: GO 14882
// tmp := array ;
14724: LD_ADDR_VAR 0 10
14728: PUSH
14729: LD_VAR 0 1
14733: ST_TO_ADDR
// for i = 1 to length do
14734: LD_ADDR_VAR 0 6
14738: PUSH
14739: DOUBLE
14740: LD_INT 1
14742: DEC
14743: ST_TO_ADDR
14744: LD_VAR 0 11
14748: PUSH
14749: FOR_TO
14750: IFFALSE 14870
// begin for j = 1 to array do
14752: LD_ADDR_VAR 0 7
14756: PUSH
14757: DOUBLE
14758: LD_INT 1
14760: DEC
14761: ST_TO_ADDR
14762: LD_VAR 0 1
14766: PUSH
14767: FOR_TO
14768: IFFALSE 14856
// begin k := j + d ;
14770: LD_ADDR_VAR 0 8
14774: PUSH
14775: LD_VAR 0 7
14779: PUSH
14780: LD_VAR 0 9
14784: PLUS
14785: ST_TO_ADDR
// if k > array then
14786: LD_VAR 0 8
14790: PUSH
14791: LD_VAR 0 1
14795: GREATER
14796: IFFALSE 14806
// k := 1 ;
14798: LD_ADDR_VAR 0 8
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if not k then
14806: LD_VAR 0 8
14810: NOT
14811: IFFALSE 14823
// k := array ;
14813: LD_ADDR_VAR 0 8
14817: PUSH
14818: LD_VAR 0 1
14822: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14823: LD_ADDR_VAR 0 10
14827: PUSH
14828: LD_VAR 0 10
14832: PPUSH
14833: LD_VAR 0 8
14837: PPUSH
14838: LD_VAR 0 1
14842: PUSH
14843: LD_VAR 0 7
14847: ARRAY
14848: PPUSH
14849: CALL_OW 1
14853: ST_TO_ADDR
// end ;
14854: GO 14767
14856: POP
14857: POP
// array := tmp ;
14858: LD_ADDR_VAR 0 1
14862: PUSH
14863: LD_VAR 0 10
14867: ST_TO_ADDR
// end ;
14868: GO 14749
14870: POP
14871: POP
// result := array ;
14872: LD_ADDR_VAR 0 5
14876: PUSH
14877: LD_VAR 0 1
14881: ST_TO_ADDR
// end ;
14882: LD_VAR 0 5
14886: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
// result := 0 ;
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_INT 0
14898: ST_TO_ADDR
// if not array or not value in array then
14899: LD_VAR 0 1
14903: NOT
14904: IFTRUE 14919
14906: PUSH
14907: LD_VAR 0 2
14911: PUSH
14912: LD_VAR 0 1
14916: IN
14917: NOT
14918: OR
14919: IFFALSE 14923
// exit ;
14921: GO 14977
// for i = 1 to array do
14923: LD_ADDR_VAR 0 4
14927: PUSH
14928: DOUBLE
14929: LD_INT 1
14931: DEC
14932: ST_TO_ADDR
14933: LD_VAR 0 1
14937: PUSH
14938: FOR_TO
14939: IFFALSE 14975
// if value = array [ i ] then
14941: LD_VAR 0 2
14945: PUSH
14946: LD_VAR 0 1
14950: PUSH
14951: LD_VAR 0 4
14955: ARRAY
14956: EQUAL
14957: IFFALSE 14973
// begin result := i ;
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_VAR 0 4
14968: ST_TO_ADDR
// exit ;
14969: POP
14970: POP
14971: GO 14977
// end ;
14973: GO 14938
14975: POP
14976: POP
// end ;
14977: LD_VAR 0 3
14981: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14982: LD_INT 0
14984: PPUSH
// vc_chassis := chassis ;
14985: LD_ADDR_OWVAR 37
14989: PUSH
14990: LD_VAR 0 1
14994: ST_TO_ADDR
// vc_engine := engine ;
14995: LD_ADDR_OWVAR 39
14999: PUSH
15000: LD_VAR 0 2
15004: ST_TO_ADDR
// vc_control := control ;
15005: LD_ADDR_OWVAR 38
15009: PUSH
15010: LD_VAR 0 3
15014: ST_TO_ADDR
// vc_weapon := weapon ;
15015: LD_ADDR_OWVAR 40
15019: PUSH
15020: LD_VAR 0 4
15024: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15025: LD_ADDR_OWVAR 41
15029: PUSH
15030: LD_VAR 0 5
15034: ST_TO_ADDR
// end ;
15035: LD_VAR 0 6
15039: RET
// export function WantPlant ( unit ) ; var task ; begin
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
// result := false ;
15044: LD_ADDR_VAR 0 2
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 437
15066: ST_TO_ADDR
// if task then
15067: LD_VAR 0 3
15071: IFFALSE 15099
// if task [ 1 ] [ 1 ] = p then
15073: LD_VAR 0 3
15077: PUSH
15078: LD_INT 1
15080: ARRAY
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PUSH
15086: LD_STRING p
15088: EQUAL
15089: IFFALSE 15099
// result := true ;
15091: LD_ADDR_VAR 0 2
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// end ;
15099: LD_VAR 0 2
15103: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15104: LD_INT 0
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
// if pos < 1 then
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: LESS
15118: IFFALSE 15122
// exit ;
15120: GO 15425
// if pos = 1 then
15122: LD_VAR 0 2
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: IFFALSE 15163
// result := Replace ( arr , pos [ 1 ] , value ) else
15132: LD_ADDR_VAR 0 4
15136: PUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_VAR 0 2
15146: PUSH
15147: LD_INT 1
15149: ARRAY
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: CALL_OW 1
15160: ST_TO_ADDR
15161: GO 15425
// begin tmp := arr ;
15163: LD_ADDR_VAR 0 6
15167: PUSH
15168: LD_VAR 0 1
15172: ST_TO_ADDR
// s_arr := [ tmp ] ;
15173: LD_ADDR_VAR 0 7
15177: PUSH
15178: LD_VAR 0 6
15182: PUSH
15183: EMPTY
15184: LIST
15185: ST_TO_ADDR
// for i = 1 to pos - 1 do
15186: LD_ADDR_VAR 0 5
15190: PUSH
15191: DOUBLE
15192: LD_INT 1
15194: DEC
15195: ST_TO_ADDR
15196: LD_VAR 0 2
15200: PUSH
15201: LD_INT 1
15203: MINUS
15204: PUSH
15205: FOR_TO
15206: IFFALSE 15251
// begin tmp := tmp [ pos [ i ] ] ;
15208: LD_ADDR_VAR 0 6
15212: PUSH
15213: LD_VAR 0 6
15217: PUSH
15218: LD_VAR 0 2
15222: PUSH
15223: LD_VAR 0 5
15227: ARRAY
15228: ARRAY
15229: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15230: LD_ADDR_VAR 0 7
15234: PUSH
15235: LD_VAR 0 7
15239: PUSH
15240: LD_VAR 0 6
15244: PUSH
15245: EMPTY
15246: LIST
15247: ADD
15248: ST_TO_ADDR
// end ;
15249: GO 15205
15251: POP
15252: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: LD_VAR 0 6
15262: PPUSH
15263: LD_VAR 0 2
15267: PUSH
15268: LD_VAR 0 2
15272: ARRAY
15273: PPUSH
15274: LD_VAR 0 3
15278: PPUSH
15279: CALL_OW 1
15283: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15284: LD_ADDR_VAR 0 7
15288: PUSH
15289: LD_VAR 0 7
15293: PPUSH
15294: LD_VAR 0 7
15298: PPUSH
15299: LD_VAR 0 6
15303: PPUSH
15304: CALL_OW 1
15308: ST_TO_ADDR
// for i = s_arr downto 2 do
15309: LD_ADDR_VAR 0 5
15313: PUSH
15314: DOUBLE
15315: LD_VAR 0 7
15319: INC
15320: ST_TO_ADDR
15321: LD_INT 2
15323: PUSH
15324: FOR_DOWNTO
15325: IFFALSE 15409
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15327: LD_ADDR_VAR 0 6
15331: PUSH
15332: LD_VAR 0 7
15336: PUSH
15337: LD_VAR 0 5
15341: PUSH
15342: LD_INT 1
15344: MINUS
15345: ARRAY
15346: PPUSH
15347: LD_VAR 0 2
15351: PUSH
15352: LD_VAR 0 5
15356: PUSH
15357: LD_INT 1
15359: MINUS
15360: ARRAY
15361: PPUSH
15362: LD_VAR 0 7
15366: PUSH
15367: LD_VAR 0 5
15371: ARRAY
15372: PPUSH
15373: CALL_OW 1
15377: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15378: LD_ADDR_VAR 0 7
15382: PUSH
15383: LD_VAR 0 7
15387: PPUSH
15388: LD_VAR 0 5
15392: PUSH
15393: LD_INT 1
15395: MINUS
15396: PPUSH
15397: LD_VAR 0 6
15401: PPUSH
15402: CALL_OW 1
15406: ST_TO_ADDR
// end ;
15407: GO 15324
15409: POP
15410: POP
// result := s_arr [ 1 ] ;
15411: LD_ADDR_VAR 0 4
15415: PUSH
15416: LD_VAR 0 7
15420: PUSH
15421: LD_INT 1
15423: ARRAY
15424: ST_TO_ADDR
// end ; end ;
15425: LD_VAR 0 4
15429: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15430: LD_INT 0
15432: PPUSH
15433: PPUSH
// if not list then
15434: LD_VAR 0 1
15438: NOT
15439: IFFALSE 15443
// exit ;
15441: GO 15534
// i := list [ pos1 ] ;
15443: LD_ADDR_VAR 0 5
15447: PUSH
15448: LD_VAR 0 1
15452: PUSH
15453: LD_VAR 0 2
15457: ARRAY
15458: ST_TO_ADDR
// if not i then
15459: LD_VAR 0 5
15463: NOT
15464: IFFALSE 15468
// exit ;
15466: GO 15534
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15468: LD_ADDR_VAR 0 1
15472: PUSH
15473: LD_VAR 0 1
15477: PPUSH
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_VAR 0 1
15487: PUSH
15488: LD_VAR 0 3
15492: ARRAY
15493: PPUSH
15494: CALL_OW 1
15498: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15499: LD_ADDR_VAR 0 1
15503: PUSH
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 5
15518: PPUSH
15519: CALL_OW 1
15523: ST_TO_ADDR
// result := list ;
15524: LD_ADDR_VAR 0 4
15528: PUSH
15529: LD_VAR 0 1
15533: ST_TO_ADDR
// end ;
15534: LD_VAR 0 4
15538: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15539: LD_INT 0
15541: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15542: LD_ADDR_VAR 0 5
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 250
15556: PPUSH
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL_OW 251
15566: PPUSH
15567: LD_VAR 0 2
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_VAR 0 4
15581: PPUSH
15582: CALL 15964 0 5
15586: ST_TO_ADDR
// end ;
15587: LD_VAR 0 5
15591: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
// if not list or not unit then
15598: LD_VAR 0 2
15602: NOT
15603: IFTRUE 15612
15605: PUSH
15606: LD_VAR 0 1
15610: NOT
15611: OR
15612: IFFALSE 15616
// exit ;
15614: GO 15959
// result := [ ] ;
15616: LD_ADDR_VAR 0 5
15620: PUSH
15621: EMPTY
15622: ST_TO_ADDR
// for i in list do
15623: LD_ADDR_VAR 0 6
15627: PUSH
15628: LD_VAR 0 2
15632: PUSH
15633: FOR_IN
15634: IFFALSE 15852
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15636: LD_ADDR_VAR 0 8
15640: PUSH
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_VAR 0 6
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PPUSH
15655: LD_VAR 0 6
15659: PUSH
15660: LD_INT 2
15662: ARRAY
15663: PPUSH
15664: CALL_OW 297
15668: ST_TO_ADDR
// if not Count ( result ) then
15669: LD_VAR 0 5
15673: PPUSH
15674: CALL 12220 0 1
15678: NOT
15679: IFFALSE 15712
// begin result := Join ( result , [ i , tmp ] ) ;
15681: LD_ADDR_VAR 0 5
15685: PUSH
15686: LD_VAR 0 5
15690: PPUSH
15691: LD_VAR 0 6
15695: PUSH
15696: LD_VAR 0 8
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PPUSH
15705: CALL 48152 0 2
15709: ST_TO_ADDR
// continue ;
15710: GO 15633
// end ; if result [ result ] [ 2 ] <= tmp then
15712: LD_VAR 0 5
15716: PUSH
15717: LD_VAR 0 5
15721: ARRAY
15722: PUSH
15723: LD_INT 2
15725: ARRAY
15726: PUSH
15727: LD_VAR 0 8
15731: LESSEQUAL
15732: IFFALSE 15765
// result := Join ( result , [ i , tmp ] ) else
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: LD_VAR 0 5
15743: PPUSH
15744: LD_VAR 0 6
15748: PUSH
15749: LD_VAR 0 8
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL 48152 0 2
15762: ST_TO_ADDR
15763: GO 15850
// begin for j := 1 to Count ( result ) do
15765: LD_ADDR_VAR 0 7
15769: PUSH
15770: DOUBLE
15771: LD_INT 1
15773: DEC
15774: ST_TO_ADDR
15775: LD_VAR 0 5
15779: PPUSH
15780: CALL 12220 0 1
15784: PUSH
15785: FOR_TO
15786: IFFALSE 15848
// begin if tmp < result [ j ] [ 2 ] then
15788: LD_VAR 0 8
15792: PUSH
15793: LD_VAR 0 5
15797: PUSH
15798: LD_VAR 0 7
15802: ARRAY
15803: PUSH
15804: LD_INT 2
15806: ARRAY
15807: LESS
15808: IFFALSE 15846
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15810: LD_ADDR_VAR 0 5
15814: PUSH
15815: LD_VAR 0 5
15819: PPUSH
15820: LD_VAR 0 7
15824: PPUSH
15825: LD_VAR 0 6
15829: PUSH
15830: LD_VAR 0 8
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PPUSH
15839: CALL_OW 2
15843: ST_TO_ADDR
// break ;
15844: GO 15848
// end ; end ;
15846: GO 15785
15848: POP
15849: POP
// end ; end ;
15850: GO 15633
15852: POP
15853: POP
// if result and not asc then
15854: LD_VAR 0 5
15858: IFFALSE 15867
15860: PUSH
15861: LD_VAR 0 3
15865: NOT
15866: AND
15867: IFFALSE 15884
// result := ReverseArray ( result ) ;
15869: LD_ADDR_VAR 0 5
15873: PUSH
15874: LD_VAR 0 5
15878: PPUSH
15879: CALL 43242 0 1
15883: ST_TO_ADDR
// tmp := [ ] ;
15884: LD_ADDR_VAR 0 8
15888: PUSH
15889: EMPTY
15890: ST_TO_ADDR
// if mode then
15891: LD_VAR 0 4
15895: IFFALSE 15959
// begin for i := 1 to result do
15897: LD_ADDR_VAR 0 6
15901: PUSH
15902: DOUBLE
15903: LD_INT 1
15905: DEC
15906: ST_TO_ADDR
15907: LD_VAR 0 5
15911: PUSH
15912: FOR_TO
15913: IFFALSE 15947
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15915: LD_ADDR_VAR 0 8
15919: PUSH
15920: LD_VAR 0 8
15924: PPUSH
15925: LD_VAR 0 5
15929: PUSH
15930: LD_VAR 0 6
15934: ARRAY
15935: PUSH
15936: LD_INT 1
15938: ARRAY
15939: PPUSH
15940: CALL 48152 0 2
15944: ST_TO_ADDR
15945: GO 15912
15947: POP
15948: POP
// result := tmp ;
15949: LD_ADDR_VAR 0 5
15953: PUSH
15954: LD_VAR 0 8
15958: ST_TO_ADDR
// end ; end ;
15959: LD_VAR 0 5
15963: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15964: LD_INT 0
15966: PPUSH
15967: PPUSH
15968: PPUSH
15969: PPUSH
// if not list then
15970: LD_VAR 0 3
15974: NOT
15975: IFFALSE 15979
// exit ;
15977: GO 16369
// result := [ ] ;
15979: LD_ADDR_VAR 0 6
15983: PUSH
15984: EMPTY
15985: ST_TO_ADDR
// for i in list do
15986: LD_ADDR_VAR 0 7
15990: PUSH
15991: LD_VAR 0 3
15995: PUSH
15996: FOR_IN
15997: IFFALSE 16199
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15999: LD_ADDR_VAR 0 9
16003: PUSH
16004: LD_VAR 0 7
16008: PPUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: LD_VAR 0 2
16018: PPUSH
16019: CALL_OW 297
16023: ST_TO_ADDR
// if not result then
16024: LD_VAR 0 6
16028: NOT
16029: IFFALSE 16055
// result := [ [ i , tmp ] ] else
16031: LD_ADDR_VAR 0 6
16035: PUSH
16036: LD_VAR 0 7
16040: PUSH
16041: LD_VAR 0 9
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: ST_TO_ADDR
16053: GO 16197
// begin if result [ result ] [ 2 ] <= tmp then
16055: LD_VAR 0 6
16059: PUSH
16060: LD_VAR 0 6
16064: ARRAY
16065: PUSH
16066: LD_INT 2
16068: ARRAY
16069: PUSH
16070: LD_VAR 0 9
16074: LESSEQUAL
16075: IFFALSE 16117
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16077: LD_ADDR_VAR 0 6
16081: PUSH
16082: LD_VAR 0 6
16086: PPUSH
16087: LD_VAR 0 6
16091: PUSH
16092: LD_INT 1
16094: PLUS
16095: PPUSH
16096: LD_VAR 0 7
16100: PUSH
16101: LD_VAR 0 9
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 2
16114: ST_TO_ADDR
16115: GO 16197
// for j := 1 to result do
16117: LD_ADDR_VAR 0 8
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_VAR 0 6
16131: PUSH
16132: FOR_TO
16133: IFFALSE 16195
// begin if tmp < result [ j ] [ 2 ] then
16135: LD_VAR 0 9
16139: PUSH
16140: LD_VAR 0 6
16144: PUSH
16145: LD_VAR 0 8
16149: ARRAY
16150: PUSH
16151: LD_INT 2
16153: ARRAY
16154: LESS
16155: IFFALSE 16193
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16157: LD_ADDR_VAR 0 6
16161: PUSH
16162: LD_VAR 0 6
16166: PPUSH
16167: LD_VAR 0 8
16171: PPUSH
16172: LD_VAR 0 7
16176: PUSH
16177: LD_VAR 0 9
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PPUSH
16186: CALL_OW 2
16190: ST_TO_ADDR
// break ;
16191: GO 16195
// end ; end ;
16193: GO 16132
16195: POP
16196: POP
// end ; end ;
16197: GO 15996
16199: POP
16200: POP
// if result and not asc then
16201: LD_VAR 0 6
16205: IFFALSE 16214
16207: PUSH
16208: LD_VAR 0 4
16212: NOT
16213: AND
16214: IFFALSE 16289
// begin tmp := result ;
16216: LD_ADDR_VAR 0 9
16220: PUSH
16221: LD_VAR 0 6
16225: ST_TO_ADDR
// for i = tmp downto 1 do
16226: LD_ADDR_VAR 0 7
16230: PUSH
16231: DOUBLE
16232: LD_VAR 0 9
16236: INC
16237: ST_TO_ADDR
16238: LD_INT 1
16240: PUSH
16241: FOR_DOWNTO
16242: IFFALSE 16287
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16244: LD_ADDR_VAR 0 6
16248: PUSH
16249: LD_VAR 0 6
16253: PPUSH
16254: LD_VAR 0 9
16258: PUSH
16259: LD_VAR 0 7
16263: MINUS
16264: PUSH
16265: LD_INT 1
16267: PLUS
16268: PPUSH
16269: LD_VAR 0 9
16273: PUSH
16274: LD_VAR 0 7
16278: ARRAY
16279: PPUSH
16280: CALL_OW 1
16284: ST_TO_ADDR
16285: GO 16241
16287: POP
16288: POP
// end ; tmp := [ ] ;
16289: LD_ADDR_VAR 0 9
16293: PUSH
16294: EMPTY
16295: ST_TO_ADDR
// if mode then
16296: LD_VAR 0 5
16300: IFFALSE 16369
// begin for i = 1 to result do
16302: LD_ADDR_VAR 0 7
16306: PUSH
16307: DOUBLE
16308: LD_INT 1
16310: DEC
16311: ST_TO_ADDR
16312: LD_VAR 0 6
16316: PUSH
16317: FOR_TO
16318: IFFALSE 16357
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16320: LD_ADDR_VAR 0 9
16324: PUSH
16325: LD_VAR 0 9
16329: PPUSH
16330: LD_VAR 0 7
16334: PPUSH
16335: LD_VAR 0 6
16339: PUSH
16340: LD_VAR 0 7
16344: ARRAY
16345: PUSH
16346: LD_INT 1
16348: ARRAY
16349: PPUSH
16350: CALL_OW 1
16354: ST_TO_ADDR
16355: GO 16317
16357: POP
16358: POP
// result := tmp ;
16359: LD_ADDR_VAR 0 6
16363: PUSH
16364: LD_VAR 0 9
16368: ST_TO_ADDR
// end ; end ;
16369: LD_VAR 0 6
16373: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16374: LD_INT 0
16376: PPUSH
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
16381: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16382: LD_ADDR_VAR 0 5
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: EMPTY
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: ST_TO_ADDR
// if not x or not y then
16404: LD_VAR 0 2
16408: NOT
16409: IFTRUE 16418
16411: PUSH
16412: LD_VAR 0 3
16416: NOT
16417: OR
16418: IFFALSE 16422
// exit ;
16420: GO 18078
// if not range then
16422: LD_VAR 0 4
16426: NOT
16427: IFFALSE 16437
// range := 10 ;
16429: LD_ADDR_VAR 0 4
16433: PUSH
16434: LD_INT 10
16436: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16437: LD_ADDR_VAR 0 8
16441: PUSH
16442: LD_INT 81
16444: PUSH
16445: LD_VAR 0 1
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 92
16456: PUSH
16457: LD_VAR 0 2
16461: PUSH
16462: LD_VAR 0 3
16466: PUSH
16467: LD_VAR 0 4
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: LD_INT 21
16483: PUSH
16484: LD_INT 3
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// if not tmp then
16505: LD_VAR 0 8
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 18078
// for i in tmp do
16514: LD_ADDR_VAR 0 6
16518: PUSH
16519: LD_VAR 0 8
16523: PUSH
16524: FOR_IN
16525: IFFALSE 18053
// begin points := [ 0 , 0 , 0 ] ;
16527: LD_ADDR_VAR 0 9
16531: PUSH
16532: LD_INT 0
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: ST_TO_ADDR
// bpoints := 1 ;
16546: LD_ADDR_VAR 0 10
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16554: LD_VAR 0 6
16558: PPUSH
16559: CALL_OW 247
16563: PUSH
16564: LD_INT 1
16566: DOUBLE
16567: EQUAL
16568: IFTRUE 16572
16570: GO 17154
16572: POP
// begin if GetClass ( i ) = 1 then
16573: LD_VAR 0 6
16577: PPUSH
16578: CALL_OW 257
16582: PUSH
16583: LD_INT 1
16585: EQUAL
16586: IFFALSE 16607
// points := [ 10 , 5 , 3 ] ;
16588: LD_ADDR_VAR 0 9
16592: PUSH
16593: LD_INT 10
16595: PUSH
16596: LD_INT 5
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16607: LD_VAR 0 6
16611: PPUSH
16612: CALL_OW 257
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: LD_INT 4
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: IN
16631: IFFALSE 16652
// points := [ 3 , 2 , 1 ] ;
16633: LD_ADDR_VAR 0 9
16637: PUSH
16638: LD_INT 3
16640: PUSH
16641: LD_INT 2
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16652: LD_VAR 0 6
16656: PPUSH
16657: CALL_OW 257
16661: PUSH
16662: LD_INT 5
16664: EQUAL
16665: IFFALSE 16686
// points := [ 130 , 5 , 2 ] ;
16667: LD_ADDR_VAR 0 9
16671: PUSH
16672: LD_INT 130
16674: PUSH
16675: LD_INT 5
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: LIST
16685: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16686: LD_VAR 0 6
16690: PPUSH
16691: CALL_OW 257
16695: PUSH
16696: LD_INT 8
16698: EQUAL
16699: IFFALSE 16720
// points := [ 35 , 35 , 30 ] ;
16701: LD_ADDR_VAR 0 9
16705: PUSH
16706: LD_INT 35
16708: PUSH
16709: LD_INT 35
16711: PUSH
16712: LD_INT 30
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16720: LD_VAR 0 6
16724: PPUSH
16725: CALL_OW 257
16729: PUSH
16730: LD_INT 9
16732: EQUAL
16733: IFFALSE 16754
// points := [ 20 , 55 , 40 ] ;
16735: LD_ADDR_VAR 0 9
16739: PUSH
16740: LD_INT 20
16742: PUSH
16743: LD_INT 55
16745: PUSH
16746: LD_INT 40
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16754: LD_VAR 0 6
16758: PPUSH
16759: CALL_OW 257
16763: PUSH
16764: LD_INT 12
16766: PUSH
16767: LD_INT 16
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: IN
16774: IFFALSE 16795
// points := [ 5 , 3 , 2 ] ;
16776: LD_ADDR_VAR 0 9
16780: PUSH
16781: LD_INT 5
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 2
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16795: LD_VAR 0 6
16799: PPUSH
16800: CALL_OW 257
16804: PUSH
16805: LD_INT 17
16807: EQUAL
16808: IFFALSE 16829
// points := [ 100 , 50 , 75 ] ;
16810: LD_ADDR_VAR 0 9
16814: PUSH
16815: LD_INT 100
16817: PUSH
16818: LD_INT 50
16820: PUSH
16821: LD_INT 75
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16829: LD_VAR 0 6
16833: PPUSH
16834: CALL_OW 257
16838: PUSH
16839: LD_INT 15
16841: EQUAL
16842: IFFALSE 16863
// points := [ 10 , 5 , 3 ] ;
16844: LD_ADDR_VAR 0 9
16848: PUSH
16849: LD_INT 10
16851: PUSH
16852: LD_INT 5
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16863: LD_VAR 0 6
16867: PPUSH
16868: CALL_OW 257
16872: PUSH
16873: LD_INT 14
16875: EQUAL
16876: IFFALSE 16897
// points := [ 10 , 0 , 0 ] ;
16878: LD_ADDR_VAR 0 9
16882: PUSH
16883: LD_INT 10
16885: PUSH
16886: LD_INT 0
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16897: LD_VAR 0 6
16901: PPUSH
16902: CALL_OW 257
16906: PUSH
16907: LD_INT 11
16909: EQUAL
16910: IFFALSE 16931
// points := [ 30 , 10 , 5 ] ;
16912: LD_ADDR_VAR 0 9
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 10
16922: PUSH
16923: LD_INT 5
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16931: LD_VAR 0 1
16935: PPUSH
16936: LD_INT 5
16938: PPUSH
16939: CALL_OW 321
16943: PUSH
16944: LD_INT 2
16946: EQUAL
16947: IFFALSE 16964
// bpoints := bpoints * 1.8 ;
16949: LD_ADDR_VAR 0 10
16953: PUSH
16954: LD_VAR 0 10
16958: PUSH
16959: LD_REAL  1.80000000000000E+0000
16962: MUL
16963: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16964: LD_VAR 0 6
16968: PPUSH
16969: CALL_OW 257
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 4
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: IN
16992: IFFALSE 17012
16994: PUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: LD_INT 51
17002: PPUSH
17003: CALL_OW 321
17007: PUSH
17008: LD_INT 2
17010: EQUAL
17011: AND
17012: IFFALSE 17029
// bpoints := bpoints * 1.2 ;
17014: LD_ADDR_VAR 0 10
17018: PUSH
17019: LD_VAR 0 10
17023: PUSH
17024: LD_REAL  1.20000000000000E+0000
17027: MUL
17028: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17029: LD_VAR 0 6
17033: PPUSH
17034: CALL_OW 257
17038: PUSH
17039: LD_INT 5
17041: PUSH
17042: LD_INT 7
17044: PUSH
17045: LD_INT 9
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: IN
17053: IFFALSE 17073
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 52
17063: PPUSH
17064: CALL_OW 321
17068: PUSH
17069: LD_INT 2
17071: EQUAL
17072: AND
17073: IFFALSE 17090
// bpoints := bpoints * 1.5 ;
17075: LD_ADDR_VAR 0 10
17079: PUSH
17080: LD_VAR 0 10
17084: PUSH
17085: LD_REAL  1.50000000000000E+0000
17088: MUL
17089: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17090: LD_VAR 0 1
17094: PPUSH
17095: LD_INT 66
17097: PPUSH
17098: CALL_OW 321
17102: PUSH
17103: LD_INT 2
17105: EQUAL
17106: IFFALSE 17123
// bpoints := bpoints * 1.1 ;
17108: LD_ADDR_VAR 0 10
17112: PUSH
17113: LD_VAR 0 10
17117: PUSH
17118: LD_REAL  1.10000000000000E+0000
17121: MUL
17122: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17123: LD_ADDR_VAR 0 10
17127: PUSH
17128: LD_VAR 0 10
17132: PUSH
17133: LD_VAR 0 6
17137: PPUSH
17138: LD_INT 1
17140: PPUSH
17141: CALL_OW 259
17145: PUSH
17146: LD_REAL  1.15000000000000E+0000
17149: MUL
17150: MUL
17151: ST_TO_ADDR
// end ; unit_vehicle :
17152: GO 17982
17154: LD_INT 2
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17970
17162: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17163: LD_VAR 0 6
17167: PPUSH
17168: CALL_OW 264
17172: PUSH
17173: LD_INT 2
17175: PUSH
17176: LD_INT 42
17178: PUSH
17179: LD_INT 24
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: IN
17187: IFFALSE 17208
// points := [ 25 , 5 , 3 ] ;
17189: LD_ADDR_VAR 0 9
17193: PUSH
17194: LD_INT 25
17196: PUSH
17197: LD_INT 5
17199: PUSH
17200: LD_INT 3
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17208: LD_VAR 0 6
17212: PPUSH
17213: CALL_OW 264
17217: PUSH
17218: LD_INT 4
17220: PUSH
17221: LD_INT 43
17223: PUSH
17224: LD_INT 25
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: IN
17232: IFFALSE 17253
// points := [ 40 , 15 , 5 ] ;
17234: LD_ADDR_VAR 0 9
17238: PUSH
17239: LD_INT 40
17241: PUSH
17242: LD_INT 15
17244: PUSH
17245: LD_INT 5
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17253: LD_VAR 0 6
17257: PPUSH
17258: CALL_OW 264
17262: PUSH
17263: LD_INT 3
17265: PUSH
17266: LD_INT 23
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: IN
17273: IFFALSE 17294
// points := [ 7 , 25 , 8 ] ;
17275: LD_ADDR_VAR 0 9
17279: PUSH
17280: LD_INT 7
17282: PUSH
17283: LD_INT 25
17285: PUSH
17286: LD_INT 8
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17294: LD_VAR 0 6
17298: PPUSH
17299: CALL_OW 264
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: LD_INT 27
17309: PUSH
17310: LD_INT 44
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: IN
17318: IFFALSE 17339
// points := [ 14 , 50 , 16 ] ;
17320: LD_ADDR_VAR 0 9
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: LD_INT 50
17330: PUSH
17331: LD_INT 16
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17339: LD_VAR 0 6
17343: PPUSH
17344: CALL_OW 264
17348: PUSH
17349: LD_INT 6
17351: PUSH
17352: LD_INT 46
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: IN
17359: IFFALSE 17380
// points := [ 32 , 120 , 70 ] ;
17361: LD_ADDR_VAR 0 9
17365: PUSH
17366: LD_INT 32
17368: PUSH
17369: LD_INT 120
17371: PUSH
17372: LD_INT 70
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17380: LD_VAR 0 6
17384: PPUSH
17385: CALL_OW 264
17389: PUSH
17390: LD_INT 7
17392: PUSH
17393: LD_INT 28
17395: PUSH
17396: LD_INT 45
17398: PUSH
17399: LD_INT 92
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: IN
17408: IFFALSE 17429
// points := [ 35 , 20 , 45 ] ;
17410: LD_ADDR_VAR 0 9
17414: PUSH
17415: LD_INT 35
17417: PUSH
17418: LD_INT 20
17420: PUSH
17421: LD_INT 45
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17429: LD_VAR 0 6
17433: PPUSH
17434: CALL_OW 264
17438: PUSH
17439: LD_INT 47
17441: PUSH
17442: EMPTY
17443: LIST
17444: IN
17445: IFFALSE 17466
// points := [ 67 , 45 , 75 ] ;
17447: LD_ADDR_VAR 0 9
17451: PUSH
17452: LD_INT 67
17454: PUSH
17455: LD_INT 45
17457: PUSH
17458: LD_INT 75
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17466: LD_VAR 0 6
17470: PPUSH
17471: CALL_OW 264
17475: PUSH
17476: LD_INT 26
17478: PUSH
17479: EMPTY
17480: LIST
17481: IN
17482: IFFALSE 17503
// points := [ 120 , 30 , 80 ] ;
17484: LD_ADDR_VAR 0 9
17488: PUSH
17489: LD_INT 120
17491: PUSH
17492: LD_INT 30
17494: PUSH
17495: LD_INT 80
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17503: LD_VAR 0 6
17507: PPUSH
17508: CALL_OW 264
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: EMPTY
17517: LIST
17518: IN
17519: IFFALSE 17540
// points := [ 40 , 1 , 1 ] ;
17521: LD_ADDR_VAR 0 9
17525: PUSH
17526: LD_INT 40
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17540: LD_VAR 0 6
17544: PPUSH
17545: CALL_OW 264
17549: PUSH
17550: LD_INT 29
17552: PUSH
17553: EMPTY
17554: LIST
17555: IN
17556: IFFALSE 17577
// points := [ 70 , 200 , 400 ] ;
17558: LD_ADDR_VAR 0 9
17562: PUSH
17563: LD_INT 70
17565: PUSH
17566: LD_INT 200
17568: PUSH
17569: LD_INT 400
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17577: LD_VAR 0 6
17581: PPUSH
17582: CALL_OW 264
17586: PUSH
17587: LD_INT 14
17589: PUSH
17590: LD_INT 53
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: IN
17597: IFFALSE 17618
// points := [ 40 , 10 , 20 ] ;
17599: LD_ADDR_VAR 0 9
17603: PUSH
17604: LD_INT 40
17606: PUSH
17607: LD_INT 10
17609: PUSH
17610: LD_INT 20
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17618: LD_VAR 0 6
17622: PPUSH
17623: CALL_OW 264
17627: PUSH
17628: LD_INT 9
17630: PUSH
17631: EMPTY
17632: LIST
17633: IN
17634: IFFALSE 17655
// points := [ 5 , 70 , 20 ] ;
17636: LD_ADDR_VAR 0 9
17640: PUSH
17641: LD_INT 5
17643: PUSH
17644: LD_INT 70
17646: PUSH
17647: LD_INT 20
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17655: LD_VAR 0 6
17659: PPUSH
17660: CALL_OW 264
17664: PUSH
17665: LD_INT 10
17667: PUSH
17668: EMPTY
17669: LIST
17670: IN
17671: IFFALSE 17692
// points := [ 35 , 110 , 70 ] ;
17673: LD_ADDR_VAR 0 9
17677: PUSH
17678: LD_INT 35
17680: PUSH
17681: LD_INT 110
17683: PUSH
17684: LD_INT 70
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17692: LD_VAR 0 6
17696: PPUSH
17697: CALL_OW 265
17701: PUSH
17702: LD_INT 25
17704: EQUAL
17705: IFFALSE 17726
// points := [ 80 , 65 , 100 ] ;
17707: LD_ADDR_VAR 0 9
17711: PUSH
17712: LD_INT 80
17714: PUSH
17715: LD_INT 65
17717: PUSH
17718: LD_INT 100
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17726: LD_VAR 0 6
17730: PPUSH
17731: CALL_OW 263
17735: PUSH
17736: LD_INT 1
17738: EQUAL
17739: IFFALSE 17774
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17741: LD_ADDR_VAR 0 10
17745: PUSH
17746: LD_VAR 0 10
17750: PUSH
17751: LD_VAR 0 6
17755: PPUSH
17756: CALL_OW 311
17760: PPUSH
17761: LD_INT 3
17763: PPUSH
17764: CALL_OW 259
17768: PUSH
17769: LD_INT 4
17771: MUL
17772: MUL
17773: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17774: LD_VAR 0 6
17778: PPUSH
17779: CALL_OW 263
17783: PUSH
17784: LD_INT 2
17786: EQUAL
17787: IFFALSE 17838
// begin j := IsControledBy ( i ) ;
17789: LD_ADDR_VAR 0 7
17793: PUSH
17794: LD_VAR 0 6
17798: PPUSH
17799: CALL_OW 312
17803: ST_TO_ADDR
// if j then
17804: LD_VAR 0 7
17808: IFFALSE 17838
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17810: LD_ADDR_VAR 0 10
17814: PUSH
17815: LD_VAR 0 10
17819: PUSH
17820: LD_VAR 0 7
17824: PPUSH
17825: LD_INT 3
17827: PPUSH
17828: CALL_OW 259
17832: PUSH
17833: LD_INT 3
17835: MUL
17836: MUL
17837: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17838: LD_VAR 0 6
17842: PPUSH
17843: CALL_OW 264
17847: PUSH
17848: LD_INT 5
17850: PUSH
17851: LD_INT 6
17853: PUSH
17854: LD_INT 46
17856: PUSH
17857: LD_INT 44
17859: PUSH
17860: LD_INT 47
17862: PUSH
17863: LD_INT 45
17865: PUSH
17866: LD_INT 28
17868: PUSH
17869: LD_INT 7
17871: PUSH
17872: LD_INT 27
17874: PUSH
17875: LD_INT 29
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: IN
17890: IFFALSE 17910
17892: PUSH
17893: LD_VAR 0 1
17897: PPUSH
17898: LD_INT 52
17900: PPUSH
17901: CALL_OW 321
17905: PUSH
17906: LD_INT 2
17908: EQUAL
17909: AND
17910: IFFALSE 17927
// bpoints := bpoints * 1.2 ;
17912: LD_ADDR_VAR 0 10
17916: PUSH
17917: LD_VAR 0 10
17921: PUSH
17922: LD_REAL  1.20000000000000E+0000
17925: MUL
17926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17927: LD_VAR 0 6
17931: PPUSH
17932: CALL_OW 264
17936: PUSH
17937: LD_INT 6
17939: PUSH
17940: LD_INT 46
17942: PUSH
17943: LD_INT 47
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: IN
17951: IFFALSE 17968
// bpoints := bpoints * 1.2 ;
17953: LD_ADDR_VAR 0 10
17957: PUSH
17958: LD_VAR 0 10
17962: PUSH
17963: LD_REAL  1.20000000000000E+0000
17966: MUL
17967: ST_TO_ADDR
// end ; unit_building :
17968: GO 17982
17970: LD_INT 3
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17978
17976: GO 17981
17978: POP
// ; end ;
17979: GO 17982
17981: POP
// for j = 1 to 3 do
17982: LD_ADDR_VAR 0 7
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_INT 3
17994: PUSH
17995: FOR_TO
17996: IFFALSE 18049
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17998: LD_ADDR_VAR 0 5
18002: PUSH
18003: LD_VAR 0 5
18007: PPUSH
18008: LD_VAR 0 7
18012: PPUSH
18013: LD_VAR 0 5
18017: PUSH
18018: LD_VAR 0 7
18022: ARRAY
18023: PUSH
18024: LD_VAR 0 9
18028: PUSH
18029: LD_VAR 0 7
18033: ARRAY
18034: PUSH
18035: LD_VAR 0 10
18039: MUL
18040: PLUS
18041: PPUSH
18042: CALL_OW 1
18046: ST_TO_ADDR
18047: GO 17995
18049: POP
18050: POP
// end ;
18051: GO 16524
18053: POP
18054: POP
// result := Replace ( result , 4 , tmp ) ;
18055: LD_ADDR_VAR 0 5
18059: PUSH
18060: LD_VAR 0 5
18064: PPUSH
18065: LD_INT 4
18067: PPUSH
18068: LD_VAR 0 8
18072: PPUSH
18073: CALL_OW 1
18077: ST_TO_ADDR
// end ;
18078: LD_VAR 0 5
18082: RET
// export function DangerAtRange ( unit , range ) ; begin
18083: LD_INT 0
18085: PPUSH
// if not unit then
18086: LD_VAR 0 1
18090: NOT
18091: IFFALSE 18095
// exit ;
18093: GO 18140
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18095: LD_ADDR_VAR 0 3
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 255
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 250
18119: PPUSH
18120: LD_VAR 0 1
18124: PPUSH
18125: CALL_OW 251
18129: PPUSH
18130: LD_VAR 0 2
18134: PPUSH
18135: CALL 16374 0 4
18139: ST_TO_ADDR
// end ;
18140: LD_VAR 0 3
18144: RET
// export function DangerInArea ( side , area ) ; begin
18145: LD_INT 0
18147: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18148: LD_ADDR_VAR 0 3
18152: PUSH
18153: LD_VAR 0 2
18157: PPUSH
18158: LD_INT 81
18160: PUSH
18161: LD_VAR 0 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PPUSH
18170: CALL_OW 70
18174: ST_TO_ADDR
// end ;
18175: LD_VAR 0 3
18179: RET
// export function IsExtension ( b ) ; begin
18180: LD_INT 0
18182: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_VAR 0 1
18192: PUSH
18193: LD_INT 23
18195: PUSH
18196: LD_INT 20
18198: PUSH
18199: LD_INT 22
18201: PUSH
18202: LD_INT 17
18204: PUSH
18205: LD_INT 24
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 19
18213: PUSH
18214: LD_INT 16
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 18
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: IN
18235: ST_TO_ADDR
// end ;
18236: LD_VAR 0 2
18240: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18241: LD_INT 0
18243: PPUSH
18244: PPUSH
18245: PPUSH
// result := [ ] ;
18246: LD_ADDR_VAR 0 4
18250: PUSH
18251: EMPTY
18252: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18253: LD_ADDR_VAR 0 5
18257: PUSH
18258: LD_VAR 0 2
18262: PPUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 3
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 70
18277: ST_TO_ADDR
// if not tmp then
18278: LD_VAR 0 5
18282: NOT
18283: IFFALSE 18287
// exit ;
18285: GO 18351
// if checkLink then
18287: LD_VAR 0 3
18291: IFFALSE 18341
// begin for i in tmp do
18293: LD_ADDR_VAR 0 6
18297: PUSH
18298: LD_VAR 0 5
18302: PUSH
18303: FOR_IN
18304: IFFALSE 18339
// if GetBase ( i ) <> base then
18306: LD_VAR 0 6
18310: PPUSH
18311: CALL_OW 274
18315: PUSH
18316: LD_VAR 0 1
18320: NONEQUAL
18321: IFFALSE 18337
// ComLinkToBase ( base , i ) ;
18323: LD_VAR 0 1
18327: PPUSH
18328: LD_VAR 0 6
18332: PPUSH
18333: CALL_OW 169
18337: GO 18303
18339: POP
18340: POP
// end ; result := tmp ;
18341: LD_ADDR_VAR 0 4
18345: PUSH
18346: LD_VAR 0 5
18350: ST_TO_ADDR
// end ;
18351: LD_VAR 0 4
18355: RET
// export function ComComplete ( units , b ) ; var i ; begin
18356: LD_INT 0
18358: PPUSH
18359: PPUSH
// if not units then
18360: LD_VAR 0 1
18364: NOT
18365: IFFALSE 18369
// exit ;
18367: GO 18459
// for i in units do
18369: LD_ADDR_VAR 0 4
18373: PUSH
18374: LD_VAR 0 1
18378: PUSH
18379: FOR_IN
18380: IFFALSE 18457
// if BuildingStatus ( b ) = bs_build then
18382: LD_VAR 0 2
18386: PPUSH
18387: CALL_OW 461
18391: PUSH
18392: LD_INT 1
18394: EQUAL
18395: IFFALSE 18455
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18397: LD_VAR 0 4
18401: PPUSH
18402: LD_STRING h
18404: PUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: CALL_OW 250
18414: PUSH
18415: LD_VAR 0 2
18419: PPUSH
18420: CALL_OW 251
18424: PUSH
18425: LD_VAR 0 2
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: PPUSH
18451: CALL_OW 446
18455: GO 18379
18457: POP
18458: POP
// end ;
18459: LD_VAR 0 3
18463: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18472: LD_VAR 0 1
18476: NOT
18477: IFTRUE 18494
18479: PUSH
18480: LD_VAR 0 1
18484: PPUSH
18485: CALL_OW 263
18489: PUSH
18490: LD_INT 2
18492: NONEQUAL
18493: OR
18494: IFFALSE 18498
// exit ;
18496: GO 18814
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18498: LD_ADDR_VAR 0 6
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 255
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: LD_INT 30
18525: PUSH
18526: LD_INT 36
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 34
18535: PUSH
18536: LD_INT 31
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: ST_TO_ADDR
// if not tmp then
18557: LD_VAR 0 6
18561: NOT
18562: IFFALSE 18566
// exit ;
18564: GO 18814
// result := [ ] ;
18566: LD_ADDR_VAR 0 2
18570: PUSH
18571: EMPTY
18572: ST_TO_ADDR
// for i in tmp do
18573: LD_ADDR_VAR 0 3
18577: PUSH
18578: LD_VAR 0 6
18582: PUSH
18583: FOR_IN
18584: IFFALSE 18655
// begin t := UnitsInside ( i ) ;
18586: LD_ADDR_VAR 0 4
18590: PUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: CALL_OW 313
18600: ST_TO_ADDR
// if t then
18601: LD_VAR 0 4
18605: IFFALSE 18653
// for j in t do
18607: LD_ADDR_VAR 0 7
18611: PUSH
18612: LD_VAR 0 4
18616: PUSH
18617: FOR_IN
18618: IFFALSE 18651
// result := Replace ( result , result + 1 , j ) ;
18620: LD_ADDR_VAR 0 2
18624: PUSH
18625: LD_VAR 0 2
18629: PPUSH
18630: LD_VAR 0 2
18634: PUSH
18635: LD_INT 1
18637: PLUS
18638: PPUSH
18639: LD_VAR 0 7
18643: PPUSH
18644: CALL_OW 1
18648: ST_TO_ADDR
18649: GO 18617
18651: POP
18652: POP
// end ;
18653: GO 18583
18655: POP
18656: POP
// if not result then
18657: LD_VAR 0 2
18661: NOT
18662: IFFALSE 18666
// exit ;
18664: GO 18814
// mech := result [ 1 ] ;
18666: LD_ADDR_VAR 0 5
18670: PUSH
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: ARRAY
18679: ST_TO_ADDR
// if result > 1 then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_INT 1
18687: GREATER
18688: IFFALSE 18800
// begin for i = 2 to result do
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: DOUBLE
18696: LD_INT 2
18698: DEC
18699: ST_TO_ADDR
18700: LD_VAR 0 2
18704: PUSH
18705: FOR_TO
18706: IFFALSE 18798
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18708: LD_ADDR_VAR 0 4
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: LD_VAR 0 3
18722: ARRAY
18723: PPUSH
18724: LD_INT 3
18726: PPUSH
18727: CALL_OW 259
18731: PUSH
18732: LD_VAR 0 2
18736: PUSH
18737: LD_VAR 0 3
18741: ARRAY
18742: PPUSH
18743: CALL_OW 432
18747: MINUS
18748: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18749: LD_VAR 0 4
18753: PUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: LD_INT 3
18761: PPUSH
18762: CALL_OW 259
18766: PUSH
18767: LD_VAR 0 5
18771: PPUSH
18772: CALL_OW 432
18776: MINUS
18777: GREATEREQUAL
18778: IFFALSE 18796
// mech := result [ i ] ;
18780: LD_ADDR_VAR 0 5
18784: PUSH
18785: LD_VAR 0 2
18789: PUSH
18790: LD_VAR 0 3
18794: ARRAY
18795: ST_TO_ADDR
// end ;
18796: GO 18705
18798: POP
18799: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_VAR 0 5
18809: PPUSH
18810: CALL_OW 135
// end ;
18814: LD_VAR 0 2
18818: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
// result := [ ] ;
18834: LD_ADDR_VAR 0 7
18838: PUSH
18839: EMPTY
18840: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 266
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: IN
18861: NOT
18862: IFFALSE 18866
// exit ;
18864: GO 20506
// if name then
18866: LD_VAR 0 3
18870: IFFALSE 18886
// SetBName ( base_dep , name ) ;
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: CALL_OW 500
// base := GetBase ( base_dep ) ;
18886: LD_ADDR_VAR 0 15
18890: PUSH
18891: LD_VAR 0 1
18895: PPUSH
18896: CALL_OW 274
18900: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18901: LD_ADDR_VAR 0 16
18905: PUSH
18906: LD_VAR 0 1
18910: PPUSH
18911: CALL_OW 255
18915: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18916: LD_ADDR_VAR 0 17
18920: PUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 248
18930: ST_TO_ADDR
// if sources then
18931: LD_VAR 0 5
18935: IFFALSE 18982
// for i = 1 to 3 do
18937: LD_ADDR_VAR 0 8
18941: PUSH
18942: DOUBLE
18943: LD_INT 1
18945: DEC
18946: ST_TO_ADDR
18947: LD_INT 3
18949: PUSH
18950: FOR_TO
18951: IFFALSE 18980
// AddResourceType ( base , i , sources [ i ] ) ;
18953: LD_VAR 0 15
18957: PPUSH
18958: LD_VAR 0 8
18962: PPUSH
18963: LD_VAR 0 5
18967: PUSH
18968: LD_VAR 0 8
18972: ARRAY
18973: PPUSH
18974: CALL_OW 276
18978: GO 18950
18980: POP
18981: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18982: LD_ADDR_VAR 0 18
18986: PUSH
18987: LD_VAR 0 15
18991: PPUSH
18992: LD_VAR 0 2
18996: PPUSH
18997: LD_INT 1
18999: PPUSH
19000: CALL 18241 0 3
19004: ST_TO_ADDR
// InitHc ;
19005: CALL_OW 19
// InitUc ;
19009: CALL_OW 18
// uc_side := side ;
19013: LD_ADDR_OWVAR 20
19017: PUSH
19018: LD_VAR 0 16
19022: ST_TO_ADDR
// uc_nation := nation ;
19023: LD_ADDR_OWVAR 21
19027: PUSH
19028: LD_VAR 0 17
19032: ST_TO_ADDR
// if buildings then
19033: LD_VAR 0 18
19037: IFFALSE 20365
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19039: LD_ADDR_VAR 0 19
19043: PUSH
19044: LD_VAR 0 18
19048: PPUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 29
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 30
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: PPUSH
19077: CALL_OW 72
19081: ST_TO_ADDR
// if tmp then
19082: LD_VAR 0 19
19086: IFFALSE 19134
// for i in tmp do
19088: LD_ADDR_VAR 0 8
19092: PUSH
19093: LD_VAR 0 19
19097: PUSH
19098: FOR_IN
19099: IFFALSE 19132
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19101: LD_VAR 0 8
19105: PPUSH
19106: CALL_OW 250
19110: PPUSH
19111: LD_VAR 0 8
19115: PPUSH
19116: CALL_OW 251
19120: PPUSH
19121: LD_VAR 0 16
19125: PPUSH
19126: CALL_OW 441
19130: GO 19098
19132: POP
19133: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19134: LD_VAR 0 18
19138: PPUSH
19139: LD_INT 2
19141: PUSH
19142: LD_INT 30
19144: PUSH
19145: LD_INT 32
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 30
19154: PUSH
19155: LD_INT 33
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: LIST
19166: PPUSH
19167: CALL_OW 72
19171: IFFALSE 19259
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19173: LD_ADDR_VAR 0 8
19177: PUSH
19178: LD_VAR 0 18
19182: PPUSH
19183: LD_INT 2
19185: PUSH
19186: LD_INT 30
19188: PUSH
19189: LD_INT 32
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: LD_INT 33
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: LIST
19210: PPUSH
19211: CALL_OW 72
19215: PUSH
19216: FOR_IN
19217: IFFALSE 19257
// begin if not GetBWeapon ( i ) then
19219: LD_VAR 0 8
19223: PPUSH
19224: CALL_OW 269
19228: NOT
19229: IFFALSE 19255
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19231: LD_VAR 0 8
19235: PPUSH
19236: LD_VAR 0 8
19240: PPUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: CALL 20511 0 2
19250: PPUSH
19251: CALL_OW 431
// end ;
19255: GO 19216
19257: POP
19258: POP
// end ; for i = 1 to personel do
19259: LD_ADDR_VAR 0 8
19263: PUSH
19264: DOUBLE
19265: LD_INT 1
19267: DEC
19268: ST_TO_ADDR
19269: LD_VAR 0 6
19273: PUSH
19274: FOR_TO
19275: IFFALSE 20345
// begin if i > 4 then
19277: LD_VAR 0 8
19281: PUSH
19282: LD_INT 4
19284: GREATER
19285: IFFALSE 19289
// break ;
19287: GO 20345
// case i of 1 :
19289: LD_VAR 0 8
19293: PUSH
19294: LD_INT 1
19296: DOUBLE
19297: EQUAL
19298: IFTRUE 19302
19300: GO 19382
19302: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19303: LD_ADDR_VAR 0 12
19307: PUSH
19308: LD_VAR 0 18
19312: PPUSH
19313: LD_INT 22
19315: PUSH
19316: LD_VAR 0 16
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 58
19327: PUSH
19328: EMPTY
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: LD_INT 30
19336: PUSH
19337: LD_INT 32
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 30
19346: PUSH
19347: LD_INT 4
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 30
19356: PUSH
19357: LD_INT 5
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: PPUSH
19375: CALL_OW 72
19379: ST_TO_ADDR
19380: GO 19604
19382: LD_INT 2
19384: DOUBLE
19385: EQUAL
19386: IFTRUE 19390
19388: GO 19452
19390: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19391: LD_ADDR_VAR 0 12
19395: PUSH
19396: LD_VAR 0 18
19400: PPUSH
19401: LD_INT 22
19403: PUSH
19404: LD_VAR 0 16
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 30
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 30
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 72
19449: ST_TO_ADDR
19450: GO 19604
19452: LD_INT 3
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19522
19460: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19461: LD_ADDR_VAR 0 12
19465: PUSH
19466: LD_VAR 0 18
19470: PPUSH
19471: LD_INT 22
19473: PUSH
19474: LD_VAR 0 16
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 30
19498: PUSH
19499: LD_INT 3
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 72
19519: ST_TO_ADDR
19520: GO 19604
19522: LD_INT 4
19524: DOUBLE
19525: EQUAL
19526: IFTRUE 19530
19528: GO 19603
19530: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19531: LD_ADDR_VAR 0 12
19535: PUSH
19536: LD_VAR 0 18
19540: PPUSH
19541: LD_INT 22
19543: PUSH
19544: LD_VAR 0 16
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: LD_INT 30
19558: PUSH
19559: LD_INT 6
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 30
19568: PUSH
19569: LD_INT 7
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 30
19578: PUSH
19579: LD_INT 8
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PPUSH
19596: CALL_OW 72
19600: ST_TO_ADDR
19601: GO 19604
19603: POP
// if i = 1 then
19604: LD_VAR 0 8
19608: PUSH
19609: LD_INT 1
19611: EQUAL
19612: IFFALSE 19723
// begin tmp := [ ] ;
19614: LD_ADDR_VAR 0 19
19618: PUSH
19619: EMPTY
19620: ST_TO_ADDR
// for j in f do
19621: LD_ADDR_VAR 0 9
19625: PUSH
19626: LD_VAR 0 12
19630: PUSH
19631: FOR_IN
19632: IFFALSE 19705
// if GetBType ( j ) = b_bunker then
19634: LD_VAR 0 9
19638: PPUSH
19639: CALL_OW 266
19643: PUSH
19644: LD_INT 32
19646: EQUAL
19647: IFFALSE 19674
// tmp := Insert ( tmp , 1 , j ) else
19649: LD_ADDR_VAR 0 19
19653: PUSH
19654: LD_VAR 0 19
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: LD_VAR 0 9
19666: PPUSH
19667: CALL_OW 2
19671: ST_TO_ADDR
19672: GO 19703
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19674: LD_ADDR_VAR 0 19
19678: PUSH
19679: LD_VAR 0 19
19683: PPUSH
19684: LD_VAR 0 19
19688: PUSH
19689: LD_INT 1
19691: PLUS
19692: PPUSH
19693: LD_VAR 0 9
19697: PPUSH
19698: CALL_OW 2
19702: ST_TO_ADDR
19703: GO 19631
19705: POP
19706: POP
// if tmp then
19707: LD_VAR 0 19
19711: IFFALSE 19723
// f := tmp ;
19713: LD_ADDR_VAR 0 12
19717: PUSH
19718: LD_VAR 0 19
19722: ST_TO_ADDR
// end ; x := personel [ i ] ;
19723: LD_ADDR_VAR 0 13
19727: PUSH
19728: LD_VAR 0 6
19732: PUSH
19733: LD_VAR 0 8
19737: ARRAY
19738: ST_TO_ADDR
// if x = - 1 then
19739: LD_VAR 0 13
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: EQUAL
19748: IFFALSE 19959
// begin for j in f do
19750: LD_ADDR_VAR 0 9
19754: PUSH
19755: LD_VAR 0 12
19759: PUSH
19760: FOR_IN
19761: IFFALSE 19955
// repeat InitHc ;
19763: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19767: LD_VAR 0 9
19771: PPUSH
19772: CALL_OW 266
19776: PUSH
19777: LD_INT 5
19779: EQUAL
19780: IFFALSE 19850
// begin if UnitsInside ( j ) < 3 then
19782: LD_VAR 0 9
19786: PPUSH
19787: CALL_OW 313
19791: PUSH
19792: LD_INT 3
19794: LESS
19795: IFFALSE 19831
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19797: LD_INT 0
19799: PPUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 8
19805: PUSH
19806: LD_INT 9
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: LD_VAR 0 17
19818: ARRAY
19819: PPUSH
19820: LD_VAR 0 4
19824: PPUSH
19825: CALL_OW 380
19829: GO 19848
// PrepareHuman ( false , i , skill ) ;
19831: LD_INT 0
19833: PPUSH
19834: LD_VAR 0 8
19838: PPUSH
19839: LD_VAR 0 4
19843: PPUSH
19844: CALL_OW 380
// end else
19848: GO 19867
// PrepareHuman ( false , i , skill ) ;
19850: LD_INT 0
19852: PPUSH
19853: LD_VAR 0 8
19857: PPUSH
19858: LD_VAR 0 4
19862: PPUSH
19863: CALL_OW 380
// un := CreateHuman ;
19867: LD_ADDR_VAR 0 14
19871: PUSH
19872: CALL_OW 44
19876: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19877: LD_ADDR_VAR 0 7
19881: PUSH
19882: LD_VAR 0 7
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: LD_VAR 0 14
19894: PPUSH
19895: CALL_OW 2
19899: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19900: LD_VAR 0 14
19904: PPUSH
19905: LD_VAR 0 9
19909: PPUSH
19910: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19914: LD_VAR 0 9
19918: PPUSH
19919: CALL_OW 313
19923: PUSH
19924: LD_INT 6
19926: EQUAL
19927: IFTRUE 19951
19929: PUSH
19930: LD_VAR 0 9
19934: PPUSH
19935: CALL_OW 266
19939: PUSH
19940: LD_INT 32
19942: PUSH
19943: LD_INT 31
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: IN
19950: OR
19951: IFFALSE 19763
19953: GO 19760
19955: POP
19956: POP
// end else
19957: GO 20343
// for j = 1 to x do
19959: LD_ADDR_VAR 0 9
19963: PUSH
19964: DOUBLE
19965: LD_INT 1
19967: DEC
19968: ST_TO_ADDR
19969: LD_VAR 0 13
19973: PUSH
19974: FOR_TO
19975: IFFALSE 20341
// begin InitHc ;
19977: CALL_OW 19
// if not f then
19981: LD_VAR 0 12
19985: NOT
19986: IFFALSE 20075
// begin PrepareHuman ( false , i , skill ) ;
19988: LD_INT 0
19990: PPUSH
19991: LD_VAR 0 8
19995: PPUSH
19996: LD_VAR 0 4
20000: PPUSH
20001: CALL_OW 380
// un := CreateHuman ;
20005: LD_ADDR_VAR 0 14
20009: PUSH
20010: CALL_OW 44
20014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20015: LD_ADDR_VAR 0 7
20019: PUSH
20020: LD_VAR 0 7
20024: PPUSH
20025: LD_INT 1
20027: PPUSH
20028: LD_VAR 0 14
20032: PPUSH
20033: CALL_OW 2
20037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20038: LD_VAR 0 14
20042: PPUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 250
20052: PPUSH
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 251
20062: PPUSH
20063: LD_INT 10
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: CALL_OW 50
// continue ;
20073: GO 19974
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20075: LD_VAR 0 12
20079: PUSH
20080: LD_INT 1
20082: ARRAY
20083: PPUSH
20084: CALL_OW 313
20088: IFFALSE 20116
20090: PUSH
20091: LD_VAR 0 12
20095: PUSH
20096: LD_INT 1
20098: ARRAY
20099: PPUSH
20100: CALL_OW 266
20104: PUSH
20105: LD_INT 32
20107: PUSH
20108: LD_INT 31
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: IN
20115: AND
20116: IFTRUE 20137
20118: PUSH
20119: LD_VAR 0 12
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: CALL_OW 313
20132: PUSH
20133: LD_INT 6
20135: EQUAL
20136: OR
20137: IFFALSE 20157
// f := Delete ( f , 1 ) ;
20139: LD_ADDR_VAR 0 12
20143: PUSH
20144: LD_VAR 0 12
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 3
20156: ST_TO_ADDR
// if not f then
20157: LD_VAR 0 12
20161: NOT
20162: IFFALSE 20180
// begin x := x + 2 ;
20164: LD_ADDR_VAR 0 13
20168: PUSH
20169: LD_VAR 0 13
20173: PUSH
20174: LD_INT 2
20176: PLUS
20177: ST_TO_ADDR
// continue ;
20178: GO 19974
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20180: LD_VAR 0 12
20184: PUSH
20185: LD_INT 1
20187: ARRAY
20188: PPUSH
20189: CALL_OW 266
20193: PUSH
20194: LD_INT 5
20196: EQUAL
20197: IFFALSE 20271
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20199: LD_VAR 0 12
20203: PUSH
20204: LD_INT 1
20206: ARRAY
20207: PPUSH
20208: CALL_OW 313
20212: PUSH
20213: LD_INT 3
20215: LESS
20216: IFFALSE 20252
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20218: LD_INT 0
20220: PPUSH
20221: LD_INT 5
20223: PUSH
20224: LD_INT 8
20226: PUSH
20227: LD_INT 9
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: PUSH
20235: LD_VAR 0 17
20239: ARRAY
20240: PPUSH
20241: LD_VAR 0 4
20245: PPUSH
20246: CALL_OW 380
20250: GO 20269
// PrepareHuman ( false , i , skill ) ;
20252: LD_INT 0
20254: PPUSH
20255: LD_VAR 0 8
20259: PPUSH
20260: LD_VAR 0 4
20264: PPUSH
20265: CALL_OW 380
// end else
20269: GO 20288
// PrepareHuman ( false , i , skill ) ;
20271: LD_INT 0
20273: PPUSH
20274: LD_VAR 0 8
20278: PPUSH
20279: LD_VAR 0 4
20283: PPUSH
20284: CALL_OW 380
// un := CreateHuman ;
20288: LD_ADDR_VAR 0 14
20292: PUSH
20293: CALL_OW 44
20297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20298: LD_ADDR_VAR 0 7
20302: PUSH
20303: LD_VAR 0 7
20307: PPUSH
20308: LD_INT 1
20310: PPUSH
20311: LD_VAR 0 14
20315: PPUSH
20316: CALL_OW 2
20320: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20321: LD_VAR 0 14
20325: PPUSH
20326: LD_VAR 0 12
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PPUSH
20335: CALL_OW 52
// end ;
20339: GO 19974
20341: POP
20342: POP
// end ;
20343: GO 19274
20345: POP
20346: POP
// result := result ^ buildings ;
20347: LD_ADDR_VAR 0 7
20351: PUSH
20352: LD_VAR 0 7
20356: PUSH
20357: LD_VAR 0 18
20361: ADD
20362: ST_TO_ADDR
// end else
20363: GO 20506
// begin for i = 1 to personel do
20365: LD_ADDR_VAR 0 8
20369: PUSH
20370: DOUBLE
20371: LD_INT 1
20373: DEC
20374: ST_TO_ADDR
20375: LD_VAR 0 6
20379: PUSH
20380: FOR_TO
20381: IFFALSE 20504
// begin if i > 4 then
20383: LD_VAR 0 8
20387: PUSH
20388: LD_INT 4
20390: GREATER
20391: IFFALSE 20395
// break ;
20393: GO 20504
// x := personel [ i ] ;
20395: LD_ADDR_VAR 0 13
20399: PUSH
20400: LD_VAR 0 6
20404: PUSH
20405: LD_VAR 0 8
20409: ARRAY
20410: ST_TO_ADDR
// if x = - 1 then
20411: LD_VAR 0 13
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: EQUAL
20420: IFFALSE 20424
// continue ;
20422: GO 20380
// PrepareHuman ( false , i , skill ) ;
20424: LD_INT 0
20426: PPUSH
20427: LD_VAR 0 8
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 380
// un := CreateHuman ;
20441: LD_ADDR_VAR 0 14
20445: PUSH
20446: CALL_OW 44
20450: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20451: LD_VAR 0 14
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 250
20465: PPUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 251
20475: PPUSH
20476: LD_INT 10
20478: PPUSH
20479: LD_INT 0
20481: PPUSH
20482: CALL_OW 50
// result := result ^ un ;
20486: LD_ADDR_VAR 0 7
20490: PUSH
20491: LD_VAR 0 7
20495: PUSH
20496: LD_VAR 0 14
20500: ADD
20501: ST_TO_ADDR
// end ;
20502: GO 20380
20504: POP
20505: POP
// end ; end ;
20506: LD_VAR 0 7
20510: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20511: LD_INT 0
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
// result := false ;
20529: LD_ADDR_VAR 0 3
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20537: LD_VAR 0 1
20541: NOT
20542: IFTRUE 20567
20544: PUSH
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL_OW 266
20554: PUSH
20555: LD_INT 32
20557: PUSH
20558: LD_INT 33
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: IN
20565: NOT
20566: OR
20567: IFFALSE 20571
// exit ;
20569: GO 21706
// nat := GetNation ( tower ) ;
20571: LD_ADDR_VAR 0 12
20575: PUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 248
20585: ST_TO_ADDR
// side := GetSide ( tower ) ;
20586: LD_ADDR_VAR 0 16
20590: PUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: CALL_OW 255
20600: ST_TO_ADDR
// x := GetX ( tower ) ;
20601: LD_ADDR_VAR 0 10
20605: PUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL_OW 250
20615: ST_TO_ADDR
// y := GetY ( tower ) ;
20616: LD_ADDR_VAR 0 11
20620: PUSH
20621: LD_VAR 0 1
20625: PPUSH
20626: CALL_OW 251
20630: ST_TO_ADDR
// if not x or not y then
20631: LD_VAR 0 10
20635: NOT
20636: IFTRUE 20645
20638: PUSH
20639: LD_VAR 0 11
20643: NOT
20644: OR
20645: IFFALSE 20649
// exit ;
20647: GO 21706
// weapon := 0 ;
20649: LD_ADDR_VAR 0 18
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// fac_list := [ ] ;
20657: LD_ADDR_VAR 0 17
20661: PUSH
20662: EMPTY
20663: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20664: LD_ADDR_VAR 0 6
20668: PUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL_OW 274
20678: PPUSH
20679: LD_VAR 0 2
20683: PPUSH
20684: LD_INT 0
20686: PPUSH
20687: CALL 18241 0 3
20691: PPUSH
20692: LD_INT 30
20694: PUSH
20695: LD_INT 3
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 72
20706: ST_TO_ADDR
// if not factories then
20707: LD_VAR 0 6
20711: NOT
20712: IFFALSE 20716
// exit ;
20714: GO 21706
// for i in factories do
20716: LD_ADDR_VAR 0 8
20720: PUSH
20721: LD_VAR 0 6
20725: PUSH
20726: FOR_IN
20727: IFFALSE 20752
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20729: LD_ADDR_VAR 0 17
20733: PUSH
20734: LD_VAR 0 17
20738: PUSH
20739: LD_VAR 0 8
20743: PPUSH
20744: CALL_OW 478
20748: UNION
20749: ST_TO_ADDR
20750: GO 20726
20752: POP
20753: POP
// if not fac_list then
20754: LD_VAR 0 17
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 21706
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20763: LD_ADDR_VAR 0 5
20767: PUSH
20768: LD_INT 4
20770: PUSH
20771: LD_INT 5
20773: PUSH
20774: LD_INT 9
20776: PUSH
20777: LD_INT 10
20779: PUSH
20780: LD_INT 6
20782: PUSH
20783: LD_INT 7
20785: PUSH
20786: LD_INT 11
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 27
20800: PUSH
20801: LD_INT 28
20803: PUSH
20804: LD_INT 26
20806: PUSH
20807: LD_INT 30
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 43
20818: PUSH
20819: LD_INT 44
20821: PUSH
20822: LD_INT 46
20824: PUSH
20825: LD_INT 45
20827: PUSH
20828: LD_INT 47
20830: PUSH
20831: LD_INT 49
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: PUSH
20847: LD_VAR 0 12
20851: ARRAY
20852: ST_TO_ADDR
// list := list isect fac_list ;
20853: LD_ADDR_VAR 0 5
20857: PUSH
20858: LD_VAR 0 5
20862: PUSH
20863: LD_VAR 0 17
20867: ISECT
20868: ST_TO_ADDR
// if not list then
20869: LD_VAR 0 5
20873: NOT
20874: IFFALSE 20878
// exit ;
20876: GO 21706
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20878: LD_VAR 0 12
20882: PUSH
20883: LD_INT 3
20885: EQUAL
20886: IFFALSE 20898
20888: PUSH
20889: LD_INT 49
20891: PUSH
20892: LD_VAR 0 5
20896: IN
20897: AND
20898: IFFALSE 20918
20900: PUSH
20901: LD_INT 31
20903: PPUSH
20904: LD_VAR 0 16
20908: PPUSH
20909: CALL_OW 321
20913: PUSH
20914: LD_INT 2
20916: EQUAL
20917: AND
20918: IFFALSE 20978
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20920: LD_INT 22
20922: PUSH
20923: LD_VAR 0 16
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 35
20934: PUSH
20935: LD_INT 49
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 91
20944: PUSH
20945: LD_VAR 0 1
20949: PUSH
20950: LD_INT 10
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: NOT
20968: IFFALSE 20978
// weapon := ru_time_lapser ;
20970: LD_ADDR_VAR 0 18
20974: PUSH
20975: LD_INT 49
20977: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20978: LD_VAR 0 12
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: IN
20993: IFFALSE 21017
20995: PUSH
20996: LD_INT 11
20998: PUSH
20999: LD_VAR 0 5
21003: IN
21004: IFTRUE 21016
21006: PUSH
21007: LD_INT 30
21009: PUSH
21010: LD_VAR 0 5
21014: IN
21015: OR
21016: AND
21017: IFFALSE 21037
21019: PUSH
21020: LD_INT 6
21022: PPUSH
21023: LD_VAR 0 16
21027: PPUSH
21028: CALL_OW 321
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: AND
21037: IFFALSE 21204
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21039: LD_INT 22
21041: PUSH
21042: LD_VAR 0 16
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 35
21056: PUSH
21057: LD_INT 11
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 35
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 91
21081: PUSH
21082: LD_VAR 0 1
21086: PUSH
21087: LD_INT 18
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: PPUSH
21100: CALL_OW 69
21104: NOT
21105: IFFALSE 21181
21107: PUSH
21108: LD_INT 22
21110: PUSH
21111: LD_VAR 0 16
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: LD_INT 30
21125: PUSH
21126: LD_INT 32
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: LD_INT 33
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 91
21150: PUSH
21151: LD_VAR 0 1
21155: PUSH
21156: LD_INT 12
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: PPUSH
21172: CALL_OW 69
21176: PUSH
21177: LD_INT 2
21179: GREATER
21180: AND
21181: IFFALSE 21204
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21183: LD_ADDR_VAR 0 18
21187: PUSH
21188: LD_INT 11
21190: PUSH
21191: LD_INT 30
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_VAR 0 12
21202: ARRAY
21203: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21204: LD_VAR 0 18
21208: NOT
21209: IFFALSE 21229
21211: PUSH
21212: LD_INT 40
21214: PPUSH
21215: LD_VAR 0 16
21219: PPUSH
21220: CALL_OW 321
21224: PUSH
21225: LD_INT 2
21227: EQUAL
21228: AND
21229: IFFALSE 21265
21231: PUSH
21232: LD_INT 7
21234: PUSH
21235: LD_VAR 0 5
21239: IN
21240: IFTRUE 21252
21242: PUSH
21243: LD_INT 28
21245: PUSH
21246: LD_VAR 0 5
21250: IN
21251: OR
21252: IFTRUE 21264
21254: PUSH
21255: LD_INT 45
21257: PUSH
21258: LD_VAR 0 5
21262: IN
21263: OR
21264: AND
21265: IFFALSE 21519
// begin hex := GetHexInfo ( x , y ) ;
21267: LD_ADDR_VAR 0 4
21271: PUSH
21272: LD_VAR 0 10
21276: PPUSH
21277: LD_VAR 0 11
21281: PPUSH
21282: CALL_OW 546
21286: ST_TO_ADDR
// if hex [ 1 ] then
21287: LD_VAR 0 4
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: IFFALSE 21299
// exit ;
21297: GO 21706
// height := hex [ 2 ] ;
21299: LD_ADDR_VAR 0 15
21303: PUSH
21304: LD_VAR 0 4
21308: PUSH
21309: LD_INT 2
21311: ARRAY
21312: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21313: LD_ADDR_VAR 0 14
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: LD_INT 5
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: ST_TO_ADDR
// for i in tmp do
21336: LD_ADDR_VAR 0 8
21340: PUSH
21341: LD_VAR 0 14
21345: PUSH
21346: FOR_IN
21347: IFFALSE 21517
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21349: LD_ADDR_VAR 0 9
21353: PUSH
21354: LD_VAR 0 10
21358: PPUSH
21359: LD_VAR 0 8
21363: PPUSH
21364: LD_INT 5
21366: PPUSH
21367: CALL_OW 272
21371: PUSH
21372: LD_VAR 0 11
21376: PPUSH
21377: LD_VAR 0 8
21381: PPUSH
21382: LD_INT 5
21384: PPUSH
21385: CALL_OW 273
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21394: LD_VAR 0 9
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PPUSH
21403: LD_VAR 0 9
21407: PUSH
21408: LD_INT 2
21410: ARRAY
21411: PPUSH
21412: CALL_OW 488
21416: IFFALSE 21515
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21418: LD_ADDR_VAR 0 4
21422: PUSH
21423: LD_VAR 0 9
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: PPUSH
21432: LD_VAR 0 9
21436: PUSH
21437: LD_INT 2
21439: ARRAY
21440: PPUSH
21441: CALL_OW 546
21445: ST_TO_ADDR
// if hex [ 1 ] then
21446: LD_VAR 0 4
21450: PUSH
21451: LD_INT 1
21453: ARRAY
21454: IFFALSE 21458
// continue ;
21456: GO 21346
// h := hex [ 2 ] ;
21458: LD_ADDR_VAR 0 13
21462: PUSH
21463: LD_VAR 0 4
21467: PUSH
21468: LD_INT 2
21470: ARRAY
21471: ST_TO_ADDR
// if h + 7 < height then
21472: LD_VAR 0 13
21476: PUSH
21477: LD_INT 7
21479: PLUS
21480: PUSH
21481: LD_VAR 0 15
21485: LESS
21486: IFFALSE 21515
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21488: LD_ADDR_VAR 0 18
21492: PUSH
21493: LD_INT 7
21495: PUSH
21496: LD_INT 28
21498: PUSH
21499: LD_INT 45
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: LD_VAR 0 12
21511: ARRAY
21512: ST_TO_ADDR
// break ;
21513: GO 21517
// end ; end ; end ;
21515: GO 21346
21517: POP
21518: POP
// end ; if not weapon then
21519: LD_VAR 0 18
21523: NOT
21524: IFFALSE 21584
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21526: LD_ADDR_VAR 0 5
21530: PUSH
21531: LD_VAR 0 5
21535: PUSH
21536: LD_INT 11
21538: PUSH
21539: LD_INT 30
21541: PUSH
21542: LD_INT 49
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: DIFF
21550: ST_TO_ADDR
// if not list then
21551: LD_VAR 0 5
21555: NOT
21556: IFFALSE 21560
// exit ;
21558: GO 21706
// weapon := list [ rand ( 1 , list ) ] ;
21560: LD_ADDR_VAR 0 18
21564: PUSH
21565: LD_VAR 0 5
21569: PUSH
21570: LD_INT 1
21572: PPUSH
21573: LD_VAR 0 5
21577: PPUSH
21578: CALL_OW 12
21582: ARRAY
21583: ST_TO_ADDR
// end ; if weapon then
21584: LD_VAR 0 18
21588: IFFALSE 21706
// begin tmp := CostOfWeapon ( weapon ) ;
21590: LD_ADDR_VAR 0 14
21594: PUSH
21595: LD_VAR 0 18
21599: PPUSH
21600: CALL_OW 451
21604: ST_TO_ADDR
// j := GetBase ( tower ) ;
21605: LD_ADDR_VAR 0 9
21609: PUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 274
21619: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21620: LD_VAR 0 9
21624: PPUSH
21625: LD_INT 1
21627: PPUSH
21628: CALL_OW 275
21632: PUSH
21633: LD_VAR 0 14
21637: PUSH
21638: LD_INT 1
21640: ARRAY
21641: GREATEREQUAL
21642: IFFALSE 21668
21644: PUSH
21645: LD_VAR 0 9
21649: PPUSH
21650: LD_INT 2
21652: PPUSH
21653: CALL_OW 275
21657: PUSH
21658: LD_VAR 0 14
21662: PUSH
21663: LD_INT 2
21665: ARRAY
21666: GREATEREQUAL
21667: AND
21668: IFFALSE 21694
21670: PUSH
21671: LD_VAR 0 9
21675: PPUSH
21676: LD_INT 3
21678: PPUSH
21679: CALL_OW 275
21683: PUSH
21684: LD_VAR 0 14
21688: PUSH
21689: LD_INT 3
21691: ARRAY
21692: GREATEREQUAL
21693: AND
21694: IFFALSE 21706
// result := weapon ;
21696: LD_ADDR_VAR 0 3
21700: PUSH
21701: LD_VAR 0 18
21705: ST_TO_ADDR
// end ; end ;
21706: LD_VAR 0 3
21710: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21711: LD_INT 0
21713: PPUSH
21714: PPUSH
// result := true ;
21715: LD_ADDR_VAR 0 3
21719: PUSH
21720: LD_INT 1
21722: ST_TO_ADDR
// if array1 = array2 then
21723: LD_VAR 0 1
21727: PUSH
21728: LD_VAR 0 2
21732: EQUAL
21733: IFFALSE 21793
// begin for i = 1 to array1 do
21735: LD_ADDR_VAR 0 4
21739: PUSH
21740: DOUBLE
21741: LD_INT 1
21743: DEC
21744: ST_TO_ADDR
21745: LD_VAR 0 1
21749: PUSH
21750: FOR_TO
21751: IFFALSE 21789
// if array1 [ i ] <> array2 [ i ] then
21753: LD_VAR 0 1
21757: PUSH
21758: LD_VAR 0 4
21762: ARRAY
21763: PUSH
21764: LD_VAR 0 2
21768: PUSH
21769: LD_VAR 0 4
21773: ARRAY
21774: NONEQUAL
21775: IFFALSE 21787
// begin result := false ;
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_INT 0
21784: ST_TO_ADDR
// break ;
21785: GO 21789
// end ;
21787: GO 21750
21789: POP
21790: POP
// end else
21791: GO 21801
// result := false ;
21793: LD_ADDR_VAR 0 3
21797: PUSH
21798: LD_INT 0
21800: ST_TO_ADDR
// end ;
21801: LD_VAR 0 3
21805: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21806: LD_INT 0
21808: PPUSH
21809: PPUSH
// if not array1 or not array2 then
21810: LD_VAR 0 1
21814: NOT
21815: IFTRUE 21824
21817: PUSH
21818: LD_VAR 0 2
21822: NOT
21823: OR
21824: IFFALSE 21828
// exit ;
21826: GO 21892
// result := true ;
21828: LD_ADDR_VAR 0 3
21832: PUSH
21833: LD_INT 1
21835: ST_TO_ADDR
// for i = 1 to array1 do
21836: LD_ADDR_VAR 0 4
21840: PUSH
21841: DOUBLE
21842: LD_INT 1
21844: DEC
21845: ST_TO_ADDR
21846: LD_VAR 0 1
21850: PUSH
21851: FOR_TO
21852: IFFALSE 21890
// if array1 [ i ] <> array2 [ i ] then
21854: LD_VAR 0 1
21858: PUSH
21859: LD_VAR 0 4
21863: ARRAY
21864: PUSH
21865: LD_VAR 0 2
21869: PUSH
21870: LD_VAR 0 4
21874: ARRAY
21875: NONEQUAL
21876: IFFALSE 21888
// begin result := false ;
21878: LD_ADDR_VAR 0 3
21882: PUSH
21883: LD_INT 0
21885: ST_TO_ADDR
// break ;
21886: GO 21890
// end ;
21888: GO 21851
21890: POP
21891: POP
// end ;
21892: LD_VAR 0 3
21896: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
21901: PPUSH
// pom := GetBase ( fac ) ;
21902: LD_ADDR_VAR 0 5
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 274
21916: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21917: LD_ADDR_VAR 0 4
21921: PUSH
21922: LD_VAR 0 2
21926: PUSH
21927: LD_INT 1
21929: ARRAY
21930: PPUSH
21931: LD_VAR 0 2
21935: PUSH
21936: LD_INT 2
21938: ARRAY
21939: PPUSH
21940: LD_VAR 0 2
21944: PUSH
21945: LD_INT 3
21947: ARRAY
21948: PPUSH
21949: LD_VAR 0 2
21953: PUSH
21954: LD_INT 4
21956: ARRAY
21957: PPUSH
21958: CALL_OW 449
21962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: LD_VAR 0 5
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 275
21980: PUSH
21981: LD_VAR 0 4
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: GREATEREQUAL
21990: IFFALSE 22016
21992: PUSH
21993: LD_VAR 0 5
21997: PPUSH
21998: LD_INT 2
22000: PPUSH
22001: CALL_OW 275
22005: PUSH
22006: LD_VAR 0 4
22010: PUSH
22011: LD_INT 2
22013: ARRAY
22014: GREATEREQUAL
22015: AND
22016: IFFALSE 22042
22018: PUSH
22019: LD_VAR 0 5
22023: PPUSH
22024: LD_INT 3
22026: PPUSH
22027: CALL_OW 275
22031: PUSH
22032: LD_VAR 0 4
22036: PUSH
22037: LD_INT 3
22039: ARRAY
22040: GREATEREQUAL
22041: AND
22042: ST_TO_ADDR
// end ;
22043: LD_VAR 0 3
22047: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
// pom := GetBase ( building ) ;
22054: LD_ADDR_VAR 0 3
22058: PUSH
22059: LD_VAR 0 1
22063: PPUSH
22064: CALL_OW 274
22068: ST_TO_ADDR
// if not pom then
22069: LD_VAR 0 3
22073: NOT
22074: IFFALSE 22078
// exit ;
22076: GO 22252
// btype := GetBType ( building ) ;
22078: LD_ADDR_VAR 0 5
22082: PUSH
22083: LD_VAR 0 1
22087: PPUSH
22088: CALL_OW 266
22092: ST_TO_ADDR
// if btype = b_armoury then
22093: LD_VAR 0 5
22097: PUSH
22098: LD_INT 4
22100: EQUAL
22101: IFFALSE 22111
// btype := b_barracks ;
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_INT 5
22110: ST_TO_ADDR
// if btype = b_depot then
22111: LD_VAR 0 5
22115: PUSH
22116: LD_INT 0
22118: EQUAL
22119: IFFALSE 22129
// btype := b_warehouse ;
22121: LD_ADDR_VAR 0 5
22125: PUSH
22126: LD_INT 1
22128: ST_TO_ADDR
// if btype = b_workshop then
22129: LD_VAR 0 5
22133: PUSH
22134: LD_INT 2
22136: EQUAL
22137: IFFALSE 22147
// btype := b_factory ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_INT 3
22146: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22147: LD_ADDR_VAR 0 4
22151: PUSH
22152: LD_VAR 0 5
22156: PPUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 248
22166: PPUSH
22167: CALL_OW 450
22171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22172: LD_ADDR_VAR 0 2
22176: PUSH
22177: LD_VAR 0 3
22181: PPUSH
22182: LD_INT 1
22184: PPUSH
22185: CALL_OW 275
22189: PUSH
22190: LD_VAR 0 4
22194: PUSH
22195: LD_INT 1
22197: ARRAY
22198: GREATEREQUAL
22199: IFFALSE 22225
22201: PUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: LD_INT 2
22209: PPUSH
22210: CALL_OW 275
22214: PUSH
22215: LD_VAR 0 4
22219: PUSH
22220: LD_INT 2
22222: ARRAY
22223: GREATEREQUAL
22224: AND
22225: IFFALSE 22251
22227: PUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 3
22235: PPUSH
22236: CALL_OW 275
22240: PUSH
22241: LD_VAR 0 4
22245: PUSH
22246: LD_INT 3
22248: ARRAY
22249: GREATEREQUAL
22250: AND
22251: ST_TO_ADDR
// end ;
22252: LD_VAR 0 2
22256: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22257: LD_INT 0
22259: PPUSH
22260: PPUSH
22261: PPUSH
// pom := GetBase ( building ) ;
22262: LD_ADDR_VAR 0 4
22266: PUSH
22267: LD_VAR 0 1
22271: PPUSH
22272: CALL_OW 274
22276: ST_TO_ADDR
// if not pom then
22277: LD_VAR 0 4
22281: NOT
22282: IFFALSE 22286
// exit ;
22284: GO 22391
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22286: LD_ADDR_VAR 0 5
22290: PUSH
22291: LD_VAR 0 2
22295: PPUSH
22296: LD_VAR 0 1
22300: PPUSH
22301: CALL_OW 248
22305: PPUSH
22306: CALL_OW 450
22310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22311: LD_ADDR_VAR 0 3
22315: PUSH
22316: LD_VAR 0 4
22320: PPUSH
22321: LD_INT 1
22323: PPUSH
22324: CALL_OW 275
22328: PUSH
22329: LD_VAR 0 5
22333: PUSH
22334: LD_INT 1
22336: ARRAY
22337: GREATEREQUAL
22338: IFFALSE 22364
22340: PUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_INT 2
22348: PPUSH
22349: CALL_OW 275
22353: PUSH
22354: LD_VAR 0 5
22358: PUSH
22359: LD_INT 2
22361: ARRAY
22362: GREATEREQUAL
22363: AND
22364: IFFALSE 22390
22366: PUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: CALL_OW 275
22379: PUSH
22380: LD_VAR 0 5
22384: PUSH
22385: LD_INT 3
22387: ARRAY
22388: GREATEREQUAL
22389: AND
22390: ST_TO_ADDR
// end ;
22391: LD_VAR 0 3
22395: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22396: LD_INT 0
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
// result := false ;
22409: LD_ADDR_VAR 0 8
22413: PUSH
22414: LD_INT 0
22416: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22417: LD_VAR 0 5
22421: NOT
22422: IFTRUE 22431
22424: PUSH
22425: LD_VAR 0 1
22429: NOT
22430: OR
22431: IFTRUE 22440
22433: PUSH
22434: LD_VAR 0 2
22438: NOT
22439: OR
22440: IFTRUE 22449
22442: PUSH
22443: LD_VAR 0 3
22447: NOT
22448: OR
22449: IFFALSE 22453
// exit ;
22451: GO 23279
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22453: LD_ADDR_VAR 0 14
22457: PUSH
22458: LD_VAR 0 1
22462: PPUSH
22463: LD_VAR 0 2
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_VAR 0 4
22477: PPUSH
22478: LD_VAR 0 5
22482: PUSH
22483: LD_INT 1
22485: ARRAY
22486: PPUSH
22487: CALL_OW 248
22491: PPUSH
22492: LD_INT 0
22494: PPUSH
22495: CALL 24560 0 6
22499: ST_TO_ADDR
// if not hexes then
22500: LD_VAR 0 14
22504: NOT
22505: IFFALSE 22509
// exit ;
22507: GO 23279
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22509: LD_ADDR_VAR 0 17
22513: PUSH
22514: LD_VAR 0 5
22518: PPUSH
22519: LD_INT 22
22521: PUSH
22522: LD_VAR 0 13
22526: PPUSH
22527: CALL_OW 255
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 30
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 30
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 72
22572: ST_TO_ADDR
// for i = 1 to hexes do
22573: LD_ADDR_VAR 0 9
22577: PUSH
22578: DOUBLE
22579: LD_INT 1
22581: DEC
22582: ST_TO_ADDR
22583: LD_VAR 0 14
22587: PUSH
22588: FOR_TO
22589: IFFALSE 23277
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22591: LD_ADDR_VAR 0 13
22595: PUSH
22596: LD_VAR 0 14
22600: PUSH
22601: LD_VAR 0 9
22605: ARRAY
22606: PUSH
22607: LD_INT 1
22609: ARRAY
22610: PPUSH
22611: LD_VAR 0 14
22615: PUSH
22616: LD_VAR 0 9
22620: ARRAY
22621: PUSH
22622: LD_INT 2
22624: ARRAY
22625: PPUSH
22626: CALL_OW 428
22630: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22631: LD_VAR 0 14
22635: PUSH
22636: LD_VAR 0 9
22640: ARRAY
22641: PUSH
22642: LD_INT 1
22644: ARRAY
22645: PPUSH
22646: LD_VAR 0 14
22650: PUSH
22651: LD_VAR 0 9
22655: ARRAY
22656: PUSH
22657: LD_INT 2
22659: ARRAY
22660: PPUSH
22661: CALL_OW 351
22665: IFTRUE 22704
22667: PUSH
22668: LD_VAR 0 14
22672: PUSH
22673: LD_VAR 0 9
22677: ARRAY
22678: PUSH
22679: LD_INT 1
22681: ARRAY
22682: PPUSH
22683: LD_VAR 0 14
22687: PUSH
22688: LD_VAR 0 9
22692: ARRAY
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PPUSH
22698: CALL_OW 488
22702: NOT
22703: OR
22704: IFTRUE 22721
22706: PUSH
22707: LD_VAR 0 13
22711: PPUSH
22712: CALL_OW 247
22716: PUSH
22717: LD_INT 3
22719: EQUAL
22720: OR
22721: IFFALSE 22727
// exit ;
22723: POP
22724: POP
22725: GO 23279
// if not tmp then
22727: LD_VAR 0 13
22731: NOT
22732: IFFALSE 22736
// continue ;
22734: GO 22588
// result := true ;
22736: LD_ADDR_VAR 0 8
22740: PUSH
22741: LD_INT 1
22743: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22744: LD_VAR 0 6
22748: IFFALSE 22765
22750: PUSH
22751: LD_VAR 0 13
22755: PPUSH
22756: CALL_OW 247
22760: PUSH
22761: LD_INT 2
22763: EQUAL
22764: AND
22765: IFFALSE 22782
22767: PUSH
22768: LD_VAR 0 13
22772: PPUSH
22773: CALL_OW 263
22777: PUSH
22778: LD_INT 1
22780: EQUAL
22781: AND
22782: IFFALSE 22946
// begin if IsDrivenBy ( tmp ) then
22784: LD_VAR 0 13
22788: PPUSH
22789: CALL_OW 311
22793: IFFALSE 22797
// continue ;
22795: GO 22588
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22797: LD_VAR 0 6
22801: PPUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 60
22807: PUSH
22808: EMPTY
22809: LIST
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 3
22817: PUSH
22818: LD_INT 55
22820: PUSH
22821: EMPTY
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PPUSH
22832: CALL_OW 72
22836: IFFALSE 22944
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22838: LD_ADDR_VAR 0 18
22842: PUSH
22843: LD_VAR 0 6
22847: PPUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 60
22853: PUSH
22854: EMPTY
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 55
22866: PUSH
22867: EMPTY
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 72
22882: PUSH
22883: LD_INT 1
22885: ARRAY
22886: ST_TO_ADDR
// if IsInUnit ( driver ) then
22887: LD_VAR 0 18
22891: PPUSH
22892: CALL_OW 310
22896: IFFALSE 22907
// ComExit ( driver ) ;
22898: LD_VAR 0 18
22902: PPUSH
22903: CALL 48550 0 1
// AddComEnterUnit ( driver , tmp ) ;
22907: LD_VAR 0 18
22911: PPUSH
22912: LD_VAR 0 13
22916: PPUSH
22917: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22921: LD_VAR 0 18
22925: PPUSH
22926: LD_VAR 0 7
22930: PPUSH
22931: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22935: LD_VAR 0 18
22939: PPUSH
22940: CALL_OW 181
// end ; continue ;
22944: GO 22588
// end ; if not cleaners or not tmp in cleaners then
22946: LD_VAR 0 6
22950: NOT
22951: IFTRUE 22966
22953: PUSH
22954: LD_VAR 0 13
22958: PUSH
22959: LD_VAR 0 6
22963: IN
22964: NOT
22965: OR
22966: IFFALSE 23275
// begin if dep then
22968: LD_VAR 0 17
22972: IFFALSE 23108
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22974: LD_ADDR_VAR 0 16
22978: PUSH
22979: LD_VAR 0 17
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: CALL_OW 250
22992: PPUSH
22993: LD_VAR 0 17
22997: PUSH
22998: LD_INT 1
23000: ARRAY
23001: PPUSH
23002: CALL_OW 254
23006: PPUSH
23007: LD_INT 5
23009: PPUSH
23010: CALL_OW 272
23014: PUSH
23015: LD_VAR 0 17
23019: PUSH
23020: LD_INT 1
23022: ARRAY
23023: PPUSH
23024: CALL_OW 251
23028: PPUSH
23029: LD_VAR 0 17
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: CALL_OW 254
23042: PPUSH
23043: LD_INT 5
23045: PPUSH
23046: CALL_OW 273
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23055: LD_VAR 0 16
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: LD_VAR 0 16
23068: PUSH
23069: LD_INT 2
23071: ARRAY
23072: PPUSH
23073: CALL_OW 488
23077: IFFALSE 23108
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23079: LD_VAR 0 13
23083: PPUSH
23084: LD_VAR 0 16
23088: PUSH
23089: LD_INT 1
23091: ARRAY
23092: PPUSH
23093: LD_VAR 0 16
23097: PUSH
23098: LD_INT 2
23100: ARRAY
23101: PPUSH
23102: CALL_OW 111
// continue ;
23106: GO 22588
// end ; end ; r := GetDir ( tmp ) ;
23108: LD_ADDR_VAR 0 15
23112: PUSH
23113: LD_VAR 0 13
23117: PPUSH
23118: CALL_OW 254
23122: ST_TO_ADDR
// if r = 5 then
23123: LD_VAR 0 15
23127: PUSH
23128: LD_INT 5
23130: EQUAL
23131: IFFALSE 23141
// r := 0 ;
23133: LD_ADDR_VAR 0 15
23137: PUSH
23138: LD_INT 0
23140: ST_TO_ADDR
// for j = r to 5 do
23141: LD_ADDR_VAR 0 10
23145: PUSH
23146: DOUBLE
23147: LD_VAR 0 15
23151: DEC
23152: ST_TO_ADDR
23153: LD_INT 5
23155: PUSH
23156: FOR_TO
23157: IFFALSE 23273
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23159: LD_ADDR_VAR 0 11
23163: PUSH
23164: LD_VAR 0 13
23168: PPUSH
23169: CALL_OW 250
23173: PPUSH
23174: LD_VAR 0 10
23178: PPUSH
23179: LD_INT 2
23181: PPUSH
23182: CALL_OW 272
23186: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23187: LD_ADDR_VAR 0 12
23191: PUSH
23192: LD_VAR 0 13
23196: PPUSH
23197: CALL_OW 251
23201: PPUSH
23202: LD_VAR 0 10
23206: PPUSH
23207: LD_INT 2
23209: PPUSH
23210: CALL_OW 273
23214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23215: LD_VAR 0 11
23219: PPUSH
23220: LD_VAR 0 12
23224: PPUSH
23225: CALL_OW 488
23229: IFFALSE 23248
23231: PUSH
23232: LD_VAR 0 11
23236: PPUSH
23237: LD_VAR 0 12
23241: PPUSH
23242: CALL_OW 428
23246: NOT
23247: AND
23248: IFFALSE 23271
// begin ComMoveXY ( tmp , _x , _y ) ;
23250: LD_VAR 0 13
23254: PPUSH
23255: LD_VAR 0 11
23259: PPUSH
23260: LD_VAR 0 12
23264: PPUSH
23265: CALL_OW 111
// break ;
23269: GO 23273
// end ; end ;
23271: GO 23156
23273: POP
23274: POP
// end ; end ;
23275: GO 22588
23277: POP
23278: POP
// end ;
23279: LD_VAR 0 8
23283: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23284: LD_INT 0
23286: PPUSH
// result := true ;
23287: LD_ADDR_VAR 0 3
23291: PUSH
23292: LD_INT 1
23294: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23295: LD_VAR 0 2
23299: PUSH
23300: LD_INT 24
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23314
23306: LD_INT 33
23308: DOUBLE
23309: EQUAL
23310: IFTRUE 23314
23312: GO 23339
23314: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_INT 32
23322: PPUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 321
23332: PUSH
23333: LD_INT 2
23335: EQUAL
23336: ST_TO_ADDR
23337: GO 23655
23339: LD_INT 20
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23372
23347: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23348: LD_ADDR_VAR 0 3
23352: PUSH
23353: LD_INT 6
23355: PPUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 321
23365: PUSH
23366: LD_INT 2
23368: EQUAL
23369: ST_TO_ADDR
23370: GO 23655
23372: LD_INT 22
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23386
23378: LD_INT 36
23380: DOUBLE
23381: EQUAL
23382: IFTRUE 23386
23384: GO 23411
23386: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23387: LD_ADDR_VAR 0 3
23391: PUSH
23392: LD_INT 15
23394: PPUSH
23395: LD_VAR 0 1
23399: PPUSH
23400: CALL_OW 321
23404: PUSH
23405: LD_INT 2
23407: EQUAL
23408: ST_TO_ADDR
23409: GO 23655
23411: LD_INT 30
23413: DOUBLE
23414: EQUAL
23415: IFTRUE 23419
23417: GO 23444
23419: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23420: LD_ADDR_VAR 0 3
23424: PUSH
23425: LD_INT 20
23427: PPUSH
23428: LD_VAR 0 1
23432: PPUSH
23433: CALL_OW 321
23437: PUSH
23438: LD_INT 2
23440: EQUAL
23441: ST_TO_ADDR
23442: GO 23655
23444: LD_INT 28
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23458
23450: LD_INT 21
23452: DOUBLE
23453: EQUAL
23454: IFTRUE 23458
23456: GO 23483
23458: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: LD_INT 21
23466: PPUSH
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL_OW 321
23476: PUSH
23477: LD_INT 2
23479: EQUAL
23480: ST_TO_ADDR
23481: GO 23655
23483: LD_INT 16
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23516
23491: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_INT 84
23499: PPUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 321
23509: PUSH
23510: LD_INT 2
23512: EQUAL
23513: ST_TO_ADDR
23514: GO 23655
23516: LD_INT 19
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23530
23522: LD_INT 23
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23555
23530: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23531: LD_ADDR_VAR 0 3
23535: PUSH
23536: LD_INT 83
23538: PPUSH
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 321
23548: PUSH
23549: LD_INT 2
23551: EQUAL
23552: ST_TO_ADDR
23553: GO 23655
23555: LD_INT 17
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23588
23563: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23564: LD_ADDR_VAR 0 3
23568: PUSH
23569: LD_INT 39
23571: PPUSH
23572: LD_VAR 0 1
23576: PPUSH
23577: CALL_OW 321
23581: PUSH
23582: LD_INT 2
23584: EQUAL
23585: ST_TO_ADDR
23586: GO 23655
23588: LD_INT 18
23590: DOUBLE
23591: EQUAL
23592: IFTRUE 23596
23594: GO 23621
23596: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: LD_INT 40
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL_OW 321
23614: PUSH
23615: LD_INT 2
23617: EQUAL
23618: ST_TO_ADDR
23619: GO 23655
23621: LD_INT 27
23623: DOUBLE
23624: EQUAL
23625: IFTRUE 23629
23627: GO 23654
23629: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23630: LD_ADDR_VAR 0 3
23634: PUSH
23635: LD_INT 35
23637: PPUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 321
23647: PUSH
23648: LD_INT 2
23650: EQUAL
23651: ST_TO_ADDR
23652: GO 23655
23654: POP
// end ;
23655: LD_VAR 0 3
23659: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
// result := false ;
23673: LD_ADDR_VAR 0 6
23677: PUSH
23678: LD_INT 0
23680: ST_TO_ADDR
// if btype = b_depot then
23681: LD_VAR 0 2
23685: PUSH
23686: LD_INT 0
23688: EQUAL
23689: IFFALSE 23701
// begin result := true ;
23691: LD_ADDR_VAR 0 6
23695: PUSH
23696: LD_INT 1
23698: ST_TO_ADDR
// exit ;
23699: GO 24555
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23701: LD_VAR 0 1
23705: NOT
23706: IFTRUE 23731
23708: PUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 266
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: IN
23729: NOT
23730: OR
23731: IFTRUE 23740
23733: PUSH
23734: LD_VAR 0 2
23738: NOT
23739: OR
23740: IFTRUE 23776
23742: PUSH
23743: LD_VAR 0 5
23747: PUSH
23748: LD_INT 0
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: IN
23774: NOT
23775: OR
23776: IFTRUE 23795
23778: PUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_VAR 0 4
23788: PPUSH
23789: CALL_OW 488
23793: NOT
23794: OR
23795: IFFALSE 23799
// exit ;
23797: GO 24555
// side := GetSide ( depot ) ;
23799: LD_ADDR_VAR 0 9
23803: PUSH
23804: LD_VAR 0 1
23808: PPUSH
23809: CALL_OW 255
23813: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23814: LD_VAR 0 9
23818: PPUSH
23819: LD_VAR 0 2
23823: PPUSH
23824: CALL 23284 0 2
23828: NOT
23829: IFFALSE 23833
// exit ;
23831: GO 24555
// pom := GetBase ( depot ) ;
23833: LD_ADDR_VAR 0 10
23837: PUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23848: LD_ADDR_VAR 0 11
23852: PUSH
23853: LD_VAR 0 2
23857: PPUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 248
23867: PPUSH
23868: CALL_OW 450
23872: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23873: LD_VAR 0 10
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL_OW 275
23885: PUSH
23886: LD_VAR 0 11
23890: PUSH
23891: LD_INT 1
23893: ARRAY
23894: GREATEREQUAL
23895: IFFALSE 23921
23897: PUSH
23898: LD_VAR 0 10
23902: PPUSH
23903: LD_INT 2
23905: PPUSH
23906: CALL_OW 275
23910: PUSH
23911: LD_VAR 0 11
23915: PUSH
23916: LD_INT 2
23918: ARRAY
23919: GREATEREQUAL
23920: AND
23921: IFFALSE 23947
23923: PUSH
23924: LD_VAR 0 10
23928: PPUSH
23929: LD_INT 3
23931: PPUSH
23932: CALL_OW 275
23936: PUSH
23937: LD_VAR 0 11
23941: PUSH
23942: LD_INT 3
23944: ARRAY
23945: GREATEREQUAL
23946: AND
23947: NOT
23948: IFFALSE 23952
// exit ;
23950: GO 24555
// if GetBType ( depot ) = b_depot then
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL_OW 266
23961: PUSH
23962: LD_INT 0
23964: EQUAL
23965: IFFALSE 23977
// dist := 28 else
23967: LD_ADDR_VAR 0 14
23971: PUSH
23972: LD_INT 28
23974: ST_TO_ADDR
23975: GO 23985
// dist := 36 ;
23977: LD_ADDR_VAR 0 14
23981: PUSH
23982: LD_INT 36
23984: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23985: LD_VAR 0 1
23989: PPUSH
23990: LD_VAR 0 3
23994: PPUSH
23995: LD_VAR 0 4
23999: PPUSH
24000: CALL_OW 297
24004: PUSH
24005: LD_VAR 0 14
24009: GREATER
24010: IFFALSE 24014
// exit ;
24012: GO 24555
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24014: LD_ADDR_VAR 0 12
24018: PUSH
24019: LD_VAR 0 2
24023: PPUSH
24024: LD_VAR 0 3
24028: PPUSH
24029: LD_VAR 0 4
24033: PPUSH
24034: LD_VAR 0 5
24038: PPUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 248
24048: PPUSH
24049: LD_INT 0
24051: PPUSH
24052: CALL 24560 0 6
24056: ST_TO_ADDR
// if not hexes then
24057: LD_VAR 0 12
24061: NOT
24062: IFFALSE 24066
// exit ;
24064: GO 24555
// hex := GetHexInfo ( x , y ) ;
24066: LD_ADDR_VAR 0 15
24070: PUSH
24071: LD_VAR 0 3
24075: PPUSH
24076: LD_VAR 0 4
24080: PPUSH
24081: CALL_OW 546
24085: ST_TO_ADDR
// if hex [ 1 ] then
24086: LD_VAR 0 15
24090: PUSH
24091: LD_INT 1
24093: ARRAY
24094: IFFALSE 24098
// exit ;
24096: GO 24555
// height := hex [ 2 ] ;
24098: LD_ADDR_VAR 0 13
24102: PUSH
24103: LD_VAR 0 15
24107: PUSH
24108: LD_INT 2
24110: ARRAY
24111: ST_TO_ADDR
// for i = 1 to hexes do
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: DOUBLE
24118: LD_INT 1
24120: DEC
24121: ST_TO_ADDR
24122: LD_VAR 0 12
24126: PUSH
24127: FOR_TO
24128: IFFALSE 24472
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24130: LD_VAR 0 12
24134: PUSH
24135: LD_VAR 0 7
24139: ARRAY
24140: PUSH
24141: LD_INT 1
24143: ARRAY
24144: PPUSH
24145: LD_VAR 0 12
24149: PUSH
24150: LD_VAR 0 7
24154: ARRAY
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: PPUSH
24160: CALL_OW 488
24164: NOT
24165: IFTRUE 24207
24167: PUSH
24168: LD_VAR 0 12
24172: PUSH
24173: LD_VAR 0 7
24177: ARRAY
24178: PUSH
24179: LD_INT 1
24181: ARRAY
24182: PPUSH
24183: LD_VAR 0 12
24187: PUSH
24188: LD_VAR 0 7
24192: ARRAY
24193: PUSH
24194: LD_INT 2
24196: ARRAY
24197: PPUSH
24198: CALL_OW 428
24202: PUSH
24203: LD_INT 0
24205: GREATER
24206: OR
24207: IFTRUE 24245
24209: PUSH
24210: LD_VAR 0 12
24214: PUSH
24215: LD_VAR 0 7
24219: ARRAY
24220: PUSH
24221: LD_INT 1
24223: ARRAY
24224: PPUSH
24225: LD_VAR 0 12
24229: PUSH
24230: LD_VAR 0 7
24234: ARRAY
24235: PUSH
24236: LD_INT 2
24238: ARRAY
24239: PPUSH
24240: CALL_OW 351
24244: OR
24245: IFFALSE 24251
// exit ;
24247: POP
24248: POP
24249: GO 24555
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24251: LD_ADDR_VAR 0 8
24255: PUSH
24256: LD_VAR 0 12
24260: PUSH
24261: LD_VAR 0 7
24265: ARRAY
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PPUSH
24271: LD_VAR 0 12
24275: PUSH
24276: LD_VAR 0 7
24280: ARRAY
24281: PUSH
24282: LD_INT 2
24284: ARRAY
24285: PPUSH
24286: CALL_OW 546
24290: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24291: LD_VAR 0 8
24295: PUSH
24296: LD_INT 1
24298: ARRAY
24299: IFTRUE 24321
24301: PUSH
24302: LD_VAR 0 8
24306: PUSH
24307: LD_INT 2
24309: ARRAY
24310: PUSH
24311: LD_VAR 0 13
24315: PUSH
24316: LD_INT 2
24318: PLUS
24319: GREATER
24320: OR
24321: IFTRUE 24343
24323: PUSH
24324: LD_VAR 0 8
24328: PUSH
24329: LD_INT 2
24331: ARRAY
24332: PUSH
24333: LD_VAR 0 13
24337: PUSH
24338: LD_INT 2
24340: MINUS
24341: LESS
24342: OR
24343: IFTRUE 24411
24345: PUSH
24346: LD_VAR 0 8
24350: PUSH
24351: LD_INT 3
24353: ARRAY
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 8
24360: PUSH
24361: LD_INT 9
24363: PUSH
24364: LD_INT 10
24366: PUSH
24367: LD_INT 11
24369: PUSH
24370: LD_INT 12
24372: PUSH
24373: LD_INT 13
24375: PUSH
24376: LD_INT 16
24378: PUSH
24379: LD_INT 17
24381: PUSH
24382: LD_INT 18
24384: PUSH
24385: LD_INT 19
24387: PUSH
24388: LD_INT 20
24390: PUSH
24391: LD_INT 21
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: IN
24409: NOT
24410: OR
24411: IFTRUE 24424
24413: PUSH
24414: LD_VAR 0 8
24418: PUSH
24419: LD_INT 5
24421: ARRAY
24422: NOT
24423: OR
24424: IFTRUE 24464
24426: PUSH
24427: LD_VAR 0 8
24431: PUSH
24432: LD_INT 6
24434: ARRAY
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: LD_INT 7
24444: PUSH
24445: LD_INT 9
24447: PUSH
24448: LD_INT 10
24450: PUSH
24451: LD_INT 11
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: IN
24462: NOT
24463: OR
24464: IFFALSE 24470
// exit ;
24466: POP
24467: POP
24468: GO 24555
// end ;
24470: GO 24127
24472: POP
24473: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24474: LD_VAR 0 9
24478: PPUSH
24479: LD_VAR 0 3
24483: PPUSH
24484: LD_VAR 0 4
24488: PPUSH
24489: LD_INT 20
24491: PPUSH
24492: CALL 16374 0 4
24496: PUSH
24497: LD_INT 4
24499: ARRAY
24500: IFFALSE 24504
// exit ;
24502: GO 24555
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24504: LD_VAR 0 2
24508: PUSH
24509: LD_INT 29
24511: PUSH
24512: LD_INT 30
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: IN
24519: IFFALSE 24543
24521: PUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: LD_VAR 0 4
24531: PPUSH
24532: LD_VAR 0 9
24536: PPUSH
24537: CALL_OW 440
24541: NOT
24542: AND
24543: IFFALSE 24547
// exit ;
24545: GO 24555
// result := true ;
24547: LD_ADDR_VAR 0 6
24551: PUSH
24552: LD_INT 1
24554: ST_TO_ADDR
// end ;
24555: LD_VAR 0 6
24559: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24560: LD_INT 0
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
// result = [ ] ;
24620: LD_ADDR_VAR 0 7
24624: PUSH
24625: EMPTY
24626: ST_TO_ADDR
// temp_list = [ ] ;
24627: LD_ADDR_VAR 0 9
24631: PUSH
24632: EMPTY
24633: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24634: LD_VAR 0 4
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 4
24653: PUSH
24654: LD_INT 5
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFTRUE 24709
24668: PUSH
24669: LD_VAR 0 1
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: IN
24684: IFFALSE 24708
24686: PUSH
24687: LD_VAR 0 5
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: LIST
24705: IN
24706: NOT
24707: AND
24708: OR
24709: IFFALSE 24713
// exit ;
24711: GO 43112
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24713: LD_VAR 0 1
24717: PUSH
24718: LD_INT 6
24720: PUSH
24721: LD_INT 7
24723: PUSH
24724: LD_INT 8
24726: PUSH
24727: LD_INT 13
24729: PUSH
24730: LD_INT 12
24732: PUSH
24733: LD_INT 15
24735: PUSH
24736: LD_INT 11
24738: PUSH
24739: LD_INT 14
24741: PUSH
24742: LD_INT 10
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: IN
24756: IFFALSE 24766
// btype = b_lab ;
24758: LD_ADDR_VAR 0 1
24762: PUSH
24763: LD_INT 6
24765: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24766: LD_VAR 0 6
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: IN
24785: NOT
24786: IFTRUE 24854
24788: PUSH
24789: LD_VAR 0 1
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 3
24805: PUSH
24806: LD_INT 6
24808: PUSH
24809: LD_INT 36
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: LD_INT 5
24817: PUSH
24818: LD_INT 31
24820: PUSH
24821: LD_INT 32
24823: PUSH
24824: LD_INT 33
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: IN
24840: NOT
24841: IFFALSE 24853
24843: PUSH
24844: LD_VAR 0 6
24848: PUSH
24849: LD_INT 1
24851: EQUAL
24852: AND
24853: OR
24854: IFTRUE 24886
24856: PUSH
24857: LD_VAR 0 1
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: IN
24872: NOT
24873: IFFALSE 24885
24875: PUSH
24876: LD_VAR 0 6
24880: PUSH
24881: LD_INT 2
24883: EQUAL
24884: AND
24885: OR
24886: IFFALSE 24896
// mode = 0 ;
24888: LD_ADDR_VAR 0 6
24892: PUSH
24893: LD_INT 0
24895: ST_TO_ADDR
// case mode of 0 :
24896: LD_VAR 0 6
24900: PUSH
24901: LD_INT 0
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 36362
24909: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24910: LD_ADDR_VAR 0 11
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 2
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 3
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 3
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25103: LD_ADDR_VAR 0 12
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 1
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 3
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 3
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25299: LD_ADDR_VAR 0 13
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: LD_INT 3
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 3
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 3
25470: NEG
25471: PUSH
25472: LD_INT 3
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25498: LD_ADDR_VAR 0 14
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: LD_INT 3
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 3
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25694: LD_ADDR_VAR 0 15
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25887: LD_ADDR_VAR 0 16
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 0
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: LD_INT 3
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26080: LD_ADDR_VAR 0 17
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 2
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26310: LD_ADDR_VAR 0 18
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 1
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26540: LD_ADDR_VAR 0 19
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 2
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 2
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26770: LD_ADDR_VAR 0 20
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 2
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: NEG
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: NEG
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27000: LD_ADDR_VAR 0 21
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27230: LD_ADDR_VAR 0 22
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: LD_INT 2
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27460: LD_ADDR_VAR 0 23
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27740: LD_ADDR_VAR 0 24
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28016: LD_ADDR_VAR 0 25
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 2
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 2
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28290: LD_ADDR_VAR 0 26
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 3
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: NEG
28522: PUSH
28523: LD_INT 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28566: LD_ADDR_VAR 0 27
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 2
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: NEG
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 3
28811: NEG
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28846: LD_ADDR_VAR 0 28
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: LD_INT 3
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 3
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 3
29093: NEG
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29128: LD_ADDR_VAR 0 29
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 3
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29407: LD_ADDR_VAR 0 30
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 0
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 3
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29685: LD_ADDR_VAR 0 31
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 2
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 3
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 3
29928: NEG
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29963: LD_ADDR_VAR 0 32
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 2
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30241: LD_ADDR_VAR 0 33
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 2
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: LD_INT 2
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30520: LD_ADDR_VAR 0 34
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 2
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 3
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30800: LD_ADDR_VAR 0 35
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30912: LD_ADDR_VAR 0 36
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: LD_INT 1
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31024: LD_ADDR_VAR 0 37
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 1
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31136: LD_ADDR_VAR 0 38
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 1
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31248: LD_ADDR_VAR 0 39
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31360: LD_ADDR_VAR 0 40
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31472: LD_ADDR_VAR 0 41
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 0
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: NEG
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: LD_INT 2
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31822: LD_ADDR_VAR 0 42
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: LD_INT 3
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 3
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 3
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 3
32119: NEG
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: NEG
32132: PUSH
32133: LD_INT 3
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32172: LD_ADDR_VAR 0 43
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 3
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 3
32468: NEG
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32520: LD_ADDR_VAR 0 44
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 3
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 3
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 3
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32870: LD_ADDR_VAR 0 45
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 2
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 3
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 3
33167: NEG
33168: PUSH
33169: LD_INT 2
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33220: LD_ADDR_VAR 0 46
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 3
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 2
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 3
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33568: LD_ADDR_VAR 0 47
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33719: LD_ADDR_VAR 0 48
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 2
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33866: LD_ADDR_VAR 0 49
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34010: LD_ADDR_VAR 0 50
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34154: LD_ADDR_VAR 0 51
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34301: LD_ADDR_VAR 0 52
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34452: LD_ADDR_VAR 0 53
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 2
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34682: LD_ADDR_VAR 0 54
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34912: LD_ADDR_VAR 0 55
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 2
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35142: LD_ADDR_VAR 0 56
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35372: LD_ADDR_VAR 0 57
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35602: LD_ADDR_VAR 0 58
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35832: LD_ADDR_VAR 0 59
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35920: LD_ADDR_VAR 0 60
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36008: LD_ADDR_VAR 0 61
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36096: LD_ADDR_VAR 0 62
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36184: LD_ADDR_VAR 0 63
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36272: LD_ADDR_VAR 0 64
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// end ; 1 :
36360: GO 42257
36362: LD_INT 1
36364: DOUBLE
36365: EQUAL
36366: IFTRUE 36370
36368: GO 38993
36370: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36371: LD_ADDR_VAR 0 11
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 3
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 3
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36415: LD_ADDR_VAR 0 12
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 3
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36456: LD_ADDR_VAR 0 13
36460: PUSH
36461: LD_INT 3
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: LD_INT 3
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36496: LD_ADDR_VAR 0 14
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36537: LD_ADDR_VAR 0 15
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 3
36555: NEG
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 3
36566: NEG
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36581: LD_ADDR_VAR 0 16
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 3
36600: NEG
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 3
36612: NEG
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36627: LD_ADDR_VAR 0 17
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 3
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 2
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36671: LD_ADDR_VAR 0 18
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 3
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36712: LD_ADDR_VAR 0 19
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 3
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36752: LD_ADDR_VAR 0 20
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 3
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36793: LD_ADDR_VAR 0 21
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 3
36811: NEG
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 3
36822: NEG
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36837: LD_ADDR_VAR 0 22
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: LD_INT 3
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36883: LD_ADDR_VAR 0 23
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 3
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 4
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36927: LD_ADDR_VAR 0 24
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 4
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36968: LD_ADDR_VAR 0 25
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: LD_INT 3
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 4
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: LD_INT 4
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37008: LD_ADDR_VAR 0 26
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 4
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: LD_INT 3
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37049: LD_ADDR_VAR 0 27
37053: PUSH
37054: LD_INT 3
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 3
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 4
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37093: LD_ADDR_VAR 0 28
37097: PUSH
37098: LD_INT 3
37100: NEG
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: NEG
37113: PUSH
37114: LD_INT 4
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 4
37124: NEG
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37139: LD_ADDR_VAR 0 29
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 3
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 3
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 2
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 4
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 4
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: LD_INT 3
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 5
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: LD_INT 5
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 4
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 6
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 6
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 5
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37294: LD_ADDR_VAR 0 30
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 3
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 4
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 4
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 4
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 5
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 5
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 5
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 6
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 6
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37437: LD_ADDR_VAR 0 31
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 4
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 4
37484: PUSH
37485: LD_INT 4
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 5
37504: PUSH
37505: LD_INT 4
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 5
37514: PUSH
37515: LD_INT 5
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 4
37524: PUSH
37525: LD_INT 5
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 6
37534: PUSH
37535: LD_INT 5
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 6
37544: PUSH
37545: LD_INT 6
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 5
37554: PUSH
37555: LD_INT 6
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37576: LD_ADDR_VAR 0 32
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 3
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 5
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 5
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: LD_INT 4
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 6
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 6
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 5
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37719: LD_ADDR_VAR 0 33
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 3
37737: NEG
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 4
37771: NEG
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 4
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 4
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 5
37805: NEG
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 5
37816: NEG
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 5
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 6
37839: NEG
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 6
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37874: LD_ADDR_VAR 0 34
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 3
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: NEG
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 4
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 4
37929: NEG
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 4
37941: NEG
37942: PUSH
37943: LD_INT 4
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 4
37953: NEG
37954: PUSH
37955: LD_INT 5
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 5
37965: NEG
37966: PUSH
37967: LD_INT 4
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 5
37977: NEG
37978: PUSH
37979: LD_INT 5
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 5
37989: NEG
37990: PUSH
37991: LD_INT 6
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 6
38001: NEG
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 6
38013: NEG
38014: PUSH
38015: LD_INT 6
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38037: LD_ADDR_VAR 0 41
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38081: LD_ADDR_VAR 0 42
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 3
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38122: LD_ADDR_VAR 0 43
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 3
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38162: LD_ADDR_VAR 0 44
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38203: LD_ADDR_VAR 0 45
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38247: LD_ADDR_VAR 0 46
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38293: LD_ADDR_VAR 0 47
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38326: LD_ADDR_VAR 0 48
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38357: LD_ADDR_VAR 0 49
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38386: LD_ADDR_VAR 0 50
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38415: LD_ADDR_VAR 0 51
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38446: LD_ADDR_VAR 0 52
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38479: LD_ADDR_VAR 0 53
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38523: LD_ADDR_VAR 0 54
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 3
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 3
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38564: LD_ADDR_VAR 0 55
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 3
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38604: LD_ADDR_VAR 0 56
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38645: LD_ADDR_VAR 0 57
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 3
38663: NEG
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 3
38674: NEG
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38689: LD_ADDR_VAR 0 58
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 3
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38735: LD_ADDR_VAR 0 59
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38779: LD_ADDR_VAR 0 60
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38820: LD_ADDR_VAR 0 61
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38860: LD_ADDR_VAR 0 62
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38901: LD_ADDR_VAR 0 63
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38945: LD_ADDR_VAR 0 64
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// end ; 2 :
38991: GO 42257
38993: LD_INT 2
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 42256
39001: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39002: LD_ADDR_VAR 0 29
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 4
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 5
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 4
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 5
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 4
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 4
39132: PUSH
39133: LD_INT 4
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 4
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 4
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 4
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 4
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 4
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 5
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: LD_INT 4
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: LD_INT 5
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 3
39296: NEG
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 3
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 4
39341: NEG
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 4
39364: NEG
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 4
39387: NEG
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 4
39399: NEG
39400: PUSH
39401: LD_INT 5
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: LD_INT 4
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 4
39435: NEG
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 5
39447: NEG
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 5
39459: NEG
39460: PUSH
39461: LD_INT 5
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 5
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 5
39483: NEG
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39540: LD_ADDR_VAR 0 30
39544: PUSH
39545: LD_INT 4
39547: PUSH
39548: LD_INT 4
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 4
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 5
39567: PUSH
39568: LD_INT 4
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 5
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: LD_INT 5
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: LD_INT 4
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 3
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 5
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: LD_INT 5
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 3
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 4
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 4
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 4
39730: NEG
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 3
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 3
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 4
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 5
39786: NEG
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 5
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 5
39809: NEG
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 3
39844: NEG
39845: PUSH
39846: LD_INT 4
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 4
39892: NEG
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 4
39904: NEG
39905: PUSH
39906: LD_INT 4
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 4
39928: NEG
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_INT 4
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 5
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 4
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 4
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 5
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 5
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40087: LD_ADDR_VAR 0 31
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 4
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 3
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 4
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 5
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 5
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 5
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 4
40243: NEG
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 4
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 4
40266: NEG
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 4
40289: NEG
40290: PUSH
40291: LD_INT 4
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 4
40301: NEG
40302: PUSH
40303: LD_INT 5
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 3
40313: NEG
40314: PUSH
40315: LD_INT 4
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 5
40349: NEG
40350: PUSH
40351: LD_INT 4
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 5
40361: NEG
40362: PUSH
40363: LD_INT 5
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 5
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 5
40385: NEG
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 3
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 4
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 3
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 4
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: LD_INT 4
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 4
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 5
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 5
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 4
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 3
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 5
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40637: LD_ADDR_VAR 0 32
40641: PUSH
40642: LD_INT 4
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 4
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 3
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 4
40689: NEG
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 5
40700: NEG
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 5
40711: NEG
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 5
40723: NEG
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 3
40758: NEG
40759: PUSH
40760: LD_INT 4
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 4
40806: NEG
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: NEG
40819: PUSH
40820: LD_INT 4
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 4
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 4
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 5
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 4
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 3
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 4
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 5
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 3
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 5
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 4
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 4
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 4
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 4
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 4
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: LD_INT 4
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 5
41079: PUSH
41080: LD_INT 5
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 4
41089: PUSH
41090: LD_INT 5
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: LD_INT 4
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 3
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 5
41119: PUSH
41120: LD_INT 3
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 5
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41184: LD_ADDR_VAR 0 33
41188: PUSH
41189: LD_INT 4
41191: NEG
41192: PUSH
41193: LD_INT 4
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 4
41203: NEG
41204: PUSH
41205: LD_INT 5
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 3
41215: NEG
41216: PUSH
41217: LD_INT 4
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 3
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 4
41239: NEG
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 5
41251: NEG
41252: PUSH
41253: LD_INT 4
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 5
41263: NEG
41264: PUSH
41265: LD_INT 5
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 5
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 5
41287: NEG
41288: PUSH
41289: LD_INT 3
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 4
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 3
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 4
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 4
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 4
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 5
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 5
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 4
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 3
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 5
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: LD_INT 3
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 3
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 4
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 4
41524: PUSH
41525: LD_INT 4
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: LD_INT 4
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 4
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: LD_INT 4
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 4
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 5
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 5
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 4
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 5
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41722: LD_ADDR_VAR 0 34
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 4
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 5
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 4
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 3
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 4
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 5
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 5
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 4
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 4
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 4
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 4
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 4
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 5
41944: PUSH
41945: LD_INT 4
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 5
41954: PUSH
41955: LD_INT 5
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 4
41964: PUSH
41965: LD_INT 5
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 4
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: LD_INT 3
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 5
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 4
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 4
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 3
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 4
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 4
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 4
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 3
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 4
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 5
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 5
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 5
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// end ; end ;
42254: GO 42257
42256: POP
// case btype of b_depot , b_warehouse :
42257: LD_VAR 0 1
42261: PUSH
42262: LD_INT 0
42264: DOUBLE
42265: EQUAL
42266: IFTRUE 42276
42268: LD_INT 1
42270: DOUBLE
42271: EQUAL
42272: IFTRUE 42276
42274: GO 42477
42276: POP
// case nation of nation_american :
42277: LD_VAR 0 5
42281: PUSH
42282: LD_INT 1
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42346
42290: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42291: LD_ADDR_VAR 0 9
42295: PUSH
42296: LD_VAR 0 11
42300: PUSH
42301: LD_VAR 0 12
42305: PUSH
42306: LD_VAR 0 13
42310: PUSH
42311: LD_VAR 0 14
42315: PUSH
42316: LD_VAR 0 15
42320: PUSH
42321: LD_VAR 0 16
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: PUSH
42334: LD_VAR 0 4
42338: PUSH
42339: LD_INT 1
42341: PLUS
42342: ARRAY
42343: ST_TO_ADDR
42344: GO 42475
42346: LD_INT 2
42348: DOUBLE
42349: EQUAL
42350: IFTRUE 42354
42352: GO 42410
42354: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42355: LD_ADDR_VAR 0 9
42359: PUSH
42360: LD_VAR 0 17
42364: PUSH
42365: LD_VAR 0 18
42369: PUSH
42370: LD_VAR 0 19
42374: PUSH
42375: LD_VAR 0 20
42379: PUSH
42380: LD_VAR 0 21
42384: PUSH
42385: LD_VAR 0 22
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: PUSH
42398: LD_VAR 0 4
42402: PUSH
42403: LD_INT 1
42405: PLUS
42406: ARRAY
42407: ST_TO_ADDR
42408: GO 42475
42410: LD_INT 3
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42474
42418: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42419: LD_ADDR_VAR 0 9
42423: PUSH
42424: LD_VAR 0 23
42428: PUSH
42429: LD_VAR 0 24
42433: PUSH
42434: LD_VAR 0 25
42438: PUSH
42439: LD_VAR 0 26
42443: PUSH
42444: LD_VAR 0 27
42448: PUSH
42449: LD_VAR 0 28
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: PUSH
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 1
42469: PLUS
42470: ARRAY
42471: ST_TO_ADDR
42472: GO 42475
42474: POP
42475: GO 43030
42477: LD_INT 2
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42491
42483: LD_INT 3
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42491
42489: GO 42547
42491: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42492: LD_ADDR_VAR 0 9
42496: PUSH
42497: LD_VAR 0 29
42501: PUSH
42502: LD_VAR 0 30
42506: PUSH
42507: LD_VAR 0 31
42511: PUSH
42512: LD_VAR 0 32
42516: PUSH
42517: LD_VAR 0 33
42521: PUSH
42522: LD_VAR 0 34
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: PUSH
42535: LD_VAR 0 4
42539: PUSH
42540: LD_INT 1
42542: PLUS
42543: ARRAY
42544: ST_TO_ADDR
42545: GO 43030
42547: LD_INT 16
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42609
42553: LD_INT 17
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42609
42559: LD_INT 18
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42609
42565: LD_INT 19
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42609
42571: LD_INT 22
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42609
42577: LD_INT 20
42579: DOUBLE
42580: EQUAL
42581: IFTRUE 42609
42583: LD_INT 21
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42609
42589: LD_INT 23
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42609
42595: LD_INT 24
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42609
42601: LD_INT 25
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42609
42607: GO 42665
42609: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42610: LD_ADDR_VAR 0 9
42614: PUSH
42615: LD_VAR 0 35
42619: PUSH
42620: LD_VAR 0 36
42624: PUSH
42625: LD_VAR 0 37
42629: PUSH
42630: LD_VAR 0 38
42634: PUSH
42635: LD_VAR 0 39
42639: PUSH
42640: LD_VAR 0 40
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: PUSH
42653: LD_VAR 0 4
42657: PUSH
42658: LD_INT 1
42660: PLUS
42661: ARRAY
42662: ST_TO_ADDR
42663: GO 43030
42665: LD_INT 6
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42721
42671: LD_INT 7
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42721
42677: LD_INT 8
42679: DOUBLE
42680: EQUAL
42681: IFTRUE 42721
42683: LD_INT 13
42685: DOUBLE
42686: EQUAL
42687: IFTRUE 42721
42689: LD_INT 12
42691: DOUBLE
42692: EQUAL
42693: IFTRUE 42721
42695: LD_INT 15
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42721
42701: LD_INT 11
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42721
42707: LD_INT 14
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42721
42713: LD_INT 10
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42721
42719: GO 42777
42721: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42722: LD_ADDR_VAR 0 9
42726: PUSH
42727: LD_VAR 0 41
42731: PUSH
42732: LD_VAR 0 42
42736: PUSH
42737: LD_VAR 0 43
42741: PUSH
42742: LD_VAR 0 44
42746: PUSH
42747: LD_VAR 0 45
42751: PUSH
42752: LD_VAR 0 46
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: PUSH
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 1
42772: PLUS
42773: ARRAY
42774: ST_TO_ADDR
42775: GO 43030
42777: LD_INT 36
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42785
42783: GO 42841
42785: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42786: LD_ADDR_VAR 0 9
42790: PUSH
42791: LD_VAR 0 47
42795: PUSH
42796: LD_VAR 0 48
42800: PUSH
42801: LD_VAR 0 49
42805: PUSH
42806: LD_VAR 0 50
42810: PUSH
42811: LD_VAR 0 51
42815: PUSH
42816: LD_VAR 0 52
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: PUSH
42829: LD_VAR 0 4
42833: PUSH
42834: LD_INT 1
42836: PLUS
42837: ARRAY
42838: ST_TO_ADDR
42839: GO 43030
42841: LD_INT 4
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42867
42847: LD_INT 5
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42867
42853: LD_INT 34
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42867
42859: LD_INT 37
42861: DOUBLE
42862: EQUAL
42863: IFTRUE 42867
42865: GO 42923
42867: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42868: LD_ADDR_VAR 0 9
42872: PUSH
42873: LD_VAR 0 53
42877: PUSH
42878: LD_VAR 0 54
42882: PUSH
42883: LD_VAR 0 55
42887: PUSH
42888: LD_VAR 0 56
42892: PUSH
42893: LD_VAR 0 57
42897: PUSH
42898: LD_VAR 0 58
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: PUSH
42911: LD_VAR 0 4
42915: PUSH
42916: LD_INT 1
42918: PLUS
42919: ARRAY
42920: ST_TO_ADDR
42921: GO 43030
42923: LD_INT 31
42925: DOUBLE
42926: EQUAL
42927: IFTRUE 42973
42929: LD_INT 32
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42973
42935: LD_INT 33
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42973
42941: LD_INT 27
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42973
42947: LD_INT 26
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42973
42953: LD_INT 28
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42973
42959: LD_INT 29
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42973
42965: LD_INT 30
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 43029
42973: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42974: LD_ADDR_VAR 0 9
42978: PUSH
42979: LD_VAR 0 59
42983: PUSH
42984: LD_VAR 0 60
42988: PUSH
42989: LD_VAR 0 61
42993: PUSH
42994: LD_VAR 0 62
42998: PUSH
42999: LD_VAR 0 63
43003: PUSH
43004: LD_VAR 0 64
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: PUSH
43017: LD_VAR 0 4
43021: PUSH
43022: LD_INT 1
43024: PLUS
43025: ARRAY
43026: ST_TO_ADDR
43027: GO 43030
43029: POP
// temp_list2 = [ ] ;
43030: LD_ADDR_VAR 0 10
43034: PUSH
43035: EMPTY
43036: ST_TO_ADDR
// for i in temp_list do
43037: LD_ADDR_VAR 0 8
43041: PUSH
43042: LD_VAR 0 9
43046: PUSH
43047: FOR_IN
43048: IFFALSE 43100
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43050: LD_ADDR_VAR 0 10
43054: PUSH
43055: LD_VAR 0 10
43059: PUSH
43060: LD_VAR 0 8
43064: PUSH
43065: LD_INT 1
43067: ARRAY
43068: PUSH
43069: LD_VAR 0 2
43073: PLUS
43074: PUSH
43075: LD_VAR 0 8
43079: PUSH
43080: LD_INT 2
43082: ARRAY
43083: PUSH
43084: LD_VAR 0 3
43088: PLUS
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: EMPTY
43095: LIST
43096: ADD
43097: ST_TO_ADDR
43098: GO 43047
43100: POP
43101: POP
// result = temp_list2 ;
43102: LD_ADDR_VAR 0 7
43106: PUSH
43107: LD_VAR 0 10
43111: ST_TO_ADDR
// end ;
43112: LD_VAR 0 7
43116: RET
// export function EnemyInRange ( unit , dist ) ; begin
43117: LD_INT 0
43119: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_VAR 0 1
43129: PPUSH
43130: CALL_OW 255
43134: PPUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 250
43144: PPUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 251
43154: PPUSH
43155: LD_VAR 0 2
43159: PPUSH
43160: CALL 16374 0 4
43164: PUSH
43165: LD_INT 4
43167: ARRAY
43168: ST_TO_ADDR
// end ;
43169: LD_VAR 0 3
43173: RET
// export function PlayerSeeMe ( unit ) ; begin
43174: LD_INT 0
43176: PPUSH
// result := See ( your_side , unit ) ;
43177: LD_ADDR_VAR 0 2
43181: PUSH
43182: LD_OWVAR 2
43186: PPUSH
43187: LD_VAR 0 1
43191: PPUSH
43192: CALL_OW 292
43196: ST_TO_ADDR
// end ;
43197: LD_VAR 0 2
43201: RET
// export function ReverseDir ( unit ) ; begin
43202: LD_INT 0
43204: PPUSH
// if not unit then
43205: LD_VAR 0 1
43209: NOT
43210: IFFALSE 43214
// exit ;
43212: GO 43237
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43214: LD_ADDR_VAR 0 2
43218: PUSH
43219: LD_VAR 0 1
43223: PPUSH
43224: CALL_OW 254
43228: PUSH
43229: LD_INT 3
43231: PLUS
43232: PUSH
43233: LD_INT 6
43235: MOD
43236: ST_TO_ADDR
// end ;
43237: LD_VAR 0 2
43241: RET
// export function ReverseArray ( array ) ; var i ; begin
43242: LD_INT 0
43244: PPUSH
43245: PPUSH
// if not array then
43246: LD_VAR 0 1
43250: NOT
43251: IFFALSE 43255
// exit ;
43253: GO 43310
// result := [ ] ;
43255: LD_ADDR_VAR 0 2
43259: PUSH
43260: EMPTY
43261: ST_TO_ADDR
// for i := array downto 1 do
43262: LD_ADDR_VAR 0 3
43266: PUSH
43267: DOUBLE
43268: LD_VAR 0 1
43272: INC
43273: ST_TO_ADDR
43274: LD_INT 1
43276: PUSH
43277: FOR_DOWNTO
43278: IFFALSE 43308
// result := Join ( result , array [ i ] ) ;
43280: LD_ADDR_VAR 0 2
43284: PUSH
43285: LD_VAR 0 2
43289: PPUSH
43290: LD_VAR 0 1
43294: PUSH
43295: LD_VAR 0 3
43299: ARRAY
43300: PPUSH
43301: CALL 48152 0 2
43305: ST_TO_ADDR
43306: GO 43277
43308: POP
43309: POP
// end ;
43310: LD_VAR 0 2
43314: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43315: LD_INT 0
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
// if not unit or not hexes then
43323: LD_VAR 0 1
43327: NOT
43328: IFTRUE 43337
43330: PUSH
43331: LD_VAR 0 2
43335: NOT
43336: OR
43337: IFFALSE 43341
// exit ;
43339: GO 43464
// dist := 9999 ;
43341: LD_ADDR_VAR 0 5
43345: PUSH
43346: LD_INT 9999
43348: ST_TO_ADDR
// for i = 1 to hexes do
43349: LD_ADDR_VAR 0 4
43353: PUSH
43354: DOUBLE
43355: LD_INT 1
43357: DEC
43358: ST_TO_ADDR
43359: LD_VAR 0 2
43363: PUSH
43364: FOR_TO
43365: IFFALSE 43452
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43367: LD_ADDR_VAR 0 6
43371: PUSH
43372: LD_VAR 0 1
43376: PPUSH
43377: LD_VAR 0 2
43381: PUSH
43382: LD_VAR 0 4
43386: ARRAY
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: PPUSH
43392: LD_VAR 0 2
43396: PUSH
43397: LD_VAR 0 4
43401: ARRAY
43402: PUSH
43403: LD_INT 2
43405: ARRAY
43406: PPUSH
43407: CALL_OW 297
43411: ST_TO_ADDR
// if tdist < dist then
43412: LD_VAR 0 6
43416: PUSH
43417: LD_VAR 0 5
43421: LESS
43422: IFFALSE 43450
// begin hex := hexes [ i ] ;
43424: LD_ADDR_VAR 0 8
43428: PUSH
43429: LD_VAR 0 2
43433: PUSH
43434: LD_VAR 0 4
43438: ARRAY
43439: ST_TO_ADDR
// dist := tdist ;
43440: LD_ADDR_VAR 0 5
43444: PUSH
43445: LD_VAR 0 6
43449: ST_TO_ADDR
// end ; end ;
43450: GO 43364
43452: POP
43453: POP
// result := hex ;
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_VAR 0 8
43463: ST_TO_ADDR
// end ;
43464: LD_VAR 0 3
43468: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43469: LD_INT 0
43471: PPUSH
43472: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43473: LD_VAR 0 1
43477: NOT
43478: IFTRUE 43517
43480: PUSH
43481: LD_VAR 0 1
43485: PUSH
43486: LD_INT 21
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 23
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PPUSH
43510: CALL_OW 69
43514: IN
43515: NOT
43516: OR
43517: IFFALSE 43521
// exit ;
43519: GO 43568
// for i = 1 to 3 do
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: DOUBLE
43527: LD_INT 1
43529: DEC
43530: ST_TO_ADDR
43531: LD_INT 3
43533: PUSH
43534: FOR_TO
43535: IFFALSE 43566
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 250
43546: PPUSH
43547: LD_VAR 0 1
43551: PPUSH
43552: CALL_OW 251
43556: PPUSH
43557: LD_INT 1
43559: PPUSH
43560: CALL_OW 453
43564: GO 43534
43566: POP
43567: POP
// end ;
43568: LD_VAR 0 2
43572: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43573: LD_INT 0
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
// if not unit or not enemy_unit then
43581: LD_VAR 0 1
43585: NOT
43586: IFTRUE 43595
43588: PUSH
43589: LD_VAR 0 2
43593: NOT
43594: OR
43595: IFFALSE 43599
// exit ;
43597: GO 44070
// if GetLives ( i ) < 250 then
43599: LD_VAR 0 4
43603: PPUSH
43604: CALL_OW 256
43608: PUSH
43609: LD_INT 250
43611: LESS
43612: IFFALSE 43625
// begin ComAutodestruct ( i ) ;
43614: LD_VAR 0 4
43618: PPUSH
43619: CALL 43469 0 1
// exit ;
43623: GO 44070
// end ; x := GetX ( enemy_unit ) ;
43625: LD_ADDR_VAR 0 7
43629: PUSH
43630: LD_VAR 0 2
43634: PPUSH
43635: CALL_OW 250
43639: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43640: LD_ADDR_VAR 0 8
43644: PUSH
43645: LD_VAR 0 2
43649: PPUSH
43650: CALL_OW 251
43654: ST_TO_ADDR
// if not x or not y then
43655: LD_VAR 0 7
43659: NOT
43660: IFTRUE 43669
43662: PUSH
43663: LD_VAR 0 8
43667: NOT
43668: OR
43669: IFFALSE 43673
// exit ;
43671: GO 44070
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43673: LD_ADDR_VAR 0 6
43677: PUSH
43678: LD_VAR 0 7
43682: PPUSH
43683: LD_INT 0
43685: PPUSH
43686: LD_INT 4
43688: PPUSH
43689: CALL_OW 272
43693: PUSH
43694: LD_VAR 0 8
43698: PPUSH
43699: LD_INT 0
43701: PPUSH
43702: LD_INT 4
43704: PPUSH
43705: CALL_OW 273
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_VAR 0 7
43718: PPUSH
43719: LD_INT 1
43721: PPUSH
43722: LD_INT 4
43724: PPUSH
43725: CALL_OW 272
43729: PUSH
43730: LD_VAR 0 8
43734: PPUSH
43735: LD_INT 1
43737: PPUSH
43738: LD_INT 4
43740: PPUSH
43741: CALL_OW 273
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_VAR 0 7
43754: PPUSH
43755: LD_INT 2
43757: PPUSH
43758: LD_INT 4
43760: PPUSH
43761: CALL_OW 272
43765: PUSH
43766: LD_VAR 0 8
43770: PPUSH
43771: LD_INT 2
43773: PPUSH
43774: LD_INT 4
43776: PPUSH
43777: CALL_OW 273
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_VAR 0 7
43790: PPUSH
43791: LD_INT 3
43793: PPUSH
43794: LD_INT 4
43796: PPUSH
43797: CALL_OW 272
43801: PUSH
43802: LD_VAR 0 8
43806: PPUSH
43807: LD_INT 3
43809: PPUSH
43810: LD_INT 4
43812: PPUSH
43813: CALL_OW 273
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_VAR 0 7
43826: PPUSH
43827: LD_INT 4
43829: PPUSH
43830: LD_INT 4
43832: PPUSH
43833: CALL_OW 272
43837: PUSH
43838: LD_VAR 0 8
43842: PPUSH
43843: LD_INT 4
43845: PPUSH
43846: LD_INT 4
43848: PPUSH
43849: CALL_OW 273
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_VAR 0 7
43862: PPUSH
43863: LD_INT 5
43865: PPUSH
43866: LD_INT 4
43868: PPUSH
43869: CALL_OW 272
43873: PUSH
43874: LD_VAR 0 8
43878: PPUSH
43879: LD_INT 5
43881: PPUSH
43882: LD_INT 4
43884: PPUSH
43885: CALL_OW 273
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// for i = tmp downto 1 do
43902: LD_ADDR_VAR 0 4
43906: PUSH
43907: DOUBLE
43908: LD_VAR 0 6
43912: INC
43913: ST_TO_ADDR
43914: LD_INT 1
43916: PUSH
43917: FOR_DOWNTO
43918: IFFALSE 44021
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43920: LD_VAR 0 6
43924: PUSH
43925: LD_VAR 0 4
43929: ARRAY
43930: PUSH
43931: LD_INT 1
43933: ARRAY
43934: PPUSH
43935: LD_VAR 0 6
43939: PUSH
43940: LD_VAR 0 4
43944: ARRAY
43945: PUSH
43946: LD_INT 2
43948: ARRAY
43949: PPUSH
43950: CALL_OW 488
43954: NOT
43955: IFTRUE 43997
43957: PUSH
43958: LD_VAR 0 6
43962: PUSH
43963: LD_VAR 0 4
43967: ARRAY
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: PPUSH
43973: LD_VAR 0 6
43977: PUSH
43978: LD_VAR 0 4
43982: ARRAY
43983: PUSH
43984: LD_INT 2
43986: ARRAY
43987: PPUSH
43988: CALL_OW 428
43992: PUSH
43993: LD_INT 0
43995: NONEQUAL
43996: OR
43997: IFFALSE 44019
// tmp := Delete ( tmp , i ) ;
43999: LD_ADDR_VAR 0 6
44003: PUSH
44004: LD_VAR 0 6
44008: PPUSH
44009: LD_VAR 0 4
44013: PPUSH
44014: CALL_OW 3
44018: ST_TO_ADDR
44019: GO 43917
44021: POP
44022: POP
// j := GetClosestHex ( unit , tmp ) ;
44023: LD_ADDR_VAR 0 5
44027: PUSH
44028: LD_VAR 0 1
44032: PPUSH
44033: LD_VAR 0 6
44037: PPUSH
44038: CALL 43315 0 2
44042: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44043: LD_VAR 0 1
44047: PPUSH
44048: LD_VAR 0 5
44052: PUSH
44053: LD_INT 1
44055: ARRAY
44056: PPUSH
44057: LD_VAR 0 5
44061: PUSH
44062: LD_INT 2
44064: ARRAY
44065: PPUSH
44066: CALL_OW 111
// end ;
44070: LD_VAR 0 3
44074: RET
// export function PrepareApemanSoldier ( ) ; begin
44075: LD_INT 0
44077: PPUSH
// uc_nation := 0 ;
44078: LD_ADDR_OWVAR 21
44082: PUSH
44083: LD_INT 0
44085: ST_TO_ADDR
// hc_sex := sex_male ;
44086: LD_ADDR_OWVAR 27
44090: PUSH
44091: LD_INT 1
44093: ST_TO_ADDR
// hc_name :=  ;
44094: LD_ADDR_OWVAR 26
44098: PUSH
44099: LD_STRING 
44101: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44102: LD_ADDR_OWVAR 28
44106: PUSH
44107: LD_INT 15
44109: ST_TO_ADDR
// hc_gallery :=  ;
44110: LD_ADDR_OWVAR 33
44114: PUSH
44115: LD_STRING 
44117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44118: LD_ADDR_OWVAR 31
44122: PUSH
44123: LD_INT 0
44125: PPUSH
44126: LD_INT 3
44128: PPUSH
44129: CALL_OW 12
44133: PUSH
44134: LD_INT 0
44136: PPUSH
44137: LD_INT 3
44139: PPUSH
44140: CALL_OW 12
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44157: LD_ADDR_OWVAR 29
44161: PUSH
44162: LD_INT 12
44164: PUSH
44165: LD_INT 12
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// end ;
44172: LD_VAR 0 1
44176: RET
// export function PrepareApemanEngineer ( ) ; begin
44177: LD_INT 0
44179: PPUSH
// uc_nation := 0 ;
44180: LD_ADDR_OWVAR 21
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// hc_sex := sex_male ;
44188: LD_ADDR_OWVAR 27
44192: PUSH
44193: LD_INT 1
44195: ST_TO_ADDR
// hc_name :=  ;
44196: LD_ADDR_OWVAR 26
44200: PUSH
44201: LD_STRING 
44203: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44204: LD_ADDR_OWVAR 28
44208: PUSH
44209: LD_INT 16
44211: ST_TO_ADDR
// hc_gallery :=  ;
44212: LD_ADDR_OWVAR 33
44216: PUSH
44217: LD_STRING 
44219: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44220: LD_ADDR_OWVAR 31
44224: PUSH
44225: LD_INT 0
44227: PPUSH
44228: LD_INT 3
44230: PPUSH
44231: CALL_OW 12
44235: PUSH
44236: LD_INT 0
44238: PPUSH
44239: LD_INT 3
44241: PPUSH
44242: CALL_OW 12
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44259: LD_ADDR_OWVAR 29
44263: PUSH
44264: LD_INT 12
44266: PUSH
44267: LD_INT 12
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// end ;
44274: LD_VAR 0 1
44278: RET
// export function PrepareApeman ( agressivity ) ; begin
44279: LD_INT 0
44281: PPUSH
// uc_side := 0 ;
44282: LD_ADDR_OWVAR 20
44286: PUSH
44287: LD_INT 0
44289: ST_TO_ADDR
// uc_nation := 0 ;
44290: LD_ADDR_OWVAR 21
44294: PUSH
44295: LD_INT 0
44297: ST_TO_ADDR
// hc_sex := sex_male ;
44298: LD_ADDR_OWVAR 27
44302: PUSH
44303: LD_INT 1
44305: ST_TO_ADDR
// hc_class := class_apeman ;
44306: LD_ADDR_OWVAR 28
44310: PUSH
44311: LD_INT 12
44313: ST_TO_ADDR
// hc_gallery :=  ;
44314: LD_ADDR_OWVAR 33
44318: PUSH
44319: LD_STRING 
44321: ST_TO_ADDR
// hc_name :=  ;
44322: LD_ADDR_OWVAR 26
44326: PUSH
44327: LD_STRING 
44329: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44330: LD_ADDR_OWVAR 29
44334: PUSH
44335: LD_INT 12
44337: PUSH
44338: LD_INT 12
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// if agressivity = 0 then
44345: LD_VAR 0 1
44349: PUSH
44350: LD_INT 0
44352: EQUAL
44353: IFFALSE 44365
// hc_agressivity := 0 else
44355: LD_ADDR_OWVAR 35
44359: PUSH
44360: LD_INT 0
44362: ST_TO_ADDR
44363: GO 44386
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44365: LD_ADDR_OWVAR 35
44369: PUSH
44370: LD_VAR 0 1
44374: NEG
44375: PPUSH
44376: LD_VAR 0 1
44380: PPUSH
44381: CALL_OW 12
44385: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44386: LD_ADDR_OWVAR 31
44390: PUSH
44391: LD_INT 0
44393: PPUSH
44394: LD_INT 3
44396: PPUSH
44397: CALL_OW 12
44401: PUSH
44402: LD_INT 0
44404: PPUSH
44405: LD_INT 3
44407: PPUSH
44408: CALL_OW 12
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// end ;
44425: LD_VAR 0 2
44429: RET
// export function PrepareTiger ( agressivity ) ; begin
44430: LD_INT 0
44432: PPUSH
// uc_side := 0 ;
44433: LD_ADDR_OWVAR 20
44437: PUSH
44438: LD_INT 0
44440: ST_TO_ADDR
// uc_nation := 0 ;
44441: LD_ADDR_OWVAR 21
44445: PUSH
44446: LD_INT 0
44448: ST_TO_ADDR
// InitHc ;
44449: CALL_OW 19
// hc_class := class_tiger ;
44453: LD_ADDR_OWVAR 28
44457: PUSH
44458: LD_INT 14
44460: ST_TO_ADDR
// hc_gallery :=  ;
44461: LD_ADDR_OWVAR 33
44465: PUSH
44466: LD_STRING 
44468: ST_TO_ADDR
// hc_name :=  ;
44469: LD_ADDR_OWVAR 26
44473: PUSH
44474: LD_STRING 
44476: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44477: LD_ADDR_OWVAR 35
44481: PUSH
44482: LD_VAR 0 1
44486: NEG
44487: PPUSH
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 12
44497: ST_TO_ADDR
// end ;
44498: LD_VAR 0 2
44502: RET
// export function PrepareEnchidna ( ) ; begin
44503: LD_INT 0
44505: PPUSH
// uc_side := 0 ;
44506: LD_ADDR_OWVAR 20
44510: PUSH
44511: LD_INT 0
44513: ST_TO_ADDR
// uc_nation := 0 ;
44514: LD_ADDR_OWVAR 21
44518: PUSH
44519: LD_INT 0
44521: ST_TO_ADDR
// InitHc ;
44522: CALL_OW 19
// hc_class := class_baggie ;
44526: LD_ADDR_OWVAR 28
44530: PUSH
44531: LD_INT 13
44533: ST_TO_ADDR
// hc_gallery :=  ;
44534: LD_ADDR_OWVAR 33
44538: PUSH
44539: LD_STRING 
44541: ST_TO_ADDR
// hc_name :=  ;
44542: LD_ADDR_OWVAR 26
44546: PUSH
44547: LD_STRING 
44549: ST_TO_ADDR
// end ;
44550: LD_VAR 0 1
44554: RET
// export function PrepareFrog ( ) ; begin
44555: LD_INT 0
44557: PPUSH
// uc_side := 0 ;
44558: LD_ADDR_OWVAR 20
44562: PUSH
44563: LD_INT 0
44565: ST_TO_ADDR
// uc_nation := 0 ;
44566: LD_ADDR_OWVAR 21
44570: PUSH
44571: LD_INT 0
44573: ST_TO_ADDR
// InitHc ;
44574: CALL_OW 19
// hc_class := class_frog ;
44578: LD_ADDR_OWVAR 28
44582: PUSH
44583: LD_INT 19
44585: ST_TO_ADDR
// hc_gallery :=  ;
44586: LD_ADDR_OWVAR 33
44590: PUSH
44591: LD_STRING 
44593: ST_TO_ADDR
// hc_name :=  ;
44594: LD_ADDR_OWVAR 26
44598: PUSH
44599: LD_STRING 
44601: ST_TO_ADDR
// end ;
44602: LD_VAR 0 1
44606: RET
// export function PrepareFish ( ) ; begin
44607: LD_INT 0
44609: PPUSH
// uc_side := 0 ;
44610: LD_ADDR_OWVAR 20
44614: PUSH
44615: LD_INT 0
44617: ST_TO_ADDR
// uc_nation := 0 ;
44618: LD_ADDR_OWVAR 21
44622: PUSH
44623: LD_INT 0
44625: ST_TO_ADDR
// InitHc ;
44626: CALL_OW 19
// hc_class := class_fish ;
44630: LD_ADDR_OWVAR 28
44634: PUSH
44635: LD_INT 20
44637: ST_TO_ADDR
// hc_gallery :=  ;
44638: LD_ADDR_OWVAR 33
44642: PUSH
44643: LD_STRING 
44645: ST_TO_ADDR
// hc_name :=  ;
44646: LD_ADDR_OWVAR 26
44650: PUSH
44651: LD_STRING 
44653: ST_TO_ADDR
// end ;
44654: LD_VAR 0 1
44658: RET
// export function PrepareBird ( ) ; begin
44659: LD_INT 0
44661: PPUSH
// uc_side := 0 ;
44662: LD_ADDR_OWVAR 20
44666: PUSH
44667: LD_INT 0
44669: ST_TO_ADDR
// uc_nation := 0 ;
44670: LD_ADDR_OWVAR 21
44674: PUSH
44675: LD_INT 0
44677: ST_TO_ADDR
// InitHc ;
44678: CALL_OW 19
// hc_class := class_phororhacos ;
44682: LD_ADDR_OWVAR 28
44686: PUSH
44687: LD_INT 18
44689: ST_TO_ADDR
// hc_gallery :=  ;
44690: LD_ADDR_OWVAR 33
44694: PUSH
44695: LD_STRING 
44697: ST_TO_ADDR
// hc_name :=  ;
44698: LD_ADDR_OWVAR 26
44702: PUSH
44703: LD_STRING 
44705: ST_TO_ADDR
// end ;
44706: LD_VAR 0 1
44710: RET
// export function PrepareHorse ( ) ; begin
44711: LD_INT 0
44713: PPUSH
// uc_side := 0 ;
44714: LD_ADDR_OWVAR 20
44718: PUSH
44719: LD_INT 0
44721: ST_TO_ADDR
// uc_nation := 0 ;
44722: LD_ADDR_OWVAR 21
44726: PUSH
44727: LD_INT 0
44729: ST_TO_ADDR
// InitHc ;
44730: CALL_OW 19
// hc_class := class_horse ;
44734: LD_ADDR_OWVAR 28
44738: PUSH
44739: LD_INT 21
44741: ST_TO_ADDR
// hc_gallery :=  ;
44742: LD_ADDR_OWVAR 33
44746: PUSH
44747: LD_STRING 
44749: ST_TO_ADDR
// hc_name :=  ;
44750: LD_ADDR_OWVAR 26
44754: PUSH
44755: LD_STRING 
44757: ST_TO_ADDR
// end ;
44758: LD_VAR 0 1
44762: RET
// export function PrepareMastodont ( ) ; begin
44763: LD_INT 0
44765: PPUSH
// uc_side := 0 ;
44766: LD_ADDR_OWVAR 20
44770: PUSH
44771: LD_INT 0
44773: ST_TO_ADDR
// uc_nation := 0 ;
44774: LD_ADDR_OWVAR 21
44778: PUSH
44779: LD_INT 0
44781: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44782: LD_ADDR_OWVAR 37
44786: PUSH
44787: LD_INT 31
44789: ST_TO_ADDR
// vc_control := control_rider ;
44790: LD_ADDR_OWVAR 38
44794: PUSH
44795: LD_INT 4
44797: ST_TO_ADDR
// end ;
44798: LD_VAR 0 1
44802: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44803: LD_INT 0
44805: PPUSH
44806: PPUSH
44807: PPUSH
// uc_side = 0 ;
44808: LD_ADDR_OWVAR 20
44812: PUSH
44813: LD_INT 0
44815: ST_TO_ADDR
// uc_nation = 0 ;
44816: LD_ADDR_OWVAR 21
44820: PUSH
44821: LD_INT 0
44823: ST_TO_ADDR
// InitHc_All ( ) ;
44824: CALL_OW 584
// InitVc ;
44828: CALL_OW 20
// if mastodonts then
44832: LD_VAR 0 6
44836: IFFALSE 44903
// for i = 1 to mastodonts do
44838: LD_ADDR_VAR 0 11
44842: PUSH
44843: DOUBLE
44844: LD_INT 1
44846: DEC
44847: ST_TO_ADDR
44848: LD_VAR 0 6
44852: PUSH
44853: FOR_TO
44854: IFFALSE 44901
// begin vc_chassis := 31 ;
44856: LD_ADDR_OWVAR 37
44860: PUSH
44861: LD_INT 31
44863: ST_TO_ADDR
// vc_control := control_rider ;
44864: LD_ADDR_OWVAR 38
44868: PUSH
44869: LD_INT 4
44871: ST_TO_ADDR
// animal := CreateVehicle ;
44872: LD_ADDR_VAR 0 12
44876: PUSH
44877: CALL_OW 45
44881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44882: LD_VAR 0 12
44886: PPUSH
44887: LD_VAR 0 8
44891: PPUSH
44892: LD_INT 0
44894: PPUSH
44895: CALL 47045 0 3
// end ;
44899: GO 44853
44901: POP
44902: POP
// if horses then
44903: LD_VAR 0 5
44907: IFFALSE 44974
// for i = 1 to horses do
44909: LD_ADDR_VAR 0 11
44913: PUSH
44914: DOUBLE
44915: LD_INT 1
44917: DEC
44918: ST_TO_ADDR
44919: LD_VAR 0 5
44923: PUSH
44924: FOR_TO
44925: IFFALSE 44972
// begin hc_class := 21 ;
44927: LD_ADDR_OWVAR 28
44931: PUSH
44932: LD_INT 21
44934: ST_TO_ADDR
// hc_gallery :=  ;
44935: LD_ADDR_OWVAR 33
44939: PUSH
44940: LD_STRING 
44942: ST_TO_ADDR
// animal := CreateHuman ;
44943: LD_ADDR_VAR 0 12
44947: PUSH
44948: CALL_OW 44
44952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44953: LD_VAR 0 12
44957: PPUSH
44958: LD_VAR 0 8
44962: PPUSH
44963: LD_INT 0
44965: PPUSH
44966: CALL 47045 0 3
// end ;
44970: GO 44924
44972: POP
44973: POP
// if birds then
44974: LD_VAR 0 1
44978: IFFALSE 45045
// for i = 1 to birds do
44980: LD_ADDR_VAR 0 11
44984: PUSH
44985: DOUBLE
44986: LD_INT 1
44988: DEC
44989: ST_TO_ADDR
44990: LD_VAR 0 1
44994: PUSH
44995: FOR_TO
44996: IFFALSE 45043
// begin hc_class := 18 ;
44998: LD_ADDR_OWVAR 28
45002: PUSH
45003: LD_INT 18
45005: ST_TO_ADDR
// hc_gallery =  ;
45006: LD_ADDR_OWVAR 33
45010: PUSH
45011: LD_STRING 
45013: ST_TO_ADDR
// animal := CreateHuman ;
45014: LD_ADDR_VAR 0 12
45018: PUSH
45019: CALL_OW 44
45023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45024: LD_VAR 0 12
45028: PPUSH
45029: LD_VAR 0 8
45033: PPUSH
45034: LD_INT 0
45036: PPUSH
45037: CALL 47045 0 3
// end ;
45041: GO 44995
45043: POP
45044: POP
// if tigers then
45045: LD_VAR 0 2
45049: IFFALSE 45133
// for i = 1 to tigers do
45051: LD_ADDR_VAR 0 11
45055: PUSH
45056: DOUBLE
45057: LD_INT 1
45059: DEC
45060: ST_TO_ADDR
45061: LD_VAR 0 2
45065: PUSH
45066: FOR_TO
45067: IFFALSE 45131
// begin hc_class = class_tiger ;
45069: LD_ADDR_OWVAR 28
45073: PUSH
45074: LD_INT 14
45076: ST_TO_ADDR
// hc_gallery =  ;
45077: LD_ADDR_OWVAR 33
45081: PUSH
45082: LD_STRING 
45084: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45085: LD_ADDR_OWVAR 35
45089: PUSH
45090: LD_INT 7
45092: NEG
45093: PPUSH
45094: LD_INT 7
45096: PPUSH
45097: CALL_OW 12
45101: ST_TO_ADDR
// animal := CreateHuman ;
45102: LD_ADDR_VAR 0 12
45106: PUSH
45107: CALL_OW 44
45111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45112: LD_VAR 0 12
45116: PPUSH
45117: LD_VAR 0 8
45121: PPUSH
45122: LD_INT 0
45124: PPUSH
45125: CALL 47045 0 3
// end ;
45129: GO 45066
45131: POP
45132: POP
// if apemans then
45133: LD_VAR 0 3
45137: IFFALSE 45260
// for i = 1 to apemans do
45139: LD_ADDR_VAR 0 11
45143: PUSH
45144: DOUBLE
45145: LD_INT 1
45147: DEC
45148: ST_TO_ADDR
45149: LD_VAR 0 3
45153: PUSH
45154: FOR_TO
45155: IFFALSE 45258
// begin hc_class = class_apeman ;
45157: LD_ADDR_OWVAR 28
45161: PUSH
45162: LD_INT 12
45164: ST_TO_ADDR
// hc_gallery =  ;
45165: LD_ADDR_OWVAR 33
45169: PUSH
45170: LD_STRING 
45172: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45173: LD_ADDR_OWVAR 35
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PPUSH
45182: LD_INT 2
45184: PPUSH
45185: CALL_OW 12
45189: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45190: LD_ADDR_OWVAR 31
45194: PUSH
45195: LD_INT 1
45197: PPUSH
45198: LD_INT 3
45200: PPUSH
45201: CALL_OW 12
45205: PUSH
45206: LD_INT 1
45208: PPUSH
45209: LD_INT 3
45211: PPUSH
45212: CALL_OW 12
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// animal := CreateHuman ;
45229: LD_ADDR_VAR 0 12
45233: PUSH
45234: CALL_OW 44
45238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45239: LD_VAR 0 12
45243: PPUSH
45244: LD_VAR 0 8
45248: PPUSH
45249: LD_INT 0
45251: PPUSH
45252: CALL 47045 0 3
// end ;
45256: GO 45154
45258: POP
45259: POP
// if enchidnas then
45260: LD_VAR 0 4
45264: IFFALSE 45331
// for i = 1 to enchidnas do
45266: LD_ADDR_VAR 0 11
45270: PUSH
45271: DOUBLE
45272: LD_INT 1
45274: DEC
45275: ST_TO_ADDR
45276: LD_VAR 0 4
45280: PUSH
45281: FOR_TO
45282: IFFALSE 45329
// begin hc_class = 13 ;
45284: LD_ADDR_OWVAR 28
45288: PUSH
45289: LD_INT 13
45291: ST_TO_ADDR
// hc_gallery =  ;
45292: LD_ADDR_OWVAR 33
45296: PUSH
45297: LD_STRING 
45299: ST_TO_ADDR
// animal := CreateHuman ;
45300: LD_ADDR_VAR 0 12
45304: PUSH
45305: CALL_OW 44
45309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45310: LD_VAR 0 12
45314: PPUSH
45315: LD_VAR 0 8
45319: PPUSH
45320: LD_INT 0
45322: PPUSH
45323: CALL 47045 0 3
// end ;
45327: GO 45281
45329: POP
45330: POP
// if fishes then
45331: LD_VAR 0 7
45335: IFFALSE 45402
// for i = 1 to fishes do
45337: LD_ADDR_VAR 0 11
45341: PUSH
45342: DOUBLE
45343: LD_INT 1
45345: DEC
45346: ST_TO_ADDR
45347: LD_VAR 0 7
45351: PUSH
45352: FOR_TO
45353: IFFALSE 45400
// begin hc_class = 20 ;
45355: LD_ADDR_OWVAR 28
45359: PUSH
45360: LD_INT 20
45362: ST_TO_ADDR
// hc_gallery =  ;
45363: LD_ADDR_OWVAR 33
45367: PUSH
45368: LD_STRING 
45370: ST_TO_ADDR
// animal := CreateHuman ;
45371: LD_ADDR_VAR 0 12
45375: PUSH
45376: CALL_OW 44
45380: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45381: LD_VAR 0 12
45385: PPUSH
45386: LD_VAR 0 9
45390: PPUSH
45391: LD_INT 0
45393: PPUSH
45394: CALL 47045 0 3
// end ;
45398: GO 45352
45400: POP
45401: POP
// end ;
45402: LD_VAR 0 10
45406: RET
// export function WantHeal ( sci , unit ) ; begin
45407: LD_INT 0
45409: PPUSH
// if GetTaskList ( sci ) > 0 then
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 437
45419: PUSH
45420: LD_INT 0
45422: GREATER
45423: IFFALSE 45495
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45425: LD_VAR 0 1
45429: PPUSH
45430: CALL_OW 437
45434: PUSH
45435: LD_INT 1
45437: ARRAY
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PUSH
45443: LD_STRING l
45445: EQUAL
45446: IFFALSE 45473
45448: PUSH
45449: LD_VAR 0 1
45453: PPUSH
45454: CALL_OW 437
45458: PUSH
45459: LD_INT 1
45461: ARRAY
45462: PUSH
45463: LD_INT 4
45465: ARRAY
45466: PUSH
45467: LD_VAR 0 2
45471: EQUAL
45472: AND
45473: IFFALSE 45485
// result := true else
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_INT 1
45482: ST_TO_ADDR
45483: GO 45493
// result := false ;
45485: LD_ADDR_VAR 0 3
45489: PUSH
45490: LD_INT 0
45492: ST_TO_ADDR
// end else
45493: GO 45503
// result := false ;
45495: LD_ADDR_VAR 0 3
45499: PUSH
45500: LD_INT 0
45502: ST_TO_ADDR
// end ;
45503: LD_VAR 0 3
45507: RET
// export function HealTarget ( sci ) ; begin
45508: LD_INT 0
45510: PPUSH
// if not sci then
45511: LD_VAR 0 1
45515: NOT
45516: IFFALSE 45520
// exit ;
45518: GO 45585
// result := 0 ;
45520: LD_ADDR_VAR 0 2
45524: PUSH
45525: LD_INT 0
45527: ST_TO_ADDR
// if GetTaskList ( sci ) then
45528: LD_VAR 0 1
45532: PPUSH
45533: CALL_OW 437
45537: IFFALSE 45585
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45539: LD_VAR 0 1
45543: PPUSH
45544: CALL_OW 437
45548: PUSH
45549: LD_INT 1
45551: ARRAY
45552: PUSH
45553: LD_INT 1
45555: ARRAY
45556: PUSH
45557: LD_STRING l
45559: EQUAL
45560: IFFALSE 45585
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45562: LD_ADDR_VAR 0 2
45566: PUSH
45567: LD_VAR 0 1
45571: PPUSH
45572: CALL_OW 437
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PUSH
45581: LD_INT 4
45583: ARRAY
45584: ST_TO_ADDR
// end ;
45585: LD_VAR 0 2
45589: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45590: LD_INT 0
45592: PPUSH
45593: PPUSH
45594: PPUSH
45595: PPUSH
// if not base_units then
45596: LD_VAR 0 1
45600: NOT
45601: IFFALSE 45605
// exit ;
45603: GO 45692
// result := false ;
45605: LD_ADDR_VAR 0 2
45609: PUSH
45610: LD_INT 0
45612: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45613: LD_ADDR_VAR 0 5
45617: PUSH
45618: LD_VAR 0 1
45622: PPUSH
45623: LD_INT 21
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PPUSH
45633: CALL_OW 72
45637: ST_TO_ADDR
// if not tmp then
45638: LD_VAR 0 5
45642: NOT
45643: IFFALSE 45647
// exit ;
45645: GO 45692
// for i in tmp do
45647: LD_ADDR_VAR 0 3
45651: PUSH
45652: LD_VAR 0 5
45656: PUSH
45657: FOR_IN
45658: IFFALSE 45690
// begin result := EnemyInRange ( i , 22 ) ;
45660: LD_ADDR_VAR 0 2
45664: PUSH
45665: LD_VAR 0 3
45669: PPUSH
45670: LD_INT 22
45672: PPUSH
45673: CALL 43117 0 2
45677: ST_TO_ADDR
// if result then
45678: LD_VAR 0 2
45682: IFFALSE 45688
// exit ;
45684: POP
45685: POP
45686: GO 45692
// end ;
45688: GO 45657
45690: POP
45691: POP
// end ;
45692: LD_VAR 0 2
45696: RET
// export function FilterByTag ( units , tag ) ; begin
45697: LD_INT 0
45699: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_VAR 0 1
45709: PPUSH
45710: LD_INT 120
45712: PUSH
45713: LD_VAR 0 2
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PPUSH
45722: CALL_OW 72
45726: ST_TO_ADDR
// end ;
45727: LD_VAR 0 3
45731: RET
// export function IsDriver ( un ) ; begin
45732: LD_INT 0
45734: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45735: LD_ADDR_VAR 0 2
45739: PUSH
45740: LD_VAR 0 1
45744: PUSH
45745: LD_INT 55
45747: PUSH
45748: EMPTY
45749: LIST
45750: PPUSH
45751: CALL_OW 69
45755: IN
45756: ST_TO_ADDR
// end ;
45757: LD_VAR 0 2
45761: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45762: LD_INT 0
45764: PPUSH
45765: PPUSH
// list := [ ] ;
45766: LD_ADDR_VAR 0 5
45770: PUSH
45771: EMPTY
45772: ST_TO_ADDR
// case d of 0 :
45773: LD_VAR 0 3
45777: PUSH
45778: LD_INT 0
45780: DOUBLE
45781: EQUAL
45782: IFTRUE 45786
45784: GO 45919
45786: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45787: LD_ADDR_VAR 0 5
45791: PUSH
45792: LD_VAR 0 1
45796: PUSH
45797: LD_INT 4
45799: MINUS
45800: PUSH
45801: LD_VAR 0 2
45805: PUSH
45806: LD_INT 4
45808: MINUS
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: PUSH
45818: LD_VAR 0 1
45822: PUSH
45823: LD_INT 3
45825: MINUS
45826: PUSH
45827: LD_VAR 0 2
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: PUSH
45840: LD_VAR 0 1
45844: PUSH
45845: LD_INT 4
45847: PLUS
45848: PUSH
45849: LD_VAR 0 2
45853: PUSH
45854: LD_INT 4
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: PUSH
45862: LD_VAR 0 1
45866: PUSH
45867: LD_INT 3
45869: PLUS
45870: PUSH
45871: LD_VAR 0 2
45875: PUSH
45876: LD_INT 3
45878: PLUS
45879: PUSH
45880: LD_INT 5
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: PUSH
45888: LD_VAR 0 1
45892: PUSH
45893: LD_VAR 0 2
45897: PUSH
45898: LD_INT 4
45900: PLUS
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// end ; 1 :
45917: GO 46617
45919: LD_INT 1
45921: DOUBLE
45922: EQUAL
45923: IFTRUE 45927
45925: GO 46060
45927: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45928: LD_ADDR_VAR 0 5
45932: PUSH
45933: LD_VAR 0 1
45937: PUSH
45938: LD_VAR 0 2
45942: PUSH
45943: LD_INT 4
45945: MINUS
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: PUSH
45955: LD_VAR 0 1
45959: PUSH
45960: LD_INT 3
45962: MINUS
45963: PUSH
45964: LD_VAR 0 2
45968: PUSH
45969: LD_INT 3
45971: MINUS
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: PUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_INT 4
45988: MINUS
45989: PUSH
45990: LD_VAR 0 2
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 1
46007: PUSH
46008: LD_VAR 0 2
46012: PUSH
46013: LD_INT 3
46015: PLUS
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: PUSH
46025: LD_VAR 0 1
46029: PUSH
46030: LD_INT 4
46032: PLUS
46033: PUSH
46034: LD_VAR 0 2
46038: PUSH
46039: LD_INT 4
46041: PLUS
46042: PUSH
46043: LD_INT 5
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// end ; 2 :
46058: GO 46617
46060: LD_INT 2
46062: DOUBLE
46063: EQUAL
46064: IFTRUE 46068
46066: GO 46197
46068: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46069: LD_ADDR_VAR 0 5
46073: PUSH
46074: LD_VAR 0 1
46078: PUSH
46079: LD_VAR 0 2
46083: PUSH
46084: LD_INT 3
46086: MINUS
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: PUSH
46096: LD_VAR 0 1
46100: PUSH
46101: LD_INT 4
46103: PLUS
46104: PUSH
46105: LD_VAR 0 2
46109: PUSH
46110: LD_INT 4
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: PUSH
46118: LD_VAR 0 1
46122: PUSH
46123: LD_VAR 0 2
46127: PUSH
46128: LD_INT 4
46130: PLUS
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: PUSH
46140: LD_VAR 0 1
46144: PUSH
46145: LD_INT 3
46147: MINUS
46148: PUSH
46149: LD_VAR 0 2
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: PUSH
46162: LD_VAR 0 1
46166: PUSH
46167: LD_INT 4
46169: MINUS
46170: PUSH
46171: LD_VAR 0 2
46175: PUSH
46176: LD_INT 4
46178: MINUS
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// end ; 3 :
46195: GO 46617
46197: LD_INT 3
46199: DOUBLE
46200: EQUAL
46201: IFTRUE 46205
46203: GO 46338
46205: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46206: LD_ADDR_VAR 0 5
46210: PUSH
46211: LD_VAR 0 1
46215: PUSH
46216: LD_INT 3
46218: PLUS
46219: PUSH
46220: LD_VAR 0 2
46224: PUSH
46225: LD_INT 4
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: PUSH
46233: LD_VAR 0 1
46237: PUSH
46238: LD_INT 4
46240: PLUS
46241: PUSH
46242: LD_VAR 0 2
46246: PUSH
46247: LD_INT 4
46249: PLUS
46250: PUSH
46251: LD_INT 5
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: PUSH
46259: LD_VAR 0 1
46263: PUSH
46264: LD_INT 4
46266: MINUS
46267: PUSH
46268: LD_VAR 0 2
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: PUSH
46281: LD_VAR 0 1
46285: PUSH
46286: LD_VAR 0 2
46290: PUSH
46291: LD_INT 4
46293: MINUS
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: PUSH
46303: LD_VAR 0 1
46307: PUSH
46308: LD_INT 3
46310: MINUS
46311: PUSH
46312: LD_VAR 0 2
46316: PUSH
46317: LD_INT 3
46319: MINUS
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// end ; 4 :
46336: GO 46617
46338: LD_INT 4
46340: DOUBLE
46341: EQUAL
46342: IFTRUE 46346
46344: GO 46479
46346: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46347: LD_ADDR_VAR 0 5
46351: PUSH
46352: LD_VAR 0 1
46356: PUSH
46357: LD_VAR 0 2
46361: PUSH
46362: LD_INT 4
46364: PLUS
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: PUSH
46374: LD_VAR 0 1
46378: PUSH
46379: LD_INT 3
46381: PLUS
46382: PUSH
46383: LD_VAR 0 2
46387: PUSH
46388: LD_INT 3
46390: PLUS
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PUSH
46400: LD_VAR 0 1
46404: PUSH
46405: LD_INT 4
46407: PLUS
46408: PUSH
46409: LD_VAR 0 2
46413: PUSH
46414: LD_INT 4
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: LD_VAR 0 1
46426: PUSH
46427: LD_VAR 0 2
46431: PUSH
46432: LD_INT 3
46434: MINUS
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: PUSH
46444: LD_VAR 0 1
46448: PUSH
46449: LD_INT 4
46451: MINUS
46452: PUSH
46453: LD_VAR 0 2
46457: PUSH
46458: LD_INT 4
46460: MINUS
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// end ; 5 :
46477: GO 46617
46479: LD_INT 5
46481: DOUBLE
46482: EQUAL
46483: IFTRUE 46487
46485: GO 46616
46487: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46488: LD_ADDR_VAR 0 5
46492: PUSH
46493: LD_VAR 0 1
46497: PUSH
46498: LD_INT 4
46500: MINUS
46501: PUSH
46502: LD_VAR 0 2
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: PUSH
46515: LD_VAR 0 1
46519: PUSH
46520: LD_VAR 0 2
46524: PUSH
46525: LD_INT 4
46527: MINUS
46528: PUSH
46529: LD_INT 3
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: PUSH
46537: LD_VAR 0 1
46541: PUSH
46542: LD_INT 4
46544: PLUS
46545: PUSH
46546: LD_VAR 0 2
46550: PUSH
46551: LD_INT 4
46553: PLUS
46554: PUSH
46555: LD_INT 5
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_INT 3
46570: PLUS
46571: PUSH
46572: LD_VAR 0 2
46576: PUSH
46577: LD_INT 4
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: PUSH
46585: LD_VAR 0 1
46589: PUSH
46590: LD_VAR 0 2
46594: PUSH
46595: LD_INT 3
46597: PLUS
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// end ; end ;
46614: GO 46617
46616: POP
// result := list ;
46617: LD_ADDR_VAR 0 4
46621: PUSH
46622: LD_VAR 0 5
46626: ST_TO_ADDR
// end ;
46627: LD_VAR 0 4
46631: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46632: LD_INT 0
46634: PPUSH
46635: PPUSH
46636: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46637: LD_VAR 0 1
46641: NOT
46642: IFTRUE 46670
46644: PUSH
46645: LD_VAR 0 2
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 4
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: IN
46668: NOT
46669: OR
46670: IFFALSE 46674
// exit ;
46672: GO 46757
// tmp := [ ] ;
46674: LD_ADDR_VAR 0 5
46678: PUSH
46679: EMPTY
46680: ST_TO_ADDR
// for i in units do
46681: LD_ADDR_VAR 0 4
46685: PUSH
46686: LD_VAR 0 1
46690: PUSH
46691: FOR_IN
46692: IFFALSE 46726
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46694: LD_ADDR_VAR 0 5
46698: PUSH
46699: LD_VAR 0 5
46703: PPUSH
46704: LD_VAR 0 4
46708: PPUSH
46709: LD_VAR 0 2
46713: PPUSH
46714: CALL_OW 259
46718: PPUSH
46719: CALL 48152 0 2
46723: ST_TO_ADDR
46724: GO 46691
46726: POP
46727: POP
// if not tmp then
46728: LD_VAR 0 5
46732: NOT
46733: IFFALSE 46737
// exit ;
46735: GO 46757
// result := SortListByListDesc ( units , tmp ) ;
46737: LD_ADDR_VAR 0 3
46741: PUSH
46742: LD_VAR 0 1
46746: PPUSH
46747: LD_VAR 0 5
46751: PPUSH
46752: CALL_OW 77
46756: ST_TO_ADDR
// end ;
46757: LD_VAR 0 3
46761: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46762: LD_INT 0
46764: PPUSH
46765: PPUSH
46766: PPUSH
// result := false ;
46767: LD_ADDR_VAR 0 3
46771: PUSH
46772: LD_INT 0
46774: ST_TO_ADDR
// if not building then
46775: LD_VAR 0 2
46779: NOT
46780: IFFALSE 46784
// exit ;
46782: GO 46928
// x := GetX ( building ) ;
46784: LD_ADDR_VAR 0 4
46788: PUSH
46789: LD_VAR 0 2
46793: PPUSH
46794: CALL_OW 250
46798: ST_TO_ADDR
// y := GetY ( building ) ;
46799: LD_ADDR_VAR 0 5
46803: PUSH
46804: LD_VAR 0 2
46808: PPUSH
46809: CALL_OW 251
46813: ST_TO_ADDR
// if not x or not y then
46814: LD_VAR 0 4
46818: NOT
46819: IFTRUE 46828
46821: PUSH
46822: LD_VAR 0 5
46826: NOT
46827: OR
46828: IFFALSE 46832
// exit ;
46830: GO 46928
// if GetTaskList ( unit ) then
46832: LD_VAR 0 1
46836: PPUSH
46837: CALL_OW 437
46841: IFFALSE 46928
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46843: LD_STRING e
46845: PUSH
46846: LD_VAR 0 1
46850: PPUSH
46851: CALL_OW 437
46855: PUSH
46856: LD_INT 1
46858: ARRAY
46859: PUSH
46860: LD_INT 1
46862: ARRAY
46863: EQUAL
46864: IFFALSE 46891
46866: PUSH
46867: LD_VAR 0 4
46871: PUSH
46872: LD_VAR 0 1
46876: PPUSH
46877: CALL_OW 437
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: PUSH
46886: LD_INT 2
46888: ARRAY
46889: EQUAL
46890: AND
46891: IFFALSE 46918
46893: PUSH
46894: LD_VAR 0 5
46898: PUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: CALL_OW 437
46908: PUSH
46909: LD_INT 1
46911: ARRAY
46912: PUSH
46913: LD_INT 3
46915: ARRAY
46916: EQUAL
46917: AND
46918: IFFALSE 46928
// result := true end ;
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_INT 1
46927: ST_TO_ADDR
// end ;
46928: LD_VAR 0 3
46932: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46933: LD_INT 0
46935: PPUSH
// result := false ;
46936: LD_ADDR_VAR 0 4
46940: PUSH
46941: LD_INT 0
46943: ST_TO_ADDR
// if GetTaskList ( unit ) then
46944: LD_VAR 0 1
46948: PPUSH
46949: CALL_OW 437
46953: IFFALSE 47040
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46955: LD_STRING M
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 437
46967: PUSH
46968: LD_INT 1
46970: ARRAY
46971: PUSH
46972: LD_INT 1
46974: ARRAY
46975: EQUAL
46976: IFFALSE 47003
46978: PUSH
46979: LD_VAR 0 2
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 437
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PUSH
46998: LD_INT 2
47000: ARRAY
47001: EQUAL
47002: AND
47003: IFFALSE 47030
47005: PUSH
47006: LD_VAR 0 3
47010: PUSH
47011: LD_VAR 0 1
47015: PPUSH
47016: CALL_OW 437
47020: PUSH
47021: LD_INT 1
47023: ARRAY
47024: PUSH
47025: LD_INT 3
47027: ARRAY
47028: EQUAL
47029: AND
47030: IFFALSE 47040
// result := true ;
47032: LD_ADDR_VAR 0 4
47036: PUSH
47037: LD_INT 1
47039: ST_TO_ADDR
// end ; end ;
47040: LD_VAR 0 4
47044: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47045: LD_INT 0
47047: PPUSH
47048: PPUSH
47049: PPUSH
47050: PPUSH
// if not unit or not area then
47051: LD_VAR 0 1
47055: NOT
47056: IFTRUE 47065
47058: PUSH
47059: LD_VAR 0 2
47063: NOT
47064: OR
47065: IFFALSE 47069
// exit ;
47067: GO 47245
// tmp := AreaToList ( area , i ) ;
47069: LD_ADDR_VAR 0 6
47073: PUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: LD_VAR 0 5
47083: PPUSH
47084: CALL_OW 517
47088: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47089: LD_ADDR_VAR 0 5
47093: PUSH
47094: DOUBLE
47095: LD_INT 1
47097: DEC
47098: ST_TO_ADDR
47099: LD_VAR 0 6
47103: PUSH
47104: LD_INT 1
47106: ARRAY
47107: PUSH
47108: FOR_TO
47109: IFFALSE 47243
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47111: LD_ADDR_VAR 0 7
47115: PUSH
47116: LD_VAR 0 6
47120: PUSH
47121: LD_INT 1
47123: ARRAY
47124: PUSH
47125: LD_VAR 0 5
47129: ARRAY
47130: PUSH
47131: LD_VAR 0 6
47135: PUSH
47136: LD_INT 2
47138: ARRAY
47139: PUSH
47140: LD_VAR 0 5
47144: ARRAY
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47150: LD_INT 92
47152: PUSH
47153: LD_VAR 0 7
47157: PUSH
47158: LD_INT 1
47160: ARRAY
47161: PUSH
47162: LD_VAR 0 7
47166: PUSH
47167: LD_INT 2
47169: ARRAY
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: PPUSH
47180: CALL_OW 69
47184: PUSH
47185: LD_INT 0
47187: EQUAL
47188: IFFALSE 47241
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47190: LD_VAR 0 1
47194: PPUSH
47195: LD_VAR 0 7
47199: PUSH
47200: LD_INT 1
47202: ARRAY
47203: PPUSH
47204: LD_VAR 0 7
47208: PUSH
47209: LD_INT 2
47211: ARRAY
47212: PPUSH
47213: LD_VAR 0 3
47217: PPUSH
47218: CALL_OW 48
// result := IsPlaced ( unit ) ;
47222: LD_ADDR_VAR 0 4
47226: PUSH
47227: LD_VAR 0 1
47231: PPUSH
47232: CALL_OW 305
47236: ST_TO_ADDR
// exit ;
47237: POP
47238: POP
47239: GO 47245
// end ; end ;
47241: GO 47108
47243: POP
47244: POP
// end ;
47245: LD_VAR 0 4
47249: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47250: LD_INT 0
47252: PPUSH
47253: PPUSH
47254: PPUSH
// if not side or side > 8 then
47255: LD_VAR 0 1
47259: NOT
47260: IFTRUE 47272
47262: PUSH
47263: LD_VAR 0 1
47267: PUSH
47268: LD_INT 8
47270: GREATER
47271: OR
47272: IFFALSE 47276
// exit ;
47274: GO 47463
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47276: LD_ADDR_VAR 0 4
47280: PUSH
47281: LD_INT 22
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 21
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PPUSH
47307: CALL_OW 69
47311: ST_TO_ADDR
// if not tmp then
47312: LD_VAR 0 4
47316: NOT
47317: IFFALSE 47321
// exit ;
47319: GO 47463
// enable_addtolog := true ;
47321: LD_ADDR_OWVAR 81
47325: PUSH
47326: LD_INT 1
47328: ST_TO_ADDR
// AddToLog ( [ ) ;
47329: LD_STRING [
47331: PPUSH
47332: CALL_OW 561
// for i in tmp do
47336: LD_ADDR_VAR 0 3
47340: PUSH
47341: LD_VAR 0 4
47345: PUSH
47346: FOR_IN
47347: IFFALSE 47454
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47349: LD_STRING [
47351: PUSH
47352: LD_VAR 0 3
47356: PPUSH
47357: CALL_OW 266
47361: STR
47362: PUSH
47363: LD_STRING , 
47365: STR
47366: PUSH
47367: LD_VAR 0 3
47371: PPUSH
47372: CALL_OW 250
47376: STR
47377: PUSH
47378: LD_STRING , 
47380: STR
47381: PUSH
47382: LD_VAR 0 3
47386: PPUSH
47387: CALL_OW 251
47391: STR
47392: PUSH
47393: LD_STRING , 
47395: STR
47396: PUSH
47397: LD_VAR 0 3
47401: PPUSH
47402: CALL_OW 254
47406: STR
47407: PUSH
47408: LD_STRING , 
47410: STR
47411: PUSH
47412: LD_VAR 0 3
47416: PPUSH
47417: LD_INT 1
47419: PPUSH
47420: CALL_OW 268
47424: STR
47425: PUSH
47426: LD_STRING , 
47428: STR
47429: PUSH
47430: LD_VAR 0 3
47434: PPUSH
47435: LD_INT 2
47437: PPUSH
47438: CALL_OW 268
47442: STR
47443: PUSH
47444: LD_STRING ],
47446: STR
47447: PPUSH
47448: CALL_OW 561
// end ;
47452: GO 47346
47454: POP
47455: POP
// AddToLog ( ]; ) ;
47456: LD_STRING ];
47458: PPUSH
47459: CALL_OW 561
// end ;
47463: LD_VAR 0 2
47467: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47468: LD_INT 0
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
47474: PPUSH
// if not area or not rate or not max then
47475: LD_VAR 0 1
47479: NOT
47480: IFTRUE 47489
47482: PUSH
47483: LD_VAR 0 2
47487: NOT
47488: OR
47489: IFTRUE 47498
47491: PUSH
47492: LD_VAR 0 4
47496: NOT
47497: OR
47498: IFFALSE 47502
// exit ;
47500: GO 47691
// while 1 do
47502: LD_INT 1
47504: IFFALSE 47691
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47506: LD_ADDR_VAR 0 9
47510: PUSH
47511: LD_VAR 0 1
47515: PPUSH
47516: LD_INT 1
47518: PPUSH
47519: CALL_OW 287
47523: PUSH
47524: LD_INT 10
47526: MUL
47527: ST_TO_ADDR
// r := rate / 10 ;
47528: LD_ADDR_VAR 0 7
47532: PUSH
47533: LD_VAR 0 2
47537: PUSH
47538: LD_INT 10
47540: DIVREAL
47541: ST_TO_ADDR
// time := 1 1$00 ;
47542: LD_ADDR_VAR 0 8
47546: PUSH
47547: LD_INT 2100
47549: ST_TO_ADDR
// if amount < min then
47550: LD_VAR 0 9
47554: PUSH
47555: LD_VAR 0 3
47559: LESS
47560: IFFALSE 47578
// r := r * 2 else
47562: LD_ADDR_VAR 0 7
47566: PUSH
47567: LD_VAR 0 7
47571: PUSH
47572: LD_INT 2
47574: MUL
47575: ST_TO_ADDR
47576: GO 47604
// if amount > max then
47578: LD_VAR 0 9
47582: PUSH
47583: LD_VAR 0 4
47587: GREATER
47588: IFFALSE 47604
// r := r / 2 ;
47590: LD_ADDR_VAR 0 7
47594: PUSH
47595: LD_VAR 0 7
47599: PUSH
47600: LD_INT 2
47602: DIVREAL
47603: ST_TO_ADDR
// time := time / r ;
47604: LD_ADDR_VAR 0 8
47608: PUSH
47609: LD_VAR 0 8
47613: PUSH
47614: LD_VAR 0 7
47618: DIVREAL
47619: ST_TO_ADDR
// if time < 0 then
47620: LD_VAR 0 8
47624: PUSH
47625: LD_INT 0
47627: LESS
47628: IFFALSE 47645
// time := time * - 1 ;
47630: LD_ADDR_VAR 0 8
47634: PUSH
47635: LD_VAR 0 8
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: MUL
47644: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47645: LD_VAR 0 8
47649: PUSH
47650: LD_INT 35
47652: PPUSH
47653: LD_INT 875
47655: PPUSH
47656: CALL_OW 12
47660: PLUS
47661: PPUSH
47662: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47666: LD_INT 1
47668: PPUSH
47669: LD_INT 5
47671: PPUSH
47672: CALL_OW 12
47676: PPUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: LD_INT 1
47684: PPUSH
47685: CALL_OW 55
// end ;
47689: GO 47502
// end ;
47691: LD_VAR 0 5
47695: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
// if not turrets or not factories then
47706: LD_VAR 0 1
47710: NOT
47711: IFTRUE 47720
47713: PUSH
47714: LD_VAR 0 2
47718: NOT
47719: OR
47720: IFFALSE 47724
// exit ;
47722: GO 48031
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47724: LD_ADDR_VAR 0 10
47728: PUSH
47729: LD_INT 5
47731: PUSH
47732: LD_INT 6
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 4
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: LD_INT 5
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 24
47766: PUSH
47767: LD_INT 25
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 23
47776: PUSH
47777: LD_INT 27
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 42
47790: PUSH
47791: LD_INT 43
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 44
47800: PUSH
47801: LD_INT 46
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 45
47810: PUSH
47811: LD_INT 47
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: ST_TO_ADDR
// result := [ ] ;
47828: LD_ADDR_VAR 0 3
47832: PUSH
47833: EMPTY
47834: ST_TO_ADDR
// for i in turrets do
47835: LD_ADDR_VAR 0 4
47839: PUSH
47840: LD_VAR 0 1
47844: PUSH
47845: FOR_IN
47846: IFFALSE 48029
// begin nat := GetNation ( i ) ;
47848: LD_ADDR_VAR 0 7
47852: PUSH
47853: LD_VAR 0 4
47857: PPUSH
47858: CALL_OW 248
47862: ST_TO_ADDR
// weapon := 0 ;
47863: LD_ADDR_VAR 0 8
47867: PUSH
47868: LD_INT 0
47870: ST_TO_ADDR
// if not nat then
47871: LD_VAR 0 7
47875: NOT
47876: IFFALSE 47880
// continue ;
47878: GO 47845
// for j in list [ nat ] do
47880: LD_ADDR_VAR 0 5
47884: PUSH
47885: LD_VAR 0 10
47889: PUSH
47890: LD_VAR 0 7
47894: ARRAY
47895: PUSH
47896: FOR_IN
47897: IFFALSE 47938
// if GetBWeapon ( i ) = j [ 1 ] then
47899: LD_VAR 0 4
47903: PPUSH
47904: CALL_OW 269
47908: PUSH
47909: LD_VAR 0 5
47913: PUSH
47914: LD_INT 1
47916: ARRAY
47917: EQUAL
47918: IFFALSE 47936
// begin weapon := j [ 2 ] ;
47920: LD_ADDR_VAR 0 8
47924: PUSH
47925: LD_VAR 0 5
47929: PUSH
47930: LD_INT 2
47932: ARRAY
47933: ST_TO_ADDR
// break ;
47934: GO 47938
// end ;
47936: GO 47896
47938: POP
47939: POP
// if not weapon then
47940: LD_VAR 0 8
47944: NOT
47945: IFFALSE 47949
// continue ;
47947: GO 47845
// for k in factories do
47949: LD_ADDR_VAR 0 6
47953: PUSH
47954: LD_VAR 0 2
47958: PUSH
47959: FOR_IN
47960: IFFALSE 48025
// begin weapons := AvailableWeaponList ( k ) ;
47962: LD_ADDR_VAR 0 9
47966: PUSH
47967: LD_VAR 0 6
47971: PPUSH
47972: CALL_OW 478
47976: ST_TO_ADDR
// if not weapons then
47977: LD_VAR 0 9
47981: NOT
47982: IFFALSE 47986
// continue ;
47984: GO 47959
// if weapon in weapons then
47986: LD_VAR 0 8
47990: PUSH
47991: LD_VAR 0 9
47995: IN
47996: IFFALSE 48023
// begin result := [ i , weapon ] ;
47998: LD_ADDR_VAR 0 3
48002: PUSH
48003: LD_VAR 0 4
48007: PUSH
48008: LD_VAR 0 8
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// exit ;
48017: POP
48018: POP
48019: POP
48020: POP
48021: GO 48031
// end ; end ;
48023: GO 47959
48025: POP
48026: POP
// end ;
48027: GO 47845
48029: POP
48030: POP
// end ;
48031: LD_VAR 0 3
48035: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48036: LD_INT 0
48038: PPUSH
// if not side or side > 8 then
48039: LD_VAR 0 3
48043: NOT
48044: IFTRUE 48056
48046: PUSH
48047: LD_VAR 0 3
48051: PUSH
48052: LD_INT 8
48054: GREATER
48055: OR
48056: IFFALSE 48060
// exit ;
48058: GO 48119
// if not range then
48060: LD_VAR 0 4
48064: NOT
48065: IFFALSE 48076
// range := - 12 ;
48067: LD_ADDR_VAR 0 4
48071: PUSH
48072: LD_INT 12
48074: NEG
48075: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48076: LD_VAR 0 1
48080: PPUSH
48081: LD_VAR 0 2
48085: PPUSH
48086: LD_VAR 0 3
48090: PPUSH
48091: LD_VAR 0 4
48095: PPUSH
48096: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48100: LD_VAR 0 1
48104: PPUSH
48105: LD_VAR 0 2
48109: PPUSH
48110: LD_VAR 0 3
48114: PPUSH
48115: CALL_OW 331
// end ;
48119: LD_VAR 0 5
48123: RET
// export function Video ( mode ) ; begin
48124: LD_INT 0
48126: PPUSH
// ingame_video = mode ;
48127: LD_ADDR_OWVAR 52
48131: PUSH
48132: LD_VAR 0 1
48136: ST_TO_ADDR
// interface_hidden = mode ;
48137: LD_ADDR_OWVAR 54
48141: PUSH
48142: LD_VAR 0 1
48146: ST_TO_ADDR
// end ;
48147: LD_VAR 0 2
48151: RET
// export function Join ( array , element ) ; begin
48152: LD_INT 0
48154: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48155: LD_ADDR_VAR 0 3
48159: PUSH
48160: LD_VAR 0 1
48164: PPUSH
48165: LD_VAR 0 1
48169: PUSH
48170: LD_INT 1
48172: PLUS
48173: PPUSH
48174: LD_VAR 0 2
48178: PPUSH
48179: CALL_OW 1
48183: ST_TO_ADDR
// end ;
48184: LD_VAR 0 3
48188: RET
// export function JoinUnion ( array , element ) ; begin
48189: LD_INT 0
48191: PPUSH
// result := array union element ;
48192: LD_ADDR_VAR 0 3
48196: PUSH
48197: LD_VAR 0 1
48201: PUSH
48202: LD_VAR 0 2
48206: UNION
48207: ST_TO_ADDR
// end ;
48208: LD_VAR 0 3
48212: RET
// export function GetBehemoths ( side ) ; begin
48213: LD_INT 0
48215: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48216: LD_ADDR_VAR 0 2
48220: PUSH
48221: LD_INT 22
48223: PUSH
48224: LD_VAR 0 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 31
48235: PUSH
48236: LD_INT 25
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PPUSH
48247: CALL_OW 69
48251: ST_TO_ADDR
// end ;
48252: LD_VAR 0 2
48256: RET
// export function Shuffle ( array ) ; var i , index ; begin
48257: LD_INT 0
48259: PPUSH
48260: PPUSH
48261: PPUSH
// result := [ ] ;
48262: LD_ADDR_VAR 0 2
48266: PUSH
48267: EMPTY
48268: ST_TO_ADDR
// if not array then
48269: LD_VAR 0 1
48273: NOT
48274: IFFALSE 48278
// exit ;
48276: GO 48377
// Randomize ;
48278: CALL_OW 10
// for i = array downto 1 do
48282: LD_ADDR_VAR 0 3
48286: PUSH
48287: DOUBLE
48288: LD_VAR 0 1
48292: INC
48293: ST_TO_ADDR
48294: LD_INT 1
48296: PUSH
48297: FOR_DOWNTO
48298: IFFALSE 48375
// begin index := rand ( 1 , array ) ;
48300: LD_ADDR_VAR 0 4
48304: PUSH
48305: LD_INT 1
48307: PPUSH
48308: LD_VAR 0 1
48312: PPUSH
48313: CALL_OW 12
48317: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48318: LD_ADDR_VAR 0 2
48322: PUSH
48323: LD_VAR 0 2
48327: PPUSH
48328: LD_VAR 0 2
48332: PUSH
48333: LD_INT 1
48335: PLUS
48336: PPUSH
48337: LD_VAR 0 1
48341: PUSH
48342: LD_VAR 0 4
48346: ARRAY
48347: PPUSH
48348: CALL_OW 2
48352: ST_TO_ADDR
// array := Delete ( array , index ) ;
48353: LD_ADDR_VAR 0 1
48357: PUSH
48358: LD_VAR 0 1
48362: PPUSH
48363: LD_VAR 0 4
48367: PPUSH
48368: CALL_OW 3
48372: ST_TO_ADDR
// end ;
48373: GO 48297
48375: POP
48376: POP
// end ;
48377: LD_VAR 0 2
48381: RET
// export function GetBaseMaterials ( base ) ; begin
48382: LD_INT 0
48384: PPUSH
// result := [ 0 , 0 , 0 ] ;
48385: LD_ADDR_VAR 0 2
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// if not base then
48404: LD_VAR 0 1
48408: NOT
48409: IFFALSE 48413
// exit ;
48411: GO 48462
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48413: LD_ADDR_VAR 0 2
48417: PUSH
48418: LD_VAR 0 1
48422: PPUSH
48423: LD_INT 1
48425: PPUSH
48426: CALL_OW 275
48430: PUSH
48431: LD_VAR 0 1
48435: PPUSH
48436: LD_INT 2
48438: PPUSH
48439: CALL_OW 275
48443: PUSH
48444: LD_VAR 0 1
48448: PPUSH
48449: LD_INT 3
48451: PPUSH
48452: CALL_OW 275
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: ST_TO_ADDR
// end ;
48462: LD_VAR 0 2
48466: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48467: LD_INT 0
48469: PPUSH
48470: PPUSH
// result := array ;
48471: LD_ADDR_VAR 0 3
48475: PUSH
48476: LD_VAR 0 1
48480: ST_TO_ADDR
// if size >= result then
48481: LD_VAR 0 2
48485: PUSH
48486: LD_VAR 0 3
48490: GREATEREQUAL
48491: IFFALSE 48495
// exit ;
48493: GO 48545
// if size then
48495: LD_VAR 0 2
48499: IFFALSE 48545
// for i := array downto size do
48501: LD_ADDR_VAR 0 4
48505: PUSH
48506: DOUBLE
48507: LD_VAR 0 1
48511: INC
48512: ST_TO_ADDR
48513: LD_VAR 0 2
48517: PUSH
48518: FOR_DOWNTO
48519: IFFALSE 48543
// result := Delete ( result , result ) ;
48521: LD_ADDR_VAR 0 3
48525: PUSH
48526: LD_VAR 0 3
48530: PPUSH
48531: LD_VAR 0 3
48535: PPUSH
48536: CALL_OW 3
48540: ST_TO_ADDR
48541: GO 48518
48543: POP
48544: POP
// end ;
48545: LD_VAR 0 3
48549: RET
// export function ComExit ( unit ) ; var tmp ; begin
48550: LD_INT 0
48552: PPUSH
48553: PPUSH
// if not IsInUnit ( unit ) then
48554: LD_VAR 0 1
48558: PPUSH
48559: CALL_OW 310
48563: NOT
48564: IFFALSE 48568
// exit ;
48566: GO 48628
// tmp := IsInUnit ( unit ) ;
48568: LD_ADDR_VAR 0 3
48572: PUSH
48573: LD_VAR 0 1
48577: PPUSH
48578: CALL_OW 310
48582: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48583: LD_VAR 0 3
48587: PPUSH
48588: CALL_OW 247
48592: PUSH
48593: LD_INT 2
48595: EQUAL
48596: IFFALSE 48609
// ComExitVehicle ( unit ) else
48598: LD_VAR 0 1
48602: PPUSH
48603: CALL_OW 121
48607: GO 48618
// ComExitBuilding ( unit ) ;
48609: LD_VAR 0 1
48613: PPUSH
48614: CALL_OW 122
// result := tmp ;
48618: LD_ADDR_VAR 0 2
48622: PUSH
48623: LD_VAR 0 3
48627: ST_TO_ADDR
// end ;
48628: LD_VAR 0 2
48632: RET
// export function ComExitAll ( units ) ; var i ; begin
48633: LD_INT 0
48635: PPUSH
48636: PPUSH
// if not units then
48637: LD_VAR 0 1
48641: NOT
48642: IFFALSE 48646
// exit ;
48644: GO 48672
// for i in units do
48646: LD_ADDR_VAR 0 3
48650: PUSH
48651: LD_VAR 0 1
48655: PUSH
48656: FOR_IN
48657: IFFALSE 48670
// ComExit ( i ) ;
48659: LD_VAR 0 3
48663: PPUSH
48664: CALL 48550 0 1
48668: GO 48656
48670: POP
48671: POP
// end ;
48672: LD_VAR 0 2
48676: RET
// export function ResetHc ; begin
48677: LD_INT 0
48679: PPUSH
// InitHc ;
48680: CALL_OW 19
// hc_importance := 0 ;
48684: LD_ADDR_OWVAR 32
48688: PUSH
48689: LD_INT 0
48691: ST_TO_ADDR
// end ;
48692: LD_VAR 0 1
48696: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48697: LD_INT 0
48699: PPUSH
48700: PPUSH
48701: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48702: LD_ADDR_VAR 0 6
48706: PUSH
48707: LD_VAR 0 1
48711: PUSH
48712: LD_VAR 0 3
48716: PLUS
48717: PUSH
48718: LD_INT 2
48720: DIV
48721: ST_TO_ADDR
// if _x < 0 then
48722: LD_VAR 0 6
48726: PUSH
48727: LD_INT 0
48729: LESS
48730: IFFALSE 48747
// _x := _x * - 1 ;
48732: LD_ADDR_VAR 0 6
48736: PUSH
48737: LD_VAR 0 6
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: MUL
48746: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48747: LD_ADDR_VAR 0 7
48751: PUSH
48752: LD_VAR 0 2
48756: PUSH
48757: LD_VAR 0 4
48761: PLUS
48762: PUSH
48763: LD_INT 2
48765: DIV
48766: ST_TO_ADDR
// if _y < 0 then
48767: LD_VAR 0 7
48771: PUSH
48772: LD_INT 0
48774: LESS
48775: IFFALSE 48792
// _y := _y * - 1 ;
48777: LD_ADDR_VAR 0 7
48781: PUSH
48782: LD_VAR 0 7
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: MUL
48791: ST_TO_ADDR
// result := [ _x , _y ] ;
48792: LD_ADDR_VAR 0 5
48796: PUSH
48797: LD_VAR 0 6
48801: PUSH
48802: LD_VAR 0 7
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: ST_TO_ADDR
// end ;
48811: LD_VAR 0 5
48815: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48816: LD_INT 0
48818: PPUSH
48819: PPUSH
48820: PPUSH
48821: PPUSH
// task := GetTaskList ( unit ) ;
48822: LD_ADDR_VAR 0 7
48826: PUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 437
48836: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48837: LD_VAR 0 7
48841: NOT
48842: IFFALSE 48861
48844: PUSH
48845: LD_VAR 0 1
48849: PPUSH
48850: LD_VAR 0 2
48854: PPUSH
48855: CALL_OW 308
48859: NOT
48860: AND
48861: IFFALSE 48865
// exit ;
48863: GO 48983
// if IsInArea ( unit , area ) then
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_VAR 0 2
48874: PPUSH
48875: CALL_OW 308
48879: IFFALSE 48897
// begin ComMoveToArea ( unit , goAway ) ;
48881: LD_VAR 0 1
48885: PPUSH
48886: LD_VAR 0 3
48890: PPUSH
48891: CALL_OW 113
// exit ;
48895: GO 48983
// end ; if task [ 1 ] [ 1 ] <> M then
48897: LD_VAR 0 7
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: PUSH
48906: LD_INT 1
48908: ARRAY
48909: PUSH
48910: LD_STRING M
48912: NONEQUAL
48913: IFFALSE 48917
// exit ;
48915: GO 48983
// x := task [ 1 ] [ 2 ] ;
48917: LD_ADDR_VAR 0 5
48921: PUSH
48922: LD_VAR 0 7
48926: PUSH
48927: LD_INT 1
48929: ARRAY
48930: PUSH
48931: LD_INT 2
48933: ARRAY
48934: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48935: LD_ADDR_VAR 0 6
48939: PUSH
48940: LD_VAR 0 7
48944: PUSH
48945: LD_INT 1
48947: ARRAY
48948: PUSH
48949: LD_INT 3
48951: ARRAY
48952: ST_TO_ADDR
// if InArea ( x , y , area ) then
48953: LD_VAR 0 5
48957: PPUSH
48958: LD_VAR 0 6
48962: PPUSH
48963: LD_VAR 0 2
48967: PPUSH
48968: CALL_OW 309
48972: IFFALSE 48983
// ComStop ( unit ) ;
48974: LD_VAR 0 1
48978: PPUSH
48979: CALL_OW 141
// end ;
48983: LD_VAR 0 4
48987: RET
// export function Abs ( value ) ; begin
48988: LD_INT 0
48990: PPUSH
// result := value ;
48991: LD_ADDR_VAR 0 2
48995: PUSH
48996: LD_VAR 0 1
49000: ST_TO_ADDR
// if value < 0 then
49001: LD_VAR 0 1
49005: PUSH
49006: LD_INT 0
49008: LESS
49009: IFFALSE 49026
// result := value * - 1 ;
49011: LD_ADDR_VAR 0 2
49015: PUSH
49016: LD_VAR 0 1
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: MUL
49025: ST_TO_ADDR
// end ;
49026: LD_VAR 0 2
49030: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49031: LD_INT 0
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
// if not unit or not building then
49041: LD_VAR 0 1
49045: NOT
49046: IFTRUE 49055
49048: PUSH
49049: LD_VAR 0 2
49053: NOT
49054: OR
49055: IFFALSE 49059
// exit ;
49057: GO 49287
// x := GetX ( building ) ;
49059: LD_ADDR_VAR 0 4
49063: PUSH
49064: LD_VAR 0 2
49068: PPUSH
49069: CALL_OW 250
49073: ST_TO_ADDR
// y := GetY ( building ) ;
49074: LD_ADDR_VAR 0 6
49078: PUSH
49079: LD_VAR 0 2
49083: PPUSH
49084: CALL_OW 251
49088: ST_TO_ADDR
// d := GetDir ( building ) ;
49089: LD_ADDR_VAR 0 8
49093: PUSH
49094: LD_VAR 0 2
49098: PPUSH
49099: CALL_OW 254
49103: ST_TO_ADDR
// r := 4 ;
49104: LD_ADDR_VAR 0 9
49108: PUSH
49109: LD_INT 4
49111: ST_TO_ADDR
// for i := 1 to 5 do
49112: LD_ADDR_VAR 0 10
49116: PUSH
49117: DOUBLE
49118: LD_INT 1
49120: DEC
49121: ST_TO_ADDR
49122: LD_INT 5
49124: PUSH
49125: FOR_TO
49126: IFFALSE 49285
// begin _x := ShiftX ( x , d , r + i ) ;
49128: LD_ADDR_VAR 0 5
49132: PUSH
49133: LD_VAR 0 4
49137: PPUSH
49138: LD_VAR 0 8
49142: PPUSH
49143: LD_VAR 0 9
49147: PUSH
49148: LD_VAR 0 10
49152: PLUS
49153: PPUSH
49154: CALL_OW 272
49158: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49159: LD_ADDR_VAR 0 7
49163: PUSH
49164: LD_VAR 0 6
49168: PPUSH
49169: LD_VAR 0 8
49173: PPUSH
49174: LD_VAR 0 9
49178: PUSH
49179: LD_VAR 0 10
49183: PLUS
49184: PPUSH
49185: CALL_OW 273
49189: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49190: LD_VAR 0 5
49194: PPUSH
49195: LD_VAR 0 7
49199: PPUSH
49200: CALL_OW 488
49204: IFFALSE 49239
49206: PUSH
49207: LD_VAR 0 5
49211: PPUSH
49212: LD_VAR 0 7
49216: PPUSH
49217: CALL_OW 428
49221: PPUSH
49222: CALL_OW 247
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: IN
49237: NOT
49238: AND
49239: IFFALSE 49283
// begin ComMoveXY ( unit , _x , _y ) ;
49241: LD_VAR 0 1
49245: PPUSH
49246: LD_VAR 0 5
49250: PPUSH
49251: LD_VAR 0 7
49255: PPUSH
49256: CALL_OW 111
// result := [ _x , _y ] ;
49260: LD_ADDR_VAR 0 3
49264: PUSH
49265: LD_VAR 0 5
49269: PUSH
49270: LD_VAR 0 7
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// exit ;
49279: POP
49280: POP
49281: GO 49287
// end ; end ;
49283: GO 49125
49285: POP
49286: POP
// end ;
49287: LD_VAR 0 3
49291: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49292: LD_INT 0
49294: PPUSH
49295: PPUSH
49296: PPUSH
// result := 0 ;
49297: LD_ADDR_VAR 0 3
49301: PUSH
49302: LD_INT 0
49304: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49305: LD_VAR 0 1
49309: PUSH
49310: LD_INT 0
49312: LESS
49313: IFTRUE 49325
49315: PUSH
49316: LD_VAR 0 1
49320: PUSH
49321: LD_INT 8
49323: GREATER
49324: OR
49325: IFTRUE 49337
49327: PUSH
49328: LD_VAR 0 2
49332: PUSH
49333: LD_INT 0
49335: LESS
49336: OR
49337: IFTRUE 49349
49339: PUSH
49340: LD_VAR 0 2
49344: PUSH
49345: LD_INT 8
49347: GREATER
49348: OR
49349: IFFALSE 49353
// exit ;
49351: GO 49428
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49353: LD_ADDR_VAR 0 4
49357: PUSH
49358: LD_INT 22
49360: PUSH
49361: LD_VAR 0 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PPUSH
49370: CALL_OW 69
49374: PUSH
49375: FOR_IN
49376: IFFALSE 49426
// begin un := UnitShoot ( i ) ;
49378: LD_ADDR_VAR 0 5
49382: PUSH
49383: LD_VAR 0 4
49387: PPUSH
49388: CALL_OW 504
49392: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49393: LD_VAR 0 5
49397: PPUSH
49398: CALL_OW 255
49402: PUSH
49403: LD_VAR 0 1
49407: EQUAL
49408: IFFALSE 49424
// begin result := un ;
49410: LD_ADDR_VAR 0 3
49414: PUSH
49415: LD_VAR 0 5
49419: ST_TO_ADDR
// exit ;
49420: POP
49421: POP
49422: GO 49428
// end ; end ;
49424: GO 49375
49426: POP
49427: POP
// end ;
49428: LD_VAR 0 3
49432: RET
// export function GetCargoBay ( units ) ; begin
49433: LD_INT 0
49435: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49436: LD_ADDR_VAR 0 2
49440: PUSH
49441: LD_VAR 0 1
49445: PPUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 34
49451: PUSH
49452: LD_INT 12
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 34
49461: PUSH
49462: LD_INT 51
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 34
49471: PUSH
49472: LD_INT 32
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 34
49481: PUSH
49482: LD_INT 89
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: PPUSH
49496: CALL_OW 72
49500: ST_TO_ADDR
// end ;
49501: LD_VAR 0 2
49505: RET
// export function Negate ( value ) ; begin
49506: LD_INT 0
49508: PPUSH
// result := not value ;
49509: LD_ADDR_VAR 0 2
49513: PUSH
49514: LD_VAR 0 1
49518: NOT
49519: ST_TO_ADDR
// end ;
49520: LD_VAR 0 2
49524: RET
// export function Inc ( value ) ; begin
49525: LD_INT 0
49527: PPUSH
// result := value + 1 ;
49528: LD_ADDR_VAR 0 2
49532: PUSH
49533: LD_VAR 0 1
49537: PUSH
49538: LD_INT 1
49540: PLUS
49541: ST_TO_ADDR
// end ;
49542: LD_VAR 0 2
49546: RET
// export function Dec ( value ) ; begin
49547: LD_INT 0
49549: PPUSH
// result := value - 1 ;
49550: LD_ADDR_VAR 0 2
49554: PUSH
49555: LD_VAR 0 1
49559: PUSH
49560: LD_INT 1
49562: MINUS
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 2
49568: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49569: LD_INT 0
49571: PPUSH
49572: PPUSH
49573: PPUSH
49574: PPUSH
49575: PPUSH
49576: PPUSH
49577: PPUSH
49578: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49579: LD_VAR 0 1
49583: PPUSH
49584: LD_VAR 0 2
49588: PPUSH
49589: CALL_OW 488
49593: NOT
49594: IFTRUE 49613
49596: PUSH
49597: LD_VAR 0 3
49601: PPUSH
49602: LD_VAR 0 4
49606: PPUSH
49607: CALL_OW 488
49611: NOT
49612: OR
49613: IFFALSE 49626
// begin result := - 1 ;
49615: LD_ADDR_VAR 0 5
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: ST_TO_ADDR
// exit ;
49624: GO 49861
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49626: LD_ADDR_VAR 0 12
49630: PUSH
49631: LD_VAR 0 1
49635: PPUSH
49636: LD_VAR 0 2
49640: PPUSH
49641: LD_VAR 0 3
49645: PPUSH
49646: LD_VAR 0 4
49650: PPUSH
49651: CALL 48697 0 4
49655: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49656: LD_ADDR_VAR 0 11
49660: PUSH
49661: LD_VAR 0 1
49665: PPUSH
49666: LD_VAR 0 2
49670: PPUSH
49671: LD_VAR 0 12
49675: PUSH
49676: LD_INT 1
49678: ARRAY
49679: PPUSH
49680: LD_VAR 0 12
49684: PUSH
49685: LD_INT 2
49687: ARRAY
49688: PPUSH
49689: CALL_OW 298
49693: ST_TO_ADDR
// distance := 9999 ;
49694: LD_ADDR_VAR 0 10
49698: PUSH
49699: LD_INT 9999
49701: ST_TO_ADDR
// for i := 0 to 5 do
49702: LD_ADDR_VAR 0 6
49706: PUSH
49707: DOUBLE
49708: LD_INT 0
49710: DEC
49711: ST_TO_ADDR
49712: LD_INT 5
49714: PUSH
49715: FOR_TO
49716: IFFALSE 49859
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49718: LD_ADDR_VAR 0 7
49722: PUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: LD_VAR 0 6
49732: PPUSH
49733: LD_VAR 0 11
49737: PPUSH
49738: CALL_OW 272
49742: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49743: LD_ADDR_VAR 0 8
49747: PUSH
49748: LD_VAR 0 2
49752: PPUSH
49753: LD_VAR 0 6
49757: PPUSH
49758: LD_VAR 0 11
49762: PPUSH
49763: CALL_OW 273
49767: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49768: LD_VAR 0 7
49772: PPUSH
49773: LD_VAR 0 8
49777: PPUSH
49778: CALL_OW 488
49782: NOT
49783: IFFALSE 49787
// continue ;
49785: GO 49715
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49787: LD_ADDR_VAR 0 9
49791: PUSH
49792: LD_VAR 0 12
49796: PUSH
49797: LD_INT 1
49799: ARRAY
49800: PPUSH
49801: LD_VAR 0 12
49805: PUSH
49806: LD_INT 2
49808: ARRAY
49809: PPUSH
49810: LD_VAR 0 7
49814: PPUSH
49815: LD_VAR 0 8
49819: PPUSH
49820: CALL_OW 298
49824: ST_TO_ADDR
// if tmp < distance then
49825: LD_VAR 0 9
49829: PUSH
49830: LD_VAR 0 10
49834: LESS
49835: IFFALSE 49857
// begin result := i ;
49837: LD_ADDR_VAR 0 5
49841: PUSH
49842: LD_VAR 0 6
49846: ST_TO_ADDR
// distance := tmp ;
49847: LD_ADDR_VAR 0 10
49851: PUSH
49852: LD_VAR 0 9
49856: ST_TO_ADDR
// end ; end ;
49857: GO 49715
49859: POP
49860: POP
// end ;
49861: LD_VAR 0 5
49865: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49866: LD_INT 0
49868: PPUSH
49869: PPUSH
// if not driver or not IsInUnit ( driver ) then
49870: LD_VAR 0 1
49874: NOT
49875: IFTRUE 49889
49877: PUSH
49878: LD_VAR 0 1
49882: PPUSH
49883: CALL_OW 310
49887: NOT
49888: OR
49889: IFFALSE 49893
// exit ;
49891: GO 49983
// vehicle := IsInUnit ( driver ) ;
49893: LD_ADDR_VAR 0 3
49897: PUSH
49898: LD_VAR 0 1
49902: PPUSH
49903: CALL_OW 310
49907: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49908: LD_VAR 0 1
49912: PPUSH
49913: LD_STRING \
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: PUSH
49943: LD_STRING E
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_VAR 0 3
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PPUSH
49979: CALL_OW 446
// end ;
49983: LD_VAR 0 2
49987: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49988: LD_INT 0
49990: PPUSH
49991: PPUSH
// if not driver or not IsInUnit ( driver ) then
49992: LD_VAR 0 1
49996: NOT
49997: IFTRUE 50011
49999: PUSH
50000: LD_VAR 0 1
50004: PPUSH
50005: CALL_OW 310
50009: NOT
50010: OR
50011: IFFALSE 50015
// exit ;
50013: GO 50105
// vehicle := IsInUnit ( driver ) ;
50015: LD_ADDR_VAR 0 3
50019: PUSH
50020: LD_VAR 0 1
50024: PPUSH
50025: CALL_OW 310
50029: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50030: LD_VAR 0 1
50034: PPUSH
50035: LD_STRING \
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: PUSH
50065: LD_STRING E
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_VAR 0 3
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PPUSH
50101: CALL_OW 447
// end ;
50105: LD_VAR 0 2
50109: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50110: LD_INT 0
50112: PPUSH
50113: PPUSH
50114: PPUSH
// tmp := [ ] ;
50115: LD_ADDR_VAR 0 5
50119: PUSH
50120: EMPTY
50121: ST_TO_ADDR
// for i in units do
50122: LD_ADDR_VAR 0 4
50126: PUSH
50127: LD_VAR 0 1
50131: PUSH
50132: FOR_IN
50133: IFFALSE 50171
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50135: LD_ADDR_VAR 0 5
50139: PUSH
50140: LD_VAR 0 5
50144: PPUSH
50145: LD_VAR 0 5
50149: PUSH
50150: LD_INT 1
50152: PLUS
50153: PPUSH
50154: LD_VAR 0 4
50158: PPUSH
50159: CALL_OW 256
50163: PPUSH
50164: CALL_OW 2
50168: ST_TO_ADDR
50169: GO 50132
50171: POP
50172: POP
// if not tmp then
50173: LD_VAR 0 5
50177: NOT
50178: IFFALSE 50182
// exit ;
50180: GO 50230
// if asc then
50182: LD_VAR 0 2
50186: IFFALSE 50210
// result := SortListByListAsc ( units , tmp ) else
50188: LD_ADDR_VAR 0 3
50192: PUSH
50193: LD_VAR 0 1
50197: PPUSH
50198: LD_VAR 0 5
50202: PPUSH
50203: CALL_OW 76
50207: ST_TO_ADDR
50208: GO 50230
// result := SortListByListDesc ( units , tmp ) ;
50210: LD_ADDR_VAR 0 3
50214: PUSH
50215: LD_VAR 0 1
50219: PPUSH
50220: LD_VAR 0 5
50224: PPUSH
50225: CALL_OW 77
50229: ST_TO_ADDR
// end ;
50230: LD_VAR 0 3
50234: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50235: LD_INT 0
50237: PPUSH
50238: PPUSH
// task := GetTaskList ( mech ) ;
50239: LD_ADDR_VAR 0 4
50243: PUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: CALL_OW 437
50253: ST_TO_ADDR
// if not task then
50254: LD_VAR 0 4
50258: NOT
50259: IFFALSE 50263
// exit ;
50261: GO 50307
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_VAR 0 4
50272: PUSH
50273: LD_INT 1
50275: ARRAY
50276: PUSH
50277: LD_INT 1
50279: ARRAY
50280: PUSH
50281: LD_STRING r
50283: EQUAL
50284: IFFALSE 50306
50286: PUSH
50287: LD_VAR 0 4
50291: PUSH
50292: LD_INT 1
50294: ARRAY
50295: PUSH
50296: LD_INT 4
50298: ARRAY
50299: PUSH
50300: LD_VAR 0 2
50304: EQUAL
50305: AND
50306: ST_TO_ADDR
// end ;
50307: LD_VAR 0 3
50311: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50312: LD_INT 0
50314: PPUSH
// SetDir ( unit , d ) ;
50315: LD_VAR 0 1
50319: PPUSH
50320: LD_VAR 0 4
50324: PPUSH
50325: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50329: LD_ADDR_VAR 0 6
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: LD_VAR 0 2
50343: PPUSH
50344: LD_VAR 0 3
50348: PPUSH
50349: LD_VAR 0 5
50353: PPUSH
50354: CALL_OW 48
50358: ST_TO_ADDR
// end ;
50359: LD_VAR 0 6
50363: RET
// export function ToNaturalNumber ( number ) ; begin
50364: LD_INT 0
50366: PPUSH
// result := number div 1 ;
50367: LD_ADDR_VAR 0 2
50371: PUSH
50372: LD_VAR 0 1
50376: PUSH
50377: LD_INT 1
50379: DIV
50380: ST_TO_ADDR
// if number < 0 then
50381: LD_VAR 0 1
50385: PUSH
50386: LD_INT 0
50388: LESS
50389: IFFALSE 50399
// result := 0 ;
50391: LD_ADDR_VAR 0 2
50395: PUSH
50396: LD_INT 0
50398: ST_TO_ADDR
// end ;
50399: LD_VAR 0 2
50403: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50404: LD_INT 0
50406: PPUSH
50407: PPUSH
50408: PPUSH
// if not buildings then
50409: LD_VAR 0 1
50413: NOT
50414: IFFALSE 50418
// exit ;
50416: GO 50533
// tmp := [ ] ;
50418: LD_ADDR_VAR 0 5
50422: PUSH
50423: EMPTY
50424: ST_TO_ADDR
// for b in buildings do
50425: LD_ADDR_VAR 0 4
50429: PUSH
50430: LD_VAR 0 1
50434: PUSH
50435: FOR_IN
50436: IFFALSE 50474
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50438: LD_ADDR_VAR 0 5
50442: PUSH
50443: LD_VAR 0 5
50447: PPUSH
50448: LD_VAR 0 5
50452: PUSH
50453: LD_INT 1
50455: PLUS
50456: PPUSH
50457: LD_VAR 0 4
50461: PPUSH
50462: CALL_OW 266
50466: PPUSH
50467: CALL_OW 1
50471: ST_TO_ADDR
50472: GO 50435
50474: POP
50475: POP
// if not tmp then
50476: LD_VAR 0 5
50480: NOT
50481: IFFALSE 50485
// exit ;
50483: GO 50533
// if asc then
50485: LD_VAR 0 2
50489: IFFALSE 50513
// result := SortListByListAsc ( buildings , tmp ) else
50491: LD_ADDR_VAR 0 3
50495: PUSH
50496: LD_VAR 0 1
50500: PPUSH
50501: LD_VAR 0 5
50505: PPUSH
50506: CALL_OW 76
50510: ST_TO_ADDR
50511: GO 50533
// result := SortListByListDesc ( buildings , tmp ) ;
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: LD_VAR 0 5
50527: PPUSH
50528: CALL_OW 77
50532: ST_TO_ADDR
// end ;
50533: LD_VAR 0 3
50537: RET
// export function SortByClass ( units , class ) ; var un ; begin
50538: LD_INT 0
50540: PPUSH
50541: PPUSH
// if not units or not class then
50542: LD_VAR 0 1
50546: NOT
50547: IFTRUE 50556
50549: PUSH
50550: LD_VAR 0 2
50554: NOT
50555: OR
50556: IFFALSE 50560
// exit ;
50558: GO 50655
// result := [ ] ;
50560: LD_ADDR_VAR 0 3
50564: PUSH
50565: EMPTY
50566: ST_TO_ADDR
// for un in units do
50567: LD_ADDR_VAR 0 4
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: FOR_IN
50578: IFFALSE 50653
// if GetClass ( un ) = class then
50580: LD_VAR 0 4
50584: PPUSH
50585: CALL_OW 257
50589: PUSH
50590: LD_VAR 0 2
50594: EQUAL
50595: IFFALSE 50622
// result := Insert ( result , 1 , un ) else
50597: LD_ADDR_VAR 0 3
50601: PUSH
50602: LD_VAR 0 3
50606: PPUSH
50607: LD_INT 1
50609: PPUSH
50610: LD_VAR 0 4
50614: PPUSH
50615: CALL_OW 2
50619: ST_TO_ADDR
50620: GO 50651
// result := Replace ( result , result + 1 , un ) ;
50622: LD_ADDR_VAR 0 3
50626: PUSH
50627: LD_VAR 0 3
50631: PPUSH
50632: LD_VAR 0 3
50636: PUSH
50637: LD_INT 1
50639: PLUS
50640: PPUSH
50641: LD_VAR 0 4
50645: PPUSH
50646: CALL_OW 1
50650: ST_TO_ADDR
50651: GO 50577
50653: POP
50654: POP
// end ;
50655: LD_VAR 0 3
50659: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50660: LD_INT 0
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
// result := [ ] ;
50669: LD_ADDR_VAR 0 4
50673: PUSH
50674: EMPTY
50675: ST_TO_ADDR
// if x - r < 0 then
50676: LD_VAR 0 1
50680: PUSH
50681: LD_VAR 0 3
50685: MINUS
50686: PUSH
50687: LD_INT 0
50689: LESS
50690: IFFALSE 50702
// min_x := 0 else
50692: LD_ADDR_VAR 0 8
50696: PUSH
50697: LD_INT 0
50699: ST_TO_ADDR
50700: GO 50718
// min_x := x - r ;
50702: LD_ADDR_VAR 0 8
50706: PUSH
50707: LD_VAR 0 1
50711: PUSH
50712: LD_VAR 0 3
50716: MINUS
50717: ST_TO_ADDR
// if y - r < 0 then
50718: LD_VAR 0 2
50722: PUSH
50723: LD_VAR 0 3
50727: MINUS
50728: PUSH
50729: LD_INT 0
50731: LESS
50732: IFFALSE 50744
// min_y := 0 else
50734: LD_ADDR_VAR 0 7
50738: PUSH
50739: LD_INT 0
50741: ST_TO_ADDR
50742: GO 50760
// min_y := y - r ;
50744: LD_ADDR_VAR 0 7
50748: PUSH
50749: LD_VAR 0 2
50753: PUSH
50754: LD_VAR 0 3
50758: MINUS
50759: ST_TO_ADDR
// max_x := x + r ;
50760: LD_ADDR_VAR 0 9
50764: PUSH
50765: LD_VAR 0 1
50769: PUSH
50770: LD_VAR 0 3
50774: PLUS
50775: ST_TO_ADDR
// max_y := y + r ;
50776: LD_ADDR_VAR 0 10
50780: PUSH
50781: LD_VAR 0 2
50785: PUSH
50786: LD_VAR 0 3
50790: PLUS
50791: ST_TO_ADDR
// for _x = min_x to max_x do
50792: LD_ADDR_VAR 0 5
50796: PUSH
50797: DOUBLE
50798: LD_VAR 0 8
50802: DEC
50803: ST_TO_ADDR
50804: LD_VAR 0 9
50808: PUSH
50809: FOR_TO
50810: IFFALSE 50911
// for _y = min_y to max_y do
50812: LD_ADDR_VAR 0 6
50816: PUSH
50817: DOUBLE
50818: LD_VAR 0 7
50822: DEC
50823: ST_TO_ADDR
50824: LD_VAR 0 10
50828: PUSH
50829: FOR_TO
50830: IFFALSE 50907
// begin if not ValidHex ( _x , _y ) then
50832: LD_VAR 0 5
50836: PPUSH
50837: LD_VAR 0 6
50841: PPUSH
50842: CALL_OW 488
50846: NOT
50847: IFFALSE 50851
// continue ;
50849: GO 50829
// if GetResourceTypeXY ( _x , _y ) then
50851: LD_VAR 0 5
50855: PPUSH
50856: LD_VAR 0 6
50860: PPUSH
50861: CALL_OW 283
50865: IFFALSE 50905
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50867: LD_ADDR_VAR 0 4
50871: PUSH
50872: LD_VAR 0 4
50876: PPUSH
50877: LD_VAR 0 4
50881: PUSH
50882: LD_INT 1
50884: PLUS
50885: PPUSH
50886: LD_VAR 0 5
50890: PUSH
50891: LD_VAR 0 6
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PPUSH
50900: CALL_OW 1
50904: ST_TO_ADDR
// end ;
50905: GO 50829
50907: POP
50908: POP
50909: GO 50809
50911: POP
50912: POP
// end ;
50913: LD_VAR 0 4
50917: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50918: LD_INT 0
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
50925: PPUSH
50926: PPUSH
50927: PPUSH
// if not units then
50928: LD_VAR 0 1
50932: NOT
50933: IFFALSE 50937
// exit ;
50935: GO 51469
// result := UnitFilter ( units , [ f_ok ] ) ;
50937: LD_ADDR_VAR 0 3
50941: PUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: LD_INT 50
50949: PUSH
50950: EMPTY
50951: LIST
50952: PPUSH
50953: CALL_OW 72
50957: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50958: LD_ADDR_VAR 0 8
50962: PUSH
50963: LD_VAR 0 1
50967: PUSH
50968: LD_INT 1
50970: ARRAY
50971: PPUSH
50972: CALL_OW 255
50976: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50977: LD_ADDR_VAR 0 10
50981: PUSH
50982: LD_INT 29
50984: PUSH
50985: LD_INT 91
50987: PUSH
50988: LD_INT 49
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// if not result then
50996: LD_VAR 0 3
51000: NOT
51001: IFFALSE 51005
// exit ;
51003: GO 51469
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51005: LD_ADDR_VAR 0 5
51009: PUSH
51010: LD_INT 81
51012: PUSH
51013: LD_VAR 0 8
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PPUSH
51022: CALL_OW 69
51026: ST_TO_ADDR
// for i in result do
51027: LD_ADDR_VAR 0 4
51031: PUSH
51032: LD_VAR 0 3
51036: PUSH
51037: FOR_IN
51038: IFFALSE 51467
// begin tag := GetTag ( i ) + 1 ;
51040: LD_ADDR_VAR 0 9
51044: PUSH
51045: LD_VAR 0 4
51049: PPUSH
51050: CALL_OW 110
51054: PUSH
51055: LD_INT 1
51057: PLUS
51058: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51059: LD_ADDR_VAR 0 7
51063: PUSH
51064: LD_VAR 0 4
51068: PPUSH
51069: CALL_OW 250
51073: PPUSH
51074: LD_VAR 0 4
51078: PPUSH
51079: CALL_OW 251
51083: PPUSH
51084: LD_INT 4
51086: PPUSH
51087: CALL 50660 0 3
51091: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51092: LD_VAR 0 4
51096: PPUSH
51097: CALL_OW 247
51101: PUSH
51102: LD_INT 2
51104: EQUAL
51105: IFFALSE 51117
51107: PUSH
51108: LD_VAR 0 7
51112: PUSH
51113: LD_INT 2
51115: GREATER
51116: AND
51117: IFFALSE 51137
51119: PUSH
51120: LD_VAR 0 4
51124: PPUSH
51125: CALL_OW 264
51129: PUSH
51130: LD_VAR 0 10
51134: IN
51135: NOT
51136: AND
51137: IFFALSE 51176
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51139: LD_VAR 0 4
51143: PPUSH
51144: LD_VAR 0 7
51148: PUSH
51149: LD_INT 1
51151: ARRAY
51152: PUSH
51153: LD_INT 1
51155: ARRAY
51156: PPUSH
51157: LD_VAR 0 7
51161: PUSH
51162: LD_INT 1
51164: ARRAY
51165: PUSH
51166: LD_INT 2
51168: ARRAY
51169: PPUSH
51170: CALL_OW 116
51174: GO 51465
// if path > tag then
51176: LD_VAR 0 2
51180: PUSH
51181: LD_VAR 0 9
51185: GREATER
51186: IFFALSE 51394
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51188: LD_ADDR_VAR 0 6
51192: PUSH
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_INT 91
51200: PUSH
51201: LD_VAR 0 4
51205: PUSH
51206: LD_INT 8
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: PPUSH
51214: CALL_OW 72
51218: ST_TO_ADDR
// if nearEnemy then
51219: LD_VAR 0 6
51223: IFFALSE 51292
// begin if GetWeapon ( i ) = ru_time_lapser then
51225: LD_VAR 0 4
51229: PPUSH
51230: CALL_OW 264
51234: PUSH
51235: LD_INT 49
51237: EQUAL
51238: IFFALSE 51266
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51240: LD_VAR 0 4
51244: PPUSH
51245: LD_VAR 0 6
51249: PPUSH
51250: LD_VAR 0 4
51254: PPUSH
51255: CALL_OW 74
51259: PPUSH
51260: CALL_OW 112
51264: GO 51290
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51266: LD_VAR 0 4
51270: PPUSH
51271: LD_VAR 0 6
51275: PPUSH
51276: LD_VAR 0 4
51280: PPUSH
51281: CALL_OW 74
51285: PPUSH
51286: CALL 52550 0 2
// end else
51290: GO 51392
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51292: LD_VAR 0 4
51296: PPUSH
51297: LD_VAR 0 2
51301: PUSH
51302: LD_VAR 0 9
51306: ARRAY
51307: PUSH
51308: LD_INT 1
51310: ARRAY
51311: PPUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_VAR 0 9
51321: ARRAY
51322: PUSH
51323: LD_INT 2
51325: ARRAY
51326: PPUSH
51327: CALL_OW 297
51331: PUSH
51332: LD_INT 6
51334: GREATER
51335: IFFALSE 51378
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51337: LD_VAR 0 4
51341: PPUSH
51342: LD_VAR 0 2
51346: PUSH
51347: LD_VAR 0 9
51351: ARRAY
51352: PUSH
51353: LD_INT 1
51355: ARRAY
51356: PPUSH
51357: LD_VAR 0 2
51361: PUSH
51362: LD_VAR 0 9
51366: ARRAY
51367: PUSH
51368: LD_INT 2
51370: ARRAY
51371: PPUSH
51372: CALL_OW 114
51376: GO 51392
// SetTag ( i , tag ) ;
51378: LD_VAR 0 4
51382: PPUSH
51383: LD_VAR 0 9
51387: PPUSH
51388: CALL_OW 109
// end else
51392: GO 51465
// if enemy then
51394: LD_VAR 0 5
51398: IFFALSE 51465
// begin if GetWeapon ( i ) = ru_time_lapser then
51400: LD_VAR 0 4
51404: PPUSH
51405: CALL_OW 264
51409: PUSH
51410: LD_INT 49
51412: EQUAL
51413: IFFALSE 51441
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51415: LD_VAR 0 4
51419: PPUSH
51420: LD_VAR 0 5
51424: PPUSH
51425: LD_VAR 0 4
51429: PPUSH
51430: CALL_OW 74
51434: PPUSH
51435: CALL_OW 112
51439: GO 51465
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51441: LD_VAR 0 4
51445: PPUSH
51446: LD_VAR 0 5
51450: PPUSH
51451: LD_VAR 0 4
51455: PPUSH
51456: CALL_OW 74
51460: PPUSH
51461: CALL 52550 0 2
// end ; end ;
51465: GO 51037
51467: POP
51468: POP
// end ;
51469: LD_VAR 0 3
51473: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51474: LD_INT 0
51476: PPUSH
51477: PPUSH
51478: PPUSH
// if not unit or IsInUnit ( unit ) then
51479: LD_VAR 0 1
51483: NOT
51484: IFTRUE 51497
51486: PUSH
51487: LD_VAR 0 1
51491: PPUSH
51492: CALL_OW 310
51496: OR
51497: IFFALSE 51501
// exit ;
51499: GO 51592
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51501: LD_ADDR_VAR 0 4
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: CALL_OW 250
51515: PPUSH
51516: LD_VAR 0 2
51520: PPUSH
51521: LD_INT 1
51523: PPUSH
51524: CALL_OW 272
51528: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_VAR 0 1
51538: PPUSH
51539: CALL_OW 251
51543: PPUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: LD_INT 1
51551: PPUSH
51552: CALL_OW 273
51556: ST_TO_ADDR
// if ValidHex ( x , y ) then
51557: LD_VAR 0 4
51561: PPUSH
51562: LD_VAR 0 5
51566: PPUSH
51567: CALL_OW 488
51571: IFFALSE 51592
// ComTurnXY ( unit , x , y ) ;
51573: LD_VAR 0 1
51577: PPUSH
51578: LD_VAR 0 4
51582: PPUSH
51583: LD_VAR 0 5
51587: PPUSH
51588: CALL_OW 118
// end ;
51592: LD_VAR 0 3
51596: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51597: LD_INT 0
51599: PPUSH
51600: PPUSH
// result := false ;
51601: LD_ADDR_VAR 0 3
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// if not units then
51609: LD_VAR 0 2
51613: NOT
51614: IFFALSE 51618
// exit ;
51616: GO 51663
// for i in units do
51618: LD_ADDR_VAR 0 4
51622: PUSH
51623: LD_VAR 0 2
51627: PUSH
51628: FOR_IN
51629: IFFALSE 51661
// if See ( side , i ) then
51631: LD_VAR 0 1
51635: PPUSH
51636: LD_VAR 0 4
51640: PPUSH
51641: CALL_OW 292
51645: IFFALSE 51659
// begin result := true ;
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: LD_INT 1
51654: ST_TO_ADDR
// exit ;
51655: POP
51656: POP
51657: GO 51663
// end ;
51659: GO 51628
51661: POP
51662: POP
// end ;
51663: LD_VAR 0 3
51667: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51668: LD_INT 0
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
// if not unit or not points then
51674: LD_VAR 0 1
51678: NOT
51679: IFTRUE 51688
51681: PUSH
51682: LD_VAR 0 2
51686: NOT
51687: OR
51688: IFFALSE 51692
// exit ;
51690: GO 51782
// dist := 99999 ;
51692: LD_ADDR_VAR 0 5
51696: PUSH
51697: LD_INT 99999
51699: ST_TO_ADDR
// for i in points do
51700: LD_ADDR_VAR 0 4
51704: PUSH
51705: LD_VAR 0 2
51709: PUSH
51710: FOR_IN
51711: IFFALSE 51780
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51713: LD_ADDR_VAR 0 6
51717: PUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: LD_VAR 0 4
51727: PUSH
51728: LD_INT 1
51730: ARRAY
51731: PPUSH
51732: LD_VAR 0 4
51736: PUSH
51737: LD_INT 2
51739: ARRAY
51740: PPUSH
51741: CALL_OW 297
51745: ST_TO_ADDR
// if tmpDist < dist then
51746: LD_VAR 0 6
51750: PUSH
51751: LD_VAR 0 5
51755: LESS
51756: IFFALSE 51778
// begin result := i ;
51758: LD_ADDR_VAR 0 3
51762: PUSH
51763: LD_VAR 0 4
51767: ST_TO_ADDR
// dist := tmpDist ;
51768: LD_ADDR_VAR 0 5
51772: PUSH
51773: LD_VAR 0 6
51777: ST_TO_ADDR
// end ; end ;
51778: GO 51710
51780: POP
51781: POP
// end ;
51782: LD_VAR 0 3
51786: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51787: LD_INT 0
51789: PPUSH
// uc_side := side ;
51790: LD_ADDR_OWVAR 20
51794: PUSH
51795: LD_VAR 0 1
51799: ST_TO_ADDR
// uc_nation := 3 ;
51800: LD_ADDR_OWVAR 21
51804: PUSH
51805: LD_INT 3
51807: ST_TO_ADDR
// vc_chassis := 25 ;
51808: LD_ADDR_OWVAR 37
51812: PUSH
51813: LD_INT 25
51815: ST_TO_ADDR
// vc_engine := engine_siberite ;
51816: LD_ADDR_OWVAR 39
51820: PUSH
51821: LD_INT 3
51823: ST_TO_ADDR
// vc_control := control_computer ;
51824: LD_ADDR_OWVAR 38
51828: PUSH
51829: LD_INT 3
51831: ST_TO_ADDR
// vc_weapon := 59 ;
51832: LD_ADDR_OWVAR 40
51836: PUSH
51837: LD_INT 59
51839: ST_TO_ADDR
// result := CreateVehicle ;
51840: LD_ADDR_VAR 0 5
51844: PUSH
51845: CALL_OW 45
51849: ST_TO_ADDR
// SetDir ( result , d ) ;
51850: LD_VAR 0 5
51854: PPUSH
51855: LD_VAR 0 4
51859: PPUSH
51860: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51864: LD_VAR 0 5
51868: PPUSH
51869: LD_VAR 0 2
51873: PPUSH
51874: LD_VAR 0 3
51878: PPUSH
51879: LD_INT 0
51881: PPUSH
51882: CALL_OW 48
// end ;
51886: LD_VAR 0 5
51890: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51891: LD_INT 0
51893: PPUSH
51894: PPUSH
51895: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51896: LD_ADDR_VAR 0 2
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51919: LD_VAR 0 1
51923: NOT
51924: IFTRUE 51957
51926: PUSH
51927: LD_VAR 0 1
51931: PPUSH
51932: CALL_OW 264
51936: PUSH
51937: LD_INT 12
51939: PUSH
51940: LD_INT 51
51942: PUSH
51943: LD_INT 32
51945: PUSH
51946: LD_INT 89
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: IN
51955: NOT
51956: OR
51957: IFFALSE 51961
// exit ;
51959: GO 52059
// for i := 1 to 3 do
51961: LD_ADDR_VAR 0 3
51965: PUSH
51966: DOUBLE
51967: LD_INT 1
51969: DEC
51970: ST_TO_ADDR
51971: LD_INT 3
51973: PUSH
51974: FOR_TO
51975: IFFALSE 52057
// begin tmp := GetCargo ( cargo , i ) ;
51977: LD_ADDR_VAR 0 4
51981: PUSH
51982: LD_VAR 0 1
51986: PPUSH
51987: LD_VAR 0 3
51991: PPUSH
51992: CALL_OW 289
51996: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51997: LD_ADDR_VAR 0 2
52001: PUSH
52002: LD_VAR 0 2
52006: PPUSH
52007: LD_VAR 0 3
52011: PPUSH
52012: LD_VAR 0 4
52016: PPUSH
52017: CALL_OW 1
52021: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52022: LD_ADDR_VAR 0 2
52026: PUSH
52027: LD_VAR 0 2
52031: PPUSH
52032: LD_INT 4
52034: PPUSH
52035: LD_VAR 0 2
52039: PUSH
52040: LD_INT 4
52042: ARRAY
52043: PUSH
52044: LD_VAR 0 4
52048: PLUS
52049: PPUSH
52050: CALL_OW 1
52054: ST_TO_ADDR
// end ;
52055: GO 51974
52057: POP
52058: POP
// end ;
52059: LD_VAR 0 2
52063: RET
// export function Length ( array ) ; begin
52064: LD_INT 0
52066: PPUSH
// result := array + 0 ;
52067: LD_ADDR_VAR 0 2
52071: PUSH
52072: LD_VAR 0 1
52076: PUSH
52077: LD_INT 0
52079: PLUS
52080: ST_TO_ADDR
// end ;
52081: LD_VAR 0 2
52085: RET
// export function PrepareArray ( array ) ; begin
52086: LD_INT 0
52088: PPUSH
// result := array diff 0 ;
52089: LD_ADDR_VAR 0 2
52093: PUSH
52094: LD_VAR 0 1
52098: PUSH
52099: LD_INT 0
52101: DIFF
52102: ST_TO_ADDR
// if not result [ 1 ] then
52103: LD_VAR 0 2
52107: PUSH
52108: LD_INT 1
52110: ARRAY
52111: NOT
52112: IFFALSE 52132
// result := Delete ( result , 1 ) ;
52114: LD_ADDR_VAR 0 2
52118: PUSH
52119: LD_VAR 0 2
52123: PPUSH
52124: LD_INT 1
52126: PPUSH
52127: CALL_OW 3
52131: ST_TO_ADDR
// end ;
52132: LD_VAR 0 2
52136: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52137: LD_INT 0
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
// sibRocketRange := 25 ;
52143: LD_ADDR_VAR 0 6
52147: PUSH
52148: LD_INT 25
52150: ST_TO_ADDR
// result := false ;
52151: LD_ADDR_VAR 0 4
52155: PUSH
52156: LD_INT 0
52158: ST_TO_ADDR
// for i := 0 to 5 do
52159: LD_ADDR_VAR 0 5
52163: PUSH
52164: DOUBLE
52165: LD_INT 0
52167: DEC
52168: ST_TO_ADDR
52169: LD_INT 5
52171: PUSH
52172: FOR_TO
52173: IFFALSE 52240
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52175: LD_VAR 0 1
52179: PPUSH
52180: LD_VAR 0 5
52184: PPUSH
52185: LD_VAR 0 6
52189: PPUSH
52190: CALL_OW 272
52194: PPUSH
52195: LD_VAR 0 2
52199: PPUSH
52200: LD_VAR 0 5
52204: PPUSH
52205: LD_VAR 0 6
52209: PPUSH
52210: CALL_OW 273
52214: PPUSH
52215: LD_VAR 0 3
52219: PPUSH
52220: CALL_OW 309
52224: IFFALSE 52238
// begin result := true ;
52226: LD_ADDR_VAR 0 4
52230: PUSH
52231: LD_INT 1
52233: ST_TO_ADDR
// exit ;
52234: POP
52235: POP
52236: GO 52242
// end ;
52238: GO 52172
52240: POP
52241: POP
// end ;
52242: LD_VAR 0 4
52246: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52247: LD_INT 0
52249: PPUSH
52250: PPUSH
52251: PPUSH
// if btype = b_depot then
52252: LD_VAR 0 2
52256: PUSH
52257: LD_INT 0
52259: EQUAL
52260: IFFALSE 52272
// begin result := true ;
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_INT 1
52269: ST_TO_ADDR
// exit ;
52270: GO 52392
// end ; pom := GetBase ( depot ) ;
52272: LD_ADDR_VAR 0 4
52276: PUSH
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 274
52286: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52287: LD_ADDR_VAR 0 5
52291: PUSH
52292: LD_VAR 0 2
52296: PPUSH
52297: LD_VAR 0 1
52301: PPUSH
52302: CALL_OW 248
52306: PPUSH
52307: CALL_OW 450
52311: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52312: LD_ADDR_VAR 0 3
52316: PUSH
52317: LD_VAR 0 4
52321: PPUSH
52322: LD_INT 1
52324: PPUSH
52325: CALL_OW 275
52329: PUSH
52330: LD_VAR 0 5
52334: PUSH
52335: LD_INT 1
52337: ARRAY
52338: GREATEREQUAL
52339: IFFALSE 52365
52341: PUSH
52342: LD_VAR 0 4
52346: PPUSH
52347: LD_INT 2
52349: PPUSH
52350: CALL_OW 275
52354: PUSH
52355: LD_VAR 0 5
52359: PUSH
52360: LD_INT 2
52362: ARRAY
52363: GREATEREQUAL
52364: AND
52365: IFFALSE 52391
52367: PUSH
52368: LD_VAR 0 4
52372: PPUSH
52373: LD_INT 3
52375: PPUSH
52376: CALL_OW 275
52380: PUSH
52381: LD_VAR 0 5
52385: PUSH
52386: LD_INT 3
52388: ARRAY
52389: GREATEREQUAL
52390: AND
52391: ST_TO_ADDR
// end ;
52392: LD_VAR 0 3
52396: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52397: LD_INT 0
52399: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52400: LD_VAR 0 1
52404: PPUSH
52405: LD_VAR 0 2
52409: PPUSH
52410: LD_INT 0
52412: PPUSH
52413: LD_INT 0
52415: PPUSH
52416: LD_INT 1
52418: PPUSH
52419: LD_INT 0
52421: PPUSH
52422: CALL_OW 587
// end ;
52426: LD_VAR 0 3
52430: RET
// export function CenterOnNow ( unit ) ; begin
52431: LD_INT 0
52433: PPUSH
// result := IsInUnit ( unit ) ;
52434: LD_ADDR_VAR 0 2
52438: PUSH
52439: LD_VAR 0 1
52443: PPUSH
52444: CALL_OW 310
52448: ST_TO_ADDR
// if not result then
52449: LD_VAR 0 2
52453: NOT
52454: IFFALSE 52466
// result := unit ;
52456: LD_ADDR_VAR 0 2
52460: PUSH
52461: LD_VAR 0 1
52465: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52466: LD_VAR 0 1
52470: PPUSH
52471: CALL_OW 87
// end ;
52475: LD_VAR 0 2
52479: RET
// export function ComMoveHex ( unit , hex ) ; begin
52480: LD_INT 0
52482: PPUSH
// if not hex then
52483: LD_VAR 0 2
52487: NOT
52488: IFFALSE 52492
// exit ;
52490: GO 52545
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52492: LD_VAR 0 2
52496: PUSH
52497: LD_INT 1
52499: ARRAY
52500: PPUSH
52501: LD_VAR 0 2
52505: PUSH
52506: LD_INT 2
52508: ARRAY
52509: PPUSH
52510: CALL_OW 428
52514: IFFALSE 52518
// exit ;
52516: GO 52545
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52518: LD_VAR 0 1
52522: PPUSH
52523: LD_VAR 0 2
52527: PUSH
52528: LD_INT 1
52530: ARRAY
52531: PPUSH
52532: LD_VAR 0 2
52536: PUSH
52537: LD_INT 2
52539: ARRAY
52540: PPUSH
52541: CALL_OW 111
// end ;
52545: LD_VAR 0 3
52549: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52550: LD_INT 0
52552: PPUSH
52553: PPUSH
52554: PPUSH
// if not unit or not enemy then
52555: LD_VAR 0 1
52559: NOT
52560: IFTRUE 52569
52562: PUSH
52563: LD_VAR 0 2
52567: NOT
52568: OR
52569: IFFALSE 52573
// exit ;
52571: GO 52699
// x := GetX ( enemy ) ;
52573: LD_ADDR_VAR 0 4
52577: PUSH
52578: LD_VAR 0 2
52582: PPUSH
52583: CALL_OW 250
52587: ST_TO_ADDR
// y := GetY ( enemy ) ;
52588: LD_ADDR_VAR 0 5
52592: PUSH
52593: LD_VAR 0 2
52597: PPUSH
52598: CALL_OW 251
52602: ST_TO_ADDR
// if ValidHex ( x , y ) then
52603: LD_VAR 0 4
52607: PPUSH
52608: LD_VAR 0 5
52612: PPUSH
52613: CALL_OW 488
52617: IFFALSE 52699
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52619: LD_VAR 0 2
52623: PPUSH
52624: CALL_OW 247
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: IN
52639: IFTRUE 52662
52641: PUSH
52642: LD_VAR 0 1
52646: PPUSH
52647: CALL_OW 255
52651: PPUSH
52652: LD_VAR 0 2
52656: PPUSH
52657: CALL_OW 292
52661: OR
52662: IFFALSE 52680
// ComAttackUnit ( unit , enemy ) else
52664: LD_VAR 0 1
52668: PPUSH
52669: LD_VAR 0 2
52673: PPUSH
52674: CALL_OW 115
52678: GO 52699
// ComAgressiveMove ( unit , x , y ) ;
52680: LD_VAR 0 1
52684: PPUSH
52685: LD_VAR 0 4
52689: PPUSH
52690: LD_VAR 0 5
52694: PPUSH
52695: CALL_OW 114
// end ;
52699: LD_VAR 0 3
52703: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52704: LD_INT 0
52706: PPUSH
52707: PPUSH
52708: PPUSH
// list := AreaToList ( area , 0 ) ;
52709: LD_ADDR_VAR 0 5
52713: PUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: LD_INT 0
52721: PPUSH
52722: CALL_OW 517
52726: ST_TO_ADDR
// if not list then
52727: LD_VAR 0 5
52731: NOT
52732: IFFALSE 52736
// exit ;
52734: GO 52866
// if all then
52736: LD_VAR 0 2
52740: IFFALSE 52828
// begin for i := 1 to list [ 1 ] do
52742: LD_ADDR_VAR 0 4
52746: PUSH
52747: DOUBLE
52748: LD_INT 1
52750: DEC
52751: ST_TO_ADDR
52752: LD_VAR 0 5
52756: PUSH
52757: LD_INT 1
52759: ARRAY
52760: PUSH
52761: FOR_TO
52762: IFFALSE 52824
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: LD_VAR 0 3
52773: PPUSH
52774: LD_VAR 0 3
52778: PUSH
52779: LD_INT 1
52781: PLUS
52782: PPUSH
52783: LD_VAR 0 5
52787: PUSH
52788: LD_INT 1
52790: ARRAY
52791: PUSH
52792: LD_VAR 0 4
52796: ARRAY
52797: PUSH
52798: LD_VAR 0 5
52802: PUSH
52803: LD_INT 2
52805: ARRAY
52806: PUSH
52807: LD_VAR 0 4
52811: ARRAY
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PPUSH
52817: CALL_OW 1
52821: ST_TO_ADDR
52822: GO 52761
52824: POP
52825: POP
// exit ;
52826: GO 52866
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52828: LD_ADDR_VAR 0 3
52832: PUSH
52833: LD_VAR 0 5
52837: PUSH
52838: LD_INT 1
52840: ARRAY
52841: PUSH
52842: LD_INT 1
52844: ARRAY
52845: PUSH
52846: LD_VAR 0 5
52850: PUSH
52851: LD_INT 2
52853: ARRAY
52854: PUSH
52855: LD_INT 1
52857: ARRAY
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: ST_TO_ADDR
// end ;
52866: LD_VAR 0 3
52870: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52871: LD_INT 0
52873: PPUSH
52874: PPUSH
// list := AreaToList ( area , 0 ) ;
52875: LD_ADDR_VAR 0 4
52879: PUSH
52880: LD_VAR 0 1
52884: PPUSH
52885: LD_INT 0
52887: PPUSH
52888: CALL_OW 517
52892: ST_TO_ADDR
// if not list then
52893: LD_VAR 0 4
52897: NOT
52898: IFFALSE 52902
// exit ;
52900: GO 52943
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52902: LD_ADDR_VAR 0 3
52906: PUSH
52907: LD_VAR 0 4
52911: PUSH
52912: LD_INT 1
52914: ARRAY
52915: PUSH
52916: LD_INT 1
52918: ARRAY
52919: PUSH
52920: LD_VAR 0 4
52924: PUSH
52925: LD_INT 2
52927: ARRAY
52928: PUSH
52929: LD_INT 1
52931: ARRAY
52932: PUSH
52933: LD_VAR 0 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// end ;
52943: LD_VAR 0 3
52947: RET
// export function First ( array ) ; begin
52948: LD_INT 0
52950: PPUSH
// if not array then
52951: LD_VAR 0 1
52955: NOT
52956: IFFALSE 52960
// exit ;
52958: GO 52974
// result := array [ 1 ] ;
52960: LD_ADDR_VAR 0 2
52964: PUSH
52965: LD_VAR 0 1
52969: PUSH
52970: LD_INT 1
52972: ARRAY
52973: ST_TO_ADDR
// end ;
52974: LD_VAR 0 2
52978: RET
// export function Last ( array ) ; begin
52979: LD_INT 0
52981: PPUSH
// if not array then
52982: LD_VAR 0 1
52986: NOT
52987: IFFALSE 52991
// exit ;
52989: GO 53007
// result := array [ array ] ;
52991: LD_ADDR_VAR 0 2
52995: PUSH
52996: LD_VAR 0 1
53000: PUSH
53001: LD_VAR 0 1
53005: ARRAY
53006: ST_TO_ADDR
// end ;
53007: LD_VAR 0 2
53011: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53012: LD_INT 0
53014: PPUSH
53015: PPUSH
// result := [ ] ;
53016: LD_ADDR_VAR 0 5
53020: PUSH
53021: EMPTY
53022: ST_TO_ADDR
// if not array then
53023: LD_VAR 0 1
53027: NOT
53028: IFFALSE 53032
// exit ;
53030: GO 53144
// for i := 1 to array do
53032: LD_ADDR_VAR 0 6
53036: PUSH
53037: DOUBLE
53038: LD_INT 1
53040: DEC
53041: ST_TO_ADDR
53042: LD_VAR 0 1
53046: PUSH
53047: FOR_TO
53048: IFFALSE 53142
// if array [ i ] [ index ] = value then
53050: LD_VAR 0 1
53054: PUSH
53055: LD_VAR 0 6
53059: ARRAY
53060: PUSH
53061: LD_VAR 0 2
53065: ARRAY
53066: PUSH
53067: LD_VAR 0 3
53071: EQUAL
53072: IFFALSE 53140
// begin if indexColumn then
53074: LD_VAR 0 4
53078: IFFALSE 53114
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53080: LD_ADDR_VAR 0 5
53084: PUSH
53085: LD_VAR 0 5
53089: PPUSH
53090: LD_VAR 0 1
53094: PUSH
53095: LD_VAR 0 6
53099: ARRAY
53100: PUSH
53101: LD_VAR 0 4
53105: ARRAY
53106: PPUSH
53107: CALL 48152 0 2
53111: ST_TO_ADDR
53112: GO 53140
// result := Join ( result , array [ i ] ) ;
53114: LD_ADDR_VAR 0 5
53118: PUSH
53119: LD_VAR 0 5
53123: PPUSH
53124: LD_VAR 0 1
53128: PUSH
53129: LD_VAR 0 6
53133: ARRAY
53134: PPUSH
53135: CALL 48152 0 2
53139: ST_TO_ADDR
// end ;
53140: GO 53047
53142: POP
53143: POP
// end ;
53144: LD_VAR 0 5
53148: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53149: LD_INT 0
53151: PPUSH
// if not vehicles or not parkingPoint then
53152: LD_VAR 0 1
53156: NOT
53157: IFTRUE 53166
53159: PUSH
53160: LD_VAR 0 2
53164: NOT
53165: OR
53166: IFFALSE 53170
// exit ;
53168: GO 53268
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53170: LD_ADDR_VAR 0 1
53174: PUSH
53175: LD_VAR 0 1
53179: PPUSH
53180: LD_INT 50
53182: PUSH
53183: EMPTY
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: LD_INT 92
53191: PUSH
53192: LD_VAR 0 2
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 2
53208: ARRAY
53209: PUSH
53210: LD_INT 8
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PPUSH
53227: CALL_OW 72
53231: ST_TO_ADDR
// if not vehicles then
53232: LD_VAR 0 1
53236: NOT
53237: IFFALSE 53241
// exit ;
53239: GO 53268
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53241: LD_VAR 0 1
53245: PPUSH
53246: LD_VAR 0 2
53250: PUSH
53251: LD_INT 1
53253: ARRAY
53254: PPUSH
53255: LD_VAR 0 2
53259: PUSH
53260: LD_INT 2
53262: ARRAY
53263: PPUSH
53264: CALL_OW 111
// end ;
53268: LD_VAR 0 3
53272: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53273: LD_INT 0
53275: PPUSH
53276: PPUSH
53277: PPUSH
// if not side or not area then
53278: LD_VAR 0 1
53282: NOT
53283: IFTRUE 53292
53285: PUSH
53286: LD_VAR 0 2
53290: NOT
53291: OR
53292: IFFALSE 53296
// exit ;
53294: GO 53415
// tmp := AreaToList ( area , 0 ) ;
53296: LD_ADDR_VAR 0 5
53300: PUSH
53301: LD_VAR 0 2
53305: PPUSH
53306: LD_INT 0
53308: PPUSH
53309: CALL_OW 517
53313: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53314: LD_ADDR_VAR 0 4
53318: PUSH
53319: DOUBLE
53320: LD_INT 1
53322: DEC
53323: ST_TO_ADDR
53324: LD_VAR 0 5
53328: PUSH
53329: LD_INT 1
53331: ARRAY
53332: PUSH
53333: FOR_TO
53334: IFFALSE 53413
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53336: LD_VAR 0 5
53340: PUSH
53341: LD_INT 1
53343: ARRAY
53344: PUSH
53345: LD_VAR 0 4
53349: ARRAY
53350: PPUSH
53351: LD_VAR 0 5
53355: PUSH
53356: LD_INT 2
53358: ARRAY
53359: PUSH
53360: LD_VAR 0 4
53364: ARRAY
53365: PPUSH
53366: CALL_OW 351
53370: IFFALSE 53411
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53372: LD_VAR 0 5
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PUSH
53381: LD_VAR 0 4
53385: ARRAY
53386: PPUSH
53387: LD_VAR 0 5
53391: PUSH
53392: LD_INT 2
53394: ARRAY
53395: PUSH
53396: LD_VAR 0 4
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 1
53406: PPUSH
53407: CALL_OW 244
// end ;
53411: GO 53333
53413: POP
53414: POP
// end ;
53415: LD_VAR 0 3
53419: RET
// export function UniqueArray ( array ) ; var i ; begin
53420: LD_INT 0
53422: PPUSH
53423: PPUSH
// result := [ ] ;
53424: LD_ADDR_VAR 0 2
53428: PUSH
53429: EMPTY
53430: ST_TO_ADDR
// if not array then
53431: LD_VAR 0 1
53435: NOT
53436: IFFALSE 53440
// exit ;
53438: GO 53501
// for i := 1 to array do
53440: LD_ADDR_VAR 0 3
53444: PUSH
53445: DOUBLE
53446: LD_INT 1
53448: DEC
53449: ST_TO_ADDR
53450: LD_VAR 0 1
53454: PUSH
53455: FOR_TO
53456: IFFALSE 53499
// if not array [ i ] in result then
53458: LD_VAR 0 1
53462: PUSH
53463: LD_VAR 0 3
53467: ARRAY
53468: PUSH
53469: LD_VAR 0 2
53473: IN
53474: NOT
53475: IFFALSE 53497
// result := Join ( result , i ) ;
53477: LD_ADDR_VAR 0 2
53481: PUSH
53482: LD_VAR 0 2
53486: PPUSH
53487: LD_VAR 0 3
53491: PPUSH
53492: CALL 48152 0 2
53496: ST_TO_ADDR
53497: GO 53455
53499: POP
53500: POP
// end ; end_of_file
53501: LD_VAR 0 2
53505: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53506: LD_VAR 0 1
53510: PUSH
53511: LD_INT 200
53513: DOUBLE
53514: GREATEREQUAL
53515: IFFALSE 53523
53517: LD_INT 299
53519: DOUBLE
53520: LESSEQUAL
53521: IFTRUE 53525
53523: GO 53557
53525: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53526: LD_VAR 0 1
53530: PPUSH
53531: LD_VAR 0 2
53535: PPUSH
53536: LD_VAR 0 3
53540: PPUSH
53541: LD_VAR 0 4
53545: PPUSH
53546: LD_VAR 0 5
53550: PPUSH
53551: CALL 54338 0 5
53555: GO 53634
53557: LD_INT 300
53559: DOUBLE
53560: GREATEREQUAL
53561: IFFALSE 53569
53563: LD_INT 399
53565: DOUBLE
53566: LESSEQUAL
53567: IFTRUE 53571
53569: GO 53633
53571: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53572: LD_VAR 0 1
53576: PPUSH
53577: LD_VAR 0 2
53581: PPUSH
53582: LD_VAR 0 3
53586: PPUSH
53587: LD_VAR 0 4
53591: PPUSH
53592: LD_VAR 0 5
53596: PPUSH
53597: LD_VAR 0 6
53601: PPUSH
53602: LD_VAR 0 7
53606: PPUSH
53607: LD_VAR 0 8
53611: PPUSH
53612: LD_VAR 0 9
53616: PPUSH
53617: LD_VAR 0 10
53621: PPUSH
53622: LD_VAR 0 11
53626: PPUSH
53627: CALL 61347 0 11
53631: GO 53634
53633: POP
// end ;
53634: PPOPN 11
53636: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53637: LD_VAR 0 1
53641: PPUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: LD_VAR 0 3
53651: PPUSH
53652: LD_VAR 0 4
53656: PPUSH
53657: LD_VAR 0 5
53661: PPUSH
53662: CALL 53719 0 5
// end ; end_of_file
53666: PPOPN 5
53668: END
// export function SOS_UnitDestroyed ( un ) ; begin
53669: LD_INT 0
53671: PPUSH
// ComRadiation ( un ) ;
53672: LD_VAR 0 1
53676: PPUSH
53677: CALL 54758 0 1
// end ;
53681: LD_VAR 0 2
53685: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53686: LD_INT 0
53688: PPUSH
// ComRadiation ( un ) ;
53689: LD_VAR 0 1
53693: PPUSH
53694: CALL 54758 0 1
// end ;
53698: LD_VAR 0 2
53702: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53703: LD_INT 0
53705: PPUSH
// end ;
53706: LD_VAR 0 4
53710: RET
// export function SOS_Command ( cmd ) ; begin
53711: LD_INT 0
53713: PPUSH
// end ;
53714: LD_VAR 0 2
53718: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53719: LD_INT 0
53721: PPUSH
// end ;
53722: LD_VAR 0 6
53726: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53727: LD_INT 0
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
// if not vehicle or not factory then
53733: LD_VAR 0 1
53737: NOT
53738: IFTRUE 53747
53740: PUSH
53741: LD_VAR 0 2
53745: NOT
53746: OR
53747: IFFALSE 53751
// exit ;
53749: GO 54333
// if not factoryWaypoints then
53751: LD_EXP 59
53755: NOT
53756: IFFALSE 53760
// exit ;
53758: GO 54333
// for i := 1 to Count ( factoryWaypoints ) do
53760: LD_ADDR_VAR 0 4
53764: PUSH
53765: DOUBLE
53766: LD_INT 1
53768: DEC
53769: ST_TO_ADDR
53770: LD_EXP 59
53774: PPUSH
53775: CALL 12220 0 1
53779: PUSH
53780: FOR_TO
53781: IFFALSE 54331
// if factoryWaypoints [ i ] [ 2 ] = factory then
53783: LD_EXP 59
53787: PUSH
53788: LD_VAR 0 4
53792: ARRAY
53793: PUSH
53794: LD_INT 2
53796: ARRAY
53797: PUSH
53798: LD_VAR 0 2
53802: EQUAL
53803: IFFALSE 54329
// begin if GetControl ( vehicle ) = control_manual then
53805: LD_VAR 0 1
53809: PPUSH
53810: CALL_OW 263
53814: PUSH
53815: LD_INT 1
53817: EQUAL
53818: IFFALSE 54182
// begin driver := IsDrivenBy ( vehicle ) ;
53820: LD_ADDR_VAR 0 5
53824: PUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 311
53834: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53835: LD_VAR 0 5
53839: PUSH
53840: LD_EXP 60
53844: IN
53845: IFTRUE 53859
53847: PUSH
53848: LD_VAR 0 1
53852: PUSH
53853: LD_EXP 60
53857: IN
53858: OR
53859: IFFALSE 53865
// exit ;
53861: POP
53862: POP
53863: GO 54333
// if not HasTask ( driver ) then
53865: LD_VAR 0 5
53869: PPUSH
53870: CALL_OW 314
53874: NOT
53875: IFFALSE 54180
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53877: LD_ADDR_EXP 60
53881: PUSH
53882: LD_EXP 60
53886: PPUSH
53887: LD_VAR 0 5
53891: PPUSH
53892: CALL 48152 0 2
53896: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53897: LD_ADDR_EXP 60
53901: PUSH
53902: LD_EXP 60
53906: PPUSH
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL 48152 0 2
53916: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53917: LD_ADDR_VAR 0 6
53921: PUSH
53922: LD_EXP 59
53926: PUSH
53927: LD_VAR 0 4
53931: ARRAY
53932: PUSH
53933: LD_INT 3
53935: ARRAY
53936: PPUSH
53937: LD_EXP 59
53941: PUSH
53942: LD_VAR 0 4
53946: ARRAY
53947: PUSH
53948: LD_INT 4
53950: ARRAY
53951: PPUSH
53952: CALL_OW 428
53956: ST_TO_ADDR
// if hex then
53957: LD_VAR 0 6
53961: IFFALSE 53979
// ComMoveUnit ( driver , hex ) else
53963: LD_VAR 0 5
53967: PPUSH
53968: LD_VAR 0 6
53972: PPUSH
53973: CALL_OW 112
53977: GO 54063
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53979: LD_VAR 0 1
53983: PPUSH
53984: LD_EXP 59
53988: PUSH
53989: LD_VAR 0 4
53993: ARRAY
53994: PUSH
53995: LD_INT 3
53997: ARRAY
53998: PPUSH
53999: LD_EXP 59
54003: PUSH
54004: LD_VAR 0 4
54008: ARRAY
54009: PUSH
54010: LD_INT 4
54012: ARRAY
54013: PPUSH
54014: CALL_OW 297
54018: PUSH
54019: LD_INT 0
54021: GREATER
54022: IFFALSE 54063
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54024: LD_VAR 0 5
54028: PPUSH
54029: LD_EXP 59
54033: PUSH
54034: LD_VAR 0 4
54038: ARRAY
54039: PUSH
54040: LD_INT 3
54042: ARRAY
54043: PPUSH
54044: LD_EXP 59
54048: PUSH
54049: LD_VAR 0 4
54053: ARRAY
54054: PUSH
54055: LD_INT 4
54057: ARRAY
54058: PPUSH
54059: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54063: LD_VAR 0 5
54067: PPUSH
54068: CALL_OW 181
// if Multiplayer then
54072: LD_OWVAR 4
54076: IFFALSE 54125
// begin repeat wait ( 10 ) ;
54078: LD_INT 10
54080: PPUSH
54081: CALL_OW 67
// until not IsInUnit ( driver ) ;
54085: LD_VAR 0 5
54089: PPUSH
54090: CALL_OW 310
54094: NOT
54095: IFFALSE 54078
// if not HasTask ( driver ) then
54097: LD_VAR 0 5
54101: PPUSH
54102: CALL_OW 314
54106: NOT
54107: IFFALSE 54123
// ComEnterUnit ( driver , factory ) ;
54109: LD_VAR 0 5
54113: PPUSH
54114: LD_VAR 0 2
54118: PPUSH
54119: CALL_OW 120
// end else
54123: GO 54139
// AddComEnterUnit ( driver , factory ) ;
54125: LD_VAR 0 5
54129: PPUSH
54130: LD_VAR 0 2
54134: PPUSH
54135: CALL_OW 180
// wait ( 0 0$1 ) ;
54139: LD_INT 35
54141: PPUSH
54142: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54146: LD_ADDR_EXP 60
54150: PUSH
54151: LD_EXP 60
54155: PUSH
54156: LD_VAR 0 5
54160: DIFF
54161: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54162: LD_ADDR_EXP 60
54166: PUSH
54167: LD_EXP 60
54171: PUSH
54172: LD_VAR 0 1
54176: DIFF
54177: ST_TO_ADDR
// break ;
54178: GO 54331
// end ; end else
54180: GO 54329
// if GetControl ( vehicle ) = control_remote then
54182: LD_VAR 0 1
54186: PPUSH
54187: CALL_OW 263
54191: PUSH
54192: LD_INT 2
54194: EQUAL
54195: IFFALSE 54281
// begin wait ( 0 0$2 ) ;
54197: LD_INT 70
54199: PPUSH
54200: CALL_OW 67
// repeat wait ( 10 ) ;
54204: LD_INT 10
54206: PPUSH
54207: CALL_OW 67
// Connect ( vehicle ) ;
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL 18464 0 1
// until IsControledBy ( vehicle ) ;
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 312
54229: IFFALSE 54204
// wait ( 10 ) ;
54231: LD_INT 10
54233: PPUSH
54234: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54238: LD_VAR 0 1
54242: PPUSH
54243: LD_EXP 59
54247: PUSH
54248: LD_VAR 0 4
54252: ARRAY
54253: PUSH
54254: LD_INT 3
54256: ARRAY
54257: PPUSH
54258: LD_EXP 59
54262: PUSH
54263: LD_VAR 0 4
54267: ARRAY
54268: PUSH
54269: LD_INT 4
54271: ARRAY
54272: PPUSH
54273: CALL_OW 111
// break ;
54277: GO 54331
// end else
54279: GO 54329
// begin wait ( 0 0$3 ) ;
54281: LD_INT 105
54283: PPUSH
54284: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54288: LD_VAR 0 1
54292: PPUSH
54293: LD_EXP 59
54297: PUSH
54298: LD_VAR 0 4
54302: ARRAY
54303: PUSH
54304: LD_INT 3
54306: ARRAY
54307: PPUSH
54308: LD_EXP 59
54312: PUSH
54313: LD_VAR 0 4
54317: ARRAY
54318: PUSH
54319: LD_INT 4
54321: ARRAY
54322: PPUSH
54323: CALL_OW 111
// break ;
54327: GO 54331
// end ; end ;
54329: GO 53780
54331: POP
54332: POP
// end ;
54333: LD_VAR 0 3
54337: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54338: LD_INT 0
54340: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 250
54348: EQUAL
54349: IFFALSE 54366
54351: PUSH
54352: LD_VAR 0 2
54356: PPUSH
54357: CALL_OW 264
54361: PUSH
54362: LD_INT 81
54364: EQUAL
54365: AND
54366: IFFALSE 54387
// MinerPlaceMine ( unit , x , y ) ;
54368: LD_VAR 0 2
54372: PPUSH
54373: LD_VAR 0 4
54377: PPUSH
54378: LD_VAR 0 5
54382: PPUSH
54383: CALL 57519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54387: LD_VAR 0 1
54391: PUSH
54392: LD_INT 251
54394: EQUAL
54395: IFFALSE 54412
54397: PUSH
54398: LD_VAR 0 2
54402: PPUSH
54403: CALL_OW 264
54407: PUSH
54408: LD_INT 81
54410: EQUAL
54411: AND
54412: IFFALSE 54433
// MinerDetonateMine ( unit , x , y ) ;
54414: LD_VAR 0 2
54418: PPUSH
54419: LD_VAR 0 4
54423: PPUSH
54424: LD_VAR 0 5
54428: PPUSH
54429: CALL 57798 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54433: LD_VAR 0 1
54437: PUSH
54438: LD_INT 252
54440: EQUAL
54441: IFFALSE 54458
54443: PUSH
54444: LD_VAR 0 2
54448: PPUSH
54449: CALL_OW 264
54453: PUSH
54454: LD_INT 81
54456: EQUAL
54457: AND
54458: IFFALSE 54479
// MinerCreateMinefield ( unit , x , y ) ;
54460: LD_VAR 0 2
54464: PPUSH
54465: LD_VAR 0 4
54469: PPUSH
54470: LD_VAR 0 5
54474: PPUSH
54475: CALL 58217 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 253
54486: EQUAL
54487: IFFALSE 54504
54489: PUSH
54490: LD_VAR 0 2
54494: PPUSH
54495: CALL_OW 257
54499: PUSH
54500: LD_INT 5
54502: EQUAL
54503: AND
54504: IFFALSE 54525
// ComBinocular ( unit , x , y ) ;
54506: LD_VAR 0 2
54510: PPUSH
54511: LD_VAR 0 4
54515: PPUSH
54516: LD_VAR 0 5
54520: PPUSH
54521: CALL 58592 0 3
// if selectedUnit then
54525: LD_VAR 0 3
54529: IFFALSE 54589
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54531: LD_VAR 0 1
54535: PUSH
54536: LD_INT 254
54538: EQUAL
54539: IFFALSE 54556
54541: PUSH
54542: LD_VAR 0 2
54546: PPUSH
54547: CALL_OW 264
54551: PUSH
54552: LD_INT 99
54554: EQUAL
54555: AND
54556: IFFALSE 54573
54558: PUSH
54559: LD_VAR 0 3
54563: PPUSH
54564: CALL_OW 263
54568: PUSH
54569: LD_INT 3
54571: EQUAL
54572: AND
54573: IFFALSE 54589
// HackDestroyVehicle ( unit , selectedUnit ) ;
54575: LD_VAR 0 2
54579: PPUSH
54580: LD_VAR 0 3
54584: PPUSH
54585: CALL 56879 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54589: LD_VAR 0 1
54593: PUSH
54594: LD_INT 255
54596: EQUAL
54597: IFFALSE 54621
54599: PUSH
54600: LD_VAR 0 2
54604: PPUSH
54605: CALL_OW 264
54609: PUSH
54610: LD_INT 14
54612: PUSH
54613: LD_INT 53
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: IN
54620: AND
54621: IFFALSE 54639
54623: PUSH
54624: LD_VAR 0 4
54628: PPUSH
54629: LD_VAR 0 5
54633: PPUSH
54634: CALL_OW 488
54638: AND
54639: IFFALSE 54663
// CutTreeXYR ( unit , x , y , 12 ) ;
54641: LD_VAR 0 2
54645: PPUSH
54646: LD_VAR 0 4
54650: PPUSH
54651: LD_VAR 0 5
54655: PPUSH
54656: LD_INT 12
54658: PPUSH
54659: CALL 54854 0 4
// if cmd = 256 then
54663: LD_VAR 0 1
54667: PUSH
54668: LD_INT 256
54670: EQUAL
54671: IFFALSE 54692
// SetFactoryWaypoint ( unit , x , y ) ;
54673: LD_VAR 0 2
54677: PPUSH
54678: LD_VAR 0 4
54682: PPUSH
54683: LD_VAR 0 5
54687: PPUSH
54688: CALL 61355 0 3
// if cmd = 257 then
54692: LD_VAR 0 1
54696: PUSH
54697: LD_INT 257
54699: EQUAL
54700: IFFALSE 54721
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54702: LD_VAR 0 2
54706: PPUSH
54707: LD_VAR 0 4
54711: PPUSH
54712: LD_VAR 0 5
54716: PPUSH
54717: CALL 61851 0 3
// if cmd = 258 then
54721: LD_VAR 0 1
54725: PUSH
54726: LD_INT 258
54728: EQUAL
54729: IFFALSE 54753
// BurnTreeXYR ( unit , x , y , 8 ) ;
54731: LD_VAR 0 2
54735: PPUSH
54736: LD_VAR 0 4
54740: PPUSH
54741: LD_VAR 0 5
54745: PPUSH
54746: LD_INT 8
54748: PPUSH
54749: CALL 55254 0 4
// end ;
54753: LD_VAR 0 6
54757: RET
// export function ComRadiation ( un ) ; var eff ; begin
54758: LD_INT 0
54760: PPUSH
54761: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54762: LD_VAR 0 1
54766: PPUSH
54767: CALL_OW 264
54771: PUSH
54772: LD_INT 91
54774: NONEQUAL
54775: IFFALSE 54779
// exit ;
54777: GO 54849
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54779: LD_INT 68
54781: PPUSH
54782: LD_VAR 0 1
54786: PPUSH
54787: CALL_OW 255
54791: PPUSH
54792: CALL_OW 321
54796: PUSH
54797: LD_INT 2
54799: EQUAL
54800: IFFALSE 54812
// eff := 50 else
54802: LD_ADDR_VAR 0 3
54806: PUSH
54807: LD_INT 50
54809: ST_TO_ADDR
54810: GO 54820
// eff := 25 ;
54812: LD_ADDR_VAR 0 3
54816: PUSH
54817: LD_INT 25
54819: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 250
54829: PPUSH
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 251
54839: PPUSH
54840: LD_VAR 0 3
54844: PPUSH
54845: CALL_OW 495
// end ;
54849: LD_VAR 0 2
54853: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
54862: PPUSH
54863: PPUSH
54864: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 302
54874: NOT
54875: IFTRUE 54894
54877: PUSH
54878: LD_VAR 0 2
54882: PPUSH
54883: LD_VAR 0 3
54887: PPUSH
54888: CALL_OW 488
54892: NOT
54893: OR
54894: IFTRUE 54903
54896: PUSH
54897: LD_VAR 0 4
54901: NOT
54902: OR
54903: IFFALSE 54907
// exit ;
54905: GO 55249
// list := [ ] ;
54907: LD_ADDR_VAR 0 13
54911: PUSH
54912: EMPTY
54913: ST_TO_ADDR
// if x - r < 0 then
54914: LD_VAR 0 2
54918: PUSH
54919: LD_VAR 0 4
54923: MINUS
54924: PUSH
54925: LD_INT 0
54927: LESS
54928: IFFALSE 54940
// min_x := 0 else
54930: LD_ADDR_VAR 0 7
54934: PUSH
54935: LD_INT 0
54937: ST_TO_ADDR
54938: GO 54956
// min_x := x - r ;
54940: LD_ADDR_VAR 0 7
54944: PUSH
54945: LD_VAR 0 2
54949: PUSH
54950: LD_VAR 0 4
54954: MINUS
54955: ST_TO_ADDR
// if y - r < 0 then
54956: LD_VAR 0 3
54960: PUSH
54961: LD_VAR 0 4
54965: MINUS
54966: PUSH
54967: LD_INT 0
54969: LESS
54970: IFFALSE 54982
// min_y := 0 else
54972: LD_ADDR_VAR 0 8
54976: PUSH
54977: LD_INT 0
54979: ST_TO_ADDR
54980: GO 54998
// min_y := y - r ;
54982: LD_ADDR_VAR 0 8
54986: PUSH
54987: LD_VAR 0 3
54991: PUSH
54992: LD_VAR 0 4
54996: MINUS
54997: ST_TO_ADDR
// max_x := x + r ;
54998: LD_ADDR_VAR 0 9
55002: PUSH
55003: LD_VAR 0 2
55007: PUSH
55008: LD_VAR 0 4
55012: PLUS
55013: ST_TO_ADDR
// max_y := y + r ;
55014: LD_ADDR_VAR 0 10
55018: PUSH
55019: LD_VAR 0 3
55023: PUSH
55024: LD_VAR 0 4
55028: PLUS
55029: ST_TO_ADDR
// for _x = min_x to max_x do
55030: LD_ADDR_VAR 0 11
55034: PUSH
55035: DOUBLE
55036: LD_VAR 0 7
55040: DEC
55041: ST_TO_ADDR
55042: LD_VAR 0 9
55046: PUSH
55047: FOR_TO
55048: IFFALSE 55167
// for _y = min_y to max_y do
55050: LD_ADDR_VAR 0 12
55054: PUSH
55055: DOUBLE
55056: LD_VAR 0 8
55060: DEC
55061: ST_TO_ADDR
55062: LD_VAR 0 10
55066: PUSH
55067: FOR_TO
55068: IFFALSE 55163
// begin if not ValidHex ( _x , _y ) then
55070: LD_VAR 0 11
55074: PPUSH
55075: LD_VAR 0 12
55079: PPUSH
55080: CALL_OW 488
55084: NOT
55085: IFFALSE 55089
// continue ;
55087: GO 55067
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55089: LD_VAR 0 11
55093: PPUSH
55094: LD_VAR 0 12
55098: PPUSH
55099: CALL_OW 351
55103: IFFALSE 55121
55105: PUSH
55106: LD_VAR 0 11
55110: PPUSH
55111: LD_VAR 0 12
55115: PPUSH
55116: CALL_OW 554
55120: AND
55121: IFFALSE 55161
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55123: LD_ADDR_VAR 0 13
55127: PUSH
55128: LD_VAR 0 13
55132: PPUSH
55133: LD_VAR 0 13
55137: PUSH
55138: LD_INT 1
55140: PLUS
55141: PPUSH
55142: LD_VAR 0 11
55146: PUSH
55147: LD_VAR 0 12
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PPUSH
55156: CALL_OW 2
55160: ST_TO_ADDR
// end ;
55161: GO 55067
55163: POP
55164: POP
55165: GO 55047
55167: POP
55168: POP
// if not list then
55169: LD_VAR 0 13
55173: NOT
55174: IFFALSE 55178
// exit ;
55176: GO 55249
// for i in list do
55178: LD_ADDR_VAR 0 6
55182: PUSH
55183: LD_VAR 0 13
55187: PUSH
55188: FOR_IN
55189: IFFALSE 55247
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55191: LD_VAR 0 1
55195: PPUSH
55196: LD_STRING M
55198: PUSH
55199: LD_VAR 0 6
55203: PUSH
55204: LD_INT 1
55206: ARRAY
55207: PUSH
55208: LD_VAR 0 6
55212: PUSH
55213: LD_INT 2
55215: ARRAY
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: PPUSH
55241: CALL_OW 447
55245: GO 55188
55247: POP
55248: POP
// end ;
55249: LD_VAR 0 5
55253: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55254: LD_INT 0
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 302
55275: NOT
55276: IFTRUE 55295
55278: PUSH
55279: LD_VAR 0 2
55283: PPUSH
55284: LD_VAR 0 3
55288: PPUSH
55289: CALL_OW 488
55293: NOT
55294: OR
55295: IFTRUE 55304
55297: PUSH
55298: LD_VAR 0 4
55302: NOT
55303: OR
55304: IFFALSE 55308
// exit ;
55306: GO 55825
// list := [ ] ;
55308: LD_ADDR_VAR 0 13
55312: PUSH
55313: EMPTY
55314: ST_TO_ADDR
// if x - r < 0 then
55315: LD_VAR 0 2
55319: PUSH
55320: LD_VAR 0 4
55324: MINUS
55325: PUSH
55326: LD_INT 0
55328: LESS
55329: IFFALSE 55341
// min_x := 0 else
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_INT 0
55338: ST_TO_ADDR
55339: GO 55357
// min_x := x - r ;
55341: LD_ADDR_VAR 0 7
55345: PUSH
55346: LD_VAR 0 2
55350: PUSH
55351: LD_VAR 0 4
55355: MINUS
55356: ST_TO_ADDR
// if y - r < 0 then
55357: LD_VAR 0 3
55361: PUSH
55362: LD_VAR 0 4
55366: MINUS
55367: PUSH
55368: LD_INT 0
55370: LESS
55371: IFFALSE 55383
// min_y := 0 else
55373: LD_ADDR_VAR 0 8
55377: PUSH
55378: LD_INT 0
55380: ST_TO_ADDR
55381: GO 55399
// min_y := y - r ;
55383: LD_ADDR_VAR 0 8
55387: PUSH
55388: LD_VAR 0 3
55392: PUSH
55393: LD_VAR 0 4
55397: MINUS
55398: ST_TO_ADDR
// max_x := x + r ;
55399: LD_ADDR_VAR 0 9
55403: PUSH
55404: LD_VAR 0 2
55408: PUSH
55409: LD_VAR 0 4
55413: PLUS
55414: ST_TO_ADDR
// max_y := y + r ;
55415: LD_ADDR_VAR 0 10
55419: PUSH
55420: LD_VAR 0 3
55424: PUSH
55425: LD_VAR 0 4
55429: PLUS
55430: ST_TO_ADDR
// for _x = min_x to max_x do
55431: LD_ADDR_VAR 0 11
55435: PUSH
55436: DOUBLE
55437: LD_VAR 0 7
55441: DEC
55442: ST_TO_ADDR
55443: LD_VAR 0 9
55447: PUSH
55448: FOR_TO
55449: IFFALSE 55568
// for _y = min_y to max_y do
55451: LD_ADDR_VAR 0 12
55455: PUSH
55456: DOUBLE
55457: LD_VAR 0 8
55461: DEC
55462: ST_TO_ADDR
55463: LD_VAR 0 10
55467: PUSH
55468: FOR_TO
55469: IFFALSE 55564
// begin if not ValidHex ( _x , _y ) then
55471: LD_VAR 0 11
55475: PPUSH
55476: LD_VAR 0 12
55480: PPUSH
55481: CALL_OW 488
55485: NOT
55486: IFFALSE 55490
// continue ;
55488: GO 55468
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55490: LD_VAR 0 11
55494: PPUSH
55495: LD_VAR 0 12
55499: PPUSH
55500: CALL_OW 351
55504: IFFALSE 55522
55506: PUSH
55507: LD_VAR 0 11
55511: PPUSH
55512: LD_VAR 0 12
55516: PPUSH
55517: CALL_OW 554
55521: AND
55522: IFFALSE 55562
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55524: LD_ADDR_VAR 0 13
55528: PUSH
55529: LD_VAR 0 13
55533: PPUSH
55534: LD_VAR 0 13
55538: PUSH
55539: LD_INT 1
55541: PLUS
55542: PPUSH
55543: LD_VAR 0 11
55547: PUSH
55548: LD_VAR 0 12
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PPUSH
55557: CALL_OW 2
55561: ST_TO_ADDR
// end ;
55562: GO 55468
55564: POP
55565: POP
55566: GO 55448
55568: POP
55569: POP
// if not list then
55570: LD_VAR 0 13
55574: NOT
55575: IFFALSE 55579
// exit ;
55577: GO 55825
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55579: LD_ADDR_VAR 0 13
55583: PUSH
55584: LD_VAR 0 1
55588: PPUSH
55589: LD_VAR 0 13
55593: PPUSH
55594: LD_INT 1
55596: PPUSH
55597: LD_INT 1
55599: PPUSH
55600: CALL 15592 0 4
55604: ST_TO_ADDR
// ComStop ( flame ) ;
55605: LD_VAR 0 1
55609: PPUSH
55610: CALL_OW 141
// for i in list do
55614: LD_ADDR_VAR 0 6
55618: PUSH
55619: LD_VAR 0 13
55623: PUSH
55624: FOR_IN
55625: IFFALSE 55656
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55627: LD_VAR 0 1
55631: PPUSH
55632: LD_VAR 0 6
55636: PUSH
55637: LD_INT 1
55639: ARRAY
55640: PPUSH
55641: LD_VAR 0 6
55645: PUSH
55646: LD_INT 2
55648: ARRAY
55649: PPUSH
55650: CALL_OW 176
55654: GO 55624
55656: POP
55657: POP
// repeat wait ( 0 0$1 ) ;
55658: LD_INT 35
55660: PPUSH
55661: CALL_OW 67
// task := GetTaskList ( flame ) ;
55665: LD_ADDR_VAR 0 14
55669: PUSH
55670: LD_VAR 0 1
55674: PPUSH
55675: CALL_OW 437
55679: ST_TO_ADDR
// if not task then
55680: LD_VAR 0 14
55684: NOT
55685: IFFALSE 55689
// exit ;
55687: GO 55825
// if task [ 1 ] [ 1 ] <> | then
55689: LD_VAR 0 14
55693: PUSH
55694: LD_INT 1
55696: ARRAY
55697: PUSH
55698: LD_INT 1
55700: ARRAY
55701: PUSH
55702: LD_STRING |
55704: NONEQUAL
55705: IFFALSE 55709
// exit ;
55707: GO 55825
// _x := task [ 1 ] [ 2 ] ;
55709: LD_ADDR_VAR 0 11
55713: PUSH
55714: LD_VAR 0 14
55718: PUSH
55719: LD_INT 1
55721: ARRAY
55722: PUSH
55723: LD_INT 2
55725: ARRAY
55726: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55727: LD_ADDR_VAR 0 12
55731: PUSH
55732: LD_VAR 0 14
55736: PUSH
55737: LD_INT 1
55739: ARRAY
55740: PUSH
55741: LD_INT 3
55743: ARRAY
55744: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55745: LD_VAR 0 11
55749: PPUSH
55750: LD_VAR 0 12
55754: PPUSH
55755: CALL_OW 351
55759: NOT
55760: IFTRUE 55779
55762: PUSH
55763: LD_VAR 0 11
55767: PPUSH
55768: LD_VAR 0 12
55772: PPUSH
55773: CALL_OW 554
55777: NOT
55778: OR
55779: IFFALSE 55813
// begin task := Delete ( task , 1 ) ;
55781: LD_ADDR_VAR 0 14
55785: PUSH
55786: LD_VAR 0 14
55790: PPUSH
55791: LD_INT 1
55793: PPUSH
55794: CALL_OW 3
55798: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55799: LD_VAR 0 1
55803: PPUSH
55804: LD_VAR 0 14
55808: PPUSH
55809: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55813: LD_VAR 0 1
55817: PPUSH
55818: CALL_OW 314
55822: NOT
55823: IFFALSE 55658
// end ;
55825: LD_VAR 0 5
55829: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55830: LD_EXP 48
55834: NOT
55835: IFFALSE 55885
55837: GO 55839
55839: DISABLE
// begin initHack := true ;
55840: LD_ADDR_EXP 48
55844: PUSH
55845: LD_INT 1
55847: ST_TO_ADDR
// hackTanks := [ ] ;
55848: LD_ADDR_EXP 49
55852: PUSH
55853: EMPTY
55854: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55855: LD_ADDR_EXP 50
55859: PUSH
55860: EMPTY
55861: ST_TO_ADDR
// hackLimit := 3 ;
55862: LD_ADDR_EXP 51
55866: PUSH
55867: LD_INT 3
55869: ST_TO_ADDR
// hackDist := 12 ;
55870: LD_ADDR_EXP 52
55874: PUSH
55875: LD_INT 12
55877: ST_TO_ADDR
// hackCounter := [ ] ;
55878: LD_ADDR_EXP 53
55882: PUSH
55883: EMPTY
55884: ST_TO_ADDR
// end ;
55885: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55886: LD_EXP 48
55890: IFFALSE 55908
55892: PUSH
55893: LD_INT 34
55895: PUSH
55896: LD_INT 99
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PPUSH
55903: CALL_OW 69
55907: AND
55908: IFFALSE 56161
55910: GO 55912
55912: DISABLE
55913: LD_INT 0
55915: PPUSH
55916: PPUSH
// begin enable ;
55917: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55918: LD_ADDR_VAR 0 1
55922: PUSH
55923: LD_INT 34
55925: PUSH
55926: LD_INT 99
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PPUSH
55933: CALL_OW 69
55937: PUSH
55938: FOR_IN
55939: IFFALSE 56159
// begin if not i in hackTanks then
55941: LD_VAR 0 1
55945: PUSH
55946: LD_EXP 49
55950: IN
55951: NOT
55952: IFFALSE 56035
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55954: LD_ADDR_EXP 49
55958: PUSH
55959: LD_EXP 49
55963: PPUSH
55964: LD_EXP 49
55968: PUSH
55969: LD_INT 1
55971: PLUS
55972: PPUSH
55973: LD_VAR 0 1
55977: PPUSH
55978: CALL_OW 1
55982: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55983: LD_ADDR_EXP 50
55987: PUSH
55988: LD_EXP 50
55992: PPUSH
55993: LD_EXP 50
55997: PUSH
55998: LD_INT 1
56000: PLUS
56001: PPUSH
56002: EMPTY
56003: PPUSH
56004: CALL_OW 1
56008: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56009: LD_ADDR_EXP 53
56013: PUSH
56014: LD_EXP 53
56018: PPUSH
56019: LD_EXP 53
56023: PUSH
56024: LD_INT 1
56026: PLUS
56027: PPUSH
56028: EMPTY
56029: PPUSH
56030: CALL_OW 1
56034: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56035: LD_VAR 0 1
56039: PPUSH
56040: CALL_OW 302
56044: NOT
56045: IFFALSE 56058
// begin HackUnlinkAll ( i ) ;
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL 56164 0 1
// continue ;
56056: GO 55938
// end ; HackCheckCapturedStatus ( i ) ;
56058: LD_VAR 0 1
56062: PPUSH
56063: CALL 56609 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56067: LD_ADDR_VAR 0 2
56071: PUSH
56072: LD_INT 81
56074: PUSH
56075: LD_VAR 0 1
56079: PPUSH
56080: CALL_OW 255
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 33
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 91
56101: PUSH
56102: LD_VAR 0 1
56106: PUSH
56107: LD_EXP 52
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 50
56119: PUSH
56120: EMPTY
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: PPUSH
56129: CALL_OW 69
56133: ST_TO_ADDR
// if not tmp then
56134: LD_VAR 0 2
56138: NOT
56139: IFFALSE 56143
// continue ;
56141: GO 55938
// HackLink ( i , tmp ) ;
56143: LD_VAR 0 1
56147: PPUSH
56148: LD_VAR 0 2
56152: PPUSH
56153: CALL 56300 0 2
// end ;
56157: GO 55938
56159: POP
56160: POP
// end ;
56161: PPOPN 2
56163: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56164: LD_INT 0
56166: PPUSH
56167: PPUSH
56168: PPUSH
// if not hack in hackTanks then
56169: LD_VAR 0 1
56173: PUSH
56174: LD_EXP 49
56178: IN
56179: NOT
56180: IFFALSE 56184
// exit ;
56182: GO 56295
// index := GetElementIndex ( hackTanks , hack ) ;
56184: LD_ADDR_VAR 0 4
56188: PUSH
56189: LD_EXP 49
56193: PPUSH
56194: LD_VAR 0 1
56198: PPUSH
56199: CALL 14887 0 2
56203: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56204: LD_EXP 50
56208: PUSH
56209: LD_VAR 0 4
56213: ARRAY
56214: IFFALSE 56295
// begin for i in hackTanksCaptured [ index ] do
56216: LD_ADDR_VAR 0 3
56220: PUSH
56221: LD_EXP 50
56225: PUSH
56226: LD_VAR 0 4
56230: ARRAY
56231: PUSH
56232: FOR_IN
56233: IFFALSE 56259
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56235: LD_VAR 0 3
56239: PUSH
56240: LD_INT 1
56242: ARRAY
56243: PPUSH
56244: LD_VAR 0 3
56248: PUSH
56249: LD_INT 2
56251: ARRAY
56252: PPUSH
56253: CALL_OW 235
56257: GO 56232
56259: POP
56260: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56261: LD_ADDR_EXP 50
56265: PUSH
56266: LD_EXP 50
56270: PPUSH
56271: LD_VAR 0 4
56275: PPUSH
56276: EMPTY
56277: PPUSH
56278: CALL_OW 1
56282: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56283: LD_VAR 0 1
56287: PPUSH
56288: LD_INT 0
56290: PPUSH
56291: CALL_OW 505
// end ; end ;
56295: LD_VAR 0 2
56299: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56300: LD_INT 0
56302: PPUSH
56303: PPUSH
56304: PPUSH
// if not hack in hackTanks or not vehicles then
56305: LD_VAR 0 1
56309: PUSH
56310: LD_EXP 49
56314: IN
56315: NOT
56316: IFTRUE 56325
56318: PUSH
56319: LD_VAR 0 2
56323: NOT
56324: OR
56325: IFFALSE 56329
// exit ;
56327: GO 56604
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56329: LD_ADDR_VAR 0 2
56333: PUSH
56334: LD_VAR 0 1
56338: PPUSH
56339: LD_VAR 0 2
56343: PPUSH
56344: LD_INT 1
56346: PPUSH
56347: LD_INT 1
56349: PPUSH
56350: CALL 15539 0 4
56354: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56355: LD_ADDR_VAR 0 5
56359: PUSH
56360: LD_EXP 49
56364: PPUSH
56365: LD_VAR 0 1
56369: PPUSH
56370: CALL 14887 0 2
56374: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56375: LD_EXP 50
56379: PUSH
56380: LD_VAR 0 5
56384: ARRAY
56385: PUSH
56386: LD_EXP 51
56390: LESS
56391: IFFALSE 56580
// begin for i := 1 to vehicles do
56393: LD_ADDR_VAR 0 4
56397: PUSH
56398: DOUBLE
56399: LD_INT 1
56401: DEC
56402: ST_TO_ADDR
56403: LD_VAR 0 2
56407: PUSH
56408: FOR_TO
56409: IFFALSE 56578
// begin if hackTanksCaptured [ index ] = hackLimit then
56411: LD_EXP 50
56415: PUSH
56416: LD_VAR 0 5
56420: ARRAY
56421: PUSH
56422: LD_EXP 51
56426: EQUAL
56427: IFFALSE 56431
// break ;
56429: GO 56578
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56431: LD_ADDR_EXP 53
56435: PUSH
56436: LD_EXP 53
56440: PPUSH
56441: LD_VAR 0 5
56445: PPUSH
56446: LD_EXP 53
56450: PUSH
56451: LD_VAR 0 5
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: PLUS
56460: PPUSH
56461: CALL_OW 1
56465: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56466: LD_ADDR_EXP 50
56470: PUSH
56471: LD_EXP 50
56475: PPUSH
56476: LD_VAR 0 5
56480: PUSH
56481: LD_EXP 50
56485: PUSH
56486: LD_VAR 0 5
56490: ARRAY
56491: PUSH
56492: LD_INT 1
56494: PLUS
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PPUSH
56500: LD_VAR 0 2
56504: PUSH
56505: LD_VAR 0 4
56509: ARRAY
56510: PUSH
56511: LD_VAR 0 2
56515: PUSH
56516: LD_VAR 0 4
56520: ARRAY
56521: PPUSH
56522: CALL_OW 255
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PPUSH
56531: CALL 15104 0 3
56535: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56536: LD_VAR 0 2
56540: PUSH
56541: LD_VAR 0 4
56545: ARRAY
56546: PPUSH
56547: LD_VAR 0 1
56551: PPUSH
56552: CALL_OW 255
56556: PPUSH
56557: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56561: LD_VAR 0 2
56565: PUSH
56566: LD_VAR 0 4
56570: ARRAY
56571: PPUSH
56572: CALL_OW 141
// end ;
56576: GO 56408
56578: POP
56579: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_EXP 50
56589: PUSH
56590: LD_VAR 0 5
56594: ARRAY
56595: PUSH
56596: LD_INT 0
56598: PLUS
56599: PPUSH
56600: CALL_OW 505
// end ;
56604: LD_VAR 0 3
56608: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56609: LD_INT 0
56611: PPUSH
56612: PPUSH
56613: PPUSH
56614: PPUSH
// if not hack in hackTanks then
56615: LD_VAR 0 1
56619: PUSH
56620: LD_EXP 49
56624: IN
56625: NOT
56626: IFFALSE 56630
// exit ;
56628: GO 56874
// index := GetElementIndex ( hackTanks , hack ) ;
56630: LD_ADDR_VAR 0 4
56634: PUSH
56635: LD_EXP 49
56639: PPUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: CALL 14887 0 2
56649: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56650: LD_ADDR_VAR 0 3
56654: PUSH
56655: DOUBLE
56656: LD_EXP 50
56660: PUSH
56661: LD_VAR 0 4
56665: ARRAY
56666: INC
56667: ST_TO_ADDR
56668: LD_INT 1
56670: PUSH
56671: FOR_DOWNTO
56672: IFFALSE 56848
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56674: LD_ADDR_VAR 0 5
56678: PUSH
56679: LD_EXP 50
56683: PUSH
56684: LD_VAR 0 4
56688: ARRAY
56689: PUSH
56690: LD_VAR 0 3
56694: ARRAY
56695: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56696: LD_VAR 0 5
56700: PUSH
56701: LD_INT 1
56703: ARRAY
56704: PPUSH
56705: CALL_OW 302
56709: NOT
56710: IFTRUE 56738
56712: PUSH
56713: LD_VAR 0 5
56717: PUSH
56718: LD_INT 1
56720: ARRAY
56721: PPUSH
56722: CALL_OW 255
56726: PUSH
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 255
56736: NONEQUAL
56737: OR
56738: IFFALSE 56846
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56740: LD_VAR 0 5
56744: PUSH
56745: LD_INT 1
56747: ARRAY
56748: PPUSH
56749: CALL_OW 305
56753: IFFALSE 56781
56755: PUSH
56756: LD_VAR 0 5
56760: PUSH
56761: LD_INT 1
56763: ARRAY
56764: PPUSH
56765: CALL_OW 255
56769: PUSH
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL_OW 255
56779: EQUAL
56780: AND
56781: IFFALSE 56805
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56783: LD_VAR 0 5
56787: PUSH
56788: LD_INT 1
56790: ARRAY
56791: PPUSH
56792: LD_VAR 0 5
56796: PUSH
56797: LD_INT 2
56799: ARRAY
56800: PPUSH
56801: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56805: LD_ADDR_EXP 50
56809: PUSH
56810: LD_EXP 50
56814: PPUSH
56815: LD_VAR 0 4
56819: PPUSH
56820: LD_EXP 50
56824: PUSH
56825: LD_VAR 0 4
56829: ARRAY
56830: PPUSH
56831: LD_VAR 0 3
56835: PPUSH
56836: CALL_OW 3
56840: PPUSH
56841: CALL_OW 1
56845: ST_TO_ADDR
// end ; end ;
56846: GO 56671
56848: POP
56849: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56850: LD_VAR 0 1
56854: PPUSH
56855: LD_EXP 50
56859: PUSH
56860: LD_VAR 0 4
56864: ARRAY
56865: PUSH
56866: LD_INT 0
56868: PLUS
56869: PPUSH
56870: CALL_OW 505
// end ;
56874: LD_VAR 0 2
56878: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56879: LD_INT 0
56881: PPUSH
56882: PPUSH
56883: PPUSH
56884: PPUSH
// if not hack in hackTanks then
56885: LD_VAR 0 1
56889: PUSH
56890: LD_EXP 49
56894: IN
56895: NOT
56896: IFFALSE 56900
// exit ;
56898: GO 56985
// index := GetElementIndex ( hackTanks , hack ) ;
56900: LD_ADDR_VAR 0 5
56904: PUSH
56905: LD_EXP 49
56909: PPUSH
56910: LD_VAR 0 1
56914: PPUSH
56915: CALL 14887 0 2
56919: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56920: LD_ADDR_VAR 0 4
56924: PUSH
56925: DOUBLE
56926: LD_INT 1
56928: DEC
56929: ST_TO_ADDR
56930: LD_EXP 50
56934: PUSH
56935: LD_VAR 0 5
56939: ARRAY
56940: PUSH
56941: FOR_TO
56942: IFFALSE 56983
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56944: LD_EXP 50
56948: PUSH
56949: LD_VAR 0 5
56953: ARRAY
56954: PUSH
56955: LD_VAR 0 4
56959: ARRAY
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: PUSH
56965: LD_VAR 0 2
56969: EQUAL
56970: IFFALSE 56981
// KillUnit ( vehicle ) ;
56972: LD_VAR 0 2
56976: PPUSH
56977: CALL_OW 66
56981: GO 56941
56983: POP
56984: POP
// end ;
56985: LD_VAR 0 3
56989: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56990: LD_EXP 54
56994: NOT
56995: IFFALSE 57030
56997: GO 56999
56999: DISABLE
// begin initMiner := true ;
57000: LD_ADDR_EXP 54
57004: PUSH
57005: LD_INT 1
57007: ST_TO_ADDR
// minersList := [ ] ;
57008: LD_ADDR_EXP 55
57012: PUSH
57013: EMPTY
57014: ST_TO_ADDR
// minerMinesList := [ ] ;
57015: LD_ADDR_EXP 56
57019: PUSH
57020: EMPTY
57021: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57022: LD_ADDR_EXP 57
57026: PUSH
57027: LD_INT 5
57029: ST_TO_ADDR
// end ;
57030: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57031: LD_EXP 54
57035: IFFALSE 57053
57037: PUSH
57038: LD_INT 34
57040: PUSH
57041: LD_INT 81
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PPUSH
57048: CALL_OW 69
57052: AND
57053: IFFALSE 57516
57055: GO 57057
57057: DISABLE
57058: LD_INT 0
57060: PPUSH
57061: PPUSH
57062: PPUSH
57063: PPUSH
// begin enable ;
57064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57065: LD_ADDR_VAR 0 1
57069: PUSH
57070: LD_INT 34
57072: PUSH
57073: LD_INT 81
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PPUSH
57080: CALL_OW 69
57084: PUSH
57085: FOR_IN
57086: IFFALSE 57158
// begin if not i in minersList then
57088: LD_VAR 0 1
57092: PUSH
57093: LD_EXP 55
57097: IN
57098: NOT
57099: IFFALSE 57156
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57101: LD_ADDR_EXP 55
57105: PUSH
57106: LD_EXP 55
57110: PPUSH
57111: LD_EXP 55
57115: PUSH
57116: LD_INT 1
57118: PLUS
57119: PPUSH
57120: LD_VAR 0 1
57124: PPUSH
57125: CALL_OW 1
57129: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57130: LD_ADDR_EXP 56
57134: PUSH
57135: LD_EXP 56
57139: PPUSH
57140: LD_EXP 56
57144: PUSH
57145: LD_INT 1
57147: PLUS
57148: PPUSH
57149: EMPTY
57150: PPUSH
57151: CALL_OW 1
57155: ST_TO_ADDR
// end end ;
57156: GO 57085
57158: POP
57159: POP
// for i := minerMinesList downto 1 do
57160: LD_ADDR_VAR 0 1
57164: PUSH
57165: DOUBLE
57166: LD_EXP 56
57170: INC
57171: ST_TO_ADDR
57172: LD_INT 1
57174: PUSH
57175: FOR_DOWNTO
57176: IFFALSE 57514
// begin if IsLive ( minersList [ i ] ) then
57178: LD_EXP 55
57182: PUSH
57183: LD_VAR 0 1
57187: ARRAY
57188: PPUSH
57189: CALL_OW 300
57193: IFFALSE 57221
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57195: LD_EXP 55
57199: PUSH
57200: LD_VAR 0 1
57204: ARRAY
57205: PPUSH
57206: LD_EXP 56
57210: PUSH
57211: LD_VAR 0 1
57215: ARRAY
57216: PPUSH
57217: CALL_OW 505
// if not minerMinesList [ i ] then
57221: LD_EXP 56
57225: PUSH
57226: LD_VAR 0 1
57230: ARRAY
57231: NOT
57232: IFFALSE 57236
// continue ;
57234: GO 57175
// for j := minerMinesList [ i ] downto 1 do
57236: LD_ADDR_VAR 0 2
57240: PUSH
57241: DOUBLE
57242: LD_EXP 56
57246: PUSH
57247: LD_VAR 0 1
57251: ARRAY
57252: INC
57253: ST_TO_ADDR
57254: LD_INT 1
57256: PUSH
57257: FOR_DOWNTO
57258: IFFALSE 57510
// begin side := GetSide ( minersList [ i ] ) ;
57260: LD_ADDR_VAR 0 3
57264: PUSH
57265: LD_EXP 55
57269: PUSH
57270: LD_VAR 0 1
57274: ARRAY
57275: PPUSH
57276: CALL_OW 255
57280: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57281: LD_ADDR_VAR 0 4
57285: PUSH
57286: LD_EXP 56
57290: PUSH
57291: LD_VAR 0 1
57295: ARRAY
57296: PUSH
57297: LD_VAR 0 2
57301: ARRAY
57302: PUSH
57303: LD_INT 1
57305: ARRAY
57306: PPUSH
57307: LD_EXP 56
57311: PUSH
57312: LD_VAR 0 1
57316: ARRAY
57317: PUSH
57318: LD_VAR 0 2
57322: ARRAY
57323: PUSH
57324: LD_INT 2
57326: ARRAY
57327: PPUSH
57328: CALL_OW 428
57332: ST_TO_ADDR
// if not tmp then
57333: LD_VAR 0 4
57337: NOT
57338: IFFALSE 57342
// continue ;
57340: GO 57257
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57342: LD_VAR 0 4
57346: PUSH
57347: LD_INT 81
57349: PUSH
57350: LD_VAR 0 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PPUSH
57359: CALL_OW 69
57363: IN
57364: IFFALSE 57414
57366: PUSH
57367: LD_EXP 56
57371: PUSH
57372: LD_VAR 0 1
57376: ARRAY
57377: PUSH
57378: LD_VAR 0 2
57382: ARRAY
57383: PUSH
57384: LD_INT 1
57386: ARRAY
57387: PPUSH
57388: LD_EXP 56
57392: PUSH
57393: LD_VAR 0 1
57397: ARRAY
57398: PUSH
57399: LD_VAR 0 2
57403: ARRAY
57404: PUSH
57405: LD_INT 2
57407: ARRAY
57408: PPUSH
57409: CALL_OW 458
57413: AND
57414: IFFALSE 57508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57416: LD_EXP 56
57420: PUSH
57421: LD_VAR 0 1
57425: ARRAY
57426: PUSH
57427: LD_VAR 0 2
57431: ARRAY
57432: PUSH
57433: LD_INT 1
57435: ARRAY
57436: PPUSH
57437: LD_EXP 56
57441: PUSH
57442: LD_VAR 0 1
57446: ARRAY
57447: PUSH
57448: LD_VAR 0 2
57452: ARRAY
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PPUSH
57458: LD_VAR 0 3
57462: PPUSH
57463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57467: LD_ADDR_EXP 56
57471: PUSH
57472: LD_EXP 56
57476: PPUSH
57477: LD_VAR 0 1
57481: PPUSH
57482: LD_EXP 56
57486: PUSH
57487: LD_VAR 0 1
57491: ARRAY
57492: PPUSH
57493: LD_VAR 0 2
57497: PPUSH
57498: CALL_OW 3
57502: PPUSH
57503: CALL_OW 1
57507: ST_TO_ADDR
// end ; end ;
57508: GO 57257
57510: POP
57511: POP
// end ;
57512: GO 57175
57514: POP
57515: POP
// end ;
57516: PPOPN 4
57518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57519: LD_INT 0
57521: PPUSH
57522: PPUSH
// result := false ;
57523: LD_ADDR_VAR 0 4
57527: PUSH
57528: LD_INT 0
57530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 264
57540: PUSH
57541: LD_INT 81
57543: EQUAL
57544: NOT
57545: IFFALSE 57549
// exit ;
57547: GO 57793
// index := GetElementIndex ( minersList , unit ) ;
57549: LD_ADDR_VAR 0 5
57553: PUSH
57554: LD_EXP 55
57558: PPUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL 14887 0 2
57568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57569: LD_EXP 56
57573: PUSH
57574: LD_VAR 0 5
57578: ARRAY
57579: PUSH
57580: LD_EXP 57
57584: GREATEREQUAL
57585: IFFALSE 57589
// exit ;
57587: GO 57793
// ComMoveXY ( unit , x , y ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_VAR 0 2
57598: PPUSH
57599: LD_VAR 0 3
57603: PPUSH
57604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57608: LD_INT 35
57610: PPUSH
57611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57615: LD_VAR 0 1
57619: PPUSH
57620: LD_VAR 0 2
57624: PPUSH
57625: LD_VAR 0 3
57629: PPUSH
57630: CALL 46933 0 3
57634: NOT
57635: IFFALSE 57648
57637: PUSH
57638: LD_VAR 0 1
57642: PPUSH
57643: CALL_OW 314
57647: AND
57648: IFFALSE 57652
// exit ;
57650: GO 57793
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57652: LD_VAR 0 2
57656: PPUSH
57657: LD_VAR 0 3
57661: PPUSH
57662: CALL_OW 428
57666: PUSH
57667: LD_VAR 0 1
57671: EQUAL
57672: IFFALSE 57686
57674: PUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 314
57684: NOT
57685: AND
57686: IFFALSE 57608
// PlaySoundXY ( x , y , PlantMine ) ;
57688: LD_VAR 0 2
57692: PPUSH
57693: LD_VAR 0 3
57697: PPUSH
57698: LD_STRING PlantMine
57700: PPUSH
57701: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57705: LD_VAR 0 2
57709: PPUSH
57710: LD_VAR 0 3
57714: PPUSH
57715: LD_VAR 0 1
57719: PPUSH
57720: CALL_OW 255
57724: PPUSH
57725: LD_INT 0
57727: PPUSH
57728: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57732: LD_ADDR_EXP 56
57736: PUSH
57737: LD_EXP 56
57741: PPUSH
57742: LD_VAR 0 5
57746: PUSH
57747: LD_EXP 56
57751: PUSH
57752: LD_VAR 0 5
57756: ARRAY
57757: PUSH
57758: LD_INT 1
57760: PLUS
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PPUSH
57766: LD_VAR 0 2
57770: PUSH
57771: LD_VAR 0 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PPUSH
57780: CALL 15104 0 3
57784: ST_TO_ADDR
// result := true ;
57785: LD_ADDR_VAR 0 4
57789: PUSH
57790: LD_INT 1
57792: ST_TO_ADDR
// end ;
57793: LD_VAR 0 4
57797: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57798: LD_INT 0
57800: PPUSH
57801: PPUSH
57802: PPUSH
// if not unit in minersList then
57803: LD_VAR 0 1
57807: PUSH
57808: LD_EXP 55
57812: IN
57813: NOT
57814: IFFALSE 57818
// exit ;
57816: GO 58212
// index := GetElementIndex ( minersList , unit ) ;
57818: LD_ADDR_VAR 0 6
57822: PUSH
57823: LD_EXP 55
57827: PPUSH
57828: LD_VAR 0 1
57832: PPUSH
57833: CALL 14887 0 2
57837: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: DOUBLE
57844: LD_EXP 56
57848: PUSH
57849: LD_VAR 0 6
57853: ARRAY
57854: INC
57855: ST_TO_ADDR
57856: LD_INT 1
57858: PUSH
57859: FOR_DOWNTO
57860: IFFALSE 58023
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57862: LD_EXP 56
57866: PUSH
57867: LD_VAR 0 6
57871: ARRAY
57872: PUSH
57873: LD_VAR 0 5
57877: ARRAY
57878: PUSH
57879: LD_INT 1
57881: ARRAY
57882: PUSH
57883: LD_VAR 0 2
57887: EQUAL
57888: IFFALSE 57918
57890: PUSH
57891: LD_EXP 56
57895: PUSH
57896: LD_VAR 0 6
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 5
57906: ARRAY
57907: PUSH
57908: LD_INT 2
57910: ARRAY
57911: PUSH
57912: LD_VAR 0 3
57916: EQUAL
57917: AND
57918: IFFALSE 58021
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57920: LD_EXP 56
57924: PUSH
57925: LD_VAR 0 6
57929: ARRAY
57930: PUSH
57931: LD_VAR 0 5
57935: ARRAY
57936: PUSH
57937: LD_INT 1
57939: ARRAY
57940: PPUSH
57941: LD_EXP 56
57945: PUSH
57946: LD_VAR 0 6
57950: ARRAY
57951: PUSH
57952: LD_VAR 0 5
57956: ARRAY
57957: PUSH
57958: LD_INT 2
57960: ARRAY
57961: PPUSH
57962: LD_VAR 0 1
57966: PPUSH
57967: CALL_OW 255
57971: PPUSH
57972: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57976: LD_ADDR_EXP 56
57980: PUSH
57981: LD_EXP 56
57985: PPUSH
57986: LD_VAR 0 6
57990: PPUSH
57991: LD_EXP 56
57995: PUSH
57996: LD_VAR 0 6
58000: ARRAY
58001: PPUSH
58002: LD_VAR 0 5
58006: PPUSH
58007: CALL_OW 3
58011: PPUSH
58012: CALL_OW 1
58016: ST_TO_ADDR
// exit ;
58017: POP
58018: POP
58019: GO 58212
// end ; end ;
58021: GO 57859
58023: POP
58024: POP
// for i := minerMinesList [ index ] downto 1 do
58025: LD_ADDR_VAR 0 5
58029: PUSH
58030: DOUBLE
58031: LD_EXP 56
58035: PUSH
58036: LD_VAR 0 6
58040: ARRAY
58041: INC
58042: ST_TO_ADDR
58043: LD_INT 1
58045: PUSH
58046: FOR_DOWNTO
58047: IFFALSE 58210
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58049: LD_EXP 56
58053: PUSH
58054: LD_VAR 0 6
58058: ARRAY
58059: PUSH
58060: LD_VAR 0 5
58064: ARRAY
58065: PUSH
58066: LD_INT 1
58068: ARRAY
58069: PPUSH
58070: LD_EXP 56
58074: PUSH
58075: LD_VAR 0 6
58079: ARRAY
58080: PUSH
58081: LD_VAR 0 5
58085: ARRAY
58086: PUSH
58087: LD_INT 2
58089: ARRAY
58090: PPUSH
58091: LD_VAR 0 2
58095: PPUSH
58096: LD_VAR 0 3
58100: PPUSH
58101: CALL_OW 298
58105: PUSH
58106: LD_INT 6
58108: LESS
58109: IFFALSE 58208
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58111: LD_EXP 56
58115: PUSH
58116: LD_VAR 0 6
58120: ARRAY
58121: PUSH
58122: LD_VAR 0 5
58126: ARRAY
58127: PUSH
58128: LD_INT 1
58130: ARRAY
58131: PPUSH
58132: LD_EXP 56
58136: PUSH
58137: LD_VAR 0 6
58141: ARRAY
58142: PUSH
58143: LD_VAR 0 5
58147: ARRAY
58148: PUSH
58149: LD_INT 2
58151: ARRAY
58152: PPUSH
58153: LD_VAR 0 1
58157: PPUSH
58158: CALL_OW 255
58162: PPUSH
58163: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58167: LD_ADDR_EXP 56
58171: PUSH
58172: LD_EXP 56
58176: PPUSH
58177: LD_VAR 0 6
58181: PPUSH
58182: LD_EXP 56
58186: PUSH
58187: LD_VAR 0 6
58191: ARRAY
58192: PPUSH
58193: LD_VAR 0 5
58197: PPUSH
58198: CALL_OW 3
58202: PPUSH
58203: CALL_OW 1
58207: ST_TO_ADDR
// end ; end ;
58208: GO 58046
58210: POP
58211: POP
// end ;
58212: LD_VAR 0 4
58216: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58217: LD_INT 0
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58228: LD_VAR 0 1
58232: PPUSH
58233: CALL_OW 264
58237: PUSH
58238: LD_INT 81
58240: EQUAL
58241: NOT
58242: IFTRUE 58257
58244: PUSH
58245: LD_VAR 0 1
58249: PUSH
58250: LD_EXP 55
58254: IN
58255: NOT
58256: OR
58257: IFFALSE 58261
// exit ;
58259: GO 58587
// index := GetElementIndex ( minersList , unit ) ;
58261: LD_ADDR_VAR 0 6
58265: PUSH
58266: LD_EXP 55
58270: PPUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL 14887 0 2
58280: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58281: LD_ADDR_VAR 0 8
58285: PUSH
58286: LD_EXP 57
58290: PUSH
58291: LD_EXP 56
58295: PUSH
58296: LD_VAR 0 6
58300: ARRAY
58301: MINUS
58302: ST_TO_ADDR
// if not minesFreeAmount then
58303: LD_VAR 0 8
58307: NOT
58308: IFFALSE 58312
// exit ;
58310: GO 58587
// tmp := [ ] ;
58312: LD_ADDR_VAR 0 7
58316: PUSH
58317: EMPTY
58318: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58319: LD_ADDR_VAR 0 5
58323: PUSH
58324: DOUBLE
58325: LD_INT 1
58327: DEC
58328: ST_TO_ADDR
58329: LD_VAR 0 8
58333: PUSH
58334: FOR_TO
58335: IFFALSE 58534
// begin _d := rand ( 0 , 5 ) ;
58337: LD_ADDR_VAR 0 11
58341: PUSH
58342: LD_INT 0
58344: PPUSH
58345: LD_INT 5
58347: PPUSH
58348: CALL_OW 12
58352: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58353: LD_ADDR_VAR 0 12
58357: PUSH
58358: LD_INT 2
58360: PPUSH
58361: LD_INT 6
58363: PPUSH
58364: CALL_OW 12
58368: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58369: LD_ADDR_VAR 0 9
58373: PUSH
58374: LD_VAR 0 2
58378: PPUSH
58379: LD_VAR 0 11
58383: PPUSH
58384: LD_VAR 0 12
58388: PPUSH
58389: CALL_OW 272
58393: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58394: LD_ADDR_VAR 0 10
58398: PUSH
58399: LD_VAR 0 3
58403: PPUSH
58404: LD_VAR 0 11
58408: PPUSH
58409: LD_VAR 0 12
58413: PPUSH
58414: CALL_OW 273
58418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58419: LD_VAR 0 9
58423: PPUSH
58424: LD_VAR 0 10
58428: PPUSH
58429: CALL_OW 488
58433: IFFALSE 58457
58435: PUSH
58436: LD_VAR 0 9
58440: PUSH
58441: LD_VAR 0 10
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_VAR 0 7
58454: IN
58455: NOT
58456: AND
58457: IFFALSE 58476
58459: PUSH
58460: LD_VAR 0 9
58464: PPUSH
58465: LD_VAR 0 10
58469: PPUSH
58470: CALL_OW 458
58474: NOT
58475: AND
58476: IFFALSE 58518
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58478: LD_ADDR_VAR 0 7
58482: PUSH
58483: LD_VAR 0 7
58487: PPUSH
58488: LD_VAR 0 7
58492: PUSH
58493: LD_INT 1
58495: PLUS
58496: PPUSH
58497: LD_VAR 0 9
58501: PUSH
58502: LD_VAR 0 10
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PPUSH
58511: CALL_OW 1
58515: ST_TO_ADDR
58516: GO 58532
// i := i - 1 ;
58518: LD_ADDR_VAR 0 5
58522: PUSH
58523: LD_VAR 0 5
58527: PUSH
58528: LD_INT 1
58530: MINUS
58531: ST_TO_ADDR
// end ;
58532: GO 58334
58534: POP
58535: POP
// for i in tmp do
58536: LD_ADDR_VAR 0 5
58540: PUSH
58541: LD_VAR 0 7
58545: PUSH
58546: FOR_IN
58547: IFFALSE 58585
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58549: LD_VAR 0 1
58553: PPUSH
58554: LD_VAR 0 5
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: PPUSH
58563: LD_VAR 0 5
58567: PUSH
58568: LD_INT 2
58570: ARRAY
58571: PPUSH
58572: CALL 57519 0 3
58576: NOT
58577: IFFALSE 58583
// exit ;
58579: POP
58580: POP
58581: GO 58587
58583: GO 58546
58585: POP
58586: POP
// end ;
58587: LD_VAR 0 4
58591: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58592: LD_INT 0
58594: PPUSH
58595: PPUSH
58596: PPUSH
58597: PPUSH
58598: PPUSH
58599: PPUSH
58600: PPUSH
58601: PPUSH
58602: PPUSH
// if GetClass ( unit ) <> class_sniper then
58603: LD_VAR 0 1
58607: PPUSH
58608: CALL_OW 257
58612: PUSH
58613: LD_INT 5
58615: NONEQUAL
58616: IFFALSE 58620
// exit ;
58618: GO 59090
// dist := 8 ;
58620: LD_ADDR_VAR 0 5
58624: PUSH
58625: LD_INT 8
58627: ST_TO_ADDR
// viewRange := 12 ;
58628: LD_ADDR_VAR 0 8
58632: PUSH
58633: LD_INT 12
58635: ST_TO_ADDR
// side := GetSide ( unit ) ;
58636: LD_ADDR_VAR 0 6
58640: PUSH
58641: LD_VAR 0 1
58645: PPUSH
58646: CALL_OW 255
58650: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58651: LD_INT 61
58653: PPUSH
58654: LD_VAR 0 6
58658: PPUSH
58659: CALL_OW 321
58663: PUSH
58664: LD_INT 2
58666: EQUAL
58667: IFFALSE 58677
// viewRange := 16 ;
58669: LD_ADDR_VAR 0 8
58673: PUSH
58674: LD_INT 16
58676: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58677: LD_VAR 0 1
58681: PPUSH
58682: LD_VAR 0 2
58686: PPUSH
58687: LD_VAR 0 3
58691: PPUSH
58692: CALL_OW 297
58696: PUSH
58697: LD_VAR 0 5
58701: GREATER
58702: IFFALSE 58781
// begin ComMoveXY ( unit , x , y ) ;
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_VAR 0 2
58713: PPUSH
58714: LD_VAR 0 3
58718: PPUSH
58719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58723: LD_INT 35
58725: PPUSH
58726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58730: LD_VAR 0 1
58734: PPUSH
58735: LD_VAR 0 2
58739: PPUSH
58740: LD_VAR 0 3
58744: PPUSH
58745: CALL 46933 0 3
58749: NOT
58750: IFFALSE 58754
// exit ;
58752: GO 59090
// until GetDistUnitXY ( unit , x , y ) < dist ;
58754: LD_VAR 0 1
58758: PPUSH
58759: LD_VAR 0 2
58763: PPUSH
58764: LD_VAR 0 3
58768: PPUSH
58769: CALL_OW 297
58773: PUSH
58774: LD_VAR 0 5
58778: LESS
58779: IFFALSE 58723
// end ; ComTurnXY ( unit , x , y ) ;
58781: LD_VAR 0 1
58785: PPUSH
58786: LD_VAR 0 2
58790: PPUSH
58791: LD_VAR 0 3
58795: PPUSH
58796: CALL_OW 118
// repeat if Multiplayer then
58800: LD_OWVAR 4
58804: IFFALSE 58815
// wait ( 35 ) else
58806: LD_INT 35
58808: PPUSH
58809: CALL_OW 67
58813: GO 58822
// wait ( 5 ) ;
58815: LD_INT 5
58817: PPUSH
58818: CALL_OW 67
// _d := GetDir ( unit ) ;
58822: LD_ADDR_VAR 0 11
58826: PUSH
58827: LD_VAR 0 1
58831: PPUSH
58832: CALL_OW 254
58836: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58837: LD_ADDR_VAR 0 7
58841: PUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: CALL_OW 250
58851: PPUSH
58852: LD_VAR 0 1
58856: PPUSH
58857: CALL_OW 251
58861: PPUSH
58862: LD_VAR 0 2
58866: PPUSH
58867: LD_VAR 0 3
58871: PPUSH
58872: CALL 49569 0 4
58876: ST_TO_ADDR
// until dir = _d ;
58877: LD_VAR 0 7
58881: PUSH
58882: LD_VAR 0 11
58886: EQUAL
58887: IFFALSE 58800
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58889: LD_ADDR_VAR 0 9
58893: PUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 250
58903: PPUSH
58904: LD_VAR 0 7
58908: PPUSH
58909: LD_VAR 0 5
58913: PPUSH
58914: CALL_OW 272
58918: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58919: LD_ADDR_VAR 0 10
58923: PUSH
58924: LD_VAR 0 1
58928: PPUSH
58929: CALL_OW 251
58933: PPUSH
58934: LD_VAR 0 7
58938: PPUSH
58939: LD_VAR 0 5
58943: PPUSH
58944: CALL_OW 273
58948: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58949: LD_VAR 0 9
58953: PPUSH
58954: LD_VAR 0 10
58958: PPUSH
58959: CALL_OW 488
58963: NOT
58964: IFFALSE 58968
// exit ;
58966: GO 59090
// ComAnimCustom ( unit , 1 ) ;
58968: LD_VAR 0 1
58972: PPUSH
58973: LD_INT 1
58975: PPUSH
58976: CALL_OW 592
// p := 0 ;
58980: LD_ADDR_VAR 0 12
58984: PUSH
58985: LD_INT 0
58987: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58988: LD_VAR 0 9
58992: PPUSH
58993: LD_VAR 0 10
58997: PPUSH
58998: LD_VAR 0 6
59002: PPUSH
59003: LD_VAR 0 8
59007: PPUSH
59008: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59012: LD_INT 35
59014: PPUSH
59015: CALL_OW 67
// p := Inc ( p ) ;
59019: LD_ADDR_VAR 0 12
59023: PUSH
59024: LD_VAR 0 12
59028: PPUSH
59029: CALL 49525 0 1
59033: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59034: LD_VAR 0 12
59038: PUSH
59039: LD_INT 3
59041: EQUAL
59042: IFTRUE 59056
59044: PUSH
59045: LD_VAR 0 1
59049: PPUSH
59050: CALL_OW 302
59054: NOT
59055: OR
59056: IFTRUE 59069
59058: PUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL_OW 301
59068: OR
59069: IFFALSE 59012
// RemoveSeeing ( _x , _y , side ) ;
59071: LD_VAR 0 9
59075: PPUSH
59076: LD_VAR 0 10
59080: PPUSH
59081: LD_VAR 0 6
59085: PPUSH
59086: CALL_OW 331
// end ; end_of_file
59090: LD_VAR 0 4
59094: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59095: LD_EXP 39
59099: IFFALSE 59440
59101: GO 59103
59103: DISABLE
59104: LD_INT 0
59106: PPUSH
59107: PPUSH
59108: PPUSH
// begin mpKingPoints := [ ] ;
59109: LD_ADDR_EXP 58
59113: PUSH
59114: EMPTY
59115: ST_TO_ADDR
// if mpTeamGame then
59116: LD_EXP 11
59120: IFFALSE 59174
// begin for i := 1 to Count ( mpTeams ) do
59122: LD_ADDR_VAR 0 1
59126: PUSH
59127: DOUBLE
59128: LD_INT 1
59130: DEC
59131: ST_TO_ADDR
59132: LD_EXP 10
59136: PPUSH
59137: CALL 12220 0 1
59141: PUSH
59142: FOR_TO
59143: IFFALSE 59170
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59145: LD_ADDR_EXP 58
59149: PUSH
59150: LD_EXP 58
59154: PPUSH
59155: LD_VAR 0 1
59159: PPUSH
59160: LD_INT 0
59162: PPUSH
59163: CALL_OW 1
59167: ST_TO_ADDR
59168: GO 59142
59170: POP
59171: POP
// end else
59172: GO 59217
// begin for i := 1 to 8 do
59174: LD_ADDR_VAR 0 1
59178: PUSH
59179: DOUBLE
59180: LD_INT 1
59182: DEC
59183: ST_TO_ADDR
59184: LD_INT 8
59186: PUSH
59187: FOR_TO
59188: IFFALSE 59215
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59190: LD_ADDR_EXP 58
59194: PUSH
59195: LD_EXP 58
59199: PPUSH
59200: LD_VAR 0 1
59204: PPUSH
59205: LD_INT 0
59207: PPUSH
59208: CALL_OW 1
59212: ST_TO_ADDR
59213: GO 59187
59215: POP
59216: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59217: LD_ADDR_VAR 0 3
59221: PUSH
59222: LD_EXP 2
59226: PPUSH
59227: LD_INT 0
59229: PPUSH
59230: CALL_OW 517
59234: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59235: LD_ADDR_VAR 0 1
59239: PUSH
59240: DOUBLE
59241: LD_INT 1
59243: DEC
59244: ST_TO_ADDR
59245: LD_VAR 0 3
59249: PUSH
59250: LD_INT 1
59252: ARRAY
59253: PUSH
59254: FOR_TO
59255: IFFALSE 59322
// for j := 1 to 8 do
59257: LD_ADDR_VAR 0 2
59261: PUSH
59262: DOUBLE
59263: LD_INT 1
59265: DEC
59266: ST_TO_ADDR
59267: LD_INT 8
59269: PUSH
59270: FOR_TO
59271: IFFALSE 59318
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59273: LD_VAR 0 3
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PUSH
59282: LD_VAR 0 1
59286: ARRAY
59287: PPUSH
59288: LD_VAR 0 3
59292: PUSH
59293: LD_INT 2
59295: ARRAY
59296: PUSH
59297: LD_VAR 0 1
59301: ARRAY
59302: PPUSH
59303: LD_VAR 0 2
59307: PPUSH
59308: LD_INT 12
59310: NEG
59311: PPUSH
59312: CALL_OW 330
59316: GO 59270
59318: POP
59319: POP
59320: GO 59254
59322: POP
59323: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59324: LD_EXP 34
59328: PPUSH
59329: LD_INT 1
59331: PPUSH
59332: CALL_OW 424
// UpdateCounter ;
59336: CALL 59946 0 0
// repeat wait ( 0 0$1 ) ;
59340: LD_INT 35
59342: PPUSH
59343: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59347: LD_ADDR_VAR 0 3
59351: PUSH
59352: LD_EXP 34
59356: PPUSH
59357: LD_INT 3
59359: PUSH
59360: LD_INT 57
59362: PUSH
59363: EMPTY
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 50
59372: PUSH
59373: EMPTY
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 30
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 30
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: PPUSH
59409: CALL_OW 70
59413: ST_TO_ADDR
// if not tmp then
59414: LD_VAR 0 3
59418: NOT
59419: IFFALSE 59423
// continue ;
59421: GO 59340
// AddPoints ( tmp ) ;
59423: LD_VAR 0 3
59427: PPUSH
59428: CALL 59624 0 1
// UpdateCounter ;
59432: CALL 59946 0 0
// until false ;
59436: LD_INT 0
59438: IFFALSE 59340
// end ;
59440: PPOPN 3
59442: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59443: LD_EXP 39
59447: IFFALSE 59455
59449: PUSH
59450: LD_EXP 37
59454: AND
59455: IFFALSE 59621
59457: GO 59459
59459: DISABLE
59460: LD_INT 0
59462: PPUSH
59463: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59464: LD_ADDR_VAR 0 2
59468: PUSH
59469: LD_EXP 2
59473: PPUSH
59474: LD_INT 0
59476: PPUSH
59477: CALL_OW 517
59481: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59482: LD_ADDR_VAR 0 1
59486: PUSH
59487: DOUBLE
59488: LD_INT 1
59490: DEC
59491: ST_TO_ADDR
59492: LD_VAR 0 2
59496: PUSH
59497: LD_INT 1
59499: ARRAY
59500: PUSH
59501: FOR_TO
59502: IFFALSE 59543
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59504: LD_VAR 0 2
59508: PUSH
59509: LD_INT 1
59511: ARRAY
59512: PUSH
59513: LD_VAR 0 1
59517: ARRAY
59518: PPUSH
59519: LD_VAR 0 2
59523: PUSH
59524: LD_INT 2
59526: ARRAY
59527: PUSH
59528: LD_VAR 0 1
59532: ARRAY
59533: PPUSH
59534: LD_INT 125
59536: PPUSH
59537: CALL_OW 495
59541: GO 59501
59543: POP
59544: POP
// repeat wait ( mpEmissions ) ;
59545: LD_EXP 37
59549: PPUSH
59550: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59554: LD_ADDR_VAR 0 1
59558: PUSH
59559: DOUBLE
59560: LD_INT 1
59562: DEC
59563: ST_TO_ADDR
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 1
59571: ARRAY
59572: PUSH
59573: FOR_TO
59574: IFFALSE 59615
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59576: LD_VAR 0 2
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PUSH
59585: LD_VAR 0 1
59589: ARRAY
59590: PPUSH
59591: LD_VAR 0 2
59595: PUSH
59596: LD_INT 2
59598: ARRAY
59599: PUSH
59600: LD_VAR 0 1
59604: ARRAY
59605: PPUSH
59606: LD_INT 15
59608: PPUSH
59609: CALL_OW 495
59613: GO 59573
59615: POP
59616: POP
// until false ;
59617: LD_INT 0
59619: IFFALSE 59545
// end ;
59621: PPOPN 2
59623: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59624: LD_INT 0
59626: PPUSH
59627: PPUSH
59628: PPUSH
59629: PPUSH
59630: PPUSH
// if mpTeamGame then
59631: LD_EXP 11
59635: IFFALSE 59832
// begin first := depots [ 1 ] ;
59637: LD_ADDR_VAR 0 4
59641: PUSH
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 1
59649: ARRAY
59650: ST_TO_ADDR
// side := GetSide ( first ) ;
59651: LD_ADDR_VAR 0 6
59655: PUSH
59656: LD_VAR 0 4
59660: PPUSH
59661: CALL_OW 255
59665: ST_TO_ADDR
// for i := 1 to mpTeams do
59666: LD_ADDR_VAR 0 3
59670: PUSH
59671: DOUBLE
59672: LD_INT 1
59674: DEC
59675: ST_TO_ADDR
59676: LD_EXP 10
59680: PUSH
59681: FOR_TO
59682: IFFALSE 59716
// if side in mpTeams [ i ] then
59684: LD_VAR 0 6
59688: PUSH
59689: LD_EXP 10
59693: PUSH
59694: LD_VAR 0 3
59698: ARRAY
59699: IN
59700: IFFALSE 59714
// begin team := i ;
59702: LD_ADDR_VAR 0 5
59706: PUSH
59707: LD_VAR 0 3
59711: ST_TO_ADDR
// break ;
59712: GO 59716
// end ;
59714: GO 59681
59716: POP
59717: POP
// if not team then
59718: LD_VAR 0 5
59722: NOT
59723: IFFALSE 59727
// exit ;
59725: GO 59941
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59727: LD_EXP 34
59731: PPUSH
59732: LD_INT 81
59734: PUSH
59735: LD_VAR 0 6
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PPUSH
59744: CALL_OW 70
59748: IFFALSE 59752
// exit ;
59750: GO 59941
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59752: LD_ADDR_EXP 58
59756: PUSH
59757: LD_EXP 58
59761: PPUSH
59762: LD_VAR 0 5
59766: PPUSH
59767: LD_EXP 58
59771: PUSH
59772: LD_VAR 0 5
59776: ARRAY
59777: PUSH
59778: LD_INT 1
59780: PLUS
59781: PPUSH
59782: CALL_OW 1
59786: ST_TO_ADDR
// for i in mpTeams [ team ] do
59787: LD_ADDR_VAR 0 3
59791: PUSH
59792: LD_EXP 10
59796: PUSH
59797: LD_VAR 0 5
59801: ARRAY
59802: PUSH
59803: FOR_IN
59804: IFFALSE 59828
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59806: LD_VAR 0 3
59810: PPUSH
59811: LD_EXP 58
59815: PUSH
59816: LD_VAR 0 5
59820: ARRAY
59821: PPUSH
59822: CALL_OW 506
59826: GO 59803
59828: POP
59829: POP
// end else
59830: GO 59941
// begin first := depots [ 1 ] ;
59832: LD_ADDR_VAR 0 4
59836: PUSH
59837: LD_VAR 0 1
59841: PUSH
59842: LD_INT 1
59844: ARRAY
59845: ST_TO_ADDR
// side := GetSide ( first ) ;
59846: LD_ADDR_VAR 0 6
59850: PUSH
59851: LD_VAR 0 4
59855: PPUSH
59856: CALL_OW 255
59860: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59861: LD_EXP 34
59865: PPUSH
59866: LD_INT 81
59868: PUSH
59869: LD_VAR 0 6
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PPUSH
59878: CALL_OW 70
59882: IFFALSE 59886
// exit ;
59884: GO 59941
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59886: LD_ADDR_EXP 58
59890: PUSH
59891: LD_EXP 58
59895: PPUSH
59896: LD_VAR 0 6
59900: PPUSH
59901: LD_EXP 58
59905: PUSH
59906: LD_VAR 0 6
59910: ARRAY
59911: PUSH
59912: LD_INT 1
59914: PLUS
59915: PPUSH
59916: CALL_OW 1
59920: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59921: LD_VAR 0 6
59925: PPUSH
59926: LD_EXP 58
59930: PUSH
59931: LD_VAR 0 6
59935: ARRAY
59936: PPUSH
59937: CALL_OW 506
// end ; end ;
59941: LD_VAR 0 2
59945: RET
// function UpdateCounter ; var i ; begin
59946: LD_INT 0
59948: PPUSH
59949: PPUSH
// result := [ ] ;
59950: LD_ADDR_VAR 0 1
59954: PUSH
59955: EMPTY
59956: ST_TO_ADDR
// if mpTeamGame then
59957: LD_EXP 11
59961: IFFALSE 60028
// begin for i := 1 to mpTeams do
59963: LD_ADDR_VAR 0 2
59967: PUSH
59968: DOUBLE
59969: LD_INT 1
59971: DEC
59972: ST_TO_ADDR
59973: LD_EXP 10
59977: PUSH
59978: FOR_TO
59979: IFFALSE 60024
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59981: LD_ADDR_VAR 0 1
59985: PUSH
59986: LD_VAR 0 1
59990: PUSH
59991: LD_STRING #KingoftheHill-Team
59993: PUSH
59994: LD_VAR 0 2
59998: PUSH
59999: LD_EXP 58
60003: PUSH
60004: LD_VAR 0 2
60008: ARRAY
60009: PUSH
60010: LD_EXP 35
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: ADD
60021: ST_TO_ADDR
60022: GO 59978
60024: POP
60025: POP
// end else
60026: GO 60101
// begin for i := 1 to 8 do
60028: LD_ADDR_VAR 0 2
60032: PUSH
60033: DOUBLE
60034: LD_INT 1
60036: DEC
60037: ST_TO_ADDR
60038: LD_INT 8
60040: PUSH
60041: FOR_TO
60042: IFFALSE 60099
// if mpSidePositions [ i ] then
60044: LD_EXP 7
60048: PUSH
60049: LD_VAR 0 2
60053: ARRAY
60054: IFFALSE 60097
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60056: LD_ADDR_VAR 0 1
60060: PUSH
60061: LD_VAR 0 1
60065: PUSH
60066: LD_STRING #KingoftheHill-Player
60068: PUSH
60069: LD_VAR 0 2
60073: PUSH
60074: LD_EXP 58
60078: PUSH
60079: LD_VAR 0 2
60083: ARRAY
60084: PUSH
60085: LD_EXP 35
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: ADD
60096: ST_TO_ADDR
60097: GO 60041
60099: POP
60100: POP
// end ; mpDisplayStrings := result ;
60101: LD_ADDR_EXP 38
60105: PUSH
60106: LD_VAR 0 1
60110: ST_TO_ADDR
// end ;
60111: LD_VAR 0 1
60115: RET
// export function HowMuchPointsKing ( side ) ; begin
60116: LD_INT 0
60118: PPUSH
// result := HowMuchPoints ( side ) ;
60119: LD_ADDR_VAR 0 2
60123: PUSH
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL 60139 0 1
60133: ST_TO_ADDR
// end ;
60134: LD_VAR 0 2
60138: RET
// function HowMuchPoints ( side ) ; var i ; begin
60139: LD_INT 0
60141: PPUSH
60142: PPUSH
// if mpTeamGame then
60143: LD_EXP 11
60147: IFFALSE 60216
// begin for i := 1 to Count ( mpTeams ) do
60149: LD_ADDR_VAR 0 3
60153: PUSH
60154: DOUBLE
60155: LD_INT 1
60157: DEC
60158: ST_TO_ADDR
60159: LD_EXP 10
60163: PPUSH
60164: CALL 12220 0 1
60168: PUSH
60169: FOR_TO
60170: IFFALSE 60212
// begin if side in mpTeams [ i ] then
60172: LD_VAR 0 1
60176: PUSH
60177: LD_EXP 10
60181: PUSH
60182: LD_VAR 0 3
60186: ARRAY
60187: IN
60188: IFFALSE 60210
// begin result := mpKingPoints [ i ] ;
60190: LD_ADDR_VAR 0 2
60194: PUSH
60195: LD_EXP 58
60199: PUSH
60200: LD_VAR 0 3
60204: ARRAY
60205: ST_TO_ADDR
// exit ;
60206: POP
60207: POP
60208: GO 60232
// end ; end ;
60210: GO 60169
60212: POP
60213: POP
// end else
60214: GO 60232
// result := mpKingPoints [ side ] ;
60216: LD_ADDR_VAR 0 2
60220: PUSH
60221: LD_EXP 58
60225: PUSH
60226: LD_VAR 0 1
60230: ARRAY
60231: ST_TO_ADDR
// end ;
60232: LD_VAR 0 2
60236: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60237: LD_EXP 39
60241: IFFALSE 60249
60243: PUSH
60244: CALL 60584 0 0
60248: AND
60249: IFFALSE 60257
60251: PUSH
60252: LD_OWVAR 4
60256: AND
60257: IFFALSE 60507
60259: GO 60261
60261: DISABLE
60262: LD_INT 0
60264: PPUSH
60265: PPUSH
// begin canWin := false ;
60266: LD_ADDR_VAR 0 2
60270: PUSH
60271: LD_INT 0
60273: ST_TO_ADDR
// if not HasPower ( your_side ) then
60274: LD_OWVAR 2
60278: PPUSH
60279: CALL 60626 0 1
60283: NOT
60284: IFFALSE 60295
// begin Multiplayer_Loose_Message ;
60286: CALL_OW 521
// enable ( mpLose ) ;
60290: LD_INT 102
60292: ENABLE_MARKED
// end else
60293: GO 60507
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60295: LD_ADDR_VAR 0 2
60299: PUSH
60300: LD_OWVAR 2
60304: PPUSH
60305: CALL 60139 0 1
60309: PUSH
60310: LD_EXP 35
60314: GREATEREQUAL
60315: IFFALSE 60328
60317: PUSH
60318: LD_OWVAR 2
60322: PPUSH
60323: CALL 60626 0 1
60327: AND
60328: IFTRUE 60337
60330: PUSH
60331: CALL 60510 0 0
60335: NOT
60336: OR
60337: ST_TO_ADDR
// for i := 1 to 8 do
60338: LD_ADDR_VAR 0 1
60342: PUSH
60343: DOUBLE
60344: LD_INT 1
60346: DEC
60347: ST_TO_ADDR
60348: LD_INT 8
60350: PUSH
60351: FOR_TO
60352: IFFALSE 60493
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60354: LD_EXP 7
60358: PUSH
60359: LD_VAR 0 1
60363: ARRAY
60364: IFFALSE 60377
60366: PUSH
60367: LD_VAR 0 1
60371: PPUSH
60372: CALL_OW 108
60376: AND
60377: IFFALSE 60391
60379: PUSH
60380: LD_VAR 0 1
60384: PUSH
60385: LD_OWVAR 2
60389: NONEQUAL
60390: AND
60391: IFFALSE 60491
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60393: LD_EXP 8
60397: PUSH
60398: LD_VAR 0 1
60402: ARRAY
60403: NOT
60404: IFTRUE 60452
60406: PUSH
60407: LD_EXP 8
60411: PUSH
60412: LD_VAR 0 1
60416: ARRAY
60417: PUSH
60418: LD_EXP 8
60422: PUSH
60423: LD_OWVAR 2
60427: ARRAY
60428: NONEQUAL
60429: IFFALSE 60451
60431: PUSH
60432: LD_OWVAR 2
60436: PPUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 81
60446: PUSH
60447: LD_INT 1
60449: NONEQUAL
60450: AND
60451: OR
60452: IFFALSE 60491
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL 60139 0 1
60463: PUSH
60464: LD_EXP 35
60468: GREATEREQUAL
60469: IFFALSE 60482
60471: PUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: CALL 60626 0 1
60481: AND
60482: IFFALSE 60491
// begin enable ( mpLose ) ;
60484: LD_INT 102
60486: ENABLE_MARKED
// exit ;
60487: POP
60488: POP
60489: GO 60507
// end ;
60491: GO 60351
60493: POP
60494: POP
// if canWin then
60495: LD_VAR 0 2
60499: IFFALSE 60506
// enable ( mpWin ) else
60501: LD_INT 101
60503: ENABLE_MARKED
60504: GO 60507
// enable ;
60506: ENABLE
// end ; end ;
60507: PPOPN 2
60509: END
// function EnemiesInGame ; var i ; begin
60510: LD_INT 0
60512: PPUSH
60513: PPUSH
// result := false ;
60514: LD_ADDR_VAR 0 1
60518: PUSH
60519: LD_INT 0
60521: ST_TO_ADDR
// for i := 1 to 8 do
60522: LD_ADDR_VAR 0 2
60526: PUSH
60527: DOUBLE
60528: LD_INT 1
60530: DEC
60531: ST_TO_ADDR
60532: LD_INT 8
60534: PUSH
60535: FOR_TO
60536: IFFALSE 60577
// if i <> your_side and HasPower ( i ) then
60538: LD_VAR 0 2
60542: PUSH
60543: LD_OWVAR 2
60547: NONEQUAL
60548: IFFALSE 60561
60550: PUSH
60551: LD_VAR 0 2
60555: PPUSH
60556: CALL 60626 0 1
60560: AND
60561: IFFALSE 60575
// begin result := true ;
60563: LD_ADDR_VAR 0 1
60567: PUSH
60568: LD_INT 1
60570: ST_TO_ADDR
// exit ;
60571: POP
60572: POP
60573: GO 60579
// end ;
60575: GO 60535
60577: POP
60578: POP
// end ;
60579: LD_VAR 0 1
60583: RET
// function CanWinLoose ; begin
60584: LD_INT 0
60586: PPUSH
// result := true ;
60587: LD_ADDR_VAR 0 1
60591: PUSH
60592: LD_INT 1
60594: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60595: CALL_OW 531
60599: IFFALSE 60611
60601: PUSH
60602: CALL_OW 519
60606: PUSH
60607: LD_INT 1
60609: GREATER
60610: AND
60611: IFFALSE 60621
// result := false ;
60613: LD_ADDR_VAR 0 1
60617: PUSH
60618: LD_INT 0
60620: ST_TO_ADDR
// end ;
60621: LD_VAR 0 1
60625: RET
// function HasPower ( i ) ; begin
60626: LD_INT 0
60628: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60629: LD_ADDR_VAR 0 2
60633: PUSH
60634: LD_INT 22
60636: PUSH
60637: LD_VAR 0 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: LD_INT 21
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 33
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 33
60671: PUSH
60672: LD_INT 5
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PPUSH
60689: CALL_OW 69
60693: ST_TO_ADDR
// end ; end_of_file
60694: LD_VAR 0 2
60698: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60699: PPOPN 6
60701: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60702: LD_EXP 3
60706: PUSH
60707: LD_INT 4
60709: EQUAL
60710: IFFALSE 60746
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60712: LD_STRING setGameDifficulty(
60714: PUSH
60715: LD_OWVAR 67
60719: STR
60720: PUSH
60721: LD_STRING )
60723: STR
60724: PPUSH
60725: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60729: LD_STRING displayDifficulty(
60731: PUSH
60732: LD_OWVAR 67
60736: STR
60737: PUSH
60738: LD_STRING )
60740: STR
60741: PPUSH
60742: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60746: CALL 60775 0 0
// end ; end_of_file
60750: PPOPN 1
60752: END
// every 0 0$1 do
60753: GO 60755
60755: DISABLE
// begin enable ;
60756: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60757: LD_STRING updateTimer(
60759: PUSH
60760: LD_OWVAR 1
60764: STR
60765: PUSH
60766: LD_STRING );
60768: STR
60769: PPUSH
60770: CALL_OW 559
// end ;
60774: END
// export function SOS_MapStart ( ) ; begin
60775: LD_INT 0
60777: PPUSH
// UpdateFactoryWaypoints ( ) ;
60778: CALL 61709 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60782: CALL 61961 0 0
// ParseMultiDataToLua ( ) ;
60786: CALL 62108 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60790: LD_STRING setSpecLogoNumber(
60792: PUSH
60793: LD_INT 2
60795: STR
60796: PUSH
60797: LD_STRING ,
60799: STR
60800: PUSH
60801: LD_INT 1
60803: STR
60804: PUSH
60805: LD_STRING )
60807: STR
60808: PPUSH
60809: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60813: LD_STRING setSpecLogoNumber(
60815: PUSH
60816: LD_INT 3
60818: STR
60819: PUSH
60820: LD_STRING ,
60822: STR
60823: PUSH
60824: LD_INT 2
60826: STR
60827: PUSH
60828: LD_STRING )
60830: STR
60831: PPUSH
60832: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60836: LD_STRING setSpecLogoNumber(
60838: PUSH
60839: LD_INT 4
60841: STR
60842: PUSH
60843: LD_STRING ,
60845: STR
60846: PUSH
60847: LD_INT 3
60849: STR
60850: PUSH
60851: LD_STRING )
60853: STR
60854: PPUSH
60855: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60859: LD_STRING setSpecLogoNumber(
60861: PUSH
60862: LD_INT 5
60864: STR
60865: PUSH
60866: LD_STRING ,
60868: STR
60869: PUSH
60870: LD_INT 4
60872: STR
60873: PUSH
60874: LD_STRING )
60876: STR
60877: PPUSH
60878: CALL_OW 559
// end ;
60882: LD_VAR 0 1
60886: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60887: LD_INT 0
60889: PPUSH
60890: PPUSH
60891: PPUSH
60892: PPUSH
60893: PPUSH
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
// for i := 1 to 8 do
60898: LD_ADDR_VAR 0 2
60902: PUSH
60903: DOUBLE
60904: LD_INT 1
60906: DEC
60907: ST_TO_ADDR
60908: LD_INT 8
60910: PUSH
60911: FOR_TO
60912: IFFALSE 61297
// begin if mpSidePositions [ i ] then
60914: LD_EXP 7
60918: PUSH
60919: LD_VAR 0 2
60923: ARRAY
60924: IFFALSE 61295
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60926: LD_ADDR_VAR 0 7
60930: PUSH
60931: LD_INT 22
60933: PUSH
60934: LD_VAR 0 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 21
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PPUSH
60957: CALL_OW 69
60961: PPUSH
60962: CALL 12220 0 1
60966: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60967: LD_ADDR_VAR 0 9
60971: PUSH
60972: LD_INT 22
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: LD_INT 30
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 30
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PPUSH
61016: CALL_OW 69
61020: ST_TO_ADDR
// crates := 0 ;
61021: LD_ADDR_VAR 0 4
61025: PUSH
61026: LD_INT 0
61028: ST_TO_ADDR
// oil := 0 ;
61029: LD_ADDR_VAR 0 5
61033: PUSH
61034: LD_INT 0
61036: ST_TO_ADDR
// sib := 0 ;
61037: LD_ADDR_VAR 0 6
61041: PUSH
61042: LD_INT 0
61044: ST_TO_ADDR
// if bases then
61045: LD_VAR 0 9
61049: IFFALSE 61155
// begin for j in bases do
61051: LD_ADDR_VAR 0 3
61055: PUSH
61056: LD_VAR 0 9
61060: PUSH
61061: FOR_IN
61062: IFFALSE 61153
// begin base := GetBase ( j ) ;
61064: LD_ADDR_VAR 0 8
61068: PUSH
61069: LD_VAR 0 3
61073: PPUSH
61074: CALL_OW 274
61078: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61079: LD_ADDR_VAR 0 4
61083: PUSH
61084: LD_VAR 0 4
61088: PUSH
61089: LD_VAR 0 8
61093: PPUSH
61094: LD_INT 1
61096: PPUSH
61097: CALL_OW 275
61101: PLUS
61102: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61103: LD_ADDR_VAR 0 5
61107: PUSH
61108: LD_VAR 0 5
61112: PUSH
61113: LD_VAR 0 8
61117: PPUSH
61118: LD_INT 2
61120: PPUSH
61121: CALL_OW 275
61125: PLUS
61126: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61127: LD_ADDR_VAR 0 6
61131: PUSH
61132: LD_VAR 0 6
61136: PUSH
61137: LD_VAR 0 8
61141: PPUSH
61142: LD_INT 3
61144: PPUSH
61145: CALL_OW 275
61149: PLUS
61150: ST_TO_ADDR
// end ;
61151: GO 61061
61153: POP
61154: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61155: LD_STRING setSpecText(
61157: PUSH
61158: LD_VAR 0 2
61162: STR
61163: PUSH
61164: LD_STRING ,
61166: STR
61167: PUSH
61168: LD_INT 2
61170: STR
61171: PUSH
61172: LD_STRING ,
61174: STR
61175: PUSH
61176: LD_VAR 0 4
61180: STR
61181: PUSH
61182: LD_STRING )
61184: STR
61185: PPUSH
61186: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61190: LD_STRING setSpecText(
61192: PUSH
61193: LD_VAR 0 2
61197: STR
61198: PUSH
61199: LD_STRING ,
61201: STR
61202: PUSH
61203: LD_INT 3
61205: STR
61206: PUSH
61207: LD_STRING ,
61209: STR
61210: PUSH
61211: LD_VAR 0 5
61215: STR
61216: PUSH
61217: LD_STRING )
61219: STR
61220: PPUSH
61221: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61225: LD_STRING setSpecText(
61227: PUSH
61228: LD_VAR 0 2
61232: STR
61233: PUSH
61234: LD_STRING ,
61236: STR
61237: PUSH
61238: LD_INT 4
61240: STR
61241: PUSH
61242: LD_STRING ,
61244: STR
61245: PUSH
61246: LD_VAR 0 6
61250: STR
61251: PUSH
61252: LD_STRING )
61254: STR
61255: PPUSH
61256: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61260: LD_STRING setSpecText(
61262: PUSH
61263: LD_VAR 0 2
61267: STR
61268: PUSH
61269: LD_STRING ,
61271: STR
61272: PUSH
61273: LD_INT 5
61275: STR
61276: PUSH
61277: LD_STRING ,
61279: STR
61280: PUSH
61281: LD_VAR 0 7
61285: STR
61286: PUSH
61287: LD_STRING )
61289: STR
61290: PPUSH
61291: CALL_OW 559
// end ; end ;
61295: GO 60911
61297: POP
61298: POP
// end ;
61299: LD_VAR 0 1
61303: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61304: LD_INT 2
61306: PUSH
61307: LD_INT 30
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 30
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: PPUSH
61332: CALL_OW 69
61336: IFFALSE 61346
61338: GO 61340
61340: DISABLE
// begin enable ;
61341: ENABLE
// UpdateSpectatorBar ;
61342: CALL 60887 0 0
// end ;
61346: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61347: LD_INT 0
61349: PPUSH
// end ;
61350: LD_VAR 0 12
61354: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61355: LD_INT 0
61357: PPUSH
61358: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61359: LD_VAR 0 1
61363: NOT
61364: IFTRUE 61383
61366: PUSH
61367: LD_VAR 0 2
61371: PPUSH
61372: LD_VAR 0 3
61376: PPUSH
61377: CALL_OW 488
61381: NOT
61382: OR
61383: IFTRUE 61418
61385: PUSH
61386: LD_VAR 0 1
61390: PPUSH
61391: CALL_OW 266
61395: PUSH
61396: LD_INT 3
61398: NONEQUAL
61399: IFFALSE 61417
61401: PUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 247
61411: PUSH
61412: LD_INT 1
61414: EQUAL
61415: NOT
61416: AND
61417: OR
61418: IFFALSE 61422
// exit ;
61420: GO 61704
// if GetType ( factory ) = unit_human then
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 247
61431: PUSH
61432: LD_INT 1
61434: EQUAL
61435: IFFALSE 61452
// factory := IsInUnit ( factory ) ;
61437: LD_ADDR_VAR 0 1
61441: PUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 310
61451: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 266
61461: PUSH
61462: LD_INT 3
61464: NONEQUAL
61465: IFFALSE 61469
// exit ;
61467: GO 61704
// for i := 1 to Count ( factoryWaypoints ) do
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: DOUBLE
61475: LD_INT 1
61477: DEC
61478: ST_TO_ADDR
61479: LD_EXP 59
61483: PPUSH
61484: CALL 12220 0 1
61488: PUSH
61489: FOR_TO
61490: IFFALSE 61652
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61492: LD_VAR 0 2
61496: PPUSH
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL_OW 428
61506: PUSH
61507: LD_EXP 59
61511: PUSH
61512: LD_VAR 0 5
61516: ARRAY
61517: PUSH
61518: LD_INT 2
61520: ARRAY
61521: EQUAL
61522: IFFALSE 61554
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61524: LD_ADDR_EXP 59
61528: PUSH
61529: LD_EXP 59
61533: PPUSH
61534: LD_VAR 0 5
61538: PPUSH
61539: CALL_OW 3
61543: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61544: CALL 61709 0 0
// exit ;
61548: POP
61549: POP
61550: GO 61704
// end else
61552: GO 61650
// if factory = factoryWaypoints [ i ] [ 2 ] then
61554: LD_VAR 0 1
61558: PUSH
61559: LD_EXP 59
61563: PUSH
61564: LD_VAR 0 5
61568: ARRAY
61569: PUSH
61570: LD_INT 2
61572: ARRAY
61573: EQUAL
61574: IFFALSE 61650
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61576: LD_ADDR_EXP 59
61580: PUSH
61581: LD_EXP 59
61585: PPUSH
61586: LD_VAR 0 5
61590: PPUSH
61591: CALL_OW 3
61595: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61596: LD_ADDR_EXP 59
61600: PUSH
61601: LD_EXP 59
61605: PPUSH
61606: LD_VAR 0 1
61610: PPUSH
61611: CALL_OW 255
61615: PUSH
61616: LD_VAR 0 1
61620: PUSH
61621: LD_VAR 0 2
61625: PUSH
61626: LD_VAR 0 3
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: PPUSH
61637: CALL 48152 0 2
61641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61642: CALL 61709 0 0
// exit ;
61646: POP
61647: POP
61648: GO 61704
// end ; end ;
61650: GO 61489
61652: POP
61653: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61654: LD_ADDR_EXP 59
61658: PUSH
61659: LD_EXP 59
61663: PPUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL_OW 255
61673: PUSH
61674: LD_VAR 0 1
61678: PUSH
61679: LD_VAR 0 2
61683: PUSH
61684: LD_VAR 0 3
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: PPUSH
61695: CALL 48152 0 2
61699: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61700: CALL 61709 0 0
// end ;
61704: LD_VAR 0 4
61708: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61709: LD_INT 0
61711: PPUSH
61712: PPUSH
61713: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61714: LD_STRING resetFactoryWaypoint();
61716: PPUSH
61717: CALL_OW 559
// if factoryWaypoints then
61721: LD_EXP 59
61725: IFFALSE 61846
// begin list := factoryWaypoints ;
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_EXP 59
61736: ST_TO_ADDR
// for i := 1 to list do
61737: LD_ADDR_VAR 0 2
61741: PUSH
61742: DOUBLE
61743: LD_INT 1
61745: DEC
61746: ST_TO_ADDR
61747: LD_VAR 0 3
61751: PUSH
61752: FOR_TO
61753: IFFALSE 61844
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61755: LD_STRING setFactoryWaypointXY(
61757: PUSH
61758: LD_VAR 0 3
61762: PUSH
61763: LD_VAR 0 2
61767: ARRAY
61768: PUSH
61769: LD_INT 1
61771: ARRAY
61772: STR
61773: PUSH
61774: LD_STRING ,
61776: STR
61777: PUSH
61778: LD_VAR 0 3
61782: PUSH
61783: LD_VAR 0 2
61787: ARRAY
61788: PUSH
61789: LD_INT 2
61791: ARRAY
61792: STR
61793: PUSH
61794: LD_STRING ,
61796: STR
61797: PUSH
61798: LD_VAR 0 3
61802: PUSH
61803: LD_VAR 0 2
61807: ARRAY
61808: PUSH
61809: LD_INT 3
61811: ARRAY
61812: STR
61813: PUSH
61814: LD_STRING ,
61816: STR
61817: PUSH
61818: LD_VAR 0 3
61822: PUSH
61823: LD_VAR 0 2
61827: ARRAY
61828: PUSH
61829: LD_INT 4
61831: ARRAY
61832: STR
61833: PUSH
61834: LD_STRING )
61836: STR
61837: PPUSH
61838: CALL_OW 559
61842: GO 61752
61844: POP
61845: POP
// end ; end ;
61846: LD_VAR 0 1
61850: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61851: LD_INT 0
61853: PPUSH
// if HexInfo ( x , y ) = warehouse then
61854: LD_VAR 0 2
61858: PPUSH
61859: LD_VAR 0 3
61863: PPUSH
61864: CALL_OW 428
61868: PUSH
61869: LD_VAR 0 1
61873: EQUAL
61874: IFFALSE 61901
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61876: LD_ADDR_EXP 61
61880: PUSH
61881: LD_EXP 61
61885: PPUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: LD_INT 0
61893: PPUSH
61894: CALL_OW 1
61898: ST_TO_ADDR
61899: GO 61952
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61901: LD_ADDR_EXP 61
61905: PUSH
61906: LD_EXP 61
61910: PPUSH
61911: LD_VAR 0 1
61915: PPUSH
61916: LD_VAR 0 1
61920: PPUSH
61921: CALL_OW 255
61925: PUSH
61926: LD_VAR 0 1
61930: PUSH
61931: LD_VAR 0 2
61935: PUSH
61936: LD_VAR 0 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: PPUSH
61947: CALL_OW 1
61951: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61952: CALL 61961 0 0
// end ;
61956: LD_VAR 0 4
61960: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
61965: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61966: LD_STRING resetWarehouseGatheringPoints();
61968: PPUSH
61969: CALL_OW 559
// if warehouseGatheringPoints then
61973: LD_EXP 61
61977: IFFALSE 62103
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61979: LD_ADDR_VAR 0 3
61983: PUSH
61984: LD_EXP 61
61988: PPUSH
61989: CALL 52086 0 1
61993: ST_TO_ADDR
// for i := 1 to list do
61994: LD_ADDR_VAR 0 2
61998: PUSH
61999: DOUBLE
62000: LD_INT 1
62002: DEC
62003: ST_TO_ADDR
62004: LD_VAR 0 3
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62101
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62012: LD_STRING setWarehouseGatheringPointXY(
62014: PUSH
62015: LD_VAR 0 3
62019: PUSH
62020: LD_VAR 0 2
62024: ARRAY
62025: PUSH
62026: LD_INT 1
62028: ARRAY
62029: STR
62030: PUSH
62031: LD_STRING ,
62033: STR
62034: PUSH
62035: LD_VAR 0 3
62039: PUSH
62040: LD_VAR 0 2
62044: ARRAY
62045: PUSH
62046: LD_INT 2
62048: ARRAY
62049: STR
62050: PUSH
62051: LD_STRING ,
62053: STR
62054: PUSH
62055: LD_VAR 0 3
62059: PUSH
62060: LD_VAR 0 2
62064: ARRAY
62065: PUSH
62066: LD_INT 3
62068: ARRAY
62069: STR
62070: PUSH
62071: LD_STRING ,
62073: STR
62074: PUSH
62075: LD_VAR 0 3
62079: PUSH
62080: LD_VAR 0 2
62084: ARRAY
62085: PUSH
62086: LD_INT 4
62088: ARRAY
62089: STR
62090: PUSH
62091: LD_STRING )
62093: STR
62094: PPUSH
62095: CALL_OW 559
62099: GO 62009
62101: POP
62102: POP
// end ; end ;
62103: LD_VAR 0 1
62107: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62108: LD_INT 0
62110: PPUSH
62111: PPUSH
// if not mpSidePositions then
62112: LD_EXP 7
62116: NOT
62117: IFFALSE 62121
// exit ;
62119: GO 62192
// result :=  ;
62121: LD_ADDR_VAR 0 1
62125: PUSH
62126: LD_STRING 
62128: ST_TO_ADDR
// for i := 1 to 8 do
62129: LD_ADDR_VAR 0 2
62133: PUSH
62134: DOUBLE
62135: LD_INT 1
62137: DEC
62138: ST_TO_ADDR
62139: LD_INT 8
62141: PUSH
62142: FOR_TO
62143: IFFALSE 62173
// begin result := result & mpSidePositions [ i ] & ; ;
62145: LD_ADDR_VAR 0 1
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_EXP 7
62159: PUSH
62160: LD_VAR 0 2
62164: ARRAY
62165: STR
62166: PUSH
62167: LD_STRING ;
62169: STR
62170: ST_TO_ADDR
// end ;
62171: GO 62142
62173: POP
62174: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62175: LD_STRING setMultiplayerRealPosition("
62177: PUSH
62178: LD_VAR 0 1
62182: STR
62183: PUSH
62184: LD_STRING ");
62186: STR
62187: PPUSH
62188: CALL_OW 559
// end ;
62192: LD_VAR 0 1
62196: RET
