// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3049 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 36
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 35
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 32
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 51396 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 51396 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 51396 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 51396 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 51396 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 51396 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 11248 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 51229 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 51229 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 51229 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 51229 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 51229 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 51229 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 51229 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 51229 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 51229 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 51229 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 51229 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 51229 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 51396 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 51396 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 51396 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 51396 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 51396 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 51396 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 51396 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 51396 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 51396 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 51396 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 51396 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 51396 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 51396 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 51396 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 51396 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 51396 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 51396 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 51396 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 48218 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 52104 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7571 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 52121 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8174 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 52162 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8227 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpDepots := [ ] ;
2805: LD_ADDR_EXP 14
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpBuildings := [ ] ;
2812: LD_ADDR_EXP 17
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2819: LD_ADDR_EXP 18
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2826: LD_ADDR_EXP 19
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2833: LD_ADDR_EXP 20
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpStartingResources := [ ] ;
2840: LD_ADDR_EXP 15
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpStartPos := [ ] ;
2847: LD_ADDR_EXP 21
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2854: LD_ADDR_EXP 22
2858: PUSH
2859: LD_INT 1
2861: NEG
2862: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2863: LD_ADDR_EXP 23
2867: PUSH
2868: EMPTY
2869: ST_TO_ADDR
// mpApemans := [ ] ;
2870: LD_ADDR_EXP 30
2874: PUSH
2875: EMPTY
2876: ST_TO_ADDR
// mpApemansArea := [ ] ;
2877: LD_ADDR_EXP 31
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpRespawn := [ ] ;
2884: LD_ADDR_EXP 32
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpKingArea := 0 ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// mpPoints := [ ] ;
2899: LD_ADDR_EXP 34
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpVehicles := 0 ;
2906: LD_ADDR_EXP 35
2910: PUSH
2911: LD_INT 0
2913: ST_TO_ADDR
// mpShipments := 0 ;
2914: LD_ADDR_EXP 27
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2922: LD_ADDR_EXP 39
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: ST_TO_ADDR
// mpEmissions := 0 ;
2953: LD_ADDR_EXP 36
2957: PUSH
2958: LD_INT 0
2960: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2961: LD_ADDR_EXP 25
2965: PUSH
2966: LD_INT 3
2968: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2969: LD_ADDR_EXP 24
2973: PUSH
2974: LD_INT 15
2976: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2977: LD_ADDR_EXP 37
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// mpGameActive := false ;
2985: LD_ADDR_EXP 38
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpBlockRespThread := false ;
2993: LD_ADDR_EXP 40
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// for i := 1 to 32 do
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 32
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3042
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3017: LD_ADDR_EXP 6
3021: PUSH
3022: LD_EXP 6
3026: PPUSH
3027: LD_VAR 0 2
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 1
3039: ST_TO_ADDR
3040: GO 3014
3042: POP
3043: POP
// end ;
3044: LD_VAR 0 1
3048: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3049: LD_INT 0
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3065: LD_ADDR_VAR 0 14
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 3
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: ST_TO_ADDR
// for i in gameTypes do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_VAR 0 14
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3104
// disable ( i ) ;
3097: LD_VAR 0 2
3101: DISABLE_MARKED
3102: GO 3094
3104: POP
3105: POP
// if Multiplayer then
3106: LD_OWVAR 4
3110: IFFALSE 3294
// begin mpGameType := mp_game_type ;
3112: LD_ADDR_EXP 3
3116: PUSH
3117: LD_OWVAR 6
3121: ST_TO_ADDR
// your_side := mp_player_side ;
3122: LD_ADDR_OWVAR 2
3126: PUSH
3127: LD_OWVAR 7
3131: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3132: LD_ADDR_EXP 7
3136: PUSH
3137: LD_OWVAR 17
3141: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3142: LD_ADDR_EXP 8
3146: PUSH
3147: LD_OWVAR 15
3151: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3152: LD_ADDR_EXP 9
3156: PUSH
3157: LD_OWVAR 16
3161: ST_TO_ADDR
// mpTeams := mp_teams ;
3162: LD_ADDR_EXP 10
3166: PUSH
3167: LD_OWVAR 12
3171: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_EXP 4
3186: PPUSH
3187: CALL 11248 0 1
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3269
// begin setting := mpGameSettingsKeys [ i ] ;
3195: LD_ADDR_VAR 0 12
3199: PUSH
3200: LD_EXP 4
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: ST_TO_ADDR
// if setting then
3211: LD_VAR 0 12
3215: IFFALSE 3267
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3217: LD_ADDR_EXP 6
3221: PUSH
3222: LD_EXP 6
3226: PPUSH
3227: LD_VAR 0 2
3231: PPUSH
3232: LD_EXP 5
3236: PUSH
3237: LD_VAR 0 2
3241: ARRAY
3242: PUSH
3243: LD_VAR 0 2
3247: PUSH
3248: LD_INT 1
3250: MINUS
3251: PPUSH
3252: CALL_OW 426
3256: PUSH
3257: LD_INT 1
3259: PLUS
3260: ARRAY
3261: PPUSH
3262: CALL_OW 1
3266: ST_TO_ADDR
// end ;
3267: GO 3192
3269: POP
3270: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3271: LD_ADDR_EXP 11
3275: PUSH
3276: LD_EXP 8
3280: PUSH
3281: LD_INT 0
3283: PUSH
3284: EMPTY
3285: LIST
3286: DIFF
3287: PUSH
3288: LD_INT 1
3290: GREATER
3291: ST_TO_ADDR
// end else
3292: GO 3294
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3294: LD_EXP 3
3298: PPUSH
3299: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3303: LD_EXP 18
3307: PPUSH
3308: CALL 11248 0 1
3312: IFFALSE 3343
// begin for i in mpMarkedAreas do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_EXP 18
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3341
// SetAreaMapShow ( i , 0 ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 424
3339: GO 3324
3341: POP
3342: POP
// end ; for i := 1 to 8 do
3343: LD_ADDR_VAR 0 2
3347: PUSH
3348: DOUBLE
3349: LD_INT 1
3351: DEC
3352: ST_TO_ADDR
3353: LD_INT 8
3355: PUSH
3356: FOR_TO
3357: IFFALSE 4573
// begin if not mpSidePositions [ i ] then
3359: LD_EXP 7
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: NOT
3370: IFFALSE 3374
// continue ;
3372: GO 3356
// side := i ;
3374: LD_ADDR_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3384: LD_ADDR_VAR 0 9
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_VAR 0 2
3398: ARRAY
3399: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3400: LD_ADDR_VAR 0 8
3404: PUSH
3405: LD_EXP 7
3409: PUSH
3410: LD_VAR 0 2
3414: ARRAY
3415: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3416: LD_EXP 12
3420: PPUSH
3421: CALL 11248 0 1
3425: IFFALSE 3502
// begin for j in mpOilDeposits [ pos ] do
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: LD_EXP 12
3436: PUSH
3437: LD_VAR 0 8
3441: ARRAY
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3500
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3446: LD_VAR 0 3
3450: PUSH
3451: LD_INT 1
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_INT 2
3462: ARRAY
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_VAR 0 7
3493: PPUSH
3494: CALL_OW 441
// end ;
3498: GO 3443
3500: POP
3501: POP
// end ; if Count ( mpSibDeposits ) then
3502: LD_EXP 13
3506: PPUSH
3507: CALL 11248 0 1
3511: IFFALSE 3588
// begin for j in mpSibDeposits [ pos ] do
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: LD_EXP 13
3522: PUSH
3523: LD_VAR 0 8
3527: ARRAY
3528: PUSH
3529: FOR_IN
3530: IFFALSE 3586
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 3
3545: PUSH
3546: LD_INT 2
3548: ARRAY
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_VAR 0 7
3579: PPUSH
3580: CALL_OW 441
// end ;
3584: GO 3529
3586: POP
3587: POP
// end ; InitBc ;
3588: CALL_OW 21
// InitUc ;
3592: CALL_OW 18
// uc_side := side ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_VAR 0 7
3605: ST_TO_ADDR
// uc_nation := nation ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_VAR 0 9
3615: ST_TO_ADDR
// if Count ( mpDepots ) then
3616: LD_EXP 14
3620: PPUSH
3621: CALL 11248 0 1
3625: IFFALSE 3795
// begin bc_level := 0 ;
3627: LD_ADDR_OWVAR 43
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// bc_type := b_depot ;
3635: LD_ADDR_OWVAR 42
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3643: LD_ADDR_VAR 0 4
3647: PUSH
3648: LD_EXP 14
3652: PUSH
3653: LD_VAR 0 8
3657: ARRAY
3658: PUSH
3659: LD_INT 1
3661: ARRAY
3662: PPUSH
3663: LD_EXP 14
3667: PUSH
3668: LD_VAR 0 8
3672: ARRAY
3673: PUSH
3674: LD_INT 2
3676: ARRAY
3677: PPUSH
3678: LD_EXP 14
3682: PUSH
3683: LD_VAR 0 8
3687: ARRAY
3688: PUSH
3689: LD_INT 3
3691: ARRAY
3692: PPUSH
3693: CALL_OW 47
3697: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING @
3705: PUSH
3706: LD_VAR 0 7
3710: STR
3711: PPUSH
3712: CALL_OW 500
// SetTag ( b , side ) ;
3716: LD_VAR 0 4
3720: PPUSH
3721: LD_VAR 0 7
3725: PPUSH
3726: CALL_OW 109
// if Count ( mpStartingResources ) then
3730: LD_EXP 15
3734: PPUSH
3735: CALL 11248 0 1
3739: IFFALSE 3793
// begin for j := 1 to mpStartingResources do
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_EXP 15
3755: PUSH
3756: FOR_TO
3757: IFFALSE 3791
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3759: LD_VAR 0 4
3763: PPUSH
3764: CALL_OW 274
3768: PPUSH
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_EXP 15
3778: PUSH
3779: LD_VAR 0 3
3783: ARRAY
3784: PPUSH
3785: CALL_OW 277
3789: GO 3756
3791: POP
3792: POP
// end ; end else
3793: GO 3942
// if Count ( mpStartingResources ) then
3795: LD_EXP 15
3799: PPUSH
3800: CALL 11248 0 1
3804: IFFALSE 3942
// begin for j := 1 to mpStartingResources do
3806: LD_ADDR_VAR 0 3
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_EXP 15
3820: PUSH
3821: FOR_TO
3822: IFFALSE 3940
// begin resources := mpStartingResources [ j ] ;
3824: LD_ADDR_VAR 0 13
3828: PUSH
3829: LD_EXP 15
3833: PUSH
3834: LD_VAR 0 3
3838: ARRAY
3839: ST_TO_ADDR
// repeat if resources >= 50 then
3840: LD_VAR 0 13
3844: PUSH
3845: LD_INT 50
3847: GREATEREQUAL
3848: IFFALSE 3894
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 5
3857: PPUSH
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_VAR 0 6
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 60
// resources := resources - 50 ;
3878: LD_ADDR_VAR 0 13
3882: PUSH
3883: LD_VAR 0 13
3887: PUSH
3888: LD_INT 50
3890: MINUS
3891: ST_TO_ADDR
// end else
3892: GO 3928
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: LD_VAR 0 13
3903: PUSH
3904: LD_INT 10
3906: DIV
3907: PPUSH
3908: LD_VAR 0 5
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 60
// until resources <= 0 ;
3928: LD_VAR 0 13
3932: PUSH
3933: LD_INT 0
3935: LESSEQUAL
3936: IFFALSE 3840
// end ;
3938: GO 3821
3940: POP
3941: POP
// end ; if Count ( mpBuildings ) then
3942: LD_EXP 17
3946: PPUSH
3947: CALL 11248 0 1
3951: IFFALSE 4029
// begin for j in mpBuildings [ pos ] do
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: LD_EXP 17
3962: PUSH
3963: LD_VAR 0 8
3967: ARRAY
3968: PUSH
3969: FOR_IN
3970: IFFALSE 4027
// begin bc_level := 0 ;
3972: LD_ADDR_OWVAR 43
3976: PUSH
3977: LD_INT 0
3979: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3980: LD_ADDR_OWVAR 42
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3994: LD_VAR 0 3
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 3
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 3
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 47
// end ;
4025: GO 3969
4027: POP
4028: POP
// end ; if mpBattleFlag > - 1 then
4029: LD_EXP 22
4033: PUSH
4034: LD_INT 1
4036: NEG
4037: GREATER
4038: IFFALSE 4197
// begin x := mpStartPos [ pos ] [ 1 ] ;
4040: LD_ADDR_VAR 0 5
4044: PUSH
4045: LD_EXP 21
4049: PUSH
4050: LD_VAR 0 8
4054: ARRAY
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4060: LD_ADDR_VAR 0 6
4064: PUSH
4065: LD_EXP 21
4069: PUSH
4070: LD_VAR 0 8
4074: ARRAY
4075: PUSH
4076: LD_INT 2
4078: ARRAY
4079: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4080: LD_VAR 0 5
4084: PPUSH
4085: LD_VAR 0 6
4089: PPUSH
4090: LD_INT 12
4092: PPUSH
4093: LD_INT 2
4095: PPUSH
4096: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4100: LD_ADDR_EXP 23
4104: PUSH
4105: LD_EXP 23
4109: PPUSH
4110: LD_VAR 0 7
4114: PPUSH
4115: LD_VAR 0 7
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: LD_INT 1
4132: PUSH
4133: LD_INT 100
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 70
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 40
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 10
4162: PUSH
4163: LD_INT 25
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 20
4172: PUSH
4173: LD_INT 100
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: PPUSH
4187: CALL_OW 418
4191: PPUSH
4192: CALL_OW 1
4196: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4197: LD_EXP 26
4201: PUSH
4202: LD_INT 20
4204: PPUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: CALL_OW 321
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: AND
4219: IFFALSE 4236
// SetTech ( tech_SibDet , side , state_researched ) ;
4221: LD_INT 20
4223: PPUSH
4224: LD_VAR 0 7
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4236: LD_INT 24
4238: PPUSH
4239: LD_VAR 0 7
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL_OW 322
// if mpSibBomb = 1 then
4251: LD_EXP 28
4255: PUSH
4256: LD_INT 1
4258: EQUAL
4259: IFFALSE 4278
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4261: LD_INT 25
4263: PPUSH
4264: LD_VAR 0 7
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: CALL_OW 322
// end else
4276: GO 4293
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4278: LD_INT 25
4280: PPUSH
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 322
// end ; if mpVehicles then
4293: LD_EXP 35
4297: IFFALSE 4396
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: LD_VAR 0 7
4308: PPUSH
4309: LD_VAR 0 9
4313: PPUSH
4314: LD_EXP 35
4318: PPUSH
4319: CALL 5483 0 3
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4394
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4327: LD_VAR 0 3
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: LD_INT 5
4337: PPUSH
4338: CALL_OW 12
4342: PPUSH
4343: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_EXP 21
4356: PUSH
4357: LD_VAR 0 8
4361: ARRAY
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_EXP 21
4371: PUSH
4372: LD_VAR 0 8
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: PPUSH
4382: LD_INT 12
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 50
// end ;
4392: GO 4324
4394: POP
4395: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4396: LD_ADDR_VAR 0 11
4400: PUSH
4401: LD_VAR 0 7
4405: PPUSH
4406: LD_VAR 0 9
4410: PPUSH
4411: LD_EXP 24
4415: PPUSH
4416: LD_EXP 25
4420: PPUSH
4421: CALL 4985 0 4
4425: ST_TO_ADDR
// for j in team do
4426: LD_ADDR_VAR 0 3
4430: PUSH
4431: LD_VAR 0 11
4435: PUSH
4436: FOR_IN
4437: IFFALSE 4486
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: LD_EXP 21
4448: PUSH
4449: LD_VAR 0 8
4453: ARRAY
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PPUSH
4459: LD_EXP 21
4463: PUSH
4464: LD_VAR 0 8
4468: ARRAY
4469: PUSH
4470: LD_INT 2
4472: ARRAY
4473: PPUSH
4474: LD_INT 12
4476: PPUSH
4477: LD_INT 0
4479: PPUSH
4480: CALL_OW 50
4484: GO 4436
4486: POP
4487: POP
// if mpApemans then
4488: LD_EXP 30
4492: IFFALSE 4571
// begin for j := 1 to mpApemans do
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_EXP 30
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin PrepareApeman ( - 5 ) ;
4512: LD_INT 5
4514: NEG
4515: PPUSH
4516: CALL 43105 0 1
// ape := CreateHuman ;
4520: LD_ADDR_VAR 0 10
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// SetTag ( ape , side ) ;
4530: LD_VAR 0 10
4534: PPUSH
4535: LD_VAR 0 7
4539: PPUSH
4540: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4544: LD_VAR 0 10
4548: PPUSH
4549: LD_EXP 31
4553: PUSH
4554: LD_VAR 0 8
4558: ARRAY
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ;
4567: GO 4509
4569: POP
4570: POP
// end ; end ;
4571: GO 3356
4573: POP
4574: POP
// if not mpTeamGame then
4575: LD_EXP 11
4579: NOT
4580: IFFALSE 4678
// begin for i := 1 to 8 do
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: DOUBLE
4588: LD_INT 1
4590: DEC
4591: ST_TO_ADDR
4592: LD_INT 8
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4674
// for j := 1 to 8 do
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: DOUBLE
4604: LD_INT 1
4606: DEC
4607: ST_TO_ADDR
4608: LD_INT 8
4610: PUSH
4611: FOR_TO
4612: IFFALSE 4670
// if i <> j then
4614: LD_VAR 0 2
4618: PUSH
4619: LD_VAR 0 3
4623: NONEQUAL
4624: IFFALSE 4648
// SetAttitude ( i , j , att_neutral , true ) else
4626: LD_VAR 0 2
4630: PPUSH
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 80
4646: GO 4668
// SetAttitude ( i , j , att_friend , true ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_VAR 0 3
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL_OW 80
4668: GO 4611
4670: POP
4671: POP
4672: GO 4595
4674: POP
4675: POP
// end else
4676: GO 4853
// begin if mpSharedVision then
4678: LD_EXP 16
4682: IFFALSE 4747
// begin for i in mpTeams do
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: LD_EXP 10
4693: PUSH
4694: FOR_IN
4695: IFFALSE 4745
// for j := 2 to i do
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: DOUBLE
4703: LD_INT 2
4705: DEC
4706: ST_TO_ADDR
4707: LD_VAR 0 2
4711: PUSH
4712: FOR_TO
4713: IFFALSE 4741
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4715: LD_VAR 0 2
4719: PUSH
4720: LD_VAR 0 3
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 2
4730: PUSH
4731: LD_INT 1
4733: ARRAY
4734: PPUSH
4735: CALL_OW 343
4739: GO 4712
4741: POP
4742: POP
4743: GO 4694
4745: POP
4746: POP
// end ; for i := 1 to 8 do
4747: LD_ADDR_VAR 0 2
4751: PUSH
4752: DOUBLE
4753: LD_INT 1
4755: DEC
4756: ST_TO_ADDR
4757: LD_INT 8
4759: PUSH
4760: FOR_TO
4761: IFFALSE 4851
// for j := 1 to 8 do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_INT 1
4771: DEC
4772: ST_TO_ADDR
4773: LD_INT 8
4775: PUSH
4776: FOR_TO
4777: IFFALSE 4847
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4779: LD_EXP 8
4783: PUSH
4784: LD_VAR 0 2
4788: ARRAY
4789: PUSH
4790: LD_EXP 8
4794: PUSH
4795: LD_VAR 0 3
4799: ARRAY
4800: EQUAL
4801: IFFALSE 4825
// SetAttitude ( i , j , att_friend , true ) else
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 1
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 80
4823: GO 4845
// SetAttitude ( i , j , att_enemy , true ) ;
4825: LD_VAR 0 2
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 2
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 80
4845: GO 4776
4847: POP
4848: POP
4849: GO 4760
4851: POP
4852: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4853: LD_ADDR_OWVAR 71
4857: PUSH
4858: LD_EXP 9
4862: PUSH
4863: LD_OWVAR 2
4867: ARRAY
4868: ST_TO_ADDR
// if IAmSpec then
4869: CALL_OW 531
4873: IFFALSE 4914
// begin FogOff ( true ) ;
4875: LD_INT 1
4877: PPUSH
4878: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4882: LD_EXP 29
4886: PUSH
4887: LD_INT 1
4889: ARRAY
4890: PUSH
4891: LD_INT 2
4893: DIV
4894: PPUSH
4895: LD_EXP 29
4899: PUSH
4900: LD_INT 2
4902: ARRAY
4903: PUSH
4904: LD_INT 2
4906: DIV
4907: PPUSH
4908: CALL_OW 86
// end else
4912: GO 4960
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4914: LD_EXP 21
4918: PUSH
4919: LD_EXP 7
4923: PUSH
4924: LD_OWVAR 2
4928: ARRAY
4929: ARRAY
4930: PUSH
4931: LD_INT 1
4933: ARRAY
4934: PPUSH
4935: LD_EXP 21
4939: PUSH
4940: LD_EXP 7
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 2
4954: ARRAY
4955: PPUSH
4956: CALL_OW 86
// end ; BeginBuildUp ;
4960: CALL 5961 0 0
// enable ( mpActive ) ;
4964: LD_INT 100
4966: ENABLE_MARKED
// enable ( mpGameType ) ;
4967: LD_EXP 3
4971: ENABLE_MARKED
// mpGameActive := true ;
4972: LD_ADDR_EXP 38
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// end ;
4980: LD_VAR 0 1
4984: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
4989: PPUSH
4990: PPUSH
// result := [ ] ;
4991: LD_ADDR_VAR 0 5
4995: PUSH
4996: EMPTY
4997: ST_TO_ADDR
// class := class_soldier ;
4998: LD_ADDR_VAR 0 8
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// uc_side := side ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_VAR 0 1
5015: ST_TO_ADDR
// uc_nation := nation ;
5016: LD_ADDR_OWVAR 21
5020: PUSH
5021: LD_VAR 0 2
5025: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5026: LD_ADDR_OWVAR 26
5030: PUSH
5031: LD_OWVAR 19
5035: PUSH
5036: LD_VAR 0 1
5040: ARRAY
5041: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5042: LD_INT 1
5044: PPUSH
5045: LD_INT 2
5047: PPUSH
5048: CALL_OW 12
5052: PPUSH
5053: LD_VAR 0 8
5057: PPUSH
5058: LD_VAR 0 4
5062: PUSH
5063: LD_INT 2
5065: PLUS
5066: PPUSH
5067: CALL_OW 380
// hc_importance := 105 ;
5071: LD_ADDR_OWVAR 32
5075: PUSH
5076: LD_INT 105
5078: ST_TO_ADDR
// if Multiplayer then
5079: LD_OWVAR 4
5083: IFFALSE 5123
// begin hc_gallery := MULTIAVATARS ;
5085: LD_ADDR_OWVAR 33
5089: PUSH
5090: LD_STRING MULTIAVATARS
5092: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5093: LD_ADDR_OWVAR 34
5097: PUSH
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 525
5107: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5108: LD_ADDR_OWVAR 27
5112: PUSH
5113: LD_VAR 0 1
5117: PPUSH
5118: CALL_OW 526
5122: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5123: LD_ADDR_VAR 0 5
5127: PUSH
5128: LD_VAR 0 5
5132: PPUSH
5133: CALL_OW 44
5137: PPUSH
5138: CALL 46857 0 2
5142: ST_TO_ADDR
// if mpTeamPreset then
5143: LD_LOC 1
5147: IFFALSE 5243
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5149: LD_LOC 1
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: LD_VAR 0 5
5162: PUSH
5163: LD_VAR 0 5
5167: ARRAY
5168: PPUSH
5169: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5173: LD_VAR 0 5
5177: PUSH
5178: LD_VAR 0 5
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_LOC 1
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: CALL_OW 260
5203: PPUSH
5204: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 5
5217: ARRAY
5218: PPUSH
5219: LD_INT 2
5221: PPUSH
5222: LD_LOC 1
5226: PUSH
5227: LD_INT 1
5229: ARRAY
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: CALL_OW 260
5238: PPUSH
5239: CALL_OW 239
// end ; InitHc_All ( ) ;
5243: CALL_OW 584
// class := 2 ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 2
5254: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: DOUBLE
5261: LD_INT 1
5263: DEC
5264: ST_TO_ADDR
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 1
5272: MINUS
5273: PUSH
5274: FOR_TO
5275: IFFALSE 5459
// begin PrepareHuman ( false , class , skill ) ;
5277: LD_INT 0
5279: PPUSH
5280: LD_VAR 0 8
5284: PPUSH
5285: LD_VAR 0 4
5289: PPUSH
5290: CALL_OW 380
// un := CreateHuman ;
5294: LD_ADDR_VAR 0 7
5298: PUSH
5299: CALL_OW 44
5303: ST_TO_ADDR
// result := Join ( result , un ) ;
5304: LD_ADDR_VAR 0 5
5308: PUSH
5309: LD_VAR 0 5
5313: PPUSH
5314: LD_VAR 0 7
5318: PPUSH
5319: CALL 46857 0 2
5323: ST_TO_ADDR
// if mpTeamPreset then
5324: LD_LOC 1
5328: IFFALSE 5424
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5330: LD_LOC 1
5334: PUSH
5335: LD_VAR 0 6
5339: PUSH
5340: LD_INT 1
5342: PLUS
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 7
5349: PPUSH
5350: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5354: LD_VAR 0 7
5358: PPUSH
5359: LD_INT 1
5361: PPUSH
5362: LD_LOC 1
5366: PUSH
5367: LD_VAR 0 6
5371: PUSH
5372: LD_INT 1
5374: PLUS
5375: ARRAY
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: CALL_OW 260
5384: PPUSH
5385: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5389: LD_VAR 0 7
5393: PPUSH
5394: LD_INT 2
5396: PPUSH
5397: LD_LOC 1
5401: PUSH
5402: LD_VAR 0 6
5406: PUSH
5407: LD_INT 1
5409: PLUS
5410: ARRAY
5411: PPUSH
5412: LD_INT 2
5414: PPUSH
5415: CALL_OW 260
5419: PPUSH
5420: CALL_OW 239
// end ; class := Inc ( class ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: CALL 48218 0 1
5438: ST_TO_ADDR
// if class = 5 then
5439: LD_VAR 0 8
5443: PUSH
5444: LD_INT 5
5446: EQUAL
5447: IFFALSE 5457
// class := 1 ;
5449: LD_ADDR_VAR 0 8
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// end ;
5457: GO 5274
5459: POP
5460: POP
// if not mpTeamPreset then
5461: LD_LOC 1
5465: NOT
5466: IFFALSE 5478
// mpTeamPreset := result ;
5468: LD_ADDR_LOC 1
5472: PUSH
5473: LD_VAR 0 5
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 5
5482: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
// result := [ ] ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: EMPTY
5493: ST_TO_ADDR
// if not vehicles then
5494: LD_VAR 0 3
5498: NOT
5499: IFFALSE 5503
// exit ;
5501: GO 5662
// for i := 1 to vehicles [ nation ] do
5503: LD_ADDR_VAR 0 5
5507: PUSH
5508: DOUBLE
5509: LD_INT 1
5511: DEC
5512: ST_TO_ADDR
5513: LD_VAR 0 3
5517: PUSH
5518: LD_VAR 0 2
5522: ARRAY
5523: PUSH
5524: FOR_TO
5525: IFFALSE 5660
// begin uc_side := side ;
5527: LD_ADDR_OWVAR 20
5531: PUSH
5532: LD_VAR 0 1
5536: ST_TO_ADDR
// uc_nation := nation ;
5537: LD_ADDR_OWVAR 21
5541: PUSH
5542: LD_VAR 0 2
5546: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5547: LD_VAR 0 3
5551: PUSH
5552: LD_VAR 0 2
5556: ARRAY
5557: PUSH
5558: LD_VAR 0 5
5562: ARRAY
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_VAR 0 3
5572: PUSH
5573: LD_VAR 0 2
5577: ARRAY
5578: PUSH
5579: LD_VAR 0 5
5583: ARRAY
5584: PUSH
5585: LD_INT 2
5587: ARRAY
5588: PPUSH
5589: LD_VAR 0 3
5593: PUSH
5594: LD_VAR 0 2
5598: ARRAY
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PUSH
5606: LD_INT 3
5608: ARRAY
5609: PPUSH
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 2
5619: ARRAY
5620: PUSH
5621: LD_VAR 0 5
5625: ARRAY
5626: PUSH
5627: LD_INT 4
5629: ARRAY
5630: PPUSH
5631: LD_INT 80
5633: PPUSH
5634: CALL 13986 0 5
// result := Join ( result , CreateVehicle ) ;
5638: LD_ADDR_VAR 0 4
5642: PUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL_OW 45
5652: PPUSH
5653: CALL 46857 0 2
5657: ST_TO_ADDR
// end ;
5658: GO 5524
5660: POP
5661: POP
// end ;
5662: LD_VAR 0 4
5666: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
// for i in mpBattleFlags do
5671: LD_ADDR_VAR 0 3
5675: PUSH
5676: LD_EXP 23
5680: PUSH
5681: FOR_IN
5682: IFFALSE 5759
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5684: LD_VAR 0 3
5688: PPUSH
5689: LD_INT 1
5691: PUSH
5692: LD_VAR 0 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_REAL  7.00000000000000E-0001
5712: MUL
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 3
5720: PUSH
5721: LD_VAR 0 1
5725: PUSH
5726: LD_REAL  4.00000000000000E-0001
5729: MUL
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 20
5737: PUSH
5738: LD_VAR 0 1
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 423
5757: GO 5681
5759: POP
5760: POP
// end ;
5761: LD_VAR 0 2
5765: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5766: LD_INT 100
5768: IFFALSE 5863
5770: GO 5772
5772: DISABLE
5773: LD_INT 0
5775: PPUSH
5776: PPUSH
// begin if mpBattleFlag <= 0 then
5777: LD_EXP 22
5781: PUSH
5782: LD_INT 0
5784: LESSEQUAL
5785: IFFALSE 5789
// exit ;
5787: GO 5863
// strength := 100 ;
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 100
5796: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5797: LD_EXP 22
5801: PPUSH
5802: CALL_OW 67
// strength := Dec ( strength ) ;
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 2
5815: PPUSH
5816: CALL 48240 0 1
5820: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5821: LD_VAR 0 2
5825: PPUSH
5826: CALL 5667 0 1
// until not strength ;
5830: LD_VAR 0 2
5834: NOT
5835: IFFALSE 5797
// for i in mpBattleFlags do
5837: LD_ADDR_VAR 0 1
5841: PUSH
5842: LD_EXP 23
5846: PUSH
5847: FOR_IN
5848: IFFALSE 5861
// KillBattleFlag ( i ) ;
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 419
5859: GO 5847
5861: POP
5862: POP
// end ;
5863: PPOPN 2
5865: END
// every 0 0$1 marked mpActive do var side , tmp ;
5866: GO 5868
5868: DISABLE
5869: LD_INT 0
5871: PPUSH
5872: PPUSH
// begin if mpSibBomb <= 1 then
5873: LD_EXP 28
5877: PUSH
5878: LD_INT 1
5880: LESSEQUAL
5881: IFFALSE 5885
// exit ;
5883: GO 5958
// tmp := mpSibBomb ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_EXP 28
5894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5895: LD_INT 35
5897: PPUSH
5898: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_VAR 0 2
5911: PUSH
5912: LD_INT 35
5914: MINUS
5915: ST_TO_ADDR
// until not tmp ;
5916: LD_VAR 0 2
5920: NOT
5921: IFFALSE 5895
// for side := 1 to 8 do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_INT 8
5935: PUSH
5936: FOR_TO
5937: IFFALSE 5956
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5939: LD_INT 25
5941: PPUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 322
5954: GO 5936
5956: POP
5957: POP
// end ;
5958: PPOPN 2
5960: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
// mpBuildUpTimeDelay := 0 ;
5966: LD_ADDR_EXP 41
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// if not mpBuildUpTime then
5974: LD_EXP 20
5978: NOT
5979: IFFALSE 5983
// exit ;
5981: GO 6166
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5983: LD_ADDR_EXP 41
5987: PUSH
5988: LD_INT 8400
5990: PUSH
5991: LD_INT 2100
5993: PUSH
5994: LD_EXP 20
5998: MUL
5999: PLUS
6000: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6001: LD_ADDR_EXP 42
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// for i := 1 to 8 do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: DOUBLE
6015: LD_INT 1
6017: DEC
6018: ST_TO_ADDR
6019: LD_INT 8
6021: PUSH
6022: FOR_TO
6023: IFFALSE 6164
// if mpSidePositions [ i ] then
6025: LD_EXP 7
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: IFFALSE 6162
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6037: LD_EXP 19
6041: PUSH
6042: LD_EXP 7
6046: PUSH
6047: LD_VAR 0 2
6051: ARRAY
6052: ARRAY
6053: PPUSH
6054: LD_INT 5
6056: PPUSH
6057: CALL_OW 424
// for j := 1 to 8 do
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_INT 8
6073: PUSH
6074: FOR_TO
6075: IFFALSE 6160
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6077: LD_EXP 7
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: PUSH
6088: LD_EXP 8
6092: PUSH
6093: LD_VAR 0 2
6097: ARRAY
6098: PUSH
6099: LD_EXP 8
6103: PUSH
6104: LD_VAR 0 3
6108: ARRAY
6109: NONEQUAL
6110: PUSH
6111: LD_EXP 11
6115: NOT
6116: PUSH
6117: LD_VAR 0 2
6121: PUSH
6122: LD_VAR 0 3
6126: NONEQUAL
6127: AND
6128: OR
6129: AND
6130: IFFALSE 6158
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6132: LD_VAR 0 3
6136: PPUSH
6137: LD_EXP 19
6141: PUSH
6142: LD_EXP 7
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: ARRAY
6153: PPUSH
6154: CALL_OW 333
6158: GO 6074
6160: POP
6161: POP
// end ;
6162: GO 6022
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// function EndBuildUp ; var i , j ; begin
6171: LD_INT 0
6173: PPUSH
6174: PPUSH
6175: PPUSH
// mpBuildUpTimeActive := false ;
6176: LD_ADDR_EXP 42
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// for i := 1 to 8 do
6184: LD_ADDR_VAR 0 2
6188: PUSH
6189: DOUBLE
6190: LD_INT 1
6192: DEC
6193: ST_TO_ADDR
6194: LD_INT 8
6196: PUSH
6197: FOR_TO
6198: IFFALSE 6339
// if mpSidePositions [ i ] then
6200: LD_EXP 7
6204: PUSH
6205: LD_VAR 0 2
6209: ARRAY
6210: IFFALSE 6337
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6212: LD_EXP 19
6216: PUSH
6217: LD_EXP 7
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: ARRAY
6228: PPUSH
6229: LD_INT 0
6231: PPUSH
6232: CALL_OW 424
// for j := 1 to 8 do
6236: LD_ADDR_VAR 0 3
6240: PUSH
6241: DOUBLE
6242: LD_INT 1
6244: DEC
6245: ST_TO_ADDR
6246: LD_INT 8
6248: PUSH
6249: FOR_TO
6250: IFFALSE 6335
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6252: LD_EXP 7
6256: PUSH
6257: LD_VAR 0 3
6261: ARRAY
6262: PUSH
6263: LD_EXP 8
6267: PUSH
6268: LD_VAR 0 2
6272: ARRAY
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_VAR 0 3
6283: ARRAY
6284: NONEQUAL
6285: PUSH
6286: LD_EXP 11
6290: NOT
6291: PUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_VAR 0 3
6301: NONEQUAL
6302: AND
6303: OR
6304: AND
6305: IFFALSE 6333
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6307: LD_VAR 0 3
6311: PPUSH
6312: LD_EXP 19
6316: PUSH
6317: LD_EXP 7
6321: PUSH
6322: LD_VAR 0 2
6326: ARRAY
6327: ARRAY
6328: PPUSH
6329: CALL_OW 334
6333: GO 6249
6335: POP
6336: POP
// end ;
6337: GO 6197
6339: POP
6340: POP
// end ;
6341: LD_VAR 0 1
6345: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6346: LD_EXP 42
6350: IFFALSE 6525
6352: GO 6354
6354: DISABLE
6355: LD_INT 0
6357: PPUSH
6358: PPUSH
// begin for i := 1 to 8 do
6359: LD_ADDR_VAR 0 1
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_INT 8
6371: PUSH
6372: FOR_TO
6373: IFFALSE 6522
// if mpSidePositions [ i ] then
6375: LD_EXP 7
6379: PUSH
6380: LD_VAR 0 1
6384: ARRAY
6385: IFFALSE 6520
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6387: LD_ADDR_VAR 0 2
6391: PUSH
6392: LD_EXP 19
6396: PUSH
6397: LD_EXP 7
6401: PUSH
6402: LD_VAR 0 1
6406: ARRAY
6407: ARRAY
6408: PPUSH
6409: LD_INT 2
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 1
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 21
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_OWVAR 2
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PPUSH
6453: CALL_OW 70
6457: PUSH
6458: FOR_IN
6459: IFFALSE 6518
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6461: LD_EXP 8
6465: PUSH
6466: LD_VAR 0 1
6470: ARRAY
6471: PUSH
6472: LD_EXP 8
6476: PUSH
6477: LD_OWVAR 2
6481: ARRAY
6482: NONEQUAL
6483: PUSH
6484: LD_EXP 11
6488: NOT
6489: PUSH
6490: LD_VAR 0 1
6494: PUSH
6495: LD_OWVAR 2
6499: NONEQUAL
6500: AND
6501: OR
6502: IFFALSE 6516
// ComMoveToArea ( un , BuildUpEscape ) ;
6504: LD_VAR 0 2
6508: PPUSH
6509: LD_INT 16
6511: PPUSH
6512: CALL_OW 113
6516: GO 6458
6518: POP
6519: POP
6520: GO 6372
6522: POP
6523: POP
// enable ;
6524: ENABLE
// end ;
6525: PPOPN 2
6527: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6528: LD_EXP 20
6532: IFFALSE 6582
6534: GO 6536
6536: DISABLE
6537: LD_INT 0
6539: PPUSH
// begin tmp := mpBuildUpTime ;
6540: LD_ADDR_VAR 0 1
6544: PUSH
6545: LD_EXP 20
6549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: LD_VAR 0 1
6566: PUSH
6567: LD_INT 35
6569: MINUS
6570: ST_TO_ADDR
// until not tmp ;
6571: LD_VAR 0 1
6575: NOT
6576: IFFALSE 6550
// EndBuildUp ;
6578: CALL 6171 0 0
// end ;
6582: PPOPN 1
6584: END
// every 0 0$1 trigger mpActive marked mpWin do
6585: LD_INT 100
6587: IFFALSE 6621
6589: GO 6591
6591: DISABLE
// begin if IAmServer then
6592: CALL_OW 518
6596: IFFALSE 6605
// wait ( 0 0$3 ) ;
6598: LD_INT 105
6600: PPUSH
6601: CALL_OW 67
// if Multiplayer then
6605: LD_OWVAR 4
6609: IFFALSE 6617
// YouWinInMultiplayer else
6611: CALL_OW 106
6615: GO 6621
// YouWin ;
6617: CALL_OW 103
// end ;
6621: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6622: LD_INT 0
6624: PPUSH
// result := false ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_INT 0
6632: ST_TO_ADDR
// case gameType of GameTypeNormal :
6633: LD_VAR 0 1
6637: PUSH
6638: LD_INT 1
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6719
6646: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_VAR 0 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: LD_INT 21
6669: PUSH
6670: LD_INT 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 33
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 33
6689: PUSH
6690: LD_INT 5
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: PPUSH
6712: CALL 11248 0 1
6716: ST_TO_ADDR
// end ; GameTypeSurvival :
6717: GO 6954
6719: LD_INT 2
6721: DOUBLE
6722: EQUAL
6723: IFTRUE 6727
6725: GO 6855
6727: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_VAR 0 2
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 2
6747: PUSH
6748: LD_INT 30
6750: PUSH
6751: LD_INT 0
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PPUSH
6777: CALL_OW 69
6781: PPUSH
6782: CALL 11248 0 1
6786: PUSH
6787: LD_INT 22
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: LD_INT 21
6804: PUSH
6805: LD_INT 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 33
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 33
6824: PUSH
6825: LD_INT 5
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PPUSH
6842: CALL_OW 69
6846: PPUSH
6847: CALL 11248 0 1
6851: AND
6852: ST_TO_ADDR
// end ; GameTypeKing :
6853: GO 6954
6855: LD_INT 3
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6953
6863: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: LD_INT 22
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 33
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 33
6906: PUSH
6907: LD_INT 5
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: CALL 11248 0 1
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: CALL 58407 0 1
6943: PUSH
6944: LD_EXP 34
6948: LESS
6949: AND
6950: ST_TO_ADDR
// end ; end ;
6951: GO 6954
6953: POP
// end ;
6954: LD_VAR 0 3
6958: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6959: LD_INT 100
6961: IFFALSE 7183
6963: GO 6965
6965: DISABLE
6966: LD_INT 0
6968: PPUSH
6969: PPUSH
// begin if Multiplayer then
6970: LD_OWVAR 4
6974: IFFALSE 6982
// SetPlayerSpectator ( ) else
6976: CALL_OW 572
6980: GO 6991
// FogOff ( your_side ) ;
6982: LD_OWVAR 2
6986: PPUSH
6987: CALL_OW 344
// repeat gameIsOn := false ;
6991: LD_ADDR_VAR 0 1
6995: PUSH
6996: LD_INT 0
6998: ST_TO_ADDR
// for i := 1 to 8 do
6999: LD_ADDR_VAR 0 2
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_INT 8
7011: PUSH
7012: FOR_TO
7013: IFFALSE 7135
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7015: LD_EXP 7
7019: PUSH
7020: LD_VAR 0 2
7024: ARRAY
7025: PUSH
7026: LD_VAR 0 2
7030: PPUSH
7031: CALL_OW 108
7035: AND
7036: PUSH
7037: LD_VAR 0 2
7041: PUSH
7042: LD_OWVAR 2
7046: NONEQUAL
7047: AND
7048: IFFALSE 7133
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7050: LD_EXP 8
7054: PUSH
7055: LD_VAR 0 2
7059: ARRAY
7060: NOT
7061: PUSH
7062: LD_EXP 8
7066: PUSH
7067: LD_VAR 0 2
7071: ARRAY
7072: PUSH
7073: LD_EXP 8
7077: PUSH
7078: LD_OWVAR 2
7082: ARRAY
7083: NONEQUAL
7084: PUSH
7085: LD_OWVAR 2
7089: PPUSH
7090: LD_VAR 0 2
7094: PPUSH
7095: CALL_OW 81
7099: PUSH
7100: LD_INT 1
7102: NONEQUAL
7103: AND
7104: OR
7105: IFFALSE 7133
// if HasPowerByGameType ( mpGameType , i ) then
7107: LD_EXP 3
7111: PPUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL 6622 0 2
7121: IFFALSE 7133
// begin gameIsOn := true ;
7123: LD_ADDR_VAR 0 1
7127: PUSH
7128: LD_INT 1
7130: ST_TO_ADDR
// break ;
7131: GO 7135
// end ;
7133: GO 7012
7135: POP
7136: POP
// wait ( 100 ) ;
7137: LD_INT 100
7139: PPUSH
7140: CALL_OW 67
// until not gameIsOn ;
7144: LD_VAR 0 1
7148: NOT
7149: IFFALSE 6991
// if IAmServer then
7151: CALL_OW 518
7155: IFFALSE 7164
// wait ( 0 0$3 ) ;
7157: LD_INT 105
7159: PPUSH
7160: CALL_OW 67
// if Multiplayer then
7164: LD_OWVAR 4
7168: IFFALSE 7176
// YouLostInMultiplayer else
7170: CALL_OW 107
7174: GO 7183
// YouLost (  ) ;
7176: LD_STRING 
7178: PPUSH
7179: CALL_OW 104
// end ;
7183: PPOPN 2
7185: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7186: LD_EXP 32
7190: IFFALSE 7537
7192: GO 7194
7194: DISABLE
7195: LD_INT 0
7197: PPUSH
7198: PPUSH
7199: PPUSH
7200: PPUSH
7201: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7202: LD_ADDR_VAR 0 5
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 4
7218: PUSH
7219: LD_INT 5
7221: PUSH
7222: LD_INT 6
7224: PUSH
7225: LD_INT 7
7227: PUSH
7228: LD_INT 8
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7241: LD_INT 350
7243: PPUSH
7244: CALL_OW 67
// for i := 1 to 8 do
7248: LD_ADDR_VAR 0 1
7252: PUSH
7253: DOUBLE
7254: LD_INT 1
7256: DEC
7257: ST_TO_ADDR
7258: LD_INT 8
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7507
// begin j := sides [ i ] ;
7264: LD_ADDR_VAR 0 2
7268: PUSH
7269: LD_VAR 0 5
7273: PUSH
7274: LD_VAR 0 1
7278: ARRAY
7279: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7280: LD_EXP 39
7284: PUSH
7285: LD_VAR 0 2
7289: ARRAY
7290: PPUSH
7291: CALL 11248 0 1
7295: PUSH
7296: LD_VAR 0 2
7300: PPUSH
7301: CALL_OW 108
7305: AND
7306: PUSH
7307: LD_EXP 3
7311: PPUSH
7312: LD_VAR 0 2
7316: PPUSH
7317: CALL 6622 0 2
7321: AND
7322: IFFALSE 7505
// begin wait ( mpRespawn div 3 ) ;
7324: LD_EXP 32
7328: PUSH
7329: LD_INT 3
7331: DIV
7332: PPUSH
7333: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7337: LD_ADDR_VAR 0 3
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 50
7356: PUSH
7357: EMPTY
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 30
7365: PUSH
7366: LD_INT 0
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 30
7375: PUSH
7376: LD_INT 1
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: ST_TO_ADDR
// if not tmp then
7398: LD_VAR 0 3
7402: NOT
7403: IFFALSE 7407
// continue ;
7405: GO 7261
// spawn := tmp [ 1 ] ;
7407: LD_ADDR_VAR 0 4
7411: PUSH
7412: LD_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: ARRAY
7420: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7421: LD_EXP 39
7425: PUSH
7426: LD_VAR 0 2
7430: ARRAY
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: PPUSH
7436: LD_VAR 0 4
7440: PPUSH
7441: CALL_OW 250
7445: PPUSH
7446: LD_VAR 0 4
7450: PPUSH
7451: CALL_OW 251
7455: PPUSH
7456: LD_INT 32
7458: PPUSH
7459: LD_INT 1
7461: PPUSH
7462: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7466: LD_ADDR_EXP 39
7470: PUSH
7471: LD_EXP 39
7475: PPUSH
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_EXP 39
7485: PUSH
7486: LD_VAR 0 2
7490: ARRAY
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 3
7499: PPUSH
7500: CALL_OW 1
7504: ST_TO_ADDR
// end ; end ;
7505: GO 7261
7507: POP
7508: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7509: LD_ADDR_VAR 0 5
7513: PUSH
7514: LD_VAR 0 5
7518: PPUSH
7519: LD_INT 1
7521: PPUSH
7522: LD_INT 8
7524: PPUSH
7525: LD_INT 1
7527: PPUSH
7528: CALL 13526 0 4
7532: ST_TO_ADDR
// until false ;
7533: LD_INT 0
7535: IFFALSE 7241
// end ;
7537: PPOPN 5
7539: END
// every 0 0$1 marked mpActive do
7540: GO 7542
7542: DISABLE
// begin enable ;
7543: ENABLE
// if not mpDisplayStrings then
7544: LD_EXP 37
7548: NOT
7549: IFFALSE 7560
// begin display_strings := [ ] ;
7551: LD_ADDR_OWVAR 47
7555: PUSH
7556: EMPTY
7557: ST_TO_ADDR
// exit ;
7558: GO 7570
// end ; display_strings := mpDisplayStrings ;
7560: LD_ADDR_OWVAR 47
7564: PUSH
7565: LD_EXP 37
7569: ST_TO_ADDR
// end ; end_of_file
7570: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7571: LD_INT 0
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
// if GetType ( un ) = unit_vehicle then
7582: LD_VAR 0 1
7586: PPUSH
7587: CALL_OW 247
7591: PUSH
7592: LD_INT 2
7594: EQUAL
7595: IFFALSE 7599
// exit ;
7597: GO 8169
// side := GetSide ( un ) ;
7599: LD_ADDR_VAR 0 9
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 255
7613: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7614: LD_EXP 3
7618: PUSH
7619: LD_INT 2
7621: EQUAL
7622: IFFALSE 7715
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7624: LD_VAR 0 1
7628: PPUSH
7629: CALL_OW 266
7633: PUSH
7634: LD_INT 0
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: IN
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 110
7654: PUSH
7655: LD_VAR 0 9
7659: EQUAL
7660: AND
7661: IFFALSE 7715
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7663: LD_ADDR_VAR 0 3
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_VAR 0 9
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 21
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 69
7698: PUSH
7699: FOR_IN
7700: IFFALSE 7713
// KillUnit ( i ) ;
7702: LD_VAR 0 3
7706: PPUSH
7707: CALL_OW 66
7711: GO 7699
7713: POP
7714: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 257
7724: PUSH
7725: LD_INT 12
7727: PUSH
7728: LD_INT 17
7730: PUSH
7731: LD_INT 15
7733: PUSH
7734: LD_INT 16
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: IN
7743: PUSH
7744: LD_VAR 0 1
7748: PPUSH
7749: CALL_OW 263
7753: PUSH
7754: LD_INT 5
7756: EQUAL
7757: OR
7758: IFFALSE 7898
// begin tag := GetTag ( un ) ;
7760: LD_ADDR_VAR 0 5
7764: PUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 110
7774: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7775: LD_ADDR_VAR 0 7
7779: PUSH
7780: LD_EXP 31
7784: PUSH
7785: LD_EXP 7
7789: PUSH
7790: LD_VAR 0 5
7794: ARRAY
7795: ARRAY
7796: ST_TO_ADDR
// if not area then
7797: LD_VAR 0 7
7801: NOT
7802: IFFALSE 7806
// exit ;
7804: GO 8169
// wait ( 4 4$00 ) ;
7806: LD_INT 8400
7808: PPUSH
7809: CALL_OW 67
// repeat wait ( 10 ) ;
7813: LD_INT 10
7815: PPUSH
7816: CALL_OW 67
// until not mpBlockRespThread ;
7820: LD_EXP 40
7824: NOT
7825: IFFALSE 7813
// mpBlockRespThread := true ;
7827: LD_ADDR_EXP 40
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7835: LD_INT 0
7837: PPUSH
7838: CALL 43105 0 1
// ape := CreateHuman ;
7842: LD_ADDR_VAR 0 4
7846: PUSH
7847: CALL_OW 44
7851: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7852: LD_VAR 0 4
7856: PPUSH
7857: LD_VAR 0 5
7861: PPUSH
7862: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7866: LD_VAR 0 4
7870: PPUSH
7871: LD_VAR 0 7
7875: PPUSH
7876: LD_INT 0
7878: PPUSH
7879: CALL_OW 49
// wait ( 10 ) ;
7883: LD_INT 10
7885: PPUSH
7886: CALL_OW 67
// mpBlockRespThread := false ;
7890: LD_ADDR_EXP 40
7894: PUSH
7895: LD_INT 0
7897: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 247
7907: PUSH
7908: LD_INT 1
7910: EQUAL
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 248
7921: PUSH
7922: LD_INT 0
7924: GREATER
7925: AND
7926: IFFALSE 8169
// begin if not mpRespawn then
7928: LD_EXP 32
7932: NOT
7933: IFFALSE 7937
// exit ;
7935: GO 8169
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7937: LD_VAR 0 9
7941: PPUSH
7942: CALL_OW 108
7946: NOT
7947: PUSH
7948: LD_EXP 3
7952: PPUSH
7953: LD_VAR 0 9
7957: PPUSH
7958: CALL 6622 0 2
7962: NOT
7963: AND
7964: IFFALSE 7968
// exit ;
7966: GO 8169
// side := GetSide ( un ) ;
7968: LD_ADDR_VAR 0 9
7972: PUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 255
7982: ST_TO_ADDR
// nation := GetNation ( un ) ;
7983: LD_ADDR_VAR 0 8
7987: PUSH
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL_OW 248
7997: ST_TO_ADDR
// class := GetClass ( un ) ;
7998: LD_ADDR_VAR 0 6
8002: PUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 257
8012: ST_TO_ADDR
// if class > 4 then
8013: LD_VAR 0 6
8017: PUSH
8018: LD_INT 4
8020: GREATER
8021: IFFALSE 8031
// class := 1 ;
8023: LD_ADDR_VAR 0 6
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// repeat wait ( 10 ) ;
8031: LD_INT 10
8033: PPUSH
8034: CALL_OW 67
// until not mpBlockRespThread ;
8038: LD_EXP 40
8042: NOT
8043: IFFALSE 8031
// mpBlockRespThread := true ;
8045: LD_ADDR_EXP 40
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// uc_side := side ;
8053: LD_ADDR_OWVAR 20
8057: PUSH
8058: LD_VAR 0 9
8062: ST_TO_ADDR
// uc_nation := nation ;
8063: LD_ADDR_OWVAR 21
8067: PUSH
8068: LD_VAR 0 8
8072: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8073: LD_INT 0
8075: PPUSH
8076: LD_VAR 0 6
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8098: LD_ADDR_EXP 39
8102: PUSH
8103: LD_EXP 39
8107: PPUSH
8108: LD_VAR 0 9
8112: PPUSH
8113: LD_EXP 39
8117: PUSH
8118: LD_VAR 0 9
8122: ARRAY
8123: PPUSH
8124: LD_EXP 39
8128: PUSH
8129: LD_VAR 0 9
8133: ARRAY
8134: PUSH
8135: LD_INT 1
8137: PLUS
8138: PPUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 1
8148: PPUSH
8149: CALL_OW 1
8153: ST_TO_ADDR
// wait ( 10 ) ;
8154: LD_INT 10
8156: PPUSH
8157: CALL_OW 67
// mpBlockRespThread := false ;
8161: LD_ADDR_EXP 40
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// end ; end ;
8169: LD_VAR 0 2
8173: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8174: LD_INT 0
8176: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 266
8186: PUSH
8187: LD_INT 0
8189: PUSH
8190: LD_INT 1
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: IN
8197: IFFALSE 8222
// SetBName ( building , @ & GetSide ( building ) ) ;
8199: LD_VAR 0 1
8203: PPUSH
8204: LD_STRING @
8206: PUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL_OW 255
8216: STR
8217: PPUSH
8218: CALL_OW 500
// end ;
8222: LD_VAR 0 2
8226: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8227: LD_INT 0
8229: PPUSH
8230: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8231: LD_EXP 3
8235: PUSH
8236: LD_INT 2
8238: EQUAL
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 266
8249: PUSH
8250: LD_INT 0
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: IN
8260: AND
8261: IFFALSE 8326
// begin KillUnit ( building ) ;
8263: LD_VAR 0 1
8267: PPUSH
8268: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: LD_INT 22
8279: PUSH
8280: LD_VAR 0 2
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 21
8291: PUSH
8292: LD_INT 1
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 69
8307: PUSH
8308: FOR_IN
8309: IFFALSE 8322
// KillUnit ( i ) ;
8311: LD_VAR 0 5
8315: PPUSH
8316: CALL_OW 66
8320: GO 8308
8322: POP
8323: POP
// exit ;
8324: GO 8371
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 266
8335: PUSH
8336: LD_INT 0
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8371
// SetBName ( building , @ & GetSide ( building ) ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_STRING @
8355: PUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 255
8365: STR
8366: PPUSH
8367: CALL_OW 500
// end ; end_of_file
8371: LD_VAR 0 4
8375: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8376: LD_EXP 38
8380: PUSH
8381: CALL 8586 0 0
8385: AND
8386: PUSH
8387: LD_OWVAR 4
8391: AND
8392: IFFALSE 8583
8394: GO 8396
8396: DISABLE
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
// begin canWin := false ;
8401: LD_ADDR_VAR 0 2
8405: PUSH
8406: LD_INT 0
8408: ST_TO_ADDR
// if not HasPower ( your_side ) then
8409: LD_OWVAR 2
8413: PPUSH
8414: CALL 8626 0 1
8418: NOT
8419: IFFALSE 8430
// begin Multiplayer_Loose_Message ;
8421: CALL_OW 521
// enable ( mpLose ) ;
8425: LD_INT 102
8427: ENABLE_MARKED
// end else
8428: GO 8583
// begin canWin := true ;
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// for i := 1 to 8 do
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: DOUBLE
8444: LD_INT 1
8446: DEC
8447: ST_TO_ADDR
8448: LD_INT 8
8450: PUSH
8451: FOR_TO
8452: IFFALSE 8569
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8454: LD_EXP 7
8458: PUSH
8459: LD_VAR 0 1
8463: ARRAY
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 108
8474: AND
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: LD_OWVAR 2
8485: NONEQUAL
8486: AND
8487: IFFALSE 8567
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8489: LD_EXP 8
8493: PUSH
8494: LD_VAR 0 1
8498: ARRAY
8499: NOT
8500: PUSH
8501: LD_EXP 8
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PUSH
8512: LD_EXP 8
8516: PUSH
8517: LD_OWVAR 2
8521: ARRAY
8522: NONEQUAL
8523: PUSH
8524: LD_OWVAR 2
8528: PPUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 81
8538: PUSH
8539: LD_INT 1
8541: NONEQUAL
8542: AND
8543: OR
8544: IFFALSE 8567
// if HasPower ( i ) then
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL 8626 0 1
8555: IFFALSE 8567
// begin canWin := false ;
8557: LD_ADDR_VAR 0 2
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// break ;
8565: GO 8569
// end ;
8567: GO 8451
8569: POP
8570: POP
// if canWin then
8571: LD_VAR 0 2
8575: IFFALSE 8582
// enable ( mpWin ) else
8577: LD_INT 101
8579: ENABLE_MARKED
8580: GO 8583
// enable ;
8582: ENABLE
// end ; end ;
8583: PPOPN 2
8585: END
// function CanWinLoose ; begin
8586: LD_INT 0
8588: PPUSH
// result := true ;
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8597: CALL_OW 531
8601: PUSH
8602: CALL_OW 519
8606: PUSH
8607: LD_INT 1
8609: GREATER
8610: AND
8611: IFFALSE 8621
// result := false ;
8613: LD_ADDR_VAR 0 1
8617: PUSH
8618: LD_INT 0
8620: ST_TO_ADDR
// end ;
8621: LD_VAR 0 1
8625: RET
// function HasPower ( i ) ; begin
8626: LD_INT 0
8628: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8629: LD_ADDR_VAR 0 2
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_VAR 0 1
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 33
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 33
8671: PUSH
8672: LD_INT 5
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PPUSH
8689: CALL_OW 69
8693: ST_TO_ADDR
// end ; end_of_file
8694: LD_VAR 0 2
8698: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8699: LD_EXP 38
8703: IFFALSE 8746
8705: GO 8707
8707: DISABLE
8708: LD_INT 0
8710: PPUSH
// begin for i := 1 to 8 do
8711: LD_ADDR_VAR 0 1
8715: PUSH
8716: DOUBLE
8717: LD_INT 1
8719: DEC
8720: ST_TO_ADDR
8721: LD_INT 8
8723: PUSH
8724: FOR_TO
8725: IFFALSE 8744
// SetRestrict ( b_depot , i , state_disabled ) ;
8727: LD_INT 0
8729: PPUSH
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_INT 0
8737: PPUSH
8738: CALL_OW 324
8742: GO 8724
8744: POP
8745: POP
// end ;
8746: PPOPN 1
8748: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8749: LD_EXP 38
8753: PUSH
8754: CALL 8959 0 0
8758: AND
8759: PUSH
8760: LD_OWVAR 4
8764: AND
8765: IFFALSE 8956
8767: GO 8769
8769: DISABLE
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
// begin canWin := false ;
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// if not HasPower ( your_side ) then
8782: LD_OWVAR 2
8786: PPUSH
8787: CALL 8999 0 1
8791: NOT
8792: IFFALSE 8803
// begin Multiplayer_Loose_Message ;
8794: CALL_OW 521
// enable ( mpLose ) ;
8798: LD_INT 102
8800: ENABLE_MARKED
// end else
8801: GO 8956
// begin canWin := true ;
8803: LD_ADDR_VAR 0 2
8807: PUSH
8808: LD_INT 1
8810: ST_TO_ADDR
// for i := 1 to 8 do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: DOUBLE
8817: LD_INT 1
8819: DEC
8820: ST_TO_ADDR
8821: LD_INT 8
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8942
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8827: LD_EXP 7
8831: PUSH
8832: LD_VAR 0 1
8836: ARRAY
8837: PUSH
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 108
8847: AND
8848: PUSH
8849: LD_VAR 0 1
8853: PUSH
8854: LD_OWVAR 2
8858: NONEQUAL
8859: AND
8860: IFFALSE 8940
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8862: LD_EXP 8
8866: PUSH
8867: LD_VAR 0 1
8871: ARRAY
8872: NOT
8873: PUSH
8874: LD_EXP 8
8878: PUSH
8879: LD_VAR 0 1
8883: ARRAY
8884: PUSH
8885: LD_EXP 8
8889: PUSH
8890: LD_OWVAR 2
8894: ARRAY
8895: NONEQUAL
8896: PUSH
8897: LD_OWVAR 2
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 81
8911: PUSH
8912: LD_INT 1
8914: NONEQUAL
8915: AND
8916: OR
8917: IFFALSE 8940
// if HasPower ( i ) then
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL 8999 0 1
8928: IFFALSE 8940
// begin canWin := false ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// break ;
8938: GO 8942
// end ;
8940: GO 8824
8942: POP
8943: POP
// if canWin then
8944: LD_VAR 0 2
8948: IFFALSE 8955
// enable ( mpWin ) else
8950: LD_INT 101
8952: ENABLE_MARKED
8953: GO 8956
// enable ;
8955: ENABLE
// end ; end ;
8956: PPOPN 2
8958: END
// function CanWinLoose ; begin
8959: LD_INT 0
8961: PPUSH
// result := true ;
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: LD_INT 1
8969: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8970: CALL_OW 531
8974: PUSH
8975: CALL_OW 519
8979: PUSH
8980: LD_INT 1
8982: GREATER
8983: AND
8984: IFFALSE 8994
// result := false ;
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// end ;
8994: LD_VAR 0 1
8998: RET
// function HasPower ( i ) ; begin
8999: LD_INT 0
9001: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9002: LD_INT 22
9004: PUSH
9005: LD_VAR 0 1
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: LD_INT 30
9019: PUSH
9020: LD_INT 0
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 30
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: NOT
9051: IFFALSE 9055
// exit ;
9053: GO 9120
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_VAR 0 1
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 2
9074: PUSH
9075: LD_INT 21
9077: PUSH
9078: LD_INT 1
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 33
9087: PUSH
9088: LD_INT 3
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 33
9097: PUSH
9098: LD_INT 5
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 69
9119: ST_TO_ADDR
// end ; end_of_file
9120: LD_VAR 0 2
9124: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
// if exist_mode then
9129: LD_VAR 0 2
9133: IFFALSE 9179
// begin unit := CreateCharacter ( prefix & ident ) ;
9135: LD_ADDR_VAR 0 5
9139: PUSH
9140: LD_VAR 0 3
9144: PUSH
9145: LD_VAR 0 1
9149: STR
9150: PPUSH
9151: CALL_OW 34
9155: ST_TO_ADDR
// if unit then
9156: LD_VAR 0 5
9160: IFFALSE 9177
// DeleteCharacters ( prefix & ident ) ;
9162: LD_VAR 0 3
9166: PUSH
9167: LD_VAR 0 1
9171: STR
9172: PPUSH
9173: CALL_OW 40
// end else
9177: GO 9194
// unit := NewCharacter ( ident ) ;
9179: LD_ADDR_VAR 0 5
9183: PUSH
9184: LD_VAR 0 1
9188: PPUSH
9189: CALL_OW 25
9193: ST_TO_ADDR
// result := unit ;
9194: LD_ADDR_VAR 0 4
9198: PUSH
9199: LD_VAR 0 5
9203: ST_TO_ADDR
// end ;
9204: LD_VAR 0 4
9208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9209: LD_INT 0
9211: PPUSH
9212: PPUSH
// if not side or not nation then
9213: LD_VAR 0 1
9217: NOT
9218: PUSH
9219: LD_VAR 0 2
9223: NOT
9224: OR
9225: IFFALSE 9229
// exit ;
9227: GO 9997
// case nation of nation_american :
9229: LD_VAR 0 2
9233: PUSH
9234: LD_INT 1
9236: DOUBLE
9237: EQUAL
9238: IFTRUE 9242
9240: GO 9456
9242: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9243: LD_ADDR_VAR 0 4
9247: PUSH
9248: LD_INT 35
9250: PUSH
9251: LD_INT 45
9253: PUSH
9254: LD_INT 46
9256: PUSH
9257: LD_INT 47
9259: PUSH
9260: LD_INT 82
9262: PUSH
9263: LD_INT 83
9265: PUSH
9266: LD_INT 84
9268: PUSH
9269: LD_INT 85
9271: PUSH
9272: LD_INT 86
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: LD_INT 6
9283: PUSH
9284: LD_INT 15
9286: PUSH
9287: LD_INT 16
9289: PUSH
9290: LD_INT 7
9292: PUSH
9293: LD_INT 12
9295: PUSH
9296: LD_INT 13
9298: PUSH
9299: LD_INT 10
9301: PUSH
9302: LD_INT 14
9304: PUSH
9305: LD_INT 20
9307: PUSH
9308: LD_INT 21
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_INT 25
9316: PUSH
9317: LD_INT 32
9319: PUSH
9320: LD_INT 27
9322: PUSH
9323: LD_INT 36
9325: PUSH
9326: LD_INT 69
9328: PUSH
9329: LD_INT 39
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 40
9337: PUSH
9338: LD_INT 48
9340: PUSH
9341: LD_INT 49
9343: PUSH
9344: LD_INT 50
9346: PUSH
9347: LD_INT 51
9349: PUSH
9350: LD_INT 52
9352: PUSH
9353: LD_INT 53
9355: PUSH
9356: LD_INT 54
9358: PUSH
9359: LD_INT 55
9361: PUSH
9362: LD_INT 56
9364: PUSH
9365: LD_INT 57
9367: PUSH
9368: LD_INT 58
9370: PUSH
9371: LD_INT 59
9373: PUSH
9374: LD_INT 60
9376: PUSH
9377: LD_INT 61
9379: PUSH
9380: LD_INT 62
9382: PUSH
9383: LD_INT 80
9385: PUSH
9386: LD_INT 82
9388: PUSH
9389: LD_INT 83
9391: PUSH
9392: LD_INT 84
9394: PUSH
9395: LD_INT 85
9397: PUSH
9398: LD_INT 86
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: ST_TO_ADDR
9454: GO 9921
9456: LD_INT 2
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9690
9464: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 35
9472: PUSH
9473: LD_INT 45
9475: PUSH
9476: LD_INT 46
9478: PUSH
9479: LD_INT 47
9481: PUSH
9482: LD_INT 82
9484: PUSH
9485: LD_INT 83
9487: PUSH
9488: LD_INT 84
9490: PUSH
9491: LD_INT 85
9493: PUSH
9494: LD_INT 87
9496: PUSH
9497: LD_INT 70
9499: PUSH
9500: LD_INT 1
9502: PUSH
9503: LD_INT 11
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 4
9511: PUSH
9512: LD_INT 5
9514: PUSH
9515: LD_INT 6
9517: PUSH
9518: LD_INT 15
9520: PUSH
9521: LD_INT 18
9523: PUSH
9524: LD_INT 7
9526: PUSH
9527: LD_INT 17
9529: PUSH
9530: LD_INT 8
9532: PUSH
9533: LD_INT 20
9535: PUSH
9536: LD_INT 21
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_INT 72
9544: PUSH
9545: LD_INT 26
9547: PUSH
9548: LD_INT 69
9550: PUSH
9551: LD_INT 39
9553: PUSH
9554: LD_INT 40
9556: PUSH
9557: LD_INT 41
9559: PUSH
9560: LD_INT 42
9562: PUSH
9563: LD_INT 43
9565: PUSH
9566: LD_INT 48
9568: PUSH
9569: LD_INT 49
9571: PUSH
9572: LD_INT 50
9574: PUSH
9575: LD_INT 51
9577: PUSH
9578: LD_INT 52
9580: PUSH
9581: LD_INT 53
9583: PUSH
9584: LD_INT 54
9586: PUSH
9587: LD_INT 55
9589: PUSH
9590: LD_INT 56
9592: PUSH
9593: LD_INT 60
9595: PUSH
9596: LD_INT 61
9598: PUSH
9599: LD_INT 62
9601: PUSH
9602: LD_INT 66
9604: PUSH
9605: LD_INT 67
9607: PUSH
9608: LD_INT 68
9610: PUSH
9611: LD_INT 81
9613: PUSH
9614: LD_INT 82
9616: PUSH
9617: LD_INT 83
9619: PUSH
9620: LD_INT 84
9622: PUSH
9623: LD_INT 85
9625: PUSH
9626: LD_INT 87
9628: PUSH
9629: LD_INT 88
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: ST_TO_ADDR
9688: GO 9921
9690: LD_INT 3
9692: DOUBLE
9693: EQUAL
9694: IFTRUE 9698
9696: GO 9920
9698: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9699: LD_ADDR_VAR 0 4
9703: PUSH
9704: LD_INT 46
9706: PUSH
9707: LD_INT 47
9709: PUSH
9710: LD_INT 1
9712: PUSH
9713: LD_INT 2
9715: PUSH
9716: LD_INT 82
9718: PUSH
9719: LD_INT 83
9721: PUSH
9722: LD_INT 84
9724: PUSH
9725: LD_INT 85
9727: PUSH
9728: LD_INT 86
9730: PUSH
9731: LD_INT 11
9733: PUSH
9734: LD_INT 9
9736: PUSH
9737: LD_INT 20
9739: PUSH
9740: LD_INT 19
9742: PUSH
9743: LD_INT 21
9745: PUSH
9746: LD_INT 24
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 28
9757: PUSH
9758: LD_INT 29
9760: PUSH
9761: LD_INT 30
9763: PUSH
9764: LD_INT 31
9766: PUSH
9767: LD_INT 37
9769: PUSH
9770: LD_INT 38
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 27
9778: PUSH
9779: LD_INT 33
9781: PUSH
9782: LD_INT 69
9784: PUSH
9785: LD_INT 39
9787: PUSH
9788: LD_INT 34
9790: PUSH
9791: LD_INT 40
9793: PUSH
9794: LD_INT 71
9796: PUSH
9797: LD_INT 23
9799: PUSH
9800: LD_INT 44
9802: PUSH
9803: LD_INT 48
9805: PUSH
9806: LD_INT 49
9808: PUSH
9809: LD_INT 50
9811: PUSH
9812: LD_INT 51
9814: PUSH
9815: LD_INT 52
9817: PUSH
9818: LD_INT 53
9820: PUSH
9821: LD_INT 54
9823: PUSH
9824: LD_INT 55
9826: PUSH
9827: LD_INT 56
9829: PUSH
9830: LD_INT 57
9832: PUSH
9833: LD_INT 58
9835: PUSH
9836: LD_INT 59
9838: PUSH
9839: LD_INT 63
9841: PUSH
9842: LD_INT 64
9844: PUSH
9845: LD_INT 65
9847: PUSH
9848: LD_INT 82
9850: PUSH
9851: LD_INT 83
9853: PUSH
9854: LD_INT 84
9856: PUSH
9857: LD_INT 85
9859: PUSH
9860: LD_INT 86
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: ST_TO_ADDR
9918: GO 9921
9920: POP
// if state > - 1 and state < 3 then
9921: LD_VAR 0 3
9925: PUSH
9926: LD_INT 1
9928: NEG
9929: GREATER
9930: PUSH
9931: LD_VAR 0 3
9935: PUSH
9936: LD_INT 3
9938: LESS
9939: AND
9940: IFFALSE 9997
// for i in result do
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: LD_VAR 0 4
9951: PUSH
9952: FOR_IN
9953: IFFALSE 9995
// if GetTech ( i , side ) <> state then
9955: LD_VAR 0 5
9959: PPUSH
9960: LD_VAR 0 1
9964: PPUSH
9965: CALL_OW 321
9969: PUSH
9970: LD_VAR 0 3
9974: NONEQUAL
9975: IFFALSE 9993
// result := result diff i ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_VAR 0 5
9991: DIFF
9992: ST_TO_ADDR
9993: GO 9952
9995: POP
9996: POP
// end ;
9997: LD_VAR 0 4
10001: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10002: LD_INT 0
10004: PPUSH
10005: PPUSH
10006: PPUSH
// result := true ;
10007: LD_ADDR_VAR 0 3
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10015: LD_ADDR_VAR 0 5
10019: PUSH
10020: LD_VAR 0 2
10024: PPUSH
10025: CALL_OW 480
10029: ST_TO_ADDR
// if not tmp then
10030: LD_VAR 0 5
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10088
// for i in tmp do
10039: LD_ADDR_VAR 0 4
10043: PUSH
10044: LD_VAR 0 5
10048: PUSH
10049: FOR_IN
10050: IFFALSE 10086
// if GetTech ( i , side ) <> state_researched then
10052: LD_VAR 0 4
10056: PPUSH
10057: LD_VAR 0 1
10061: PPUSH
10062: CALL_OW 321
10066: PUSH
10067: LD_INT 2
10069: NONEQUAL
10070: IFFALSE 10084
// begin result := false ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// exit ;
10080: POP
10081: POP
10082: GO 10088
// end ;
10084: GO 10049
10086: POP
10087: POP
// end ;
10088: LD_VAR 0 3
10092: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10093: LD_INT 0
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
10099: PPUSH
10100: PPUSH
10101: PPUSH
10102: PPUSH
10103: PPUSH
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10108: LD_VAR 0 1
10112: NOT
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 257
10123: PUSH
10124: LD_INT 9
10126: NONEQUAL
10127: OR
10128: IFFALSE 10132
// exit ;
10130: GO 10705
// side := GetSide ( unit ) ;
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: LD_VAR 0 1
10141: PPUSH
10142: CALL_OW 255
10146: ST_TO_ADDR
// tech_space := tech_spacanom ;
10147: LD_ADDR_VAR 0 12
10151: PUSH
10152: LD_INT 29
10154: ST_TO_ADDR
// tech_time := tech_taurad ;
10155: LD_ADDR_VAR 0 13
10159: PUSH
10160: LD_INT 28
10162: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10163: LD_ADDR_VAR 0 11
10167: PUSH
10168: LD_VAR 0 1
10172: PPUSH
10173: CALL_OW 310
10177: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10178: LD_VAR 0 11
10182: PPUSH
10183: CALL_OW 247
10187: PUSH
10188: LD_INT 2
10190: EQUAL
10191: IFFALSE 10195
// exit ;
10193: GO 10705
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10195: LD_ADDR_VAR 0 8
10199: PUSH
10200: LD_INT 81
10202: PUSH
10203: LD_VAR 0 9
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: LD_INT 21
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 69
10237: ST_TO_ADDR
// if not tmp then
10238: LD_VAR 0 8
10242: NOT
10243: IFFALSE 10247
// exit ;
10245: GO 10705
// if in_unit then
10247: LD_VAR 0 11
10251: IFFALSE 10275
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10253: LD_ADDR_VAR 0 10
10257: PUSH
10258: LD_VAR 0 8
10262: PPUSH
10263: LD_VAR 0 11
10267: PPUSH
10268: CALL_OW 74
10272: ST_TO_ADDR
10273: GO 10295
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10275: LD_ADDR_VAR 0 10
10279: PUSH
10280: LD_VAR 0 8
10284: PPUSH
10285: LD_VAR 0 1
10289: PPUSH
10290: CALL_OW 74
10294: ST_TO_ADDR
// if not enemy then
10295: LD_VAR 0 10
10299: NOT
10300: IFFALSE 10304
// exit ;
10302: GO 10705
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10304: LD_VAR 0 11
10308: PUSH
10309: LD_VAR 0 11
10313: PPUSH
10314: LD_VAR 0 10
10318: PPUSH
10319: CALL_OW 296
10323: PUSH
10324: LD_INT 13
10326: GREATER
10327: AND
10328: PUSH
10329: LD_VAR 0 1
10333: PPUSH
10334: LD_VAR 0 10
10338: PPUSH
10339: CALL_OW 296
10343: PUSH
10344: LD_INT 12
10346: GREATER
10347: OR
10348: IFFALSE 10352
// exit ;
10350: GO 10705
// missile := [ 1 ] ;
10352: LD_ADDR_VAR 0 14
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10363: LD_VAR 0 9
10367: PPUSH
10368: LD_VAR 0 12
10372: PPUSH
10373: CALL_OW 325
10377: IFFALSE 10406
// missile := Replace ( missile , missile + 1 , 2 ) ;
10379: LD_ADDR_VAR 0 14
10383: PUSH
10384: LD_VAR 0 14
10388: PPUSH
10389: LD_VAR 0 14
10393: PUSH
10394: LD_INT 1
10396: PLUS
10397: PPUSH
10398: LD_INT 2
10400: PPUSH
10401: CALL_OW 1
10405: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10406: LD_VAR 0 9
10410: PPUSH
10411: LD_VAR 0 13
10415: PPUSH
10416: CALL_OW 325
10420: PUSH
10421: LD_VAR 0 10
10425: PPUSH
10426: CALL_OW 255
10430: PPUSH
10431: LD_VAR 0 13
10435: PPUSH
10436: CALL_OW 325
10440: NOT
10441: AND
10442: IFFALSE 10471
// missile := Replace ( missile , missile + 1 , 3 ) ;
10444: LD_ADDR_VAR 0 14
10448: PUSH
10449: LD_VAR 0 14
10453: PPUSH
10454: LD_VAR 0 14
10458: PUSH
10459: LD_INT 1
10461: PLUS
10462: PPUSH
10463: LD_INT 3
10465: PPUSH
10466: CALL_OW 1
10470: ST_TO_ADDR
// if missile < 2 then
10471: LD_VAR 0 14
10475: PUSH
10476: LD_INT 2
10478: LESS
10479: IFFALSE 10483
// exit ;
10481: GO 10705
// x := GetX ( enemy ) ;
10483: LD_ADDR_VAR 0 4
10487: PUSH
10488: LD_VAR 0 10
10492: PPUSH
10493: CALL_OW 250
10497: ST_TO_ADDR
// y := GetY ( enemy ) ;
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_VAR 0 10
10507: PPUSH
10508: CALL_OW 251
10512: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_VAR 0 4
10522: PUSH
10523: LD_INT 1
10525: NEG
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 12
10534: PLUS
10535: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10536: LD_ADDR_VAR 0 7
10540: PUSH
10541: LD_VAR 0 5
10545: PUSH
10546: LD_INT 1
10548: NEG
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 12
10557: PLUS
10558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10559: LD_VAR 0 6
10563: PPUSH
10564: LD_VAR 0 7
10568: PPUSH
10569: CALL_OW 488
10573: NOT
10574: IFFALSE 10596
// begin _x := x ;
10576: LD_ADDR_VAR 0 6
10580: PUSH
10581: LD_VAR 0 4
10585: ST_TO_ADDR
// _y := y ;
10586: LD_ADDR_VAR 0 7
10590: PUSH
10591: LD_VAR 0 5
10595: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10596: LD_ADDR_VAR 0 3
10600: PUSH
10601: LD_INT 1
10603: PPUSH
10604: LD_VAR 0 14
10608: PPUSH
10609: CALL_OW 12
10613: ST_TO_ADDR
// case i of 1 :
10614: LD_VAR 0 3
10618: PUSH
10619: LD_INT 1
10621: DOUBLE
10622: EQUAL
10623: IFTRUE 10627
10625: GO 10644
10627: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_VAR 0 10
10637: PPUSH
10638: CALL_OW 115
10642: GO 10705
10644: LD_INT 2
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10674
10652: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_VAR 0 6
10662: PPUSH
10663: LD_VAR 0 7
10667: PPUSH
10668: CALL_OW 153
10672: GO 10705
10674: LD_INT 3
10676: DOUBLE
10677: EQUAL
10678: IFTRUE 10682
10680: GO 10704
10682: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_VAR 0 6
10692: PPUSH
10693: LD_VAR 0 7
10697: PPUSH
10698: CALL_OW 154
10702: GO 10705
10704: POP
// end ;
10705: LD_VAR 0 2
10709: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10710: LD_INT 0
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
10717: PPUSH
// if not unit or not building then
10718: LD_VAR 0 1
10722: NOT
10723: PUSH
10724: LD_VAR 0 2
10728: NOT
10729: OR
10730: IFFALSE 10734
// exit ;
10732: GO 10892
// x := GetX ( building ) ;
10734: LD_ADDR_VAR 0 5
10738: PUSH
10739: LD_VAR 0 2
10743: PPUSH
10744: CALL_OW 250
10748: ST_TO_ADDR
// y := GetY ( building ) ;
10749: LD_ADDR_VAR 0 6
10753: PUSH
10754: LD_VAR 0 2
10758: PPUSH
10759: CALL_OW 251
10763: ST_TO_ADDR
// for i = 0 to 5 do
10764: LD_ADDR_VAR 0 4
10768: PUSH
10769: DOUBLE
10770: LD_INT 0
10772: DEC
10773: ST_TO_ADDR
10774: LD_INT 5
10776: PUSH
10777: FOR_TO
10778: IFFALSE 10890
// begin _x := ShiftX ( x , i , 3 ) ;
10780: LD_ADDR_VAR 0 7
10784: PUSH
10785: LD_VAR 0 5
10789: PPUSH
10790: LD_VAR 0 4
10794: PPUSH
10795: LD_INT 3
10797: PPUSH
10798: CALL_OW 272
10802: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10803: LD_ADDR_VAR 0 8
10807: PUSH
10808: LD_VAR 0 6
10812: PPUSH
10813: LD_VAR 0 4
10817: PPUSH
10818: LD_INT 3
10820: PPUSH
10821: CALL_OW 273
10825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10826: LD_VAR 0 7
10830: PPUSH
10831: LD_VAR 0 8
10835: PPUSH
10836: CALL_OW 488
10840: NOT
10841: IFFALSE 10845
// continue ;
10843: GO 10777
// if HexInfo ( _x , _y ) = 0 then
10845: LD_VAR 0 7
10849: PPUSH
10850: LD_VAR 0 8
10854: PPUSH
10855: CALL_OW 428
10859: PUSH
10860: LD_INT 0
10862: EQUAL
10863: IFFALSE 10888
// begin ComMoveXY ( unit , _x , _y ) ;
10865: LD_VAR 0 1
10869: PPUSH
10870: LD_VAR 0 7
10874: PPUSH
10875: LD_VAR 0 8
10879: PPUSH
10880: CALL_OW 111
// exit ;
10884: POP
10885: POP
10886: GO 10892
// end ; end ;
10888: GO 10777
10890: POP
10891: POP
// end ;
10892: LD_VAR 0 3
10896: RET
// export function ScanBase ( side , base_area ) ; begin
10897: LD_INT 0
10899: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 2
10909: PPUSH
10910: LD_INT 81
10912: PUSH
10913: LD_VAR 0 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 70
10926: ST_TO_ADDR
// end ;
10927: LD_VAR 0 3
10931: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10932: LD_INT 0
10934: PPUSH
10935: PPUSH
10936: PPUSH
10937: PPUSH
// result := false ;
10938: LD_ADDR_VAR 0 2
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// side := GetSide ( unit ) ;
10946: LD_ADDR_VAR 0 3
10950: PUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 255
10960: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10961: LD_ADDR_VAR 0 4
10965: PUSH
10966: LD_VAR 0 1
10970: PPUSH
10971: CALL_OW 248
10975: ST_TO_ADDR
// case nat of 1 :
10976: LD_VAR 0 4
10980: PUSH
10981: LD_INT 1
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11000
10989: POP
// tech := tech_lassight ; 2 :
10990: LD_ADDR_VAR 0 5
10994: PUSH
10995: LD_INT 12
10997: ST_TO_ADDR
10998: GO 11039
11000: LD_INT 2
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11019
11008: POP
// tech := tech_mortar ; 3 :
11009: LD_ADDR_VAR 0 5
11013: PUSH
11014: LD_INT 41
11016: ST_TO_ADDR
11017: GO 11039
11019: LD_INT 3
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11038
11027: POP
// tech := tech_bazooka ; end ;
11028: LD_ADDR_VAR 0 5
11032: PUSH
11033: LD_INT 44
11035: ST_TO_ADDR
11036: GO 11039
11038: POP
// if Researched ( side , tech ) then
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_VAR 0 5
11048: PPUSH
11049: CALL_OW 325
11053: IFFALSE 11080
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11055: LD_ADDR_VAR 0 2
11059: PUSH
11060: LD_INT 5
11062: PUSH
11063: LD_INT 8
11065: PUSH
11066: LD_INT 9
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: LD_VAR 0 4
11078: ARRAY
11079: ST_TO_ADDR
// end ;
11080: LD_VAR 0 2
11084: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11085: LD_INT 0
11087: PPUSH
11088: PPUSH
11089: PPUSH
// if not mines then
11090: LD_VAR 0 2
11094: NOT
11095: IFFALSE 11099
// exit ;
11097: GO 11243
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11099: LD_ADDR_VAR 0 5
11103: PUSH
11104: LD_INT 81
11106: PUSH
11107: LD_VAR 0 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PPUSH
11137: CALL_OW 69
11141: ST_TO_ADDR
// for i in mines do
11142: LD_ADDR_VAR 0 4
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: FOR_IN
11153: IFFALSE 11241
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11155: LD_VAR 0 4
11159: PUSH
11160: LD_INT 1
11162: ARRAY
11163: PPUSH
11164: LD_VAR 0 4
11168: PUSH
11169: LD_INT 2
11171: ARRAY
11172: PPUSH
11173: CALL_OW 458
11177: NOT
11178: IFFALSE 11182
// continue ;
11180: GO 11152
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11182: LD_VAR 0 4
11186: PUSH
11187: LD_INT 1
11189: ARRAY
11190: PPUSH
11191: LD_VAR 0 4
11195: PUSH
11196: LD_INT 2
11198: ARRAY
11199: PPUSH
11200: CALL_OW 428
11204: PUSH
11205: LD_VAR 0 5
11209: IN
11210: IFFALSE 11239
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11212: LD_VAR 0 4
11216: PUSH
11217: LD_INT 1
11219: ARRAY
11220: PPUSH
11221: LD_VAR 0 4
11225: PUSH
11226: LD_INT 2
11228: ARRAY
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 456
// end ;
11239: GO 11152
11241: POP
11242: POP
// end ;
11243: LD_VAR 0 3
11247: RET
// export function Count ( array ) ; begin
11248: LD_INT 0
11250: PPUSH
// result := array + 0 ;
11251: LD_ADDR_VAR 0 2
11255: PUSH
11256: LD_VAR 0 1
11260: PUSH
11261: LD_INT 0
11263: PLUS
11264: ST_TO_ADDR
// end ;
11265: LD_VAR 0 2
11269: RET
// export function IsEmpty ( building ) ; begin
11270: LD_INT 0
11272: PPUSH
// if not building then
11273: LD_VAR 0 1
11277: NOT
11278: IFFALSE 11282
// exit ;
11280: GO 11325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: LD_VAR 0 1
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL_OW 255
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 58
11311: PUSH
11312: EMPTY
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: IN
11324: ST_TO_ADDR
// end ;
11325: LD_VAR 0 2
11329: RET
// export function IsNotFull ( building ) ; var places ; begin
11330: LD_INT 0
11332: PPUSH
11333: PPUSH
// if not building then
11334: LD_VAR 0 1
11338: NOT
11339: IFFALSE 11343
// exit ;
11341: GO 11371
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: LD_INT 3
11355: PUSH
11356: LD_INT 62
11358: PUSH
11359: EMPTY
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 72
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
// tmp := [ ] ;
11382: LD_ADDR_VAR 0 3
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// list := [ ] ;
11389: LD_ADDR_VAR 0 5
11393: PUSH
11394: EMPTY
11395: ST_TO_ADDR
// for i = 16 to 25 do
11396: LD_ADDR_VAR 0 4
11400: PUSH
11401: DOUBLE
11402: LD_INT 16
11404: DEC
11405: ST_TO_ADDR
11406: LD_INT 25
11408: PUSH
11409: FOR_TO
11410: IFFALSE 11483
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11412: LD_ADDR_VAR 0 3
11416: PUSH
11417: LD_VAR 0 3
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 255
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 91
11441: PUSH
11442: LD_VAR 0 1
11446: PUSH
11447: LD_INT 6
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 30
11457: PUSH
11458: LD_VAR 0 4
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: ADD
11480: ST_TO_ADDR
11481: GO 11409
11483: POP
11484: POP
// for i = 1 to tmp do
11485: LD_ADDR_VAR 0 4
11489: PUSH
11490: DOUBLE
11491: LD_INT 1
11493: DEC
11494: ST_TO_ADDR
11495: LD_VAR 0 3
11499: PUSH
11500: FOR_TO
11501: IFFALSE 11589
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11503: LD_ADDR_VAR 0 5
11507: PUSH
11508: LD_VAR 0 5
11512: PUSH
11513: LD_VAR 0 3
11517: PUSH
11518: LD_VAR 0 4
11522: ARRAY
11523: PPUSH
11524: CALL_OW 266
11528: PUSH
11529: LD_VAR 0 3
11533: PUSH
11534: LD_VAR 0 4
11538: ARRAY
11539: PPUSH
11540: CALL_OW 250
11544: PUSH
11545: LD_VAR 0 3
11549: PUSH
11550: LD_VAR 0 4
11554: ARRAY
11555: PPUSH
11556: CALL_OW 251
11560: PUSH
11561: LD_VAR 0 3
11565: PUSH
11566: LD_VAR 0 4
11570: ARRAY
11571: PPUSH
11572: CALL_OW 254
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: ADD
11586: ST_TO_ADDR
11587: GO 11500
11589: POP
11590: POP
// result := list ;
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: LD_VAR 0 5
11600: ST_TO_ADDR
// end ;
11601: LD_VAR 0 2
11605: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11606: LD_INT 0
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
// if not factory then
11615: LD_VAR 0 1
11619: NOT
11620: IFFALSE 11624
// exit ;
11622: GO 12217
// if control = control_apeman then
11624: LD_VAR 0 4
11628: PUSH
11629: LD_INT 5
11631: EQUAL
11632: IFFALSE 11741
// begin tmp := UnitsInside ( factory ) ;
11634: LD_ADDR_VAR 0 8
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 313
11648: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11649: LD_VAR 0 8
11653: PPUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 12
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 72
11668: NOT
11669: IFFALSE 11679
// control := control_manual ;
11671: LD_ADDR_VAR 0 4
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11679: LD_ADDR_VAR 0 8
11683: PUSH
11684: LD_VAR 0 1
11688: PPUSH
11689: CALL 11376 0 1
11693: ST_TO_ADDR
// if tmp then
11694: LD_VAR 0 8
11698: IFFALSE 11741
// begin for i in tmp do
11700: LD_ADDR_VAR 0 7
11704: PUSH
11705: LD_VAR 0 8
11709: PUSH
11710: FOR_IN
11711: IFFALSE 11739
// if i [ 1 ] = b_ext_radio then
11713: LD_VAR 0 7
11717: PUSH
11718: LD_INT 1
11720: ARRAY
11721: PUSH
11722: LD_INT 22
11724: EQUAL
11725: IFFALSE 11737
// begin control := control_remote ;
11727: LD_ADDR_VAR 0 4
11731: PUSH
11732: LD_INT 2
11734: ST_TO_ADDR
// break ;
11735: GO 11739
// end ;
11737: GO 11710
11739: POP
11740: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11741: LD_VAR 0 1
11745: PPUSH
11746: LD_VAR 0 2
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_VAR 0 4
11760: PPUSH
11761: LD_VAR 0 5
11765: PPUSH
11766: CALL_OW 448
11770: IFFALSE 11805
// begin result := [ chassis , engine , control , weapon ] ;
11772: LD_ADDR_VAR 0 6
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: LD_VAR 0 3
11786: PUSH
11787: LD_VAR 0 4
11791: PUSH
11792: LD_VAR 0 5
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: ST_TO_ADDR
// exit ;
11803: GO 12217
// end ; _chassis := AvailableChassisList ( factory ) ;
11805: LD_ADDR_VAR 0 9
11809: PUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 475
11819: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11820: LD_ADDR_VAR 0 11
11824: PUSH
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 476
11834: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11835: LD_ADDR_VAR 0 12
11839: PUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 477
11849: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11850: LD_ADDR_VAR 0 10
11854: PUSH
11855: LD_VAR 0 1
11859: PPUSH
11860: CALL_OW 478
11864: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11865: LD_VAR 0 9
11869: NOT
11870: PUSH
11871: LD_VAR 0 11
11875: NOT
11876: OR
11877: PUSH
11878: LD_VAR 0 12
11882: NOT
11883: OR
11884: PUSH
11885: LD_VAR 0 10
11889: NOT
11890: OR
11891: IFFALSE 11926
// begin result := [ chassis , engine , control , weapon ] ;
11893: LD_ADDR_VAR 0 6
11897: PUSH
11898: LD_VAR 0 2
11902: PUSH
11903: LD_VAR 0 3
11907: PUSH
11908: LD_VAR 0 4
11912: PUSH
11913: LD_VAR 0 5
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: ST_TO_ADDR
// exit ;
11924: GO 12217
// end ; if not chassis in _chassis then
11926: LD_VAR 0 2
11930: PUSH
11931: LD_VAR 0 9
11935: IN
11936: NOT
11937: IFFALSE 11963
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11939: LD_ADDR_VAR 0 2
11943: PUSH
11944: LD_VAR 0 9
11948: PUSH
11949: LD_INT 1
11951: PPUSH
11952: LD_VAR 0 9
11956: PPUSH
11957: CALL_OW 12
11961: ARRAY
11962: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11963: LD_VAR 0 2
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: CALL 12222 0 2
11977: NOT
11978: IFFALSE 12037
// repeat engine := _engine [ 1 ] ;
11980: LD_ADDR_VAR 0 3
11984: PUSH
11985: LD_VAR 0 11
11989: PUSH
11990: LD_INT 1
11992: ARRAY
11993: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11994: LD_ADDR_VAR 0 11
11998: PUSH
11999: LD_VAR 0 11
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 3
12011: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12012: LD_VAR 0 2
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: CALL 12222 0 2
12026: PUSH
12027: LD_VAR 0 11
12031: PUSH
12032: EMPTY
12033: EQUAL
12034: OR
12035: IFFALSE 11980
// if not control in _control then
12037: LD_VAR 0 4
12041: PUSH
12042: LD_VAR 0 12
12046: IN
12047: NOT
12048: IFFALSE 12074
// control := _control [ rand ( 1 , _control ) ] ;
12050: LD_ADDR_VAR 0 4
12054: PUSH
12055: LD_VAR 0 12
12059: PUSH
12060: LD_INT 1
12062: PPUSH
12063: LD_VAR 0 12
12067: PPUSH
12068: CALL_OW 12
12072: ARRAY
12073: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12074: LD_VAR 0 2
12078: PPUSH
12079: LD_VAR 0 5
12083: PPUSH
12084: CALL 12442 0 2
12088: NOT
12089: IFFALSE 12148
// repeat weapon := _weapon [ 1 ] ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 10
12100: PUSH
12101: LD_INT 1
12103: ARRAY
12104: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12105: LD_ADDR_VAR 0 10
12109: PUSH
12110: LD_VAR 0 10
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: CALL_OW 3
12122: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12123: LD_VAR 0 2
12127: PPUSH
12128: LD_VAR 0 5
12132: PPUSH
12133: CALL 12442 0 2
12137: PUSH
12138: LD_VAR 0 10
12142: PUSH
12143: EMPTY
12144: EQUAL
12145: OR
12146: IFFALSE 12091
// result := [ ] ;
12148: LD_ADDR_VAR 0 6
12152: PUSH
12153: EMPTY
12154: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12155: LD_VAR 0 1
12159: PPUSH
12160: LD_VAR 0 2
12164: PPUSH
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_VAR 0 4
12174: PPUSH
12175: LD_VAR 0 5
12179: PPUSH
12180: CALL_OW 448
12184: IFFALSE 12217
// result := [ chassis , engine , control , weapon ] ;
12186: LD_ADDR_VAR 0 6
12190: PUSH
12191: LD_VAR 0 2
12195: PUSH
12196: LD_VAR 0 3
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: LD_VAR 0 5
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: ST_TO_ADDR
// end ;
12217: LD_VAR 0 6
12221: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12222: LD_INT 0
12224: PPUSH
// if not chassis or not engine then
12225: LD_VAR 0 1
12229: NOT
12230: PUSH
12231: LD_VAR 0 2
12235: NOT
12236: OR
12237: IFFALSE 12241
// exit ;
12239: GO 12437
// case engine of engine_solar :
12241: LD_VAR 0 2
12245: PUSH
12246: LD_INT 2
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12292
12254: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12255: LD_ADDR_VAR 0 3
12259: PUSH
12260: LD_INT 11
12262: PUSH
12263: LD_INT 12
12265: PUSH
12266: LD_INT 13
12268: PUSH
12269: LD_INT 14
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: ST_TO_ADDR
12290: GO 12421
12292: LD_INT 1
12294: DOUBLE
12295: EQUAL
12296: IFTRUE 12300
12298: GO 12362
12300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12301: LD_ADDR_VAR 0 3
12305: PUSH
12306: LD_INT 11
12308: PUSH
12309: LD_INT 12
12311: PUSH
12312: LD_INT 13
12314: PUSH
12315: LD_INT 14
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 23
12338: PUSH
12339: LD_INT 22
12341: PUSH
12342: LD_INT 24
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: ST_TO_ADDR
12360: GO 12421
12362: LD_INT 3
12364: DOUBLE
12365: EQUAL
12366: IFTRUE 12370
12368: GO 12420
12370: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12371: LD_ADDR_VAR 0 3
12375: PUSH
12376: LD_INT 13
12378: PUSH
12379: LD_INT 14
12381: PUSH
12382: LD_INT 2
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: LD_INT 4
12390: PUSH
12391: LD_INT 5
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 22
12399: PUSH
12400: LD_INT 23
12402: PUSH
12403: LD_INT 24
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: ST_TO_ADDR
12418: GO 12421
12420: POP
// result := ( chassis in result ) ;
12421: LD_ADDR_VAR 0 3
12425: PUSH
12426: LD_VAR 0 1
12430: PUSH
12431: LD_VAR 0 3
12435: IN
12436: ST_TO_ADDR
// end ;
12437: LD_VAR 0 3
12441: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12442: LD_INT 0
12444: PPUSH
// if not chassis or not weapon then
12445: LD_VAR 0 1
12449: NOT
12450: PUSH
12451: LD_VAR 0 2
12455: NOT
12456: OR
12457: IFFALSE 12461
// exit ;
12459: GO 13521
// case weapon of us_machine_gun :
12461: LD_VAR 0 2
12465: PUSH
12466: LD_INT 2
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12504
12474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: LD_INT 2
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: LD_INT 4
12491: PUSH
12492: LD_INT 5
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: ST_TO_ADDR
12502: GO 13505
12504: LD_INT 3
12506: DOUBLE
12507: EQUAL
12508: IFTRUE 12512
12510: GO 12542
12512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12513: LD_ADDR_VAR 0 3
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 4
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: ST_TO_ADDR
12540: GO 13505
12542: LD_INT 11
12544: DOUBLE
12545: EQUAL
12546: IFTRUE 12550
12548: GO 12580
12550: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12551: LD_ADDR_VAR 0 3
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: LD_INT 4
12567: PUSH
12568: LD_INT 5
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: ST_TO_ADDR
12578: GO 13505
12580: LD_INT 4
12582: DOUBLE
12583: EQUAL
12584: IFTRUE 12588
12586: GO 12614
12588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12589: LD_ADDR_VAR 0 3
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: LD_INT 4
12602: PUSH
12603: LD_INT 5
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: ST_TO_ADDR
12612: GO 13505
12614: LD_INT 5
12616: DOUBLE
12617: EQUAL
12618: IFTRUE 12622
12620: GO 12648
12622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12623: LD_ADDR_VAR 0 3
12627: PUSH
12628: LD_INT 2
12630: PUSH
12631: LD_INT 3
12633: PUSH
12634: LD_INT 4
12636: PUSH
12637: LD_INT 5
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: ST_TO_ADDR
12646: GO 13505
12648: LD_INT 9
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12682
12656: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12657: LD_ADDR_VAR 0 3
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: LD_INT 4
12670: PUSH
12671: LD_INT 5
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: ST_TO_ADDR
12680: GO 13505
12682: LD_INT 7
12684: DOUBLE
12685: EQUAL
12686: IFTRUE 12690
12688: GO 12716
12690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_INT 2
12698: PUSH
12699: LD_INT 3
12701: PUSH
12702: LD_INT 4
12704: PUSH
12705: LD_INT 5
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: ST_TO_ADDR
12714: GO 13505
12716: LD_INT 12
12718: DOUBLE
12719: EQUAL
12720: IFTRUE 12724
12722: GO 12750
12724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12725: LD_ADDR_VAR 0 3
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: LD_INT 3
12735: PUSH
12736: LD_INT 4
12738: PUSH
12739: LD_INT 5
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: ST_TO_ADDR
12748: GO 13505
12750: LD_INT 13
12752: DOUBLE
12753: EQUAL
12754: IFTRUE 12758
12756: GO 12784
12758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: LD_INT 4
12772: PUSH
12773: LD_INT 5
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: ST_TO_ADDR
12782: GO 13505
12784: LD_INT 14
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12810
12792: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12793: LD_ADDR_VAR 0 3
12797: PUSH
12798: LD_INT 4
12800: PUSH
12801: LD_INT 5
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: ST_TO_ADDR
12808: GO 13505
12810: LD_INT 6
12812: DOUBLE
12813: EQUAL
12814: IFTRUE 12818
12816: GO 12836
12818: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12819: LD_ADDR_VAR 0 3
12823: PUSH
12824: LD_INT 4
12826: PUSH
12827: LD_INT 5
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: ST_TO_ADDR
12834: GO 13505
12836: LD_INT 10
12838: DOUBLE
12839: EQUAL
12840: IFTRUE 12844
12842: GO 12862
12844: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12845: LD_ADDR_VAR 0 3
12849: PUSH
12850: LD_INT 4
12852: PUSH
12853: LD_INT 5
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: ST_TO_ADDR
12860: GO 13505
12862: LD_INT 22
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12896
12870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12871: LD_ADDR_VAR 0 3
12875: PUSH
12876: LD_INT 11
12878: PUSH
12879: LD_INT 12
12881: PUSH
12882: LD_INT 13
12884: PUSH
12885: LD_INT 14
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: ST_TO_ADDR
12894: GO 13505
12896: LD_INT 23
12898: DOUBLE
12899: EQUAL
12900: IFTRUE 12904
12902: GO 12930
12904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_INT 11
12912: PUSH
12913: LD_INT 12
12915: PUSH
12916: LD_INT 13
12918: PUSH
12919: LD_INT 14
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: ST_TO_ADDR
12928: GO 13505
12930: LD_INT 24
12932: DOUBLE
12933: EQUAL
12934: IFTRUE 12938
12936: GO 12964
12938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_INT 11
12946: PUSH
12947: LD_INT 12
12949: PUSH
12950: LD_INT 13
12952: PUSH
12953: LD_INT 14
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: ST_TO_ADDR
12962: GO 13505
12964: LD_INT 30
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 12998
12972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_INT 11
12980: PUSH
12981: LD_INT 12
12983: PUSH
12984: LD_INT 13
12986: PUSH
12987: LD_INT 14
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: ST_TO_ADDR
12996: GO 13505
12998: LD_INT 25
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13024
13006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_INT 13
13014: PUSH
13015: LD_INT 14
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: ST_TO_ADDR
13022: GO 13505
13024: LD_INT 27
13026: DOUBLE
13027: EQUAL
13028: IFTRUE 13032
13030: GO 13050
13032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_INT 13
13040: PUSH
13041: LD_INT 14
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 13505
13050: LD_INT 92
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13084
13058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13059: LD_ADDR_VAR 0 3
13063: PUSH
13064: LD_INT 11
13066: PUSH
13067: LD_INT 12
13069: PUSH
13070: LD_INT 13
13072: PUSH
13073: LD_INT 14
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: ST_TO_ADDR
13082: GO 13505
13084: LD_INT 28
13086: DOUBLE
13087: EQUAL
13088: IFTRUE 13092
13090: GO 13110
13092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13093: LD_ADDR_VAR 0 3
13097: PUSH
13098: LD_INT 13
13100: PUSH
13101: LD_INT 14
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 13505
13110: LD_INT 29
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13136
13118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: LD_INT 13
13126: PUSH
13127: LD_INT 14
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: ST_TO_ADDR
13134: GO 13505
13136: LD_INT 31
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13162
13144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13145: LD_ADDR_VAR 0 3
13149: PUSH
13150: LD_INT 13
13152: PUSH
13153: LD_INT 14
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: ST_TO_ADDR
13160: GO 13505
13162: LD_INT 26
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13188
13170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13171: LD_ADDR_VAR 0 3
13175: PUSH
13176: LD_INT 13
13178: PUSH
13179: LD_INT 14
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: ST_TO_ADDR
13186: GO 13505
13188: LD_INT 42
13190: DOUBLE
13191: EQUAL
13192: IFTRUE 13196
13194: GO 13222
13196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: LD_INT 23
13210: PUSH
13211: LD_INT 24
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: ST_TO_ADDR
13220: GO 13505
13222: LD_INT 43
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13256
13230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13231: LD_ADDR_VAR 0 3
13235: PUSH
13236: LD_INT 21
13238: PUSH
13239: LD_INT 22
13241: PUSH
13242: LD_INT 23
13244: PUSH
13245: LD_INT 24
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: ST_TO_ADDR
13254: GO 13505
13256: LD_INT 44
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13290
13264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13265: LD_ADDR_VAR 0 3
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_INT 23
13278: PUSH
13279: LD_INT 24
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: ST_TO_ADDR
13288: GO 13505
13290: LD_INT 45
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13324
13298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13299: LD_ADDR_VAR 0 3
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 22
13309: PUSH
13310: LD_INT 23
13312: PUSH
13313: LD_INT 24
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: ST_TO_ADDR
13322: GO 13505
13324: LD_INT 49
13326: DOUBLE
13327: EQUAL
13328: IFTRUE 13332
13330: GO 13358
13332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13333: LD_ADDR_VAR 0 3
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 22
13343: PUSH
13344: LD_INT 23
13346: PUSH
13347: LD_INT 24
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: ST_TO_ADDR
13356: GO 13505
13358: LD_INT 51
13360: DOUBLE
13361: EQUAL
13362: IFTRUE 13366
13364: GO 13392
13366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: LD_INT 21
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 23
13380: PUSH
13381: LD_INT 24
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: ST_TO_ADDR
13390: GO 13505
13392: LD_INT 52
13394: DOUBLE
13395: EQUAL
13396: IFTRUE 13400
13398: GO 13426
13400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13401: LD_ADDR_VAR 0 3
13405: PUSH
13406: LD_INT 21
13408: PUSH
13409: LD_INT 22
13411: PUSH
13412: LD_INT 23
13414: PUSH
13415: LD_INT 24
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: ST_TO_ADDR
13424: GO 13505
13426: LD_INT 53
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13452
13434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13435: LD_ADDR_VAR 0 3
13439: PUSH
13440: LD_INT 23
13442: PUSH
13443: LD_INT 24
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: ST_TO_ADDR
13450: GO 13505
13452: LD_INT 46
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13478
13460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: LD_INT 23
13468: PUSH
13469: LD_INT 24
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: ST_TO_ADDR
13476: GO 13505
13478: LD_INT 47
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13504
13486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_INT 23
13494: PUSH
13495: LD_INT 24
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: ST_TO_ADDR
13502: GO 13505
13504: POP
// result := ( chassis in result ) ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: LD_VAR 0 1
13514: PUSH
13515: LD_VAR 0 3
13519: IN
13520: ST_TO_ADDR
// end ;
13521: LD_VAR 0 3
13525: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13526: LD_INT 0
13528: PPUSH
13529: PPUSH
13530: PPUSH
13531: PPUSH
13532: PPUSH
13533: PPUSH
13534: PPUSH
// result := array ;
13535: LD_ADDR_VAR 0 5
13539: PUSH
13540: LD_VAR 0 1
13544: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13545: LD_VAR 0 1
13549: NOT
13550: PUSH
13551: LD_VAR 0 2
13555: NOT
13556: OR
13557: PUSH
13558: LD_VAR 0 3
13562: NOT
13563: OR
13564: PUSH
13565: LD_VAR 0 2
13569: PUSH
13570: LD_VAR 0 1
13574: GREATER
13575: OR
13576: PUSH
13577: LD_VAR 0 3
13581: PUSH
13582: LD_VAR 0 1
13586: GREATER
13587: OR
13588: IFFALSE 13592
// exit ;
13590: GO 13888
// if direction then
13592: LD_VAR 0 4
13596: IFFALSE 13660
// begin d := 1 ;
13598: LD_ADDR_VAR 0 9
13602: PUSH
13603: LD_INT 1
13605: ST_TO_ADDR
// if i_from > i_to then
13606: LD_VAR 0 2
13610: PUSH
13611: LD_VAR 0 3
13615: GREATER
13616: IFFALSE 13642
// length := ( array - i_from ) + i_to else
13618: LD_ADDR_VAR 0 11
13622: PUSH
13623: LD_VAR 0 1
13627: PUSH
13628: LD_VAR 0 2
13632: MINUS
13633: PUSH
13634: LD_VAR 0 3
13638: PLUS
13639: ST_TO_ADDR
13640: GO 13658
// length := i_to - i_from ;
13642: LD_ADDR_VAR 0 11
13646: PUSH
13647: LD_VAR 0 3
13651: PUSH
13652: LD_VAR 0 2
13656: MINUS
13657: ST_TO_ADDR
// end else
13658: GO 13721
// begin d := - 1 ;
13660: LD_ADDR_VAR 0 9
13664: PUSH
13665: LD_INT 1
13667: NEG
13668: ST_TO_ADDR
// if i_from > i_to then
13669: LD_VAR 0 2
13673: PUSH
13674: LD_VAR 0 3
13678: GREATER
13679: IFFALSE 13699
// length := i_from - i_to else
13681: LD_ADDR_VAR 0 11
13685: PUSH
13686: LD_VAR 0 2
13690: PUSH
13691: LD_VAR 0 3
13695: MINUS
13696: ST_TO_ADDR
13697: GO 13721
// length := ( array - i_to ) + i_from ;
13699: LD_ADDR_VAR 0 11
13703: PUSH
13704: LD_VAR 0 1
13708: PUSH
13709: LD_VAR 0 3
13713: MINUS
13714: PUSH
13715: LD_VAR 0 2
13719: PLUS
13720: ST_TO_ADDR
// end ; if not length then
13721: LD_VAR 0 11
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13888
// tmp := array ;
13730: LD_ADDR_VAR 0 10
13734: PUSH
13735: LD_VAR 0 1
13739: ST_TO_ADDR
// for i = 1 to length do
13740: LD_ADDR_VAR 0 6
13744: PUSH
13745: DOUBLE
13746: LD_INT 1
13748: DEC
13749: ST_TO_ADDR
13750: LD_VAR 0 11
13754: PUSH
13755: FOR_TO
13756: IFFALSE 13876
// begin for j = 1 to array do
13758: LD_ADDR_VAR 0 7
13762: PUSH
13763: DOUBLE
13764: LD_INT 1
13766: DEC
13767: ST_TO_ADDR
13768: LD_VAR 0 1
13772: PUSH
13773: FOR_TO
13774: IFFALSE 13862
// begin k := j + d ;
13776: LD_ADDR_VAR 0 8
13780: PUSH
13781: LD_VAR 0 7
13785: PUSH
13786: LD_VAR 0 9
13790: PLUS
13791: ST_TO_ADDR
// if k > array then
13792: LD_VAR 0 8
13796: PUSH
13797: LD_VAR 0 1
13801: GREATER
13802: IFFALSE 13812
// k := 1 ;
13804: LD_ADDR_VAR 0 8
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// if not k then
13812: LD_VAR 0 8
13816: NOT
13817: IFFALSE 13829
// k := array ;
13819: LD_ADDR_VAR 0 8
13823: PUSH
13824: LD_VAR 0 1
13828: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13829: LD_ADDR_VAR 0 10
13833: PUSH
13834: LD_VAR 0 10
13838: PPUSH
13839: LD_VAR 0 8
13843: PPUSH
13844: LD_VAR 0 1
13848: PUSH
13849: LD_VAR 0 7
13853: ARRAY
13854: PPUSH
13855: CALL_OW 1
13859: ST_TO_ADDR
// end ;
13860: GO 13773
13862: POP
13863: POP
// array := tmp ;
13864: LD_ADDR_VAR 0 1
13868: PUSH
13869: LD_VAR 0 10
13873: ST_TO_ADDR
// end ;
13874: GO 13755
13876: POP
13877: POP
// result := array ;
13878: LD_ADDR_VAR 0 5
13882: PUSH
13883: LD_VAR 0 1
13887: ST_TO_ADDR
// end ;
13888: LD_VAR 0 5
13892: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
// result := 0 ;
13897: LD_ADDR_VAR 0 3
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// if not array or not value in array then
13905: LD_VAR 0 1
13909: NOT
13910: PUSH
13911: LD_VAR 0 2
13915: PUSH
13916: LD_VAR 0 1
13920: IN
13921: NOT
13922: OR
13923: IFFALSE 13927
// exit ;
13925: GO 13981
// for i = 1 to array do
13927: LD_ADDR_VAR 0 4
13931: PUSH
13932: DOUBLE
13933: LD_INT 1
13935: DEC
13936: ST_TO_ADDR
13937: LD_VAR 0 1
13941: PUSH
13942: FOR_TO
13943: IFFALSE 13979
// if value = array [ i ] then
13945: LD_VAR 0 2
13949: PUSH
13950: LD_VAR 0 1
13954: PUSH
13955: LD_VAR 0 4
13959: ARRAY
13960: EQUAL
13961: IFFALSE 13977
// begin result := i ;
13963: LD_ADDR_VAR 0 3
13967: PUSH
13968: LD_VAR 0 4
13972: ST_TO_ADDR
// exit ;
13973: POP
13974: POP
13975: GO 13981
// end ;
13977: GO 13942
13979: POP
13980: POP
// end ;
13981: LD_VAR 0 3
13985: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13986: LD_INT 0
13988: PPUSH
// vc_chassis := chassis ;
13989: LD_ADDR_OWVAR 37
13993: PUSH
13994: LD_VAR 0 1
13998: ST_TO_ADDR
// vc_engine := engine ;
13999: LD_ADDR_OWVAR 39
14003: PUSH
14004: LD_VAR 0 2
14008: ST_TO_ADDR
// vc_control := control ;
14009: LD_ADDR_OWVAR 38
14013: PUSH
14014: LD_VAR 0 3
14018: ST_TO_ADDR
// vc_weapon := weapon ;
14019: LD_ADDR_OWVAR 40
14023: PUSH
14024: LD_VAR 0 4
14028: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14029: LD_ADDR_OWVAR 41
14033: PUSH
14034: LD_VAR 0 5
14038: ST_TO_ADDR
// end ;
14039: LD_VAR 0 6
14043: RET
// export function WantPlant ( unit ) ; var task ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// result := false ;
14048: LD_ADDR_VAR 0 2
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14056: LD_ADDR_VAR 0 3
14060: PUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 437
14070: ST_TO_ADDR
// if task then
14071: LD_VAR 0 3
14075: IFFALSE 14103
// if task [ 1 ] [ 1 ] = p then
14077: LD_VAR 0 3
14081: PUSH
14082: LD_INT 1
14084: ARRAY
14085: PUSH
14086: LD_INT 1
14088: ARRAY
14089: PUSH
14090: LD_STRING p
14092: EQUAL
14093: IFFALSE 14103
// result := true ;
14095: LD_ADDR_VAR 0 2
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
// end ;
14103: LD_VAR 0 2
14107: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14108: LD_INT 0
14110: PPUSH
14111: PPUSH
14112: PPUSH
14113: PPUSH
// if pos < 1 then
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: LESS
14122: IFFALSE 14126
// exit ;
14124: GO 14429
// if pos = 1 then
14126: LD_VAR 0 2
14130: PUSH
14131: LD_INT 1
14133: EQUAL
14134: IFFALSE 14167
// result := Replace ( arr , pos [ 1 ] , value ) else
14136: LD_ADDR_VAR 0 4
14140: PUSH
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_VAR 0 2
14150: PUSH
14151: LD_INT 1
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: CALL_OW 1
14164: ST_TO_ADDR
14165: GO 14429
// begin tmp := arr ;
14167: LD_ADDR_VAR 0 6
14171: PUSH
14172: LD_VAR 0 1
14176: ST_TO_ADDR
// s_arr := [ tmp ] ;
14177: LD_ADDR_VAR 0 7
14181: PUSH
14182: LD_VAR 0 6
14186: PUSH
14187: EMPTY
14188: LIST
14189: ST_TO_ADDR
// for i = 1 to pos - 1 do
14190: LD_ADDR_VAR 0 5
14194: PUSH
14195: DOUBLE
14196: LD_INT 1
14198: DEC
14199: ST_TO_ADDR
14200: LD_VAR 0 2
14204: PUSH
14205: LD_INT 1
14207: MINUS
14208: PUSH
14209: FOR_TO
14210: IFFALSE 14255
// begin tmp := tmp [ pos [ i ] ] ;
14212: LD_ADDR_VAR 0 6
14216: PUSH
14217: LD_VAR 0 6
14221: PUSH
14222: LD_VAR 0 2
14226: PUSH
14227: LD_VAR 0 5
14231: ARRAY
14232: ARRAY
14233: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14234: LD_ADDR_VAR 0 7
14238: PUSH
14239: LD_VAR 0 7
14243: PUSH
14244: LD_VAR 0 6
14248: PUSH
14249: EMPTY
14250: LIST
14251: ADD
14252: ST_TO_ADDR
// end ;
14253: GO 14209
14255: POP
14256: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14257: LD_ADDR_VAR 0 6
14261: PUSH
14262: LD_VAR 0 6
14266: PPUSH
14267: LD_VAR 0 2
14271: PUSH
14272: LD_VAR 0 2
14276: ARRAY
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: CALL_OW 1
14287: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14288: LD_ADDR_VAR 0 7
14292: PUSH
14293: LD_VAR 0 7
14297: PPUSH
14298: LD_VAR 0 7
14302: PPUSH
14303: LD_VAR 0 6
14307: PPUSH
14308: CALL_OW 1
14312: ST_TO_ADDR
// for i = s_arr downto 2 do
14313: LD_ADDR_VAR 0 5
14317: PUSH
14318: DOUBLE
14319: LD_VAR 0 7
14323: INC
14324: ST_TO_ADDR
14325: LD_INT 2
14327: PUSH
14328: FOR_DOWNTO
14329: IFFALSE 14413
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14331: LD_ADDR_VAR 0 6
14335: PUSH
14336: LD_VAR 0 7
14340: PUSH
14341: LD_VAR 0 5
14345: PUSH
14346: LD_INT 1
14348: MINUS
14349: ARRAY
14350: PPUSH
14351: LD_VAR 0 2
14355: PUSH
14356: LD_VAR 0 5
14360: PUSH
14361: LD_INT 1
14363: MINUS
14364: ARRAY
14365: PPUSH
14366: LD_VAR 0 7
14370: PUSH
14371: LD_VAR 0 5
14375: ARRAY
14376: PPUSH
14377: CALL_OW 1
14381: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14382: LD_ADDR_VAR 0 7
14386: PUSH
14387: LD_VAR 0 7
14391: PPUSH
14392: LD_VAR 0 5
14396: PUSH
14397: LD_INT 1
14399: MINUS
14400: PPUSH
14401: LD_VAR 0 6
14405: PPUSH
14406: CALL_OW 1
14410: ST_TO_ADDR
// end ;
14411: GO 14328
14413: POP
14414: POP
// result := s_arr [ 1 ] ;
14415: LD_ADDR_VAR 0 4
14419: PUSH
14420: LD_VAR 0 7
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: ST_TO_ADDR
// end ; end ;
14429: LD_VAR 0 4
14433: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14434: LD_INT 0
14436: PPUSH
14437: PPUSH
// if not list then
14438: LD_VAR 0 1
14442: NOT
14443: IFFALSE 14447
// exit ;
14445: GO 14538
// i := list [ pos1 ] ;
14447: LD_ADDR_VAR 0 5
14451: PUSH
14452: LD_VAR 0 1
14456: PUSH
14457: LD_VAR 0 2
14461: ARRAY
14462: ST_TO_ADDR
// if not i then
14463: LD_VAR 0 5
14467: NOT
14468: IFFALSE 14472
// exit ;
14470: GO 14538
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14472: LD_ADDR_VAR 0 1
14476: PUSH
14477: LD_VAR 0 1
14481: PPUSH
14482: LD_VAR 0 2
14486: PPUSH
14487: LD_VAR 0 1
14491: PUSH
14492: LD_VAR 0 3
14496: ARRAY
14497: PPUSH
14498: CALL_OW 1
14502: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_VAR 0 1
14512: PPUSH
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_VAR 0 5
14522: PPUSH
14523: CALL_OW 1
14527: ST_TO_ADDR
// result := list ;
14528: LD_ADDR_VAR 0 4
14532: PUSH
14533: LD_VAR 0 1
14537: ST_TO_ADDR
// end ;
14538: LD_VAR 0 4
14542: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14543: LD_INT 0
14545: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14546: LD_ADDR_VAR 0 5
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 250
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 251
14570: PPUSH
14571: LD_VAR 0 2
14575: PPUSH
14576: LD_VAR 0 3
14580: PPUSH
14581: LD_VAR 0 4
14585: PPUSH
14586: CALL 14964 0 5
14590: ST_TO_ADDR
// end ;
14591: LD_VAR 0 5
14595: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14596: LD_INT 0
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
// if not list or not unit then
14602: LD_VAR 0 2
14606: NOT
14607: PUSH
14608: LD_VAR 0 1
14612: NOT
14613: OR
14614: IFFALSE 14618
// exit ;
14616: GO 14959
// result := [ ] ;
14618: LD_ADDR_VAR 0 5
14622: PUSH
14623: EMPTY
14624: ST_TO_ADDR
// for i in list do
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_VAR 0 2
14634: PUSH
14635: FOR_IN
14636: IFFALSE 14854
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14638: LD_ADDR_VAR 0 8
14642: PUSH
14643: LD_VAR 0 1
14647: PPUSH
14648: LD_VAR 0 6
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PPUSH
14657: LD_VAR 0 6
14661: PUSH
14662: LD_INT 2
14664: ARRAY
14665: PPUSH
14666: CALL_OW 297
14670: ST_TO_ADDR
// if not Count ( result ) then
14671: LD_VAR 0 5
14675: PPUSH
14676: CALL 11248 0 1
14680: NOT
14681: IFFALSE 14714
// begin result := Join ( result , [ i , tmp ] ) ;
14683: LD_ADDR_VAR 0 5
14687: PUSH
14688: LD_VAR 0 5
14692: PPUSH
14693: LD_VAR 0 6
14697: PUSH
14698: LD_VAR 0 8
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL 46857 0 2
14711: ST_TO_ADDR
// continue ;
14712: GO 14635
// end ; if result [ result ] [ 2 ] <= tmp then
14714: LD_VAR 0 5
14718: PUSH
14719: LD_VAR 0 5
14723: ARRAY
14724: PUSH
14725: LD_INT 2
14727: ARRAY
14728: PUSH
14729: LD_VAR 0 8
14733: LESSEQUAL
14734: IFFALSE 14767
// result := Join ( result , [ i , tmp ] ) else
14736: LD_ADDR_VAR 0 5
14740: PUSH
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 6
14750: PUSH
14751: LD_VAR 0 8
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PPUSH
14760: CALL 46857 0 2
14764: ST_TO_ADDR
14765: GO 14852
// begin for j := 1 to Count ( result ) do
14767: LD_ADDR_VAR 0 7
14771: PUSH
14772: DOUBLE
14773: LD_INT 1
14775: DEC
14776: ST_TO_ADDR
14777: LD_VAR 0 5
14781: PPUSH
14782: CALL 11248 0 1
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14850
// begin if tmp < result [ j ] [ 2 ] then
14790: LD_VAR 0 8
14794: PUSH
14795: LD_VAR 0 5
14799: PUSH
14800: LD_VAR 0 7
14804: ARRAY
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: LESS
14810: IFFALSE 14848
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14812: LD_ADDR_VAR 0 5
14816: PUSH
14817: LD_VAR 0 5
14821: PPUSH
14822: LD_VAR 0 7
14826: PPUSH
14827: LD_VAR 0 6
14831: PUSH
14832: LD_VAR 0 8
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 2
14845: ST_TO_ADDR
// break ;
14846: GO 14850
// end ; end ;
14848: GO 14787
14850: POP
14851: POP
// end ; end ;
14852: GO 14635
14854: POP
14855: POP
// if result and not asc then
14856: LD_VAR 0 5
14860: PUSH
14861: LD_VAR 0 3
14865: NOT
14866: AND
14867: IFFALSE 14884
// result := ReverseArray ( result ) ;
14869: LD_ADDR_VAR 0 5
14873: PUSH
14874: LD_VAR 0 5
14878: PPUSH
14879: CALL 42124 0 1
14883: ST_TO_ADDR
// tmp := [ ] ;
14884: LD_ADDR_VAR 0 8
14888: PUSH
14889: EMPTY
14890: ST_TO_ADDR
// if mode then
14891: LD_VAR 0 4
14895: IFFALSE 14959
// begin for i := 1 to result do
14897: LD_ADDR_VAR 0 6
14901: PUSH
14902: DOUBLE
14903: LD_INT 1
14905: DEC
14906: ST_TO_ADDR
14907: LD_VAR 0 5
14911: PUSH
14912: FOR_TO
14913: IFFALSE 14947
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14915: LD_ADDR_VAR 0 8
14919: PUSH
14920: LD_VAR 0 8
14924: PPUSH
14925: LD_VAR 0 5
14929: PUSH
14930: LD_VAR 0 6
14934: ARRAY
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: CALL 46857 0 2
14944: ST_TO_ADDR
14945: GO 14912
14947: POP
14948: POP
// result := tmp ;
14949: LD_ADDR_VAR 0 5
14953: PUSH
14954: LD_VAR 0 8
14958: ST_TO_ADDR
// end ; end ;
14959: LD_VAR 0 5
14963: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
// if not list then
14970: LD_VAR 0 3
14974: NOT
14975: IFFALSE 14979
// exit ;
14977: GO 15367
// result := [ ] ;
14979: LD_ADDR_VAR 0 6
14983: PUSH
14984: EMPTY
14985: ST_TO_ADDR
// for i in list do
14986: LD_ADDR_VAR 0 7
14990: PUSH
14991: LD_VAR 0 3
14995: PUSH
14996: FOR_IN
14997: IFFALSE 15199
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14999: LD_ADDR_VAR 0 9
15003: PUSH
15004: LD_VAR 0 7
15008: PPUSH
15009: LD_VAR 0 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL_OW 297
15023: ST_TO_ADDR
// if not result then
15024: LD_VAR 0 6
15028: NOT
15029: IFFALSE 15055
// result := [ [ i , tmp ] ] else
15031: LD_ADDR_VAR 0 6
15035: PUSH
15036: LD_VAR 0 7
15040: PUSH
15041: LD_VAR 0 9
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: ST_TO_ADDR
15053: GO 15197
// begin if result [ result ] [ 2 ] <= tmp then
15055: LD_VAR 0 6
15059: PUSH
15060: LD_VAR 0 6
15064: ARRAY
15065: PUSH
15066: LD_INT 2
15068: ARRAY
15069: PUSH
15070: LD_VAR 0 9
15074: LESSEQUAL
15075: IFFALSE 15117
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15077: LD_ADDR_VAR 0 6
15081: PUSH
15082: LD_VAR 0 6
15086: PPUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 1
15094: PLUS
15095: PPUSH
15096: LD_VAR 0 7
15100: PUSH
15101: LD_VAR 0 9
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PPUSH
15110: CALL_OW 2
15114: ST_TO_ADDR
15115: GO 15197
// for j := 1 to result do
15117: LD_ADDR_VAR 0 8
15121: PUSH
15122: DOUBLE
15123: LD_INT 1
15125: DEC
15126: ST_TO_ADDR
15127: LD_VAR 0 6
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15195
// begin if tmp < result [ j ] [ 2 ] then
15135: LD_VAR 0 9
15139: PUSH
15140: LD_VAR 0 6
15144: PUSH
15145: LD_VAR 0 8
15149: ARRAY
15150: PUSH
15151: LD_INT 2
15153: ARRAY
15154: LESS
15155: IFFALSE 15193
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 6
15166: PPUSH
15167: LD_VAR 0 8
15171: PPUSH
15172: LD_VAR 0 7
15176: PUSH
15177: LD_VAR 0 9
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 2
15190: ST_TO_ADDR
// break ;
15191: GO 15195
// end ; end ;
15193: GO 15132
15195: POP
15196: POP
// end ; end ;
15197: GO 14996
15199: POP
15200: POP
// if result and not asc then
15201: LD_VAR 0 6
15205: PUSH
15206: LD_VAR 0 4
15210: NOT
15211: AND
15212: IFFALSE 15287
// begin tmp := result ;
15214: LD_ADDR_VAR 0 9
15218: PUSH
15219: LD_VAR 0 6
15223: ST_TO_ADDR
// for i = tmp downto 1 do
15224: LD_ADDR_VAR 0 7
15228: PUSH
15229: DOUBLE
15230: LD_VAR 0 9
15234: INC
15235: ST_TO_ADDR
15236: LD_INT 1
15238: PUSH
15239: FOR_DOWNTO
15240: IFFALSE 15285
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15242: LD_ADDR_VAR 0 6
15246: PUSH
15247: LD_VAR 0 6
15251: PPUSH
15252: LD_VAR 0 9
15256: PUSH
15257: LD_VAR 0 7
15261: MINUS
15262: PUSH
15263: LD_INT 1
15265: PLUS
15266: PPUSH
15267: LD_VAR 0 9
15271: PUSH
15272: LD_VAR 0 7
15276: ARRAY
15277: PPUSH
15278: CALL_OW 1
15282: ST_TO_ADDR
15283: GO 15239
15285: POP
15286: POP
// end ; tmp := [ ] ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: EMPTY
15293: ST_TO_ADDR
// if mode then
15294: LD_VAR 0 5
15298: IFFALSE 15367
// begin for i = 1 to result do
15300: LD_ADDR_VAR 0 7
15304: PUSH
15305: DOUBLE
15306: LD_INT 1
15308: DEC
15309: ST_TO_ADDR
15310: LD_VAR 0 6
15314: PUSH
15315: FOR_TO
15316: IFFALSE 15355
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15318: LD_ADDR_VAR 0 9
15322: PUSH
15323: LD_VAR 0 9
15327: PPUSH
15328: LD_VAR 0 7
15332: PPUSH
15333: LD_VAR 0 6
15337: PUSH
15338: LD_VAR 0 7
15342: ARRAY
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 1
15352: ST_TO_ADDR
15353: GO 15315
15355: POP
15356: POP
// result := tmp ;
15357: LD_ADDR_VAR 0 6
15361: PUSH
15362: LD_VAR 0 9
15366: ST_TO_ADDR
// end ; end ;
15367: LD_VAR 0 6
15371: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15372: LD_INT 0
15374: PPUSH
15375: PPUSH
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15380: LD_ADDR_VAR 0 5
15384: PUSH
15385: LD_INT 0
15387: PUSH
15388: LD_INT 0
15390: PUSH
15391: LD_INT 0
15393: PUSH
15394: EMPTY
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: ST_TO_ADDR
// if not x or not y then
15402: LD_VAR 0 2
15406: NOT
15407: PUSH
15408: LD_VAR 0 3
15412: NOT
15413: OR
15414: IFFALSE 15418
// exit ;
15416: GO 17068
// if not range then
15418: LD_VAR 0 4
15422: NOT
15423: IFFALSE 15433
// range := 10 ;
15425: LD_ADDR_VAR 0 4
15429: PUSH
15430: LD_INT 10
15432: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15433: LD_ADDR_VAR 0 8
15437: PUSH
15438: LD_INT 81
15440: PUSH
15441: LD_VAR 0 1
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 92
15452: PUSH
15453: LD_VAR 0 2
15457: PUSH
15458: LD_VAR 0 3
15462: PUSH
15463: LD_VAR 0 4
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 3
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: ST_TO_ADDR
// if not tmp then
15501: LD_VAR 0 8
15505: NOT
15506: IFFALSE 15510
// exit ;
15508: GO 17068
// for i in tmp do
15510: LD_ADDR_VAR 0 6
15514: PUSH
15515: LD_VAR 0 8
15519: PUSH
15520: FOR_IN
15521: IFFALSE 17043
// begin points := [ 0 , 0 , 0 ] ;
15523: LD_ADDR_VAR 0 9
15527: PUSH
15528: LD_INT 0
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: LD_INT 0
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: ST_TO_ADDR
// bpoints := 1 ;
15542: LD_ADDR_VAR 0 10
15546: PUSH
15547: LD_INT 1
15549: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15550: LD_VAR 0 6
15554: PPUSH
15555: CALL_OW 247
15559: PUSH
15560: LD_INT 1
15562: DOUBLE
15563: EQUAL
15564: IFTRUE 15568
15566: GO 16146
15568: POP
// begin if GetClass ( i ) = 1 then
15569: LD_VAR 0 6
15573: PPUSH
15574: CALL_OW 257
15578: PUSH
15579: LD_INT 1
15581: EQUAL
15582: IFFALSE 15603
// points := [ 10 , 5 , 3 ] ;
15584: LD_ADDR_VAR 0 9
15588: PUSH
15589: LD_INT 10
15591: PUSH
15592: LD_INT 5
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15603: LD_VAR 0 6
15607: PPUSH
15608: CALL_OW 257
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: IN
15627: IFFALSE 15648
// points := [ 3 , 2 , 1 ] ;
15629: LD_ADDR_VAR 0 9
15633: PUSH
15634: LD_INT 3
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15648: LD_VAR 0 6
15652: PPUSH
15653: CALL_OW 257
15657: PUSH
15658: LD_INT 5
15660: EQUAL
15661: IFFALSE 15682
// points := [ 130 , 5 , 2 ] ;
15663: LD_ADDR_VAR 0 9
15667: PUSH
15668: LD_INT 130
15670: PUSH
15671: LD_INT 5
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15682: LD_VAR 0 6
15686: PPUSH
15687: CALL_OW 257
15691: PUSH
15692: LD_INT 8
15694: EQUAL
15695: IFFALSE 15716
// points := [ 35 , 35 , 30 ] ;
15697: LD_ADDR_VAR 0 9
15701: PUSH
15702: LD_INT 35
15704: PUSH
15705: LD_INT 35
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15716: LD_VAR 0 6
15720: PPUSH
15721: CALL_OW 257
15725: PUSH
15726: LD_INT 9
15728: EQUAL
15729: IFFALSE 15750
// points := [ 20 , 55 , 40 ] ;
15731: LD_ADDR_VAR 0 9
15735: PUSH
15736: LD_INT 20
15738: PUSH
15739: LD_INT 55
15741: PUSH
15742: LD_INT 40
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15750: LD_VAR 0 6
15754: PPUSH
15755: CALL_OW 257
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 16
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: IN
15770: IFFALSE 15791
// points := [ 5 , 3 , 2 ] ;
15772: LD_ADDR_VAR 0 9
15776: PUSH
15777: LD_INT 5
15779: PUSH
15780: LD_INT 3
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15791: LD_VAR 0 6
15795: PPUSH
15796: CALL_OW 257
15800: PUSH
15801: LD_INT 17
15803: EQUAL
15804: IFFALSE 15825
// points := [ 100 , 50 , 75 ] ;
15806: LD_ADDR_VAR 0 9
15810: PUSH
15811: LD_INT 100
15813: PUSH
15814: LD_INT 50
15816: PUSH
15817: LD_INT 75
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15825: LD_VAR 0 6
15829: PPUSH
15830: CALL_OW 257
15834: PUSH
15835: LD_INT 15
15837: EQUAL
15838: IFFALSE 15859
// points := [ 10 , 5 , 3 ] ;
15840: LD_ADDR_VAR 0 9
15844: PUSH
15845: LD_INT 10
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: LD_INT 3
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15859: LD_VAR 0 6
15863: PPUSH
15864: CALL_OW 257
15868: PUSH
15869: LD_INT 14
15871: EQUAL
15872: IFFALSE 15893
// points := [ 10 , 0 , 0 ] ;
15874: LD_ADDR_VAR 0 9
15878: PUSH
15879: LD_INT 10
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: LD_INT 0
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15893: LD_VAR 0 6
15897: PPUSH
15898: CALL_OW 257
15902: PUSH
15903: LD_INT 11
15905: EQUAL
15906: IFFALSE 15927
// points := [ 30 , 10 , 5 ] ;
15908: LD_ADDR_VAR 0 9
15912: PUSH
15913: LD_INT 30
15915: PUSH
15916: LD_INT 10
15918: PUSH
15919: LD_INT 5
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15927: LD_VAR 0 1
15931: PPUSH
15932: LD_INT 5
15934: PPUSH
15935: CALL_OW 321
15939: PUSH
15940: LD_INT 2
15942: EQUAL
15943: IFFALSE 15960
// bpoints := bpoints * 1.8 ;
15945: LD_ADDR_VAR 0 10
15949: PUSH
15950: LD_VAR 0 10
15954: PUSH
15955: LD_REAL  1.80000000000000E+0000
15958: MUL
15959: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15960: LD_VAR 0 6
15964: PPUSH
15965: CALL_OW 257
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: LD_INT 4
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: IN
15988: PUSH
15989: LD_VAR 0 1
15993: PPUSH
15994: LD_INT 51
15996: PPUSH
15997: CALL_OW 321
16001: PUSH
16002: LD_INT 2
16004: EQUAL
16005: AND
16006: IFFALSE 16023
// bpoints := bpoints * 1.2 ;
16008: LD_ADDR_VAR 0 10
16012: PUSH
16013: LD_VAR 0 10
16017: PUSH
16018: LD_REAL  1.20000000000000E+0000
16021: MUL
16022: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16023: LD_VAR 0 6
16027: PPUSH
16028: CALL_OW 257
16032: PUSH
16033: LD_INT 5
16035: PUSH
16036: LD_INT 7
16038: PUSH
16039: LD_INT 9
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: IN
16047: PUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_INT 52
16055: PPUSH
16056: CALL_OW 321
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: AND
16065: IFFALSE 16082
// bpoints := bpoints * 1.5 ;
16067: LD_ADDR_VAR 0 10
16071: PUSH
16072: LD_VAR 0 10
16076: PUSH
16077: LD_REAL  1.50000000000000E+0000
16080: MUL
16081: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16082: LD_VAR 0 1
16086: PPUSH
16087: LD_INT 66
16089: PPUSH
16090: CALL_OW 321
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: IFFALSE 16115
// bpoints := bpoints * 1.1 ;
16100: LD_ADDR_VAR 0 10
16104: PUSH
16105: LD_VAR 0 10
16109: PUSH
16110: LD_REAL  1.10000000000000E+0000
16113: MUL
16114: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16115: LD_ADDR_VAR 0 10
16119: PUSH
16120: LD_VAR 0 10
16124: PUSH
16125: LD_VAR 0 6
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 259
16137: PUSH
16138: LD_REAL  1.15000000000000E+0000
16141: MUL
16142: MUL
16143: ST_TO_ADDR
// end ; unit_vehicle :
16144: GO 16972
16146: LD_INT 2
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16960
16154: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16155: LD_VAR 0 6
16159: PPUSH
16160: CALL_OW 264
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: LD_INT 42
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: IN
16179: IFFALSE 16200
// points := [ 25 , 5 , 3 ] ;
16181: LD_ADDR_VAR 0 9
16185: PUSH
16186: LD_INT 25
16188: PUSH
16189: LD_INT 5
16191: PUSH
16192: LD_INT 3
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16200: LD_VAR 0 6
16204: PPUSH
16205: CALL_OW 264
16209: PUSH
16210: LD_INT 4
16212: PUSH
16213: LD_INT 43
16215: PUSH
16216: LD_INT 25
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: IN
16224: IFFALSE 16245
// points := [ 40 , 15 , 5 ] ;
16226: LD_ADDR_VAR 0 9
16230: PUSH
16231: LD_INT 40
16233: PUSH
16234: LD_INT 15
16236: PUSH
16237: LD_INT 5
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16245: LD_VAR 0 6
16249: PPUSH
16250: CALL_OW 264
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: LD_INT 23
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: IN
16265: IFFALSE 16286
// points := [ 7 , 25 , 8 ] ;
16267: LD_ADDR_VAR 0 9
16271: PUSH
16272: LD_INT 7
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 8
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16286: LD_VAR 0 6
16290: PPUSH
16291: CALL_OW 264
16295: PUSH
16296: LD_INT 5
16298: PUSH
16299: LD_INT 27
16301: PUSH
16302: LD_INT 44
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: IFFALSE 16331
// points := [ 14 , 50 , 16 ] ;
16312: LD_ADDR_VAR 0 9
16316: PUSH
16317: LD_INT 14
16319: PUSH
16320: LD_INT 50
16322: PUSH
16323: LD_INT 16
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16331: LD_VAR 0 6
16335: PPUSH
16336: CALL_OW 264
16340: PUSH
16341: LD_INT 6
16343: PUSH
16344: LD_INT 46
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: IN
16351: IFFALSE 16372
// points := [ 32 , 120 , 70 ] ;
16353: LD_ADDR_VAR 0 9
16357: PUSH
16358: LD_INT 32
16360: PUSH
16361: LD_INT 120
16363: PUSH
16364: LD_INT 70
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16372: LD_VAR 0 6
16376: PPUSH
16377: CALL_OW 264
16381: PUSH
16382: LD_INT 7
16384: PUSH
16385: LD_INT 28
16387: PUSH
16388: LD_INT 45
16390: PUSH
16391: LD_INT 92
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: IN
16400: IFFALSE 16421
// points := [ 35 , 20 , 45 ] ;
16402: LD_ADDR_VAR 0 9
16406: PUSH
16407: LD_INT 35
16409: PUSH
16410: LD_INT 20
16412: PUSH
16413: LD_INT 45
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16421: LD_VAR 0 6
16425: PPUSH
16426: CALL_OW 264
16430: PUSH
16431: LD_INT 47
16433: PUSH
16434: EMPTY
16435: LIST
16436: IN
16437: IFFALSE 16458
// points := [ 67 , 45 , 75 ] ;
16439: LD_ADDR_VAR 0 9
16443: PUSH
16444: LD_INT 67
16446: PUSH
16447: LD_INT 45
16449: PUSH
16450: LD_INT 75
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16458: LD_VAR 0 6
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 26
16470: PUSH
16471: EMPTY
16472: LIST
16473: IN
16474: IFFALSE 16495
// points := [ 120 , 30 , 80 ] ;
16476: LD_ADDR_VAR 0 9
16480: PUSH
16481: LD_INT 120
16483: PUSH
16484: LD_INT 30
16486: PUSH
16487: LD_INT 80
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16495: LD_VAR 0 6
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: EMPTY
16509: LIST
16510: IN
16511: IFFALSE 16532
// points := [ 40 , 1 , 1 ] ;
16513: LD_ADDR_VAR 0 9
16517: PUSH
16518: LD_INT 40
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16532: LD_VAR 0 6
16536: PPUSH
16537: CALL_OW 264
16541: PUSH
16542: LD_INT 29
16544: PUSH
16545: EMPTY
16546: LIST
16547: IN
16548: IFFALSE 16569
// points := [ 70 , 200 , 400 ] ;
16550: LD_ADDR_VAR 0 9
16554: PUSH
16555: LD_INT 70
16557: PUSH
16558: LD_INT 200
16560: PUSH
16561: LD_INT 400
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16569: LD_VAR 0 6
16573: PPUSH
16574: CALL_OW 264
16578: PUSH
16579: LD_INT 14
16581: PUSH
16582: LD_INT 53
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: IN
16589: IFFALSE 16610
// points := [ 40 , 10 , 20 ] ;
16591: LD_ADDR_VAR 0 9
16595: PUSH
16596: LD_INT 40
16598: PUSH
16599: LD_INT 10
16601: PUSH
16602: LD_INT 20
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16610: LD_VAR 0 6
16614: PPUSH
16615: CALL_OW 264
16619: PUSH
16620: LD_INT 9
16622: PUSH
16623: EMPTY
16624: LIST
16625: IN
16626: IFFALSE 16647
// points := [ 5 , 70 , 20 ] ;
16628: LD_ADDR_VAR 0 9
16632: PUSH
16633: LD_INT 5
16635: PUSH
16636: LD_INT 70
16638: PUSH
16639: LD_INT 20
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16647: LD_VAR 0 6
16651: PPUSH
16652: CALL_OW 264
16656: PUSH
16657: LD_INT 10
16659: PUSH
16660: EMPTY
16661: LIST
16662: IN
16663: IFFALSE 16684
// points := [ 35 , 110 , 70 ] ;
16665: LD_ADDR_VAR 0 9
16669: PUSH
16670: LD_INT 35
16672: PUSH
16673: LD_INT 110
16675: PUSH
16676: LD_INT 70
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16684: LD_VAR 0 6
16688: PPUSH
16689: CALL_OW 265
16693: PUSH
16694: LD_INT 25
16696: EQUAL
16697: IFFALSE 16718
// points := [ 80 , 65 , 100 ] ;
16699: LD_ADDR_VAR 0 9
16703: PUSH
16704: LD_INT 80
16706: PUSH
16707: LD_INT 65
16709: PUSH
16710: LD_INT 100
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16718: LD_VAR 0 6
16722: PPUSH
16723: CALL_OW 263
16727: PUSH
16728: LD_INT 1
16730: EQUAL
16731: IFFALSE 16766
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16733: LD_ADDR_VAR 0 10
16737: PUSH
16738: LD_VAR 0 10
16742: PUSH
16743: LD_VAR 0 6
16747: PPUSH
16748: CALL_OW 311
16752: PPUSH
16753: LD_INT 3
16755: PPUSH
16756: CALL_OW 259
16760: PUSH
16761: LD_INT 4
16763: MUL
16764: MUL
16765: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16766: LD_VAR 0 6
16770: PPUSH
16771: CALL_OW 263
16775: PUSH
16776: LD_INT 2
16778: EQUAL
16779: IFFALSE 16830
// begin j := IsControledBy ( i ) ;
16781: LD_ADDR_VAR 0 7
16785: PUSH
16786: LD_VAR 0 6
16790: PPUSH
16791: CALL_OW 312
16795: ST_TO_ADDR
// if j then
16796: LD_VAR 0 7
16800: IFFALSE 16830
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16802: LD_ADDR_VAR 0 10
16806: PUSH
16807: LD_VAR 0 10
16811: PUSH
16812: LD_VAR 0 7
16816: PPUSH
16817: LD_INT 3
16819: PPUSH
16820: CALL_OW 259
16824: PUSH
16825: LD_INT 3
16827: MUL
16828: MUL
16829: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16830: LD_VAR 0 6
16834: PPUSH
16835: CALL_OW 264
16839: PUSH
16840: LD_INT 5
16842: PUSH
16843: LD_INT 6
16845: PUSH
16846: LD_INT 46
16848: PUSH
16849: LD_INT 44
16851: PUSH
16852: LD_INT 47
16854: PUSH
16855: LD_INT 45
16857: PUSH
16858: LD_INT 28
16860: PUSH
16861: LD_INT 7
16863: PUSH
16864: LD_INT 27
16866: PUSH
16867: LD_INT 29
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: IN
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 52
16890: PPUSH
16891: CALL_OW 321
16895: PUSH
16896: LD_INT 2
16898: EQUAL
16899: AND
16900: IFFALSE 16917
// bpoints := bpoints * 1.2 ;
16902: LD_ADDR_VAR 0 10
16906: PUSH
16907: LD_VAR 0 10
16911: PUSH
16912: LD_REAL  1.20000000000000E+0000
16915: MUL
16916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16917: LD_VAR 0 6
16921: PPUSH
16922: CALL_OW 264
16926: PUSH
16927: LD_INT 6
16929: PUSH
16930: LD_INT 46
16932: PUSH
16933: LD_INT 47
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: IN
16941: IFFALSE 16958
// bpoints := bpoints * 1.2 ;
16943: LD_ADDR_VAR 0 10
16947: PUSH
16948: LD_VAR 0 10
16952: PUSH
16953: LD_REAL  1.20000000000000E+0000
16956: MUL
16957: ST_TO_ADDR
// end ; unit_building :
16958: GO 16972
16960: LD_INT 3
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16971
16968: POP
// ; end ;
16969: GO 16972
16971: POP
// for j = 1 to 3 do
16972: LD_ADDR_VAR 0 7
16976: PUSH
16977: DOUBLE
16978: LD_INT 1
16980: DEC
16981: ST_TO_ADDR
16982: LD_INT 3
16984: PUSH
16985: FOR_TO
16986: IFFALSE 17039
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16988: LD_ADDR_VAR 0 5
16992: PUSH
16993: LD_VAR 0 5
16997: PPUSH
16998: LD_VAR 0 7
17002: PPUSH
17003: LD_VAR 0 5
17007: PUSH
17008: LD_VAR 0 7
17012: ARRAY
17013: PUSH
17014: LD_VAR 0 9
17018: PUSH
17019: LD_VAR 0 7
17023: ARRAY
17024: PUSH
17025: LD_VAR 0 10
17029: MUL
17030: PLUS
17031: PPUSH
17032: CALL_OW 1
17036: ST_TO_ADDR
17037: GO 16985
17039: POP
17040: POP
// end ;
17041: GO 15520
17043: POP
17044: POP
// result := Replace ( result , 4 , tmp ) ;
17045: LD_ADDR_VAR 0 5
17049: PUSH
17050: LD_VAR 0 5
17054: PPUSH
17055: LD_INT 4
17057: PPUSH
17058: LD_VAR 0 8
17062: PPUSH
17063: CALL_OW 1
17067: ST_TO_ADDR
// end ;
17068: LD_VAR 0 5
17072: RET
// export function DangerAtRange ( unit , range ) ; begin
17073: LD_INT 0
17075: PPUSH
// if not unit then
17076: LD_VAR 0 1
17080: NOT
17081: IFFALSE 17085
// exit ;
17083: GO 17130
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17085: LD_ADDR_VAR 0 3
17089: PUSH
17090: LD_VAR 0 1
17094: PPUSH
17095: CALL_OW 255
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 250
17109: PPUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 251
17119: PPUSH
17120: LD_VAR 0 2
17124: PPUSH
17125: CALL 15372 0 4
17129: ST_TO_ADDR
// end ;
17130: LD_VAR 0 3
17134: RET
// export function DangerInArea ( side , area ) ; begin
17135: LD_INT 0
17137: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_VAR 0 2
17147: PPUSH
17148: LD_INT 81
17150: PUSH
17151: LD_VAR 0 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PPUSH
17160: CALL_OW 70
17164: ST_TO_ADDR
// end ;
17165: LD_VAR 0 3
17169: RET
// export function IsExtension ( b ) ; begin
17170: LD_INT 0
17172: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_VAR 0 1
17182: PUSH
17183: LD_INT 23
17185: PUSH
17186: LD_INT 20
17188: PUSH
17189: LD_INT 22
17191: PUSH
17192: LD_INT 17
17194: PUSH
17195: LD_INT 24
17197: PUSH
17198: LD_INT 21
17200: PUSH
17201: LD_INT 19
17203: PUSH
17204: LD_INT 16
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 18
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: IN
17225: ST_TO_ADDR
// end ;
17226: LD_VAR 0 2
17230: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17231: LD_INT 0
17233: PPUSH
17234: PPUSH
17235: PPUSH
// result := [ ] ;
17236: LD_ADDR_VAR 0 4
17240: PUSH
17241: EMPTY
17242: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17243: LD_ADDR_VAR 0 5
17247: PUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_INT 21
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PPUSH
17263: CALL_OW 70
17267: ST_TO_ADDR
// if not tmp then
17268: LD_VAR 0 5
17272: NOT
17273: IFFALSE 17277
// exit ;
17275: GO 17341
// if checkLink then
17277: LD_VAR 0 3
17281: IFFALSE 17331
// begin for i in tmp do
17283: LD_ADDR_VAR 0 6
17287: PUSH
17288: LD_VAR 0 5
17292: PUSH
17293: FOR_IN
17294: IFFALSE 17329
// if GetBase ( i ) <> base then
17296: LD_VAR 0 6
17300: PPUSH
17301: CALL_OW 274
17305: PUSH
17306: LD_VAR 0 1
17310: NONEQUAL
17311: IFFALSE 17327
// ComLinkToBase ( base , i ) ;
17313: LD_VAR 0 1
17317: PPUSH
17318: LD_VAR 0 6
17322: PPUSH
17323: CALL_OW 169
17327: GO 17293
17329: POP
17330: POP
// end ; result := tmp ;
17331: LD_ADDR_VAR 0 4
17335: PUSH
17336: LD_VAR 0 5
17340: ST_TO_ADDR
// end ;
17341: LD_VAR 0 4
17345: RET
// export function ComComplete ( units , b ) ; var i ; begin
17346: LD_INT 0
17348: PPUSH
17349: PPUSH
// if not units then
17350: LD_VAR 0 1
17354: NOT
17355: IFFALSE 17359
// exit ;
17357: GO 17449
// for i in units do
17359: LD_ADDR_VAR 0 4
17363: PUSH
17364: LD_VAR 0 1
17368: PUSH
17369: FOR_IN
17370: IFFALSE 17447
// if BuildingStatus ( b ) = bs_build then
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 461
17381: PUSH
17382: LD_INT 1
17384: EQUAL
17385: IFFALSE 17445
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17387: LD_VAR 0 4
17391: PPUSH
17392: LD_STRING h
17394: PUSH
17395: LD_VAR 0 2
17399: PPUSH
17400: CALL_OW 250
17404: PUSH
17405: LD_VAR 0 2
17409: PPUSH
17410: CALL_OW 251
17414: PUSH
17415: LD_VAR 0 2
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: PPUSH
17441: CALL_OW 446
17445: GO 17369
17447: POP
17448: POP
// end ;
17449: LD_VAR 0 3
17453: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17462: LD_VAR 0 1
17466: NOT
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 263
17477: PUSH
17478: LD_INT 2
17480: NONEQUAL
17481: OR
17482: IFFALSE 17486
// exit ;
17484: GO 17802
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17486: LD_ADDR_VAR 0 6
17490: PUSH
17491: LD_INT 22
17493: PUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 255
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 30
17513: PUSH
17514: LD_INT 36
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 34
17523: PUSH
17524: LD_INT 31
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PPUSH
17540: CALL_OW 69
17544: ST_TO_ADDR
// if not tmp then
17545: LD_VAR 0 6
17549: NOT
17550: IFFALSE 17554
// exit ;
17552: GO 17802
// result := [ ] ;
17554: LD_ADDR_VAR 0 2
17558: PUSH
17559: EMPTY
17560: ST_TO_ADDR
// for i in tmp do
17561: LD_ADDR_VAR 0 3
17565: PUSH
17566: LD_VAR 0 6
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17643
// begin t := UnitsInside ( i ) ;
17574: LD_ADDR_VAR 0 4
17578: PUSH
17579: LD_VAR 0 3
17583: PPUSH
17584: CALL_OW 313
17588: ST_TO_ADDR
// if t then
17589: LD_VAR 0 4
17593: IFFALSE 17641
// for j in t do
17595: LD_ADDR_VAR 0 7
17599: PUSH
17600: LD_VAR 0 4
17604: PUSH
17605: FOR_IN
17606: IFFALSE 17639
// result := Replace ( result , result + 1 , j ) ;
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_VAR 0 2
17622: PUSH
17623: LD_INT 1
17625: PLUS
17626: PPUSH
17627: LD_VAR 0 7
17631: PPUSH
17632: CALL_OW 1
17636: ST_TO_ADDR
17637: GO 17605
17639: POP
17640: POP
// end ;
17641: GO 17571
17643: POP
17644: POP
// if not result then
17645: LD_VAR 0 2
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17802
// mech := result [ 1 ] ;
17654: LD_ADDR_VAR 0 5
17658: PUSH
17659: LD_VAR 0 2
17663: PUSH
17664: LD_INT 1
17666: ARRAY
17667: ST_TO_ADDR
// if result > 1 then
17668: LD_VAR 0 2
17672: PUSH
17673: LD_INT 1
17675: GREATER
17676: IFFALSE 17788
// begin for i = 2 to result do
17678: LD_ADDR_VAR 0 3
17682: PUSH
17683: DOUBLE
17684: LD_INT 2
17686: DEC
17687: ST_TO_ADDR
17688: LD_VAR 0 2
17692: PUSH
17693: FOR_TO
17694: IFFALSE 17786
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17696: LD_ADDR_VAR 0 4
17700: PUSH
17701: LD_VAR 0 2
17705: PUSH
17706: LD_VAR 0 3
17710: ARRAY
17711: PPUSH
17712: LD_INT 3
17714: PPUSH
17715: CALL_OW 259
17719: PUSH
17720: LD_VAR 0 2
17724: PUSH
17725: LD_VAR 0 3
17729: ARRAY
17730: PPUSH
17731: CALL_OW 432
17735: MINUS
17736: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17737: LD_VAR 0 4
17741: PUSH
17742: LD_VAR 0 5
17746: PPUSH
17747: LD_INT 3
17749: PPUSH
17750: CALL_OW 259
17754: PUSH
17755: LD_VAR 0 5
17759: PPUSH
17760: CALL_OW 432
17764: MINUS
17765: GREATEREQUAL
17766: IFFALSE 17784
// mech := result [ i ] ;
17768: LD_ADDR_VAR 0 5
17772: PUSH
17773: LD_VAR 0 2
17777: PUSH
17778: LD_VAR 0 3
17782: ARRAY
17783: ST_TO_ADDR
// end ;
17784: GO 17693
17786: POP
17787: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17788: LD_VAR 0 1
17792: PPUSH
17793: LD_VAR 0 5
17797: PPUSH
17798: CALL_OW 135
// end ;
17802: LD_VAR 0 2
17806: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17807: LD_INT 0
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
// result := [ ] ;
17822: LD_ADDR_VAR 0 7
17826: PUSH
17827: EMPTY
17828: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17829: LD_VAR 0 1
17833: PPUSH
17834: CALL_OW 266
17838: PUSH
17839: LD_INT 0
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: IN
17849: NOT
17850: IFFALSE 17854
// exit ;
17852: GO 19488
// if name then
17854: LD_VAR 0 3
17858: IFFALSE 17874
// SetBName ( base_dep , name ) ;
17860: LD_VAR 0 1
17864: PPUSH
17865: LD_VAR 0 3
17869: PPUSH
17870: CALL_OW 500
// base := GetBase ( base_dep ) ;
17874: LD_ADDR_VAR 0 15
17878: PUSH
17879: LD_VAR 0 1
17883: PPUSH
17884: CALL_OW 274
17888: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17889: LD_ADDR_VAR 0 16
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 255
17903: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17904: LD_ADDR_VAR 0 17
17908: PUSH
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 248
17918: ST_TO_ADDR
// if sources then
17919: LD_VAR 0 5
17923: IFFALSE 17970
// for i = 1 to 3 do
17925: LD_ADDR_VAR 0 8
17929: PUSH
17930: DOUBLE
17931: LD_INT 1
17933: DEC
17934: ST_TO_ADDR
17935: LD_INT 3
17937: PUSH
17938: FOR_TO
17939: IFFALSE 17968
// AddResourceType ( base , i , sources [ i ] ) ;
17941: LD_VAR 0 15
17945: PPUSH
17946: LD_VAR 0 8
17950: PPUSH
17951: LD_VAR 0 5
17955: PUSH
17956: LD_VAR 0 8
17960: ARRAY
17961: PPUSH
17962: CALL_OW 276
17966: GO 17938
17968: POP
17969: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17970: LD_ADDR_VAR 0 18
17974: PUSH
17975: LD_VAR 0 15
17979: PPUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: CALL 17231 0 3
17992: ST_TO_ADDR
// InitHc ;
17993: CALL_OW 19
// InitUc ;
17997: CALL_OW 18
// uc_side := side ;
18001: LD_ADDR_OWVAR 20
18005: PUSH
18006: LD_VAR 0 16
18010: ST_TO_ADDR
// uc_nation := nation ;
18011: LD_ADDR_OWVAR 21
18015: PUSH
18016: LD_VAR 0 17
18020: ST_TO_ADDR
// if buildings then
18021: LD_VAR 0 18
18025: IFFALSE 19347
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18027: LD_ADDR_VAR 0 19
18031: PUSH
18032: LD_VAR 0 18
18036: PPUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 29
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 30
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: LIST
18064: PPUSH
18065: CALL_OW 72
18069: ST_TO_ADDR
// if tmp then
18070: LD_VAR 0 19
18074: IFFALSE 18122
// for i in tmp do
18076: LD_ADDR_VAR 0 8
18080: PUSH
18081: LD_VAR 0 19
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18120
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18089: LD_VAR 0 8
18093: PPUSH
18094: CALL_OW 250
18098: PPUSH
18099: LD_VAR 0 8
18103: PPUSH
18104: CALL_OW 251
18108: PPUSH
18109: LD_VAR 0 16
18113: PPUSH
18114: CALL_OW 441
18118: GO 18086
18120: POP
18121: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18122: LD_VAR 0 18
18126: PPUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 30
18132: PUSH
18133: LD_INT 32
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 30
18142: PUSH
18143: LD_INT 33
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: PPUSH
18155: CALL_OW 72
18159: IFFALSE 18247
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18161: LD_ADDR_VAR 0 8
18165: PUSH
18166: LD_VAR 0 18
18170: PPUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 30
18176: PUSH
18177: LD_INT 32
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 33
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 72
18203: PUSH
18204: FOR_IN
18205: IFFALSE 18245
// begin if not GetBWeapon ( i ) then
18207: LD_VAR 0 8
18211: PPUSH
18212: CALL_OW 269
18216: NOT
18217: IFFALSE 18243
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18219: LD_VAR 0 8
18223: PPUSH
18224: LD_VAR 0 8
18228: PPUSH
18229: LD_VAR 0 2
18233: PPUSH
18234: CALL 19493 0 2
18238: PPUSH
18239: CALL_OW 431
// end ;
18243: GO 18204
18245: POP
18246: POP
// end ; for i = 1 to personel do
18247: LD_ADDR_VAR 0 8
18251: PUSH
18252: DOUBLE
18253: LD_INT 1
18255: DEC
18256: ST_TO_ADDR
18257: LD_VAR 0 6
18261: PUSH
18262: FOR_TO
18263: IFFALSE 19327
// begin if i > 4 then
18265: LD_VAR 0 8
18269: PUSH
18270: LD_INT 4
18272: GREATER
18273: IFFALSE 18277
// break ;
18275: GO 19327
// case i of 1 :
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 1
18284: DOUBLE
18285: EQUAL
18286: IFTRUE 18290
18288: GO 18370
18290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18291: LD_ADDR_VAR 0 12
18295: PUSH
18296: LD_VAR 0 18
18300: PPUSH
18301: LD_INT 22
18303: PUSH
18304: LD_VAR 0 16
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 58
18315: PUSH
18316: EMPTY
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 30
18324: PUSH
18325: LD_INT 32
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 4
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 30
18344: PUSH
18345: LD_INT 5
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 72
18367: ST_TO_ADDR
18368: GO 18592
18370: LD_INT 2
18372: DOUBLE
18373: EQUAL
18374: IFTRUE 18378
18376: GO 18440
18378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18379: LD_ADDR_VAR 0 12
18383: PUSH
18384: LD_VAR 0 18
18388: PPUSH
18389: LD_INT 22
18391: PUSH
18392: LD_VAR 0 16
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: LD_INT 30
18406: PUSH
18407: LD_INT 0
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 30
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 72
18437: ST_TO_ADDR
18438: GO 18592
18440: LD_INT 3
18442: DOUBLE
18443: EQUAL
18444: IFTRUE 18448
18446: GO 18510
18448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18449: LD_ADDR_VAR 0 12
18453: PUSH
18454: LD_VAR 0 18
18458: PPUSH
18459: LD_INT 22
18461: PUSH
18462: LD_VAR 0 16
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 30
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 30
18486: PUSH
18487: LD_INT 3
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 72
18507: ST_TO_ADDR
18508: GO 18592
18510: LD_INT 4
18512: DOUBLE
18513: EQUAL
18514: IFTRUE 18518
18516: GO 18591
18518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18519: LD_ADDR_VAR 0 12
18523: PUSH
18524: LD_VAR 0 18
18528: PPUSH
18529: LD_INT 22
18531: PUSH
18532: LD_VAR 0 16
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 30
18546: PUSH
18547: LD_INT 6
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 30
18556: PUSH
18557: LD_INT 7
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 30
18566: PUSH
18567: LD_INT 8
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PPUSH
18584: CALL_OW 72
18588: ST_TO_ADDR
18589: GO 18592
18591: POP
// if i = 1 then
18592: LD_VAR 0 8
18596: PUSH
18597: LD_INT 1
18599: EQUAL
18600: IFFALSE 18711
// begin tmp := [ ] ;
18602: LD_ADDR_VAR 0 19
18606: PUSH
18607: EMPTY
18608: ST_TO_ADDR
// for j in f do
18609: LD_ADDR_VAR 0 9
18613: PUSH
18614: LD_VAR 0 12
18618: PUSH
18619: FOR_IN
18620: IFFALSE 18693
// if GetBType ( j ) = b_bunker then
18622: LD_VAR 0 9
18626: PPUSH
18627: CALL_OW 266
18631: PUSH
18632: LD_INT 32
18634: EQUAL
18635: IFFALSE 18662
// tmp := Insert ( tmp , 1 , j ) else
18637: LD_ADDR_VAR 0 19
18641: PUSH
18642: LD_VAR 0 19
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: LD_VAR 0 9
18654: PPUSH
18655: CALL_OW 2
18659: ST_TO_ADDR
18660: GO 18691
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18662: LD_ADDR_VAR 0 19
18666: PUSH
18667: LD_VAR 0 19
18671: PPUSH
18672: LD_VAR 0 19
18676: PUSH
18677: LD_INT 1
18679: PLUS
18680: PPUSH
18681: LD_VAR 0 9
18685: PPUSH
18686: CALL_OW 2
18690: ST_TO_ADDR
18691: GO 18619
18693: POP
18694: POP
// if tmp then
18695: LD_VAR 0 19
18699: IFFALSE 18711
// f := tmp ;
18701: LD_ADDR_VAR 0 12
18705: PUSH
18706: LD_VAR 0 19
18710: ST_TO_ADDR
// end ; x := personel [ i ] ;
18711: LD_ADDR_VAR 0 13
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_VAR 0 8
18725: ARRAY
18726: ST_TO_ADDR
// if x = - 1 then
18727: LD_VAR 0 13
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: EQUAL
18736: IFFALSE 18945
// begin for j in f do
18738: LD_ADDR_VAR 0 9
18742: PUSH
18743: LD_VAR 0 12
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18941
// repeat InitHc ;
18751: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18755: LD_VAR 0 9
18759: PPUSH
18760: CALL_OW 266
18764: PUSH
18765: LD_INT 5
18767: EQUAL
18768: IFFALSE 18838
// begin if UnitsInside ( j ) < 3 then
18770: LD_VAR 0 9
18774: PPUSH
18775: CALL_OW 313
18779: PUSH
18780: LD_INT 3
18782: LESS
18783: IFFALSE 18819
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18785: LD_INT 0
18787: PPUSH
18788: LD_INT 5
18790: PUSH
18791: LD_INT 8
18793: PUSH
18794: LD_INT 9
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PUSH
18802: LD_VAR 0 17
18806: ARRAY
18807: PPUSH
18808: LD_VAR 0 4
18812: PPUSH
18813: CALL_OW 380
18817: GO 18836
// PrepareHuman ( false , i , skill ) ;
18819: LD_INT 0
18821: PPUSH
18822: LD_VAR 0 8
18826: PPUSH
18827: LD_VAR 0 4
18831: PPUSH
18832: CALL_OW 380
// end else
18836: GO 18855
// PrepareHuman ( false , i , skill ) ;
18838: LD_INT 0
18840: PPUSH
18841: LD_VAR 0 8
18845: PPUSH
18846: LD_VAR 0 4
18850: PPUSH
18851: CALL_OW 380
// un := CreateHuman ;
18855: LD_ADDR_VAR 0 14
18859: PUSH
18860: CALL_OW 44
18864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18865: LD_ADDR_VAR 0 7
18869: PUSH
18870: LD_VAR 0 7
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_VAR 0 14
18882: PPUSH
18883: CALL_OW 2
18887: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18888: LD_VAR 0 14
18892: PPUSH
18893: LD_VAR 0 9
18897: PPUSH
18898: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18902: LD_VAR 0 9
18906: PPUSH
18907: CALL_OW 313
18911: PUSH
18912: LD_INT 6
18914: EQUAL
18915: PUSH
18916: LD_VAR 0 9
18920: PPUSH
18921: CALL_OW 266
18925: PUSH
18926: LD_INT 32
18928: PUSH
18929: LD_INT 31
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: IN
18936: OR
18937: IFFALSE 18751
18939: GO 18748
18941: POP
18942: POP
// end else
18943: GO 19325
// for j = 1 to x do
18945: LD_ADDR_VAR 0 9
18949: PUSH
18950: DOUBLE
18951: LD_INT 1
18953: DEC
18954: ST_TO_ADDR
18955: LD_VAR 0 13
18959: PUSH
18960: FOR_TO
18961: IFFALSE 19323
// begin InitHc ;
18963: CALL_OW 19
// if not f then
18967: LD_VAR 0 12
18971: NOT
18972: IFFALSE 19061
// begin PrepareHuman ( false , i , skill ) ;
18974: LD_INT 0
18976: PPUSH
18977: LD_VAR 0 8
18981: PPUSH
18982: LD_VAR 0 4
18986: PPUSH
18987: CALL_OW 380
// un := CreateHuman ;
18991: LD_ADDR_VAR 0 14
18995: PUSH
18996: CALL_OW 44
19000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19001: LD_ADDR_VAR 0 7
19005: PUSH
19006: LD_VAR 0 7
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 14
19018: PPUSH
19019: CALL_OW 2
19023: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19024: LD_VAR 0 14
19028: PPUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 250
19038: PPUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: CALL_OW 251
19048: PPUSH
19049: LD_INT 10
19051: PPUSH
19052: LD_INT 0
19054: PPUSH
19055: CALL_OW 50
// continue ;
19059: GO 18960
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19061: LD_VAR 0 12
19065: PUSH
19066: LD_INT 1
19068: ARRAY
19069: PPUSH
19070: CALL_OW 313
19074: PUSH
19075: LD_VAR 0 12
19079: PUSH
19080: LD_INT 1
19082: ARRAY
19083: PPUSH
19084: CALL_OW 266
19088: PUSH
19089: LD_INT 32
19091: PUSH
19092: LD_INT 31
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: IN
19099: AND
19100: PUSH
19101: LD_VAR 0 12
19105: PUSH
19106: LD_INT 1
19108: ARRAY
19109: PPUSH
19110: CALL_OW 313
19114: PUSH
19115: LD_INT 6
19117: EQUAL
19118: OR
19119: IFFALSE 19139
// f := Delete ( f , 1 ) ;
19121: LD_ADDR_VAR 0 12
19125: PUSH
19126: LD_VAR 0 12
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: CALL_OW 3
19138: ST_TO_ADDR
// if not f then
19139: LD_VAR 0 12
19143: NOT
19144: IFFALSE 19162
// begin x := x + 2 ;
19146: LD_ADDR_VAR 0 13
19150: PUSH
19151: LD_VAR 0 13
19155: PUSH
19156: LD_INT 2
19158: PLUS
19159: ST_TO_ADDR
// continue ;
19160: GO 18960
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19162: LD_VAR 0 12
19166: PUSH
19167: LD_INT 1
19169: ARRAY
19170: PPUSH
19171: CALL_OW 266
19175: PUSH
19176: LD_INT 5
19178: EQUAL
19179: IFFALSE 19253
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19181: LD_VAR 0 12
19185: PUSH
19186: LD_INT 1
19188: ARRAY
19189: PPUSH
19190: CALL_OW 313
19194: PUSH
19195: LD_INT 3
19197: LESS
19198: IFFALSE 19234
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19200: LD_INT 0
19202: PPUSH
19203: LD_INT 5
19205: PUSH
19206: LD_INT 8
19208: PUSH
19209: LD_INT 9
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: PUSH
19217: LD_VAR 0 17
19221: ARRAY
19222: PPUSH
19223: LD_VAR 0 4
19227: PPUSH
19228: CALL_OW 380
19232: GO 19251
// PrepareHuman ( false , i , skill ) ;
19234: LD_INT 0
19236: PPUSH
19237: LD_VAR 0 8
19241: PPUSH
19242: LD_VAR 0 4
19246: PPUSH
19247: CALL_OW 380
// end else
19251: GO 19270
// PrepareHuman ( false , i , skill ) ;
19253: LD_INT 0
19255: PPUSH
19256: LD_VAR 0 8
19260: PPUSH
19261: LD_VAR 0 4
19265: PPUSH
19266: CALL_OW 380
// un := CreateHuman ;
19270: LD_ADDR_VAR 0 14
19274: PUSH
19275: CALL_OW 44
19279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19280: LD_ADDR_VAR 0 7
19284: PUSH
19285: LD_VAR 0 7
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: LD_VAR 0 14
19297: PPUSH
19298: CALL_OW 2
19302: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19303: LD_VAR 0 14
19307: PPUSH
19308: LD_VAR 0 12
19312: PUSH
19313: LD_INT 1
19315: ARRAY
19316: PPUSH
19317: CALL_OW 52
// end ;
19321: GO 18960
19323: POP
19324: POP
// end ;
19325: GO 18262
19327: POP
19328: POP
// result := result ^ buildings ;
19329: LD_ADDR_VAR 0 7
19333: PUSH
19334: LD_VAR 0 7
19338: PUSH
19339: LD_VAR 0 18
19343: ADD
19344: ST_TO_ADDR
// end else
19345: GO 19488
// begin for i = 1 to personel do
19347: LD_ADDR_VAR 0 8
19351: PUSH
19352: DOUBLE
19353: LD_INT 1
19355: DEC
19356: ST_TO_ADDR
19357: LD_VAR 0 6
19361: PUSH
19362: FOR_TO
19363: IFFALSE 19486
// begin if i > 4 then
19365: LD_VAR 0 8
19369: PUSH
19370: LD_INT 4
19372: GREATER
19373: IFFALSE 19377
// break ;
19375: GO 19486
// x := personel [ i ] ;
19377: LD_ADDR_VAR 0 13
19381: PUSH
19382: LD_VAR 0 6
19386: PUSH
19387: LD_VAR 0 8
19391: ARRAY
19392: ST_TO_ADDR
// if x = - 1 then
19393: LD_VAR 0 13
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: EQUAL
19402: IFFALSE 19406
// continue ;
19404: GO 19362
// PrepareHuman ( false , i , skill ) ;
19406: LD_INT 0
19408: PPUSH
19409: LD_VAR 0 8
19413: PPUSH
19414: LD_VAR 0 4
19418: PPUSH
19419: CALL_OW 380
// un := CreateHuman ;
19423: LD_ADDR_VAR 0 14
19427: PUSH
19428: CALL_OW 44
19432: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19433: LD_VAR 0 14
19437: PPUSH
19438: LD_VAR 0 1
19442: PPUSH
19443: CALL_OW 250
19447: PPUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 251
19457: PPUSH
19458: LD_INT 10
19460: PPUSH
19461: LD_INT 0
19463: PPUSH
19464: CALL_OW 50
// result := result ^ un ;
19468: LD_ADDR_VAR 0 7
19472: PUSH
19473: LD_VAR 0 7
19477: PUSH
19478: LD_VAR 0 14
19482: ADD
19483: ST_TO_ADDR
// end ;
19484: GO 19362
19486: POP
19487: POP
// end ; end ;
19488: LD_VAR 0 7
19492: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19493: LD_INT 0
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
19501: PPUSH
19502: PPUSH
19503: PPUSH
19504: PPUSH
19505: PPUSH
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
// result := false ;
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19519: LD_VAR 0 1
19523: NOT
19524: PUSH
19525: LD_VAR 0 1
19529: PPUSH
19530: CALL_OW 266
19534: PUSH
19535: LD_INT 32
19537: PUSH
19538: LD_INT 33
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: IN
19545: NOT
19546: OR
19547: IFFALSE 19551
// exit ;
19549: GO 20660
// nat := GetNation ( tower ) ;
19551: LD_ADDR_VAR 0 12
19555: PUSH
19556: LD_VAR 0 1
19560: PPUSH
19561: CALL_OW 248
19565: ST_TO_ADDR
// side := GetSide ( tower ) ;
19566: LD_ADDR_VAR 0 16
19570: PUSH
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 255
19580: ST_TO_ADDR
// x := GetX ( tower ) ;
19581: LD_ADDR_VAR 0 10
19585: PUSH
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 250
19595: ST_TO_ADDR
// y := GetY ( tower ) ;
19596: LD_ADDR_VAR 0 11
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 251
19610: ST_TO_ADDR
// if not x or not y then
19611: LD_VAR 0 10
19615: NOT
19616: PUSH
19617: LD_VAR 0 11
19621: NOT
19622: OR
19623: IFFALSE 19627
// exit ;
19625: GO 20660
// weapon := 0 ;
19627: LD_ADDR_VAR 0 18
19631: PUSH
19632: LD_INT 0
19634: ST_TO_ADDR
// fac_list := [ ] ;
19635: LD_ADDR_VAR 0 17
19639: PUSH
19640: EMPTY
19641: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19642: LD_ADDR_VAR 0 6
19646: PUSH
19647: LD_VAR 0 1
19651: PPUSH
19652: CALL_OW 274
19656: PPUSH
19657: LD_VAR 0 2
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL 17231 0 3
19669: PPUSH
19670: LD_INT 30
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 72
19684: ST_TO_ADDR
// if not factories then
19685: LD_VAR 0 6
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 20660
// for i in factories do
19694: LD_ADDR_VAR 0 8
19698: PUSH
19699: LD_VAR 0 6
19703: PUSH
19704: FOR_IN
19705: IFFALSE 19730
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19707: LD_ADDR_VAR 0 17
19711: PUSH
19712: LD_VAR 0 17
19716: PUSH
19717: LD_VAR 0 8
19721: PPUSH
19722: CALL_OW 478
19726: UNION
19727: ST_TO_ADDR
19728: GO 19704
19730: POP
19731: POP
// if not fac_list then
19732: LD_VAR 0 17
19736: NOT
19737: IFFALSE 19741
// exit ;
19739: GO 20660
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19741: LD_ADDR_VAR 0 5
19745: PUSH
19746: LD_INT 4
19748: PUSH
19749: LD_INT 5
19751: PUSH
19752: LD_INT 9
19754: PUSH
19755: LD_INT 10
19757: PUSH
19758: LD_INT 6
19760: PUSH
19761: LD_INT 7
19763: PUSH
19764: LD_INT 11
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 27
19778: PUSH
19779: LD_INT 28
19781: PUSH
19782: LD_INT 26
19784: PUSH
19785: LD_INT 30
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 43
19796: PUSH
19797: LD_INT 44
19799: PUSH
19800: LD_INT 46
19802: PUSH
19803: LD_INT 45
19805: PUSH
19806: LD_INT 47
19808: PUSH
19809: LD_INT 49
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PUSH
19825: LD_VAR 0 12
19829: ARRAY
19830: ST_TO_ADDR
// list := list isect fac_list ;
19831: LD_ADDR_VAR 0 5
19835: PUSH
19836: LD_VAR 0 5
19840: PUSH
19841: LD_VAR 0 17
19845: ISECT
19846: ST_TO_ADDR
// if not list then
19847: LD_VAR 0 5
19851: NOT
19852: IFFALSE 19856
// exit ;
19854: GO 20660
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19856: LD_VAR 0 12
19860: PUSH
19861: LD_INT 3
19863: EQUAL
19864: PUSH
19865: LD_INT 49
19867: PUSH
19868: LD_VAR 0 5
19872: IN
19873: AND
19874: PUSH
19875: LD_INT 31
19877: PPUSH
19878: LD_VAR 0 16
19882: PPUSH
19883: CALL_OW 321
19887: PUSH
19888: LD_INT 2
19890: EQUAL
19891: AND
19892: IFFALSE 19952
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19894: LD_INT 22
19896: PUSH
19897: LD_VAR 0 16
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 35
19908: PUSH
19909: LD_INT 49
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 91
19918: PUSH
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 10
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: NOT
19942: IFFALSE 19952
// weapon := ru_time_lapser ;
19944: LD_ADDR_VAR 0 18
19948: PUSH
19949: LD_INT 49
19951: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19952: LD_VAR 0 12
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: IN
19967: PUSH
19968: LD_INT 11
19970: PUSH
19971: LD_VAR 0 5
19975: IN
19976: PUSH
19977: LD_INT 30
19979: PUSH
19980: LD_VAR 0 5
19984: IN
19985: OR
19986: AND
19987: PUSH
19988: LD_INT 6
19990: PPUSH
19991: LD_VAR 0 16
19995: PPUSH
19996: CALL_OW 321
20000: PUSH
20001: LD_INT 2
20003: EQUAL
20004: AND
20005: IFFALSE 20170
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20007: LD_INT 22
20009: PUSH
20010: LD_VAR 0 16
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: LD_INT 35
20024: PUSH
20025: LD_INT 11
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 35
20034: PUSH
20035: LD_INT 30
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 91
20049: PUSH
20050: LD_VAR 0 1
20054: PUSH
20055: LD_INT 18
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: PPUSH
20068: CALL_OW 69
20072: NOT
20073: PUSH
20074: LD_INT 22
20076: PUSH
20077: LD_VAR 0 16
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 32
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 33
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 91
20116: PUSH
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 12
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: PPUSH
20138: CALL_OW 69
20142: PUSH
20143: LD_INT 2
20145: GREATER
20146: AND
20147: IFFALSE 20170
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20149: LD_ADDR_VAR 0 18
20153: PUSH
20154: LD_INT 11
20156: PUSH
20157: LD_INT 30
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_VAR 0 12
20168: ARRAY
20169: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20170: LD_VAR 0 18
20174: NOT
20175: PUSH
20176: LD_INT 40
20178: PPUSH
20179: LD_VAR 0 16
20183: PPUSH
20184: CALL_OW 321
20188: PUSH
20189: LD_INT 2
20191: EQUAL
20192: AND
20193: PUSH
20194: LD_INT 7
20196: PUSH
20197: LD_VAR 0 5
20201: IN
20202: PUSH
20203: LD_INT 28
20205: PUSH
20206: LD_VAR 0 5
20210: IN
20211: OR
20212: PUSH
20213: LD_INT 45
20215: PUSH
20216: LD_VAR 0 5
20220: IN
20221: OR
20222: AND
20223: IFFALSE 20477
// begin hex := GetHexInfo ( x , y ) ;
20225: LD_ADDR_VAR 0 4
20229: PUSH
20230: LD_VAR 0 10
20234: PPUSH
20235: LD_VAR 0 11
20239: PPUSH
20240: CALL_OW 546
20244: ST_TO_ADDR
// if hex [ 1 ] then
20245: LD_VAR 0 4
20249: PUSH
20250: LD_INT 1
20252: ARRAY
20253: IFFALSE 20257
// exit ;
20255: GO 20660
// height := hex [ 2 ] ;
20257: LD_ADDR_VAR 0 15
20261: PUSH
20262: LD_VAR 0 4
20266: PUSH
20267: LD_INT 2
20269: ARRAY
20270: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20271: LD_ADDR_VAR 0 14
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 3
20284: PUSH
20285: LD_INT 5
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: ST_TO_ADDR
// for i in tmp do
20294: LD_ADDR_VAR 0 8
20298: PUSH
20299: LD_VAR 0 14
20303: PUSH
20304: FOR_IN
20305: IFFALSE 20475
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20307: LD_ADDR_VAR 0 9
20311: PUSH
20312: LD_VAR 0 10
20316: PPUSH
20317: LD_VAR 0 8
20321: PPUSH
20322: LD_INT 5
20324: PPUSH
20325: CALL_OW 272
20329: PUSH
20330: LD_VAR 0 11
20334: PPUSH
20335: LD_VAR 0 8
20339: PPUSH
20340: LD_INT 5
20342: PPUSH
20343: CALL_OW 273
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20352: LD_VAR 0 9
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PPUSH
20361: LD_VAR 0 9
20365: PUSH
20366: LD_INT 2
20368: ARRAY
20369: PPUSH
20370: CALL_OW 488
20374: IFFALSE 20473
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20376: LD_ADDR_VAR 0 4
20380: PUSH
20381: LD_VAR 0 9
20385: PUSH
20386: LD_INT 1
20388: ARRAY
20389: PPUSH
20390: LD_VAR 0 9
20394: PUSH
20395: LD_INT 2
20397: ARRAY
20398: PPUSH
20399: CALL_OW 546
20403: ST_TO_ADDR
// if hex [ 1 ] then
20404: LD_VAR 0 4
20408: PUSH
20409: LD_INT 1
20411: ARRAY
20412: IFFALSE 20416
// continue ;
20414: GO 20304
// h := hex [ 2 ] ;
20416: LD_ADDR_VAR 0 13
20420: PUSH
20421: LD_VAR 0 4
20425: PUSH
20426: LD_INT 2
20428: ARRAY
20429: ST_TO_ADDR
// if h + 7 < height then
20430: LD_VAR 0 13
20434: PUSH
20435: LD_INT 7
20437: PLUS
20438: PUSH
20439: LD_VAR 0 15
20443: LESS
20444: IFFALSE 20473
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20446: LD_ADDR_VAR 0 18
20450: PUSH
20451: LD_INT 7
20453: PUSH
20454: LD_INT 28
20456: PUSH
20457: LD_INT 45
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: LD_VAR 0 12
20469: ARRAY
20470: ST_TO_ADDR
// break ;
20471: GO 20475
// end ; end ; end ;
20473: GO 20304
20475: POP
20476: POP
// end ; if not weapon then
20477: LD_VAR 0 18
20481: NOT
20482: IFFALSE 20542
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20484: LD_ADDR_VAR 0 5
20488: PUSH
20489: LD_VAR 0 5
20493: PUSH
20494: LD_INT 11
20496: PUSH
20497: LD_INT 30
20499: PUSH
20500: LD_INT 49
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: DIFF
20508: ST_TO_ADDR
// if not list then
20509: LD_VAR 0 5
20513: NOT
20514: IFFALSE 20518
// exit ;
20516: GO 20660
// weapon := list [ rand ( 1 , list ) ] ;
20518: LD_ADDR_VAR 0 18
20522: PUSH
20523: LD_VAR 0 5
20527: PUSH
20528: LD_INT 1
20530: PPUSH
20531: LD_VAR 0 5
20535: PPUSH
20536: CALL_OW 12
20540: ARRAY
20541: ST_TO_ADDR
// end ; if weapon then
20542: LD_VAR 0 18
20546: IFFALSE 20660
// begin tmp := CostOfWeapon ( weapon ) ;
20548: LD_ADDR_VAR 0 14
20552: PUSH
20553: LD_VAR 0 18
20557: PPUSH
20558: CALL_OW 451
20562: ST_TO_ADDR
// j := GetBase ( tower ) ;
20563: LD_ADDR_VAR 0 9
20567: PUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 274
20577: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20578: LD_VAR 0 9
20582: PPUSH
20583: LD_INT 1
20585: PPUSH
20586: CALL_OW 275
20590: PUSH
20591: LD_VAR 0 14
20595: PUSH
20596: LD_INT 1
20598: ARRAY
20599: GREATEREQUAL
20600: PUSH
20601: LD_VAR 0 9
20605: PPUSH
20606: LD_INT 2
20608: PPUSH
20609: CALL_OW 275
20613: PUSH
20614: LD_VAR 0 14
20618: PUSH
20619: LD_INT 2
20621: ARRAY
20622: GREATEREQUAL
20623: AND
20624: PUSH
20625: LD_VAR 0 9
20629: PPUSH
20630: LD_INT 3
20632: PPUSH
20633: CALL_OW 275
20637: PUSH
20638: LD_VAR 0 14
20642: PUSH
20643: LD_INT 3
20645: ARRAY
20646: GREATEREQUAL
20647: AND
20648: IFFALSE 20660
// result := weapon ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 18
20659: ST_TO_ADDR
// end ; end ;
20660: LD_VAR 0 3
20664: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
// result := true ;
20669: LD_ADDR_VAR 0 3
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if array1 = array2 then
20677: LD_VAR 0 1
20681: PUSH
20682: LD_VAR 0 2
20686: EQUAL
20687: IFFALSE 20747
// begin for i = 1 to array1 do
20689: LD_ADDR_VAR 0 4
20693: PUSH
20694: DOUBLE
20695: LD_INT 1
20697: DEC
20698: ST_TO_ADDR
20699: LD_VAR 0 1
20703: PUSH
20704: FOR_TO
20705: IFFALSE 20743
// if array1 [ i ] <> array2 [ i ] then
20707: LD_VAR 0 1
20711: PUSH
20712: LD_VAR 0 4
20716: ARRAY
20717: PUSH
20718: LD_VAR 0 2
20722: PUSH
20723: LD_VAR 0 4
20727: ARRAY
20728: NONEQUAL
20729: IFFALSE 20741
// begin result := false ;
20731: LD_ADDR_VAR 0 3
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// break ;
20739: GO 20743
// end ;
20741: GO 20704
20743: POP
20744: POP
// end else
20745: GO 20755
// result := false ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// end ;
20755: LD_VAR 0 3
20759: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20760: LD_INT 0
20762: PPUSH
20763: PPUSH
// if not array1 or not array2 then
20764: LD_VAR 0 1
20768: NOT
20769: PUSH
20770: LD_VAR 0 2
20774: NOT
20775: OR
20776: IFFALSE 20780
// exit ;
20778: GO 20844
// result := true ;
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// for i = 1 to array1 do
20788: LD_ADDR_VAR 0 4
20792: PUSH
20793: DOUBLE
20794: LD_INT 1
20796: DEC
20797: ST_TO_ADDR
20798: LD_VAR 0 1
20802: PUSH
20803: FOR_TO
20804: IFFALSE 20842
// if array1 [ i ] <> array2 [ i ] then
20806: LD_VAR 0 1
20810: PUSH
20811: LD_VAR 0 4
20815: ARRAY
20816: PUSH
20817: LD_VAR 0 2
20821: PUSH
20822: LD_VAR 0 4
20826: ARRAY
20827: NONEQUAL
20828: IFFALSE 20840
// begin result := false ;
20830: LD_ADDR_VAR 0 3
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// break ;
20838: GO 20842
// end ;
20840: GO 20803
20842: POP
20843: POP
// end ;
20844: LD_VAR 0 3
20848: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20849: LD_INT 0
20851: PPUSH
20852: PPUSH
20853: PPUSH
// pom := GetBase ( fac ) ;
20854: LD_ADDR_VAR 0 5
20858: PUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 274
20868: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20869: LD_ADDR_VAR 0 4
20873: PUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_INT 2
20890: ARRAY
20891: PPUSH
20892: LD_VAR 0 2
20896: PUSH
20897: LD_INT 3
20899: ARRAY
20900: PPUSH
20901: LD_VAR 0 2
20905: PUSH
20906: LD_INT 4
20908: ARRAY
20909: PPUSH
20910: CALL_OW 449
20914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20915: LD_ADDR_VAR 0 3
20919: PUSH
20920: LD_VAR 0 5
20924: PPUSH
20925: LD_INT 1
20927: PPUSH
20928: CALL_OW 275
20932: PUSH
20933: LD_VAR 0 4
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: GREATEREQUAL
20942: PUSH
20943: LD_VAR 0 5
20947: PPUSH
20948: LD_INT 2
20950: PPUSH
20951: CALL_OW 275
20955: PUSH
20956: LD_VAR 0 4
20960: PUSH
20961: LD_INT 2
20963: ARRAY
20964: GREATEREQUAL
20965: AND
20966: PUSH
20967: LD_VAR 0 5
20971: PPUSH
20972: LD_INT 3
20974: PPUSH
20975: CALL_OW 275
20979: PUSH
20980: LD_VAR 0 4
20984: PUSH
20985: LD_INT 3
20987: ARRAY
20988: GREATEREQUAL
20989: AND
20990: ST_TO_ADDR
// end ;
20991: LD_VAR 0 3
20995: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20996: LD_INT 0
20998: PPUSH
20999: PPUSH
21000: PPUSH
21001: PPUSH
// pom := GetBase ( building ) ;
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 274
21016: ST_TO_ADDR
// if not pom then
21017: LD_VAR 0 3
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21196
// btype := GetBType ( building ) ;
21026: LD_ADDR_VAR 0 5
21030: PUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 266
21040: ST_TO_ADDR
// if btype = b_armoury then
21041: LD_VAR 0 5
21045: PUSH
21046: LD_INT 4
21048: EQUAL
21049: IFFALSE 21059
// btype := b_barracks ;
21051: LD_ADDR_VAR 0 5
21055: PUSH
21056: LD_INT 5
21058: ST_TO_ADDR
// if btype = b_depot then
21059: LD_VAR 0 5
21063: PUSH
21064: LD_INT 0
21066: EQUAL
21067: IFFALSE 21077
// btype := b_warehouse ;
21069: LD_ADDR_VAR 0 5
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// if btype = b_workshop then
21077: LD_VAR 0 5
21081: PUSH
21082: LD_INT 2
21084: EQUAL
21085: IFFALSE 21095
// btype := b_factory ;
21087: LD_ADDR_VAR 0 5
21091: PUSH
21092: LD_INT 3
21094: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: LD_VAR 0 5
21104: PPUSH
21105: LD_VAR 0 1
21109: PPUSH
21110: CALL_OW 248
21114: PPUSH
21115: CALL_OW 450
21119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21120: LD_ADDR_VAR 0 2
21124: PUSH
21125: LD_VAR 0 3
21129: PPUSH
21130: LD_INT 1
21132: PPUSH
21133: CALL_OW 275
21137: PUSH
21138: LD_VAR 0 4
21142: PUSH
21143: LD_INT 1
21145: ARRAY
21146: GREATEREQUAL
21147: PUSH
21148: LD_VAR 0 3
21152: PPUSH
21153: LD_INT 2
21155: PPUSH
21156: CALL_OW 275
21160: PUSH
21161: LD_VAR 0 4
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: GREATEREQUAL
21170: AND
21171: PUSH
21172: LD_VAR 0 3
21176: PPUSH
21177: LD_INT 3
21179: PPUSH
21180: CALL_OW 275
21184: PUSH
21185: LD_VAR 0 4
21189: PUSH
21190: LD_INT 3
21192: ARRAY
21193: GREATEREQUAL
21194: AND
21195: ST_TO_ADDR
// end ;
21196: LD_VAR 0 2
21200: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21201: LD_INT 0
21203: PPUSH
21204: PPUSH
21205: PPUSH
// pom := GetBase ( building ) ;
21206: LD_ADDR_VAR 0 4
21210: PUSH
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 274
21220: ST_TO_ADDR
// if not pom then
21221: LD_VAR 0 4
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21331
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21230: LD_ADDR_VAR 0 5
21234: PUSH
21235: LD_VAR 0 2
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 248
21249: PPUSH
21250: CALL_OW 450
21254: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21255: LD_ADDR_VAR 0 3
21259: PUSH
21260: LD_VAR 0 4
21264: PPUSH
21265: LD_INT 1
21267: PPUSH
21268: CALL_OW 275
21272: PUSH
21273: LD_VAR 0 5
21277: PUSH
21278: LD_INT 1
21280: ARRAY
21281: GREATEREQUAL
21282: PUSH
21283: LD_VAR 0 4
21287: PPUSH
21288: LD_INT 2
21290: PPUSH
21291: CALL_OW 275
21295: PUSH
21296: LD_VAR 0 5
21300: PUSH
21301: LD_INT 2
21303: ARRAY
21304: GREATEREQUAL
21305: AND
21306: PUSH
21307: LD_VAR 0 4
21311: PPUSH
21312: LD_INT 3
21314: PPUSH
21315: CALL_OW 275
21319: PUSH
21320: LD_VAR 0 5
21324: PUSH
21325: LD_INT 3
21327: ARRAY
21328: GREATEREQUAL
21329: AND
21330: ST_TO_ADDR
// end ;
21331: LD_VAR 0 3
21335: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21336: LD_INT 0
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
21343: PPUSH
21344: PPUSH
21345: PPUSH
21346: PPUSH
21347: PPUSH
21348: PPUSH
// result := false ;
21349: LD_ADDR_VAR 0 8
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21357: LD_VAR 0 5
21361: NOT
21362: PUSH
21363: LD_VAR 0 1
21367: NOT
21368: OR
21369: PUSH
21370: LD_VAR 0 2
21374: NOT
21375: OR
21376: PUSH
21377: LD_VAR 0 3
21381: NOT
21382: OR
21383: IFFALSE 21387
// exit ;
21385: GO 22201
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21387: LD_ADDR_VAR 0 14
21391: PUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: LD_VAR 0 2
21401: PPUSH
21402: LD_VAR 0 3
21406: PPUSH
21407: LD_VAR 0 4
21411: PPUSH
21412: LD_VAR 0 5
21416: PUSH
21417: LD_INT 1
21419: ARRAY
21420: PPUSH
21421: CALL_OW 248
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL 23454 0 6
21433: ST_TO_ADDR
// if not hexes then
21434: LD_VAR 0 14
21438: NOT
21439: IFFALSE 21443
// exit ;
21441: GO 22201
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21443: LD_ADDR_VAR 0 17
21447: PUSH
21448: LD_VAR 0 5
21452: PPUSH
21453: LD_INT 22
21455: PUSH
21456: LD_VAR 0 13
21460: PPUSH
21461: CALL_OW 255
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PPUSH
21502: CALL_OW 72
21506: ST_TO_ADDR
// for i = 1 to hexes do
21507: LD_ADDR_VAR 0 9
21511: PUSH
21512: DOUBLE
21513: LD_INT 1
21515: DEC
21516: ST_TO_ADDR
21517: LD_VAR 0 14
21521: PUSH
21522: FOR_TO
21523: IFFALSE 22199
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21525: LD_ADDR_VAR 0 13
21529: PUSH
21530: LD_VAR 0 14
21534: PUSH
21535: LD_VAR 0 9
21539: ARRAY
21540: PUSH
21541: LD_INT 1
21543: ARRAY
21544: PPUSH
21545: LD_VAR 0 14
21549: PUSH
21550: LD_VAR 0 9
21554: ARRAY
21555: PUSH
21556: LD_INT 2
21558: ARRAY
21559: PPUSH
21560: CALL_OW 428
21564: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21565: LD_VAR 0 14
21569: PUSH
21570: LD_VAR 0 9
21574: ARRAY
21575: PUSH
21576: LD_INT 1
21578: ARRAY
21579: PPUSH
21580: LD_VAR 0 14
21584: PUSH
21585: LD_VAR 0 9
21589: ARRAY
21590: PUSH
21591: LD_INT 2
21593: ARRAY
21594: PPUSH
21595: CALL_OW 351
21599: PUSH
21600: LD_VAR 0 14
21604: PUSH
21605: LD_VAR 0 9
21609: ARRAY
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: PPUSH
21615: LD_VAR 0 14
21619: PUSH
21620: LD_VAR 0 9
21624: ARRAY
21625: PUSH
21626: LD_INT 2
21628: ARRAY
21629: PPUSH
21630: CALL_OW 488
21634: NOT
21635: OR
21636: PUSH
21637: LD_VAR 0 13
21641: PPUSH
21642: CALL_OW 247
21646: PUSH
21647: LD_INT 3
21649: EQUAL
21650: OR
21651: IFFALSE 21657
// exit ;
21653: POP
21654: POP
21655: GO 22201
// if not tmp then
21657: LD_VAR 0 13
21661: NOT
21662: IFFALSE 21666
// continue ;
21664: GO 21522
// result := true ;
21666: LD_ADDR_VAR 0 8
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21674: LD_VAR 0 6
21678: PUSH
21679: LD_VAR 0 13
21683: PPUSH
21684: CALL_OW 247
21688: PUSH
21689: LD_INT 2
21691: EQUAL
21692: AND
21693: PUSH
21694: LD_VAR 0 13
21698: PPUSH
21699: CALL_OW 263
21703: PUSH
21704: LD_INT 1
21706: EQUAL
21707: AND
21708: IFFALSE 21872
// begin if IsDrivenBy ( tmp ) then
21710: LD_VAR 0 13
21714: PPUSH
21715: CALL_OW 311
21719: IFFALSE 21723
// continue ;
21721: GO 21522
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21723: LD_VAR 0 6
21727: PPUSH
21728: LD_INT 3
21730: PUSH
21731: LD_INT 60
21733: PUSH
21734: EMPTY
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 3
21743: PUSH
21744: LD_INT 55
21746: PUSH
21747: EMPTY
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 72
21762: IFFALSE 21870
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21764: LD_ADDR_VAR 0 18
21768: PUSH
21769: LD_VAR 0 6
21773: PPUSH
21774: LD_INT 3
21776: PUSH
21777: LD_INT 60
21779: PUSH
21780: EMPTY
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 55
21792: PUSH
21793: EMPTY
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 72
21808: PUSH
21809: LD_INT 1
21811: ARRAY
21812: ST_TO_ADDR
// if IsInUnit ( driver ) then
21813: LD_VAR 0 18
21817: PPUSH
21818: CALL_OW 310
21822: IFFALSE 21833
// ComExit ( driver ) ;
21824: LD_VAR 0 18
21828: PPUSH
21829: CALL 47255 0 1
// AddComEnterUnit ( driver , tmp ) ;
21833: LD_VAR 0 18
21837: PPUSH
21838: LD_VAR 0 13
21842: PPUSH
21843: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21847: LD_VAR 0 18
21851: PPUSH
21852: LD_VAR 0 7
21856: PPUSH
21857: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21861: LD_VAR 0 18
21865: PPUSH
21866: CALL_OW 181
// end ; continue ;
21870: GO 21522
// end ; if not cleaners or not tmp in cleaners then
21872: LD_VAR 0 6
21876: NOT
21877: PUSH
21878: LD_VAR 0 13
21882: PUSH
21883: LD_VAR 0 6
21887: IN
21888: NOT
21889: OR
21890: IFFALSE 22197
// begin if dep then
21892: LD_VAR 0 17
21896: IFFALSE 22032
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21898: LD_ADDR_VAR 0 16
21902: PUSH
21903: LD_VAR 0 17
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PPUSH
21912: CALL_OW 250
21916: PPUSH
21917: LD_VAR 0 17
21921: PUSH
21922: LD_INT 1
21924: ARRAY
21925: PPUSH
21926: CALL_OW 254
21930: PPUSH
21931: LD_INT 5
21933: PPUSH
21934: CALL_OW 272
21938: PUSH
21939: LD_VAR 0 17
21943: PUSH
21944: LD_INT 1
21946: ARRAY
21947: PPUSH
21948: CALL_OW 251
21952: PPUSH
21953: LD_VAR 0 17
21957: PUSH
21958: LD_INT 1
21960: ARRAY
21961: PPUSH
21962: CALL_OW 254
21966: PPUSH
21967: LD_INT 5
21969: PPUSH
21970: CALL_OW 273
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21979: LD_VAR 0 16
21983: PUSH
21984: LD_INT 1
21986: ARRAY
21987: PPUSH
21988: LD_VAR 0 16
21992: PUSH
21993: LD_INT 2
21995: ARRAY
21996: PPUSH
21997: CALL_OW 488
22001: IFFALSE 22032
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22003: LD_VAR 0 13
22007: PPUSH
22008: LD_VAR 0 16
22012: PUSH
22013: LD_INT 1
22015: ARRAY
22016: PPUSH
22017: LD_VAR 0 16
22021: PUSH
22022: LD_INT 2
22024: ARRAY
22025: PPUSH
22026: CALL_OW 111
// continue ;
22030: GO 21522
// end ; end ; r := GetDir ( tmp ) ;
22032: LD_ADDR_VAR 0 15
22036: PUSH
22037: LD_VAR 0 13
22041: PPUSH
22042: CALL_OW 254
22046: ST_TO_ADDR
// if r = 5 then
22047: LD_VAR 0 15
22051: PUSH
22052: LD_INT 5
22054: EQUAL
22055: IFFALSE 22065
// r := 0 ;
22057: LD_ADDR_VAR 0 15
22061: PUSH
22062: LD_INT 0
22064: ST_TO_ADDR
// for j = r to 5 do
22065: LD_ADDR_VAR 0 10
22069: PUSH
22070: DOUBLE
22071: LD_VAR 0 15
22075: DEC
22076: ST_TO_ADDR
22077: LD_INT 5
22079: PUSH
22080: FOR_TO
22081: IFFALSE 22195
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22083: LD_ADDR_VAR 0 11
22087: PUSH
22088: LD_VAR 0 13
22092: PPUSH
22093: CALL_OW 250
22097: PPUSH
22098: LD_VAR 0 10
22102: PPUSH
22103: LD_INT 2
22105: PPUSH
22106: CALL_OW 272
22110: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22111: LD_ADDR_VAR 0 12
22115: PUSH
22116: LD_VAR 0 13
22120: PPUSH
22121: CALL_OW 251
22125: PPUSH
22126: LD_VAR 0 10
22130: PPUSH
22131: LD_INT 2
22133: PPUSH
22134: CALL_OW 273
22138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22139: LD_VAR 0 11
22143: PPUSH
22144: LD_VAR 0 12
22148: PPUSH
22149: CALL_OW 488
22153: PUSH
22154: LD_VAR 0 11
22158: PPUSH
22159: LD_VAR 0 12
22163: PPUSH
22164: CALL_OW 428
22168: NOT
22169: AND
22170: IFFALSE 22193
// begin ComMoveXY ( tmp , _x , _y ) ;
22172: LD_VAR 0 13
22176: PPUSH
22177: LD_VAR 0 11
22181: PPUSH
22182: LD_VAR 0 12
22186: PPUSH
22187: CALL_OW 111
// break ;
22191: GO 22195
// end ; end ;
22193: GO 22080
22195: POP
22196: POP
// end ; end ;
22197: GO 21522
22199: POP
22200: POP
// end ;
22201: LD_VAR 0 8
22205: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22206: LD_INT 0
22208: PPUSH
// result := true ;
22209: LD_ADDR_VAR 0 3
22213: PUSH
22214: LD_INT 1
22216: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22217: LD_VAR 0 2
22221: PUSH
22222: LD_INT 24
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22236
22228: LD_INT 33
22230: DOUBLE
22231: EQUAL
22232: IFTRUE 22236
22234: GO 22261
22236: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22237: LD_ADDR_VAR 0 3
22241: PUSH
22242: LD_INT 32
22244: PPUSH
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 321
22254: PUSH
22255: LD_INT 2
22257: EQUAL
22258: ST_TO_ADDR
22259: GO 22577
22261: LD_INT 20
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22294
22269: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22270: LD_ADDR_VAR 0 3
22274: PUSH
22275: LD_INT 6
22277: PPUSH
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 321
22287: PUSH
22288: LD_INT 2
22290: EQUAL
22291: ST_TO_ADDR
22292: GO 22577
22294: LD_INT 22
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22308
22300: LD_INT 36
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22333
22308: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22309: LD_ADDR_VAR 0 3
22313: PUSH
22314: LD_INT 15
22316: PPUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL_OW 321
22326: PUSH
22327: LD_INT 2
22329: EQUAL
22330: ST_TO_ADDR
22331: GO 22577
22333: LD_INT 30
22335: DOUBLE
22336: EQUAL
22337: IFTRUE 22341
22339: GO 22366
22341: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22342: LD_ADDR_VAR 0 3
22346: PUSH
22347: LD_INT 20
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 321
22359: PUSH
22360: LD_INT 2
22362: EQUAL
22363: ST_TO_ADDR
22364: GO 22577
22366: LD_INT 28
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22380
22372: LD_INT 21
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22405
22380: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 21
22388: PPUSH
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 321
22398: PUSH
22399: LD_INT 2
22401: EQUAL
22402: ST_TO_ADDR
22403: GO 22577
22405: LD_INT 16
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22438
22413: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_INT 84
22421: PPUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 321
22431: PUSH
22432: LD_INT 2
22434: EQUAL
22435: ST_TO_ADDR
22436: GO 22577
22438: LD_INT 19
22440: DOUBLE
22441: EQUAL
22442: IFTRUE 22452
22444: LD_INT 23
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22477
22452: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22453: LD_ADDR_VAR 0 3
22457: PUSH
22458: LD_INT 83
22460: PPUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 321
22470: PUSH
22471: LD_INT 2
22473: EQUAL
22474: ST_TO_ADDR
22475: GO 22577
22477: LD_INT 17
22479: DOUBLE
22480: EQUAL
22481: IFTRUE 22485
22483: GO 22510
22485: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22486: LD_ADDR_VAR 0 3
22490: PUSH
22491: LD_INT 39
22493: PPUSH
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 321
22503: PUSH
22504: LD_INT 2
22506: EQUAL
22507: ST_TO_ADDR
22508: GO 22577
22510: LD_INT 18
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22543
22518: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22519: LD_ADDR_VAR 0 3
22523: PUSH
22524: LD_INT 40
22526: PPUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: CALL_OW 321
22536: PUSH
22537: LD_INT 2
22539: EQUAL
22540: ST_TO_ADDR
22541: GO 22577
22543: LD_INT 27
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22576
22551: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22552: LD_ADDR_VAR 0 3
22556: PUSH
22557: LD_INT 35
22559: PPUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL_OW 321
22569: PUSH
22570: LD_INT 2
22572: EQUAL
22573: ST_TO_ADDR
22574: GO 22577
22576: POP
// end ;
22577: LD_VAR 0 3
22581: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22582: LD_INT 0
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
22594: PPUSH
// result := false ;
22595: LD_ADDR_VAR 0 6
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// if btype = b_depot then
22603: LD_VAR 0 2
22607: PUSH
22608: LD_INT 0
22610: EQUAL
22611: IFFALSE 22623
// begin result := true ;
22613: LD_ADDR_VAR 0 6
22617: PUSH
22618: LD_INT 1
22620: ST_TO_ADDR
// exit ;
22621: GO 23449
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22623: LD_VAR 0 1
22627: NOT
22628: PUSH
22629: LD_VAR 0 1
22633: PPUSH
22634: CALL_OW 266
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: IN
22649: NOT
22650: OR
22651: PUSH
22652: LD_VAR 0 2
22656: NOT
22657: OR
22658: PUSH
22659: LD_VAR 0 5
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 4
22678: PUSH
22679: LD_INT 5
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: IN
22690: NOT
22691: OR
22692: PUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_VAR 0 4
22702: PPUSH
22703: CALL_OW 488
22707: NOT
22708: OR
22709: IFFALSE 22713
// exit ;
22711: GO 23449
// side := GetSide ( depot ) ;
22713: LD_ADDR_VAR 0 9
22717: PUSH
22718: LD_VAR 0 1
22722: PPUSH
22723: CALL_OW 255
22727: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22728: LD_VAR 0 9
22732: PPUSH
22733: LD_VAR 0 2
22737: PPUSH
22738: CALL 22206 0 2
22742: NOT
22743: IFFALSE 22747
// exit ;
22745: GO 23449
// pom := GetBase ( depot ) ;
22747: LD_ADDR_VAR 0 10
22751: PUSH
22752: LD_VAR 0 1
22756: PPUSH
22757: CALL_OW 274
22761: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22762: LD_ADDR_VAR 0 11
22766: PUSH
22767: LD_VAR 0 2
22771: PPUSH
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 248
22781: PPUSH
22782: CALL_OW 450
22786: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22787: LD_VAR 0 10
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: CALL_OW 275
22799: PUSH
22800: LD_VAR 0 11
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: GREATEREQUAL
22809: PUSH
22810: LD_VAR 0 10
22814: PPUSH
22815: LD_INT 2
22817: PPUSH
22818: CALL_OW 275
22822: PUSH
22823: LD_VAR 0 11
22827: PUSH
22828: LD_INT 2
22830: ARRAY
22831: GREATEREQUAL
22832: AND
22833: PUSH
22834: LD_VAR 0 10
22838: PPUSH
22839: LD_INT 3
22841: PPUSH
22842: CALL_OW 275
22846: PUSH
22847: LD_VAR 0 11
22851: PUSH
22852: LD_INT 3
22854: ARRAY
22855: GREATEREQUAL
22856: AND
22857: NOT
22858: IFFALSE 22862
// exit ;
22860: GO 23449
// if GetBType ( depot ) = b_depot then
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 266
22871: PUSH
22872: LD_INT 0
22874: EQUAL
22875: IFFALSE 22887
// dist := 28 else
22877: LD_ADDR_VAR 0 14
22881: PUSH
22882: LD_INT 28
22884: ST_TO_ADDR
22885: GO 22895
// dist := 36 ;
22887: LD_ADDR_VAR 0 14
22891: PUSH
22892: LD_INT 36
22894: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22895: LD_VAR 0 1
22899: PPUSH
22900: LD_VAR 0 3
22904: PPUSH
22905: LD_VAR 0 4
22909: PPUSH
22910: CALL_OW 297
22914: PUSH
22915: LD_VAR 0 14
22919: GREATER
22920: IFFALSE 22924
// exit ;
22922: GO 23449
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22924: LD_ADDR_VAR 0 12
22928: PUSH
22929: LD_VAR 0 2
22933: PPUSH
22934: LD_VAR 0 3
22938: PPUSH
22939: LD_VAR 0 4
22943: PPUSH
22944: LD_VAR 0 5
22948: PPUSH
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 248
22958: PPUSH
22959: LD_INT 0
22961: PPUSH
22962: CALL 23454 0 6
22966: ST_TO_ADDR
// if not hexes then
22967: LD_VAR 0 12
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23449
// hex := GetHexInfo ( x , y ) ;
22976: LD_ADDR_VAR 0 15
22980: PUSH
22981: LD_VAR 0 3
22985: PPUSH
22986: LD_VAR 0 4
22990: PPUSH
22991: CALL_OW 546
22995: ST_TO_ADDR
// if hex [ 1 ] then
22996: LD_VAR 0 15
23000: PUSH
23001: LD_INT 1
23003: ARRAY
23004: IFFALSE 23008
// exit ;
23006: GO 23449
// height := hex [ 2 ] ;
23008: LD_ADDR_VAR 0 13
23012: PUSH
23013: LD_VAR 0 15
23017: PUSH
23018: LD_INT 2
23020: ARRAY
23021: ST_TO_ADDR
// for i = 1 to hexes do
23022: LD_ADDR_VAR 0 7
23026: PUSH
23027: DOUBLE
23028: LD_INT 1
23030: DEC
23031: ST_TO_ADDR
23032: LD_VAR 0 12
23036: PUSH
23037: FOR_TO
23038: IFFALSE 23368
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23040: LD_VAR 0 12
23044: PUSH
23045: LD_VAR 0 7
23049: ARRAY
23050: PUSH
23051: LD_INT 1
23053: ARRAY
23054: PPUSH
23055: LD_VAR 0 12
23059: PUSH
23060: LD_VAR 0 7
23064: ARRAY
23065: PUSH
23066: LD_INT 2
23068: ARRAY
23069: PPUSH
23070: CALL_OW 488
23074: NOT
23075: PUSH
23076: LD_VAR 0 12
23080: PUSH
23081: LD_VAR 0 7
23085: ARRAY
23086: PUSH
23087: LD_INT 1
23089: ARRAY
23090: PPUSH
23091: LD_VAR 0 12
23095: PUSH
23096: LD_VAR 0 7
23100: ARRAY
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PPUSH
23106: CALL_OW 428
23110: PUSH
23111: LD_INT 0
23113: GREATER
23114: OR
23115: PUSH
23116: LD_VAR 0 12
23120: PUSH
23121: LD_VAR 0 7
23125: ARRAY
23126: PUSH
23127: LD_INT 1
23129: ARRAY
23130: PPUSH
23131: LD_VAR 0 12
23135: PUSH
23136: LD_VAR 0 7
23140: ARRAY
23141: PUSH
23142: LD_INT 2
23144: ARRAY
23145: PPUSH
23146: CALL_OW 351
23150: OR
23151: IFFALSE 23157
// exit ;
23153: POP
23154: POP
23155: GO 23449
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23157: LD_ADDR_VAR 0 8
23161: PUSH
23162: LD_VAR 0 12
23166: PUSH
23167: LD_VAR 0 7
23171: ARRAY
23172: PUSH
23173: LD_INT 1
23175: ARRAY
23176: PPUSH
23177: LD_VAR 0 12
23181: PUSH
23182: LD_VAR 0 7
23186: ARRAY
23187: PUSH
23188: LD_INT 2
23190: ARRAY
23191: PPUSH
23192: CALL_OW 546
23196: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23197: LD_VAR 0 8
23201: PUSH
23202: LD_INT 1
23204: ARRAY
23205: PUSH
23206: LD_VAR 0 8
23210: PUSH
23211: LD_INT 2
23213: ARRAY
23214: PUSH
23215: LD_VAR 0 13
23219: PUSH
23220: LD_INT 2
23222: PLUS
23223: GREATER
23224: OR
23225: PUSH
23226: LD_VAR 0 8
23230: PUSH
23231: LD_INT 2
23233: ARRAY
23234: PUSH
23235: LD_VAR 0 13
23239: PUSH
23240: LD_INT 2
23242: MINUS
23243: LESS
23244: OR
23245: PUSH
23246: LD_VAR 0 8
23250: PUSH
23251: LD_INT 3
23253: ARRAY
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 8
23260: PUSH
23261: LD_INT 9
23263: PUSH
23264: LD_INT 10
23266: PUSH
23267: LD_INT 11
23269: PUSH
23270: LD_INT 12
23272: PUSH
23273: LD_INT 13
23275: PUSH
23276: LD_INT 16
23278: PUSH
23279: LD_INT 17
23281: PUSH
23282: LD_INT 18
23284: PUSH
23285: LD_INT 19
23287: PUSH
23288: LD_INT 20
23290: PUSH
23291: LD_INT 21
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: IN
23309: NOT
23310: OR
23311: PUSH
23312: LD_VAR 0 8
23316: PUSH
23317: LD_INT 5
23319: ARRAY
23320: NOT
23321: OR
23322: PUSH
23323: LD_VAR 0 8
23327: PUSH
23328: LD_INT 6
23330: ARRAY
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 7
23340: PUSH
23341: LD_INT 9
23343: PUSH
23344: LD_INT 10
23346: PUSH
23347: LD_INT 11
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: IN
23358: NOT
23359: OR
23360: IFFALSE 23366
// exit ;
23362: POP
23363: POP
23364: GO 23449
// end ;
23366: GO 23037
23368: POP
23369: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23370: LD_VAR 0 9
23374: PPUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: LD_VAR 0 4
23384: PPUSH
23385: LD_INT 20
23387: PPUSH
23388: CALL 15372 0 4
23392: PUSH
23393: LD_INT 4
23395: ARRAY
23396: IFFALSE 23400
// exit ;
23398: GO 23449
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23400: LD_VAR 0 2
23404: PUSH
23405: LD_INT 29
23407: PUSH
23408: LD_INT 30
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: IN
23415: PUSH
23416: LD_VAR 0 3
23420: PPUSH
23421: LD_VAR 0 4
23425: PPUSH
23426: LD_VAR 0 9
23430: PPUSH
23431: CALL_OW 440
23435: NOT
23436: AND
23437: IFFALSE 23441
// exit ;
23439: GO 23449
// result := true ;
23441: LD_ADDR_VAR 0 6
23445: PUSH
23446: LD_INT 1
23448: ST_TO_ADDR
// end ;
23449: LD_VAR 0 6
23453: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23454: LD_INT 0
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
23476: PPUSH
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
23510: PPUSH
23511: PPUSH
23512: PPUSH
23513: PPUSH
// result = [ ] ;
23514: LD_ADDR_VAR 0 7
23518: PUSH
23519: EMPTY
23520: ST_TO_ADDR
// temp_list = [ ] ;
23521: LD_ADDR_VAR 0 9
23525: PUSH
23526: EMPTY
23527: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23528: LD_VAR 0 4
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 4
23547: PUSH
23548: LD_INT 5
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: IN
23559: NOT
23560: PUSH
23561: LD_VAR 0 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: IN
23576: PUSH
23577: LD_VAR 0 5
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 2
23587: PUSH
23588: LD_INT 3
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: IN
23596: NOT
23597: AND
23598: OR
23599: IFFALSE 23603
// exit ;
23601: GO 41994
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23603: LD_VAR 0 1
23607: PUSH
23608: LD_INT 6
23610: PUSH
23611: LD_INT 7
23613: PUSH
23614: LD_INT 8
23616: PUSH
23617: LD_INT 13
23619: PUSH
23620: LD_INT 12
23622: PUSH
23623: LD_INT 15
23625: PUSH
23626: LD_INT 11
23628: PUSH
23629: LD_INT 14
23631: PUSH
23632: LD_INT 10
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: IN
23646: IFFALSE 23656
// btype = b_lab ;
23648: LD_ADDR_VAR 0 1
23652: PUSH
23653: LD_INT 6
23655: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23656: LD_VAR 0 6
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: IN
23675: NOT
23676: PUSH
23677: LD_VAR 0 1
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 3
23693: PUSH
23694: LD_INT 6
23696: PUSH
23697: LD_INT 36
23699: PUSH
23700: LD_INT 4
23702: PUSH
23703: LD_INT 5
23705: PUSH
23706: LD_INT 31
23708: PUSH
23709: LD_INT 32
23711: PUSH
23712: LD_INT 33
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: IN
23728: NOT
23729: PUSH
23730: LD_VAR 0 6
23734: PUSH
23735: LD_INT 1
23737: EQUAL
23738: AND
23739: OR
23740: PUSH
23741: LD_VAR 0 1
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 3
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: IN
23756: NOT
23757: PUSH
23758: LD_VAR 0 6
23762: PUSH
23763: LD_INT 2
23765: EQUAL
23766: AND
23767: OR
23768: IFFALSE 23778
// mode = 0 ;
23770: LD_ADDR_VAR 0 6
23774: PUSH
23775: LD_INT 0
23777: ST_TO_ADDR
// case mode of 0 :
23778: LD_VAR 0 6
23782: PUSH
23783: LD_INT 0
23785: DOUBLE
23786: EQUAL
23787: IFTRUE 23791
23789: GO 35244
23791: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23792: LD_ADDR_VAR 0 11
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 3
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 3
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23985: LD_ADDR_VAR 0 12
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: NEG
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: NEG
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 2
24119: NEG
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: NEG
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 3
24142: NEG
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 3
24153: NEG
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24181: LD_ADDR_VAR 0 13
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 2
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: LD_INT 3
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 3
24340: NEG
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: NEG
24353: PUSH
24354: LD_INT 3
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24380: LD_ADDR_VAR 0 14
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: LD_INT 3
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 3
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24576: LD_ADDR_VAR 0 15
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24769: LD_ADDR_VAR 0 16
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: LD_INT 2
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 3
24926: PUSH
24927: LD_INT 3
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 3
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24962: LD_ADDR_VAR 0 17
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 2
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 2
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: LD_INT 2
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25192: LD_ADDR_VAR 0 18
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25422: LD_ADDR_VAR 0 19
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25652: LD_ADDR_VAR 0 20
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 2
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 2
25828: NEG
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25882: LD_ADDR_VAR 0 21
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26112: LD_ADDR_VAR 0 22
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 0
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26342: LD_ADDR_VAR 0 23
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26622: LD_ADDR_VAR 0 24
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 2
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 2
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 3
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26898: LD_ADDR_VAR 0 25
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 2
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 2
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: NEG
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 2
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 3
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 3
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: LD_INT 3
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27172: LD_ADDR_VAR 0 26
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 2
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: NEG
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27448: LD_ADDR_VAR 0 27
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27728: LD_ADDR_VAR 0 28
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 2
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 3
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: NEG
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 3
27963: NEG
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 3
27975: NEG
27976: PUSH
27977: LD_INT 2
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28010: LD_ADDR_VAR 0 29
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 2
28176: NEG
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 3
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 3
28254: NEG
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28289: LD_ADDR_VAR 0 30
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 1
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 3
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 3
28532: NEG
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28567: LD_ADDR_VAR 0 31
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 3
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 3
28810: NEG
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28845: LD_ADDR_VAR 0 32
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: LD_INT 2
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 0
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: NEG
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 3
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 3
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: NEG
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29123: LD_ADDR_VAR 0 33
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 2
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 2
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: NEG
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 3
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: NEG
29368: PUSH
29369: LD_INT 2
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29402: LD_ADDR_VAR 0 34
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 2
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 3
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29682: LD_ADDR_VAR 0 35
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29794: LD_ADDR_VAR 0 36
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: LD_INT 2
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29906: LD_ADDR_VAR 0 37
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30018: LD_ADDR_VAR 0 38
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30130: LD_ADDR_VAR 0 39
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30242: LD_ADDR_VAR 0 40
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30354: LD_ADDR_VAR 0 41
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 2
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: NEG
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30704: LD_ADDR_VAR 0 42
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 2
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 3
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 2
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: LD_INT 2
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: NEG
31014: PUSH
31015: LD_INT 3
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31054: LD_ADDR_VAR 0 43
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 2
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: LD_INT 3
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 3
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 3
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: NEG
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31402: LD_ADDR_VAR 0 44
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 2
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 3
31676: NEG
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31752: LD_ADDR_VAR 0 45
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: LD_INT 3
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 3
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: LD_INT 2
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 3
32061: NEG
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32102: LD_ADDR_VAR 0 46
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 3
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32450: LD_ADDR_VAR 0 47
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32601: LD_ADDR_VAR 0 48
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32748: LD_ADDR_VAR 0 49
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32892: LD_ADDR_VAR 0 50
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33036: LD_ADDR_VAR 0 51
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 1
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33183: LD_ADDR_VAR 0 52
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33334: LD_ADDR_VAR 0 53
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33564: LD_ADDR_VAR 0 54
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33794: LD_ADDR_VAR 0 55
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: NEG
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34024: LD_ADDR_VAR 0 56
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 2
34200: NEG
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34254: LD_ADDR_VAR 0 57
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34484: LD_ADDR_VAR 0 58
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 2
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34714: LD_ADDR_VAR 0 59
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34802: LD_ADDR_VAR 0 60
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34890: LD_ADDR_VAR 0 61
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34978: LD_ADDR_VAR 0 62
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35066: LD_ADDR_VAR 0 63
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35154: LD_ADDR_VAR 0 64
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// end ; 1 :
35242: GO 41139
35244: LD_INT 1
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 37875
35252: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35253: LD_ADDR_VAR 0 11
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 3
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35297: LD_ADDR_VAR 0 12
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35338: LD_ADDR_VAR 0 13
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35378: LD_ADDR_VAR 0 14
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 3
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35419: LD_ADDR_VAR 0 15
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 3
35437: NEG
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35463: LD_ADDR_VAR 0 16
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: NEG
35495: PUSH
35496: LD_INT 3
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35509: LD_ADDR_VAR 0 17
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: LD_INT 3
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 3
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35553: LD_ADDR_VAR 0 18
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35594: LD_ADDR_VAR 0 19
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: LD_INT 3
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35634: LD_ADDR_VAR 0 20
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35675: LD_ADDR_VAR 0 21
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 3
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 3
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35719: LD_ADDR_VAR 0 22
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 3
35738: NEG
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 3
35750: NEG
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35765: LD_ADDR_VAR 0 23
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 3
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 4
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 3
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35809: LD_ADDR_VAR 0 24
35813: PUSH
35814: LD_INT 3
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 4
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35850: LD_ADDR_VAR 0 25
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 4
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: LD_INT 4
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35890: LD_ADDR_VAR 0 26
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 4
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35931: LD_ADDR_VAR 0 27
35935: PUSH
35936: LD_INT 3
35938: NEG
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 4
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35975: LD_ADDR_VAR 0 28
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: LD_INT 3
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 4
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 4
36006: NEG
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36021: LD_ADDR_VAR 0 29
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 3
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 3
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 4
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 4
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: LD_INT 3
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 5
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 5
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 4
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 6
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: LD_INT 6
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 5
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36176: LD_ADDR_VAR 0 30
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 3
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 3
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 4
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 4
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 4
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 5
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 5
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 6
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 6
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36319: LD_ADDR_VAR 0 31
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 3
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 4
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 4
36366: PUSH
36367: LD_INT 4
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: LD_INT 4
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 5
36386: PUSH
36387: LD_INT 4
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 5
36396: PUSH
36397: LD_INT 5
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 4
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 6
36416: PUSH
36417: LD_INT 5
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 6
36426: PUSH
36427: LD_INT 6
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 5
36436: PUSH
36437: LD_INT 6
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36458: LD_ADDR_VAR 0 32
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 4
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 4
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 5
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 5
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: LD_INT 4
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 6
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 6
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36601: LD_ADDR_VAR 0 33
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 3
36619: NEG
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 4
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 4
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 4
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 5
36687: NEG
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 5
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 5
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 6
36721: NEG
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 6
36732: NEG
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36756: LD_ADDR_VAR 0 34
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: LD_INT 3
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: LD_INT 4
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 4
36811: NEG
36812: PUSH
36813: LD_INT 3
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 4
36823: NEG
36824: PUSH
36825: LD_INT 4
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 4
36835: NEG
36836: PUSH
36837: LD_INT 5
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 5
36847: NEG
36848: PUSH
36849: LD_INT 4
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 5
36859: NEG
36860: PUSH
36861: LD_INT 5
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 5
36871: NEG
36872: PUSH
36873: LD_INT 6
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 6
36883: NEG
36884: PUSH
36885: LD_INT 5
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 6
36895: NEG
36896: PUSH
36897: LD_INT 6
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36919: LD_ADDR_VAR 0 41
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 2
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36963: LD_ADDR_VAR 0 42
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37004: LD_ADDR_VAR 0 43
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37044: LD_ADDR_VAR 0 44
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 3
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37085: LD_ADDR_VAR 0 45
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 3
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37129: LD_ADDR_VAR 0 46
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37175: LD_ADDR_VAR 0 47
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 3
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37208: LD_ADDR_VAR 0 48
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37239: LD_ADDR_VAR 0 49
37243: PUSH
37244: LD_INT 3
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 3
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37268: LD_ADDR_VAR 0 50
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37297: LD_ADDR_VAR 0 51
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37328: LD_ADDR_VAR 0 52
37332: PUSH
37333: LD_INT 3
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 3
37347: NEG
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37361: LD_ADDR_VAR 0 53
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 3
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 3
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37405: LD_ADDR_VAR 0 54
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37446: LD_ADDR_VAR 0 55
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37486: LD_ADDR_VAR 0 56
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 3
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37527: LD_ADDR_VAR 0 57
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 3
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 3
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37571: LD_ADDR_VAR 0 58
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: LD_INT 3
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: NEG
37603: PUSH
37604: LD_INT 3
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37617: LD_ADDR_VAR 0 59
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37661: LD_ADDR_VAR 0 60
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37702: LD_ADDR_VAR 0 61
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37742: LD_ADDR_VAR 0 62
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37783: LD_ADDR_VAR 0 63
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37827: LD_ADDR_VAR 0 64
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
// end ; 2 :
37873: GO 41139
37875: LD_INT 2
37877: DOUBLE
37878: EQUAL
37879: IFTRUE 37883
37881: GO 41138
37883: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37884: LD_ADDR_VAR 0 29
37888: PUSH
37889: LD_INT 4
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 4
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 5
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 5
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 4
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 5
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 4
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: LD_INT 4
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 4
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 4
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 4
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 4
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 5
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 5
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: LD_INT 4
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 5
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 3
38167: NEG
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 3
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 3
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 4
38223: NEG
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 4
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 4
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 4
38269: NEG
38270: PUSH
38271: LD_INT 4
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 4
38281: NEG
38282: PUSH
38283: LD_INT 5
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: LD_INT 4
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 3
38305: NEG
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 4
38317: NEG
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 5
38329: NEG
38330: PUSH
38331: LD_INT 4
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 5
38341: NEG
38342: PUSH
38343: LD_INT 5
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: NEG
38354: PUSH
38355: LD_INT 5
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 5
38365: NEG
38366: PUSH
38367: LD_INT 3
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38422: LD_ADDR_VAR 0 30
38426: PUSH
38427: LD_INT 4
38429: PUSH
38430: LD_INT 4
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 4
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 5
38449: PUSH
38450: LD_INT 4
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 5
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 4
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 5
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 0
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 4
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 4
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: LD_INT 4
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 4
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 4
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 4
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 5
38668: NEG
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 5
38679: NEG
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 5
38691: NEG
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: NEG
38727: PUSH
38728: LD_INT 4
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 4
38774: NEG
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 4
38786: NEG
38787: PUSH
38788: LD_INT 4
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 4
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 4
38810: NEG
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 4
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 5
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 4
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 3
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 4
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 5
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 5
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38969: LD_ADDR_VAR 0 31
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 4
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 5
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 5
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 4
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 5
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 3
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 4
39125: NEG
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 4
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 4
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 4
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 4
39183: NEG
39184: PUSH
39185: LD_INT 5
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: LD_INT 4
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 3
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 4
39219: NEG
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 5
39231: NEG
39232: PUSH
39233: LD_INT 4
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 5
39243: NEG
39244: PUSH
39245: LD_INT 5
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: NEG
39256: PUSH
39257: LD_INT 5
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 5
39267: NEG
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 4
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 3
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 3
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: LD_INT 4
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 4
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 4
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 5
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 5
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 3
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 5
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39519: LD_ADDR_VAR 0 32
39523: PUSH
39524: LD_INT 4
39526: NEG
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 4
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 3
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 5
39582: NEG
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 5
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 5
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: NEG
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 3
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 4
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 3
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 4
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 4
39700: NEG
39701: PUSH
39702: LD_INT 4
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 4
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 4
39724: NEG
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 4
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 5
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 4
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 3
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 3
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 4
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 5
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 3
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 5
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 3
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 4
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 4
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 3
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 4
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: LD_INT 4
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 4
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 5
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: LD_INT 5
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: LD_INT 4
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 5
40001: PUSH
40002: LD_INT 3
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: LD_INT 5
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40066: LD_ADDR_VAR 0 33
40070: PUSH
40071: LD_INT 4
40073: NEG
40074: PUSH
40075: LD_INT 4
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 4
40085: NEG
40086: PUSH
40087: LD_INT 5
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 3
40097: NEG
40098: PUSH
40099: LD_INT 4
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 3
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 4
40121: NEG
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 5
40133: NEG
40134: PUSH
40135: LD_INT 4
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 5
40145: NEG
40146: PUSH
40147: LD_INT 5
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 3
40157: NEG
40158: PUSH
40159: LD_INT 5
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 5
40169: NEG
40170: PUSH
40171: LD_INT 3
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 3
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 4
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 3
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 4
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: LD_INT 4
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 4
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 5
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 5
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 4
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 5
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: LD_INT 3
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 4
40396: PUSH
40397: LD_INT 3
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 4
40406: PUSH
40407: LD_INT 4
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: PUSH
40417: LD_INT 4
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 4
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 4
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 4
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 3
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 4
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: LD_INT 5
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 5
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 4
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40604: LD_ADDR_VAR 0 34
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 4
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 5
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 3
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 4
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 5
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 5
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 4
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 4
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 3
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 4
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 4
40806: PUSH
40807: LD_INT 4
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 4
40816: PUSH
40817: LD_INT 3
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 5
40826: PUSH
40827: LD_INT 4
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 5
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: PUSH
40847: LD_INT 5
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: LD_INT 4
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 5
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 3
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 4
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 4
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 4
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: NEG
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 4
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 4
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 3
41012: NEG
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 4
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 5
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 5
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 5
41068: NEG
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 3
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
// end ; end ;
41136: GO 41139
41138: POP
// case btype of b_depot , b_warehouse :
41139: LD_VAR 0 1
41143: PUSH
41144: LD_INT 0
41146: DOUBLE
41147: EQUAL
41148: IFTRUE 41158
41150: LD_INT 1
41152: DOUBLE
41153: EQUAL
41154: IFTRUE 41158
41156: GO 41359
41158: POP
// case nation of nation_american :
41159: LD_VAR 0 5
41163: PUSH
41164: LD_INT 1
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41228
41172: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41173: LD_ADDR_VAR 0 9
41177: PUSH
41178: LD_VAR 0 11
41182: PUSH
41183: LD_VAR 0 12
41187: PUSH
41188: LD_VAR 0 13
41192: PUSH
41193: LD_VAR 0 14
41197: PUSH
41198: LD_VAR 0 15
41202: PUSH
41203: LD_VAR 0 16
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: PUSH
41216: LD_VAR 0 4
41220: PUSH
41221: LD_INT 1
41223: PLUS
41224: ARRAY
41225: ST_TO_ADDR
41226: GO 41357
41228: LD_INT 2
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41292
41236: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41237: LD_ADDR_VAR 0 9
41241: PUSH
41242: LD_VAR 0 17
41246: PUSH
41247: LD_VAR 0 18
41251: PUSH
41252: LD_VAR 0 19
41256: PUSH
41257: LD_VAR 0 20
41261: PUSH
41262: LD_VAR 0 21
41266: PUSH
41267: LD_VAR 0 22
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: PUSH
41280: LD_VAR 0 4
41284: PUSH
41285: LD_INT 1
41287: PLUS
41288: ARRAY
41289: ST_TO_ADDR
41290: GO 41357
41292: LD_INT 3
41294: DOUBLE
41295: EQUAL
41296: IFTRUE 41300
41298: GO 41356
41300: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: LD_VAR 0 23
41310: PUSH
41311: LD_VAR 0 24
41315: PUSH
41316: LD_VAR 0 25
41320: PUSH
41321: LD_VAR 0 26
41325: PUSH
41326: LD_VAR 0 27
41330: PUSH
41331: LD_VAR 0 28
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: PUSH
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 1
41351: PLUS
41352: ARRAY
41353: ST_TO_ADDR
41354: GO 41357
41356: POP
41357: GO 41912
41359: LD_INT 2
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41373
41365: LD_INT 3
41367: DOUBLE
41368: EQUAL
41369: IFTRUE 41373
41371: GO 41429
41373: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41374: LD_ADDR_VAR 0 9
41378: PUSH
41379: LD_VAR 0 29
41383: PUSH
41384: LD_VAR 0 30
41388: PUSH
41389: LD_VAR 0 31
41393: PUSH
41394: LD_VAR 0 32
41398: PUSH
41399: LD_VAR 0 33
41403: PUSH
41404: LD_VAR 0 34
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: PUSH
41417: LD_VAR 0 4
41421: PUSH
41422: LD_INT 1
41424: PLUS
41425: ARRAY
41426: ST_TO_ADDR
41427: GO 41912
41429: LD_INT 16
41431: DOUBLE
41432: EQUAL
41433: IFTRUE 41491
41435: LD_INT 17
41437: DOUBLE
41438: EQUAL
41439: IFTRUE 41491
41441: LD_INT 18
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41491
41447: LD_INT 19
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41491
41453: LD_INT 22
41455: DOUBLE
41456: EQUAL
41457: IFTRUE 41491
41459: LD_INT 20
41461: DOUBLE
41462: EQUAL
41463: IFTRUE 41491
41465: LD_INT 21
41467: DOUBLE
41468: EQUAL
41469: IFTRUE 41491
41471: LD_INT 23
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41491
41477: LD_INT 24
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41491
41483: LD_INT 25
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41491
41489: GO 41547
41491: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41492: LD_ADDR_VAR 0 9
41496: PUSH
41497: LD_VAR 0 35
41501: PUSH
41502: LD_VAR 0 36
41506: PUSH
41507: LD_VAR 0 37
41511: PUSH
41512: LD_VAR 0 38
41516: PUSH
41517: LD_VAR 0 39
41521: PUSH
41522: LD_VAR 0 40
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: PUSH
41535: LD_VAR 0 4
41539: PUSH
41540: LD_INT 1
41542: PLUS
41543: ARRAY
41544: ST_TO_ADDR
41545: GO 41912
41547: LD_INT 6
41549: DOUBLE
41550: EQUAL
41551: IFTRUE 41603
41553: LD_INT 7
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41603
41559: LD_INT 8
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41603
41565: LD_INT 13
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41603
41571: LD_INT 12
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41603
41577: LD_INT 15
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41603
41583: LD_INT 11
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41603
41589: LD_INT 14
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41603
41595: LD_INT 10
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41659
41603: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41604: LD_ADDR_VAR 0 9
41608: PUSH
41609: LD_VAR 0 41
41613: PUSH
41614: LD_VAR 0 42
41618: PUSH
41619: LD_VAR 0 43
41623: PUSH
41624: LD_VAR 0 44
41628: PUSH
41629: LD_VAR 0 45
41633: PUSH
41634: LD_VAR 0 46
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: PUSH
41647: LD_VAR 0 4
41651: PUSH
41652: LD_INT 1
41654: PLUS
41655: ARRAY
41656: ST_TO_ADDR
41657: GO 41912
41659: LD_INT 36
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41667
41665: GO 41723
41667: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41668: LD_ADDR_VAR 0 9
41672: PUSH
41673: LD_VAR 0 47
41677: PUSH
41678: LD_VAR 0 48
41682: PUSH
41683: LD_VAR 0 49
41687: PUSH
41688: LD_VAR 0 50
41692: PUSH
41693: LD_VAR 0 51
41697: PUSH
41698: LD_VAR 0 52
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: PUSH
41711: LD_VAR 0 4
41715: PUSH
41716: LD_INT 1
41718: PLUS
41719: ARRAY
41720: ST_TO_ADDR
41721: GO 41912
41723: LD_INT 4
41725: DOUBLE
41726: EQUAL
41727: IFTRUE 41749
41729: LD_INT 5
41731: DOUBLE
41732: EQUAL
41733: IFTRUE 41749
41735: LD_INT 34
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41749
41741: LD_INT 37
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41805
41749: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41750: LD_ADDR_VAR 0 9
41754: PUSH
41755: LD_VAR 0 53
41759: PUSH
41760: LD_VAR 0 54
41764: PUSH
41765: LD_VAR 0 55
41769: PUSH
41770: LD_VAR 0 56
41774: PUSH
41775: LD_VAR 0 57
41779: PUSH
41780: LD_VAR 0 58
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: PUSH
41793: LD_VAR 0 4
41797: PUSH
41798: LD_INT 1
41800: PLUS
41801: ARRAY
41802: ST_TO_ADDR
41803: GO 41912
41805: LD_INT 31
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41855
41811: LD_INT 32
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41855
41817: LD_INT 33
41819: DOUBLE
41820: EQUAL
41821: IFTRUE 41855
41823: LD_INT 27
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41855
41829: LD_INT 26
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41855
41835: LD_INT 28
41837: DOUBLE
41838: EQUAL
41839: IFTRUE 41855
41841: LD_INT 29
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41855
41847: LD_INT 30
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41911
41855: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41856: LD_ADDR_VAR 0 9
41860: PUSH
41861: LD_VAR 0 59
41865: PUSH
41866: LD_VAR 0 60
41870: PUSH
41871: LD_VAR 0 61
41875: PUSH
41876: LD_VAR 0 62
41880: PUSH
41881: LD_VAR 0 63
41885: PUSH
41886: LD_VAR 0 64
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: PUSH
41899: LD_VAR 0 4
41903: PUSH
41904: LD_INT 1
41906: PLUS
41907: ARRAY
41908: ST_TO_ADDR
41909: GO 41912
41911: POP
// temp_list2 = [ ] ;
41912: LD_ADDR_VAR 0 10
41916: PUSH
41917: EMPTY
41918: ST_TO_ADDR
// for i in temp_list do
41919: LD_ADDR_VAR 0 8
41923: PUSH
41924: LD_VAR 0 9
41928: PUSH
41929: FOR_IN
41930: IFFALSE 41982
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41932: LD_ADDR_VAR 0 10
41936: PUSH
41937: LD_VAR 0 10
41941: PUSH
41942: LD_VAR 0 8
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PUSH
41951: LD_VAR 0 2
41955: PLUS
41956: PUSH
41957: LD_VAR 0 8
41961: PUSH
41962: LD_INT 2
41964: ARRAY
41965: PUSH
41966: LD_VAR 0 3
41970: PLUS
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: ADD
41979: ST_TO_ADDR
41980: GO 41929
41982: POP
41983: POP
// result = temp_list2 ;
41984: LD_ADDR_VAR 0 7
41988: PUSH
41989: LD_VAR 0 10
41993: ST_TO_ADDR
// end ;
41994: LD_VAR 0 7
41998: RET
// export function EnemyInRange ( unit , dist ) ; begin
41999: LD_INT 0
42001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42002: LD_ADDR_VAR 0 3
42006: PUSH
42007: LD_VAR 0 1
42011: PPUSH
42012: CALL_OW 255
42016: PPUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 250
42026: PPUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: CALL_OW 251
42036: PPUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL 15372 0 4
42046: PUSH
42047: LD_INT 4
42049: ARRAY
42050: ST_TO_ADDR
// end ;
42051: LD_VAR 0 3
42055: RET
// export function PlayerSeeMe ( unit ) ; begin
42056: LD_INT 0
42058: PPUSH
// result := See ( your_side , unit ) ;
42059: LD_ADDR_VAR 0 2
42063: PUSH
42064: LD_OWVAR 2
42068: PPUSH
42069: LD_VAR 0 1
42073: PPUSH
42074: CALL_OW 292
42078: ST_TO_ADDR
// end ;
42079: LD_VAR 0 2
42083: RET
// export function ReverseDir ( unit ) ; begin
42084: LD_INT 0
42086: PPUSH
// if not unit then
42087: LD_VAR 0 1
42091: NOT
42092: IFFALSE 42096
// exit ;
42094: GO 42119
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42096: LD_ADDR_VAR 0 2
42100: PUSH
42101: LD_VAR 0 1
42105: PPUSH
42106: CALL_OW 254
42110: PUSH
42111: LD_INT 3
42113: PLUS
42114: PUSH
42115: LD_INT 6
42117: MOD
42118: ST_TO_ADDR
// end ;
42119: LD_VAR 0 2
42123: RET
// export function ReverseArray ( array ) ; var i ; begin
42124: LD_INT 0
42126: PPUSH
42127: PPUSH
// if not array then
42128: LD_VAR 0 1
42132: NOT
42133: IFFALSE 42137
// exit ;
42135: GO 42192
// result := [ ] ;
42137: LD_ADDR_VAR 0 2
42141: PUSH
42142: EMPTY
42143: ST_TO_ADDR
// for i := array downto 1 do
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: DOUBLE
42150: LD_VAR 0 1
42154: INC
42155: ST_TO_ADDR
42156: LD_INT 1
42158: PUSH
42159: FOR_DOWNTO
42160: IFFALSE 42190
// result := Join ( result , array [ i ] ) ;
42162: LD_ADDR_VAR 0 2
42166: PUSH
42167: LD_VAR 0 2
42171: PPUSH
42172: LD_VAR 0 1
42176: PUSH
42177: LD_VAR 0 3
42181: ARRAY
42182: PPUSH
42183: CALL 46857 0 2
42187: ST_TO_ADDR
42188: GO 42159
42190: POP
42191: POP
// end ;
42192: LD_VAR 0 2
42196: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42197: LD_INT 0
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
// if not unit or not hexes then
42205: LD_VAR 0 1
42209: NOT
42210: PUSH
42211: LD_VAR 0 2
42215: NOT
42216: OR
42217: IFFALSE 42221
// exit ;
42219: GO 42344
// dist := 9999 ;
42221: LD_ADDR_VAR 0 5
42225: PUSH
42226: LD_INT 9999
42228: ST_TO_ADDR
// for i = 1 to hexes do
42229: LD_ADDR_VAR 0 4
42233: PUSH
42234: DOUBLE
42235: LD_INT 1
42237: DEC
42238: ST_TO_ADDR
42239: LD_VAR 0 2
42243: PUSH
42244: FOR_TO
42245: IFFALSE 42332
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42247: LD_ADDR_VAR 0 6
42251: PUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: LD_VAR 0 2
42261: PUSH
42262: LD_VAR 0 4
42266: ARRAY
42267: PUSH
42268: LD_INT 1
42270: ARRAY
42271: PPUSH
42272: LD_VAR 0 2
42276: PUSH
42277: LD_VAR 0 4
42281: ARRAY
42282: PUSH
42283: LD_INT 2
42285: ARRAY
42286: PPUSH
42287: CALL_OW 297
42291: ST_TO_ADDR
// if tdist < dist then
42292: LD_VAR 0 6
42296: PUSH
42297: LD_VAR 0 5
42301: LESS
42302: IFFALSE 42330
// begin hex := hexes [ i ] ;
42304: LD_ADDR_VAR 0 8
42308: PUSH
42309: LD_VAR 0 2
42313: PUSH
42314: LD_VAR 0 4
42318: ARRAY
42319: ST_TO_ADDR
// dist := tdist ;
42320: LD_ADDR_VAR 0 5
42324: PUSH
42325: LD_VAR 0 6
42329: ST_TO_ADDR
// end ; end ;
42330: GO 42244
42332: POP
42333: POP
// result := hex ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_VAR 0 8
42343: ST_TO_ADDR
// end ;
42344: LD_VAR 0 3
42348: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42349: LD_INT 0
42351: PPUSH
42352: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42353: LD_VAR 0 1
42357: NOT
42358: PUSH
42359: LD_VAR 0 1
42363: PUSH
42364: LD_INT 21
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 23
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PPUSH
42388: CALL_OW 69
42392: IN
42393: NOT
42394: OR
42395: IFFALSE 42399
// exit ;
42397: GO 42446
// for i = 1 to 3 do
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: DOUBLE
42405: LD_INT 1
42407: DEC
42408: ST_TO_ADDR
42409: LD_INT 3
42411: PUSH
42412: FOR_TO
42413: IFFALSE 42444
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42415: LD_VAR 0 1
42419: PPUSH
42420: CALL_OW 250
42424: PPUSH
42425: LD_VAR 0 1
42429: PPUSH
42430: CALL_OW 251
42434: PPUSH
42435: LD_INT 1
42437: PPUSH
42438: CALL_OW 453
42442: GO 42412
42444: POP
42445: POP
// end ;
42446: LD_VAR 0 2
42450: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42451: LD_INT 0
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
// if not unit or not enemy_unit then
42459: LD_VAR 0 1
42463: NOT
42464: PUSH
42465: LD_VAR 0 2
42469: NOT
42470: OR
42471: IFFALSE 42475
// exit ;
42473: GO 42942
// if GetLives ( i ) < 250 then
42475: LD_VAR 0 4
42479: PPUSH
42480: CALL_OW 256
42484: PUSH
42485: LD_INT 250
42487: LESS
42488: IFFALSE 42501
// begin ComAutodestruct ( i ) ;
42490: LD_VAR 0 4
42494: PPUSH
42495: CALL 42349 0 1
// exit ;
42499: GO 42942
// end ; x := GetX ( enemy_unit ) ;
42501: LD_ADDR_VAR 0 7
42505: PUSH
42506: LD_VAR 0 2
42510: PPUSH
42511: CALL_OW 250
42515: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42516: LD_ADDR_VAR 0 8
42520: PUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: CALL_OW 251
42530: ST_TO_ADDR
// if not x or not y then
42531: LD_VAR 0 7
42535: NOT
42536: PUSH
42537: LD_VAR 0 8
42541: NOT
42542: OR
42543: IFFALSE 42547
// exit ;
42545: GO 42942
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42547: LD_ADDR_VAR 0 6
42551: PUSH
42552: LD_VAR 0 7
42556: PPUSH
42557: LD_INT 0
42559: PPUSH
42560: LD_INT 4
42562: PPUSH
42563: CALL_OW 272
42567: PUSH
42568: LD_VAR 0 8
42572: PPUSH
42573: LD_INT 0
42575: PPUSH
42576: LD_INT 4
42578: PPUSH
42579: CALL_OW 273
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_VAR 0 7
42592: PPUSH
42593: LD_INT 1
42595: PPUSH
42596: LD_INT 4
42598: PPUSH
42599: CALL_OW 272
42603: PUSH
42604: LD_VAR 0 8
42608: PPUSH
42609: LD_INT 1
42611: PPUSH
42612: LD_INT 4
42614: PPUSH
42615: CALL_OW 273
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_VAR 0 7
42628: PPUSH
42629: LD_INT 2
42631: PPUSH
42632: LD_INT 4
42634: PPUSH
42635: CALL_OW 272
42639: PUSH
42640: LD_VAR 0 8
42644: PPUSH
42645: LD_INT 2
42647: PPUSH
42648: LD_INT 4
42650: PPUSH
42651: CALL_OW 273
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_VAR 0 7
42664: PPUSH
42665: LD_INT 3
42667: PPUSH
42668: LD_INT 4
42670: PPUSH
42671: CALL_OW 272
42675: PUSH
42676: LD_VAR 0 8
42680: PPUSH
42681: LD_INT 3
42683: PPUSH
42684: LD_INT 4
42686: PPUSH
42687: CALL_OW 273
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_VAR 0 7
42700: PPUSH
42701: LD_INT 4
42703: PPUSH
42704: LD_INT 4
42706: PPUSH
42707: CALL_OW 272
42711: PUSH
42712: LD_VAR 0 8
42716: PPUSH
42717: LD_INT 4
42719: PPUSH
42720: LD_INT 4
42722: PPUSH
42723: CALL_OW 273
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_VAR 0 7
42736: PPUSH
42737: LD_INT 5
42739: PPUSH
42740: LD_INT 4
42742: PPUSH
42743: CALL_OW 272
42747: PUSH
42748: LD_VAR 0 8
42752: PPUSH
42753: LD_INT 5
42755: PPUSH
42756: LD_INT 4
42758: PPUSH
42759: CALL_OW 273
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// for i = tmp downto 1 do
42776: LD_ADDR_VAR 0 4
42780: PUSH
42781: DOUBLE
42782: LD_VAR 0 6
42786: INC
42787: ST_TO_ADDR
42788: LD_INT 1
42790: PUSH
42791: FOR_DOWNTO
42792: IFFALSE 42893
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42794: LD_VAR 0 6
42798: PUSH
42799: LD_VAR 0 4
42803: ARRAY
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: LD_VAR 0 6
42813: PUSH
42814: LD_VAR 0 4
42818: ARRAY
42819: PUSH
42820: LD_INT 2
42822: ARRAY
42823: PPUSH
42824: CALL_OW 488
42828: NOT
42829: PUSH
42830: LD_VAR 0 6
42834: PUSH
42835: LD_VAR 0 4
42839: ARRAY
42840: PUSH
42841: LD_INT 1
42843: ARRAY
42844: PPUSH
42845: LD_VAR 0 6
42849: PUSH
42850: LD_VAR 0 4
42854: ARRAY
42855: PUSH
42856: LD_INT 2
42858: ARRAY
42859: PPUSH
42860: CALL_OW 428
42864: PUSH
42865: LD_INT 0
42867: NONEQUAL
42868: OR
42869: IFFALSE 42891
// tmp := Delete ( tmp , i ) ;
42871: LD_ADDR_VAR 0 6
42875: PUSH
42876: LD_VAR 0 6
42880: PPUSH
42881: LD_VAR 0 4
42885: PPUSH
42886: CALL_OW 3
42890: ST_TO_ADDR
42891: GO 42791
42893: POP
42894: POP
// j := GetClosestHex ( unit , tmp ) ;
42895: LD_ADDR_VAR 0 5
42899: PUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: LD_VAR 0 6
42909: PPUSH
42910: CALL 42197 0 2
42914: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42915: LD_VAR 0 1
42919: PPUSH
42920: LD_VAR 0 5
42924: PUSH
42925: LD_INT 1
42927: ARRAY
42928: PPUSH
42929: LD_VAR 0 5
42933: PUSH
42934: LD_INT 2
42936: ARRAY
42937: PPUSH
42938: CALL_OW 111
// end ;
42942: LD_VAR 0 3
42946: RET
// export function PrepareApemanSoldier ( ) ; begin
42947: LD_INT 0
42949: PPUSH
// uc_nation := 0 ;
42950: LD_ADDR_OWVAR 21
42954: PUSH
42955: LD_INT 0
42957: ST_TO_ADDR
// hc_sex := sex_male ;
42958: LD_ADDR_OWVAR 27
42962: PUSH
42963: LD_INT 1
42965: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42966: LD_ADDR_OWVAR 28
42970: PUSH
42971: LD_INT 15
42973: ST_TO_ADDR
// hc_gallery :=  ;
42974: LD_ADDR_OWVAR 33
42978: PUSH
42979: LD_STRING 
42981: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42982: LD_ADDR_OWVAR 31
42986: PUSH
42987: LD_INT 0
42989: PPUSH
42990: LD_INT 3
42992: PPUSH
42993: CALL_OW 12
42997: PUSH
42998: LD_INT 0
43000: PPUSH
43001: LD_INT 3
43003: PPUSH
43004: CALL_OW 12
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
// end ;
43021: LD_VAR 0 1
43025: RET
// export function PrepareApemanEngineer ( ) ; begin
43026: LD_INT 0
43028: PPUSH
// uc_nation := 0 ;
43029: LD_ADDR_OWVAR 21
43033: PUSH
43034: LD_INT 0
43036: ST_TO_ADDR
// hc_sex := sex_male ;
43037: LD_ADDR_OWVAR 27
43041: PUSH
43042: LD_INT 1
43044: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43045: LD_ADDR_OWVAR 28
43049: PUSH
43050: LD_INT 16
43052: ST_TO_ADDR
// hc_gallery :=  ;
43053: LD_ADDR_OWVAR 33
43057: PUSH
43058: LD_STRING 
43060: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43061: LD_ADDR_OWVAR 31
43065: PUSH
43066: LD_INT 0
43068: PPUSH
43069: LD_INT 3
43071: PPUSH
43072: CALL_OW 12
43076: PUSH
43077: LD_INT 0
43079: PPUSH
43080: LD_INT 3
43082: PPUSH
43083: CALL_OW 12
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
// end ;
43100: LD_VAR 0 1
43104: RET
// export function PrepareApeman ( agressivity ) ; begin
43105: LD_INT 0
43107: PPUSH
// uc_side := 0 ;
43108: LD_ADDR_OWVAR 20
43112: PUSH
43113: LD_INT 0
43115: ST_TO_ADDR
// uc_nation := 0 ;
43116: LD_ADDR_OWVAR 21
43120: PUSH
43121: LD_INT 0
43123: ST_TO_ADDR
// hc_sex := sex_male ;
43124: LD_ADDR_OWVAR 27
43128: PUSH
43129: LD_INT 1
43131: ST_TO_ADDR
// hc_class := class_apeman ;
43132: LD_ADDR_OWVAR 28
43136: PUSH
43137: LD_INT 12
43139: ST_TO_ADDR
// hc_gallery :=  ;
43140: LD_ADDR_OWVAR 33
43144: PUSH
43145: LD_STRING 
43147: ST_TO_ADDR
// if agressivity = 0 then
43148: LD_VAR 0 1
43152: PUSH
43153: LD_INT 0
43155: EQUAL
43156: IFFALSE 43168
// hc_agressivity := 0 else
43158: LD_ADDR_OWVAR 35
43162: PUSH
43163: LD_INT 0
43165: ST_TO_ADDR
43166: GO 43189
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43168: LD_ADDR_OWVAR 35
43172: PUSH
43173: LD_VAR 0 1
43177: NEG
43178: PPUSH
43179: LD_VAR 0 1
43183: PPUSH
43184: CALL_OW 12
43188: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43189: LD_ADDR_OWVAR 31
43193: PUSH
43194: LD_INT 0
43196: PPUSH
43197: LD_INT 3
43199: PPUSH
43200: CALL_OW 12
43204: PUSH
43205: LD_INT 0
43207: PPUSH
43208: LD_INT 3
43210: PPUSH
43211: CALL_OW 12
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: ST_TO_ADDR
// end ;
43228: LD_VAR 0 2
43232: RET
// export function PrepareTiger ( agressivity ) ; begin
43233: LD_INT 0
43235: PPUSH
// uc_side := 0 ;
43236: LD_ADDR_OWVAR 20
43240: PUSH
43241: LD_INT 0
43243: ST_TO_ADDR
// uc_nation := 0 ;
43244: LD_ADDR_OWVAR 21
43248: PUSH
43249: LD_INT 0
43251: ST_TO_ADDR
// hc_class := class_tiger ;
43252: LD_ADDR_OWVAR 28
43256: PUSH
43257: LD_INT 14
43259: ST_TO_ADDR
// hc_gallery :=  ;
43260: LD_ADDR_OWVAR 33
43264: PUSH
43265: LD_STRING 
43267: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43268: LD_ADDR_OWVAR 35
43272: PUSH
43273: LD_VAR 0 1
43277: NEG
43278: PPUSH
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 12
43288: ST_TO_ADDR
// end ;
43289: LD_VAR 0 2
43293: RET
// export function PrepareEnchidna ( ) ; begin
43294: LD_INT 0
43296: PPUSH
// uc_side := 0 ;
43297: LD_ADDR_OWVAR 20
43301: PUSH
43302: LD_INT 0
43304: ST_TO_ADDR
// uc_nation := 0 ;
43305: LD_ADDR_OWVAR 21
43309: PUSH
43310: LD_INT 0
43312: ST_TO_ADDR
// hc_class := class_baggie ;
43313: LD_ADDR_OWVAR 28
43317: PUSH
43318: LD_INT 13
43320: ST_TO_ADDR
// hc_gallery :=  ;
43321: LD_ADDR_OWVAR 33
43325: PUSH
43326: LD_STRING 
43328: ST_TO_ADDR
// end ;
43329: LD_VAR 0 1
43333: RET
// export function PrepareFrog ( ) ; begin
43334: LD_INT 0
43336: PPUSH
// uc_side := 0 ;
43337: LD_ADDR_OWVAR 20
43341: PUSH
43342: LD_INT 0
43344: ST_TO_ADDR
// uc_nation := 0 ;
43345: LD_ADDR_OWVAR 21
43349: PUSH
43350: LD_INT 0
43352: ST_TO_ADDR
// hc_class := class_frog ;
43353: LD_ADDR_OWVAR 28
43357: PUSH
43358: LD_INT 19
43360: ST_TO_ADDR
// hc_gallery :=  ;
43361: LD_ADDR_OWVAR 33
43365: PUSH
43366: LD_STRING 
43368: ST_TO_ADDR
// end ;
43369: LD_VAR 0 1
43373: RET
// export function PrepareFish ( ) ; begin
43374: LD_INT 0
43376: PPUSH
// uc_side := 0 ;
43377: LD_ADDR_OWVAR 20
43381: PUSH
43382: LD_INT 0
43384: ST_TO_ADDR
// uc_nation := 0 ;
43385: LD_ADDR_OWVAR 21
43389: PUSH
43390: LD_INT 0
43392: ST_TO_ADDR
// hc_class := class_fish ;
43393: LD_ADDR_OWVAR 28
43397: PUSH
43398: LD_INT 20
43400: ST_TO_ADDR
// hc_gallery :=  ;
43401: LD_ADDR_OWVAR 33
43405: PUSH
43406: LD_STRING 
43408: ST_TO_ADDR
// end ;
43409: LD_VAR 0 1
43413: RET
// export function PrepareBird ( ) ; begin
43414: LD_INT 0
43416: PPUSH
// uc_side := 0 ;
43417: LD_ADDR_OWVAR 20
43421: PUSH
43422: LD_INT 0
43424: ST_TO_ADDR
// uc_nation := 0 ;
43425: LD_ADDR_OWVAR 21
43429: PUSH
43430: LD_INT 0
43432: ST_TO_ADDR
// hc_class := class_phororhacos ;
43433: LD_ADDR_OWVAR 28
43437: PUSH
43438: LD_INT 18
43440: ST_TO_ADDR
// hc_gallery :=  ;
43441: LD_ADDR_OWVAR 33
43445: PUSH
43446: LD_STRING 
43448: ST_TO_ADDR
// end ;
43449: LD_VAR 0 1
43453: RET
// export function PrepareHorse ( ) ; begin
43454: LD_INT 0
43456: PPUSH
// uc_side := 0 ;
43457: LD_ADDR_OWVAR 20
43461: PUSH
43462: LD_INT 0
43464: ST_TO_ADDR
// uc_nation := 0 ;
43465: LD_ADDR_OWVAR 21
43469: PUSH
43470: LD_INT 0
43472: ST_TO_ADDR
// hc_class := class_horse ;
43473: LD_ADDR_OWVAR 28
43477: PUSH
43478: LD_INT 21
43480: ST_TO_ADDR
// hc_gallery :=  ;
43481: LD_ADDR_OWVAR 33
43485: PUSH
43486: LD_STRING 
43488: ST_TO_ADDR
// end ;
43489: LD_VAR 0 1
43493: RET
// export function PrepareMastodont ( ) ; begin
43494: LD_INT 0
43496: PPUSH
// uc_side := 0 ;
43497: LD_ADDR_OWVAR 20
43501: PUSH
43502: LD_INT 0
43504: ST_TO_ADDR
// uc_nation := 0 ;
43505: LD_ADDR_OWVAR 21
43509: PUSH
43510: LD_INT 0
43512: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43513: LD_ADDR_OWVAR 37
43517: PUSH
43518: LD_INT 31
43520: ST_TO_ADDR
// vc_control := control_rider ;
43521: LD_ADDR_OWVAR 38
43525: PUSH
43526: LD_INT 4
43528: ST_TO_ADDR
// end ;
43529: LD_VAR 0 1
43533: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43534: LD_INT 0
43536: PPUSH
43537: PPUSH
43538: PPUSH
// uc_side = 0 ;
43539: LD_ADDR_OWVAR 20
43543: PUSH
43544: LD_INT 0
43546: ST_TO_ADDR
// uc_nation = 0 ;
43547: LD_ADDR_OWVAR 21
43551: PUSH
43552: LD_INT 0
43554: ST_TO_ADDR
// InitHc_All ( ) ;
43555: CALL_OW 584
// InitVc ;
43559: CALL_OW 20
// if mastodonts then
43563: LD_VAR 0 6
43567: IFFALSE 43634
// for i = 1 to mastodonts do
43569: LD_ADDR_VAR 0 11
43573: PUSH
43574: DOUBLE
43575: LD_INT 1
43577: DEC
43578: ST_TO_ADDR
43579: LD_VAR 0 6
43583: PUSH
43584: FOR_TO
43585: IFFALSE 43632
// begin vc_chassis := 31 ;
43587: LD_ADDR_OWVAR 37
43591: PUSH
43592: LD_INT 31
43594: ST_TO_ADDR
// vc_control := control_rider ;
43595: LD_ADDR_OWVAR 38
43599: PUSH
43600: LD_INT 4
43602: ST_TO_ADDR
// animal := CreateVehicle ;
43603: LD_ADDR_VAR 0 12
43607: PUSH
43608: CALL_OW 45
43612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43613: LD_VAR 0 12
43617: PPUSH
43618: LD_VAR 0 8
43622: PPUSH
43623: LD_INT 0
43625: PPUSH
43626: CALL 45762 0 3
// end ;
43630: GO 43584
43632: POP
43633: POP
// if horses then
43634: LD_VAR 0 5
43638: IFFALSE 43705
// for i = 1 to horses do
43640: LD_ADDR_VAR 0 11
43644: PUSH
43645: DOUBLE
43646: LD_INT 1
43648: DEC
43649: ST_TO_ADDR
43650: LD_VAR 0 5
43654: PUSH
43655: FOR_TO
43656: IFFALSE 43703
// begin hc_class := 21 ;
43658: LD_ADDR_OWVAR 28
43662: PUSH
43663: LD_INT 21
43665: ST_TO_ADDR
// hc_gallery :=  ;
43666: LD_ADDR_OWVAR 33
43670: PUSH
43671: LD_STRING 
43673: ST_TO_ADDR
// animal := CreateHuman ;
43674: LD_ADDR_VAR 0 12
43678: PUSH
43679: CALL_OW 44
43683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43684: LD_VAR 0 12
43688: PPUSH
43689: LD_VAR 0 8
43693: PPUSH
43694: LD_INT 0
43696: PPUSH
43697: CALL 45762 0 3
// end ;
43701: GO 43655
43703: POP
43704: POP
// if birds then
43705: LD_VAR 0 1
43709: IFFALSE 43776
// for i = 1 to birds do
43711: LD_ADDR_VAR 0 11
43715: PUSH
43716: DOUBLE
43717: LD_INT 1
43719: DEC
43720: ST_TO_ADDR
43721: LD_VAR 0 1
43725: PUSH
43726: FOR_TO
43727: IFFALSE 43774
// begin hc_class := 18 ;
43729: LD_ADDR_OWVAR 28
43733: PUSH
43734: LD_INT 18
43736: ST_TO_ADDR
// hc_gallery =  ;
43737: LD_ADDR_OWVAR 33
43741: PUSH
43742: LD_STRING 
43744: ST_TO_ADDR
// animal := CreateHuman ;
43745: LD_ADDR_VAR 0 12
43749: PUSH
43750: CALL_OW 44
43754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43755: LD_VAR 0 12
43759: PPUSH
43760: LD_VAR 0 8
43764: PPUSH
43765: LD_INT 0
43767: PPUSH
43768: CALL 45762 0 3
// end ;
43772: GO 43726
43774: POP
43775: POP
// if tigers then
43776: LD_VAR 0 2
43780: IFFALSE 43864
// for i = 1 to tigers do
43782: LD_ADDR_VAR 0 11
43786: PUSH
43787: DOUBLE
43788: LD_INT 1
43790: DEC
43791: ST_TO_ADDR
43792: LD_VAR 0 2
43796: PUSH
43797: FOR_TO
43798: IFFALSE 43862
// begin hc_class = class_tiger ;
43800: LD_ADDR_OWVAR 28
43804: PUSH
43805: LD_INT 14
43807: ST_TO_ADDR
// hc_gallery =  ;
43808: LD_ADDR_OWVAR 33
43812: PUSH
43813: LD_STRING 
43815: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43816: LD_ADDR_OWVAR 35
43820: PUSH
43821: LD_INT 7
43823: NEG
43824: PPUSH
43825: LD_INT 7
43827: PPUSH
43828: CALL_OW 12
43832: ST_TO_ADDR
// animal := CreateHuman ;
43833: LD_ADDR_VAR 0 12
43837: PUSH
43838: CALL_OW 44
43842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43843: LD_VAR 0 12
43847: PPUSH
43848: LD_VAR 0 8
43852: PPUSH
43853: LD_INT 0
43855: PPUSH
43856: CALL 45762 0 3
// end ;
43860: GO 43797
43862: POP
43863: POP
// if apemans then
43864: LD_VAR 0 3
43868: IFFALSE 43991
// for i = 1 to apemans do
43870: LD_ADDR_VAR 0 11
43874: PUSH
43875: DOUBLE
43876: LD_INT 1
43878: DEC
43879: ST_TO_ADDR
43880: LD_VAR 0 3
43884: PUSH
43885: FOR_TO
43886: IFFALSE 43989
// begin hc_class = class_apeman ;
43888: LD_ADDR_OWVAR 28
43892: PUSH
43893: LD_INT 12
43895: ST_TO_ADDR
// hc_gallery =  ;
43896: LD_ADDR_OWVAR 33
43900: PUSH
43901: LD_STRING 
43903: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43904: LD_ADDR_OWVAR 35
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PPUSH
43913: LD_INT 2
43915: PPUSH
43916: CALL_OW 12
43920: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43921: LD_ADDR_OWVAR 31
43925: PUSH
43926: LD_INT 1
43928: PPUSH
43929: LD_INT 3
43931: PPUSH
43932: CALL_OW 12
43936: PUSH
43937: LD_INT 1
43939: PPUSH
43940: LD_INT 3
43942: PPUSH
43943: CALL_OW 12
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
// animal := CreateHuman ;
43960: LD_ADDR_VAR 0 12
43964: PUSH
43965: CALL_OW 44
43969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43970: LD_VAR 0 12
43974: PPUSH
43975: LD_VAR 0 8
43979: PPUSH
43980: LD_INT 0
43982: PPUSH
43983: CALL 45762 0 3
// end ;
43987: GO 43885
43989: POP
43990: POP
// if enchidnas then
43991: LD_VAR 0 4
43995: IFFALSE 44062
// for i = 1 to enchidnas do
43997: LD_ADDR_VAR 0 11
44001: PUSH
44002: DOUBLE
44003: LD_INT 1
44005: DEC
44006: ST_TO_ADDR
44007: LD_VAR 0 4
44011: PUSH
44012: FOR_TO
44013: IFFALSE 44060
// begin hc_class = 13 ;
44015: LD_ADDR_OWVAR 28
44019: PUSH
44020: LD_INT 13
44022: ST_TO_ADDR
// hc_gallery =  ;
44023: LD_ADDR_OWVAR 33
44027: PUSH
44028: LD_STRING 
44030: ST_TO_ADDR
// animal := CreateHuman ;
44031: LD_ADDR_VAR 0 12
44035: PUSH
44036: CALL_OW 44
44040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44041: LD_VAR 0 12
44045: PPUSH
44046: LD_VAR 0 8
44050: PPUSH
44051: LD_INT 0
44053: PPUSH
44054: CALL 45762 0 3
// end ;
44058: GO 44012
44060: POP
44061: POP
// if fishes then
44062: LD_VAR 0 7
44066: IFFALSE 44133
// for i = 1 to fishes do
44068: LD_ADDR_VAR 0 11
44072: PUSH
44073: DOUBLE
44074: LD_INT 1
44076: DEC
44077: ST_TO_ADDR
44078: LD_VAR 0 7
44082: PUSH
44083: FOR_TO
44084: IFFALSE 44131
// begin hc_class = 20 ;
44086: LD_ADDR_OWVAR 28
44090: PUSH
44091: LD_INT 20
44093: ST_TO_ADDR
// hc_gallery =  ;
44094: LD_ADDR_OWVAR 33
44098: PUSH
44099: LD_STRING 
44101: ST_TO_ADDR
// animal := CreateHuman ;
44102: LD_ADDR_VAR 0 12
44106: PUSH
44107: CALL_OW 44
44111: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44112: LD_VAR 0 12
44116: PPUSH
44117: LD_VAR 0 9
44121: PPUSH
44122: LD_INT 0
44124: PPUSH
44125: CALL 45762 0 3
// end ;
44129: GO 44083
44131: POP
44132: POP
// end ;
44133: LD_VAR 0 10
44137: RET
// export function WantHeal ( sci , unit ) ; begin
44138: LD_INT 0
44140: PPUSH
// if GetTaskList ( sci ) > 0 then
44141: LD_VAR 0 1
44145: PPUSH
44146: CALL_OW 437
44150: PUSH
44151: LD_INT 0
44153: GREATER
44154: IFFALSE 44224
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44156: LD_VAR 0 1
44160: PPUSH
44161: CALL_OW 437
44165: PUSH
44166: LD_INT 1
44168: ARRAY
44169: PUSH
44170: LD_INT 1
44172: ARRAY
44173: PUSH
44174: LD_STRING l
44176: EQUAL
44177: PUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 437
44187: PUSH
44188: LD_INT 1
44190: ARRAY
44191: PUSH
44192: LD_INT 4
44194: ARRAY
44195: PUSH
44196: LD_VAR 0 2
44200: EQUAL
44201: AND
44202: IFFALSE 44214
// result := true else
44204: LD_ADDR_VAR 0 3
44208: PUSH
44209: LD_INT 1
44211: ST_TO_ADDR
44212: GO 44222
// result := false ;
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_INT 0
44221: ST_TO_ADDR
// end else
44222: GO 44232
// result := false ;
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 0
44231: ST_TO_ADDR
// end ;
44232: LD_VAR 0 3
44236: RET
// export function HealTarget ( sci ) ; begin
44237: LD_INT 0
44239: PPUSH
// if not sci then
44240: LD_VAR 0 1
44244: NOT
44245: IFFALSE 44249
// exit ;
44247: GO 44314
// result := 0 ;
44249: LD_ADDR_VAR 0 2
44253: PUSH
44254: LD_INT 0
44256: ST_TO_ADDR
// if GetTaskList ( sci ) then
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 437
44266: IFFALSE 44314
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44268: LD_VAR 0 1
44272: PPUSH
44273: CALL_OW 437
44277: PUSH
44278: LD_INT 1
44280: ARRAY
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: PUSH
44286: LD_STRING l
44288: EQUAL
44289: IFFALSE 44314
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44291: LD_ADDR_VAR 0 2
44295: PUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 437
44305: PUSH
44306: LD_INT 1
44308: ARRAY
44309: PUSH
44310: LD_INT 4
44312: ARRAY
44313: ST_TO_ADDR
// end ;
44314: LD_VAR 0 2
44318: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44319: LD_INT 0
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
// if not base_units then
44325: LD_VAR 0 1
44329: NOT
44330: IFFALSE 44334
// exit ;
44332: GO 44421
// result := false ;
44334: LD_ADDR_VAR 0 2
44338: PUSH
44339: LD_INT 0
44341: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44342: LD_ADDR_VAR 0 5
44346: PUSH
44347: LD_VAR 0 1
44351: PPUSH
44352: LD_INT 21
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PPUSH
44362: CALL_OW 72
44366: ST_TO_ADDR
// if not tmp then
44367: LD_VAR 0 5
44371: NOT
44372: IFFALSE 44376
// exit ;
44374: GO 44421
// for i in tmp do
44376: LD_ADDR_VAR 0 3
44380: PUSH
44381: LD_VAR 0 5
44385: PUSH
44386: FOR_IN
44387: IFFALSE 44419
// begin result := EnemyInRange ( i , 22 ) ;
44389: LD_ADDR_VAR 0 2
44393: PUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: LD_INT 22
44401: PPUSH
44402: CALL 41999 0 2
44406: ST_TO_ADDR
// if result then
44407: LD_VAR 0 2
44411: IFFALSE 44417
// exit ;
44413: POP
44414: POP
44415: GO 44421
// end ;
44417: GO 44386
44419: POP
44420: POP
// end ;
44421: LD_VAR 0 2
44425: RET
// export function FilterByTag ( units , tag ) ; begin
44426: LD_INT 0
44428: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44429: LD_ADDR_VAR 0 3
44433: PUSH
44434: LD_VAR 0 1
44438: PPUSH
44439: LD_INT 120
44441: PUSH
44442: LD_VAR 0 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PPUSH
44451: CALL_OW 72
44455: ST_TO_ADDR
// end ;
44456: LD_VAR 0 3
44460: RET
// export function IsDriver ( un ) ; begin
44461: LD_INT 0
44463: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44464: LD_ADDR_VAR 0 2
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_INT 55
44476: PUSH
44477: EMPTY
44478: LIST
44479: PPUSH
44480: CALL_OW 69
44484: IN
44485: ST_TO_ADDR
// end ;
44486: LD_VAR 0 2
44490: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44491: LD_INT 0
44493: PPUSH
44494: PPUSH
// list := [ ] ;
44495: LD_ADDR_VAR 0 5
44499: PUSH
44500: EMPTY
44501: ST_TO_ADDR
// case d of 0 :
44502: LD_VAR 0 3
44506: PUSH
44507: LD_INT 0
44509: DOUBLE
44510: EQUAL
44511: IFTRUE 44515
44513: GO 44648
44515: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_VAR 0 1
44525: PUSH
44526: LD_INT 4
44528: MINUS
44529: PUSH
44530: LD_VAR 0 2
44534: PUSH
44535: LD_INT 4
44537: MINUS
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: PUSH
44547: LD_VAR 0 1
44551: PUSH
44552: LD_INT 3
44554: MINUS
44555: PUSH
44556: LD_VAR 0 2
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: PUSH
44569: LD_VAR 0 1
44573: PUSH
44574: LD_INT 4
44576: PLUS
44577: PUSH
44578: LD_VAR 0 2
44582: PUSH
44583: LD_INT 4
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: PUSH
44591: LD_VAR 0 1
44595: PUSH
44596: LD_INT 3
44598: PLUS
44599: PUSH
44600: LD_VAR 0 2
44604: PUSH
44605: LD_INT 3
44607: PLUS
44608: PUSH
44609: LD_INT 5
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: PUSH
44617: LD_VAR 0 1
44621: PUSH
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 4
44629: PLUS
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// end ; 1 :
44646: GO 45346
44648: LD_INT 1
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44656
44654: GO 44789
44656: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44657: LD_ADDR_VAR 0 5
44661: PUSH
44662: LD_VAR 0 1
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 4
44674: MINUS
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: PUSH
44684: LD_VAR 0 1
44688: PUSH
44689: LD_INT 3
44691: MINUS
44692: PUSH
44693: LD_VAR 0 2
44697: PUSH
44698: LD_INT 3
44700: MINUS
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: PUSH
44710: LD_VAR 0 1
44714: PUSH
44715: LD_INT 4
44717: MINUS
44718: PUSH
44719: LD_VAR 0 2
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: PUSH
44732: LD_VAR 0 1
44736: PUSH
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 3
44744: PLUS
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: PUSH
44754: LD_VAR 0 1
44758: PUSH
44759: LD_INT 4
44761: PLUS
44762: PUSH
44763: LD_VAR 0 2
44767: PUSH
44768: LD_INT 4
44770: PLUS
44771: PUSH
44772: LD_INT 5
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: ST_TO_ADDR
// end ; 2 :
44787: GO 45346
44789: LD_INT 2
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44797
44795: GO 44926
44797: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44798: LD_ADDR_VAR 0 5
44802: PUSH
44803: LD_VAR 0 1
44807: PUSH
44808: LD_VAR 0 2
44812: PUSH
44813: LD_INT 3
44815: MINUS
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: PUSH
44825: LD_VAR 0 1
44829: PUSH
44830: LD_INT 4
44832: PLUS
44833: PUSH
44834: LD_VAR 0 2
44838: PUSH
44839: LD_INT 4
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PUSH
44847: LD_VAR 0 1
44851: PUSH
44852: LD_VAR 0 2
44856: PUSH
44857: LD_INT 4
44859: PLUS
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_INT 3
44876: MINUS
44877: PUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 4
44898: MINUS
44899: PUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_INT 4
44907: MINUS
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// end ; 3 :
44924: GO 45346
44926: LD_INT 3
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 45067
44934: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44935: LD_ADDR_VAR 0 5
44939: PUSH
44940: LD_VAR 0 1
44944: PUSH
44945: LD_INT 3
44947: PLUS
44948: PUSH
44949: LD_VAR 0 2
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_INT 4
44969: PLUS
44970: PUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_INT 4
44978: PLUS
44979: PUSH
44980: LD_INT 5
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: PUSH
44988: LD_VAR 0 1
44992: PUSH
44993: LD_INT 4
44995: MINUS
44996: PUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: LD_VAR 0 1
45014: PUSH
45015: LD_VAR 0 2
45019: PUSH
45020: LD_INT 4
45022: MINUS
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: PUSH
45032: LD_VAR 0 1
45036: PUSH
45037: LD_INT 3
45039: MINUS
45040: PUSH
45041: LD_VAR 0 2
45045: PUSH
45046: LD_INT 3
45048: MINUS
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// end ; 4 :
45065: GO 45346
45067: LD_INT 4
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45208
45075: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45076: LD_ADDR_VAR 0 5
45080: PUSH
45081: LD_VAR 0 1
45085: PUSH
45086: LD_VAR 0 2
45090: PUSH
45091: LD_INT 4
45093: PLUS
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: LD_VAR 0 1
45107: PUSH
45108: LD_INT 3
45110: PLUS
45111: PUSH
45112: LD_VAR 0 2
45116: PUSH
45117: LD_INT 3
45119: PLUS
45120: PUSH
45121: LD_INT 5
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: PUSH
45129: LD_VAR 0 1
45133: PUSH
45134: LD_INT 4
45136: PLUS
45137: PUSH
45138: LD_VAR 0 2
45142: PUSH
45143: LD_INT 4
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: PUSH
45151: LD_VAR 0 1
45155: PUSH
45156: LD_VAR 0 2
45160: PUSH
45161: LD_INT 3
45163: MINUS
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: PUSH
45173: LD_VAR 0 1
45177: PUSH
45178: LD_INT 4
45180: MINUS
45181: PUSH
45182: LD_VAR 0 2
45186: PUSH
45187: LD_INT 4
45189: MINUS
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// end ; 5 :
45206: GO 45346
45208: LD_INT 5
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45345
45216: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45217: LD_ADDR_VAR 0 5
45221: PUSH
45222: LD_VAR 0 1
45226: PUSH
45227: LD_INT 4
45229: MINUS
45230: PUSH
45231: LD_VAR 0 2
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: PUSH
45244: LD_VAR 0 1
45248: PUSH
45249: LD_VAR 0 2
45253: PUSH
45254: LD_INT 4
45256: MINUS
45257: PUSH
45258: LD_INT 3
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: PUSH
45266: LD_VAR 0 1
45270: PUSH
45271: LD_INT 4
45273: PLUS
45274: PUSH
45275: LD_VAR 0 2
45279: PUSH
45280: LD_INT 4
45282: PLUS
45283: PUSH
45284: LD_INT 5
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: PUSH
45292: LD_VAR 0 1
45296: PUSH
45297: LD_INT 3
45299: PLUS
45300: PUSH
45301: LD_VAR 0 2
45305: PUSH
45306: LD_INT 4
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: PUSH
45314: LD_VAR 0 1
45318: PUSH
45319: LD_VAR 0 2
45323: PUSH
45324: LD_INT 3
45326: PLUS
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// end ; end ;
45343: GO 45346
45345: POP
// result := list ;
45346: LD_ADDR_VAR 0 4
45350: PUSH
45351: LD_VAR 0 5
45355: ST_TO_ADDR
// end ;
45356: LD_VAR 0 4
45360: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45361: LD_INT 0
45363: PPUSH
45364: PPUSH
45365: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45366: LD_VAR 0 1
45370: NOT
45371: PUSH
45372: LD_VAR 0 2
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: LD_INT 4
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: IN
45395: NOT
45396: OR
45397: IFFALSE 45401
// exit ;
45399: GO 45484
// tmp := [ ] ;
45401: LD_ADDR_VAR 0 5
45405: PUSH
45406: EMPTY
45407: ST_TO_ADDR
// for i in units do
45408: LD_ADDR_VAR 0 4
45412: PUSH
45413: LD_VAR 0 1
45417: PUSH
45418: FOR_IN
45419: IFFALSE 45453
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45421: LD_ADDR_VAR 0 5
45425: PUSH
45426: LD_VAR 0 5
45430: PPUSH
45431: LD_VAR 0 4
45435: PPUSH
45436: LD_VAR 0 2
45440: PPUSH
45441: CALL_OW 259
45445: PPUSH
45446: CALL 46857 0 2
45450: ST_TO_ADDR
45451: GO 45418
45453: POP
45454: POP
// if not tmp then
45455: LD_VAR 0 5
45459: NOT
45460: IFFALSE 45464
// exit ;
45462: GO 45484
// result := SortListByListDesc ( units , tmp ) ;
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: LD_VAR 0 5
45478: PPUSH
45479: CALL_OW 77
45483: ST_TO_ADDR
// end ;
45484: LD_VAR 0 3
45488: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45489: LD_INT 0
45491: PPUSH
45492: PPUSH
45493: PPUSH
// result := false ;
45494: LD_ADDR_VAR 0 3
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// if not building then
45502: LD_VAR 0 2
45506: NOT
45507: IFFALSE 45511
// exit ;
45509: GO 45649
// x := GetX ( building ) ;
45511: LD_ADDR_VAR 0 4
45515: PUSH
45516: LD_VAR 0 2
45520: PPUSH
45521: CALL_OW 250
45525: ST_TO_ADDR
// y := GetY ( building ) ;
45526: LD_ADDR_VAR 0 5
45530: PUSH
45531: LD_VAR 0 2
45535: PPUSH
45536: CALL_OW 251
45540: ST_TO_ADDR
// if not x or not y then
45541: LD_VAR 0 4
45545: NOT
45546: PUSH
45547: LD_VAR 0 5
45551: NOT
45552: OR
45553: IFFALSE 45557
// exit ;
45555: GO 45649
// if GetTaskList ( unit ) then
45557: LD_VAR 0 1
45561: PPUSH
45562: CALL_OW 437
45566: IFFALSE 45649
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45568: LD_STRING e
45570: PUSH
45571: LD_VAR 0 1
45575: PPUSH
45576: CALL_OW 437
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: EQUAL
45589: PUSH
45590: LD_VAR 0 4
45594: PUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: CALL_OW 437
45604: PUSH
45605: LD_INT 1
45607: ARRAY
45608: PUSH
45609: LD_INT 2
45611: ARRAY
45612: EQUAL
45613: AND
45614: PUSH
45615: LD_VAR 0 5
45619: PUSH
45620: LD_VAR 0 1
45624: PPUSH
45625: CALL_OW 437
45629: PUSH
45630: LD_INT 1
45632: ARRAY
45633: PUSH
45634: LD_INT 3
45636: ARRAY
45637: EQUAL
45638: AND
45639: IFFALSE 45649
// result := true end ;
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_INT 1
45648: ST_TO_ADDR
// end ;
45649: LD_VAR 0 3
45653: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45654: LD_INT 0
45656: PPUSH
// result := false ;
45657: LD_ADDR_VAR 0 4
45661: PUSH
45662: LD_INT 0
45664: ST_TO_ADDR
// if GetTaskList ( unit ) then
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 437
45674: IFFALSE 45757
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45676: LD_STRING M
45678: PUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 437
45688: PUSH
45689: LD_INT 1
45691: ARRAY
45692: PUSH
45693: LD_INT 1
45695: ARRAY
45696: EQUAL
45697: PUSH
45698: LD_VAR 0 2
45702: PUSH
45703: LD_VAR 0 1
45707: PPUSH
45708: CALL_OW 437
45712: PUSH
45713: LD_INT 1
45715: ARRAY
45716: PUSH
45717: LD_INT 2
45719: ARRAY
45720: EQUAL
45721: AND
45722: PUSH
45723: LD_VAR 0 3
45727: PUSH
45728: LD_VAR 0 1
45732: PPUSH
45733: CALL_OW 437
45737: PUSH
45738: LD_INT 1
45740: ARRAY
45741: PUSH
45742: LD_INT 3
45744: ARRAY
45745: EQUAL
45746: AND
45747: IFFALSE 45757
// result := true ;
45749: LD_ADDR_VAR 0 4
45753: PUSH
45754: LD_INT 1
45756: ST_TO_ADDR
// end ; end ;
45757: LD_VAR 0 4
45761: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45762: LD_INT 0
45764: PPUSH
45765: PPUSH
45766: PPUSH
45767: PPUSH
// if not unit or not area then
45768: LD_VAR 0 1
45772: NOT
45773: PUSH
45774: LD_VAR 0 2
45778: NOT
45779: OR
45780: IFFALSE 45784
// exit ;
45782: GO 45960
// tmp := AreaToList ( area , i ) ;
45784: LD_ADDR_VAR 0 6
45788: PUSH
45789: LD_VAR 0 2
45793: PPUSH
45794: LD_VAR 0 5
45798: PPUSH
45799: CALL_OW 517
45803: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45804: LD_ADDR_VAR 0 5
45808: PUSH
45809: DOUBLE
45810: LD_INT 1
45812: DEC
45813: ST_TO_ADDR
45814: LD_VAR 0 6
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PUSH
45823: FOR_TO
45824: IFFALSE 45958
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45826: LD_ADDR_VAR 0 7
45830: PUSH
45831: LD_VAR 0 6
45835: PUSH
45836: LD_INT 1
45838: ARRAY
45839: PUSH
45840: LD_VAR 0 5
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 6
45850: PUSH
45851: LD_INT 2
45853: ARRAY
45854: PUSH
45855: LD_VAR 0 5
45859: ARRAY
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45865: LD_INT 92
45867: PUSH
45868: LD_VAR 0 7
45872: PUSH
45873: LD_INT 1
45875: ARRAY
45876: PUSH
45877: LD_VAR 0 7
45881: PUSH
45882: LD_INT 2
45884: ARRAY
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: PPUSH
45895: CALL_OW 69
45899: PUSH
45900: LD_INT 0
45902: EQUAL
45903: IFFALSE 45956
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45905: LD_VAR 0 1
45909: PPUSH
45910: LD_VAR 0 7
45914: PUSH
45915: LD_INT 1
45917: ARRAY
45918: PPUSH
45919: LD_VAR 0 7
45923: PUSH
45924: LD_INT 2
45926: ARRAY
45927: PPUSH
45928: LD_VAR 0 3
45932: PPUSH
45933: CALL_OW 48
// result := IsPlaced ( unit ) ;
45937: LD_ADDR_VAR 0 4
45941: PUSH
45942: LD_VAR 0 1
45946: PPUSH
45947: CALL_OW 305
45951: ST_TO_ADDR
// exit ;
45952: POP
45953: POP
45954: GO 45960
// end ; end ;
45956: GO 45823
45958: POP
45959: POP
// end ;
45960: LD_VAR 0 4
45964: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
45969: PPUSH
// if not side or side > 8 then
45970: LD_VAR 0 1
45974: NOT
45975: PUSH
45976: LD_VAR 0 1
45980: PUSH
45981: LD_INT 8
45983: GREATER
45984: OR
45985: IFFALSE 45989
// exit ;
45987: GO 46176
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45989: LD_ADDR_VAR 0 4
45993: PUSH
45994: LD_INT 22
45996: PUSH
45997: LD_VAR 0 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 21
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PPUSH
46020: CALL_OW 69
46024: ST_TO_ADDR
// if not tmp then
46025: LD_VAR 0 4
46029: NOT
46030: IFFALSE 46034
// exit ;
46032: GO 46176
// enable_addtolog := true ;
46034: LD_ADDR_OWVAR 81
46038: PUSH
46039: LD_INT 1
46041: ST_TO_ADDR
// AddToLog ( [ ) ;
46042: LD_STRING [
46044: PPUSH
46045: CALL_OW 561
// for i in tmp do
46049: LD_ADDR_VAR 0 3
46053: PUSH
46054: LD_VAR 0 4
46058: PUSH
46059: FOR_IN
46060: IFFALSE 46167
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46062: LD_STRING [
46064: PUSH
46065: LD_VAR 0 3
46069: PPUSH
46070: CALL_OW 266
46074: STR
46075: PUSH
46076: LD_STRING , 
46078: STR
46079: PUSH
46080: LD_VAR 0 3
46084: PPUSH
46085: CALL_OW 250
46089: STR
46090: PUSH
46091: LD_STRING , 
46093: STR
46094: PUSH
46095: LD_VAR 0 3
46099: PPUSH
46100: CALL_OW 251
46104: STR
46105: PUSH
46106: LD_STRING , 
46108: STR
46109: PUSH
46110: LD_VAR 0 3
46114: PPUSH
46115: CALL_OW 254
46119: STR
46120: PUSH
46121: LD_STRING , 
46123: STR
46124: PUSH
46125: LD_VAR 0 3
46129: PPUSH
46130: LD_INT 1
46132: PPUSH
46133: CALL_OW 268
46137: STR
46138: PUSH
46139: LD_STRING , 
46141: STR
46142: PUSH
46143: LD_VAR 0 3
46147: PPUSH
46148: LD_INT 2
46150: PPUSH
46151: CALL_OW 268
46155: STR
46156: PUSH
46157: LD_STRING ],
46159: STR
46160: PPUSH
46161: CALL_OW 561
// end ;
46165: GO 46059
46167: POP
46168: POP
// AddToLog ( ]; ) ;
46169: LD_STRING ];
46171: PPUSH
46172: CALL_OW 561
// end ;
46176: LD_VAR 0 2
46180: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46181: LD_INT 0
46183: PPUSH
46184: PPUSH
46185: PPUSH
46186: PPUSH
46187: PPUSH
// if not area or not rate or not max then
46188: LD_VAR 0 1
46192: NOT
46193: PUSH
46194: LD_VAR 0 2
46198: NOT
46199: OR
46200: PUSH
46201: LD_VAR 0 4
46205: NOT
46206: OR
46207: IFFALSE 46211
// exit ;
46209: GO 46400
// while 1 do
46211: LD_INT 1
46213: IFFALSE 46400
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46215: LD_ADDR_VAR 0 9
46219: PUSH
46220: LD_VAR 0 1
46224: PPUSH
46225: LD_INT 1
46227: PPUSH
46228: CALL_OW 287
46232: PUSH
46233: LD_INT 10
46235: MUL
46236: ST_TO_ADDR
// r := rate / 10 ;
46237: LD_ADDR_VAR 0 7
46241: PUSH
46242: LD_VAR 0 2
46246: PUSH
46247: LD_INT 10
46249: DIVREAL
46250: ST_TO_ADDR
// time := 1 1$00 ;
46251: LD_ADDR_VAR 0 8
46255: PUSH
46256: LD_INT 2100
46258: ST_TO_ADDR
// if amount < min then
46259: LD_VAR 0 9
46263: PUSH
46264: LD_VAR 0 3
46268: LESS
46269: IFFALSE 46287
// r := r * 2 else
46271: LD_ADDR_VAR 0 7
46275: PUSH
46276: LD_VAR 0 7
46280: PUSH
46281: LD_INT 2
46283: MUL
46284: ST_TO_ADDR
46285: GO 46313
// if amount > max then
46287: LD_VAR 0 9
46291: PUSH
46292: LD_VAR 0 4
46296: GREATER
46297: IFFALSE 46313
// r := r / 2 ;
46299: LD_ADDR_VAR 0 7
46303: PUSH
46304: LD_VAR 0 7
46308: PUSH
46309: LD_INT 2
46311: DIVREAL
46312: ST_TO_ADDR
// time := time / r ;
46313: LD_ADDR_VAR 0 8
46317: PUSH
46318: LD_VAR 0 8
46322: PUSH
46323: LD_VAR 0 7
46327: DIVREAL
46328: ST_TO_ADDR
// if time < 0 then
46329: LD_VAR 0 8
46333: PUSH
46334: LD_INT 0
46336: LESS
46337: IFFALSE 46354
// time := time * - 1 ;
46339: LD_ADDR_VAR 0 8
46343: PUSH
46344: LD_VAR 0 8
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: MUL
46353: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46354: LD_VAR 0 8
46358: PUSH
46359: LD_INT 35
46361: PPUSH
46362: LD_INT 875
46364: PPUSH
46365: CALL_OW 12
46369: PLUS
46370: PPUSH
46371: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46375: LD_INT 1
46377: PPUSH
46378: LD_INT 5
46380: PPUSH
46381: CALL_OW 12
46385: PPUSH
46386: LD_VAR 0 1
46390: PPUSH
46391: LD_INT 1
46393: PPUSH
46394: CALL_OW 55
// end ;
46398: GO 46211
// end ;
46400: LD_VAR 0 5
46404: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46405: LD_INT 0
46407: PPUSH
46408: PPUSH
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
46414: PPUSH
// if not turrets or not factories then
46415: LD_VAR 0 1
46419: NOT
46420: PUSH
46421: LD_VAR 0 2
46425: NOT
46426: OR
46427: IFFALSE 46431
// exit ;
46429: GO 46738
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46431: LD_ADDR_VAR 0 10
46435: PUSH
46436: LD_INT 5
46438: PUSH
46439: LD_INT 6
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 4
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: LD_INT 5
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 24
46473: PUSH
46474: LD_INT 25
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 23
46483: PUSH
46484: LD_INT 27
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 42
46497: PUSH
46498: LD_INT 43
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 44
46507: PUSH
46508: LD_INT 46
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 45
46517: PUSH
46518: LD_INT 47
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// result := [ ] ;
46535: LD_ADDR_VAR 0 3
46539: PUSH
46540: EMPTY
46541: ST_TO_ADDR
// for i in turrets do
46542: LD_ADDR_VAR 0 4
46546: PUSH
46547: LD_VAR 0 1
46551: PUSH
46552: FOR_IN
46553: IFFALSE 46736
// begin nat := GetNation ( i ) ;
46555: LD_ADDR_VAR 0 7
46559: PUSH
46560: LD_VAR 0 4
46564: PPUSH
46565: CALL_OW 248
46569: ST_TO_ADDR
// weapon := 0 ;
46570: LD_ADDR_VAR 0 8
46574: PUSH
46575: LD_INT 0
46577: ST_TO_ADDR
// if not nat then
46578: LD_VAR 0 7
46582: NOT
46583: IFFALSE 46587
// continue ;
46585: GO 46552
// for j in list [ nat ] do
46587: LD_ADDR_VAR 0 5
46591: PUSH
46592: LD_VAR 0 10
46596: PUSH
46597: LD_VAR 0 7
46601: ARRAY
46602: PUSH
46603: FOR_IN
46604: IFFALSE 46645
// if GetBWeapon ( i ) = j [ 1 ] then
46606: LD_VAR 0 4
46610: PPUSH
46611: CALL_OW 269
46615: PUSH
46616: LD_VAR 0 5
46620: PUSH
46621: LD_INT 1
46623: ARRAY
46624: EQUAL
46625: IFFALSE 46643
// begin weapon := j [ 2 ] ;
46627: LD_ADDR_VAR 0 8
46631: PUSH
46632: LD_VAR 0 5
46636: PUSH
46637: LD_INT 2
46639: ARRAY
46640: ST_TO_ADDR
// break ;
46641: GO 46645
// end ;
46643: GO 46603
46645: POP
46646: POP
// if not weapon then
46647: LD_VAR 0 8
46651: NOT
46652: IFFALSE 46656
// continue ;
46654: GO 46552
// for k in factories do
46656: LD_ADDR_VAR 0 6
46660: PUSH
46661: LD_VAR 0 2
46665: PUSH
46666: FOR_IN
46667: IFFALSE 46732
// begin weapons := AvailableWeaponList ( k ) ;
46669: LD_ADDR_VAR 0 9
46673: PUSH
46674: LD_VAR 0 6
46678: PPUSH
46679: CALL_OW 478
46683: ST_TO_ADDR
// if not weapons then
46684: LD_VAR 0 9
46688: NOT
46689: IFFALSE 46693
// continue ;
46691: GO 46666
// if weapon in weapons then
46693: LD_VAR 0 8
46697: PUSH
46698: LD_VAR 0 9
46702: IN
46703: IFFALSE 46730
// begin result := [ i , weapon ] ;
46705: LD_ADDR_VAR 0 3
46709: PUSH
46710: LD_VAR 0 4
46714: PUSH
46715: LD_VAR 0 8
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: ST_TO_ADDR
// exit ;
46724: POP
46725: POP
46726: POP
46727: POP
46728: GO 46738
// end ; end ;
46730: GO 46666
46732: POP
46733: POP
// end ;
46734: GO 46552
46736: POP
46737: POP
// end ;
46738: LD_VAR 0 3
46742: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46743: LD_INT 0
46745: PPUSH
// if not side or side > 8 then
46746: LD_VAR 0 3
46750: NOT
46751: PUSH
46752: LD_VAR 0 3
46756: PUSH
46757: LD_INT 8
46759: GREATER
46760: OR
46761: IFFALSE 46765
// exit ;
46763: GO 46824
// if not range then
46765: LD_VAR 0 4
46769: NOT
46770: IFFALSE 46781
// range := - 12 ;
46772: LD_ADDR_VAR 0 4
46776: PUSH
46777: LD_INT 12
46779: NEG
46780: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46781: LD_VAR 0 1
46785: PPUSH
46786: LD_VAR 0 2
46790: PPUSH
46791: LD_VAR 0 3
46795: PPUSH
46796: LD_VAR 0 4
46800: PPUSH
46801: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46805: LD_VAR 0 1
46809: PPUSH
46810: LD_VAR 0 2
46814: PPUSH
46815: LD_VAR 0 3
46819: PPUSH
46820: CALL_OW 331
// end ;
46824: LD_VAR 0 5
46828: RET
// export function Video ( mode ) ; begin
46829: LD_INT 0
46831: PPUSH
// ingame_video = mode ;
46832: LD_ADDR_OWVAR 52
46836: PUSH
46837: LD_VAR 0 1
46841: ST_TO_ADDR
// interface_hidden = mode ;
46842: LD_ADDR_OWVAR 54
46846: PUSH
46847: LD_VAR 0 1
46851: ST_TO_ADDR
// end ;
46852: LD_VAR 0 2
46856: RET
// export function Join ( array , element ) ; begin
46857: LD_INT 0
46859: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46860: LD_ADDR_VAR 0 3
46864: PUSH
46865: LD_VAR 0 1
46869: PPUSH
46870: LD_VAR 0 1
46874: PUSH
46875: LD_INT 1
46877: PLUS
46878: PPUSH
46879: LD_VAR 0 2
46883: PPUSH
46884: CALL_OW 1
46888: ST_TO_ADDR
// end ;
46889: LD_VAR 0 3
46893: RET
// export function JoinUnion ( array , element ) ; begin
46894: LD_INT 0
46896: PPUSH
// result := array union element ;
46897: LD_ADDR_VAR 0 3
46901: PUSH
46902: LD_VAR 0 1
46906: PUSH
46907: LD_VAR 0 2
46911: UNION
46912: ST_TO_ADDR
// end ;
46913: LD_VAR 0 3
46917: RET
// export function GetBehemoths ( side ) ; begin
46918: LD_INT 0
46920: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46921: LD_ADDR_VAR 0 2
46925: PUSH
46926: LD_INT 22
46928: PUSH
46929: LD_VAR 0 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 31
46940: PUSH
46941: LD_INT 25
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PPUSH
46952: CALL_OW 69
46956: ST_TO_ADDR
// end ;
46957: LD_VAR 0 2
46961: RET
// export function Shuffle ( array ) ; var i , index ; begin
46962: LD_INT 0
46964: PPUSH
46965: PPUSH
46966: PPUSH
// result := [ ] ;
46967: LD_ADDR_VAR 0 2
46971: PUSH
46972: EMPTY
46973: ST_TO_ADDR
// if not array then
46974: LD_VAR 0 1
46978: NOT
46979: IFFALSE 46983
// exit ;
46981: GO 47082
// Randomize ;
46983: CALL_OW 10
// for i = array downto 1 do
46987: LD_ADDR_VAR 0 3
46991: PUSH
46992: DOUBLE
46993: LD_VAR 0 1
46997: INC
46998: ST_TO_ADDR
46999: LD_INT 1
47001: PUSH
47002: FOR_DOWNTO
47003: IFFALSE 47080
// begin index := rand ( 1 , array ) ;
47005: LD_ADDR_VAR 0 4
47009: PUSH
47010: LD_INT 1
47012: PPUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 12
47022: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47023: LD_ADDR_VAR 0 2
47027: PUSH
47028: LD_VAR 0 2
47032: PPUSH
47033: LD_VAR 0 2
47037: PUSH
47038: LD_INT 1
47040: PLUS
47041: PPUSH
47042: LD_VAR 0 1
47046: PUSH
47047: LD_VAR 0 4
47051: ARRAY
47052: PPUSH
47053: CALL_OW 2
47057: ST_TO_ADDR
// array := Delete ( array , index ) ;
47058: LD_ADDR_VAR 0 1
47062: PUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: LD_VAR 0 4
47072: PPUSH
47073: CALL_OW 3
47077: ST_TO_ADDR
// end ;
47078: GO 47002
47080: POP
47081: POP
// end ;
47082: LD_VAR 0 2
47086: RET
// export function GetBaseMaterials ( base ) ; begin
47087: LD_INT 0
47089: PPUSH
// result := [ 0 , 0 , 0 ] ;
47090: LD_ADDR_VAR 0 2
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// if not base then
47109: LD_VAR 0 1
47113: NOT
47114: IFFALSE 47118
// exit ;
47116: GO 47167
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47118: LD_ADDR_VAR 0 2
47122: PUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_INT 1
47130: PPUSH
47131: CALL_OW 275
47135: PUSH
47136: LD_VAR 0 1
47140: PPUSH
47141: LD_INT 2
47143: PPUSH
47144: CALL_OW 275
47148: PUSH
47149: LD_VAR 0 1
47153: PPUSH
47154: LD_INT 3
47156: PPUSH
47157: CALL_OW 275
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
// end ;
47167: LD_VAR 0 2
47171: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47172: LD_INT 0
47174: PPUSH
47175: PPUSH
// result := array ;
47176: LD_ADDR_VAR 0 3
47180: PUSH
47181: LD_VAR 0 1
47185: ST_TO_ADDR
// if size >= result then
47186: LD_VAR 0 2
47190: PUSH
47191: LD_VAR 0 3
47195: GREATEREQUAL
47196: IFFALSE 47200
// exit ;
47198: GO 47250
// if size then
47200: LD_VAR 0 2
47204: IFFALSE 47250
// for i := array downto size do
47206: LD_ADDR_VAR 0 4
47210: PUSH
47211: DOUBLE
47212: LD_VAR 0 1
47216: INC
47217: ST_TO_ADDR
47218: LD_VAR 0 2
47222: PUSH
47223: FOR_DOWNTO
47224: IFFALSE 47248
// result := Delete ( result , result ) ;
47226: LD_ADDR_VAR 0 3
47230: PUSH
47231: LD_VAR 0 3
47235: PPUSH
47236: LD_VAR 0 3
47240: PPUSH
47241: CALL_OW 3
47245: ST_TO_ADDR
47246: GO 47223
47248: POP
47249: POP
// end ;
47250: LD_VAR 0 3
47254: RET
// export function ComExit ( unit ) ; var tmp ; begin
47255: LD_INT 0
47257: PPUSH
47258: PPUSH
// if not IsInUnit ( unit ) then
47259: LD_VAR 0 1
47263: PPUSH
47264: CALL_OW 310
47268: NOT
47269: IFFALSE 47273
// exit ;
47271: GO 47333
// tmp := IsInUnit ( unit ) ;
47273: LD_ADDR_VAR 0 3
47277: PUSH
47278: LD_VAR 0 1
47282: PPUSH
47283: CALL_OW 310
47287: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47288: LD_VAR 0 3
47292: PPUSH
47293: CALL_OW 247
47297: PUSH
47298: LD_INT 2
47300: EQUAL
47301: IFFALSE 47314
// ComExitVehicle ( unit ) else
47303: LD_VAR 0 1
47307: PPUSH
47308: CALL_OW 121
47312: GO 47323
// ComExitBuilding ( unit ) ;
47314: LD_VAR 0 1
47318: PPUSH
47319: CALL_OW 122
// result := tmp ;
47323: LD_ADDR_VAR 0 2
47327: PUSH
47328: LD_VAR 0 3
47332: ST_TO_ADDR
// end ;
47333: LD_VAR 0 2
47337: RET
// export function ComExitAll ( units ) ; var i ; begin
47338: LD_INT 0
47340: PPUSH
47341: PPUSH
// if not units then
47342: LD_VAR 0 1
47346: NOT
47347: IFFALSE 47351
// exit ;
47349: GO 47377
// for i in units do
47351: LD_ADDR_VAR 0 3
47355: PUSH
47356: LD_VAR 0 1
47360: PUSH
47361: FOR_IN
47362: IFFALSE 47375
// ComExit ( i ) ;
47364: LD_VAR 0 3
47368: PPUSH
47369: CALL 47255 0 1
47373: GO 47361
47375: POP
47376: POP
// end ;
47377: LD_VAR 0 2
47381: RET
// export function ResetHc ; begin
47382: LD_INT 0
47384: PPUSH
// InitHc ;
47385: CALL_OW 19
// hc_importance := 0 ;
47389: LD_ADDR_OWVAR 32
47393: PUSH
47394: LD_INT 0
47396: ST_TO_ADDR
// end ;
47397: LD_VAR 0 1
47401: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47402: LD_INT 0
47404: PPUSH
47405: PPUSH
47406: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47407: LD_ADDR_VAR 0 6
47411: PUSH
47412: LD_VAR 0 1
47416: PUSH
47417: LD_VAR 0 3
47421: PLUS
47422: PUSH
47423: LD_INT 2
47425: DIV
47426: ST_TO_ADDR
// if _x < 0 then
47427: LD_VAR 0 6
47431: PUSH
47432: LD_INT 0
47434: LESS
47435: IFFALSE 47452
// _x := _x * - 1 ;
47437: LD_ADDR_VAR 0 6
47441: PUSH
47442: LD_VAR 0 6
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: MUL
47451: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47452: LD_ADDR_VAR 0 7
47456: PUSH
47457: LD_VAR 0 2
47461: PUSH
47462: LD_VAR 0 4
47466: PLUS
47467: PUSH
47468: LD_INT 2
47470: DIV
47471: ST_TO_ADDR
// if _y < 0 then
47472: LD_VAR 0 7
47476: PUSH
47477: LD_INT 0
47479: LESS
47480: IFFALSE 47497
// _y := _y * - 1 ;
47482: LD_ADDR_VAR 0 7
47486: PUSH
47487: LD_VAR 0 7
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: MUL
47496: ST_TO_ADDR
// result := [ _x , _y ] ;
47497: LD_ADDR_VAR 0 5
47501: PUSH
47502: LD_VAR 0 6
47506: PUSH
47507: LD_VAR 0 7
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// end ;
47516: LD_VAR 0 5
47520: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47521: LD_INT 0
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
// task := GetTaskList ( unit ) ;
47527: LD_ADDR_VAR 0 7
47531: PUSH
47532: LD_VAR 0 1
47536: PPUSH
47537: CALL_OW 437
47541: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47542: LD_VAR 0 7
47546: NOT
47547: PUSH
47548: LD_VAR 0 1
47552: PPUSH
47553: LD_VAR 0 2
47557: PPUSH
47558: CALL_OW 308
47562: NOT
47563: AND
47564: IFFALSE 47568
// exit ;
47566: GO 47686
// if IsInArea ( unit , area ) then
47568: LD_VAR 0 1
47572: PPUSH
47573: LD_VAR 0 2
47577: PPUSH
47578: CALL_OW 308
47582: IFFALSE 47600
// begin ComMoveToArea ( unit , goAway ) ;
47584: LD_VAR 0 1
47588: PPUSH
47589: LD_VAR 0 3
47593: PPUSH
47594: CALL_OW 113
// exit ;
47598: GO 47686
// end ; if task [ 1 ] [ 1 ] <> M then
47600: LD_VAR 0 7
47604: PUSH
47605: LD_INT 1
47607: ARRAY
47608: PUSH
47609: LD_INT 1
47611: ARRAY
47612: PUSH
47613: LD_STRING M
47615: NONEQUAL
47616: IFFALSE 47620
// exit ;
47618: GO 47686
// x := task [ 1 ] [ 2 ] ;
47620: LD_ADDR_VAR 0 5
47624: PUSH
47625: LD_VAR 0 7
47629: PUSH
47630: LD_INT 1
47632: ARRAY
47633: PUSH
47634: LD_INT 2
47636: ARRAY
47637: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47638: LD_ADDR_VAR 0 6
47642: PUSH
47643: LD_VAR 0 7
47647: PUSH
47648: LD_INT 1
47650: ARRAY
47651: PUSH
47652: LD_INT 3
47654: ARRAY
47655: ST_TO_ADDR
// if InArea ( x , y , area ) then
47656: LD_VAR 0 5
47660: PPUSH
47661: LD_VAR 0 6
47665: PPUSH
47666: LD_VAR 0 2
47670: PPUSH
47671: CALL_OW 309
47675: IFFALSE 47686
// ComStop ( unit ) ;
47677: LD_VAR 0 1
47681: PPUSH
47682: CALL_OW 141
// end ;
47686: LD_VAR 0 4
47690: RET
// export function Abs ( value ) ; begin
47691: LD_INT 0
47693: PPUSH
// result := value ;
47694: LD_ADDR_VAR 0 2
47698: PUSH
47699: LD_VAR 0 1
47703: ST_TO_ADDR
// if value < 0 then
47704: LD_VAR 0 1
47708: PUSH
47709: LD_INT 0
47711: LESS
47712: IFFALSE 47729
// result := value * - 1 ;
47714: LD_ADDR_VAR 0 2
47718: PUSH
47719: LD_VAR 0 1
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: MUL
47728: ST_TO_ADDR
// end ;
47729: LD_VAR 0 2
47733: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47734: LD_INT 0
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
47743: PPUSH
// if not unit or not building then
47744: LD_VAR 0 1
47748: NOT
47749: PUSH
47750: LD_VAR 0 2
47754: NOT
47755: OR
47756: IFFALSE 47760
// exit ;
47758: GO 47986
// x := GetX ( building ) ;
47760: LD_ADDR_VAR 0 4
47764: PUSH
47765: LD_VAR 0 2
47769: PPUSH
47770: CALL_OW 250
47774: ST_TO_ADDR
// y := GetY ( building ) ;
47775: LD_ADDR_VAR 0 6
47779: PUSH
47780: LD_VAR 0 2
47784: PPUSH
47785: CALL_OW 251
47789: ST_TO_ADDR
// d := GetDir ( building ) ;
47790: LD_ADDR_VAR 0 8
47794: PUSH
47795: LD_VAR 0 2
47799: PPUSH
47800: CALL_OW 254
47804: ST_TO_ADDR
// r := 4 ;
47805: LD_ADDR_VAR 0 9
47809: PUSH
47810: LD_INT 4
47812: ST_TO_ADDR
// for i := 1 to 5 do
47813: LD_ADDR_VAR 0 10
47817: PUSH
47818: DOUBLE
47819: LD_INT 1
47821: DEC
47822: ST_TO_ADDR
47823: LD_INT 5
47825: PUSH
47826: FOR_TO
47827: IFFALSE 47984
// begin _x := ShiftX ( x , d , r + i ) ;
47829: LD_ADDR_VAR 0 5
47833: PUSH
47834: LD_VAR 0 4
47838: PPUSH
47839: LD_VAR 0 8
47843: PPUSH
47844: LD_VAR 0 9
47848: PUSH
47849: LD_VAR 0 10
47853: PLUS
47854: PPUSH
47855: CALL_OW 272
47859: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47860: LD_ADDR_VAR 0 7
47864: PUSH
47865: LD_VAR 0 6
47869: PPUSH
47870: LD_VAR 0 8
47874: PPUSH
47875: LD_VAR 0 9
47879: PUSH
47880: LD_VAR 0 10
47884: PLUS
47885: PPUSH
47886: CALL_OW 273
47890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47891: LD_VAR 0 5
47895: PPUSH
47896: LD_VAR 0 7
47900: PPUSH
47901: CALL_OW 488
47905: PUSH
47906: LD_VAR 0 5
47910: PPUSH
47911: LD_VAR 0 7
47915: PPUSH
47916: CALL_OW 428
47920: PPUSH
47921: CALL_OW 247
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: IN
47936: NOT
47937: AND
47938: IFFALSE 47982
// begin ComMoveXY ( unit , _x , _y ) ;
47940: LD_VAR 0 1
47944: PPUSH
47945: LD_VAR 0 5
47949: PPUSH
47950: LD_VAR 0 7
47954: PPUSH
47955: CALL_OW 111
// result := [ _x , _y ] ;
47959: LD_ADDR_VAR 0 3
47963: PUSH
47964: LD_VAR 0 5
47968: PUSH
47969: LD_VAR 0 7
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: ST_TO_ADDR
// exit ;
47978: POP
47979: POP
47980: GO 47986
// end ; end ;
47982: GO 47826
47984: POP
47985: POP
// end ;
47986: LD_VAR 0 3
47990: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47991: LD_INT 0
47993: PPUSH
47994: PPUSH
47995: PPUSH
// result := 0 ;
47996: LD_ADDR_VAR 0 3
48000: PUSH
48001: LD_INT 0
48003: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48004: LD_VAR 0 1
48008: PUSH
48009: LD_INT 0
48011: LESS
48012: PUSH
48013: LD_VAR 0 1
48017: PUSH
48018: LD_INT 8
48020: GREATER
48021: OR
48022: PUSH
48023: LD_VAR 0 2
48027: PUSH
48028: LD_INT 0
48030: LESS
48031: OR
48032: PUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 8
48040: GREATER
48041: OR
48042: IFFALSE 48046
// exit ;
48044: GO 48121
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48046: LD_ADDR_VAR 0 4
48050: PUSH
48051: LD_INT 22
48053: PUSH
48054: LD_VAR 0 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PPUSH
48063: CALL_OW 69
48067: PUSH
48068: FOR_IN
48069: IFFALSE 48119
// begin un := UnitShoot ( i ) ;
48071: LD_ADDR_VAR 0 5
48075: PUSH
48076: LD_VAR 0 4
48080: PPUSH
48081: CALL_OW 504
48085: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48086: LD_VAR 0 5
48090: PPUSH
48091: CALL_OW 255
48095: PUSH
48096: LD_VAR 0 1
48100: EQUAL
48101: IFFALSE 48117
// begin result := un ;
48103: LD_ADDR_VAR 0 3
48107: PUSH
48108: LD_VAR 0 5
48112: ST_TO_ADDR
// exit ;
48113: POP
48114: POP
48115: GO 48121
// end ; end ;
48117: GO 48068
48119: POP
48120: POP
// end ;
48121: LD_VAR 0 3
48125: RET
// export function GetCargoBay ( units ) ; begin
48126: LD_INT 0
48128: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48129: LD_ADDR_VAR 0 2
48133: PUSH
48134: LD_VAR 0 1
48138: PPUSH
48139: LD_INT 2
48141: PUSH
48142: LD_INT 34
48144: PUSH
48145: LD_INT 12
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 34
48154: PUSH
48155: LD_INT 51
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 34
48164: PUSH
48165: LD_INT 32
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 34
48174: PUSH
48175: LD_INT 89
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: PPUSH
48189: CALL_OW 72
48193: ST_TO_ADDR
// end ;
48194: LD_VAR 0 2
48198: RET
// export function Negate ( value ) ; begin
48199: LD_INT 0
48201: PPUSH
// result := not value ;
48202: LD_ADDR_VAR 0 2
48206: PUSH
48207: LD_VAR 0 1
48211: NOT
48212: ST_TO_ADDR
// end ;
48213: LD_VAR 0 2
48217: RET
// export function Inc ( value ) ; begin
48218: LD_INT 0
48220: PPUSH
// result := value + 1 ;
48221: LD_ADDR_VAR 0 2
48225: PUSH
48226: LD_VAR 0 1
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: ST_TO_ADDR
// end ;
48235: LD_VAR 0 2
48239: RET
// export function Dec ( value ) ; begin
48240: LD_INT 0
48242: PPUSH
// result := value - 1 ;
48243: LD_ADDR_VAR 0 2
48247: PUSH
48248: LD_VAR 0 1
48252: PUSH
48253: LD_INT 1
48255: MINUS
48256: ST_TO_ADDR
// end ;
48257: LD_VAR 0 2
48261: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48262: LD_INT 0
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48272: LD_VAR 0 1
48276: PPUSH
48277: LD_VAR 0 2
48281: PPUSH
48282: CALL_OW 488
48286: NOT
48287: PUSH
48288: LD_VAR 0 3
48292: PPUSH
48293: LD_VAR 0 4
48297: PPUSH
48298: CALL_OW 488
48302: NOT
48303: OR
48304: IFFALSE 48317
// begin result := - 1 ;
48306: LD_ADDR_VAR 0 5
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: ST_TO_ADDR
// exit ;
48315: GO 48552
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48317: LD_ADDR_VAR 0 12
48321: PUSH
48322: LD_VAR 0 1
48326: PPUSH
48327: LD_VAR 0 2
48331: PPUSH
48332: LD_VAR 0 3
48336: PPUSH
48337: LD_VAR 0 4
48341: PPUSH
48342: CALL 47402 0 4
48346: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48347: LD_ADDR_VAR 0 11
48351: PUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: LD_VAR 0 2
48361: PPUSH
48362: LD_VAR 0 12
48366: PUSH
48367: LD_INT 1
48369: ARRAY
48370: PPUSH
48371: LD_VAR 0 12
48375: PUSH
48376: LD_INT 2
48378: ARRAY
48379: PPUSH
48380: CALL_OW 298
48384: ST_TO_ADDR
// distance := 9999 ;
48385: LD_ADDR_VAR 0 10
48389: PUSH
48390: LD_INT 9999
48392: ST_TO_ADDR
// for i := 0 to 5 do
48393: LD_ADDR_VAR 0 6
48397: PUSH
48398: DOUBLE
48399: LD_INT 0
48401: DEC
48402: ST_TO_ADDR
48403: LD_INT 5
48405: PUSH
48406: FOR_TO
48407: IFFALSE 48550
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48409: LD_ADDR_VAR 0 7
48413: PUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: LD_VAR 0 6
48423: PPUSH
48424: LD_VAR 0 11
48428: PPUSH
48429: CALL_OW 272
48433: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48434: LD_ADDR_VAR 0 8
48438: PUSH
48439: LD_VAR 0 2
48443: PPUSH
48444: LD_VAR 0 6
48448: PPUSH
48449: LD_VAR 0 11
48453: PPUSH
48454: CALL_OW 273
48458: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48459: LD_VAR 0 7
48463: PPUSH
48464: LD_VAR 0 8
48468: PPUSH
48469: CALL_OW 488
48473: NOT
48474: IFFALSE 48478
// continue ;
48476: GO 48406
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48478: LD_ADDR_VAR 0 9
48482: PUSH
48483: LD_VAR 0 12
48487: PUSH
48488: LD_INT 1
48490: ARRAY
48491: PPUSH
48492: LD_VAR 0 12
48496: PUSH
48497: LD_INT 2
48499: ARRAY
48500: PPUSH
48501: LD_VAR 0 7
48505: PPUSH
48506: LD_VAR 0 8
48510: PPUSH
48511: CALL_OW 298
48515: ST_TO_ADDR
// if tmp < distance then
48516: LD_VAR 0 9
48520: PUSH
48521: LD_VAR 0 10
48525: LESS
48526: IFFALSE 48548
// begin result := i ;
48528: LD_ADDR_VAR 0 5
48532: PUSH
48533: LD_VAR 0 6
48537: ST_TO_ADDR
// distance := tmp ;
48538: LD_ADDR_VAR 0 10
48542: PUSH
48543: LD_VAR 0 9
48547: ST_TO_ADDR
// end ; end ;
48548: GO 48406
48550: POP
48551: POP
// end ;
48552: LD_VAR 0 5
48556: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
// if not driver or not IsInUnit ( driver ) then
48561: LD_VAR 0 1
48565: NOT
48566: PUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 310
48576: NOT
48577: OR
48578: IFFALSE 48582
// exit ;
48580: GO 48672
// vehicle := IsInUnit ( driver ) ;
48582: LD_ADDR_VAR 0 3
48586: PUSH
48587: LD_VAR 0 1
48591: PPUSH
48592: CALL_OW 310
48596: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48597: LD_VAR 0 1
48601: PPUSH
48602: LD_STRING \
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: PUSH
48632: LD_STRING E
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_VAR 0 3
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PPUSH
48668: CALL_OW 446
// end ;
48672: LD_VAR 0 2
48676: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48677: LD_INT 0
48679: PPUSH
48680: PPUSH
// if not driver or not IsInUnit ( driver ) then
48681: LD_VAR 0 1
48685: NOT
48686: PUSH
48687: LD_VAR 0 1
48691: PPUSH
48692: CALL_OW 310
48696: NOT
48697: OR
48698: IFFALSE 48702
// exit ;
48700: GO 48792
// vehicle := IsInUnit ( driver ) ;
48702: LD_ADDR_VAR 0 3
48706: PUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 310
48716: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48717: LD_VAR 0 1
48721: PPUSH
48722: LD_STRING \
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: PUSH
48752: LD_STRING E
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_VAR 0 3
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PPUSH
48788: CALL_OW 447
// end ;
48792: LD_VAR 0 2
48796: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48797: LD_INT 0
48799: PPUSH
48800: PPUSH
48801: PPUSH
// tmp := [ ] ;
48802: LD_ADDR_VAR 0 5
48806: PUSH
48807: EMPTY
48808: ST_TO_ADDR
// for i in units do
48809: LD_ADDR_VAR 0 4
48813: PUSH
48814: LD_VAR 0 1
48818: PUSH
48819: FOR_IN
48820: IFFALSE 48858
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48822: LD_ADDR_VAR 0 5
48826: PUSH
48827: LD_VAR 0 5
48831: PPUSH
48832: LD_VAR 0 5
48836: PUSH
48837: LD_INT 1
48839: PLUS
48840: PPUSH
48841: LD_VAR 0 4
48845: PPUSH
48846: CALL_OW 256
48850: PPUSH
48851: CALL_OW 2
48855: ST_TO_ADDR
48856: GO 48819
48858: POP
48859: POP
// if not tmp then
48860: LD_VAR 0 5
48864: NOT
48865: IFFALSE 48869
// exit ;
48867: GO 48917
// if asc then
48869: LD_VAR 0 2
48873: IFFALSE 48897
// result := SortListByListAsc ( units , tmp ) else
48875: LD_ADDR_VAR 0 3
48879: PUSH
48880: LD_VAR 0 1
48884: PPUSH
48885: LD_VAR 0 5
48889: PPUSH
48890: CALL_OW 76
48894: ST_TO_ADDR
48895: GO 48917
// result := SortListByListDesc ( units , tmp ) ;
48897: LD_ADDR_VAR 0 3
48901: PUSH
48902: LD_VAR 0 1
48906: PPUSH
48907: LD_VAR 0 5
48911: PPUSH
48912: CALL_OW 77
48916: ST_TO_ADDR
// end ;
48917: LD_VAR 0 3
48921: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48922: LD_INT 0
48924: PPUSH
48925: PPUSH
// task := GetTaskList ( mech ) ;
48926: LD_ADDR_VAR 0 4
48930: PUSH
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 437
48940: ST_TO_ADDR
// if not task then
48941: LD_VAR 0 4
48945: NOT
48946: IFFALSE 48950
// exit ;
48948: GO 48992
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48950: LD_ADDR_VAR 0 3
48954: PUSH
48955: LD_VAR 0 4
48959: PUSH
48960: LD_INT 1
48962: ARRAY
48963: PUSH
48964: LD_INT 1
48966: ARRAY
48967: PUSH
48968: LD_STRING r
48970: EQUAL
48971: PUSH
48972: LD_VAR 0 4
48976: PUSH
48977: LD_INT 1
48979: ARRAY
48980: PUSH
48981: LD_INT 4
48983: ARRAY
48984: PUSH
48985: LD_VAR 0 2
48989: EQUAL
48990: AND
48991: ST_TO_ADDR
// end ;
48992: LD_VAR 0 3
48996: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48997: LD_INT 0
48999: PPUSH
// SetDir ( unit , d ) ;
49000: LD_VAR 0 1
49004: PPUSH
49005: LD_VAR 0 4
49009: PPUSH
49010: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49014: LD_VAR 0 1
49018: PPUSH
49019: LD_VAR 0 2
49023: PPUSH
49024: LD_VAR 0 3
49028: PPUSH
49029: LD_VAR 0 5
49033: PPUSH
49034: CALL_OW 48
// end ;
49038: LD_VAR 0 6
49042: RET
// export function ToNaturalNumber ( number ) ; begin
49043: LD_INT 0
49045: PPUSH
// result := number div 1 ;
49046: LD_ADDR_VAR 0 2
49050: PUSH
49051: LD_VAR 0 1
49055: PUSH
49056: LD_INT 1
49058: DIV
49059: ST_TO_ADDR
// if number < 0 then
49060: LD_VAR 0 1
49064: PUSH
49065: LD_INT 0
49067: LESS
49068: IFFALSE 49078
// result := 0 ;
49070: LD_ADDR_VAR 0 2
49074: PUSH
49075: LD_INT 0
49077: ST_TO_ADDR
// end ;
49078: LD_VAR 0 2
49082: RET
// export function SortByClass ( units , class ) ; var un ; begin
49083: LD_INT 0
49085: PPUSH
49086: PPUSH
// if not units or not class then
49087: LD_VAR 0 1
49091: NOT
49092: PUSH
49093: LD_VAR 0 2
49097: NOT
49098: OR
49099: IFFALSE 49103
// exit ;
49101: GO 49198
// result := [ ] ;
49103: LD_ADDR_VAR 0 3
49107: PUSH
49108: EMPTY
49109: ST_TO_ADDR
// for un in units do
49110: LD_ADDR_VAR 0 4
49114: PUSH
49115: LD_VAR 0 1
49119: PUSH
49120: FOR_IN
49121: IFFALSE 49196
// if GetClass ( un ) = class then
49123: LD_VAR 0 4
49127: PPUSH
49128: CALL_OW 257
49132: PUSH
49133: LD_VAR 0 2
49137: EQUAL
49138: IFFALSE 49165
// result := Insert ( result , 1 , un ) else
49140: LD_ADDR_VAR 0 3
49144: PUSH
49145: LD_VAR 0 3
49149: PPUSH
49150: LD_INT 1
49152: PPUSH
49153: LD_VAR 0 4
49157: PPUSH
49158: CALL_OW 2
49162: ST_TO_ADDR
49163: GO 49194
// result := Replace ( result , result + 1 , un ) ;
49165: LD_ADDR_VAR 0 3
49169: PUSH
49170: LD_VAR 0 3
49174: PPUSH
49175: LD_VAR 0 3
49179: PUSH
49180: LD_INT 1
49182: PLUS
49183: PPUSH
49184: LD_VAR 0 4
49188: PPUSH
49189: CALL_OW 1
49193: ST_TO_ADDR
49194: GO 49120
49196: POP
49197: POP
// end ;
49198: LD_VAR 0 3
49202: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49203: LD_INT 0
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
// result := [ ] ;
49212: LD_ADDR_VAR 0 4
49216: PUSH
49217: EMPTY
49218: ST_TO_ADDR
// if x - r < 0 then
49219: LD_VAR 0 1
49223: PUSH
49224: LD_VAR 0 3
49228: MINUS
49229: PUSH
49230: LD_INT 0
49232: LESS
49233: IFFALSE 49245
// min_x := 0 else
49235: LD_ADDR_VAR 0 8
49239: PUSH
49240: LD_INT 0
49242: ST_TO_ADDR
49243: GO 49261
// min_x := x - r ;
49245: LD_ADDR_VAR 0 8
49249: PUSH
49250: LD_VAR 0 1
49254: PUSH
49255: LD_VAR 0 3
49259: MINUS
49260: ST_TO_ADDR
// if y - r < 0 then
49261: LD_VAR 0 2
49265: PUSH
49266: LD_VAR 0 3
49270: MINUS
49271: PUSH
49272: LD_INT 0
49274: LESS
49275: IFFALSE 49287
// min_y := 0 else
49277: LD_ADDR_VAR 0 7
49281: PUSH
49282: LD_INT 0
49284: ST_TO_ADDR
49285: GO 49303
// min_y := y - r ;
49287: LD_ADDR_VAR 0 7
49291: PUSH
49292: LD_VAR 0 2
49296: PUSH
49297: LD_VAR 0 3
49301: MINUS
49302: ST_TO_ADDR
// max_x := x + r ;
49303: LD_ADDR_VAR 0 9
49307: PUSH
49308: LD_VAR 0 1
49312: PUSH
49313: LD_VAR 0 3
49317: PLUS
49318: ST_TO_ADDR
// max_y := y + r ;
49319: LD_ADDR_VAR 0 10
49323: PUSH
49324: LD_VAR 0 2
49328: PUSH
49329: LD_VAR 0 3
49333: PLUS
49334: ST_TO_ADDR
// for _x = min_x to max_x do
49335: LD_ADDR_VAR 0 5
49339: PUSH
49340: DOUBLE
49341: LD_VAR 0 8
49345: DEC
49346: ST_TO_ADDR
49347: LD_VAR 0 9
49351: PUSH
49352: FOR_TO
49353: IFFALSE 49454
// for _y = min_y to max_y do
49355: LD_ADDR_VAR 0 6
49359: PUSH
49360: DOUBLE
49361: LD_VAR 0 7
49365: DEC
49366: ST_TO_ADDR
49367: LD_VAR 0 10
49371: PUSH
49372: FOR_TO
49373: IFFALSE 49450
// begin if not ValidHex ( _x , _y ) then
49375: LD_VAR 0 5
49379: PPUSH
49380: LD_VAR 0 6
49384: PPUSH
49385: CALL_OW 488
49389: NOT
49390: IFFALSE 49394
// continue ;
49392: GO 49372
// if GetResourceTypeXY ( _x , _y ) then
49394: LD_VAR 0 5
49398: PPUSH
49399: LD_VAR 0 6
49403: PPUSH
49404: CALL_OW 283
49408: IFFALSE 49448
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49410: LD_ADDR_VAR 0 4
49414: PUSH
49415: LD_VAR 0 4
49419: PPUSH
49420: LD_VAR 0 4
49424: PUSH
49425: LD_INT 1
49427: PLUS
49428: PPUSH
49429: LD_VAR 0 5
49433: PUSH
49434: LD_VAR 0 6
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PPUSH
49443: CALL_OW 1
49447: ST_TO_ADDR
// end ;
49448: GO 49372
49450: POP
49451: POP
49452: GO 49352
49454: POP
49455: POP
// end ;
49456: LD_VAR 0 4
49460: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49461: LD_INT 0
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
// if not units then
49471: LD_VAR 0 1
49475: NOT
49476: IFFALSE 49480
// exit ;
49478: GO 50008
// result := UnitFilter ( units , [ f_ok ] ) ;
49480: LD_ADDR_VAR 0 3
49484: PUSH
49485: LD_VAR 0 1
49489: PPUSH
49490: LD_INT 50
49492: PUSH
49493: EMPTY
49494: LIST
49495: PPUSH
49496: CALL_OW 72
49500: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49501: LD_ADDR_VAR 0 8
49505: PUSH
49506: LD_VAR 0 1
49510: PUSH
49511: LD_INT 1
49513: ARRAY
49514: PPUSH
49515: CALL_OW 255
49519: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49520: LD_ADDR_VAR 0 10
49524: PUSH
49525: LD_INT 29
49527: PUSH
49528: LD_INT 91
49530: PUSH
49531: LD_INT 49
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// if not result then
49539: LD_VAR 0 3
49543: NOT
49544: IFFALSE 49548
// exit ;
49546: GO 50008
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49548: LD_ADDR_VAR 0 5
49552: PUSH
49553: LD_INT 81
49555: PUSH
49556: LD_VAR 0 8
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PPUSH
49565: CALL_OW 69
49569: ST_TO_ADDR
// for i in result do
49570: LD_ADDR_VAR 0 4
49574: PUSH
49575: LD_VAR 0 3
49579: PUSH
49580: FOR_IN
49581: IFFALSE 50006
// begin tag := GetTag ( i ) + 1 ;
49583: LD_ADDR_VAR 0 9
49587: PUSH
49588: LD_VAR 0 4
49592: PPUSH
49593: CALL_OW 110
49597: PUSH
49598: LD_INT 1
49600: PLUS
49601: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49602: LD_ADDR_VAR 0 7
49606: PUSH
49607: LD_VAR 0 4
49611: PPUSH
49612: CALL_OW 250
49616: PPUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: CALL_OW 251
49626: PPUSH
49627: LD_INT 4
49629: PPUSH
49630: CALL 49203 0 3
49634: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49635: LD_VAR 0 4
49639: PPUSH
49640: CALL_OW 247
49644: PUSH
49645: LD_INT 2
49647: EQUAL
49648: PUSH
49649: LD_VAR 0 7
49653: PUSH
49654: LD_INT 2
49656: GREATER
49657: AND
49658: PUSH
49659: LD_VAR 0 4
49663: PPUSH
49664: CALL_OW 264
49668: PUSH
49669: LD_VAR 0 10
49673: IN
49674: NOT
49675: AND
49676: IFFALSE 49715
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49678: LD_VAR 0 4
49682: PPUSH
49683: LD_VAR 0 7
49687: PUSH
49688: LD_INT 1
49690: ARRAY
49691: PUSH
49692: LD_INT 1
49694: ARRAY
49695: PPUSH
49696: LD_VAR 0 7
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: PUSH
49705: LD_INT 2
49707: ARRAY
49708: PPUSH
49709: CALL_OW 116
49713: GO 50004
// if path > tag then
49715: LD_VAR 0 2
49719: PUSH
49720: LD_VAR 0 9
49724: GREATER
49725: IFFALSE 49933
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49727: LD_ADDR_VAR 0 6
49731: PUSH
49732: LD_VAR 0 5
49736: PPUSH
49737: LD_INT 91
49739: PUSH
49740: LD_VAR 0 4
49744: PUSH
49745: LD_INT 8
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: PPUSH
49753: CALL_OW 72
49757: ST_TO_ADDR
// if nearEnemy then
49758: LD_VAR 0 6
49762: IFFALSE 49831
// begin if GetWeapon ( i ) = ru_time_lapser then
49764: LD_VAR 0 4
49768: PPUSH
49769: CALL_OW 264
49773: PUSH
49774: LD_INT 49
49776: EQUAL
49777: IFFALSE 49805
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49779: LD_VAR 0 4
49783: PPUSH
49784: LD_VAR 0 6
49788: PPUSH
49789: LD_VAR 0 4
49793: PPUSH
49794: CALL_OW 74
49798: PPUSH
49799: CALL_OW 112
49803: GO 49829
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49805: LD_VAR 0 4
49809: PPUSH
49810: LD_VAR 0 6
49814: PPUSH
49815: LD_VAR 0 4
49819: PPUSH
49820: CALL_OW 74
49824: PPUSH
49825: CALL 51079 0 2
// end else
49829: GO 49931
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49831: LD_VAR 0 4
49835: PPUSH
49836: LD_VAR 0 2
49840: PUSH
49841: LD_VAR 0 9
49845: ARRAY
49846: PUSH
49847: LD_INT 1
49849: ARRAY
49850: PPUSH
49851: LD_VAR 0 2
49855: PUSH
49856: LD_VAR 0 9
49860: ARRAY
49861: PUSH
49862: LD_INT 2
49864: ARRAY
49865: PPUSH
49866: CALL_OW 297
49870: PUSH
49871: LD_INT 6
49873: GREATER
49874: IFFALSE 49917
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49876: LD_VAR 0 4
49880: PPUSH
49881: LD_VAR 0 2
49885: PUSH
49886: LD_VAR 0 9
49890: ARRAY
49891: PUSH
49892: LD_INT 1
49894: ARRAY
49895: PPUSH
49896: LD_VAR 0 2
49900: PUSH
49901: LD_VAR 0 9
49905: ARRAY
49906: PUSH
49907: LD_INT 2
49909: ARRAY
49910: PPUSH
49911: CALL_OW 114
49915: GO 49931
// SetTag ( i , tag ) ;
49917: LD_VAR 0 4
49921: PPUSH
49922: LD_VAR 0 9
49926: PPUSH
49927: CALL_OW 109
// end else
49931: GO 50004
// if enemy then
49933: LD_VAR 0 5
49937: IFFALSE 50004
// begin if GetWeapon ( i ) = ru_time_lapser then
49939: LD_VAR 0 4
49943: PPUSH
49944: CALL_OW 264
49948: PUSH
49949: LD_INT 49
49951: EQUAL
49952: IFFALSE 49980
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49954: LD_VAR 0 4
49958: PPUSH
49959: LD_VAR 0 5
49963: PPUSH
49964: LD_VAR 0 4
49968: PPUSH
49969: CALL_OW 74
49973: PPUSH
49974: CALL_OW 112
49978: GO 50004
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49980: LD_VAR 0 4
49984: PPUSH
49985: LD_VAR 0 5
49989: PPUSH
49990: LD_VAR 0 4
49994: PPUSH
49995: CALL_OW 74
49999: PPUSH
50000: CALL 51079 0 2
// end ; end ;
50004: GO 49580
50006: POP
50007: POP
// end ;
50008: LD_VAR 0 3
50012: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50013: LD_INT 0
50015: PPUSH
50016: PPUSH
50017: PPUSH
// if not unit or IsInUnit ( unit ) then
50018: LD_VAR 0 1
50022: NOT
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 310
50033: OR
50034: IFFALSE 50038
// exit ;
50036: GO 50129
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50038: LD_ADDR_VAR 0 4
50042: PUSH
50043: LD_VAR 0 1
50047: PPUSH
50048: CALL_OW 250
50052: PPUSH
50053: LD_VAR 0 2
50057: PPUSH
50058: LD_INT 1
50060: PPUSH
50061: CALL_OW 272
50065: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50066: LD_ADDR_VAR 0 5
50070: PUSH
50071: LD_VAR 0 1
50075: PPUSH
50076: CALL_OW 251
50080: PPUSH
50081: LD_VAR 0 2
50085: PPUSH
50086: LD_INT 1
50088: PPUSH
50089: CALL_OW 273
50093: ST_TO_ADDR
// if ValidHex ( x , y ) then
50094: LD_VAR 0 4
50098: PPUSH
50099: LD_VAR 0 5
50103: PPUSH
50104: CALL_OW 488
50108: IFFALSE 50129
// ComTurnXY ( unit , x , y ) ;
50110: LD_VAR 0 1
50114: PPUSH
50115: LD_VAR 0 4
50119: PPUSH
50120: LD_VAR 0 5
50124: PPUSH
50125: CALL_OW 118
// end ;
50129: LD_VAR 0 3
50133: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50134: LD_INT 0
50136: PPUSH
50137: PPUSH
// result := false ;
50138: LD_ADDR_VAR 0 3
50142: PUSH
50143: LD_INT 0
50145: ST_TO_ADDR
// if not units then
50146: LD_VAR 0 2
50150: NOT
50151: IFFALSE 50155
// exit ;
50153: GO 50200
// for i in units do
50155: LD_ADDR_VAR 0 4
50159: PUSH
50160: LD_VAR 0 2
50164: PUSH
50165: FOR_IN
50166: IFFALSE 50198
// if See ( side , i ) then
50168: LD_VAR 0 1
50172: PPUSH
50173: LD_VAR 0 4
50177: PPUSH
50178: CALL_OW 292
50182: IFFALSE 50196
// begin result := true ;
50184: LD_ADDR_VAR 0 3
50188: PUSH
50189: LD_INT 1
50191: ST_TO_ADDR
// exit ;
50192: POP
50193: POP
50194: GO 50200
// end ;
50196: GO 50165
50198: POP
50199: POP
// end ;
50200: LD_VAR 0 3
50204: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50205: LD_INT 0
50207: PPUSH
50208: PPUSH
50209: PPUSH
50210: PPUSH
// if not unit or not points then
50211: LD_VAR 0 1
50215: NOT
50216: PUSH
50217: LD_VAR 0 2
50221: NOT
50222: OR
50223: IFFALSE 50227
// exit ;
50225: GO 50317
// dist := 99999 ;
50227: LD_ADDR_VAR 0 5
50231: PUSH
50232: LD_INT 99999
50234: ST_TO_ADDR
// for i in points do
50235: LD_ADDR_VAR 0 4
50239: PUSH
50240: LD_VAR 0 2
50244: PUSH
50245: FOR_IN
50246: IFFALSE 50315
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50248: LD_ADDR_VAR 0 6
50252: PUSH
50253: LD_VAR 0 1
50257: PPUSH
50258: LD_VAR 0 4
50262: PUSH
50263: LD_INT 1
50265: ARRAY
50266: PPUSH
50267: LD_VAR 0 4
50271: PUSH
50272: LD_INT 2
50274: ARRAY
50275: PPUSH
50276: CALL_OW 297
50280: ST_TO_ADDR
// if tmpDist < dist then
50281: LD_VAR 0 6
50285: PUSH
50286: LD_VAR 0 5
50290: LESS
50291: IFFALSE 50313
// begin result := i ;
50293: LD_ADDR_VAR 0 3
50297: PUSH
50298: LD_VAR 0 4
50302: ST_TO_ADDR
// dist := tmpDist ;
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 6
50312: ST_TO_ADDR
// end ; end ;
50313: GO 50245
50315: POP
50316: POP
// end ;
50317: LD_VAR 0 3
50321: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50322: LD_INT 0
50324: PPUSH
// uc_side := side ;
50325: LD_ADDR_OWVAR 20
50329: PUSH
50330: LD_VAR 0 1
50334: ST_TO_ADDR
// uc_nation := 3 ;
50335: LD_ADDR_OWVAR 21
50339: PUSH
50340: LD_INT 3
50342: ST_TO_ADDR
// vc_chassis := 25 ;
50343: LD_ADDR_OWVAR 37
50347: PUSH
50348: LD_INT 25
50350: ST_TO_ADDR
// vc_engine := engine_siberite ;
50351: LD_ADDR_OWVAR 39
50355: PUSH
50356: LD_INT 3
50358: ST_TO_ADDR
// vc_control := control_computer ;
50359: LD_ADDR_OWVAR 38
50363: PUSH
50364: LD_INT 3
50366: ST_TO_ADDR
// vc_weapon := 59 ;
50367: LD_ADDR_OWVAR 40
50371: PUSH
50372: LD_INT 59
50374: ST_TO_ADDR
// result := CreateVehicle ;
50375: LD_ADDR_VAR 0 5
50379: PUSH
50380: CALL_OW 45
50384: ST_TO_ADDR
// SetDir ( result , d ) ;
50385: LD_VAR 0 5
50389: PPUSH
50390: LD_VAR 0 4
50394: PPUSH
50395: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50399: LD_VAR 0 5
50403: PPUSH
50404: LD_VAR 0 2
50408: PPUSH
50409: LD_VAR 0 3
50413: PPUSH
50414: LD_INT 0
50416: PPUSH
50417: CALL_OW 48
// end ;
50421: LD_VAR 0 5
50425: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50426: LD_INT 0
50428: PPUSH
50429: PPUSH
50430: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50431: LD_ADDR_VAR 0 2
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50454: LD_VAR 0 1
50458: NOT
50459: PUSH
50460: LD_VAR 0 1
50464: PPUSH
50465: CALL_OW 264
50469: PUSH
50470: LD_INT 12
50472: PUSH
50473: LD_INT 51
50475: PUSH
50476: LD_INT 32
50478: PUSH
50479: LD_INT 89
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: IN
50488: NOT
50489: OR
50490: IFFALSE 50494
// exit ;
50492: GO 50592
// for i := 1 to 3 do
50494: LD_ADDR_VAR 0 3
50498: PUSH
50499: DOUBLE
50500: LD_INT 1
50502: DEC
50503: ST_TO_ADDR
50504: LD_INT 3
50506: PUSH
50507: FOR_TO
50508: IFFALSE 50590
// begin tmp := GetCargo ( cargo , i ) ;
50510: LD_ADDR_VAR 0 4
50514: PUSH
50515: LD_VAR 0 1
50519: PPUSH
50520: LD_VAR 0 3
50524: PPUSH
50525: CALL_OW 289
50529: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50530: LD_ADDR_VAR 0 2
50534: PUSH
50535: LD_VAR 0 2
50539: PPUSH
50540: LD_VAR 0 3
50544: PPUSH
50545: LD_VAR 0 4
50549: PPUSH
50550: CALL_OW 1
50554: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50555: LD_ADDR_VAR 0 2
50559: PUSH
50560: LD_VAR 0 2
50564: PPUSH
50565: LD_INT 4
50567: PPUSH
50568: LD_VAR 0 2
50572: PUSH
50573: LD_INT 4
50575: ARRAY
50576: PUSH
50577: LD_VAR 0 4
50581: PLUS
50582: PPUSH
50583: CALL_OW 1
50587: ST_TO_ADDR
// end ;
50588: GO 50507
50590: POP
50591: POP
// end ;
50592: LD_VAR 0 2
50596: RET
// export function Length ( array ) ; begin
50597: LD_INT 0
50599: PPUSH
// result := array + 0 ;
50600: LD_ADDR_VAR 0 2
50604: PUSH
50605: LD_VAR 0 1
50609: PUSH
50610: LD_INT 0
50612: PLUS
50613: ST_TO_ADDR
// end ;
50614: LD_VAR 0 2
50618: RET
// export function PrepareArray ( array ) ; begin
50619: LD_INT 0
50621: PPUSH
// result := array diff 0 ;
50622: LD_ADDR_VAR 0 2
50626: PUSH
50627: LD_VAR 0 1
50631: PUSH
50632: LD_INT 0
50634: DIFF
50635: ST_TO_ADDR
// if not result [ 1 ] then
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: NOT
50645: IFFALSE 50665
// result := Delete ( result , 1 ) ;
50647: LD_ADDR_VAR 0 2
50651: PUSH
50652: LD_VAR 0 2
50656: PPUSH
50657: LD_INT 1
50659: PPUSH
50660: CALL_OW 3
50664: ST_TO_ADDR
// end ;
50665: LD_VAR 0 2
50669: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50670: LD_INT 0
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
// sibRocketRange := 25 ;
50676: LD_ADDR_VAR 0 6
50680: PUSH
50681: LD_INT 25
50683: ST_TO_ADDR
// result := false ;
50684: LD_ADDR_VAR 0 4
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
// for i := 0 to 5 do
50692: LD_ADDR_VAR 0 5
50696: PUSH
50697: DOUBLE
50698: LD_INT 0
50700: DEC
50701: ST_TO_ADDR
50702: LD_INT 5
50704: PUSH
50705: FOR_TO
50706: IFFALSE 50773
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50708: LD_VAR 0 1
50712: PPUSH
50713: LD_VAR 0 5
50717: PPUSH
50718: LD_VAR 0 6
50722: PPUSH
50723: CALL_OW 272
50727: PPUSH
50728: LD_VAR 0 2
50732: PPUSH
50733: LD_VAR 0 5
50737: PPUSH
50738: LD_VAR 0 6
50742: PPUSH
50743: CALL_OW 273
50747: PPUSH
50748: LD_VAR 0 3
50752: PPUSH
50753: CALL_OW 309
50757: IFFALSE 50771
// begin result := true ;
50759: LD_ADDR_VAR 0 4
50763: PUSH
50764: LD_INT 1
50766: ST_TO_ADDR
// exit ;
50767: POP
50768: POP
50769: GO 50775
// end ;
50771: GO 50705
50773: POP
50774: POP
// end ;
50775: LD_VAR 0 4
50779: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50780: LD_INT 0
50782: PPUSH
50783: PPUSH
50784: PPUSH
// if btype = b_depot then
50785: LD_VAR 0 2
50789: PUSH
50790: LD_INT 0
50792: EQUAL
50793: IFFALSE 50805
// begin result := true ;
50795: LD_ADDR_VAR 0 3
50799: PUSH
50800: LD_INT 1
50802: ST_TO_ADDR
// exit ;
50803: GO 50921
// end ; pom := GetBase ( depot ) ;
50805: LD_ADDR_VAR 0 4
50809: PUSH
50810: LD_VAR 0 1
50814: PPUSH
50815: CALL_OW 274
50819: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50820: LD_ADDR_VAR 0 5
50824: PUSH
50825: LD_VAR 0 2
50829: PPUSH
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 248
50839: PPUSH
50840: CALL_OW 450
50844: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50845: LD_ADDR_VAR 0 3
50849: PUSH
50850: LD_VAR 0 4
50854: PPUSH
50855: LD_INT 1
50857: PPUSH
50858: CALL_OW 275
50862: PUSH
50863: LD_VAR 0 5
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: GREATEREQUAL
50872: PUSH
50873: LD_VAR 0 4
50877: PPUSH
50878: LD_INT 2
50880: PPUSH
50881: CALL_OW 275
50885: PUSH
50886: LD_VAR 0 5
50890: PUSH
50891: LD_INT 2
50893: ARRAY
50894: GREATEREQUAL
50895: AND
50896: PUSH
50897: LD_VAR 0 4
50901: PPUSH
50902: LD_INT 3
50904: PPUSH
50905: CALL_OW 275
50909: PUSH
50910: LD_VAR 0 5
50914: PUSH
50915: LD_INT 3
50917: ARRAY
50918: GREATEREQUAL
50919: AND
50920: ST_TO_ADDR
// end ;
50921: LD_VAR 0 3
50925: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50926: LD_INT 0
50928: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50929: LD_VAR 0 1
50933: PPUSH
50934: LD_VAR 0 2
50938: PPUSH
50939: LD_INT 0
50941: PPUSH
50942: LD_INT 0
50944: PPUSH
50945: LD_INT 1
50947: PPUSH
50948: LD_INT 0
50950: PPUSH
50951: CALL_OW 587
// end ;
50955: LD_VAR 0 3
50959: RET
// export function CenterOnNow ( unit ) ; begin
50960: LD_INT 0
50962: PPUSH
// result := IsInUnit ( unit ) ;
50963: LD_ADDR_VAR 0 2
50967: PUSH
50968: LD_VAR 0 1
50972: PPUSH
50973: CALL_OW 310
50977: ST_TO_ADDR
// if not result then
50978: LD_VAR 0 2
50982: NOT
50983: IFFALSE 50995
// result := unit ;
50985: LD_ADDR_VAR 0 2
50989: PUSH
50990: LD_VAR 0 1
50994: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50995: LD_VAR 0 1
50999: PPUSH
51000: CALL_OW 87
// end ;
51004: LD_VAR 0 2
51008: RET
// export function ComMoveHex ( unit , hex ) ; begin
51009: LD_INT 0
51011: PPUSH
// if not hex then
51012: LD_VAR 0 2
51016: NOT
51017: IFFALSE 51021
// exit ;
51019: GO 51074
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51021: LD_VAR 0 2
51025: PUSH
51026: LD_INT 1
51028: ARRAY
51029: PPUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 2
51037: ARRAY
51038: PPUSH
51039: CALL_OW 428
51043: IFFALSE 51047
// exit ;
51045: GO 51074
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51047: LD_VAR 0 1
51051: PPUSH
51052: LD_VAR 0 2
51056: PUSH
51057: LD_INT 1
51059: ARRAY
51060: PPUSH
51061: LD_VAR 0 2
51065: PUSH
51066: LD_INT 2
51068: ARRAY
51069: PPUSH
51070: CALL_OW 111
// end ;
51074: LD_VAR 0 3
51078: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51079: LD_INT 0
51081: PPUSH
51082: PPUSH
51083: PPUSH
// if not unit or not enemy then
51084: LD_VAR 0 1
51088: NOT
51089: PUSH
51090: LD_VAR 0 2
51094: NOT
51095: OR
51096: IFFALSE 51100
// exit ;
51098: GO 51224
// x := GetX ( enemy ) ;
51100: LD_ADDR_VAR 0 4
51104: PUSH
51105: LD_VAR 0 2
51109: PPUSH
51110: CALL_OW 250
51114: ST_TO_ADDR
// y := GetY ( enemy ) ;
51115: LD_ADDR_VAR 0 5
51119: PUSH
51120: LD_VAR 0 2
51124: PPUSH
51125: CALL_OW 251
51129: ST_TO_ADDR
// if ValidHex ( x , y ) then
51130: LD_VAR 0 4
51134: PPUSH
51135: LD_VAR 0 5
51139: PPUSH
51140: CALL_OW 488
51144: IFFALSE 51224
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51146: LD_VAR 0 2
51150: PPUSH
51151: CALL_OW 247
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: IN
51166: PUSH
51167: LD_VAR 0 1
51171: PPUSH
51172: CALL_OW 255
51176: PPUSH
51177: LD_VAR 0 2
51181: PPUSH
51182: CALL_OW 292
51186: OR
51187: IFFALSE 51205
// ComAttackUnit ( unit , enemy ) else
51189: LD_VAR 0 1
51193: PPUSH
51194: LD_VAR 0 2
51198: PPUSH
51199: CALL_OW 115
51203: GO 51224
// ComAgressiveMove ( unit , x , y ) ;
51205: LD_VAR 0 1
51209: PPUSH
51210: LD_VAR 0 4
51214: PPUSH
51215: LD_VAR 0 5
51219: PPUSH
51220: CALL_OW 114
// end ;
51224: LD_VAR 0 3
51228: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51229: LD_INT 0
51231: PPUSH
51232: PPUSH
51233: PPUSH
// list := AreaToList ( area , 0 ) ;
51234: LD_ADDR_VAR 0 5
51238: PUSH
51239: LD_VAR 0 1
51243: PPUSH
51244: LD_INT 0
51246: PPUSH
51247: CALL_OW 517
51251: ST_TO_ADDR
// if not list then
51252: LD_VAR 0 5
51256: NOT
51257: IFFALSE 51261
// exit ;
51259: GO 51391
// if all then
51261: LD_VAR 0 2
51265: IFFALSE 51353
// begin for i := 1 to list [ 1 ] do
51267: LD_ADDR_VAR 0 4
51271: PUSH
51272: DOUBLE
51273: LD_INT 1
51275: DEC
51276: ST_TO_ADDR
51277: LD_VAR 0 5
51281: PUSH
51282: LD_INT 1
51284: ARRAY
51285: PUSH
51286: FOR_TO
51287: IFFALSE 51349
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51289: LD_ADDR_VAR 0 3
51293: PUSH
51294: LD_VAR 0 3
51298: PPUSH
51299: LD_VAR 0 3
51303: PUSH
51304: LD_INT 1
51306: PLUS
51307: PPUSH
51308: LD_VAR 0 5
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: PUSH
51317: LD_VAR 0 4
51321: ARRAY
51322: PUSH
51323: LD_VAR 0 5
51327: PUSH
51328: LD_INT 2
51330: ARRAY
51331: PUSH
51332: LD_VAR 0 4
51336: ARRAY
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PPUSH
51342: CALL_OW 1
51346: ST_TO_ADDR
51347: GO 51286
51349: POP
51350: POP
// exit ;
51351: GO 51391
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51353: LD_ADDR_VAR 0 3
51357: PUSH
51358: LD_VAR 0 5
51362: PUSH
51363: LD_INT 1
51365: ARRAY
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PUSH
51371: LD_VAR 0 5
51375: PUSH
51376: LD_INT 2
51378: ARRAY
51379: PUSH
51380: LD_INT 1
51382: ARRAY
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: ST_TO_ADDR
// end ;
51391: LD_VAR 0 3
51395: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51396: LD_INT 0
51398: PPUSH
51399: PPUSH
// list := AreaToList ( area , 0 ) ;
51400: LD_ADDR_VAR 0 4
51404: PUSH
51405: LD_VAR 0 1
51409: PPUSH
51410: LD_INT 0
51412: PPUSH
51413: CALL_OW 517
51417: ST_TO_ADDR
// if not list then
51418: LD_VAR 0 4
51422: NOT
51423: IFFALSE 51427
// exit ;
51425: GO 51468
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51427: LD_ADDR_VAR 0 3
51431: PUSH
51432: LD_VAR 0 4
51436: PUSH
51437: LD_INT 1
51439: ARRAY
51440: PUSH
51441: LD_INT 1
51443: ARRAY
51444: PUSH
51445: LD_VAR 0 4
51449: PUSH
51450: LD_INT 2
51452: ARRAY
51453: PUSH
51454: LD_INT 1
51456: ARRAY
51457: PUSH
51458: LD_VAR 0 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: ST_TO_ADDR
// end ;
51468: LD_VAR 0 3
51472: RET
// export function First ( array ) ; begin
51473: LD_INT 0
51475: PPUSH
// if not array then
51476: LD_VAR 0 1
51480: NOT
51481: IFFALSE 51485
// exit ;
51483: GO 51499
// result := array [ 1 ] ;
51485: LD_ADDR_VAR 0 2
51489: PUSH
51490: LD_VAR 0 1
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: ST_TO_ADDR
// end ;
51499: LD_VAR 0 2
51503: RET
// export function Last ( array ) ; begin
51504: LD_INT 0
51506: PPUSH
// if not array then
51507: LD_VAR 0 1
51511: NOT
51512: IFFALSE 51516
// exit ;
51514: GO 51532
// result := array [ array ] ;
51516: LD_ADDR_VAR 0 2
51520: PUSH
51521: LD_VAR 0 1
51525: PUSH
51526: LD_VAR 0 1
51530: ARRAY
51531: ST_TO_ADDR
// end ;
51532: LD_VAR 0 2
51536: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51537: LD_INT 0
51539: PPUSH
51540: PPUSH
// result := [ ] ;
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: EMPTY
51547: ST_TO_ADDR
// if not array then
51548: LD_VAR 0 1
51552: NOT
51553: IFFALSE 51557
// exit ;
51555: GO 51669
// for i := 1 to array do
51557: LD_ADDR_VAR 0 6
51561: PUSH
51562: DOUBLE
51563: LD_INT 1
51565: DEC
51566: ST_TO_ADDR
51567: LD_VAR 0 1
51571: PUSH
51572: FOR_TO
51573: IFFALSE 51667
// if array [ i ] [ index ] = value then
51575: LD_VAR 0 1
51579: PUSH
51580: LD_VAR 0 6
51584: ARRAY
51585: PUSH
51586: LD_VAR 0 2
51590: ARRAY
51591: PUSH
51592: LD_VAR 0 3
51596: EQUAL
51597: IFFALSE 51665
// begin if indexColumn then
51599: LD_VAR 0 4
51603: IFFALSE 51639
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51605: LD_ADDR_VAR 0 5
51609: PUSH
51610: LD_VAR 0 5
51614: PPUSH
51615: LD_VAR 0 1
51619: PUSH
51620: LD_VAR 0 6
51624: ARRAY
51625: PUSH
51626: LD_VAR 0 4
51630: ARRAY
51631: PPUSH
51632: CALL 46857 0 2
51636: ST_TO_ADDR
51637: GO 51665
// result := Join ( result , array [ i ] ) ;
51639: LD_ADDR_VAR 0 5
51643: PUSH
51644: LD_VAR 0 5
51648: PPUSH
51649: LD_VAR 0 1
51653: PUSH
51654: LD_VAR 0 6
51658: ARRAY
51659: PPUSH
51660: CALL 46857 0 2
51664: ST_TO_ADDR
// end ;
51665: GO 51572
51667: POP
51668: POP
// end ;
51669: LD_VAR 0 5
51673: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51674: LD_INT 0
51676: PPUSH
// if not vehicles or not parkingPoint then
51677: LD_VAR 0 1
51681: NOT
51682: PUSH
51683: LD_VAR 0 2
51687: NOT
51688: OR
51689: IFFALSE 51693
// exit ;
51691: GO 51791
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51693: LD_ADDR_VAR 0 1
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: LD_INT 50
51705: PUSH
51706: EMPTY
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 92
51714: PUSH
51715: LD_VAR 0 2
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_INT 2
51731: ARRAY
51732: PUSH
51733: LD_INT 8
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PPUSH
51750: CALL_OW 72
51754: ST_TO_ADDR
// if not vehicles then
51755: LD_VAR 0 1
51759: NOT
51760: IFFALSE 51764
// exit ;
51762: GO 51791
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51764: LD_VAR 0 1
51768: PPUSH
51769: LD_VAR 0 2
51773: PUSH
51774: LD_INT 1
51776: ARRAY
51777: PPUSH
51778: LD_VAR 0 2
51782: PUSH
51783: LD_INT 2
51785: ARRAY
51786: PPUSH
51787: CALL_OW 111
// end ;
51791: LD_VAR 0 3
51795: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51796: LD_INT 0
51798: PPUSH
51799: PPUSH
51800: PPUSH
// if not side or not area then
51801: LD_VAR 0 1
51805: NOT
51806: PUSH
51807: LD_VAR 0 2
51811: NOT
51812: OR
51813: IFFALSE 51817
// exit ;
51815: GO 51936
// tmp := AreaToList ( area , 0 ) ;
51817: LD_ADDR_VAR 0 5
51821: PUSH
51822: LD_VAR 0 2
51826: PPUSH
51827: LD_INT 0
51829: PPUSH
51830: CALL_OW 517
51834: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51835: LD_ADDR_VAR 0 4
51839: PUSH
51840: DOUBLE
51841: LD_INT 1
51843: DEC
51844: ST_TO_ADDR
51845: LD_VAR 0 5
51849: PUSH
51850: LD_INT 1
51852: ARRAY
51853: PUSH
51854: FOR_TO
51855: IFFALSE 51934
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51857: LD_VAR 0 5
51861: PUSH
51862: LD_INT 1
51864: ARRAY
51865: PUSH
51866: LD_VAR 0 4
51870: ARRAY
51871: PPUSH
51872: LD_VAR 0 5
51876: PUSH
51877: LD_INT 2
51879: ARRAY
51880: PUSH
51881: LD_VAR 0 4
51885: ARRAY
51886: PPUSH
51887: CALL_OW 351
51891: IFFALSE 51932
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51893: LD_VAR 0 5
51897: PUSH
51898: LD_INT 1
51900: ARRAY
51901: PUSH
51902: LD_VAR 0 4
51906: ARRAY
51907: PPUSH
51908: LD_VAR 0 5
51912: PUSH
51913: LD_INT 2
51915: ARRAY
51916: PUSH
51917: LD_VAR 0 4
51921: ARRAY
51922: PPUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: CALL_OW 244
// end ;
51932: GO 51854
51934: POP
51935: POP
// end ; end_of_file
51936: LD_VAR 0 3
51940: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
51941: LD_VAR 0 1
51945: PUSH
51946: LD_INT 200
51948: DOUBLE
51949: GREATEREQUAL
51950: IFFALSE 51958
51952: LD_INT 299
51954: DOUBLE
51955: LESSEQUAL
51956: IFTRUE 51960
51958: GO 51992
51960: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
51961: LD_VAR 0 1
51965: PPUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: LD_VAR 0 3
51975: PPUSH
51976: LD_VAR 0 4
51980: PPUSH
51981: LD_VAR 0 5
51985: PPUSH
51986: CALL 52689 0 5
51990: GO 52069
51992: LD_INT 300
51994: DOUBLE
51995: GREATEREQUAL
51996: IFFALSE 52004
51998: LD_INT 399
52000: DOUBLE
52001: LESSEQUAL
52002: IFTRUE 52006
52004: GO 52068
52006: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_VAR 0 2
52016: PPUSH
52017: LD_VAR 0 3
52021: PPUSH
52022: LD_VAR 0 4
52026: PPUSH
52027: LD_VAR 0 5
52031: PPUSH
52032: LD_VAR 0 6
52036: PPUSH
52037: LD_VAR 0 7
52041: PPUSH
52042: LD_VAR 0 8
52046: PPUSH
52047: LD_VAR 0 9
52051: PPUSH
52052: LD_VAR 0 10
52056: PPUSH
52057: LD_VAR 0 11
52061: PPUSH
52062: CALL 59016 0 11
52066: GO 52069
52068: POP
// end ;
52069: PPOPN 11
52071: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52072: LD_VAR 0 1
52076: PPUSH
52077: LD_VAR 0 2
52081: PPUSH
52082: LD_VAR 0 3
52086: PPUSH
52087: LD_VAR 0 4
52091: PPUSH
52092: LD_VAR 0 5
52096: PPUSH
52097: CALL 52154 0 5
// end ; end_of_file
52101: PPOPN 5
52103: END
// export function SOS_UnitDestroyed ( un ) ; begin
52104: LD_INT 0
52106: PPUSH
// ComRadiation ( un ) ;
52107: LD_VAR 0 1
52111: PPUSH
52112: CALL 53093 0 1
// end ;
52116: LD_VAR 0 2
52120: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52121: LD_INT 0
52123: PPUSH
// ComRadiation ( un ) ;
52124: LD_VAR 0 1
52128: PPUSH
52129: CALL 53093 0 1
// end ;
52133: LD_VAR 0 2
52137: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52138: LD_INT 0
52140: PPUSH
// end ;
52141: LD_VAR 0 4
52145: RET
// export function SOS_Command ( cmd ) ; begin
52146: LD_INT 0
52148: PPUSH
// end ;
52149: LD_VAR 0 2
52153: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52154: LD_INT 0
52156: PPUSH
// end ;
52157: LD_VAR 0 6
52161: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
52162: LD_INT 0
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
// if not vehicle or not factory then
52169: LD_VAR 0 1
52173: NOT
52174: PUSH
52175: LD_VAR 0 2
52179: NOT
52180: OR
52181: IFFALSE 52185
// exit ;
52183: GO 52684
// if not factoryWaypoints then
52185: LD_EXP 54
52189: NOT
52190: IFFALSE 52194
// exit ;
52192: GO 52684
// for i := 1 to Count ( factoryWaypoints ) do
52194: LD_ADDR_VAR 0 4
52198: PUSH
52199: DOUBLE
52200: LD_INT 1
52202: DEC
52203: ST_TO_ADDR
52204: LD_EXP 54
52208: PPUSH
52209: CALL 11248 0 1
52213: PUSH
52214: FOR_TO
52215: IFFALSE 52682
// if factoryWaypoints [ i ] [ 2 ] = factory then
52217: LD_EXP 54
52221: PUSH
52222: LD_VAR 0 4
52226: ARRAY
52227: PUSH
52228: LD_INT 2
52230: ARRAY
52231: PUSH
52232: LD_VAR 0 2
52236: EQUAL
52237: IFFALSE 52680
// begin if GetControl ( vehicle ) = control_manual then
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 263
52248: PUSH
52249: LD_INT 1
52251: EQUAL
52252: IFFALSE 52563
// begin driver := IsDrivenBy ( vehicle ) ;
52254: LD_ADDR_VAR 0 6
52258: PUSH
52259: LD_VAR 0 1
52263: PPUSH
52264: CALL_OW 311
52268: ST_TO_ADDR
// tag := GetTag ( driver ) ;
52269: LD_ADDR_VAR 0 5
52273: PUSH
52274: LD_VAR 0 6
52278: PPUSH
52279: CALL_OW 110
52283: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
52284: LD_VAR 0 5
52288: PUSH
52289: LD_INT 501
52291: EQUAL
52292: PUSH
52293: LD_VAR 0 1
52297: PPUSH
52298: CALL_OW 110
52302: PUSH
52303: LD_INT 501
52305: EQUAL
52306: OR
52307: IFFALSE 52313
// exit ;
52309: POP
52310: POP
52311: GO 52684
// if not HasTask ( driver ) then
52313: LD_VAR 0 6
52317: PPUSH
52318: CALL_OW 314
52322: NOT
52323: IFFALSE 52561
// begin SetTag ( driver , tDriver ) ;
52325: LD_VAR 0 6
52329: PPUSH
52330: LD_INT 501
52332: PPUSH
52333: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
52337: LD_VAR 0 1
52341: PPUSH
52342: LD_INT 501
52344: PPUSH
52345: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52349: LD_ADDR_VAR 0 7
52353: PUSH
52354: LD_EXP 54
52358: PUSH
52359: LD_VAR 0 4
52363: ARRAY
52364: PUSH
52365: LD_INT 3
52367: ARRAY
52368: PPUSH
52369: LD_EXP 54
52373: PUSH
52374: LD_VAR 0 4
52378: ARRAY
52379: PUSH
52380: LD_INT 4
52382: ARRAY
52383: PPUSH
52384: CALL_OW 428
52388: ST_TO_ADDR
// if hex then
52389: LD_VAR 0 7
52393: IFFALSE 52411
// ComMoveUnit ( driver , hex ) else
52395: LD_VAR 0 6
52399: PPUSH
52400: LD_VAR 0 7
52404: PPUSH
52405: CALL_OW 112
52409: GO 52450
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52411: LD_VAR 0 6
52415: PPUSH
52416: LD_EXP 54
52420: PUSH
52421: LD_VAR 0 4
52425: ARRAY
52426: PUSH
52427: LD_INT 3
52429: ARRAY
52430: PPUSH
52431: LD_EXP 54
52435: PUSH
52436: LD_VAR 0 4
52440: ARRAY
52441: PUSH
52442: LD_INT 4
52444: ARRAY
52445: PPUSH
52446: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52450: LD_VAR 0 6
52454: PPUSH
52455: CALL_OW 181
// if Multiplayer then
52459: LD_OWVAR 4
52463: IFFALSE 52512
// begin repeat wait ( 10 ) ;
52465: LD_INT 10
52467: PPUSH
52468: CALL_OW 67
// until not IsInUnit ( driver ) ;
52472: LD_VAR 0 6
52476: PPUSH
52477: CALL_OW 310
52481: NOT
52482: IFFALSE 52465
// if not HasTask ( driver ) then
52484: LD_VAR 0 6
52488: PPUSH
52489: CALL_OW 314
52493: NOT
52494: IFFALSE 52510
// ComEnterUnit ( driver , factory ) ;
52496: LD_VAR 0 6
52500: PPUSH
52501: LD_VAR 0 2
52505: PPUSH
52506: CALL_OW 120
// end else
52510: GO 52526
// AddComEnterUnit ( driver , factory ) ;
52512: LD_VAR 0 6
52516: PPUSH
52517: LD_VAR 0 2
52521: PPUSH
52522: CALL_OW 180
// wait ( 0 0$1 ) ;
52526: LD_INT 35
52528: PPUSH
52529: CALL_OW 67
// SetTag ( driver , tag ) ;
52533: LD_VAR 0 6
52537: PPUSH
52538: LD_VAR 0 5
52542: PPUSH
52543: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
52547: LD_VAR 0 1
52551: PPUSH
52552: LD_INT 0
52554: PPUSH
52555: CALL_OW 109
// break ;
52559: GO 52682
// end ; end else
52561: GO 52680
// if GetControl ( vehicle ) = control_remote then
52563: LD_VAR 0 1
52567: PPUSH
52568: CALL_OW 263
52572: PUSH
52573: LD_INT 2
52575: EQUAL
52576: IFFALSE 52639
// begin wait ( 0 0$2 ) ;
52578: LD_INT 70
52580: PPUSH
52581: CALL_OW 67
// if Connect ( vehicle ) then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL 17454 0 1
52594: IFFALSE 52635
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52596: LD_VAR 0 1
52600: PPUSH
52601: LD_EXP 54
52605: PUSH
52606: LD_VAR 0 4
52610: ARRAY
52611: PUSH
52612: LD_INT 3
52614: ARRAY
52615: PPUSH
52616: LD_EXP 54
52620: PUSH
52621: LD_VAR 0 4
52625: ARRAY
52626: PUSH
52627: LD_INT 4
52629: ARRAY
52630: PPUSH
52631: CALL_OW 171
// break ;
52635: GO 52682
// end else
52637: GO 52680
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52639: LD_VAR 0 1
52643: PPUSH
52644: LD_EXP 54
52648: PUSH
52649: LD_VAR 0 4
52653: ARRAY
52654: PUSH
52655: LD_INT 3
52657: ARRAY
52658: PPUSH
52659: LD_EXP 54
52663: PUSH
52664: LD_VAR 0 4
52668: ARRAY
52669: PUSH
52670: LD_INT 4
52672: ARRAY
52673: PPUSH
52674: CALL_OW 171
// break ;
52678: GO 52682
// end ; end ;
52680: GO 52214
52682: POP
52683: POP
// end ;
52684: LD_VAR 0 3
52688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52689: LD_INT 0
52691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52692: LD_VAR 0 1
52696: PUSH
52697: LD_INT 250
52699: EQUAL
52700: PUSH
52701: LD_VAR 0 2
52705: PPUSH
52706: CALL_OW 264
52710: PUSH
52711: LD_INT 81
52713: EQUAL
52714: AND
52715: IFFALSE 52736
// MinerPlaceMine ( unit , x , y ) ;
52717: LD_VAR 0 2
52721: PPUSH
52722: LD_VAR 0 4
52726: PPUSH
52727: LD_VAR 0 5
52731: PPUSH
52732: CALL 55828 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52736: LD_VAR 0 1
52740: PUSH
52741: LD_INT 251
52743: EQUAL
52744: PUSH
52745: LD_VAR 0 2
52749: PPUSH
52750: CALL_OW 264
52754: PUSH
52755: LD_INT 81
52757: EQUAL
52758: AND
52759: IFFALSE 52780
// MinerDetonateMine ( unit , x , y ) ;
52761: LD_VAR 0 2
52765: PPUSH
52766: LD_VAR 0 4
52770: PPUSH
52771: LD_VAR 0 5
52775: PPUSH
52776: CALL 56103 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52780: LD_VAR 0 1
52784: PUSH
52785: LD_INT 252
52787: EQUAL
52788: PUSH
52789: LD_VAR 0 2
52793: PPUSH
52794: CALL_OW 264
52798: PUSH
52799: LD_INT 81
52801: EQUAL
52802: AND
52803: IFFALSE 52824
// MinerCreateMinefield ( unit , x , y ) ;
52805: LD_VAR 0 2
52809: PPUSH
52810: LD_VAR 0 4
52814: PPUSH
52815: LD_VAR 0 5
52819: PPUSH
52820: CALL 56520 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52824: LD_VAR 0 1
52828: PUSH
52829: LD_INT 253
52831: EQUAL
52832: PUSH
52833: LD_VAR 0 2
52837: PPUSH
52838: CALL_OW 257
52842: PUSH
52843: LD_INT 5
52845: EQUAL
52846: AND
52847: IFFALSE 52868
// ComBinocular ( unit , x , y ) ;
52849: LD_VAR 0 2
52853: PPUSH
52854: LD_VAR 0 4
52858: PPUSH
52859: LD_VAR 0 5
52863: PPUSH
52864: CALL 56889 0 3
// if selectedUnit then
52868: LD_VAR 0 3
52872: IFFALSE 52928
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52874: LD_VAR 0 1
52878: PUSH
52879: LD_INT 254
52881: EQUAL
52882: PUSH
52883: LD_VAR 0 2
52887: PPUSH
52888: CALL_OW 264
52892: PUSH
52893: LD_INT 99
52895: EQUAL
52896: AND
52897: PUSH
52898: LD_VAR 0 3
52902: PPUSH
52903: CALL_OW 263
52907: PUSH
52908: LD_INT 3
52910: EQUAL
52911: AND
52912: IFFALSE 52928
// HackDestroyVehicle ( unit , selectedUnit ) ;
52914: LD_VAR 0 2
52918: PPUSH
52919: LD_VAR 0 3
52923: PPUSH
52924: CALL 55192 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52928: LD_VAR 0 1
52932: PUSH
52933: LD_INT 255
52935: EQUAL
52936: PUSH
52937: LD_VAR 0 2
52941: PPUSH
52942: CALL_OW 264
52946: PUSH
52947: LD_INT 14
52949: PUSH
52950: LD_INT 53
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: IN
52957: AND
52958: PUSH
52959: LD_VAR 0 4
52963: PPUSH
52964: LD_VAR 0 5
52968: PPUSH
52969: CALL_OW 488
52973: AND
52974: IFFALSE 52998
// CutTreeXYR ( unit , x , y , 12 ) ;
52976: LD_VAR 0 2
52980: PPUSH
52981: LD_VAR 0 4
52985: PPUSH
52986: LD_VAR 0 5
52990: PPUSH
52991: LD_INT 12
52993: PPUSH
52994: CALL 53189 0 4
// if cmd = 256 then
52998: LD_VAR 0 1
53002: PUSH
53003: LD_INT 256
53005: EQUAL
53006: IFFALSE 53027
// SetFactoryWaypoint ( unit , x , y ) ;
53008: LD_VAR 0 2
53012: PPUSH
53013: LD_VAR 0 4
53017: PPUSH
53018: LD_VAR 0 5
53022: PPUSH
53023: CALL 59024 0 3
// if cmd = 257 then
53027: LD_VAR 0 1
53031: PUSH
53032: LD_INT 257
53034: EQUAL
53035: IFFALSE 53056
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53037: LD_VAR 0 2
53041: PPUSH
53042: LD_VAR 0 4
53046: PPUSH
53047: LD_VAR 0 5
53051: PPUSH
53052: CALL 59514 0 3
// if cmd = 258 then
53056: LD_VAR 0 1
53060: PUSH
53061: LD_INT 258
53063: EQUAL
53064: IFFALSE 53088
// BurnTreeXYR ( unit , x , y , 8 ) ;
53066: LD_VAR 0 2
53070: PPUSH
53071: LD_VAR 0 4
53075: PPUSH
53076: LD_VAR 0 5
53080: PPUSH
53081: LD_INT 8
53083: PPUSH
53084: CALL 53583 0 4
// end ;
53088: LD_VAR 0 6
53092: RET
// export function ComRadiation ( un ) ; var eff ; begin
53093: LD_INT 0
53095: PPUSH
53096: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 264
53106: PUSH
53107: LD_INT 91
53109: NONEQUAL
53110: IFFALSE 53114
// exit ;
53112: GO 53184
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53114: LD_INT 68
53116: PPUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 255
53126: PPUSH
53127: CALL_OW 321
53131: PUSH
53132: LD_INT 2
53134: EQUAL
53135: IFFALSE 53147
// eff := 70 else
53137: LD_ADDR_VAR 0 3
53141: PUSH
53142: LD_INT 70
53144: ST_TO_ADDR
53145: GO 53155
// eff := 30 ;
53147: LD_ADDR_VAR 0 3
53151: PUSH
53152: LD_INT 30
53154: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 250
53164: PPUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 251
53174: PPUSH
53175: LD_VAR 0 3
53179: PPUSH
53180: CALL_OW 495
// end ;
53184: LD_VAR 0 2
53188: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53189: LD_INT 0
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53200: LD_VAR 0 1
53204: PPUSH
53205: CALL_OW 302
53209: NOT
53210: PUSH
53211: LD_VAR 0 2
53215: PPUSH
53216: LD_VAR 0 3
53220: PPUSH
53221: CALL_OW 488
53225: NOT
53226: OR
53227: PUSH
53228: LD_VAR 0 4
53232: NOT
53233: OR
53234: IFFALSE 53238
// exit ;
53236: GO 53578
// list := [ ] ;
53238: LD_ADDR_VAR 0 13
53242: PUSH
53243: EMPTY
53244: ST_TO_ADDR
// if x - r < 0 then
53245: LD_VAR 0 2
53249: PUSH
53250: LD_VAR 0 4
53254: MINUS
53255: PUSH
53256: LD_INT 0
53258: LESS
53259: IFFALSE 53271
// min_x := 0 else
53261: LD_ADDR_VAR 0 7
53265: PUSH
53266: LD_INT 0
53268: ST_TO_ADDR
53269: GO 53287
// min_x := x - r ;
53271: LD_ADDR_VAR 0 7
53275: PUSH
53276: LD_VAR 0 2
53280: PUSH
53281: LD_VAR 0 4
53285: MINUS
53286: ST_TO_ADDR
// if y - r < 0 then
53287: LD_VAR 0 3
53291: PUSH
53292: LD_VAR 0 4
53296: MINUS
53297: PUSH
53298: LD_INT 0
53300: LESS
53301: IFFALSE 53313
// min_y := 0 else
53303: LD_ADDR_VAR 0 8
53307: PUSH
53308: LD_INT 0
53310: ST_TO_ADDR
53311: GO 53329
// min_y := y - r ;
53313: LD_ADDR_VAR 0 8
53317: PUSH
53318: LD_VAR 0 3
53322: PUSH
53323: LD_VAR 0 4
53327: MINUS
53328: ST_TO_ADDR
// max_x := x + r ;
53329: LD_ADDR_VAR 0 9
53333: PUSH
53334: LD_VAR 0 2
53338: PUSH
53339: LD_VAR 0 4
53343: PLUS
53344: ST_TO_ADDR
// max_y := y + r ;
53345: LD_ADDR_VAR 0 10
53349: PUSH
53350: LD_VAR 0 3
53354: PUSH
53355: LD_VAR 0 4
53359: PLUS
53360: ST_TO_ADDR
// for _x = min_x to max_x do
53361: LD_ADDR_VAR 0 11
53365: PUSH
53366: DOUBLE
53367: LD_VAR 0 7
53371: DEC
53372: ST_TO_ADDR
53373: LD_VAR 0 9
53377: PUSH
53378: FOR_TO
53379: IFFALSE 53496
// for _y = min_y to max_y do
53381: LD_ADDR_VAR 0 12
53385: PUSH
53386: DOUBLE
53387: LD_VAR 0 8
53391: DEC
53392: ST_TO_ADDR
53393: LD_VAR 0 10
53397: PUSH
53398: FOR_TO
53399: IFFALSE 53492
// begin if not ValidHex ( _x , _y ) then
53401: LD_VAR 0 11
53405: PPUSH
53406: LD_VAR 0 12
53410: PPUSH
53411: CALL_OW 488
53415: NOT
53416: IFFALSE 53420
// continue ;
53418: GO 53398
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53420: LD_VAR 0 11
53424: PPUSH
53425: LD_VAR 0 12
53429: PPUSH
53430: CALL_OW 351
53434: PUSH
53435: LD_VAR 0 11
53439: PPUSH
53440: LD_VAR 0 12
53444: PPUSH
53445: CALL_OW 554
53449: AND
53450: IFFALSE 53490
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53452: LD_ADDR_VAR 0 13
53456: PUSH
53457: LD_VAR 0 13
53461: PPUSH
53462: LD_VAR 0 13
53466: PUSH
53467: LD_INT 1
53469: PLUS
53470: PPUSH
53471: LD_VAR 0 11
53475: PUSH
53476: LD_VAR 0 12
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PPUSH
53485: CALL_OW 2
53489: ST_TO_ADDR
// end ;
53490: GO 53398
53492: POP
53493: POP
53494: GO 53378
53496: POP
53497: POP
// if not list then
53498: LD_VAR 0 13
53502: NOT
53503: IFFALSE 53507
// exit ;
53505: GO 53578
// for i in list do
53507: LD_ADDR_VAR 0 6
53511: PUSH
53512: LD_VAR 0 13
53516: PUSH
53517: FOR_IN
53518: IFFALSE 53576
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53520: LD_VAR 0 1
53524: PPUSH
53525: LD_STRING M
53527: PUSH
53528: LD_VAR 0 6
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: PUSH
53537: LD_VAR 0 6
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: PPUSH
53570: CALL_OW 447
53574: GO 53517
53576: POP
53577: POP
// end ;
53578: LD_VAR 0 5
53582: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53583: LD_INT 0
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53595: LD_VAR 0 1
53599: PPUSH
53600: CALL_OW 302
53604: NOT
53605: PUSH
53606: LD_VAR 0 2
53610: PPUSH
53611: LD_VAR 0 3
53615: PPUSH
53616: CALL_OW 488
53620: NOT
53621: OR
53622: PUSH
53623: LD_VAR 0 4
53627: NOT
53628: OR
53629: IFFALSE 53633
// exit ;
53631: GO 54146
// list := [ ] ;
53633: LD_ADDR_VAR 0 13
53637: PUSH
53638: EMPTY
53639: ST_TO_ADDR
// if x - r < 0 then
53640: LD_VAR 0 2
53644: PUSH
53645: LD_VAR 0 4
53649: MINUS
53650: PUSH
53651: LD_INT 0
53653: LESS
53654: IFFALSE 53666
// min_x := 0 else
53656: LD_ADDR_VAR 0 7
53660: PUSH
53661: LD_INT 0
53663: ST_TO_ADDR
53664: GO 53682
// min_x := x - r ;
53666: LD_ADDR_VAR 0 7
53670: PUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_VAR 0 4
53680: MINUS
53681: ST_TO_ADDR
// if y - r < 0 then
53682: LD_VAR 0 3
53686: PUSH
53687: LD_VAR 0 4
53691: MINUS
53692: PUSH
53693: LD_INT 0
53695: LESS
53696: IFFALSE 53708
// min_y := 0 else
53698: LD_ADDR_VAR 0 8
53702: PUSH
53703: LD_INT 0
53705: ST_TO_ADDR
53706: GO 53724
// min_y := y - r ;
53708: LD_ADDR_VAR 0 8
53712: PUSH
53713: LD_VAR 0 3
53717: PUSH
53718: LD_VAR 0 4
53722: MINUS
53723: ST_TO_ADDR
// max_x := x + r ;
53724: LD_ADDR_VAR 0 9
53728: PUSH
53729: LD_VAR 0 2
53733: PUSH
53734: LD_VAR 0 4
53738: PLUS
53739: ST_TO_ADDR
// max_y := y + r ;
53740: LD_ADDR_VAR 0 10
53744: PUSH
53745: LD_VAR 0 3
53749: PUSH
53750: LD_VAR 0 4
53754: PLUS
53755: ST_TO_ADDR
// for _x = min_x to max_x do
53756: LD_ADDR_VAR 0 11
53760: PUSH
53761: DOUBLE
53762: LD_VAR 0 7
53766: DEC
53767: ST_TO_ADDR
53768: LD_VAR 0 9
53772: PUSH
53773: FOR_TO
53774: IFFALSE 53891
// for _y = min_y to max_y do
53776: LD_ADDR_VAR 0 12
53780: PUSH
53781: DOUBLE
53782: LD_VAR 0 8
53786: DEC
53787: ST_TO_ADDR
53788: LD_VAR 0 10
53792: PUSH
53793: FOR_TO
53794: IFFALSE 53887
// begin if not ValidHex ( _x , _y ) then
53796: LD_VAR 0 11
53800: PPUSH
53801: LD_VAR 0 12
53805: PPUSH
53806: CALL_OW 488
53810: NOT
53811: IFFALSE 53815
// continue ;
53813: GO 53793
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53815: LD_VAR 0 11
53819: PPUSH
53820: LD_VAR 0 12
53824: PPUSH
53825: CALL_OW 351
53829: PUSH
53830: LD_VAR 0 11
53834: PPUSH
53835: LD_VAR 0 12
53839: PPUSH
53840: CALL_OW 554
53844: AND
53845: IFFALSE 53885
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53847: LD_ADDR_VAR 0 13
53851: PUSH
53852: LD_VAR 0 13
53856: PPUSH
53857: LD_VAR 0 13
53861: PUSH
53862: LD_INT 1
53864: PLUS
53865: PPUSH
53866: LD_VAR 0 11
53870: PUSH
53871: LD_VAR 0 12
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PPUSH
53880: CALL_OW 2
53884: ST_TO_ADDR
// end ;
53885: GO 53793
53887: POP
53888: POP
53889: GO 53773
53891: POP
53892: POP
// if not list then
53893: LD_VAR 0 13
53897: NOT
53898: IFFALSE 53902
// exit ;
53900: GO 54146
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
53902: LD_ADDR_VAR 0 13
53906: PUSH
53907: LD_VAR 0 1
53911: PPUSH
53912: LD_VAR 0 13
53916: PPUSH
53917: LD_INT 1
53919: PPUSH
53920: LD_INT 1
53922: PPUSH
53923: CALL 14596 0 4
53927: ST_TO_ADDR
// ComStop ( flame ) ;
53928: LD_VAR 0 1
53932: PPUSH
53933: CALL_OW 141
// for i in list do
53937: LD_ADDR_VAR 0 6
53941: PUSH
53942: LD_VAR 0 13
53946: PUSH
53947: FOR_IN
53948: IFFALSE 53979
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
53950: LD_VAR 0 1
53954: PPUSH
53955: LD_VAR 0 6
53959: PUSH
53960: LD_INT 1
53962: ARRAY
53963: PPUSH
53964: LD_VAR 0 6
53968: PUSH
53969: LD_INT 2
53971: ARRAY
53972: PPUSH
53973: CALL_OW 176
53977: GO 53947
53979: POP
53980: POP
// repeat wait ( 0 0$1 ) ;
53981: LD_INT 35
53983: PPUSH
53984: CALL_OW 67
// task := GetTaskList ( flame ) ;
53988: LD_ADDR_VAR 0 14
53992: PUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 437
54002: ST_TO_ADDR
// if not task then
54003: LD_VAR 0 14
54007: NOT
54008: IFFALSE 54012
// exit ;
54010: GO 54146
// if task [ 1 ] [ 1 ] <> | then
54012: LD_VAR 0 14
54016: PUSH
54017: LD_INT 1
54019: ARRAY
54020: PUSH
54021: LD_INT 1
54023: ARRAY
54024: PUSH
54025: LD_STRING |
54027: NONEQUAL
54028: IFFALSE 54032
// exit ;
54030: GO 54146
// _x := task [ 1 ] [ 2 ] ;
54032: LD_ADDR_VAR 0 11
54036: PUSH
54037: LD_VAR 0 14
54041: PUSH
54042: LD_INT 1
54044: ARRAY
54045: PUSH
54046: LD_INT 2
54048: ARRAY
54049: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54050: LD_ADDR_VAR 0 12
54054: PUSH
54055: LD_VAR 0 14
54059: PUSH
54060: LD_INT 1
54062: ARRAY
54063: PUSH
54064: LD_INT 3
54066: ARRAY
54067: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54068: LD_VAR 0 11
54072: PPUSH
54073: LD_VAR 0 12
54077: PPUSH
54078: CALL_OW 351
54082: NOT
54083: PUSH
54084: LD_VAR 0 11
54088: PPUSH
54089: LD_VAR 0 12
54093: PPUSH
54094: CALL_OW 554
54098: NOT
54099: OR
54100: IFFALSE 54134
// begin task := Delete ( task , 1 ) ;
54102: LD_ADDR_VAR 0 14
54106: PUSH
54107: LD_VAR 0 14
54111: PPUSH
54112: LD_INT 1
54114: PPUSH
54115: CALL_OW 3
54119: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54120: LD_VAR 0 1
54124: PPUSH
54125: LD_VAR 0 14
54129: PPUSH
54130: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54134: LD_VAR 0 1
54138: PPUSH
54139: CALL_OW 314
54143: NOT
54144: IFFALSE 53981
// end ;
54146: LD_VAR 0 5
54150: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54151: LD_EXP 43
54155: NOT
54156: IFFALSE 54206
54158: GO 54160
54160: DISABLE
// begin initHack := true ;
54161: LD_ADDR_EXP 43
54165: PUSH
54166: LD_INT 1
54168: ST_TO_ADDR
// hackTanks := [ ] ;
54169: LD_ADDR_EXP 44
54173: PUSH
54174: EMPTY
54175: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54176: LD_ADDR_EXP 45
54180: PUSH
54181: EMPTY
54182: ST_TO_ADDR
// hackLimit := 3 ;
54183: LD_ADDR_EXP 46
54187: PUSH
54188: LD_INT 3
54190: ST_TO_ADDR
// hackDist := 12 ;
54191: LD_ADDR_EXP 47
54195: PUSH
54196: LD_INT 12
54198: ST_TO_ADDR
// hackCounter := [ ] ;
54199: LD_ADDR_EXP 48
54203: PUSH
54204: EMPTY
54205: ST_TO_ADDR
// end ;
54206: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54207: LD_EXP 43
54211: PUSH
54212: LD_INT 34
54214: PUSH
54215: LD_INT 99
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PPUSH
54222: CALL_OW 69
54226: AND
54227: IFFALSE 54480
54229: GO 54231
54231: DISABLE
54232: LD_INT 0
54234: PPUSH
54235: PPUSH
// begin enable ;
54236: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54237: LD_ADDR_VAR 0 1
54241: PUSH
54242: LD_INT 34
54244: PUSH
54245: LD_INT 99
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PPUSH
54252: CALL_OW 69
54256: PUSH
54257: FOR_IN
54258: IFFALSE 54478
// begin if not i in hackTanks then
54260: LD_VAR 0 1
54264: PUSH
54265: LD_EXP 44
54269: IN
54270: NOT
54271: IFFALSE 54354
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54273: LD_ADDR_EXP 44
54277: PUSH
54278: LD_EXP 44
54282: PPUSH
54283: LD_EXP 44
54287: PUSH
54288: LD_INT 1
54290: PLUS
54291: PPUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: CALL_OW 1
54301: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54302: LD_ADDR_EXP 45
54306: PUSH
54307: LD_EXP 45
54311: PPUSH
54312: LD_EXP 45
54316: PUSH
54317: LD_INT 1
54319: PLUS
54320: PPUSH
54321: EMPTY
54322: PPUSH
54323: CALL_OW 1
54327: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54328: LD_ADDR_EXP 48
54332: PUSH
54333: LD_EXP 48
54337: PPUSH
54338: LD_EXP 48
54342: PUSH
54343: LD_INT 1
54345: PLUS
54346: PPUSH
54347: EMPTY
54348: PPUSH
54349: CALL_OW 1
54353: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL_OW 302
54363: NOT
54364: IFFALSE 54377
// begin HackUnlinkAll ( i ) ;
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL 54483 0 1
// continue ;
54375: GO 54257
// end ; HackCheckCapturedStatus ( i ) ;
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL 54926 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54386: LD_ADDR_VAR 0 2
54390: PUSH
54391: LD_INT 81
54393: PUSH
54394: LD_VAR 0 1
54398: PPUSH
54399: CALL_OW 255
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 33
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 91
54420: PUSH
54421: LD_VAR 0 1
54425: PUSH
54426: LD_EXP 47
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 50
54438: PUSH
54439: EMPTY
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: PPUSH
54448: CALL_OW 69
54452: ST_TO_ADDR
// if not tmp then
54453: LD_VAR 0 2
54457: NOT
54458: IFFALSE 54462
// continue ;
54460: GO 54257
// HackLink ( i , tmp ) ;
54462: LD_VAR 0 1
54466: PPUSH
54467: LD_VAR 0 2
54471: PPUSH
54472: CALL 54619 0 2
// end ;
54476: GO 54257
54478: POP
54479: POP
// end ;
54480: PPOPN 2
54482: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54483: LD_INT 0
54485: PPUSH
54486: PPUSH
54487: PPUSH
// if not hack in hackTanks then
54488: LD_VAR 0 1
54492: PUSH
54493: LD_EXP 44
54497: IN
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54614
// index := GetElementIndex ( hackTanks , hack ) ;
54503: LD_ADDR_VAR 0 4
54507: PUSH
54508: LD_EXP 44
54512: PPUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL 13893 0 2
54522: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54523: LD_EXP 45
54527: PUSH
54528: LD_VAR 0 4
54532: ARRAY
54533: IFFALSE 54614
// begin for i in hackTanksCaptured [ index ] do
54535: LD_ADDR_VAR 0 3
54539: PUSH
54540: LD_EXP 45
54544: PUSH
54545: LD_VAR 0 4
54549: ARRAY
54550: PUSH
54551: FOR_IN
54552: IFFALSE 54578
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54554: LD_VAR 0 3
54558: PUSH
54559: LD_INT 1
54561: ARRAY
54562: PPUSH
54563: LD_VAR 0 3
54567: PUSH
54568: LD_INT 2
54570: ARRAY
54571: PPUSH
54572: CALL_OW 235
54576: GO 54551
54578: POP
54579: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54580: LD_ADDR_EXP 45
54584: PUSH
54585: LD_EXP 45
54589: PPUSH
54590: LD_VAR 0 4
54594: PPUSH
54595: EMPTY
54596: PPUSH
54597: CALL_OW 1
54601: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54602: LD_VAR 0 1
54606: PPUSH
54607: LD_INT 0
54609: PPUSH
54610: CALL_OW 505
// end ; end ;
54614: LD_VAR 0 2
54618: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54619: LD_INT 0
54621: PPUSH
54622: PPUSH
54623: PPUSH
// if not hack in hackTanks or not vehicles then
54624: LD_VAR 0 1
54628: PUSH
54629: LD_EXP 44
54633: IN
54634: NOT
54635: PUSH
54636: LD_VAR 0 2
54640: NOT
54641: OR
54642: IFFALSE 54646
// exit ;
54644: GO 54921
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54646: LD_ADDR_VAR 0 2
54650: PUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: LD_VAR 0 2
54660: PPUSH
54661: LD_INT 1
54663: PPUSH
54664: LD_INT 1
54666: PPUSH
54667: CALL 14543 0 4
54671: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54672: LD_ADDR_VAR 0 5
54676: PUSH
54677: LD_EXP 44
54681: PPUSH
54682: LD_VAR 0 1
54686: PPUSH
54687: CALL 13893 0 2
54691: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54692: LD_EXP 45
54696: PUSH
54697: LD_VAR 0 5
54701: ARRAY
54702: PUSH
54703: LD_EXP 46
54707: LESS
54708: IFFALSE 54897
// begin for i := 1 to vehicles do
54710: LD_ADDR_VAR 0 4
54714: PUSH
54715: DOUBLE
54716: LD_INT 1
54718: DEC
54719: ST_TO_ADDR
54720: LD_VAR 0 2
54724: PUSH
54725: FOR_TO
54726: IFFALSE 54895
// begin if hackTanksCaptured [ index ] = hackLimit then
54728: LD_EXP 45
54732: PUSH
54733: LD_VAR 0 5
54737: ARRAY
54738: PUSH
54739: LD_EXP 46
54743: EQUAL
54744: IFFALSE 54748
// break ;
54746: GO 54895
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54748: LD_ADDR_EXP 48
54752: PUSH
54753: LD_EXP 48
54757: PPUSH
54758: LD_VAR 0 5
54762: PPUSH
54763: LD_EXP 48
54767: PUSH
54768: LD_VAR 0 5
54772: ARRAY
54773: PUSH
54774: LD_INT 1
54776: PLUS
54777: PPUSH
54778: CALL_OW 1
54782: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54783: LD_ADDR_EXP 45
54787: PUSH
54788: LD_EXP 45
54792: PPUSH
54793: LD_VAR 0 5
54797: PUSH
54798: LD_EXP 45
54802: PUSH
54803: LD_VAR 0 5
54807: ARRAY
54808: PUSH
54809: LD_INT 1
54811: PLUS
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PPUSH
54817: LD_VAR 0 2
54821: PUSH
54822: LD_VAR 0 4
54826: ARRAY
54827: PUSH
54828: LD_VAR 0 2
54832: PUSH
54833: LD_VAR 0 4
54837: ARRAY
54838: PPUSH
54839: CALL_OW 255
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PPUSH
54848: CALL 14108 0 3
54852: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54853: LD_VAR 0 2
54857: PUSH
54858: LD_VAR 0 4
54862: ARRAY
54863: PPUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 255
54873: PPUSH
54874: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54878: LD_VAR 0 2
54882: PUSH
54883: LD_VAR 0 4
54887: ARRAY
54888: PPUSH
54889: CALL_OW 141
// end ;
54893: GO 54725
54895: POP
54896: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54897: LD_VAR 0 1
54901: PPUSH
54902: LD_EXP 45
54906: PUSH
54907: LD_VAR 0 5
54911: ARRAY
54912: PUSH
54913: LD_INT 0
54915: PLUS
54916: PPUSH
54917: CALL_OW 505
// end ;
54921: LD_VAR 0 3
54925: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54926: LD_INT 0
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
// if not hack in hackTanks then
54932: LD_VAR 0 1
54936: PUSH
54937: LD_EXP 44
54941: IN
54942: NOT
54943: IFFALSE 54947
// exit ;
54945: GO 55187
// index := GetElementIndex ( hackTanks , hack ) ;
54947: LD_ADDR_VAR 0 4
54951: PUSH
54952: LD_EXP 44
54956: PPUSH
54957: LD_VAR 0 1
54961: PPUSH
54962: CALL 13893 0 2
54966: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54967: LD_ADDR_VAR 0 3
54971: PUSH
54972: DOUBLE
54973: LD_EXP 45
54977: PUSH
54978: LD_VAR 0 4
54982: ARRAY
54983: INC
54984: ST_TO_ADDR
54985: LD_INT 1
54987: PUSH
54988: FOR_DOWNTO
54989: IFFALSE 55161
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54991: LD_ADDR_VAR 0 5
54995: PUSH
54996: LD_EXP 45
55000: PUSH
55001: LD_VAR 0 4
55005: ARRAY
55006: PUSH
55007: LD_VAR 0 3
55011: ARRAY
55012: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55013: LD_VAR 0 5
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: PPUSH
55022: CALL_OW 302
55026: NOT
55027: PUSH
55028: LD_VAR 0 5
55032: PUSH
55033: LD_INT 1
55035: ARRAY
55036: PPUSH
55037: CALL_OW 255
55041: PUSH
55042: LD_VAR 0 1
55046: PPUSH
55047: CALL_OW 255
55051: NONEQUAL
55052: OR
55053: IFFALSE 55159
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55055: LD_VAR 0 5
55059: PUSH
55060: LD_INT 1
55062: ARRAY
55063: PPUSH
55064: CALL_OW 305
55068: PUSH
55069: LD_VAR 0 5
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PPUSH
55078: CALL_OW 255
55082: PUSH
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL_OW 255
55092: EQUAL
55093: AND
55094: IFFALSE 55118
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55096: LD_VAR 0 5
55100: PUSH
55101: LD_INT 1
55103: ARRAY
55104: PPUSH
55105: LD_VAR 0 5
55109: PUSH
55110: LD_INT 2
55112: ARRAY
55113: PPUSH
55114: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55118: LD_ADDR_EXP 45
55122: PUSH
55123: LD_EXP 45
55127: PPUSH
55128: LD_VAR 0 4
55132: PPUSH
55133: LD_EXP 45
55137: PUSH
55138: LD_VAR 0 4
55142: ARRAY
55143: PPUSH
55144: LD_VAR 0 3
55148: PPUSH
55149: CALL_OW 3
55153: PPUSH
55154: CALL_OW 1
55158: ST_TO_ADDR
// end ; end ;
55159: GO 54988
55161: POP
55162: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55163: LD_VAR 0 1
55167: PPUSH
55168: LD_EXP 45
55172: PUSH
55173: LD_VAR 0 4
55177: ARRAY
55178: PUSH
55179: LD_INT 0
55181: PLUS
55182: PPUSH
55183: CALL_OW 505
// end ;
55187: LD_VAR 0 2
55191: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
// if not hack in hackTanks then
55198: LD_VAR 0 1
55202: PUSH
55203: LD_EXP 44
55207: IN
55208: NOT
55209: IFFALSE 55213
// exit ;
55211: GO 55298
// index := GetElementIndex ( hackTanks , hack ) ;
55213: LD_ADDR_VAR 0 5
55217: PUSH
55218: LD_EXP 44
55222: PPUSH
55223: LD_VAR 0 1
55227: PPUSH
55228: CALL 13893 0 2
55232: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55233: LD_ADDR_VAR 0 4
55237: PUSH
55238: DOUBLE
55239: LD_INT 1
55241: DEC
55242: ST_TO_ADDR
55243: LD_EXP 45
55247: PUSH
55248: LD_VAR 0 5
55252: ARRAY
55253: PUSH
55254: FOR_TO
55255: IFFALSE 55296
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55257: LD_EXP 45
55261: PUSH
55262: LD_VAR 0 5
55266: ARRAY
55267: PUSH
55268: LD_VAR 0 4
55272: ARRAY
55273: PUSH
55274: LD_INT 1
55276: ARRAY
55277: PUSH
55278: LD_VAR 0 2
55282: EQUAL
55283: IFFALSE 55294
// KillUnit ( vehicle ) ;
55285: LD_VAR 0 2
55289: PPUSH
55290: CALL_OW 66
55294: GO 55254
55296: POP
55297: POP
// end ;
55298: LD_VAR 0 3
55302: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55303: LD_EXP 49
55307: NOT
55308: IFFALSE 55343
55310: GO 55312
55312: DISABLE
// begin initMiner := true ;
55313: LD_ADDR_EXP 49
55317: PUSH
55318: LD_INT 1
55320: ST_TO_ADDR
// minersList := [ ] ;
55321: LD_ADDR_EXP 50
55325: PUSH
55326: EMPTY
55327: ST_TO_ADDR
// minerMinesList := [ ] ;
55328: LD_ADDR_EXP 51
55332: PUSH
55333: EMPTY
55334: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55335: LD_ADDR_EXP 52
55339: PUSH
55340: LD_INT 5
55342: ST_TO_ADDR
// end ;
55343: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55344: LD_EXP 49
55348: PUSH
55349: LD_INT 34
55351: PUSH
55352: LD_INT 81
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PPUSH
55359: CALL_OW 69
55363: AND
55364: IFFALSE 55825
55366: GO 55368
55368: DISABLE
55369: LD_INT 0
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
// begin enable ;
55375: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55376: LD_ADDR_VAR 0 1
55380: PUSH
55381: LD_INT 34
55383: PUSH
55384: LD_INT 81
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PPUSH
55391: CALL_OW 69
55395: PUSH
55396: FOR_IN
55397: IFFALSE 55469
// begin if not i in minersList then
55399: LD_VAR 0 1
55403: PUSH
55404: LD_EXP 50
55408: IN
55409: NOT
55410: IFFALSE 55467
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55412: LD_ADDR_EXP 50
55416: PUSH
55417: LD_EXP 50
55421: PPUSH
55422: LD_EXP 50
55426: PUSH
55427: LD_INT 1
55429: PLUS
55430: PPUSH
55431: LD_VAR 0 1
55435: PPUSH
55436: CALL_OW 1
55440: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55441: LD_ADDR_EXP 51
55445: PUSH
55446: LD_EXP 51
55450: PPUSH
55451: LD_EXP 51
55455: PUSH
55456: LD_INT 1
55458: PLUS
55459: PPUSH
55460: EMPTY
55461: PPUSH
55462: CALL_OW 1
55466: ST_TO_ADDR
// end end ;
55467: GO 55396
55469: POP
55470: POP
// for i := minerMinesList downto 1 do
55471: LD_ADDR_VAR 0 1
55475: PUSH
55476: DOUBLE
55477: LD_EXP 51
55481: INC
55482: ST_TO_ADDR
55483: LD_INT 1
55485: PUSH
55486: FOR_DOWNTO
55487: IFFALSE 55823
// begin if IsLive ( minersList [ i ] ) then
55489: LD_EXP 50
55493: PUSH
55494: LD_VAR 0 1
55498: ARRAY
55499: PPUSH
55500: CALL_OW 300
55504: IFFALSE 55532
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55506: LD_EXP 50
55510: PUSH
55511: LD_VAR 0 1
55515: ARRAY
55516: PPUSH
55517: LD_EXP 51
55521: PUSH
55522: LD_VAR 0 1
55526: ARRAY
55527: PPUSH
55528: CALL_OW 505
// if not minerMinesList [ i ] then
55532: LD_EXP 51
55536: PUSH
55537: LD_VAR 0 1
55541: ARRAY
55542: NOT
55543: IFFALSE 55547
// continue ;
55545: GO 55486
// for j := minerMinesList [ i ] downto 1 do
55547: LD_ADDR_VAR 0 2
55551: PUSH
55552: DOUBLE
55553: LD_EXP 51
55557: PUSH
55558: LD_VAR 0 1
55562: ARRAY
55563: INC
55564: ST_TO_ADDR
55565: LD_INT 1
55567: PUSH
55568: FOR_DOWNTO
55569: IFFALSE 55819
// begin side := GetSide ( minersList [ i ] ) ;
55571: LD_ADDR_VAR 0 3
55575: PUSH
55576: LD_EXP 50
55580: PUSH
55581: LD_VAR 0 1
55585: ARRAY
55586: PPUSH
55587: CALL_OW 255
55591: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55592: LD_ADDR_VAR 0 4
55596: PUSH
55597: LD_EXP 51
55601: PUSH
55602: LD_VAR 0 1
55606: ARRAY
55607: PUSH
55608: LD_VAR 0 2
55612: ARRAY
55613: PUSH
55614: LD_INT 1
55616: ARRAY
55617: PPUSH
55618: LD_EXP 51
55622: PUSH
55623: LD_VAR 0 1
55627: ARRAY
55628: PUSH
55629: LD_VAR 0 2
55633: ARRAY
55634: PUSH
55635: LD_INT 2
55637: ARRAY
55638: PPUSH
55639: CALL_OW 428
55643: ST_TO_ADDR
// if not tmp then
55644: LD_VAR 0 4
55648: NOT
55649: IFFALSE 55653
// continue ;
55651: GO 55568
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55653: LD_VAR 0 4
55657: PUSH
55658: LD_INT 81
55660: PUSH
55661: LD_VAR 0 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PPUSH
55670: CALL_OW 69
55674: IN
55675: PUSH
55676: LD_EXP 51
55680: PUSH
55681: LD_VAR 0 1
55685: ARRAY
55686: PUSH
55687: LD_VAR 0 2
55691: ARRAY
55692: PUSH
55693: LD_INT 1
55695: ARRAY
55696: PPUSH
55697: LD_EXP 51
55701: PUSH
55702: LD_VAR 0 1
55706: ARRAY
55707: PUSH
55708: LD_VAR 0 2
55712: ARRAY
55713: PUSH
55714: LD_INT 2
55716: ARRAY
55717: PPUSH
55718: CALL_OW 458
55722: AND
55723: IFFALSE 55817
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55725: LD_EXP 51
55729: PUSH
55730: LD_VAR 0 1
55734: ARRAY
55735: PUSH
55736: LD_VAR 0 2
55740: ARRAY
55741: PUSH
55742: LD_INT 1
55744: ARRAY
55745: PPUSH
55746: LD_EXP 51
55750: PUSH
55751: LD_VAR 0 1
55755: ARRAY
55756: PUSH
55757: LD_VAR 0 2
55761: ARRAY
55762: PUSH
55763: LD_INT 2
55765: ARRAY
55766: PPUSH
55767: LD_VAR 0 3
55771: PPUSH
55772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55776: LD_ADDR_EXP 51
55780: PUSH
55781: LD_EXP 51
55785: PPUSH
55786: LD_VAR 0 1
55790: PPUSH
55791: LD_EXP 51
55795: PUSH
55796: LD_VAR 0 1
55800: ARRAY
55801: PPUSH
55802: LD_VAR 0 2
55806: PPUSH
55807: CALL_OW 3
55811: PPUSH
55812: CALL_OW 1
55816: ST_TO_ADDR
// end ; end ;
55817: GO 55568
55819: POP
55820: POP
// end ;
55821: GO 55486
55823: POP
55824: POP
// end ;
55825: PPOPN 4
55827: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55828: LD_INT 0
55830: PPUSH
55831: PPUSH
// result := false ;
55832: LD_ADDR_VAR 0 4
55836: PUSH
55837: LD_INT 0
55839: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55840: LD_VAR 0 1
55844: PPUSH
55845: CALL_OW 264
55849: PUSH
55850: LD_INT 81
55852: EQUAL
55853: NOT
55854: IFFALSE 55858
// exit ;
55856: GO 56098
// index := GetElementIndex ( minersList , unit ) ;
55858: LD_ADDR_VAR 0 5
55862: PUSH
55863: LD_EXP 50
55867: PPUSH
55868: LD_VAR 0 1
55872: PPUSH
55873: CALL 13893 0 2
55877: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55878: LD_EXP 51
55882: PUSH
55883: LD_VAR 0 5
55887: ARRAY
55888: PUSH
55889: LD_EXP 52
55893: GREATEREQUAL
55894: IFFALSE 55898
// exit ;
55896: GO 56098
// ComMoveXY ( unit , x , y ) ;
55898: LD_VAR 0 1
55902: PPUSH
55903: LD_VAR 0 2
55907: PPUSH
55908: LD_VAR 0 3
55912: PPUSH
55913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55917: LD_INT 35
55919: PPUSH
55920: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55924: LD_VAR 0 1
55928: PPUSH
55929: LD_VAR 0 2
55933: PPUSH
55934: LD_VAR 0 3
55938: PPUSH
55939: CALL 45654 0 3
55943: NOT
55944: PUSH
55945: LD_VAR 0 1
55949: PPUSH
55950: CALL_OW 314
55954: AND
55955: IFFALSE 55959
// exit ;
55957: GO 56098
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55959: LD_VAR 0 2
55963: PPUSH
55964: LD_VAR 0 3
55968: PPUSH
55969: CALL_OW 428
55973: PUSH
55974: LD_VAR 0 1
55978: EQUAL
55979: PUSH
55980: LD_VAR 0 1
55984: PPUSH
55985: CALL_OW 314
55989: NOT
55990: AND
55991: IFFALSE 55917
// PlaySoundXY ( x , y , PlantMine ) ;
55993: LD_VAR 0 2
55997: PPUSH
55998: LD_VAR 0 3
56002: PPUSH
56003: LD_STRING PlantMine
56005: PPUSH
56006: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56010: LD_VAR 0 2
56014: PPUSH
56015: LD_VAR 0 3
56019: PPUSH
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 255
56029: PPUSH
56030: LD_INT 0
56032: PPUSH
56033: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56037: LD_ADDR_EXP 51
56041: PUSH
56042: LD_EXP 51
56046: PPUSH
56047: LD_VAR 0 5
56051: PUSH
56052: LD_EXP 51
56056: PUSH
56057: LD_VAR 0 5
56061: ARRAY
56062: PUSH
56063: LD_INT 1
56065: PLUS
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PPUSH
56071: LD_VAR 0 2
56075: PUSH
56076: LD_VAR 0 3
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PPUSH
56085: CALL 14108 0 3
56089: ST_TO_ADDR
// result := true ;
56090: LD_ADDR_VAR 0 4
56094: PUSH
56095: LD_INT 1
56097: ST_TO_ADDR
// end ;
56098: LD_VAR 0 4
56102: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56103: LD_INT 0
56105: PPUSH
56106: PPUSH
56107: PPUSH
// if not unit in minersList then
56108: LD_VAR 0 1
56112: PUSH
56113: LD_EXP 50
56117: IN
56118: NOT
56119: IFFALSE 56123
// exit ;
56121: GO 56515
// index := GetElementIndex ( minersList , unit ) ;
56123: LD_ADDR_VAR 0 6
56127: PUSH
56128: LD_EXP 50
56132: PPUSH
56133: LD_VAR 0 1
56137: PPUSH
56138: CALL 13893 0 2
56142: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56143: LD_ADDR_VAR 0 5
56147: PUSH
56148: DOUBLE
56149: LD_EXP 51
56153: PUSH
56154: LD_VAR 0 6
56158: ARRAY
56159: INC
56160: ST_TO_ADDR
56161: LD_INT 1
56163: PUSH
56164: FOR_DOWNTO
56165: IFFALSE 56326
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56167: LD_EXP 51
56171: PUSH
56172: LD_VAR 0 6
56176: ARRAY
56177: PUSH
56178: LD_VAR 0 5
56182: ARRAY
56183: PUSH
56184: LD_INT 1
56186: ARRAY
56187: PUSH
56188: LD_VAR 0 2
56192: EQUAL
56193: PUSH
56194: LD_EXP 51
56198: PUSH
56199: LD_VAR 0 6
56203: ARRAY
56204: PUSH
56205: LD_VAR 0 5
56209: ARRAY
56210: PUSH
56211: LD_INT 2
56213: ARRAY
56214: PUSH
56215: LD_VAR 0 3
56219: EQUAL
56220: AND
56221: IFFALSE 56324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56223: LD_EXP 51
56227: PUSH
56228: LD_VAR 0 6
56232: ARRAY
56233: PUSH
56234: LD_VAR 0 5
56238: ARRAY
56239: PUSH
56240: LD_INT 1
56242: ARRAY
56243: PPUSH
56244: LD_EXP 51
56248: PUSH
56249: LD_VAR 0 6
56253: ARRAY
56254: PUSH
56255: LD_VAR 0 5
56259: ARRAY
56260: PUSH
56261: LD_INT 2
56263: ARRAY
56264: PPUSH
56265: LD_VAR 0 1
56269: PPUSH
56270: CALL_OW 255
56274: PPUSH
56275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56279: LD_ADDR_EXP 51
56283: PUSH
56284: LD_EXP 51
56288: PPUSH
56289: LD_VAR 0 6
56293: PPUSH
56294: LD_EXP 51
56298: PUSH
56299: LD_VAR 0 6
56303: ARRAY
56304: PPUSH
56305: LD_VAR 0 5
56309: PPUSH
56310: CALL_OW 3
56314: PPUSH
56315: CALL_OW 1
56319: ST_TO_ADDR
// exit ;
56320: POP
56321: POP
56322: GO 56515
// end ; end ;
56324: GO 56164
56326: POP
56327: POP
// for i := minerMinesList [ index ] downto 1 do
56328: LD_ADDR_VAR 0 5
56332: PUSH
56333: DOUBLE
56334: LD_EXP 51
56338: PUSH
56339: LD_VAR 0 6
56343: ARRAY
56344: INC
56345: ST_TO_ADDR
56346: LD_INT 1
56348: PUSH
56349: FOR_DOWNTO
56350: IFFALSE 56513
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56352: LD_EXP 51
56356: PUSH
56357: LD_VAR 0 6
56361: ARRAY
56362: PUSH
56363: LD_VAR 0 5
56367: ARRAY
56368: PUSH
56369: LD_INT 1
56371: ARRAY
56372: PPUSH
56373: LD_EXP 51
56377: PUSH
56378: LD_VAR 0 6
56382: ARRAY
56383: PUSH
56384: LD_VAR 0 5
56388: ARRAY
56389: PUSH
56390: LD_INT 2
56392: ARRAY
56393: PPUSH
56394: LD_VAR 0 2
56398: PPUSH
56399: LD_VAR 0 3
56403: PPUSH
56404: CALL_OW 298
56408: PUSH
56409: LD_INT 6
56411: LESS
56412: IFFALSE 56511
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56414: LD_EXP 51
56418: PUSH
56419: LD_VAR 0 6
56423: ARRAY
56424: PUSH
56425: LD_VAR 0 5
56429: ARRAY
56430: PUSH
56431: LD_INT 1
56433: ARRAY
56434: PPUSH
56435: LD_EXP 51
56439: PUSH
56440: LD_VAR 0 6
56444: ARRAY
56445: PUSH
56446: LD_VAR 0 5
56450: ARRAY
56451: PUSH
56452: LD_INT 2
56454: ARRAY
56455: PPUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 255
56465: PPUSH
56466: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56470: LD_ADDR_EXP 51
56474: PUSH
56475: LD_EXP 51
56479: PPUSH
56480: LD_VAR 0 6
56484: PPUSH
56485: LD_EXP 51
56489: PUSH
56490: LD_VAR 0 6
56494: ARRAY
56495: PPUSH
56496: LD_VAR 0 5
56500: PPUSH
56501: CALL_OW 3
56505: PPUSH
56506: CALL_OW 1
56510: ST_TO_ADDR
// end ; end ;
56511: GO 56349
56513: POP
56514: POP
// end ;
56515: LD_VAR 0 4
56519: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56520: LD_INT 0
56522: PPUSH
56523: PPUSH
56524: PPUSH
56525: PPUSH
56526: PPUSH
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56531: LD_VAR 0 1
56535: PPUSH
56536: CALL_OW 264
56540: PUSH
56541: LD_INT 81
56543: EQUAL
56544: NOT
56545: PUSH
56546: LD_VAR 0 1
56550: PUSH
56551: LD_EXP 50
56555: IN
56556: NOT
56557: OR
56558: IFFALSE 56562
// exit ;
56560: GO 56884
// index := GetElementIndex ( minersList , unit ) ;
56562: LD_ADDR_VAR 0 6
56566: PUSH
56567: LD_EXP 50
56571: PPUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: CALL 13893 0 2
56581: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56582: LD_ADDR_VAR 0 8
56586: PUSH
56587: LD_EXP 52
56591: PUSH
56592: LD_EXP 51
56596: PUSH
56597: LD_VAR 0 6
56601: ARRAY
56602: MINUS
56603: ST_TO_ADDR
// if not minesFreeAmount then
56604: LD_VAR 0 8
56608: NOT
56609: IFFALSE 56613
// exit ;
56611: GO 56884
// tmp := [ ] ;
56613: LD_ADDR_VAR 0 7
56617: PUSH
56618: EMPTY
56619: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56620: LD_ADDR_VAR 0 5
56624: PUSH
56625: DOUBLE
56626: LD_INT 1
56628: DEC
56629: ST_TO_ADDR
56630: LD_VAR 0 8
56634: PUSH
56635: FOR_TO
56636: IFFALSE 56831
// begin _d := rand ( 0 , 5 ) ;
56638: LD_ADDR_VAR 0 11
56642: PUSH
56643: LD_INT 0
56645: PPUSH
56646: LD_INT 5
56648: PPUSH
56649: CALL_OW 12
56653: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56654: LD_ADDR_VAR 0 12
56658: PUSH
56659: LD_INT 2
56661: PPUSH
56662: LD_INT 6
56664: PPUSH
56665: CALL_OW 12
56669: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56670: LD_ADDR_VAR 0 9
56674: PUSH
56675: LD_VAR 0 2
56679: PPUSH
56680: LD_VAR 0 11
56684: PPUSH
56685: LD_VAR 0 12
56689: PPUSH
56690: CALL_OW 272
56694: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56695: LD_ADDR_VAR 0 10
56699: PUSH
56700: LD_VAR 0 3
56704: PPUSH
56705: LD_VAR 0 11
56709: PPUSH
56710: LD_VAR 0 12
56714: PPUSH
56715: CALL_OW 273
56719: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56720: LD_VAR 0 9
56724: PPUSH
56725: LD_VAR 0 10
56729: PPUSH
56730: CALL_OW 488
56734: PUSH
56735: LD_VAR 0 9
56739: PUSH
56740: LD_VAR 0 10
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_VAR 0 7
56753: IN
56754: NOT
56755: AND
56756: PUSH
56757: LD_VAR 0 9
56761: PPUSH
56762: LD_VAR 0 10
56766: PPUSH
56767: CALL_OW 458
56771: NOT
56772: AND
56773: IFFALSE 56815
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56775: LD_ADDR_VAR 0 7
56779: PUSH
56780: LD_VAR 0 7
56784: PPUSH
56785: LD_VAR 0 7
56789: PUSH
56790: LD_INT 1
56792: PLUS
56793: PPUSH
56794: LD_VAR 0 9
56798: PUSH
56799: LD_VAR 0 10
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PPUSH
56808: CALL_OW 1
56812: ST_TO_ADDR
56813: GO 56829
// i := i - 1 ;
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: LD_VAR 0 5
56824: PUSH
56825: LD_INT 1
56827: MINUS
56828: ST_TO_ADDR
// end ;
56829: GO 56635
56831: POP
56832: POP
// for i in tmp do
56833: LD_ADDR_VAR 0 5
56837: PUSH
56838: LD_VAR 0 7
56842: PUSH
56843: FOR_IN
56844: IFFALSE 56882
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56846: LD_VAR 0 1
56850: PPUSH
56851: LD_VAR 0 5
56855: PUSH
56856: LD_INT 1
56858: ARRAY
56859: PPUSH
56860: LD_VAR 0 5
56864: PUSH
56865: LD_INT 2
56867: ARRAY
56868: PPUSH
56869: CALL 55828 0 3
56873: NOT
56874: IFFALSE 56880
// exit ;
56876: POP
56877: POP
56878: GO 56884
56880: GO 56843
56882: POP
56883: POP
// end ;
56884: LD_VAR 0 4
56888: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
56889: LD_INT 0
56891: PPUSH
56892: PPUSH
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
// if GetClass ( unit ) <> class_sniper then
56900: LD_VAR 0 1
56904: PPUSH
56905: CALL_OW 257
56909: PUSH
56910: LD_INT 5
56912: NONEQUAL
56913: IFFALSE 56917
// exit ;
56915: GO 57383
// dist := 8 ;
56917: LD_ADDR_VAR 0 5
56921: PUSH
56922: LD_INT 8
56924: ST_TO_ADDR
// viewRange := 12 ;
56925: LD_ADDR_VAR 0 8
56929: PUSH
56930: LD_INT 12
56932: ST_TO_ADDR
// side := GetSide ( unit ) ;
56933: LD_ADDR_VAR 0 6
56937: PUSH
56938: LD_VAR 0 1
56942: PPUSH
56943: CALL_OW 255
56947: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56948: LD_INT 61
56950: PPUSH
56951: LD_VAR 0 6
56955: PPUSH
56956: CALL_OW 321
56960: PUSH
56961: LD_INT 2
56963: EQUAL
56964: IFFALSE 56974
// viewRange := 16 ;
56966: LD_ADDR_VAR 0 8
56970: PUSH
56971: LD_INT 16
56973: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56974: LD_VAR 0 1
56978: PPUSH
56979: LD_VAR 0 2
56983: PPUSH
56984: LD_VAR 0 3
56988: PPUSH
56989: CALL_OW 297
56993: PUSH
56994: LD_VAR 0 5
56998: GREATER
56999: IFFALSE 57078
// begin ComMoveXY ( unit , x , y ) ;
57001: LD_VAR 0 1
57005: PPUSH
57006: LD_VAR 0 2
57010: PPUSH
57011: LD_VAR 0 3
57015: PPUSH
57016: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57020: LD_INT 35
57022: PPUSH
57023: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57027: LD_VAR 0 1
57031: PPUSH
57032: LD_VAR 0 2
57036: PPUSH
57037: LD_VAR 0 3
57041: PPUSH
57042: CALL 45654 0 3
57046: NOT
57047: IFFALSE 57051
// exit ;
57049: GO 57383
// until GetDistUnitXY ( unit , x , y ) < dist ;
57051: LD_VAR 0 1
57055: PPUSH
57056: LD_VAR 0 2
57060: PPUSH
57061: LD_VAR 0 3
57065: PPUSH
57066: CALL_OW 297
57070: PUSH
57071: LD_VAR 0 5
57075: LESS
57076: IFFALSE 57020
// end ; ComTurnXY ( unit , x , y ) ;
57078: LD_VAR 0 1
57082: PPUSH
57083: LD_VAR 0 2
57087: PPUSH
57088: LD_VAR 0 3
57092: PPUSH
57093: CALL_OW 118
// repeat if Multiplayer then
57097: LD_OWVAR 4
57101: IFFALSE 57112
// wait ( 35 ) else
57103: LD_INT 35
57105: PPUSH
57106: CALL_OW 67
57110: GO 57119
// wait ( 5 ) ;
57112: LD_INT 5
57114: PPUSH
57115: CALL_OW 67
// _d := GetDir ( unit ) ;
57119: LD_ADDR_VAR 0 11
57123: PUSH
57124: LD_VAR 0 1
57128: PPUSH
57129: CALL_OW 254
57133: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57134: LD_ADDR_VAR 0 7
57138: PUSH
57139: LD_VAR 0 1
57143: PPUSH
57144: CALL_OW 250
57148: PPUSH
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL_OW 251
57158: PPUSH
57159: LD_VAR 0 2
57163: PPUSH
57164: LD_VAR 0 3
57168: PPUSH
57169: CALL 48262 0 4
57173: ST_TO_ADDR
// until dir = _d ;
57174: LD_VAR 0 7
57178: PUSH
57179: LD_VAR 0 11
57183: EQUAL
57184: IFFALSE 57097
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57186: LD_ADDR_VAR 0 9
57190: PUSH
57191: LD_VAR 0 1
57195: PPUSH
57196: CALL_OW 250
57200: PPUSH
57201: LD_VAR 0 7
57205: PPUSH
57206: LD_VAR 0 5
57210: PPUSH
57211: CALL_OW 272
57215: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57216: LD_ADDR_VAR 0 10
57220: PUSH
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 251
57230: PPUSH
57231: LD_VAR 0 7
57235: PPUSH
57236: LD_VAR 0 5
57240: PPUSH
57241: CALL_OW 273
57245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57246: LD_VAR 0 9
57250: PPUSH
57251: LD_VAR 0 10
57255: PPUSH
57256: CALL_OW 488
57260: NOT
57261: IFFALSE 57265
// exit ;
57263: GO 57383
// ComAnimCustom ( unit , 1 ) ;
57265: LD_VAR 0 1
57269: PPUSH
57270: LD_INT 1
57272: PPUSH
57273: CALL_OW 592
// p := 0 ;
57277: LD_ADDR_VAR 0 12
57281: PUSH
57282: LD_INT 0
57284: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57285: LD_VAR 0 9
57289: PPUSH
57290: LD_VAR 0 10
57294: PPUSH
57295: LD_VAR 0 6
57299: PPUSH
57300: LD_VAR 0 8
57304: PPUSH
57305: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57309: LD_INT 35
57311: PPUSH
57312: CALL_OW 67
// p := Inc ( p ) ;
57316: LD_ADDR_VAR 0 12
57320: PUSH
57321: LD_VAR 0 12
57325: PPUSH
57326: CALL 48218 0 1
57330: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57331: LD_VAR 0 12
57335: PUSH
57336: LD_INT 3
57338: EQUAL
57339: PUSH
57340: LD_VAR 0 1
57344: PPUSH
57345: CALL_OW 302
57349: NOT
57350: OR
57351: PUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: CALL_OW 301
57361: OR
57362: IFFALSE 57309
// RemoveSeeing ( _x , _y , side ) ;
57364: LD_VAR 0 9
57368: PPUSH
57369: LD_VAR 0 10
57373: PPUSH
57374: LD_VAR 0 6
57378: PPUSH
57379: CALL_OW 331
// end ; end_of_file
57383: LD_VAR 0 4
57387: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57388: LD_EXP 38
57392: IFFALSE 57733
57394: GO 57396
57396: DISABLE
57397: LD_INT 0
57399: PPUSH
57400: PPUSH
57401: PPUSH
// begin mpKingPoints := [ ] ;
57402: LD_ADDR_EXP 53
57406: PUSH
57407: EMPTY
57408: ST_TO_ADDR
// if mpTeamGame then
57409: LD_EXP 11
57413: IFFALSE 57467
// begin for i := 1 to Count ( mpTeams ) do
57415: LD_ADDR_VAR 0 1
57419: PUSH
57420: DOUBLE
57421: LD_INT 1
57423: DEC
57424: ST_TO_ADDR
57425: LD_EXP 10
57429: PPUSH
57430: CALL 11248 0 1
57434: PUSH
57435: FOR_TO
57436: IFFALSE 57463
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57438: LD_ADDR_EXP 53
57442: PUSH
57443: LD_EXP 53
57447: PPUSH
57448: LD_VAR 0 1
57452: PPUSH
57453: LD_INT 0
57455: PPUSH
57456: CALL_OW 1
57460: ST_TO_ADDR
57461: GO 57435
57463: POP
57464: POP
// end else
57465: GO 57510
// begin for i := 1 to 8 do
57467: LD_ADDR_VAR 0 1
57471: PUSH
57472: DOUBLE
57473: LD_INT 1
57475: DEC
57476: ST_TO_ADDR
57477: LD_INT 8
57479: PUSH
57480: FOR_TO
57481: IFFALSE 57508
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57483: LD_ADDR_EXP 53
57487: PUSH
57488: LD_EXP 53
57492: PPUSH
57493: LD_VAR 0 1
57497: PPUSH
57498: LD_INT 0
57500: PPUSH
57501: CALL_OW 1
57505: ST_TO_ADDR
57506: GO 57480
57508: POP
57509: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: LD_EXP 2
57519: PPUSH
57520: LD_INT 0
57522: PPUSH
57523: CALL_OW 517
57527: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57528: LD_ADDR_VAR 0 1
57532: PUSH
57533: DOUBLE
57534: LD_INT 1
57536: DEC
57537: ST_TO_ADDR
57538: LD_VAR 0 3
57542: PUSH
57543: LD_INT 1
57545: ARRAY
57546: PUSH
57547: FOR_TO
57548: IFFALSE 57615
// for j := 1 to 8 do
57550: LD_ADDR_VAR 0 2
57554: PUSH
57555: DOUBLE
57556: LD_INT 1
57558: DEC
57559: ST_TO_ADDR
57560: LD_INT 8
57562: PUSH
57563: FOR_TO
57564: IFFALSE 57611
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57566: LD_VAR 0 3
57570: PUSH
57571: LD_INT 1
57573: ARRAY
57574: PUSH
57575: LD_VAR 0 1
57579: ARRAY
57580: PPUSH
57581: LD_VAR 0 3
57585: PUSH
57586: LD_INT 2
57588: ARRAY
57589: PUSH
57590: LD_VAR 0 1
57594: ARRAY
57595: PPUSH
57596: LD_VAR 0 2
57600: PPUSH
57601: LD_INT 12
57603: NEG
57604: PPUSH
57605: CALL_OW 330
57609: GO 57563
57611: POP
57612: POP
57613: GO 57547
57615: POP
57616: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57617: LD_EXP 33
57621: PPUSH
57622: LD_INT 1
57624: PPUSH
57625: CALL_OW 424
// UpdateCounter ;
57629: CALL 58237 0 0
// repeat wait ( 0 0$1 ) ;
57633: LD_INT 35
57635: PPUSH
57636: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57640: LD_ADDR_VAR 0 3
57644: PUSH
57645: LD_EXP 33
57649: PPUSH
57650: LD_INT 3
57652: PUSH
57653: LD_INT 57
57655: PUSH
57656: EMPTY
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 50
57665: PUSH
57666: EMPTY
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 30
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 30
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: PPUSH
57702: CALL_OW 70
57706: ST_TO_ADDR
// if not tmp then
57707: LD_VAR 0 3
57711: NOT
57712: IFFALSE 57716
// continue ;
57714: GO 57633
// AddPoints ( tmp ) ;
57716: LD_VAR 0 3
57720: PPUSH
57721: CALL 57915 0 1
// UpdateCounter ;
57725: CALL 58237 0 0
// until false ;
57729: LD_INT 0
57731: IFFALSE 57633
// end ;
57733: PPOPN 3
57735: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
57736: LD_EXP 38
57740: PUSH
57741: LD_EXP 36
57745: AND
57746: IFFALSE 57912
57748: GO 57750
57750: DISABLE
57751: LD_INT 0
57753: PPUSH
57754: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
57755: LD_ADDR_VAR 0 2
57759: PUSH
57760: LD_EXP 2
57764: PPUSH
57765: LD_INT 0
57767: PPUSH
57768: CALL_OW 517
57772: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57773: LD_ADDR_VAR 0 1
57777: PUSH
57778: DOUBLE
57779: LD_INT 1
57781: DEC
57782: ST_TO_ADDR
57783: LD_VAR 0 2
57787: PUSH
57788: LD_INT 1
57790: ARRAY
57791: PUSH
57792: FOR_TO
57793: IFFALSE 57834
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: LD_VAR 0 1
57808: ARRAY
57809: PPUSH
57810: LD_VAR 0 2
57814: PUSH
57815: LD_INT 2
57817: ARRAY
57818: PUSH
57819: LD_VAR 0 1
57823: ARRAY
57824: PPUSH
57825: LD_INT 125
57827: PPUSH
57828: CALL_OW 495
57832: GO 57792
57834: POP
57835: POP
// repeat wait ( mpEmissions ) ;
57836: LD_EXP 36
57840: PPUSH
57841: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
57845: LD_ADDR_VAR 0 1
57849: PUSH
57850: DOUBLE
57851: LD_INT 1
57853: DEC
57854: ST_TO_ADDR
57855: LD_VAR 0 2
57859: PUSH
57860: LD_INT 1
57862: ARRAY
57863: PUSH
57864: FOR_TO
57865: IFFALSE 57906
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
57867: LD_VAR 0 2
57871: PUSH
57872: LD_INT 1
57874: ARRAY
57875: PUSH
57876: LD_VAR 0 1
57880: ARRAY
57881: PPUSH
57882: LD_VAR 0 2
57886: PUSH
57887: LD_INT 2
57889: ARRAY
57890: PUSH
57891: LD_VAR 0 1
57895: ARRAY
57896: PPUSH
57897: LD_INT 15
57899: PPUSH
57900: CALL_OW 495
57904: GO 57864
57906: POP
57907: POP
// until false ;
57908: LD_INT 0
57910: IFFALSE 57836
// end ;
57912: PPOPN 2
57914: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
57915: LD_INT 0
57917: PPUSH
57918: PPUSH
57919: PPUSH
57920: PPUSH
57921: PPUSH
// if mpTeamGame then
57922: LD_EXP 11
57926: IFFALSE 58123
// begin first := depots [ 1 ] ;
57928: LD_ADDR_VAR 0 4
57932: PUSH
57933: LD_VAR 0 1
57937: PUSH
57938: LD_INT 1
57940: ARRAY
57941: ST_TO_ADDR
// side := GetSide ( first ) ;
57942: LD_ADDR_VAR 0 6
57946: PUSH
57947: LD_VAR 0 4
57951: PPUSH
57952: CALL_OW 255
57956: ST_TO_ADDR
// for i := 1 to mpTeams do
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: DOUBLE
57963: LD_INT 1
57965: DEC
57966: ST_TO_ADDR
57967: LD_EXP 10
57971: PUSH
57972: FOR_TO
57973: IFFALSE 58007
// if side in mpTeams [ i ] then
57975: LD_VAR 0 6
57979: PUSH
57980: LD_EXP 10
57984: PUSH
57985: LD_VAR 0 3
57989: ARRAY
57990: IN
57991: IFFALSE 58005
// begin team := i ;
57993: LD_ADDR_VAR 0 5
57997: PUSH
57998: LD_VAR 0 3
58002: ST_TO_ADDR
// break ;
58003: GO 58007
// end ;
58005: GO 57972
58007: POP
58008: POP
// if not team then
58009: LD_VAR 0 5
58013: NOT
58014: IFFALSE 58018
// exit ;
58016: GO 58232
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58018: LD_EXP 33
58022: PPUSH
58023: LD_INT 81
58025: PUSH
58026: LD_VAR 0 6
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PPUSH
58035: CALL_OW 70
58039: IFFALSE 58043
// exit ;
58041: GO 58232
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58043: LD_ADDR_EXP 53
58047: PUSH
58048: LD_EXP 53
58052: PPUSH
58053: LD_VAR 0 5
58057: PPUSH
58058: LD_EXP 53
58062: PUSH
58063: LD_VAR 0 5
58067: ARRAY
58068: PUSH
58069: LD_INT 1
58071: PLUS
58072: PPUSH
58073: CALL_OW 1
58077: ST_TO_ADDR
// for i in mpTeams [ team ] do
58078: LD_ADDR_VAR 0 3
58082: PUSH
58083: LD_EXP 10
58087: PUSH
58088: LD_VAR 0 5
58092: ARRAY
58093: PUSH
58094: FOR_IN
58095: IFFALSE 58119
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58097: LD_VAR 0 3
58101: PPUSH
58102: LD_EXP 53
58106: PUSH
58107: LD_VAR 0 5
58111: ARRAY
58112: PPUSH
58113: CALL_OW 506
58117: GO 58094
58119: POP
58120: POP
// end else
58121: GO 58232
// begin first := depots [ 1 ] ;
58123: LD_ADDR_VAR 0 4
58127: PUSH
58128: LD_VAR 0 1
58132: PUSH
58133: LD_INT 1
58135: ARRAY
58136: ST_TO_ADDR
// side := GetSide ( first ) ;
58137: LD_ADDR_VAR 0 6
58141: PUSH
58142: LD_VAR 0 4
58146: PPUSH
58147: CALL_OW 255
58151: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58152: LD_EXP 33
58156: PPUSH
58157: LD_INT 81
58159: PUSH
58160: LD_VAR 0 6
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PPUSH
58169: CALL_OW 70
58173: IFFALSE 58177
// exit ;
58175: GO 58232
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58177: LD_ADDR_EXP 53
58181: PUSH
58182: LD_EXP 53
58186: PPUSH
58187: LD_VAR 0 6
58191: PPUSH
58192: LD_EXP 53
58196: PUSH
58197: LD_VAR 0 6
58201: ARRAY
58202: PUSH
58203: LD_INT 1
58205: PLUS
58206: PPUSH
58207: CALL_OW 1
58211: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58212: LD_VAR 0 6
58216: PPUSH
58217: LD_EXP 53
58221: PUSH
58222: LD_VAR 0 6
58226: ARRAY
58227: PPUSH
58228: CALL_OW 506
// end ; end ;
58232: LD_VAR 0 2
58236: RET
// function UpdateCounter ; var i ; begin
58237: LD_INT 0
58239: PPUSH
58240: PPUSH
// result := [ ] ;
58241: LD_ADDR_VAR 0 1
58245: PUSH
58246: EMPTY
58247: ST_TO_ADDR
// if mpTeamGame then
58248: LD_EXP 11
58252: IFFALSE 58319
// begin for i := 1 to mpTeams do
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: DOUBLE
58260: LD_INT 1
58262: DEC
58263: ST_TO_ADDR
58264: LD_EXP 10
58268: PUSH
58269: FOR_TO
58270: IFFALSE 58315
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58272: LD_ADDR_VAR 0 1
58276: PUSH
58277: LD_VAR 0 1
58281: PUSH
58282: LD_STRING #KingoftheHill-Team
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_EXP 53
58294: PUSH
58295: LD_VAR 0 2
58299: ARRAY
58300: PUSH
58301: LD_EXP 34
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: ADD
58312: ST_TO_ADDR
58313: GO 58269
58315: POP
58316: POP
// end else
58317: GO 58392
// begin for i := 1 to 8 do
58319: LD_ADDR_VAR 0 2
58323: PUSH
58324: DOUBLE
58325: LD_INT 1
58327: DEC
58328: ST_TO_ADDR
58329: LD_INT 8
58331: PUSH
58332: FOR_TO
58333: IFFALSE 58390
// if mpSidePositions [ i ] then
58335: LD_EXP 7
58339: PUSH
58340: LD_VAR 0 2
58344: ARRAY
58345: IFFALSE 58388
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58347: LD_ADDR_VAR 0 1
58351: PUSH
58352: LD_VAR 0 1
58356: PUSH
58357: LD_STRING #KingoftheHill-Player
58359: PUSH
58360: LD_VAR 0 2
58364: PUSH
58365: LD_EXP 53
58369: PUSH
58370: LD_VAR 0 2
58374: ARRAY
58375: PUSH
58376: LD_EXP 34
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: ADD
58387: ST_TO_ADDR
58388: GO 58332
58390: POP
58391: POP
// end ; mpDisplayStrings := result ;
58392: LD_ADDR_EXP 37
58396: PUSH
58397: LD_VAR 0 1
58401: ST_TO_ADDR
// end ;
58402: LD_VAR 0 1
58406: RET
// export function HowMuchPointsKing ( side ) ; begin
58407: LD_INT 0
58409: PPUSH
// result := HowMuchPoints ( side ) ;
58410: LD_ADDR_VAR 0 2
58414: PUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: CALL 58430 0 1
58424: ST_TO_ADDR
// end ;
58425: LD_VAR 0 2
58429: RET
// function HowMuchPoints ( side ) ; var i ; begin
58430: LD_INT 0
58432: PPUSH
58433: PPUSH
// if mpTeamGame then
58434: LD_EXP 11
58438: IFFALSE 58507
// begin for i := 1 to Count ( mpTeams ) do
58440: LD_ADDR_VAR 0 3
58444: PUSH
58445: DOUBLE
58446: LD_INT 1
58448: DEC
58449: ST_TO_ADDR
58450: LD_EXP 10
58454: PPUSH
58455: CALL 11248 0 1
58459: PUSH
58460: FOR_TO
58461: IFFALSE 58503
// begin if side in mpTeams [ i ] then
58463: LD_VAR 0 1
58467: PUSH
58468: LD_EXP 10
58472: PUSH
58473: LD_VAR 0 3
58477: ARRAY
58478: IN
58479: IFFALSE 58501
// begin result := mpKingPoints [ i ] ;
58481: LD_ADDR_VAR 0 2
58485: PUSH
58486: LD_EXP 53
58490: PUSH
58491: LD_VAR 0 3
58495: ARRAY
58496: ST_TO_ADDR
// exit ;
58497: POP
58498: POP
58499: GO 58523
// end ; end ;
58501: GO 58460
58503: POP
58504: POP
// end else
58505: GO 58523
// result := mpKingPoints [ side ] ;
58507: LD_ADDR_VAR 0 2
58511: PUSH
58512: LD_EXP 53
58516: PUSH
58517: LD_VAR 0 1
58521: ARRAY
58522: ST_TO_ADDR
// end ;
58523: LD_VAR 0 2
58527: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58528: LD_EXP 38
58532: PUSH
58533: CALL 58855 0 0
58537: AND
58538: PUSH
58539: LD_OWVAR 4
58543: AND
58544: IFFALSE 58780
58546: GO 58548
58548: DISABLE
58549: LD_INT 0
58551: PPUSH
58552: PPUSH
// begin canWin := false ;
58553: LD_ADDR_VAR 0 2
58557: PUSH
58558: LD_INT 0
58560: ST_TO_ADDR
// if not HasPower ( your_side ) then
58561: LD_OWVAR 2
58565: PPUSH
58566: CALL 58895 0 1
58570: NOT
58571: IFFALSE 58582
// begin Multiplayer_Loose_Message ;
58573: CALL_OW 521
// enable ( mpLose ) ;
58577: LD_INT 102
58579: ENABLE_MARKED
// end else
58580: GO 58780
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58582: LD_ADDR_VAR 0 2
58586: PUSH
58587: LD_OWVAR 2
58591: PPUSH
58592: CALL 58430 0 1
58596: PUSH
58597: LD_EXP 34
58601: GREATEREQUAL
58602: PUSH
58603: LD_OWVAR 2
58607: PPUSH
58608: CALL 58895 0 1
58612: AND
58613: PUSH
58614: CALL 58783 0 0
58618: NOT
58619: OR
58620: ST_TO_ADDR
// for i := 1 to 8 do
58621: LD_ADDR_VAR 0 1
58625: PUSH
58626: DOUBLE
58627: LD_INT 1
58629: DEC
58630: ST_TO_ADDR
58631: LD_INT 8
58633: PUSH
58634: FOR_TO
58635: IFFALSE 58766
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58637: LD_EXP 7
58641: PUSH
58642: LD_VAR 0 1
58646: ARRAY
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 108
58657: AND
58658: PUSH
58659: LD_VAR 0 1
58663: PUSH
58664: LD_OWVAR 2
58668: NONEQUAL
58669: AND
58670: IFFALSE 58764
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58672: LD_EXP 8
58676: PUSH
58677: LD_VAR 0 1
58681: ARRAY
58682: NOT
58683: PUSH
58684: LD_EXP 8
58688: PUSH
58689: LD_VAR 0 1
58693: ARRAY
58694: PUSH
58695: LD_EXP 8
58699: PUSH
58700: LD_OWVAR 2
58704: ARRAY
58705: NONEQUAL
58706: PUSH
58707: LD_OWVAR 2
58711: PPUSH
58712: LD_VAR 0 1
58716: PPUSH
58717: CALL_OW 81
58721: PUSH
58722: LD_INT 1
58724: NONEQUAL
58725: AND
58726: OR
58727: IFFALSE 58764
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL 58430 0 1
58738: PUSH
58739: LD_EXP 34
58743: GREATEREQUAL
58744: PUSH
58745: LD_VAR 0 1
58749: PPUSH
58750: CALL 58895 0 1
58754: AND
58755: IFFALSE 58764
// begin enable ( mpLose ) ;
58757: LD_INT 102
58759: ENABLE_MARKED
// exit ;
58760: POP
58761: POP
58762: GO 58780
// end ;
58764: GO 58634
58766: POP
58767: POP
// if canWin then
58768: LD_VAR 0 2
58772: IFFALSE 58779
// enable ( mpWin ) else
58774: LD_INT 101
58776: ENABLE_MARKED
58777: GO 58780
// enable ;
58779: ENABLE
// end ; end ;
58780: PPOPN 2
58782: END
// function EnemiesInGame ; var i ; begin
58783: LD_INT 0
58785: PPUSH
58786: PPUSH
// result := false ;
58787: LD_ADDR_VAR 0 1
58791: PUSH
58792: LD_INT 0
58794: ST_TO_ADDR
// for i := 1 to 8 do
58795: LD_ADDR_VAR 0 2
58799: PUSH
58800: DOUBLE
58801: LD_INT 1
58803: DEC
58804: ST_TO_ADDR
58805: LD_INT 8
58807: PUSH
58808: FOR_TO
58809: IFFALSE 58848
// if i <> your_side and HasPower ( i ) then
58811: LD_VAR 0 2
58815: PUSH
58816: LD_OWVAR 2
58820: NONEQUAL
58821: PUSH
58822: LD_VAR 0 2
58826: PPUSH
58827: CALL 58895 0 1
58831: AND
58832: IFFALSE 58846
// begin result := true ;
58834: LD_ADDR_VAR 0 1
58838: PUSH
58839: LD_INT 1
58841: ST_TO_ADDR
// exit ;
58842: POP
58843: POP
58844: GO 58850
// end ;
58846: GO 58808
58848: POP
58849: POP
// end ;
58850: LD_VAR 0 1
58854: RET
// function CanWinLoose ; begin
58855: LD_INT 0
58857: PPUSH
// result := true ;
58858: LD_ADDR_VAR 0 1
58862: PUSH
58863: LD_INT 1
58865: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
58866: CALL_OW 531
58870: PUSH
58871: CALL_OW 519
58875: PUSH
58876: LD_INT 1
58878: GREATER
58879: AND
58880: IFFALSE 58890
// result := false ;
58882: LD_ADDR_VAR 0 1
58886: PUSH
58887: LD_INT 0
58889: ST_TO_ADDR
// end ;
58890: LD_VAR 0 1
58894: RET
// function HasPower ( i ) ; begin
58895: LD_INT 0
58897: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
58898: LD_ADDR_VAR 0 2
58902: PUSH
58903: LD_INT 22
58905: PUSH
58906: LD_VAR 0 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: PUSH
58918: LD_INT 21
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 33
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 33
58940: PUSH
58941: LD_INT 5
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PPUSH
58958: CALL_OW 69
58962: ST_TO_ADDR
// end ; end_of_file
58963: LD_VAR 0 2
58967: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
58968: PPOPN 6
58970: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
58971: CALL 59000 0 0
// end ; end_of_file
58975: PPOPN 1
58977: END
// every 0 0$1 do
58978: GO 58980
58980: DISABLE
// begin enable ;
58981: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58982: LD_STRING updateTimer(
58984: PUSH
58985: LD_OWVAR 1
58989: STR
58990: PUSH
58991: LD_STRING );
58993: STR
58994: PPUSH
58995: CALL_OW 559
// end ;
58999: END
// export function SOS_MapStart ( ) ; begin
59000: LD_INT 0
59002: PPUSH
// UpdateFactoryWaypoints ( ) ;
59003: CALL 59372 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59007: CALL 59624 0 0
// end ;
59011: LD_VAR 0 1
59015: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59016: LD_INT 0
59018: PPUSH
// end ;
59019: LD_VAR 0 12
59023: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59028: LD_VAR 0 1
59032: NOT
59033: PUSH
59034: LD_VAR 0 2
59038: PPUSH
59039: LD_VAR 0 3
59043: PPUSH
59044: CALL_OW 488
59048: NOT
59049: OR
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 266
59060: PUSH
59061: LD_INT 3
59063: NONEQUAL
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL_OW 247
59074: PUSH
59075: LD_INT 1
59077: EQUAL
59078: NOT
59079: AND
59080: OR
59081: IFFALSE 59085
// exit ;
59083: GO 59367
// if GetType ( factory ) = unit_human then
59085: LD_VAR 0 1
59089: PPUSH
59090: CALL_OW 247
59094: PUSH
59095: LD_INT 1
59097: EQUAL
59098: IFFALSE 59115
// factory := IsInUnit ( factory ) ;
59100: LD_ADDR_VAR 0 1
59104: PUSH
59105: LD_VAR 0 1
59109: PPUSH
59110: CALL_OW 310
59114: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59115: LD_VAR 0 1
59119: PPUSH
59120: CALL_OW 266
59124: PUSH
59125: LD_INT 3
59127: NONEQUAL
59128: IFFALSE 59132
// exit ;
59130: GO 59367
// for i := 1 to Count ( factoryWaypoints ) do
59132: LD_ADDR_VAR 0 5
59136: PUSH
59137: DOUBLE
59138: LD_INT 1
59140: DEC
59141: ST_TO_ADDR
59142: LD_EXP 54
59146: PPUSH
59147: CALL 11248 0 1
59151: PUSH
59152: FOR_TO
59153: IFFALSE 59315
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59155: LD_VAR 0 2
59159: PPUSH
59160: LD_VAR 0 3
59164: PPUSH
59165: CALL_OW 428
59169: PUSH
59170: LD_EXP 54
59174: PUSH
59175: LD_VAR 0 5
59179: ARRAY
59180: PUSH
59181: LD_INT 2
59183: ARRAY
59184: EQUAL
59185: IFFALSE 59217
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59187: LD_ADDR_EXP 54
59191: PUSH
59192: LD_EXP 54
59196: PPUSH
59197: LD_VAR 0 5
59201: PPUSH
59202: CALL_OW 3
59206: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59207: CALL 59372 0 0
// exit ;
59211: POP
59212: POP
59213: GO 59367
// end else
59215: GO 59313
// if factory = factoryWaypoints [ i ] [ 2 ] then
59217: LD_VAR 0 1
59221: PUSH
59222: LD_EXP 54
59226: PUSH
59227: LD_VAR 0 5
59231: ARRAY
59232: PUSH
59233: LD_INT 2
59235: ARRAY
59236: EQUAL
59237: IFFALSE 59313
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59239: LD_ADDR_EXP 54
59243: PUSH
59244: LD_EXP 54
59248: PPUSH
59249: LD_VAR 0 5
59253: PPUSH
59254: CALL_OW 3
59258: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59259: LD_ADDR_EXP 54
59263: PUSH
59264: LD_EXP 54
59268: PPUSH
59269: LD_VAR 0 1
59273: PPUSH
59274: CALL_OW 255
59278: PUSH
59279: LD_VAR 0 1
59283: PUSH
59284: LD_VAR 0 2
59288: PUSH
59289: LD_VAR 0 3
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: PPUSH
59300: CALL 46857 0 2
59304: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59305: CALL 59372 0 0
// exit ;
59309: POP
59310: POP
59311: GO 59367
// end ; end ;
59313: GO 59152
59315: POP
59316: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59317: LD_ADDR_EXP 54
59321: PUSH
59322: LD_EXP 54
59326: PPUSH
59327: LD_VAR 0 1
59331: PPUSH
59332: CALL_OW 255
59336: PUSH
59337: LD_VAR 0 1
59341: PUSH
59342: LD_VAR 0 2
59346: PUSH
59347: LD_VAR 0 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: PPUSH
59358: CALL 46857 0 2
59362: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59363: CALL 59372 0 0
// end ;
59367: LD_VAR 0 4
59371: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59372: LD_INT 0
59374: PPUSH
59375: PPUSH
59376: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59377: LD_STRING resetFactoryWaypoint();
59379: PPUSH
59380: CALL_OW 559
// if factoryWaypoints then
59384: LD_EXP 54
59388: IFFALSE 59509
// begin list := factoryWaypoints ;
59390: LD_ADDR_VAR 0 3
59394: PUSH
59395: LD_EXP 54
59399: ST_TO_ADDR
// for i := 1 to list do
59400: LD_ADDR_VAR 0 2
59404: PUSH
59405: DOUBLE
59406: LD_INT 1
59408: DEC
59409: ST_TO_ADDR
59410: LD_VAR 0 3
59414: PUSH
59415: FOR_TO
59416: IFFALSE 59507
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59418: LD_STRING setFactoryWaypointXY(
59420: PUSH
59421: LD_VAR 0 3
59425: PUSH
59426: LD_VAR 0 2
59430: ARRAY
59431: PUSH
59432: LD_INT 1
59434: ARRAY
59435: STR
59436: PUSH
59437: LD_STRING ,
59439: STR
59440: PUSH
59441: LD_VAR 0 3
59445: PUSH
59446: LD_VAR 0 2
59450: ARRAY
59451: PUSH
59452: LD_INT 2
59454: ARRAY
59455: STR
59456: PUSH
59457: LD_STRING ,
59459: STR
59460: PUSH
59461: LD_VAR 0 3
59465: PUSH
59466: LD_VAR 0 2
59470: ARRAY
59471: PUSH
59472: LD_INT 3
59474: ARRAY
59475: STR
59476: PUSH
59477: LD_STRING ,
59479: STR
59480: PUSH
59481: LD_VAR 0 3
59485: PUSH
59486: LD_VAR 0 2
59490: ARRAY
59491: PUSH
59492: LD_INT 4
59494: ARRAY
59495: STR
59496: PUSH
59497: LD_STRING )
59499: STR
59500: PPUSH
59501: CALL_OW 559
59505: GO 59415
59507: POP
59508: POP
// end ; end ;
59509: LD_VAR 0 1
59513: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59514: LD_INT 0
59516: PPUSH
// if HexInfo ( x , y ) = warehouse then
59517: LD_VAR 0 2
59521: PPUSH
59522: LD_VAR 0 3
59526: PPUSH
59527: CALL_OW 428
59531: PUSH
59532: LD_VAR 0 1
59536: EQUAL
59537: IFFALSE 59564
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59539: LD_ADDR_EXP 55
59543: PUSH
59544: LD_EXP 55
59548: PPUSH
59549: LD_VAR 0 1
59553: PPUSH
59554: LD_INT 0
59556: PPUSH
59557: CALL_OW 1
59561: ST_TO_ADDR
59562: GO 59615
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59564: LD_ADDR_EXP 55
59568: PUSH
59569: LD_EXP 55
59573: PPUSH
59574: LD_VAR 0 1
59578: PPUSH
59579: LD_VAR 0 1
59583: PPUSH
59584: CALL_OW 255
59588: PUSH
59589: LD_VAR 0 1
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_VAR 0 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: PPUSH
59610: CALL_OW 1
59614: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59615: CALL 59624 0 0
// end ;
59619: LD_VAR 0 4
59623: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59624: LD_INT 0
59626: PPUSH
59627: PPUSH
59628: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59629: LD_STRING resetWarehouseGatheringPoints();
59631: PPUSH
59632: CALL_OW 559
// if warehouseGatheringPoints then
59636: LD_EXP 55
59640: IFFALSE 59766
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59642: LD_ADDR_VAR 0 3
59646: PUSH
59647: LD_EXP 55
59651: PPUSH
59652: CALL 50619 0 1
59656: ST_TO_ADDR
// for i := 1 to list do
59657: LD_ADDR_VAR 0 2
59661: PUSH
59662: DOUBLE
59663: LD_INT 1
59665: DEC
59666: ST_TO_ADDR
59667: LD_VAR 0 3
59671: PUSH
59672: FOR_TO
59673: IFFALSE 59764
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59675: LD_STRING setWarehouseGatheringPointXY(
59677: PUSH
59678: LD_VAR 0 3
59682: PUSH
59683: LD_VAR 0 2
59687: ARRAY
59688: PUSH
59689: LD_INT 1
59691: ARRAY
59692: STR
59693: PUSH
59694: LD_STRING ,
59696: STR
59697: PUSH
59698: LD_VAR 0 3
59702: PUSH
59703: LD_VAR 0 2
59707: ARRAY
59708: PUSH
59709: LD_INT 2
59711: ARRAY
59712: STR
59713: PUSH
59714: LD_STRING ,
59716: STR
59717: PUSH
59718: LD_VAR 0 3
59722: PUSH
59723: LD_VAR 0 2
59727: ARRAY
59728: PUSH
59729: LD_INT 3
59731: ARRAY
59732: STR
59733: PUSH
59734: LD_STRING ,
59736: STR
59737: PUSH
59738: LD_VAR 0 3
59742: PUSH
59743: LD_VAR 0 2
59747: ARRAY
59748: PUSH
59749: LD_INT 4
59751: ARRAY
59752: STR
59753: PUSH
59754: LD_STRING )
59756: STR
59757: PPUSH
59758: CALL_OW 559
59762: GO 59672
59764: POP
59765: POP
// end ; end ;
59766: LD_VAR 0 1
59770: RET
