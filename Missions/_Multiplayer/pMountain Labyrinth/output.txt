// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3049 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 33
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 34
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 36
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 35
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 32
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 51114 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 51114 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 51114 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 51114 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 51114 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 51114 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 10986 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 50947 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 50947 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 50947 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 50947 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 50947 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 50947 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 50947 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 50947 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 50947 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 50947 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 50947 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 50947 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 51114 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 51114 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 51114 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 51114 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 51114 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 51114 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 51114 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 51114 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 51114 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 51114 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 51114 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 51114 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 51114 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 51114 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 51114 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 51114 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 51114 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 51114 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 47936 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 67700 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7343 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 67717 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 7933 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 67758 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 7986 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpDepots := [ ] ;
2805: LD_ADDR_EXP 14
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpBuildings := [ ] ;
2812: LD_ADDR_EXP 17
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2819: LD_ADDR_EXP 18
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2826: LD_ADDR_EXP 19
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2833: LD_ADDR_EXP 20
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpStartingResources := [ ] ;
2840: LD_ADDR_EXP 15
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpStartPos := [ ] ;
2847: LD_ADDR_EXP 21
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2854: LD_ADDR_EXP 22
2858: PUSH
2859: LD_INT 1
2861: NEG
2862: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2863: LD_ADDR_EXP 23
2867: PUSH
2868: EMPTY
2869: ST_TO_ADDR
// mpApemans := [ ] ;
2870: LD_ADDR_EXP 30
2874: PUSH
2875: EMPTY
2876: ST_TO_ADDR
// mpApemansArea := [ ] ;
2877: LD_ADDR_EXP 31
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpRespawn := [ ] ;
2884: LD_ADDR_EXP 32
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpKingArea := 0 ;
2891: LD_ADDR_EXP 33
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// mpPoints := [ ] ;
2899: LD_ADDR_EXP 34
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpVehicles := 0 ;
2906: LD_ADDR_EXP 35
2910: PUSH
2911: LD_INT 0
2913: ST_TO_ADDR
// mpShipments := 0 ;
2914: LD_ADDR_EXP 27
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2922: LD_ADDR_EXP 39
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: ST_TO_ADDR
// mpEmissions := 0 ;
2953: LD_ADDR_EXP 36
2957: PUSH
2958: LD_INT 0
2960: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2961: LD_ADDR_EXP 25
2965: PUSH
2966: LD_INT 3
2968: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2969: LD_ADDR_EXP 24
2973: PUSH
2974: LD_INT 15
2976: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2977: LD_ADDR_EXP 37
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// mpGameActive := false ;
2985: LD_ADDR_EXP 38
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpBlockRespThread := false ;
2993: LD_ADDR_EXP 40
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// for i := 1 to 32 do
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 32
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3042
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3017: LD_ADDR_EXP 6
3021: PUSH
3022: LD_EXP 6
3026: PPUSH
3027: LD_VAR 0 2
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 1
3039: ST_TO_ADDR
3040: GO 3014
3042: POP
3043: POP
// end ;
3044: LD_VAR 0 1
3048: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3049: LD_INT 0
3051: PPUSH
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
3056: PPUSH
3057: PPUSH
3058: PPUSH
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3065: LD_ADDR_VAR 0 14
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 3
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: ST_TO_ADDR
// for i in gameTypes do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_VAR 0 14
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3104
// disable ( i ) ;
3097: LD_VAR 0 2
3101: DISABLE_MARKED
3102: GO 3094
3104: POP
3105: POP
// if Multiplayer then
3106: LD_OWVAR 4
3110: IFFALSE 3294
// begin mpGameType := mp_game_type ;
3112: LD_ADDR_EXP 3
3116: PUSH
3117: LD_OWVAR 6
3121: ST_TO_ADDR
// your_side := mp_player_side ;
3122: LD_ADDR_OWVAR 2
3126: PUSH
3127: LD_OWVAR 7
3131: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3132: LD_ADDR_EXP 7
3136: PUSH
3137: LD_OWVAR 17
3141: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3142: LD_ADDR_EXP 8
3146: PUSH
3147: LD_OWVAR 15
3151: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3152: LD_ADDR_EXP 9
3156: PUSH
3157: LD_OWVAR 16
3161: ST_TO_ADDR
// mpTeams := mp_teams ;
3162: LD_ADDR_EXP 10
3166: PUSH
3167: LD_OWVAR 12
3171: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_EXP 4
3186: PPUSH
3187: CALL 10986 0 1
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3269
// begin setting := mpGameSettingsKeys [ i ] ;
3195: LD_ADDR_VAR 0 12
3199: PUSH
3200: LD_EXP 4
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: ST_TO_ADDR
// if setting then
3211: LD_VAR 0 12
3215: IFFALSE 3267
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3217: LD_ADDR_EXP 6
3221: PUSH
3222: LD_EXP 6
3226: PPUSH
3227: LD_VAR 0 2
3231: PPUSH
3232: LD_EXP 5
3236: PUSH
3237: LD_VAR 0 2
3241: ARRAY
3242: PUSH
3243: LD_VAR 0 2
3247: PUSH
3248: LD_INT 1
3250: MINUS
3251: PPUSH
3252: CALL_OW 426
3256: PUSH
3257: LD_INT 1
3259: PLUS
3260: ARRAY
3261: PPUSH
3262: CALL_OW 1
3266: ST_TO_ADDR
// end ;
3267: GO 3192
3269: POP
3270: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3271: LD_ADDR_EXP 11
3275: PUSH
3276: LD_EXP 8
3280: PUSH
3281: LD_INT 0
3283: PUSH
3284: EMPTY
3285: LIST
3286: DIFF
3287: PUSH
3288: LD_INT 1
3290: GREATER
3291: ST_TO_ADDR
// end else
3292: GO 3294
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3294: LD_EXP 3
3298: PPUSH
3299: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3303: LD_EXP 18
3307: PPUSH
3308: CALL 10986 0 1
3312: IFFALSE 3343
// begin for i in mpMarkedAreas do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: LD_EXP 18
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3341
// SetAreaMapShow ( i , 0 ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 424
3339: GO 3324
3341: POP
3342: POP
// end ; for i := 1 to 8 do
3343: LD_ADDR_VAR 0 2
3347: PUSH
3348: DOUBLE
3349: LD_INT 1
3351: DEC
3352: ST_TO_ADDR
3353: LD_INT 8
3355: PUSH
3356: FOR_TO
3357: IFFALSE 4573
// begin if not mpSidePositions [ i ] then
3359: LD_EXP 7
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: NOT
3370: IFFALSE 3374
// continue ;
3372: GO 3356
// side := i ;
3374: LD_ADDR_VAR 0 7
3378: PUSH
3379: LD_VAR 0 2
3383: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3384: LD_ADDR_VAR 0 9
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_VAR 0 2
3398: ARRAY
3399: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3400: LD_ADDR_VAR 0 8
3404: PUSH
3405: LD_EXP 7
3409: PUSH
3410: LD_VAR 0 2
3414: ARRAY
3415: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3416: LD_EXP 12
3420: PPUSH
3421: CALL 10986 0 1
3425: IFFALSE 3502
// begin for j in mpOilDeposits [ pos ] do
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: LD_EXP 12
3436: PUSH
3437: LD_VAR 0 8
3441: ARRAY
3442: PUSH
3443: FOR_IN
3444: IFFALSE 3500
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3446: LD_VAR 0 3
3450: PUSH
3451: LD_INT 1
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_INT 2
3462: ARRAY
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_VAR 0 7
3493: PPUSH
3494: CALL_OW 441
// end ;
3498: GO 3443
3500: POP
3501: POP
// end ; if Count ( mpSibDeposits ) then
3502: LD_EXP 13
3506: PPUSH
3507: CALL 10986 0 1
3511: IFFALSE 3588
// begin for j in mpSibDeposits [ pos ] do
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: LD_EXP 13
3522: PUSH
3523: LD_VAR 0 8
3527: ARRAY
3528: PUSH
3529: FOR_IN
3530: IFFALSE 3586
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3532: LD_VAR 0 3
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 3
3545: PUSH
3546: LD_INT 2
3548: ARRAY
3549: PPUSH
3550: LD_INT 3
3552: PPUSH
3553: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_VAR 0 7
3579: PPUSH
3580: CALL_OW 441
// end ;
3584: GO 3529
3586: POP
3587: POP
// end ; InitBc ;
3588: CALL_OW 21
// InitUc ;
3592: CALL_OW 18
// uc_side := side ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_VAR 0 7
3605: ST_TO_ADDR
// uc_nation := nation ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_VAR 0 9
3615: ST_TO_ADDR
// if Count ( mpDepots ) then
3616: LD_EXP 14
3620: PPUSH
3621: CALL 10986 0 1
3625: IFFALSE 3795
// begin bc_level := 0 ;
3627: LD_ADDR_OWVAR 43
3631: PUSH
3632: LD_INT 0
3634: ST_TO_ADDR
// bc_type := b_depot ;
3635: LD_ADDR_OWVAR 42
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3643: LD_ADDR_VAR 0 4
3647: PUSH
3648: LD_EXP 14
3652: PUSH
3653: LD_VAR 0 8
3657: ARRAY
3658: PUSH
3659: LD_INT 1
3661: ARRAY
3662: PPUSH
3663: LD_EXP 14
3667: PUSH
3668: LD_VAR 0 8
3672: ARRAY
3673: PUSH
3674: LD_INT 2
3676: ARRAY
3677: PPUSH
3678: LD_EXP 14
3682: PUSH
3683: LD_VAR 0 8
3687: ARRAY
3688: PUSH
3689: LD_INT 3
3691: ARRAY
3692: PPUSH
3693: CALL_OW 47
3697: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING @
3705: PUSH
3706: LD_VAR 0 7
3710: STR
3711: PPUSH
3712: CALL_OW 500
// SetTag ( b , side ) ;
3716: LD_VAR 0 4
3720: PPUSH
3721: LD_VAR 0 7
3725: PPUSH
3726: CALL_OW 109
// if Count ( mpStartingResources ) then
3730: LD_EXP 15
3734: PPUSH
3735: CALL 10986 0 1
3739: IFFALSE 3793
// begin for j := 1 to mpStartingResources do
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_EXP 15
3755: PUSH
3756: FOR_TO
3757: IFFALSE 3791
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3759: LD_VAR 0 4
3763: PPUSH
3764: CALL_OW 274
3768: PPUSH
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_EXP 15
3778: PUSH
3779: LD_VAR 0 3
3783: ARRAY
3784: PPUSH
3785: CALL_OW 277
3789: GO 3756
3791: POP
3792: POP
// end ; end else
3793: GO 3942
// if Count ( mpStartingResources ) then
3795: LD_EXP 15
3799: PPUSH
3800: CALL 10986 0 1
3804: IFFALSE 3942
// begin for j := 1 to mpStartingResources do
3806: LD_ADDR_VAR 0 3
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_EXP 15
3820: PUSH
3821: FOR_TO
3822: IFFALSE 3940
// begin resources := mpStartingResources [ j ] ;
3824: LD_ADDR_VAR 0 13
3828: PUSH
3829: LD_EXP 15
3833: PUSH
3834: LD_VAR 0 3
3838: ARRAY
3839: ST_TO_ADDR
// repeat if resources >= 50 then
3840: LD_VAR 0 13
3844: PUSH
3845: LD_INT 50
3847: GREATEREQUAL
3848: IFFALSE 3894
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 5
3857: PPUSH
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_VAR 0 6
3867: PPUSH
3868: LD_INT 4
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 60
// resources := resources - 50 ;
3878: LD_ADDR_VAR 0 13
3882: PUSH
3883: LD_VAR 0 13
3887: PUSH
3888: LD_INT 50
3890: MINUS
3891: ST_TO_ADDR
// end else
3892: GO 3928
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: LD_VAR 0 13
3903: PUSH
3904: LD_INT 10
3906: DIV
3907: PPUSH
3908: LD_VAR 0 5
3912: PPUSH
3913: LD_VAR 0 6
3917: PPUSH
3918: LD_INT 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 60
// until resources <= 0 ;
3928: LD_VAR 0 13
3932: PUSH
3933: LD_INT 0
3935: LESSEQUAL
3936: IFFALSE 3840
// end ;
3938: GO 3821
3940: POP
3941: POP
// end ; if Count ( mpBuildings ) then
3942: LD_EXP 17
3946: PPUSH
3947: CALL 10986 0 1
3951: IFFALSE 4029
// begin for j in mpBuildings [ pos ] do
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: LD_EXP 17
3962: PUSH
3963: LD_VAR 0 8
3967: ARRAY
3968: PUSH
3969: FOR_IN
3970: IFFALSE 4027
// begin bc_level := 0 ;
3972: LD_ADDR_OWVAR 43
3976: PUSH
3977: LD_INT 0
3979: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3980: LD_ADDR_OWVAR 42
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3994: LD_VAR 0 3
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 3
4007: PUSH
4008: LD_INT 3
4010: ARRAY
4011: PPUSH
4012: LD_VAR 0 3
4016: PUSH
4017: LD_INT 4
4019: ARRAY
4020: PPUSH
4021: CALL_OW 47
// end ;
4025: GO 3969
4027: POP
4028: POP
// end ; if mpBattleFlag > - 1 then
4029: LD_EXP 22
4033: PUSH
4034: LD_INT 1
4036: NEG
4037: GREATER
4038: IFFALSE 4197
// begin x := mpStartPos [ pos ] [ 1 ] ;
4040: LD_ADDR_VAR 0 5
4044: PUSH
4045: LD_EXP 21
4049: PUSH
4050: LD_VAR 0 8
4054: ARRAY
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4060: LD_ADDR_VAR 0 6
4064: PUSH
4065: LD_EXP 21
4069: PUSH
4070: LD_VAR 0 8
4074: ARRAY
4075: PUSH
4076: LD_INT 2
4078: ARRAY
4079: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4080: LD_VAR 0 5
4084: PPUSH
4085: LD_VAR 0 6
4089: PPUSH
4090: LD_INT 12
4092: PPUSH
4093: LD_INT 2
4095: PPUSH
4096: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4100: LD_ADDR_EXP 23
4104: PUSH
4105: LD_EXP 23
4109: PPUSH
4110: LD_VAR 0 7
4114: PPUSH
4115: LD_VAR 0 7
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: LD_INT 1
4132: PUSH
4133: LD_INT 100
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 70
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 40
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 10
4162: PUSH
4163: LD_INT 25
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 20
4172: PUSH
4173: LD_INT 100
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: PPUSH
4187: CALL_OW 418
4191: PPUSH
4192: CALL_OW 1
4196: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4197: LD_EXP 26
4201: PUSH
4202: LD_INT 20
4204: PPUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: CALL_OW 321
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: AND
4219: IFFALSE 4236
// SetTech ( tech_SibDet , side , state_researched ) ;
4221: LD_INT 20
4223: PPUSH
4224: LD_VAR 0 7
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4236: LD_INT 24
4238: PPUSH
4239: LD_VAR 0 7
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL_OW 322
// if mpSibBomb = 1 then
4251: LD_EXP 28
4255: PUSH
4256: LD_INT 1
4258: EQUAL
4259: IFFALSE 4278
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4261: LD_INT 25
4263: PPUSH
4264: LD_VAR 0 7
4268: PPUSH
4269: LD_INT 1
4271: PPUSH
4272: CALL_OW 322
// end else
4276: GO 4293
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4278: LD_INT 25
4280: PPUSH
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 322
// end ; if mpVehicles then
4293: LD_EXP 35
4297: IFFALSE 4396
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: LD_VAR 0 7
4308: PPUSH
4309: LD_VAR 0 9
4313: PPUSH
4314: LD_EXP 35
4318: PPUSH
4319: CALL 5255 0 3
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4394
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4327: LD_VAR 0 3
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: LD_INT 5
4337: PPUSH
4338: CALL_OW 12
4342: PPUSH
4343: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_EXP 21
4356: PUSH
4357: LD_VAR 0 8
4361: ARRAY
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_EXP 21
4371: PUSH
4372: LD_VAR 0 8
4376: ARRAY
4377: PUSH
4378: LD_INT 2
4380: ARRAY
4381: PPUSH
4382: LD_INT 12
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 50
// end ;
4392: GO 4324
4394: POP
4395: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4396: LD_ADDR_VAR 0 11
4400: PUSH
4401: LD_VAR 0 7
4405: PPUSH
4406: LD_VAR 0 9
4410: PPUSH
4411: LD_EXP 24
4415: PPUSH
4416: LD_EXP 25
4420: PPUSH
4421: CALL 4985 0 4
4425: ST_TO_ADDR
// for j in team do
4426: LD_ADDR_VAR 0 3
4430: PUSH
4431: LD_VAR 0 11
4435: PUSH
4436: FOR_IN
4437: IFFALSE 4486
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: LD_EXP 21
4448: PUSH
4449: LD_VAR 0 8
4453: ARRAY
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PPUSH
4459: LD_EXP 21
4463: PUSH
4464: LD_VAR 0 8
4468: ARRAY
4469: PUSH
4470: LD_INT 2
4472: ARRAY
4473: PPUSH
4474: LD_INT 12
4476: PPUSH
4477: LD_INT 0
4479: PPUSH
4480: CALL_OW 50
4484: GO 4436
4486: POP
4487: POP
// if mpApemans then
4488: LD_EXP 30
4492: IFFALSE 4571
// begin for j := 1 to mpApemans do
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: DOUBLE
4500: LD_INT 1
4502: DEC
4503: ST_TO_ADDR
4504: LD_EXP 30
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin PrepareApeman ( - 5 ) ;
4512: LD_INT 5
4514: NEG
4515: PPUSH
4516: CALL 42843 0 1
// ape := CreateHuman ;
4520: LD_ADDR_VAR 0 10
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// SetTag ( ape , side ) ;
4530: LD_VAR 0 10
4534: PPUSH
4535: LD_VAR 0 7
4539: PPUSH
4540: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4544: LD_VAR 0 10
4548: PPUSH
4549: LD_EXP 31
4553: PUSH
4554: LD_VAR 0 8
4558: ARRAY
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ;
4567: GO 4509
4569: POP
4570: POP
// end ; end ;
4571: GO 3356
4573: POP
4574: POP
// if not mpTeamGame then
4575: LD_EXP 11
4579: NOT
4580: IFFALSE 4678
// begin for i := 1 to 8 do
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: DOUBLE
4588: LD_INT 1
4590: DEC
4591: ST_TO_ADDR
4592: LD_INT 8
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4674
// for j := 1 to 8 do
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: DOUBLE
4604: LD_INT 1
4606: DEC
4607: ST_TO_ADDR
4608: LD_INT 8
4610: PUSH
4611: FOR_TO
4612: IFFALSE 4670
// if i <> j then
4614: LD_VAR 0 2
4618: PUSH
4619: LD_VAR 0 3
4623: NONEQUAL
4624: IFFALSE 4648
// SetAttitude ( i , j , att_neutral , true ) else
4626: LD_VAR 0 2
4630: PPUSH
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 80
4646: GO 4668
// SetAttitude ( i , j , att_friend , true ) ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_VAR 0 3
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL_OW 80
4668: GO 4611
4670: POP
4671: POP
4672: GO 4595
4674: POP
4675: POP
// end else
4676: GO 4853
// begin if mpSharedVision then
4678: LD_EXP 16
4682: IFFALSE 4747
// begin for i in mpTeams do
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: LD_EXP 10
4693: PUSH
4694: FOR_IN
4695: IFFALSE 4745
// for j := 2 to i do
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: DOUBLE
4703: LD_INT 2
4705: DEC
4706: ST_TO_ADDR
4707: LD_VAR 0 2
4711: PUSH
4712: FOR_TO
4713: IFFALSE 4741
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4715: LD_VAR 0 2
4719: PUSH
4720: LD_VAR 0 3
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 2
4730: PUSH
4731: LD_INT 1
4733: ARRAY
4734: PPUSH
4735: CALL_OW 343
4739: GO 4712
4741: POP
4742: POP
4743: GO 4694
4745: POP
4746: POP
// end ; for i := 1 to 8 do
4747: LD_ADDR_VAR 0 2
4751: PUSH
4752: DOUBLE
4753: LD_INT 1
4755: DEC
4756: ST_TO_ADDR
4757: LD_INT 8
4759: PUSH
4760: FOR_TO
4761: IFFALSE 4851
// for j := 1 to 8 do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_INT 1
4771: DEC
4772: ST_TO_ADDR
4773: LD_INT 8
4775: PUSH
4776: FOR_TO
4777: IFFALSE 4847
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4779: LD_EXP 8
4783: PUSH
4784: LD_VAR 0 2
4788: ARRAY
4789: PUSH
4790: LD_EXP 8
4794: PUSH
4795: LD_VAR 0 3
4799: ARRAY
4800: EQUAL
4801: IFFALSE 4825
// SetAttitude ( i , j , att_friend , true ) else
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 1
4815: PPUSH
4816: LD_INT 1
4818: PPUSH
4819: CALL_OW 80
4823: GO 4845
// SetAttitude ( i , j , att_enemy , true ) ;
4825: LD_VAR 0 2
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 2
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 80
4845: GO 4776
4847: POP
4848: POP
4849: GO 4760
4851: POP
4852: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4853: LD_ADDR_OWVAR 71
4857: PUSH
4858: LD_EXP 9
4862: PUSH
4863: LD_OWVAR 2
4867: ARRAY
4868: ST_TO_ADDR
// if IAmSpec then
4869: CALL_OW 531
4873: IFFALSE 4914
// begin FogOff ( true ) ;
4875: LD_INT 1
4877: PPUSH
4878: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4882: LD_EXP 29
4886: PUSH
4887: LD_INT 1
4889: ARRAY
4890: PUSH
4891: LD_INT 2
4893: DIV
4894: PPUSH
4895: LD_EXP 29
4899: PUSH
4900: LD_INT 2
4902: ARRAY
4903: PUSH
4904: LD_INT 2
4906: DIV
4907: PPUSH
4908: CALL_OW 86
// end else
4912: GO 4960
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4914: LD_EXP 21
4918: PUSH
4919: LD_EXP 7
4923: PUSH
4924: LD_OWVAR 2
4928: ARRAY
4929: ARRAY
4930: PUSH
4931: LD_INT 1
4933: ARRAY
4934: PPUSH
4935: LD_EXP 21
4939: PUSH
4940: LD_EXP 7
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 2
4954: ARRAY
4955: PPUSH
4956: CALL_OW 86
// end ; BeginBuildUp ;
4960: CALL 5733 0 0
// enable ( mpActive ) ;
4964: LD_INT 100
4966: ENABLE_MARKED
// enable ( mpGameType ) ;
4967: LD_EXP 3
4971: ENABLE_MARKED
// mpGameActive := true ;
4972: LD_ADDR_EXP 38
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// end ;
4980: LD_VAR 0 1
4984: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
4989: PPUSH
// result := [ ] ;
4990: LD_ADDR_VAR 0 5
4994: PUSH
4995: EMPTY
4996: ST_TO_ADDR
// class := class_soldier ;
4997: LD_ADDR_VAR 0 7
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// uc_side := side ;
5005: LD_ADDR_OWVAR 20
5009: PUSH
5010: LD_VAR 0 1
5014: ST_TO_ADDR
// uc_nation := nation ;
5015: LD_ADDR_OWVAR 21
5019: PUSH
5020: LD_VAR 0 2
5024: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5025: LD_ADDR_OWVAR 26
5029: PUSH
5030: LD_OWVAR 19
5034: PUSH
5035: LD_VAR 0 1
5039: ARRAY
5040: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5041: LD_INT 1
5043: PPUSH
5044: LD_INT 2
5046: PPUSH
5047: CALL_OW 12
5051: PPUSH
5052: LD_VAR 0 7
5056: PPUSH
5057: LD_VAR 0 4
5061: PUSH
5062: LD_INT 2
5064: PLUS
5065: PPUSH
5066: CALL_OW 380
// hc_importance := 105 ;
5070: LD_ADDR_OWVAR 32
5074: PUSH
5075: LD_INT 105
5077: ST_TO_ADDR
// if Multiplayer then
5078: LD_OWVAR 4
5082: IFFALSE 5122
// begin hc_gallery := MULTIAVATARS ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING MULTIAVATARS
5091: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_VAR 0 1
5101: PPUSH
5102: CALL_OW 525
5106: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5107: LD_ADDR_OWVAR 27
5111: PUSH
5112: LD_VAR 0 1
5116: PPUSH
5117: CALL_OW 526
5121: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5122: LD_ADDR_VAR 0 5
5126: PUSH
5127: LD_VAR 0 5
5131: PPUSH
5132: CALL_OW 44
5136: PPUSH
5137: CALL 46575 0 2
5141: ST_TO_ADDR
// InitHc_All ( ) ;
5142: CALL_OW 584
// class := 2 ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_INT 2
5153: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5154: LD_ADDR_VAR 0 6
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 1
5171: MINUS
5172: PUSH
5173: FOR_TO
5174: IFFALSE 5248
// begin PrepareHuman ( false , class , skill ) ;
5176: LD_INT 0
5178: PPUSH
5179: LD_VAR 0 7
5183: PPUSH
5184: LD_VAR 0 4
5188: PPUSH
5189: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
5193: LD_ADDR_VAR 0 5
5197: PUSH
5198: LD_VAR 0 5
5202: PPUSH
5203: CALL_OW 44
5207: PPUSH
5208: CALL 46575 0 2
5212: ST_TO_ADDR
// class := Inc ( class ) ;
5213: LD_ADDR_VAR 0 7
5217: PUSH
5218: LD_VAR 0 7
5222: PPUSH
5223: CALL 47936 0 1
5227: ST_TO_ADDR
// if class = 5 then
5228: LD_VAR 0 7
5232: PUSH
5233: LD_INT 5
5235: EQUAL
5236: IFFALSE 5246
// class := 1 ;
5238: LD_ADDR_VAR 0 7
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// end ;
5246: GO 5173
5248: POP
5249: POP
// end ;
5250: LD_VAR 0 5
5254: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5255: LD_INT 0
5257: PPUSH
5258: PPUSH
// result := [ ] ;
5259: LD_ADDR_VAR 0 4
5263: PUSH
5264: EMPTY
5265: ST_TO_ADDR
// if not vehicles then
5266: LD_VAR 0 3
5270: NOT
5271: IFFALSE 5275
// exit ;
5273: GO 5434
// for i := 1 to vehicles [ nation ] do
5275: LD_ADDR_VAR 0 5
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 2
5294: ARRAY
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5432
// begin uc_side := side ;
5299: LD_ADDR_OWVAR 20
5303: PUSH
5304: LD_VAR 0 1
5308: ST_TO_ADDR
// uc_nation := nation ;
5309: LD_ADDR_OWVAR 21
5313: PUSH
5314: LD_VAR 0 2
5318: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5319: LD_VAR 0 3
5323: PUSH
5324: LD_VAR 0 2
5328: ARRAY
5329: PUSH
5330: LD_VAR 0 5
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PPUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_VAR 0 2
5349: ARRAY
5350: PUSH
5351: LD_VAR 0 5
5355: ARRAY
5356: PUSH
5357: LD_INT 2
5359: ARRAY
5360: PPUSH
5361: LD_VAR 0 3
5365: PUSH
5366: LD_VAR 0 2
5370: ARRAY
5371: PUSH
5372: LD_VAR 0 5
5376: ARRAY
5377: PUSH
5378: LD_INT 3
5380: ARRAY
5381: PPUSH
5382: LD_VAR 0 3
5386: PUSH
5387: LD_VAR 0 2
5391: ARRAY
5392: PUSH
5393: LD_VAR 0 5
5397: ARRAY
5398: PUSH
5399: LD_INT 4
5401: ARRAY
5402: PPUSH
5403: LD_INT 80
5405: PPUSH
5406: CALL 13724 0 5
// result := Join ( result , CreateVehicle ) ;
5410: LD_ADDR_VAR 0 4
5414: PUSH
5415: LD_VAR 0 4
5419: PPUSH
5420: CALL_OW 45
5424: PPUSH
5425: CALL 46575 0 2
5429: ST_TO_ADDR
// end ;
5430: GO 5296
5432: POP
5433: POP
// end ;
5434: LD_VAR 0 4
5438: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5439: LD_INT 0
5441: PPUSH
5442: PPUSH
// for i in mpBattleFlags do
5443: LD_ADDR_VAR 0 3
5447: PUSH
5448: LD_EXP 23
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5531
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5456: LD_VAR 0 3
5460: PPUSH
5461: LD_INT 1
5463: PUSH
5464: LD_VAR 0 1
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 2
5475: PUSH
5476: LD_VAR 0 1
5480: PUSH
5481: LD_REAL  7.00000000000000E-0001
5484: MUL
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 3
5492: PUSH
5493: LD_VAR 0 1
5497: PUSH
5498: LD_REAL  4.00000000000000E-0001
5501: MUL
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 20
5509: PUSH
5510: LD_VAR 0 1
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 423
5529: GO 5453
5531: POP
5532: POP
// end ;
5533: LD_VAR 0 2
5537: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5538: LD_INT 100
5540: IFFALSE 5635
5542: GO 5544
5544: DISABLE
5545: LD_INT 0
5547: PPUSH
5548: PPUSH
// begin if mpBattleFlag <= 0 then
5549: LD_EXP 22
5553: PUSH
5554: LD_INT 0
5556: LESSEQUAL
5557: IFFALSE 5561
// exit ;
5559: GO 5635
// strength := 100 ;
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_INT 100
5568: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5569: LD_EXP 22
5573: PPUSH
5574: CALL_OW 67
// strength := Dec ( strength ) ;
5578: LD_ADDR_VAR 0 2
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL 47958 0 1
5592: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5593: LD_VAR 0 2
5597: PPUSH
5598: CALL 5439 0 1
// until not strength ;
5602: LD_VAR 0 2
5606: NOT
5607: IFFALSE 5569
// for i in mpBattleFlags do
5609: LD_ADDR_VAR 0 1
5613: PUSH
5614: LD_EXP 23
5618: PUSH
5619: FOR_IN
5620: IFFALSE 5633
// KillBattleFlag ( i ) ;
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 419
5631: GO 5619
5633: POP
5634: POP
// end ;
5635: PPOPN 2
5637: END
// every 0 0$1 marked mpActive do var side , tmp ;
5638: GO 5640
5640: DISABLE
5641: LD_INT 0
5643: PPUSH
5644: PPUSH
// begin if mpSibBomb <= 1 then
5645: LD_EXP 28
5649: PUSH
5650: LD_INT 1
5652: LESSEQUAL
5653: IFFALSE 5657
// exit ;
5655: GO 5730
// tmp := mpSibBomb ;
5657: LD_ADDR_VAR 0 2
5661: PUSH
5662: LD_EXP 28
5666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_VAR 0 2
5683: PUSH
5684: LD_INT 35
5686: MINUS
5687: ST_TO_ADDR
// until not tmp ;
5688: LD_VAR 0 2
5692: NOT
5693: IFFALSE 5667
// for side := 1 to 8 do
5695: LD_ADDR_VAR 0 1
5699: PUSH
5700: DOUBLE
5701: LD_INT 1
5703: DEC
5704: ST_TO_ADDR
5705: LD_INT 8
5707: PUSH
5708: FOR_TO
5709: IFFALSE 5728
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5711: LD_INT 25
5713: PPUSH
5714: LD_VAR 0 1
5718: PPUSH
5719: LD_INT 1
5721: PPUSH
5722: CALL_OW 322
5726: GO 5708
5728: POP
5729: POP
// end ;
5730: PPOPN 2
5732: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5733: LD_INT 0
5735: PPUSH
5736: PPUSH
5737: PPUSH
// mpBuildUpTimeDelay := 0 ;
5738: LD_ADDR_EXP 41
5742: PUSH
5743: LD_INT 0
5745: ST_TO_ADDR
// if not mpBuildUpTime then
5746: LD_EXP 20
5750: NOT
5751: IFFALSE 5755
// exit ;
5753: GO 5938
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5755: LD_ADDR_EXP 41
5759: PUSH
5760: LD_INT 8400
5762: PUSH
5763: LD_INT 2100
5765: PUSH
5766: LD_EXP 20
5770: MUL
5771: PLUS
5772: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5773: LD_ADDR_EXP 42
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// for i := 1 to 8 do
5781: LD_ADDR_VAR 0 2
5785: PUSH
5786: DOUBLE
5787: LD_INT 1
5789: DEC
5790: ST_TO_ADDR
5791: LD_INT 8
5793: PUSH
5794: FOR_TO
5795: IFFALSE 5936
// if mpSidePositions [ i ] then
5797: LD_EXP 7
5801: PUSH
5802: LD_VAR 0 2
5806: ARRAY
5807: IFFALSE 5934
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5809: LD_EXP 19
5813: PUSH
5814: LD_EXP 7
5818: PUSH
5819: LD_VAR 0 2
5823: ARRAY
5824: ARRAY
5825: PPUSH
5826: LD_INT 5
5828: PPUSH
5829: CALL_OW 424
// for j := 1 to 8 do
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: DOUBLE
5839: LD_INT 1
5841: DEC
5842: ST_TO_ADDR
5843: LD_INT 8
5845: PUSH
5846: FOR_TO
5847: IFFALSE 5932
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5849: LD_EXP 7
5853: PUSH
5854: LD_VAR 0 3
5858: ARRAY
5859: PUSH
5860: LD_EXP 8
5864: PUSH
5865: LD_VAR 0 2
5869: ARRAY
5870: PUSH
5871: LD_EXP 8
5875: PUSH
5876: LD_VAR 0 3
5880: ARRAY
5881: NONEQUAL
5882: PUSH
5883: LD_EXP 11
5887: NOT
5888: PUSH
5889: LD_VAR 0 2
5893: PUSH
5894: LD_VAR 0 3
5898: NONEQUAL
5899: AND
5900: OR
5901: AND
5902: IFFALSE 5930
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
5904: LD_VAR 0 3
5908: PPUSH
5909: LD_EXP 19
5913: PUSH
5914: LD_EXP 7
5918: PUSH
5919: LD_VAR 0 2
5923: ARRAY
5924: ARRAY
5925: PPUSH
5926: CALL_OW 333
5930: GO 5846
5932: POP
5933: POP
// end ;
5934: GO 5794
5936: POP
5937: POP
// end ;
5938: LD_VAR 0 1
5942: RET
// function EndBuildUp ; var i , j ; begin
5943: LD_INT 0
5945: PPUSH
5946: PPUSH
5947: PPUSH
// mpBuildUpTimeActive := false ;
5948: LD_ADDR_EXP 42
5952: PUSH
5953: LD_INT 0
5955: ST_TO_ADDR
// for i := 1 to 8 do
5956: LD_ADDR_VAR 0 2
5960: PUSH
5961: DOUBLE
5962: LD_INT 1
5964: DEC
5965: ST_TO_ADDR
5966: LD_INT 8
5968: PUSH
5969: FOR_TO
5970: IFFALSE 6111
// if mpSidePositions [ i ] then
5972: LD_EXP 7
5976: PUSH
5977: LD_VAR 0 2
5981: ARRAY
5982: IFFALSE 6109
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
5984: LD_EXP 19
5988: PUSH
5989: LD_EXP 7
5993: PUSH
5994: LD_VAR 0 2
5998: ARRAY
5999: ARRAY
6000: PPUSH
6001: LD_INT 0
6003: PPUSH
6004: CALL_OW 424
// for j := 1 to 8 do
6008: LD_ADDR_VAR 0 3
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_INT 8
6020: PUSH
6021: FOR_TO
6022: IFFALSE 6107
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6024: LD_EXP 7
6028: PUSH
6029: LD_VAR 0 3
6033: ARRAY
6034: PUSH
6035: LD_EXP 8
6039: PUSH
6040: LD_VAR 0 2
6044: ARRAY
6045: PUSH
6046: LD_EXP 8
6050: PUSH
6051: LD_VAR 0 3
6055: ARRAY
6056: NONEQUAL
6057: PUSH
6058: LD_EXP 11
6062: NOT
6063: PUSH
6064: LD_VAR 0 2
6068: PUSH
6069: LD_VAR 0 3
6073: NONEQUAL
6074: AND
6075: OR
6076: AND
6077: IFFALSE 6105
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6079: LD_VAR 0 3
6083: PPUSH
6084: LD_EXP 19
6088: PUSH
6089: LD_EXP 7
6093: PUSH
6094: LD_VAR 0 2
6098: ARRAY
6099: ARRAY
6100: PPUSH
6101: CALL_OW 334
6105: GO 6021
6107: POP
6108: POP
// end ;
6109: GO 5969
6111: POP
6112: POP
// end ;
6113: LD_VAR 0 1
6117: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6118: LD_EXP 42
6122: IFFALSE 6297
6124: GO 6126
6126: DISABLE
6127: LD_INT 0
6129: PPUSH
6130: PPUSH
// begin for i := 1 to 8 do
6131: LD_ADDR_VAR 0 1
6135: PUSH
6136: DOUBLE
6137: LD_INT 1
6139: DEC
6140: ST_TO_ADDR
6141: LD_INT 8
6143: PUSH
6144: FOR_TO
6145: IFFALSE 6294
// if mpSidePositions [ i ] then
6147: LD_EXP 7
6151: PUSH
6152: LD_VAR 0 1
6156: ARRAY
6157: IFFALSE 6292
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_EXP 19
6168: PUSH
6169: LD_EXP 7
6173: PUSH
6174: LD_VAR 0 1
6178: ARRAY
6179: ARRAY
6180: PPUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 21
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 21
6196: PUSH
6197: LD_INT 2
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 22
6211: PUSH
6212: LD_OWVAR 2
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PPUSH
6225: CALL_OW 70
6229: PUSH
6230: FOR_IN
6231: IFFALSE 6290
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6233: LD_EXP 8
6237: PUSH
6238: LD_VAR 0 1
6242: ARRAY
6243: PUSH
6244: LD_EXP 8
6248: PUSH
6249: LD_OWVAR 2
6253: ARRAY
6254: NONEQUAL
6255: PUSH
6256: LD_EXP 11
6260: NOT
6261: PUSH
6262: LD_VAR 0 1
6266: PUSH
6267: LD_OWVAR 2
6271: NONEQUAL
6272: AND
6273: OR
6274: IFFALSE 6288
// ComMoveToArea ( un , BuildUpEscape ) ;
6276: LD_VAR 0 2
6280: PPUSH
6281: LD_INT 16
6283: PPUSH
6284: CALL_OW 113
6288: GO 6230
6290: POP
6291: POP
6292: GO 6144
6294: POP
6295: POP
// enable ;
6296: ENABLE
// end ;
6297: PPOPN 2
6299: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6300: LD_EXP 20
6304: IFFALSE 6354
6306: GO 6308
6308: DISABLE
6309: LD_INT 0
6311: PPUSH
// begin tmp := mpBuildUpTime ;
6312: LD_ADDR_VAR 0 1
6316: PUSH
6317: LD_EXP 20
6321: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6322: LD_INT 35
6324: PPUSH
6325: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6329: LD_ADDR_VAR 0 1
6333: PUSH
6334: LD_VAR 0 1
6338: PUSH
6339: LD_INT 35
6341: MINUS
6342: ST_TO_ADDR
// until not tmp ;
6343: LD_VAR 0 1
6347: NOT
6348: IFFALSE 6322
// EndBuildUp ;
6350: CALL 5943 0 0
// end ;
6354: PPOPN 1
6356: END
// every 0 0$1 trigger mpActive marked mpWin do
6357: LD_INT 100
6359: IFFALSE 6393
6361: GO 6363
6363: DISABLE
// begin if IAmServer then
6364: CALL_OW 518
6368: IFFALSE 6377
// wait ( 0 0$3 ) ;
6370: LD_INT 105
6372: PPUSH
6373: CALL_OW 67
// if Multiplayer then
6377: LD_OWVAR 4
6381: IFFALSE 6389
// YouWinInMultiplayer else
6383: CALL_OW 106
6387: GO 6393
// YouWin ;
6389: CALL_OW 103
// end ;
6393: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6394: LD_INT 0
6396: PPUSH
// result := false ;
6397: LD_ADDR_VAR 0 3
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// case gameType of GameTypeNormal :
6405: LD_VAR 0 1
6409: PUSH
6410: LD_INT 1
6412: DOUBLE
6413: EQUAL
6414: IFTRUE 6418
6416: GO 6491
6418: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_VAR 0 2
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 21
6441: PUSH
6442: LD_INT 1
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 33
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 33
6461: PUSH
6462: LD_INT 5
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: PPUSH
6484: CALL 10986 0 1
6488: ST_TO_ADDR
// end ; GameTypeSurvival :
6489: GO 6726
6491: LD_INT 2
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6627
6499: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: LD_INT 22
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 30
6522: PUSH
6523: LD_INT 0
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 30
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PPUSH
6549: CALL_OW 69
6553: PPUSH
6554: CALL 10986 0 1
6558: PUSH
6559: LD_INT 22
6561: PUSH
6562: LD_VAR 0 2
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 2
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 1
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 33
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 33
6596: PUSH
6597: LD_INT 5
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PPUSH
6614: CALL_OW 69
6618: PPUSH
6619: CALL 10986 0 1
6623: AND
6624: ST_TO_ADDR
// end ; GameTypeKing :
6625: GO 6726
6627: LD_INT 3
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6725
6635: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_INT 22
6643: PUSH
6644: LD_VAR 0 2
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 21
6658: PUSH
6659: LD_INT 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 33
6668: PUSH
6669: LD_INT 3
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 33
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PPUSH
6696: CALL_OW 69
6700: PPUSH
6701: CALL 10986 0 1
6705: PUSH
6706: LD_VAR 0 2
6710: PPUSH
6711: CALL 73960 0 1
6715: PUSH
6716: LD_EXP 34
6720: GREATEREQUAL
6721: OR
6722: ST_TO_ADDR
// end ; end ;
6723: GO 6726
6725: POP
// end ;
6726: LD_VAR 0 3
6730: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6731: LD_INT 100
6733: IFFALSE 6955
6735: GO 6737
6737: DISABLE
6738: LD_INT 0
6740: PPUSH
6741: PPUSH
// begin if Multiplayer then
6742: LD_OWVAR 4
6746: IFFALSE 6754
// SetPlayerSpectator ( ) else
6748: CALL_OW 572
6752: GO 6763
// FogOff ( your_side ) ;
6754: LD_OWVAR 2
6758: PPUSH
6759: CALL_OW 344
// repeat gameIsOn := false ;
6763: LD_ADDR_VAR 0 1
6767: PUSH
6768: LD_INT 0
6770: ST_TO_ADDR
// for i := 1 to 8 do
6771: LD_ADDR_VAR 0 2
6775: PUSH
6776: DOUBLE
6777: LD_INT 1
6779: DEC
6780: ST_TO_ADDR
6781: LD_INT 8
6783: PUSH
6784: FOR_TO
6785: IFFALSE 6907
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6787: LD_EXP 7
6791: PUSH
6792: LD_VAR 0 2
6796: ARRAY
6797: PUSH
6798: LD_VAR 0 2
6802: PPUSH
6803: CALL_OW 108
6807: AND
6808: PUSH
6809: LD_VAR 0 2
6813: PUSH
6814: LD_OWVAR 2
6818: NONEQUAL
6819: AND
6820: IFFALSE 6905
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6822: LD_EXP 8
6826: PUSH
6827: LD_VAR 0 2
6831: ARRAY
6832: NOT
6833: PUSH
6834: LD_EXP 8
6838: PUSH
6839: LD_VAR 0 2
6843: ARRAY
6844: PUSH
6845: LD_EXP 8
6849: PUSH
6850: LD_OWVAR 2
6854: ARRAY
6855: NONEQUAL
6856: PUSH
6857: LD_OWVAR 2
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 81
6871: PUSH
6872: LD_INT 1
6874: NONEQUAL
6875: AND
6876: OR
6877: IFFALSE 6905
// if HasPowerByGameType ( mpGameType , i ) then
6879: LD_EXP 3
6883: PPUSH
6884: LD_VAR 0 2
6888: PPUSH
6889: CALL 6394 0 2
6893: IFFALSE 6905
// begin gameIsOn := true ;
6895: LD_ADDR_VAR 0 1
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// break ;
6903: GO 6907
// end ;
6905: GO 6784
6907: POP
6908: POP
// wait ( 100 ) ;
6909: LD_INT 100
6911: PPUSH
6912: CALL_OW 67
// until not gameIsOn ;
6916: LD_VAR 0 1
6920: NOT
6921: IFFALSE 6763
// if IAmServer then
6923: CALL_OW 518
6927: IFFALSE 6936
// wait ( 0 0$3 ) ;
6929: LD_INT 105
6931: PPUSH
6932: CALL_OW 67
// if Multiplayer then
6936: LD_OWVAR 4
6940: IFFALSE 6948
// YouLostInMultiplayer else
6942: CALL_OW 107
6946: GO 6955
// YouLost (  ) ;
6948: LD_STRING 
6950: PPUSH
6951: CALL_OW 104
// end ;
6955: PPOPN 2
6957: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
6958: LD_EXP 32
6962: IFFALSE 7309
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: LD_INT 4
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: LD_INT 6
6996: PUSH
6997: LD_INT 7
6999: PUSH
7000: LD_INT 8
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7013: LD_INT 350
7015: PPUSH
7016: CALL_OW 67
// for i := 1 to 8 do
7020: LD_ADDR_VAR 0 1
7024: PUSH
7025: DOUBLE
7026: LD_INT 1
7028: DEC
7029: ST_TO_ADDR
7030: LD_INT 8
7032: PUSH
7033: FOR_TO
7034: IFFALSE 7279
// begin j := sides [ i ] ;
7036: LD_ADDR_VAR 0 2
7040: PUSH
7041: LD_VAR 0 5
7045: PUSH
7046: LD_VAR 0 1
7050: ARRAY
7051: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7052: LD_EXP 39
7056: PUSH
7057: LD_VAR 0 2
7061: ARRAY
7062: PPUSH
7063: CALL 10986 0 1
7067: PUSH
7068: LD_VAR 0 2
7072: PPUSH
7073: CALL_OW 108
7077: AND
7078: PUSH
7079: LD_EXP 3
7083: PPUSH
7084: LD_VAR 0 2
7088: PPUSH
7089: CALL 6394 0 2
7093: AND
7094: IFFALSE 7277
// begin wait ( mpRespawn div 3 ) ;
7096: LD_EXP 32
7100: PUSH
7101: LD_INT 3
7103: DIV
7104: PPUSH
7105: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 22
7116: PUSH
7117: LD_VAR 0 2
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 50
7128: PUSH
7129: EMPTY
7130: LIST
7131: PUSH
7132: LD_INT 2
7134: PUSH
7135: LD_INT 30
7137: PUSH
7138: LD_INT 0
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 30
7147: PUSH
7148: LD_INT 1
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 69
7169: ST_TO_ADDR
// if not tmp then
7170: LD_VAR 0 3
7174: NOT
7175: IFFALSE 7179
// continue ;
7177: GO 7033
// spawn := tmp [ 1 ] ;
7179: LD_ADDR_VAR 0 4
7183: PUSH
7184: LD_VAR 0 3
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7193: LD_EXP 39
7197: PUSH
7198: LD_VAR 0 2
7202: ARRAY
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: LD_VAR 0 4
7212: PPUSH
7213: CALL_OW 250
7217: PPUSH
7218: LD_VAR 0 4
7222: PPUSH
7223: CALL_OW 251
7227: PPUSH
7228: LD_INT 32
7230: PPUSH
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7238: LD_ADDR_EXP 39
7242: PUSH
7243: LD_EXP 39
7247: PPUSH
7248: LD_VAR 0 2
7252: PPUSH
7253: LD_EXP 39
7257: PUSH
7258: LD_VAR 0 2
7262: ARRAY
7263: PPUSH
7264: LD_INT 1
7266: PPUSH
7267: CALL_OW 3
7271: PPUSH
7272: CALL_OW 1
7276: ST_TO_ADDR
// end ; end ;
7277: GO 7033
7279: POP
7280: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7281: LD_ADDR_VAR 0 5
7285: PUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: LD_INT 1
7293: PPUSH
7294: LD_INT 8
7296: PPUSH
7297: LD_INT 1
7299: PPUSH
7300: CALL 13264 0 4
7304: ST_TO_ADDR
// until false ;
7305: LD_INT 0
7307: IFFALSE 7013
// end ;
7309: PPOPN 5
7311: END
// every 0 0$1 marked mpActive do
7312: GO 7314
7314: DISABLE
// begin enable ;
7315: ENABLE
// if not mpDisplayStrings then
7316: LD_EXP 37
7320: NOT
7321: IFFALSE 7332
// begin display_strings := [ ] ;
7323: LD_ADDR_OWVAR 47
7327: PUSH
7328: EMPTY
7329: ST_TO_ADDR
// exit ;
7330: GO 7342
// end ; display_strings := mpDisplayStrings ;
7332: LD_ADDR_OWVAR 47
7336: PUSH
7337: LD_EXP 37
7341: ST_TO_ADDR
// end ; end_of_file
7342: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
// if GetType ( un ) = unit_vehicle then
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 247
7363: PUSH
7364: LD_INT 2
7366: EQUAL
7367: IFFALSE 7371
// exit ;
7369: GO 7928
// side := GetSide ( un ) ;
7371: LD_ADDR_VAR 0 9
7375: PUSH
7376: LD_VAR 0 1
7380: PPUSH
7381: CALL_OW 255
7385: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7386: LD_EXP 3
7390: PUSH
7391: LD_INT 2
7393: EQUAL
7394: IFFALSE 7487
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
7396: LD_VAR 0 1
7400: PPUSH
7401: CALL_OW 266
7405: PUSH
7406: LD_INT 0
7408: PUSH
7409: LD_INT 1
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: IN
7416: PUSH
7417: LD_VAR 0 1
7421: PPUSH
7422: CALL_OW 110
7426: PUSH
7427: LD_VAR 0 9
7431: EQUAL
7432: AND
7433: IFFALSE 7487
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7435: LD_ADDR_VAR 0 3
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_VAR 0 9
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 21
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: FOR_IN
7472: IFFALSE 7485
// KillUnit ( i ) ;
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL_OW 66
7483: GO 7471
7485: POP
7486: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7487: LD_VAR 0 1
7491: PPUSH
7492: CALL_OW 257
7496: PUSH
7497: LD_INT 12
7499: PUSH
7500: LD_INT 17
7502: PUSH
7503: LD_INT 15
7505: PUSH
7506: LD_INT 16
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: IN
7515: PUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 263
7525: PUSH
7526: LD_INT 5
7528: EQUAL
7529: OR
7530: IFFALSE 7664
// begin tag := GetTag ( un ) ;
7532: LD_ADDR_VAR 0 5
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: CALL_OW 110
7546: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7547: LD_ADDR_VAR 0 7
7551: PUSH
7552: LD_EXP 31
7556: PUSH
7557: LD_EXP 7
7561: PUSH
7562: LD_VAR 0 5
7566: ARRAY
7567: ARRAY
7568: ST_TO_ADDR
// if not area then
7569: LD_VAR 0 7
7573: NOT
7574: IFFALSE 7578
// exit ;
7576: GO 7928
// wait ( 4 4$00 ) ;
7578: LD_INT 8400
7580: PPUSH
7581: CALL_OW 67
// repeat wait ( 10 ) ;
7585: LD_INT 10
7587: PPUSH
7588: CALL_OW 67
// until not mpBlockRespThread ;
7592: LD_EXP 40
7596: NOT
7597: IFFALSE 7585
// mpBlockRespThread := true ;
7599: LD_ADDR_EXP 40
7603: PUSH
7604: LD_INT 1
7606: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7607: LD_INT 5
7609: NEG
7610: PPUSH
7611: CALL 42843 0 1
// ape := CreateHuman ;
7615: LD_ADDR_VAR 0 4
7619: PUSH
7620: CALL_OW 44
7624: ST_TO_ADDR
// SetTag ( ape , tag ) ;
7625: LD_VAR 0 4
7629: PPUSH
7630: LD_VAR 0 5
7634: PPUSH
7635: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
7639: LD_VAR 0 4
7643: PPUSH
7644: LD_VAR 0 7
7648: PPUSH
7649: LD_INT 0
7651: PPUSH
7652: CALL_OW 49
// mpBlockRespThread := false ;
7656: LD_ADDR_EXP 40
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7664: LD_VAR 0 1
7668: PPUSH
7669: CALL_OW 247
7673: PUSH
7674: LD_INT 1
7676: EQUAL
7677: PUSH
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 248
7687: PUSH
7688: LD_INT 0
7690: GREATER
7691: AND
7692: IFFALSE 7928
// begin if not mpRespawn then
7694: LD_EXP 32
7698: NOT
7699: IFFALSE 7703
// exit ;
7701: GO 7928
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
7703: LD_VAR 0 9
7707: PPUSH
7708: CALL_OW 108
7712: NOT
7713: PUSH
7714: LD_EXP 3
7718: PPUSH
7719: LD_VAR 0 9
7723: PPUSH
7724: CALL 6394 0 2
7728: NOT
7729: AND
7730: IFFALSE 7734
// exit ;
7732: GO 7928
// side := GetSide ( un ) ;
7734: LD_ADDR_VAR 0 9
7738: PUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 255
7748: ST_TO_ADDR
// nation := GetNation ( un ) ;
7749: LD_ADDR_VAR 0 8
7753: PUSH
7754: LD_VAR 0 1
7758: PPUSH
7759: CALL_OW 248
7763: ST_TO_ADDR
// class := GetClass ( un ) ;
7764: LD_ADDR_VAR 0 6
7768: PUSH
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 257
7778: ST_TO_ADDR
// if class > 4 then
7779: LD_VAR 0 6
7783: PUSH
7784: LD_INT 4
7786: GREATER
7787: IFFALSE 7797
// class := 1 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// repeat wait ( 10 ) ;
7797: LD_INT 10
7799: PPUSH
7800: CALL_OW 67
// until not mpBlockRespThread ;
7804: LD_EXP 40
7808: NOT
7809: IFFALSE 7797
// mpBlockRespThread := true ;
7811: LD_ADDR_EXP 40
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// uc_side := side ;
7819: LD_ADDR_OWVAR 20
7823: PUSH
7824: LD_VAR 0 9
7828: ST_TO_ADDR
// uc_nation := nation ;
7829: LD_ADDR_OWVAR 21
7833: PUSH
7834: LD_VAR 0 8
7838: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
7839: LD_INT 0
7841: PPUSH
7842: LD_VAR 0 6
7846: PPUSH
7847: LD_INT 2
7849: PPUSH
7850: CALL_OW 380
// un := CreateHuman ;
7854: LD_ADDR_VAR 0 1
7858: PUSH
7859: CALL_OW 44
7863: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
7864: LD_ADDR_EXP 39
7868: PUSH
7869: LD_EXP 39
7873: PPUSH
7874: LD_VAR 0 9
7878: PPUSH
7879: LD_EXP 39
7883: PUSH
7884: LD_VAR 0 9
7888: ARRAY
7889: PPUSH
7890: LD_EXP 39
7894: PUSH
7895: LD_VAR 0 9
7899: ARRAY
7900: PUSH
7901: LD_INT 1
7903: PLUS
7904: PPUSH
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 1
7914: PPUSH
7915: CALL_OW 1
7919: ST_TO_ADDR
// mpBlockRespThread := false ;
7920: LD_ADDR_EXP 40
7924: PUSH
7925: LD_INT 0
7927: ST_TO_ADDR
// end ; end ;
7928: LD_VAR 0 2
7932: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
7933: LD_INT 0
7935: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 266
7945: PUSH
7946: LD_INT 0
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: IN
7956: IFFALSE 7981
// SetBName ( building , @ & GetSide ( building ) ) ;
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_STRING @
7965: PUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 255
7975: STR
7976: PPUSH
7977: CALL_OW 500
// end ;
7981: LD_VAR 0 2
7985: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
7986: LD_INT 0
7988: PPUSH
7989: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
7990: LD_EXP 3
7994: PUSH
7995: LD_INT 2
7997: EQUAL
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 266
8008: PUSH
8009: LD_INT 0
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: IN
8019: AND
8020: IFFALSE 8085
// begin KillUnit ( building ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8031: LD_ADDR_VAR 0 5
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 2
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 21
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: PUSH
8067: FOR_IN
8068: IFFALSE 8081
// KillUnit ( i ) ;
8070: LD_VAR 0 5
8074: PPUSH
8075: CALL_OW 66
8079: GO 8067
8081: POP
8082: POP
// exit ;
8083: GO 8130
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: CALL_OW 266
8094: PUSH
8095: LD_INT 0
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: IN
8105: IFFALSE 8130
// SetBName ( building , @ & GetSide ( building ) ) ;
8107: LD_VAR 0 1
8111: PPUSH
8112: LD_STRING @
8114: PUSH
8115: LD_VAR 0 1
8119: PPUSH
8120: CALL_OW 255
8124: STR
8125: PPUSH
8126: CALL_OW 500
// end ; end_of_file
8130: LD_VAR 0 4
8134: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8135: LD_EXP 38
8139: PUSH
8140: CALL 8345 0 0
8144: AND
8145: PUSH
8146: LD_OWVAR 4
8150: AND
8151: IFFALSE 8342
8153: GO 8155
8155: DISABLE
8156: LD_INT 0
8158: PPUSH
8159: PPUSH
// begin canWin := false ;
8160: LD_ADDR_VAR 0 2
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// if not HasPower ( your_side ) then
8168: LD_OWVAR 2
8172: PPUSH
8173: CALL 8385 0 1
8177: NOT
8178: IFFALSE 8189
// begin Multiplayer_Loose_Message ;
8180: CALL_OW 521
// enable ( mpLose ) ;
8184: LD_INT 102
8186: ENABLE_MARKED
// end else
8187: GO 8342
// begin canWin := true ;
8189: LD_ADDR_VAR 0 2
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// for i := 1 to 8 do
8197: LD_ADDR_VAR 0 1
8201: PUSH
8202: DOUBLE
8203: LD_INT 1
8205: DEC
8206: ST_TO_ADDR
8207: LD_INT 8
8209: PUSH
8210: FOR_TO
8211: IFFALSE 8328
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8213: LD_EXP 7
8217: PUSH
8218: LD_VAR 0 1
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 108
8233: AND
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_OWVAR 2
8244: NONEQUAL
8245: AND
8246: IFFALSE 8326
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8248: LD_EXP 8
8252: PUSH
8253: LD_VAR 0 1
8257: ARRAY
8258: NOT
8259: PUSH
8260: LD_EXP 8
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: PUSH
8271: LD_EXP 8
8275: PUSH
8276: LD_OWVAR 2
8280: ARRAY
8281: NONEQUAL
8282: PUSH
8283: LD_OWVAR 2
8287: PPUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 81
8297: PUSH
8298: LD_INT 1
8300: NONEQUAL
8301: AND
8302: OR
8303: IFFALSE 8326
// if HasPower ( i ) then
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL 8385 0 1
8314: IFFALSE 8326
// begin canWin := false ;
8316: LD_ADDR_VAR 0 2
8320: PUSH
8321: LD_INT 0
8323: ST_TO_ADDR
// break ;
8324: GO 8328
// end ;
8326: GO 8210
8328: POP
8329: POP
// if canWin then
8330: LD_VAR 0 2
8334: IFFALSE 8341
// enable ( mpWin ) else
8336: LD_INT 101
8338: ENABLE_MARKED
8339: GO 8342
// enable ;
8341: ENABLE
// end ; end ;
8342: PPOPN 2
8344: END
// function CanWinLoose ; begin
8345: LD_INT 0
8347: PPUSH
// result := true ;
8348: LD_ADDR_VAR 0 1
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8356: CALL_OW 531
8360: PUSH
8361: CALL_OW 519
8365: PUSH
8366: LD_INT 1
8368: GREATER
8369: AND
8370: IFFALSE 8380
// result := false ;
8372: LD_ADDR_VAR 0 1
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// end ;
8380: LD_VAR 0 1
8384: RET
// function HasPower ( i ) ; begin
8385: LD_INT 0
8387: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_VAR 0 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 21
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 33
8420: PUSH
8421: LD_INT 3
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 33
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: ST_TO_ADDR
// end ; end_of_file
8453: LD_VAR 0 2
8457: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8458: LD_EXP 38
8462: IFFALSE 8505
8464: GO 8466
8466: DISABLE
8467: LD_INT 0
8469: PPUSH
// begin for i := 1 to 8 do
8470: LD_ADDR_VAR 0 1
8474: PUSH
8475: DOUBLE
8476: LD_INT 1
8478: DEC
8479: ST_TO_ADDR
8480: LD_INT 8
8482: PUSH
8483: FOR_TO
8484: IFFALSE 8503
// SetRestrict ( b_depot , i , state_disabled ) ;
8486: LD_INT 0
8488: PPUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_INT 0
8496: PPUSH
8497: CALL_OW 324
8501: GO 8483
8503: POP
8504: POP
// end ;
8505: PPOPN 1
8507: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8508: LD_EXP 38
8512: PUSH
8513: CALL 8718 0 0
8517: AND
8518: PUSH
8519: LD_OWVAR 4
8523: AND
8524: IFFALSE 8715
8526: GO 8528
8528: DISABLE
8529: LD_INT 0
8531: PPUSH
8532: PPUSH
// begin canWin := false ;
8533: LD_ADDR_VAR 0 2
8537: PUSH
8538: LD_INT 0
8540: ST_TO_ADDR
// if not HasPower ( your_side ) then
8541: LD_OWVAR 2
8545: PPUSH
8546: CALL 8758 0 1
8550: NOT
8551: IFFALSE 8562
// begin Multiplayer_Loose_Message ;
8553: CALL_OW 521
// enable ( mpLose ) ;
8557: LD_INT 102
8559: ENABLE_MARKED
// end else
8560: GO 8715
// begin canWin := true ;
8562: LD_ADDR_VAR 0 2
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// for i := 1 to 8 do
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 8
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8701
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8586: LD_EXP 7
8590: PUSH
8591: LD_VAR 0 1
8595: ARRAY
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 108
8606: AND
8607: PUSH
8608: LD_VAR 0 1
8612: PUSH
8613: LD_OWVAR 2
8617: NONEQUAL
8618: AND
8619: IFFALSE 8699
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8621: LD_EXP 8
8625: PUSH
8626: LD_VAR 0 1
8630: ARRAY
8631: NOT
8632: PUSH
8633: LD_EXP 8
8637: PUSH
8638: LD_VAR 0 1
8642: ARRAY
8643: PUSH
8644: LD_EXP 8
8648: PUSH
8649: LD_OWVAR 2
8653: ARRAY
8654: NONEQUAL
8655: PUSH
8656: LD_OWVAR 2
8660: PPUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 81
8670: PUSH
8671: LD_INT 1
8673: NONEQUAL
8674: AND
8675: OR
8676: IFFALSE 8699
// if HasPower ( i ) then
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL 8758 0 1
8687: IFFALSE 8699
// begin canWin := false ;
8689: LD_ADDR_VAR 0 2
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// break ;
8697: GO 8701
// end ;
8699: GO 8583
8701: POP
8702: POP
// if canWin then
8703: LD_VAR 0 2
8707: IFFALSE 8714
// enable ( mpWin ) else
8709: LD_INT 101
8711: ENABLE_MARKED
8712: GO 8715
// enable ;
8714: ENABLE
// end ; end ;
8715: PPOPN 2
8717: END
// function CanWinLoose ; begin
8718: LD_INT 0
8720: PPUSH
// result := true ;
8721: LD_ADDR_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8729: CALL_OW 531
8733: PUSH
8734: CALL_OW 519
8738: PUSH
8739: LD_INT 1
8741: GREATER
8742: AND
8743: IFFALSE 8753
// result := false ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// end ;
8753: LD_VAR 0 1
8757: RET
// function HasPower ( i ) ; begin
8758: LD_INT 0
8760: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
8761: LD_INT 22
8763: PUSH
8764: LD_VAR 0 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 30
8778: PUSH
8779: LD_INT 0
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 30
8788: PUSH
8789: LD_INT 1
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: NOT
8810: IFFALSE 8814
// exit ;
8812: GO 8879
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_INT 22
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 2
8833: PUSH
8834: LD_INT 21
8836: PUSH
8837: LD_INT 1
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 33
8846: PUSH
8847: LD_INT 3
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 33
8856: PUSH
8857: LD_INT 5
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PPUSH
8874: CALL_OW 69
8878: ST_TO_ADDR
// end ; end_of_file
8879: LD_VAR 0 2
8883: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8884: LD_INT 0
8886: PPUSH
8887: PPUSH
// if exist_mode then
8888: LD_VAR 0 2
8892: IFFALSE 8917
// unit := CreateCharacter ( prefix & ident ) else
8894: LD_ADDR_VAR 0 5
8898: PUSH
8899: LD_VAR 0 3
8903: PUSH
8904: LD_VAR 0 1
8908: STR
8909: PPUSH
8910: CALL_OW 34
8914: ST_TO_ADDR
8915: GO 8932
// unit := NewCharacter ( ident ) ;
8917: LD_ADDR_VAR 0 5
8921: PUSH
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL_OW 25
8931: ST_TO_ADDR
// result := unit ;
8932: LD_ADDR_VAR 0 4
8936: PUSH
8937: LD_VAR 0 5
8941: ST_TO_ADDR
// end ;
8942: LD_VAR 0 4
8946: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8947: LD_INT 0
8949: PPUSH
8950: PPUSH
// if not side or not nation then
8951: LD_VAR 0 1
8955: NOT
8956: PUSH
8957: LD_VAR 0 2
8961: NOT
8962: OR
8963: IFFALSE 8967
// exit ;
8965: GO 9735
// case nation of nation_american :
8967: LD_VAR 0 2
8971: PUSH
8972: LD_INT 1
8974: DOUBLE
8975: EQUAL
8976: IFTRUE 8980
8978: GO 9194
8980: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8981: LD_ADDR_VAR 0 4
8985: PUSH
8986: LD_INT 35
8988: PUSH
8989: LD_INT 45
8991: PUSH
8992: LD_INT 46
8994: PUSH
8995: LD_INT 47
8997: PUSH
8998: LD_INT 82
9000: PUSH
9001: LD_INT 83
9003: PUSH
9004: LD_INT 84
9006: PUSH
9007: LD_INT 85
9009: PUSH
9010: LD_INT 86
9012: PUSH
9013: LD_INT 1
9015: PUSH
9016: LD_INT 2
9018: PUSH
9019: LD_INT 6
9021: PUSH
9022: LD_INT 15
9024: PUSH
9025: LD_INT 16
9027: PUSH
9028: LD_INT 7
9030: PUSH
9031: LD_INT 12
9033: PUSH
9034: LD_INT 13
9036: PUSH
9037: LD_INT 10
9039: PUSH
9040: LD_INT 14
9042: PUSH
9043: LD_INT 20
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 22
9051: PUSH
9052: LD_INT 25
9054: PUSH
9055: LD_INT 32
9057: PUSH
9058: LD_INT 27
9060: PUSH
9061: LD_INT 36
9063: PUSH
9064: LD_INT 69
9066: PUSH
9067: LD_INT 39
9069: PUSH
9070: LD_INT 34
9072: PUSH
9073: LD_INT 40
9075: PUSH
9076: LD_INT 48
9078: PUSH
9079: LD_INT 49
9081: PUSH
9082: LD_INT 50
9084: PUSH
9085: LD_INT 51
9087: PUSH
9088: LD_INT 52
9090: PUSH
9091: LD_INT 53
9093: PUSH
9094: LD_INT 54
9096: PUSH
9097: LD_INT 55
9099: PUSH
9100: LD_INT 56
9102: PUSH
9103: LD_INT 57
9105: PUSH
9106: LD_INT 58
9108: PUSH
9109: LD_INT 59
9111: PUSH
9112: LD_INT 60
9114: PUSH
9115: LD_INT 61
9117: PUSH
9118: LD_INT 62
9120: PUSH
9121: LD_INT 80
9123: PUSH
9124: LD_INT 82
9126: PUSH
9127: LD_INT 83
9129: PUSH
9130: LD_INT 84
9132: PUSH
9133: LD_INT 85
9135: PUSH
9136: LD_INT 86
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: ST_TO_ADDR
9192: GO 9659
9194: LD_INT 2
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9428
9202: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9203: LD_ADDR_VAR 0 4
9207: PUSH
9208: LD_INT 35
9210: PUSH
9211: LD_INT 45
9213: PUSH
9214: LD_INT 46
9216: PUSH
9217: LD_INT 47
9219: PUSH
9220: LD_INT 82
9222: PUSH
9223: LD_INT 83
9225: PUSH
9226: LD_INT 84
9228: PUSH
9229: LD_INT 85
9231: PUSH
9232: LD_INT 87
9234: PUSH
9235: LD_INT 70
9237: PUSH
9238: LD_INT 1
9240: PUSH
9241: LD_INT 11
9243: PUSH
9244: LD_INT 3
9246: PUSH
9247: LD_INT 4
9249: PUSH
9250: LD_INT 5
9252: PUSH
9253: LD_INT 6
9255: PUSH
9256: LD_INT 15
9258: PUSH
9259: LD_INT 18
9261: PUSH
9262: LD_INT 7
9264: PUSH
9265: LD_INT 17
9267: PUSH
9268: LD_INT 8
9270: PUSH
9271: LD_INT 20
9273: PUSH
9274: LD_INT 21
9276: PUSH
9277: LD_INT 22
9279: PUSH
9280: LD_INT 72
9282: PUSH
9283: LD_INT 26
9285: PUSH
9286: LD_INT 69
9288: PUSH
9289: LD_INT 39
9291: PUSH
9292: LD_INT 40
9294: PUSH
9295: LD_INT 41
9297: PUSH
9298: LD_INT 42
9300: PUSH
9301: LD_INT 43
9303: PUSH
9304: LD_INT 48
9306: PUSH
9307: LD_INT 49
9309: PUSH
9310: LD_INT 50
9312: PUSH
9313: LD_INT 51
9315: PUSH
9316: LD_INT 52
9318: PUSH
9319: LD_INT 53
9321: PUSH
9322: LD_INT 54
9324: PUSH
9325: LD_INT 55
9327: PUSH
9328: LD_INT 56
9330: PUSH
9331: LD_INT 60
9333: PUSH
9334: LD_INT 61
9336: PUSH
9337: LD_INT 62
9339: PUSH
9340: LD_INT 66
9342: PUSH
9343: LD_INT 67
9345: PUSH
9346: LD_INT 68
9348: PUSH
9349: LD_INT 81
9351: PUSH
9352: LD_INT 82
9354: PUSH
9355: LD_INT 83
9357: PUSH
9358: LD_INT 84
9360: PUSH
9361: LD_INT 85
9363: PUSH
9364: LD_INT 87
9366: PUSH
9367: LD_INT 88
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: ST_TO_ADDR
9426: GO 9659
9428: LD_INT 3
9430: DOUBLE
9431: EQUAL
9432: IFTRUE 9436
9434: GO 9658
9436: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9437: LD_ADDR_VAR 0 4
9441: PUSH
9442: LD_INT 46
9444: PUSH
9445: LD_INT 47
9447: PUSH
9448: LD_INT 1
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 82
9456: PUSH
9457: LD_INT 83
9459: PUSH
9460: LD_INT 84
9462: PUSH
9463: LD_INT 85
9465: PUSH
9466: LD_INT 86
9468: PUSH
9469: LD_INT 11
9471: PUSH
9472: LD_INT 9
9474: PUSH
9475: LD_INT 20
9477: PUSH
9478: LD_INT 19
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 24
9486: PUSH
9487: LD_INT 22
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 28
9495: PUSH
9496: LD_INT 29
9498: PUSH
9499: LD_INT 30
9501: PUSH
9502: LD_INT 31
9504: PUSH
9505: LD_INT 37
9507: PUSH
9508: LD_INT 38
9510: PUSH
9511: LD_INT 32
9513: PUSH
9514: LD_INT 27
9516: PUSH
9517: LD_INT 33
9519: PUSH
9520: LD_INT 69
9522: PUSH
9523: LD_INT 39
9525: PUSH
9526: LD_INT 34
9528: PUSH
9529: LD_INT 40
9531: PUSH
9532: LD_INT 71
9534: PUSH
9535: LD_INT 23
9537: PUSH
9538: LD_INT 44
9540: PUSH
9541: LD_INT 48
9543: PUSH
9544: LD_INT 49
9546: PUSH
9547: LD_INT 50
9549: PUSH
9550: LD_INT 51
9552: PUSH
9553: LD_INT 52
9555: PUSH
9556: LD_INT 53
9558: PUSH
9559: LD_INT 54
9561: PUSH
9562: LD_INT 55
9564: PUSH
9565: LD_INT 56
9567: PUSH
9568: LD_INT 57
9570: PUSH
9571: LD_INT 58
9573: PUSH
9574: LD_INT 59
9576: PUSH
9577: LD_INT 63
9579: PUSH
9580: LD_INT 64
9582: PUSH
9583: LD_INT 65
9585: PUSH
9586: LD_INT 82
9588: PUSH
9589: LD_INT 83
9591: PUSH
9592: LD_INT 84
9594: PUSH
9595: LD_INT 85
9597: PUSH
9598: LD_INT 86
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: ST_TO_ADDR
9656: GO 9659
9658: POP
// if state > - 1 and state < 3 then
9659: LD_VAR 0 3
9663: PUSH
9664: LD_INT 1
9666: NEG
9667: GREATER
9668: PUSH
9669: LD_VAR 0 3
9673: PUSH
9674: LD_INT 3
9676: LESS
9677: AND
9678: IFFALSE 9735
// for i in result do
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_VAR 0 4
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9733
// if GetTech ( i , side ) <> state then
9693: LD_VAR 0 5
9697: PPUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 321
9707: PUSH
9708: LD_VAR 0 3
9712: NONEQUAL
9713: IFFALSE 9731
// result := result diff i ;
9715: LD_ADDR_VAR 0 4
9719: PUSH
9720: LD_VAR 0 4
9724: PUSH
9725: LD_VAR 0 5
9729: DIFF
9730: ST_TO_ADDR
9731: GO 9690
9733: POP
9734: POP
// end ;
9735: LD_VAR 0 4
9739: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9740: LD_INT 0
9742: PPUSH
9743: PPUSH
9744: PPUSH
// result := true ;
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: LD_INT 1
9752: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9753: LD_ADDR_VAR 0 5
9757: PUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 480
9767: ST_TO_ADDR
// if not tmp then
9768: LD_VAR 0 5
9772: NOT
9773: IFFALSE 9777
// exit ;
9775: GO 9826
// for i in tmp do
9777: LD_ADDR_VAR 0 4
9781: PUSH
9782: LD_VAR 0 5
9786: PUSH
9787: FOR_IN
9788: IFFALSE 9824
// if GetTech ( i , side ) <> state_researched then
9790: LD_VAR 0 4
9794: PPUSH
9795: LD_VAR 0 1
9799: PPUSH
9800: CALL_OW 321
9804: PUSH
9805: LD_INT 2
9807: NONEQUAL
9808: IFFALSE 9822
// begin result := false ;
9810: LD_ADDR_VAR 0 3
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// exit ;
9818: POP
9819: POP
9820: GO 9826
// end ;
9822: GO 9787
9824: POP
9825: POP
// end ;
9826: LD_VAR 0 3
9830: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9831: LD_INT 0
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9846: LD_VAR 0 1
9850: NOT
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 9
9864: NONEQUAL
9865: OR
9866: IFFALSE 9870
// exit ;
9868: GO 10443
// side := GetSide ( unit ) ;
9870: LD_ADDR_VAR 0 9
9874: PUSH
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL_OW 255
9884: ST_TO_ADDR
// tech_space := tech_spacanom ;
9885: LD_ADDR_VAR 0 12
9889: PUSH
9890: LD_INT 29
9892: ST_TO_ADDR
// tech_time := tech_taurad ;
9893: LD_ADDR_VAR 0 13
9897: PUSH
9898: LD_INT 28
9900: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9901: LD_ADDR_VAR 0 11
9905: PUSH
9906: LD_VAR 0 1
9910: PPUSH
9911: CALL_OW 310
9915: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9916: LD_VAR 0 11
9920: PPUSH
9921: CALL_OW 247
9925: PUSH
9926: LD_INT 2
9928: EQUAL
9929: IFFALSE 9933
// exit ;
9931: GO 10443
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9933: LD_ADDR_VAR 0 8
9937: PUSH
9938: LD_INT 81
9940: PUSH
9941: LD_VAR 0 9
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 21
9955: PUSH
9956: LD_INT 3
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: ST_TO_ADDR
// if not tmp then
9976: LD_VAR 0 8
9980: NOT
9981: IFFALSE 9985
// exit ;
9983: GO 10443
// if in_unit then
9985: LD_VAR 0 11
9989: IFFALSE 10013
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9991: LD_ADDR_VAR 0 10
9995: PUSH
9996: LD_VAR 0 8
10000: PPUSH
10001: LD_VAR 0 11
10005: PPUSH
10006: CALL_OW 74
10010: ST_TO_ADDR
10011: GO 10033
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10013: LD_ADDR_VAR 0 10
10017: PUSH
10018: LD_VAR 0 8
10022: PPUSH
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 74
10032: ST_TO_ADDR
// if not enemy then
10033: LD_VAR 0 10
10037: NOT
10038: IFFALSE 10042
// exit ;
10040: GO 10443
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10042: LD_VAR 0 11
10046: PUSH
10047: LD_VAR 0 11
10051: PPUSH
10052: LD_VAR 0 10
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 13
10064: GREATER
10065: AND
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: LD_VAR 0 10
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 12
10084: GREATER
10085: OR
10086: IFFALSE 10090
// exit ;
10088: GO 10443
// missile := [ 1 ] ;
10090: LD_ADDR_VAR 0 14
10094: PUSH
10095: LD_INT 1
10097: PUSH
10098: EMPTY
10099: LIST
10100: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10101: LD_VAR 0 9
10105: PPUSH
10106: LD_VAR 0 12
10110: PPUSH
10111: CALL_OW 325
10115: IFFALSE 10144
// missile := Replace ( missile , missile + 1 , 2 ) ;
10117: LD_ADDR_VAR 0 14
10121: PUSH
10122: LD_VAR 0 14
10126: PPUSH
10127: LD_VAR 0 14
10131: PUSH
10132: LD_INT 1
10134: PLUS
10135: PPUSH
10136: LD_INT 2
10138: PPUSH
10139: CALL_OW 1
10143: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10144: LD_VAR 0 9
10148: PPUSH
10149: LD_VAR 0 13
10153: PPUSH
10154: CALL_OW 325
10158: PUSH
10159: LD_VAR 0 10
10163: PPUSH
10164: CALL_OW 255
10168: PPUSH
10169: LD_VAR 0 13
10173: PPUSH
10174: CALL_OW 325
10178: NOT
10179: AND
10180: IFFALSE 10209
// missile := Replace ( missile , missile + 1 , 3 ) ;
10182: LD_ADDR_VAR 0 14
10186: PUSH
10187: LD_VAR 0 14
10191: PPUSH
10192: LD_VAR 0 14
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: PPUSH
10201: LD_INT 3
10203: PPUSH
10204: CALL_OW 1
10208: ST_TO_ADDR
// if missile < 2 then
10209: LD_VAR 0 14
10213: PUSH
10214: LD_INT 2
10216: LESS
10217: IFFALSE 10221
// exit ;
10219: GO 10443
// x := GetX ( enemy ) ;
10221: LD_ADDR_VAR 0 4
10225: PUSH
10226: LD_VAR 0 10
10230: PPUSH
10231: CALL_OW 250
10235: ST_TO_ADDR
// y := GetY ( enemy ) ;
10236: LD_ADDR_VAR 0 5
10240: PUSH
10241: LD_VAR 0 10
10245: PPUSH
10246: CALL_OW 251
10250: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10251: LD_ADDR_VAR 0 6
10255: PUSH
10256: LD_VAR 0 4
10260: PUSH
10261: LD_INT 1
10263: NEG
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 12
10272: PLUS
10273: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10274: LD_ADDR_VAR 0 7
10278: PUSH
10279: LD_VAR 0 5
10283: PUSH
10284: LD_INT 1
10286: NEG
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 12
10295: PLUS
10296: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10297: LD_VAR 0 6
10301: PPUSH
10302: LD_VAR 0 7
10306: PPUSH
10307: CALL_OW 488
10311: NOT
10312: IFFALSE 10334
// begin _x := x ;
10314: LD_ADDR_VAR 0 6
10318: PUSH
10319: LD_VAR 0 4
10323: ST_TO_ADDR
// _y := y ;
10324: LD_ADDR_VAR 0 7
10328: PUSH
10329: LD_VAR 0 5
10333: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_VAR 0 14
10346: PPUSH
10347: CALL_OW 12
10351: ST_TO_ADDR
// case i of 1 :
10352: LD_VAR 0 3
10356: PUSH
10357: LD_INT 1
10359: DOUBLE
10360: EQUAL
10361: IFTRUE 10365
10363: GO 10382
10365: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_VAR 0 10
10375: PPUSH
10376: CALL_OW 115
10380: GO 10443
10382: LD_INT 2
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10412
10390: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10391: LD_VAR 0 1
10395: PPUSH
10396: LD_VAR 0 6
10400: PPUSH
10401: LD_VAR 0 7
10405: PPUSH
10406: CALL_OW 153
10410: GO 10443
10412: LD_INT 3
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10442
10420: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10421: LD_VAR 0 1
10425: PPUSH
10426: LD_VAR 0 6
10430: PPUSH
10431: LD_VAR 0 7
10435: PPUSH
10436: CALL_OW 154
10440: GO 10443
10442: POP
// end ;
10443: LD_VAR 0 2
10447: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10448: LD_INT 0
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
10455: PPUSH
// if not unit or not building then
10456: LD_VAR 0 1
10460: NOT
10461: PUSH
10462: LD_VAR 0 2
10466: NOT
10467: OR
10468: IFFALSE 10472
// exit ;
10470: GO 10630
// x := GetX ( building ) ;
10472: LD_ADDR_VAR 0 5
10476: PUSH
10477: LD_VAR 0 2
10481: PPUSH
10482: CALL_OW 250
10486: ST_TO_ADDR
// y := GetY ( building ) ;
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_VAR 0 2
10496: PPUSH
10497: CALL_OW 251
10501: ST_TO_ADDR
// for i = 0 to 5 do
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: DOUBLE
10508: LD_INT 0
10510: DEC
10511: ST_TO_ADDR
10512: LD_INT 5
10514: PUSH
10515: FOR_TO
10516: IFFALSE 10628
// begin _x := ShiftX ( x , i , 3 ) ;
10518: LD_ADDR_VAR 0 7
10522: PUSH
10523: LD_VAR 0 5
10527: PPUSH
10528: LD_VAR 0 4
10532: PPUSH
10533: LD_INT 3
10535: PPUSH
10536: CALL_OW 272
10540: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10541: LD_ADDR_VAR 0 8
10545: PUSH
10546: LD_VAR 0 6
10550: PPUSH
10551: LD_VAR 0 4
10555: PPUSH
10556: LD_INT 3
10558: PPUSH
10559: CALL_OW 273
10563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10564: LD_VAR 0 7
10568: PPUSH
10569: LD_VAR 0 8
10573: PPUSH
10574: CALL_OW 488
10578: NOT
10579: IFFALSE 10583
// continue ;
10581: GO 10515
// if HexInfo ( _x , _y ) = 0 then
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_VAR 0 8
10592: PPUSH
10593: CALL_OW 428
10597: PUSH
10598: LD_INT 0
10600: EQUAL
10601: IFFALSE 10626
// begin ComMoveXY ( unit , _x , _y ) ;
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_VAR 0 7
10612: PPUSH
10613: LD_VAR 0 8
10617: PPUSH
10618: CALL_OW 111
// exit ;
10622: POP
10623: POP
10624: GO 10630
// end ; end ;
10626: GO 10515
10628: POP
10629: POP
// end ;
10630: LD_VAR 0 3
10634: RET
// export function ScanBase ( side , base_area ) ; begin
10635: LD_INT 0
10637: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10638: LD_ADDR_VAR 0 3
10642: PUSH
10643: LD_VAR 0 2
10647: PPUSH
10648: LD_INT 81
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 70
10664: ST_TO_ADDR
// end ;
10665: LD_VAR 0 3
10669: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
10674: PPUSH
10675: PPUSH
// result := false ;
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_INT 0
10683: ST_TO_ADDR
// side := GetSide ( unit ) ;
10684: LD_ADDR_VAR 0 3
10688: PUSH
10689: LD_VAR 0 1
10693: PPUSH
10694: CALL_OW 255
10698: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10699: LD_ADDR_VAR 0 4
10703: PUSH
10704: LD_VAR 0 1
10708: PPUSH
10709: CALL_OW 248
10713: ST_TO_ADDR
// case nat of 1 :
10714: LD_VAR 0 4
10718: PUSH
10719: LD_INT 1
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10738
10727: POP
// tech := tech_lassight ; 2 :
10728: LD_ADDR_VAR 0 5
10732: PUSH
10733: LD_INT 12
10735: ST_TO_ADDR
10736: GO 10777
10738: LD_INT 2
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10757
10746: POP
// tech := tech_mortar ; 3 :
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_INT 41
10754: ST_TO_ADDR
10755: GO 10777
10757: LD_INT 3
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10776
10765: POP
// tech := tech_bazooka ; end ;
10766: LD_ADDR_VAR 0 5
10770: PUSH
10771: LD_INT 44
10773: ST_TO_ADDR
10774: GO 10777
10776: POP
// if Researched ( side , tech ) then
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_VAR 0 5
10786: PPUSH
10787: CALL_OW 325
10791: IFFALSE 10818
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10793: LD_ADDR_VAR 0 2
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: LD_INT 8
10803: PUSH
10804: LD_INT 9
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: LD_VAR 0 4
10816: ARRAY
10817: ST_TO_ADDR
// end ;
10818: LD_VAR 0 2
10822: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10823: LD_INT 0
10825: PPUSH
10826: PPUSH
10827: PPUSH
// if not mines then
10828: LD_VAR 0 2
10832: NOT
10833: IFFALSE 10837
// exit ;
10835: GO 10981
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10837: LD_ADDR_VAR 0 5
10841: PUSH
10842: LD_INT 81
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 3
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 3
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: ST_TO_ADDR
// for i in mines do
10880: LD_ADDR_VAR 0 4
10884: PUSH
10885: LD_VAR 0 2
10889: PUSH
10890: FOR_IN
10891: IFFALSE 10979
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10893: LD_VAR 0 4
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: LD_VAR 0 4
10906: PUSH
10907: LD_INT 2
10909: ARRAY
10910: PPUSH
10911: CALL_OW 458
10915: NOT
10916: IFFALSE 10920
// continue ;
10918: GO 10890
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10920: LD_VAR 0 4
10924: PUSH
10925: LD_INT 1
10927: ARRAY
10928: PPUSH
10929: LD_VAR 0 4
10933: PUSH
10934: LD_INT 2
10936: ARRAY
10937: PPUSH
10938: CALL_OW 428
10942: PUSH
10943: LD_VAR 0 5
10947: IN
10948: IFFALSE 10977
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10950: LD_VAR 0 4
10954: PUSH
10955: LD_INT 1
10957: ARRAY
10958: PPUSH
10959: LD_VAR 0 4
10963: PUSH
10964: LD_INT 2
10966: ARRAY
10967: PPUSH
10968: LD_VAR 0 1
10972: PPUSH
10973: CALL_OW 456
// end ;
10977: GO 10890
10979: POP
10980: POP
// end ;
10981: LD_VAR 0 3
10985: RET
// export function Count ( array ) ; begin
10986: LD_INT 0
10988: PPUSH
// result := array + 0 ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_VAR 0 1
10998: PUSH
10999: LD_INT 0
11001: PLUS
11002: ST_TO_ADDR
// end ;
11003: LD_VAR 0 2
11007: RET
// export function IsEmpty ( building ) ; begin
11008: LD_INT 0
11010: PPUSH
// if not building then
11011: LD_VAR 0 1
11015: NOT
11016: IFFALSE 11020
// exit ;
11018: GO 11063
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_VAR 0 1
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 58
11049: PUSH
11050: EMPTY
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PPUSH
11057: CALL_OW 69
11061: IN
11062: ST_TO_ADDR
// end ;
11063: LD_VAR 0 2
11067: RET
// export function IsNotFull ( building ) ; var places ; begin
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
// if not building then
11072: LD_VAR 0 1
11076: NOT
11077: IFFALSE 11081
// exit ;
11079: GO 11109
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11081: LD_ADDR_VAR 0 2
11085: PUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: LD_INT 3
11093: PUSH
11094: LD_INT 62
11096: PUSH
11097: EMPTY
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 72
11108: ST_TO_ADDR
// end ;
11109: LD_VAR 0 2
11113: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11114: LD_INT 0
11116: PPUSH
11117: PPUSH
11118: PPUSH
11119: PPUSH
// tmp := [ ] ;
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: EMPTY
11126: ST_TO_ADDR
// list := [ ] ;
11127: LD_ADDR_VAR 0 5
11131: PUSH
11132: EMPTY
11133: ST_TO_ADDR
// for i = 16 to 25 do
11134: LD_ADDR_VAR 0 4
11138: PUSH
11139: DOUBLE
11140: LD_INT 16
11142: DEC
11143: ST_TO_ADDR
11144: LD_INT 25
11146: PUSH
11147: FOR_TO
11148: IFFALSE 11221
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11150: LD_ADDR_VAR 0 3
11154: PUSH
11155: LD_VAR 0 3
11159: PUSH
11160: LD_INT 22
11162: PUSH
11163: LD_VAR 0 1
11167: PPUSH
11168: CALL_OW 255
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 91
11179: PUSH
11180: LD_VAR 0 1
11184: PUSH
11185: LD_INT 6
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 30
11195: PUSH
11196: LD_VAR 0 4
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ADD
11218: ST_TO_ADDR
11219: GO 11147
11221: POP
11222: POP
// for i = 1 to tmp do
11223: LD_ADDR_VAR 0 4
11227: PUSH
11228: DOUBLE
11229: LD_INT 1
11231: DEC
11232: ST_TO_ADDR
11233: LD_VAR 0 3
11237: PUSH
11238: FOR_TO
11239: IFFALSE 11327
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11241: LD_ADDR_VAR 0 5
11245: PUSH
11246: LD_VAR 0 5
11250: PUSH
11251: LD_VAR 0 3
11255: PUSH
11256: LD_VAR 0 4
11260: ARRAY
11261: PPUSH
11262: CALL_OW 266
11266: PUSH
11267: LD_VAR 0 3
11271: PUSH
11272: LD_VAR 0 4
11276: ARRAY
11277: PPUSH
11278: CALL_OW 250
11282: PUSH
11283: LD_VAR 0 3
11287: PUSH
11288: LD_VAR 0 4
11292: ARRAY
11293: PPUSH
11294: CALL_OW 251
11298: PUSH
11299: LD_VAR 0 3
11303: PUSH
11304: LD_VAR 0 4
11308: ARRAY
11309: PPUSH
11310: CALL_OW 254
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: ADD
11324: ST_TO_ADDR
11325: GO 11238
11327: POP
11328: POP
// result := list ;
11329: LD_ADDR_VAR 0 2
11333: PUSH
11334: LD_VAR 0 5
11338: ST_TO_ADDR
// end ;
11339: LD_VAR 0 2
11343: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
11351: PPUSH
11352: PPUSH
// if not factory then
11353: LD_VAR 0 1
11357: NOT
11358: IFFALSE 11362
// exit ;
11360: GO 11955
// if control = control_apeman then
11362: LD_VAR 0 4
11366: PUSH
11367: LD_INT 5
11369: EQUAL
11370: IFFALSE 11479
// begin tmp := UnitsInside ( factory ) ;
11372: LD_ADDR_VAR 0 8
11376: PUSH
11377: LD_VAR 0 1
11381: PPUSH
11382: CALL_OW 313
11386: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11387: LD_VAR 0 8
11391: PPUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 12
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 72
11406: NOT
11407: IFFALSE 11417
// control := control_manual ;
11409: LD_ADDR_VAR 0 4
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11417: LD_ADDR_VAR 0 8
11421: PUSH
11422: LD_VAR 0 1
11426: PPUSH
11427: CALL 11114 0 1
11431: ST_TO_ADDR
// if tmp then
11432: LD_VAR 0 8
11436: IFFALSE 11479
// begin for i in tmp do
11438: LD_ADDR_VAR 0 7
11442: PUSH
11443: LD_VAR 0 8
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11477
// if i [ 1 ] = b_ext_radio then
11451: LD_VAR 0 7
11455: PUSH
11456: LD_INT 1
11458: ARRAY
11459: PUSH
11460: LD_INT 22
11462: EQUAL
11463: IFFALSE 11475
// begin control := control_remote ;
11465: LD_ADDR_VAR 0 4
11469: PUSH
11470: LD_INT 2
11472: ST_TO_ADDR
// break ;
11473: GO 11477
// end ;
11475: GO 11448
11477: POP
11478: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_VAR 0 2
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_VAR 0 4
11498: PPUSH
11499: LD_VAR 0 5
11503: PPUSH
11504: CALL_OW 448
11508: IFFALSE 11543
// begin result := [ chassis , engine , control , weapon ] ;
11510: LD_ADDR_VAR 0 6
11514: PUSH
11515: LD_VAR 0 2
11519: PUSH
11520: LD_VAR 0 3
11524: PUSH
11525: LD_VAR 0 4
11529: PUSH
11530: LD_VAR 0 5
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
// exit ;
11541: GO 11955
// end ; _chassis := AvailableChassisList ( factory ) ;
11543: LD_ADDR_VAR 0 9
11547: PUSH
11548: LD_VAR 0 1
11552: PPUSH
11553: CALL_OW 475
11557: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11558: LD_ADDR_VAR 0 11
11562: PUSH
11563: LD_VAR 0 1
11567: PPUSH
11568: CALL_OW 476
11572: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11573: LD_ADDR_VAR 0 12
11577: PUSH
11578: LD_VAR 0 1
11582: PPUSH
11583: CALL_OW 477
11587: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11588: LD_ADDR_VAR 0 10
11592: PUSH
11593: LD_VAR 0 1
11597: PPUSH
11598: CALL_OW 478
11602: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11603: LD_VAR 0 9
11607: NOT
11608: PUSH
11609: LD_VAR 0 11
11613: NOT
11614: OR
11615: PUSH
11616: LD_VAR 0 12
11620: NOT
11621: OR
11622: PUSH
11623: LD_VAR 0 10
11627: NOT
11628: OR
11629: IFFALSE 11664
// begin result := [ chassis , engine , control , weapon ] ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: LD_VAR 0 2
11640: PUSH
11641: LD_VAR 0 3
11645: PUSH
11646: LD_VAR 0 4
11650: PUSH
11651: LD_VAR 0 5
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: ST_TO_ADDR
// exit ;
11662: GO 11955
// end ; if not chassis in _chassis then
11664: LD_VAR 0 2
11668: PUSH
11669: LD_VAR 0 9
11673: IN
11674: NOT
11675: IFFALSE 11701
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11677: LD_ADDR_VAR 0 2
11681: PUSH
11682: LD_VAR 0 9
11686: PUSH
11687: LD_INT 1
11689: PPUSH
11690: LD_VAR 0 9
11694: PPUSH
11695: CALL_OW 12
11699: ARRAY
11700: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11701: LD_VAR 0 2
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: CALL 11960 0 2
11715: NOT
11716: IFFALSE 11775
// repeat engine := _engine [ 1 ] ;
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_VAR 0 11
11727: PUSH
11728: LD_INT 1
11730: ARRAY
11731: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11732: LD_ADDR_VAR 0 11
11736: PUSH
11737: LD_VAR 0 11
11741: PPUSH
11742: LD_INT 1
11744: PPUSH
11745: CALL_OW 3
11749: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11750: LD_VAR 0 2
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: CALL 11960 0 2
11764: PUSH
11765: LD_VAR 0 11
11769: PUSH
11770: EMPTY
11771: EQUAL
11772: OR
11773: IFFALSE 11718
// if not control in _control then
11775: LD_VAR 0 4
11779: PUSH
11780: LD_VAR 0 12
11784: IN
11785: NOT
11786: IFFALSE 11812
// control := _control [ rand ( 1 , _control ) ] ;
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: LD_VAR 0 12
11797: PUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_VAR 0 12
11805: PPUSH
11806: CALL_OW 12
11810: ARRAY
11811: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11812: LD_VAR 0 2
11816: PPUSH
11817: LD_VAR 0 5
11821: PPUSH
11822: CALL 12180 0 2
11826: NOT
11827: IFFALSE 11886
// repeat weapon := _weapon [ 1 ] ;
11829: LD_ADDR_VAR 0 5
11833: PUSH
11834: LD_VAR 0 10
11838: PUSH
11839: LD_INT 1
11841: ARRAY
11842: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11843: LD_ADDR_VAR 0 10
11847: PUSH
11848: LD_VAR 0 10
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 3
11860: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11861: LD_VAR 0 2
11865: PPUSH
11866: LD_VAR 0 5
11870: PPUSH
11871: CALL 12180 0 2
11875: PUSH
11876: LD_VAR 0 10
11880: PUSH
11881: EMPTY
11882: EQUAL
11883: OR
11884: IFFALSE 11829
// result := [ ] ;
11886: LD_ADDR_VAR 0 6
11890: PUSH
11891: EMPTY
11892: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11893: LD_VAR 0 1
11897: PPUSH
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_VAR 0 3
11907: PPUSH
11908: LD_VAR 0 4
11912: PPUSH
11913: LD_VAR 0 5
11917: PPUSH
11918: CALL_OW 448
11922: IFFALSE 11955
// result := [ chassis , engine , control , weapon ] ;
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_VAR 0 2
11933: PUSH
11934: LD_VAR 0 3
11938: PUSH
11939: LD_VAR 0 4
11943: PUSH
11944: LD_VAR 0 5
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: ST_TO_ADDR
// end ;
11955: LD_VAR 0 6
11959: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11960: LD_INT 0
11962: PPUSH
// if not chassis or not engine then
11963: LD_VAR 0 1
11967: NOT
11968: PUSH
11969: LD_VAR 0 2
11973: NOT
11974: OR
11975: IFFALSE 11979
// exit ;
11977: GO 12175
// case engine of engine_solar :
11979: LD_VAR 0 2
11983: PUSH
11984: LD_INT 2
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 12030
11992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11993: LD_ADDR_VAR 0 3
11997: PUSH
11998: LD_INT 11
12000: PUSH
12001: LD_INT 12
12003: PUSH
12004: LD_INT 13
12006: PUSH
12007: LD_INT 14
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: ST_TO_ADDR
12028: GO 12159
12030: LD_INT 1
12032: DOUBLE
12033: EQUAL
12034: IFTRUE 12038
12036: GO 12100
12038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 11
12046: PUSH
12047: LD_INT 12
12049: PUSH
12050: LD_INT 13
12052: PUSH
12053: LD_INT 14
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: LD_INT 3
12064: PUSH
12065: LD_INT 4
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 23
12076: PUSH
12077: LD_INT 22
12079: PUSH
12080: LD_INT 24
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: ST_TO_ADDR
12098: GO 12159
12100: LD_INT 3
12102: DOUBLE
12103: EQUAL
12104: IFTRUE 12108
12106: GO 12158
12108: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_INT 13
12116: PUSH
12117: LD_INT 14
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: LD_INT 4
12128: PUSH
12129: LD_INT 5
12131: PUSH
12132: LD_INT 21
12134: PUSH
12135: LD_INT 22
12137: PUSH
12138: LD_INT 23
12140: PUSH
12141: LD_INT 24
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: ST_TO_ADDR
12156: GO 12159
12158: POP
// result := ( chassis in result ) ;
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_VAR 0 1
12168: PUSH
12169: LD_VAR 0 3
12173: IN
12174: ST_TO_ADDR
// end ;
12175: LD_VAR 0 3
12179: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12180: LD_INT 0
12182: PPUSH
// if not chassis or not weapon then
12183: LD_VAR 0 1
12187: NOT
12188: PUSH
12189: LD_VAR 0 2
12193: NOT
12194: OR
12195: IFFALSE 12199
// exit ;
12197: GO 13259
// case weapon of us_machine_gun :
12199: LD_VAR 0 2
12203: PUSH
12204: LD_INT 2
12206: DOUBLE
12207: EQUAL
12208: IFTRUE 12212
12210: GO 12242
12212: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12213: LD_ADDR_VAR 0 3
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: LD_INT 3
12226: PUSH
12227: LD_INT 4
12229: PUSH
12230: LD_INT 5
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: ST_TO_ADDR
12240: GO 13243
12242: LD_INT 3
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12280
12250: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: LD_INT 2
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: LD_INT 5
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: ST_TO_ADDR
12278: GO 13243
12280: LD_INT 11
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12318
12288: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12289: LD_ADDR_VAR 0 3
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: LD_INT 3
12302: PUSH
12303: LD_INT 4
12305: PUSH
12306: LD_INT 5
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: ST_TO_ADDR
12316: GO 13243
12318: LD_INT 4
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12352
12326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12327: LD_ADDR_VAR 0 3
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: LD_INT 3
12337: PUSH
12338: LD_INT 4
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: ST_TO_ADDR
12350: GO 13243
12352: LD_INT 5
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12386
12360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12361: LD_ADDR_VAR 0 3
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: ST_TO_ADDR
12384: GO 13243
12386: LD_INT 9
12388: DOUBLE
12389: EQUAL
12390: IFTRUE 12394
12392: GO 12420
12394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12395: LD_ADDR_VAR 0 3
12399: PUSH
12400: LD_INT 2
12402: PUSH
12403: LD_INT 3
12405: PUSH
12406: LD_INT 4
12408: PUSH
12409: LD_INT 5
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: ST_TO_ADDR
12418: GO 13243
12420: LD_INT 7
12422: DOUBLE
12423: EQUAL
12424: IFTRUE 12428
12426: GO 12454
12428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12429: LD_ADDR_VAR 0 3
12433: PUSH
12434: LD_INT 2
12436: PUSH
12437: LD_INT 3
12439: PUSH
12440: LD_INT 4
12442: PUSH
12443: LD_INT 5
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: ST_TO_ADDR
12452: GO 13243
12454: LD_INT 12
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12488
12462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 4
12476: PUSH
12477: LD_INT 5
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: ST_TO_ADDR
12486: GO 13243
12488: LD_INT 13
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12522
12496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: LD_INT 4
12510: PUSH
12511: LD_INT 5
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: ST_TO_ADDR
12520: GO 13243
12522: LD_INT 14
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12548
12530: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12531: LD_ADDR_VAR 0 3
12535: PUSH
12536: LD_INT 4
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: ST_TO_ADDR
12546: GO 13243
12548: LD_INT 6
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12574
12556: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12557: LD_ADDR_VAR 0 3
12561: PUSH
12562: LD_INT 4
12564: PUSH
12565: LD_INT 5
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: ST_TO_ADDR
12572: GO 13243
12574: LD_INT 10
12576: DOUBLE
12577: EQUAL
12578: IFTRUE 12582
12580: GO 12600
12582: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12583: LD_ADDR_VAR 0 3
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: ST_TO_ADDR
12598: GO 13243
12600: LD_INT 22
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12634
12608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12609: LD_ADDR_VAR 0 3
12613: PUSH
12614: LD_INT 11
12616: PUSH
12617: LD_INT 12
12619: PUSH
12620: LD_INT 13
12622: PUSH
12623: LD_INT 14
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: ST_TO_ADDR
12632: GO 13243
12634: LD_INT 23
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12668
12642: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12643: LD_ADDR_VAR 0 3
12647: PUSH
12648: LD_INT 11
12650: PUSH
12651: LD_INT 12
12653: PUSH
12654: LD_INT 13
12656: PUSH
12657: LD_INT 14
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: ST_TO_ADDR
12666: GO 13243
12668: LD_INT 24
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12702
12676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12677: LD_ADDR_VAR 0 3
12681: PUSH
12682: LD_INT 11
12684: PUSH
12685: LD_INT 12
12687: PUSH
12688: LD_INT 13
12690: PUSH
12691: LD_INT 14
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: ST_TO_ADDR
12700: GO 13243
12702: LD_INT 30
12704: DOUBLE
12705: EQUAL
12706: IFTRUE 12710
12708: GO 12736
12710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12711: LD_ADDR_VAR 0 3
12715: PUSH
12716: LD_INT 11
12718: PUSH
12719: LD_INT 12
12721: PUSH
12722: LD_INT 13
12724: PUSH
12725: LD_INT 14
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: ST_TO_ADDR
12734: GO 13243
12736: LD_INT 25
12738: DOUBLE
12739: EQUAL
12740: IFTRUE 12744
12742: GO 12762
12744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12745: LD_ADDR_VAR 0 3
12749: PUSH
12750: LD_INT 13
12752: PUSH
12753: LD_INT 14
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: ST_TO_ADDR
12760: GO 13243
12762: LD_INT 27
12764: DOUBLE
12765: EQUAL
12766: IFTRUE 12770
12768: GO 12788
12770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 13
12778: PUSH
12779: LD_INT 14
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: ST_TO_ADDR
12786: GO 13243
12788: LD_INT 92
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 12822
12796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_INT 11
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 13
12810: PUSH
12811: LD_INT 14
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: ST_TO_ADDR
12820: GO 13243
12822: LD_INT 28
12824: DOUBLE
12825: EQUAL
12826: IFTRUE 12830
12828: GO 12848
12830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_INT 13
12838: PUSH
12839: LD_INT 14
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
12846: GO 13243
12848: LD_INT 29
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 12874
12856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12857: LD_ADDR_VAR 0 3
12861: PUSH
12862: LD_INT 13
12864: PUSH
12865: LD_INT 14
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: ST_TO_ADDR
12872: GO 13243
12874: LD_INT 31
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12900
12882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 13
12890: PUSH
12891: LD_INT 14
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: ST_TO_ADDR
12898: GO 13243
12900: LD_INT 26
12902: DOUBLE
12903: EQUAL
12904: IFTRUE 12908
12906: GO 12926
12908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12909: LD_ADDR_VAR 0 3
12913: PUSH
12914: LD_INT 13
12916: PUSH
12917: LD_INT 14
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: ST_TO_ADDR
12924: GO 13243
12926: LD_INT 42
12928: DOUBLE
12929: EQUAL
12930: IFTRUE 12934
12932: GO 12960
12934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12935: LD_ADDR_VAR 0 3
12939: PUSH
12940: LD_INT 21
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 24
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: ST_TO_ADDR
12958: GO 13243
12960: LD_INT 43
12962: DOUBLE
12963: EQUAL
12964: IFTRUE 12968
12966: GO 12994
12968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12969: LD_ADDR_VAR 0 3
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: LD_INT 23
12982: PUSH
12983: LD_INT 24
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: ST_TO_ADDR
12992: GO 13243
12994: LD_INT 44
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13028
13002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13003: LD_ADDR_VAR 0 3
13007: PUSH
13008: LD_INT 21
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_INT 23
13016: PUSH
13017: LD_INT 24
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: ST_TO_ADDR
13026: GO 13243
13028: LD_INT 45
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13062
13036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 22
13047: PUSH
13048: LD_INT 23
13050: PUSH
13051: LD_INT 24
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: ST_TO_ADDR
13060: GO 13243
13062: LD_INT 49
13064: DOUBLE
13065: EQUAL
13066: IFTRUE 13070
13068: GO 13096
13070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_INT 21
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: ST_TO_ADDR
13094: GO 13243
13096: LD_INT 51
13098: DOUBLE
13099: EQUAL
13100: IFTRUE 13104
13102: GO 13130
13104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13105: LD_ADDR_VAR 0 3
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 22
13115: PUSH
13116: LD_INT 23
13118: PUSH
13119: LD_INT 24
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: ST_TO_ADDR
13128: GO 13243
13130: LD_INT 52
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13164
13138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_INT 21
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 23
13152: PUSH
13153: LD_INT 24
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: ST_TO_ADDR
13162: GO 13243
13164: LD_INT 53
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13190
13172: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13173: LD_ADDR_VAR 0 3
13177: PUSH
13178: LD_INT 23
13180: PUSH
13181: LD_INT 24
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 13243
13190: LD_INT 46
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13216
13198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13199: LD_ADDR_VAR 0 3
13203: PUSH
13204: LD_INT 23
13206: PUSH
13207: LD_INT 24
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: ST_TO_ADDR
13214: GO 13243
13216: LD_INT 47
13218: DOUBLE
13219: EQUAL
13220: IFTRUE 13224
13222: GO 13242
13224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13225: LD_ADDR_VAR 0 3
13229: PUSH
13230: LD_INT 23
13232: PUSH
13233: LD_INT 24
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: ST_TO_ADDR
13240: GO 13243
13242: POP
// result := ( chassis in result ) ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_VAR 0 1
13252: PUSH
13253: LD_VAR 0 3
13257: IN
13258: ST_TO_ADDR
// end ;
13259: LD_VAR 0 3
13263: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13264: LD_INT 0
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
13270: PPUSH
13271: PPUSH
13272: PPUSH
// result := array ;
13273: LD_ADDR_VAR 0 5
13277: PUSH
13278: LD_VAR 0 1
13282: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13283: LD_VAR 0 1
13287: NOT
13288: PUSH
13289: LD_VAR 0 2
13293: NOT
13294: OR
13295: PUSH
13296: LD_VAR 0 3
13300: NOT
13301: OR
13302: PUSH
13303: LD_VAR 0 2
13307: PUSH
13308: LD_VAR 0 1
13312: GREATER
13313: OR
13314: PUSH
13315: LD_VAR 0 3
13319: PUSH
13320: LD_VAR 0 1
13324: GREATER
13325: OR
13326: IFFALSE 13330
// exit ;
13328: GO 13626
// if direction then
13330: LD_VAR 0 4
13334: IFFALSE 13398
// begin d := 1 ;
13336: LD_ADDR_VAR 0 9
13340: PUSH
13341: LD_INT 1
13343: ST_TO_ADDR
// if i_from > i_to then
13344: LD_VAR 0 2
13348: PUSH
13349: LD_VAR 0 3
13353: GREATER
13354: IFFALSE 13380
// length := ( array - i_from ) + i_to else
13356: LD_ADDR_VAR 0 11
13360: PUSH
13361: LD_VAR 0 1
13365: PUSH
13366: LD_VAR 0 2
13370: MINUS
13371: PUSH
13372: LD_VAR 0 3
13376: PLUS
13377: ST_TO_ADDR
13378: GO 13396
// length := i_to - i_from ;
13380: LD_ADDR_VAR 0 11
13384: PUSH
13385: LD_VAR 0 3
13389: PUSH
13390: LD_VAR 0 2
13394: MINUS
13395: ST_TO_ADDR
// end else
13396: GO 13459
// begin d := - 1 ;
13398: LD_ADDR_VAR 0 9
13402: PUSH
13403: LD_INT 1
13405: NEG
13406: ST_TO_ADDR
// if i_from > i_to then
13407: LD_VAR 0 2
13411: PUSH
13412: LD_VAR 0 3
13416: GREATER
13417: IFFALSE 13437
// length := i_from - i_to else
13419: LD_ADDR_VAR 0 11
13423: PUSH
13424: LD_VAR 0 2
13428: PUSH
13429: LD_VAR 0 3
13433: MINUS
13434: ST_TO_ADDR
13435: GO 13459
// length := ( array - i_to ) + i_from ;
13437: LD_ADDR_VAR 0 11
13441: PUSH
13442: LD_VAR 0 1
13446: PUSH
13447: LD_VAR 0 3
13451: MINUS
13452: PUSH
13453: LD_VAR 0 2
13457: PLUS
13458: ST_TO_ADDR
// end ; if not length then
13459: LD_VAR 0 11
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13626
// tmp := array ;
13468: LD_ADDR_VAR 0 10
13472: PUSH
13473: LD_VAR 0 1
13477: ST_TO_ADDR
// for i = 1 to length do
13478: LD_ADDR_VAR 0 6
13482: PUSH
13483: DOUBLE
13484: LD_INT 1
13486: DEC
13487: ST_TO_ADDR
13488: LD_VAR 0 11
13492: PUSH
13493: FOR_TO
13494: IFFALSE 13614
// begin for j = 1 to array do
13496: LD_ADDR_VAR 0 7
13500: PUSH
13501: DOUBLE
13502: LD_INT 1
13504: DEC
13505: ST_TO_ADDR
13506: LD_VAR 0 1
13510: PUSH
13511: FOR_TO
13512: IFFALSE 13600
// begin k := j + d ;
13514: LD_ADDR_VAR 0 8
13518: PUSH
13519: LD_VAR 0 7
13523: PUSH
13524: LD_VAR 0 9
13528: PLUS
13529: ST_TO_ADDR
// if k > array then
13530: LD_VAR 0 8
13534: PUSH
13535: LD_VAR 0 1
13539: GREATER
13540: IFFALSE 13550
// k := 1 ;
13542: LD_ADDR_VAR 0 8
13546: PUSH
13547: LD_INT 1
13549: ST_TO_ADDR
// if not k then
13550: LD_VAR 0 8
13554: NOT
13555: IFFALSE 13567
// k := array ;
13557: LD_ADDR_VAR 0 8
13561: PUSH
13562: LD_VAR 0 1
13566: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13567: LD_ADDR_VAR 0 10
13571: PUSH
13572: LD_VAR 0 10
13576: PPUSH
13577: LD_VAR 0 8
13581: PPUSH
13582: LD_VAR 0 1
13586: PUSH
13587: LD_VAR 0 7
13591: ARRAY
13592: PPUSH
13593: CALL_OW 1
13597: ST_TO_ADDR
// end ;
13598: GO 13511
13600: POP
13601: POP
// array := tmp ;
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_VAR 0 10
13611: ST_TO_ADDR
// end ;
13612: GO 13493
13614: POP
13615: POP
// result := array ;
13616: LD_ADDR_VAR 0 5
13620: PUSH
13621: LD_VAR 0 1
13625: ST_TO_ADDR
// end ;
13626: LD_VAR 0 5
13630: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13631: LD_INT 0
13633: PPUSH
13634: PPUSH
// result := 0 ;
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: LD_INT 0
13642: ST_TO_ADDR
// if not array or not value in array then
13643: LD_VAR 0 1
13647: NOT
13648: PUSH
13649: LD_VAR 0 2
13653: PUSH
13654: LD_VAR 0 1
13658: IN
13659: NOT
13660: OR
13661: IFFALSE 13665
// exit ;
13663: GO 13719
// for i = 1 to array do
13665: LD_ADDR_VAR 0 4
13669: PUSH
13670: DOUBLE
13671: LD_INT 1
13673: DEC
13674: ST_TO_ADDR
13675: LD_VAR 0 1
13679: PUSH
13680: FOR_TO
13681: IFFALSE 13717
// if value = array [ i ] then
13683: LD_VAR 0 2
13687: PUSH
13688: LD_VAR 0 1
13692: PUSH
13693: LD_VAR 0 4
13697: ARRAY
13698: EQUAL
13699: IFFALSE 13715
// begin result := i ;
13701: LD_ADDR_VAR 0 3
13705: PUSH
13706: LD_VAR 0 4
13710: ST_TO_ADDR
// exit ;
13711: POP
13712: POP
13713: GO 13719
// end ;
13715: GO 13680
13717: POP
13718: POP
// end ;
13719: LD_VAR 0 3
13723: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13724: LD_INT 0
13726: PPUSH
// vc_chassis := chassis ;
13727: LD_ADDR_OWVAR 37
13731: PUSH
13732: LD_VAR 0 1
13736: ST_TO_ADDR
// vc_engine := engine ;
13737: LD_ADDR_OWVAR 39
13741: PUSH
13742: LD_VAR 0 2
13746: ST_TO_ADDR
// vc_control := control ;
13747: LD_ADDR_OWVAR 38
13751: PUSH
13752: LD_VAR 0 3
13756: ST_TO_ADDR
// vc_weapon := weapon ;
13757: LD_ADDR_OWVAR 40
13761: PUSH
13762: LD_VAR 0 4
13766: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13767: LD_ADDR_OWVAR 41
13771: PUSH
13772: LD_VAR 0 5
13776: ST_TO_ADDR
// end ;
13777: LD_VAR 0 6
13781: RET
// export function WantPlant ( unit ) ; var task ; begin
13782: LD_INT 0
13784: PPUSH
13785: PPUSH
// result := false ;
13786: LD_ADDR_VAR 0 2
13790: PUSH
13791: LD_INT 0
13793: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13794: LD_ADDR_VAR 0 3
13798: PUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 437
13808: ST_TO_ADDR
// if task then
13809: LD_VAR 0 3
13813: IFFALSE 13841
// if task [ 1 ] [ 1 ] = p then
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PUSH
13824: LD_INT 1
13826: ARRAY
13827: PUSH
13828: LD_STRING p
13830: EQUAL
13831: IFFALSE 13841
// result := true ;
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_INT 1
13840: ST_TO_ADDR
// end ;
13841: LD_VAR 0 2
13845: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
// if pos < 1 then
13852: LD_VAR 0 2
13856: PUSH
13857: LD_INT 1
13859: LESS
13860: IFFALSE 13864
// exit ;
13862: GO 14167
// if pos = 1 then
13864: LD_VAR 0 2
13868: PUSH
13869: LD_INT 1
13871: EQUAL
13872: IFFALSE 13905
// result := Replace ( arr , pos [ 1 ] , value ) else
13874: LD_ADDR_VAR 0 4
13878: PUSH
13879: LD_VAR 0 1
13883: PPUSH
13884: LD_VAR 0 2
13888: PUSH
13889: LD_INT 1
13891: ARRAY
13892: PPUSH
13893: LD_VAR 0 3
13897: PPUSH
13898: CALL_OW 1
13902: ST_TO_ADDR
13903: GO 14167
// begin tmp := arr ;
13905: LD_ADDR_VAR 0 6
13909: PUSH
13910: LD_VAR 0 1
13914: ST_TO_ADDR
// s_arr := [ tmp ] ;
13915: LD_ADDR_VAR 0 7
13919: PUSH
13920: LD_VAR 0 6
13924: PUSH
13925: EMPTY
13926: LIST
13927: ST_TO_ADDR
// for i = 1 to pos - 1 do
13928: LD_ADDR_VAR 0 5
13932: PUSH
13933: DOUBLE
13934: LD_INT 1
13936: DEC
13937: ST_TO_ADDR
13938: LD_VAR 0 2
13942: PUSH
13943: LD_INT 1
13945: MINUS
13946: PUSH
13947: FOR_TO
13948: IFFALSE 13993
// begin tmp := tmp [ pos [ i ] ] ;
13950: LD_ADDR_VAR 0 6
13954: PUSH
13955: LD_VAR 0 6
13959: PUSH
13960: LD_VAR 0 2
13964: PUSH
13965: LD_VAR 0 5
13969: ARRAY
13970: ARRAY
13971: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13972: LD_ADDR_VAR 0 7
13976: PUSH
13977: LD_VAR 0 7
13981: PUSH
13982: LD_VAR 0 6
13986: PUSH
13987: EMPTY
13988: LIST
13989: ADD
13990: ST_TO_ADDR
// end ;
13991: GO 13947
13993: POP
13994: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13995: LD_ADDR_VAR 0 6
13999: PUSH
14000: LD_VAR 0 6
14004: PPUSH
14005: LD_VAR 0 2
14009: PUSH
14010: LD_VAR 0 2
14014: ARRAY
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: CALL_OW 1
14025: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14026: LD_ADDR_VAR 0 7
14030: PUSH
14031: LD_VAR 0 7
14035: PPUSH
14036: LD_VAR 0 7
14040: PPUSH
14041: LD_VAR 0 6
14045: PPUSH
14046: CALL_OW 1
14050: ST_TO_ADDR
// for i = s_arr downto 2 do
14051: LD_ADDR_VAR 0 5
14055: PUSH
14056: DOUBLE
14057: LD_VAR 0 7
14061: INC
14062: ST_TO_ADDR
14063: LD_INT 2
14065: PUSH
14066: FOR_DOWNTO
14067: IFFALSE 14151
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14069: LD_ADDR_VAR 0 6
14073: PUSH
14074: LD_VAR 0 7
14078: PUSH
14079: LD_VAR 0 5
14083: PUSH
14084: LD_INT 1
14086: MINUS
14087: ARRAY
14088: PPUSH
14089: LD_VAR 0 2
14093: PUSH
14094: LD_VAR 0 5
14098: PUSH
14099: LD_INT 1
14101: MINUS
14102: ARRAY
14103: PPUSH
14104: LD_VAR 0 7
14108: PUSH
14109: LD_VAR 0 5
14113: ARRAY
14114: PPUSH
14115: CALL_OW 1
14119: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14120: LD_ADDR_VAR 0 7
14124: PUSH
14125: LD_VAR 0 7
14129: PPUSH
14130: LD_VAR 0 5
14134: PUSH
14135: LD_INT 1
14137: MINUS
14138: PPUSH
14139: LD_VAR 0 6
14143: PPUSH
14144: CALL_OW 1
14148: ST_TO_ADDR
// end ;
14149: GO 14066
14151: POP
14152: POP
// result := s_arr [ 1 ] ;
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: LD_VAR 0 7
14162: PUSH
14163: LD_INT 1
14165: ARRAY
14166: ST_TO_ADDR
// end ; end ;
14167: LD_VAR 0 4
14171: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14172: LD_INT 0
14174: PPUSH
14175: PPUSH
// if not list then
14176: LD_VAR 0 1
14180: NOT
14181: IFFALSE 14185
// exit ;
14183: GO 14276
// i := list [ pos1 ] ;
14185: LD_ADDR_VAR 0 5
14189: PUSH
14190: LD_VAR 0 1
14194: PUSH
14195: LD_VAR 0 2
14199: ARRAY
14200: ST_TO_ADDR
// if not i then
14201: LD_VAR 0 5
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14276
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14210: LD_ADDR_VAR 0 1
14214: PUSH
14215: LD_VAR 0 1
14219: PPUSH
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 1
14229: PUSH
14230: LD_VAR 0 3
14234: ARRAY
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14241: LD_ADDR_VAR 0 1
14245: PUSH
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_VAR 0 5
14260: PPUSH
14261: CALL_OW 1
14265: ST_TO_ADDR
// result := list ;
14266: LD_ADDR_VAR 0 4
14270: PUSH
14271: LD_VAR 0 1
14275: ST_TO_ADDR
// end ;
14276: LD_VAR 0 4
14280: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14281: LD_INT 0
14283: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14284: LD_ADDR_VAR 0 5
14288: PUSH
14289: LD_VAR 0 1
14293: PPUSH
14294: CALL_OW 250
14298: PPUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 251
14308: PPUSH
14309: LD_VAR 0 2
14313: PPUSH
14314: LD_VAR 0 3
14318: PPUSH
14319: LD_VAR 0 4
14323: PPUSH
14324: CALL 14702 0 5
14328: ST_TO_ADDR
// end ;
14329: LD_VAR 0 5
14333: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
// if not list or not unit then
14340: LD_VAR 0 2
14344: NOT
14345: PUSH
14346: LD_VAR 0 1
14350: NOT
14351: OR
14352: IFFALSE 14356
// exit ;
14354: GO 14697
// result := [ ] ;
14356: LD_ADDR_VAR 0 5
14360: PUSH
14361: EMPTY
14362: ST_TO_ADDR
// for i in list do
14363: LD_ADDR_VAR 0 6
14367: PUSH
14368: LD_VAR 0 2
14372: PUSH
14373: FOR_IN
14374: IFFALSE 14592
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14376: LD_ADDR_VAR 0 8
14380: PUSH
14381: LD_VAR 0 1
14385: PPUSH
14386: LD_VAR 0 6
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 6
14399: PUSH
14400: LD_INT 2
14402: ARRAY
14403: PPUSH
14404: CALL_OW 297
14408: ST_TO_ADDR
// if not Count ( result ) then
14409: LD_VAR 0 5
14413: PPUSH
14414: CALL 10986 0 1
14418: NOT
14419: IFFALSE 14452
// begin result := Join ( result , [ i , tmp ] ) ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: LD_VAR 0 5
14430: PPUSH
14431: LD_VAR 0 6
14435: PUSH
14436: LD_VAR 0 8
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL 46575 0 2
14449: ST_TO_ADDR
// continue ;
14450: GO 14373
// end ; if result [ result ] [ 2 ] <= tmp then
14452: LD_VAR 0 5
14456: PUSH
14457: LD_VAR 0 5
14461: ARRAY
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PUSH
14467: LD_VAR 0 8
14471: LESSEQUAL
14472: IFFALSE 14505
// result := Join ( result , [ i , tmp ] ) else
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 5
14483: PPUSH
14484: LD_VAR 0 6
14488: PUSH
14489: LD_VAR 0 8
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL 46575 0 2
14502: ST_TO_ADDR
14503: GO 14590
// begin for j := 1 to Count ( result ) do
14505: LD_ADDR_VAR 0 7
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_VAR 0 5
14519: PPUSH
14520: CALL 10986 0 1
14524: PUSH
14525: FOR_TO
14526: IFFALSE 14588
// begin if tmp < result [ j ] [ 2 ] then
14528: LD_VAR 0 8
14532: PUSH
14533: LD_VAR 0 5
14537: PUSH
14538: LD_VAR 0 7
14542: ARRAY
14543: PUSH
14544: LD_INT 2
14546: ARRAY
14547: LESS
14548: IFFALSE 14586
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14550: LD_ADDR_VAR 0 5
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_VAR 0 7
14564: PPUSH
14565: LD_VAR 0 6
14569: PUSH
14570: LD_VAR 0 8
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 2
14583: ST_TO_ADDR
// break ;
14584: GO 14588
// end ; end ;
14586: GO 14525
14588: POP
14589: POP
// end ; end ;
14590: GO 14373
14592: POP
14593: POP
// if result and not asc then
14594: LD_VAR 0 5
14598: PUSH
14599: LD_VAR 0 3
14603: NOT
14604: AND
14605: IFFALSE 14622
// result := ReverseArray ( result ) ;
14607: LD_ADDR_VAR 0 5
14611: PUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: CALL 41862 0 1
14621: ST_TO_ADDR
// tmp := [ ] ;
14622: LD_ADDR_VAR 0 8
14626: PUSH
14627: EMPTY
14628: ST_TO_ADDR
// if mode then
14629: LD_VAR 0 4
14633: IFFALSE 14697
// begin for i := 1 to result do
14635: LD_ADDR_VAR 0 6
14639: PUSH
14640: DOUBLE
14641: LD_INT 1
14643: DEC
14644: ST_TO_ADDR
14645: LD_VAR 0 5
14649: PUSH
14650: FOR_TO
14651: IFFALSE 14685
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14653: LD_ADDR_VAR 0 8
14657: PUSH
14658: LD_VAR 0 8
14662: PPUSH
14663: LD_VAR 0 5
14667: PUSH
14668: LD_VAR 0 6
14672: ARRAY
14673: PUSH
14674: LD_INT 1
14676: ARRAY
14677: PPUSH
14678: CALL 46575 0 2
14682: ST_TO_ADDR
14683: GO 14650
14685: POP
14686: POP
// result := tmp ;
14687: LD_ADDR_VAR 0 5
14691: PUSH
14692: LD_VAR 0 8
14696: ST_TO_ADDR
// end ; end ;
14697: LD_VAR 0 5
14701: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
14706: PPUSH
14707: PPUSH
// if not list then
14708: LD_VAR 0 3
14712: NOT
14713: IFFALSE 14717
// exit ;
14715: GO 15105
// result := [ ] ;
14717: LD_ADDR_VAR 0 6
14721: PUSH
14722: EMPTY
14723: ST_TO_ADDR
// for i in list do
14724: LD_ADDR_VAR 0 7
14728: PUSH
14729: LD_VAR 0 3
14733: PUSH
14734: FOR_IN
14735: IFFALSE 14937
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14737: LD_ADDR_VAR 0 9
14741: PUSH
14742: LD_VAR 0 7
14746: PPUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 297
14761: ST_TO_ADDR
// if not result then
14762: LD_VAR 0 6
14766: NOT
14767: IFFALSE 14793
// result := [ [ i , tmp ] ] else
14769: LD_ADDR_VAR 0 6
14773: PUSH
14774: LD_VAR 0 7
14778: PUSH
14779: LD_VAR 0 9
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: ST_TO_ADDR
14791: GO 14935
// begin if result [ result ] [ 2 ] < tmp then
14793: LD_VAR 0 6
14797: PUSH
14798: LD_VAR 0 6
14802: ARRAY
14803: PUSH
14804: LD_INT 2
14806: ARRAY
14807: PUSH
14808: LD_VAR 0 9
14812: LESS
14813: IFFALSE 14855
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14815: LD_ADDR_VAR 0 6
14819: PUSH
14820: LD_VAR 0 6
14824: PPUSH
14825: LD_VAR 0 6
14829: PUSH
14830: LD_INT 1
14832: PLUS
14833: PPUSH
14834: LD_VAR 0 7
14838: PUSH
14839: LD_VAR 0 9
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 2
14852: ST_TO_ADDR
14853: GO 14935
// for j = 1 to result do
14855: LD_ADDR_VAR 0 8
14859: PUSH
14860: DOUBLE
14861: LD_INT 1
14863: DEC
14864: ST_TO_ADDR
14865: LD_VAR 0 6
14869: PUSH
14870: FOR_TO
14871: IFFALSE 14933
// begin if tmp < result [ j ] [ 2 ] then
14873: LD_VAR 0 9
14877: PUSH
14878: LD_VAR 0 6
14882: PUSH
14883: LD_VAR 0 8
14887: ARRAY
14888: PUSH
14889: LD_INT 2
14891: ARRAY
14892: LESS
14893: IFFALSE 14931
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14895: LD_ADDR_VAR 0 6
14899: PUSH
14900: LD_VAR 0 6
14904: PPUSH
14905: LD_VAR 0 8
14909: PPUSH
14910: LD_VAR 0 7
14914: PUSH
14915: LD_VAR 0 9
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 2
14928: ST_TO_ADDR
// break ;
14929: GO 14933
// end ; end ;
14931: GO 14870
14933: POP
14934: POP
// end ; end ;
14935: GO 14734
14937: POP
14938: POP
// if result and not asc then
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: NOT
14949: AND
14950: IFFALSE 15025
// begin tmp := result ;
14952: LD_ADDR_VAR 0 9
14956: PUSH
14957: LD_VAR 0 6
14961: ST_TO_ADDR
// for i = tmp downto 1 do
14962: LD_ADDR_VAR 0 7
14966: PUSH
14967: DOUBLE
14968: LD_VAR 0 9
14972: INC
14973: ST_TO_ADDR
14974: LD_INT 1
14976: PUSH
14977: FOR_DOWNTO
14978: IFFALSE 15023
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14980: LD_ADDR_VAR 0 6
14984: PUSH
14985: LD_VAR 0 6
14989: PPUSH
14990: LD_VAR 0 9
14994: PUSH
14995: LD_VAR 0 7
14999: MINUS
15000: PUSH
15001: LD_INT 1
15003: PLUS
15004: PPUSH
15005: LD_VAR 0 9
15009: PUSH
15010: LD_VAR 0 7
15014: ARRAY
15015: PPUSH
15016: CALL_OW 1
15020: ST_TO_ADDR
15021: GO 14977
15023: POP
15024: POP
// end ; tmp := [ ] ;
15025: LD_ADDR_VAR 0 9
15029: PUSH
15030: EMPTY
15031: ST_TO_ADDR
// if mode then
15032: LD_VAR 0 5
15036: IFFALSE 15105
// begin for i = 1 to result do
15038: LD_ADDR_VAR 0 7
15042: PUSH
15043: DOUBLE
15044: LD_INT 1
15046: DEC
15047: ST_TO_ADDR
15048: LD_VAR 0 6
15052: PUSH
15053: FOR_TO
15054: IFFALSE 15093
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15056: LD_ADDR_VAR 0 9
15060: PUSH
15061: LD_VAR 0 9
15065: PPUSH
15066: LD_VAR 0 7
15070: PPUSH
15071: LD_VAR 0 6
15075: PUSH
15076: LD_VAR 0 7
15080: ARRAY
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: CALL_OW 1
15090: ST_TO_ADDR
15091: GO 15053
15093: POP
15094: POP
// result := tmp ;
15095: LD_ADDR_VAR 0 6
15099: PUSH
15100: LD_VAR 0 9
15104: ST_TO_ADDR
// end ; end ;
15105: LD_VAR 0 6
15109: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15118: LD_ADDR_VAR 0 5
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: LD_INT 0
15128: PUSH
15129: LD_INT 0
15131: PUSH
15132: EMPTY
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: ST_TO_ADDR
// if not x or not y then
15140: LD_VAR 0 2
15144: NOT
15145: PUSH
15146: LD_VAR 0 3
15150: NOT
15151: OR
15152: IFFALSE 15156
// exit ;
15154: GO 16806
// if not range then
15156: LD_VAR 0 4
15160: NOT
15161: IFFALSE 15171
// range := 10 ;
15163: LD_ADDR_VAR 0 4
15167: PUSH
15168: LD_INT 10
15170: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15171: LD_ADDR_VAR 0 8
15175: PUSH
15176: LD_INT 81
15178: PUSH
15179: LD_VAR 0 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 92
15190: PUSH
15191: LD_VAR 0 2
15195: PUSH
15196: LD_VAR 0 3
15200: PUSH
15201: LD_VAR 0 4
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 3
15214: PUSH
15215: LD_INT 21
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 69
15238: ST_TO_ADDR
// if not tmp then
15239: LD_VAR 0 8
15243: NOT
15244: IFFALSE 15248
// exit ;
15246: GO 16806
// for i in tmp do
15248: LD_ADDR_VAR 0 6
15252: PUSH
15253: LD_VAR 0 8
15257: PUSH
15258: FOR_IN
15259: IFFALSE 16781
// begin points := [ 0 , 0 , 0 ] ;
15261: LD_ADDR_VAR 0 9
15265: PUSH
15266: LD_INT 0
15268: PUSH
15269: LD_INT 0
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: ST_TO_ADDR
// bpoints := 1 ;
15280: LD_ADDR_VAR 0 10
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15288: LD_VAR 0 6
15292: PPUSH
15293: CALL_OW 247
15297: PUSH
15298: LD_INT 1
15300: DOUBLE
15301: EQUAL
15302: IFTRUE 15306
15304: GO 15884
15306: POP
// begin if GetClass ( i ) = 1 then
15307: LD_VAR 0 6
15311: PPUSH
15312: CALL_OW 257
15316: PUSH
15317: LD_INT 1
15319: EQUAL
15320: IFFALSE 15341
// points := [ 10 , 5 , 3 ] ;
15322: LD_ADDR_VAR 0 9
15326: PUSH
15327: LD_INT 10
15329: PUSH
15330: LD_INT 5
15332: PUSH
15333: LD_INT 3
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15341: LD_VAR 0 6
15345: PPUSH
15346: CALL_OW 257
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: LD_INT 3
15356: PUSH
15357: LD_INT 4
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: IN
15365: IFFALSE 15386
// points := [ 3 , 2 , 1 ] ;
15367: LD_ADDR_VAR 0 9
15371: PUSH
15372: LD_INT 3
15374: PUSH
15375: LD_INT 2
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15386: LD_VAR 0 6
15390: PPUSH
15391: CALL_OW 257
15395: PUSH
15396: LD_INT 5
15398: EQUAL
15399: IFFALSE 15420
// points := [ 130 , 5 , 2 ] ;
15401: LD_ADDR_VAR 0 9
15405: PUSH
15406: LD_INT 130
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15420: LD_VAR 0 6
15424: PPUSH
15425: CALL_OW 257
15429: PUSH
15430: LD_INT 8
15432: EQUAL
15433: IFFALSE 15454
// points := [ 35 , 35 , 30 ] ;
15435: LD_ADDR_VAR 0 9
15439: PUSH
15440: LD_INT 35
15442: PUSH
15443: LD_INT 35
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15454: LD_VAR 0 6
15458: PPUSH
15459: CALL_OW 257
15463: PUSH
15464: LD_INT 9
15466: EQUAL
15467: IFFALSE 15488
// points := [ 20 , 55 , 40 ] ;
15469: LD_ADDR_VAR 0 9
15473: PUSH
15474: LD_INT 20
15476: PUSH
15477: LD_INT 55
15479: PUSH
15480: LD_INT 40
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15488: LD_VAR 0 6
15492: PPUSH
15493: CALL_OW 257
15497: PUSH
15498: LD_INT 12
15500: PUSH
15501: LD_INT 16
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: IN
15508: IFFALSE 15529
// points := [ 5 , 3 , 2 ] ;
15510: LD_ADDR_VAR 0 9
15514: PUSH
15515: LD_INT 5
15517: PUSH
15518: LD_INT 3
15520: PUSH
15521: LD_INT 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15529: LD_VAR 0 6
15533: PPUSH
15534: CALL_OW 257
15538: PUSH
15539: LD_INT 17
15541: EQUAL
15542: IFFALSE 15563
// points := [ 100 , 50 , 75 ] ;
15544: LD_ADDR_VAR 0 9
15548: PUSH
15549: LD_INT 100
15551: PUSH
15552: LD_INT 50
15554: PUSH
15555: LD_INT 75
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15563: LD_VAR 0 6
15567: PPUSH
15568: CALL_OW 257
15572: PUSH
15573: LD_INT 15
15575: EQUAL
15576: IFFALSE 15597
// points := [ 10 , 5 , 3 ] ;
15578: LD_ADDR_VAR 0 9
15582: PUSH
15583: LD_INT 10
15585: PUSH
15586: LD_INT 5
15588: PUSH
15589: LD_INT 3
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15597: LD_VAR 0 6
15601: PPUSH
15602: CALL_OW 257
15606: PUSH
15607: LD_INT 14
15609: EQUAL
15610: IFFALSE 15631
// points := [ 10 , 0 , 0 ] ;
15612: LD_ADDR_VAR 0 9
15616: PUSH
15617: LD_INT 10
15619: PUSH
15620: LD_INT 0
15622: PUSH
15623: LD_INT 0
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15631: LD_VAR 0 6
15635: PPUSH
15636: CALL_OW 257
15640: PUSH
15641: LD_INT 11
15643: EQUAL
15644: IFFALSE 15665
// points := [ 30 , 10 , 5 ] ;
15646: LD_ADDR_VAR 0 9
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 10
15656: PUSH
15657: LD_INT 5
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15665: LD_VAR 0 1
15669: PPUSH
15670: LD_INT 5
15672: PPUSH
15673: CALL_OW 321
15677: PUSH
15678: LD_INT 2
15680: EQUAL
15681: IFFALSE 15698
// bpoints := bpoints * 1.8 ;
15683: LD_ADDR_VAR 0 10
15687: PUSH
15688: LD_VAR 0 10
15692: PUSH
15693: LD_REAL  1.80000000000000E+0000
15696: MUL
15697: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15698: LD_VAR 0 6
15702: PPUSH
15703: CALL_OW 257
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: LD_INT 2
15713: PUSH
15714: LD_INT 3
15716: PUSH
15717: LD_INT 4
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: IN
15726: PUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_INT 51
15734: PPUSH
15735: CALL_OW 321
15739: PUSH
15740: LD_INT 2
15742: EQUAL
15743: AND
15744: IFFALSE 15761
// bpoints := bpoints * 1.2 ;
15746: LD_ADDR_VAR 0 10
15750: PUSH
15751: LD_VAR 0 10
15755: PUSH
15756: LD_REAL  1.20000000000000E+0000
15759: MUL
15760: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15761: LD_VAR 0 6
15765: PPUSH
15766: CALL_OW 257
15770: PUSH
15771: LD_INT 5
15773: PUSH
15774: LD_INT 7
15776: PUSH
15777: LD_INT 9
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: IN
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_INT 52
15793: PPUSH
15794: CALL_OW 321
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: AND
15803: IFFALSE 15820
// bpoints := bpoints * 1.5 ;
15805: LD_ADDR_VAR 0 10
15809: PUSH
15810: LD_VAR 0 10
15814: PUSH
15815: LD_REAL  1.50000000000000E+0000
15818: MUL
15819: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15820: LD_VAR 0 1
15824: PPUSH
15825: LD_INT 66
15827: PPUSH
15828: CALL_OW 321
15832: PUSH
15833: LD_INT 2
15835: EQUAL
15836: IFFALSE 15853
// bpoints := bpoints * 1.1 ;
15838: LD_ADDR_VAR 0 10
15842: PUSH
15843: LD_VAR 0 10
15847: PUSH
15848: LD_REAL  1.10000000000000E+0000
15851: MUL
15852: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15853: LD_ADDR_VAR 0 10
15857: PUSH
15858: LD_VAR 0 10
15862: PUSH
15863: LD_VAR 0 6
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 259
15875: PUSH
15876: LD_REAL  1.15000000000000E+0000
15879: MUL
15880: MUL
15881: ST_TO_ADDR
// end ; unit_vehicle :
15882: GO 16710
15884: LD_INT 2
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15892
15890: GO 16698
15892: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15893: LD_VAR 0 6
15897: PPUSH
15898: CALL_OW 264
15902: PUSH
15903: LD_INT 2
15905: PUSH
15906: LD_INT 42
15908: PUSH
15909: LD_INT 24
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: IN
15917: IFFALSE 15938
// points := [ 25 , 5 , 3 ] ;
15919: LD_ADDR_VAR 0 9
15923: PUSH
15924: LD_INT 25
15926: PUSH
15927: LD_INT 5
15929: PUSH
15930: LD_INT 3
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15938: LD_VAR 0 6
15942: PPUSH
15943: CALL_OW 264
15947: PUSH
15948: LD_INT 4
15950: PUSH
15951: LD_INT 43
15953: PUSH
15954: LD_INT 25
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: IN
15962: IFFALSE 15983
// points := [ 40 , 15 , 5 ] ;
15964: LD_ADDR_VAR 0 9
15968: PUSH
15969: LD_INT 40
15971: PUSH
15972: LD_INT 15
15974: PUSH
15975: LD_INT 5
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15983: LD_VAR 0 6
15987: PPUSH
15988: CALL_OW 264
15992: PUSH
15993: LD_INT 3
15995: PUSH
15996: LD_INT 23
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: IN
16003: IFFALSE 16024
// points := [ 7 , 25 , 8 ] ;
16005: LD_ADDR_VAR 0 9
16009: PUSH
16010: LD_INT 7
16012: PUSH
16013: LD_INT 25
16015: PUSH
16016: LD_INT 8
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16024: LD_VAR 0 6
16028: PPUSH
16029: CALL_OW 264
16033: PUSH
16034: LD_INT 5
16036: PUSH
16037: LD_INT 27
16039: PUSH
16040: LD_INT 44
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: IN
16048: IFFALSE 16069
// points := [ 14 , 50 , 16 ] ;
16050: LD_ADDR_VAR 0 9
16054: PUSH
16055: LD_INT 14
16057: PUSH
16058: LD_INT 50
16060: PUSH
16061: LD_INT 16
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16069: LD_VAR 0 6
16073: PPUSH
16074: CALL_OW 264
16078: PUSH
16079: LD_INT 6
16081: PUSH
16082: LD_INT 46
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: IN
16089: IFFALSE 16110
// points := [ 32 , 120 , 70 ] ;
16091: LD_ADDR_VAR 0 9
16095: PUSH
16096: LD_INT 32
16098: PUSH
16099: LD_INT 120
16101: PUSH
16102: LD_INT 70
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16110: LD_VAR 0 6
16114: PPUSH
16115: CALL_OW 264
16119: PUSH
16120: LD_INT 7
16122: PUSH
16123: LD_INT 28
16125: PUSH
16126: LD_INT 45
16128: PUSH
16129: LD_INT 92
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: IN
16138: IFFALSE 16159
// points := [ 35 , 20 , 45 ] ;
16140: LD_ADDR_VAR 0 9
16144: PUSH
16145: LD_INT 35
16147: PUSH
16148: LD_INT 20
16150: PUSH
16151: LD_INT 45
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16159: LD_VAR 0 6
16163: PPUSH
16164: CALL_OW 264
16168: PUSH
16169: LD_INT 47
16171: PUSH
16172: EMPTY
16173: LIST
16174: IN
16175: IFFALSE 16196
// points := [ 67 , 45 , 75 ] ;
16177: LD_ADDR_VAR 0 9
16181: PUSH
16182: LD_INT 67
16184: PUSH
16185: LD_INT 45
16187: PUSH
16188: LD_INT 75
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16196: LD_VAR 0 6
16200: PPUSH
16201: CALL_OW 264
16205: PUSH
16206: LD_INT 26
16208: PUSH
16209: EMPTY
16210: LIST
16211: IN
16212: IFFALSE 16233
// points := [ 120 , 30 , 80 ] ;
16214: LD_ADDR_VAR 0 9
16218: PUSH
16219: LD_INT 120
16221: PUSH
16222: LD_INT 30
16224: PUSH
16225: LD_INT 80
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16233: LD_VAR 0 6
16237: PPUSH
16238: CALL_OW 264
16242: PUSH
16243: LD_INT 22
16245: PUSH
16246: EMPTY
16247: LIST
16248: IN
16249: IFFALSE 16270
// points := [ 40 , 1 , 1 ] ;
16251: LD_ADDR_VAR 0 9
16255: PUSH
16256: LD_INT 40
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16270: LD_VAR 0 6
16274: PPUSH
16275: CALL_OW 264
16279: PUSH
16280: LD_INT 29
16282: PUSH
16283: EMPTY
16284: LIST
16285: IN
16286: IFFALSE 16307
// points := [ 70 , 200 , 400 ] ;
16288: LD_ADDR_VAR 0 9
16292: PUSH
16293: LD_INT 70
16295: PUSH
16296: LD_INT 200
16298: PUSH
16299: LD_INT 400
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16307: LD_VAR 0 6
16311: PPUSH
16312: CALL_OW 264
16316: PUSH
16317: LD_INT 14
16319: PUSH
16320: LD_INT 53
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: IN
16327: IFFALSE 16348
// points := [ 40 , 10 , 20 ] ;
16329: LD_ADDR_VAR 0 9
16333: PUSH
16334: LD_INT 40
16336: PUSH
16337: LD_INT 10
16339: PUSH
16340: LD_INT 20
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16348: LD_VAR 0 6
16352: PPUSH
16353: CALL_OW 264
16357: PUSH
16358: LD_INT 9
16360: PUSH
16361: EMPTY
16362: LIST
16363: IN
16364: IFFALSE 16385
// points := [ 5 , 70 , 20 ] ;
16366: LD_ADDR_VAR 0 9
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: LD_INT 70
16376: PUSH
16377: LD_INT 20
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16385: LD_VAR 0 6
16389: PPUSH
16390: CALL_OW 264
16394: PUSH
16395: LD_INT 10
16397: PUSH
16398: EMPTY
16399: LIST
16400: IN
16401: IFFALSE 16422
// points := [ 35 , 110 , 70 ] ;
16403: LD_ADDR_VAR 0 9
16407: PUSH
16408: LD_INT 35
16410: PUSH
16411: LD_INT 110
16413: PUSH
16414: LD_INT 70
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16422: LD_VAR 0 6
16426: PPUSH
16427: CALL_OW 265
16431: PUSH
16432: LD_INT 25
16434: EQUAL
16435: IFFALSE 16456
// points := [ 80 , 65 , 100 ] ;
16437: LD_ADDR_VAR 0 9
16441: PUSH
16442: LD_INT 80
16444: PUSH
16445: LD_INT 65
16447: PUSH
16448: LD_INT 100
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16456: LD_VAR 0 6
16460: PPUSH
16461: CALL_OW 263
16465: PUSH
16466: LD_INT 1
16468: EQUAL
16469: IFFALSE 16504
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16471: LD_ADDR_VAR 0 10
16475: PUSH
16476: LD_VAR 0 10
16480: PUSH
16481: LD_VAR 0 6
16485: PPUSH
16486: CALL_OW 311
16490: PPUSH
16491: LD_INT 3
16493: PPUSH
16494: CALL_OW 259
16498: PUSH
16499: LD_INT 4
16501: MUL
16502: MUL
16503: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16504: LD_VAR 0 6
16508: PPUSH
16509: CALL_OW 263
16513: PUSH
16514: LD_INT 2
16516: EQUAL
16517: IFFALSE 16568
// begin j := IsControledBy ( i ) ;
16519: LD_ADDR_VAR 0 7
16523: PUSH
16524: LD_VAR 0 6
16528: PPUSH
16529: CALL_OW 312
16533: ST_TO_ADDR
// if j then
16534: LD_VAR 0 7
16538: IFFALSE 16568
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16540: LD_ADDR_VAR 0 10
16544: PUSH
16545: LD_VAR 0 10
16549: PUSH
16550: LD_VAR 0 7
16554: PPUSH
16555: LD_INT 3
16557: PPUSH
16558: CALL_OW 259
16562: PUSH
16563: LD_INT 3
16565: MUL
16566: MUL
16567: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16568: LD_VAR 0 6
16572: PPUSH
16573: CALL_OW 264
16577: PUSH
16578: LD_INT 5
16580: PUSH
16581: LD_INT 6
16583: PUSH
16584: LD_INT 46
16586: PUSH
16587: LD_INT 44
16589: PUSH
16590: LD_INT 47
16592: PUSH
16593: LD_INT 45
16595: PUSH
16596: LD_INT 28
16598: PUSH
16599: LD_INT 7
16601: PUSH
16602: LD_INT 27
16604: PUSH
16605: LD_INT 29
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: IN
16620: PUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: LD_INT 52
16628: PPUSH
16629: CALL_OW 321
16633: PUSH
16634: LD_INT 2
16636: EQUAL
16637: AND
16638: IFFALSE 16655
// bpoints := bpoints * 1.2 ;
16640: LD_ADDR_VAR 0 10
16644: PUSH
16645: LD_VAR 0 10
16649: PUSH
16650: LD_REAL  1.20000000000000E+0000
16653: MUL
16654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16655: LD_VAR 0 6
16659: PPUSH
16660: CALL_OW 264
16664: PUSH
16665: LD_INT 6
16667: PUSH
16668: LD_INT 46
16670: PUSH
16671: LD_INT 47
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: IN
16679: IFFALSE 16696
// bpoints := bpoints * 1.2 ;
16681: LD_ADDR_VAR 0 10
16685: PUSH
16686: LD_VAR 0 10
16690: PUSH
16691: LD_REAL  1.20000000000000E+0000
16694: MUL
16695: ST_TO_ADDR
// end ; unit_building :
16696: GO 16710
16698: LD_INT 3
16700: DOUBLE
16701: EQUAL
16702: IFTRUE 16706
16704: GO 16709
16706: POP
// ; end ;
16707: GO 16710
16709: POP
// for j = 1 to 3 do
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: DOUBLE
16716: LD_INT 1
16718: DEC
16719: ST_TO_ADDR
16720: LD_INT 3
16722: PUSH
16723: FOR_TO
16724: IFFALSE 16777
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16726: LD_ADDR_VAR 0 5
16730: PUSH
16731: LD_VAR 0 5
16735: PPUSH
16736: LD_VAR 0 7
16740: PPUSH
16741: LD_VAR 0 5
16745: PUSH
16746: LD_VAR 0 7
16750: ARRAY
16751: PUSH
16752: LD_VAR 0 9
16756: PUSH
16757: LD_VAR 0 7
16761: ARRAY
16762: PUSH
16763: LD_VAR 0 10
16767: MUL
16768: PLUS
16769: PPUSH
16770: CALL_OW 1
16774: ST_TO_ADDR
16775: GO 16723
16777: POP
16778: POP
// end ;
16779: GO 15258
16781: POP
16782: POP
// result := Replace ( result , 4 , tmp ) ;
16783: LD_ADDR_VAR 0 5
16787: PUSH
16788: LD_VAR 0 5
16792: PPUSH
16793: LD_INT 4
16795: PPUSH
16796: LD_VAR 0 8
16800: PPUSH
16801: CALL_OW 1
16805: ST_TO_ADDR
// end ;
16806: LD_VAR 0 5
16810: RET
// export function DangerAtRange ( unit , range ) ; begin
16811: LD_INT 0
16813: PPUSH
// if not unit then
16814: LD_VAR 0 1
16818: NOT
16819: IFFALSE 16823
// exit ;
16821: GO 16868
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 255
16837: PPUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL_OW 250
16847: PPUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 251
16857: PPUSH
16858: LD_VAR 0 2
16862: PPUSH
16863: CALL 15110 0 4
16867: ST_TO_ADDR
// end ;
16868: LD_VAR 0 3
16872: RET
// export function DangerInArea ( side , area ) ; begin
16873: LD_INT 0
16875: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16876: LD_ADDR_VAR 0 3
16880: PUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: LD_INT 81
16888: PUSH
16889: LD_VAR 0 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 70
16902: ST_TO_ADDR
// end ;
16903: LD_VAR 0 3
16907: RET
// export function IsExtension ( b ) ; begin
16908: LD_INT 0
16910: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16911: LD_ADDR_VAR 0 2
16915: PUSH
16916: LD_VAR 0 1
16920: PUSH
16921: LD_INT 23
16923: PUSH
16924: LD_INT 20
16926: PUSH
16927: LD_INT 22
16929: PUSH
16930: LD_INT 17
16932: PUSH
16933: LD_INT 24
16935: PUSH
16936: LD_INT 21
16938: PUSH
16939: LD_INT 19
16941: PUSH
16942: LD_INT 16
16944: PUSH
16945: LD_INT 25
16947: PUSH
16948: LD_INT 18
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: IN
16963: ST_TO_ADDR
// end ;
16964: LD_VAR 0 2
16968: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16969: LD_INT 0
16971: PPUSH
16972: PPUSH
16973: PPUSH
// result := [ ] ;
16974: LD_ADDR_VAR 0 4
16978: PUSH
16979: EMPTY
16980: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16981: LD_ADDR_VAR 0 5
16985: PUSH
16986: LD_VAR 0 2
16990: PPUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 3
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 70
17005: ST_TO_ADDR
// if not tmp then
17006: LD_VAR 0 5
17010: NOT
17011: IFFALSE 17015
// exit ;
17013: GO 17079
// if checkLink then
17015: LD_VAR 0 3
17019: IFFALSE 17069
// begin for i in tmp do
17021: LD_ADDR_VAR 0 6
17025: PUSH
17026: LD_VAR 0 5
17030: PUSH
17031: FOR_IN
17032: IFFALSE 17067
// if GetBase ( i ) <> base then
17034: LD_VAR 0 6
17038: PPUSH
17039: CALL_OW 274
17043: PUSH
17044: LD_VAR 0 1
17048: NONEQUAL
17049: IFFALSE 17065
// ComLinkToBase ( base , i ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_VAR 0 6
17060: PPUSH
17061: CALL_OW 169
17065: GO 17031
17067: POP
17068: POP
// end ; result := tmp ;
17069: LD_ADDR_VAR 0 4
17073: PUSH
17074: LD_VAR 0 5
17078: ST_TO_ADDR
// end ;
17079: LD_VAR 0 4
17083: RET
// export function ComComplete ( units , b ) ; var i ; begin
17084: LD_INT 0
17086: PPUSH
17087: PPUSH
// if not units then
17088: LD_VAR 0 1
17092: NOT
17093: IFFALSE 17097
// exit ;
17095: GO 17187
// for i in units do
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_VAR 0 1
17106: PUSH
17107: FOR_IN
17108: IFFALSE 17185
// if BuildingStatus ( b ) = bs_build then
17110: LD_VAR 0 2
17114: PPUSH
17115: CALL_OW 461
17119: PUSH
17120: LD_INT 1
17122: EQUAL
17123: IFFALSE 17183
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17125: LD_VAR 0 4
17129: PPUSH
17130: LD_STRING h
17132: PUSH
17133: LD_VAR 0 2
17137: PPUSH
17138: CALL_OW 250
17142: PUSH
17143: LD_VAR 0 2
17147: PPUSH
17148: CALL_OW 251
17152: PUSH
17153: LD_VAR 0 2
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: PPUSH
17179: CALL_OW 446
17183: GO 17107
17185: POP
17186: POP
// end ;
17187: LD_VAR 0 3
17191: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17192: LD_INT 0
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17200: LD_VAR 0 1
17204: NOT
17205: PUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 263
17215: PUSH
17216: LD_INT 2
17218: NONEQUAL
17219: OR
17220: IFFALSE 17224
// exit ;
17222: GO 17540
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17224: LD_ADDR_VAR 0 6
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: CALL_OW 255
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: LD_INT 30
17251: PUSH
17252: LD_INT 36
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 34
17261: PUSH
17262: LD_INT 31
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 69
17282: ST_TO_ADDR
// if not tmp then
17283: LD_VAR 0 6
17287: NOT
17288: IFFALSE 17292
// exit ;
17290: GO 17540
// result := [ ] ;
17292: LD_ADDR_VAR 0 2
17296: PUSH
17297: EMPTY
17298: ST_TO_ADDR
// for i in tmp do
17299: LD_ADDR_VAR 0 3
17303: PUSH
17304: LD_VAR 0 6
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17381
// begin t := UnitsInside ( i ) ;
17312: LD_ADDR_VAR 0 4
17316: PUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: CALL_OW 313
17326: ST_TO_ADDR
// if t then
17327: LD_VAR 0 4
17331: IFFALSE 17379
// for j in t do
17333: LD_ADDR_VAR 0 7
17337: PUSH
17338: LD_VAR 0 4
17342: PUSH
17343: FOR_IN
17344: IFFALSE 17377
// result := Replace ( result , result + 1 , j ) ;
17346: LD_ADDR_VAR 0 2
17350: PUSH
17351: LD_VAR 0 2
17355: PPUSH
17356: LD_VAR 0 2
17360: PUSH
17361: LD_INT 1
17363: PLUS
17364: PPUSH
17365: LD_VAR 0 7
17369: PPUSH
17370: CALL_OW 1
17374: ST_TO_ADDR
17375: GO 17343
17377: POP
17378: POP
// end ;
17379: GO 17309
17381: POP
17382: POP
// if not result then
17383: LD_VAR 0 2
17387: NOT
17388: IFFALSE 17392
// exit ;
17390: GO 17540
// mech := result [ 1 ] ;
17392: LD_ADDR_VAR 0 5
17396: PUSH
17397: LD_VAR 0 2
17401: PUSH
17402: LD_INT 1
17404: ARRAY
17405: ST_TO_ADDR
// if result > 1 then
17406: LD_VAR 0 2
17410: PUSH
17411: LD_INT 1
17413: GREATER
17414: IFFALSE 17526
// begin for i = 2 to result do
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: DOUBLE
17422: LD_INT 2
17424: DEC
17425: ST_TO_ADDR
17426: LD_VAR 0 2
17430: PUSH
17431: FOR_TO
17432: IFFALSE 17524
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17434: LD_ADDR_VAR 0 4
17438: PUSH
17439: LD_VAR 0 2
17443: PUSH
17444: LD_VAR 0 3
17448: ARRAY
17449: PPUSH
17450: LD_INT 3
17452: PPUSH
17453: CALL_OW 259
17457: PUSH
17458: LD_VAR 0 2
17462: PUSH
17463: LD_VAR 0 3
17467: ARRAY
17468: PPUSH
17469: CALL_OW 432
17473: MINUS
17474: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17475: LD_VAR 0 4
17479: PUSH
17480: LD_VAR 0 5
17484: PPUSH
17485: LD_INT 3
17487: PPUSH
17488: CALL_OW 259
17492: PUSH
17493: LD_VAR 0 5
17497: PPUSH
17498: CALL_OW 432
17502: MINUS
17503: GREATEREQUAL
17504: IFFALSE 17522
// mech := result [ i ] ;
17506: LD_ADDR_VAR 0 5
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: LD_VAR 0 3
17520: ARRAY
17521: ST_TO_ADDR
// end ;
17522: GO 17431
17524: POP
17525: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_VAR 0 5
17535: PPUSH
17536: CALL_OW 135
// end ;
17540: LD_VAR 0 2
17544: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17545: LD_INT 0
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
17555: PPUSH
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
// result := [ ] ;
17560: LD_ADDR_VAR 0 7
17564: PUSH
17565: EMPTY
17566: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 266
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: IN
17587: NOT
17588: IFFALSE 17592
// exit ;
17590: GO 19226
// if name then
17592: LD_VAR 0 3
17596: IFFALSE 17612
// SetBName ( base_dep , name ) ;
17598: LD_VAR 0 1
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: CALL_OW 500
// base := GetBase ( base_dep ) ;
17612: LD_ADDR_VAR 0 15
17616: PUSH
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 274
17626: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17627: LD_ADDR_VAR 0 16
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 255
17641: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17642: LD_ADDR_VAR 0 17
17646: PUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 248
17656: ST_TO_ADDR
// if sources then
17657: LD_VAR 0 5
17661: IFFALSE 17708
// for i = 1 to 3 do
17663: LD_ADDR_VAR 0 8
17667: PUSH
17668: DOUBLE
17669: LD_INT 1
17671: DEC
17672: ST_TO_ADDR
17673: LD_INT 3
17675: PUSH
17676: FOR_TO
17677: IFFALSE 17706
// AddResourceType ( base , i , sources [ i ] ) ;
17679: LD_VAR 0 15
17683: PPUSH
17684: LD_VAR 0 8
17688: PPUSH
17689: LD_VAR 0 5
17693: PUSH
17694: LD_VAR 0 8
17698: ARRAY
17699: PPUSH
17700: CALL_OW 276
17704: GO 17676
17706: POP
17707: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17708: LD_ADDR_VAR 0 18
17712: PUSH
17713: LD_VAR 0 15
17717: PPUSH
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL 16969 0 3
17730: ST_TO_ADDR
// InitHc ;
17731: CALL_OW 19
// InitUc ;
17735: CALL_OW 18
// uc_side := side ;
17739: LD_ADDR_OWVAR 20
17743: PUSH
17744: LD_VAR 0 16
17748: ST_TO_ADDR
// uc_nation := nation ;
17749: LD_ADDR_OWVAR 21
17753: PUSH
17754: LD_VAR 0 17
17758: ST_TO_ADDR
// if buildings then
17759: LD_VAR 0 18
17763: IFFALSE 19085
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17765: LD_ADDR_VAR 0 19
17769: PUSH
17770: LD_VAR 0 18
17774: PPUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 30
17780: PUSH
17781: LD_INT 29
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 30
17790: PUSH
17791: LD_INT 30
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 72
17807: ST_TO_ADDR
// if tmp then
17808: LD_VAR 0 19
17812: IFFALSE 17860
// for i in tmp do
17814: LD_ADDR_VAR 0 8
17818: PUSH
17819: LD_VAR 0 19
17823: PUSH
17824: FOR_IN
17825: IFFALSE 17858
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17827: LD_VAR 0 8
17831: PPUSH
17832: CALL_OW 250
17836: PPUSH
17837: LD_VAR 0 8
17841: PPUSH
17842: CALL_OW 251
17846: PPUSH
17847: LD_VAR 0 16
17851: PPUSH
17852: CALL_OW 441
17856: GO 17824
17858: POP
17859: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17860: LD_VAR 0 18
17864: PPUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 30
17870: PUSH
17871: LD_INT 32
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 30
17880: PUSH
17881: LD_INT 33
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 72
17897: IFFALSE 17985
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17899: LD_ADDR_VAR 0 8
17903: PUSH
17904: LD_VAR 0 18
17908: PPUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 30
17914: PUSH
17915: LD_INT 32
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 30
17924: PUSH
17925: LD_INT 33
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 72
17941: PUSH
17942: FOR_IN
17943: IFFALSE 17983
// begin if not GetBWeapon ( i ) then
17945: LD_VAR 0 8
17949: PPUSH
17950: CALL_OW 269
17954: NOT
17955: IFFALSE 17981
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17957: LD_VAR 0 8
17961: PPUSH
17962: LD_VAR 0 8
17966: PPUSH
17967: LD_VAR 0 2
17971: PPUSH
17972: CALL 19231 0 2
17976: PPUSH
17977: CALL_OW 431
// end ;
17981: GO 17942
17983: POP
17984: POP
// end ; for i = 1 to personel do
17985: LD_ADDR_VAR 0 8
17989: PUSH
17990: DOUBLE
17991: LD_INT 1
17993: DEC
17994: ST_TO_ADDR
17995: LD_VAR 0 6
17999: PUSH
18000: FOR_TO
18001: IFFALSE 19065
// begin if i > 4 then
18003: LD_VAR 0 8
18007: PUSH
18008: LD_INT 4
18010: GREATER
18011: IFFALSE 18015
// break ;
18013: GO 19065
// case i of 1 :
18015: LD_VAR 0 8
18019: PUSH
18020: LD_INT 1
18022: DOUBLE
18023: EQUAL
18024: IFTRUE 18028
18026: GO 18108
18028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18029: LD_ADDR_VAR 0 12
18033: PUSH
18034: LD_VAR 0 18
18038: PPUSH
18039: LD_INT 22
18041: PUSH
18042: LD_VAR 0 16
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 58
18053: PUSH
18054: EMPTY
18055: LIST
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 32
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 30
18072: PUSH
18073: LD_INT 4
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 30
18082: PUSH
18083: LD_INT 5
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PPUSH
18101: CALL_OW 72
18105: ST_TO_ADDR
18106: GO 18330
18108: LD_INT 2
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18178
18116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18117: LD_ADDR_VAR 0 12
18121: PUSH
18122: LD_VAR 0 18
18126: PPUSH
18127: LD_INT 22
18129: PUSH
18130: LD_VAR 0 16
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 30
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 72
18175: ST_TO_ADDR
18176: GO 18330
18178: LD_INT 3
18180: DOUBLE
18181: EQUAL
18182: IFTRUE 18186
18184: GO 18248
18186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18187: LD_ADDR_VAR 0 12
18191: PUSH
18192: LD_VAR 0 18
18196: PPUSH
18197: LD_INT 22
18199: PUSH
18200: LD_VAR 0 16
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: PUSH
18212: LD_INT 30
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 30
18224: PUSH
18225: LD_INT 3
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 72
18245: ST_TO_ADDR
18246: GO 18330
18248: LD_INT 4
18250: DOUBLE
18251: EQUAL
18252: IFTRUE 18256
18254: GO 18329
18256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18257: LD_ADDR_VAR 0 12
18261: PUSH
18262: LD_VAR 0 18
18266: PPUSH
18267: LD_INT 22
18269: PUSH
18270: LD_VAR 0 16
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 30
18284: PUSH
18285: LD_INT 6
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 30
18294: PUSH
18295: LD_INT 7
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 8
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PPUSH
18322: CALL_OW 72
18326: ST_TO_ADDR
18327: GO 18330
18329: POP
// if i = 1 then
18330: LD_VAR 0 8
18334: PUSH
18335: LD_INT 1
18337: EQUAL
18338: IFFALSE 18449
// begin tmp := [ ] ;
18340: LD_ADDR_VAR 0 19
18344: PUSH
18345: EMPTY
18346: ST_TO_ADDR
// for j in f do
18347: LD_ADDR_VAR 0 9
18351: PUSH
18352: LD_VAR 0 12
18356: PUSH
18357: FOR_IN
18358: IFFALSE 18431
// if GetBType ( j ) = b_bunker then
18360: LD_VAR 0 9
18364: PPUSH
18365: CALL_OW 266
18369: PUSH
18370: LD_INT 32
18372: EQUAL
18373: IFFALSE 18400
// tmp := Insert ( tmp , 1 , j ) else
18375: LD_ADDR_VAR 0 19
18379: PUSH
18380: LD_VAR 0 19
18384: PPUSH
18385: LD_INT 1
18387: PPUSH
18388: LD_VAR 0 9
18392: PPUSH
18393: CALL_OW 2
18397: ST_TO_ADDR
18398: GO 18429
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18400: LD_ADDR_VAR 0 19
18404: PUSH
18405: LD_VAR 0 19
18409: PPUSH
18410: LD_VAR 0 19
18414: PUSH
18415: LD_INT 1
18417: PLUS
18418: PPUSH
18419: LD_VAR 0 9
18423: PPUSH
18424: CALL_OW 2
18428: ST_TO_ADDR
18429: GO 18357
18431: POP
18432: POP
// if tmp then
18433: LD_VAR 0 19
18437: IFFALSE 18449
// f := tmp ;
18439: LD_ADDR_VAR 0 12
18443: PUSH
18444: LD_VAR 0 19
18448: ST_TO_ADDR
// end ; x := personel [ i ] ;
18449: LD_ADDR_VAR 0 13
18453: PUSH
18454: LD_VAR 0 6
18458: PUSH
18459: LD_VAR 0 8
18463: ARRAY
18464: ST_TO_ADDR
// if x = - 1 then
18465: LD_VAR 0 13
18469: PUSH
18470: LD_INT 1
18472: NEG
18473: EQUAL
18474: IFFALSE 18683
// begin for j in f do
18476: LD_ADDR_VAR 0 9
18480: PUSH
18481: LD_VAR 0 12
18485: PUSH
18486: FOR_IN
18487: IFFALSE 18679
// repeat InitHc ;
18489: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18493: LD_VAR 0 9
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 5
18505: EQUAL
18506: IFFALSE 18576
// begin if UnitsInside ( j ) < 3 then
18508: LD_VAR 0 9
18512: PPUSH
18513: CALL_OW 313
18517: PUSH
18518: LD_INT 3
18520: LESS
18521: IFFALSE 18557
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18523: LD_INT 0
18525: PPUSH
18526: LD_INT 5
18528: PUSH
18529: LD_INT 8
18531: PUSH
18532: LD_INT 9
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: LD_VAR 0 17
18544: ARRAY
18545: PPUSH
18546: LD_VAR 0 4
18550: PPUSH
18551: CALL_OW 380
18555: GO 18574
// PrepareHuman ( false , i , skill ) ;
18557: LD_INT 0
18559: PPUSH
18560: LD_VAR 0 8
18564: PPUSH
18565: LD_VAR 0 4
18569: PPUSH
18570: CALL_OW 380
// end else
18574: GO 18593
// PrepareHuman ( false , i , skill ) ;
18576: LD_INT 0
18578: PPUSH
18579: LD_VAR 0 8
18583: PPUSH
18584: LD_VAR 0 4
18588: PPUSH
18589: CALL_OW 380
// un := CreateHuman ;
18593: LD_ADDR_VAR 0 14
18597: PUSH
18598: CALL_OW 44
18602: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18603: LD_ADDR_VAR 0 7
18607: PUSH
18608: LD_VAR 0 7
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_VAR 0 14
18620: PPUSH
18621: CALL_OW 2
18625: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18626: LD_VAR 0 14
18630: PPUSH
18631: LD_VAR 0 9
18635: PPUSH
18636: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18640: LD_VAR 0 9
18644: PPUSH
18645: CALL_OW 313
18649: PUSH
18650: LD_INT 6
18652: EQUAL
18653: PUSH
18654: LD_VAR 0 9
18658: PPUSH
18659: CALL_OW 266
18663: PUSH
18664: LD_INT 32
18666: PUSH
18667: LD_INT 31
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: IN
18674: OR
18675: IFFALSE 18489
18677: GO 18486
18679: POP
18680: POP
// end else
18681: GO 19063
// for j = 1 to x do
18683: LD_ADDR_VAR 0 9
18687: PUSH
18688: DOUBLE
18689: LD_INT 1
18691: DEC
18692: ST_TO_ADDR
18693: LD_VAR 0 13
18697: PUSH
18698: FOR_TO
18699: IFFALSE 19061
// begin InitHc ;
18701: CALL_OW 19
// if not f then
18705: LD_VAR 0 12
18709: NOT
18710: IFFALSE 18799
// begin PrepareHuman ( false , i , skill ) ;
18712: LD_INT 0
18714: PPUSH
18715: LD_VAR 0 8
18719: PPUSH
18720: LD_VAR 0 4
18724: PPUSH
18725: CALL_OW 380
// un := CreateHuman ;
18729: LD_ADDR_VAR 0 14
18733: PUSH
18734: CALL_OW 44
18738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18739: LD_ADDR_VAR 0 7
18743: PUSH
18744: LD_VAR 0 7
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: LD_VAR 0 14
18756: PPUSH
18757: CALL_OW 2
18761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18762: LD_VAR 0 14
18766: PPUSH
18767: LD_VAR 0 1
18771: PPUSH
18772: CALL_OW 250
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 251
18786: PPUSH
18787: LD_INT 10
18789: PPUSH
18790: LD_INT 0
18792: PPUSH
18793: CALL_OW 50
// continue ;
18797: GO 18698
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18799: LD_VAR 0 12
18803: PUSH
18804: LD_INT 1
18806: ARRAY
18807: PPUSH
18808: CALL_OW 313
18812: PUSH
18813: LD_VAR 0 12
18817: PUSH
18818: LD_INT 1
18820: ARRAY
18821: PPUSH
18822: CALL_OW 266
18826: PUSH
18827: LD_INT 32
18829: PUSH
18830: LD_INT 31
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: IN
18837: AND
18838: PUSH
18839: LD_VAR 0 12
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: PPUSH
18848: CALL_OW 313
18852: PUSH
18853: LD_INT 6
18855: EQUAL
18856: OR
18857: IFFALSE 18877
// f := Delete ( f , 1 ) ;
18859: LD_ADDR_VAR 0 12
18863: PUSH
18864: LD_VAR 0 12
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: CALL_OW 3
18876: ST_TO_ADDR
// if not f then
18877: LD_VAR 0 12
18881: NOT
18882: IFFALSE 18900
// begin x := x + 2 ;
18884: LD_ADDR_VAR 0 13
18888: PUSH
18889: LD_VAR 0 13
18893: PUSH
18894: LD_INT 2
18896: PLUS
18897: ST_TO_ADDR
// continue ;
18898: GO 18698
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18900: LD_VAR 0 12
18904: PUSH
18905: LD_INT 1
18907: ARRAY
18908: PPUSH
18909: CALL_OW 266
18913: PUSH
18914: LD_INT 5
18916: EQUAL
18917: IFFALSE 18991
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18919: LD_VAR 0 12
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: PPUSH
18928: CALL_OW 313
18932: PUSH
18933: LD_INT 3
18935: LESS
18936: IFFALSE 18972
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18938: LD_INT 0
18940: PPUSH
18941: LD_INT 5
18943: PUSH
18944: LD_INT 8
18946: PUSH
18947: LD_INT 9
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_VAR 0 17
18959: ARRAY
18960: PPUSH
18961: LD_VAR 0 4
18965: PPUSH
18966: CALL_OW 380
18970: GO 18989
// PrepareHuman ( false , i , skill ) ;
18972: LD_INT 0
18974: PPUSH
18975: LD_VAR 0 8
18979: PPUSH
18980: LD_VAR 0 4
18984: PPUSH
18985: CALL_OW 380
// end else
18989: GO 19008
// PrepareHuman ( false , i , skill ) ;
18991: LD_INT 0
18993: PPUSH
18994: LD_VAR 0 8
18998: PPUSH
18999: LD_VAR 0 4
19003: PPUSH
19004: CALL_OW 380
// un := CreateHuman ;
19008: LD_ADDR_VAR 0 14
19012: PUSH
19013: CALL_OW 44
19017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19018: LD_ADDR_VAR 0 7
19022: PUSH
19023: LD_VAR 0 7
19027: PPUSH
19028: LD_INT 1
19030: PPUSH
19031: LD_VAR 0 14
19035: PPUSH
19036: CALL_OW 2
19040: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19041: LD_VAR 0 14
19045: PPUSH
19046: LD_VAR 0 12
19050: PUSH
19051: LD_INT 1
19053: ARRAY
19054: PPUSH
19055: CALL_OW 52
// end ;
19059: GO 18698
19061: POP
19062: POP
// end ;
19063: GO 18000
19065: POP
19066: POP
// result := result ^ buildings ;
19067: LD_ADDR_VAR 0 7
19071: PUSH
19072: LD_VAR 0 7
19076: PUSH
19077: LD_VAR 0 18
19081: ADD
19082: ST_TO_ADDR
// end else
19083: GO 19226
// begin for i = 1 to personel do
19085: LD_ADDR_VAR 0 8
19089: PUSH
19090: DOUBLE
19091: LD_INT 1
19093: DEC
19094: ST_TO_ADDR
19095: LD_VAR 0 6
19099: PUSH
19100: FOR_TO
19101: IFFALSE 19224
// begin if i > 4 then
19103: LD_VAR 0 8
19107: PUSH
19108: LD_INT 4
19110: GREATER
19111: IFFALSE 19115
// break ;
19113: GO 19224
// x := personel [ i ] ;
19115: LD_ADDR_VAR 0 13
19119: PUSH
19120: LD_VAR 0 6
19124: PUSH
19125: LD_VAR 0 8
19129: ARRAY
19130: ST_TO_ADDR
// if x = - 1 then
19131: LD_VAR 0 13
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: EQUAL
19140: IFFALSE 19144
// continue ;
19142: GO 19100
// PrepareHuman ( false , i , skill ) ;
19144: LD_INT 0
19146: PPUSH
19147: LD_VAR 0 8
19151: PPUSH
19152: LD_VAR 0 4
19156: PPUSH
19157: CALL_OW 380
// un := CreateHuman ;
19161: LD_ADDR_VAR 0 14
19165: PUSH
19166: CALL_OW 44
19170: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19171: LD_VAR 0 14
19175: PPUSH
19176: LD_VAR 0 1
19180: PPUSH
19181: CALL_OW 250
19185: PPUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 251
19195: PPUSH
19196: LD_INT 10
19198: PPUSH
19199: LD_INT 0
19201: PPUSH
19202: CALL_OW 50
// result := result ^ un ;
19206: LD_ADDR_VAR 0 7
19210: PUSH
19211: LD_VAR 0 7
19215: PUSH
19216: LD_VAR 0 14
19220: ADD
19221: ST_TO_ADDR
// end ;
19222: GO 19100
19224: POP
19225: POP
// end ; end ;
19226: LD_VAR 0 7
19230: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19231: LD_INT 0
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
// result := false ;
19249: LD_ADDR_VAR 0 3
19253: PUSH
19254: LD_INT 0
19256: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19257: LD_VAR 0 1
19261: NOT
19262: PUSH
19263: LD_VAR 0 1
19267: PPUSH
19268: CALL_OW 266
19272: PUSH
19273: LD_INT 32
19275: PUSH
19276: LD_INT 33
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: IN
19283: NOT
19284: OR
19285: IFFALSE 19289
// exit ;
19287: GO 20398
// nat := GetNation ( tower ) ;
19289: LD_ADDR_VAR 0 12
19293: PUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 248
19303: ST_TO_ADDR
// side := GetSide ( tower ) ;
19304: LD_ADDR_VAR 0 16
19308: PUSH
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 255
19318: ST_TO_ADDR
// x := GetX ( tower ) ;
19319: LD_ADDR_VAR 0 10
19323: PUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 250
19333: ST_TO_ADDR
// y := GetY ( tower ) ;
19334: LD_ADDR_VAR 0 11
19338: PUSH
19339: LD_VAR 0 1
19343: PPUSH
19344: CALL_OW 251
19348: ST_TO_ADDR
// if not x or not y then
19349: LD_VAR 0 10
19353: NOT
19354: PUSH
19355: LD_VAR 0 11
19359: NOT
19360: OR
19361: IFFALSE 19365
// exit ;
19363: GO 20398
// weapon := 0 ;
19365: LD_ADDR_VAR 0 18
19369: PUSH
19370: LD_INT 0
19372: ST_TO_ADDR
// fac_list := [ ] ;
19373: LD_ADDR_VAR 0 17
19377: PUSH
19378: EMPTY
19379: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19380: LD_ADDR_VAR 0 6
19384: PUSH
19385: LD_VAR 0 1
19389: PPUSH
19390: CALL_OW 274
19394: PPUSH
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 0
19402: PPUSH
19403: CALL 16969 0 3
19407: PPUSH
19408: LD_INT 30
19410: PUSH
19411: LD_INT 3
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PPUSH
19418: CALL_OW 72
19422: ST_TO_ADDR
// if not factories then
19423: LD_VAR 0 6
19427: NOT
19428: IFFALSE 19432
// exit ;
19430: GO 20398
// for i in factories do
19432: LD_ADDR_VAR 0 8
19436: PUSH
19437: LD_VAR 0 6
19441: PUSH
19442: FOR_IN
19443: IFFALSE 19468
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19445: LD_ADDR_VAR 0 17
19449: PUSH
19450: LD_VAR 0 17
19454: PUSH
19455: LD_VAR 0 8
19459: PPUSH
19460: CALL_OW 478
19464: UNION
19465: ST_TO_ADDR
19466: GO 19442
19468: POP
19469: POP
// if not fac_list then
19470: LD_VAR 0 17
19474: NOT
19475: IFFALSE 19479
// exit ;
19477: GO 20398
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_INT 4
19486: PUSH
19487: LD_INT 5
19489: PUSH
19490: LD_INT 9
19492: PUSH
19493: LD_INT 10
19495: PUSH
19496: LD_INT 6
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 11
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 27
19516: PUSH
19517: LD_INT 28
19519: PUSH
19520: LD_INT 26
19522: PUSH
19523: LD_INT 30
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 43
19534: PUSH
19535: LD_INT 44
19537: PUSH
19538: LD_INT 46
19540: PUSH
19541: LD_INT 45
19543: PUSH
19544: LD_INT 47
19546: PUSH
19547: LD_INT 49
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: LD_VAR 0 12
19567: ARRAY
19568: ST_TO_ADDR
// list := list isect fac_list ;
19569: LD_ADDR_VAR 0 5
19573: PUSH
19574: LD_VAR 0 5
19578: PUSH
19579: LD_VAR 0 17
19583: ISECT
19584: ST_TO_ADDR
// if not list then
19585: LD_VAR 0 5
19589: NOT
19590: IFFALSE 19594
// exit ;
19592: GO 20398
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19594: LD_VAR 0 12
19598: PUSH
19599: LD_INT 3
19601: EQUAL
19602: PUSH
19603: LD_INT 49
19605: PUSH
19606: LD_VAR 0 5
19610: IN
19611: AND
19612: PUSH
19613: LD_INT 31
19615: PPUSH
19616: LD_VAR 0 16
19620: PPUSH
19621: CALL_OW 321
19625: PUSH
19626: LD_INT 2
19628: EQUAL
19629: AND
19630: IFFALSE 19690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19632: LD_INT 22
19634: PUSH
19635: LD_VAR 0 16
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 35
19646: PUSH
19647: LD_INT 49
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 91
19656: PUSH
19657: LD_VAR 0 1
19661: PUSH
19662: LD_INT 10
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: NOT
19680: IFFALSE 19690
// weapon := ru_time_lapser ;
19682: LD_ADDR_VAR 0 18
19686: PUSH
19687: LD_INT 49
19689: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19690: LD_VAR 0 12
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: IN
19705: PUSH
19706: LD_INT 11
19708: PUSH
19709: LD_VAR 0 5
19713: IN
19714: PUSH
19715: LD_INT 30
19717: PUSH
19718: LD_VAR 0 5
19722: IN
19723: OR
19724: AND
19725: PUSH
19726: LD_INT 6
19728: PPUSH
19729: LD_VAR 0 16
19733: PPUSH
19734: CALL_OW 321
19738: PUSH
19739: LD_INT 2
19741: EQUAL
19742: AND
19743: IFFALSE 19908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19745: LD_INT 22
19747: PUSH
19748: LD_VAR 0 16
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: LD_INT 35
19762: PUSH
19763: LD_INT 11
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 35
19772: PUSH
19773: LD_INT 30
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 91
19787: PUSH
19788: LD_VAR 0 1
19792: PUSH
19793: LD_INT 18
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: NOT
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_VAR 0 16
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 30
19829: PUSH
19830: LD_INT 32
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 33
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 91
19854: PUSH
19855: LD_VAR 0 1
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: PUSH
19881: LD_INT 2
19883: GREATER
19884: AND
19885: IFFALSE 19908
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19887: LD_ADDR_VAR 0 18
19891: PUSH
19892: LD_INT 11
19894: PUSH
19895: LD_INT 30
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_VAR 0 12
19906: ARRAY
19907: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19908: LD_VAR 0 18
19912: NOT
19913: PUSH
19914: LD_INT 40
19916: PPUSH
19917: LD_VAR 0 16
19921: PPUSH
19922: CALL_OW 321
19926: PUSH
19927: LD_INT 2
19929: EQUAL
19930: AND
19931: PUSH
19932: LD_INT 7
19934: PUSH
19935: LD_VAR 0 5
19939: IN
19940: PUSH
19941: LD_INT 28
19943: PUSH
19944: LD_VAR 0 5
19948: IN
19949: OR
19950: PUSH
19951: LD_INT 45
19953: PUSH
19954: LD_VAR 0 5
19958: IN
19959: OR
19960: AND
19961: IFFALSE 20215
// begin hex := GetHexInfo ( x , y ) ;
19963: LD_ADDR_VAR 0 4
19967: PUSH
19968: LD_VAR 0 10
19972: PPUSH
19973: LD_VAR 0 11
19977: PPUSH
19978: CALL_OW 546
19982: ST_TO_ADDR
// if hex [ 1 ] then
19983: LD_VAR 0 4
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: IFFALSE 19995
// exit ;
19993: GO 20398
// height := hex [ 2 ] ;
19995: LD_ADDR_VAR 0 15
19999: PUSH
20000: LD_VAR 0 4
20004: PUSH
20005: LD_INT 2
20007: ARRAY
20008: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20009: LD_ADDR_VAR 0 14
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 5
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
// for i in tmp do
20032: LD_ADDR_VAR 0 8
20036: PUSH
20037: LD_VAR 0 14
20041: PUSH
20042: FOR_IN
20043: IFFALSE 20213
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20045: LD_ADDR_VAR 0 9
20049: PUSH
20050: LD_VAR 0 10
20054: PPUSH
20055: LD_VAR 0 8
20059: PPUSH
20060: LD_INT 5
20062: PPUSH
20063: CALL_OW 272
20067: PUSH
20068: LD_VAR 0 11
20072: PPUSH
20073: LD_VAR 0 8
20077: PPUSH
20078: LD_INT 5
20080: PPUSH
20081: CALL_OW 273
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20090: LD_VAR 0 9
20094: PUSH
20095: LD_INT 1
20097: ARRAY
20098: PPUSH
20099: LD_VAR 0 9
20103: PUSH
20104: LD_INT 2
20106: ARRAY
20107: PPUSH
20108: CALL_OW 488
20112: IFFALSE 20211
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20114: LD_ADDR_VAR 0 4
20118: PUSH
20119: LD_VAR 0 9
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: LD_VAR 0 9
20132: PUSH
20133: LD_INT 2
20135: ARRAY
20136: PPUSH
20137: CALL_OW 546
20141: ST_TO_ADDR
// if hex [ 1 ] then
20142: LD_VAR 0 4
20146: PUSH
20147: LD_INT 1
20149: ARRAY
20150: IFFALSE 20154
// continue ;
20152: GO 20042
// h := hex [ 2 ] ;
20154: LD_ADDR_VAR 0 13
20158: PUSH
20159: LD_VAR 0 4
20163: PUSH
20164: LD_INT 2
20166: ARRAY
20167: ST_TO_ADDR
// if h + 7 < height then
20168: LD_VAR 0 13
20172: PUSH
20173: LD_INT 7
20175: PLUS
20176: PUSH
20177: LD_VAR 0 15
20181: LESS
20182: IFFALSE 20211
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20184: LD_ADDR_VAR 0 18
20188: PUSH
20189: LD_INT 7
20191: PUSH
20192: LD_INT 28
20194: PUSH
20195: LD_INT 45
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: PUSH
20203: LD_VAR 0 12
20207: ARRAY
20208: ST_TO_ADDR
// break ;
20209: GO 20213
// end ; end ; end ;
20211: GO 20042
20213: POP
20214: POP
// end ; if not weapon then
20215: LD_VAR 0 18
20219: NOT
20220: IFFALSE 20280
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20222: LD_ADDR_VAR 0 5
20226: PUSH
20227: LD_VAR 0 5
20231: PUSH
20232: LD_INT 11
20234: PUSH
20235: LD_INT 30
20237: PUSH
20238: LD_INT 49
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: DIFF
20246: ST_TO_ADDR
// if not list then
20247: LD_VAR 0 5
20251: NOT
20252: IFFALSE 20256
// exit ;
20254: GO 20398
// weapon := list [ rand ( 1 , list ) ] ;
20256: LD_ADDR_VAR 0 18
20260: PUSH
20261: LD_VAR 0 5
20265: PUSH
20266: LD_INT 1
20268: PPUSH
20269: LD_VAR 0 5
20273: PPUSH
20274: CALL_OW 12
20278: ARRAY
20279: ST_TO_ADDR
// end ; if weapon then
20280: LD_VAR 0 18
20284: IFFALSE 20398
// begin tmp := CostOfWeapon ( weapon ) ;
20286: LD_ADDR_VAR 0 14
20290: PUSH
20291: LD_VAR 0 18
20295: PPUSH
20296: CALL_OW 451
20300: ST_TO_ADDR
// j := GetBase ( tower ) ;
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL_OW 274
20315: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20316: LD_VAR 0 9
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 275
20328: PUSH
20329: LD_VAR 0 14
20333: PUSH
20334: LD_INT 1
20336: ARRAY
20337: GREATEREQUAL
20338: PUSH
20339: LD_VAR 0 9
20343: PPUSH
20344: LD_INT 2
20346: PPUSH
20347: CALL_OW 275
20351: PUSH
20352: LD_VAR 0 14
20356: PUSH
20357: LD_INT 2
20359: ARRAY
20360: GREATEREQUAL
20361: AND
20362: PUSH
20363: LD_VAR 0 9
20367: PPUSH
20368: LD_INT 3
20370: PPUSH
20371: CALL_OW 275
20375: PUSH
20376: LD_VAR 0 14
20380: PUSH
20381: LD_INT 3
20383: ARRAY
20384: GREATEREQUAL
20385: AND
20386: IFFALSE 20398
// result := weapon ;
20388: LD_ADDR_VAR 0 3
20392: PUSH
20393: LD_VAR 0 18
20397: ST_TO_ADDR
// end ; end ;
20398: LD_VAR 0 3
20402: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20403: LD_INT 0
20405: PPUSH
20406: PPUSH
// result := true ;
20407: LD_ADDR_VAR 0 3
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if array1 = array2 then
20415: LD_VAR 0 1
20419: PUSH
20420: LD_VAR 0 2
20424: EQUAL
20425: IFFALSE 20485
// begin for i = 1 to array1 do
20427: LD_ADDR_VAR 0 4
20431: PUSH
20432: DOUBLE
20433: LD_INT 1
20435: DEC
20436: ST_TO_ADDR
20437: LD_VAR 0 1
20441: PUSH
20442: FOR_TO
20443: IFFALSE 20481
// if array1 [ i ] <> array2 [ i ] then
20445: LD_VAR 0 1
20449: PUSH
20450: LD_VAR 0 4
20454: ARRAY
20455: PUSH
20456: LD_VAR 0 2
20460: PUSH
20461: LD_VAR 0 4
20465: ARRAY
20466: NONEQUAL
20467: IFFALSE 20479
// begin result := false ;
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 0
20476: ST_TO_ADDR
// break ;
20477: GO 20481
// end ;
20479: GO 20442
20481: POP
20482: POP
// end else
20483: GO 20493
// result := false ;
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// end ;
20493: LD_VAR 0 3
20497: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
// if not array1 or not array2 then
20502: LD_VAR 0 1
20506: NOT
20507: PUSH
20508: LD_VAR 0 2
20512: NOT
20513: OR
20514: IFFALSE 20518
// exit ;
20516: GO 20582
// result := true ;
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// for i = 1 to array1 do
20526: LD_ADDR_VAR 0 4
20530: PUSH
20531: DOUBLE
20532: LD_INT 1
20534: DEC
20535: ST_TO_ADDR
20536: LD_VAR 0 1
20540: PUSH
20541: FOR_TO
20542: IFFALSE 20580
// if array1 [ i ] <> array2 [ i ] then
20544: LD_VAR 0 1
20548: PUSH
20549: LD_VAR 0 4
20553: ARRAY
20554: PUSH
20555: LD_VAR 0 2
20559: PUSH
20560: LD_VAR 0 4
20564: ARRAY
20565: NONEQUAL
20566: IFFALSE 20578
// begin result := false ;
20568: LD_ADDR_VAR 0 3
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// break ;
20576: GO 20580
// end ;
20578: GO 20541
20580: POP
20581: POP
// end ;
20582: LD_VAR 0 3
20586: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20587: LD_INT 0
20589: PPUSH
20590: PPUSH
20591: PPUSH
// pom := GetBase ( fac ) ;
20592: LD_ADDR_VAR 0 5
20596: PUSH
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 274
20606: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20607: LD_ADDR_VAR 0 4
20611: PUSH
20612: LD_VAR 0 2
20616: PUSH
20617: LD_INT 1
20619: ARRAY
20620: PPUSH
20621: LD_VAR 0 2
20625: PUSH
20626: LD_INT 2
20628: ARRAY
20629: PPUSH
20630: LD_VAR 0 2
20634: PUSH
20635: LD_INT 3
20637: ARRAY
20638: PPUSH
20639: LD_VAR 0 2
20643: PUSH
20644: LD_INT 4
20646: ARRAY
20647: PPUSH
20648: CALL_OW 449
20652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20653: LD_ADDR_VAR 0 3
20657: PUSH
20658: LD_VAR 0 5
20662: PPUSH
20663: LD_INT 1
20665: PPUSH
20666: CALL_OW 275
20670: PUSH
20671: LD_VAR 0 4
20675: PUSH
20676: LD_INT 1
20678: ARRAY
20679: GREATEREQUAL
20680: PUSH
20681: LD_VAR 0 5
20685: PPUSH
20686: LD_INT 2
20688: PPUSH
20689: CALL_OW 275
20693: PUSH
20694: LD_VAR 0 4
20698: PUSH
20699: LD_INT 2
20701: ARRAY
20702: GREATEREQUAL
20703: AND
20704: PUSH
20705: LD_VAR 0 5
20709: PPUSH
20710: LD_INT 3
20712: PPUSH
20713: CALL_OW 275
20717: PUSH
20718: LD_VAR 0 4
20722: PUSH
20723: LD_INT 3
20725: ARRAY
20726: GREATEREQUAL
20727: AND
20728: ST_TO_ADDR
// end ;
20729: LD_VAR 0 3
20733: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20734: LD_INT 0
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
// pom := GetBase ( building ) ;
20740: LD_ADDR_VAR 0 3
20744: PUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: CALL_OW 274
20754: ST_TO_ADDR
// if not pom then
20755: LD_VAR 0 3
20759: NOT
20760: IFFALSE 20764
// exit ;
20762: GO 20934
// btype := GetBType ( building ) ;
20764: LD_ADDR_VAR 0 5
20768: PUSH
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 266
20778: ST_TO_ADDR
// if btype = b_armoury then
20779: LD_VAR 0 5
20783: PUSH
20784: LD_INT 4
20786: EQUAL
20787: IFFALSE 20797
// btype := b_barracks ;
20789: LD_ADDR_VAR 0 5
20793: PUSH
20794: LD_INT 5
20796: ST_TO_ADDR
// if btype = b_depot then
20797: LD_VAR 0 5
20801: PUSH
20802: LD_INT 0
20804: EQUAL
20805: IFFALSE 20815
// btype := b_warehouse ;
20807: LD_ADDR_VAR 0 5
20811: PUSH
20812: LD_INT 1
20814: ST_TO_ADDR
// if btype = b_workshop then
20815: LD_VAR 0 5
20819: PUSH
20820: LD_INT 2
20822: EQUAL
20823: IFFALSE 20833
// btype := b_factory ;
20825: LD_ADDR_VAR 0 5
20829: PUSH
20830: LD_INT 3
20832: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20833: LD_ADDR_VAR 0 4
20837: PUSH
20838: LD_VAR 0 5
20842: PPUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 248
20852: PPUSH
20853: CALL_OW 450
20857: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_VAR 0 3
20867: PPUSH
20868: LD_INT 1
20870: PPUSH
20871: CALL_OW 275
20875: PUSH
20876: LD_VAR 0 4
20880: PUSH
20881: LD_INT 1
20883: ARRAY
20884: GREATEREQUAL
20885: PUSH
20886: LD_VAR 0 3
20890: PPUSH
20891: LD_INT 2
20893: PPUSH
20894: CALL_OW 275
20898: PUSH
20899: LD_VAR 0 4
20903: PUSH
20904: LD_INT 2
20906: ARRAY
20907: GREATEREQUAL
20908: AND
20909: PUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 3
20917: PPUSH
20918: CALL_OW 275
20922: PUSH
20923: LD_VAR 0 4
20927: PUSH
20928: LD_INT 3
20930: ARRAY
20931: GREATEREQUAL
20932: AND
20933: ST_TO_ADDR
// end ;
20934: LD_VAR 0 2
20938: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
20943: PPUSH
// pom := GetBase ( building ) ;
20944: LD_ADDR_VAR 0 4
20948: PUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 274
20958: ST_TO_ADDR
// if not pom then
20959: LD_VAR 0 4
20963: NOT
20964: IFFALSE 20968
// exit ;
20966: GO 21069
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20968: LD_ADDR_VAR 0 5
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_VAR 0 1
20982: PPUSH
20983: CALL_OW 248
20987: PPUSH
20988: CALL_OW 450
20992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: LD_INT 1
21005: PPUSH
21006: CALL_OW 275
21010: PUSH
21011: LD_VAR 0 5
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: GREATEREQUAL
21020: PUSH
21021: LD_VAR 0 4
21025: PPUSH
21026: LD_INT 2
21028: PPUSH
21029: CALL_OW 275
21033: PUSH
21034: LD_VAR 0 5
21038: PUSH
21039: LD_INT 2
21041: ARRAY
21042: GREATEREQUAL
21043: AND
21044: PUSH
21045: LD_VAR 0 4
21049: PPUSH
21050: LD_INT 3
21052: PPUSH
21053: CALL_OW 275
21057: PUSH
21058: LD_VAR 0 5
21062: PUSH
21063: LD_INT 3
21065: ARRAY
21066: GREATEREQUAL
21067: AND
21068: ST_TO_ADDR
// end ;
21069: LD_VAR 0 3
21073: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21074: LD_INT 0
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
21081: PPUSH
21082: PPUSH
21083: PPUSH
21084: PPUSH
21085: PPUSH
21086: PPUSH
// result := false ;
21087: LD_ADDR_VAR 0 8
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21095: LD_VAR 0 5
21099: NOT
21100: PUSH
21101: LD_VAR 0 1
21105: NOT
21106: OR
21107: PUSH
21108: LD_VAR 0 2
21112: NOT
21113: OR
21114: PUSH
21115: LD_VAR 0 3
21119: NOT
21120: OR
21121: IFFALSE 21125
// exit ;
21123: GO 21939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21125: LD_ADDR_VAR 0 14
21129: PUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: LD_VAR 0 3
21144: PPUSH
21145: LD_VAR 0 4
21149: PPUSH
21150: LD_VAR 0 5
21154: PUSH
21155: LD_INT 1
21157: ARRAY
21158: PPUSH
21159: CALL_OW 248
21163: PPUSH
21164: LD_INT 0
21166: PPUSH
21167: CALL 23192 0 6
21171: ST_TO_ADDR
// if not hexes then
21172: LD_VAR 0 14
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21939
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21181: LD_ADDR_VAR 0 17
21185: PUSH
21186: LD_VAR 0 5
21190: PPUSH
21191: LD_INT 22
21193: PUSH
21194: LD_VAR 0 13
21198: PPUSH
21199: CALL_OW 255
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 30
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: ST_TO_ADDR
// for i = 1 to hexes do
21245: LD_ADDR_VAR 0 9
21249: PUSH
21250: DOUBLE
21251: LD_INT 1
21253: DEC
21254: ST_TO_ADDR
21255: LD_VAR 0 14
21259: PUSH
21260: FOR_TO
21261: IFFALSE 21937
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21263: LD_ADDR_VAR 0 13
21267: PUSH
21268: LD_VAR 0 14
21272: PUSH
21273: LD_VAR 0 9
21277: ARRAY
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 14
21287: PUSH
21288: LD_VAR 0 9
21292: ARRAY
21293: PUSH
21294: LD_INT 2
21296: ARRAY
21297: PPUSH
21298: CALL_OW 428
21302: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21303: LD_VAR 0 14
21307: PUSH
21308: LD_VAR 0 9
21312: ARRAY
21313: PUSH
21314: LD_INT 1
21316: ARRAY
21317: PPUSH
21318: LD_VAR 0 14
21322: PUSH
21323: LD_VAR 0 9
21327: ARRAY
21328: PUSH
21329: LD_INT 2
21331: ARRAY
21332: PPUSH
21333: CALL_OW 351
21337: PUSH
21338: LD_VAR 0 14
21342: PUSH
21343: LD_VAR 0 9
21347: ARRAY
21348: PUSH
21349: LD_INT 1
21351: ARRAY
21352: PPUSH
21353: LD_VAR 0 14
21357: PUSH
21358: LD_VAR 0 9
21362: ARRAY
21363: PUSH
21364: LD_INT 2
21366: ARRAY
21367: PPUSH
21368: CALL_OW 488
21372: NOT
21373: OR
21374: PUSH
21375: LD_VAR 0 13
21379: PPUSH
21380: CALL_OW 247
21384: PUSH
21385: LD_INT 3
21387: EQUAL
21388: OR
21389: IFFALSE 21395
// exit ;
21391: POP
21392: POP
21393: GO 21939
// if not tmp then
21395: LD_VAR 0 13
21399: NOT
21400: IFFALSE 21404
// continue ;
21402: GO 21260
// result := true ;
21404: LD_ADDR_VAR 0 8
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21412: LD_VAR 0 6
21416: PUSH
21417: LD_VAR 0 13
21421: PPUSH
21422: CALL_OW 247
21426: PUSH
21427: LD_INT 2
21429: EQUAL
21430: AND
21431: PUSH
21432: LD_VAR 0 13
21436: PPUSH
21437: CALL_OW 263
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: AND
21446: IFFALSE 21610
// begin if IsDrivenBy ( tmp ) then
21448: LD_VAR 0 13
21452: PPUSH
21453: CALL_OW 311
21457: IFFALSE 21461
// continue ;
21459: GO 21260
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21461: LD_VAR 0 6
21465: PPUSH
21466: LD_INT 3
21468: PUSH
21469: LD_INT 60
21471: PUSH
21472: EMPTY
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 3
21481: PUSH
21482: LD_INT 55
21484: PUSH
21485: EMPTY
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PPUSH
21496: CALL_OW 72
21500: IFFALSE 21608
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21502: LD_ADDR_VAR 0 18
21506: PUSH
21507: LD_VAR 0 6
21511: PPUSH
21512: LD_INT 3
21514: PUSH
21515: LD_INT 60
21517: PUSH
21518: EMPTY
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 3
21527: PUSH
21528: LD_INT 55
21530: PUSH
21531: EMPTY
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 72
21546: PUSH
21547: LD_INT 1
21549: ARRAY
21550: ST_TO_ADDR
// if IsInUnit ( driver ) then
21551: LD_VAR 0 18
21555: PPUSH
21556: CALL_OW 310
21560: IFFALSE 21571
// ComExit ( driver ) ;
21562: LD_VAR 0 18
21566: PPUSH
21567: CALL 46973 0 1
// AddComEnterUnit ( driver , tmp ) ;
21571: LD_VAR 0 18
21575: PPUSH
21576: LD_VAR 0 13
21580: PPUSH
21581: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21585: LD_VAR 0 18
21589: PPUSH
21590: LD_VAR 0 7
21594: PPUSH
21595: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21599: LD_VAR 0 18
21603: PPUSH
21604: CALL_OW 181
// end ; continue ;
21608: GO 21260
// end ; if not cleaners or not tmp in cleaners then
21610: LD_VAR 0 6
21614: NOT
21615: PUSH
21616: LD_VAR 0 13
21620: PUSH
21621: LD_VAR 0 6
21625: IN
21626: NOT
21627: OR
21628: IFFALSE 21935
// begin if dep then
21630: LD_VAR 0 17
21634: IFFALSE 21770
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21636: LD_ADDR_VAR 0 16
21640: PUSH
21641: LD_VAR 0 17
21645: PUSH
21646: LD_INT 1
21648: ARRAY
21649: PPUSH
21650: CALL_OW 250
21654: PPUSH
21655: LD_VAR 0 17
21659: PUSH
21660: LD_INT 1
21662: ARRAY
21663: PPUSH
21664: CALL_OW 254
21668: PPUSH
21669: LD_INT 5
21671: PPUSH
21672: CALL_OW 272
21676: PUSH
21677: LD_VAR 0 17
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: PPUSH
21686: CALL_OW 251
21690: PPUSH
21691: LD_VAR 0 17
21695: PUSH
21696: LD_INT 1
21698: ARRAY
21699: PPUSH
21700: CALL_OW 254
21704: PPUSH
21705: LD_INT 5
21707: PPUSH
21708: CALL_OW 273
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21717: LD_VAR 0 16
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: LD_VAR 0 16
21730: PUSH
21731: LD_INT 2
21733: ARRAY
21734: PPUSH
21735: CALL_OW 488
21739: IFFALSE 21770
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21741: LD_VAR 0 13
21745: PPUSH
21746: LD_VAR 0 16
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: LD_VAR 0 16
21759: PUSH
21760: LD_INT 2
21762: ARRAY
21763: PPUSH
21764: CALL_OW 111
// continue ;
21768: GO 21260
// end ; end ; r := GetDir ( tmp ) ;
21770: LD_ADDR_VAR 0 15
21774: PUSH
21775: LD_VAR 0 13
21779: PPUSH
21780: CALL_OW 254
21784: ST_TO_ADDR
// if r = 5 then
21785: LD_VAR 0 15
21789: PUSH
21790: LD_INT 5
21792: EQUAL
21793: IFFALSE 21803
// r := 0 ;
21795: LD_ADDR_VAR 0 15
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// for j = r to 5 do
21803: LD_ADDR_VAR 0 10
21807: PUSH
21808: DOUBLE
21809: LD_VAR 0 15
21813: DEC
21814: ST_TO_ADDR
21815: LD_INT 5
21817: PUSH
21818: FOR_TO
21819: IFFALSE 21933
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21821: LD_ADDR_VAR 0 11
21825: PUSH
21826: LD_VAR 0 13
21830: PPUSH
21831: CALL_OW 250
21835: PPUSH
21836: LD_VAR 0 10
21840: PPUSH
21841: LD_INT 2
21843: PPUSH
21844: CALL_OW 272
21848: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21849: LD_ADDR_VAR 0 12
21853: PUSH
21854: LD_VAR 0 13
21858: PPUSH
21859: CALL_OW 251
21863: PPUSH
21864: LD_VAR 0 10
21868: PPUSH
21869: LD_INT 2
21871: PPUSH
21872: CALL_OW 273
21876: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21877: LD_VAR 0 11
21881: PPUSH
21882: LD_VAR 0 12
21886: PPUSH
21887: CALL_OW 488
21891: PUSH
21892: LD_VAR 0 11
21896: PPUSH
21897: LD_VAR 0 12
21901: PPUSH
21902: CALL_OW 428
21906: NOT
21907: AND
21908: IFFALSE 21931
// begin ComMoveXY ( tmp , _x , _y ) ;
21910: LD_VAR 0 13
21914: PPUSH
21915: LD_VAR 0 11
21919: PPUSH
21920: LD_VAR 0 12
21924: PPUSH
21925: CALL_OW 111
// break ;
21929: GO 21933
// end ; end ;
21931: GO 21818
21933: POP
21934: POP
// end ; end ;
21935: GO 21260
21937: POP
21938: POP
// end ;
21939: LD_VAR 0 8
21943: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21944: LD_INT 0
21946: PPUSH
// result := true ;
21947: LD_ADDR_VAR 0 3
21951: PUSH
21952: LD_INT 1
21954: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21955: LD_VAR 0 2
21959: PUSH
21960: LD_INT 24
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21974
21966: LD_INT 33
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 21999
21974: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21975: LD_ADDR_VAR 0 3
21979: PUSH
21980: LD_INT 32
21982: PPUSH
21983: LD_VAR 0 1
21987: PPUSH
21988: CALL_OW 321
21992: PUSH
21993: LD_INT 2
21995: EQUAL
21996: ST_TO_ADDR
21997: GO 22315
21999: LD_INT 20
22001: DOUBLE
22002: EQUAL
22003: IFTRUE 22007
22005: GO 22032
22007: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_INT 6
22015: PPUSH
22016: LD_VAR 0 1
22020: PPUSH
22021: CALL_OW 321
22025: PUSH
22026: LD_INT 2
22028: EQUAL
22029: ST_TO_ADDR
22030: GO 22315
22032: LD_INT 22
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22046
22038: LD_INT 36
22040: DOUBLE
22041: EQUAL
22042: IFTRUE 22046
22044: GO 22071
22046: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22047: LD_ADDR_VAR 0 3
22051: PUSH
22052: LD_INT 15
22054: PPUSH
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 321
22064: PUSH
22065: LD_INT 2
22067: EQUAL
22068: ST_TO_ADDR
22069: GO 22315
22071: LD_INT 30
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22104
22079: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22080: LD_ADDR_VAR 0 3
22084: PUSH
22085: LD_INT 20
22087: PPUSH
22088: LD_VAR 0 1
22092: PPUSH
22093: CALL_OW 321
22097: PUSH
22098: LD_INT 2
22100: EQUAL
22101: ST_TO_ADDR
22102: GO 22315
22104: LD_INT 28
22106: DOUBLE
22107: EQUAL
22108: IFTRUE 22118
22110: LD_INT 21
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22143
22118: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22119: LD_ADDR_VAR 0 3
22123: PUSH
22124: LD_INT 21
22126: PPUSH
22127: LD_VAR 0 1
22131: PPUSH
22132: CALL_OW 321
22136: PUSH
22137: LD_INT 2
22139: EQUAL
22140: ST_TO_ADDR
22141: GO 22315
22143: LD_INT 16
22145: DOUBLE
22146: EQUAL
22147: IFTRUE 22151
22149: GO 22176
22151: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: LD_INT 84
22159: PPUSH
22160: LD_VAR 0 1
22164: PPUSH
22165: CALL_OW 321
22169: PUSH
22170: LD_INT 2
22172: EQUAL
22173: ST_TO_ADDR
22174: GO 22315
22176: LD_INT 19
22178: DOUBLE
22179: EQUAL
22180: IFTRUE 22190
22182: LD_INT 23
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22215
22190: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22191: LD_ADDR_VAR 0 3
22195: PUSH
22196: LD_INT 83
22198: PPUSH
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 321
22208: PUSH
22209: LD_INT 2
22211: EQUAL
22212: ST_TO_ADDR
22213: GO 22315
22215: LD_INT 17
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22248
22223: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22224: LD_ADDR_VAR 0 3
22228: PUSH
22229: LD_INT 39
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 321
22241: PUSH
22242: LD_INT 2
22244: EQUAL
22245: ST_TO_ADDR
22246: GO 22315
22248: LD_INT 18
22250: DOUBLE
22251: EQUAL
22252: IFTRUE 22256
22254: GO 22281
22256: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22257: LD_ADDR_VAR 0 3
22261: PUSH
22262: LD_INT 40
22264: PPUSH
22265: LD_VAR 0 1
22269: PPUSH
22270: CALL_OW 321
22274: PUSH
22275: LD_INT 2
22277: EQUAL
22278: ST_TO_ADDR
22279: GO 22315
22281: LD_INT 27
22283: DOUBLE
22284: EQUAL
22285: IFTRUE 22289
22287: GO 22314
22289: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22290: LD_ADDR_VAR 0 3
22294: PUSH
22295: LD_INT 35
22297: PPUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 321
22307: PUSH
22308: LD_INT 2
22310: EQUAL
22311: ST_TO_ADDR
22312: GO 22315
22314: POP
// end ;
22315: LD_VAR 0 3
22319: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22320: LD_INT 0
22322: PPUSH
22323: PPUSH
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
22329: PPUSH
22330: PPUSH
22331: PPUSH
22332: PPUSH
// result := false ;
22333: LD_ADDR_VAR 0 6
22337: PUSH
22338: LD_INT 0
22340: ST_TO_ADDR
// if btype = b_depot then
22341: LD_VAR 0 2
22345: PUSH
22346: LD_INT 0
22348: EQUAL
22349: IFFALSE 22361
// begin result := true ;
22351: LD_ADDR_VAR 0 6
22355: PUSH
22356: LD_INT 1
22358: ST_TO_ADDR
// exit ;
22359: GO 23187
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22361: LD_VAR 0 1
22365: NOT
22366: PUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 266
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: IN
22387: NOT
22388: OR
22389: PUSH
22390: LD_VAR 0 2
22394: NOT
22395: OR
22396: PUSH
22397: LD_VAR 0 5
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 3
22413: PUSH
22414: LD_INT 4
22416: PUSH
22417: LD_INT 5
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: IN
22428: NOT
22429: OR
22430: PUSH
22431: LD_VAR 0 3
22435: PPUSH
22436: LD_VAR 0 4
22440: PPUSH
22441: CALL_OW 488
22445: NOT
22446: OR
22447: IFFALSE 22451
// exit ;
22449: GO 23187
// side := GetSide ( depot ) ;
22451: LD_ADDR_VAR 0 9
22455: PUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 255
22465: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22466: LD_VAR 0 9
22470: PPUSH
22471: LD_VAR 0 2
22475: PPUSH
22476: CALL 21944 0 2
22480: NOT
22481: IFFALSE 22485
// exit ;
22483: GO 23187
// pom := GetBase ( depot ) ;
22485: LD_ADDR_VAR 0 10
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 274
22499: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22500: LD_ADDR_VAR 0 11
22504: PUSH
22505: LD_VAR 0 2
22509: PPUSH
22510: LD_VAR 0 1
22514: PPUSH
22515: CALL_OW 248
22519: PPUSH
22520: CALL_OW 450
22524: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22525: LD_VAR 0 10
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 275
22537: PUSH
22538: LD_VAR 0 11
22542: PUSH
22543: LD_INT 1
22545: ARRAY
22546: GREATEREQUAL
22547: PUSH
22548: LD_VAR 0 10
22552: PPUSH
22553: LD_INT 2
22555: PPUSH
22556: CALL_OW 275
22560: PUSH
22561: LD_VAR 0 11
22565: PUSH
22566: LD_INT 2
22568: ARRAY
22569: GREATEREQUAL
22570: AND
22571: PUSH
22572: LD_VAR 0 10
22576: PPUSH
22577: LD_INT 3
22579: PPUSH
22580: CALL_OW 275
22584: PUSH
22585: LD_VAR 0 11
22589: PUSH
22590: LD_INT 3
22592: ARRAY
22593: GREATEREQUAL
22594: AND
22595: NOT
22596: IFFALSE 22600
// exit ;
22598: GO 23187
// if GetBType ( depot ) = b_depot then
22600: LD_VAR 0 1
22604: PPUSH
22605: CALL_OW 266
22609: PUSH
22610: LD_INT 0
22612: EQUAL
22613: IFFALSE 22625
// dist := 28 else
22615: LD_ADDR_VAR 0 14
22619: PUSH
22620: LD_INT 28
22622: ST_TO_ADDR
22623: GO 22633
// dist := 36 ;
22625: LD_ADDR_VAR 0 14
22629: PUSH
22630: LD_INT 36
22632: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: LD_VAR 0 4
22647: PPUSH
22648: CALL_OW 297
22652: PUSH
22653: LD_VAR 0 14
22657: GREATER
22658: IFFALSE 22662
// exit ;
22660: GO 23187
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22662: LD_ADDR_VAR 0 12
22666: PUSH
22667: LD_VAR 0 2
22671: PPUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: LD_VAR 0 4
22681: PPUSH
22682: LD_VAR 0 5
22686: PPUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 248
22696: PPUSH
22697: LD_INT 0
22699: PPUSH
22700: CALL 23192 0 6
22704: ST_TO_ADDR
// if not hexes then
22705: LD_VAR 0 12
22709: NOT
22710: IFFALSE 22714
// exit ;
22712: GO 23187
// hex := GetHexInfo ( x , y ) ;
22714: LD_ADDR_VAR 0 15
22718: PUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: LD_VAR 0 4
22728: PPUSH
22729: CALL_OW 546
22733: ST_TO_ADDR
// if hex [ 1 ] then
22734: LD_VAR 0 15
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: IFFALSE 22746
// exit ;
22744: GO 23187
// height := hex [ 2 ] ;
22746: LD_ADDR_VAR 0 13
22750: PUSH
22751: LD_VAR 0 15
22755: PUSH
22756: LD_INT 2
22758: ARRAY
22759: ST_TO_ADDR
// for i = 1 to hexes do
22760: LD_ADDR_VAR 0 7
22764: PUSH
22765: DOUBLE
22766: LD_INT 1
22768: DEC
22769: ST_TO_ADDR
22770: LD_VAR 0 12
22774: PUSH
22775: FOR_TO
22776: IFFALSE 23106
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22778: LD_VAR 0 12
22782: PUSH
22783: LD_VAR 0 7
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: LD_VAR 0 12
22797: PUSH
22798: LD_VAR 0 7
22802: ARRAY
22803: PUSH
22804: LD_INT 2
22806: ARRAY
22807: PPUSH
22808: CALL_OW 488
22812: NOT
22813: PUSH
22814: LD_VAR 0 12
22818: PUSH
22819: LD_VAR 0 7
22823: ARRAY
22824: PUSH
22825: LD_INT 1
22827: ARRAY
22828: PPUSH
22829: LD_VAR 0 12
22833: PUSH
22834: LD_VAR 0 7
22838: ARRAY
22839: PUSH
22840: LD_INT 2
22842: ARRAY
22843: PPUSH
22844: CALL_OW 428
22848: PUSH
22849: LD_INT 0
22851: GREATER
22852: OR
22853: PUSH
22854: LD_VAR 0 12
22858: PUSH
22859: LD_VAR 0 7
22863: ARRAY
22864: PUSH
22865: LD_INT 1
22867: ARRAY
22868: PPUSH
22869: LD_VAR 0 12
22873: PUSH
22874: LD_VAR 0 7
22878: ARRAY
22879: PUSH
22880: LD_INT 2
22882: ARRAY
22883: PPUSH
22884: CALL_OW 351
22888: OR
22889: IFFALSE 22895
// exit ;
22891: POP
22892: POP
22893: GO 23187
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22895: LD_ADDR_VAR 0 8
22899: PUSH
22900: LD_VAR 0 12
22904: PUSH
22905: LD_VAR 0 7
22909: ARRAY
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: LD_VAR 0 12
22919: PUSH
22920: LD_VAR 0 7
22924: ARRAY
22925: PUSH
22926: LD_INT 2
22928: ARRAY
22929: PPUSH
22930: CALL_OW 546
22934: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22935: LD_VAR 0 8
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: PUSH
22944: LD_VAR 0 8
22948: PUSH
22949: LD_INT 2
22951: ARRAY
22952: PUSH
22953: LD_VAR 0 13
22957: PUSH
22958: LD_INT 2
22960: PLUS
22961: GREATER
22962: OR
22963: PUSH
22964: LD_VAR 0 8
22968: PUSH
22969: LD_INT 2
22971: ARRAY
22972: PUSH
22973: LD_VAR 0 13
22977: PUSH
22978: LD_INT 2
22980: MINUS
22981: LESS
22982: OR
22983: PUSH
22984: LD_VAR 0 8
22988: PUSH
22989: LD_INT 3
22991: ARRAY
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 8
22998: PUSH
22999: LD_INT 9
23001: PUSH
23002: LD_INT 10
23004: PUSH
23005: LD_INT 11
23007: PUSH
23008: LD_INT 12
23010: PUSH
23011: LD_INT 13
23013: PUSH
23014: LD_INT 16
23016: PUSH
23017: LD_INT 17
23019: PUSH
23020: LD_INT 18
23022: PUSH
23023: LD_INT 19
23025: PUSH
23026: LD_INT 20
23028: PUSH
23029: LD_INT 21
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: IN
23047: NOT
23048: OR
23049: PUSH
23050: LD_VAR 0 8
23054: PUSH
23055: LD_INT 5
23057: ARRAY
23058: NOT
23059: OR
23060: PUSH
23061: LD_VAR 0 8
23065: PUSH
23066: LD_INT 6
23068: ARRAY
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: LD_INT 7
23078: PUSH
23079: LD_INT 9
23081: PUSH
23082: LD_INT 10
23084: PUSH
23085: LD_INT 11
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: IN
23096: NOT
23097: OR
23098: IFFALSE 23104
// exit ;
23100: POP
23101: POP
23102: GO 23187
// end ;
23104: GO 22775
23106: POP
23107: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23108: LD_VAR 0 9
23112: PPUSH
23113: LD_VAR 0 3
23117: PPUSH
23118: LD_VAR 0 4
23122: PPUSH
23123: LD_INT 20
23125: PPUSH
23126: CALL 15110 0 4
23130: PUSH
23131: LD_INT 4
23133: ARRAY
23134: IFFALSE 23138
// exit ;
23136: GO 23187
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23138: LD_VAR 0 2
23142: PUSH
23143: LD_INT 29
23145: PUSH
23146: LD_INT 30
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: IN
23153: PUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_VAR 0 4
23163: PPUSH
23164: LD_VAR 0 9
23168: PPUSH
23169: CALL_OW 440
23173: NOT
23174: AND
23175: IFFALSE 23179
// exit ;
23177: GO 23187
// result := true ;
23179: LD_ADDR_VAR 0 6
23183: PUSH
23184: LD_INT 1
23186: ST_TO_ADDR
// end ;
23187: LD_VAR 0 6
23191: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23192: LD_INT 0
23194: PPUSH
23195: PPUSH
23196: PPUSH
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
23201: PPUSH
23202: PPUSH
23203: PPUSH
23204: PPUSH
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
23210: PPUSH
23211: PPUSH
23212: PPUSH
23213: PPUSH
23214: PPUSH
23215: PPUSH
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
23220: PPUSH
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
23233: PPUSH
23234: PPUSH
23235: PPUSH
23236: PPUSH
23237: PPUSH
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
// result = [ ] ;
23252: LD_ADDR_VAR 0 7
23256: PUSH
23257: EMPTY
23258: ST_TO_ADDR
// temp_list = [ ] ;
23259: LD_ADDR_VAR 0 9
23263: PUSH
23264: EMPTY
23265: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23266: LD_VAR 0 4
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 4
23285: PUSH
23286: LD_INT 5
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: IN
23297: NOT
23298: PUSH
23299: LD_VAR 0 1
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: IN
23314: PUSH
23315: LD_VAR 0 5
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: IN
23334: NOT
23335: AND
23336: OR
23337: IFFALSE 23341
// exit ;
23339: GO 41732
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23341: LD_VAR 0 1
23345: PUSH
23346: LD_INT 6
23348: PUSH
23349: LD_INT 7
23351: PUSH
23352: LD_INT 8
23354: PUSH
23355: LD_INT 13
23357: PUSH
23358: LD_INT 12
23360: PUSH
23361: LD_INT 15
23363: PUSH
23364: LD_INT 11
23366: PUSH
23367: LD_INT 14
23369: PUSH
23370: LD_INT 10
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: IN
23384: IFFALSE 23394
// btype = b_lab ;
23386: LD_ADDR_VAR 0 1
23390: PUSH
23391: LD_INT 6
23393: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23394: LD_VAR 0 6
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: IN
23413: NOT
23414: PUSH
23415: LD_VAR 0 1
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 6
23434: PUSH
23435: LD_INT 36
23437: PUSH
23438: LD_INT 4
23440: PUSH
23441: LD_INT 5
23443: PUSH
23444: LD_INT 31
23446: PUSH
23447: LD_INT 32
23449: PUSH
23450: LD_INT 33
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: IN
23466: NOT
23467: PUSH
23468: LD_VAR 0 6
23472: PUSH
23473: LD_INT 1
23475: EQUAL
23476: AND
23477: OR
23478: PUSH
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: IN
23494: NOT
23495: PUSH
23496: LD_VAR 0 6
23500: PUSH
23501: LD_INT 2
23503: EQUAL
23504: AND
23505: OR
23506: IFFALSE 23516
// mode = 0 ;
23508: LD_ADDR_VAR 0 6
23512: PUSH
23513: LD_INT 0
23515: ST_TO_ADDR
// case mode of 0 :
23516: LD_VAR 0 6
23520: PUSH
23521: LD_INT 0
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 34982
23529: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23530: LD_ADDR_VAR 0 11
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: LD_INT 2
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 3
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 3
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23723: LD_ADDR_VAR 0 12
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 3
23880: NEG
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 3
23891: NEG
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23919: LD_ADDR_VAR 0 13
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 2
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: NEG
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: NEG
24055: PUSH
24056: LD_INT 2
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: NEG
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 3
24078: NEG
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 3
24090: NEG
24091: PUSH
24092: LD_INT 3
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24118: LD_ADDR_VAR 0 14
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: LD_INT 3
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: LD_INT 3
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24314: LD_ADDR_VAR 0 15
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: NEG
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 3
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24507: LD_ADDR_VAR 0 16
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: NEG
24643: PUSH
24644: LD_INT 2
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 3
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24700: LD_ADDR_VAR 0 17
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 2
24876: NEG
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: NEG
24888: PUSH
24889: LD_INT 1
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24930: LD_ADDR_VAR 0 18
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 1
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: NEG
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: NEG
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25160: LD_ADDR_VAR 0 19
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 2
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25390: LD_ADDR_VAR 0 20
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25620: LD_ADDR_VAR 0 21
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 2
25807: NEG
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25850: LD_ADDR_VAR 0 22
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 2
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26080: LD_ADDR_VAR 0 23
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 2
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 3
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: LD_INT 3
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26360: LD_ADDR_VAR 0 24
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26636: LD_ADDR_VAR 0 25
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: NEG
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26910: LD_ADDR_VAR 0 26
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 2
27152: NEG
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27186: LD_ADDR_VAR 0 27
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 2
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 2
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 2
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 3
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27466: LD_ADDR_VAR 0 28
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: NEG
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 3
27713: NEG
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27748: LD_ADDR_VAR 0 29
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 2
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 2
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: LD_INT 3
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: NEG
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28027: LD_ADDR_VAR 0 30
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: LD_INT 3
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 3
28270: NEG
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28305: LD_ADDR_VAR 0 31
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 3
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 3
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 3
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 3
28548: NEG
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28583: LD_ADDR_VAR 0 32
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 3
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 3
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28861: LD_ADDR_VAR 0 33
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: LD_INT 1
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 3
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 3
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: LD_INT 2
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: NEG
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29140: LD_ADDR_VAR 0 34
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: NEG
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 3
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29420: LD_ADDR_VAR 0 35
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: NEG
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29532: LD_ADDR_VAR 0 36
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 2
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29644: LD_ADDR_VAR 0 37
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29756: LD_ADDR_VAR 0 38
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29868: LD_ADDR_VAR 0 39
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29980: LD_ADDR_VAR 0 40
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30092: LD_ADDR_VAR 0 41
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 2
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 2
30216: PUSH
30217: LD_INT 2
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: NEG
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 2
30270: NEG
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: LD_INT 3
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 3
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30442: LD_ADDR_VAR 0 42
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 2
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 2
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 3
30751: NEG
30752: PUSH
30753: LD_INT 3
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30792: LD_ADDR_VAR 0 43
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 1
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: NEG
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: NEG
30982: PUSH
30983: LD_INT 3
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 3
31088: NEG
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31140: LD_ADDR_VAR 0 44
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: LD_INT 3
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31490: LD_ADDR_VAR 0 45
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: LD_INT 2
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 3
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: LD_INT 3
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: NEG
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31840: LD_ADDR_VAR 0 46
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: LD_INT 3
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: LD_INT 2
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: NEG
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32188: LD_ADDR_VAR 0 47
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32339: LD_ADDR_VAR 0 48
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32486: LD_ADDR_VAR 0 49
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32630: LD_ADDR_VAR 0 50
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32774: LD_ADDR_VAR 0 51
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32921: LD_ADDR_VAR 0 52
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33072: LD_ADDR_VAR 0 53
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: NEG
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33302: LD_ADDR_VAR 0 54
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33532: LD_ADDR_VAR 0 55
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33762: LD_ADDR_VAR 0 56
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 2
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33992: LD_ADDR_VAR 0 57
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: NEG
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34222: LD_ADDR_VAR 0 58
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34452: LD_ADDR_VAR 0 59
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34540: LD_ADDR_VAR 0 60
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34628: LD_ADDR_VAR 0 61
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34716: LD_ADDR_VAR 0 62
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34804: LD_ADDR_VAR 0 63
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34892: LD_ADDR_VAR 0 64
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
// end ; 1 :
34980: GO 40877
34982: LD_INT 1
34984: DOUBLE
34985: EQUAL
34986: IFTRUE 34990
34988: GO 37613
34990: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34991: LD_ADDR_VAR 0 11
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 3
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 3
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35035: LD_ADDR_VAR 0 12
35039: PUSH
35040: LD_INT 2
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35076: LD_ADDR_VAR 0 13
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35116: LD_ADDR_VAR 0 14
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35157: LD_ADDR_VAR 0 15
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 3
35175: NEG
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 3
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35201: LD_ADDR_VAR 0 16
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 3
35220: NEG
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35247: LD_ADDR_VAR 0 17
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35291: LD_ADDR_VAR 0 18
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35332: LD_ADDR_VAR 0 19
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 3
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35372: LD_ADDR_VAR 0 20
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35413: LD_ADDR_VAR 0 21
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 3
35431: NEG
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35457: LD_ADDR_VAR 0 22
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: LD_INT 3
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: NEG
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: LD_INT 3
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35503: LD_ADDR_VAR 0 23
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 3
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 4
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35547: LD_ADDR_VAR 0 24
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35588: LD_ADDR_VAR 0 25
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 4
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 3
35615: PUSH
35616: LD_INT 4
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35628: LD_ADDR_VAR 0 26
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 3
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 4
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 3
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35669: LD_ADDR_VAR 0 27
35673: PUSH
35674: LD_INT 3
35676: NEG
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: NEG
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 4
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35713: LD_ADDR_VAR 0 28
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: LD_INT 3
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 4
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35759: LD_ADDR_VAR 0 29
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 3
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 3
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 4
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 4
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 3
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 5
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 5
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 4
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: LD_INT 6
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 6
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 5
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35914: LD_ADDR_VAR 0 30
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 4
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 4
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 5
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 5
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 6
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 6
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36057: LD_ADDR_VAR 0 31
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 3
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 4
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 4
36104: PUSH
36105: LD_INT 4
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: LD_INT 4
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 5
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 5
36134: PUSH
36135: LD_INT 5
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 4
36144: PUSH
36145: LD_INT 5
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 6
36154: PUSH
36155: LD_INT 5
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 6
36164: PUSH
36165: LD_INT 6
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 5
36174: PUSH
36175: LD_INT 6
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36196: LD_ADDR_VAR 0 32
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 4
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 4
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 5
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 6
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 6
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 5
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36339: LD_ADDR_VAR 0 33
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 3
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 3
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 4
36391: NEG
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 4
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 4
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 5
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 5
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 5
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 6
36459: NEG
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 6
36470: NEG
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36494: LD_ADDR_VAR 0 34
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 3
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 3
36513: NEG
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: LD_INT 3
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 3
36537: NEG
36538: PUSH
36539: LD_INT 4
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 4
36549: NEG
36550: PUSH
36551: LD_INT 3
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 4
36561: NEG
36562: PUSH
36563: LD_INT 4
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 4
36573: NEG
36574: PUSH
36575: LD_INT 5
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 5
36585: NEG
36586: PUSH
36587: LD_INT 4
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 5
36597: NEG
36598: PUSH
36599: LD_INT 5
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 5
36609: NEG
36610: PUSH
36611: LD_INT 6
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 6
36621: NEG
36622: PUSH
36623: LD_INT 5
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 6
36633: NEG
36634: PUSH
36635: LD_INT 6
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36657: LD_ADDR_VAR 0 41
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: LD_INT 3
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36701: LD_ADDR_VAR 0 42
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36742: LD_ADDR_VAR 0 43
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36782: LD_ADDR_VAR 0 44
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 3
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36823: LD_ADDR_VAR 0 45
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 3
36852: NEG
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36867: LD_ADDR_VAR 0 46
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36913: LD_ADDR_VAR 0 47
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 3
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36946: LD_ADDR_VAR 0 48
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36977: LD_ADDR_VAR 0 49
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37006: LD_ADDR_VAR 0 50
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37035: LD_ADDR_VAR 0 51
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37066: LD_ADDR_VAR 0 52
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37099: LD_ADDR_VAR 0 53
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 3
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37143: LD_ADDR_VAR 0 54
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 3
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37184: LD_ADDR_VAR 0 55
37188: PUSH
37189: LD_INT 3
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37224: LD_ADDR_VAR 0 56
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37265: LD_ADDR_VAR 0 57
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37309: LD_ADDR_VAR 0 58
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 3
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37355: LD_ADDR_VAR 0 59
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37399: LD_ADDR_VAR 0 60
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37440: LD_ADDR_VAR 0 61
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37480: LD_ADDR_VAR 0 62
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37521: LD_ADDR_VAR 0 63
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37565: LD_ADDR_VAR 0 64
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 2
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// end ; 2 :
37611: GO 40877
37613: LD_INT 2
37615: DOUBLE
37616: EQUAL
37617: IFTRUE 37621
37619: GO 40876
37621: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37622: LD_ADDR_VAR 0 29
37626: PUSH
37627: LD_INT 4
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 4
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 5
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 5
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 4
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 3
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 5
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 3
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 4
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 4
37752: PUSH
37753: LD_INT 4
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: LD_INT 4
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 4
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 4
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 4
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 5
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 5
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 5
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 3
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 4
37961: NEG
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 4
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 4
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 4
38007: NEG
38008: PUSH
38009: LD_INT 4
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 4
38019: NEG
38020: PUSH
38021: LD_INT 5
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: LD_INT 4
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 4
38055: NEG
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 5
38067: NEG
38068: PUSH
38069: LD_INT 4
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 5
38079: NEG
38080: PUSH
38081: LD_INT 5
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 3
38091: NEG
38092: PUSH
38093: LD_INT 5
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 5
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38160: LD_ADDR_VAR 0 30
38164: PUSH
38165: LD_INT 4
38167: PUSH
38168: LD_INT 4
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 4
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 5
38197: PUSH
38198: LD_INT 5
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 4
38207: PUSH
38208: LD_INT 5
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: LD_INT 4
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 5
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: LD_INT 5
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 3
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: LD_INT 3
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: LD_INT 4
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 4
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 4
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: NEG
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 4
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 4
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 4
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 5
38406: NEG
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 5
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 5
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: LD_INT 4
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 4
38512: NEG
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 4
38524: NEG
38525: PUSH
38526: LD_INT 4
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: LD_INT 4
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 4
38548: NEG
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: LD_INT 4
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 5
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 4
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 3
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 4
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 5
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: LD_INT 5
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38707: LD_ADDR_VAR 0 31
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 4
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 5
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 5
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 4
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 5
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: NEG
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 3
38852: NEG
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 4
38863: NEG
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: NEG
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 4
38886: NEG
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 4
38909: NEG
38910: PUSH
38911: LD_INT 4
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 4
38921: NEG
38922: PUSH
38923: LD_INT 5
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: LD_INT 4
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: NEG
38946: PUSH
38947: LD_INT 3
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 4
38957: NEG
38958: PUSH
38959: LD_INT 3
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 5
38969: NEG
38970: PUSH
38971: LD_INT 4
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 5
38981: NEG
38982: PUSH
38983: LD_INT 5
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: LD_INT 5
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 5
39005: NEG
39006: PUSH
39007: LD_INT 3
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 4
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 3
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 4
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: LD_INT 4
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 4
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 4
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 5
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 5
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 3
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 5
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39257: LD_ADDR_VAR 0 32
39261: PUSH
39262: LD_INT 4
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 4
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 4
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 5
39320: NEG
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 5
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 5
39343: NEG
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 3
39366: NEG
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: NEG
39379: PUSH
39380: LD_INT 4
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 3
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 4
39426: NEG
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 4
39438: NEG
39439: PUSH
39440: LD_INT 4
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: LD_INT 4
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 4
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 4
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 5
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 4
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: LD_INT 4
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 5
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 5
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 4
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 4
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 4
39669: PUSH
39670: LD_INT 4
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 4
39679: PUSH
39680: LD_INT 3
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 5
39689: PUSH
39690: LD_INT 4
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 5
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 4
39709: PUSH
39710: LD_INT 5
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 3
39719: PUSH
39720: LD_INT 4
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 5
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 5
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39804: LD_ADDR_VAR 0 33
39808: PUSH
39809: LD_INT 4
39811: NEG
39812: PUSH
39813: LD_INT 4
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 4
39823: NEG
39824: PUSH
39825: LD_INT 5
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 4
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 3
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 4
39859: NEG
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 5
39871: NEG
39872: PUSH
39873: LD_INT 4
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 5
39883: NEG
39884: PUSH
39885: LD_INT 5
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: LD_INT 5
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 5
39907: NEG
39908: PUSH
39909: LD_INT 3
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 3
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 4
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 3
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 4
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 4
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 4
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 4
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 5
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 4
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 3
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 3
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 5
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 4
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 4
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: LD_INT 4
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 4
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 4
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 4
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 5
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 5
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: LD_INT 4
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 5
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 3
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40342: LD_ADDR_VAR 0 34
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 4
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 5
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 4
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 3
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 3
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 4
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: LD_INT 5
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: LD_INT 5
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 4
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 4
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: LD_INT 2
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 4
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 4
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 4
40554: PUSH
40555: LD_INT 3
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 5
40564: PUSH
40565: LD_INT 4
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 5
40574: PUSH
40575: LD_INT 5
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 4
40584: PUSH
40585: LD_INT 5
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: LD_INT 3
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 5
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: LD_INT 5
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 3
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 3
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 4
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 4
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: LD_INT 4
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 4
40727: NEG
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 4
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 5
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 5
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 5
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// end ; end ;
40874: GO 40877
40876: POP
// case btype of b_depot , b_warehouse :
40877: LD_VAR 0 1
40881: PUSH
40882: LD_INT 0
40884: DOUBLE
40885: EQUAL
40886: IFTRUE 40896
40888: LD_INT 1
40890: DOUBLE
40891: EQUAL
40892: IFTRUE 40896
40894: GO 41097
40896: POP
// case nation of nation_american :
40897: LD_VAR 0 5
40901: PUSH
40902: LD_INT 1
40904: DOUBLE
40905: EQUAL
40906: IFTRUE 40910
40908: GO 40966
40910: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40911: LD_ADDR_VAR 0 9
40915: PUSH
40916: LD_VAR 0 11
40920: PUSH
40921: LD_VAR 0 12
40925: PUSH
40926: LD_VAR 0 13
40930: PUSH
40931: LD_VAR 0 14
40935: PUSH
40936: LD_VAR 0 15
40940: PUSH
40941: LD_VAR 0 16
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: PUSH
40954: LD_VAR 0 4
40958: PUSH
40959: LD_INT 1
40961: PLUS
40962: ARRAY
40963: ST_TO_ADDR
40964: GO 41095
40966: LD_INT 2
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41030
40974: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 17
40984: PUSH
40985: LD_VAR 0 18
40989: PUSH
40990: LD_VAR 0 19
40994: PUSH
40995: LD_VAR 0 20
40999: PUSH
41000: LD_VAR 0 21
41004: PUSH
41005: LD_VAR 0 22
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: LD_VAR 0 4
41022: PUSH
41023: LD_INT 1
41025: PLUS
41026: ARRAY
41027: ST_TO_ADDR
41028: GO 41095
41030: LD_INT 3
41032: DOUBLE
41033: EQUAL
41034: IFTRUE 41038
41036: GO 41094
41038: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41039: LD_ADDR_VAR 0 9
41043: PUSH
41044: LD_VAR 0 23
41048: PUSH
41049: LD_VAR 0 24
41053: PUSH
41054: LD_VAR 0 25
41058: PUSH
41059: LD_VAR 0 26
41063: PUSH
41064: LD_VAR 0 27
41068: PUSH
41069: LD_VAR 0 28
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: PUSH
41082: LD_VAR 0 4
41086: PUSH
41087: LD_INT 1
41089: PLUS
41090: ARRAY
41091: ST_TO_ADDR
41092: GO 41095
41094: POP
41095: GO 41650
41097: LD_INT 2
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41111
41103: LD_INT 3
41105: DOUBLE
41106: EQUAL
41107: IFTRUE 41111
41109: GO 41167
41111: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41112: LD_ADDR_VAR 0 9
41116: PUSH
41117: LD_VAR 0 29
41121: PUSH
41122: LD_VAR 0 30
41126: PUSH
41127: LD_VAR 0 31
41131: PUSH
41132: LD_VAR 0 32
41136: PUSH
41137: LD_VAR 0 33
41141: PUSH
41142: LD_VAR 0 34
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: LD_VAR 0 4
41159: PUSH
41160: LD_INT 1
41162: PLUS
41163: ARRAY
41164: ST_TO_ADDR
41165: GO 41650
41167: LD_INT 16
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41229
41173: LD_INT 17
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41229
41179: LD_INT 18
41181: DOUBLE
41182: EQUAL
41183: IFTRUE 41229
41185: LD_INT 19
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41229
41191: LD_INT 22
41193: DOUBLE
41194: EQUAL
41195: IFTRUE 41229
41197: LD_INT 20
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41229
41203: LD_INT 21
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41229
41209: LD_INT 23
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41229
41215: LD_INT 24
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41229
41221: LD_INT 25
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41285
41229: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41230: LD_ADDR_VAR 0 9
41234: PUSH
41235: LD_VAR 0 35
41239: PUSH
41240: LD_VAR 0 36
41244: PUSH
41245: LD_VAR 0 37
41249: PUSH
41250: LD_VAR 0 38
41254: PUSH
41255: LD_VAR 0 39
41259: PUSH
41260: LD_VAR 0 40
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: LD_VAR 0 4
41277: PUSH
41278: LD_INT 1
41280: PLUS
41281: ARRAY
41282: ST_TO_ADDR
41283: GO 41650
41285: LD_INT 6
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41341
41291: LD_INT 7
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41341
41297: LD_INT 8
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41341
41303: LD_INT 13
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41341
41309: LD_INT 12
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41341
41315: LD_INT 15
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41341
41321: LD_INT 11
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41341
41327: LD_INT 14
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41341
41333: LD_INT 10
41335: DOUBLE
41336: EQUAL
41337: IFTRUE 41341
41339: GO 41397
41341: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41342: LD_ADDR_VAR 0 9
41346: PUSH
41347: LD_VAR 0 41
41351: PUSH
41352: LD_VAR 0 42
41356: PUSH
41357: LD_VAR 0 43
41361: PUSH
41362: LD_VAR 0 44
41366: PUSH
41367: LD_VAR 0 45
41371: PUSH
41372: LD_VAR 0 46
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: PUSH
41385: LD_VAR 0 4
41389: PUSH
41390: LD_INT 1
41392: PLUS
41393: ARRAY
41394: ST_TO_ADDR
41395: GO 41650
41397: LD_INT 36
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41405
41403: GO 41461
41405: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41406: LD_ADDR_VAR 0 9
41410: PUSH
41411: LD_VAR 0 47
41415: PUSH
41416: LD_VAR 0 48
41420: PUSH
41421: LD_VAR 0 49
41425: PUSH
41426: LD_VAR 0 50
41430: PUSH
41431: LD_VAR 0 51
41435: PUSH
41436: LD_VAR 0 52
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: PUSH
41449: LD_VAR 0 4
41453: PUSH
41454: LD_INT 1
41456: PLUS
41457: ARRAY
41458: ST_TO_ADDR
41459: GO 41650
41461: LD_INT 4
41463: DOUBLE
41464: EQUAL
41465: IFTRUE 41487
41467: LD_INT 5
41469: DOUBLE
41470: EQUAL
41471: IFTRUE 41487
41473: LD_INT 34
41475: DOUBLE
41476: EQUAL
41477: IFTRUE 41487
41479: LD_INT 37
41481: DOUBLE
41482: EQUAL
41483: IFTRUE 41487
41485: GO 41543
41487: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41488: LD_ADDR_VAR 0 9
41492: PUSH
41493: LD_VAR 0 53
41497: PUSH
41498: LD_VAR 0 54
41502: PUSH
41503: LD_VAR 0 55
41507: PUSH
41508: LD_VAR 0 56
41512: PUSH
41513: LD_VAR 0 57
41517: PUSH
41518: LD_VAR 0 58
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: PUSH
41531: LD_VAR 0 4
41535: PUSH
41536: LD_INT 1
41538: PLUS
41539: ARRAY
41540: ST_TO_ADDR
41541: GO 41650
41543: LD_INT 31
41545: DOUBLE
41546: EQUAL
41547: IFTRUE 41593
41549: LD_INT 32
41551: DOUBLE
41552: EQUAL
41553: IFTRUE 41593
41555: LD_INT 33
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41593
41561: LD_INT 27
41563: DOUBLE
41564: EQUAL
41565: IFTRUE 41593
41567: LD_INT 26
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41593
41573: LD_INT 28
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41593
41579: LD_INT 29
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41593
41585: LD_INT 30
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 41649
41593: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41594: LD_ADDR_VAR 0 9
41598: PUSH
41599: LD_VAR 0 59
41603: PUSH
41604: LD_VAR 0 60
41608: PUSH
41609: LD_VAR 0 61
41613: PUSH
41614: LD_VAR 0 62
41618: PUSH
41619: LD_VAR 0 63
41623: PUSH
41624: LD_VAR 0 64
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: LD_VAR 0 4
41641: PUSH
41642: LD_INT 1
41644: PLUS
41645: ARRAY
41646: ST_TO_ADDR
41647: GO 41650
41649: POP
// temp_list2 = [ ] ;
41650: LD_ADDR_VAR 0 10
41654: PUSH
41655: EMPTY
41656: ST_TO_ADDR
// for i in temp_list do
41657: LD_ADDR_VAR 0 8
41661: PUSH
41662: LD_VAR 0 9
41666: PUSH
41667: FOR_IN
41668: IFFALSE 41720
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41670: LD_ADDR_VAR 0 10
41674: PUSH
41675: LD_VAR 0 10
41679: PUSH
41680: LD_VAR 0 8
41684: PUSH
41685: LD_INT 1
41687: ARRAY
41688: PUSH
41689: LD_VAR 0 2
41693: PLUS
41694: PUSH
41695: LD_VAR 0 8
41699: PUSH
41700: LD_INT 2
41702: ARRAY
41703: PUSH
41704: LD_VAR 0 3
41708: PLUS
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: ADD
41717: ST_TO_ADDR
41718: GO 41667
41720: POP
41721: POP
// result = temp_list2 ;
41722: LD_ADDR_VAR 0 7
41726: PUSH
41727: LD_VAR 0 10
41731: ST_TO_ADDR
// end ;
41732: LD_VAR 0 7
41736: RET
// export function EnemyInRange ( unit , dist ) ; begin
41737: LD_INT 0
41739: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 255
41754: PPUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 250
41764: PPUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: CALL_OW 251
41774: PPUSH
41775: LD_VAR 0 2
41779: PPUSH
41780: CALL 15110 0 4
41784: PUSH
41785: LD_INT 4
41787: ARRAY
41788: ST_TO_ADDR
// end ;
41789: LD_VAR 0 3
41793: RET
// export function PlayerSeeMe ( unit ) ; begin
41794: LD_INT 0
41796: PPUSH
// result := See ( your_side , unit ) ;
41797: LD_ADDR_VAR 0 2
41801: PUSH
41802: LD_OWVAR 2
41806: PPUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: CALL_OW 292
41816: ST_TO_ADDR
// end ;
41817: LD_VAR 0 2
41821: RET
// export function ReverseDir ( unit ) ; begin
41822: LD_INT 0
41824: PPUSH
// if not unit then
41825: LD_VAR 0 1
41829: NOT
41830: IFFALSE 41834
// exit ;
41832: GO 41857
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41834: LD_ADDR_VAR 0 2
41838: PUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 254
41848: PUSH
41849: LD_INT 3
41851: PLUS
41852: PUSH
41853: LD_INT 6
41855: MOD
41856: ST_TO_ADDR
// end ;
41857: LD_VAR 0 2
41861: RET
// export function ReverseArray ( array ) ; var i ; begin
41862: LD_INT 0
41864: PPUSH
41865: PPUSH
// if not array then
41866: LD_VAR 0 1
41870: NOT
41871: IFFALSE 41875
// exit ;
41873: GO 41930
// result := [ ] ;
41875: LD_ADDR_VAR 0 2
41879: PUSH
41880: EMPTY
41881: ST_TO_ADDR
// for i := array downto 1 do
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: DOUBLE
41888: LD_VAR 0 1
41892: INC
41893: ST_TO_ADDR
41894: LD_INT 1
41896: PUSH
41897: FOR_DOWNTO
41898: IFFALSE 41928
// result := Join ( result , array [ i ] ) ;
41900: LD_ADDR_VAR 0 2
41904: PUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: LD_VAR 0 1
41914: PUSH
41915: LD_VAR 0 3
41919: ARRAY
41920: PPUSH
41921: CALL 46575 0 2
41925: ST_TO_ADDR
41926: GO 41897
41928: POP
41929: POP
// end ;
41930: LD_VAR 0 2
41934: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41935: LD_INT 0
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
// if not unit or not hexes then
41943: LD_VAR 0 1
41947: NOT
41948: PUSH
41949: LD_VAR 0 2
41953: NOT
41954: OR
41955: IFFALSE 41959
// exit ;
41957: GO 42082
// dist := 9999 ;
41959: LD_ADDR_VAR 0 5
41963: PUSH
41964: LD_INT 9999
41966: ST_TO_ADDR
// for i = 1 to hexes do
41967: LD_ADDR_VAR 0 4
41971: PUSH
41972: DOUBLE
41973: LD_INT 1
41975: DEC
41976: ST_TO_ADDR
41977: LD_VAR 0 2
41981: PUSH
41982: FOR_TO
41983: IFFALSE 42070
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41985: LD_ADDR_VAR 0 6
41989: PUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: LD_VAR 0 2
41999: PUSH
42000: LD_VAR 0 4
42004: ARRAY
42005: PUSH
42006: LD_INT 1
42008: ARRAY
42009: PPUSH
42010: LD_VAR 0 2
42014: PUSH
42015: LD_VAR 0 4
42019: ARRAY
42020: PUSH
42021: LD_INT 2
42023: ARRAY
42024: PPUSH
42025: CALL_OW 297
42029: ST_TO_ADDR
// if tdist < dist then
42030: LD_VAR 0 6
42034: PUSH
42035: LD_VAR 0 5
42039: LESS
42040: IFFALSE 42068
// begin hex := hexes [ i ] ;
42042: LD_ADDR_VAR 0 8
42046: PUSH
42047: LD_VAR 0 2
42051: PUSH
42052: LD_VAR 0 4
42056: ARRAY
42057: ST_TO_ADDR
// dist := tdist ;
42058: LD_ADDR_VAR 0 5
42062: PUSH
42063: LD_VAR 0 6
42067: ST_TO_ADDR
// end ; end ;
42068: GO 41982
42070: POP
42071: POP
// result := hex ;
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_VAR 0 8
42081: ST_TO_ADDR
// end ;
42082: LD_VAR 0 3
42086: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42087: LD_INT 0
42089: PPUSH
42090: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42091: LD_VAR 0 1
42095: NOT
42096: PUSH
42097: LD_VAR 0 1
42101: PUSH
42102: LD_INT 21
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 23
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PPUSH
42126: CALL_OW 69
42130: IN
42131: NOT
42132: OR
42133: IFFALSE 42137
// exit ;
42135: GO 42184
// for i = 1 to 3 do
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: DOUBLE
42143: LD_INT 1
42145: DEC
42146: ST_TO_ADDR
42147: LD_INT 3
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42182
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 250
42162: PPUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 251
42172: PPUSH
42173: LD_INT 1
42175: PPUSH
42176: CALL_OW 453
42180: GO 42150
42182: POP
42183: POP
// end ;
42184: LD_VAR 0 2
42188: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42189: LD_INT 0
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
// if not unit or not enemy_unit then
42197: LD_VAR 0 1
42201: NOT
42202: PUSH
42203: LD_VAR 0 2
42207: NOT
42208: OR
42209: IFFALSE 42213
// exit ;
42211: GO 42680
// if GetLives ( i ) < 250 then
42213: LD_VAR 0 4
42217: PPUSH
42218: CALL_OW 256
42222: PUSH
42223: LD_INT 250
42225: LESS
42226: IFFALSE 42239
// begin ComAutodestruct ( i ) ;
42228: LD_VAR 0 4
42232: PPUSH
42233: CALL 42087 0 1
// exit ;
42237: GO 42680
// end ; x := GetX ( enemy_unit ) ;
42239: LD_ADDR_VAR 0 7
42243: PUSH
42244: LD_VAR 0 2
42248: PPUSH
42249: CALL_OW 250
42253: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42254: LD_ADDR_VAR 0 8
42258: PUSH
42259: LD_VAR 0 2
42263: PPUSH
42264: CALL_OW 251
42268: ST_TO_ADDR
// if not x or not y then
42269: LD_VAR 0 7
42273: NOT
42274: PUSH
42275: LD_VAR 0 8
42279: NOT
42280: OR
42281: IFFALSE 42285
// exit ;
42283: GO 42680
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42285: LD_ADDR_VAR 0 6
42289: PUSH
42290: LD_VAR 0 7
42294: PPUSH
42295: LD_INT 0
42297: PPUSH
42298: LD_INT 4
42300: PPUSH
42301: CALL_OW 272
42305: PUSH
42306: LD_VAR 0 8
42310: PPUSH
42311: LD_INT 0
42313: PPUSH
42314: LD_INT 4
42316: PPUSH
42317: CALL_OW 273
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_VAR 0 7
42330: PPUSH
42331: LD_INT 1
42333: PPUSH
42334: LD_INT 4
42336: PPUSH
42337: CALL_OW 272
42341: PUSH
42342: LD_VAR 0 8
42346: PPUSH
42347: LD_INT 1
42349: PPUSH
42350: LD_INT 4
42352: PPUSH
42353: CALL_OW 273
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_VAR 0 7
42366: PPUSH
42367: LD_INT 2
42369: PPUSH
42370: LD_INT 4
42372: PPUSH
42373: CALL_OW 272
42377: PUSH
42378: LD_VAR 0 8
42382: PPUSH
42383: LD_INT 2
42385: PPUSH
42386: LD_INT 4
42388: PPUSH
42389: CALL_OW 273
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_VAR 0 7
42402: PPUSH
42403: LD_INT 3
42405: PPUSH
42406: LD_INT 4
42408: PPUSH
42409: CALL_OW 272
42413: PUSH
42414: LD_VAR 0 8
42418: PPUSH
42419: LD_INT 3
42421: PPUSH
42422: LD_INT 4
42424: PPUSH
42425: CALL_OW 273
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_VAR 0 7
42438: PPUSH
42439: LD_INT 4
42441: PPUSH
42442: LD_INT 4
42444: PPUSH
42445: CALL_OW 272
42449: PUSH
42450: LD_VAR 0 8
42454: PPUSH
42455: LD_INT 4
42457: PPUSH
42458: LD_INT 4
42460: PPUSH
42461: CALL_OW 273
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_VAR 0 7
42474: PPUSH
42475: LD_INT 5
42477: PPUSH
42478: LD_INT 4
42480: PPUSH
42481: CALL_OW 272
42485: PUSH
42486: LD_VAR 0 8
42490: PPUSH
42491: LD_INT 5
42493: PPUSH
42494: LD_INT 4
42496: PPUSH
42497: CALL_OW 273
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
// for i = tmp downto 1 do
42514: LD_ADDR_VAR 0 4
42518: PUSH
42519: DOUBLE
42520: LD_VAR 0 6
42524: INC
42525: ST_TO_ADDR
42526: LD_INT 1
42528: PUSH
42529: FOR_DOWNTO
42530: IFFALSE 42631
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42532: LD_VAR 0 6
42536: PUSH
42537: LD_VAR 0 4
42541: ARRAY
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: LD_VAR 0 6
42551: PUSH
42552: LD_VAR 0 4
42556: ARRAY
42557: PUSH
42558: LD_INT 2
42560: ARRAY
42561: PPUSH
42562: CALL_OW 488
42566: NOT
42567: PUSH
42568: LD_VAR 0 6
42572: PUSH
42573: LD_VAR 0 4
42577: ARRAY
42578: PUSH
42579: LD_INT 1
42581: ARRAY
42582: PPUSH
42583: LD_VAR 0 6
42587: PUSH
42588: LD_VAR 0 4
42592: ARRAY
42593: PUSH
42594: LD_INT 2
42596: ARRAY
42597: PPUSH
42598: CALL_OW 428
42602: PUSH
42603: LD_INT 0
42605: NONEQUAL
42606: OR
42607: IFFALSE 42629
// tmp := Delete ( tmp , i ) ;
42609: LD_ADDR_VAR 0 6
42613: PUSH
42614: LD_VAR 0 6
42618: PPUSH
42619: LD_VAR 0 4
42623: PPUSH
42624: CALL_OW 3
42628: ST_TO_ADDR
42629: GO 42529
42631: POP
42632: POP
// j := GetClosestHex ( unit , tmp ) ;
42633: LD_ADDR_VAR 0 5
42637: PUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: LD_VAR 0 6
42647: PPUSH
42648: CALL 41935 0 2
42652: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42653: LD_VAR 0 1
42657: PPUSH
42658: LD_VAR 0 5
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: PPUSH
42667: LD_VAR 0 5
42671: PUSH
42672: LD_INT 2
42674: ARRAY
42675: PPUSH
42676: CALL_OW 111
// end ;
42680: LD_VAR 0 3
42684: RET
// export function PrepareApemanSoldier ( ) ; begin
42685: LD_INT 0
42687: PPUSH
// uc_nation := 0 ;
42688: LD_ADDR_OWVAR 21
42692: PUSH
42693: LD_INT 0
42695: ST_TO_ADDR
// hc_sex := sex_male ;
42696: LD_ADDR_OWVAR 27
42700: PUSH
42701: LD_INT 1
42703: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42704: LD_ADDR_OWVAR 28
42708: PUSH
42709: LD_INT 15
42711: ST_TO_ADDR
// hc_gallery :=  ;
42712: LD_ADDR_OWVAR 33
42716: PUSH
42717: LD_STRING 
42719: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42720: LD_ADDR_OWVAR 31
42724: PUSH
42725: LD_INT 0
42727: PPUSH
42728: LD_INT 3
42730: PPUSH
42731: CALL_OW 12
42735: PUSH
42736: LD_INT 0
42738: PPUSH
42739: LD_INT 3
42741: PPUSH
42742: CALL_OW 12
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// end ;
42759: LD_VAR 0 1
42763: RET
// export function PrepareApemanEngineer ( ) ; begin
42764: LD_INT 0
42766: PPUSH
// uc_nation := 0 ;
42767: LD_ADDR_OWVAR 21
42771: PUSH
42772: LD_INT 0
42774: ST_TO_ADDR
// hc_sex := sex_male ;
42775: LD_ADDR_OWVAR 27
42779: PUSH
42780: LD_INT 1
42782: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42783: LD_ADDR_OWVAR 28
42787: PUSH
42788: LD_INT 16
42790: ST_TO_ADDR
// hc_gallery :=  ;
42791: LD_ADDR_OWVAR 33
42795: PUSH
42796: LD_STRING 
42798: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42799: LD_ADDR_OWVAR 31
42803: PUSH
42804: LD_INT 0
42806: PPUSH
42807: LD_INT 3
42809: PPUSH
42810: CALL_OW 12
42814: PUSH
42815: LD_INT 0
42817: PPUSH
42818: LD_INT 3
42820: PPUSH
42821: CALL_OW 12
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 1
42842: RET
// export function PrepareApeman ( agressivity ) ; begin
42843: LD_INT 0
42845: PPUSH
// uc_side := 0 ;
42846: LD_ADDR_OWVAR 20
42850: PUSH
42851: LD_INT 0
42853: ST_TO_ADDR
// uc_nation := 0 ;
42854: LD_ADDR_OWVAR 21
42858: PUSH
42859: LD_INT 0
42861: ST_TO_ADDR
// hc_sex := sex_male ;
42862: LD_ADDR_OWVAR 27
42866: PUSH
42867: LD_INT 1
42869: ST_TO_ADDR
// hc_class := class_apeman ;
42870: LD_ADDR_OWVAR 28
42874: PUSH
42875: LD_INT 12
42877: ST_TO_ADDR
// hc_gallery :=  ;
42878: LD_ADDR_OWVAR 33
42882: PUSH
42883: LD_STRING 
42885: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42886: LD_ADDR_OWVAR 35
42890: PUSH
42891: LD_VAR 0 1
42895: NEG
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 12
42906: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42907: LD_ADDR_OWVAR 31
42911: PUSH
42912: LD_INT 0
42914: PPUSH
42915: LD_INT 3
42917: PPUSH
42918: CALL_OW 12
42922: PUSH
42923: LD_INT 0
42925: PPUSH
42926: LD_INT 3
42928: PPUSH
42929: CALL_OW 12
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// end ;
42946: LD_VAR 0 2
42950: RET
// export function PrepareTiger ( agressivity ) ; begin
42951: LD_INT 0
42953: PPUSH
// uc_side := 0 ;
42954: LD_ADDR_OWVAR 20
42958: PUSH
42959: LD_INT 0
42961: ST_TO_ADDR
// uc_nation := 0 ;
42962: LD_ADDR_OWVAR 21
42966: PUSH
42967: LD_INT 0
42969: ST_TO_ADDR
// hc_class := class_tiger ;
42970: LD_ADDR_OWVAR 28
42974: PUSH
42975: LD_INT 14
42977: ST_TO_ADDR
// hc_gallery :=  ;
42978: LD_ADDR_OWVAR 33
42982: PUSH
42983: LD_STRING 
42985: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42986: LD_ADDR_OWVAR 35
42990: PUSH
42991: LD_VAR 0 1
42995: NEG
42996: PPUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 12
43006: ST_TO_ADDR
// end ;
43007: LD_VAR 0 2
43011: RET
// export function PrepareEnchidna ( ) ; begin
43012: LD_INT 0
43014: PPUSH
// uc_side := 0 ;
43015: LD_ADDR_OWVAR 20
43019: PUSH
43020: LD_INT 0
43022: ST_TO_ADDR
// uc_nation := 0 ;
43023: LD_ADDR_OWVAR 21
43027: PUSH
43028: LD_INT 0
43030: ST_TO_ADDR
// hc_class := class_baggie ;
43031: LD_ADDR_OWVAR 28
43035: PUSH
43036: LD_INT 13
43038: ST_TO_ADDR
// hc_gallery :=  ;
43039: LD_ADDR_OWVAR 33
43043: PUSH
43044: LD_STRING 
43046: ST_TO_ADDR
// end ;
43047: LD_VAR 0 1
43051: RET
// export function PrepareFrog ( ) ; begin
43052: LD_INT 0
43054: PPUSH
// uc_side := 0 ;
43055: LD_ADDR_OWVAR 20
43059: PUSH
43060: LD_INT 0
43062: ST_TO_ADDR
// uc_nation := 0 ;
43063: LD_ADDR_OWVAR 21
43067: PUSH
43068: LD_INT 0
43070: ST_TO_ADDR
// hc_class := class_frog ;
43071: LD_ADDR_OWVAR 28
43075: PUSH
43076: LD_INT 19
43078: ST_TO_ADDR
// hc_gallery :=  ;
43079: LD_ADDR_OWVAR 33
43083: PUSH
43084: LD_STRING 
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 1
43091: RET
// export function PrepareFish ( ) ; begin
43092: LD_INT 0
43094: PPUSH
// uc_side := 0 ;
43095: LD_ADDR_OWVAR 20
43099: PUSH
43100: LD_INT 0
43102: ST_TO_ADDR
// uc_nation := 0 ;
43103: LD_ADDR_OWVAR 21
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// hc_class := class_fish ;
43111: LD_ADDR_OWVAR 28
43115: PUSH
43116: LD_INT 20
43118: ST_TO_ADDR
// hc_gallery :=  ;
43119: LD_ADDR_OWVAR 33
43123: PUSH
43124: LD_STRING 
43126: ST_TO_ADDR
// end ;
43127: LD_VAR 0 1
43131: RET
// export function PrepareBird ( ) ; begin
43132: LD_INT 0
43134: PPUSH
// uc_side := 0 ;
43135: LD_ADDR_OWVAR 20
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// uc_nation := 0 ;
43143: LD_ADDR_OWVAR 21
43147: PUSH
43148: LD_INT 0
43150: ST_TO_ADDR
// hc_class := class_phororhacos ;
43151: LD_ADDR_OWVAR 28
43155: PUSH
43156: LD_INT 18
43158: ST_TO_ADDR
// hc_gallery :=  ;
43159: LD_ADDR_OWVAR 33
43163: PUSH
43164: LD_STRING 
43166: ST_TO_ADDR
// end ;
43167: LD_VAR 0 1
43171: RET
// export function PrepareHorse ( ) ; begin
43172: LD_INT 0
43174: PPUSH
// uc_side := 0 ;
43175: LD_ADDR_OWVAR 20
43179: PUSH
43180: LD_INT 0
43182: ST_TO_ADDR
// uc_nation := 0 ;
43183: LD_ADDR_OWVAR 21
43187: PUSH
43188: LD_INT 0
43190: ST_TO_ADDR
// hc_class := class_horse ;
43191: LD_ADDR_OWVAR 28
43195: PUSH
43196: LD_INT 21
43198: ST_TO_ADDR
// hc_gallery :=  ;
43199: LD_ADDR_OWVAR 33
43203: PUSH
43204: LD_STRING 
43206: ST_TO_ADDR
// end ;
43207: LD_VAR 0 1
43211: RET
// export function PrepareMastodont ( ) ; begin
43212: LD_INT 0
43214: PPUSH
// uc_side := 0 ;
43215: LD_ADDR_OWVAR 20
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// uc_nation := 0 ;
43223: LD_ADDR_OWVAR 21
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43231: LD_ADDR_OWVAR 37
43235: PUSH
43236: LD_INT 31
43238: ST_TO_ADDR
// vc_control := control_rider ;
43239: LD_ADDR_OWVAR 38
43243: PUSH
43244: LD_INT 4
43246: ST_TO_ADDR
// end ;
43247: LD_VAR 0 1
43251: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43252: LD_INT 0
43254: PPUSH
43255: PPUSH
43256: PPUSH
// uc_side = 0 ;
43257: LD_ADDR_OWVAR 20
43261: PUSH
43262: LD_INT 0
43264: ST_TO_ADDR
// uc_nation = 0 ;
43265: LD_ADDR_OWVAR 21
43269: PUSH
43270: LD_INT 0
43272: ST_TO_ADDR
// InitHc_All ( ) ;
43273: CALL_OW 584
// InitVc ;
43277: CALL_OW 20
// if mastodonts then
43281: LD_VAR 0 6
43285: IFFALSE 43352
// for i = 1 to mastodonts do
43287: LD_ADDR_VAR 0 11
43291: PUSH
43292: DOUBLE
43293: LD_INT 1
43295: DEC
43296: ST_TO_ADDR
43297: LD_VAR 0 6
43301: PUSH
43302: FOR_TO
43303: IFFALSE 43350
// begin vc_chassis := 31 ;
43305: LD_ADDR_OWVAR 37
43309: PUSH
43310: LD_INT 31
43312: ST_TO_ADDR
// vc_control := control_rider ;
43313: LD_ADDR_OWVAR 38
43317: PUSH
43318: LD_INT 4
43320: ST_TO_ADDR
// animal := CreateVehicle ;
43321: LD_ADDR_VAR 0 12
43325: PUSH
43326: CALL_OW 45
43330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43331: LD_VAR 0 12
43335: PPUSH
43336: LD_VAR 0 8
43340: PPUSH
43341: LD_INT 0
43343: PPUSH
43344: CALL 45480 0 3
// end ;
43348: GO 43302
43350: POP
43351: POP
// if horses then
43352: LD_VAR 0 5
43356: IFFALSE 43423
// for i = 1 to horses do
43358: LD_ADDR_VAR 0 11
43362: PUSH
43363: DOUBLE
43364: LD_INT 1
43366: DEC
43367: ST_TO_ADDR
43368: LD_VAR 0 5
43372: PUSH
43373: FOR_TO
43374: IFFALSE 43421
// begin hc_class := 21 ;
43376: LD_ADDR_OWVAR 28
43380: PUSH
43381: LD_INT 21
43383: ST_TO_ADDR
// hc_gallery :=  ;
43384: LD_ADDR_OWVAR 33
43388: PUSH
43389: LD_STRING 
43391: ST_TO_ADDR
// animal := CreateHuman ;
43392: LD_ADDR_VAR 0 12
43396: PUSH
43397: CALL_OW 44
43401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43402: LD_VAR 0 12
43406: PPUSH
43407: LD_VAR 0 8
43411: PPUSH
43412: LD_INT 0
43414: PPUSH
43415: CALL 45480 0 3
// end ;
43419: GO 43373
43421: POP
43422: POP
// if birds then
43423: LD_VAR 0 1
43427: IFFALSE 43494
// for i = 1 to birds do
43429: LD_ADDR_VAR 0 11
43433: PUSH
43434: DOUBLE
43435: LD_INT 1
43437: DEC
43438: ST_TO_ADDR
43439: LD_VAR 0 1
43443: PUSH
43444: FOR_TO
43445: IFFALSE 43492
// begin hc_class := 18 ;
43447: LD_ADDR_OWVAR 28
43451: PUSH
43452: LD_INT 18
43454: ST_TO_ADDR
// hc_gallery =  ;
43455: LD_ADDR_OWVAR 33
43459: PUSH
43460: LD_STRING 
43462: ST_TO_ADDR
// animal := CreateHuman ;
43463: LD_ADDR_VAR 0 12
43467: PUSH
43468: CALL_OW 44
43472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43473: LD_VAR 0 12
43477: PPUSH
43478: LD_VAR 0 8
43482: PPUSH
43483: LD_INT 0
43485: PPUSH
43486: CALL 45480 0 3
// end ;
43490: GO 43444
43492: POP
43493: POP
// if tigers then
43494: LD_VAR 0 2
43498: IFFALSE 43582
// for i = 1 to tigers do
43500: LD_ADDR_VAR 0 11
43504: PUSH
43505: DOUBLE
43506: LD_INT 1
43508: DEC
43509: ST_TO_ADDR
43510: LD_VAR 0 2
43514: PUSH
43515: FOR_TO
43516: IFFALSE 43580
// begin hc_class = class_tiger ;
43518: LD_ADDR_OWVAR 28
43522: PUSH
43523: LD_INT 14
43525: ST_TO_ADDR
// hc_gallery =  ;
43526: LD_ADDR_OWVAR 33
43530: PUSH
43531: LD_STRING 
43533: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43534: LD_ADDR_OWVAR 35
43538: PUSH
43539: LD_INT 7
43541: NEG
43542: PPUSH
43543: LD_INT 7
43545: PPUSH
43546: CALL_OW 12
43550: ST_TO_ADDR
// animal := CreateHuman ;
43551: LD_ADDR_VAR 0 12
43555: PUSH
43556: CALL_OW 44
43560: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43561: LD_VAR 0 12
43565: PPUSH
43566: LD_VAR 0 8
43570: PPUSH
43571: LD_INT 0
43573: PPUSH
43574: CALL 45480 0 3
// end ;
43578: GO 43515
43580: POP
43581: POP
// if apemans then
43582: LD_VAR 0 3
43586: IFFALSE 43709
// for i = 1 to apemans do
43588: LD_ADDR_VAR 0 11
43592: PUSH
43593: DOUBLE
43594: LD_INT 1
43596: DEC
43597: ST_TO_ADDR
43598: LD_VAR 0 3
43602: PUSH
43603: FOR_TO
43604: IFFALSE 43707
// begin hc_class = class_apeman ;
43606: LD_ADDR_OWVAR 28
43610: PUSH
43611: LD_INT 12
43613: ST_TO_ADDR
// hc_gallery =  ;
43614: LD_ADDR_OWVAR 33
43618: PUSH
43619: LD_STRING 
43621: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43622: LD_ADDR_OWVAR 35
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PPUSH
43631: LD_INT 2
43633: PPUSH
43634: CALL_OW 12
43638: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43639: LD_ADDR_OWVAR 31
43643: PUSH
43644: LD_INT 1
43646: PPUSH
43647: LD_INT 3
43649: PPUSH
43650: CALL_OW 12
43654: PUSH
43655: LD_INT 1
43657: PPUSH
43658: LD_INT 3
43660: PPUSH
43661: CALL_OW 12
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// animal := CreateHuman ;
43678: LD_ADDR_VAR 0 12
43682: PUSH
43683: CALL_OW 44
43687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43688: LD_VAR 0 12
43692: PPUSH
43693: LD_VAR 0 8
43697: PPUSH
43698: LD_INT 0
43700: PPUSH
43701: CALL 45480 0 3
// end ;
43705: GO 43603
43707: POP
43708: POP
// if enchidnas then
43709: LD_VAR 0 4
43713: IFFALSE 43780
// for i = 1 to enchidnas do
43715: LD_ADDR_VAR 0 11
43719: PUSH
43720: DOUBLE
43721: LD_INT 1
43723: DEC
43724: ST_TO_ADDR
43725: LD_VAR 0 4
43729: PUSH
43730: FOR_TO
43731: IFFALSE 43778
// begin hc_class = 13 ;
43733: LD_ADDR_OWVAR 28
43737: PUSH
43738: LD_INT 13
43740: ST_TO_ADDR
// hc_gallery =  ;
43741: LD_ADDR_OWVAR 33
43745: PUSH
43746: LD_STRING 
43748: ST_TO_ADDR
// animal := CreateHuman ;
43749: LD_ADDR_VAR 0 12
43753: PUSH
43754: CALL_OW 44
43758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43759: LD_VAR 0 12
43763: PPUSH
43764: LD_VAR 0 8
43768: PPUSH
43769: LD_INT 0
43771: PPUSH
43772: CALL 45480 0 3
// end ;
43776: GO 43730
43778: POP
43779: POP
// if fishes then
43780: LD_VAR 0 7
43784: IFFALSE 43851
// for i = 1 to fishes do
43786: LD_ADDR_VAR 0 11
43790: PUSH
43791: DOUBLE
43792: LD_INT 1
43794: DEC
43795: ST_TO_ADDR
43796: LD_VAR 0 7
43800: PUSH
43801: FOR_TO
43802: IFFALSE 43849
// begin hc_class = 20 ;
43804: LD_ADDR_OWVAR 28
43808: PUSH
43809: LD_INT 20
43811: ST_TO_ADDR
// hc_gallery =  ;
43812: LD_ADDR_OWVAR 33
43816: PUSH
43817: LD_STRING 
43819: ST_TO_ADDR
// animal := CreateHuman ;
43820: LD_ADDR_VAR 0 12
43824: PUSH
43825: CALL_OW 44
43829: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43830: LD_VAR 0 12
43834: PPUSH
43835: LD_VAR 0 9
43839: PPUSH
43840: LD_INT 0
43842: PPUSH
43843: CALL 45480 0 3
// end ;
43847: GO 43801
43849: POP
43850: POP
// end ;
43851: LD_VAR 0 10
43855: RET
// export function WantHeal ( sci , unit ) ; begin
43856: LD_INT 0
43858: PPUSH
// if GetTaskList ( sci ) > 0 then
43859: LD_VAR 0 1
43863: PPUSH
43864: CALL_OW 437
43868: PUSH
43869: LD_INT 0
43871: GREATER
43872: IFFALSE 43942
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 437
43883: PUSH
43884: LD_INT 1
43886: ARRAY
43887: PUSH
43888: LD_INT 1
43890: ARRAY
43891: PUSH
43892: LD_STRING l
43894: EQUAL
43895: PUSH
43896: LD_VAR 0 1
43900: PPUSH
43901: CALL_OW 437
43905: PUSH
43906: LD_INT 1
43908: ARRAY
43909: PUSH
43910: LD_INT 4
43912: ARRAY
43913: PUSH
43914: LD_VAR 0 2
43918: EQUAL
43919: AND
43920: IFFALSE 43932
// result := true else
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: LD_INT 1
43929: ST_TO_ADDR
43930: GO 43940
// result := false ;
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 0
43939: ST_TO_ADDR
// end else
43940: GO 43950
// result := false ;
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_INT 0
43949: ST_TO_ADDR
// end ;
43950: LD_VAR 0 3
43954: RET
// export function HealTarget ( sci ) ; begin
43955: LD_INT 0
43957: PPUSH
// if not sci then
43958: LD_VAR 0 1
43962: NOT
43963: IFFALSE 43967
// exit ;
43965: GO 44032
// result := 0 ;
43967: LD_ADDR_VAR 0 2
43971: PUSH
43972: LD_INT 0
43974: ST_TO_ADDR
// if GetTaskList ( sci ) then
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 437
43984: IFFALSE 44032
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43986: LD_VAR 0 1
43990: PPUSH
43991: CALL_OW 437
43995: PUSH
43996: LD_INT 1
43998: ARRAY
43999: PUSH
44000: LD_INT 1
44002: ARRAY
44003: PUSH
44004: LD_STRING l
44006: EQUAL
44007: IFFALSE 44032
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44009: LD_ADDR_VAR 0 2
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 437
44023: PUSH
44024: LD_INT 1
44026: ARRAY
44027: PUSH
44028: LD_INT 4
44030: ARRAY
44031: ST_TO_ADDR
// end ;
44032: LD_VAR 0 2
44036: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44037: LD_INT 0
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
// if not base_units then
44043: LD_VAR 0 1
44047: NOT
44048: IFFALSE 44052
// exit ;
44050: GO 44139
// result := false ;
44052: LD_ADDR_VAR 0 2
44056: PUSH
44057: LD_INT 0
44059: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44060: LD_ADDR_VAR 0 5
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: LD_INT 21
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PPUSH
44080: CALL_OW 72
44084: ST_TO_ADDR
// if not tmp then
44085: LD_VAR 0 5
44089: NOT
44090: IFFALSE 44094
// exit ;
44092: GO 44139
// for i in tmp do
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: LD_VAR 0 5
44103: PUSH
44104: FOR_IN
44105: IFFALSE 44137
// begin result := EnemyInRange ( i , 22 ) ;
44107: LD_ADDR_VAR 0 2
44111: PUSH
44112: LD_VAR 0 3
44116: PPUSH
44117: LD_INT 22
44119: PPUSH
44120: CALL 41737 0 2
44124: ST_TO_ADDR
// if result then
44125: LD_VAR 0 2
44129: IFFALSE 44135
// exit ;
44131: POP
44132: POP
44133: GO 44139
// end ;
44135: GO 44104
44137: POP
44138: POP
// end ;
44139: LD_VAR 0 2
44143: RET
// export function FilterByTag ( units , tag ) ; begin
44144: LD_INT 0
44146: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44147: LD_ADDR_VAR 0 3
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: LD_INT 120
44159: PUSH
44160: LD_VAR 0 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PPUSH
44169: CALL_OW 72
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 3
44178: RET
// export function IsDriver ( un ) ; begin
44179: LD_INT 0
44181: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44182: LD_ADDR_VAR 0 2
44186: PUSH
44187: LD_VAR 0 1
44191: PUSH
44192: LD_INT 55
44194: PUSH
44195: EMPTY
44196: LIST
44197: PPUSH
44198: CALL_OW 69
44202: IN
44203: ST_TO_ADDR
// end ;
44204: LD_VAR 0 2
44208: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44209: LD_INT 0
44211: PPUSH
44212: PPUSH
// list := [ ] ;
44213: LD_ADDR_VAR 0 5
44217: PUSH
44218: EMPTY
44219: ST_TO_ADDR
// case d of 0 :
44220: LD_VAR 0 3
44224: PUSH
44225: LD_INT 0
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44233
44231: GO 44366
44233: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44234: LD_ADDR_VAR 0 5
44238: PUSH
44239: LD_VAR 0 1
44243: PUSH
44244: LD_INT 4
44246: MINUS
44247: PUSH
44248: LD_VAR 0 2
44252: PUSH
44253: LD_INT 4
44255: MINUS
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: PUSH
44265: LD_VAR 0 1
44269: PUSH
44270: LD_INT 3
44272: MINUS
44273: PUSH
44274: LD_VAR 0 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: PUSH
44287: LD_VAR 0 1
44291: PUSH
44292: LD_INT 4
44294: PLUS
44295: PUSH
44296: LD_VAR 0 2
44300: PUSH
44301: LD_INT 4
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: PUSH
44309: LD_VAR 0 1
44313: PUSH
44314: LD_INT 3
44316: PLUS
44317: PUSH
44318: LD_VAR 0 2
44322: PUSH
44323: LD_INT 3
44325: PLUS
44326: PUSH
44327: LD_INT 5
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: PUSH
44335: LD_VAR 0 1
44339: PUSH
44340: LD_VAR 0 2
44344: PUSH
44345: LD_INT 4
44347: PLUS
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// end ; 1 :
44364: GO 45064
44366: LD_INT 1
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44374
44372: GO 44507
44374: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44375: LD_ADDR_VAR 0 5
44379: PUSH
44380: LD_VAR 0 1
44384: PUSH
44385: LD_VAR 0 2
44389: PUSH
44390: LD_INT 4
44392: MINUS
44393: PUSH
44394: LD_INT 3
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: PUSH
44402: LD_VAR 0 1
44406: PUSH
44407: LD_INT 3
44409: MINUS
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_INT 3
44418: MINUS
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_INT 4
44435: MINUS
44436: PUSH
44437: LD_VAR 0 2
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: PUSH
44450: LD_VAR 0 1
44454: PUSH
44455: LD_VAR 0 2
44459: PUSH
44460: LD_INT 3
44462: PLUS
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: PUSH
44472: LD_VAR 0 1
44476: PUSH
44477: LD_INT 4
44479: PLUS
44480: PUSH
44481: LD_VAR 0 2
44485: PUSH
44486: LD_INT 4
44488: PLUS
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// end ; 2 :
44505: GO 45064
44507: LD_INT 2
44509: DOUBLE
44510: EQUAL
44511: IFTRUE 44515
44513: GO 44644
44515: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_VAR 0 1
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 3
44533: MINUS
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: LD_VAR 0 1
44547: PUSH
44548: LD_INT 4
44550: PLUS
44551: PUSH
44552: LD_VAR 0 2
44556: PUSH
44557: LD_INT 4
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: PUSH
44565: LD_VAR 0 1
44569: PUSH
44570: LD_VAR 0 2
44574: PUSH
44575: LD_INT 4
44577: PLUS
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: PUSH
44587: LD_VAR 0 1
44591: PUSH
44592: LD_INT 3
44594: MINUS
44595: PUSH
44596: LD_VAR 0 2
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_VAR 0 1
44613: PUSH
44614: LD_INT 4
44616: MINUS
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_INT 4
44625: MINUS
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// end ; 3 :
44642: GO 45064
44644: LD_INT 3
44646: DOUBLE
44647: EQUAL
44648: IFTRUE 44652
44650: GO 44785
44652: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44653: LD_ADDR_VAR 0 5
44657: PUSH
44658: LD_VAR 0 1
44662: PUSH
44663: LD_INT 3
44665: PLUS
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 4
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: PUSH
44680: LD_VAR 0 1
44684: PUSH
44685: LD_INT 4
44687: PLUS
44688: PUSH
44689: LD_VAR 0 2
44693: PUSH
44694: LD_INT 4
44696: PLUS
44697: PUSH
44698: LD_INT 5
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: PUSH
44706: LD_VAR 0 1
44710: PUSH
44711: LD_INT 4
44713: MINUS
44714: PUSH
44715: LD_VAR 0 2
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: LD_VAR 0 1
44732: PUSH
44733: LD_VAR 0 2
44737: PUSH
44738: LD_INT 4
44740: MINUS
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: LD_VAR 0 1
44754: PUSH
44755: LD_INT 3
44757: MINUS
44758: PUSH
44759: LD_VAR 0 2
44763: PUSH
44764: LD_INT 3
44766: MINUS
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// end ; 4 :
44783: GO 45064
44785: LD_INT 4
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 44926
44793: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44794: LD_ADDR_VAR 0 5
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 4
44811: PLUS
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: PUSH
44821: LD_VAR 0 1
44825: PUSH
44826: LD_INT 3
44828: PLUS
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_INT 3
44837: PLUS
44838: PUSH
44839: LD_INT 5
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PUSH
44847: LD_VAR 0 1
44851: PUSH
44852: LD_INT 4
44854: PLUS
44855: PUSH
44856: LD_VAR 0 2
44860: PUSH
44861: LD_INT 4
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_VAR 0 2
44878: PUSH
44879: LD_INT 3
44881: MINUS
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 4
44898: MINUS
44899: PUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_INT 4
44907: MINUS
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// end ; 5 :
44924: GO 45064
44926: LD_INT 5
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 45063
44934: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44935: LD_ADDR_VAR 0 5
44939: PUSH
44940: LD_VAR 0 1
44944: PUSH
44945: LD_INT 4
44947: MINUS
44948: PUSH
44949: LD_VAR 0 2
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_VAR 0 2
44971: PUSH
44972: LD_INT 4
44974: MINUS
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: PUSH
44984: LD_VAR 0 1
44988: PUSH
44989: LD_INT 4
44991: PLUS
44992: PUSH
44993: LD_VAR 0 2
44997: PUSH
44998: LD_INT 4
45000: PLUS
45001: PUSH
45002: LD_INT 5
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: LD_VAR 0 1
45014: PUSH
45015: LD_INT 3
45017: PLUS
45018: PUSH
45019: LD_VAR 0 2
45023: PUSH
45024: LD_INT 4
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: PUSH
45032: LD_VAR 0 1
45036: PUSH
45037: LD_VAR 0 2
45041: PUSH
45042: LD_INT 3
45044: PLUS
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// end ; end ;
45061: GO 45064
45063: POP
// result := list ;
45064: LD_ADDR_VAR 0 4
45068: PUSH
45069: LD_VAR 0 5
45073: ST_TO_ADDR
// end ;
45074: LD_VAR 0 4
45078: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45079: LD_INT 0
45081: PPUSH
45082: PPUSH
45083: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45084: LD_VAR 0 1
45088: NOT
45089: PUSH
45090: LD_VAR 0 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: IN
45113: NOT
45114: OR
45115: IFFALSE 45119
// exit ;
45117: GO 45202
// tmp := [ ] ;
45119: LD_ADDR_VAR 0 5
45123: PUSH
45124: EMPTY
45125: ST_TO_ADDR
// for i in units do
45126: LD_ADDR_VAR 0 4
45130: PUSH
45131: LD_VAR 0 1
45135: PUSH
45136: FOR_IN
45137: IFFALSE 45171
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45139: LD_ADDR_VAR 0 5
45143: PUSH
45144: LD_VAR 0 5
45148: PPUSH
45149: LD_VAR 0 4
45153: PPUSH
45154: LD_VAR 0 2
45158: PPUSH
45159: CALL_OW 259
45163: PPUSH
45164: CALL 46575 0 2
45168: ST_TO_ADDR
45169: GO 45136
45171: POP
45172: POP
// if not tmp then
45173: LD_VAR 0 5
45177: NOT
45178: IFFALSE 45182
// exit ;
45180: GO 45202
// result := SortListByListDesc ( units , tmp ) ;
45182: LD_ADDR_VAR 0 3
45186: PUSH
45187: LD_VAR 0 1
45191: PPUSH
45192: LD_VAR 0 5
45196: PPUSH
45197: CALL_OW 77
45201: ST_TO_ADDR
// end ;
45202: LD_VAR 0 3
45206: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45207: LD_INT 0
45209: PPUSH
45210: PPUSH
45211: PPUSH
// result := false ;
45212: LD_ADDR_VAR 0 3
45216: PUSH
45217: LD_INT 0
45219: ST_TO_ADDR
// if not building then
45220: LD_VAR 0 2
45224: NOT
45225: IFFALSE 45229
// exit ;
45227: GO 45367
// x := GetX ( building ) ;
45229: LD_ADDR_VAR 0 4
45233: PUSH
45234: LD_VAR 0 2
45238: PPUSH
45239: CALL_OW 250
45243: ST_TO_ADDR
// y := GetY ( building ) ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_VAR 0 2
45253: PPUSH
45254: CALL_OW 251
45258: ST_TO_ADDR
// if not x or not y then
45259: LD_VAR 0 4
45263: NOT
45264: PUSH
45265: LD_VAR 0 5
45269: NOT
45270: OR
45271: IFFALSE 45275
// exit ;
45273: GO 45367
// if GetTaskList ( unit ) then
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 437
45284: IFFALSE 45367
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45286: LD_STRING e
45288: PUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 437
45298: PUSH
45299: LD_INT 1
45301: ARRAY
45302: PUSH
45303: LD_INT 1
45305: ARRAY
45306: EQUAL
45307: PUSH
45308: LD_VAR 0 4
45312: PUSH
45313: LD_VAR 0 1
45317: PPUSH
45318: CALL_OW 437
45322: PUSH
45323: LD_INT 1
45325: ARRAY
45326: PUSH
45327: LD_INT 2
45329: ARRAY
45330: EQUAL
45331: AND
45332: PUSH
45333: LD_VAR 0 5
45337: PUSH
45338: LD_VAR 0 1
45342: PPUSH
45343: CALL_OW 437
45347: PUSH
45348: LD_INT 1
45350: ARRAY
45351: PUSH
45352: LD_INT 3
45354: ARRAY
45355: EQUAL
45356: AND
45357: IFFALSE 45367
// result := true end ;
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 1
45366: ST_TO_ADDR
// end ;
45367: LD_VAR 0 3
45371: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45372: LD_INT 0
45374: PPUSH
// result := false ;
45375: LD_ADDR_VAR 0 4
45379: PUSH
45380: LD_INT 0
45382: ST_TO_ADDR
// if GetTaskList ( unit ) then
45383: LD_VAR 0 1
45387: PPUSH
45388: CALL_OW 437
45392: IFFALSE 45475
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45394: LD_STRING M
45396: PUSH
45397: LD_VAR 0 1
45401: PPUSH
45402: CALL_OW 437
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: EQUAL
45415: PUSH
45416: LD_VAR 0 2
45420: PUSH
45421: LD_VAR 0 1
45425: PPUSH
45426: CALL_OW 437
45430: PUSH
45431: LD_INT 1
45433: ARRAY
45434: PUSH
45435: LD_INT 2
45437: ARRAY
45438: EQUAL
45439: AND
45440: PUSH
45441: LD_VAR 0 3
45445: PUSH
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 437
45455: PUSH
45456: LD_INT 1
45458: ARRAY
45459: PUSH
45460: LD_INT 3
45462: ARRAY
45463: EQUAL
45464: AND
45465: IFFALSE 45475
// result := true ;
45467: LD_ADDR_VAR 0 4
45471: PUSH
45472: LD_INT 1
45474: ST_TO_ADDR
// end ; end ;
45475: LD_VAR 0 4
45479: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45480: LD_INT 0
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
// if not unit or not area then
45486: LD_VAR 0 1
45490: NOT
45491: PUSH
45492: LD_VAR 0 2
45496: NOT
45497: OR
45498: IFFALSE 45502
// exit ;
45500: GO 45678
// tmp := AreaToList ( area , i ) ;
45502: LD_ADDR_VAR 0 6
45506: PUSH
45507: LD_VAR 0 2
45511: PPUSH
45512: LD_VAR 0 5
45516: PPUSH
45517: CALL_OW 517
45521: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45522: LD_ADDR_VAR 0 5
45526: PUSH
45527: DOUBLE
45528: LD_INT 1
45530: DEC
45531: ST_TO_ADDR
45532: LD_VAR 0 6
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PUSH
45541: FOR_TO
45542: IFFALSE 45676
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45544: LD_ADDR_VAR 0 7
45548: PUSH
45549: LD_VAR 0 6
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PUSH
45558: LD_VAR 0 5
45562: ARRAY
45563: PUSH
45564: LD_VAR 0 6
45568: PUSH
45569: LD_INT 2
45571: ARRAY
45572: PUSH
45573: LD_VAR 0 5
45577: ARRAY
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45583: LD_INT 92
45585: PUSH
45586: LD_VAR 0 7
45590: PUSH
45591: LD_INT 1
45593: ARRAY
45594: PUSH
45595: LD_VAR 0 7
45599: PUSH
45600: LD_INT 2
45602: ARRAY
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: PPUSH
45613: CALL_OW 69
45617: PUSH
45618: LD_INT 0
45620: EQUAL
45621: IFFALSE 45674
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45623: LD_VAR 0 1
45627: PPUSH
45628: LD_VAR 0 7
45632: PUSH
45633: LD_INT 1
45635: ARRAY
45636: PPUSH
45637: LD_VAR 0 7
45641: PUSH
45642: LD_INT 2
45644: ARRAY
45645: PPUSH
45646: LD_VAR 0 3
45650: PPUSH
45651: CALL_OW 48
// result := IsPlaced ( unit ) ;
45655: LD_ADDR_VAR 0 4
45659: PUSH
45660: LD_VAR 0 1
45664: PPUSH
45665: CALL_OW 305
45669: ST_TO_ADDR
// exit ;
45670: POP
45671: POP
45672: GO 45678
// end ; end ;
45674: GO 45541
45676: POP
45677: POP
// end ;
45678: LD_VAR 0 4
45682: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45683: LD_INT 0
45685: PPUSH
45686: PPUSH
45687: PPUSH
// if not side or side > 8 then
45688: LD_VAR 0 1
45692: NOT
45693: PUSH
45694: LD_VAR 0 1
45698: PUSH
45699: LD_INT 8
45701: GREATER
45702: OR
45703: IFFALSE 45707
// exit ;
45705: GO 45894
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45707: LD_ADDR_VAR 0 4
45711: PUSH
45712: LD_INT 22
45714: PUSH
45715: LD_VAR 0 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 21
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PPUSH
45738: CALL_OW 69
45742: ST_TO_ADDR
// if not tmp then
45743: LD_VAR 0 4
45747: NOT
45748: IFFALSE 45752
// exit ;
45750: GO 45894
// enable_addtolog := true ;
45752: LD_ADDR_OWVAR 81
45756: PUSH
45757: LD_INT 1
45759: ST_TO_ADDR
// AddToLog ( [ ) ;
45760: LD_STRING [
45762: PPUSH
45763: CALL_OW 561
// for i in tmp do
45767: LD_ADDR_VAR 0 3
45771: PUSH
45772: LD_VAR 0 4
45776: PUSH
45777: FOR_IN
45778: IFFALSE 45885
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45780: LD_STRING [
45782: PUSH
45783: LD_VAR 0 3
45787: PPUSH
45788: CALL_OW 266
45792: STR
45793: PUSH
45794: LD_STRING , 
45796: STR
45797: PUSH
45798: LD_VAR 0 3
45802: PPUSH
45803: CALL_OW 250
45807: STR
45808: PUSH
45809: LD_STRING , 
45811: STR
45812: PUSH
45813: LD_VAR 0 3
45817: PPUSH
45818: CALL_OW 251
45822: STR
45823: PUSH
45824: LD_STRING , 
45826: STR
45827: PUSH
45828: LD_VAR 0 3
45832: PPUSH
45833: CALL_OW 254
45837: STR
45838: PUSH
45839: LD_STRING , 
45841: STR
45842: PUSH
45843: LD_VAR 0 3
45847: PPUSH
45848: LD_INT 1
45850: PPUSH
45851: CALL_OW 268
45855: STR
45856: PUSH
45857: LD_STRING , 
45859: STR
45860: PUSH
45861: LD_VAR 0 3
45865: PPUSH
45866: LD_INT 2
45868: PPUSH
45869: CALL_OW 268
45873: STR
45874: PUSH
45875: LD_STRING ],
45877: STR
45878: PPUSH
45879: CALL_OW 561
// end ;
45883: GO 45777
45885: POP
45886: POP
// AddToLog ( ]; ) ;
45887: LD_STRING ];
45889: PPUSH
45890: CALL_OW 561
// end ;
45894: LD_VAR 0 2
45898: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45899: LD_INT 0
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
// if not area or not rate or not max then
45906: LD_VAR 0 1
45910: NOT
45911: PUSH
45912: LD_VAR 0 2
45916: NOT
45917: OR
45918: PUSH
45919: LD_VAR 0 4
45923: NOT
45924: OR
45925: IFFALSE 45929
// exit ;
45927: GO 46118
// while 1 do
45929: LD_INT 1
45931: IFFALSE 46118
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45933: LD_ADDR_VAR 0 9
45937: PUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: LD_INT 1
45945: PPUSH
45946: CALL_OW 287
45950: PUSH
45951: LD_INT 10
45953: MUL
45954: ST_TO_ADDR
// r := rate / 10 ;
45955: LD_ADDR_VAR 0 7
45959: PUSH
45960: LD_VAR 0 2
45964: PUSH
45965: LD_INT 10
45967: DIVREAL
45968: ST_TO_ADDR
// time := 1 1$00 ;
45969: LD_ADDR_VAR 0 8
45973: PUSH
45974: LD_INT 2100
45976: ST_TO_ADDR
// if amount < min then
45977: LD_VAR 0 9
45981: PUSH
45982: LD_VAR 0 3
45986: LESS
45987: IFFALSE 46005
// r := r * 2 else
45989: LD_ADDR_VAR 0 7
45993: PUSH
45994: LD_VAR 0 7
45998: PUSH
45999: LD_INT 2
46001: MUL
46002: ST_TO_ADDR
46003: GO 46031
// if amount > max then
46005: LD_VAR 0 9
46009: PUSH
46010: LD_VAR 0 4
46014: GREATER
46015: IFFALSE 46031
// r := r / 2 ;
46017: LD_ADDR_VAR 0 7
46021: PUSH
46022: LD_VAR 0 7
46026: PUSH
46027: LD_INT 2
46029: DIVREAL
46030: ST_TO_ADDR
// time := time / r ;
46031: LD_ADDR_VAR 0 8
46035: PUSH
46036: LD_VAR 0 8
46040: PUSH
46041: LD_VAR 0 7
46045: DIVREAL
46046: ST_TO_ADDR
// if time < 0 then
46047: LD_VAR 0 8
46051: PUSH
46052: LD_INT 0
46054: LESS
46055: IFFALSE 46072
// time := time * - 1 ;
46057: LD_ADDR_VAR 0 8
46061: PUSH
46062: LD_VAR 0 8
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: MUL
46071: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46072: LD_VAR 0 8
46076: PUSH
46077: LD_INT 35
46079: PPUSH
46080: LD_INT 875
46082: PPUSH
46083: CALL_OW 12
46087: PLUS
46088: PPUSH
46089: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46093: LD_INT 1
46095: PPUSH
46096: LD_INT 5
46098: PPUSH
46099: CALL_OW 12
46103: PPUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_INT 1
46111: PPUSH
46112: CALL_OW 55
// end ;
46116: GO 45929
// end ;
46118: LD_VAR 0 5
46122: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46123: LD_INT 0
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
// if not turrets or not factories then
46133: LD_VAR 0 1
46137: NOT
46138: PUSH
46139: LD_VAR 0 2
46143: NOT
46144: OR
46145: IFFALSE 46149
// exit ;
46147: GO 46456
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46149: LD_ADDR_VAR 0 10
46153: PUSH
46154: LD_INT 5
46156: PUSH
46157: LD_INT 6
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 4
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 5
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 24
46191: PUSH
46192: LD_INT 25
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 23
46201: PUSH
46202: LD_INT 27
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 42
46215: PUSH
46216: LD_INT 43
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 44
46225: PUSH
46226: LD_INT 46
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 45
46235: PUSH
46236: LD_INT 47
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
// result := [ ] ;
46253: LD_ADDR_VAR 0 3
46257: PUSH
46258: EMPTY
46259: ST_TO_ADDR
// for i in turrets do
46260: LD_ADDR_VAR 0 4
46264: PUSH
46265: LD_VAR 0 1
46269: PUSH
46270: FOR_IN
46271: IFFALSE 46454
// begin nat := GetNation ( i ) ;
46273: LD_ADDR_VAR 0 7
46277: PUSH
46278: LD_VAR 0 4
46282: PPUSH
46283: CALL_OW 248
46287: ST_TO_ADDR
// weapon := 0 ;
46288: LD_ADDR_VAR 0 8
46292: PUSH
46293: LD_INT 0
46295: ST_TO_ADDR
// if not nat then
46296: LD_VAR 0 7
46300: NOT
46301: IFFALSE 46305
// continue ;
46303: GO 46270
// for j in list [ nat ] do
46305: LD_ADDR_VAR 0 5
46309: PUSH
46310: LD_VAR 0 10
46314: PUSH
46315: LD_VAR 0 7
46319: ARRAY
46320: PUSH
46321: FOR_IN
46322: IFFALSE 46363
// if GetBWeapon ( i ) = j [ 1 ] then
46324: LD_VAR 0 4
46328: PPUSH
46329: CALL_OW 269
46333: PUSH
46334: LD_VAR 0 5
46338: PUSH
46339: LD_INT 1
46341: ARRAY
46342: EQUAL
46343: IFFALSE 46361
// begin weapon := j [ 2 ] ;
46345: LD_ADDR_VAR 0 8
46349: PUSH
46350: LD_VAR 0 5
46354: PUSH
46355: LD_INT 2
46357: ARRAY
46358: ST_TO_ADDR
// break ;
46359: GO 46363
// end ;
46361: GO 46321
46363: POP
46364: POP
// if not weapon then
46365: LD_VAR 0 8
46369: NOT
46370: IFFALSE 46374
// continue ;
46372: GO 46270
// for k in factories do
46374: LD_ADDR_VAR 0 6
46378: PUSH
46379: LD_VAR 0 2
46383: PUSH
46384: FOR_IN
46385: IFFALSE 46450
// begin weapons := AvailableWeaponList ( k ) ;
46387: LD_ADDR_VAR 0 9
46391: PUSH
46392: LD_VAR 0 6
46396: PPUSH
46397: CALL_OW 478
46401: ST_TO_ADDR
// if not weapons then
46402: LD_VAR 0 9
46406: NOT
46407: IFFALSE 46411
// continue ;
46409: GO 46384
// if weapon in weapons then
46411: LD_VAR 0 8
46415: PUSH
46416: LD_VAR 0 9
46420: IN
46421: IFFALSE 46448
// begin result := [ i , weapon ] ;
46423: LD_ADDR_VAR 0 3
46427: PUSH
46428: LD_VAR 0 4
46432: PUSH
46433: LD_VAR 0 8
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// exit ;
46442: POP
46443: POP
46444: POP
46445: POP
46446: GO 46456
// end ; end ;
46448: GO 46384
46450: POP
46451: POP
// end ;
46452: GO 46270
46454: POP
46455: POP
// end ;
46456: LD_VAR 0 3
46460: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46461: LD_INT 0
46463: PPUSH
// if not side or side > 8 then
46464: LD_VAR 0 3
46468: NOT
46469: PUSH
46470: LD_VAR 0 3
46474: PUSH
46475: LD_INT 8
46477: GREATER
46478: OR
46479: IFFALSE 46483
// exit ;
46481: GO 46542
// if not range then
46483: LD_VAR 0 4
46487: NOT
46488: IFFALSE 46499
// range := - 12 ;
46490: LD_ADDR_VAR 0 4
46494: PUSH
46495: LD_INT 12
46497: NEG
46498: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46499: LD_VAR 0 1
46503: PPUSH
46504: LD_VAR 0 2
46508: PPUSH
46509: LD_VAR 0 3
46513: PPUSH
46514: LD_VAR 0 4
46518: PPUSH
46519: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46523: LD_VAR 0 1
46527: PPUSH
46528: LD_VAR 0 2
46532: PPUSH
46533: LD_VAR 0 3
46537: PPUSH
46538: CALL_OW 331
// end ;
46542: LD_VAR 0 5
46546: RET
// export function Video ( mode ) ; begin
46547: LD_INT 0
46549: PPUSH
// ingame_video = mode ;
46550: LD_ADDR_OWVAR 52
46554: PUSH
46555: LD_VAR 0 1
46559: ST_TO_ADDR
// interface_hidden = mode ;
46560: LD_ADDR_OWVAR 54
46564: PUSH
46565: LD_VAR 0 1
46569: ST_TO_ADDR
// end ;
46570: LD_VAR 0 2
46574: RET
// export function Join ( array , element ) ; begin
46575: LD_INT 0
46577: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46578: LD_ADDR_VAR 0 3
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: LD_VAR 0 1
46592: PUSH
46593: LD_INT 1
46595: PLUS
46596: PPUSH
46597: LD_VAR 0 2
46601: PPUSH
46602: CALL_OW 1
46606: ST_TO_ADDR
// end ;
46607: LD_VAR 0 3
46611: RET
// export function JoinUnion ( array , element ) ; begin
46612: LD_INT 0
46614: PPUSH
// result := array union element ;
46615: LD_ADDR_VAR 0 3
46619: PUSH
46620: LD_VAR 0 1
46624: PUSH
46625: LD_VAR 0 2
46629: UNION
46630: ST_TO_ADDR
// end ;
46631: LD_VAR 0 3
46635: RET
// export function GetBehemoths ( side ) ; begin
46636: LD_INT 0
46638: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46639: LD_ADDR_VAR 0 2
46643: PUSH
46644: LD_INT 22
46646: PUSH
46647: LD_VAR 0 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 31
46658: PUSH
46659: LD_INT 25
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PPUSH
46670: CALL_OW 69
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 2
46679: RET
// export function Shuffle ( array ) ; var i , index ; begin
46680: LD_INT 0
46682: PPUSH
46683: PPUSH
46684: PPUSH
// result := [ ] ;
46685: LD_ADDR_VAR 0 2
46689: PUSH
46690: EMPTY
46691: ST_TO_ADDR
// if not array then
46692: LD_VAR 0 1
46696: NOT
46697: IFFALSE 46701
// exit ;
46699: GO 46800
// Randomize ;
46701: CALL_OW 10
// for i = array downto 1 do
46705: LD_ADDR_VAR 0 3
46709: PUSH
46710: DOUBLE
46711: LD_VAR 0 1
46715: INC
46716: ST_TO_ADDR
46717: LD_INT 1
46719: PUSH
46720: FOR_DOWNTO
46721: IFFALSE 46798
// begin index := rand ( 1 , array ) ;
46723: LD_ADDR_VAR 0 4
46727: PUSH
46728: LD_INT 1
46730: PPUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: CALL_OW 12
46740: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46741: LD_ADDR_VAR 0 2
46745: PUSH
46746: LD_VAR 0 2
46750: PPUSH
46751: LD_VAR 0 2
46755: PUSH
46756: LD_INT 1
46758: PLUS
46759: PPUSH
46760: LD_VAR 0 1
46764: PUSH
46765: LD_VAR 0 4
46769: ARRAY
46770: PPUSH
46771: CALL_OW 2
46775: ST_TO_ADDR
// array := Delete ( array , index ) ;
46776: LD_ADDR_VAR 0 1
46780: PUSH
46781: LD_VAR 0 1
46785: PPUSH
46786: LD_VAR 0 4
46790: PPUSH
46791: CALL_OW 3
46795: ST_TO_ADDR
// end ;
46796: GO 46720
46798: POP
46799: POP
// end ;
46800: LD_VAR 0 2
46804: RET
// export function GetBaseMaterials ( base ) ; begin
46805: LD_INT 0
46807: PPUSH
// result := [ 0 , 0 , 0 ] ;
46808: LD_ADDR_VAR 0 2
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// if not base then
46827: LD_VAR 0 1
46831: NOT
46832: IFFALSE 46836
// exit ;
46834: GO 46885
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46836: LD_ADDR_VAR 0 2
46840: PUSH
46841: LD_VAR 0 1
46845: PPUSH
46846: LD_INT 1
46848: PPUSH
46849: CALL_OW 275
46853: PUSH
46854: LD_VAR 0 1
46858: PPUSH
46859: LD_INT 2
46861: PPUSH
46862: CALL_OW 275
46866: PUSH
46867: LD_VAR 0 1
46871: PPUSH
46872: LD_INT 3
46874: PPUSH
46875: CALL_OW 275
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// end ;
46885: LD_VAR 0 2
46889: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46890: LD_INT 0
46892: PPUSH
46893: PPUSH
// result := array ;
46894: LD_ADDR_VAR 0 3
46898: PUSH
46899: LD_VAR 0 1
46903: ST_TO_ADDR
// if size >= result then
46904: LD_VAR 0 2
46908: PUSH
46909: LD_VAR 0 3
46913: GREATEREQUAL
46914: IFFALSE 46918
// exit ;
46916: GO 46968
// if size then
46918: LD_VAR 0 2
46922: IFFALSE 46968
// for i := array downto size do
46924: LD_ADDR_VAR 0 4
46928: PUSH
46929: DOUBLE
46930: LD_VAR 0 1
46934: INC
46935: ST_TO_ADDR
46936: LD_VAR 0 2
46940: PUSH
46941: FOR_DOWNTO
46942: IFFALSE 46966
// result := Delete ( result , result ) ;
46944: LD_ADDR_VAR 0 3
46948: PUSH
46949: LD_VAR 0 3
46953: PPUSH
46954: LD_VAR 0 3
46958: PPUSH
46959: CALL_OW 3
46963: ST_TO_ADDR
46964: GO 46941
46966: POP
46967: POP
// end ;
46968: LD_VAR 0 3
46972: RET
// export function ComExit ( unit ) ; var tmp ; begin
46973: LD_INT 0
46975: PPUSH
46976: PPUSH
// if not IsInUnit ( unit ) then
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 310
46986: NOT
46987: IFFALSE 46991
// exit ;
46989: GO 47051
// tmp := IsInUnit ( unit ) ;
46991: LD_ADDR_VAR 0 3
46995: PUSH
46996: LD_VAR 0 1
47000: PPUSH
47001: CALL_OW 310
47005: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47006: LD_VAR 0 3
47010: PPUSH
47011: CALL_OW 247
47015: PUSH
47016: LD_INT 2
47018: EQUAL
47019: IFFALSE 47032
// ComExitVehicle ( unit ) else
47021: LD_VAR 0 1
47025: PPUSH
47026: CALL_OW 121
47030: GO 47041
// ComExitBuilding ( unit ) ;
47032: LD_VAR 0 1
47036: PPUSH
47037: CALL_OW 122
// result := tmp ;
47041: LD_ADDR_VAR 0 2
47045: PUSH
47046: LD_VAR 0 3
47050: ST_TO_ADDR
// end ;
47051: LD_VAR 0 2
47055: RET
// export function ComExitAll ( units ) ; var i ; begin
47056: LD_INT 0
47058: PPUSH
47059: PPUSH
// if not units then
47060: LD_VAR 0 1
47064: NOT
47065: IFFALSE 47069
// exit ;
47067: GO 47095
// for i in units do
47069: LD_ADDR_VAR 0 3
47073: PUSH
47074: LD_VAR 0 1
47078: PUSH
47079: FOR_IN
47080: IFFALSE 47093
// ComExit ( i ) ;
47082: LD_VAR 0 3
47086: PPUSH
47087: CALL 46973 0 1
47091: GO 47079
47093: POP
47094: POP
// end ;
47095: LD_VAR 0 2
47099: RET
// export function ResetHc ; begin
47100: LD_INT 0
47102: PPUSH
// InitHc ;
47103: CALL_OW 19
// hc_importance := 0 ;
47107: LD_ADDR_OWVAR 32
47111: PUSH
47112: LD_INT 0
47114: ST_TO_ADDR
// end ;
47115: LD_VAR 0 1
47119: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47120: LD_INT 0
47122: PPUSH
47123: PPUSH
47124: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47125: LD_ADDR_VAR 0 6
47129: PUSH
47130: LD_VAR 0 1
47134: PUSH
47135: LD_VAR 0 3
47139: PLUS
47140: PUSH
47141: LD_INT 2
47143: DIV
47144: ST_TO_ADDR
// if _x < 0 then
47145: LD_VAR 0 6
47149: PUSH
47150: LD_INT 0
47152: LESS
47153: IFFALSE 47170
// _x := _x * - 1 ;
47155: LD_ADDR_VAR 0 6
47159: PUSH
47160: LD_VAR 0 6
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: MUL
47169: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47170: LD_ADDR_VAR 0 7
47174: PUSH
47175: LD_VAR 0 2
47179: PUSH
47180: LD_VAR 0 4
47184: PLUS
47185: PUSH
47186: LD_INT 2
47188: DIV
47189: ST_TO_ADDR
// if _y < 0 then
47190: LD_VAR 0 7
47194: PUSH
47195: LD_INT 0
47197: LESS
47198: IFFALSE 47215
// _y := _y * - 1 ;
47200: LD_ADDR_VAR 0 7
47204: PUSH
47205: LD_VAR 0 7
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: MUL
47214: ST_TO_ADDR
// result := [ _x , _y ] ;
47215: LD_ADDR_VAR 0 5
47219: PUSH
47220: LD_VAR 0 6
47224: PUSH
47225: LD_VAR 0 7
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: ST_TO_ADDR
// end ;
47234: LD_VAR 0 5
47238: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47239: LD_INT 0
47241: PPUSH
47242: PPUSH
47243: PPUSH
47244: PPUSH
// task := GetTaskList ( unit ) ;
47245: LD_ADDR_VAR 0 7
47249: PUSH
47250: LD_VAR 0 1
47254: PPUSH
47255: CALL_OW 437
47259: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47260: LD_VAR 0 7
47264: NOT
47265: PUSH
47266: LD_VAR 0 1
47270: PPUSH
47271: LD_VAR 0 2
47275: PPUSH
47276: CALL_OW 308
47280: NOT
47281: AND
47282: IFFALSE 47286
// exit ;
47284: GO 47404
// if IsInArea ( unit , area ) then
47286: LD_VAR 0 1
47290: PPUSH
47291: LD_VAR 0 2
47295: PPUSH
47296: CALL_OW 308
47300: IFFALSE 47318
// begin ComMoveToArea ( unit , goAway ) ;
47302: LD_VAR 0 1
47306: PPUSH
47307: LD_VAR 0 3
47311: PPUSH
47312: CALL_OW 113
// exit ;
47316: GO 47404
// end ; if task [ 1 ] [ 1 ] <> M then
47318: LD_VAR 0 7
47322: PUSH
47323: LD_INT 1
47325: ARRAY
47326: PUSH
47327: LD_INT 1
47329: ARRAY
47330: PUSH
47331: LD_STRING M
47333: NONEQUAL
47334: IFFALSE 47338
// exit ;
47336: GO 47404
// x := task [ 1 ] [ 2 ] ;
47338: LD_ADDR_VAR 0 5
47342: PUSH
47343: LD_VAR 0 7
47347: PUSH
47348: LD_INT 1
47350: ARRAY
47351: PUSH
47352: LD_INT 2
47354: ARRAY
47355: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47356: LD_ADDR_VAR 0 6
47360: PUSH
47361: LD_VAR 0 7
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PUSH
47370: LD_INT 3
47372: ARRAY
47373: ST_TO_ADDR
// if InArea ( x , y , area ) then
47374: LD_VAR 0 5
47378: PPUSH
47379: LD_VAR 0 6
47383: PPUSH
47384: LD_VAR 0 2
47388: PPUSH
47389: CALL_OW 309
47393: IFFALSE 47404
// ComStop ( unit ) ;
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 141
// end ;
47404: LD_VAR 0 4
47408: RET
// export function Abs ( value ) ; begin
47409: LD_INT 0
47411: PPUSH
// result := value ;
47412: LD_ADDR_VAR 0 2
47416: PUSH
47417: LD_VAR 0 1
47421: ST_TO_ADDR
// if value < 0 then
47422: LD_VAR 0 1
47426: PUSH
47427: LD_INT 0
47429: LESS
47430: IFFALSE 47447
// result := value * - 1 ;
47432: LD_ADDR_VAR 0 2
47436: PUSH
47437: LD_VAR 0 1
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: MUL
47446: ST_TO_ADDR
// end ;
47447: LD_VAR 0 2
47451: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47452: LD_INT 0
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
// if not unit or not building then
47462: LD_VAR 0 1
47466: NOT
47467: PUSH
47468: LD_VAR 0 2
47472: NOT
47473: OR
47474: IFFALSE 47478
// exit ;
47476: GO 47704
// x := GetX ( building ) ;
47478: LD_ADDR_VAR 0 4
47482: PUSH
47483: LD_VAR 0 2
47487: PPUSH
47488: CALL_OW 250
47492: ST_TO_ADDR
// y := GetY ( building ) ;
47493: LD_ADDR_VAR 0 6
47497: PUSH
47498: LD_VAR 0 2
47502: PPUSH
47503: CALL_OW 251
47507: ST_TO_ADDR
// d := GetDir ( building ) ;
47508: LD_ADDR_VAR 0 8
47512: PUSH
47513: LD_VAR 0 2
47517: PPUSH
47518: CALL_OW 254
47522: ST_TO_ADDR
// r := 4 ;
47523: LD_ADDR_VAR 0 9
47527: PUSH
47528: LD_INT 4
47530: ST_TO_ADDR
// for i := 1 to 5 do
47531: LD_ADDR_VAR 0 10
47535: PUSH
47536: DOUBLE
47537: LD_INT 1
47539: DEC
47540: ST_TO_ADDR
47541: LD_INT 5
47543: PUSH
47544: FOR_TO
47545: IFFALSE 47702
// begin _x := ShiftX ( x , d , r + i ) ;
47547: LD_ADDR_VAR 0 5
47551: PUSH
47552: LD_VAR 0 4
47556: PPUSH
47557: LD_VAR 0 8
47561: PPUSH
47562: LD_VAR 0 9
47566: PUSH
47567: LD_VAR 0 10
47571: PLUS
47572: PPUSH
47573: CALL_OW 272
47577: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47578: LD_ADDR_VAR 0 7
47582: PUSH
47583: LD_VAR 0 6
47587: PPUSH
47588: LD_VAR 0 8
47592: PPUSH
47593: LD_VAR 0 9
47597: PUSH
47598: LD_VAR 0 10
47602: PLUS
47603: PPUSH
47604: CALL_OW 273
47608: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47609: LD_VAR 0 5
47613: PPUSH
47614: LD_VAR 0 7
47618: PPUSH
47619: CALL_OW 488
47623: PUSH
47624: LD_VAR 0 5
47628: PPUSH
47629: LD_VAR 0 7
47633: PPUSH
47634: CALL_OW 428
47638: PPUSH
47639: CALL_OW 247
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: IN
47654: NOT
47655: AND
47656: IFFALSE 47700
// begin ComMoveXY ( unit , _x , _y ) ;
47658: LD_VAR 0 1
47662: PPUSH
47663: LD_VAR 0 5
47667: PPUSH
47668: LD_VAR 0 7
47672: PPUSH
47673: CALL_OW 111
// result := [ _x , _y ] ;
47677: LD_ADDR_VAR 0 3
47681: PUSH
47682: LD_VAR 0 5
47686: PUSH
47687: LD_VAR 0 7
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: ST_TO_ADDR
// exit ;
47696: POP
47697: POP
47698: GO 47704
// end ; end ;
47700: GO 47544
47702: POP
47703: POP
// end ;
47704: LD_VAR 0 3
47708: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47709: LD_INT 0
47711: PPUSH
47712: PPUSH
47713: PPUSH
// result := 0 ;
47714: LD_ADDR_VAR 0 3
47718: PUSH
47719: LD_INT 0
47721: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47722: LD_VAR 0 1
47726: PUSH
47727: LD_INT 0
47729: LESS
47730: PUSH
47731: LD_VAR 0 1
47735: PUSH
47736: LD_INT 8
47738: GREATER
47739: OR
47740: PUSH
47741: LD_VAR 0 2
47745: PUSH
47746: LD_INT 0
47748: LESS
47749: OR
47750: PUSH
47751: LD_VAR 0 2
47755: PUSH
47756: LD_INT 8
47758: GREATER
47759: OR
47760: IFFALSE 47764
// exit ;
47762: GO 47839
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47764: LD_ADDR_VAR 0 4
47768: PUSH
47769: LD_INT 22
47771: PUSH
47772: LD_VAR 0 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PPUSH
47781: CALL_OW 69
47785: PUSH
47786: FOR_IN
47787: IFFALSE 47837
// begin un := UnitShoot ( i ) ;
47789: LD_ADDR_VAR 0 5
47793: PUSH
47794: LD_VAR 0 4
47798: PPUSH
47799: CALL_OW 504
47803: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47804: LD_VAR 0 5
47808: PPUSH
47809: CALL_OW 255
47813: PUSH
47814: LD_VAR 0 1
47818: EQUAL
47819: IFFALSE 47835
// begin result := un ;
47821: LD_ADDR_VAR 0 3
47825: PUSH
47826: LD_VAR 0 5
47830: ST_TO_ADDR
// exit ;
47831: POP
47832: POP
47833: GO 47839
// end ; end ;
47835: GO 47786
47837: POP
47838: POP
// end ;
47839: LD_VAR 0 3
47843: RET
// export function GetCargoBay ( units ) ; begin
47844: LD_INT 0
47846: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47847: LD_ADDR_VAR 0 2
47851: PUSH
47852: LD_VAR 0 1
47856: PPUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 34
47862: PUSH
47863: LD_INT 12
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 34
47872: PUSH
47873: LD_INT 51
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 34
47882: PUSH
47883: LD_INT 32
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 34
47892: PUSH
47893: LD_INT 89
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: PPUSH
47907: CALL_OW 72
47911: ST_TO_ADDR
// end ;
47912: LD_VAR 0 2
47916: RET
// export function Negate ( value ) ; begin
47917: LD_INT 0
47919: PPUSH
// result := not value ;
47920: LD_ADDR_VAR 0 2
47924: PUSH
47925: LD_VAR 0 1
47929: NOT
47930: ST_TO_ADDR
// end ;
47931: LD_VAR 0 2
47935: RET
// export function Inc ( value ) ; begin
47936: LD_INT 0
47938: PPUSH
// result := value + 1 ;
47939: LD_ADDR_VAR 0 2
47943: PUSH
47944: LD_VAR 0 1
47948: PUSH
47949: LD_INT 1
47951: PLUS
47952: ST_TO_ADDR
// end ;
47953: LD_VAR 0 2
47957: RET
// export function Dec ( value ) ; begin
47958: LD_INT 0
47960: PPUSH
// result := value - 1 ;
47961: LD_ADDR_VAR 0 2
47965: PUSH
47966: LD_VAR 0 1
47970: PUSH
47971: LD_INT 1
47973: MINUS
47974: ST_TO_ADDR
// end ;
47975: LD_VAR 0 2
47979: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47980: LD_INT 0
47982: PPUSH
47983: PPUSH
47984: PPUSH
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47990: LD_VAR 0 1
47994: PPUSH
47995: LD_VAR 0 2
47999: PPUSH
48000: CALL_OW 488
48004: NOT
48005: PUSH
48006: LD_VAR 0 3
48010: PPUSH
48011: LD_VAR 0 4
48015: PPUSH
48016: CALL_OW 488
48020: NOT
48021: OR
48022: IFFALSE 48035
// begin result := - 1 ;
48024: LD_ADDR_VAR 0 5
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: ST_TO_ADDR
// exit ;
48033: GO 48270
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48035: LD_ADDR_VAR 0 12
48039: PUSH
48040: LD_VAR 0 1
48044: PPUSH
48045: LD_VAR 0 2
48049: PPUSH
48050: LD_VAR 0 3
48054: PPUSH
48055: LD_VAR 0 4
48059: PPUSH
48060: CALL 47120 0 4
48064: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48065: LD_ADDR_VAR 0 11
48069: PUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: LD_VAR 0 12
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PPUSH
48089: LD_VAR 0 12
48093: PUSH
48094: LD_INT 2
48096: ARRAY
48097: PPUSH
48098: CALL_OW 298
48102: ST_TO_ADDR
// distance := 9999 ;
48103: LD_ADDR_VAR 0 10
48107: PUSH
48108: LD_INT 9999
48110: ST_TO_ADDR
// for i := 0 to 5 do
48111: LD_ADDR_VAR 0 6
48115: PUSH
48116: DOUBLE
48117: LD_INT 0
48119: DEC
48120: ST_TO_ADDR
48121: LD_INT 5
48123: PUSH
48124: FOR_TO
48125: IFFALSE 48268
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48127: LD_ADDR_VAR 0 7
48131: PUSH
48132: LD_VAR 0 1
48136: PPUSH
48137: LD_VAR 0 6
48141: PPUSH
48142: LD_VAR 0 11
48146: PPUSH
48147: CALL_OW 272
48151: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48152: LD_ADDR_VAR 0 8
48156: PUSH
48157: LD_VAR 0 2
48161: PPUSH
48162: LD_VAR 0 6
48166: PPUSH
48167: LD_VAR 0 11
48171: PPUSH
48172: CALL_OW 273
48176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48177: LD_VAR 0 7
48181: PPUSH
48182: LD_VAR 0 8
48186: PPUSH
48187: CALL_OW 488
48191: NOT
48192: IFFALSE 48196
// continue ;
48194: GO 48124
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48196: LD_ADDR_VAR 0 9
48200: PUSH
48201: LD_VAR 0 12
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PPUSH
48210: LD_VAR 0 12
48214: PUSH
48215: LD_INT 2
48217: ARRAY
48218: PPUSH
48219: LD_VAR 0 7
48223: PPUSH
48224: LD_VAR 0 8
48228: PPUSH
48229: CALL_OW 298
48233: ST_TO_ADDR
// if tmp < distance then
48234: LD_VAR 0 9
48238: PUSH
48239: LD_VAR 0 10
48243: LESS
48244: IFFALSE 48266
// begin result := i ;
48246: LD_ADDR_VAR 0 5
48250: PUSH
48251: LD_VAR 0 6
48255: ST_TO_ADDR
// distance := tmp ;
48256: LD_ADDR_VAR 0 10
48260: PUSH
48261: LD_VAR 0 9
48265: ST_TO_ADDR
// end ; end ;
48266: GO 48124
48268: POP
48269: POP
// end ;
48270: LD_VAR 0 5
48274: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48275: LD_INT 0
48277: PPUSH
48278: PPUSH
// if not driver or not IsInUnit ( driver ) then
48279: LD_VAR 0 1
48283: NOT
48284: PUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 310
48294: NOT
48295: OR
48296: IFFALSE 48300
// exit ;
48298: GO 48390
// vehicle := IsInUnit ( driver ) ;
48300: LD_ADDR_VAR 0 3
48304: PUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: CALL_OW 310
48314: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48315: LD_VAR 0 1
48319: PPUSH
48320: LD_STRING \
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: PUSH
48350: LD_STRING E
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_VAR 0 3
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 446
// end ;
48390: LD_VAR 0 2
48394: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48395: LD_INT 0
48397: PPUSH
48398: PPUSH
// if not driver or not IsInUnit ( driver ) then
48399: LD_VAR 0 1
48403: NOT
48404: PUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 310
48414: NOT
48415: OR
48416: IFFALSE 48420
// exit ;
48418: GO 48510
// vehicle := IsInUnit ( driver ) ;
48420: LD_ADDR_VAR 0 3
48424: PUSH
48425: LD_VAR 0 1
48429: PPUSH
48430: CALL_OW 310
48434: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48435: LD_VAR 0 1
48439: PPUSH
48440: LD_STRING \
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: PUSH
48470: LD_STRING E
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_VAR 0 3
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PPUSH
48506: CALL_OW 447
// end ;
48510: LD_VAR 0 2
48514: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48515: LD_INT 0
48517: PPUSH
48518: PPUSH
48519: PPUSH
// tmp := [ ] ;
48520: LD_ADDR_VAR 0 5
48524: PUSH
48525: EMPTY
48526: ST_TO_ADDR
// for i in units do
48527: LD_ADDR_VAR 0 4
48531: PUSH
48532: LD_VAR 0 1
48536: PUSH
48537: FOR_IN
48538: IFFALSE 48576
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48540: LD_ADDR_VAR 0 5
48544: PUSH
48545: LD_VAR 0 5
48549: PPUSH
48550: LD_VAR 0 5
48554: PUSH
48555: LD_INT 1
48557: PLUS
48558: PPUSH
48559: LD_VAR 0 4
48563: PPUSH
48564: CALL_OW 256
48568: PPUSH
48569: CALL_OW 2
48573: ST_TO_ADDR
48574: GO 48537
48576: POP
48577: POP
// if not tmp then
48578: LD_VAR 0 5
48582: NOT
48583: IFFALSE 48587
// exit ;
48585: GO 48635
// if asc then
48587: LD_VAR 0 2
48591: IFFALSE 48615
// result := SortListByListAsc ( units , tmp ) else
48593: LD_ADDR_VAR 0 3
48597: PUSH
48598: LD_VAR 0 1
48602: PPUSH
48603: LD_VAR 0 5
48607: PPUSH
48608: CALL_OW 76
48612: ST_TO_ADDR
48613: GO 48635
// result := SortListByListDesc ( units , tmp ) ;
48615: LD_ADDR_VAR 0 3
48619: PUSH
48620: LD_VAR 0 1
48624: PPUSH
48625: LD_VAR 0 5
48629: PPUSH
48630: CALL_OW 77
48634: ST_TO_ADDR
// end ;
48635: LD_VAR 0 3
48639: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48640: LD_INT 0
48642: PPUSH
48643: PPUSH
// task := GetTaskList ( mech ) ;
48644: LD_ADDR_VAR 0 4
48648: PUSH
48649: LD_VAR 0 1
48653: PPUSH
48654: CALL_OW 437
48658: ST_TO_ADDR
// if not task then
48659: LD_VAR 0 4
48663: NOT
48664: IFFALSE 48668
// exit ;
48666: GO 48710
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48668: LD_ADDR_VAR 0 3
48672: PUSH
48673: LD_VAR 0 4
48677: PUSH
48678: LD_INT 1
48680: ARRAY
48681: PUSH
48682: LD_INT 1
48684: ARRAY
48685: PUSH
48686: LD_STRING r
48688: EQUAL
48689: PUSH
48690: LD_VAR 0 4
48694: PUSH
48695: LD_INT 1
48697: ARRAY
48698: PUSH
48699: LD_INT 4
48701: ARRAY
48702: PUSH
48703: LD_VAR 0 2
48707: EQUAL
48708: AND
48709: ST_TO_ADDR
// end ;
48710: LD_VAR 0 3
48714: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48715: LD_INT 0
48717: PPUSH
// SetDir ( unit , d ) ;
48718: LD_VAR 0 1
48722: PPUSH
48723: LD_VAR 0 4
48727: PPUSH
48728: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48732: LD_VAR 0 1
48736: PPUSH
48737: LD_VAR 0 2
48741: PPUSH
48742: LD_VAR 0 3
48746: PPUSH
48747: LD_VAR 0 5
48751: PPUSH
48752: CALL_OW 48
// end ;
48756: LD_VAR 0 6
48760: RET
// export function ToNaturalNumber ( number ) ; begin
48761: LD_INT 0
48763: PPUSH
// result := number div 1 ;
48764: LD_ADDR_VAR 0 2
48768: PUSH
48769: LD_VAR 0 1
48773: PUSH
48774: LD_INT 1
48776: DIV
48777: ST_TO_ADDR
// if number < 0 then
48778: LD_VAR 0 1
48782: PUSH
48783: LD_INT 0
48785: LESS
48786: IFFALSE 48796
// result := 0 ;
48788: LD_ADDR_VAR 0 2
48792: PUSH
48793: LD_INT 0
48795: ST_TO_ADDR
// end ;
48796: LD_VAR 0 2
48800: RET
// export function SortByClass ( units , class ) ; var un ; begin
48801: LD_INT 0
48803: PPUSH
48804: PPUSH
// if not units or not class then
48805: LD_VAR 0 1
48809: NOT
48810: PUSH
48811: LD_VAR 0 2
48815: NOT
48816: OR
48817: IFFALSE 48821
// exit ;
48819: GO 48916
// result := [ ] ;
48821: LD_ADDR_VAR 0 3
48825: PUSH
48826: EMPTY
48827: ST_TO_ADDR
// for un in units do
48828: LD_ADDR_VAR 0 4
48832: PUSH
48833: LD_VAR 0 1
48837: PUSH
48838: FOR_IN
48839: IFFALSE 48914
// if GetClass ( un ) = class then
48841: LD_VAR 0 4
48845: PPUSH
48846: CALL_OW 257
48850: PUSH
48851: LD_VAR 0 2
48855: EQUAL
48856: IFFALSE 48883
// result := Insert ( result , 1 , un ) else
48858: LD_ADDR_VAR 0 3
48862: PUSH
48863: LD_VAR 0 3
48867: PPUSH
48868: LD_INT 1
48870: PPUSH
48871: LD_VAR 0 4
48875: PPUSH
48876: CALL_OW 2
48880: ST_TO_ADDR
48881: GO 48912
// result := Replace ( result , result + 1 , un ) ;
48883: LD_ADDR_VAR 0 3
48887: PUSH
48888: LD_VAR 0 3
48892: PPUSH
48893: LD_VAR 0 3
48897: PUSH
48898: LD_INT 1
48900: PLUS
48901: PPUSH
48902: LD_VAR 0 4
48906: PPUSH
48907: CALL_OW 1
48911: ST_TO_ADDR
48912: GO 48838
48914: POP
48915: POP
// end ;
48916: LD_VAR 0 3
48920: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48921: LD_INT 0
48923: PPUSH
48924: PPUSH
48925: PPUSH
48926: PPUSH
48927: PPUSH
48928: PPUSH
48929: PPUSH
// result := [ ] ;
48930: LD_ADDR_VAR 0 4
48934: PUSH
48935: EMPTY
48936: ST_TO_ADDR
// if x - r < 0 then
48937: LD_VAR 0 1
48941: PUSH
48942: LD_VAR 0 3
48946: MINUS
48947: PUSH
48948: LD_INT 0
48950: LESS
48951: IFFALSE 48963
// min_x := 0 else
48953: LD_ADDR_VAR 0 8
48957: PUSH
48958: LD_INT 0
48960: ST_TO_ADDR
48961: GO 48979
// min_x := x - r ;
48963: LD_ADDR_VAR 0 8
48967: PUSH
48968: LD_VAR 0 1
48972: PUSH
48973: LD_VAR 0 3
48977: MINUS
48978: ST_TO_ADDR
// if y - r < 0 then
48979: LD_VAR 0 2
48983: PUSH
48984: LD_VAR 0 3
48988: MINUS
48989: PUSH
48990: LD_INT 0
48992: LESS
48993: IFFALSE 49005
// min_y := 0 else
48995: LD_ADDR_VAR 0 7
48999: PUSH
49000: LD_INT 0
49002: ST_TO_ADDR
49003: GO 49021
// min_y := y - r ;
49005: LD_ADDR_VAR 0 7
49009: PUSH
49010: LD_VAR 0 2
49014: PUSH
49015: LD_VAR 0 3
49019: MINUS
49020: ST_TO_ADDR
// max_x := x + r ;
49021: LD_ADDR_VAR 0 9
49025: PUSH
49026: LD_VAR 0 1
49030: PUSH
49031: LD_VAR 0 3
49035: PLUS
49036: ST_TO_ADDR
// max_y := y + r ;
49037: LD_ADDR_VAR 0 10
49041: PUSH
49042: LD_VAR 0 2
49046: PUSH
49047: LD_VAR 0 3
49051: PLUS
49052: ST_TO_ADDR
// for _x = min_x to max_x do
49053: LD_ADDR_VAR 0 5
49057: PUSH
49058: DOUBLE
49059: LD_VAR 0 8
49063: DEC
49064: ST_TO_ADDR
49065: LD_VAR 0 9
49069: PUSH
49070: FOR_TO
49071: IFFALSE 49172
// for _y = min_y to max_y do
49073: LD_ADDR_VAR 0 6
49077: PUSH
49078: DOUBLE
49079: LD_VAR 0 7
49083: DEC
49084: ST_TO_ADDR
49085: LD_VAR 0 10
49089: PUSH
49090: FOR_TO
49091: IFFALSE 49168
// begin if not ValidHex ( _x , _y ) then
49093: LD_VAR 0 5
49097: PPUSH
49098: LD_VAR 0 6
49102: PPUSH
49103: CALL_OW 488
49107: NOT
49108: IFFALSE 49112
// continue ;
49110: GO 49090
// if GetResourceTypeXY ( _x , _y ) then
49112: LD_VAR 0 5
49116: PPUSH
49117: LD_VAR 0 6
49121: PPUSH
49122: CALL_OW 283
49126: IFFALSE 49166
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49128: LD_ADDR_VAR 0 4
49132: PUSH
49133: LD_VAR 0 4
49137: PPUSH
49138: LD_VAR 0 4
49142: PUSH
49143: LD_INT 1
49145: PLUS
49146: PPUSH
49147: LD_VAR 0 5
49151: PUSH
49152: LD_VAR 0 6
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PPUSH
49161: CALL_OW 1
49165: ST_TO_ADDR
// end ;
49166: GO 49090
49168: POP
49169: POP
49170: GO 49070
49172: POP
49173: POP
// end ;
49174: LD_VAR 0 4
49178: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49179: LD_INT 0
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
// if not units then
49189: LD_VAR 0 1
49193: NOT
49194: IFFALSE 49198
// exit ;
49196: GO 49726
// result := UnitFilter ( units , [ f_ok ] ) ;
49198: LD_ADDR_VAR 0 3
49202: PUSH
49203: LD_VAR 0 1
49207: PPUSH
49208: LD_INT 50
49210: PUSH
49211: EMPTY
49212: LIST
49213: PPUSH
49214: CALL_OW 72
49218: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49219: LD_ADDR_VAR 0 8
49223: PUSH
49224: LD_VAR 0 1
49228: PUSH
49229: LD_INT 1
49231: ARRAY
49232: PPUSH
49233: CALL_OW 255
49237: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49238: LD_ADDR_VAR 0 10
49242: PUSH
49243: LD_INT 29
49245: PUSH
49246: LD_INT 91
49248: PUSH
49249: LD_INT 49
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// if not result then
49257: LD_VAR 0 3
49261: NOT
49262: IFFALSE 49266
// exit ;
49264: GO 49726
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49266: LD_ADDR_VAR 0 5
49270: PUSH
49271: LD_INT 81
49273: PUSH
49274: LD_VAR 0 8
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PPUSH
49283: CALL_OW 69
49287: ST_TO_ADDR
// for i in result do
49288: LD_ADDR_VAR 0 4
49292: PUSH
49293: LD_VAR 0 3
49297: PUSH
49298: FOR_IN
49299: IFFALSE 49724
// begin tag := GetTag ( i ) + 1 ;
49301: LD_ADDR_VAR 0 9
49305: PUSH
49306: LD_VAR 0 4
49310: PPUSH
49311: CALL_OW 110
49315: PUSH
49316: LD_INT 1
49318: PLUS
49319: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49320: LD_ADDR_VAR 0 7
49324: PUSH
49325: LD_VAR 0 4
49329: PPUSH
49330: CALL_OW 250
49334: PPUSH
49335: LD_VAR 0 4
49339: PPUSH
49340: CALL_OW 251
49344: PPUSH
49345: LD_INT 4
49347: PPUSH
49348: CALL 48921 0 3
49352: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49353: LD_VAR 0 4
49357: PPUSH
49358: CALL_OW 247
49362: PUSH
49363: LD_INT 2
49365: EQUAL
49366: PUSH
49367: LD_VAR 0 7
49371: PUSH
49372: LD_INT 2
49374: GREATER
49375: AND
49376: PUSH
49377: LD_VAR 0 4
49381: PPUSH
49382: CALL_OW 264
49386: PUSH
49387: LD_VAR 0 10
49391: IN
49392: NOT
49393: AND
49394: IFFALSE 49433
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49396: LD_VAR 0 4
49400: PPUSH
49401: LD_VAR 0 7
49405: PUSH
49406: LD_INT 1
49408: ARRAY
49409: PUSH
49410: LD_INT 1
49412: ARRAY
49413: PPUSH
49414: LD_VAR 0 7
49418: PUSH
49419: LD_INT 1
49421: ARRAY
49422: PUSH
49423: LD_INT 2
49425: ARRAY
49426: PPUSH
49427: CALL_OW 116
49431: GO 49722
// if path > tag then
49433: LD_VAR 0 2
49437: PUSH
49438: LD_VAR 0 9
49442: GREATER
49443: IFFALSE 49651
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49445: LD_ADDR_VAR 0 6
49449: PUSH
49450: LD_VAR 0 5
49454: PPUSH
49455: LD_INT 91
49457: PUSH
49458: LD_VAR 0 4
49462: PUSH
49463: LD_INT 8
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: PPUSH
49471: CALL_OW 72
49475: ST_TO_ADDR
// if nearEnemy then
49476: LD_VAR 0 6
49480: IFFALSE 49549
// begin if GetWeapon ( i ) = ru_time_lapser then
49482: LD_VAR 0 4
49486: PPUSH
49487: CALL_OW 264
49491: PUSH
49492: LD_INT 49
49494: EQUAL
49495: IFFALSE 49523
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49497: LD_VAR 0 4
49501: PPUSH
49502: LD_VAR 0 6
49506: PPUSH
49507: LD_VAR 0 4
49511: PPUSH
49512: CALL_OW 74
49516: PPUSH
49517: CALL_OW 112
49521: GO 49547
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49523: LD_VAR 0 4
49527: PPUSH
49528: LD_VAR 0 6
49532: PPUSH
49533: LD_VAR 0 4
49537: PPUSH
49538: CALL_OW 74
49542: PPUSH
49543: CALL 50797 0 2
// end else
49547: GO 49649
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49549: LD_VAR 0 4
49553: PPUSH
49554: LD_VAR 0 2
49558: PUSH
49559: LD_VAR 0 9
49563: ARRAY
49564: PUSH
49565: LD_INT 1
49567: ARRAY
49568: PPUSH
49569: LD_VAR 0 2
49573: PUSH
49574: LD_VAR 0 9
49578: ARRAY
49579: PUSH
49580: LD_INT 2
49582: ARRAY
49583: PPUSH
49584: CALL_OW 297
49588: PUSH
49589: LD_INT 6
49591: GREATER
49592: IFFALSE 49635
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49594: LD_VAR 0 4
49598: PPUSH
49599: LD_VAR 0 2
49603: PUSH
49604: LD_VAR 0 9
49608: ARRAY
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: PPUSH
49614: LD_VAR 0 2
49618: PUSH
49619: LD_VAR 0 9
49623: ARRAY
49624: PUSH
49625: LD_INT 2
49627: ARRAY
49628: PPUSH
49629: CALL_OW 114
49633: GO 49649
// SetTag ( i , tag ) ;
49635: LD_VAR 0 4
49639: PPUSH
49640: LD_VAR 0 9
49644: PPUSH
49645: CALL_OW 109
// end else
49649: GO 49722
// if enemy then
49651: LD_VAR 0 5
49655: IFFALSE 49722
// begin if GetWeapon ( i ) = ru_time_lapser then
49657: LD_VAR 0 4
49661: PPUSH
49662: CALL_OW 264
49666: PUSH
49667: LD_INT 49
49669: EQUAL
49670: IFFALSE 49698
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49672: LD_VAR 0 4
49676: PPUSH
49677: LD_VAR 0 5
49681: PPUSH
49682: LD_VAR 0 4
49686: PPUSH
49687: CALL_OW 74
49691: PPUSH
49692: CALL_OW 112
49696: GO 49722
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49698: LD_VAR 0 4
49702: PPUSH
49703: LD_VAR 0 5
49707: PPUSH
49708: LD_VAR 0 4
49712: PPUSH
49713: CALL_OW 74
49717: PPUSH
49718: CALL 50797 0 2
// end ; end ;
49722: GO 49298
49724: POP
49725: POP
// end ;
49726: LD_VAR 0 3
49730: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49731: LD_INT 0
49733: PPUSH
49734: PPUSH
49735: PPUSH
// if not unit or IsInUnit ( unit ) then
49736: LD_VAR 0 1
49740: NOT
49741: PUSH
49742: LD_VAR 0 1
49746: PPUSH
49747: CALL_OW 310
49751: OR
49752: IFFALSE 49756
// exit ;
49754: GO 49847
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49756: LD_ADDR_VAR 0 4
49760: PUSH
49761: LD_VAR 0 1
49765: PPUSH
49766: CALL_OW 250
49770: PPUSH
49771: LD_VAR 0 2
49775: PPUSH
49776: LD_INT 1
49778: PPUSH
49779: CALL_OW 272
49783: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49784: LD_ADDR_VAR 0 5
49788: PUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: CALL_OW 251
49798: PPUSH
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_INT 1
49806: PPUSH
49807: CALL_OW 273
49811: ST_TO_ADDR
// if ValidHex ( x , y ) then
49812: LD_VAR 0 4
49816: PPUSH
49817: LD_VAR 0 5
49821: PPUSH
49822: CALL_OW 488
49826: IFFALSE 49847
// ComTurnXY ( unit , x , y ) ;
49828: LD_VAR 0 1
49832: PPUSH
49833: LD_VAR 0 4
49837: PPUSH
49838: LD_VAR 0 5
49842: PPUSH
49843: CALL_OW 118
// end ;
49847: LD_VAR 0 3
49851: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49852: LD_INT 0
49854: PPUSH
49855: PPUSH
// result := false ;
49856: LD_ADDR_VAR 0 3
49860: PUSH
49861: LD_INT 0
49863: ST_TO_ADDR
// if not units then
49864: LD_VAR 0 2
49868: NOT
49869: IFFALSE 49873
// exit ;
49871: GO 49918
// for i in units do
49873: LD_ADDR_VAR 0 4
49877: PUSH
49878: LD_VAR 0 2
49882: PUSH
49883: FOR_IN
49884: IFFALSE 49916
// if See ( side , i ) then
49886: LD_VAR 0 1
49890: PPUSH
49891: LD_VAR 0 4
49895: PPUSH
49896: CALL_OW 292
49900: IFFALSE 49914
// begin result := true ;
49902: LD_ADDR_VAR 0 3
49906: PUSH
49907: LD_INT 1
49909: ST_TO_ADDR
// exit ;
49910: POP
49911: POP
49912: GO 49918
// end ;
49914: GO 49883
49916: POP
49917: POP
// end ;
49918: LD_VAR 0 3
49922: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49923: LD_INT 0
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
// if not unit or not points then
49929: LD_VAR 0 1
49933: NOT
49934: PUSH
49935: LD_VAR 0 2
49939: NOT
49940: OR
49941: IFFALSE 49945
// exit ;
49943: GO 50035
// dist := 99999 ;
49945: LD_ADDR_VAR 0 5
49949: PUSH
49950: LD_INT 99999
49952: ST_TO_ADDR
// for i in points do
49953: LD_ADDR_VAR 0 4
49957: PUSH
49958: LD_VAR 0 2
49962: PUSH
49963: FOR_IN
49964: IFFALSE 50033
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49966: LD_ADDR_VAR 0 6
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: LD_VAR 0 4
49980: PUSH
49981: LD_INT 1
49983: ARRAY
49984: PPUSH
49985: LD_VAR 0 4
49989: PUSH
49990: LD_INT 2
49992: ARRAY
49993: PPUSH
49994: CALL_OW 297
49998: ST_TO_ADDR
// if tmpDist < dist then
49999: LD_VAR 0 6
50003: PUSH
50004: LD_VAR 0 5
50008: LESS
50009: IFFALSE 50031
// begin result := i ;
50011: LD_ADDR_VAR 0 3
50015: PUSH
50016: LD_VAR 0 4
50020: ST_TO_ADDR
// dist := tmpDist ;
50021: LD_ADDR_VAR 0 5
50025: PUSH
50026: LD_VAR 0 6
50030: ST_TO_ADDR
// end ; end ;
50031: GO 49963
50033: POP
50034: POP
// end ;
50035: LD_VAR 0 3
50039: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50040: LD_INT 0
50042: PPUSH
// uc_side := side ;
50043: LD_ADDR_OWVAR 20
50047: PUSH
50048: LD_VAR 0 1
50052: ST_TO_ADDR
// uc_nation := 3 ;
50053: LD_ADDR_OWVAR 21
50057: PUSH
50058: LD_INT 3
50060: ST_TO_ADDR
// vc_chassis := 25 ;
50061: LD_ADDR_OWVAR 37
50065: PUSH
50066: LD_INT 25
50068: ST_TO_ADDR
// vc_engine := engine_siberite ;
50069: LD_ADDR_OWVAR 39
50073: PUSH
50074: LD_INT 3
50076: ST_TO_ADDR
// vc_control := control_computer ;
50077: LD_ADDR_OWVAR 38
50081: PUSH
50082: LD_INT 3
50084: ST_TO_ADDR
// vc_weapon := 59 ;
50085: LD_ADDR_OWVAR 40
50089: PUSH
50090: LD_INT 59
50092: ST_TO_ADDR
// result := CreateVehicle ;
50093: LD_ADDR_VAR 0 5
50097: PUSH
50098: CALL_OW 45
50102: ST_TO_ADDR
// SetDir ( result , d ) ;
50103: LD_VAR 0 5
50107: PPUSH
50108: LD_VAR 0 4
50112: PPUSH
50113: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50117: LD_VAR 0 5
50121: PPUSH
50122: LD_VAR 0 2
50126: PPUSH
50127: LD_VAR 0 3
50131: PPUSH
50132: LD_INT 0
50134: PPUSH
50135: CALL_OW 48
// end ;
50139: LD_VAR 0 5
50143: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50144: LD_INT 0
50146: PPUSH
50147: PPUSH
50148: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50149: LD_ADDR_VAR 0 2
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50172: LD_VAR 0 1
50176: NOT
50177: PUSH
50178: LD_VAR 0 1
50182: PPUSH
50183: CALL_OW 264
50187: PUSH
50188: LD_INT 12
50190: PUSH
50191: LD_INT 51
50193: PUSH
50194: LD_INT 32
50196: PUSH
50197: LD_INT 89
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: IN
50206: NOT
50207: OR
50208: IFFALSE 50212
// exit ;
50210: GO 50310
// for i := 1 to 3 do
50212: LD_ADDR_VAR 0 3
50216: PUSH
50217: DOUBLE
50218: LD_INT 1
50220: DEC
50221: ST_TO_ADDR
50222: LD_INT 3
50224: PUSH
50225: FOR_TO
50226: IFFALSE 50308
// begin tmp := GetCargo ( cargo , i ) ;
50228: LD_ADDR_VAR 0 4
50232: PUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: LD_VAR 0 3
50242: PPUSH
50243: CALL_OW 289
50247: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_VAR 0 2
50257: PPUSH
50258: LD_VAR 0 3
50262: PPUSH
50263: LD_VAR 0 4
50267: PPUSH
50268: CALL_OW 1
50272: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50273: LD_ADDR_VAR 0 2
50277: PUSH
50278: LD_VAR 0 2
50282: PPUSH
50283: LD_INT 4
50285: PPUSH
50286: LD_VAR 0 2
50290: PUSH
50291: LD_INT 4
50293: ARRAY
50294: PUSH
50295: LD_VAR 0 4
50299: PLUS
50300: PPUSH
50301: CALL_OW 1
50305: ST_TO_ADDR
// end ;
50306: GO 50225
50308: POP
50309: POP
// end ;
50310: LD_VAR 0 2
50314: RET
// export function Length ( array ) ; begin
50315: LD_INT 0
50317: PPUSH
// result := array + 0 ;
50318: LD_ADDR_VAR 0 2
50322: PUSH
50323: LD_VAR 0 1
50327: PUSH
50328: LD_INT 0
50330: PLUS
50331: ST_TO_ADDR
// end ;
50332: LD_VAR 0 2
50336: RET
// export function PrepareArray ( array ) ; begin
50337: LD_INT 0
50339: PPUSH
// result := array diff 0 ;
50340: LD_ADDR_VAR 0 2
50344: PUSH
50345: LD_VAR 0 1
50349: PUSH
50350: LD_INT 0
50352: DIFF
50353: ST_TO_ADDR
// if not result [ 1 ] then
50354: LD_VAR 0 2
50358: PUSH
50359: LD_INT 1
50361: ARRAY
50362: NOT
50363: IFFALSE 50383
// result := Delete ( result , 1 ) ;
50365: LD_ADDR_VAR 0 2
50369: PUSH
50370: LD_VAR 0 2
50374: PPUSH
50375: LD_INT 1
50377: PPUSH
50378: CALL_OW 3
50382: ST_TO_ADDR
// end ;
50383: LD_VAR 0 2
50387: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50388: LD_INT 0
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
// sibRocketRange := 25 ;
50394: LD_ADDR_VAR 0 6
50398: PUSH
50399: LD_INT 25
50401: ST_TO_ADDR
// result := false ;
50402: LD_ADDR_VAR 0 4
50406: PUSH
50407: LD_INT 0
50409: ST_TO_ADDR
// for i := 0 to 5 do
50410: LD_ADDR_VAR 0 5
50414: PUSH
50415: DOUBLE
50416: LD_INT 0
50418: DEC
50419: ST_TO_ADDR
50420: LD_INT 5
50422: PUSH
50423: FOR_TO
50424: IFFALSE 50491
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50426: LD_VAR 0 1
50430: PPUSH
50431: LD_VAR 0 5
50435: PPUSH
50436: LD_VAR 0 6
50440: PPUSH
50441: CALL_OW 272
50445: PPUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: LD_VAR 0 5
50455: PPUSH
50456: LD_VAR 0 6
50460: PPUSH
50461: CALL_OW 273
50465: PPUSH
50466: LD_VAR 0 3
50470: PPUSH
50471: CALL_OW 309
50475: IFFALSE 50489
// begin result := true ;
50477: LD_ADDR_VAR 0 4
50481: PUSH
50482: LD_INT 1
50484: ST_TO_ADDR
// exit ;
50485: POP
50486: POP
50487: GO 50493
// end ;
50489: GO 50423
50491: POP
50492: POP
// end ;
50493: LD_VAR 0 4
50497: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50498: LD_INT 0
50500: PPUSH
50501: PPUSH
50502: PPUSH
// if btype = b_depot then
50503: LD_VAR 0 2
50507: PUSH
50508: LD_INT 0
50510: EQUAL
50511: IFFALSE 50523
// begin result := true ;
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_INT 1
50520: ST_TO_ADDR
// exit ;
50521: GO 50639
// end ; pom := GetBase ( depot ) ;
50523: LD_ADDR_VAR 0 4
50527: PUSH
50528: LD_VAR 0 1
50532: PPUSH
50533: CALL_OW 274
50537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50538: LD_ADDR_VAR 0 5
50542: PUSH
50543: LD_VAR 0 2
50547: PPUSH
50548: LD_VAR 0 1
50552: PPUSH
50553: CALL_OW 248
50557: PPUSH
50558: CALL_OW 450
50562: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50563: LD_ADDR_VAR 0 3
50567: PUSH
50568: LD_VAR 0 4
50572: PPUSH
50573: LD_INT 1
50575: PPUSH
50576: CALL_OW 275
50580: PUSH
50581: LD_VAR 0 5
50585: PUSH
50586: LD_INT 1
50588: ARRAY
50589: GREATEREQUAL
50590: PUSH
50591: LD_VAR 0 4
50595: PPUSH
50596: LD_INT 2
50598: PPUSH
50599: CALL_OW 275
50603: PUSH
50604: LD_VAR 0 5
50608: PUSH
50609: LD_INT 2
50611: ARRAY
50612: GREATEREQUAL
50613: AND
50614: PUSH
50615: LD_VAR 0 4
50619: PPUSH
50620: LD_INT 3
50622: PPUSH
50623: CALL_OW 275
50627: PUSH
50628: LD_VAR 0 5
50632: PUSH
50633: LD_INT 3
50635: ARRAY
50636: GREATEREQUAL
50637: AND
50638: ST_TO_ADDR
// end ;
50639: LD_VAR 0 3
50643: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50644: LD_INT 0
50646: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50647: LD_VAR 0 1
50651: PPUSH
50652: LD_VAR 0 2
50656: PPUSH
50657: LD_INT 0
50659: PPUSH
50660: LD_INT 0
50662: PPUSH
50663: LD_INT 1
50665: PPUSH
50666: LD_INT 0
50668: PPUSH
50669: CALL_OW 587
// end ;
50673: LD_VAR 0 3
50677: RET
// export function CenterOnNow ( unit ) ; begin
50678: LD_INT 0
50680: PPUSH
// result := IsInUnit ( unit ) ;
50681: LD_ADDR_VAR 0 2
50685: PUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 310
50695: ST_TO_ADDR
// if not result then
50696: LD_VAR 0 2
50700: NOT
50701: IFFALSE 50713
// result := unit ;
50703: LD_ADDR_VAR 0 2
50707: PUSH
50708: LD_VAR 0 1
50712: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50713: LD_VAR 0 1
50717: PPUSH
50718: CALL_OW 87
// end ;
50722: LD_VAR 0 2
50726: RET
// export function ComMoveHex ( unit , hex ) ; begin
50727: LD_INT 0
50729: PPUSH
// if not hex then
50730: LD_VAR 0 2
50734: NOT
50735: IFFALSE 50739
// exit ;
50737: GO 50792
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50739: LD_VAR 0 2
50743: PUSH
50744: LD_INT 1
50746: ARRAY
50747: PPUSH
50748: LD_VAR 0 2
50752: PUSH
50753: LD_INT 2
50755: ARRAY
50756: PPUSH
50757: CALL_OW 428
50761: IFFALSE 50765
// exit ;
50763: GO 50792
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50765: LD_VAR 0 1
50769: PPUSH
50770: LD_VAR 0 2
50774: PUSH
50775: LD_INT 1
50777: ARRAY
50778: PPUSH
50779: LD_VAR 0 2
50783: PUSH
50784: LD_INT 2
50786: ARRAY
50787: PPUSH
50788: CALL_OW 111
// end ;
50792: LD_VAR 0 3
50796: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50797: LD_INT 0
50799: PPUSH
50800: PPUSH
50801: PPUSH
// if not unit or not enemy then
50802: LD_VAR 0 1
50806: NOT
50807: PUSH
50808: LD_VAR 0 2
50812: NOT
50813: OR
50814: IFFALSE 50818
// exit ;
50816: GO 50942
// x := GetX ( enemy ) ;
50818: LD_ADDR_VAR 0 4
50822: PUSH
50823: LD_VAR 0 2
50827: PPUSH
50828: CALL_OW 250
50832: ST_TO_ADDR
// y := GetY ( enemy ) ;
50833: LD_ADDR_VAR 0 5
50837: PUSH
50838: LD_VAR 0 2
50842: PPUSH
50843: CALL_OW 251
50847: ST_TO_ADDR
// if ValidHex ( x , y ) then
50848: LD_VAR 0 4
50852: PPUSH
50853: LD_VAR 0 5
50857: PPUSH
50858: CALL_OW 488
50862: IFFALSE 50942
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
50864: LD_VAR 0 2
50868: PPUSH
50869: CALL_OW 247
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: IN
50884: PUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 255
50894: PPUSH
50895: LD_VAR 0 2
50899: PPUSH
50900: CALL_OW 292
50904: OR
50905: IFFALSE 50923
// ComAttackUnit ( unit , enemy ) else
50907: LD_VAR 0 1
50911: PPUSH
50912: LD_VAR 0 2
50916: PPUSH
50917: CALL_OW 115
50921: GO 50942
// ComAgressiveMove ( unit , x , y ) ;
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_VAR 0 4
50932: PPUSH
50933: LD_VAR 0 5
50937: PPUSH
50938: CALL_OW 114
// end ;
50942: LD_VAR 0 3
50946: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50947: LD_INT 0
50949: PPUSH
50950: PPUSH
50951: PPUSH
// list := AreaToList ( area , 0 ) ;
50952: LD_ADDR_VAR 0 5
50956: PUSH
50957: LD_VAR 0 1
50961: PPUSH
50962: LD_INT 0
50964: PPUSH
50965: CALL_OW 517
50969: ST_TO_ADDR
// if not list then
50970: LD_VAR 0 5
50974: NOT
50975: IFFALSE 50979
// exit ;
50977: GO 51109
// if all then
50979: LD_VAR 0 2
50983: IFFALSE 51071
// begin for i := 1 to list [ 1 ] do
50985: LD_ADDR_VAR 0 4
50989: PUSH
50990: DOUBLE
50991: LD_INT 1
50993: DEC
50994: ST_TO_ADDR
50995: LD_VAR 0 5
50999: PUSH
51000: LD_INT 1
51002: ARRAY
51003: PUSH
51004: FOR_TO
51005: IFFALSE 51067
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51007: LD_ADDR_VAR 0 3
51011: PUSH
51012: LD_VAR 0 3
51016: PPUSH
51017: LD_VAR 0 3
51021: PUSH
51022: LD_INT 1
51024: PLUS
51025: PPUSH
51026: LD_VAR 0 5
51030: PUSH
51031: LD_INT 1
51033: ARRAY
51034: PUSH
51035: LD_VAR 0 4
51039: ARRAY
51040: PUSH
51041: LD_VAR 0 5
51045: PUSH
51046: LD_INT 2
51048: ARRAY
51049: PUSH
51050: LD_VAR 0 4
51054: ARRAY
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PPUSH
51060: CALL_OW 1
51064: ST_TO_ADDR
51065: GO 51004
51067: POP
51068: POP
// exit ;
51069: GO 51109
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51071: LD_ADDR_VAR 0 3
51075: PUSH
51076: LD_VAR 0 5
51080: PUSH
51081: LD_INT 1
51083: ARRAY
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PUSH
51089: LD_VAR 0 5
51093: PUSH
51094: LD_INT 2
51096: ARRAY
51097: PUSH
51098: LD_INT 1
51100: ARRAY
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: ST_TO_ADDR
// end ;
51109: LD_VAR 0 3
51113: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51114: LD_INT 0
51116: PPUSH
51117: PPUSH
// list := AreaToList ( area , 0 ) ;
51118: LD_ADDR_VAR 0 4
51122: PUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: LD_INT 0
51130: PPUSH
51131: CALL_OW 517
51135: ST_TO_ADDR
// if not list then
51136: LD_VAR 0 4
51140: NOT
51141: IFFALSE 51145
// exit ;
51143: GO 51186
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51145: LD_ADDR_VAR 0 3
51149: PUSH
51150: LD_VAR 0 4
51154: PUSH
51155: LD_INT 1
51157: ARRAY
51158: PUSH
51159: LD_INT 1
51161: ARRAY
51162: PUSH
51163: LD_VAR 0 4
51167: PUSH
51168: LD_INT 2
51170: ARRAY
51171: PUSH
51172: LD_INT 1
51174: ARRAY
51175: PUSH
51176: LD_VAR 0 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// end ;
51186: LD_VAR 0 3
51190: RET
// export function First ( array ) ; begin
51191: LD_INT 0
51193: PPUSH
// if not array then
51194: LD_VAR 0 1
51198: NOT
51199: IFFALSE 51203
// exit ;
51201: GO 51217
// result := array [ 1 ] ;
51203: LD_ADDR_VAR 0 2
51207: PUSH
51208: LD_VAR 0 1
51212: PUSH
51213: LD_INT 1
51215: ARRAY
51216: ST_TO_ADDR
// end ;
51217: LD_VAR 0 2
51221: RET
// export function Last ( array ) ; begin
51222: LD_INT 0
51224: PPUSH
// if not array then
51225: LD_VAR 0 1
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51250
// result := array [ array ] ;
51234: LD_ADDR_VAR 0 2
51238: PUSH
51239: LD_VAR 0 1
51243: PUSH
51244: LD_VAR 0 1
51248: ARRAY
51249: ST_TO_ADDR
// end ;
51250: LD_VAR 0 2
51254: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51255: LD_INT 0
51257: PPUSH
51258: PPUSH
// result := [ ] ;
51259: LD_ADDR_VAR 0 5
51263: PUSH
51264: EMPTY
51265: ST_TO_ADDR
// if not array then
51266: LD_VAR 0 1
51270: NOT
51271: IFFALSE 51275
// exit ;
51273: GO 51387
// for i := 1 to array do
51275: LD_ADDR_VAR 0 6
51279: PUSH
51280: DOUBLE
51281: LD_INT 1
51283: DEC
51284: ST_TO_ADDR
51285: LD_VAR 0 1
51289: PUSH
51290: FOR_TO
51291: IFFALSE 51385
// if array [ i ] [ index ] = value then
51293: LD_VAR 0 1
51297: PUSH
51298: LD_VAR 0 6
51302: ARRAY
51303: PUSH
51304: LD_VAR 0 2
51308: ARRAY
51309: PUSH
51310: LD_VAR 0 3
51314: EQUAL
51315: IFFALSE 51383
// begin if indexColumn then
51317: LD_VAR 0 4
51321: IFFALSE 51357
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 5
51332: PPUSH
51333: LD_VAR 0 1
51337: PUSH
51338: LD_VAR 0 6
51342: ARRAY
51343: PUSH
51344: LD_VAR 0 4
51348: ARRAY
51349: PPUSH
51350: CALL 46575 0 2
51354: ST_TO_ADDR
51355: GO 51383
// result := Join ( result , array [ i ] ) ;
51357: LD_ADDR_VAR 0 5
51361: PUSH
51362: LD_VAR 0 5
51366: PPUSH
51367: LD_VAR 0 1
51371: PUSH
51372: LD_VAR 0 6
51376: ARRAY
51377: PPUSH
51378: CALL 46575 0 2
51382: ST_TO_ADDR
// end ;
51383: GO 51290
51385: POP
51386: POP
// end ;
51387: LD_VAR 0 5
51391: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51392: LD_INT 0
51394: PPUSH
// if not vehicles or not parkingPoint then
51395: LD_VAR 0 1
51399: NOT
51400: PUSH
51401: LD_VAR 0 2
51405: NOT
51406: OR
51407: IFFALSE 51411
// exit ;
51409: GO 51509
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51411: LD_ADDR_VAR 0 1
51415: PUSH
51416: LD_VAR 0 1
51420: PPUSH
51421: LD_INT 50
51423: PUSH
51424: EMPTY
51425: LIST
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: LD_INT 92
51432: PUSH
51433: LD_VAR 0 2
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PUSH
51442: LD_VAR 0 2
51446: PUSH
51447: LD_INT 2
51449: ARRAY
51450: PUSH
51451: LD_INT 8
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PPUSH
51468: CALL_OW 72
51472: ST_TO_ADDR
// if not vehicles then
51473: LD_VAR 0 1
51477: NOT
51478: IFFALSE 51482
// exit ;
51480: GO 51509
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51482: LD_VAR 0 1
51486: PPUSH
51487: LD_VAR 0 2
51491: PUSH
51492: LD_INT 1
51494: ARRAY
51495: PPUSH
51496: LD_VAR 0 2
51500: PUSH
51501: LD_INT 2
51503: ARRAY
51504: PPUSH
51505: CALL_OW 111
// end ;
51509: LD_VAR 0 3
51513: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51514: LD_INT 0
51516: PPUSH
51517: PPUSH
51518: PPUSH
// if not side or not area then
51519: LD_VAR 0 1
51523: NOT
51524: PUSH
51525: LD_VAR 0 2
51529: NOT
51530: OR
51531: IFFALSE 51535
// exit ;
51533: GO 51654
// tmp := AreaToList ( area , 0 ) ;
51535: LD_ADDR_VAR 0 5
51539: PUSH
51540: LD_VAR 0 2
51544: PPUSH
51545: LD_INT 0
51547: PPUSH
51548: CALL_OW 517
51552: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51553: LD_ADDR_VAR 0 4
51557: PUSH
51558: DOUBLE
51559: LD_INT 1
51561: DEC
51562: ST_TO_ADDR
51563: LD_VAR 0 5
51567: PUSH
51568: LD_INT 1
51570: ARRAY
51571: PUSH
51572: FOR_TO
51573: IFFALSE 51652
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51575: LD_VAR 0 5
51579: PUSH
51580: LD_INT 1
51582: ARRAY
51583: PUSH
51584: LD_VAR 0 4
51588: ARRAY
51589: PPUSH
51590: LD_VAR 0 5
51594: PUSH
51595: LD_INT 2
51597: ARRAY
51598: PUSH
51599: LD_VAR 0 4
51603: ARRAY
51604: PPUSH
51605: CALL_OW 351
51609: IFFALSE 51650
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51611: LD_VAR 0 5
51615: PUSH
51616: LD_INT 1
51618: ARRAY
51619: PUSH
51620: LD_VAR 0 4
51624: ARRAY
51625: PPUSH
51626: LD_VAR 0 5
51630: PUSH
51631: LD_INT 2
51633: ARRAY
51634: PUSH
51635: LD_VAR 0 4
51639: ARRAY
51640: PPUSH
51641: LD_VAR 0 1
51645: PPUSH
51646: CALL_OW 244
// end ;
51650: GO 51572
51652: POP
51653: POP
// end ; end_of_file
51654: LD_VAR 0 3
51658: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
51659: LD_VAR 0 1
51663: PPUSH
51664: LD_VAR 0 2
51668: PPUSH
51669: LD_VAR 0 3
51673: PPUSH
51674: LD_VAR 0 4
51678: PPUSH
51679: LD_VAR 0 5
51683: PPUSH
51684: LD_VAR 0 6
51688: PPUSH
51689: CALL 51890 0 6
// end ;
51693: PPOPN 6
51695: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
51696: LD_INT 0
51698: PPUSH
// begin if not units then
51699: LD_VAR 0 1
51703: NOT
51704: IFFALSE 51708
// exit ;
51706: GO 51708
// end ;
51708: PPOPN 7
51710: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
51711: CALL 51777 0 0
// end ; end_of_file
51715: PPOPN 1
51717: END
// export globalGameSaveCounter ; every 0 0$1 do
51718: GO 51720
51720: DISABLE
// begin enable ;
51721: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51722: LD_STRING updateTimer(
51724: PUSH
51725: LD_OWVAR 1
51729: STR
51730: PUSH
51731: LD_STRING );
51733: STR
51734: PPUSH
51735: CALL_OW 559
// end ;
51739: END
// every 0 0$1 do
51740: GO 51742
51742: DISABLE
// begin globalGameSaveCounter := 0 ;
51743: LD_ADDR_EXP 43
51747: PUSH
51748: LD_INT 0
51750: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51751: LD_STRING setGameSaveCounter(0)
51753: PPUSH
51754: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51758: LD_STRING initStreamRollete();
51760: PPUSH
51761: CALL_OW 559
// InitStreamMode ;
51765: CALL 53108 0 0
// DefineStreamItems ( false ) ;
51769: LD_INT 0
51771: PPUSH
51772: CALL 53572 0 1
// end ;
51776: END
// export function SOS_MapStart ( ) ; begin
51777: LD_INT 0
51779: PPUSH
// if streamModeActive then
51780: LD_EXP 44
51784: IFFALSE 51793
// DefineStreamItems ( true ) ;
51786: LD_INT 1
51788: PPUSH
51789: CALL 53572 0 1
// UpdateLuaVariables ( ) ;
51793: CALL 51810 0 0
// UpdateFactoryWaypoints ( ) ;
51797: CALL 66441 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51801: CALL 66698 0 0
// end ;
51805: LD_VAR 0 1
51809: RET
// function UpdateLuaVariables ( ) ; begin
51810: LD_INT 0
51812: PPUSH
// if globalGameSaveCounter then
51813: LD_EXP 43
51817: IFFALSE 51851
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51819: LD_ADDR_EXP 43
51823: PUSH
51824: LD_EXP 43
51828: PPUSH
51829: CALL 47936 0 1
51833: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51834: LD_STRING setGameSaveCounter(
51836: PUSH
51837: LD_EXP 43
51841: STR
51842: PUSH
51843: LD_STRING )
51845: STR
51846: PPUSH
51847: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51851: LD_STRING setGameDifficulty(
51853: PUSH
51854: LD_OWVAR 67
51858: STR
51859: PUSH
51860: LD_STRING )
51862: STR
51863: PPUSH
51864: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51868: LD_STRING displayDifficulty(
51870: PUSH
51871: LD_OWVAR 67
51875: STR
51876: PUSH
51877: LD_STRING )
51879: STR
51880: PPUSH
51881: CALL_OW 559
// end ;
51885: LD_VAR 0 1
51889: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51890: LD_INT 0
51892: PPUSH
// if p2 = stream_mode then
51893: LD_VAR 0 2
51897: PUSH
51898: LD_INT 100
51900: EQUAL
51901: IFFALSE 52904
// begin if not StreamModeActive then
51903: LD_EXP 44
51907: NOT
51908: IFFALSE 51918
// StreamModeActive := true ;
51910: LD_ADDR_EXP 44
51914: PUSH
51915: LD_INT 1
51917: ST_TO_ADDR
// if p3 = 0 then
51918: LD_VAR 0 3
51922: PUSH
51923: LD_INT 0
51925: EQUAL
51926: IFFALSE 51932
// InitStreamMode ;
51928: CALL 53108 0 0
// if p3 = 1 then
51932: LD_VAR 0 3
51936: PUSH
51937: LD_INT 1
51939: EQUAL
51940: IFFALSE 51950
// sRocket := true ;
51942: LD_ADDR_EXP 49
51946: PUSH
51947: LD_INT 1
51949: ST_TO_ADDR
// if p3 = 2 then
51950: LD_VAR 0 3
51954: PUSH
51955: LD_INT 2
51957: EQUAL
51958: IFFALSE 51968
// sSpeed := true ;
51960: LD_ADDR_EXP 48
51964: PUSH
51965: LD_INT 1
51967: ST_TO_ADDR
// if p3 = 3 then
51968: LD_VAR 0 3
51972: PUSH
51973: LD_INT 3
51975: EQUAL
51976: IFFALSE 51986
// sEngine := true ;
51978: LD_ADDR_EXP 50
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// if p3 = 4 then
51986: LD_VAR 0 3
51990: PUSH
51991: LD_INT 4
51993: EQUAL
51994: IFFALSE 52004
// sSpec := true ;
51996: LD_ADDR_EXP 47
52000: PUSH
52001: LD_INT 1
52003: ST_TO_ADDR
// if p3 = 5 then
52004: LD_VAR 0 3
52008: PUSH
52009: LD_INT 5
52011: EQUAL
52012: IFFALSE 52022
// sLevel := true ;
52014: LD_ADDR_EXP 51
52018: PUSH
52019: LD_INT 1
52021: ST_TO_ADDR
// if p3 = 6 then
52022: LD_VAR 0 3
52026: PUSH
52027: LD_INT 6
52029: EQUAL
52030: IFFALSE 52040
// sArmoury := true ;
52032: LD_ADDR_EXP 52
52036: PUSH
52037: LD_INT 1
52039: ST_TO_ADDR
// if p3 = 7 then
52040: LD_VAR 0 3
52044: PUSH
52045: LD_INT 7
52047: EQUAL
52048: IFFALSE 52058
// sRadar := true ;
52050: LD_ADDR_EXP 53
52054: PUSH
52055: LD_INT 1
52057: ST_TO_ADDR
// if p3 = 8 then
52058: LD_VAR 0 3
52062: PUSH
52063: LD_INT 8
52065: EQUAL
52066: IFFALSE 52076
// sBunker := true ;
52068: LD_ADDR_EXP 54
52072: PUSH
52073: LD_INT 1
52075: ST_TO_ADDR
// if p3 = 9 then
52076: LD_VAR 0 3
52080: PUSH
52081: LD_INT 9
52083: EQUAL
52084: IFFALSE 52094
// sHack := true ;
52086: LD_ADDR_EXP 55
52090: PUSH
52091: LD_INT 1
52093: ST_TO_ADDR
// if p3 = 10 then
52094: LD_VAR 0 3
52098: PUSH
52099: LD_INT 10
52101: EQUAL
52102: IFFALSE 52112
// sFire := true ;
52104: LD_ADDR_EXP 56
52108: PUSH
52109: LD_INT 1
52111: ST_TO_ADDR
// if p3 = 11 then
52112: LD_VAR 0 3
52116: PUSH
52117: LD_INT 11
52119: EQUAL
52120: IFFALSE 52130
// sRefresh := true ;
52122: LD_ADDR_EXP 57
52126: PUSH
52127: LD_INT 1
52129: ST_TO_ADDR
// if p3 = 12 then
52130: LD_VAR 0 3
52134: PUSH
52135: LD_INT 12
52137: EQUAL
52138: IFFALSE 52148
// sExp := true ;
52140: LD_ADDR_EXP 58
52144: PUSH
52145: LD_INT 1
52147: ST_TO_ADDR
// if p3 = 13 then
52148: LD_VAR 0 3
52152: PUSH
52153: LD_INT 13
52155: EQUAL
52156: IFFALSE 52166
// sDepot := true ;
52158: LD_ADDR_EXP 59
52162: PUSH
52163: LD_INT 1
52165: ST_TO_ADDR
// if p3 = 14 then
52166: LD_VAR 0 3
52170: PUSH
52171: LD_INT 14
52173: EQUAL
52174: IFFALSE 52184
// sFlag := true ;
52176: LD_ADDR_EXP 60
52180: PUSH
52181: LD_INT 1
52183: ST_TO_ADDR
// if p3 = 15 then
52184: LD_VAR 0 3
52188: PUSH
52189: LD_INT 15
52191: EQUAL
52192: IFFALSE 52202
// sKamikadze := true ;
52194: LD_ADDR_EXP 68
52198: PUSH
52199: LD_INT 1
52201: ST_TO_ADDR
// if p3 = 16 then
52202: LD_VAR 0 3
52206: PUSH
52207: LD_INT 16
52209: EQUAL
52210: IFFALSE 52220
// sTroll := true ;
52212: LD_ADDR_EXP 69
52216: PUSH
52217: LD_INT 1
52219: ST_TO_ADDR
// if p3 = 17 then
52220: LD_VAR 0 3
52224: PUSH
52225: LD_INT 17
52227: EQUAL
52228: IFFALSE 52238
// sSlow := true ;
52230: LD_ADDR_EXP 70
52234: PUSH
52235: LD_INT 1
52237: ST_TO_ADDR
// if p3 = 18 then
52238: LD_VAR 0 3
52242: PUSH
52243: LD_INT 18
52245: EQUAL
52246: IFFALSE 52256
// sLack := true ;
52248: LD_ADDR_EXP 71
52252: PUSH
52253: LD_INT 1
52255: ST_TO_ADDR
// if p3 = 19 then
52256: LD_VAR 0 3
52260: PUSH
52261: LD_INT 19
52263: EQUAL
52264: IFFALSE 52274
// sTank := true ;
52266: LD_ADDR_EXP 73
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// if p3 = 20 then
52274: LD_VAR 0 3
52278: PUSH
52279: LD_INT 20
52281: EQUAL
52282: IFFALSE 52292
// sRemote := true ;
52284: LD_ADDR_EXP 74
52288: PUSH
52289: LD_INT 1
52291: ST_TO_ADDR
// if p3 = 21 then
52292: LD_VAR 0 3
52296: PUSH
52297: LD_INT 21
52299: EQUAL
52300: IFFALSE 52310
// sPowell := true ;
52302: LD_ADDR_EXP 75
52306: PUSH
52307: LD_INT 1
52309: ST_TO_ADDR
// if p3 = 22 then
52310: LD_VAR 0 3
52314: PUSH
52315: LD_INT 22
52317: EQUAL
52318: IFFALSE 52328
// sTeleport := true ;
52320: LD_ADDR_EXP 78
52324: PUSH
52325: LD_INT 1
52327: ST_TO_ADDR
// if p3 = 23 then
52328: LD_VAR 0 3
52332: PUSH
52333: LD_INT 23
52335: EQUAL
52336: IFFALSE 52346
// sOilTower := true ;
52338: LD_ADDR_EXP 80
52342: PUSH
52343: LD_INT 1
52345: ST_TO_ADDR
// if p3 = 24 then
52346: LD_VAR 0 3
52350: PUSH
52351: LD_INT 24
52353: EQUAL
52354: IFFALSE 52364
// sShovel := true ;
52356: LD_ADDR_EXP 81
52360: PUSH
52361: LD_INT 1
52363: ST_TO_ADDR
// if p3 = 25 then
52364: LD_VAR 0 3
52368: PUSH
52369: LD_INT 25
52371: EQUAL
52372: IFFALSE 52382
// sSheik := true ;
52374: LD_ADDR_EXP 82
52378: PUSH
52379: LD_INT 1
52381: ST_TO_ADDR
// if p3 = 26 then
52382: LD_VAR 0 3
52386: PUSH
52387: LD_INT 26
52389: EQUAL
52390: IFFALSE 52400
// sEarthquake := true ;
52392: LD_ADDR_EXP 84
52396: PUSH
52397: LD_INT 1
52399: ST_TO_ADDR
// if p3 = 27 then
52400: LD_VAR 0 3
52404: PUSH
52405: LD_INT 27
52407: EQUAL
52408: IFFALSE 52418
// sAI := true ;
52410: LD_ADDR_EXP 85
52414: PUSH
52415: LD_INT 1
52417: ST_TO_ADDR
// if p3 = 28 then
52418: LD_VAR 0 3
52422: PUSH
52423: LD_INT 28
52425: EQUAL
52426: IFFALSE 52436
// sCargo := true ;
52428: LD_ADDR_EXP 88
52432: PUSH
52433: LD_INT 1
52435: ST_TO_ADDR
// if p3 = 29 then
52436: LD_VAR 0 3
52440: PUSH
52441: LD_INT 29
52443: EQUAL
52444: IFFALSE 52454
// sDLaser := true ;
52446: LD_ADDR_EXP 89
52450: PUSH
52451: LD_INT 1
52453: ST_TO_ADDR
// if p3 = 30 then
52454: LD_VAR 0 3
52458: PUSH
52459: LD_INT 30
52461: EQUAL
52462: IFFALSE 52472
// sExchange := true ;
52464: LD_ADDR_EXP 90
52468: PUSH
52469: LD_INT 1
52471: ST_TO_ADDR
// if p3 = 31 then
52472: LD_VAR 0 3
52476: PUSH
52477: LD_INT 31
52479: EQUAL
52480: IFFALSE 52490
// sFac := true ;
52482: LD_ADDR_EXP 91
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// if p3 = 32 then
52490: LD_VAR 0 3
52494: PUSH
52495: LD_INT 32
52497: EQUAL
52498: IFFALSE 52508
// sPower := true ;
52500: LD_ADDR_EXP 92
52504: PUSH
52505: LD_INT 1
52507: ST_TO_ADDR
// if p3 = 33 then
52508: LD_VAR 0 3
52512: PUSH
52513: LD_INT 33
52515: EQUAL
52516: IFFALSE 52526
// sRandom := true ;
52518: LD_ADDR_EXP 93
52522: PUSH
52523: LD_INT 1
52525: ST_TO_ADDR
// if p3 = 34 then
52526: LD_VAR 0 3
52530: PUSH
52531: LD_INT 34
52533: EQUAL
52534: IFFALSE 52544
// sShield := true ;
52536: LD_ADDR_EXP 94
52540: PUSH
52541: LD_INT 1
52543: ST_TO_ADDR
// if p3 = 35 then
52544: LD_VAR 0 3
52548: PUSH
52549: LD_INT 35
52551: EQUAL
52552: IFFALSE 52562
// sTime := true ;
52554: LD_ADDR_EXP 95
52558: PUSH
52559: LD_INT 1
52561: ST_TO_ADDR
// if p3 = 36 then
52562: LD_VAR 0 3
52566: PUSH
52567: LD_INT 36
52569: EQUAL
52570: IFFALSE 52580
// sTools := true ;
52572: LD_ADDR_EXP 96
52576: PUSH
52577: LD_INT 1
52579: ST_TO_ADDR
// if p3 = 101 then
52580: LD_VAR 0 3
52584: PUSH
52585: LD_INT 101
52587: EQUAL
52588: IFFALSE 52598
// sSold := true ;
52590: LD_ADDR_EXP 61
52594: PUSH
52595: LD_INT 1
52597: ST_TO_ADDR
// if p3 = 102 then
52598: LD_VAR 0 3
52602: PUSH
52603: LD_INT 102
52605: EQUAL
52606: IFFALSE 52616
// sDiff := true ;
52608: LD_ADDR_EXP 62
52612: PUSH
52613: LD_INT 1
52615: ST_TO_ADDR
// if p3 = 103 then
52616: LD_VAR 0 3
52620: PUSH
52621: LD_INT 103
52623: EQUAL
52624: IFFALSE 52634
// sFog := true ;
52626: LD_ADDR_EXP 65
52630: PUSH
52631: LD_INT 1
52633: ST_TO_ADDR
// if p3 = 104 then
52634: LD_VAR 0 3
52638: PUSH
52639: LD_INT 104
52641: EQUAL
52642: IFFALSE 52652
// sReset := true ;
52644: LD_ADDR_EXP 66
52648: PUSH
52649: LD_INT 1
52651: ST_TO_ADDR
// if p3 = 105 then
52652: LD_VAR 0 3
52656: PUSH
52657: LD_INT 105
52659: EQUAL
52660: IFFALSE 52670
// sSun := true ;
52662: LD_ADDR_EXP 67
52666: PUSH
52667: LD_INT 1
52669: ST_TO_ADDR
// if p3 = 106 then
52670: LD_VAR 0 3
52674: PUSH
52675: LD_INT 106
52677: EQUAL
52678: IFFALSE 52688
// sTiger := true ;
52680: LD_ADDR_EXP 63
52684: PUSH
52685: LD_INT 1
52687: ST_TO_ADDR
// if p3 = 107 then
52688: LD_VAR 0 3
52692: PUSH
52693: LD_INT 107
52695: EQUAL
52696: IFFALSE 52706
// sBomb := true ;
52698: LD_ADDR_EXP 64
52702: PUSH
52703: LD_INT 1
52705: ST_TO_ADDR
// if p3 = 108 then
52706: LD_VAR 0 3
52710: PUSH
52711: LD_INT 108
52713: EQUAL
52714: IFFALSE 52724
// sWound := true ;
52716: LD_ADDR_EXP 72
52720: PUSH
52721: LD_INT 1
52723: ST_TO_ADDR
// if p3 = 109 then
52724: LD_VAR 0 3
52728: PUSH
52729: LD_INT 109
52731: EQUAL
52732: IFFALSE 52742
// sBetray := true ;
52734: LD_ADDR_EXP 76
52738: PUSH
52739: LD_INT 1
52741: ST_TO_ADDR
// if p3 = 110 then
52742: LD_VAR 0 3
52746: PUSH
52747: LD_INT 110
52749: EQUAL
52750: IFFALSE 52760
// sContamin := true ;
52752: LD_ADDR_EXP 77
52756: PUSH
52757: LD_INT 1
52759: ST_TO_ADDR
// if p3 = 111 then
52760: LD_VAR 0 3
52764: PUSH
52765: LD_INT 111
52767: EQUAL
52768: IFFALSE 52778
// sOil := true ;
52770: LD_ADDR_EXP 79
52774: PUSH
52775: LD_INT 1
52777: ST_TO_ADDR
// if p3 = 112 then
52778: LD_VAR 0 3
52782: PUSH
52783: LD_INT 112
52785: EQUAL
52786: IFFALSE 52796
// sStu := true ;
52788: LD_ADDR_EXP 83
52792: PUSH
52793: LD_INT 1
52795: ST_TO_ADDR
// if p3 = 113 then
52796: LD_VAR 0 3
52800: PUSH
52801: LD_INT 113
52803: EQUAL
52804: IFFALSE 52814
// sBazooka := true ;
52806: LD_ADDR_EXP 86
52810: PUSH
52811: LD_INT 1
52813: ST_TO_ADDR
// if p3 = 114 then
52814: LD_VAR 0 3
52818: PUSH
52819: LD_INT 114
52821: EQUAL
52822: IFFALSE 52832
// sMortar := true ;
52824: LD_ADDR_EXP 87
52828: PUSH
52829: LD_INT 1
52831: ST_TO_ADDR
// if p3 = 115 then
52832: LD_VAR 0 3
52836: PUSH
52837: LD_INT 115
52839: EQUAL
52840: IFFALSE 52850
// sRanger := true ;
52842: LD_ADDR_EXP 97
52846: PUSH
52847: LD_INT 1
52849: ST_TO_ADDR
// if p3 = 116 then
52850: LD_VAR 0 3
52854: PUSH
52855: LD_INT 116
52857: EQUAL
52858: IFFALSE 52868
// sComputer := true ;
52860: LD_ADDR_EXP 98
52864: PUSH
52865: LD_INT 1
52867: ST_TO_ADDR
// if p3 = 117 then
52868: LD_VAR 0 3
52872: PUSH
52873: LD_INT 117
52875: EQUAL
52876: IFFALSE 52886
// s30 := true ;
52878: LD_ADDR_EXP 99
52882: PUSH
52883: LD_INT 1
52885: ST_TO_ADDR
// if p3 = 118 then
52886: LD_VAR 0 3
52890: PUSH
52891: LD_INT 118
52893: EQUAL
52894: IFFALSE 52904
// s60 := true ;
52896: LD_ADDR_EXP 100
52900: PUSH
52901: LD_INT 1
52903: ST_TO_ADDR
// end ; if p2 = hack_mode then
52904: LD_VAR 0 2
52908: PUSH
52909: LD_INT 101
52911: EQUAL
52912: IFFALSE 53040
// begin case p3 of 1 :
52914: LD_VAR 0 3
52918: PUSH
52919: LD_INT 1
52921: DOUBLE
52922: EQUAL
52923: IFTRUE 52927
52925: GO 52934
52927: POP
// hHackUnlimitedResources ; 2 :
52928: CALL 65187 0 0
52932: GO 53040
52934: LD_INT 2
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52942
52940: GO 52949
52942: POP
// hHackSetLevel10 ; 3 :
52943: CALL 65320 0 0
52947: GO 53040
52949: LD_INT 3
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52957
52955: GO 52964
52957: POP
// hHackSetLevel10YourUnits ; 4 :
52958: CALL 65405 0 0
52962: GO 53040
52964: LD_INT 4
52966: DOUBLE
52967: EQUAL
52968: IFTRUE 52972
52970: GO 52979
52972: POP
// hHackInvincible ; 5 :
52973: CALL 65853 0 0
52977: GO 53040
52979: LD_INT 5
52981: DOUBLE
52982: EQUAL
52983: IFTRUE 52987
52985: GO 52994
52987: POP
// hHackInvisible ; 6 :
52988: CALL 65964 0 0
52992: GO 53040
52994: LD_INT 6
52996: DOUBLE
52997: EQUAL
52998: IFTRUE 53002
53000: GO 53009
53002: POP
// hHackChangeYourSide ; 7 :
53003: CALL 66021 0 0
53007: GO 53040
53009: LD_INT 7
53011: DOUBLE
53012: EQUAL
53013: IFTRUE 53017
53015: GO 53024
53017: POP
// hHackChangeUnitSide ; 8 :
53018: CALL 66063 0 0
53022: GO 53040
53024: LD_INT 8
53026: DOUBLE
53027: EQUAL
53028: IFTRUE 53032
53030: GO 53039
53032: POP
// hHackFog ; end ;
53033: CALL 66164 0 0
53037: GO 53040
53039: POP
// end ; if p2 = game_save_mode then
53040: LD_VAR 0 2
53044: PUSH
53045: LD_INT 102
53047: EQUAL
53048: IFFALSE 53103
// begin if p3 = 1 then
53050: LD_VAR 0 3
53054: PUSH
53055: LD_INT 1
53057: EQUAL
53058: IFFALSE 53070
// globalGameSaveCounter := p4 ;
53060: LD_ADDR_EXP 43
53064: PUSH
53065: LD_VAR 0 4
53069: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
53070: LD_VAR 0 3
53074: PUSH
53075: LD_INT 2
53077: EQUAL
53078: PUSH
53079: LD_EXP 43
53083: AND
53084: IFFALSE 53103
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53086: LD_STRING setGameSaveCounter(
53088: PUSH
53089: LD_EXP 43
53093: STR
53094: PUSH
53095: LD_STRING )
53097: STR
53098: PPUSH
53099: CALL_OW 559
// end ; end ;
53103: LD_VAR 0 7
53107: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
53108: LD_INT 0
53110: PPUSH
// streamModeActive := false ;
53111: LD_ADDR_EXP 44
53115: PUSH
53116: LD_INT 0
53118: ST_TO_ADDR
// normalCounter := 36 ;
53119: LD_ADDR_EXP 45
53123: PUSH
53124: LD_INT 36
53126: ST_TO_ADDR
// hardcoreCounter := 18 ;
53127: LD_ADDR_EXP 46
53131: PUSH
53132: LD_INT 18
53134: ST_TO_ADDR
// sRocket := false ;
53135: LD_ADDR_EXP 49
53139: PUSH
53140: LD_INT 0
53142: ST_TO_ADDR
// sSpeed := false ;
53143: LD_ADDR_EXP 48
53147: PUSH
53148: LD_INT 0
53150: ST_TO_ADDR
// sEngine := false ;
53151: LD_ADDR_EXP 50
53155: PUSH
53156: LD_INT 0
53158: ST_TO_ADDR
// sSpec := false ;
53159: LD_ADDR_EXP 47
53163: PUSH
53164: LD_INT 0
53166: ST_TO_ADDR
// sLevel := false ;
53167: LD_ADDR_EXP 51
53171: PUSH
53172: LD_INT 0
53174: ST_TO_ADDR
// sArmoury := false ;
53175: LD_ADDR_EXP 52
53179: PUSH
53180: LD_INT 0
53182: ST_TO_ADDR
// sRadar := false ;
53183: LD_ADDR_EXP 53
53187: PUSH
53188: LD_INT 0
53190: ST_TO_ADDR
// sBunker := false ;
53191: LD_ADDR_EXP 54
53195: PUSH
53196: LD_INT 0
53198: ST_TO_ADDR
// sHack := false ;
53199: LD_ADDR_EXP 55
53203: PUSH
53204: LD_INT 0
53206: ST_TO_ADDR
// sFire := false ;
53207: LD_ADDR_EXP 56
53211: PUSH
53212: LD_INT 0
53214: ST_TO_ADDR
// sRefresh := false ;
53215: LD_ADDR_EXP 57
53219: PUSH
53220: LD_INT 0
53222: ST_TO_ADDR
// sExp := false ;
53223: LD_ADDR_EXP 58
53227: PUSH
53228: LD_INT 0
53230: ST_TO_ADDR
// sDepot := false ;
53231: LD_ADDR_EXP 59
53235: PUSH
53236: LD_INT 0
53238: ST_TO_ADDR
// sFlag := false ;
53239: LD_ADDR_EXP 60
53243: PUSH
53244: LD_INT 0
53246: ST_TO_ADDR
// sKamikadze := false ;
53247: LD_ADDR_EXP 68
53251: PUSH
53252: LD_INT 0
53254: ST_TO_ADDR
// sTroll := false ;
53255: LD_ADDR_EXP 69
53259: PUSH
53260: LD_INT 0
53262: ST_TO_ADDR
// sSlow := false ;
53263: LD_ADDR_EXP 70
53267: PUSH
53268: LD_INT 0
53270: ST_TO_ADDR
// sLack := false ;
53271: LD_ADDR_EXP 71
53275: PUSH
53276: LD_INT 0
53278: ST_TO_ADDR
// sTank := false ;
53279: LD_ADDR_EXP 73
53283: PUSH
53284: LD_INT 0
53286: ST_TO_ADDR
// sRemote := false ;
53287: LD_ADDR_EXP 74
53291: PUSH
53292: LD_INT 0
53294: ST_TO_ADDR
// sPowell := false ;
53295: LD_ADDR_EXP 75
53299: PUSH
53300: LD_INT 0
53302: ST_TO_ADDR
// sTeleport := false ;
53303: LD_ADDR_EXP 78
53307: PUSH
53308: LD_INT 0
53310: ST_TO_ADDR
// sOilTower := false ;
53311: LD_ADDR_EXP 80
53315: PUSH
53316: LD_INT 0
53318: ST_TO_ADDR
// sShovel := false ;
53319: LD_ADDR_EXP 81
53323: PUSH
53324: LD_INT 0
53326: ST_TO_ADDR
// sSheik := false ;
53327: LD_ADDR_EXP 82
53331: PUSH
53332: LD_INT 0
53334: ST_TO_ADDR
// sEarthquake := false ;
53335: LD_ADDR_EXP 84
53339: PUSH
53340: LD_INT 0
53342: ST_TO_ADDR
// sAI := false ;
53343: LD_ADDR_EXP 85
53347: PUSH
53348: LD_INT 0
53350: ST_TO_ADDR
// sCargo := false ;
53351: LD_ADDR_EXP 88
53355: PUSH
53356: LD_INT 0
53358: ST_TO_ADDR
// sDLaser := false ;
53359: LD_ADDR_EXP 89
53363: PUSH
53364: LD_INT 0
53366: ST_TO_ADDR
// sExchange := false ;
53367: LD_ADDR_EXP 90
53371: PUSH
53372: LD_INT 0
53374: ST_TO_ADDR
// sFac := false ;
53375: LD_ADDR_EXP 91
53379: PUSH
53380: LD_INT 0
53382: ST_TO_ADDR
// sPower := false ;
53383: LD_ADDR_EXP 92
53387: PUSH
53388: LD_INT 0
53390: ST_TO_ADDR
// sRandom := false ;
53391: LD_ADDR_EXP 93
53395: PUSH
53396: LD_INT 0
53398: ST_TO_ADDR
// sShield := false ;
53399: LD_ADDR_EXP 94
53403: PUSH
53404: LD_INT 0
53406: ST_TO_ADDR
// sTime := false ;
53407: LD_ADDR_EXP 95
53411: PUSH
53412: LD_INT 0
53414: ST_TO_ADDR
// sTools := false ;
53415: LD_ADDR_EXP 96
53419: PUSH
53420: LD_INT 0
53422: ST_TO_ADDR
// sSold := false ;
53423: LD_ADDR_EXP 61
53427: PUSH
53428: LD_INT 0
53430: ST_TO_ADDR
// sDiff := false ;
53431: LD_ADDR_EXP 62
53435: PUSH
53436: LD_INT 0
53438: ST_TO_ADDR
// sFog := false ;
53439: LD_ADDR_EXP 65
53443: PUSH
53444: LD_INT 0
53446: ST_TO_ADDR
// sReset := false ;
53447: LD_ADDR_EXP 66
53451: PUSH
53452: LD_INT 0
53454: ST_TO_ADDR
// sSun := false ;
53455: LD_ADDR_EXP 67
53459: PUSH
53460: LD_INT 0
53462: ST_TO_ADDR
// sTiger := false ;
53463: LD_ADDR_EXP 63
53467: PUSH
53468: LD_INT 0
53470: ST_TO_ADDR
// sBomb := false ;
53471: LD_ADDR_EXP 64
53475: PUSH
53476: LD_INT 0
53478: ST_TO_ADDR
// sWound := false ;
53479: LD_ADDR_EXP 72
53483: PUSH
53484: LD_INT 0
53486: ST_TO_ADDR
// sBetray := false ;
53487: LD_ADDR_EXP 76
53491: PUSH
53492: LD_INT 0
53494: ST_TO_ADDR
// sContamin := false ;
53495: LD_ADDR_EXP 77
53499: PUSH
53500: LD_INT 0
53502: ST_TO_ADDR
// sOil := false ;
53503: LD_ADDR_EXP 79
53507: PUSH
53508: LD_INT 0
53510: ST_TO_ADDR
// sStu := false ;
53511: LD_ADDR_EXP 83
53515: PUSH
53516: LD_INT 0
53518: ST_TO_ADDR
// sBazooka := false ;
53519: LD_ADDR_EXP 86
53523: PUSH
53524: LD_INT 0
53526: ST_TO_ADDR
// sMortar := false ;
53527: LD_ADDR_EXP 87
53531: PUSH
53532: LD_INT 0
53534: ST_TO_ADDR
// sRanger := false ;
53535: LD_ADDR_EXP 97
53539: PUSH
53540: LD_INT 0
53542: ST_TO_ADDR
// sComputer := false ;
53543: LD_ADDR_EXP 98
53547: PUSH
53548: LD_INT 0
53550: ST_TO_ADDR
// s30 := false ;
53551: LD_ADDR_EXP 99
53555: PUSH
53556: LD_INT 0
53558: ST_TO_ADDR
// s60 := false ;
53559: LD_ADDR_EXP 100
53563: PUSH
53564: LD_INT 0
53566: ST_TO_ADDR
// end ;
53567: LD_VAR 0 1
53571: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53572: LD_INT 0
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
// result := [ ] ;
53581: LD_ADDR_VAR 0 2
53585: PUSH
53586: EMPTY
53587: ST_TO_ADDR
// if campaign_id = 1 then
53588: LD_OWVAR 69
53592: PUSH
53593: LD_INT 1
53595: EQUAL
53596: IFFALSE 56762
// begin case mission_number of 1 :
53598: LD_OWVAR 70
53602: PUSH
53603: LD_INT 1
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53611
53609: GO 53687
53611: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53612: LD_ADDR_VAR 0 2
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: LD_INT 4
53622: PUSH
53623: LD_INT 11
53625: PUSH
53626: LD_INT 12
53628: PUSH
53629: LD_INT 15
53631: PUSH
53632: LD_INT 16
53634: PUSH
53635: LD_INT 22
53637: PUSH
53638: LD_INT 23
53640: PUSH
53641: LD_INT 26
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 101
53657: PUSH
53658: LD_INT 102
53660: PUSH
53661: LD_INT 106
53663: PUSH
53664: LD_INT 116
53666: PUSH
53667: LD_INT 117
53669: PUSH
53670: LD_INT 118
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: ST_TO_ADDR
53685: GO 56760
53687: LD_INT 2
53689: DOUBLE
53690: EQUAL
53691: IFTRUE 53695
53693: GO 53779
53695: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53696: LD_ADDR_VAR 0 2
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 4
53706: PUSH
53707: LD_INT 11
53709: PUSH
53710: LD_INT 12
53712: PUSH
53713: LD_INT 15
53715: PUSH
53716: LD_INT 16
53718: PUSH
53719: LD_INT 22
53721: PUSH
53722: LD_INT 23
53724: PUSH
53725: LD_INT 26
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 101
53741: PUSH
53742: LD_INT 102
53744: PUSH
53745: LD_INT 105
53747: PUSH
53748: LD_INT 106
53750: PUSH
53751: LD_INT 108
53753: PUSH
53754: LD_INT 116
53756: PUSH
53757: LD_INT 117
53759: PUSH
53760: LD_INT 118
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: ST_TO_ADDR
53777: GO 56760
53779: LD_INT 3
53781: DOUBLE
53782: EQUAL
53783: IFTRUE 53787
53785: GO 53875
53787: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53788: LD_ADDR_VAR 0 2
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: LD_INT 11
53804: PUSH
53805: LD_INT 12
53807: PUSH
53808: LD_INT 15
53810: PUSH
53811: LD_INT 16
53813: PUSH
53814: LD_INT 22
53816: PUSH
53817: LD_INT 26
53819: PUSH
53820: LD_INT 36
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 101
53837: PUSH
53838: LD_INT 102
53840: PUSH
53841: LD_INT 105
53843: PUSH
53844: LD_INT 106
53846: PUSH
53847: LD_INT 108
53849: PUSH
53850: LD_INT 116
53852: PUSH
53853: LD_INT 117
53855: PUSH
53856: LD_INT 118
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: ST_TO_ADDR
53873: GO 56760
53875: LD_INT 4
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53883
53881: GO 53979
53883: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53884: LD_ADDR_VAR 0 2
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: LD_INT 5
53897: PUSH
53898: LD_INT 8
53900: PUSH
53901: LD_INT 11
53903: PUSH
53904: LD_INT 12
53906: PUSH
53907: LD_INT 15
53909: PUSH
53910: LD_INT 16
53912: PUSH
53913: LD_INT 22
53915: PUSH
53916: LD_INT 23
53918: PUSH
53919: LD_INT 26
53921: PUSH
53922: LD_INT 36
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 101
53941: PUSH
53942: LD_INT 102
53944: PUSH
53945: LD_INT 105
53947: PUSH
53948: LD_INT 106
53950: PUSH
53951: LD_INT 108
53953: PUSH
53954: LD_INT 116
53956: PUSH
53957: LD_INT 117
53959: PUSH
53960: LD_INT 118
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: ST_TO_ADDR
53977: GO 56760
53979: LD_INT 5
53981: DOUBLE
53982: EQUAL
53983: IFTRUE 53987
53985: GO 54099
53987: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53988: LD_ADDR_VAR 0 2
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 4
53998: PUSH
53999: LD_INT 5
54001: PUSH
54002: LD_INT 6
54004: PUSH
54005: LD_INT 8
54007: PUSH
54008: LD_INT 11
54010: PUSH
54011: LD_INT 12
54013: PUSH
54014: LD_INT 15
54016: PUSH
54017: LD_INT 16
54019: PUSH
54020: LD_INT 22
54022: PUSH
54023: LD_INT 23
54025: PUSH
54026: LD_INT 25
54028: PUSH
54029: LD_INT 26
54031: PUSH
54032: LD_INT 36
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 101
54053: PUSH
54054: LD_INT 102
54056: PUSH
54057: LD_INT 105
54059: PUSH
54060: LD_INT 106
54062: PUSH
54063: LD_INT 108
54065: PUSH
54066: LD_INT 109
54068: PUSH
54069: LD_INT 112
54071: PUSH
54072: LD_INT 116
54074: PUSH
54075: LD_INT 117
54077: PUSH
54078: LD_INT 118
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: ST_TO_ADDR
54097: GO 56760
54099: LD_INT 6
54101: DOUBLE
54102: EQUAL
54103: IFTRUE 54107
54105: GO 54239
54107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
54108: LD_ADDR_VAR 0 2
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 4
54118: PUSH
54119: LD_INT 5
54121: PUSH
54122: LD_INT 6
54124: PUSH
54125: LD_INT 8
54127: PUSH
54128: LD_INT 11
54130: PUSH
54131: LD_INT 12
54133: PUSH
54134: LD_INT 15
54136: PUSH
54137: LD_INT 16
54139: PUSH
54140: LD_INT 20
54142: PUSH
54143: LD_INT 21
54145: PUSH
54146: LD_INT 22
54148: PUSH
54149: LD_INT 23
54151: PUSH
54152: LD_INT 25
54154: PUSH
54155: LD_INT 26
54157: PUSH
54158: LD_INT 30
54160: PUSH
54161: LD_INT 31
54163: PUSH
54164: LD_INT 32
54166: PUSH
54167: LD_INT 36
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 101
54193: PUSH
54194: LD_INT 102
54196: PUSH
54197: LD_INT 105
54199: PUSH
54200: LD_INT 106
54202: PUSH
54203: LD_INT 108
54205: PUSH
54206: LD_INT 109
54208: PUSH
54209: LD_INT 112
54211: PUSH
54212: LD_INT 116
54214: PUSH
54215: LD_INT 117
54217: PUSH
54218: LD_INT 118
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: ST_TO_ADDR
54237: GO 56760
54239: LD_INT 7
54241: DOUBLE
54242: EQUAL
54243: IFTRUE 54247
54245: GO 54359
54247: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54248: LD_ADDR_VAR 0 2
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 4
54258: PUSH
54259: LD_INT 5
54261: PUSH
54262: LD_INT 7
54264: PUSH
54265: LD_INT 11
54267: PUSH
54268: LD_INT 12
54270: PUSH
54271: LD_INT 15
54273: PUSH
54274: LD_INT 16
54276: PUSH
54277: LD_INT 20
54279: PUSH
54280: LD_INT 21
54282: PUSH
54283: LD_INT 22
54285: PUSH
54286: LD_INT 23
54288: PUSH
54289: LD_INT 25
54291: PUSH
54292: LD_INT 26
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 101
54313: PUSH
54314: LD_INT 102
54316: PUSH
54317: LD_INT 103
54319: PUSH
54320: LD_INT 105
54322: PUSH
54323: LD_INT 106
54325: PUSH
54326: LD_INT 108
54328: PUSH
54329: LD_INT 112
54331: PUSH
54332: LD_INT 116
54334: PUSH
54335: LD_INT 117
54337: PUSH
54338: LD_INT 118
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: ST_TO_ADDR
54357: GO 56760
54359: LD_INT 8
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54367
54365: GO 54507
54367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54368: LD_ADDR_VAR 0 2
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: LD_INT 5
54381: PUSH
54382: LD_INT 6
54384: PUSH
54385: LD_INT 7
54387: PUSH
54388: LD_INT 8
54390: PUSH
54391: LD_INT 11
54393: PUSH
54394: LD_INT 12
54396: PUSH
54397: LD_INT 15
54399: PUSH
54400: LD_INT 16
54402: PUSH
54403: LD_INT 20
54405: PUSH
54406: LD_INT 21
54408: PUSH
54409: LD_INT 22
54411: PUSH
54412: LD_INT 23
54414: PUSH
54415: LD_INT 25
54417: PUSH
54418: LD_INT 26
54420: PUSH
54421: LD_INT 30
54423: PUSH
54424: LD_INT 31
54426: PUSH
54427: LD_INT 32
54429: PUSH
54430: LD_INT 36
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 101
54457: PUSH
54458: LD_INT 102
54460: PUSH
54461: LD_INT 103
54463: PUSH
54464: LD_INT 105
54466: PUSH
54467: LD_INT 106
54469: PUSH
54470: LD_INT 108
54472: PUSH
54473: LD_INT 109
54475: PUSH
54476: LD_INT 112
54478: PUSH
54479: LD_INT 116
54481: PUSH
54482: LD_INT 117
54484: PUSH
54485: LD_INT 118
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: ST_TO_ADDR
54505: GO 56760
54507: LD_INT 9
54509: DOUBLE
54510: EQUAL
54511: IFTRUE 54515
54513: GO 54663
54515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54516: LD_ADDR_VAR 0 2
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 4
54526: PUSH
54527: LD_INT 5
54529: PUSH
54530: LD_INT 6
54532: PUSH
54533: LD_INT 7
54535: PUSH
54536: LD_INT 8
54538: PUSH
54539: LD_INT 11
54541: PUSH
54542: LD_INT 12
54544: PUSH
54545: LD_INT 15
54547: PUSH
54548: LD_INT 16
54550: PUSH
54551: LD_INT 20
54553: PUSH
54554: LD_INT 21
54556: PUSH
54557: LD_INT 22
54559: PUSH
54560: LD_INT 23
54562: PUSH
54563: LD_INT 25
54565: PUSH
54566: LD_INT 26
54568: PUSH
54569: LD_INT 28
54571: PUSH
54572: LD_INT 30
54574: PUSH
54575: LD_INT 31
54577: PUSH
54578: LD_INT 32
54580: PUSH
54581: LD_INT 36
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 101
54609: PUSH
54610: LD_INT 102
54612: PUSH
54613: LD_INT 103
54615: PUSH
54616: LD_INT 105
54618: PUSH
54619: LD_INT 106
54621: PUSH
54622: LD_INT 108
54624: PUSH
54625: LD_INT 109
54627: PUSH
54628: LD_INT 112
54630: PUSH
54631: LD_INT 114
54633: PUSH
54634: LD_INT 116
54636: PUSH
54637: LD_INT 117
54639: PUSH
54640: LD_INT 118
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: ST_TO_ADDR
54661: GO 56760
54663: LD_INT 10
54665: DOUBLE
54666: EQUAL
54667: IFTRUE 54671
54669: GO 54867
54671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54672: LD_ADDR_VAR 0 2
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: LD_INT 4
54682: PUSH
54683: LD_INT 5
54685: PUSH
54686: LD_INT 6
54688: PUSH
54689: LD_INT 7
54691: PUSH
54692: LD_INT 8
54694: PUSH
54695: LD_INT 9
54697: PUSH
54698: LD_INT 10
54700: PUSH
54701: LD_INT 11
54703: PUSH
54704: LD_INT 12
54706: PUSH
54707: LD_INT 13
54709: PUSH
54710: LD_INT 14
54712: PUSH
54713: LD_INT 15
54715: PUSH
54716: LD_INT 16
54718: PUSH
54719: LD_INT 17
54721: PUSH
54722: LD_INT 18
54724: PUSH
54725: LD_INT 19
54727: PUSH
54728: LD_INT 20
54730: PUSH
54731: LD_INT 21
54733: PUSH
54734: LD_INT 22
54736: PUSH
54737: LD_INT 23
54739: PUSH
54740: LD_INT 24
54742: PUSH
54743: LD_INT 25
54745: PUSH
54746: LD_INT 26
54748: PUSH
54749: LD_INT 28
54751: PUSH
54752: LD_INT 30
54754: PUSH
54755: LD_INT 31
54757: PUSH
54758: LD_INT 32
54760: PUSH
54761: LD_INT 36
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 101
54797: PUSH
54798: LD_INT 102
54800: PUSH
54801: LD_INT 103
54803: PUSH
54804: LD_INT 104
54806: PUSH
54807: LD_INT 105
54809: PUSH
54810: LD_INT 106
54812: PUSH
54813: LD_INT 107
54815: PUSH
54816: LD_INT 108
54818: PUSH
54819: LD_INT 109
54821: PUSH
54822: LD_INT 110
54824: PUSH
54825: LD_INT 111
54827: PUSH
54828: LD_INT 112
54830: PUSH
54831: LD_INT 114
54833: PUSH
54834: LD_INT 116
54836: PUSH
54837: LD_INT 117
54839: PUSH
54840: LD_INT 118
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: ST_TO_ADDR
54865: GO 56760
54867: LD_INT 11
54869: DOUBLE
54870: EQUAL
54871: IFTRUE 54875
54873: GO 55079
54875: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54876: LD_ADDR_VAR 0 2
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 6
54895: PUSH
54896: LD_INT 7
54898: PUSH
54899: LD_INT 8
54901: PUSH
54902: LD_INT 9
54904: PUSH
54905: LD_INT 10
54907: PUSH
54908: LD_INT 11
54910: PUSH
54911: LD_INT 12
54913: PUSH
54914: LD_INT 13
54916: PUSH
54917: LD_INT 14
54919: PUSH
54920: LD_INT 15
54922: PUSH
54923: LD_INT 16
54925: PUSH
54926: LD_INT 17
54928: PUSH
54929: LD_INT 18
54931: PUSH
54932: LD_INT 19
54934: PUSH
54935: LD_INT 20
54937: PUSH
54938: LD_INT 21
54940: PUSH
54941: LD_INT 22
54943: PUSH
54944: LD_INT 23
54946: PUSH
54947: LD_INT 24
54949: PUSH
54950: LD_INT 25
54952: PUSH
54953: LD_INT 26
54955: PUSH
54956: LD_INT 28
54958: PUSH
54959: LD_INT 30
54961: PUSH
54962: LD_INT 31
54964: PUSH
54965: LD_INT 32
54967: PUSH
54968: LD_INT 34
54970: PUSH
54971: LD_INT 36
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 101
55009: PUSH
55010: LD_INT 102
55012: PUSH
55013: LD_INT 103
55015: PUSH
55016: LD_INT 104
55018: PUSH
55019: LD_INT 105
55021: PUSH
55022: LD_INT 106
55024: PUSH
55025: LD_INT 107
55027: PUSH
55028: LD_INT 108
55030: PUSH
55031: LD_INT 109
55033: PUSH
55034: LD_INT 110
55036: PUSH
55037: LD_INT 111
55039: PUSH
55040: LD_INT 112
55042: PUSH
55043: LD_INT 114
55045: PUSH
55046: LD_INT 116
55048: PUSH
55049: LD_INT 117
55051: PUSH
55052: LD_INT 118
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: ST_TO_ADDR
55077: GO 56760
55079: LD_INT 12
55081: DOUBLE
55082: EQUAL
55083: IFTRUE 55087
55085: GO 55307
55087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
55088: LD_ADDR_VAR 0 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 5
55107: PUSH
55108: LD_INT 6
55110: PUSH
55111: LD_INT 7
55113: PUSH
55114: LD_INT 8
55116: PUSH
55117: LD_INT 9
55119: PUSH
55120: LD_INT 10
55122: PUSH
55123: LD_INT 11
55125: PUSH
55126: LD_INT 12
55128: PUSH
55129: LD_INT 13
55131: PUSH
55132: LD_INT 14
55134: PUSH
55135: LD_INT 15
55137: PUSH
55138: LD_INT 16
55140: PUSH
55141: LD_INT 17
55143: PUSH
55144: LD_INT 18
55146: PUSH
55147: LD_INT 19
55149: PUSH
55150: LD_INT 20
55152: PUSH
55153: LD_INT 21
55155: PUSH
55156: LD_INT 22
55158: PUSH
55159: LD_INT 23
55161: PUSH
55162: LD_INT 24
55164: PUSH
55165: LD_INT 25
55167: PUSH
55168: LD_INT 26
55170: PUSH
55171: LD_INT 27
55173: PUSH
55174: LD_INT 28
55176: PUSH
55177: LD_INT 30
55179: PUSH
55180: LD_INT 31
55182: PUSH
55183: LD_INT 32
55185: PUSH
55186: LD_INT 33
55188: PUSH
55189: LD_INT 34
55191: PUSH
55192: LD_INT 36
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 101
55233: PUSH
55234: LD_INT 102
55236: PUSH
55237: LD_INT 103
55239: PUSH
55240: LD_INT 104
55242: PUSH
55243: LD_INT 105
55245: PUSH
55246: LD_INT 106
55248: PUSH
55249: LD_INT 107
55251: PUSH
55252: LD_INT 108
55254: PUSH
55255: LD_INT 109
55257: PUSH
55258: LD_INT 110
55260: PUSH
55261: LD_INT 111
55263: PUSH
55264: LD_INT 112
55266: PUSH
55267: LD_INT 113
55269: PUSH
55270: LD_INT 114
55272: PUSH
55273: LD_INT 116
55275: PUSH
55276: LD_INT 117
55278: PUSH
55279: LD_INT 118
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: ST_TO_ADDR
55305: GO 56760
55307: LD_INT 13
55309: DOUBLE
55310: EQUAL
55311: IFTRUE 55315
55313: GO 55523
55315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55316: LD_ADDR_VAR 0 2
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 4
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: LD_INT 8
55338: PUSH
55339: LD_INT 9
55341: PUSH
55342: LD_INT 10
55344: PUSH
55345: LD_INT 11
55347: PUSH
55348: LD_INT 12
55350: PUSH
55351: LD_INT 14
55353: PUSH
55354: LD_INT 15
55356: PUSH
55357: LD_INT 16
55359: PUSH
55360: LD_INT 17
55362: PUSH
55363: LD_INT 18
55365: PUSH
55366: LD_INT 19
55368: PUSH
55369: LD_INT 20
55371: PUSH
55372: LD_INT 21
55374: PUSH
55375: LD_INT 22
55377: PUSH
55378: LD_INT 23
55380: PUSH
55381: LD_INT 24
55383: PUSH
55384: LD_INT 25
55386: PUSH
55387: LD_INT 26
55389: PUSH
55390: LD_INT 27
55392: PUSH
55393: LD_INT 28
55395: PUSH
55396: LD_INT 30
55398: PUSH
55399: LD_INT 31
55401: PUSH
55402: LD_INT 32
55404: PUSH
55405: LD_INT 33
55407: PUSH
55408: LD_INT 34
55410: PUSH
55411: LD_INT 36
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 101
55449: PUSH
55450: LD_INT 102
55452: PUSH
55453: LD_INT 103
55455: PUSH
55456: LD_INT 104
55458: PUSH
55459: LD_INT 105
55461: PUSH
55462: LD_INT 106
55464: PUSH
55465: LD_INT 107
55467: PUSH
55468: LD_INT 108
55470: PUSH
55471: LD_INT 109
55473: PUSH
55474: LD_INT 110
55476: PUSH
55477: LD_INT 111
55479: PUSH
55480: LD_INT 112
55482: PUSH
55483: LD_INT 113
55485: PUSH
55486: LD_INT 114
55488: PUSH
55489: LD_INT 116
55491: PUSH
55492: LD_INT 117
55494: PUSH
55495: LD_INT 118
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: ST_TO_ADDR
55521: GO 56760
55523: LD_INT 14
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55531
55529: GO 55755
55531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55532: LD_ADDR_VAR 0 2
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 4
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: LD_INT 6
55554: PUSH
55555: LD_INT 7
55557: PUSH
55558: LD_INT 8
55560: PUSH
55561: LD_INT 9
55563: PUSH
55564: LD_INT 10
55566: PUSH
55567: LD_INT 11
55569: PUSH
55570: LD_INT 12
55572: PUSH
55573: LD_INT 13
55575: PUSH
55576: LD_INT 14
55578: PUSH
55579: LD_INT 15
55581: PUSH
55582: LD_INT 16
55584: PUSH
55585: LD_INT 17
55587: PUSH
55588: LD_INT 18
55590: PUSH
55591: LD_INT 19
55593: PUSH
55594: LD_INT 20
55596: PUSH
55597: LD_INT 21
55599: PUSH
55600: LD_INT 22
55602: PUSH
55603: LD_INT 23
55605: PUSH
55606: LD_INT 24
55608: PUSH
55609: LD_INT 25
55611: PUSH
55612: LD_INT 26
55614: PUSH
55615: LD_INT 27
55617: PUSH
55618: LD_INT 28
55620: PUSH
55621: LD_INT 29
55623: PUSH
55624: LD_INT 30
55626: PUSH
55627: LD_INT 31
55629: PUSH
55630: LD_INT 32
55632: PUSH
55633: LD_INT 33
55635: PUSH
55636: LD_INT 34
55638: PUSH
55639: LD_INT 36
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 101
55681: PUSH
55682: LD_INT 102
55684: PUSH
55685: LD_INT 103
55687: PUSH
55688: LD_INT 104
55690: PUSH
55691: LD_INT 105
55693: PUSH
55694: LD_INT 106
55696: PUSH
55697: LD_INT 107
55699: PUSH
55700: LD_INT 108
55702: PUSH
55703: LD_INT 109
55705: PUSH
55706: LD_INT 110
55708: PUSH
55709: LD_INT 111
55711: PUSH
55712: LD_INT 112
55714: PUSH
55715: LD_INT 113
55717: PUSH
55718: LD_INT 114
55720: PUSH
55721: LD_INT 116
55723: PUSH
55724: LD_INT 117
55726: PUSH
55727: LD_INT 118
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: ST_TO_ADDR
55753: GO 56760
55755: LD_INT 15
55757: DOUBLE
55758: EQUAL
55759: IFTRUE 55763
55761: GO 55987
55763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55764: LD_ADDR_VAR 0 2
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: LD_INT 5
55783: PUSH
55784: LD_INT 6
55786: PUSH
55787: LD_INT 7
55789: PUSH
55790: LD_INT 8
55792: PUSH
55793: LD_INT 9
55795: PUSH
55796: LD_INT 10
55798: PUSH
55799: LD_INT 11
55801: PUSH
55802: LD_INT 12
55804: PUSH
55805: LD_INT 13
55807: PUSH
55808: LD_INT 14
55810: PUSH
55811: LD_INT 15
55813: PUSH
55814: LD_INT 16
55816: PUSH
55817: LD_INT 17
55819: PUSH
55820: LD_INT 18
55822: PUSH
55823: LD_INT 19
55825: PUSH
55826: LD_INT 20
55828: PUSH
55829: LD_INT 21
55831: PUSH
55832: LD_INT 22
55834: PUSH
55835: LD_INT 23
55837: PUSH
55838: LD_INT 24
55840: PUSH
55841: LD_INT 25
55843: PUSH
55844: LD_INT 26
55846: PUSH
55847: LD_INT 27
55849: PUSH
55850: LD_INT 28
55852: PUSH
55853: LD_INT 29
55855: PUSH
55856: LD_INT 30
55858: PUSH
55859: LD_INT 31
55861: PUSH
55862: LD_INT 32
55864: PUSH
55865: LD_INT 33
55867: PUSH
55868: LD_INT 34
55870: PUSH
55871: LD_INT 36
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 101
55913: PUSH
55914: LD_INT 102
55916: PUSH
55917: LD_INT 103
55919: PUSH
55920: LD_INT 104
55922: PUSH
55923: LD_INT 105
55925: PUSH
55926: LD_INT 106
55928: PUSH
55929: LD_INT 107
55931: PUSH
55932: LD_INT 108
55934: PUSH
55935: LD_INT 109
55937: PUSH
55938: LD_INT 110
55940: PUSH
55941: LD_INT 111
55943: PUSH
55944: LD_INT 112
55946: PUSH
55947: LD_INT 113
55949: PUSH
55950: LD_INT 114
55952: PUSH
55953: LD_INT 116
55955: PUSH
55956: LD_INT 117
55958: PUSH
55959: LD_INT 118
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: ST_TO_ADDR
55985: GO 56760
55987: LD_INT 16
55989: DOUBLE
55990: EQUAL
55991: IFTRUE 55995
55993: GO 56131
55995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55996: LD_ADDR_VAR 0 2
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: LD_INT 5
56009: PUSH
56010: LD_INT 7
56012: PUSH
56013: LD_INT 11
56015: PUSH
56016: LD_INT 12
56018: PUSH
56019: LD_INT 15
56021: PUSH
56022: LD_INT 16
56024: PUSH
56025: LD_INT 20
56027: PUSH
56028: LD_INT 21
56030: PUSH
56031: LD_INT 22
56033: PUSH
56034: LD_INT 23
56036: PUSH
56037: LD_INT 25
56039: PUSH
56040: LD_INT 26
56042: PUSH
56043: LD_INT 30
56045: PUSH
56046: LD_INT 31
56048: PUSH
56049: LD_INT 32
56051: PUSH
56052: LD_INT 33
56054: PUSH
56055: LD_INT 34
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 101
56081: PUSH
56082: LD_INT 102
56084: PUSH
56085: LD_INT 103
56087: PUSH
56088: LD_INT 106
56090: PUSH
56091: LD_INT 108
56093: PUSH
56094: LD_INT 112
56096: PUSH
56097: LD_INT 113
56099: PUSH
56100: LD_INT 114
56102: PUSH
56103: LD_INT 116
56105: PUSH
56106: LD_INT 117
56108: PUSH
56109: LD_INT 118
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: ST_TO_ADDR
56129: GO 56760
56131: LD_INT 17
56133: DOUBLE
56134: EQUAL
56135: IFTRUE 56139
56137: GO 56363
56139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
56140: LD_ADDR_VAR 0 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: LD_INT 5
56159: PUSH
56160: LD_INT 6
56162: PUSH
56163: LD_INT 7
56165: PUSH
56166: LD_INT 8
56168: PUSH
56169: LD_INT 9
56171: PUSH
56172: LD_INT 10
56174: PUSH
56175: LD_INT 11
56177: PUSH
56178: LD_INT 12
56180: PUSH
56181: LD_INT 13
56183: PUSH
56184: LD_INT 14
56186: PUSH
56187: LD_INT 15
56189: PUSH
56190: LD_INT 16
56192: PUSH
56193: LD_INT 17
56195: PUSH
56196: LD_INT 18
56198: PUSH
56199: LD_INT 19
56201: PUSH
56202: LD_INT 20
56204: PUSH
56205: LD_INT 21
56207: PUSH
56208: LD_INT 22
56210: PUSH
56211: LD_INT 23
56213: PUSH
56214: LD_INT 24
56216: PUSH
56217: LD_INT 25
56219: PUSH
56220: LD_INT 26
56222: PUSH
56223: LD_INT 27
56225: PUSH
56226: LD_INT 28
56228: PUSH
56229: LD_INT 29
56231: PUSH
56232: LD_INT 30
56234: PUSH
56235: LD_INT 31
56237: PUSH
56238: LD_INT 32
56240: PUSH
56241: LD_INT 33
56243: PUSH
56244: LD_INT 34
56246: PUSH
56247: LD_INT 36
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 101
56289: PUSH
56290: LD_INT 102
56292: PUSH
56293: LD_INT 103
56295: PUSH
56296: LD_INT 104
56298: PUSH
56299: LD_INT 105
56301: PUSH
56302: LD_INT 106
56304: PUSH
56305: LD_INT 107
56307: PUSH
56308: LD_INT 108
56310: PUSH
56311: LD_INT 109
56313: PUSH
56314: LD_INT 110
56316: PUSH
56317: LD_INT 111
56319: PUSH
56320: LD_INT 112
56322: PUSH
56323: LD_INT 113
56325: PUSH
56326: LD_INT 114
56328: PUSH
56329: LD_INT 116
56331: PUSH
56332: LD_INT 117
56334: PUSH
56335: LD_INT 118
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: ST_TO_ADDR
56361: GO 56760
56363: LD_INT 18
56365: DOUBLE
56366: EQUAL
56367: IFTRUE 56371
56369: GO 56519
56371: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56372: LD_ADDR_VAR 0 2
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: LD_INT 5
56385: PUSH
56386: LD_INT 7
56388: PUSH
56389: LD_INT 11
56391: PUSH
56392: LD_INT 12
56394: PUSH
56395: LD_INT 15
56397: PUSH
56398: LD_INT 16
56400: PUSH
56401: LD_INT 20
56403: PUSH
56404: LD_INT 21
56406: PUSH
56407: LD_INT 22
56409: PUSH
56410: LD_INT 23
56412: PUSH
56413: LD_INT 25
56415: PUSH
56416: LD_INT 26
56418: PUSH
56419: LD_INT 30
56421: PUSH
56422: LD_INT 31
56424: PUSH
56425: LD_INT 32
56427: PUSH
56428: LD_INT 33
56430: PUSH
56431: LD_INT 34
56433: PUSH
56434: LD_INT 35
56436: PUSH
56437: LD_INT 36
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 101
56465: PUSH
56466: LD_INT 102
56468: PUSH
56469: LD_INT 103
56471: PUSH
56472: LD_INT 106
56474: PUSH
56475: LD_INT 108
56477: PUSH
56478: LD_INT 112
56480: PUSH
56481: LD_INT 113
56483: PUSH
56484: LD_INT 114
56486: PUSH
56487: LD_INT 115
56489: PUSH
56490: LD_INT 116
56492: PUSH
56493: LD_INT 117
56495: PUSH
56496: LD_INT 118
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: ST_TO_ADDR
56517: GO 56760
56519: LD_INT 19
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 56759
56527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56528: LD_ADDR_VAR 0 2
56532: PUSH
56533: LD_INT 1
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 3
56541: PUSH
56542: LD_INT 4
56544: PUSH
56545: LD_INT 5
56547: PUSH
56548: LD_INT 6
56550: PUSH
56551: LD_INT 7
56553: PUSH
56554: LD_INT 8
56556: PUSH
56557: LD_INT 9
56559: PUSH
56560: LD_INT 10
56562: PUSH
56563: LD_INT 11
56565: PUSH
56566: LD_INT 12
56568: PUSH
56569: LD_INT 13
56571: PUSH
56572: LD_INT 14
56574: PUSH
56575: LD_INT 15
56577: PUSH
56578: LD_INT 16
56580: PUSH
56581: LD_INT 17
56583: PUSH
56584: LD_INT 18
56586: PUSH
56587: LD_INT 19
56589: PUSH
56590: LD_INT 20
56592: PUSH
56593: LD_INT 21
56595: PUSH
56596: LD_INT 22
56598: PUSH
56599: LD_INT 23
56601: PUSH
56602: LD_INT 24
56604: PUSH
56605: LD_INT 25
56607: PUSH
56608: LD_INT 26
56610: PUSH
56611: LD_INT 27
56613: PUSH
56614: LD_INT 28
56616: PUSH
56617: LD_INT 29
56619: PUSH
56620: LD_INT 30
56622: PUSH
56623: LD_INT 31
56625: PUSH
56626: LD_INT 32
56628: PUSH
56629: LD_INT 33
56631: PUSH
56632: LD_INT 34
56634: PUSH
56635: LD_INT 35
56637: PUSH
56638: LD_INT 36
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 101
56681: PUSH
56682: LD_INT 102
56684: PUSH
56685: LD_INT 103
56687: PUSH
56688: LD_INT 104
56690: PUSH
56691: LD_INT 105
56693: PUSH
56694: LD_INT 106
56696: PUSH
56697: LD_INT 107
56699: PUSH
56700: LD_INT 108
56702: PUSH
56703: LD_INT 109
56705: PUSH
56706: LD_INT 110
56708: PUSH
56709: LD_INT 111
56711: PUSH
56712: LD_INT 112
56714: PUSH
56715: LD_INT 113
56717: PUSH
56718: LD_INT 114
56720: PUSH
56721: LD_INT 115
56723: PUSH
56724: LD_INT 116
56726: PUSH
56727: LD_INT 117
56729: PUSH
56730: LD_INT 118
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: ST_TO_ADDR
56757: GO 56760
56759: POP
// end else
56760: GO 56991
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56762: LD_ADDR_VAR 0 2
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: LD_INT 5
56781: PUSH
56782: LD_INT 6
56784: PUSH
56785: LD_INT 7
56787: PUSH
56788: LD_INT 8
56790: PUSH
56791: LD_INT 9
56793: PUSH
56794: LD_INT 10
56796: PUSH
56797: LD_INT 11
56799: PUSH
56800: LD_INT 12
56802: PUSH
56803: LD_INT 13
56805: PUSH
56806: LD_INT 14
56808: PUSH
56809: LD_INT 15
56811: PUSH
56812: LD_INT 16
56814: PUSH
56815: LD_INT 17
56817: PUSH
56818: LD_INT 18
56820: PUSH
56821: LD_INT 19
56823: PUSH
56824: LD_INT 20
56826: PUSH
56827: LD_INT 21
56829: PUSH
56830: LD_INT 22
56832: PUSH
56833: LD_INT 23
56835: PUSH
56836: LD_INT 24
56838: PUSH
56839: LD_INT 25
56841: PUSH
56842: LD_INT 26
56844: PUSH
56845: LD_INT 27
56847: PUSH
56848: LD_INT 28
56850: PUSH
56851: LD_INT 29
56853: PUSH
56854: LD_INT 30
56856: PUSH
56857: LD_INT 31
56859: PUSH
56860: LD_INT 32
56862: PUSH
56863: LD_INT 33
56865: PUSH
56866: LD_INT 34
56868: PUSH
56869: LD_INT 35
56871: PUSH
56872: LD_INT 36
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 101
56915: PUSH
56916: LD_INT 102
56918: PUSH
56919: LD_INT 103
56921: PUSH
56922: LD_INT 104
56924: PUSH
56925: LD_INT 105
56927: PUSH
56928: LD_INT 106
56930: PUSH
56931: LD_INT 107
56933: PUSH
56934: LD_INT 108
56936: PUSH
56937: LD_INT 109
56939: PUSH
56940: LD_INT 110
56942: PUSH
56943: LD_INT 111
56945: PUSH
56946: LD_INT 112
56948: PUSH
56949: LD_INT 113
56951: PUSH
56952: LD_INT 114
56954: PUSH
56955: LD_INT 115
56957: PUSH
56958: LD_INT 116
56960: PUSH
56961: LD_INT 117
56963: PUSH
56964: LD_INT 118
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// if result then
56991: LD_VAR 0 2
56995: IFFALSE 57781
// begin normal :=  ;
56997: LD_ADDR_VAR 0 5
57001: PUSH
57002: LD_STRING 
57004: ST_TO_ADDR
// hardcore :=  ;
57005: LD_ADDR_VAR 0 6
57009: PUSH
57010: LD_STRING 
57012: ST_TO_ADDR
// active :=  ;
57013: LD_ADDR_VAR 0 7
57017: PUSH
57018: LD_STRING 
57020: ST_TO_ADDR
// for i = 1 to normalCounter do
57021: LD_ADDR_VAR 0 8
57025: PUSH
57026: DOUBLE
57027: LD_INT 1
57029: DEC
57030: ST_TO_ADDR
57031: LD_EXP 45
57035: PUSH
57036: FOR_TO
57037: IFFALSE 57138
// begin tmp := 0 ;
57039: LD_ADDR_VAR 0 3
57043: PUSH
57044: LD_STRING 0
57046: ST_TO_ADDR
// if result [ 1 ] then
57047: LD_VAR 0 2
57051: PUSH
57052: LD_INT 1
57054: ARRAY
57055: IFFALSE 57120
// if result [ 1 ] [ 1 ] = i then
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PUSH
57066: LD_INT 1
57068: ARRAY
57069: PUSH
57070: LD_VAR 0 8
57074: EQUAL
57075: IFFALSE 57120
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
57077: LD_ADDR_VAR 0 2
57081: PUSH
57082: LD_VAR 0 2
57086: PPUSH
57087: LD_INT 1
57089: PPUSH
57090: LD_VAR 0 2
57094: PUSH
57095: LD_INT 1
57097: ARRAY
57098: PPUSH
57099: LD_INT 1
57101: PPUSH
57102: CALL_OW 3
57106: PPUSH
57107: CALL_OW 1
57111: ST_TO_ADDR
// tmp := 1 ;
57112: LD_ADDR_VAR 0 3
57116: PUSH
57117: LD_STRING 1
57119: ST_TO_ADDR
// end ; normal := normal & tmp ;
57120: LD_ADDR_VAR 0 5
57124: PUSH
57125: LD_VAR 0 5
57129: PUSH
57130: LD_VAR 0 3
57134: STR
57135: ST_TO_ADDR
// end ;
57136: GO 57036
57138: POP
57139: POP
// for i = 1 to hardcoreCounter do
57140: LD_ADDR_VAR 0 8
57144: PUSH
57145: DOUBLE
57146: LD_INT 1
57148: DEC
57149: ST_TO_ADDR
57150: LD_EXP 46
57154: PUSH
57155: FOR_TO
57156: IFFALSE 57261
// begin tmp := 0 ;
57158: LD_ADDR_VAR 0 3
57162: PUSH
57163: LD_STRING 0
57165: ST_TO_ADDR
// if result [ 2 ] then
57166: LD_VAR 0 2
57170: PUSH
57171: LD_INT 2
57173: ARRAY
57174: IFFALSE 57243
// if result [ 2 ] [ 1 ] = 100 + i then
57176: LD_VAR 0 2
57180: PUSH
57181: LD_INT 2
57183: ARRAY
57184: PUSH
57185: LD_INT 1
57187: ARRAY
57188: PUSH
57189: LD_INT 100
57191: PUSH
57192: LD_VAR 0 8
57196: PLUS
57197: EQUAL
57198: IFFALSE 57243
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57200: LD_ADDR_VAR 0 2
57204: PUSH
57205: LD_VAR 0 2
57209: PPUSH
57210: LD_INT 2
57212: PPUSH
57213: LD_VAR 0 2
57217: PUSH
57218: LD_INT 2
57220: ARRAY
57221: PPUSH
57222: LD_INT 1
57224: PPUSH
57225: CALL_OW 3
57229: PPUSH
57230: CALL_OW 1
57234: ST_TO_ADDR
// tmp := 1 ;
57235: LD_ADDR_VAR 0 3
57239: PUSH
57240: LD_STRING 1
57242: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57243: LD_ADDR_VAR 0 6
57247: PUSH
57248: LD_VAR 0 6
57252: PUSH
57253: LD_VAR 0 3
57257: STR
57258: ST_TO_ADDR
// end ;
57259: GO 57155
57261: POP
57262: POP
// if isGameLoad then
57263: LD_VAR 0 1
57267: IFFALSE 57742
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57269: LD_ADDR_VAR 0 4
57273: PUSH
57274: LD_EXP 49
57278: PUSH
57279: LD_EXP 48
57283: PUSH
57284: LD_EXP 50
57288: PUSH
57289: LD_EXP 47
57293: PUSH
57294: LD_EXP 51
57298: PUSH
57299: LD_EXP 52
57303: PUSH
57304: LD_EXP 53
57308: PUSH
57309: LD_EXP 54
57313: PUSH
57314: LD_EXP 55
57318: PUSH
57319: LD_EXP 56
57323: PUSH
57324: LD_EXP 57
57328: PUSH
57329: LD_EXP 58
57333: PUSH
57334: LD_EXP 59
57338: PUSH
57339: LD_EXP 60
57343: PUSH
57344: LD_EXP 68
57348: PUSH
57349: LD_EXP 69
57353: PUSH
57354: LD_EXP 70
57358: PUSH
57359: LD_EXP 71
57363: PUSH
57364: LD_EXP 73
57368: PUSH
57369: LD_EXP 74
57373: PUSH
57374: LD_EXP 75
57378: PUSH
57379: LD_EXP 78
57383: PUSH
57384: LD_EXP 80
57388: PUSH
57389: LD_EXP 81
57393: PUSH
57394: LD_EXP 82
57398: PUSH
57399: LD_EXP 84
57403: PUSH
57404: LD_EXP 85
57408: PUSH
57409: LD_EXP 88
57413: PUSH
57414: LD_EXP 89
57418: PUSH
57419: LD_EXP 90
57423: PUSH
57424: LD_EXP 91
57428: PUSH
57429: LD_EXP 92
57433: PUSH
57434: LD_EXP 93
57438: PUSH
57439: LD_EXP 94
57443: PUSH
57444: LD_EXP 95
57448: PUSH
57449: LD_EXP 96
57453: PUSH
57454: LD_EXP 61
57458: PUSH
57459: LD_EXP 62
57463: PUSH
57464: LD_EXP 65
57468: PUSH
57469: LD_EXP 66
57473: PUSH
57474: LD_EXP 67
57478: PUSH
57479: LD_EXP 63
57483: PUSH
57484: LD_EXP 64
57488: PUSH
57489: LD_EXP 72
57493: PUSH
57494: LD_EXP 76
57498: PUSH
57499: LD_EXP 77
57503: PUSH
57504: LD_EXP 79
57508: PUSH
57509: LD_EXP 83
57513: PUSH
57514: LD_EXP 86
57518: PUSH
57519: LD_EXP 87
57523: PUSH
57524: LD_EXP 97
57528: PUSH
57529: LD_EXP 98
57533: PUSH
57534: LD_EXP 99
57538: PUSH
57539: LD_EXP 100
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// tmp :=  ;
57600: LD_ADDR_VAR 0 3
57604: PUSH
57605: LD_STRING 
57607: ST_TO_ADDR
// for i = 1 to normalCounter do
57608: LD_ADDR_VAR 0 8
57612: PUSH
57613: DOUBLE
57614: LD_INT 1
57616: DEC
57617: ST_TO_ADDR
57618: LD_EXP 45
57622: PUSH
57623: FOR_TO
57624: IFFALSE 57660
// begin if flags [ i ] then
57626: LD_VAR 0 4
57630: PUSH
57631: LD_VAR 0 8
57635: ARRAY
57636: IFFALSE 57658
// tmp := tmp & i & ; ;
57638: LD_ADDR_VAR 0 3
57642: PUSH
57643: LD_VAR 0 3
57647: PUSH
57648: LD_VAR 0 8
57652: STR
57653: PUSH
57654: LD_STRING ;
57656: STR
57657: ST_TO_ADDR
// end ;
57658: GO 57623
57660: POP
57661: POP
// for i = 1 to hardcoreCounter do
57662: LD_ADDR_VAR 0 8
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_EXP 46
57676: PUSH
57677: FOR_TO
57678: IFFALSE 57724
// begin if flags [ normalCounter + i ] then
57680: LD_VAR 0 4
57684: PUSH
57685: LD_EXP 45
57689: PUSH
57690: LD_VAR 0 8
57694: PLUS
57695: ARRAY
57696: IFFALSE 57722
// tmp := tmp & ( 100 + i ) & ; ;
57698: LD_ADDR_VAR 0 3
57702: PUSH
57703: LD_VAR 0 3
57707: PUSH
57708: LD_INT 100
57710: PUSH
57711: LD_VAR 0 8
57715: PLUS
57716: STR
57717: PUSH
57718: LD_STRING ;
57720: STR
57721: ST_TO_ADDR
// end ;
57722: GO 57677
57724: POP
57725: POP
// if tmp then
57726: LD_VAR 0 3
57730: IFFALSE 57742
// active := tmp ;
57732: LD_ADDR_VAR 0 7
57736: PUSH
57737: LD_VAR 0 3
57741: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57742: LD_STRING getStreamItemsFromMission("
57744: PUSH
57745: LD_VAR 0 5
57749: STR
57750: PUSH
57751: LD_STRING ","
57753: STR
57754: PUSH
57755: LD_VAR 0 6
57759: STR
57760: PUSH
57761: LD_STRING ","
57763: STR
57764: PUSH
57765: LD_VAR 0 7
57769: STR
57770: PUSH
57771: LD_STRING ")
57773: STR
57774: PPUSH
57775: CALL_OW 559
// end else
57779: GO 57788
// ToLua ( getStreamItemsFromMission("","","") ) ;
57781: LD_STRING getStreamItemsFromMission("","","")
57783: PPUSH
57784: CALL_OW 559
// end ;
57788: LD_VAR 0 2
57792: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57793: LD_EXP 44
57797: PUSH
57798: LD_EXP 49
57802: AND
57803: IFFALSE 57927
57805: GO 57807
57807: DISABLE
57808: LD_INT 0
57810: PPUSH
57811: PPUSH
// begin enable ;
57812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57813: LD_ADDR_VAR 0 2
57817: PUSH
57818: LD_INT 22
57820: PUSH
57821: LD_OWVAR 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 34
57835: PUSH
57836: LD_INT 7
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 34
57845: PUSH
57846: LD_INT 45
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 34
57855: PUSH
57856: LD_INT 28
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 34
57865: PUSH
57866: LD_INT 47
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PPUSH
57884: CALL_OW 69
57888: ST_TO_ADDR
// if not tmp then
57889: LD_VAR 0 2
57893: NOT
57894: IFFALSE 57898
// exit ;
57896: GO 57927
// for i in tmp do
57898: LD_ADDR_VAR 0 1
57902: PUSH
57903: LD_VAR 0 2
57907: PUSH
57908: FOR_IN
57909: IFFALSE 57925
// begin SetLives ( i , 0 ) ;
57911: LD_VAR 0 1
57915: PPUSH
57916: LD_INT 0
57918: PPUSH
57919: CALL_OW 234
// end ;
57923: GO 57908
57925: POP
57926: POP
// end ;
57927: PPOPN 2
57929: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57930: LD_EXP 44
57934: PUSH
57935: LD_EXP 50
57939: AND
57940: IFFALSE 58024
57942: GO 57944
57944: DISABLE
57945: LD_INT 0
57947: PPUSH
57948: PPUSH
// begin enable ;
57949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57950: LD_ADDR_VAR 0 2
57954: PUSH
57955: LD_INT 22
57957: PUSH
57958: LD_OWVAR 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 32
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PPUSH
57981: CALL_OW 69
57985: ST_TO_ADDR
// if not tmp then
57986: LD_VAR 0 2
57990: NOT
57991: IFFALSE 57995
// exit ;
57993: GO 58024
// for i in tmp do
57995: LD_ADDR_VAR 0 1
57999: PUSH
58000: LD_VAR 0 2
58004: PUSH
58005: FOR_IN
58006: IFFALSE 58022
// begin SetLives ( i , 0 ) ;
58008: LD_VAR 0 1
58012: PPUSH
58013: LD_INT 0
58015: PPUSH
58016: CALL_OW 234
// end ;
58020: GO 58005
58022: POP
58023: POP
// end ;
58024: PPOPN 2
58026: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
58027: LD_EXP 44
58031: PUSH
58032: LD_EXP 47
58036: AND
58037: IFFALSE 58130
58039: GO 58041
58041: DISABLE
58042: LD_INT 0
58044: PPUSH
// begin enable ;
58045: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
58046: LD_ADDR_VAR 0 1
58050: PUSH
58051: LD_INT 22
58053: PUSH
58054: LD_OWVAR 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 25
58068: PUSH
58069: LD_INT 5
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 25
58078: PUSH
58079: LD_INT 9
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 25
58088: PUSH
58089: LD_INT 8
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PPUSH
58106: CALL_OW 69
58110: PUSH
58111: FOR_IN
58112: IFFALSE 58128
// begin SetClass ( i , 1 ) ;
58114: LD_VAR 0 1
58118: PPUSH
58119: LD_INT 1
58121: PPUSH
58122: CALL_OW 336
// end ;
58126: GO 58111
58128: POP
58129: POP
// end ;
58130: PPOPN 1
58132: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
58133: LD_EXP 44
58137: PUSH
58138: LD_EXP 48
58142: AND
58143: PUSH
58144: LD_OWVAR 65
58148: PUSH
58149: LD_INT 7
58151: LESS
58152: AND
58153: IFFALSE 58167
58155: GO 58157
58157: DISABLE
// begin enable ;
58158: ENABLE
// game_speed := 7 ;
58159: LD_ADDR_OWVAR 65
58163: PUSH
58164: LD_INT 7
58166: ST_TO_ADDR
// end ;
58167: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58168: LD_EXP 44
58172: PUSH
58173: LD_EXP 51
58177: AND
58178: IFFALSE 58380
58180: GO 58182
58182: DISABLE
58183: LD_INT 0
58185: PPUSH
58186: PPUSH
58187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58188: LD_ADDR_VAR 0 3
58192: PUSH
58193: LD_INT 81
58195: PUSH
58196: LD_OWVAR 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 21
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PPUSH
58219: CALL_OW 69
58223: ST_TO_ADDR
// if not tmp then
58224: LD_VAR 0 3
58228: NOT
58229: IFFALSE 58233
// exit ;
58231: GO 58380
// if tmp > 5 then
58233: LD_VAR 0 3
58237: PUSH
58238: LD_INT 5
58240: GREATER
58241: IFFALSE 58253
// k := 5 else
58243: LD_ADDR_VAR 0 2
58247: PUSH
58248: LD_INT 5
58250: ST_TO_ADDR
58251: GO 58263
// k := tmp ;
58253: LD_ADDR_VAR 0 2
58257: PUSH
58258: LD_VAR 0 3
58262: ST_TO_ADDR
// for i := 1 to k do
58263: LD_ADDR_VAR 0 1
58267: PUSH
58268: DOUBLE
58269: LD_INT 1
58271: DEC
58272: ST_TO_ADDR
58273: LD_VAR 0 2
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58378
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58281: LD_VAR 0 3
58285: PUSH
58286: LD_VAR 0 1
58290: ARRAY
58291: PPUSH
58292: LD_VAR 0 1
58296: PUSH
58297: LD_INT 4
58299: MOD
58300: PUSH
58301: LD_INT 1
58303: PLUS
58304: PPUSH
58305: CALL_OW 259
58309: PUSH
58310: LD_INT 10
58312: LESS
58313: IFFALSE 58376
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58315: LD_VAR 0 3
58319: PUSH
58320: LD_VAR 0 1
58324: ARRAY
58325: PPUSH
58326: LD_VAR 0 1
58330: PUSH
58331: LD_INT 4
58333: MOD
58334: PUSH
58335: LD_INT 1
58337: PLUS
58338: PPUSH
58339: LD_VAR 0 3
58343: PUSH
58344: LD_VAR 0 1
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 1
58354: PUSH
58355: LD_INT 4
58357: MOD
58358: PUSH
58359: LD_INT 1
58361: PLUS
58362: PPUSH
58363: CALL_OW 259
58367: PUSH
58368: LD_INT 1
58370: PLUS
58371: PPUSH
58372: CALL_OW 237
58376: GO 58278
58378: POP
58379: POP
// end ;
58380: PPOPN 3
58382: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58383: LD_EXP 44
58387: PUSH
58388: LD_EXP 52
58392: AND
58393: IFFALSE 58413
58395: GO 58397
58397: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58398: LD_INT 4
58400: PPUSH
58401: LD_OWVAR 2
58405: PPUSH
58406: LD_INT 0
58408: PPUSH
58409: CALL_OW 324
58413: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58414: LD_EXP 44
58418: PUSH
58419: LD_EXP 81
58423: AND
58424: IFFALSE 58444
58426: GO 58428
58428: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58429: LD_INT 19
58431: PPUSH
58432: LD_OWVAR 2
58436: PPUSH
58437: LD_INT 0
58439: PPUSH
58440: CALL_OW 324
58444: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58445: LD_EXP 44
58449: PUSH
58450: LD_EXP 53
58454: AND
58455: IFFALSE 58557
58457: GO 58459
58459: DISABLE
58460: LD_INT 0
58462: PPUSH
58463: PPUSH
// begin enable ;
58464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58465: LD_ADDR_VAR 0 2
58469: PUSH
58470: LD_INT 22
58472: PUSH
58473: LD_OWVAR 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 34
58487: PUSH
58488: LD_INT 11
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 34
58497: PUSH
58498: LD_INT 30
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PPUSH
58514: CALL_OW 69
58518: ST_TO_ADDR
// if not tmp then
58519: LD_VAR 0 2
58523: NOT
58524: IFFALSE 58528
// exit ;
58526: GO 58557
// for i in tmp do
58528: LD_ADDR_VAR 0 1
58532: PUSH
58533: LD_VAR 0 2
58537: PUSH
58538: FOR_IN
58539: IFFALSE 58555
// begin SetLives ( i , 0 ) ;
58541: LD_VAR 0 1
58545: PPUSH
58546: LD_INT 0
58548: PPUSH
58549: CALL_OW 234
// end ;
58553: GO 58538
58555: POP
58556: POP
// end ;
58557: PPOPN 2
58559: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58560: LD_EXP 44
58564: PUSH
58565: LD_EXP 54
58569: AND
58570: IFFALSE 58590
58572: GO 58574
58574: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58575: LD_INT 32
58577: PPUSH
58578: LD_OWVAR 2
58582: PPUSH
58583: LD_INT 0
58585: PPUSH
58586: CALL_OW 324
58590: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58591: LD_EXP 44
58595: PUSH
58596: LD_EXP 55
58600: AND
58601: IFFALSE 58782
58603: GO 58605
58605: DISABLE
58606: LD_INT 0
58608: PPUSH
58609: PPUSH
58610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58611: LD_ADDR_VAR 0 2
58615: PUSH
58616: LD_INT 22
58618: PUSH
58619: LD_OWVAR 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 33
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PPUSH
58642: CALL_OW 69
58646: ST_TO_ADDR
// if not tmp then
58647: LD_VAR 0 2
58651: NOT
58652: IFFALSE 58656
// exit ;
58654: GO 58782
// side := 0 ;
58656: LD_ADDR_VAR 0 3
58660: PUSH
58661: LD_INT 0
58663: ST_TO_ADDR
// for i := 1 to 8 do
58664: LD_ADDR_VAR 0 1
58668: PUSH
58669: DOUBLE
58670: LD_INT 1
58672: DEC
58673: ST_TO_ADDR
58674: LD_INT 8
58676: PUSH
58677: FOR_TO
58678: IFFALSE 58726
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58680: LD_OWVAR 2
58684: PUSH
58685: LD_VAR 0 1
58689: NONEQUAL
58690: PUSH
58691: LD_OWVAR 2
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL_OW 81
58705: PUSH
58706: LD_INT 2
58708: EQUAL
58709: AND
58710: IFFALSE 58724
// begin side := i ;
58712: LD_ADDR_VAR 0 3
58716: PUSH
58717: LD_VAR 0 1
58721: ST_TO_ADDR
// break ;
58722: GO 58726
// end ;
58724: GO 58677
58726: POP
58727: POP
// if not side then
58728: LD_VAR 0 3
58732: NOT
58733: IFFALSE 58737
// exit ;
58735: GO 58782
// for i := 1 to tmp do
58737: LD_ADDR_VAR 0 1
58741: PUSH
58742: DOUBLE
58743: LD_INT 1
58745: DEC
58746: ST_TO_ADDR
58747: LD_VAR 0 2
58751: PUSH
58752: FOR_TO
58753: IFFALSE 58780
// if Prob ( 60 ) then
58755: LD_INT 60
58757: PPUSH
58758: CALL_OW 13
58762: IFFALSE 58778
// SetSide ( i , side ) ;
58764: LD_VAR 0 1
58768: PPUSH
58769: LD_VAR 0 3
58773: PPUSH
58774: CALL_OW 235
58778: GO 58752
58780: POP
58781: POP
// end ;
58782: PPOPN 3
58784: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58785: LD_EXP 44
58789: PUSH
58790: LD_EXP 57
58794: AND
58795: IFFALSE 58914
58797: GO 58799
58799: DISABLE
58800: LD_INT 0
58802: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58803: LD_ADDR_VAR 0 1
58807: PUSH
58808: LD_INT 22
58810: PUSH
58811: LD_OWVAR 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 21
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 23
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: PPUSH
58852: CALL_OW 69
58856: PUSH
58857: FOR_IN
58858: IFFALSE 58912
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58860: LD_VAR 0 1
58864: PPUSH
58865: CALL_OW 257
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: IN
58888: IFFALSE 58910
// SetClass ( un , rand ( 1 , 4 ) ) ;
58890: LD_VAR 0 1
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: LD_INT 4
58900: PPUSH
58901: CALL_OW 12
58905: PPUSH
58906: CALL_OW 336
58910: GO 58857
58912: POP
58913: POP
// end ;
58914: PPOPN 1
58916: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58917: LD_EXP 44
58921: PUSH
58922: LD_EXP 56
58926: AND
58927: IFFALSE 59006
58929: GO 58931
58931: DISABLE
58932: LD_INT 0
58934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58935: LD_ADDR_VAR 0 1
58939: PUSH
58940: LD_INT 22
58942: PUSH
58943: LD_OWVAR 2
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 21
58954: PUSH
58955: LD_INT 3
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PPUSH
58966: CALL_OW 69
58970: ST_TO_ADDR
// if not tmp then
58971: LD_VAR 0 1
58975: NOT
58976: IFFALSE 58980
// exit ;
58978: GO 59006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58980: LD_VAR 0 1
58984: PUSH
58985: LD_INT 1
58987: PPUSH
58988: LD_VAR 0 1
58992: PPUSH
58993: CALL_OW 12
58997: ARRAY
58998: PPUSH
58999: LD_INT 100
59001: PPUSH
59002: CALL_OW 234
// end ;
59006: PPOPN 1
59008: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
59009: LD_EXP 44
59013: PUSH
59014: LD_EXP 58
59018: AND
59019: IFFALSE 59117
59021: GO 59023
59023: DISABLE
59024: LD_INT 0
59026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59027: LD_ADDR_VAR 0 1
59031: PUSH
59032: LD_INT 22
59034: PUSH
59035: LD_OWVAR 2
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 21
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PPUSH
59058: CALL_OW 69
59062: ST_TO_ADDR
// if not tmp then
59063: LD_VAR 0 1
59067: NOT
59068: IFFALSE 59072
// exit ;
59070: GO 59117
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
59072: LD_VAR 0 1
59076: PUSH
59077: LD_INT 1
59079: PPUSH
59080: LD_VAR 0 1
59084: PPUSH
59085: CALL_OW 12
59089: ARRAY
59090: PPUSH
59091: LD_INT 1
59093: PPUSH
59094: LD_INT 4
59096: PPUSH
59097: CALL_OW 12
59101: PPUSH
59102: LD_INT 3000
59104: PPUSH
59105: LD_INT 9000
59107: PPUSH
59108: CALL_OW 12
59112: PPUSH
59113: CALL_OW 492
// end ;
59117: PPOPN 1
59119: END
// every 0 0$1 trigger StreamModeActive and sDepot do
59120: LD_EXP 44
59124: PUSH
59125: LD_EXP 59
59129: AND
59130: IFFALSE 59150
59132: GO 59134
59134: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
59135: LD_INT 1
59137: PPUSH
59138: LD_OWVAR 2
59142: PPUSH
59143: LD_INT 0
59145: PPUSH
59146: CALL_OW 324
59150: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59151: LD_EXP 44
59155: PUSH
59156: LD_EXP 60
59160: AND
59161: IFFALSE 59244
59163: GO 59165
59165: DISABLE
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59170: LD_ADDR_VAR 0 2
59174: PUSH
59175: LD_INT 22
59177: PUSH
59178: LD_OWVAR 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 21
59189: PUSH
59190: LD_INT 3
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PPUSH
59201: CALL_OW 69
59205: ST_TO_ADDR
// if not tmp then
59206: LD_VAR 0 2
59210: NOT
59211: IFFALSE 59215
// exit ;
59213: GO 59244
// for i in tmp do
59215: LD_ADDR_VAR 0 1
59219: PUSH
59220: LD_VAR 0 2
59224: PUSH
59225: FOR_IN
59226: IFFALSE 59242
// SetBLevel ( i , 10 ) ;
59228: LD_VAR 0 1
59232: PPUSH
59233: LD_INT 10
59235: PPUSH
59236: CALL_OW 241
59240: GO 59225
59242: POP
59243: POP
// end ;
59244: PPOPN 2
59246: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59247: LD_EXP 44
59251: PUSH
59252: LD_EXP 61
59256: AND
59257: IFFALSE 59368
59259: GO 59261
59261: DISABLE
59262: LD_INT 0
59264: PPUSH
59265: PPUSH
59266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59267: LD_ADDR_VAR 0 3
59271: PUSH
59272: LD_INT 22
59274: PUSH
59275: LD_OWVAR 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 25
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PPUSH
59298: CALL_OW 69
59302: ST_TO_ADDR
// if not tmp then
59303: LD_VAR 0 3
59307: NOT
59308: IFFALSE 59312
// exit ;
59310: GO 59368
// un := tmp [ rand ( 1 , tmp ) ] ;
59312: LD_ADDR_VAR 0 2
59316: PUSH
59317: LD_VAR 0 3
59321: PUSH
59322: LD_INT 1
59324: PPUSH
59325: LD_VAR 0 3
59329: PPUSH
59330: CALL_OW 12
59334: ARRAY
59335: ST_TO_ADDR
// if Crawls ( un ) then
59336: LD_VAR 0 2
59340: PPUSH
59341: CALL_OW 318
59345: IFFALSE 59356
// ComWalk ( un ) ;
59347: LD_VAR 0 2
59351: PPUSH
59352: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59356: LD_VAR 0 2
59360: PPUSH
59361: LD_INT 5
59363: PPUSH
59364: CALL_OW 336
// end ;
59368: PPOPN 3
59370: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59371: LD_EXP 44
59375: PUSH
59376: LD_EXP 62
59380: AND
59381: PUSH
59382: LD_OWVAR 67
59386: PUSH
59387: LD_INT 4
59389: LESS
59390: AND
59391: IFFALSE 59410
59393: GO 59395
59395: DISABLE
// begin Difficulty := Difficulty + 1 ;
59396: LD_ADDR_OWVAR 67
59400: PUSH
59401: LD_OWVAR 67
59405: PUSH
59406: LD_INT 1
59408: PLUS
59409: ST_TO_ADDR
// end ;
59410: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59411: LD_EXP 44
59415: PUSH
59416: LD_EXP 63
59420: AND
59421: IFFALSE 59524
59423: GO 59425
59425: DISABLE
59426: LD_INT 0
59428: PPUSH
// begin for i := 1 to 5 do
59429: LD_ADDR_VAR 0 1
59433: PUSH
59434: DOUBLE
59435: LD_INT 1
59437: DEC
59438: ST_TO_ADDR
59439: LD_INT 5
59441: PUSH
59442: FOR_TO
59443: IFFALSE 59522
// begin uc_nation := nation_nature ;
59445: LD_ADDR_OWVAR 21
59449: PUSH
59450: LD_INT 0
59452: ST_TO_ADDR
// uc_side := 0 ;
59453: LD_ADDR_OWVAR 20
59457: PUSH
59458: LD_INT 0
59460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59461: LD_ADDR_OWVAR 29
59465: PUSH
59466: LD_INT 12
59468: PUSH
59469: LD_INT 12
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: ST_TO_ADDR
// hc_agressivity := 20 ;
59476: LD_ADDR_OWVAR 35
59480: PUSH
59481: LD_INT 20
59483: ST_TO_ADDR
// hc_class := class_tiger ;
59484: LD_ADDR_OWVAR 28
59488: PUSH
59489: LD_INT 14
59491: ST_TO_ADDR
// hc_gallery :=  ;
59492: LD_ADDR_OWVAR 33
59496: PUSH
59497: LD_STRING 
59499: ST_TO_ADDR
// hc_name :=  ;
59500: LD_ADDR_OWVAR 26
59504: PUSH
59505: LD_STRING 
59507: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59508: CALL_OW 44
59512: PPUSH
59513: LD_INT 0
59515: PPUSH
59516: CALL_OW 51
// end ;
59520: GO 59442
59522: POP
59523: POP
// end ;
59524: PPOPN 1
59526: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59527: LD_EXP 44
59531: PUSH
59532: LD_EXP 64
59536: AND
59537: IFFALSE 59546
59539: GO 59541
59541: DISABLE
// StreamSibBomb ;
59542: CALL 59547 0 0
59546: END
// export function StreamSibBomb ; var i , x , y ; begin
59547: LD_INT 0
59549: PPUSH
59550: PPUSH
59551: PPUSH
59552: PPUSH
// result := false ;
59553: LD_ADDR_VAR 0 1
59557: PUSH
59558: LD_INT 0
59560: ST_TO_ADDR
// for i := 1 to 16 do
59561: LD_ADDR_VAR 0 2
59565: PUSH
59566: DOUBLE
59567: LD_INT 1
59569: DEC
59570: ST_TO_ADDR
59571: LD_INT 16
59573: PUSH
59574: FOR_TO
59575: IFFALSE 59774
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59577: LD_ADDR_VAR 0 3
59581: PUSH
59582: LD_INT 10
59584: PUSH
59585: LD_INT 20
59587: PUSH
59588: LD_INT 30
59590: PUSH
59591: LD_INT 40
59593: PUSH
59594: LD_INT 50
59596: PUSH
59597: LD_INT 60
59599: PUSH
59600: LD_INT 70
59602: PUSH
59603: LD_INT 80
59605: PUSH
59606: LD_INT 90
59608: PUSH
59609: LD_INT 100
59611: PUSH
59612: LD_INT 110
59614: PUSH
59615: LD_INT 120
59617: PUSH
59618: LD_INT 130
59620: PUSH
59621: LD_INT 140
59623: PUSH
59624: LD_INT 150
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PPUSH
59647: LD_INT 15
59649: PPUSH
59650: CALL_OW 12
59654: ARRAY
59655: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59656: LD_ADDR_VAR 0 4
59660: PUSH
59661: LD_INT 10
59663: PUSH
59664: LD_INT 20
59666: PUSH
59667: LD_INT 30
59669: PUSH
59670: LD_INT 40
59672: PUSH
59673: LD_INT 50
59675: PUSH
59676: LD_INT 60
59678: PUSH
59679: LD_INT 70
59681: PUSH
59682: LD_INT 80
59684: PUSH
59685: LD_INT 90
59687: PUSH
59688: LD_INT 100
59690: PUSH
59691: LD_INT 110
59693: PUSH
59694: LD_INT 120
59696: PUSH
59697: LD_INT 130
59699: PUSH
59700: LD_INT 140
59702: PUSH
59703: LD_INT 150
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PPUSH
59726: LD_INT 15
59728: PPUSH
59729: CALL_OW 12
59733: ARRAY
59734: ST_TO_ADDR
// if ValidHex ( x , y ) then
59735: LD_VAR 0 3
59739: PPUSH
59740: LD_VAR 0 4
59744: PPUSH
59745: CALL_OW 488
59749: IFFALSE 59772
// begin result := [ x , y ] ;
59751: LD_ADDR_VAR 0 1
59755: PUSH
59756: LD_VAR 0 3
59760: PUSH
59761: LD_VAR 0 4
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// break ;
59770: GO 59774
// end ; end ;
59772: GO 59574
59774: POP
59775: POP
// if result then
59776: LD_VAR 0 1
59780: IFFALSE 59840
// begin ToLua ( playSibBomb() ) ;
59782: LD_STRING playSibBomb()
59784: PPUSH
59785: CALL_OW 559
// wait ( 0 0$14 ) ;
59789: LD_INT 490
59791: PPUSH
59792: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59796: LD_VAR 0 1
59800: PUSH
59801: LD_INT 1
59803: ARRAY
59804: PPUSH
59805: LD_VAR 0 1
59809: PUSH
59810: LD_INT 2
59812: ARRAY
59813: PPUSH
59814: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59818: LD_VAR 0 1
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PPUSH
59827: LD_VAR 0 1
59831: PUSH
59832: LD_INT 2
59834: ARRAY
59835: PPUSH
59836: CALL_OW 429
// end ; end ;
59840: LD_VAR 0 1
59844: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59845: LD_EXP 44
59849: PUSH
59850: LD_EXP 66
59854: AND
59855: IFFALSE 59867
59857: GO 59859
59859: DISABLE
// YouLost (  ) ;
59860: LD_STRING 
59862: PPUSH
59863: CALL_OW 104
59867: END
// every 0 0$1 trigger StreamModeActive and sFog do
59868: LD_EXP 44
59872: PUSH
59873: LD_EXP 65
59877: AND
59878: IFFALSE 59892
59880: GO 59882
59882: DISABLE
// FogOff ( your_side ) ;
59883: LD_OWVAR 2
59887: PPUSH
59888: CALL_OW 344
59892: END
// every 0 0$1 trigger StreamModeActive and sSun do
59893: LD_EXP 44
59897: PUSH
59898: LD_EXP 67
59902: AND
59903: IFFALSE 59931
59905: GO 59907
59907: DISABLE
// begin solar_recharge_percent := 0 ;
59908: LD_ADDR_OWVAR 79
59912: PUSH
59913: LD_INT 0
59915: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59916: LD_INT 10500
59918: PPUSH
59919: CALL_OW 67
// solar_recharge_percent := 100 ;
59923: LD_ADDR_OWVAR 79
59927: PUSH
59928: LD_INT 100
59930: ST_TO_ADDR
// end ;
59931: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59932: LD_EXP 44
59936: PUSH
59937: LD_EXP 68
59941: AND
59942: IFFALSE 60181
59944: GO 59946
59946: DISABLE
59947: LD_INT 0
59949: PPUSH
59950: PPUSH
59951: PPUSH
// begin tmp := [ ] ;
59952: LD_ADDR_VAR 0 3
59956: PUSH
59957: EMPTY
59958: ST_TO_ADDR
// for i := 1 to 6 do
59959: LD_ADDR_VAR 0 1
59963: PUSH
59964: DOUBLE
59965: LD_INT 1
59967: DEC
59968: ST_TO_ADDR
59969: LD_INT 6
59971: PUSH
59972: FOR_TO
59973: IFFALSE 60078
// begin uc_nation := nation_nature ;
59975: LD_ADDR_OWVAR 21
59979: PUSH
59980: LD_INT 0
59982: ST_TO_ADDR
// uc_side := 0 ;
59983: LD_ADDR_OWVAR 20
59987: PUSH
59988: LD_INT 0
59990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59991: LD_ADDR_OWVAR 29
59995: PUSH
59996: LD_INT 12
59998: PUSH
59999: LD_INT 12
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// hc_agressivity := 20 ;
60006: LD_ADDR_OWVAR 35
60010: PUSH
60011: LD_INT 20
60013: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
60014: LD_ADDR_OWVAR 28
60018: PUSH
60019: LD_INT 17
60021: ST_TO_ADDR
// hc_gallery :=  ;
60022: LD_ADDR_OWVAR 33
60026: PUSH
60027: LD_STRING 
60029: ST_TO_ADDR
// hc_name :=  ;
60030: LD_ADDR_OWVAR 26
60034: PUSH
60035: LD_STRING 
60037: ST_TO_ADDR
// un := CreateHuman ;
60038: LD_ADDR_VAR 0 2
60042: PUSH
60043: CALL_OW 44
60047: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
60048: LD_VAR 0 2
60052: PPUSH
60053: LD_INT 1
60055: PPUSH
60056: CALL_OW 51
// tmp := tmp ^ un ;
60060: LD_ADDR_VAR 0 3
60064: PUSH
60065: LD_VAR 0 3
60069: PUSH
60070: LD_VAR 0 2
60074: ADD
60075: ST_TO_ADDR
// end ;
60076: GO 59972
60078: POP
60079: POP
// repeat wait ( 0 0$1 ) ;
60080: LD_INT 35
60082: PPUSH
60083: CALL_OW 67
// for un in tmp do
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_VAR 0 3
60096: PUSH
60097: FOR_IN
60098: IFFALSE 60172
// begin if IsDead ( un ) then
60100: LD_VAR 0 2
60104: PPUSH
60105: CALL_OW 301
60109: IFFALSE 60129
// begin tmp := tmp diff un ;
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: LD_VAR 0 3
60120: PUSH
60121: LD_VAR 0 2
60125: DIFF
60126: ST_TO_ADDR
// continue ;
60127: GO 60097
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
60129: LD_VAR 0 2
60133: PPUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 22
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PPUSH
60151: CALL_OW 69
60155: PPUSH
60156: LD_VAR 0 2
60160: PPUSH
60161: CALL_OW 74
60165: PPUSH
60166: CALL_OW 115
// end ;
60170: GO 60097
60172: POP
60173: POP
// until not tmp ;
60174: LD_VAR 0 3
60178: NOT
60179: IFFALSE 60080
// end ;
60181: PPOPN 3
60183: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60184: LD_EXP 44
60188: PUSH
60189: LD_EXP 69
60193: AND
60194: IFFALSE 60248
60196: GO 60198
60198: DISABLE
// begin ToLua ( displayTroll(); ) ;
60199: LD_STRING displayTroll();
60201: PPUSH
60202: CALL_OW 559
// wait ( 3 3$00 ) ;
60206: LD_INT 6300
60208: PPUSH
60209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60213: LD_STRING hideTroll();
60215: PPUSH
60216: CALL_OW 559
// wait ( 1 1$00 ) ;
60220: LD_INT 2100
60222: PPUSH
60223: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60227: LD_STRING displayTroll();
60229: PPUSH
60230: CALL_OW 559
// wait ( 1 1$00 ) ;
60234: LD_INT 2100
60236: PPUSH
60237: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60241: LD_STRING hideTroll();
60243: PPUSH
60244: CALL_OW 559
// end ;
60248: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60249: LD_EXP 44
60253: PUSH
60254: LD_EXP 70
60258: AND
60259: IFFALSE 60322
60261: GO 60263
60263: DISABLE
60264: LD_INT 0
60266: PPUSH
// begin p := 0 ;
60267: LD_ADDR_VAR 0 1
60271: PUSH
60272: LD_INT 0
60274: ST_TO_ADDR
// repeat game_speed := 1 ;
60275: LD_ADDR_OWVAR 65
60279: PUSH
60280: LD_INT 1
60282: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60283: LD_INT 35
60285: PPUSH
60286: CALL_OW 67
// p := p + 1 ;
60290: LD_ADDR_VAR 0 1
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_INT 1
60302: PLUS
60303: ST_TO_ADDR
// until p >= 60 ;
60304: LD_VAR 0 1
60308: PUSH
60309: LD_INT 60
60311: GREATEREQUAL
60312: IFFALSE 60275
// game_speed := 4 ;
60314: LD_ADDR_OWVAR 65
60318: PUSH
60319: LD_INT 4
60321: ST_TO_ADDR
// end ;
60322: PPOPN 1
60324: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60325: LD_EXP 44
60329: PUSH
60330: LD_EXP 71
60334: AND
60335: IFFALSE 60481
60337: GO 60339
60339: DISABLE
60340: LD_INT 0
60342: PPUSH
60343: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60344: LD_ADDR_VAR 0 1
60348: PUSH
60349: LD_INT 22
60351: PUSH
60352: LD_OWVAR 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 30
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 30
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 69
60397: ST_TO_ADDR
// if not depot then
60398: LD_VAR 0 1
60402: NOT
60403: IFFALSE 60407
// exit ;
60405: GO 60481
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60407: LD_ADDR_VAR 0 2
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_INT 1
60419: PPUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: CALL_OW 12
60429: ARRAY
60430: PPUSH
60431: CALL_OW 274
60435: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60436: LD_VAR 0 2
60440: PPUSH
60441: LD_INT 1
60443: PPUSH
60444: LD_INT 0
60446: PPUSH
60447: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60451: LD_VAR 0 2
60455: PPUSH
60456: LD_INT 2
60458: PPUSH
60459: LD_INT 0
60461: PPUSH
60462: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60466: LD_VAR 0 2
60470: PPUSH
60471: LD_INT 3
60473: PPUSH
60474: LD_INT 0
60476: PPUSH
60477: CALL_OW 277
// end ;
60481: PPOPN 2
60483: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60484: LD_EXP 44
60488: PUSH
60489: LD_EXP 72
60493: AND
60494: IFFALSE 60591
60496: GO 60498
60498: DISABLE
60499: LD_INT 0
60501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60502: LD_ADDR_VAR 0 1
60506: PUSH
60507: LD_INT 22
60509: PUSH
60510: LD_OWVAR 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 21
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: LD_INT 23
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PPUSH
60551: CALL_OW 69
60555: ST_TO_ADDR
// if not tmp then
60556: LD_VAR 0 1
60560: NOT
60561: IFFALSE 60565
// exit ;
60563: GO 60591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60565: LD_VAR 0 1
60569: PUSH
60570: LD_INT 1
60572: PPUSH
60573: LD_VAR 0 1
60577: PPUSH
60578: CALL_OW 12
60582: ARRAY
60583: PPUSH
60584: LD_INT 200
60586: PPUSH
60587: CALL_OW 234
// end ;
60591: PPOPN 1
60593: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60594: LD_EXP 44
60598: PUSH
60599: LD_EXP 73
60603: AND
60604: IFFALSE 60683
60606: GO 60608
60608: DISABLE
60609: LD_INT 0
60611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60612: LD_ADDR_VAR 0 1
60616: PUSH
60617: LD_INT 22
60619: PUSH
60620: LD_OWVAR 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 21
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PPUSH
60643: CALL_OW 69
60647: ST_TO_ADDR
// if not tmp then
60648: LD_VAR 0 1
60652: NOT
60653: IFFALSE 60657
// exit ;
60655: GO 60683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60657: LD_VAR 0 1
60661: PUSH
60662: LD_INT 1
60664: PPUSH
60665: LD_VAR 0 1
60669: PPUSH
60670: CALL_OW 12
60674: ARRAY
60675: PPUSH
60676: LD_INT 60
60678: PPUSH
60679: CALL_OW 234
// end ;
60683: PPOPN 1
60685: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60686: LD_EXP 44
60690: PUSH
60691: LD_EXP 74
60695: AND
60696: IFFALSE 60795
60698: GO 60700
60700: DISABLE
60701: LD_INT 0
60703: PPUSH
60704: PPUSH
// begin enable ;
60705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60706: LD_ADDR_VAR 0 1
60710: PUSH
60711: LD_INT 22
60713: PUSH
60714: LD_OWVAR 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 61
60725: PUSH
60726: EMPTY
60727: LIST
60728: PUSH
60729: LD_INT 33
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: PPUSH
60744: CALL_OW 69
60748: ST_TO_ADDR
// if not tmp then
60749: LD_VAR 0 1
60753: NOT
60754: IFFALSE 60758
// exit ;
60756: GO 60795
// for i in tmp do
60758: LD_ADDR_VAR 0 2
60762: PUSH
60763: LD_VAR 0 1
60767: PUSH
60768: FOR_IN
60769: IFFALSE 60793
// if IsControledBy ( i ) then
60771: LD_VAR 0 2
60775: PPUSH
60776: CALL_OW 312
60780: IFFALSE 60791
// ComUnlink ( i ) ;
60782: LD_VAR 0 2
60786: PPUSH
60787: CALL_OW 136
60791: GO 60768
60793: POP
60794: POP
// end ;
60795: PPOPN 2
60797: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60798: LD_EXP 44
60802: PUSH
60803: LD_EXP 75
60807: AND
60808: IFFALSE 60948
60810: GO 60812
60812: DISABLE
60813: LD_INT 0
60815: PPUSH
60816: PPUSH
// begin ToLua ( displayPowell(); ) ;
60817: LD_STRING displayPowell();
60819: PPUSH
60820: CALL_OW 559
// uc_side := 0 ;
60824: LD_ADDR_OWVAR 20
60828: PUSH
60829: LD_INT 0
60831: ST_TO_ADDR
// uc_nation := 2 ;
60832: LD_ADDR_OWVAR 21
60836: PUSH
60837: LD_INT 2
60839: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60840: LD_ADDR_OWVAR 37
60844: PUSH
60845: LD_INT 14
60847: ST_TO_ADDR
// vc_engine := engine_siberite ;
60848: LD_ADDR_OWVAR 39
60852: PUSH
60853: LD_INT 3
60855: ST_TO_ADDR
// vc_control := control_apeman ;
60856: LD_ADDR_OWVAR 38
60860: PUSH
60861: LD_INT 5
60863: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60864: LD_ADDR_OWVAR 40
60868: PUSH
60869: LD_INT 29
60871: ST_TO_ADDR
// un := CreateVehicle ;
60872: LD_ADDR_VAR 0 2
60876: PUSH
60877: CALL_OW 45
60881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60882: LD_VAR 0 2
60886: PPUSH
60887: LD_INT 1
60889: PPUSH
60890: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60894: LD_INT 35
60896: PPUSH
60897: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60901: LD_VAR 0 2
60905: PPUSH
60906: LD_INT 22
60908: PUSH
60909: LD_OWVAR 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PPUSH
60918: CALL_OW 69
60922: PPUSH
60923: LD_VAR 0 2
60927: PPUSH
60928: CALL_OW 74
60932: PPUSH
60933: CALL_OW 115
// until IsDead ( un ) ;
60937: LD_VAR 0 2
60941: PPUSH
60942: CALL_OW 301
60946: IFFALSE 60894
// end ;
60948: PPOPN 2
60950: END
// every 0 0$1 trigger StreamModeActive and sStu do
60951: LD_EXP 44
60955: PUSH
60956: LD_EXP 83
60960: AND
60961: IFFALSE 60977
60963: GO 60965
60965: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60966: LD_STRING displayStucuk();
60968: PPUSH
60969: CALL_OW 559
// ResetFog ;
60973: CALL_OW 335
// end ;
60977: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60978: LD_EXP 44
60982: PUSH
60983: LD_EXP 76
60987: AND
60988: IFFALSE 61129
60990: GO 60992
60992: DISABLE
60993: LD_INT 0
60995: PPUSH
60996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60997: LD_ADDR_VAR 0 2
61001: PUSH
61002: LD_INT 22
61004: PUSH
61005: LD_OWVAR 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 21
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PPUSH
61028: CALL_OW 69
61032: ST_TO_ADDR
// if not tmp then
61033: LD_VAR 0 2
61037: NOT
61038: IFFALSE 61042
// exit ;
61040: GO 61129
// un := tmp [ rand ( 1 , tmp ) ] ;
61042: LD_ADDR_VAR 0 1
61046: PUSH
61047: LD_VAR 0 2
61051: PUSH
61052: LD_INT 1
61054: PPUSH
61055: LD_VAR 0 2
61059: PPUSH
61060: CALL_OW 12
61064: ARRAY
61065: ST_TO_ADDR
// SetSide ( un , 0 ) ;
61066: LD_VAR 0 1
61070: PPUSH
61071: LD_INT 0
61073: PPUSH
61074: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
61078: LD_VAR 0 1
61082: PPUSH
61083: LD_OWVAR 3
61087: PUSH
61088: LD_VAR 0 1
61092: DIFF
61093: PPUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: CALL_OW 74
61103: PPUSH
61104: CALL_OW 115
// wait ( 0 0$20 ) ;
61108: LD_INT 700
61110: PPUSH
61111: CALL_OW 67
// SetSide ( un , your_side ) ;
61115: LD_VAR 0 1
61119: PPUSH
61120: LD_OWVAR 2
61124: PPUSH
61125: CALL_OW 235
// end ;
61129: PPOPN 2
61131: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
61132: LD_EXP 44
61136: PUSH
61137: LD_EXP 77
61141: AND
61142: IFFALSE 61248
61144: GO 61146
61146: DISABLE
61147: LD_INT 0
61149: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61150: LD_ADDR_VAR 0 1
61154: PUSH
61155: LD_INT 22
61157: PUSH
61158: LD_OWVAR 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 30
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 30
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PPUSH
61199: CALL_OW 69
61203: ST_TO_ADDR
// if not depot then
61204: LD_VAR 0 1
61208: NOT
61209: IFFALSE 61213
// exit ;
61211: GO 61248
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61213: LD_VAR 0 1
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: PPUSH
61222: CALL_OW 250
61226: PPUSH
61227: LD_VAR 0 1
61231: PUSH
61232: LD_INT 1
61234: ARRAY
61235: PPUSH
61236: CALL_OW 251
61240: PPUSH
61241: LD_INT 70
61243: PPUSH
61244: CALL_OW 495
// end ;
61248: PPOPN 1
61250: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61251: LD_EXP 44
61255: PUSH
61256: LD_EXP 78
61260: AND
61261: IFFALSE 61472
61263: GO 61265
61265: DISABLE
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
61271: PPUSH
61272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61273: LD_ADDR_VAR 0 5
61277: PUSH
61278: LD_INT 22
61280: PUSH
61281: LD_OWVAR 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 21
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PPUSH
61304: CALL_OW 69
61308: ST_TO_ADDR
// if not tmp then
61309: LD_VAR 0 5
61313: NOT
61314: IFFALSE 61318
// exit ;
61316: GO 61472
// for i in tmp do
61318: LD_ADDR_VAR 0 1
61322: PUSH
61323: LD_VAR 0 5
61327: PUSH
61328: FOR_IN
61329: IFFALSE 61470
// begin d := rand ( 0 , 5 ) ;
61331: LD_ADDR_VAR 0 4
61335: PUSH
61336: LD_INT 0
61338: PPUSH
61339: LD_INT 5
61341: PPUSH
61342: CALL_OW 12
61346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 250
61361: PPUSH
61362: LD_VAR 0 4
61366: PPUSH
61367: LD_INT 3
61369: PPUSH
61370: LD_INT 12
61372: PPUSH
61373: CALL_OW 12
61377: PPUSH
61378: CALL_OW 272
61382: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61383: LD_ADDR_VAR 0 3
61387: PUSH
61388: LD_VAR 0 1
61392: PPUSH
61393: CALL_OW 251
61397: PPUSH
61398: LD_VAR 0 4
61402: PPUSH
61403: LD_INT 3
61405: PPUSH
61406: LD_INT 12
61408: PPUSH
61409: CALL_OW 12
61413: PPUSH
61414: CALL_OW 273
61418: ST_TO_ADDR
// if ValidHex ( x , y ) then
61419: LD_VAR 0 2
61423: PPUSH
61424: LD_VAR 0 3
61428: PPUSH
61429: CALL_OW 488
61433: IFFALSE 61468
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61435: LD_VAR 0 1
61439: PPUSH
61440: LD_VAR 0 2
61444: PPUSH
61445: LD_VAR 0 3
61449: PPUSH
61450: LD_INT 3
61452: PPUSH
61453: LD_INT 6
61455: PPUSH
61456: CALL_OW 12
61460: PPUSH
61461: LD_INT 1
61463: PPUSH
61464: CALL_OW 483
// end ;
61468: GO 61328
61470: POP
61471: POP
// end ;
61472: PPOPN 5
61474: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61475: LD_EXP 44
61479: PUSH
61480: LD_EXP 79
61484: AND
61485: IFFALSE 61579
61487: GO 61489
61489: DISABLE
61490: LD_INT 0
61492: PPUSH
61493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61494: LD_ADDR_VAR 0 2
61498: PUSH
61499: LD_INT 22
61501: PUSH
61502: LD_OWVAR 2
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 32
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 21
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: PPUSH
61536: CALL_OW 69
61540: ST_TO_ADDR
// if not tmp then
61541: LD_VAR 0 2
61545: NOT
61546: IFFALSE 61550
// exit ;
61548: GO 61579
// for i in tmp do
61550: LD_ADDR_VAR 0 1
61554: PUSH
61555: LD_VAR 0 2
61559: PUSH
61560: FOR_IN
61561: IFFALSE 61577
// SetFuel ( i , 0 ) ;
61563: LD_VAR 0 1
61567: PPUSH
61568: LD_INT 0
61570: PPUSH
61571: CALL_OW 240
61575: GO 61560
61577: POP
61578: POP
// end ;
61579: PPOPN 2
61581: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61582: LD_EXP 44
61586: PUSH
61587: LD_EXP 80
61591: AND
61592: IFFALSE 61658
61594: GO 61596
61596: DISABLE
61597: LD_INT 0
61599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61600: LD_ADDR_VAR 0 1
61604: PUSH
61605: LD_INT 22
61607: PUSH
61608: LD_OWVAR 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 30
61619: PUSH
61620: LD_INT 29
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PPUSH
61631: CALL_OW 69
61635: ST_TO_ADDR
// if not tmp then
61636: LD_VAR 0 1
61640: NOT
61641: IFFALSE 61645
// exit ;
61643: GO 61658
// DestroyUnit ( tmp [ 1 ] ) ;
61645: LD_VAR 0 1
61649: PUSH
61650: LD_INT 1
61652: ARRAY
61653: PPUSH
61654: CALL_OW 65
// end ;
61658: PPOPN 1
61660: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61661: LD_EXP 44
61665: PUSH
61666: LD_EXP 82
61670: AND
61671: IFFALSE 61800
61673: GO 61675
61675: DISABLE
61676: LD_INT 0
61678: PPUSH
// begin uc_side := 0 ;
61679: LD_ADDR_OWVAR 20
61683: PUSH
61684: LD_INT 0
61686: ST_TO_ADDR
// uc_nation := nation_arabian ;
61687: LD_ADDR_OWVAR 21
61691: PUSH
61692: LD_INT 2
61694: ST_TO_ADDR
// hc_gallery :=  ;
61695: LD_ADDR_OWVAR 33
61699: PUSH
61700: LD_STRING 
61702: ST_TO_ADDR
// hc_name :=  ;
61703: LD_ADDR_OWVAR 26
61707: PUSH
61708: LD_STRING 
61710: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61711: LD_INT 1
61713: PPUSH
61714: LD_INT 11
61716: PPUSH
61717: LD_INT 10
61719: PPUSH
61720: CALL_OW 380
// un := CreateHuman ;
61724: LD_ADDR_VAR 0 1
61728: PUSH
61729: CALL_OW 44
61733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61734: LD_VAR 0 1
61738: PPUSH
61739: LD_INT 1
61741: PPUSH
61742: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61746: LD_INT 35
61748: PPUSH
61749: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61753: LD_VAR 0 1
61757: PPUSH
61758: LD_INT 22
61760: PUSH
61761: LD_OWVAR 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PPUSH
61770: CALL_OW 69
61774: PPUSH
61775: LD_VAR 0 1
61779: PPUSH
61780: CALL_OW 74
61784: PPUSH
61785: CALL_OW 115
// until IsDead ( un ) ;
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 301
61798: IFFALSE 61746
// end ;
61800: PPOPN 1
61802: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61803: LD_EXP 44
61807: PUSH
61808: LD_EXP 84
61812: AND
61813: IFFALSE 61825
61815: GO 61817
61817: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61818: LD_STRING earthquake(getX(game), 0, 32)
61820: PPUSH
61821: CALL_OW 559
61825: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61826: LD_EXP 44
61830: PUSH
61831: LD_EXP 85
61835: AND
61836: IFFALSE 61927
61838: GO 61840
61840: DISABLE
61841: LD_INT 0
61843: PPUSH
// begin enable ;
61844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61845: LD_ADDR_VAR 0 1
61849: PUSH
61850: LD_INT 22
61852: PUSH
61853: LD_OWVAR 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 21
61864: PUSH
61865: LD_INT 2
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 33
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: PPUSH
61887: CALL_OW 69
61891: ST_TO_ADDR
// if not tmp then
61892: LD_VAR 0 1
61896: NOT
61897: IFFALSE 61901
// exit ;
61899: GO 61927
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61901: LD_VAR 0 1
61905: PUSH
61906: LD_INT 1
61908: PPUSH
61909: LD_VAR 0 1
61913: PPUSH
61914: CALL_OW 12
61918: ARRAY
61919: PPUSH
61920: LD_INT 1
61922: PPUSH
61923: CALL_OW 234
// end ;
61927: PPOPN 1
61929: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61930: LD_EXP 44
61934: PUSH
61935: LD_EXP 86
61939: AND
61940: IFFALSE 62081
61942: GO 61944
61944: DISABLE
61945: LD_INT 0
61947: PPUSH
61948: PPUSH
61949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61950: LD_ADDR_VAR 0 3
61954: PUSH
61955: LD_INT 22
61957: PUSH
61958: LD_OWVAR 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 25
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PPUSH
61981: CALL_OW 69
61985: ST_TO_ADDR
// if not tmp then
61986: LD_VAR 0 3
61990: NOT
61991: IFFALSE 61995
// exit ;
61993: GO 62081
// un := tmp [ rand ( 1 , tmp ) ] ;
61995: LD_ADDR_VAR 0 2
61999: PUSH
62000: LD_VAR 0 3
62004: PUSH
62005: LD_INT 1
62007: PPUSH
62008: LD_VAR 0 3
62012: PPUSH
62013: CALL_OW 12
62017: ARRAY
62018: ST_TO_ADDR
// if Crawls ( un ) then
62019: LD_VAR 0 2
62023: PPUSH
62024: CALL_OW 318
62028: IFFALSE 62039
// ComWalk ( un ) ;
62030: LD_VAR 0 2
62034: PPUSH
62035: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
62039: LD_VAR 0 2
62043: PPUSH
62044: LD_INT 9
62046: PPUSH
62047: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
62051: LD_INT 28
62053: PPUSH
62054: LD_OWVAR 2
62058: PPUSH
62059: LD_INT 2
62061: PPUSH
62062: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
62066: LD_INT 29
62068: PPUSH
62069: LD_OWVAR 2
62073: PPUSH
62074: LD_INT 2
62076: PPUSH
62077: CALL_OW 322
// end ;
62081: PPOPN 3
62083: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
62084: LD_EXP 44
62088: PUSH
62089: LD_EXP 87
62093: AND
62094: IFFALSE 62205
62096: GO 62098
62098: DISABLE
62099: LD_INT 0
62101: PPUSH
62102: PPUSH
62103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62104: LD_ADDR_VAR 0 3
62108: PUSH
62109: LD_INT 22
62111: PUSH
62112: LD_OWVAR 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 25
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 69
62139: ST_TO_ADDR
// if not tmp then
62140: LD_VAR 0 3
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62205
// un := tmp [ rand ( 1 , tmp ) ] ;
62149: LD_ADDR_VAR 0 2
62153: PUSH
62154: LD_VAR 0 3
62158: PUSH
62159: LD_INT 1
62161: PPUSH
62162: LD_VAR 0 3
62166: PPUSH
62167: CALL_OW 12
62171: ARRAY
62172: ST_TO_ADDR
// if Crawls ( un ) then
62173: LD_VAR 0 2
62177: PPUSH
62178: CALL_OW 318
62182: IFFALSE 62193
// ComWalk ( un ) ;
62184: LD_VAR 0 2
62188: PPUSH
62189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62193: LD_VAR 0 2
62197: PPUSH
62198: LD_INT 8
62200: PPUSH
62201: CALL_OW 336
// end ;
62205: PPOPN 3
62207: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62208: LD_EXP 44
62212: PUSH
62213: LD_EXP 88
62217: AND
62218: IFFALSE 62362
62220: GO 62222
62222: DISABLE
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62227: LD_ADDR_VAR 0 2
62231: PUSH
62232: LD_INT 22
62234: PUSH
62235: LD_OWVAR 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 21
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 34
62259: PUSH
62260: LD_INT 12
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 34
62269: PUSH
62270: LD_INT 51
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 34
62279: PUSH
62280: LD_INT 32
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: PPUSH
62298: CALL_OW 69
62302: ST_TO_ADDR
// if not tmp then
62303: LD_VAR 0 2
62307: NOT
62308: IFFALSE 62312
// exit ;
62310: GO 62362
// for i in tmp do
62312: LD_ADDR_VAR 0 1
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: FOR_IN
62323: IFFALSE 62360
// if GetCargo ( i , mat_artifact ) = 0 then
62325: LD_VAR 0 1
62329: PPUSH
62330: LD_INT 4
62332: PPUSH
62333: CALL_OW 289
62337: PUSH
62338: LD_INT 0
62340: EQUAL
62341: IFFALSE 62358
// SetCargo ( i , mat_siberit , 100 ) ;
62343: LD_VAR 0 1
62347: PPUSH
62348: LD_INT 3
62350: PPUSH
62351: LD_INT 100
62353: PPUSH
62354: CALL_OW 290
62358: GO 62322
62360: POP
62361: POP
// end ;
62362: PPOPN 2
62364: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62365: LD_EXP 44
62369: PUSH
62370: LD_EXP 89
62374: AND
62375: IFFALSE 62558
62377: GO 62379
62379: DISABLE
62380: LD_INT 0
62382: PPUSH
62383: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62384: LD_ADDR_VAR 0 2
62388: PUSH
62389: LD_INT 22
62391: PUSH
62392: LD_OWVAR 2
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PPUSH
62401: CALL_OW 69
62405: ST_TO_ADDR
// if not tmp then
62406: LD_VAR 0 2
62410: NOT
62411: IFFALSE 62415
// exit ;
62413: GO 62558
// for i := 1 to 2 do
62415: LD_ADDR_VAR 0 1
62419: PUSH
62420: DOUBLE
62421: LD_INT 1
62423: DEC
62424: ST_TO_ADDR
62425: LD_INT 2
62427: PUSH
62428: FOR_TO
62429: IFFALSE 62556
// begin uc_side := your_side ;
62431: LD_ADDR_OWVAR 20
62435: PUSH
62436: LD_OWVAR 2
62440: ST_TO_ADDR
// uc_nation := nation_american ;
62441: LD_ADDR_OWVAR 21
62445: PUSH
62446: LD_INT 1
62448: ST_TO_ADDR
// vc_chassis := us_morphling ;
62449: LD_ADDR_OWVAR 37
62453: PUSH
62454: LD_INT 5
62456: ST_TO_ADDR
// vc_engine := engine_siberite ;
62457: LD_ADDR_OWVAR 39
62461: PUSH
62462: LD_INT 3
62464: ST_TO_ADDR
// vc_control := control_computer ;
62465: LD_ADDR_OWVAR 38
62469: PUSH
62470: LD_INT 3
62472: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62473: LD_ADDR_OWVAR 40
62477: PUSH
62478: LD_INT 10
62480: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62481: LD_VAR 0 2
62485: PUSH
62486: LD_INT 1
62488: ARRAY
62489: PPUSH
62490: CALL_OW 310
62494: NOT
62495: IFFALSE 62542
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62497: CALL_OW 45
62501: PPUSH
62502: LD_VAR 0 2
62506: PUSH
62507: LD_INT 1
62509: ARRAY
62510: PPUSH
62511: CALL_OW 250
62515: PPUSH
62516: LD_VAR 0 2
62520: PUSH
62521: LD_INT 1
62523: ARRAY
62524: PPUSH
62525: CALL_OW 251
62529: PPUSH
62530: LD_INT 12
62532: PPUSH
62533: LD_INT 1
62535: PPUSH
62536: CALL_OW 50
62540: GO 62554
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62542: CALL_OW 45
62546: PPUSH
62547: LD_INT 1
62549: PPUSH
62550: CALL_OW 51
// end ;
62554: GO 62428
62556: POP
62557: POP
// end ;
62558: PPOPN 2
62560: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62561: LD_EXP 44
62565: PUSH
62566: LD_EXP 90
62570: AND
62571: IFFALSE 62793
62573: GO 62575
62575: DISABLE
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
62580: PPUSH
62581: PPUSH
62582: PPUSH
62583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62584: LD_ADDR_VAR 0 6
62588: PUSH
62589: LD_INT 22
62591: PUSH
62592: LD_OWVAR 2
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 21
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: LD_INT 23
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PPUSH
62633: CALL_OW 69
62637: ST_TO_ADDR
// if not tmp then
62638: LD_VAR 0 6
62642: NOT
62643: IFFALSE 62647
// exit ;
62645: GO 62793
// s1 := rand ( 1 , 4 ) ;
62647: LD_ADDR_VAR 0 2
62651: PUSH
62652: LD_INT 1
62654: PPUSH
62655: LD_INT 4
62657: PPUSH
62658: CALL_OW 12
62662: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62663: LD_ADDR_VAR 0 4
62667: PUSH
62668: LD_VAR 0 6
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PPUSH
62677: LD_VAR 0 2
62681: PPUSH
62682: CALL_OW 259
62686: ST_TO_ADDR
// if s1 = 1 then
62687: LD_VAR 0 2
62691: PUSH
62692: LD_INT 1
62694: EQUAL
62695: IFFALSE 62715
// s2 := rand ( 2 , 4 ) else
62697: LD_ADDR_VAR 0 3
62701: PUSH
62702: LD_INT 2
62704: PPUSH
62705: LD_INT 4
62707: PPUSH
62708: CALL_OW 12
62712: ST_TO_ADDR
62713: GO 62723
// s2 := 1 ;
62715: LD_ADDR_VAR 0 3
62719: PUSH
62720: LD_INT 1
62722: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62723: LD_ADDR_VAR 0 5
62727: PUSH
62728: LD_VAR 0 6
62732: PUSH
62733: LD_INT 1
62735: ARRAY
62736: PPUSH
62737: LD_VAR 0 3
62741: PPUSH
62742: CALL_OW 259
62746: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62747: LD_VAR 0 6
62751: PUSH
62752: LD_INT 1
62754: ARRAY
62755: PPUSH
62756: LD_VAR 0 2
62760: PPUSH
62761: LD_VAR 0 5
62765: PPUSH
62766: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62770: LD_VAR 0 6
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: PPUSH
62779: LD_VAR 0 3
62783: PPUSH
62784: LD_VAR 0 4
62788: PPUSH
62789: CALL_OW 237
// end ;
62793: PPOPN 6
62795: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62796: LD_EXP 44
62800: PUSH
62801: LD_EXP 91
62805: AND
62806: IFFALSE 62885
62808: GO 62810
62810: DISABLE
62811: LD_INT 0
62813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62814: LD_ADDR_VAR 0 1
62818: PUSH
62819: LD_INT 22
62821: PUSH
62822: LD_OWVAR 2
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 30
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PPUSH
62845: CALL_OW 69
62849: ST_TO_ADDR
// if not tmp then
62850: LD_VAR 0 1
62854: NOT
62855: IFFALSE 62859
// exit ;
62857: GO 62885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62859: LD_VAR 0 1
62863: PUSH
62864: LD_INT 1
62866: PPUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 12
62876: ARRAY
62877: PPUSH
62878: LD_INT 1
62880: PPUSH
62881: CALL_OW 234
// end ;
62885: PPOPN 1
62887: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62888: LD_EXP 44
62892: PUSH
62893: LD_EXP 92
62897: AND
62898: IFFALSE 63010
62900: GO 62902
62902: DISABLE
62903: LD_INT 0
62905: PPUSH
62906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62907: LD_ADDR_VAR 0 2
62911: PUSH
62912: LD_INT 22
62914: PUSH
62915: LD_OWVAR 2
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 30
62929: PUSH
62930: LD_INT 27
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 30
62939: PUSH
62940: LD_INT 26
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 30
62949: PUSH
62950: LD_INT 28
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PPUSH
62967: CALL_OW 69
62971: ST_TO_ADDR
// if not tmp then
62972: LD_VAR 0 2
62976: NOT
62977: IFFALSE 62981
// exit ;
62979: GO 63010
// for i in tmp do
62981: LD_ADDR_VAR 0 1
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: FOR_IN
62992: IFFALSE 63008
// SetLives ( i , 1 ) ;
62994: LD_VAR 0 1
62998: PPUSH
62999: LD_INT 1
63001: PPUSH
63002: CALL_OW 234
63006: GO 62991
63008: POP
63009: POP
// end ;
63010: PPOPN 2
63012: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
63013: LD_EXP 44
63017: PUSH
63018: LD_EXP 93
63022: AND
63023: IFFALSE 63310
63025: GO 63027
63027: DISABLE
63028: LD_INT 0
63030: PPUSH
63031: PPUSH
63032: PPUSH
// begin i := rand ( 1 , 7 ) ;
63033: LD_ADDR_VAR 0 1
63037: PUSH
63038: LD_INT 1
63040: PPUSH
63041: LD_INT 7
63043: PPUSH
63044: CALL_OW 12
63048: ST_TO_ADDR
// case i of 1 :
63049: LD_VAR 0 1
63053: PUSH
63054: LD_INT 1
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63062
63060: GO 63072
63062: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
63063: LD_STRING earthquake(getX(game), 0, 32)
63065: PPUSH
63066: CALL_OW 559
63070: GO 63310
63072: LD_INT 2
63074: DOUBLE
63075: EQUAL
63076: IFTRUE 63080
63078: GO 63094
63080: POP
// begin ToLua ( displayStucuk(); ) ;
63081: LD_STRING displayStucuk();
63083: PPUSH
63084: CALL_OW 559
// ResetFog ;
63088: CALL_OW 335
// end ; 3 :
63092: GO 63310
63094: LD_INT 3
63096: DOUBLE
63097: EQUAL
63098: IFTRUE 63102
63100: GO 63206
63102: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63103: LD_ADDR_VAR 0 2
63107: PUSH
63108: LD_INT 22
63110: PUSH
63111: LD_OWVAR 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 25
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PPUSH
63134: CALL_OW 69
63138: ST_TO_ADDR
// if not tmp then
63139: LD_VAR 0 2
63143: NOT
63144: IFFALSE 63148
// exit ;
63146: GO 63310
// un := tmp [ rand ( 1 , tmp ) ] ;
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: LD_INT 1
63160: PPUSH
63161: LD_VAR 0 2
63165: PPUSH
63166: CALL_OW 12
63170: ARRAY
63171: ST_TO_ADDR
// if Crawls ( un ) then
63172: LD_VAR 0 3
63176: PPUSH
63177: CALL_OW 318
63181: IFFALSE 63192
// ComWalk ( un ) ;
63183: LD_VAR 0 3
63187: PPUSH
63188: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63192: LD_VAR 0 3
63196: PPUSH
63197: LD_INT 8
63199: PPUSH
63200: CALL_OW 336
// end ; 4 :
63204: GO 63310
63206: LD_INT 4
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63214
63212: GO 63288
63214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63215: LD_ADDR_VAR 0 2
63219: PUSH
63220: LD_INT 22
63222: PUSH
63223: LD_OWVAR 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 30
63234: PUSH
63235: LD_INT 29
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PPUSH
63246: CALL_OW 69
63250: ST_TO_ADDR
// if not tmp then
63251: LD_VAR 0 2
63255: NOT
63256: IFFALSE 63260
// exit ;
63258: GO 63310
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63260: LD_VAR 0 2
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PPUSH
63269: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63273: LD_VAR 0 2
63277: PUSH
63278: LD_INT 1
63280: ARRAY
63281: PPUSH
63282: CALL_OW 65
// end ; 5 .. 7 :
63286: GO 63310
63288: LD_INT 5
63290: DOUBLE
63291: GREATEREQUAL
63292: IFFALSE 63300
63294: LD_INT 7
63296: DOUBLE
63297: LESSEQUAL
63298: IFTRUE 63302
63300: GO 63309
63302: POP
// StreamSibBomb ; end ;
63303: CALL 59547 0 0
63307: GO 63310
63309: POP
// end ;
63310: PPOPN 3
63312: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63313: LD_EXP 44
63317: PUSH
63318: LD_EXP 94
63322: AND
63323: IFFALSE 63479
63325: GO 63327
63327: DISABLE
63328: LD_INT 0
63330: PPUSH
63331: PPUSH
63332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63333: LD_ADDR_VAR 0 2
63337: PUSH
63338: LD_INT 81
63340: PUSH
63341: LD_OWVAR 2
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 2
63352: PUSH
63353: LD_INT 21
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 21
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: LIST
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PPUSH
63382: CALL_OW 69
63386: ST_TO_ADDR
// if not tmp then
63387: LD_VAR 0 2
63391: NOT
63392: IFFALSE 63396
// exit ;
63394: GO 63479
// p := 0 ;
63396: LD_ADDR_VAR 0 3
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63404: LD_INT 35
63406: PPUSH
63407: CALL_OW 67
// p := p + 1 ;
63411: LD_ADDR_VAR 0 3
63415: PUSH
63416: LD_VAR 0 3
63420: PUSH
63421: LD_INT 1
63423: PLUS
63424: ST_TO_ADDR
// for i in tmp do
63425: LD_ADDR_VAR 0 1
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: FOR_IN
63436: IFFALSE 63467
// if GetLives ( i ) < 1000 then
63438: LD_VAR 0 1
63442: PPUSH
63443: CALL_OW 256
63447: PUSH
63448: LD_INT 1000
63450: LESS
63451: IFFALSE 63465
// SetLives ( i , 1000 ) ;
63453: LD_VAR 0 1
63457: PPUSH
63458: LD_INT 1000
63460: PPUSH
63461: CALL_OW 234
63465: GO 63435
63467: POP
63468: POP
// until p > 20 ;
63469: LD_VAR 0 3
63473: PUSH
63474: LD_INT 20
63476: GREATER
63477: IFFALSE 63404
// end ;
63479: PPOPN 3
63481: END
// every 0 0$1 trigger StreamModeActive and sTime do
63482: LD_EXP 44
63486: PUSH
63487: LD_EXP 95
63491: AND
63492: IFFALSE 63527
63494: GO 63496
63496: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63497: LD_INT 28
63499: PPUSH
63500: LD_OWVAR 2
63504: PPUSH
63505: LD_INT 2
63507: PPUSH
63508: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63512: LD_INT 30
63514: PPUSH
63515: LD_OWVAR 2
63519: PPUSH
63520: LD_INT 2
63522: PPUSH
63523: CALL_OW 322
// end ;
63527: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63528: LD_EXP 44
63532: PUSH
63533: LD_EXP 96
63537: AND
63538: IFFALSE 63659
63540: GO 63542
63542: DISABLE
63543: LD_INT 0
63545: PPUSH
63546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63547: LD_ADDR_VAR 0 2
63551: PUSH
63552: LD_INT 22
63554: PUSH
63555: LD_OWVAR 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 21
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: LD_INT 23
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: PPUSH
63596: CALL_OW 69
63600: ST_TO_ADDR
// if not tmp then
63601: LD_VAR 0 2
63605: NOT
63606: IFFALSE 63610
// exit ;
63608: GO 63659
// for i in tmp do
63610: LD_ADDR_VAR 0 1
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: FOR_IN
63621: IFFALSE 63657
// begin if Crawls ( i ) then
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 318
63632: IFFALSE 63643
// ComWalk ( i ) ;
63634: LD_VAR 0 1
63638: PPUSH
63639: CALL_OW 138
// SetClass ( i , 2 ) ;
63643: LD_VAR 0 1
63647: PPUSH
63648: LD_INT 2
63650: PPUSH
63651: CALL_OW 336
// end ;
63655: GO 63620
63657: POP
63658: POP
// end ;
63659: PPOPN 2
63661: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63662: LD_EXP 44
63666: PUSH
63667: LD_EXP 97
63671: AND
63672: IFFALSE 63960
63674: GO 63676
63676: DISABLE
63677: LD_INT 0
63679: PPUSH
63680: PPUSH
63681: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63682: LD_OWVAR 2
63686: PPUSH
63687: LD_INT 9
63689: PPUSH
63690: LD_INT 1
63692: PPUSH
63693: LD_INT 1
63695: PPUSH
63696: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63700: LD_INT 9
63702: PPUSH
63703: LD_OWVAR 2
63707: PPUSH
63708: CALL_OW 343
// uc_side := 9 ;
63712: LD_ADDR_OWVAR 20
63716: PUSH
63717: LD_INT 9
63719: ST_TO_ADDR
// uc_nation := 2 ;
63720: LD_ADDR_OWVAR 21
63724: PUSH
63725: LD_INT 2
63727: ST_TO_ADDR
// hc_name := Dark Warrior ;
63728: LD_ADDR_OWVAR 26
63732: PUSH
63733: LD_STRING Dark Warrior
63735: ST_TO_ADDR
// hc_gallery :=  ;
63736: LD_ADDR_OWVAR 33
63740: PUSH
63741: LD_STRING 
63743: ST_TO_ADDR
// hc_noskilllimit := true ;
63744: LD_ADDR_OWVAR 76
63748: PUSH
63749: LD_INT 1
63751: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63752: LD_ADDR_OWVAR 31
63756: PUSH
63757: LD_INT 30
63759: PUSH
63760: LD_INT 30
63762: PUSH
63763: LD_INT 30
63765: PUSH
63766: LD_INT 30
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// un := CreateHuman ;
63775: LD_ADDR_VAR 0 3
63779: PUSH
63780: CALL_OW 44
63784: ST_TO_ADDR
// hc_noskilllimit := false ;
63785: LD_ADDR_OWVAR 76
63789: PUSH
63790: LD_INT 0
63792: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63793: LD_VAR 0 3
63797: PPUSH
63798: LD_INT 1
63800: PPUSH
63801: CALL_OW 51
// ToLua ( playRanger() ) ;
63805: LD_STRING playRanger()
63807: PPUSH
63808: CALL_OW 559
// p := 0 ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_INT 0
63819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63820: LD_INT 35
63822: PPUSH
63823: CALL_OW 67
// p := p + 1 ;
63827: LD_ADDR_VAR 0 2
63831: PUSH
63832: LD_VAR 0 2
63836: PUSH
63837: LD_INT 1
63839: PLUS
63840: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63841: LD_VAR 0 3
63845: PPUSH
63846: CALL_OW 256
63850: PUSH
63851: LD_INT 1000
63853: LESS
63854: IFFALSE 63868
// SetLives ( un , 1000 ) ;
63856: LD_VAR 0 3
63860: PPUSH
63861: LD_INT 1000
63863: PPUSH
63864: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63868: LD_VAR 0 3
63872: PPUSH
63873: LD_INT 81
63875: PUSH
63876: LD_OWVAR 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 91
63887: PUSH
63888: LD_VAR 0 3
63892: PUSH
63893: LD_INT 30
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PPUSH
63905: CALL_OW 69
63909: PPUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: CALL_OW 74
63919: PPUSH
63920: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63924: LD_VAR 0 2
63928: PUSH
63929: LD_INT 80
63931: GREATER
63932: PUSH
63933: LD_VAR 0 3
63937: PPUSH
63938: CALL_OW 301
63942: OR
63943: IFFALSE 63820
// if un then
63945: LD_VAR 0 3
63949: IFFALSE 63960
// RemoveUnit ( un ) ;
63951: LD_VAR 0 3
63955: PPUSH
63956: CALL_OW 64
// end ;
63960: PPOPN 3
63962: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63963: LD_EXP 98
63967: IFFALSE 64083
63969: GO 63971
63971: DISABLE
63972: LD_INT 0
63974: PPUSH
63975: PPUSH
63976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63977: LD_ADDR_VAR 0 2
63981: PUSH
63982: LD_INT 81
63984: PUSH
63985: LD_OWVAR 2
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 21
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PPUSH
64008: CALL_OW 69
64012: ST_TO_ADDR
// ToLua ( playComputer() ) ;
64013: LD_STRING playComputer()
64015: PPUSH
64016: CALL_OW 559
// if not tmp then
64020: LD_VAR 0 2
64024: NOT
64025: IFFALSE 64029
// exit ;
64027: GO 64083
// for i in tmp do
64029: LD_ADDR_VAR 0 1
64033: PUSH
64034: LD_VAR 0 2
64038: PUSH
64039: FOR_IN
64040: IFFALSE 64081
// for j := 1 to 4 do
64042: LD_ADDR_VAR 0 3
64046: PUSH
64047: DOUBLE
64048: LD_INT 1
64050: DEC
64051: ST_TO_ADDR
64052: LD_INT 4
64054: PUSH
64055: FOR_TO
64056: IFFALSE 64077
// SetSkill ( i , j , 10 ) ;
64058: LD_VAR 0 1
64062: PPUSH
64063: LD_VAR 0 3
64067: PPUSH
64068: LD_INT 10
64070: PPUSH
64071: CALL_OW 237
64075: GO 64055
64077: POP
64078: POP
64079: GO 64039
64081: POP
64082: POP
// end ;
64083: PPOPN 3
64085: END
// every 0 0$1 trigger s30 do var i , tmp ;
64086: LD_EXP 99
64090: IFFALSE 64159
64092: GO 64094
64094: DISABLE
64095: LD_INT 0
64097: PPUSH
64098: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64099: LD_ADDR_VAR 0 2
64103: PUSH
64104: LD_INT 22
64106: PUSH
64107: LD_OWVAR 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PPUSH
64116: CALL_OW 69
64120: ST_TO_ADDR
// if not tmp then
64121: LD_VAR 0 2
64125: NOT
64126: IFFALSE 64130
// exit ;
64128: GO 64159
// for i in tmp do
64130: LD_ADDR_VAR 0 1
64134: PUSH
64135: LD_VAR 0 2
64139: PUSH
64140: FOR_IN
64141: IFFALSE 64157
// SetLives ( i , 300 ) ;
64143: LD_VAR 0 1
64147: PPUSH
64148: LD_INT 300
64150: PPUSH
64151: CALL_OW 234
64155: GO 64140
64157: POP
64158: POP
// end ;
64159: PPOPN 2
64161: END
// every 0 0$1 trigger s60 do var i , tmp ;
64162: LD_EXP 100
64166: IFFALSE 64235
64168: GO 64170
64170: DISABLE
64171: LD_INT 0
64173: PPUSH
64174: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64175: LD_ADDR_VAR 0 2
64179: PUSH
64180: LD_INT 22
64182: PUSH
64183: LD_OWVAR 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PPUSH
64192: CALL_OW 69
64196: ST_TO_ADDR
// if not tmp then
64197: LD_VAR 0 2
64201: NOT
64202: IFFALSE 64206
// exit ;
64204: GO 64235
// for i in tmp do
64206: LD_ADDR_VAR 0 1
64210: PUSH
64211: LD_VAR 0 2
64215: PUSH
64216: FOR_IN
64217: IFFALSE 64233
// SetLives ( i , 600 ) ;
64219: LD_VAR 0 1
64223: PPUSH
64224: LD_INT 600
64226: PPUSH
64227: CALL_OW 234
64231: GO 64216
64233: POP
64234: POP
// end ;
64235: PPOPN 2
64237: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64238: LD_INT 0
64240: PPUSH
// case cmd of 301 :
64241: LD_VAR 0 1
64245: PUSH
64246: LD_INT 301
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64254
64252: GO 64286
64254: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64255: LD_VAR 0 6
64259: PPUSH
64260: LD_VAR 0 7
64264: PPUSH
64265: LD_VAR 0 8
64269: PPUSH
64270: LD_VAR 0 4
64274: PPUSH
64275: LD_VAR 0 5
64279: PPUSH
64280: CALL 65495 0 5
64284: GO 64407
64286: LD_INT 302
64288: DOUBLE
64289: EQUAL
64290: IFTRUE 64294
64292: GO 64331
64294: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64295: LD_VAR 0 6
64299: PPUSH
64300: LD_VAR 0 7
64304: PPUSH
64305: LD_VAR 0 8
64309: PPUSH
64310: LD_VAR 0 9
64314: PPUSH
64315: LD_VAR 0 4
64319: PPUSH
64320: LD_VAR 0 5
64324: PPUSH
64325: CALL 65586 0 6
64329: GO 64407
64331: LD_INT 303
64333: DOUBLE
64334: EQUAL
64335: IFTRUE 64339
64337: GO 64376
64339: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64340: LD_VAR 0 6
64344: PPUSH
64345: LD_VAR 0 7
64349: PPUSH
64350: LD_VAR 0 8
64354: PPUSH
64355: LD_VAR 0 9
64359: PPUSH
64360: LD_VAR 0 4
64364: PPUSH
64365: LD_VAR 0 5
64369: PPUSH
64370: CALL 64412 0 6
64374: GO 64407
64376: LD_INT 304
64378: DOUBLE
64379: EQUAL
64380: IFTRUE 64384
64382: GO 64406
64384: POP
// hHackTeleport ( unit , x , y ) ; end ;
64385: LD_VAR 0 2
64389: PPUSH
64390: LD_VAR 0 4
64394: PPUSH
64395: LD_VAR 0 5
64399: PPUSH
64400: CALL 66179 0 3
64404: GO 64407
64406: POP
// end ;
64407: LD_VAR 0 12
64411: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64412: LD_INT 0
64414: PPUSH
64415: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64416: LD_VAR 0 1
64420: PUSH
64421: LD_INT 1
64423: LESS
64424: PUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_INT 3
64432: GREATER
64433: OR
64434: PUSH
64435: LD_VAR 0 5
64439: PPUSH
64440: LD_VAR 0 6
64444: PPUSH
64445: CALL_OW 428
64449: OR
64450: IFFALSE 64454
// exit ;
64452: GO 65182
// uc_side := your_side ;
64454: LD_ADDR_OWVAR 20
64458: PUSH
64459: LD_OWVAR 2
64463: ST_TO_ADDR
// uc_nation := nation ;
64464: LD_ADDR_OWVAR 21
64468: PUSH
64469: LD_VAR 0 1
64473: ST_TO_ADDR
// bc_level = 1 ;
64474: LD_ADDR_OWVAR 43
64478: PUSH
64479: LD_INT 1
64481: ST_TO_ADDR
// case btype of 1 :
64482: LD_VAR 0 2
64486: PUSH
64487: LD_INT 1
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 64506
64495: POP
// bc_type := b_depot ; 2 :
64496: LD_ADDR_OWVAR 42
64500: PUSH
64501: LD_INT 0
64503: ST_TO_ADDR
64504: GO 65126
64506: LD_INT 2
64508: DOUBLE
64509: EQUAL
64510: IFTRUE 64514
64512: GO 64525
64514: POP
// bc_type := b_warehouse ; 3 :
64515: LD_ADDR_OWVAR 42
64519: PUSH
64520: LD_INT 1
64522: ST_TO_ADDR
64523: GO 65126
64525: LD_INT 3
64527: DOUBLE
64528: EQUAL
64529: IFTRUE 64533
64531: GO 64544
64533: POP
// bc_type := b_lab ; 4 .. 9 :
64534: LD_ADDR_OWVAR 42
64538: PUSH
64539: LD_INT 6
64541: ST_TO_ADDR
64542: GO 65126
64544: LD_INT 4
64546: DOUBLE
64547: GREATEREQUAL
64548: IFFALSE 64556
64550: LD_INT 9
64552: DOUBLE
64553: LESSEQUAL
64554: IFTRUE 64558
64556: GO 64618
64558: POP
// begin bc_type := b_lab_half ;
64559: LD_ADDR_OWVAR 42
64563: PUSH
64564: LD_INT 7
64566: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64567: LD_ADDR_OWVAR 44
64571: PUSH
64572: LD_INT 10
64574: PUSH
64575: LD_INT 11
64577: PUSH
64578: LD_INT 12
64580: PUSH
64581: LD_INT 15
64583: PUSH
64584: LD_INT 14
64586: PUSH
64587: LD_INT 13
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: PUSH
64598: LD_VAR 0 2
64602: PUSH
64603: LD_INT 3
64605: MINUS
64606: ARRAY
64607: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64608: LD_ADDR_OWVAR 45
64612: PUSH
64613: LD_INT 9
64615: ST_TO_ADDR
// end ; 10 .. 13 :
64616: GO 65126
64618: LD_INT 10
64620: DOUBLE
64621: GREATEREQUAL
64622: IFFALSE 64630
64624: LD_INT 13
64626: DOUBLE
64627: LESSEQUAL
64628: IFTRUE 64632
64630: GO 64709
64632: POP
// begin bc_type := b_lab_full ;
64633: LD_ADDR_OWVAR 42
64637: PUSH
64638: LD_INT 8
64640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64641: LD_ADDR_OWVAR 44
64645: PUSH
64646: LD_INT 10
64648: PUSH
64649: LD_INT 12
64651: PUSH
64652: LD_INT 14
64654: PUSH
64655: LD_INT 13
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 2
64668: PUSH
64669: LD_INT 9
64671: MINUS
64672: ARRAY
64673: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64674: LD_ADDR_OWVAR 45
64678: PUSH
64679: LD_INT 11
64681: PUSH
64682: LD_INT 15
64684: PUSH
64685: LD_INT 12
64687: PUSH
64688: LD_INT 15
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: PUSH
64697: LD_VAR 0 2
64701: PUSH
64702: LD_INT 9
64704: MINUS
64705: ARRAY
64706: ST_TO_ADDR
// end ; 14 :
64707: GO 65126
64709: LD_INT 14
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64717
64715: GO 64728
64717: POP
// bc_type := b_workshop ; 15 :
64718: LD_ADDR_OWVAR 42
64722: PUSH
64723: LD_INT 2
64725: ST_TO_ADDR
64726: GO 65126
64728: LD_INT 15
64730: DOUBLE
64731: EQUAL
64732: IFTRUE 64736
64734: GO 64747
64736: POP
// bc_type := b_factory ; 16 :
64737: LD_ADDR_OWVAR 42
64741: PUSH
64742: LD_INT 3
64744: ST_TO_ADDR
64745: GO 65126
64747: LD_INT 16
64749: DOUBLE
64750: EQUAL
64751: IFTRUE 64755
64753: GO 64766
64755: POP
// bc_type := b_ext_gun ; 17 :
64756: LD_ADDR_OWVAR 42
64760: PUSH
64761: LD_INT 17
64763: ST_TO_ADDR
64764: GO 65126
64766: LD_INT 17
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64774
64772: GO 64802
64774: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64775: LD_ADDR_OWVAR 42
64779: PUSH
64780: LD_INT 19
64782: PUSH
64783: LD_INT 23
64785: PUSH
64786: LD_INT 19
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: PUSH
64794: LD_VAR 0 1
64798: ARRAY
64799: ST_TO_ADDR
64800: GO 65126
64802: LD_INT 18
64804: DOUBLE
64805: EQUAL
64806: IFTRUE 64810
64808: GO 64821
64810: POP
// bc_type := b_ext_radar ; 19 :
64811: LD_ADDR_OWVAR 42
64815: PUSH
64816: LD_INT 20
64818: ST_TO_ADDR
64819: GO 65126
64821: LD_INT 19
64823: DOUBLE
64824: EQUAL
64825: IFTRUE 64829
64827: GO 64840
64829: POP
// bc_type := b_ext_radio ; 20 :
64830: LD_ADDR_OWVAR 42
64834: PUSH
64835: LD_INT 22
64837: ST_TO_ADDR
64838: GO 65126
64840: LD_INT 20
64842: DOUBLE
64843: EQUAL
64844: IFTRUE 64848
64846: GO 64859
64848: POP
// bc_type := b_ext_siberium ; 21 :
64849: LD_ADDR_OWVAR 42
64853: PUSH
64854: LD_INT 21
64856: ST_TO_ADDR
64857: GO 65126
64859: LD_INT 21
64861: DOUBLE
64862: EQUAL
64863: IFTRUE 64867
64865: GO 64878
64867: POP
// bc_type := b_ext_computer ; 22 :
64868: LD_ADDR_OWVAR 42
64872: PUSH
64873: LD_INT 24
64875: ST_TO_ADDR
64876: GO 65126
64878: LD_INT 22
64880: DOUBLE
64881: EQUAL
64882: IFTRUE 64886
64884: GO 64897
64886: POP
// bc_type := b_ext_track ; 23 :
64887: LD_ADDR_OWVAR 42
64891: PUSH
64892: LD_INT 16
64894: ST_TO_ADDR
64895: GO 65126
64897: LD_INT 23
64899: DOUBLE
64900: EQUAL
64901: IFTRUE 64905
64903: GO 64916
64905: POP
// bc_type := b_ext_laser ; 24 :
64906: LD_ADDR_OWVAR 42
64910: PUSH
64911: LD_INT 25
64913: ST_TO_ADDR
64914: GO 65126
64916: LD_INT 24
64918: DOUBLE
64919: EQUAL
64920: IFTRUE 64924
64922: GO 64935
64924: POP
// bc_type := b_control_tower ; 25 :
64925: LD_ADDR_OWVAR 42
64929: PUSH
64930: LD_INT 36
64932: ST_TO_ADDR
64933: GO 65126
64935: LD_INT 25
64937: DOUBLE
64938: EQUAL
64939: IFTRUE 64943
64941: GO 64954
64943: POP
// bc_type := b_breastwork ; 26 :
64944: LD_ADDR_OWVAR 42
64948: PUSH
64949: LD_INT 31
64951: ST_TO_ADDR
64952: GO 65126
64954: LD_INT 26
64956: DOUBLE
64957: EQUAL
64958: IFTRUE 64962
64960: GO 64973
64962: POP
// bc_type := b_bunker ; 27 :
64963: LD_ADDR_OWVAR 42
64967: PUSH
64968: LD_INT 32
64970: ST_TO_ADDR
64971: GO 65126
64973: LD_INT 27
64975: DOUBLE
64976: EQUAL
64977: IFTRUE 64981
64979: GO 64992
64981: POP
// bc_type := b_turret ; 28 :
64982: LD_ADDR_OWVAR 42
64986: PUSH
64987: LD_INT 33
64989: ST_TO_ADDR
64990: GO 65126
64992: LD_INT 28
64994: DOUBLE
64995: EQUAL
64996: IFTRUE 65000
64998: GO 65011
65000: POP
// bc_type := b_armoury ; 29 :
65001: LD_ADDR_OWVAR 42
65005: PUSH
65006: LD_INT 4
65008: ST_TO_ADDR
65009: GO 65126
65011: LD_INT 29
65013: DOUBLE
65014: EQUAL
65015: IFTRUE 65019
65017: GO 65030
65019: POP
// bc_type := b_barracks ; 30 :
65020: LD_ADDR_OWVAR 42
65024: PUSH
65025: LD_INT 5
65027: ST_TO_ADDR
65028: GO 65126
65030: LD_INT 30
65032: DOUBLE
65033: EQUAL
65034: IFTRUE 65038
65036: GO 65049
65038: POP
// bc_type := b_solar_power ; 31 :
65039: LD_ADDR_OWVAR 42
65043: PUSH
65044: LD_INT 27
65046: ST_TO_ADDR
65047: GO 65126
65049: LD_INT 31
65051: DOUBLE
65052: EQUAL
65053: IFTRUE 65057
65055: GO 65068
65057: POP
// bc_type := b_oil_power ; 32 :
65058: LD_ADDR_OWVAR 42
65062: PUSH
65063: LD_INT 26
65065: ST_TO_ADDR
65066: GO 65126
65068: LD_INT 32
65070: DOUBLE
65071: EQUAL
65072: IFTRUE 65076
65074: GO 65087
65076: POP
// bc_type := b_siberite_power ; 33 :
65077: LD_ADDR_OWVAR 42
65081: PUSH
65082: LD_INT 28
65084: ST_TO_ADDR
65085: GO 65126
65087: LD_INT 33
65089: DOUBLE
65090: EQUAL
65091: IFTRUE 65095
65093: GO 65106
65095: POP
// bc_type := b_oil_mine ; 34 :
65096: LD_ADDR_OWVAR 42
65100: PUSH
65101: LD_INT 29
65103: ST_TO_ADDR
65104: GO 65126
65106: LD_INT 34
65108: DOUBLE
65109: EQUAL
65110: IFTRUE 65114
65112: GO 65125
65114: POP
// bc_type := b_siberite_mine ; end ;
65115: LD_ADDR_OWVAR 42
65119: PUSH
65120: LD_INT 30
65122: ST_TO_ADDR
65123: GO 65126
65125: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
65126: LD_ADDR_VAR 0 8
65130: PUSH
65131: LD_VAR 0 5
65135: PPUSH
65136: LD_VAR 0 6
65140: PPUSH
65141: LD_VAR 0 3
65145: PPUSH
65146: CALL_OW 47
65150: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65151: LD_OWVAR 42
65155: PUSH
65156: LD_INT 32
65158: PUSH
65159: LD_INT 33
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: IN
65166: IFFALSE 65182
// PlaceWeaponTurret ( b , weapon ) ;
65168: LD_VAR 0 8
65172: PPUSH
65173: LD_VAR 0 4
65177: PPUSH
65178: CALL_OW 431
// end ;
65182: LD_VAR 0 7
65186: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65187: LD_INT 0
65189: PPUSH
65190: PPUSH
65191: PPUSH
65192: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65193: LD_ADDR_VAR 0 4
65197: PUSH
65198: LD_INT 22
65200: PUSH
65201: LD_OWVAR 2
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: LD_INT 30
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 30
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PPUSH
65242: CALL_OW 69
65246: ST_TO_ADDR
// if not tmp then
65247: LD_VAR 0 4
65251: NOT
65252: IFFALSE 65256
// exit ;
65254: GO 65315
// for i in tmp do
65256: LD_ADDR_VAR 0 2
65260: PUSH
65261: LD_VAR 0 4
65265: PUSH
65266: FOR_IN
65267: IFFALSE 65313
// for j = 1 to 3 do
65269: LD_ADDR_VAR 0 3
65273: PUSH
65274: DOUBLE
65275: LD_INT 1
65277: DEC
65278: ST_TO_ADDR
65279: LD_INT 3
65281: PUSH
65282: FOR_TO
65283: IFFALSE 65309
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65285: LD_VAR 0 2
65289: PPUSH
65290: CALL_OW 274
65294: PPUSH
65295: LD_VAR 0 3
65299: PPUSH
65300: LD_INT 99999
65302: PPUSH
65303: CALL_OW 277
65307: GO 65282
65309: POP
65310: POP
65311: GO 65266
65313: POP
65314: POP
// end ;
65315: LD_VAR 0 1
65319: RET
// export function hHackSetLevel10 ; var i , j ; begin
65320: LD_INT 0
65322: PPUSH
65323: PPUSH
65324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65325: LD_ADDR_VAR 0 2
65329: PUSH
65330: LD_INT 21
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PPUSH
65340: CALL_OW 69
65344: PUSH
65345: FOR_IN
65346: IFFALSE 65398
// if IsSelected ( i ) then
65348: LD_VAR 0 2
65352: PPUSH
65353: CALL_OW 306
65357: IFFALSE 65396
// begin for j := 1 to 4 do
65359: LD_ADDR_VAR 0 3
65363: PUSH
65364: DOUBLE
65365: LD_INT 1
65367: DEC
65368: ST_TO_ADDR
65369: LD_INT 4
65371: PUSH
65372: FOR_TO
65373: IFFALSE 65394
// SetSkill ( i , j , 10 ) ;
65375: LD_VAR 0 2
65379: PPUSH
65380: LD_VAR 0 3
65384: PPUSH
65385: LD_INT 10
65387: PPUSH
65388: CALL_OW 237
65392: GO 65372
65394: POP
65395: POP
// end ;
65396: GO 65345
65398: POP
65399: POP
// end ;
65400: LD_VAR 0 1
65404: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65405: LD_INT 0
65407: PPUSH
65408: PPUSH
65409: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: LD_INT 22
65417: PUSH
65418: LD_OWVAR 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 21
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PPUSH
65441: CALL_OW 69
65445: PUSH
65446: FOR_IN
65447: IFFALSE 65488
// begin for j := 1 to 4 do
65449: LD_ADDR_VAR 0 3
65453: PUSH
65454: DOUBLE
65455: LD_INT 1
65457: DEC
65458: ST_TO_ADDR
65459: LD_INT 4
65461: PUSH
65462: FOR_TO
65463: IFFALSE 65484
// SetSkill ( i , j , 10 ) ;
65465: LD_VAR 0 2
65469: PPUSH
65470: LD_VAR 0 3
65474: PPUSH
65475: LD_INT 10
65477: PPUSH
65478: CALL_OW 237
65482: GO 65462
65484: POP
65485: POP
// end ;
65486: GO 65446
65488: POP
65489: POP
// end ;
65490: LD_VAR 0 1
65494: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65495: LD_INT 0
65497: PPUSH
// uc_side := your_side ;
65498: LD_ADDR_OWVAR 20
65502: PUSH
65503: LD_OWVAR 2
65507: ST_TO_ADDR
// uc_nation := nation ;
65508: LD_ADDR_OWVAR 21
65512: PUSH
65513: LD_VAR 0 1
65517: ST_TO_ADDR
// InitHc ;
65518: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65522: LD_INT 0
65524: PPUSH
65525: LD_VAR 0 2
65529: PPUSH
65530: LD_VAR 0 3
65534: PPUSH
65535: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65539: LD_VAR 0 4
65543: PPUSH
65544: LD_VAR 0 5
65548: PPUSH
65549: CALL_OW 428
65553: PUSH
65554: LD_INT 0
65556: EQUAL
65557: IFFALSE 65581
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65559: CALL_OW 44
65563: PPUSH
65564: LD_VAR 0 4
65568: PPUSH
65569: LD_VAR 0 5
65573: PPUSH
65574: LD_INT 1
65576: PPUSH
65577: CALL_OW 48
// end ;
65581: LD_VAR 0 6
65585: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
// uc_side := your_side ;
65590: LD_ADDR_OWVAR 20
65594: PUSH
65595: LD_OWVAR 2
65599: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65600: LD_VAR 0 1
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: LD_INT 4
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: IN
65627: IFFALSE 65639
// uc_nation := nation_american else
65629: LD_ADDR_OWVAR 21
65633: PUSH
65634: LD_INT 1
65636: ST_TO_ADDR
65637: GO 65682
// if chassis in [ 11 , 12 , 13 , 14 ] then
65639: LD_VAR 0 1
65643: PUSH
65644: LD_INT 11
65646: PUSH
65647: LD_INT 12
65649: PUSH
65650: LD_INT 13
65652: PUSH
65653: LD_INT 14
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: IN
65662: IFFALSE 65674
// uc_nation := nation_arabian else
65664: LD_ADDR_OWVAR 21
65668: PUSH
65669: LD_INT 2
65671: ST_TO_ADDR
65672: GO 65682
// uc_nation := nation_russian ;
65674: LD_ADDR_OWVAR 21
65678: PUSH
65679: LD_INT 3
65681: ST_TO_ADDR
// vc_chassis := chassis ;
65682: LD_ADDR_OWVAR 37
65686: PUSH
65687: LD_VAR 0 1
65691: ST_TO_ADDR
// vc_engine := engine ;
65692: LD_ADDR_OWVAR 39
65696: PUSH
65697: LD_VAR 0 2
65701: ST_TO_ADDR
// vc_control := control ;
65702: LD_ADDR_OWVAR 38
65706: PUSH
65707: LD_VAR 0 3
65711: ST_TO_ADDR
// vc_weapon := weapon ;
65712: LD_ADDR_OWVAR 40
65716: PUSH
65717: LD_VAR 0 4
65721: ST_TO_ADDR
// un := CreateVehicle ;
65722: LD_ADDR_VAR 0 8
65726: PUSH
65727: CALL_OW 45
65731: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65732: LD_VAR 0 8
65736: PPUSH
65737: LD_INT 0
65739: PPUSH
65740: LD_INT 5
65742: PPUSH
65743: CALL_OW 12
65747: PPUSH
65748: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65752: LD_VAR 0 8
65756: PPUSH
65757: LD_VAR 0 5
65761: PPUSH
65762: LD_VAR 0 6
65766: PPUSH
65767: LD_INT 1
65769: PPUSH
65770: CALL_OW 48
// end ;
65774: LD_VAR 0 7
65778: RET
// export hInvincible ; every 1 do
65779: GO 65781
65781: DISABLE
// hInvincible := [ ] ;
65782: LD_ADDR_EXP 101
65786: PUSH
65787: EMPTY
65788: ST_TO_ADDR
65789: END
// every 10 do var i ;
65790: GO 65792
65792: DISABLE
65793: LD_INT 0
65795: PPUSH
// begin enable ;
65796: ENABLE
// if not hInvincible then
65797: LD_EXP 101
65801: NOT
65802: IFFALSE 65806
// exit ;
65804: GO 65850
// for i in hInvincible do
65806: LD_ADDR_VAR 0 1
65810: PUSH
65811: LD_EXP 101
65815: PUSH
65816: FOR_IN
65817: IFFALSE 65848
// if GetLives ( i ) < 1000 then
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 256
65828: PUSH
65829: LD_INT 1000
65831: LESS
65832: IFFALSE 65846
// SetLives ( i , 1000 ) ;
65834: LD_VAR 0 1
65838: PPUSH
65839: LD_INT 1000
65841: PPUSH
65842: CALL_OW 234
65846: GO 65816
65848: POP
65849: POP
// end ;
65850: PPOPN 1
65852: END
// export function hHackInvincible ; var i ; begin
65853: LD_INT 0
65855: PPUSH
65856: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65857: LD_ADDR_VAR 0 2
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: LD_INT 21
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 21
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: LIST
65889: PPUSH
65890: CALL_OW 69
65894: PUSH
65895: FOR_IN
65896: IFFALSE 65957
// if IsSelected ( i ) then
65898: LD_VAR 0 2
65902: PPUSH
65903: CALL_OW 306
65907: IFFALSE 65955
// begin if i in hInvincible then
65909: LD_VAR 0 2
65913: PUSH
65914: LD_EXP 101
65918: IN
65919: IFFALSE 65939
// hInvincible := hInvincible diff i else
65921: LD_ADDR_EXP 101
65925: PUSH
65926: LD_EXP 101
65930: PUSH
65931: LD_VAR 0 2
65935: DIFF
65936: ST_TO_ADDR
65937: GO 65955
// hInvincible := hInvincible union i ;
65939: LD_ADDR_EXP 101
65943: PUSH
65944: LD_EXP 101
65948: PUSH
65949: LD_VAR 0 2
65953: UNION
65954: ST_TO_ADDR
// end ;
65955: GO 65895
65957: POP
65958: POP
// end ;
65959: LD_VAR 0 1
65963: RET
// export function hHackInvisible ; var i , j ; begin
65964: LD_INT 0
65966: PPUSH
65967: PPUSH
65968: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65969: LD_ADDR_VAR 0 2
65973: PUSH
65974: LD_INT 21
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PPUSH
65984: CALL_OW 69
65988: PUSH
65989: FOR_IN
65990: IFFALSE 66014
// if IsSelected ( i ) then
65992: LD_VAR 0 2
65996: PPUSH
65997: CALL_OW 306
66001: IFFALSE 66012
// ComForceInvisible ( i ) ;
66003: LD_VAR 0 2
66007: PPUSH
66008: CALL_OW 496
66012: GO 65989
66014: POP
66015: POP
// end ;
66016: LD_VAR 0 1
66020: RET
// export function hHackChangeYourSide ; begin
66021: LD_INT 0
66023: PPUSH
// if your_side = 8 then
66024: LD_OWVAR 2
66028: PUSH
66029: LD_INT 8
66031: EQUAL
66032: IFFALSE 66044
// your_side := 0 else
66034: LD_ADDR_OWVAR 2
66038: PUSH
66039: LD_INT 0
66041: ST_TO_ADDR
66042: GO 66058
// your_side := your_side + 1 ;
66044: LD_ADDR_OWVAR 2
66048: PUSH
66049: LD_OWVAR 2
66053: PUSH
66054: LD_INT 1
66056: PLUS
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 1
66062: RET
// export function hHackChangeUnitSide ; var i , j ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
66067: PPUSH
// for i in all_units do
66068: LD_ADDR_VAR 0 2
66072: PUSH
66073: LD_OWVAR 3
66077: PUSH
66078: FOR_IN
66079: IFFALSE 66157
// if IsSelected ( i ) then
66081: LD_VAR 0 2
66085: PPUSH
66086: CALL_OW 306
66090: IFFALSE 66155
// begin j := GetSide ( i ) ;
66092: LD_ADDR_VAR 0 3
66096: PUSH
66097: LD_VAR 0 2
66101: PPUSH
66102: CALL_OW 255
66106: ST_TO_ADDR
// if j = 8 then
66107: LD_VAR 0 3
66111: PUSH
66112: LD_INT 8
66114: EQUAL
66115: IFFALSE 66127
// j := 0 else
66117: LD_ADDR_VAR 0 3
66121: PUSH
66122: LD_INT 0
66124: ST_TO_ADDR
66125: GO 66141
// j := j + 1 ;
66127: LD_ADDR_VAR 0 3
66131: PUSH
66132: LD_VAR 0 3
66136: PUSH
66137: LD_INT 1
66139: PLUS
66140: ST_TO_ADDR
// SetSide ( i , j ) ;
66141: LD_VAR 0 2
66145: PPUSH
66146: LD_VAR 0 3
66150: PPUSH
66151: CALL_OW 235
// end ;
66155: GO 66078
66157: POP
66158: POP
// end ;
66159: LD_VAR 0 1
66163: RET
// export function hHackFog ; begin
66164: LD_INT 0
66166: PPUSH
// FogOff ( true ) ;
66167: LD_INT 1
66169: PPUSH
66170: CALL_OW 344
// end ;
66174: LD_VAR 0 1
66178: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66179: LD_INT 0
66181: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66182: LD_VAR 0 1
66186: PPUSH
66187: LD_VAR 0 2
66191: PPUSH
66192: LD_VAR 0 3
66196: PPUSH
66197: LD_INT 1
66199: PPUSH
66200: LD_INT 1
66202: PPUSH
66203: CALL_OW 483
// CenterOnXY ( x , y ) ;
66207: LD_VAR 0 2
66211: PPUSH
66212: LD_VAR 0 3
66216: PPUSH
66217: CALL_OW 84
// end ;
66221: LD_VAR 0 4
66225: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66226: LD_INT 0
66228: PPUSH
66229: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66230: LD_VAR 0 1
66234: NOT
66235: PUSH
66236: LD_VAR 0 2
66240: PPUSH
66241: LD_VAR 0 3
66245: PPUSH
66246: CALL_OW 488
66250: NOT
66251: OR
66252: PUSH
66253: LD_VAR 0 1
66257: PPUSH
66258: CALL_OW 266
66262: PUSH
66263: LD_INT 3
66265: NONEQUAL
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 247
66276: PUSH
66277: LD_INT 1
66279: EQUAL
66280: NOT
66281: AND
66282: OR
66283: IFFALSE 66287
// exit ;
66285: GO 66436
// if GetType ( factory ) = unit_human then
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL_OW 247
66296: PUSH
66297: LD_INT 1
66299: EQUAL
66300: IFFALSE 66317
// factory := IsInUnit ( factory ) ;
66302: LD_ADDR_VAR 0 1
66306: PUSH
66307: LD_VAR 0 1
66311: PPUSH
66312: CALL_OW 310
66316: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66317: LD_VAR 0 1
66321: PPUSH
66322: CALL_OW 266
66326: PUSH
66327: LD_INT 3
66329: NONEQUAL
66330: IFFALSE 66334
// exit ;
66332: GO 66436
// if HexInfo ( x , y ) = factory then
66334: LD_VAR 0 2
66338: PPUSH
66339: LD_VAR 0 3
66343: PPUSH
66344: CALL_OW 428
66348: PUSH
66349: LD_VAR 0 1
66353: EQUAL
66354: IFFALSE 66381
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66356: LD_ADDR_EXP 102
66360: PUSH
66361: LD_EXP 102
66365: PPUSH
66366: LD_VAR 0 1
66370: PPUSH
66371: LD_INT 0
66373: PPUSH
66374: CALL_OW 1
66378: ST_TO_ADDR
66379: GO 66432
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66381: LD_ADDR_EXP 102
66385: PUSH
66386: LD_EXP 102
66390: PPUSH
66391: LD_VAR 0 1
66395: PPUSH
66396: LD_VAR 0 1
66400: PPUSH
66401: CALL_OW 255
66405: PUSH
66406: LD_VAR 0 1
66410: PUSH
66411: LD_VAR 0 2
66415: PUSH
66416: LD_VAR 0 3
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: PPUSH
66427: CALL_OW 1
66431: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66432: CALL 66441 0 0
// end ;
66436: LD_VAR 0 4
66440: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66441: LD_INT 0
66443: PPUSH
66444: PPUSH
66445: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66446: LD_STRING resetFactoryWaypoint();
66448: PPUSH
66449: CALL_OW 559
// if factoryWaypoints then
66453: LD_EXP 102
66457: IFFALSE 66583
// begin list := PrepareArray ( factoryWaypoints ) ;
66459: LD_ADDR_VAR 0 3
66463: PUSH
66464: LD_EXP 102
66468: PPUSH
66469: CALL 50337 0 1
66473: ST_TO_ADDR
// for i := 1 to list do
66474: LD_ADDR_VAR 0 2
66478: PUSH
66479: DOUBLE
66480: LD_INT 1
66482: DEC
66483: ST_TO_ADDR
66484: LD_VAR 0 3
66488: PUSH
66489: FOR_TO
66490: IFFALSE 66581
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66492: LD_STRING setFactoryWaypointXY(
66494: PUSH
66495: LD_VAR 0 3
66499: PUSH
66500: LD_VAR 0 2
66504: ARRAY
66505: PUSH
66506: LD_INT 1
66508: ARRAY
66509: STR
66510: PUSH
66511: LD_STRING ,
66513: STR
66514: PUSH
66515: LD_VAR 0 3
66519: PUSH
66520: LD_VAR 0 2
66524: ARRAY
66525: PUSH
66526: LD_INT 2
66528: ARRAY
66529: STR
66530: PUSH
66531: LD_STRING ,
66533: STR
66534: PUSH
66535: LD_VAR 0 3
66539: PUSH
66540: LD_VAR 0 2
66544: ARRAY
66545: PUSH
66546: LD_INT 3
66548: ARRAY
66549: STR
66550: PUSH
66551: LD_STRING ,
66553: STR
66554: PUSH
66555: LD_VAR 0 3
66559: PUSH
66560: LD_VAR 0 2
66564: ARRAY
66565: PUSH
66566: LD_INT 4
66568: ARRAY
66569: STR
66570: PUSH
66571: LD_STRING )
66573: STR
66574: PPUSH
66575: CALL_OW 559
66579: GO 66489
66581: POP
66582: POP
// end ; end ;
66583: LD_VAR 0 1
66587: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66588: LD_INT 0
66590: PPUSH
// if HexInfo ( x , y ) = warehouse then
66591: LD_VAR 0 2
66595: PPUSH
66596: LD_VAR 0 3
66600: PPUSH
66601: CALL_OW 428
66605: PUSH
66606: LD_VAR 0 1
66610: EQUAL
66611: IFFALSE 66638
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66613: LD_ADDR_EXP 103
66617: PUSH
66618: LD_EXP 103
66622: PPUSH
66623: LD_VAR 0 1
66627: PPUSH
66628: LD_INT 0
66630: PPUSH
66631: CALL_OW 1
66635: ST_TO_ADDR
66636: GO 66689
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66638: LD_ADDR_EXP 103
66642: PUSH
66643: LD_EXP 103
66647: PPUSH
66648: LD_VAR 0 1
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL_OW 255
66662: PUSH
66663: LD_VAR 0 1
66667: PUSH
66668: LD_VAR 0 2
66672: PUSH
66673: LD_VAR 0 3
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: PPUSH
66684: CALL_OW 1
66688: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66689: CALL 66698 0 0
// end ;
66693: LD_VAR 0 4
66697: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66698: LD_INT 0
66700: PPUSH
66701: PPUSH
66702: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66703: LD_STRING resetWarehouseGatheringPoints();
66705: PPUSH
66706: CALL_OW 559
// if warehouseGatheringPoints then
66710: LD_EXP 103
66714: IFFALSE 66840
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66716: LD_ADDR_VAR 0 3
66720: PUSH
66721: LD_EXP 103
66725: PPUSH
66726: CALL 50337 0 1
66730: ST_TO_ADDR
// for i := 1 to list do
66731: LD_ADDR_VAR 0 2
66735: PUSH
66736: DOUBLE
66737: LD_INT 1
66739: DEC
66740: ST_TO_ADDR
66741: LD_VAR 0 3
66745: PUSH
66746: FOR_TO
66747: IFFALSE 66838
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66749: LD_STRING setWarehouseGatheringPointXY(
66751: PUSH
66752: LD_VAR 0 3
66756: PUSH
66757: LD_VAR 0 2
66761: ARRAY
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: STR
66767: PUSH
66768: LD_STRING ,
66770: STR
66771: PUSH
66772: LD_VAR 0 3
66776: PUSH
66777: LD_VAR 0 2
66781: ARRAY
66782: PUSH
66783: LD_INT 2
66785: ARRAY
66786: STR
66787: PUSH
66788: LD_STRING ,
66790: STR
66791: PUSH
66792: LD_VAR 0 3
66796: PUSH
66797: LD_VAR 0 2
66801: ARRAY
66802: PUSH
66803: LD_INT 3
66805: ARRAY
66806: STR
66807: PUSH
66808: LD_STRING ,
66810: STR
66811: PUSH
66812: LD_VAR 0 3
66816: PUSH
66817: LD_VAR 0 2
66821: ARRAY
66822: PUSH
66823: LD_INT 4
66825: ARRAY
66826: STR
66827: PUSH
66828: LD_STRING )
66830: STR
66831: PPUSH
66832: CALL_OW 559
66836: GO 66746
66838: POP
66839: POP
// end ; end ;
66840: LD_VAR 0 1
66844: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66845: LD_EXP 103
66849: IFFALSE 67534
66851: GO 66853
66853: DISABLE
66854: LD_INT 0
66856: PPUSH
66857: PPUSH
66858: PPUSH
66859: PPUSH
66860: PPUSH
66861: PPUSH
66862: PPUSH
66863: PPUSH
66864: PPUSH
// begin enable ;
66865: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66866: LD_ADDR_VAR 0 3
66870: PUSH
66871: LD_EXP 103
66875: PPUSH
66876: CALL 50337 0 1
66880: ST_TO_ADDR
// if not list then
66881: LD_VAR 0 3
66885: NOT
66886: IFFALSE 66890
// exit ;
66888: GO 67534
// for i := 1 to list do
66890: LD_ADDR_VAR 0 1
66894: PUSH
66895: DOUBLE
66896: LD_INT 1
66898: DEC
66899: ST_TO_ADDR
66900: LD_VAR 0 3
66904: PUSH
66905: FOR_TO
66906: IFFALSE 67532
// begin depot := list [ i ] [ 2 ] ;
66908: LD_ADDR_VAR 0 8
66912: PUSH
66913: LD_VAR 0 3
66917: PUSH
66918: LD_VAR 0 1
66922: ARRAY
66923: PUSH
66924: LD_INT 2
66926: ARRAY
66927: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66928: LD_ADDR_VAR 0 5
66932: PUSH
66933: LD_VAR 0 3
66937: PUSH
66938: LD_VAR 0 1
66942: ARRAY
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66948: LD_VAR 0 8
66952: PPUSH
66953: CALL_OW 301
66957: PUSH
66958: LD_VAR 0 5
66962: PUSH
66963: LD_VAR 0 8
66967: PPUSH
66968: CALL_OW 255
66972: NONEQUAL
66973: OR
66974: IFFALSE 67003
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66976: LD_ADDR_EXP 103
66980: PUSH
66981: LD_EXP 103
66985: PPUSH
66986: LD_VAR 0 8
66990: PPUSH
66991: LD_INT 0
66993: PPUSH
66994: CALL_OW 1
66998: ST_TO_ADDR
// exit ;
66999: POP
67000: POP
67001: GO 67534
// end ; x := list [ i ] [ 3 ] ;
67003: LD_ADDR_VAR 0 6
67007: PUSH
67008: LD_VAR 0 3
67012: PUSH
67013: LD_VAR 0 1
67017: ARRAY
67018: PUSH
67019: LD_INT 3
67021: ARRAY
67022: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
67023: LD_ADDR_VAR 0 7
67027: PUSH
67028: LD_VAR 0 3
67032: PUSH
67033: LD_VAR 0 1
67037: ARRAY
67038: PUSH
67039: LD_INT 4
67041: ARRAY
67042: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
67043: LD_ADDR_VAR 0 9
67047: PUSH
67048: LD_VAR 0 6
67052: PPUSH
67053: LD_VAR 0 7
67057: PPUSH
67058: LD_INT 16
67060: PPUSH
67061: CALL 48921 0 3
67065: ST_TO_ADDR
// if not cratesNearbyPoint then
67066: LD_VAR 0 9
67070: NOT
67071: IFFALSE 67077
// exit ;
67073: POP
67074: POP
67075: GO 67534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
67077: LD_ADDR_VAR 0 4
67081: PUSH
67082: LD_INT 22
67084: PUSH
67085: LD_VAR 0 5
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: LD_INT 60
67099: PUSH
67100: EMPTY
67101: LIST
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 91
67109: PUSH
67110: LD_VAR 0 8
67114: PUSH
67115: LD_INT 6
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 2
67125: PUSH
67126: LD_INT 25
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 25
67138: PUSH
67139: LD_INT 16
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: PPUSH
67157: CALL_OW 69
67161: PUSH
67162: LD_VAR 0 8
67166: PPUSH
67167: CALL_OW 313
67171: PPUSH
67172: LD_INT 3
67174: PUSH
67175: LD_INT 60
67177: PUSH
67178: EMPTY
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: LD_INT 25
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 25
67200: PUSH
67201: LD_INT 16
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PPUSH
67217: CALL_OW 72
67221: UNION
67222: ST_TO_ADDR
// if tmp then
67223: LD_VAR 0 4
67227: IFFALSE 67307
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67229: LD_ADDR_VAR 0 4
67233: PUSH
67234: LD_VAR 0 4
67238: PPUSH
67239: LD_INT 3
67241: PPUSH
67242: CALL 46890 0 2
67246: ST_TO_ADDR
// for j in tmp do
67247: LD_ADDR_VAR 0 2
67251: PUSH
67252: LD_VAR 0 4
67256: PUSH
67257: FOR_IN
67258: IFFALSE 67301
// begin if IsInUnit ( j ) then
67260: LD_VAR 0 2
67264: PPUSH
67265: CALL_OW 310
67269: IFFALSE 67280
// ComExit ( j ) ;
67271: LD_VAR 0 2
67275: PPUSH
67276: CALL 46973 0 1
// AddComCollect ( j , x , y ) ;
67280: LD_VAR 0 2
67284: PPUSH
67285: LD_VAR 0 6
67289: PPUSH
67290: LD_VAR 0 7
67294: PPUSH
67295: CALL_OW 177
// end ;
67299: GO 67257
67301: POP
67302: POP
// exit ;
67303: POP
67304: POP
67305: GO 67534
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67307: LD_ADDR_VAR 0 4
67311: PUSH
67312: LD_INT 22
67314: PUSH
67315: LD_VAR 0 5
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 91
67326: PUSH
67327: LD_VAR 0 8
67331: PUSH
67332: LD_INT 8
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: LD_INT 34
67345: PUSH
67346: LD_INT 12
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 34
67355: PUSH
67356: LD_INT 51
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 34
67365: PUSH
67366: LD_INT 32
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 34
67375: PUSH
67376: LD_INT 89
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: PPUSH
67395: CALL_OW 69
67399: ST_TO_ADDR
// if tmp then
67400: LD_VAR 0 4
67404: IFFALSE 67530
// begin for j in tmp do
67406: LD_ADDR_VAR 0 2
67410: PUSH
67411: LD_VAR 0 4
67415: PUSH
67416: FOR_IN
67417: IFFALSE 67528
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67419: LD_VAR 0 2
67423: PPUSH
67424: CALL_OW 262
67428: PUSH
67429: LD_INT 3
67431: EQUAL
67432: PUSH
67433: LD_VAR 0 2
67437: PPUSH
67438: CALL_OW 261
67442: PUSH
67443: LD_INT 20
67445: GREATER
67446: OR
67447: PUSH
67448: LD_VAR 0 2
67452: PPUSH
67453: CALL_OW 314
67457: NOT
67458: AND
67459: PUSH
67460: LD_VAR 0 2
67464: PPUSH
67465: CALL_OW 263
67469: PUSH
67470: LD_INT 1
67472: NONEQUAL
67473: PUSH
67474: LD_VAR 0 2
67478: PPUSH
67479: CALL_OW 311
67483: OR
67484: AND
67485: IFFALSE 67526
// begin ComCollect ( j , x , y ) ;
67487: LD_VAR 0 2
67491: PPUSH
67492: LD_VAR 0 6
67496: PPUSH
67497: LD_VAR 0 7
67501: PPUSH
67502: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67506: LD_VAR 0 2
67510: PPUSH
67511: LD_VAR 0 8
67515: PPUSH
67516: CALL_OW 172
// exit ;
67520: POP
67521: POP
67522: POP
67523: POP
67524: GO 67534
// end ;
67526: GO 67416
67528: POP
67529: POP
// end ; end ;
67530: GO 66905
67532: POP
67533: POP
// end ; end_of_file
67534: PPOPN 9
67536: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67537: LD_VAR 0 1
67541: PUSH
67542: LD_INT 200
67544: DOUBLE
67545: GREATEREQUAL
67546: IFFALSE 67554
67548: LD_INT 299
67550: DOUBLE
67551: LESSEQUAL
67552: IFTRUE 67556
67554: GO 67588
67556: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_VAR 0 2
67566: PPUSH
67567: LD_VAR 0 3
67571: PPUSH
67572: LD_VAR 0 4
67576: PPUSH
67577: LD_VAR 0 5
67581: PPUSH
67582: CALL 68242 0 5
67586: GO 67665
67588: LD_INT 300
67590: DOUBLE
67591: GREATEREQUAL
67592: IFFALSE 67600
67594: LD_INT 399
67596: DOUBLE
67597: LESSEQUAL
67598: IFTRUE 67602
67600: GO 67664
67602: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67603: LD_VAR 0 1
67607: PPUSH
67608: LD_VAR 0 2
67612: PPUSH
67613: LD_VAR 0 3
67617: PPUSH
67618: LD_VAR 0 4
67622: PPUSH
67623: LD_VAR 0 5
67627: PPUSH
67628: LD_VAR 0 6
67632: PPUSH
67633: LD_VAR 0 7
67637: PPUSH
67638: LD_VAR 0 8
67642: PPUSH
67643: LD_VAR 0 9
67647: PPUSH
67648: LD_VAR 0 10
67652: PPUSH
67653: LD_VAR 0 11
67657: PPUSH
67658: CALL 64238 0 11
67662: GO 67665
67664: POP
// end ;
67665: PPOPN 11
67667: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67668: LD_VAR 0 1
67672: PPUSH
67673: LD_VAR 0 2
67677: PPUSH
67678: LD_VAR 0 3
67682: PPUSH
67683: LD_VAR 0 4
67687: PPUSH
67688: LD_VAR 0 5
67692: PPUSH
67693: CALL 67750 0 5
// end ; end_of_file
67697: PPOPN 5
67699: END
// export function SOS_UnitDestroyed ( un ) ; begin
67700: LD_INT 0
67702: PPUSH
// ComRadiation ( un ) ;
67703: LD_VAR 0 1
67707: PPUSH
67708: CALL 68646 0 1
// end ;
67712: LD_VAR 0 2
67716: RET
// export function SOS_UnitKamikazed ( un ) ; begin
67717: LD_INT 0
67719: PPUSH
// ComRadiation ( un ) ;
67720: LD_VAR 0 1
67724: PPUSH
67725: CALL 68646 0 1
// end ;
67729: LD_VAR 0 2
67733: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67734: LD_INT 0
67736: PPUSH
// end ;
67737: LD_VAR 0 4
67741: RET
// export function SOS_Command ( cmd ) ; begin
67742: LD_INT 0
67744: PPUSH
// end ;
67745: LD_VAR 0 2
67749: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67750: LD_INT 0
67752: PPUSH
// end ;
67753: LD_VAR 0 6
67757: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
67758: LD_INT 0
67760: PPUSH
67761: PPUSH
67762: PPUSH
67763: PPUSH
// if not vehicle or not factory then
67764: LD_VAR 0 1
67768: NOT
67769: PUSH
67770: LD_VAR 0 2
67774: NOT
67775: OR
67776: IFFALSE 67780
// exit ;
67778: GO 68237
// if factoryWaypoints >= factory then
67780: LD_EXP 102
67784: PUSH
67785: LD_VAR 0 2
67789: GREATEREQUAL
67790: IFFALSE 68237
// if factoryWaypoints [ factory ] then
67792: LD_EXP 102
67796: PUSH
67797: LD_VAR 0 2
67801: ARRAY
67802: IFFALSE 68237
// begin if GetControl ( vehicle ) = control_manual then
67804: LD_VAR 0 1
67808: PPUSH
67809: CALL_OW 263
67813: PUSH
67814: LD_INT 1
67816: EQUAL
67817: IFFALSE 68124
// begin driver := IsDrivenBy ( vehicle ) ;
67819: LD_ADDR_VAR 0 5
67823: PUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL_OW 311
67833: ST_TO_ADDR
// tag := GetTag ( driver ) ;
67834: LD_ADDR_VAR 0 4
67838: PUSH
67839: LD_VAR 0 5
67843: PPUSH
67844: CALL_OW 110
67848: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
67849: LD_VAR 0 4
67853: PUSH
67854: LD_INT 501
67856: EQUAL
67857: PUSH
67858: LD_VAR 0 1
67862: PPUSH
67863: CALL_OW 110
67867: PUSH
67868: LD_INT 501
67870: EQUAL
67871: OR
67872: IFFALSE 67876
// exit ;
67874: GO 68237
// if not HasTask ( driver ) then
67876: LD_VAR 0 5
67880: PPUSH
67881: CALL_OW 314
67885: NOT
67886: IFFALSE 68122
// begin SetTag ( driver , tDriver ) ;
67888: LD_VAR 0 5
67892: PPUSH
67893: LD_INT 501
67895: PPUSH
67896: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
67900: LD_VAR 0 1
67904: PPUSH
67905: LD_INT 501
67907: PPUSH
67908: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67912: LD_ADDR_VAR 0 6
67916: PUSH
67917: LD_EXP 102
67921: PUSH
67922: LD_VAR 0 2
67926: ARRAY
67927: PUSH
67928: LD_INT 3
67930: ARRAY
67931: PPUSH
67932: LD_EXP 102
67936: PUSH
67937: LD_VAR 0 2
67941: ARRAY
67942: PUSH
67943: LD_INT 4
67945: ARRAY
67946: PPUSH
67947: CALL_OW 428
67951: ST_TO_ADDR
// if hex then
67952: LD_VAR 0 6
67956: IFFALSE 67974
// ComMoveUnit ( driver , hex ) else
67958: LD_VAR 0 5
67962: PPUSH
67963: LD_VAR 0 6
67967: PPUSH
67968: CALL_OW 112
67972: GO 68013
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67974: LD_VAR 0 5
67978: PPUSH
67979: LD_EXP 102
67983: PUSH
67984: LD_VAR 0 2
67988: ARRAY
67989: PUSH
67990: LD_INT 3
67992: ARRAY
67993: PPUSH
67994: LD_EXP 102
67998: PUSH
67999: LD_VAR 0 2
68003: ARRAY
68004: PUSH
68005: LD_INT 4
68007: ARRAY
68008: PPUSH
68009: CALL_OW 111
// AddComExitVehicle ( driver ) ;
68013: LD_VAR 0 5
68017: PPUSH
68018: CALL_OW 181
// if Multiplayer then
68022: LD_OWVAR 4
68026: IFFALSE 68075
// begin repeat wait ( 10 ) ;
68028: LD_INT 10
68030: PPUSH
68031: CALL_OW 67
// until not IsInUnit ( driver ) ;
68035: LD_VAR 0 5
68039: PPUSH
68040: CALL_OW 310
68044: NOT
68045: IFFALSE 68028
// if not HasTask ( driver ) then
68047: LD_VAR 0 5
68051: PPUSH
68052: CALL_OW 314
68056: NOT
68057: IFFALSE 68073
// ComEnterUnit ( driver , factory ) ;
68059: LD_VAR 0 5
68063: PPUSH
68064: LD_VAR 0 2
68068: PPUSH
68069: CALL_OW 120
// end else
68073: GO 68089
// AddComEnterUnit ( driver , factory ) ;
68075: LD_VAR 0 5
68079: PPUSH
68080: LD_VAR 0 2
68084: PPUSH
68085: CALL_OW 180
// wait ( 0 0$1 ) ;
68089: LD_INT 35
68091: PPUSH
68092: CALL_OW 67
// SetTag ( driver , tag ) ;
68096: LD_VAR 0 5
68100: PPUSH
68101: LD_VAR 0 4
68105: PPUSH
68106: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
68110: LD_VAR 0 1
68114: PPUSH
68115: LD_INT 0
68117: PPUSH
68118: CALL_OW 109
// end ; end else
68122: GO 68237
// if GetControl ( vehicle ) = control_remote then
68124: LD_VAR 0 1
68128: PPUSH
68129: CALL_OW 263
68133: PUSH
68134: LD_INT 2
68136: EQUAL
68137: IFFALSE 68198
// begin wait ( 0 0$2 ) ;
68139: LD_INT 70
68141: PPUSH
68142: CALL_OW 67
// if Connect ( vehicle ) then
68146: LD_VAR 0 1
68150: PPUSH
68151: CALL 17192 0 1
68155: IFFALSE 68196
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68157: LD_VAR 0 1
68161: PPUSH
68162: LD_EXP 102
68166: PUSH
68167: LD_VAR 0 2
68171: ARRAY
68172: PUSH
68173: LD_INT 3
68175: ARRAY
68176: PPUSH
68177: LD_EXP 102
68181: PUSH
68182: LD_VAR 0 2
68186: ARRAY
68187: PUSH
68188: LD_INT 4
68190: ARRAY
68191: PPUSH
68192: CALL_OW 171
// end else
68196: GO 68237
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
68198: LD_VAR 0 1
68202: PPUSH
68203: LD_EXP 102
68207: PUSH
68208: LD_VAR 0 2
68212: ARRAY
68213: PUSH
68214: LD_INT 3
68216: ARRAY
68217: PPUSH
68218: LD_EXP 102
68222: PUSH
68223: LD_VAR 0 2
68227: ARRAY
68228: PUSH
68229: LD_INT 4
68231: ARRAY
68232: PPUSH
68233: CALL_OW 171
// end ; end ;
68237: LD_VAR 0 3
68241: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
68242: LD_INT 0
68244: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
68245: LD_VAR 0 1
68249: PUSH
68250: LD_INT 250
68252: EQUAL
68253: PUSH
68254: LD_VAR 0 2
68258: PPUSH
68259: CALL_OW 264
68263: PUSH
68264: LD_INT 81
68266: EQUAL
68267: AND
68268: IFFALSE 68289
// MinerPlaceMine ( unit , x , y ) ;
68270: LD_VAR 0 2
68274: PPUSH
68275: LD_VAR 0 4
68279: PPUSH
68280: LD_VAR 0 5
68284: PPUSH
68285: CALL 71381 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
68289: LD_VAR 0 1
68293: PUSH
68294: LD_INT 251
68296: EQUAL
68297: PUSH
68298: LD_VAR 0 2
68302: PPUSH
68303: CALL_OW 264
68307: PUSH
68308: LD_INT 81
68310: EQUAL
68311: AND
68312: IFFALSE 68333
// MinerDetonateMine ( unit , x , y ) ;
68314: LD_VAR 0 2
68318: PPUSH
68319: LD_VAR 0 4
68323: PPUSH
68324: LD_VAR 0 5
68328: PPUSH
68329: CALL 71656 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
68333: LD_VAR 0 1
68337: PUSH
68338: LD_INT 252
68340: EQUAL
68341: PUSH
68342: LD_VAR 0 2
68346: PPUSH
68347: CALL_OW 264
68351: PUSH
68352: LD_INT 81
68354: EQUAL
68355: AND
68356: IFFALSE 68377
// MinerCreateMinefield ( unit , x , y ) ;
68358: LD_VAR 0 2
68362: PPUSH
68363: LD_VAR 0 4
68367: PPUSH
68368: LD_VAR 0 5
68372: PPUSH
68373: CALL 72073 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 253
68384: EQUAL
68385: PUSH
68386: LD_VAR 0 2
68390: PPUSH
68391: CALL_OW 257
68395: PUSH
68396: LD_INT 5
68398: EQUAL
68399: AND
68400: IFFALSE 68421
// ComBinocular ( unit , x , y ) ;
68402: LD_VAR 0 2
68406: PPUSH
68407: LD_VAR 0 4
68411: PPUSH
68412: LD_VAR 0 5
68416: PPUSH
68417: CALL 72442 0 3
// if selectedUnit then
68421: LD_VAR 0 3
68425: IFFALSE 68481
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
68427: LD_VAR 0 1
68431: PUSH
68432: LD_INT 254
68434: EQUAL
68435: PUSH
68436: LD_VAR 0 2
68440: PPUSH
68441: CALL_OW 264
68445: PUSH
68446: LD_INT 99
68448: EQUAL
68449: AND
68450: PUSH
68451: LD_VAR 0 3
68455: PPUSH
68456: CALL_OW 263
68460: PUSH
68461: LD_INT 3
68463: EQUAL
68464: AND
68465: IFFALSE 68481
// HackDestroyVehicle ( unit , selectedUnit ) ;
68467: LD_VAR 0 2
68471: PPUSH
68472: LD_VAR 0 3
68476: PPUSH
68477: CALL 70745 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
68481: LD_VAR 0 1
68485: PUSH
68486: LD_INT 255
68488: EQUAL
68489: PUSH
68490: LD_VAR 0 2
68494: PPUSH
68495: CALL_OW 264
68499: PUSH
68500: LD_INT 14
68502: PUSH
68503: LD_INT 53
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: IN
68510: AND
68511: PUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: LD_VAR 0 5
68521: PPUSH
68522: CALL_OW 488
68526: AND
68527: IFFALSE 68551
// CutTreeXYR ( unit , x , y , 12 ) ;
68529: LD_VAR 0 2
68533: PPUSH
68534: LD_VAR 0 4
68538: PPUSH
68539: LD_VAR 0 5
68543: PPUSH
68544: LD_INT 12
68546: PPUSH
68547: CALL 68742 0 4
// if cmd = 256 then
68551: LD_VAR 0 1
68555: PUSH
68556: LD_INT 256
68558: EQUAL
68559: IFFALSE 68580
// SetFactoryWaypoint ( unit , x , y ) ;
68561: LD_VAR 0 2
68565: PPUSH
68566: LD_VAR 0 4
68570: PPUSH
68571: LD_VAR 0 5
68575: PPUSH
68576: CALL 66226 0 3
// if cmd = 257 then
68580: LD_VAR 0 1
68584: PUSH
68585: LD_INT 257
68587: EQUAL
68588: IFFALSE 68609
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68590: LD_VAR 0 2
68594: PPUSH
68595: LD_VAR 0 4
68599: PPUSH
68600: LD_VAR 0 5
68604: PPUSH
68605: CALL 66588 0 3
// if cmd = 258 then
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 258
68616: EQUAL
68617: IFFALSE 68641
// BurnTreeXYR ( unit , x , y , 8 ) ;
68619: LD_VAR 0 2
68623: PPUSH
68624: LD_VAR 0 4
68628: PPUSH
68629: LD_VAR 0 5
68633: PPUSH
68634: LD_INT 8
68636: PPUSH
68637: CALL 69136 0 4
// end ;
68641: LD_VAR 0 6
68645: RET
// export function ComRadiation ( un ) ; var eff ; begin
68646: LD_INT 0
68648: PPUSH
68649: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
68650: LD_VAR 0 1
68654: PPUSH
68655: CALL_OW 264
68659: PUSH
68660: LD_INT 91
68662: NONEQUAL
68663: IFFALSE 68667
// exit ;
68665: GO 68737
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
68667: LD_INT 68
68669: PPUSH
68670: LD_VAR 0 1
68674: PPUSH
68675: CALL_OW 255
68679: PPUSH
68680: CALL_OW 321
68684: PUSH
68685: LD_INT 2
68687: EQUAL
68688: IFFALSE 68700
// eff := 70 else
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_INT 70
68697: ST_TO_ADDR
68698: GO 68708
// eff := 30 ;
68700: LD_ADDR_VAR 0 3
68704: PUSH
68705: LD_INT 30
68707: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
68708: LD_VAR 0 1
68712: PPUSH
68713: CALL_OW 250
68717: PPUSH
68718: LD_VAR 0 1
68722: PPUSH
68723: CALL_OW 251
68727: PPUSH
68728: LD_VAR 0 3
68732: PPUSH
68733: CALL_OW 495
// end ;
68737: LD_VAR 0 2
68741: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68742: LD_INT 0
68744: PPUSH
68745: PPUSH
68746: PPUSH
68747: PPUSH
68748: PPUSH
68749: PPUSH
68750: PPUSH
68751: PPUSH
68752: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68753: LD_VAR 0 1
68757: PPUSH
68758: CALL_OW 302
68762: NOT
68763: PUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: LD_VAR 0 3
68773: PPUSH
68774: CALL_OW 488
68778: NOT
68779: OR
68780: PUSH
68781: LD_VAR 0 4
68785: NOT
68786: OR
68787: IFFALSE 68791
// exit ;
68789: GO 69131
// list := [ ] ;
68791: LD_ADDR_VAR 0 13
68795: PUSH
68796: EMPTY
68797: ST_TO_ADDR
// if x - r < 0 then
68798: LD_VAR 0 2
68802: PUSH
68803: LD_VAR 0 4
68807: MINUS
68808: PUSH
68809: LD_INT 0
68811: LESS
68812: IFFALSE 68824
// min_x := 0 else
68814: LD_ADDR_VAR 0 7
68818: PUSH
68819: LD_INT 0
68821: ST_TO_ADDR
68822: GO 68840
// min_x := x - r ;
68824: LD_ADDR_VAR 0 7
68828: PUSH
68829: LD_VAR 0 2
68833: PUSH
68834: LD_VAR 0 4
68838: MINUS
68839: ST_TO_ADDR
// if y - r < 0 then
68840: LD_VAR 0 3
68844: PUSH
68845: LD_VAR 0 4
68849: MINUS
68850: PUSH
68851: LD_INT 0
68853: LESS
68854: IFFALSE 68866
// min_y := 0 else
68856: LD_ADDR_VAR 0 8
68860: PUSH
68861: LD_INT 0
68863: ST_TO_ADDR
68864: GO 68882
// min_y := y - r ;
68866: LD_ADDR_VAR 0 8
68870: PUSH
68871: LD_VAR 0 3
68875: PUSH
68876: LD_VAR 0 4
68880: MINUS
68881: ST_TO_ADDR
// max_x := x + r ;
68882: LD_ADDR_VAR 0 9
68886: PUSH
68887: LD_VAR 0 2
68891: PUSH
68892: LD_VAR 0 4
68896: PLUS
68897: ST_TO_ADDR
// max_y := y + r ;
68898: LD_ADDR_VAR 0 10
68902: PUSH
68903: LD_VAR 0 3
68907: PUSH
68908: LD_VAR 0 4
68912: PLUS
68913: ST_TO_ADDR
// for _x = min_x to max_x do
68914: LD_ADDR_VAR 0 11
68918: PUSH
68919: DOUBLE
68920: LD_VAR 0 7
68924: DEC
68925: ST_TO_ADDR
68926: LD_VAR 0 9
68930: PUSH
68931: FOR_TO
68932: IFFALSE 69049
// for _y = min_y to max_y do
68934: LD_ADDR_VAR 0 12
68938: PUSH
68939: DOUBLE
68940: LD_VAR 0 8
68944: DEC
68945: ST_TO_ADDR
68946: LD_VAR 0 10
68950: PUSH
68951: FOR_TO
68952: IFFALSE 69045
// begin if not ValidHex ( _x , _y ) then
68954: LD_VAR 0 11
68958: PPUSH
68959: LD_VAR 0 12
68963: PPUSH
68964: CALL_OW 488
68968: NOT
68969: IFFALSE 68973
// continue ;
68971: GO 68951
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68973: LD_VAR 0 11
68977: PPUSH
68978: LD_VAR 0 12
68982: PPUSH
68983: CALL_OW 351
68987: PUSH
68988: LD_VAR 0 11
68992: PPUSH
68993: LD_VAR 0 12
68997: PPUSH
68998: CALL_OW 554
69002: AND
69003: IFFALSE 69043
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69005: LD_ADDR_VAR 0 13
69009: PUSH
69010: LD_VAR 0 13
69014: PPUSH
69015: LD_VAR 0 13
69019: PUSH
69020: LD_INT 1
69022: PLUS
69023: PPUSH
69024: LD_VAR 0 11
69028: PUSH
69029: LD_VAR 0 12
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PPUSH
69038: CALL_OW 2
69042: ST_TO_ADDR
// end ;
69043: GO 68951
69045: POP
69046: POP
69047: GO 68931
69049: POP
69050: POP
// if not list then
69051: LD_VAR 0 13
69055: NOT
69056: IFFALSE 69060
// exit ;
69058: GO 69131
// for i in list do
69060: LD_ADDR_VAR 0 6
69064: PUSH
69065: LD_VAR 0 13
69069: PUSH
69070: FOR_IN
69071: IFFALSE 69129
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
69073: LD_VAR 0 1
69077: PPUSH
69078: LD_STRING M
69080: PUSH
69081: LD_VAR 0 6
69085: PUSH
69086: LD_INT 1
69088: ARRAY
69089: PUSH
69090: LD_VAR 0 6
69094: PUSH
69095: LD_INT 2
69097: ARRAY
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: PUSH
69120: EMPTY
69121: LIST
69122: PPUSH
69123: CALL_OW 447
69127: GO 69070
69129: POP
69130: POP
// end ;
69131: LD_VAR 0 5
69135: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
69136: LD_INT 0
69138: PPUSH
69139: PPUSH
69140: PPUSH
69141: PPUSH
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 302
69157: NOT
69158: PUSH
69159: LD_VAR 0 2
69163: PPUSH
69164: LD_VAR 0 3
69168: PPUSH
69169: CALL_OW 488
69173: NOT
69174: OR
69175: PUSH
69176: LD_VAR 0 4
69180: NOT
69181: OR
69182: IFFALSE 69186
// exit ;
69184: GO 69699
// list := [ ] ;
69186: LD_ADDR_VAR 0 13
69190: PUSH
69191: EMPTY
69192: ST_TO_ADDR
// if x - r < 0 then
69193: LD_VAR 0 2
69197: PUSH
69198: LD_VAR 0 4
69202: MINUS
69203: PUSH
69204: LD_INT 0
69206: LESS
69207: IFFALSE 69219
// min_x := 0 else
69209: LD_ADDR_VAR 0 7
69213: PUSH
69214: LD_INT 0
69216: ST_TO_ADDR
69217: GO 69235
// min_x := x - r ;
69219: LD_ADDR_VAR 0 7
69223: PUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_VAR 0 4
69233: MINUS
69234: ST_TO_ADDR
// if y - r < 0 then
69235: LD_VAR 0 3
69239: PUSH
69240: LD_VAR 0 4
69244: MINUS
69245: PUSH
69246: LD_INT 0
69248: LESS
69249: IFFALSE 69261
// min_y := 0 else
69251: LD_ADDR_VAR 0 8
69255: PUSH
69256: LD_INT 0
69258: ST_TO_ADDR
69259: GO 69277
// min_y := y - r ;
69261: LD_ADDR_VAR 0 8
69265: PUSH
69266: LD_VAR 0 3
69270: PUSH
69271: LD_VAR 0 4
69275: MINUS
69276: ST_TO_ADDR
// max_x := x + r ;
69277: LD_ADDR_VAR 0 9
69281: PUSH
69282: LD_VAR 0 2
69286: PUSH
69287: LD_VAR 0 4
69291: PLUS
69292: ST_TO_ADDR
// max_y := y + r ;
69293: LD_ADDR_VAR 0 10
69297: PUSH
69298: LD_VAR 0 3
69302: PUSH
69303: LD_VAR 0 4
69307: PLUS
69308: ST_TO_ADDR
// for _x = min_x to max_x do
69309: LD_ADDR_VAR 0 11
69313: PUSH
69314: DOUBLE
69315: LD_VAR 0 7
69319: DEC
69320: ST_TO_ADDR
69321: LD_VAR 0 9
69325: PUSH
69326: FOR_TO
69327: IFFALSE 69444
// for _y = min_y to max_y do
69329: LD_ADDR_VAR 0 12
69333: PUSH
69334: DOUBLE
69335: LD_VAR 0 8
69339: DEC
69340: ST_TO_ADDR
69341: LD_VAR 0 10
69345: PUSH
69346: FOR_TO
69347: IFFALSE 69440
// begin if not ValidHex ( _x , _y ) then
69349: LD_VAR 0 11
69353: PPUSH
69354: LD_VAR 0 12
69358: PPUSH
69359: CALL_OW 488
69363: NOT
69364: IFFALSE 69368
// continue ;
69366: GO 69346
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
69368: LD_VAR 0 11
69372: PPUSH
69373: LD_VAR 0 12
69377: PPUSH
69378: CALL_OW 351
69382: PUSH
69383: LD_VAR 0 11
69387: PPUSH
69388: LD_VAR 0 12
69392: PPUSH
69393: CALL_OW 554
69397: AND
69398: IFFALSE 69438
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
69400: LD_ADDR_VAR 0 13
69404: PUSH
69405: LD_VAR 0 13
69409: PPUSH
69410: LD_VAR 0 13
69414: PUSH
69415: LD_INT 1
69417: PLUS
69418: PPUSH
69419: LD_VAR 0 11
69423: PUSH
69424: LD_VAR 0 12
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PPUSH
69433: CALL_OW 2
69437: ST_TO_ADDR
// end ;
69438: GO 69346
69440: POP
69441: POP
69442: GO 69326
69444: POP
69445: POP
// if not list then
69446: LD_VAR 0 13
69450: NOT
69451: IFFALSE 69455
// exit ;
69453: GO 69699
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
69455: LD_ADDR_VAR 0 13
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 13
69469: PPUSH
69470: LD_INT 1
69472: PPUSH
69473: LD_INT 1
69475: PPUSH
69476: CALL 14334 0 4
69480: ST_TO_ADDR
// ComStop ( flame ) ;
69481: LD_VAR 0 1
69485: PPUSH
69486: CALL_OW 141
// for i in list do
69490: LD_ADDR_VAR 0 6
69494: PUSH
69495: LD_VAR 0 13
69499: PUSH
69500: FOR_IN
69501: IFFALSE 69532
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
69503: LD_VAR 0 1
69507: PPUSH
69508: LD_VAR 0 6
69512: PUSH
69513: LD_INT 1
69515: ARRAY
69516: PPUSH
69517: LD_VAR 0 6
69521: PUSH
69522: LD_INT 2
69524: ARRAY
69525: PPUSH
69526: CALL_OW 176
69530: GO 69500
69532: POP
69533: POP
// repeat wait ( 0 0$1 ) ;
69534: LD_INT 35
69536: PPUSH
69537: CALL_OW 67
// task := GetTaskList ( flame ) ;
69541: LD_ADDR_VAR 0 14
69545: PUSH
69546: LD_VAR 0 1
69550: PPUSH
69551: CALL_OW 437
69555: ST_TO_ADDR
// if not task then
69556: LD_VAR 0 14
69560: NOT
69561: IFFALSE 69565
// exit ;
69563: GO 69699
// if task [ 1 ] [ 1 ] <> | then
69565: LD_VAR 0 14
69569: PUSH
69570: LD_INT 1
69572: ARRAY
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: PUSH
69578: LD_STRING |
69580: NONEQUAL
69581: IFFALSE 69585
// exit ;
69583: GO 69699
// _x := task [ 1 ] [ 2 ] ;
69585: LD_ADDR_VAR 0 11
69589: PUSH
69590: LD_VAR 0 14
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PUSH
69599: LD_INT 2
69601: ARRAY
69602: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69603: LD_ADDR_VAR 0 12
69607: PUSH
69608: LD_VAR 0 14
69612: PUSH
69613: LD_INT 1
69615: ARRAY
69616: PUSH
69617: LD_INT 3
69619: ARRAY
69620: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69621: LD_VAR 0 11
69625: PPUSH
69626: LD_VAR 0 12
69630: PPUSH
69631: CALL_OW 351
69635: NOT
69636: PUSH
69637: LD_VAR 0 11
69641: PPUSH
69642: LD_VAR 0 12
69646: PPUSH
69647: CALL_OW 554
69651: NOT
69652: OR
69653: IFFALSE 69687
// begin task := Delete ( task , 1 ) ;
69655: LD_ADDR_VAR 0 14
69659: PUSH
69660: LD_VAR 0 14
69664: PPUSH
69665: LD_INT 1
69667: PPUSH
69668: CALL_OW 3
69672: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69673: LD_VAR 0 1
69677: PPUSH
69678: LD_VAR 0 14
69682: PPUSH
69683: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69687: LD_VAR 0 1
69691: PPUSH
69692: CALL_OW 314
69696: NOT
69697: IFFALSE 69534
// end ;
69699: LD_VAR 0 5
69703: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69704: LD_EXP 105
69708: NOT
69709: IFFALSE 69759
69711: GO 69713
69713: DISABLE
// begin initHack := true ;
69714: LD_ADDR_EXP 105
69718: PUSH
69719: LD_INT 1
69721: ST_TO_ADDR
// hackTanks := [ ] ;
69722: LD_ADDR_EXP 106
69726: PUSH
69727: EMPTY
69728: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69729: LD_ADDR_EXP 107
69733: PUSH
69734: EMPTY
69735: ST_TO_ADDR
// hackLimit := 3 ;
69736: LD_ADDR_EXP 108
69740: PUSH
69741: LD_INT 3
69743: ST_TO_ADDR
// hackDist := 12 ;
69744: LD_ADDR_EXP 109
69748: PUSH
69749: LD_INT 12
69751: ST_TO_ADDR
// hackCounter := [ ] ;
69752: LD_ADDR_EXP 110
69756: PUSH
69757: EMPTY
69758: ST_TO_ADDR
// end ;
69759: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69760: LD_EXP 105
69764: PUSH
69765: LD_INT 34
69767: PUSH
69768: LD_INT 99
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PPUSH
69775: CALL_OW 69
69779: AND
69780: IFFALSE 70033
69782: GO 69784
69784: DISABLE
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
// begin enable ;
69789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69790: LD_ADDR_VAR 0 1
69794: PUSH
69795: LD_INT 34
69797: PUSH
69798: LD_INT 99
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PPUSH
69805: CALL_OW 69
69809: PUSH
69810: FOR_IN
69811: IFFALSE 70031
// begin if not i in hackTanks then
69813: LD_VAR 0 1
69817: PUSH
69818: LD_EXP 106
69822: IN
69823: NOT
69824: IFFALSE 69907
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69826: LD_ADDR_EXP 106
69830: PUSH
69831: LD_EXP 106
69835: PPUSH
69836: LD_EXP 106
69840: PUSH
69841: LD_INT 1
69843: PLUS
69844: PPUSH
69845: LD_VAR 0 1
69849: PPUSH
69850: CALL_OW 1
69854: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69855: LD_ADDR_EXP 107
69859: PUSH
69860: LD_EXP 107
69864: PPUSH
69865: LD_EXP 107
69869: PUSH
69870: LD_INT 1
69872: PLUS
69873: PPUSH
69874: EMPTY
69875: PPUSH
69876: CALL_OW 1
69880: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69881: LD_ADDR_EXP 110
69885: PUSH
69886: LD_EXP 110
69890: PPUSH
69891: LD_EXP 110
69895: PUSH
69896: LD_INT 1
69898: PLUS
69899: PPUSH
69900: EMPTY
69901: PPUSH
69902: CALL_OW 1
69906: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69907: LD_VAR 0 1
69911: PPUSH
69912: CALL_OW 302
69916: NOT
69917: IFFALSE 69930
// begin HackUnlinkAll ( i ) ;
69919: LD_VAR 0 1
69923: PPUSH
69924: CALL 70036 0 1
// continue ;
69928: GO 69810
// end ; HackCheckCapturedStatus ( i ) ;
69930: LD_VAR 0 1
69934: PPUSH
69935: CALL 70479 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69939: LD_ADDR_VAR 0 2
69943: PUSH
69944: LD_INT 81
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 255
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 33
69963: PUSH
69964: LD_INT 3
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 91
69973: PUSH
69974: LD_VAR 0 1
69978: PUSH
69979: LD_EXP 109
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 50
69991: PUSH
69992: EMPTY
69993: LIST
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: PPUSH
70001: CALL_OW 69
70005: ST_TO_ADDR
// if not tmp then
70006: LD_VAR 0 2
70010: NOT
70011: IFFALSE 70015
// continue ;
70013: GO 69810
// HackLink ( i , tmp ) ;
70015: LD_VAR 0 1
70019: PPUSH
70020: LD_VAR 0 2
70024: PPUSH
70025: CALL 70172 0 2
// end ;
70029: GO 69810
70031: POP
70032: POP
// end ;
70033: PPOPN 2
70035: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
70036: LD_INT 0
70038: PPUSH
70039: PPUSH
70040: PPUSH
// if not hack in hackTanks then
70041: LD_VAR 0 1
70045: PUSH
70046: LD_EXP 106
70050: IN
70051: NOT
70052: IFFALSE 70056
// exit ;
70054: GO 70167
// index := GetElementIndex ( hackTanks , hack ) ;
70056: LD_ADDR_VAR 0 4
70060: PUSH
70061: LD_EXP 106
70065: PPUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: CALL 13631 0 2
70075: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
70076: LD_EXP 107
70080: PUSH
70081: LD_VAR 0 4
70085: ARRAY
70086: IFFALSE 70167
// begin for i in hackTanksCaptured [ index ] do
70088: LD_ADDR_VAR 0 3
70092: PUSH
70093: LD_EXP 107
70097: PUSH
70098: LD_VAR 0 4
70102: ARRAY
70103: PUSH
70104: FOR_IN
70105: IFFALSE 70131
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
70107: LD_VAR 0 3
70111: PUSH
70112: LD_INT 1
70114: ARRAY
70115: PPUSH
70116: LD_VAR 0 3
70120: PUSH
70121: LD_INT 2
70123: ARRAY
70124: PPUSH
70125: CALL_OW 235
70129: GO 70104
70131: POP
70132: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
70133: LD_ADDR_EXP 107
70137: PUSH
70138: LD_EXP 107
70142: PPUSH
70143: LD_VAR 0 4
70147: PPUSH
70148: EMPTY
70149: PPUSH
70150: CALL_OW 1
70154: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
70155: LD_VAR 0 1
70159: PPUSH
70160: LD_INT 0
70162: PPUSH
70163: CALL_OW 505
// end ; end ;
70167: LD_VAR 0 2
70171: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
70172: LD_INT 0
70174: PPUSH
70175: PPUSH
70176: PPUSH
// if not hack in hackTanks or not vehicles then
70177: LD_VAR 0 1
70181: PUSH
70182: LD_EXP 106
70186: IN
70187: NOT
70188: PUSH
70189: LD_VAR 0 2
70193: NOT
70194: OR
70195: IFFALSE 70199
// exit ;
70197: GO 70474
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
70199: LD_ADDR_VAR 0 2
70203: PUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: LD_VAR 0 2
70213: PPUSH
70214: LD_INT 1
70216: PPUSH
70217: LD_INT 1
70219: PPUSH
70220: CALL 14281 0 4
70224: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
70225: LD_ADDR_VAR 0 5
70229: PUSH
70230: LD_EXP 106
70234: PPUSH
70235: LD_VAR 0 1
70239: PPUSH
70240: CALL 13631 0 2
70244: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
70245: LD_EXP 107
70249: PUSH
70250: LD_VAR 0 5
70254: ARRAY
70255: PUSH
70256: LD_EXP 108
70260: LESS
70261: IFFALSE 70450
// begin for i := 1 to vehicles do
70263: LD_ADDR_VAR 0 4
70267: PUSH
70268: DOUBLE
70269: LD_INT 1
70271: DEC
70272: ST_TO_ADDR
70273: LD_VAR 0 2
70277: PUSH
70278: FOR_TO
70279: IFFALSE 70448
// begin if hackTanksCaptured [ index ] = hackLimit then
70281: LD_EXP 107
70285: PUSH
70286: LD_VAR 0 5
70290: ARRAY
70291: PUSH
70292: LD_EXP 108
70296: EQUAL
70297: IFFALSE 70301
// break ;
70299: GO 70448
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
70301: LD_ADDR_EXP 110
70305: PUSH
70306: LD_EXP 110
70310: PPUSH
70311: LD_VAR 0 5
70315: PPUSH
70316: LD_EXP 110
70320: PUSH
70321: LD_VAR 0 5
70325: ARRAY
70326: PUSH
70327: LD_INT 1
70329: PLUS
70330: PPUSH
70331: CALL_OW 1
70335: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
70336: LD_ADDR_EXP 107
70340: PUSH
70341: LD_EXP 107
70345: PPUSH
70346: LD_VAR 0 5
70350: PUSH
70351: LD_EXP 107
70355: PUSH
70356: LD_VAR 0 5
70360: ARRAY
70361: PUSH
70362: LD_INT 1
70364: PLUS
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PPUSH
70370: LD_VAR 0 2
70374: PUSH
70375: LD_VAR 0 4
70379: ARRAY
70380: PUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_VAR 0 4
70390: ARRAY
70391: PPUSH
70392: CALL_OW 255
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PPUSH
70401: CALL 13846 0 3
70405: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
70406: LD_VAR 0 2
70410: PUSH
70411: LD_VAR 0 4
70415: ARRAY
70416: PPUSH
70417: LD_VAR 0 1
70421: PPUSH
70422: CALL_OW 255
70426: PPUSH
70427: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
70431: LD_VAR 0 2
70435: PUSH
70436: LD_VAR 0 4
70440: ARRAY
70441: PPUSH
70442: CALL_OW 141
// end ;
70446: GO 70278
70448: POP
70449: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70450: LD_VAR 0 1
70454: PPUSH
70455: LD_EXP 107
70459: PUSH
70460: LD_VAR 0 5
70464: ARRAY
70465: PUSH
70466: LD_INT 0
70468: PLUS
70469: PPUSH
70470: CALL_OW 505
// end ;
70474: LD_VAR 0 3
70478: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
70479: LD_INT 0
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
// if not hack in hackTanks then
70485: LD_VAR 0 1
70489: PUSH
70490: LD_EXP 106
70494: IN
70495: NOT
70496: IFFALSE 70500
// exit ;
70498: GO 70740
// index := GetElementIndex ( hackTanks , hack ) ;
70500: LD_ADDR_VAR 0 4
70504: PUSH
70505: LD_EXP 106
70509: PPUSH
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL 13631 0 2
70519: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
70520: LD_ADDR_VAR 0 3
70524: PUSH
70525: DOUBLE
70526: LD_EXP 107
70530: PUSH
70531: LD_VAR 0 4
70535: ARRAY
70536: INC
70537: ST_TO_ADDR
70538: LD_INT 1
70540: PUSH
70541: FOR_DOWNTO
70542: IFFALSE 70714
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
70544: LD_ADDR_VAR 0 5
70548: PUSH
70549: LD_EXP 107
70553: PUSH
70554: LD_VAR 0 4
70558: ARRAY
70559: PUSH
70560: LD_VAR 0 3
70564: ARRAY
70565: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
70566: LD_VAR 0 5
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PPUSH
70575: CALL_OW 302
70579: NOT
70580: PUSH
70581: LD_VAR 0 5
70585: PUSH
70586: LD_INT 1
70588: ARRAY
70589: PPUSH
70590: CALL_OW 255
70594: PUSH
70595: LD_VAR 0 1
70599: PPUSH
70600: CALL_OW 255
70604: NONEQUAL
70605: OR
70606: IFFALSE 70712
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70608: LD_VAR 0 5
70612: PUSH
70613: LD_INT 1
70615: ARRAY
70616: PPUSH
70617: CALL_OW 305
70621: PUSH
70622: LD_VAR 0 5
70626: PUSH
70627: LD_INT 1
70629: ARRAY
70630: PPUSH
70631: CALL_OW 255
70635: PUSH
70636: LD_VAR 0 1
70640: PPUSH
70641: CALL_OW 255
70645: EQUAL
70646: AND
70647: IFFALSE 70671
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70649: LD_VAR 0 5
70653: PUSH
70654: LD_INT 1
70656: ARRAY
70657: PPUSH
70658: LD_VAR 0 5
70662: PUSH
70663: LD_INT 2
70665: ARRAY
70666: PPUSH
70667: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70671: LD_ADDR_EXP 107
70675: PUSH
70676: LD_EXP 107
70680: PPUSH
70681: LD_VAR 0 4
70685: PPUSH
70686: LD_EXP 107
70690: PUSH
70691: LD_VAR 0 4
70695: ARRAY
70696: PPUSH
70697: LD_VAR 0 3
70701: PPUSH
70702: CALL_OW 3
70706: PPUSH
70707: CALL_OW 1
70711: ST_TO_ADDR
// end ; end ;
70712: GO 70541
70714: POP
70715: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70716: LD_VAR 0 1
70720: PPUSH
70721: LD_EXP 107
70725: PUSH
70726: LD_VAR 0 4
70730: ARRAY
70731: PUSH
70732: LD_INT 0
70734: PLUS
70735: PPUSH
70736: CALL_OW 505
// end ;
70740: LD_VAR 0 2
70744: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70745: LD_INT 0
70747: PPUSH
70748: PPUSH
70749: PPUSH
70750: PPUSH
// if not hack in hackTanks then
70751: LD_VAR 0 1
70755: PUSH
70756: LD_EXP 106
70760: IN
70761: NOT
70762: IFFALSE 70766
// exit ;
70764: GO 70851
// index := GetElementIndex ( hackTanks , hack ) ;
70766: LD_ADDR_VAR 0 5
70770: PUSH
70771: LD_EXP 106
70775: PPUSH
70776: LD_VAR 0 1
70780: PPUSH
70781: CALL 13631 0 2
70785: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70786: LD_ADDR_VAR 0 4
70790: PUSH
70791: DOUBLE
70792: LD_INT 1
70794: DEC
70795: ST_TO_ADDR
70796: LD_EXP 107
70800: PUSH
70801: LD_VAR 0 5
70805: ARRAY
70806: PUSH
70807: FOR_TO
70808: IFFALSE 70849
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70810: LD_EXP 107
70814: PUSH
70815: LD_VAR 0 5
70819: ARRAY
70820: PUSH
70821: LD_VAR 0 4
70825: ARRAY
70826: PUSH
70827: LD_INT 1
70829: ARRAY
70830: PUSH
70831: LD_VAR 0 2
70835: EQUAL
70836: IFFALSE 70847
// KillUnit ( vehicle ) ;
70838: LD_VAR 0 2
70842: PPUSH
70843: CALL_OW 66
70847: GO 70807
70849: POP
70850: POP
// end ;
70851: LD_VAR 0 3
70855: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70856: LD_EXP 111
70860: NOT
70861: IFFALSE 70896
70863: GO 70865
70865: DISABLE
// begin initMiner := true ;
70866: LD_ADDR_EXP 111
70870: PUSH
70871: LD_INT 1
70873: ST_TO_ADDR
// minersList := [ ] ;
70874: LD_ADDR_EXP 112
70878: PUSH
70879: EMPTY
70880: ST_TO_ADDR
// minerMinesList := [ ] ;
70881: LD_ADDR_EXP 113
70885: PUSH
70886: EMPTY
70887: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70888: LD_ADDR_EXP 114
70892: PUSH
70893: LD_INT 5
70895: ST_TO_ADDR
// end ;
70896: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70897: LD_EXP 111
70901: PUSH
70902: LD_INT 34
70904: PUSH
70905: LD_INT 81
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PPUSH
70912: CALL_OW 69
70916: AND
70917: IFFALSE 71378
70919: GO 70921
70921: DISABLE
70922: LD_INT 0
70924: PPUSH
70925: PPUSH
70926: PPUSH
70927: PPUSH
// begin enable ;
70928: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70929: LD_ADDR_VAR 0 1
70933: PUSH
70934: LD_INT 34
70936: PUSH
70937: LD_INT 81
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PPUSH
70944: CALL_OW 69
70948: PUSH
70949: FOR_IN
70950: IFFALSE 71022
// begin if not i in minersList then
70952: LD_VAR 0 1
70956: PUSH
70957: LD_EXP 112
70961: IN
70962: NOT
70963: IFFALSE 71020
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70965: LD_ADDR_EXP 112
70969: PUSH
70970: LD_EXP 112
70974: PPUSH
70975: LD_EXP 112
70979: PUSH
70980: LD_INT 1
70982: PLUS
70983: PPUSH
70984: LD_VAR 0 1
70988: PPUSH
70989: CALL_OW 1
70993: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70994: LD_ADDR_EXP 113
70998: PUSH
70999: LD_EXP 113
71003: PPUSH
71004: LD_EXP 113
71008: PUSH
71009: LD_INT 1
71011: PLUS
71012: PPUSH
71013: EMPTY
71014: PPUSH
71015: CALL_OW 1
71019: ST_TO_ADDR
// end end ;
71020: GO 70949
71022: POP
71023: POP
// for i := minerMinesList downto 1 do
71024: LD_ADDR_VAR 0 1
71028: PUSH
71029: DOUBLE
71030: LD_EXP 113
71034: INC
71035: ST_TO_ADDR
71036: LD_INT 1
71038: PUSH
71039: FOR_DOWNTO
71040: IFFALSE 71376
// begin if IsLive ( minersList [ i ] ) then
71042: LD_EXP 112
71046: PUSH
71047: LD_VAR 0 1
71051: ARRAY
71052: PPUSH
71053: CALL_OW 300
71057: IFFALSE 71085
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
71059: LD_EXP 112
71063: PUSH
71064: LD_VAR 0 1
71068: ARRAY
71069: PPUSH
71070: LD_EXP 113
71074: PUSH
71075: LD_VAR 0 1
71079: ARRAY
71080: PPUSH
71081: CALL_OW 505
// if not minerMinesList [ i ] then
71085: LD_EXP 113
71089: PUSH
71090: LD_VAR 0 1
71094: ARRAY
71095: NOT
71096: IFFALSE 71100
// continue ;
71098: GO 71039
// for j := minerMinesList [ i ] downto 1 do
71100: LD_ADDR_VAR 0 2
71104: PUSH
71105: DOUBLE
71106: LD_EXP 113
71110: PUSH
71111: LD_VAR 0 1
71115: ARRAY
71116: INC
71117: ST_TO_ADDR
71118: LD_INT 1
71120: PUSH
71121: FOR_DOWNTO
71122: IFFALSE 71372
// begin side := GetSide ( minersList [ i ] ) ;
71124: LD_ADDR_VAR 0 3
71128: PUSH
71129: LD_EXP 112
71133: PUSH
71134: LD_VAR 0 1
71138: ARRAY
71139: PPUSH
71140: CALL_OW 255
71144: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
71145: LD_ADDR_VAR 0 4
71149: PUSH
71150: LD_EXP 113
71154: PUSH
71155: LD_VAR 0 1
71159: ARRAY
71160: PUSH
71161: LD_VAR 0 2
71165: ARRAY
71166: PUSH
71167: LD_INT 1
71169: ARRAY
71170: PPUSH
71171: LD_EXP 113
71175: PUSH
71176: LD_VAR 0 1
71180: ARRAY
71181: PUSH
71182: LD_VAR 0 2
71186: ARRAY
71187: PUSH
71188: LD_INT 2
71190: ARRAY
71191: PPUSH
71192: CALL_OW 428
71196: ST_TO_ADDR
// if not tmp then
71197: LD_VAR 0 4
71201: NOT
71202: IFFALSE 71206
// continue ;
71204: GO 71121
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
71206: LD_VAR 0 4
71210: PUSH
71211: LD_INT 81
71213: PUSH
71214: LD_VAR 0 3
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PPUSH
71223: CALL_OW 69
71227: IN
71228: PUSH
71229: LD_EXP 113
71233: PUSH
71234: LD_VAR 0 1
71238: ARRAY
71239: PUSH
71240: LD_VAR 0 2
71244: ARRAY
71245: PUSH
71246: LD_INT 1
71248: ARRAY
71249: PPUSH
71250: LD_EXP 113
71254: PUSH
71255: LD_VAR 0 1
71259: ARRAY
71260: PUSH
71261: LD_VAR 0 2
71265: ARRAY
71266: PUSH
71267: LD_INT 2
71269: ARRAY
71270: PPUSH
71271: CALL_OW 458
71275: AND
71276: IFFALSE 71370
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
71278: LD_EXP 113
71282: PUSH
71283: LD_VAR 0 1
71287: ARRAY
71288: PUSH
71289: LD_VAR 0 2
71293: ARRAY
71294: PUSH
71295: LD_INT 1
71297: ARRAY
71298: PPUSH
71299: LD_EXP 113
71303: PUSH
71304: LD_VAR 0 1
71308: ARRAY
71309: PUSH
71310: LD_VAR 0 2
71314: ARRAY
71315: PUSH
71316: LD_INT 2
71318: ARRAY
71319: PPUSH
71320: LD_VAR 0 3
71324: PPUSH
71325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
71329: LD_ADDR_EXP 113
71333: PUSH
71334: LD_EXP 113
71338: PPUSH
71339: LD_VAR 0 1
71343: PPUSH
71344: LD_EXP 113
71348: PUSH
71349: LD_VAR 0 1
71353: ARRAY
71354: PPUSH
71355: LD_VAR 0 2
71359: PPUSH
71360: CALL_OW 3
71364: PPUSH
71365: CALL_OW 1
71369: ST_TO_ADDR
// end ; end ;
71370: GO 71121
71372: POP
71373: POP
// end ;
71374: GO 71039
71376: POP
71377: POP
// end ;
71378: PPOPN 4
71380: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
71381: LD_INT 0
71383: PPUSH
71384: PPUSH
// result := false ;
71385: LD_ADDR_VAR 0 4
71389: PUSH
71390: LD_INT 0
71392: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
71393: LD_VAR 0 1
71397: PPUSH
71398: CALL_OW 264
71402: PUSH
71403: LD_INT 81
71405: EQUAL
71406: NOT
71407: IFFALSE 71411
// exit ;
71409: GO 71651
// index := GetElementIndex ( minersList , unit ) ;
71411: LD_ADDR_VAR 0 5
71415: PUSH
71416: LD_EXP 112
71420: PPUSH
71421: LD_VAR 0 1
71425: PPUSH
71426: CALL 13631 0 2
71430: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
71431: LD_EXP 113
71435: PUSH
71436: LD_VAR 0 5
71440: ARRAY
71441: PUSH
71442: LD_EXP 114
71446: GREATEREQUAL
71447: IFFALSE 71451
// exit ;
71449: GO 71651
// ComMoveXY ( unit , x , y ) ;
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_VAR 0 2
71460: PPUSH
71461: LD_VAR 0 3
71465: PPUSH
71466: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71470: LD_INT 35
71472: PPUSH
71473: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 2
71486: PPUSH
71487: LD_VAR 0 3
71491: PPUSH
71492: CALL 45372 0 3
71496: NOT
71497: PUSH
71498: LD_VAR 0 1
71502: PPUSH
71503: CALL_OW 314
71507: AND
71508: IFFALSE 71512
// exit ;
71510: GO 71651
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
71512: LD_VAR 0 2
71516: PPUSH
71517: LD_VAR 0 3
71521: PPUSH
71522: CALL_OW 428
71526: PUSH
71527: LD_VAR 0 1
71531: EQUAL
71532: PUSH
71533: LD_VAR 0 1
71537: PPUSH
71538: CALL_OW 314
71542: NOT
71543: AND
71544: IFFALSE 71470
// PlaySoundXY ( x , y , PlantMine ) ;
71546: LD_VAR 0 2
71550: PPUSH
71551: LD_VAR 0 3
71555: PPUSH
71556: LD_STRING PlantMine
71558: PPUSH
71559: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
71563: LD_VAR 0 2
71567: PPUSH
71568: LD_VAR 0 3
71572: PPUSH
71573: LD_VAR 0 1
71577: PPUSH
71578: CALL_OW 255
71582: PPUSH
71583: LD_INT 0
71585: PPUSH
71586: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71590: LD_ADDR_EXP 113
71594: PUSH
71595: LD_EXP 113
71599: PPUSH
71600: LD_VAR 0 5
71604: PUSH
71605: LD_EXP 113
71609: PUSH
71610: LD_VAR 0 5
71614: ARRAY
71615: PUSH
71616: LD_INT 1
71618: PLUS
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PPUSH
71624: LD_VAR 0 2
71628: PUSH
71629: LD_VAR 0 3
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PPUSH
71638: CALL 13846 0 3
71642: ST_TO_ADDR
// result := true ;
71643: LD_ADDR_VAR 0 4
71647: PUSH
71648: LD_INT 1
71650: ST_TO_ADDR
// end ;
71651: LD_VAR 0 4
71655: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71656: LD_INT 0
71658: PPUSH
71659: PPUSH
71660: PPUSH
// if not unit in minersList then
71661: LD_VAR 0 1
71665: PUSH
71666: LD_EXP 112
71670: IN
71671: NOT
71672: IFFALSE 71676
// exit ;
71674: GO 72068
// index := GetElementIndex ( minersList , unit ) ;
71676: LD_ADDR_VAR 0 6
71680: PUSH
71681: LD_EXP 112
71685: PPUSH
71686: LD_VAR 0 1
71690: PPUSH
71691: CALL 13631 0 2
71695: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71696: LD_ADDR_VAR 0 5
71700: PUSH
71701: DOUBLE
71702: LD_EXP 113
71706: PUSH
71707: LD_VAR 0 6
71711: ARRAY
71712: INC
71713: ST_TO_ADDR
71714: LD_INT 1
71716: PUSH
71717: FOR_DOWNTO
71718: IFFALSE 71879
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71720: LD_EXP 113
71724: PUSH
71725: LD_VAR 0 6
71729: ARRAY
71730: PUSH
71731: LD_VAR 0 5
71735: ARRAY
71736: PUSH
71737: LD_INT 1
71739: ARRAY
71740: PUSH
71741: LD_VAR 0 2
71745: EQUAL
71746: PUSH
71747: LD_EXP 113
71751: PUSH
71752: LD_VAR 0 6
71756: ARRAY
71757: PUSH
71758: LD_VAR 0 5
71762: ARRAY
71763: PUSH
71764: LD_INT 2
71766: ARRAY
71767: PUSH
71768: LD_VAR 0 3
71772: EQUAL
71773: AND
71774: IFFALSE 71877
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71776: LD_EXP 113
71780: PUSH
71781: LD_VAR 0 6
71785: ARRAY
71786: PUSH
71787: LD_VAR 0 5
71791: ARRAY
71792: PUSH
71793: LD_INT 1
71795: ARRAY
71796: PPUSH
71797: LD_EXP 113
71801: PUSH
71802: LD_VAR 0 6
71806: ARRAY
71807: PUSH
71808: LD_VAR 0 5
71812: ARRAY
71813: PUSH
71814: LD_INT 2
71816: ARRAY
71817: PPUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 255
71827: PPUSH
71828: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71832: LD_ADDR_EXP 113
71836: PUSH
71837: LD_EXP 113
71841: PPUSH
71842: LD_VAR 0 6
71846: PPUSH
71847: LD_EXP 113
71851: PUSH
71852: LD_VAR 0 6
71856: ARRAY
71857: PPUSH
71858: LD_VAR 0 5
71862: PPUSH
71863: CALL_OW 3
71867: PPUSH
71868: CALL_OW 1
71872: ST_TO_ADDR
// exit ;
71873: POP
71874: POP
71875: GO 72068
// end ; end ;
71877: GO 71717
71879: POP
71880: POP
// for i := minerMinesList [ index ] downto 1 do
71881: LD_ADDR_VAR 0 5
71885: PUSH
71886: DOUBLE
71887: LD_EXP 113
71891: PUSH
71892: LD_VAR 0 6
71896: ARRAY
71897: INC
71898: ST_TO_ADDR
71899: LD_INT 1
71901: PUSH
71902: FOR_DOWNTO
71903: IFFALSE 72066
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71905: LD_EXP 113
71909: PUSH
71910: LD_VAR 0 6
71914: ARRAY
71915: PUSH
71916: LD_VAR 0 5
71920: ARRAY
71921: PUSH
71922: LD_INT 1
71924: ARRAY
71925: PPUSH
71926: LD_EXP 113
71930: PUSH
71931: LD_VAR 0 6
71935: ARRAY
71936: PUSH
71937: LD_VAR 0 5
71941: ARRAY
71942: PUSH
71943: LD_INT 2
71945: ARRAY
71946: PPUSH
71947: LD_VAR 0 2
71951: PPUSH
71952: LD_VAR 0 3
71956: PPUSH
71957: CALL_OW 298
71961: PUSH
71962: LD_INT 6
71964: LESS
71965: IFFALSE 72064
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71967: LD_EXP 113
71971: PUSH
71972: LD_VAR 0 6
71976: ARRAY
71977: PUSH
71978: LD_VAR 0 5
71982: ARRAY
71983: PUSH
71984: LD_INT 1
71986: ARRAY
71987: PPUSH
71988: LD_EXP 113
71992: PUSH
71993: LD_VAR 0 6
71997: ARRAY
71998: PUSH
71999: LD_VAR 0 5
72003: ARRAY
72004: PUSH
72005: LD_INT 2
72007: ARRAY
72008: PPUSH
72009: LD_VAR 0 1
72013: PPUSH
72014: CALL_OW 255
72018: PPUSH
72019: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
72023: LD_ADDR_EXP 113
72027: PUSH
72028: LD_EXP 113
72032: PPUSH
72033: LD_VAR 0 6
72037: PPUSH
72038: LD_EXP 113
72042: PUSH
72043: LD_VAR 0 6
72047: ARRAY
72048: PPUSH
72049: LD_VAR 0 5
72053: PPUSH
72054: CALL_OW 3
72058: PPUSH
72059: CALL_OW 1
72063: ST_TO_ADDR
// end ; end ;
72064: GO 71902
72066: POP
72067: POP
// end ;
72068: LD_VAR 0 4
72072: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
72073: LD_INT 0
72075: PPUSH
72076: PPUSH
72077: PPUSH
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
72082: PPUSH
72083: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
72084: LD_VAR 0 1
72088: PPUSH
72089: CALL_OW 264
72093: PUSH
72094: LD_INT 81
72096: EQUAL
72097: NOT
72098: PUSH
72099: LD_VAR 0 1
72103: PUSH
72104: LD_EXP 112
72108: IN
72109: NOT
72110: OR
72111: IFFALSE 72115
// exit ;
72113: GO 72437
// index := GetElementIndex ( minersList , unit ) ;
72115: LD_ADDR_VAR 0 6
72119: PUSH
72120: LD_EXP 112
72124: PPUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: CALL 13631 0 2
72134: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
72135: LD_ADDR_VAR 0 8
72139: PUSH
72140: LD_EXP 114
72144: PUSH
72145: LD_EXP 113
72149: PUSH
72150: LD_VAR 0 6
72154: ARRAY
72155: MINUS
72156: ST_TO_ADDR
// if not minesFreeAmount then
72157: LD_VAR 0 8
72161: NOT
72162: IFFALSE 72166
// exit ;
72164: GO 72437
// tmp := [ ] ;
72166: LD_ADDR_VAR 0 7
72170: PUSH
72171: EMPTY
72172: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
72173: LD_ADDR_VAR 0 5
72177: PUSH
72178: DOUBLE
72179: LD_INT 1
72181: DEC
72182: ST_TO_ADDR
72183: LD_VAR 0 8
72187: PUSH
72188: FOR_TO
72189: IFFALSE 72384
// begin _d := rand ( 0 , 5 ) ;
72191: LD_ADDR_VAR 0 11
72195: PUSH
72196: LD_INT 0
72198: PPUSH
72199: LD_INT 5
72201: PPUSH
72202: CALL_OW 12
72206: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
72207: LD_ADDR_VAR 0 12
72211: PUSH
72212: LD_INT 2
72214: PPUSH
72215: LD_INT 6
72217: PPUSH
72218: CALL_OW 12
72222: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
72223: LD_ADDR_VAR 0 9
72227: PUSH
72228: LD_VAR 0 2
72232: PPUSH
72233: LD_VAR 0 11
72237: PPUSH
72238: LD_VAR 0 12
72242: PPUSH
72243: CALL_OW 272
72247: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
72248: LD_ADDR_VAR 0 10
72252: PUSH
72253: LD_VAR 0 3
72257: PPUSH
72258: LD_VAR 0 11
72262: PPUSH
72263: LD_VAR 0 12
72267: PPUSH
72268: CALL_OW 273
72272: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
72273: LD_VAR 0 9
72277: PPUSH
72278: LD_VAR 0 10
72282: PPUSH
72283: CALL_OW 488
72287: PUSH
72288: LD_VAR 0 9
72292: PUSH
72293: LD_VAR 0 10
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_VAR 0 7
72306: IN
72307: NOT
72308: AND
72309: PUSH
72310: LD_VAR 0 9
72314: PPUSH
72315: LD_VAR 0 10
72319: PPUSH
72320: CALL_OW 458
72324: NOT
72325: AND
72326: IFFALSE 72368
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
72328: LD_ADDR_VAR 0 7
72332: PUSH
72333: LD_VAR 0 7
72337: PPUSH
72338: LD_VAR 0 7
72342: PUSH
72343: LD_INT 1
72345: PLUS
72346: PPUSH
72347: LD_VAR 0 9
72351: PUSH
72352: LD_VAR 0 10
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PPUSH
72361: CALL_OW 1
72365: ST_TO_ADDR
72366: GO 72382
// i := i - 1 ;
72368: LD_ADDR_VAR 0 5
72372: PUSH
72373: LD_VAR 0 5
72377: PUSH
72378: LD_INT 1
72380: MINUS
72381: ST_TO_ADDR
// end ;
72382: GO 72188
72384: POP
72385: POP
// for i in tmp do
72386: LD_ADDR_VAR 0 5
72390: PUSH
72391: LD_VAR 0 7
72395: PUSH
72396: FOR_IN
72397: IFFALSE 72435
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
72399: LD_VAR 0 1
72403: PPUSH
72404: LD_VAR 0 5
72408: PUSH
72409: LD_INT 1
72411: ARRAY
72412: PPUSH
72413: LD_VAR 0 5
72417: PUSH
72418: LD_INT 2
72420: ARRAY
72421: PPUSH
72422: CALL 71381 0 3
72426: NOT
72427: IFFALSE 72433
// exit ;
72429: POP
72430: POP
72431: GO 72437
72433: GO 72396
72435: POP
72436: POP
// end ;
72437: LD_VAR 0 4
72441: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
72442: LD_INT 0
72444: PPUSH
72445: PPUSH
72446: PPUSH
72447: PPUSH
72448: PPUSH
72449: PPUSH
72450: PPUSH
72451: PPUSH
72452: PPUSH
// if GetClass ( unit ) <> class_sniper then
72453: LD_VAR 0 1
72457: PPUSH
72458: CALL_OW 257
72462: PUSH
72463: LD_INT 5
72465: NONEQUAL
72466: IFFALSE 72470
// exit ;
72468: GO 72936
// dist := 8 ;
72470: LD_ADDR_VAR 0 5
72474: PUSH
72475: LD_INT 8
72477: ST_TO_ADDR
// viewRange := 12 ;
72478: LD_ADDR_VAR 0 8
72482: PUSH
72483: LD_INT 12
72485: ST_TO_ADDR
// side := GetSide ( unit ) ;
72486: LD_ADDR_VAR 0 6
72490: PUSH
72491: LD_VAR 0 1
72495: PPUSH
72496: CALL_OW 255
72500: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
72501: LD_INT 61
72503: PPUSH
72504: LD_VAR 0 6
72508: PPUSH
72509: CALL_OW 321
72513: PUSH
72514: LD_INT 2
72516: EQUAL
72517: IFFALSE 72527
// viewRange := 16 ;
72519: LD_ADDR_VAR 0 8
72523: PUSH
72524: LD_INT 16
72526: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
72527: LD_VAR 0 1
72531: PPUSH
72532: LD_VAR 0 2
72536: PPUSH
72537: LD_VAR 0 3
72541: PPUSH
72542: CALL_OW 297
72546: PUSH
72547: LD_VAR 0 5
72551: GREATER
72552: IFFALSE 72631
// begin ComMoveXY ( unit , x , y ) ;
72554: LD_VAR 0 1
72558: PPUSH
72559: LD_VAR 0 2
72563: PPUSH
72564: LD_VAR 0 3
72568: PPUSH
72569: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
72573: LD_INT 35
72575: PPUSH
72576: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
72580: LD_VAR 0 1
72584: PPUSH
72585: LD_VAR 0 2
72589: PPUSH
72590: LD_VAR 0 3
72594: PPUSH
72595: CALL 45372 0 3
72599: NOT
72600: IFFALSE 72604
// exit ;
72602: GO 72936
// until GetDistUnitXY ( unit , x , y ) < dist ;
72604: LD_VAR 0 1
72608: PPUSH
72609: LD_VAR 0 2
72613: PPUSH
72614: LD_VAR 0 3
72618: PPUSH
72619: CALL_OW 297
72623: PUSH
72624: LD_VAR 0 5
72628: LESS
72629: IFFALSE 72573
// end ; ComTurnXY ( unit , x , y ) ;
72631: LD_VAR 0 1
72635: PPUSH
72636: LD_VAR 0 2
72640: PPUSH
72641: LD_VAR 0 3
72645: PPUSH
72646: CALL_OW 118
// repeat if Multiplayer then
72650: LD_OWVAR 4
72654: IFFALSE 72665
// wait ( 35 ) else
72656: LD_INT 35
72658: PPUSH
72659: CALL_OW 67
72663: GO 72672
// wait ( 5 ) ;
72665: LD_INT 5
72667: PPUSH
72668: CALL_OW 67
// _d := GetDir ( unit ) ;
72672: LD_ADDR_VAR 0 11
72676: PUSH
72677: LD_VAR 0 1
72681: PPUSH
72682: CALL_OW 254
72686: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
72687: LD_ADDR_VAR 0 7
72691: PUSH
72692: LD_VAR 0 1
72696: PPUSH
72697: CALL_OW 250
72701: PPUSH
72702: LD_VAR 0 1
72706: PPUSH
72707: CALL_OW 251
72711: PPUSH
72712: LD_VAR 0 2
72716: PPUSH
72717: LD_VAR 0 3
72721: PPUSH
72722: CALL 47980 0 4
72726: ST_TO_ADDR
// until dir = _d ;
72727: LD_VAR 0 7
72731: PUSH
72732: LD_VAR 0 11
72736: EQUAL
72737: IFFALSE 72650
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
72739: LD_ADDR_VAR 0 9
72743: PUSH
72744: LD_VAR 0 1
72748: PPUSH
72749: CALL_OW 250
72753: PPUSH
72754: LD_VAR 0 7
72758: PPUSH
72759: LD_VAR 0 5
72763: PPUSH
72764: CALL_OW 272
72768: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
72769: LD_ADDR_VAR 0 10
72773: PUSH
72774: LD_VAR 0 1
72778: PPUSH
72779: CALL_OW 251
72783: PPUSH
72784: LD_VAR 0 7
72788: PPUSH
72789: LD_VAR 0 5
72793: PPUSH
72794: CALL_OW 273
72798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72799: LD_VAR 0 9
72803: PPUSH
72804: LD_VAR 0 10
72808: PPUSH
72809: CALL_OW 488
72813: NOT
72814: IFFALSE 72818
// exit ;
72816: GO 72936
// ComAnimCustom ( unit , 1 ) ;
72818: LD_VAR 0 1
72822: PPUSH
72823: LD_INT 1
72825: PPUSH
72826: CALL_OW 592
// p := 0 ;
72830: LD_ADDR_VAR 0 12
72834: PUSH
72835: LD_INT 0
72837: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72838: LD_VAR 0 9
72842: PPUSH
72843: LD_VAR 0 10
72847: PPUSH
72848: LD_VAR 0 6
72852: PPUSH
72853: LD_VAR 0 8
72857: PPUSH
72858: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
72862: LD_INT 35
72864: PPUSH
72865: CALL_OW 67
// p := Inc ( p ) ;
72869: LD_ADDR_VAR 0 12
72873: PUSH
72874: LD_VAR 0 12
72878: PPUSH
72879: CALL 47936 0 1
72883: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
72884: LD_VAR 0 12
72888: PUSH
72889: LD_INT 3
72891: EQUAL
72892: PUSH
72893: LD_VAR 0 1
72897: PPUSH
72898: CALL_OW 302
72902: NOT
72903: OR
72904: PUSH
72905: LD_VAR 0 1
72909: PPUSH
72910: CALL_OW 301
72914: OR
72915: IFFALSE 72862
// RemoveSeeing ( _x , _y , side ) ;
72917: LD_VAR 0 9
72921: PPUSH
72922: LD_VAR 0 10
72926: PPUSH
72927: LD_VAR 0 6
72931: PPUSH
72932: CALL_OW 331
// end ; end_of_file
72936: LD_VAR 0 4
72940: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
72941: LD_EXP 38
72945: IFFALSE 73286
72947: GO 72949
72949: DISABLE
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
72954: PPUSH
// begin mpKingPoints := [ ] ;
72955: LD_ADDR_EXP 115
72959: PUSH
72960: EMPTY
72961: ST_TO_ADDR
// if mpTeamGame then
72962: LD_EXP 11
72966: IFFALSE 73020
// begin for i := 1 to Count ( mpTeams ) do
72968: LD_ADDR_VAR 0 1
72972: PUSH
72973: DOUBLE
72974: LD_INT 1
72976: DEC
72977: ST_TO_ADDR
72978: LD_EXP 10
72982: PPUSH
72983: CALL 10986 0 1
72987: PUSH
72988: FOR_TO
72989: IFFALSE 73016
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
72991: LD_ADDR_EXP 115
72995: PUSH
72996: LD_EXP 115
73000: PPUSH
73001: LD_VAR 0 1
73005: PPUSH
73006: LD_INT 0
73008: PPUSH
73009: CALL_OW 1
73013: ST_TO_ADDR
73014: GO 72988
73016: POP
73017: POP
// end else
73018: GO 73063
// begin for i := 1 to 8 do
73020: LD_ADDR_VAR 0 1
73024: PUSH
73025: DOUBLE
73026: LD_INT 1
73028: DEC
73029: ST_TO_ADDR
73030: LD_INT 8
73032: PUSH
73033: FOR_TO
73034: IFFALSE 73061
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
73036: LD_ADDR_EXP 115
73040: PUSH
73041: LD_EXP 115
73045: PPUSH
73046: LD_VAR 0 1
73050: PPUSH
73051: LD_INT 0
73053: PPUSH
73054: CALL_OW 1
73058: ST_TO_ADDR
73059: GO 73033
73061: POP
73062: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
73063: LD_ADDR_VAR 0 3
73067: PUSH
73068: LD_EXP 2
73072: PPUSH
73073: LD_INT 0
73075: PPUSH
73076: CALL_OW 517
73080: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73081: LD_ADDR_VAR 0 1
73085: PUSH
73086: DOUBLE
73087: LD_INT 1
73089: DEC
73090: ST_TO_ADDR
73091: LD_VAR 0 3
73095: PUSH
73096: LD_INT 1
73098: ARRAY
73099: PUSH
73100: FOR_TO
73101: IFFALSE 73168
// for j := 1 to 8 do
73103: LD_ADDR_VAR 0 2
73107: PUSH
73108: DOUBLE
73109: LD_INT 1
73111: DEC
73112: ST_TO_ADDR
73113: LD_INT 8
73115: PUSH
73116: FOR_TO
73117: IFFALSE 73164
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
73119: LD_VAR 0 3
73123: PUSH
73124: LD_INT 1
73126: ARRAY
73127: PUSH
73128: LD_VAR 0 1
73132: ARRAY
73133: PPUSH
73134: LD_VAR 0 3
73138: PUSH
73139: LD_INT 2
73141: ARRAY
73142: PUSH
73143: LD_VAR 0 1
73147: ARRAY
73148: PPUSH
73149: LD_VAR 0 2
73153: PPUSH
73154: LD_INT 12
73156: NEG
73157: PPUSH
73158: CALL_OW 330
73162: GO 73116
73164: POP
73165: POP
73166: GO 73100
73168: POP
73169: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
73170: LD_EXP 33
73174: PPUSH
73175: LD_INT 1
73177: PPUSH
73178: CALL_OW 424
// UpdateCounter ;
73182: CALL 73790 0 0
// repeat wait ( 0 0$1 ) ;
73186: LD_INT 35
73188: PPUSH
73189: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73193: LD_ADDR_VAR 0 3
73197: PUSH
73198: LD_EXP 33
73202: PPUSH
73203: LD_INT 3
73205: PUSH
73206: LD_INT 57
73208: PUSH
73209: EMPTY
73210: LIST
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 50
73218: PUSH
73219: EMPTY
73220: LIST
73221: PUSH
73222: LD_INT 2
73224: PUSH
73225: LD_INT 30
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 30
73237: PUSH
73238: LD_INT 1
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: LIST
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: PPUSH
73255: CALL_OW 70
73259: ST_TO_ADDR
// if not tmp then
73260: LD_VAR 0 3
73264: NOT
73265: IFFALSE 73269
// continue ;
73267: GO 73186
// AddPoints ( tmp ) ;
73269: LD_VAR 0 3
73273: PPUSH
73274: CALL 73468 0 1
// UpdateCounter ;
73278: CALL 73790 0 0
// until false ;
73282: LD_INT 0
73284: IFFALSE 73186
// end ;
73286: PPOPN 3
73288: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
73289: LD_EXP 38
73293: PUSH
73294: LD_EXP 36
73298: AND
73299: IFFALSE 73465
73301: GO 73303
73303: DISABLE
73304: LD_INT 0
73306: PPUSH
73307: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
73308: LD_ADDR_VAR 0 2
73312: PUSH
73313: LD_EXP 2
73317: PPUSH
73318: LD_INT 0
73320: PPUSH
73321: CALL_OW 517
73325: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73326: LD_ADDR_VAR 0 1
73330: PUSH
73331: DOUBLE
73332: LD_INT 1
73334: DEC
73335: ST_TO_ADDR
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 1
73343: ARRAY
73344: PUSH
73345: FOR_TO
73346: IFFALSE 73387
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
73348: LD_VAR 0 2
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PUSH
73357: LD_VAR 0 1
73361: ARRAY
73362: PPUSH
73363: LD_VAR 0 2
73367: PUSH
73368: LD_INT 2
73370: ARRAY
73371: PUSH
73372: LD_VAR 0 1
73376: ARRAY
73377: PPUSH
73378: LD_INT 125
73380: PPUSH
73381: CALL_OW 495
73385: GO 73345
73387: POP
73388: POP
// repeat wait ( mpEmissions ) ;
73389: LD_EXP 36
73393: PPUSH
73394: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
73398: LD_ADDR_VAR 0 1
73402: PUSH
73403: DOUBLE
73404: LD_INT 1
73406: DEC
73407: ST_TO_ADDR
73408: LD_VAR 0 2
73412: PUSH
73413: LD_INT 1
73415: ARRAY
73416: PUSH
73417: FOR_TO
73418: IFFALSE 73459
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
73420: LD_VAR 0 2
73424: PUSH
73425: LD_INT 1
73427: ARRAY
73428: PUSH
73429: LD_VAR 0 1
73433: ARRAY
73434: PPUSH
73435: LD_VAR 0 2
73439: PUSH
73440: LD_INT 2
73442: ARRAY
73443: PUSH
73444: LD_VAR 0 1
73448: ARRAY
73449: PPUSH
73450: LD_INT 15
73452: PPUSH
73453: CALL_OW 495
73457: GO 73417
73459: POP
73460: POP
// until false ;
73461: LD_INT 0
73463: IFFALSE 73389
// end ;
73465: PPOPN 2
73467: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
73468: LD_INT 0
73470: PPUSH
73471: PPUSH
73472: PPUSH
73473: PPUSH
73474: PPUSH
// if mpTeamGame then
73475: LD_EXP 11
73479: IFFALSE 73676
// begin first := depots [ 1 ] ;
73481: LD_ADDR_VAR 0 4
73485: PUSH
73486: LD_VAR 0 1
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: ST_TO_ADDR
// side := GetSide ( first ) ;
73495: LD_ADDR_VAR 0 6
73499: PUSH
73500: LD_VAR 0 4
73504: PPUSH
73505: CALL_OW 255
73509: ST_TO_ADDR
// for i := 1 to mpTeams do
73510: LD_ADDR_VAR 0 3
73514: PUSH
73515: DOUBLE
73516: LD_INT 1
73518: DEC
73519: ST_TO_ADDR
73520: LD_EXP 10
73524: PUSH
73525: FOR_TO
73526: IFFALSE 73560
// if side in mpTeams [ i ] then
73528: LD_VAR 0 6
73532: PUSH
73533: LD_EXP 10
73537: PUSH
73538: LD_VAR 0 3
73542: ARRAY
73543: IN
73544: IFFALSE 73558
// begin team := i ;
73546: LD_ADDR_VAR 0 5
73550: PUSH
73551: LD_VAR 0 3
73555: ST_TO_ADDR
// break ;
73556: GO 73560
// end ;
73558: GO 73525
73560: POP
73561: POP
// if not team then
73562: LD_VAR 0 5
73566: NOT
73567: IFFALSE 73571
// exit ;
73569: GO 73785
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73571: LD_EXP 33
73575: PPUSH
73576: LD_INT 81
73578: PUSH
73579: LD_VAR 0 6
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PPUSH
73588: CALL_OW 70
73592: IFFALSE 73596
// exit ;
73594: GO 73785
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
73596: LD_ADDR_EXP 115
73600: PUSH
73601: LD_EXP 115
73605: PPUSH
73606: LD_VAR 0 5
73610: PPUSH
73611: LD_EXP 115
73615: PUSH
73616: LD_VAR 0 5
73620: ARRAY
73621: PUSH
73622: LD_INT 1
73624: PLUS
73625: PPUSH
73626: CALL_OW 1
73630: ST_TO_ADDR
// for i in mpTeams [ team ] do
73631: LD_ADDR_VAR 0 3
73635: PUSH
73636: LD_EXP 10
73640: PUSH
73641: LD_VAR 0 5
73645: ARRAY
73646: PUSH
73647: FOR_IN
73648: IFFALSE 73672
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
73650: LD_VAR 0 3
73654: PPUSH
73655: LD_EXP 115
73659: PUSH
73660: LD_VAR 0 5
73664: ARRAY
73665: PPUSH
73666: CALL_OW 506
73670: GO 73647
73672: POP
73673: POP
// end else
73674: GO 73785
// begin first := depots [ 1 ] ;
73676: LD_ADDR_VAR 0 4
73680: PUSH
73681: LD_VAR 0 1
73685: PUSH
73686: LD_INT 1
73688: ARRAY
73689: ST_TO_ADDR
// side := GetSide ( first ) ;
73690: LD_ADDR_VAR 0 6
73694: PUSH
73695: LD_VAR 0 4
73699: PPUSH
73700: CALL_OW 255
73704: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
73705: LD_EXP 33
73709: PPUSH
73710: LD_INT 81
73712: PUSH
73713: LD_VAR 0 6
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PPUSH
73722: CALL_OW 70
73726: IFFALSE 73730
// exit ;
73728: GO 73785
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
73730: LD_ADDR_EXP 115
73734: PUSH
73735: LD_EXP 115
73739: PPUSH
73740: LD_VAR 0 6
73744: PPUSH
73745: LD_EXP 115
73749: PUSH
73750: LD_VAR 0 6
73754: ARRAY
73755: PUSH
73756: LD_INT 1
73758: PLUS
73759: PPUSH
73760: CALL_OW 1
73764: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
73765: LD_VAR 0 6
73769: PPUSH
73770: LD_EXP 115
73774: PUSH
73775: LD_VAR 0 6
73779: ARRAY
73780: PPUSH
73781: CALL_OW 506
// end ; end ;
73785: LD_VAR 0 2
73789: RET
// function UpdateCounter ; var i ; begin
73790: LD_INT 0
73792: PPUSH
73793: PPUSH
// result := [ ] ;
73794: LD_ADDR_VAR 0 1
73798: PUSH
73799: EMPTY
73800: ST_TO_ADDR
// if mpTeamGame then
73801: LD_EXP 11
73805: IFFALSE 73872
// begin for i := 1 to mpTeams do
73807: LD_ADDR_VAR 0 2
73811: PUSH
73812: DOUBLE
73813: LD_INT 1
73815: DEC
73816: ST_TO_ADDR
73817: LD_EXP 10
73821: PUSH
73822: FOR_TO
73823: IFFALSE 73868
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
73825: LD_ADDR_VAR 0 1
73829: PUSH
73830: LD_VAR 0 1
73834: PUSH
73835: LD_STRING #KingoftheHill-Team
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_EXP 115
73847: PUSH
73848: LD_VAR 0 2
73852: ARRAY
73853: PUSH
73854: LD_EXP 34
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: ADD
73865: ST_TO_ADDR
73866: GO 73822
73868: POP
73869: POP
// end else
73870: GO 73945
// begin for i := 1 to 8 do
73872: LD_ADDR_VAR 0 2
73876: PUSH
73877: DOUBLE
73878: LD_INT 1
73880: DEC
73881: ST_TO_ADDR
73882: LD_INT 8
73884: PUSH
73885: FOR_TO
73886: IFFALSE 73943
// if mpSidePositions [ i ] then
73888: LD_EXP 7
73892: PUSH
73893: LD_VAR 0 2
73897: ARRAY
73898: IFFALSE 73941
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
73900: LD_ADDR_VAR 0 1
73904: PUSH
73905: LD_VAR 0 1
73909: PUSH
73910: LD_STRING #KingoftheHill-Player
73912: PUSH
73913: LD_VAR 0 2
73917: PUSH
73918: LD_EXP 115
73922: PUSH
73923: LD_VAR 0 2
73927: ARRAY
73928: PUSH
73929: LD_EXP 34
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: ADD
73940: ST_TO_ADDR
73941: GO 73885
73943: POP
73944: POP
// end ; mpDisplayStrings := result ;
73945: LD_ADDR_EXP 37
73949: PUSH
73950: LD_VAR 0 1
73954: ST_TO_ADDR
// end ;
73955: LD_VAR 0 1
73959: RET
// export function HowMuchPointsKing ( side ) ; begin
73960: LD_INT 0
73962: PPUSH
// result := HowMuchPoints ( side ) ;
73963: LD_ADDR_VAR 0 2
73967: PUSH
73968: LD_VAR 0 1
73972: PPUSH
73973: CALL 73983 0 1
73977: ST_TO_ADDR
// end ;
73978: LD_VAR 0 2
73982: RET
// function HowMuchPoints ( side ) ; var i ; begin
73983: LD_INT 0
73985: PPUSH
73986: PPUSH
// if mpTeamGame then
73987: LD_EXP 11
73991: IFFALSE 74060
// begin for i := 1 to Count ( mpTeams ) do
73993: LD_ADDR_VAR 0 3
73997: PUSH
73998: DOUBLE
73999: LD_INT 1
74001: DEC
74002: ST_TO_ADDR
74003: LD_EXP 10
74007: PPUSH
74008: CALL 10986 0 1
74012: PUSH
74013: FOR_TO
74014: IFFALSE 74056
// begin if side in mpTeams [ i ] then
74016: LD_VAR 0 1
74020: PUSH
74021: LD_EXP 10
74025: PUSH
74026: LD_VAR 0 3
74030: ARRAY
74031: IN
74032: IFFALSE 74054
// begin result := mpKingPoints [ i ] ;
74034: LD_ADDR_VAR 0 2
74038: PUSH
74039: LD_EXP 115
74043: PUSH
74044: LD_VAR 0 3
74048: ARRAY
74049: ST_TO_ADDR
// exit ;
74050: POP
74051: POP
74052: GO 74076
// end ; end ;
74054: GO 74013
74056: POP
74057: POP
// end else
74058: GO 74076
// result := mpKingPoints [ side ] ;
74060: LD_ADDR_VAR 0 2
74064: PUSH
74065: LD_EXP 115
74069: PUSH
74070: LD_VAR 0 1
74074: ARRAY
74075: ST_TO_ADDR
// end ;
74076: LD_VAR 0 2
74080: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
74081: LD_EXP 38
74085: PUSH
74086: CALL 74408 0 0
74090: AND
74091: PUSH
74092: LD_OWVAR 4
74096: AND
74097: IFFALSE 74333
74099: GO 74101
74101: DISABLE
74102: LD_INT 0
74104: PPUSH
74105: PPUSH
// begin canWin := false ;
74106: LD_ADDR_VAR 0 2
74110: PUSH
74111: LD_INT 0
74113: ST_TO_ADDR
// if not HasPower ( your_side ) then
74114: LD_OWVAR 2
74118: PPUSH
74119: CALL 74448 0 1
74123: NOT
74124: IFFALSE 74135
// begin Multiplayer_Loose_Message ;
74126: CALL_OW 521
// enable ( mpLose ) ;
74130: LD_INT 102
74132: ENABLE_MARKED
// end else
74133: GO 74333
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
74135: LD_ADDR_VAR 0 2
74139: PUSH
74140: LD_OWVAR 2
74144: PPUSH
74145: CALL 73983 0 1
74149: PUSH
74150: LD_EXP 34
74154: GREATEREQUAL
74155: PUSH
74156: LD_OWVAR 2
74160: PPUSH
74161: CALL 74448 0 1
74165: AND
74166: PUSH
74167: CALL 74336 0 0
74171: NOT
74172: OR
74173: ST_TO_ADDR
// for i := 1 to 8 do
74174: LD_ADDR_VAR 0 1
74178: PUSH
74179: DOUBLE
74180: LD_INT 1
74182: DEC
74183: ST_TO_ADDR
74184: LD_INT 8
74186: PUSH
74187: FOR_TO
74188: IFFALSE 74319
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
74190: LD_EXP 7
74194: PUSH
74195: LD_VAR 0 1
74199: ARRAY
74200: PUSH
74201: LD_VAR 0 1
74205: PPUSH
74206: CALL_OW 108
74210: AND
74211: PUSH
74212: LD_VAR 0 1
74216: PUSH
74217: LD_OWVAR 2
74221: NONEQUAL
74222: AND
74223: IFFALSE 74317
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
74225: LD_EXP 8
74229: PUSH
74230: LD_VAR 0 1
74234: ARRAY
74235: NOT
74236: PUSH
74237: LD_EXP 8
74241: PUSH
74242: LD_VAR 0 1
74246: ARRAY
74247: PUSH
74248: LD_EXP 8
74252: PUSH
74253: LD_OWVAR 2
74257: ARRAY
74258: NONEQUAL
74259: PUSH
74260: LD_OWVAR 2
74264: PPUSH
74265: LD_VAR 0 1
74269: PPUSH
74270: CALL_OW 81
74274: PUSH
74275: LD_INT 1
74277: NONEQUAL
74278: AND
74279: OR
74280: IFFALSE 74317
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
74282: LD_VAR 0 1
74286: PPUSH
74287: CALL 73983 0 1
74291: PUSH
74292: LD_EXP 34
74296: GREATEREQUAL
74297: PUSH
74298: LD_VAR 0 1
74302: PPUSH
74303: CALL 74448 0 1
74307: AND
74308: IFFALSE 74317
// begin enable ( mpLose ) ;
74310: LD_INT 102
74312: ENABLE_MARKED
// exit ;
74313: POP
74314: POP
74315: GO 74333
// end ;
74317: GO 74187
74319: POP
74320: POP
// if canWin then
74321: LD_VAR 0 2
74325: IFFALSE 74332
// enable ( mpWin ) else
74327: LD_INT 101
74329: ENABLE_MARKED
74330: GO 74333
// enable ;
74332: ENABLE
// end ; end ;
74333: PPOPN 2
74335: END
// function EnemiesInGame ; var i ; begin
74336: LD_INT 0
74338: PPUSH
74339: PPUSH
// result := false ;
74340: LD_ADDR_VAR 0 1
74344: PUSH
74345: LD_INT 0
74347: ST_TO_ADDR
// for i := 1 to 8 do
74348: LD_ADDR_VAR 0 2
74352: PUSH
74353: DOUBLE
74354: LD_INT 1
74356: DEC
74357: ST_TO_ADDR
74358: LD_INT 8
74360: PUSH
74361: FOR_TO
74362: IFFALSE 74401
// if i <> your_side and HasPower ( i ) then
74364: LD_VAR 0 2
74368: PUSH
74369: LD_OWVAR 2
74373: NONEQUAL
74374: PUSH
74375: LD_VAR 0 2
74379: PPUSH
74380: CALL 74448 0 1
74384: AND
74385: IFFALSE 74399
// begin result := true ;
74387: LD_ADDR_VAR 0 1
74391: PUSH
74392: LD_INT 1
74394: ST_TO_ADDR
// exit ;
74395: POP
74396: POP
74397: GO 74403
// end ;
74399: GO 74361
74401: POP
74402: POP
// end ;
74403: LD_VAR 0 1
74407: RET
// function CanWinLoose ; begin
74408: LD_INT 0
74410: PPUSH
// result := true ;
74411: LD_ADDR_VAR 0 1
74415: PUSH
74416: LD_INT 1
74418: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
74419: CALL_OW 531
74423: PUSH
74424: CALL_OW 519
74428: PUSH
74429: LD_INT 1
74431: GREATER
74432: AND
74433: IFFALSE 74443
// result := false ;
74435: LD_ADDR_VAR 0 1
74439: PUSH
74440: LD_INT 0
74442: ST_TO_ADDR
// end ;
74443: LD_VAR 0 1
74447: RET
// function HasPower ( i ) ; begin
74448: LD_INT 0
74450: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
74451: LD_ADDR_VAR 0 2
74455: PUSH
74456: LD_INT 22
74458: PUSH
74459: LD_VAR 0 1
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 2
74470: PUSH
74471: LD_INT 21
74473: PUSH
74474: LD_INT 1
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 33
74483: PUSH
74484: LD_INT 3
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 33
74493: PUSH
74494: LD_INT 5
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PPUSH
74511: CALL_OW 69
74515: ST_TO_ADDR
// end ;
74516: LD_VAR 0 2
74520: RET
